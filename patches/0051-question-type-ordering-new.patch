From 92a85ce4a18563cf6261ac92dd79f44e11488f14 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Wed, 11 Oct 2017 21:32:39 +0300
Subject: [PATCH 51/95] question/type/ordering (new)

---
 question/type/ordering/backup/moodle1/lib.php      |  67 ++
 .../moodle2/backup_qtype_ordering_plugin.class.php |  71 ++
 .../restore_qtype_ordering_plugin.class.php        |  94 +++
 question/type/ordering/db/install.xml              |  25 +
 question/type/ordering/db/upgrade.php              | 225 ++++++
 question/type/ordering/edit_ordering_form.php      | 433 ++++++++++++
 question/type/ordering/jquery/jquery-ui.js         |   7 +
 .../type/ordering/jquery/jquery-ui.touch-punch.js  |  11 +
 question/type/ordering/jquery/jquery.js            |   4 +
 question/type/ordering/jquery/plugins.php          |  27 +
 question/type/ordering/lang/en/qtype_ordering.php  |  92 +++
 question/type/ordering/lib.php                     |  42 ++
 question/type/ordering/pix/icon.gif                | Bin 0 -> 908 bytes
 question/type/ordering/question.php                | 754 ++++++++++++++++++++
 question/type/ordering/questiontype.php            | 774 +++++++++++++++++++++
 question/type/ordering/readme.txt                  |  37 +
 question/type/ordering/renderer.php                | 492 +++++++++++++
 question/type/ordering/settings.php                |  30 +
 question/type/ordering/styles.css                  |  93 +++
 question/type/ordering/version.php                 |  33 +
 20 files changed, 3311 insertions(+)
 create mode 100755 question/type/ordering/backup/moodle1/lib.php
 create mode 100755 question/type/ordering/backup/moodle2/backup_qtype_ordering_plugin.class.php
 create mode 100755 question/type/ordering/backup/moodle2/restore_qtype_ordering_plugin.class.php
 create mode 100755 question/type/ordering/db/install.xml
 create mode 100755 question/type/ordering/db/upgrade.php
 create mode 100755 question/type/ordering/edit_ordering_form.php
 create mode 100755 question/type/ordering/jquery/jquery-ui.js
 create mode 100755 question/type/ordering/jquery/jquery-ui.touch-punch.js
 create mode 100755 question/type/ordering/jquery/jquery.js
 create mode 100755 question/type/ordering/jquery/plugins.php
 create mode 100755 question/type/ordering/lang/en/qtype_ordering.php
 create mode 100755 question/type/ordering/lib.php
 create mode 100755 question/type/ordering/pix/icon.gif
 create mode 100755 question/type/ordering/question.php
 create mode 100755 question/type/ordering/questiontype.php
 create mode 100755 question/type/ordering/readme.txt
 create mode 100755 question/type/ordering/renderer.php
 create mode 100755 question/type/ordering/settings.php
 create mode 100755 question/type/ordering/styles.css
 create mode 100755 question/type/ordering/version.php

diff --git a/question/type/ordering/backup/moodle1/lib.php b/question/type/ordering/backup/moodle1/lib.php
new file mode 100755
index 0000000..591b4bf
--- /dev/null
+++ b/question/type/ordering/backup/moodle1/lib.php
@@ -0,0 +1,67 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question type conversion handler
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Ordering question type conversion handler class
+ *
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class moodle1_qtype_ordering_handler extends moodle1_qtype_handler {
+
+    /**
+     * Returns the list of paths within one <QUESTION> that this qtype needs to have included
+     * in the grouped question structure
+     *
+     * @return array of strings
+     */
+    public function get_question_subpaths() {
+        return array(
+            'ANSWERS/ANSWER',
+            'ORDERING',
+        );
+    }
+
+    /**
+     * Gives the qtype handler a chance to write converted data into questions.xml
+     *
+     * @param array $data grouped question data
+     * @param array $raw grouped raw QUESTION data
+     */
+    public function process_question(array $data, array $raw) {
+
+        // Convert and write the answers first.
+        if (isset($data['answers'])) {
+            $this->write_answers($data['answers'], $this->pluginname);
+        }
+
+        // Convert and write the ordering extra fields.
+        foreach ($data['ordering'] as $ordering) {
+            $ordering['id'] = $this->converter->get_nextid();
+            $this->write_xml('ordering', $ordering, array('/ordering/id'));
+        }
+    }
+}
diff --git a/question/type/ordering/backup/moodle2/backup_qtype_ordering_plugin.class.php b/question/type/ordering/backup/moodle2/backup_qtype_ordering_plugin.class.php
new file mode 100755
index 0000000..1686685
--- /dev/null
+++ b/question/type/ordering/backup/moodle2/backup_qtype_ordering_plugin.class.php
@@ -0,0 +1,71 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question type backup handler
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Provides the information to backup ordering questions
+ *
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class backup_qtype_ordering_plugin extends backup_qtype_plugin {
+
+    /**
+     * Returns the qtype information to attach to question element
+     */
+    protected function define_question_plugin_structure() {
+
+        // Define the virtual plugin element with the condition to fulfill.
+        $plugin = $this->get_plugin_element(null, '../../qtype', 'ordering');
+
+        // Create one standard named plugin element (the visible container).
+        $pluginwrapper = new backup_nested_element($this->get_recommended_name());
+
+        // Connect the visible container ASAP.
+        $plugin->add_child($pluginwrapper);
+
+        // This qtype uses standard question_answers, add them here
+        // to the tree before any other information that will use them.
+        $this->add_question_question_answers($pluginwrapper);
+
+        // Now create the qtype own structures.
+        $fields = array('layouttype', 'selecttype', 'selectcount', 'gradingtype',
+                        'correctfeedback', 'correctfeedbackformat',
+                        'incorrectfeedback', 'incorrectfeedbackformat',
+                        'partiallycorrectfeedback', 'partiallycorrectfeedbackformat');
+        $ordering = new backup_nested_element('ordering', array('id'), $fields);
+
+        // Now the own qtype tree.
+        $pluginwrapper->add_child($ordering);
+
+        // Set source to populate the data.
+        $params = array('questionid' => backup::VAR_PARENTID);
+        $ordering->set_source_table('qtype_ordering_options', $params);
+
+        // Don't need to annotate ids nor files.
+
+        return $plugin;
+    }
+}
diff --git a/question/type/ordering/backup/moodle2/restore_qtype_ordering_plugin.class.php b/question/type/ordering/backup/moodle2/restore_qtype_ordering_plugin.class.php
new file mode 100755
index 0000000..ae0fc22
--- /dev/null
+++ b/question/type/ordering/backup/moodle2/restore_qtype_ordering_plugin.class.php
@@ -0,0 +1,94 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question type restore handler
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Restore plugin class that provides the necessary information needed to restore one ordering qtype plugin
+ *
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class restore_qtype_ordering_plugin extends restore_qtype_plugin {
+
+    /**
+     * Returns the paths to be handled by the plugin at question level
+     */
+    protected function define_question_plugin_structure() {
+
+        $paths = array();
+
+        // This qtype uses question_answers, add them.
+        $this->add_question_question_answers($paths);
+
+        // Add own qtype stuff.
+        $elename = 'ordering';
+        $elepath = $this->get_pathfor('/ordering'); // We used get_recommended_name() so this works.
+        $paths[] = new restore_path_element($elename, $elepath);
+
+        return $paths; // And we return the interesting paths.
+    }
+
+    /**
+     * Process the qtype/ordering element
+     *
+     * @param array $data
+     */
+    public function process_ordering($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        // Detect if the question is created or mapped
+        // "question" is the XML tag name, not the DB field name.
+        $oldquestionid   = $this->get_old_parentid('question');
+        $newquestionid   = $this->get_new_parentid('question');
+
+        // If the question has been created by restore,
+        // we need to create a "qtype_ordering_options" record
+        // and create a mapping from the $oldid to the $newid.
+        if ($this->get_mappingid('question_created', $oldquestionid)) {
+            $data->questionid = $newquestionid;
+            $newid = $DB->insert_record('qtype_ordering_options', $data);
+            $this->set_mapping('qtype_ordering_options', $oldid, $newid);
+        }
+    }
+
+    /**
+     * Given one question_states record, return the answer
+     * recoded pointing to all the restored stuff for ordering questions.
+     * If not empty, answer is one question_answers->id.
+     *
+     * @param object $state
+     */
+    public function recode_legacy_state_answer($state) {
+        $answer = $state->answer;
+        $result = '';
+        if ($answer) {
+            $result = $this->get_mappingid('question_answer', $answer);
+        }
+        return $result;
+    }
+}
diff --git a/question/type/ordering/db/install.xml b/question/type/ordering/db/install.xml
new file mode 100755
index 0000000..d112617
--- /dev/null
+++ b/question/type/ordering/db/install.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="question/type/ordering/db" VERSION="2007021402" COMMENT="XMLDB file for Moodle question/type/ordering">
+  <TABLES>
+    <TABLE NAME="qtype_ordering_options" COMMENT="Options for ordering questions">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="questionid"/>
+        <FIELD NAME="questionid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="id" NEXT="layouttype"/>
+        <FIELD NAME="layouttype" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" PREVIOUS="questionid" NEXT="selecttype"/>
+        <FIELD NAME="selecttype" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" PREVIOUS="layouttype" NEXT="selectcount"/>
+        <FIELD NAME="selectcount" TYPE="int" LENGTH="4" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" PREVIOUS="selecttype" NEXT="gradingtype"/>
+        <FIELD NAME="gradingtype" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" PREVIOUS="selectcount" NEXT="correctfeedback"/>
+        <FIELD NAME="correctfeedback" TYPE="text" LENGTH="small" NOTNULL="false" SEQUENCE="false" PREVIOUS="gradingtype" NEXT="correctfeedbackformat"/>
+        <FIELD NAME="correctfeedbackformat" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" PREVIOUS="correctfeedback" NEXT="incorrectfeedback"/>
+        <FIELD NAME="incorrectfeedback" TYPE="text" LENGTH="small" NOTNULL="false" SEQUENCE="false" PREVIOUS="correctfeedbackformat" NEXT="incorrectfeedbackformat"/>
+        <FIELD NAME="incorrectfeedbackformat" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" PREVIOUS="incorrectfeedback" NEXT="partiallycorrectfeedback"/>
+        <FIELD NAME="partiallycorrectfeedback" TYPE="text" LENGTH="small" NOTNULL="false" SEQUENCE="false" PREVIOUS="incorrectfeedbackformat" NEXT="partiallycorrectfeedbackformat"/>
+        <FIELD NAME="partiallycorrectfeedbackformat" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" PREVIOUS="partiallycorrectfeedback"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for question_ordering" NEXT="question"/>
+        <KEY NAME="question" TYPE="foreign-unique" FIELDS="questionid" REFTABLE="question" REFFIELDS="id" PREVIOUS="primary"/>
+      </KEYS>
+    </TABLE>
+  </TABLES>
+</XMLDB>
diff --git a/question/type/ordering/db/upgrade.php b/question/type/ordering/db/upgrade.php
new file mode 100755
index 0000000..2793f0b
--- /dev/null
+++ b/question/type/ordering/db/upgrade.php
@@ -0,0 +1,225 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question type db upgrade script
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Upgrade code for the ordering question type.
+ *
+ * @param int $oldversion the version we are upgrading from.
+ */
+function xmldb_qtype_ordering_upgrade($oldversion) {
+    global $CFG, $DB;
+
+    $dbman = $DB->get_manager();
+
+    $newversion = 2013062800;
+    if ($oldversion < $newversion) {
+        $select = 'qn.*, qo.id AS questionorderingid';
+        $from   = '{question} qn LEFT JOIN {question_ordering} qo ON qn.id = qo.question';
+        $where  = 'qn.qtype = ? AND qo.id IS NULL';
+        $params = array('ordering');
+        if ($questions = $DB->get_records_sql("SELECT $select FROM $from WHERE $where", $params)) {
+            foreach ($questions as $question) {
+                if ($answers = $DB->get_records('question_answers', array('question' => $question->id))) {
+                    // Add "options" for this ordering question.
+                    $questionordering = (object) array(
+                        'question'   => $question->id,
+                        'logical'    => 1,
+                        'studentsee' => min(6, count($answers)),
+                        'correctfeedback' => '',
+                        'partiallycorrectfeedback' => '',
+                        'incorrectfeedback' => ''
+                    );
+                    $questionordering->id = $DB->insert_record('question_ordering', $questionordering);
+                } else {
+                    // This is a faulty ordering question - remove it.
+                    $DB->delete_records('question', array('id' => $question->id));
+                    if ($dbman->table_exists('quiz_question_instances')) {
+                        $DB->delete_records('quiz_question_instances', array('question' => $question->id));
+                    }
+                    if ($dbman->table_exists('reader_question_instances')) {
+                        $DB->delete_records('reader_question_instances', array('question' => $question->id));
+                    }
+                }
+            }
+        }
+        upgrade_plugin_savepoint(true, $newversion, 'qtype', 'ordering');
+    }
+
+    $newversion = 2015011915;
+    if ($oldversion < $newversion) {
+
+        // Rename "ordering" table for Moodle >= 2.5.
+        $oldname = 'question_ordering';
+        $newname = 'qtype_ordering_options';
+
+        if ($dbman->table_exists($oldname)) {
+            $oldtable = new xmldb_table($oldname);
+            if ($dbman->table_exists($newname)) {
+                $dbman->drop_table($oldtable);
+            } else {
+                $dbman->rename_table($oldtable, $newname);
+            }
+        }
+
+        // Remove index on question(id) field (because we want to modify the field).
+        $table = new xmldb_table('qtype_ordering_options');
+        $fields = array('question', 'questionid');
+        foreach ($fields as $field) {
+            if ($dbman->field_exists($table, $field)) {
+                $index = new xmldb_index('qtypordeopti_que_uix', XMLDB_INDEX_UNIQUE, array($field));
+                if ($dbman->index_exists($table, $index)) {
+                    $dbman->drop_index($table, $index);
+                }
+            }
+        }
+
+        // Rename "question"   -> "questionid".
+        // Rename "logical"    -> "selecttype".
+        // Rename "studentsee" -> "selectcount".
+        // Add    "(xxx)feedbackformat" fields.
+        $table = new xmldb_table('qtype_ordering_options');
+        $fields = array(
+            'questionid' => new xmldb_field('question', XMLDB_TYPE_INTEGER, '11', null, XMLDB_NOTNULL, null, '0', 'id'),
+            'selecttype' => new xmldb_field('logical', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, '0', 'questionid'),
+            'selectcount' => new xmldb_field('studentsee', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, '0', 'selecttype'),
+            'correctfeedbackformat' => new xmldb_field('correctfeedbackformat', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null,
+                    '0', 'correctfeedback'),
+            'incorrectfeedbackformat' => new xmldb_field('incorrectfeedbackformat', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL,
+                    null, '0', 'incorrectfeedback'),
+            'partiallycorrectfeedbackformat' => new xmldb_field('partiallycorrectfeedbackformat', XMLDB_TYPE_INTEGER, '2', null,
+                    XMLDB_NOTNULL, null, '0', 'partiallycorrectfeedback')
+        );
+        foreach ($fields as $newname => $field) {
+            $oldexists = $dbman->field_exists($table, $field);
+            $newexists = $dbman->field_exists($table, $newname);
+            if ($field->getName() != $newname && $oldexists) {
+                if ($newexists) {
+                    $dbman->drop_field($table, $field);
+                } else {
+                    $dbman->rename_field($table, $field, $newname);
+                    $newexists = true;
+                }
+                $oldexists = false;
+            }
+            $field->setName($newname);
+            if ($newexists) {
+                $dbman->change_field_type($table, $field);
+            } else {
+                $dbman->add_field($table, $field);
+            }
+        }
+
+        // Make sure there are no duplicate "questionid" fields in "qtype_ordering_options" table.
+        $select = 'questionid, COUNT(*) AS countduplicates, MAX(id) AS maxid';
+        $from   = '{qtype_ordering_options}';
+        $group  = 'questionid';
+        $having = 'countduplicates > ?';
+        $params = array(1);
+        if ($records = $DB->get_records_sql("SELECT $select FROM $from GROUP BY $group HAVING $having", $params)) {
+            foreach ($records as $record) {
+                $select = 'id <> ? AND questionid = ?';
+                $params = array($record->maxid, $record->questionid);
+                $DB->delete_records_select('qtype_ordering_options', $select, $params);
+            }
+        }
+
+        // Restore index on questionid field.
+        $table = new xmldb_table('qtype_ordering_options');
+        $index = new xmldb_index('qtypordeopti_que_uix', XMLDB_INDEX_UNIQUE, array('questionid'));
+        if (! $dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        upgrade_plugin_savepoint(true, $newversion, 'qtype', 'ordering');
+    }
+
+    $newversion = 2015110725;
+    if ($oldversion < $newversion) {
+        $table = new xmldb_table('qtype_ordering_options');
+        $fields = array(
+            new xmldb_field('layouttype', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, 0, 'questionid'),
+            new xmldb_field('selecttype', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, 0, 'layouttype')
+        );
+        foreach ($fields as $field) {
+            if ($dbman->field_exists($table, $field)) {
+                $dbman->change_field_type($table, $field);
+            } else {
+                $dbman->add_field($table, $field);
+            }
+        }
+        upgrade_plugin_savepoint(true, $newversion, 'qtype', 'ordering');
+    }
+
+    $newversion = 2015121734;
+    if ($oldversion < $newversion) {
+        $table = new xmldb_table('qtype_ordering_options');
+        $fields = array(
+            new xmldb_field('gradingtype', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, 0, 'selectcount')
+        );
+        foreach ($fields as $field) {
+            if ($dbman->field_exists($table, $field)) {
+                $dbman->change_field_type($table, $field);
+            } else {
+                $dbman->add_field($table, $field);
+                // When adding this field to existing records,
+                // the gradingtype is set to whatever the selecttype is.
+                $DB->execute('UPDATE {qtype_ordering_options} SET gradingtype = selecttype', array());
+            }
+        }
+        upgrade_plugin_savepoint(true, $newversion, 'qtype', 'ordering');
+    }
+
+    $newversion = 2016032949;
+    if ($oldversion < $newversion) {
+        if ($dbman->table_exists('reader_question_instances')) {
+            $select = 'rqi.question, COUNT(*) AS countquestion';
+            $from   = '{reader_question_instances} rqi '.
+                      'LEFT JOIN {question} q ON rqi.question = q.id';
+            $where  = 'q.qtype = ?';
+            $group  = 'rqi.question';
+            $params = array('ordering');
+            if ($questions = $DB->get_records_sql("SELECT $select FROM $from WHERE $where GROUP BY $group", $params)) {
+                $questions = array_keys($questions);
+                list($select, $params) = $DB->get_in_or_equal($questions);
+                $select = "questionid $select";
+                $table = 'qtype_ordering_options';
+                $DB->set_field_select($table, 'layouttype',  0, $select, $params); // VERTICAL.
+                $DB->set_field_select($table, 'selecttype',  1, $select, $params); // RANDOM.
+                $DB->set_field_select($table, 'gradingtype', 1, $select, $params); // RELATIVE.
+
+                // For selectcount, we only fix the value, if it is zero (=ALL)
+                // because Ordering questions for some low level books use 4.
+                $select .= ' AND selectcount = ?';
+                $params[] = 0;
+                $DB->set_field_select($table, 'selectcount', 6, $select, $params); // Six.
+            }
+        }
+    }
+
+    return true;
+}
+
+
diff --git a/question/type/ordering/edit_ordering_form.php b/question/type/ordering/edit_ordering_form.php
new file mode 100755
index 0000000..c0af4bb
--- /dev/null
+++ b/question/type/ordering/edit_ordering_form.php
@@ -0,0 +1,433 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Defines the editing form for the ordering question type.
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Prevent direct access to this script.
+defined('MOODLE_INTERNAL') || die();
+
+// Include required files.
+require_once($CFG->dirroot.'/question/type/ordering/question.php');
+
+/**
+ * Ordering editing form definition
+ *
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_ordering_edit_form extends question_edit_form {
+
+    /** Rows count in answer field */
+    const NUM_ANS_ROWS = 2;
+
+    /** Cols count in answer field */
+    const NUM_ANS_COLS = 60;
+
+    /** Number of answers in question by default */
+    const NUM_ANS_DEFAULT = 6;
+
+    /** Minimal number of answers to show */
+    const NUM_ANS_MIN = 3;
+
+    /** Number of answers to add on demand */
+    const NUM_ANS_ADD = 3;
+
+    /**
+     * Unique name for this question type
+     *
+     * @return the question type name, should be the same as the name() method
+     *      in the question type class.
+     */
+    public function qtype() {
+        return 'ordering';
+    }
+
+    /**
+     * Add question-type specific form fields.
+     *
+     * @param object $mform the form being built.
+     */
+    public function definition_inner($mform) {
+
+        // Cache this plugins name.
+        $plugin = 'qtype_ordering';
+
+        // Field for layouttype.
+        $name = 'layouttype';
+        $label = get_string($name, $plugin);
+        $options = qtype_ordering_question::get_layout_types();
+        $mform->addElement('select', $name, $label, $options);
+        $mform->addHelpButton($name, $name, $plugin);
+        $mform->setDefault($name, $this->get_default_value($name, qtype_ordering_question::LAYOUT_VERTICAL));
+
+        // Field for selecttype.
+        $name = 'selecttype';
+        $label = get_string($name, $plugin);
+        $options = qtype_ordering_question::get_select_types();
+        $mform->addElement('select', $name, $label, $options);
+        $mform->addHelpButton($name, $name, $plugin);
+        $mform->setDefault($name, $this->get_default_value($name, qtype_ordering_question::SELECT_ALL));
+
+        // Field for selectcount.
+        $name = 'selectcount';
+        $label = get_string($name, $plugin);
+        $options = array(0 => get_string('all'));
+        for ($i = 3; $i <= 20; $i++) {
+            $options[$i] = $i;
+        }
+        $mform->addElement('select', $name, $label, $options);
+        $mform->disabledIf($name, 'selecttype', 'eq', 0);
+        $mform->addHelpButton($name, $name, $plugin);
+        $mform->setDefault($name, 6);
+
+        // Field for gradingtype.
+        $name = 'gradingtype';
+        $label = get_string($name, $plugin);
+        $options = qtype_ordering_question::get_grading_types();
+        $mform->addElement('select', $name, $label, $options);
+        $mform->addHelpButton($name, $name, $plugin);
+        $mform->setDefault($name, $this->get_default_value($name, qtype_ordering_question::GRADING_ABSOLUTE_POSITION));
+
+        $elements = array();
+        $options = array();
+
+        $name = 'answerheader';
+        $label = get_string($name, $plugin);
+        $elements[] = $mform->createElement('header', $name, $label);
+        $options[$name] = array('expanded' => true);
+
+        $name = 'answer';
+        $elements[] = $mform->createElement('editor', $name, $label, $this->get_editor_attributes(), $this->get_editor_options());
+        $elements[] = $mform->createElement('submit', $name . 'removeeditor', get_string('removeeditor', $plugin),
+                array('onclick' => 'skipClientValidation = true;'));
+        $options[$name] = array('type' => PARAM_RAW);
+
+        $repeats = $this->get_answer_repeats($this->question);
+        $label = get_string('addmoreanswers', $plugin, self::NUM_ANS_ADD); // Button text.
+        $this->repeat_elements($elements, $repeats, $options, 'countanswers', 'addanswers', self::NUM_ANS_ADD, $label);
+
+        if (optional_param('addanswers', 0, PARAM_RAW)) {
+            $repeats += self::NUM_ANS_ADD;
+        }
+
+        // Adjust HTML editor and removal buttons.
+        $this->adjust_html_editors($mform, $name, $repeats);
+
+        // Adding feedback fields.
+        $this->add_combined_feedback_fields(false);
+
+        // Adding interactive settings.
+        $this->add_interactive_settings(false, false);
+    }
+
+    /**
+     * Returns answer repeats count
+     *
+     * @param object $question
+     * @return int
+     */
+    protected function get_answer_repeats($question) {
+        if (isset($question->id)) {
+            $repeats = count($question->options->answers);
+        } else {
+            $repeats = self::NUM_ANS_DEFAULT;
+        }
+        if ($repeats < self::NUM_ANS_MIN) {
+            $repeats = self::NUM_ANS_MIN;
+        }
+        return $repeats;
+    }
+
+    /**
+     * Returns editor attributes
+     *
+     * @return array
+     */
+    protected function get_editor_attributes() {
+        return array(
+            'rows'  => self::NUM_ANS_ROWS,
+            'cols'  => self::NUM_ANS_COLS
+        );
+    }
+
+    /**
+     * Returns editor options
+     *
+     * @return array
+     */
+    protected function get_editor_options() {
+        return array(
+            'context'  => $this->context,
+            'maxfiles' => EDITOR_UNLIMITED_FILES,
+            'noclean'  => true
+        );
+    }
+
+    /**
+     * Resets editor format to specified
+     *
+     * @param object $editor
+     * @param int $format
+     * @return int
+     */
+    protected function reset_editor_format($editor, $format=FORMAT_MOODLE) {
+        $value = $editor->getValue();
+        $value['format'] = $format;
+        $value = $editor->setValue($value);
+        return $format;
+    }
+
+    /**
+     * Adjust HTML editor and removal buttons.
+     *
+     * @param object $mform
+     * @param string $name
+     * @param int $repeats
+     */
+    protected function adjust_html_editors($mform, $name, $repeats) {
+
+        // Cache the number of formats supported
+        // by the preferred editor for each format.
+        $count = array();
+
+        if (isset($this->question->options->answers)) {
+            $ids = array_keys($this->question->options->answers);
+        } else {
+            $ids = array();
+        }
+
+        $defaultanswerformat = get_config('qtype_ordering', 'defaultanswerformat');
+
+        for ($i = 0; $i < $repeats; $i++) {
+
+            $editor = $name . '[' . $i . ']';
+            if ($mform->elementExists($editor)) {
+                $editor = $mform->getElement($editor);
+
+                if (isset($ids[$i])) {
+                    $id = $ids[$i];
+                } else {
+                    $id = 0;
+                }
+
+                // The old/new name of the button to remove the HTML editor
+                // old : the name of the button when added by repeat_elements
+                // new : the simplified name of the button to satisfy "no_submit_button_pressed()" in lib/formslib.php.
+                $oldname = $name.'removeeditor['.$i.']';
+                $newname = $name.'removeeditor_'.$i;
+
+                // Remove HTML editor, if necessary.
+                if (optional_param($newname, 0, PARAM_RAW)) {
+                    $format = $this->reset_editor_format($editor, FORMAT_MOODLE);
+                    $_POST['answer'][$i]['format'] = $format; // Overwrite incoming data.
+                } else if ($id) {
+                    $format = $this->question->options->answers[$id]->answerformat;
+                } else {
+                    $format = $this->reset_editor_format($editor, $defaultanswerformat);
+                }
+
+                // Check we have a submit button - it should always be there !!
+                if ($mform->elementExists($oldname)) {
+                    if (! isset($count[$format])) {
+                        $editor = editors_get_preferred_editor($format);
+                        $count[$format] = $editor->get_supported_formats();
+                        $count[$format] = count($count[$format]);
+                    }
+                    if ($count[$format] > 1) {
+                        $mform->removeElement($oldname);
+                    } else {
+                        $submit = $mform->getElement($oldname);
+                        $submit->setName($newname);
+                    }
+                    $mform->registerNoSubmitButton($newname);
+                }
+            }
+        }
+    }
+
+    /**
+     * Perform an preprocessing needed on the data passed to {@link set_data()}
+     * before it is used to initialise the form.
+     * @param object $question the data being passed to the form.
+     * @return object $question the modified data.
+     */
+    public function data_preprocessing($question) {
+
+        $question = parent::data_preprocessing($question);
+        $question = $this->data_preprocessing_answers($question, true);
+
+        // Preprocess feedback.
+        $question = $this->data_preprocessing_combined_feedback($question);
+        $question = $this->data_preprocessing_hints($question, false, false);
+
+        // Preprocess answers and fractions.
+        $question->answer     = array();
+        $question->fraction   = array();
+
+        if (empty($question->options->answers)) {
+            $answerids = array();
+        } else {
+            $answerids = array_keys($question->options->answers);
+        }
+
+        $defaultanswerformat = get_config('qtype_ordering', 'defaultanswerformat');
+        $repeats = $this->get_answer_repeats($question);
+        for ($i = 0; $i < $repeats; $i++) {
+
+            if ($answerid = array_shift($answerids)) {
+                $answer = $question->options->answers[$answerid];
+            } else {
+                $answer = (object)array('answer' => '',
+                                        'answerformat' => $defaultanswerformat);
+                $answerid = 0;
+            }
+
+            if (empty($question->id)) {
+                $question->answer[$i] = $answer->answer;
+            } else {
+                $itemid = file_get_submitted_draft_itemid("answer[$i]");
+                $format = $answer->answerformat;
+                $text = file_prepare_draft_area($itemid, $this->context->id, 'question', 'answer',
+                                                $answerid, $this->editoroptions, $answer->answer);
+                $question->answer[$i] = array('text' => $text,
+                                              'format' => $format,
+                                              'itemid' => $itemid);
+            }
+            $question->fraction[$i] = ($i + 1);
+        }
+
+        // Defining default values.
+        $names = array(
+            'layouttype'  => qtype_ordering_question::LAYOUT_VERTICAL,
+            'selecttype'  => qtype_ordering_question::SELECT_ALL,
+            'selectcount' => 0, // 0 means all.
+            'gradingtype' => qtype_ordering_question::GRADING_ABSOLUTE_POSITION
+        );
+        foreach ($names as $name => $default) {
+            if (isset($question->options->$name)) {
+                $question->$name = $question->options->$name;
+            } else {
+                $question->$name = $this->get_default_value($name, $default);
+            }
+        }
+
+        return $question;
+    }
+
+    /**
+     * Form validation
+     *
+     * @param array $data array of ("fieldname"=>value) of submitted data
+     * @param array $files array of uploaded files "element_name"=>tmp_file_path
+     * @return array of "element_name"=>"error_description" if there are errors,
+     *         or an empty array if everything is OK (true allowed for backwards compatibility too).
+     */
+    public function validation($data, $files) {
+        $errors = array();
+        $plugin = 'qtype_ordering';
+
+        $answercount = 0;
+        foreach ($data['answer'] as $answer) {
+            if (is_array($answer)) {
+                $answer = $answer['text'];
+            }
+            if (trim($answer) == '') {
+                continue; // Skip empty answer.
+            }
+            $answercount++;
+        }
+
+        switch ($answercount) {
+            case 0: $errors['answer[0]'] = get_string('notenoughanswers', $plugin, 2);
+            case 1: $errors['answer[1]'] = get_string('notenoughanswers', $plugin, 2);
+        }
+
+        // If adding a new ordering question, update defaults.
+        if (empty($errors) && empty($data['id'])) {
+            $fields = array('layouttype', 'selecttype', 'selectcount', 'gradingtype');
+            foreach ($fields as $field) {
+                if (array_key_exists($field, $data)) {
+                    $this->set_default_value($field, $data[$field]);
+                }
+            }
+        }
+
+        return $errors;
+    }
+
+    /**
+     * Returns default value for item
+     *
+     * @param string $name Item name
+     * @param string|mixed|null $default Default value (optional, default = null)
+     * @return string|mixed|null Default value for field with this $name
+     */
+    protected function get_default_value($name, $default=null) {
+        return get_user_preferences("qtype_ordering_$name", $default);
+    }
+
+    /**
+     * Saves default value for item
+     *
+     * @param string $name Item name
+     * @param string|mixed|null $value
+     * @return bool Always true or exception
+     */
+    protected function set_default_value($name, $value) {
+        return set_user_preferences(array("qtype_ordering_$name" => $value));
+    }
+
+    /**
+     * This javascript could be useful for inserting buttons
+     * into the form once it has loaded in the browser
+     * however this means that the buttons are not recognized
+     * by the Moodle Form API
+     */
+    protected function unused_js() {
+        $removeeditor = 'Remove HTML editor';
+        $js = '';
+        $js .= '<script type="text/javascript">'."\n";
+        $js .= "//<![CDATA[\n";
+        $js .= "    var formatname = new RegExp('answer\\\\[(\\\\d+)\\\\]\\\\[format\\\\]');\n";
+        $js .= "    var inputs = document.getElementsByTagName('INPUT');\n";
+        $js .= "    for (var i=0; i<inputs.length; i++) {\n";
+        $js .= "        var input = inputs[i];\n";
+        $js .= "        if (input.type && input.type=='hidden') {\n";
+        $js .= "            var m = formatname.exec(input.name);\n";
+        $js .= "            if (m && m.length) {\n";
+        $js .= "                var submit = document.createElement('INPUT');\n";
+        $js .= "                submit.type = 'submit';\n";
+        $js .= "                submit.value = '$removeeditor';\n";
+        $js .= "                submit.format = input;\n";
+        $js .= "                submit.onclick = function() {\n";
+        $js .= "                    skipClientValidation = true;\n";
+        $js .= "                    this.format.value = 0;\n";
+        $js .= "                };\n";
+        $js .= "                input.parentNode.insertBefore(submit, input.nextSibling);\n";
+        $js .= "            }\n";
+        $js .= "        }\n";
+        $js .= "    }\n";
+        $js .= "//]]>\n";
+        $js .= "</script>\n";
+        $mform->addElement('html', $js);
+    }
+}
diff --git a/question/type/ordering/jquery/jquery-ui.js b/question/type/ordering/jquery/jquery-ui.js
new file mode 100755
index 0000000..4e1cccf
--- /dev/null
+++ b/question/type/ordering/jquery/jquery-ui.js
@@ -0,0 +1,7 @@
+/*! jQuery UI - v1.11.2 - 2014-11-29
+* http://jqueryui.com
+* Includes: core.js, widget.js, mouse.js, sortable.js
+* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */
+
+!function(t){"function"==typeof define&&define.amd?define(["jquery"],t):t(jQuery)}(function(t){function e(e,s){var n,o,r,h=e.nodeName.toLowerCase();return"area"===h?(n=e.parentNode,o=n.name,e.href&&o&&"map"===n.nodeName.toLowerCase()?(r=t("img[usemap='#"+o+"']")[0],!!r&&i(r)):!1):(/input|select|textarea|button|object/.test(h)?!e.disabled:"a"===h?e.href||s:s)&&i(e)}function i(e){return t.expr.filters.visible(e)&&!t(e).parents().addBack().filter(function(){return"hidden"===t.css(this,"visibility")}).length}t.ui=t.ui||{},t.extend(t.ui,{version:"1.11.2",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),t.fn.extend({scrollParent:function(e){var i=this.css("position"),s="absolute"===i,n=e?/(auto|scroll|hidden)/:/(auto|scroll)/,o=this.parents().filter(function(){var e=t(this);return s&&"static"===e.css("position")?!1:n.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==i&&o.length?o:t(this[0].ownerDocument||document)},uniqueId:function(){var t=0;return function(){return this.each(function(){this.id||(this.id="ui-id-"+(++t))})}}(),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&t(this).removeAttr("id")})}}),t.extend(t.expr[":"],{data:t.expr.createPseudo?t.expr.createPseudo(function(e){return function(i){return!!t.data(i,e)}}):function(e,i,s){return!!t.data(e,s[3])},focusable:function(i){return e(i,!isNaN(t.attr(i,"tabindex")))},tabbable:function(i){var s=t.attr(i,"tabindex"),n=isNaN(s);return(n||s>=0)&&e(i,!n)}}),t("<a>").outerWidth(1).jquery||t.each(["Width","Height"],function(e,i){function s(e,i,s,o){return t.each(n,function(){i-=parseFloat(t.css(e,"padding"+this))||0,s&&(i-=parseFloat(t.css(e,"border"+this+"Width"))||0),o&&(i-=parseFloat(t.css(e,"margin"+this))||0)}),i}var n="Width"===i?["Left","Right"]:["Top","Bottom"],o=i.toLowerCase(),r={innerWidth:t.fn.innerWidth,innerHeight:t.fn.innerHeight,outerWidth:t.fn.outerWidth,outerHeight:t.fn.outerHeight};t.fn["inner"+i]=function(e){return void 0===e?r["inner"+i].call(this):this.each(function(){t(this).css(o,s(this,e)+"px")})},t.fn["outer"+i]=function(e,n){return"number"!=typeof e?r["outer"+i].call(this,e):this.each(function(){t(this).css(o,s(this,e,!0,n)+"px")})}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t("<a>").data("a-b","a").removeData("a-b").data("a-b")&&(t.fn.removeData=function(e){return function(i){return arguments.length?e.call(this,t.camelCase(i)):e.call(this)}}(t.fn.removeData)),t.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase()),t.fn.extend({focus:function(e){return function(i,s){return"number"==typeof i?this.each(function(){var e=this;setTimeout(function(){t(e).focus(),s&&s.call(e)},i)}):e.apply(this,arguments)}}(t.fn.focus),disableSelection:function(){var t="onselectstart"in document.createElement("div")?"selectstart":"mousedown";return function(){return this.bind(t+".ui-disableSelection",function(t){t.preventDefault()})}}(),enableSelection:function(){return this.unbind(".ui-disableSelection")},zIndex:function(e){if(void 0!==e)return this.css("zIndex",e);if(this.length)for(var i,s,n=t(this[0]);n.length&&n[0]!==document;){if(i=n.css("position"),("absolute"===i||"relative"===i||"fixed"===i)&&(s=parseInt(n.css("zIndex"),10),!isNaN(s)&&0!==s))return s;n=n.parent()}return 0}}),t.ui.plugin={add:function(e,i,s){var n,o=t.ui[e].prototype;for(n in s)o.plugins[n]=o.plugins[n]||[],o.plugins[n].push([i,s[n]])},call:function(t,e,i,s){var n,o=t.plugins[e];if(o&&(s||t.element[0].parentNode&&11!==t.element[0].parentNode.nodeType))for(n=0;n<o.length;n++)t.options[o[n][0]]&&o[n][1].apply(t.element,i)}};var s=0,n=Array.prototype.slice;t.cleanData=function(e){return function(i){var s,n,o;for(o=0;null!=(n=i[o]);o++)try{s=t._data(n,"events"),s&&s.remove&&t(n).triggerHandler("remove")}catch(r){}e(i)}}(t.cleanData),t.widget=function(e,i,s){var n,o,r,h,a={},l=e.split(".")[0];return e=e.split(".")[1],n=l+"-"+e,s||(s=i,i=t.Widget),t.expr[":"][n.toLowerCase()]=function(e){return!!t.data(e,n)},t[l]=t[l]||{},o=t[l][e],r=t[l][e]=function(t,e){return this._createWidget?void(arguments.length&&this._createWidget(t,e)):new r(t,e)},t.extend(r,o,{version:s.version,_proto:t.extend({},s),_childConstructors:[]}),h=new i,h.options=t.widget.extend({},h.options),t.each(s,function(e,s){return t.isFunction(s)?void(a[e]=function(){var t=function(){return i.prototype[e].apply(this,arguments)},n=function(t){return i.prototype[e].apply(this,t)};return function(){var e,i=this._super,o=this._superApply;return this._super=t,this._superApply=n,e=s.apply(this,arguments),this._super=i,this._superApply=o,e}}()):void(a[e]=s)}),r.prototype=t.widget.extend(h,{widgetEventPrefix:o?h.widgetEventPrefix||e:e},a,{constructor:r,namespace:l,widgetName:e,widgetFullName:n}),o?(t.each(o._childConstructors,function(e,i){var s=i.prototype;t.widget(s.namespace+"."+s.widgetName,r,i._proto)}),delete o._childConstructors):i._childConstructors.push(r),t.widget.bridge(e,r),r},t.widget.extend=function(e){for(var i,s,o=n.call(arguments,1),r=0,h=o.length;h>r;r++)for(i in o[r])s=o[r][i],o[r].hasOwnProperty(i)&&void 0!==s&&(e[i]=t.isPlainObject(s)?t.isPlainObject(e[i])?t.widget.extend({},e[i],s):t.widget.extend({},s):s);return e},t.widget.bridge=function(e,i){var s=i.prototype.widgetFullName||e;t.fn[e]=function(o){var r="string"==typeof o,h=n.call(arguments,1),a=this;return o=!r&&h.length?t.widget.extend.apply(null,[o].concat(h)):o,this.each(r?function(){var i,n=t.data(this,s);return"instance"===o?(a=n,!1):n?t.isFunction(n[o])&&"_"!==o.charAt(0)?(i=n[o].apply(n,h),i!==n&&void 0!==i?(a=i&&i.jquery?a.pushStack(i.get()):i,!1):void 0):t.error("no such method '"+o+"' for "+e+" widget instance"):t.error("cannot call methods on "+e+" prior to initialization; attempted to call method '"+o+"'")}:function(){var e=t.data(this,s);e?(e.option(o||{}),e._init&&e._init()):t.data(this,s,new i(o,this))}),a}},t.Widget=function(){},t.Widget._childConstructors=[],t.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(e,i){i=t(i||this.defaultElement||this)[0],this.element=t(i),this.uuid=s++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=t(),this.hoverable=t(),this.focusable=t(),i!==this&&(t.data(i,this.widgetFullName,this),this._on(!0,this.element,{remove:function(t){t.target===i&&this.destroy()}}),this.document=t(i.style?i.ownerDocument:i.document||i),this.window=t(this.document[0].defaultView||this.document[0].parentWindow)),this.options=t.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:t.noop,_getCreateEventData:t.noop,_create:t.noop,_init:t.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(t.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:t.noop,widget:function(){return this.element},option:function(e,i){var s,n,o,r=e;if(0===arguments.length)return t.widget.extend({},this.options);if("string"==typeof e)if(r={},s=e.split("."),e=s.shift(),s.length){for(n=r[e]=t.widget.extend({},this.options[e]),o=0;o<s.length-1;o++)n[s[o]]=n[s[o]]||{},n=n[s[o]];if(e=s.pop(),1===arguments.length)return void 0===n[e]?null:n[e];n[e]=i}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];r[e]=i}return this._setOptions(r),this},_setOptions:function(t){var e;for(e in t)this._setOption(e,t[e]);return this},_setOption:function(t,e){return this.options[t]=e,"disabled"===t&&(this.widget().toggleClass(this.widgetFullName+"-disabled",!!e),e&&(this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus"))),this},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_on:function(e,i,s){var n,o=this;"boolean"!=typeof e&&(s=i,i=e,e=!1),s?(i=n=t(i),this.bindings=this.bindings.add(i)):(s=i,i=this.element,n=this.widget()),t.each(s,function(s,r){function h(){return e||o.options.disabled!==!0&&!t(this).hasClass("ui-state-disabled")?("string"==typeof r?o[r]:r).apply(o,arguments):void 0}"string"!=typeof r&&(h.guid=r.guid=r.guid||h.guid||t.guid++);var a=s.match(/^([\w:-]*)\s*(.*)$/),l=a[1]+o.eventNamespace,c=a[2];c?n.delegate(c,l,h):i.bind(l,h)})},_off:function(e,i){i=(i||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(i).undelegate(i),this.bindings=t(this.bindings.not(e).get()),this.focusable=t(this.focusable.not(e).get()),this.hoverable=t(this.hoverable.not(e).get())},_delay:function(t,e){function i(){return("string"==typeof t?s[t]:t).apply(s,arguments)}var s=this;return setTimeout(i,e||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){t(e.currentTarget).addClass("ui-state-hover")},mouseleave:function(e){t(e.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){t(e.currentTarget).addClass("ui-state-focus")},focusout:function(e){t(e.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(e,i,s){var n,o,r=this.options[e];if(s=s||{},i=t.Event(i),i.type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),i.target=this.element[0],o=i.originalEvent)for(n in o)n in i||(i[n]=o[n]);return this.element.trigger(i,s),!(t.isFunction(r)&&r.apply(this.element[0],[i].concat(s))===!1||i.isDefaultPrevented())}},t.each({show:"fadeIn",hide:"fadeOut"},function(e,i){t.Widget.prototype["_"+e]=function(s,n,o){"string"==typeof n&&(n={effect:n});var r,h=n?n===!0||"number"==typeof n?i:n.effect||i:e;n=n||{},"number"==typeof n&&(n={duration:n}),r=!t.isEmptyObject(n),n.complete=o,n.delay&&s.delay(n.delay),r&&t.effects&&t.effects.effect[h]?s[e](n):h!==e&&s[h]?s[h](n.duration,n.easing,o):s.queue(function(i){t(this)[e](),o&&o.call(s[0]),i()})}});var o=(t.widget,!1);t(document).mouseup(function(){o=!1});t.widget("ui.mouse",{version:"1.11.2",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var e=this;this.element.bind("mousedown."+this.widgetName,function(t){return e._mouseDown(t)}).bind("click."+this.widgetName,function(i){return!0===t.data(i.target,e.widgetName+".preventClickEvent")?(t.removeData(i.target,e.widgetName+".preventClickEvent"),i.stopImmediatePropagation(),!1):void 0}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!o){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var i=this,s=1===e.which,n="string"==typeof this.options.cancel&&e.target.nodeName?t(e.target).closest(this.options.cancel).length:!1;return s&&!n&&this._mouseCapture(e)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){i.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(e)!==!1,!this._mouseStarted)?(e.preventDefault(),!0):(!0===t.data(e.target,this.widgetName+".preventClickEvent")&&t.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(t){return i._mouseMove(t)},this._mouseUpDelegate=function(t){return i._mouseUp(t)},this.document.bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),o=!0,!0)):!0}},_mouseMove:function(e){if(this._mouseMoved){if(t.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button)return this._mouseUp(e);if(!e.which)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,e)!==!1,this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){return this.document.unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&t.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),o=!1,!1},_mouseDistanceMet:function(t){return Math.max(Math.abs(this._mouseDownEvent.pageX-t.pageX),Math.abs(this._mouseDownEvent.pageY-t.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}}),t.widget("ui.sortable",t.ui.mouse,{version:"1.11.2",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(t,e,i){return t>=e&&e+i>t},_isFloating:function(t){return/left|right/.test(t.css("float"))||/inline|table-cell/.test(t.css("display"))},_create:function(){var t=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?"x"===t.axis||this._isFloating(this.items[0].item):!1,this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(t,e){this._super(t,e),"handle"===t&&this._setHandleClassName()},_setHandleClassName:function(){this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle"),t.each(this.items,function(){(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item).addClass("ui-sortable-handle")})},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle"),this._mouseDestroy();for(var t=this.items.length-1;t>=0;t--)this.items[t].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,i){var s=null,n=!1,o=this;return this.reverting?!1:this.options.disabled||"static"===this.options.type?!1:(this._refreshItems(e),t(e.target).parents().each(function(){return t.data(this,o.widgetName+"-item")===o?(s=t(this),!1):void 0}),t.data(e.target,o.widgetName+"-item")===o&&(s=t(e.target)),s&&(!this.options.handle||i||(t(this.options.handle,s).find("*").addBack().each(function(){this===e.target&&(n=!0)}),n))?(this.currentItem=s,this._removeCurrentsFromItems(),!0):!1)},_mouseStart:function(e,i,s){var n,o,r=this.options;if(this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},t.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,r.cursorAt&&this._adjustOffsetFromHelper(r.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),r.containment&&this._setContainment(),r.cursor&&"auto"!==r.cursor&&(o=this.document.find("body"),this.storedCursor=o.css("cursor"),o.css("cursor",r.cursor),this.storedStylesheet=t("<style>*{ cursor: "+r.cursor+" !important; }</style>").appendTo(o)),r.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",r.opacity)),r.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",r.zIndex)),this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!s)for(n=this.containers.length-1;n>=0;n--)this.containers[n]._trigger("activate",e,this._uiHash(this));return t.ui.ddmanager&&(t.ui.ddmanager.current=this),t.ui.ddmanager&&!r.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var i,s,n,o,r=this.options,h=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==document&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<r.scrollSensitivity?this.scrollParent[0].scrollTop=h=this.scrollParent[0].scrollTop+r.scrollSpeed:e.pageY-this.overflowOffset.top<r.scrollSensitivity&&(this.scrollParent[0].scrollTop=h=this.scrollParent[0].scrollTop-r.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<r.scrollSensitivity?this.scrollParent[0].scrollLeft=h=this.scrollParent[0].scrollLeft+r.scrollSpeed:e.pageX-this.overflowOffset.left<r.scrollSensitivity&&(this.scrollParent[0].scrollLeft=h=this.scrollParent[0].scrollLeft-r.scrollSpeed)):(e.pageY-t(document).scrollTop()<r.scrollSensitivity?h=t(document).scrollTop(t(document).scrollTop()-r.scrollSpeed):t(window).height()-(e.pageY-t(document).scrollTop())<r.scrollSensitivity&&(h=t(document).scrollTop(t(document).scrollTop()+r.scrollSpeed)),e.pageX-t(document).scrollLeft()<r.scrollSensitivity?h=t(document).scrollLeft(t(document).scrollLeft()-r.scrollSpeed):t(window).width()-(e.pageX-t(document).scrollLeft())<r.scrollSensitivity&&(h=t(document).scrollLeft(t(document).scrollLeft()+r.scrollSpeed))),h!==!1&&t.ui.ddmanager&&!r.dropBehaviour&&t.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),i=this.items.length-1;i>=0;i--)if(s=this.items[i],n=s.item[0],o=this._intersectsWithPointer(s),o&&s.instance===this.currentContainer&&n!==this.currentItem[0]&&this.placeholder[1===o?"next":"prev"]()[0]!==n&&!t.contains(this.placeholder[0],n)&&("semi-dynamic"===this.options.type?!t.contains(this.element[0],n):!0)){if(this.direction=1===o?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(s))break;this._rearrange(e,s),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),t.ui.ddmanager&&t.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,i){if(e){if(t.ui.ddmanager&&!this.options.dropBehaviour&&t.ui.ddmanager.drop(this,e),this.options.revert){var s=this,n=this.placeholder.offset(),o=this.options.axis,r={};o&&"x"!==o||(r.left=n.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollLeft)),o&&"y"!==o||(r.top=n.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===document.body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,t(this.helper).animate(r,parseInt(this.options.revert,10)||500,function(){s._clear(e)})}else this._clear(e,i);return!1}},cancel:function(){if(this.dragging){this._mouseUp({target:null}),"original"===this.options.helper?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var e=this.containers.length-1;e>=0;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),t.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?t(this.domPosition.prev).after(this.currentItem):t(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},t(i).each(function(){var i=(t(e.item||this).attr(e.attribute||"id")||"").match(e.expression||/(.+)[\-=_](.+)/);i&&s.push((e.key||i[1]+"[]")+"="+(e.key&&e.expression?i[1]:i[2]))}),!s.length&&e.key&&s.push(e.key+"="),s.join("&")},toArray:function(e){var i=this._getItemsAsjQuery(e&&e.connected),s=[];return e=e||{},i.each(function(){s.push(t(e.item||this).attr(e.attribute||"id")||"")}),s},_intersectsWith:function(t){var e=this.positionAbs.left,i=e+this.helperProportions.width,s=this.positionAbs.top,n=s+this.helperProportions.height,o=t.left,r=o+t.width,h=t.top,a=h+t.height,l=this.offset.click.top,c=this.offset.click.left,u="x"===this.options.axis||s+l>h&&a>s+l,p="y"===this.options.axis||e+c>o&&r>e+c,f=u&&p;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>t[this.floating?"width":"height"]?f:o<e+this.helperProportions.width/2&&i-this.helperProportions.width/2<r&&h<s+this.helperProportions.height/2&&n-this.helperProportions.height/2<a},_intersectsWithPointer:function(t){var e="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),i="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width),s=e&&i,n=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return s?this.floating?o&&"right"===o||"down"===n?2:1:n&&("down"===n?2:1):!1},_intersectsWithSides:function(t){var e=this._isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),i=this._isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),s=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection();return this.floating&&n?"right"===n&&i||"left"===n&&!i:s&&("down"===s&&e||"up"===s&&!e)},_getDragVerticalDirection:function(){var t=this.positionAbs.top-this.lastPositionAbs.top;return 0!==t&&(t>0?"down":"up")},_getDragHorizontalDirection:function(){var t=this.positionAbs.left-this.lastPositionAbs.left;return 0!==t&&(t>0?"right":"left")},refresh:function(t){return this._refreshItems(t),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var t=this.options;return t.connectWith.constructor===String?[t.connectWith]:t.connectWith},_getItemsAsjQuery:function(e){function i(){h.push(this)}var s,n,o,r,h=[],a=[],l=this._connectWith();if(l&&e)for(s=l.length-1;s>=0;s--)for(o=t(l[s]),n=o.length-1;n>=0;n--)r=t.data(o[n],this.widgetFullName),r&&r!==this&&!r.options.disabled&&a.push([t.isFunction(r.options.items)?r.options.items.call(r.element):t(r.options.items,r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),r]);for(a.push([t.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):t(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),s=a.length-1;s>=0;s--)a[s][0].each(i);return t(h)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=t.grep(this.items,function(t){for(var i=0;i<e.length;i++)if(e[i]===t.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var i,s,n,o,r,h,a,l,c=this.items,u=[[t.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):t(this.options.items,this.element),this]],p=this._connectWith();if(p&&this.ready)for(i=p.length-1;i>=0;i--)for(n=t(p[i]),s=n.length-1;s>=0;s--)o=t.data(n[s],this.widgetFullName),o&&o!==this&&!o.options.disabled&&(u.push([t.isFunction(o.options.items)?o.options.items.call(o.element[0],e,{item:this.currentItem}):t(o.options.items,o.element),o]),this.containers.push(o));for(i=u.length-1;i>=0;i--)for(r=u[i][1],h=u[i][0],s=0,l=h.length;l>s;s++)a=t(h[s]),a.data(this.widgetName+"-item",r),c.push({item:a,instance:r,width:0,height:0,left:0,top:0})},refreshPositions:function(e){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());var i,s,n,o;for(i=this.items.length-1;i>=0;i--)s=this.items[i],s.instance!==this.currentContainer&&this.currentContainer&&s.item[0]!==this.currentItem[0]||(n=this.options.toleranceElement?t(this.options.toleranceElement,s.item):s.item,e||(s.width=n.outerWidth(),s.height=n.outerHeight()),o=n.offset(),s.left=o.left,s.top=o.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(i=this.containers.length-1;i>=0;i--)o=this.containers[i].element.offset(),this.containers[i].containerCache.left=o.left,this.containers[i].containerCache.top=o.top,this.containers[i].containerCache.width=this.containers[i].element.outerWidth(),this.containers[i].containerCache.height=this.containers[i].element.outerHeight();return this},_createPlaceholder:function(e){e=e||this;var i,s=e.options;s.placeholder&&s.placeholder.constructor!==String||(i=s.placeholder,s.placeholder={element:function(){var s=e.currentItem[0].nodeName.toLowerCase(),n=t("<"+s+">",e.document[0]).addClass(i||e.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper");return"tr"===s?e.currentItem.children().each(function(){t("<td>&#160;</td>",e.document[0]).attr("colspan",t(this).attr("colspan")||1).appendTo(n)}):"img"===s&&n.attr("src",e.currentItem.attr("src")),i||n.css("visibility","hidden"),n},update:function(t,n){(!i||s.forcePlaceholderSize)&&(n.height()||n.height(e.currentItem.innerHeight()-parseInt(e.currentItem.css("paddingTop")||0,10)-parseInt(e.currentItem.css("paddingBottom")||0,10)),n.width()||n.width(e.currentItem.innerWidth()-parseInt(e.currentItem.css("paddingLeft")||0,10)-parseInt(e.currentItem.css("paddingRight")||0,10)))}}),e.placeholder=t(s.placeholder.element.call(e.element,e.currentItem)),e.currentItem.after(e.placeholder),s.placeholder.update(e,e.placeholder)},_contactContainers:function(e){var i,s,n,o,r,h,a,l,c,u,p=null,f=null;for(i=this.containers.length-1;i>=0;i--)if(!t.contains(this.currentItem[0],this.containers[i].element[0]))if(this._intersectsWith(this.containers[i].containerCache)){if(p&&t.contains(this.containers[i].element[0],p.element[0]))continue;p=this.containers[i],f=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",e,this._uiHash(this)),this.containers[i].containerCache.over=0);if(p)if(1===this.containers.length)this.containers[f].containerCache.over||(this.containers[f]._trigger("over",e,this._uiHash(this)),this.containers[f].containerCache.over=1);else{for(n=1e4,o=null,c=p.floating||this._isFloating(this.currentItem),r=c?"left":"top",h=c?"width":"height",u=c?"clientX":"clientY",s=this.items.length-1;s>=0;s--)t.contains(this.containers[f].element[0],this.items[s].item[0])&&this.items[s].item[0]!==this.currentItem[0]&&(a=this.items[s].item.offset()[r],l=!1,e[u]-a>this.items[s][h]/2&&(l=!0),Math.abs(e[u]-a)<n&&(n=Math.abs(e[u]-a),o=this.items[s],this.direction=l?"up":"down"));if(!o&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[f])return void(this.currentContainer.containerCache.over||(this.containers[f]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1));o?this._rearrange(e,o,null,!0):this._rearrange(e,null,this.containers[f].element,!0),this._trigger("change",e,this._uiHash()),this.containers[f]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[f],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[f]._trigger("over",e,this._uiHash(this)),this.containers[f].containerCache.over=1}},_createHelper:function(e){var i=this.options,s=t.isFunction(i.helper)?t(i.helper.apply(this.element[0],[e,this.currentItem])):"clone"===i.helper?this.currentItem.clone():this.currentItem;return s.parents("body").length||t("parent"!==i.appendTo?i.appendTo:this.currentItem[0].parentNode)[0].appendChild(s[0]),s[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(!s[0].style.width||i.forceHelperSize)&&s.width(this.currentItem.width()),(!s[0].style.height||i.forceHelperSize)&&s.height(this.currentItem.height()),s},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),t.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===document.body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&t.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"===this.cssPosition){var t=this.currentItem.position();return{top:t.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:t.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,i,s,n=this.options;"parent"===n.containment&&(n.containment=this.helper[0].parentNode),("document"===n.containment||"window"===n.containment)&&(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,t("document"===n.containment?document:window).width()-this.helperProportions.width-this.margins.left,(t("document"===n.containment?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(n.containment)||(e=t(n.containment)[0],i=t(n.containment).offset(),s="hidden"!==t(e).css("overflow"),this.containment=[i.left+(parseInt(t(e).css("borderLeftWidth"),10)||0)+(parseInt(t(e).css("paddingLeft"),10)||0)-this.margins.left,i.top+(parseInt(t(e).css("borderTopWidth"),10)||0)+(parseInt(t(e).css("paddingTop"),10)||0)-this.margins.top,i.left+(s?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(t(e).css("borderLeftWidth"),10)||0)-(parseInt(t(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,i.top+(s?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(t(e).css("borderTopWidth"),10)||0)-(parseInt(t(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])
+},_convertPositionTo:function(e,i){i||(i=this.position);var s="absolute"===e?1:-1,n="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(n[0].tagName);return{top:i.top+this.offset.relative.top*s+this.offset.parent.top*s-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:n.scrollTop())*s,left:i.left+this.offset.relative.left*s+this.offset.parent.left*s-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:n.scrollLeft())*s}},_generatePosition:function(e){var i,s,n=this.options,o=e.pageX,r=e.pageY,h="absolute"!==this.cssPosition||this.scrollParent[0]!==document&&t.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,a=/(html|body)/i.test(h[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==document&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(o=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(r=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(o=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(r=this.containment[3]+this.offset.click.top)),n.grid&&(i=this.originalPageY+Math.round((r-this.originalPageY)/n.grid[1])*n.grid[1],r=this.containment?i-this.offset.click.top>=this.containment[1]&&i-this.offset.click.top<=this.containment[3]?i:i-this.offset.click.top>=this.containment[1]?i-n.grid[1]:i+n.grid[1]:i,s=this.originalPageX+Math.round((o-this.originalPageX)/n.grid[0])*n.grid[0],o=this.containment?s-this.offset.click.left>=this.containment[0]&&s-this.offset.click.left<=this.containment[2]?s:s-this.offset.click.left>=this.containment[0]?s-n.grid[0]:s+n.grid[0]:s)),{top:r-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():a?0:h.scrollTop()),left:o-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():a?0:h.scrollLeft())}},_rearrange:function(t,e,i,s){i?i[0].appendChild(this.placeholder[0]):e.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?e.item[0]:e.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var n=this.counter;this._delay(function(){n===this.counter&&this.refreshPositions(!s)})},_clear:function(t,e){function i(t,e,i){return function(s){i._trigger(t,s,e._uiHash(e))}}this.reverting=!1;var s,n=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(s in this._storedCSS)("auto"===this._storedCSS[s]||"static"===this._storedCSS[s])&&(this._storedCSS[s]="");this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();for(this.fromOutside&&!e&&n.push(function(t){this._trigger("receive",t,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||e||n.push(function(t){this._trigger("update",t,this._uiHash())}),this!==this.currentContainer&&(e||(n.push(function(t){this._trigger("remove",t,this._uiHash())}),n.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),n.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),s=this.containers.length-1;s>=0;s--)e||n.push(i("deactivate",this,this.containers[s])),this.containers[s].containerCache.over&&(n.push(i("out",this,this.containers[s])),this.containers[s].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,e||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!e){for(s=0;s<n.length;s++)n[s].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){t.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(e){var i=e||this;return{helper:i.helper,placeholder:i.placeholder||t([]),position:i.position,originalPosition:i.originalPosition,offset:i.positionAbs,item:i.currentItem,sender:e?e.element:null}}})});
diff --git a/question/type/ordering/jquery/jquery-ui.touch-punch.js b/question/type/ordering/jquery/jquery-ui.touch-punch.js
new file mode 100755
index 0000000..31272ce
--- /dev/null
+++ b/question/type/ordering/jquery/jquery-ui.touch-punch.js
@@ -0,0 +1,11 @@
+/*!
+ * jQuery UI Touch Punch 0.2.3
+ *
+ * Copyright 2011–2014, Dave Furfero
+ * Dual licensed under the MIT or GPL Version 2 licenses.
+ *
+ * Depends:
+ *  jquery.ui.widget.js
+ *  jquery.ui.mouse.js
+ */
+!function(a){function f(a,b){if(!(a.originalEvent.touches.length>1)){a.preventDefault();var c=a.originalEvent.changedTouches[0],d=document.createEvent("MouseEvents");d.initMouseEvent(b,!0,!0,window,1,c.screenX,c.screenY,c.clientX,c.clientY,!1,!1,!1,!1,0,null),a.target.dispatchEvent(d)}}if(a.support.touch="ontouchend"in document,a.support.touch){var e,b=a.ui.mouse.prototype,c=b._mouseInit,d=b._mouseDestroy;b._touchStart=function(a){var b=this;!e&&b._mouseCapture(a.originalEvent.changedTouches[0])&&(e=!0,b._touchMoved=!1,f(a,"mouseover"),f(a,"mousemove"),f(a,"mousedown"))},b._touchMove=function(a){e&&(this._touchMoved=!0,f(a,"mousemove"))},b._touchEnd=function(a){e&&(f(a,"mouseup"),f(a,"mouseout"),this._touchMoved||f(a,"click"),e=!1)},b._mouseInit=function(){var b=this;b.element.bind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),c.call(b)},b._mouseDestroy=function(){var b=this;b.element.unbind({touchstart:a.proxy(b,"_touchStart"),touchmove:a.proxy(b,"_touchMove"),touchend:a.proxy(b,"_touchEnd")}),d.call(b)}}}(jQuery);
\ No newline at end of file
diff --git a/question/type/ordering/jquery/jquery.js b/question/type/ordering/jquery/jquery.js
new file mode 100755
index 0000000..ab28a24
--- /dev/null
+++ b/question/type/ordering/jquery/jquery.js
@@ -0,0 +1,4 @@
+/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
+!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.1",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C="undefined",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=N.replace("w","w#"),P="\\["+M+"*("+N+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+M+"*\\]",Q=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),S=new RegExp("^"+M+"*,"+M+"*"),T=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),V=new RegExp(Q),W=new RegExp("^"+O+"$"),X={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+Q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||"string"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(",")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){m()},!1):g.attachEvent&&g.attachEvent("onunload",function(){m()})),c.attributes=ib(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML="<select msallowclip=''><option selected=''></option></select>",a.querySelectorAll("[msallowclip^='']").length&&q.push("[*^$]="+M+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+M+"*(?:value|"+L+")"),a.querySelectorAll(":checked").length||q.push(":checked")}),ib(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+M+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",Q)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+M+")"+a+"("+M+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||"")||fb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ib(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||jb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||jb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute("disabled")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;
+if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fb=/ jQuery\d+="(?:null|\d+)"/g,gb=new RegExp("<(?:"+eb+")[\\s/>]","i"),hb=/^\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jb=/<([\w:]+)/,kb=/<tbody/i,lb=/<|&#?\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\s*(?:[^=]|=\s*.checked.)/i,ob=/^$|\/(?:java|ecma)script/i,pb=/^true\/(.*)/,qb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,rb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sb=db(y),tb=sb.appendChild(y.createElement("div"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xb(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,"script"),d.length>0&&zb(d,!i&&ub(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(jb.exec(f)||["",""])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f="table"!==i||kb.test(f)?"<table>"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,"input"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),"script"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,""):void 0;if(!("string"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ib,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,"script"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qb,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),"none"!==c&&c||(Cb=(Cb||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\([^)]*\)/i,Nb=/opacity\s*=\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp("^("+S+")(.*)$","i"),Qb=new RegExp("^([+-])=("+S+")","i"),Rb={position:"absolute",visibility:"hidden",display:"block"},Sb={letterSpacing:"0",fontWeight:"400"},Tb=["Webkit","O","Moz","ms"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fb(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Yb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),"normal"===f&&b in Sb&&(f=Sb[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Mb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+" "+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Jb,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")
+},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cc=/queueHooks$/,dc=[ic],ec={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fb(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fb(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc("show"),slideUp:gc("hide"),slideToggle:gc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lc=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lc,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var uc=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(uc," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vc=m.now(),wc=/\?/,xc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\/\//,Gc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hc={},Ic={},Jc="*/".concat("*");try{zc=location.href}catch(Kc){zc=y.createElement("a"),zc.href="",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:"GET",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+"").replace(Ac,"").replace(Fc,yc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yc[3]||("http:"===yc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,"$1_="+vc++):e+(wc.test(e)?"&":"?")+"_="+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\[\]$/,Sc=/\r?\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vc(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join("&").replace(Qc,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,"\r\n")}}):{name:b.name,value:c.replace(Sc,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.ActiveXObject&&m(a).on("unload",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&"withCredentials"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_c.pop()||m.expando+"_"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ad.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,"$1"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});
diff --git a/question/type/ordering/jquery/plugins.php b/question/type/ordering/jquery/plugins.php
new file mode 100755
index 0000000..75f3ddb
--- /dev/null
+++ b/question/type/ordering/jquery/plugins.php
@@ -0,0 +1,27 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question type javascript plugins definition
+ *
+ * @package    qtype_ordering
+ * @copyright  2014 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$plugins = array(
+    'ui.touch-punch' => array('files' => array('jquery-ui.touch-punch.js'))
+);
diff --git a/question/type/ordering/lang/en/qtype_ordering.php b/question/type/ordering/lang/en/qtype_ordering.php
new file mode 100755
index 0000000..eef6def
--- /dev/null
+++ b/question/type/ordering/lang/en/qtype_ordering.php
@@ -0,0 +1,92 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question type language srings
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['pluginname'] = 'Ordering';
+$string['pluginname_help'] = 'Several items are displayed in a jumbled order. The items can be dragged into a meaningful order.';
+$string['pluginname_link'] = 'question/type/ordering';
+$string['pluginnameadding'] = 'Adding an Ordering question';
+$string['pluginnameediting'] = 'Editing an Ordering question';
+$string['pluginnamesummary'] = 'Put jumbled items into a meaningful order.';
+
+$string['editingordering'] = 'Editing ordering question';
+$string['addingordering'] = 'Adding a Ordering question';
+
+$string['absoluteposition'] = 'Absolute position';
+$string['addmoreanswers'] = 'Add {$a} more items';
+$string['allornothing'] = 'All or nothing';
+$string['answer'] = 'Item text';
+$string['answerheader'] = 'Draggable item {no}';
+$string['correctorder'] = 'The correct order for these items is as follows:';
+$string['defaultanswerformat'] = 'Default answer format';
+$string['defaultquestionname'] = 'Drag the following items into the correct order.';
+$string['gradedetails'] = 'Grade details';
+$string['gradingtype'] = 'Grading type';
+$string['gradingtype_help'] = 'Choose the type of grading calculation.
+
+**All or nothing**
+: If all items are in the correct position, then full marks are awarded. Otherwise, the score is zero.
+
+**Absolute position**
+: An item is considered correct if it is in the same position as in the correct answer. The highest possible score for the question is **the same as** the number of items displayed to the student.
+
+**Relative to the next item (excluding last)**
+: An item is considered correct if it is followed by the same item as it is in the correct answer. The item in the last position is not checked. Thus, the highest possible score for the question is **one less than** the number of items displayed to the student.
+
+**Relative to the next item (including last)**
+: An item is considered correct if it is followed by the same item as it is in the correct answer. This includes the last item which must have no item following it. Thus, the highest possible score for the question is **the same as** the number of items displayed to the student.
+
+**Relative to both the previous and next items**
+: An item is considered correct if both the previous and next items are the same as they are in the correct answer. The first item should have no previous item, and the last item should have no next item. Thus, there are two possible points for each item, and the highest possible score for the question is **twice** the number of items displayed to the student.
+
+**Relative to ALL previous and next items**
+: An item is considered correct if it is preceded by all the same items as it is in the correct answer, and it is followed by all the same items as it is in the correct answer. The order of the previous items does not matter, and nor does the order of the following items. Thus, if ***n*** items are displayed to the student, the number of marks available for each item is ***(n - 1)***, and the highest mark availabe for the question is ***n x (n - 1)***, which is the same as ***(n² - n)***.
+
+**Longest ordered subset**
+: The grade is the number of items in the longest ordered subset of items. The highest possible grade is the same as the number of items displayed. A subset must have at least two items. Subsets do not need to start at the first item (but they can) and they do not need to be contiguous (but they can be). Where there are multiple subsets of equal length, items in the subset that is found first, when searching from left to right, will be displayed as correct. Other items will be marked as incorrect.
+
+**Longest contiguous subset**
+: The grade is the number of items in the longest contiguous subset of items. The highest possible grade is the same as the number of items displayed. A subset must have at least two items. Subsets do not need to start at the first item (but they can) and they MUST BE CONTIGUOUS. Where there are multiple subsets of equal length, items in the subset that is found first, when searching from left to right, will be displayed as correct. Other items will be marked as incorrect.';
+$string['horizontal'] = 'Horizontal';
+$string['layouttype_help'] = 'Choose whether to display the items vertically or horizontally.';
+$string['layouttype'] = 'Layout of items';
+$string['longestcontiguoussubset'] = 'Longest contiguous subset';
+$string['longestorderedsubset'] = 'Longest ordered subset';
+$string['noresponsedetails'] = 'Sorry, no details of the response to this question are available.';
+$string['noscore'] = 'No score';
+$string['notenoughanswers'] = 'Ordering questions must have more than {$a} answers.';
+$string['relativeallpreviousandnext'] = 'Relative to ALL the previous and next items';
+$string['relativenextexcludelast'] = 'Relative to the next item (excluding last)';
+$string['relativenextincludelast'] = 'Relative to the next item (including last)';
+$string['relativeonepreviousandnext'] = 'Relative to both the previous and next items';
+$string['removeeditor'] = 'Remove HTML editor';
+$string['removeitem'] = 'Remove draggable item';
+$string['scoredetails'] = 'Here are the scores for each item in this response:';
+$string['selectall'] = 'Select all items';
+$string['selectcontiguous'] = 'Select a contiguous subset of items';
+$string['selectcount_help'] = 'The number of items that will be displayed when the question is appears in a quiz.';
+$string['selectcount'] = 'Size of subset';
+$string['selectrandom'] = 'Select a random subset of items';
+$string['selecttype_help'] = 'Choose whether to display all the items or a subset of the items.';
+$string['selecttype'] = 'Item selection type';
+$string['vertical'] = 'Vertical';
diff --git a/question/type/ordering/lib.php b/question/type/ordering/lib.php
new file mode 100755
index 0000000..d58ac38
--- /dev/null
+++ b/question/type/ordering/lib.php
@@ -0,0 +1,42 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question type general functions
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Checks file access for ordering questions.
+ *
+ * @param stdClass $course course object
+ * @param stdClass $cm course module object
+ * @param stdClass $context context object
+ * @param string $filearea file area
+ * @param array $args extra arguments
+ * @param bool $forcedownload whether or not force download
+ * @param array $options additional options affecting the file serving
+ */
+function qtype_ordering_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options=array()) {
+    global $CFG;
+    require_once($CFG->dirroot.'/lib/questionlib.php');
+    question_pluginfile($course, $context, 'qtype_ordering', $filearea, $args, $forcedownload);
+}
diff --git a/question/type/ordering/pix/icon.gif b/question/type/ordering/pix/icon.gif
new file mode 100755
index 0000000000000000000000000000000000000000..39ddca646b1287e2e8cda2dab85cda1690f92166
GIT binary patch
literal 908
zcmZ?wbhEHb6krfw_|9PX|NsBLfB*je{rl(7pI^Uz{rvg!$B!RBeE9I@&70S+U%z<q
z;`#IEj~_pN`0(NC)vFgSTsV31<dTvSD=RBAGc!X&Lk$fLb#-+mB_(ljaUmfgK0ZE%
zQ7{?;Lnj0jf3h%wT&n{jKzV|JBa?xVL&jr+0t36Sj)Or)z@h#15;7(l2LcpY+y6`b
z=?)M)(9A8VBv7E>*xcO5Dw{H)K<KFhhq|EF8w-a8&K<I<Vmp5LGau%#^{?acoUnv#
g8c(WS0fVE%@!1j#SKgesy!`Y+nb<5<2>}Lc0NkNly#N3J

literal 0
HcmV?d00001

diff --git a/question/type/ordering/question.php b/question/type/ordering/question.php
new file mode 100755
index 0000000..ae049ff
--- /dev/null
+++ b/question/type/ordering/question.php
@@ -0,0 +1,754 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question definition classes.
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Prevent direct access to this script.
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Represents an ordering question.
+ *
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_ordering_question extends question_graded_automatically {
+
+    /** Select all answers */
+    const SELECT_ALL = 0;
+    /** Select random set of answers */
+    const SELECT_RANDOM = 1;
+    /** Select contignous subset of answers */
+    const SELECT_CONTIGUOUS = 2;
+
+    /** Show answers in vertical list */
+    const LAYOUT_VERTICAL = 0;
+    /** Show answers in one horizontal line */
+    const LAYOUT_HORIZONTAL = 1;
+
+
+    /** @var int Zero grade on any error */
+    const GRADING_ALL_OR_NOTHING = -1;
+    /** @var int Counts items, placed into right absolute place */
+    const GRADING_ABSOLUTE_POSITION = 0;
+    /** @var int Every sequential pair in right order is graded (last pair is excluded) */
+    const GRADING_RELATIVE_NEXT_EXCLUDE_LAST = 1;
+    /** @var int Every sequential pair in right order is graded (last pair is included) */
+    const GRADING_RELATIVE_NEXT_INCLUDE_LAST = 2;
+    /** @var int Single answers that are placed before and after each answer is graded if in right order*/
+    const GRADING_RELATIVE_ONE_PREVIOUS_AND_NEXT = 3;
+    /** @var int All answers that are placed before and after each answer is graded if in right order*/
+    const GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT = 4;
+    /** @var int Only longest ordered subset is graded */
+    const GRADING_LONGEST_ORDERED_SUBSET = 5;
+    /** @var int Only longest ordered and contignous subset is graded */
+    const GRADING_LONGEST_CONTIGUOUS_SUBSET = 6;
+
+    // Fields from "qtype_ordering_options" table.
+    /** @var string */
+    public $correctfeedback;
+    /** @var int */
+    public $correctfeedbackformat;
+    /** @var string */
+    public $incorrectfeedback;
+    /** @var int */
+    public $incorrectfeedbackformat;
+    /** @var string */
+    public $partiallycorrectfeedback;
+    /** @var int */
+    public $partiallycorrectfeedbackformat;
+
+    /** @var array Records from "question_answers" table */
+    public $answers;
+
+    /** @var array Records from "qtype_ordering_options" table */
+    public $options;
+
+    /** @var array of answerids in correct order */
+    public $correctresponse;
+
+    /** @var array contatining current order of answerids */
+    public $currentresponse;
+
+    /**
+     * Start a new attempt at this question, storing any information that will
+     * be needed later in the step.
+     *
+     * This is where the question can do any initialisation required on a
+     * per-attempt basis. For example, this is where the multiple choice
+     * question type randomly shuffles the choices (if that option is set).
+     *
+     * Any information about how the question has been set up for this attempt
+     * should be stored in the $step, by calling $step->set_qt_var(...).
+     *
+     * @param question_attempt_step $step The first step of the {@link question_attempt}
+     *      being started. Can be used to store state.
+     * @param int $variant which variant of this question to start. Will be between
+     *      1 and {@link get_num_variants()} inclusive.
+     */
+    public function start_attempt(question_attempt_step $step, $variant) {
+        $answers = $this->get_ordering_answers();
+        $options = $this->get_ordering_options();
+
+        $countanswers = count($answers);
+
+        // Sanitize "selecttype".
+        $selecttype = $options->selecttype;
+        $selecttype = max(0, $selecttype);
+        $selecttype = min(2, $selecttype);
+
+        // Sanitize "selectcount".
+        $selectcount = $options->selectcount;
+        $selectcount = max(3, $selectcount);
+        $selectcount = min($countanswers, $selectcount);
+
+        // Ensure consistency between "selecttype" and "selectcount".
+        switch (true) {
+            case ($selecttype == self::SELECT_ALL):
+                $selectcount = $countanswers;
+                break;
+            case ($selectcount == $countanswers):
+                $selecttype = self::SELECT_ALL;
+                break;
+        }
+
+        // Extract answer ids.
+        switch ($selecttype) {
+            case self::SELECT_ALL:
+                $answerids = array_keys($answers);
+                break;
+
+            case self::SELECT_RANDOM:
+                $answerids = array_rand($answers, $selectcount);
+                break;
+
+            case self::SELECT_CONTIGUOUS:
+                $answerids = array_keys($answers);
+                $offset = mt_rand(0, $countanswers - $selectcount);
+                $answerids = array_slice($answerids, $offset, $selectcount, true);
+                break;
+        }
+
+        $this->correctresponse = $answerids;
+        $step->set_qt_var('_correctresponse', implode(',', $this->correctresponse));
+
+        shuffle($answerids);
+        $this->currentresponse = $answerids;
+        $step->set_qt_var('_currentresponse', implode(',', $this->currentresponse));
+    }
+
+    /**
+     * When an in-progress {@link question_attempt} is re-loaded from the
+     * database, this method is called so that the question can re-initialise
+     * its internal state as needed by this attempt.
+     *
+     * For example, the multiple choice question type needs to set the order
+     * of the choices to the order that was set up when start_attempt was called
+     * originally. All the information required to do this should be in the
+     * $step object, which is the first step of the question_attempt being loaded.
+     *
+     * @param question_attempt_step $step The first step of the {@link question_attempt}
+     *      being loaded.
+     */
+    public function apply_attempt_state(question_attempt_step $step) {
+        $answers = $this->get_ordering_answers();
+        $options = $this->get_ordering_options();
+        $this->currentresponse = array_filter(explode(',', $step->get_qt_var('_currentresponse')));
+        $this->correctresponse = array_filter(explode(',', $step->get_qt_var('_correctresponse')));
+    }
+
+    /**
+     * What data may be included in the form submission when a student submits
+     * this question in its current state?
+     *
+     * This information is used in calls to optional_param. The parameter name
+     * has {@link question_attempt::get_field_prefix()} automatically prepended.
+     *
+     * @return array|string variable name => PARAM_... constant, or, as a special case
+     *      that should only be used in unavoidable, the constant question_attempt::USE_RAW_DATA
+     *      meaning take all the raw submitted data belonging to this question.
+     */
+    public function get_expected_data() {
+        $name = $this->get_response_fieldname();
+        return array($name => PARAM_TEXT);
+    }
+
+    /**
+     * What data would need to be submitted to get this question correct.
+     * If there is more than one correct answer, this method should just
+     * return one possibility. If it is not possible to compute a correct
+     * response, this method should return null.
+     *
+     * @return array|null parameter name => value.
+     */
+    public function get_correct_response() {
+        $correctresponse = $this->correctresponse;
+        foreach ($correctresponse as $position => $answerid) {
+            $answer = $this->answers[$answerid];
+            $correctresponse[$position] = $answer->md5key;
+        }
+        $name = $this->get_response_fieldname();
+        return array($name => implode(',', $correctresponse));
+    }
+
+    /**
+     * Produce a plain text summary of a response.
+     *
+     * @param array $response a response, as might be passed to {@link grade_response()}.
+     * @return string a plain text summary of that response, that could be used in reports.
+     */
+    public function summarise_response(array $response) {
+        return '';
+    }
+
+    /**
+     * Categorise the student's response according to the categories defined by
+     * get_possible_responses.
+     *
+     * @param array $response a response, as might be passed to {@link grade_response()}.
+     * @return array subpartid => {@link question_classified_response} objects.
+     *      returns an empty array if no analysis is possible.
+     */
+    public function classify_response(array $response) {
+        return array();
+    }
+
+    /**
+     * Used by many of the behaviours, to work out whether the student's
+     * response to the question is complete. That is, whether the question attempt
+     * should move to the COMPLETE or INCOMPLETE state.
+     *
+     * @param array $response responses, as returned by
+     *      {@link question_attempt_step::get_qt_data()}.
+     * @return bool whether this response is a complete answer to this question.
+     */
+    public function is_complete_response(array $response) {
+        return true;
+    }
+
+    /**
+     * Use by many of the behaviours to determine whether the student
+     * has provided enough of an answer for the question to be graded automatically,
+     * or whether it must be considered aborted.
+     *
+     * @param array $response responses, as returned by
+     *      {@link question_attempt_step::get_qt_data()}.
+     * @return bool whether this response can be graded.
+     */
+    public function is_gradable_response(array $response) {
+        return true;
+    }
+
+    /**
+     * In situations where is_gradable_response() returns false, this method
+     * should generate a description of what the problem is.
+     * @param array $response
+     * @return string the message
+     */
+    public function get_validation_error(array $response) {
+        return '';
+    }
+
+    /**
+     * Use by many of the behaviours to determine whether the student's
+     * response has changed. This is normally used to determine that a new set
+     * of responses can safely be discarded.
+     *
+     * @param array $old the responses previously recorded for this question,
+     *      as returned by {@link question_attempt_step::get_qt_data()}
+     * @param array $new the new responses, in the same format.
+     * @return bool whether the two sets of responses are the same - that is
+     *      whether the new set of responses can safely be discarded.
+     */
+    public function is_same_response(array $old, array $new) {
+        $name = $this->get_response_fieldname();
+        return (isset($old[$name]) && isset($new[$name]) && $old[$name] == $new[$name]);
+    }
+
+    /**
+     * Grade a response to the question, returning a fraction between
+     * get_min_fraction() and get_max_fraction(), and the corresponding {@link question_state}
+     * right, partial or wrong.
+     *
+     * @param array $response responses, as returned by
+     *      {@link question_attempt_step::get_qt_data()}.
+     * @return array (float, integer) the fraction, and the state.
+     */
+    public function grade_response(array $response) {
+        $this->update_current_response($response);
+
+        $countcorrect = 0;
+        $countanswers = 0;
+
+        $options = $this->get_ordering_options();
+        $gradingtype = $options->gradingtype;
+        switch ($gradingtype) {
+
+            case self::GRADING_ALL_OR_NOTHING:
+            case self::GRADING_ABSOLUTE_POSITION:
+                $correctresponse = $this->correctresponse;
+                $currentresponse = $this->currentresponse;
+                foreach ($correctresponse as $position => $answerid) {
+                    if (isset($currentresponse[$position])) {
+                        if ($currentresponse[$position] == $answerid) {
+                            $countcorrect++;
+                        }
+                    }
+                    $countanswers++;
+                }
+                if ($gradingtype == self::GRADING_ALL_OR_NOTHING && $countcorrect < $countanswers) {
+                    $countcorrect = 0;
+                }
+                break;
+
+            case self::GRADING_RELATIVE_NEXT_EXCLUDE_LAST:
+            case self::GRADING_RELATIVE_NEXT_INCLUDE_LAST:
+                $currentresponse = $this->get_next_answerids($this->currentresponse,
+                        ($gradingtype == self::GRADING_RELATIVE_NEXT_INCLUDE_LAST));
+                $correctresponse = $this->get_next_answerids($this->correctresponse,
+                        ($gradingtype == self::GRADING_RELATIVE_NEXT_INCLUDE_LAST));
+                foreach ($correctresponse as $thisanswerid => $nextanswerid) {
+                    if (isset($currentresponse[$thisanswerid])) {
+                        if ($currentresponse[$thisanswerid] == $nextanswerid) {
+                            $countcorrect++;
+                        }
+                    }
+                    $countanswers++;
+                }
+                break;
+
+            case self::GRADING_RELATIVE_ONE_PREVIOUS_AND_NEXT:
+            case self::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT:
+                $currentresponse = $this->get_previous_and_next_answerids($this->currentresponse,
+                        ($gradingtype == self::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT));
+                $correctresponse = $this->get_previous_and_next_answerids($this->correctresponse,
+                        ($gradingtype == self::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT));
+                foreach ($correctresponse as $thisanswerid => $answerids) {
+                    if (isset($currentresponse[$thisanswerid])) {
+                        $prev = $currentresponse[$thisanswerid]->prev;
+                        $prev = array_intersect($prev, $answerids->prev);
+                        $countcorrect += count($prev);
+                        $next = $currentresponse[$thisanswerid]->next;
+                        $next = array_intersect($next, $answerids->next);
+                        $countcorrect += count($next);
+                    }
+                    $countanswers += count($answerids->prev);
+                    $countanswers += count($answerids->next);
+                }
+                break;
+
+            case self::GRADING_LONGEST_ORDERED_SUBSET:
+            case self::GRADING_LONGEST_CONTIGUOUS_SUBSET:
+                $subset = $this->get_ordered_subset($gradingtype == self::GRADING_LONGEST_CONTIGUOUS_SUBSET);
+                $countcorrect = count($subset);
+                $countanswers = count($this->currentresponse);
+                break;
+        }
+        if ($countanswers == 0) {
+            $fraction = 0;
+        } else {
+            $fraction = ($countcorrect / $countanswers);
+        }
+        return array($fraction, question_state::graded_state_for_fraction($fraction));
+    }
+
+    /**
+     * Checks whether the users is allow to be served a particular file.
+     *
+     * @param question_attempt $qa the question attempt being displayed.
+     * @param question_display_options $options the options that control display of the question.
+     * @param string $component the name of the component we are serving files for.
+     * @param string $filearea the name of the file area.
+     * @param array $args the remaining bits of the file path.
+     * @param bool $forcedownload whether the user must be forced to download the file.
+     * @return bool true if the user can access this file.
+     */
+    public function check_file_access($qa, $options, $component, $filearea, $args, $forcedownload) {
+        if ($component == 'question') {
+            if ($filearea == 'answer') {
+                $answerid = reset($args); // Value of "itemid" is answer id.
+                return array_key_exists($answerid, $this->answers);
+            }
+            if (in_array($filearea, $this->qtype->feedbackfields)) {
+                return $this->check_combined_feedback_file_access($qa, $options, $filearea);
+            }
+            if ($filearea == 'hint') {
+                return $this->check_hint_file_access($qa, $options, $args);
+            }
+        }
+        return parent::check_file_access($qa, $options, $component, $filearea, $args, $forcedownload);
+    }
+
+    /*
+     * ------------------
+     * Custom methods
+     * ------------------
+     */
+
+    /**
+     * Returns response mform field name
+     *
+     * @return string
+     */
+    public function get_response_fieldname() {
+        return 'response_'.$this->id;
+    }
+
+    /**
+     * Convert response data from mform into array
+     *
+     * @param array $response Form data
+     * @return array
+     */
+    public function update_current_response($response) {
+        $name = $this->get_response_fieldname();
+        if (isset($response[$name])) {
+            $ids = explode(',', $response[$name]);
+            foreach ($ids as $i => $id) {
+                foreach ($this->answers as $answer) {
+                    if ($id == $answer->md5key) {
+                        $ids[$i] = $answer->id;
+                        break;
+                    }
+                }
+            }
+            $this->currentresponse = $ids;
+        }
+    }
+
+    /**
+     * Loads from DB and returns options for question instance
+     *
+     * @return object
+     */
+    public function get_ordering_options() {
+        global $DB;
+        if ($this->options === null) {
+            $this->options = $DB->get_record('qtype_ordering_options', array('questionid' => $this->id));
+            if (empty($this->options)) {
+                $this->options = (object)array(
+                    'questionid' => $this->id,
+                    'layouttype' => self::LAYOUT_VERTICAL,
+                    'selecttype' => self::SELECT_ALL,
+                    'selectcount' => 0,
+                    'gradingtype' => self::GRADING_ABSOLUTE_POSITION,
+                    'correctfeedback' => '',
+                    'correctfeedbackformat' => FORMAT_MOODLE,
+                    'incorrectfeedback' => '',
+                    'incorrectfeedbackformat' => FORMAT_MOODLE,
+                    'partiallycorrectfeedback' => '',
+                    'partiallycorrectfeedbackformat' => FORMAT_MOODLE
+                );
+                $this->options->id = $DB->insert_record('qtype_ordering_options', $this->options);
+            }
+        }
+        return $this->options;
+    }
+
+    /**
+     * Loads from DB and returns array of answers objects
+     *
+     * @return array of objects
+     */
+    public function get_ordering_answers() {
+        global $CFG, $DB;
+        if ($this->answers === null) {
+            $this->answers = $DB->get_records('question_answers', array('question' => $this->id), 'fraction,id');
+            if ($this->answers) {
+                if (isset($CFG->passwordsaltmain)) {
+                    $salt = $CFG->passwordsaltmain;
+                } else {
+                    $salt = '';
+                }
+                foreach ($this->answers as $answerid => $answer) {
+                    $this->answers[$answerid]->md5key = 'ordering_item_'.md5($salt.$answer->answer);
+                }
+            } else {
+                $this->answers = array();
+            }
+        }
+        return $this->answers;
+    }
+
+    /**
+     * Returns layoutclass
+     *
+     * @return string
+     */
+    public function get_ordering_layoutclass() {
+        $options = $this->get_ordering_options();
+        switch ($options->layouttype) {
+            case self::LAYOUT_VERTICAL:
+                return 'vertical';
+            case self::LAYOUT_HORIZONTAL:
+                return 'horizontal';
+            default:
+                return ''; // Shouldn't happen !!
+        }
+    }
+
+    /**
+     * Returns array of next answers
+     *
+     * @param array $answerids array of answers id
+     * @param bool $lastitem Include last item?
+     * @return array of id of next answer
+     */
+    public function get_next_answerids($answerids, $lastitem = false) {
+        $nextanswerids = array();
+        $imax = count($answerids);
+        $imax--;
+        if ($lastitem) {
+            $nextanswerid = 0;
+        } else {
+            $nextanswerid = $answerids[$imax];
+            $imax--;
+        }
+        for ($i = $imax; $i >= 0; $i--) {
+            $thisanswerid = $answerids[$i];
+            $nextanswerids[$thisanswerid] = $nextanswerid;
+            $nextanswerid = $thisanswerid;
+        }
+        return $nextanswerids;
+    }
+
+    /**
+     * Returns prev and next answers array
+     *
+     * @param array $answerids array of answers id
+     * @param bool $all include all answers
+     * @return array of array('prev' => previd, 'next' => nextid)
+     */
+    public function get_previous_and_next_answerids($answerids, $all = false) {
+        $prevnextanswerids = array();
+        $next = $answerids;
+        $prev = array();
+        while ($answerid = array_shift($next)) {
+            if ($all) {
+                $prevnextanswerids[$answerid] = (object)array(
+                    'prev' => $prev,
+                    'next' => $next
+                );
+            } else {
+                $prevnextanswerids[$answerid] = (object)array(
+                    'prev' => array(empty($prev) ? 0 : $prev[0]),
+                    'next' => array(empty($next) ? 0 : $next[0])
+                );
+            }
+            array_unshift($prev, $answerid);
+        }
+        return $prevnextanswerids;
+    }
+
+    /**
+     * Search for best ordered subset
+     *
+     * @param bool $contiguous
+     * @return array
+     */
+    public function get_ordered_subset($contiguous) {
+
+        $positions = $this->get_ordered_positions($this->correctresponse,
+                                                  $this->currentresponse);
+
+        $subsets = $this->get_ordered_subsets($positions,
+                                              $contiguous,
+                                              count($positions));
+
+        // The best subset (longest and leftmost).
+        $bestsubset = array();
+
+        // The length of the best subset
+        // initializing this to 1 means
+        // we ignore single item subsets.
+        $bestcount = 1;
+
+        foreach ($subsets as $subset) {
+            $count = count($subset);
+            if ($count > $bestcount) {
+                $bestcount = $count;
+                $bestsubset = $subset;
+            }
+        }
+        return $bestsubset;
+    }
+
+    /**
+     * Get array of right answer positions for current response
+     *
+     * @param array $correctresponse
+     * @param array $currentresponse
+     * @return array
+     */
+    public function get_ordered_positions($correctresponse, $currentresponse) {
+        $positions = array();
+        foreach ($currentresponse as $answerid) {
+            $positions[] = array_search($answerid, $correctresponse);
+        }
+        return $positions;
+    }
+
+    /**
+     * Get all ordered subsets in the positions array
+     *
+     * @param array   $positions
+     * @param boolean $contiguous TRUE if searching only for contiguous subsets; otherwise FALSE
+     * @param integer $imax the length of the $positions array
+     * @param integer $imin (optional, default = 0) the index in $position at which to start checking values
+     * @param integer $previous (optional, default = -1) the minimum allowed value. Any values less than this will be skipped.
+     */
+    public function get_ordered_subsets($positions, $contiguous, $imax, $imin=0, $previous=-1) {
+
+        // Var $subsets is the collection of all subsets within $positions.
+        $subsets = array();
+
+        // Var $subset is the main (=earliest or leftmost) subset within $positions.
+        $subset = array();
+
+        for ($i = $imin; $i < $imax; $i++) {
+            $current = $positions[$i];
+
+            switch (true) {
+
+                case ($previous < 0 || $current == ($previous + 1)):
+                    // First item, or next item in a contiguous sequence
+                    // there is no need to search for $tailsets.
+                    $tailsets = array();
+                    $prependsubset = false;
+                    $appendtosubset = true;
+                    break;
+
+                case ($current < $previous || ($contiguous && $current > ($previous + 1))):
+                    // Here $current breaks the sequence, so look for subsets that start here.
+                    $tailsets = $this->get_ordered_subsets($positions, $contiguous, $imax, $i);
+                    $prependsubset = false;
+                    $appendtosubset = false;
+                    break;
+
+                case ($current > $previous):
+                    // A non-contiguous sequence,
+                    // so search for subsets in the tail.
+                    $tailsets = $this->get_ordered_subsets($positions, $contiguous, $imax, $i + 1, $previous);
+                    $prependsubset = true;
+                    $appendtosubset = true;
+                    break;
+
+                default: // shouldn't happen !!
+                    $tailsets = array();
+                    $prependsubset = false;
+                    $appendtosubset = false;
+            }
+
+            // Append any $tailsets that were found.
+            foreach ($tailsets as $tailset) {
+                if ($prependsubset) {
+                    // Prepend $subset-so-far to each tail subset.
+                    $subsets[] = array_merge($subset, $tailset);
+                } else {
+                    // Add this tail subset.
+                    $subsets[] = $tailset;
+                }
+            }
+
+            // Add $i to the main subset
+            // update the $previous value.
+            if ($appendtosubset) {
+                $subset[] = $i;
+                $previous = $current;
+            }
+        }
+        if (count($subset)) {
+            // Put the main $subset first.
+            array_unshift($subsets, $subset);
+        }
+        return $subsets;
+    }
+
+    /**
+     * Helper function for get_select_types, get_layout_types, get_grading_types
+     *
+     * @param array $types
+     * @param int $type
+     * @return array|string array if $type is not specified and single string if $type is specified
+     */
+    static public function get_types($types, $type) {
+        if ($type === null) {
+            return $types; // Return all $types.
+        }
+        if (array_key_exists($type, $types)) {
+            return $types[$type]; // One $type.
+        }
+        return $type; // Shouldn't happen !!
+    }
+
+    /**
+     * Returns availibe values and descriptions for field "selecttype"
+     *
+     * @param int $type
+     * @return array|string array if $type is not specified and single string if $type is specified
+     */
+    static public function get_select_types($type=null) {
+        $plugin = 'qtype_ordering';
+        $types = array(
+            self::SELECT_ALL        => get_string('selectall',        $plugin),
+            self::SELECT_RANDOM     => get_string('selectrandom',     $plugin),
+            self::SELECT_CONTIGUOUS => get_string('selectcontiguous', $plugin)
+        );
+        return self::get_types($types, $type);
+    }
+
+    /**
+     * Returns availibe values and descriptions for field "layouttype"
+     *
+     * @param int $type
+     * @return array|string array if $type is not specified and single string if $type is specified
+     */
+    static public function get_layout_types($type=null) {
+        $plugin = 'qtype_ordering';
+        $types = array(
+            self::LAYOUT_VERTICAL   => get_string('vertical',   $plugin),
+            self::LAYOUT_HORIZONTAL => get_string('horizontal', $plugin)
+        );
+        return self::get_types($types, $type);
+    }
+
+    /**
+     * Returns availibe values and descriptions for field "gradingtype"
+     *
+     * @param int $type
+     * @return array|string array if $type is not specified and single string if $type is specified
+     */
+    static public function get_grading_types($type=null) {
+        $plugin = 'qtype_ordering';
+        $types = array(
+            self::GRADING_ALL_OR_NOTHING                 => get_string('allornothing',               $plugin),
+            self::GRADING_ABSOLUTE_POSITION              => get_string('absoluteposition',           $plugin),
+            self::GRADING_RELATIVE_NEXT_EXCLUDE_LAST     => get_string('relativenextexcludelast',    $plugin),
+            self::GRADING_RELATIVE_NEXT_INCLUDE_LAST     => get_string('relativenextincludelast',    $plugin),
+            self::GRADING_RELATIVE_ONE_PREVIOUS_AND_NEXT => get_string('relativeonepreviousandnext', $plugin),
+            self::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT => get_string('relativeallpreviousandnext', $plugin),
+            self::GRADING_LONGEST_ORDERED_SUBSET         => get_string('longestorderedsubset',       $plugin),
+            self::GRADING_LONGEST_CONTIGUOUS_SUBSET      => get_string('longestcontiguoussubset',    $plugin)
+        );
+        return self::get_types($types, $type);
+    }
+}
diff --git a/question/type/ordering/questiontype.php b/question/type/ordering/questiontype.php
new file mode 100755
index 0000000..8ba6ca6
--- /dev/null
+++ b/question/type/ordering/questiontype.php
@@ -0,0 +1,774 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The questiontype class for the multiple choice question type.
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The ordering question type.
+ *
+ * @copyright  2013 Gordon Bateson (gordon.bateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_ordering extends question_type {
+
+    /** @var array Combined feedback fields */
+    public $feedbackfields = array('correctfeedback', 'partiallycorrectfeedback', 'incorrectfeedback');
+
+    /**
+     * Utility method used by {@link qtype_renderer::head_code()}
+     * It looks for any of the files script.js or script.php that
+     * exist in the plugin folder and ensures they get included.
+     * It also includes the jquery files required for this plugin
+     */
+    public function find_standard_scripts() {
+        global $CFG, $PAGE;
+
+        // Include "script.js" and/or "script.php" in the normal way.
+        parent::find_standard_scripts();
+
+        $version = '';
+        $minversion = '1.11.0'; // Moodle 2.7.
+        $search = '/jquery-([0-9.]+)(\.min)?\.js$/';
+
+        // Make sure jQuery version is high enough
+        // (required if Quiz is in a popup window)
+        // Moodle 2.5 has jQuery 1.9.1.
+        // Moodle 2.6 has jQuery 1.10.2.
+        // Moodle 2.7 has jQuery 1.11.0.
+        // Moodle 2.8 has jQuery 1.11.1.
+        // Moodle 2.9 has jQuery 1.11.1.
+        if (method_exists($PAGE->requires, 'jquery')) {
+            // Moodle >= 2.5.
+            if ($version == '') {
+                include($CFG->dirroot.'/lib/jquery/plugins.php');
+                if (isset($plugins['jquery']['files'][0])) {
+                    if (preg_match($search, $plugins['jquery']['files'][0], $matches)) {
+                        $version = $matches[1];
+                    }
+                }
+            }
+            if ($version == '') {
+                $filename = $CFG->dirroot.'/lib/jquery/jquery*.js';
+                foreach (glob($filename) as $filename) {
+                    if (preg_match($search, $filename, $matches)) {
+                        $version = $matches[1];
+                        break;
+                    }
+                }
+            }
+            if (version_compare($version, $minversion) < 0) {
+                $version = '';
+            }
+        }
+
+        // Include JQuery files.
+        if ($version) {
+            // Moodle >= 2.7.
+            $PAGE->requires->jquery();
+            $PAGE->requires->jquery_plugin('ui');
+            $PAGE->requires->jquery_plugin('ui.touch-punch', 'qtype_ordering');
+        } else {
+            // Moodle <= 2.6.
+            $jquery = '/question/type/' . $this->name().'/jquery';
+            $PAGE->requires->js($jquery.'/jquery.js', true);
+            $PAGE->requires->js($jquery.'/jquery-ui.js', true);
+            $PAGE->requires->js($jquery.'/jquery-ui.touch-punch.js', true);
+        }
+    }
+
+    /**
+     * Initialise the common question_definition fields.
+     * @param question_definition $question the question_definition we are creating.
+     * @param object $questiondata the question data loaded from the database.
+     */
+    protected function initialise_question_instance(question_definition $question, $questiondata) {
+        parent::initialise_question_instance($question, $questiondata);
+        $this->initialise_combined_feedback($question, $questiondata);
+    }
+
+    /**
+     * Saves question-type specific options
+     *
+     * This is called by {@link save_question()} to save the question-type specific data
+     * @return object $result->error or $result->notice
+     * @param object $question  This holds the information from the editing form,
+     *      it is not a standard question object.
+     */
+    public function save_question_options($question) {
+        global $DB;
+
+        $result = new stdClass();
+        $context = $question->context;
+
+        // Remove empty answers.
+        $question->answer = array_filter($question->answer, array($this, 'is_not_blank'));
+        $question->answer = array_values($question->answer); // Make keys sequential.
+
+        // Count how many answers we have.
+        $countanswers = count($question->answer);
+
+        // Search/replace strings to reduce simple <p>...</p> to plain text.
+        $psearch = '/^\s*<p>\s*(.*?)(\s*<br\s*\/?>)*\s*<\/p>\s*$/';
+        $preplace = '$1';
+
+        // Search/replace strings to standardize vertical align of <img> tags.
+        $imgsearch = '/(<img[^>]*)\bvertical-align:\s*[a-zA-Z0-9_-]+([^>]*>)/';
+        $imgreplace = '$1'.'vertical-align:text-top'.'$2';
+
+        // Check at least two answers exist.
+        if ($countanswers < 2) {
+            $result->notice = get_string('notenoughanswers', 'qtype_ordering', '2');
+            return $result;
+        }
+
+        $question->feedback = range(1, $countanswers);
+
+        if ($answerids = $DB->get_records('question_answers', array('question' => $question->id), 'id ASC', 'id,question')) {
+            $answerids = array_keys($answerids);
+        } else {
+            $answerids = array();
+        }
+
+        // Insert all the new answers.
+        foreach ($question->answer as $i => $answer) {
+
+            // Extract $answer fields.
+            $answertext   = $answer['text'];
+            $answerformat = $answer['format'];
+            if (!empty($answer['itemid'])) {
+                $answeritemid = $answer['itemid'];
+            } else {
+                $answeritemid = null;
+            }
+
+            // Reduce simple <p>...</p> to plain text.
+            if (substr_count($answertext, '<p>') == 1) {
+                $answertext = preg_replace($psearch, $preplace, $answertext);
+            }
+            $answertext = trim($answertext);
+
+            // Skip empty answers.
+            if ($answertext == '') {
+                continue;
+            }
+
+            // Standardize vertical align of img tags.
+            $answertext = preg_replace($imgsearch, $imgreplace, $answertext);
+
+            // Prepare the $answer object.
+            $answer = (object)array(
+                'question'       => $question->id,
+                'fraction'       => ($i + 1), // Start at 1.
+                'answer'         => $answertext,
+                'answerformat'   => $answerformat,
+                'feedback'       => '',
+                'feedbackformat' => FORMAT_MOODLE,
+            );
+
+            // Add/insert $answer into the database.
+            if ($answer->id = array_shift($answerids)) {
+                if (! $DB->update_record('question_answers', $answer)) {
+                    $result->error = get_string('cannotupdaterecord', 'error', 'question_answers (id='.$answer->id.')');
+                    return $result;
+                }
+            } else {
+                unset($answer->id);
+                if (! $answer->id = $DB->insert_record('question_answers', $answer)) {
+                    $result->error = get_string('cannotinsertrecord', 'error', 'question_answers');
+                    return $result;
+                }
+            }
+
+            // Copy files across from draft files area.
+            // Note: we must do this AFTER inserting the answer record
+            // because the answer id is used as the file's "itemid".
+            if ($answeritemid) {
+                $answertext = file_save_draft_area_files($answeritemid, $context->id, 'question', 'answer', $answer->id,
+                        $this->fileoptions, $answertext);
+                $DB->set_field('question_answers', 'answer', $answertext, array('id' => $answer->id));
+            }
+        }
+
+        // Create $options for this ordering question.
+        $options = (object)array(
+            'questionid' => $question->id,
+            'layouttype' => $question->layouttype,
+            'selecttype' => $question->selecttype,
+            'selectcount' => $question->selectcount,
+            'gradingtype' => $question->gradingtype
+        );
+        $options = $this->save_combined_feedback_helper($options, $question, $context, true);
+        $this->save_hints($question, false);
+
+        // Add/update $options for this ordering question.
+        if ($options->id = $DB->get_field('qtype_ordering_options', 'id', array('questionid' => $question->id))) {
+            if (! $DB->update_record('qtype_ordering_options', $options)) {
+                $result->error = get_string('cannotupdaterecord', 'error', 'qtype_ordering_options (id='.$options->id.')');
+                return $result;
+            }
+        } else {
+            unset($options->id);
+            if (! $options->id = $DB->insert_record('qtype_ordering_options', $options)) {
+                $result->error = get_string('cannotinsertrecord', 'error', 'qtype_ordering_options');
+                return $result;
+            }
+        }
+
+        // Delete old answer records, if any.
+        if (count($answerids)) {
+            $fs = get_file_storage();
+            foreach ($answerids as $answerid) {
+                $fs->delete_area_files($context->id, 'question', 'answer', $answerid);
+                $DB->delete_records('question_answers', array('id' => $answerid));
+            }
+        }
+
+        return true;
+    }
+
+    /**
+     * This method should return all the possible types of response that are
+     * recognised for this question.
+     *
+     * The question is modelled as comprising one or more subparts. For each
+     * subpart, there are one or more classes that that students response
+     * might fall into, each of those classes earning a certain score.
+     *
+     * For example, in a shortanswer question, there is only one subpart, the
+     * text entry field. The response the student gave will be classified according
+     * to which of the possible $question->options->answers it matches.
+     *
+     * For the matching question type, there will be one subpart for each
+     * question stem, and for each stem, each of the possible choices is a class
+     * of student's response.
+     *
+     * A response is an object with two fields, ->responseclass is a string
+     * presentation of that response, and ->fraction, the credit for a response
+     * in that class.
+     *
+     * Array keys have no specific meaning, but must be unique, and must be
+     * the same if this function is called repeatedly.
+     *
+     * @param object $questiondata the question definition data.
+     * @return array keys are subquestionid, values are arrays of possible
+     *      responses to that subquestion.
+     */
+    public function get_possible_responses($questiondata) {
+        $responses = array();
+        $question = $this->make_question($questiondata);
+        foreach ($question->correctresponse as $position => $answerid) {
+            $responses[] = $position.': '.$question->answers[$answerid]->answer;
+        }
+        $responses = array(
+            0 => question_possible_response::no_response(),
+            1 => implode(', ', $responses)
+        );
+        return;
+    }
+
+    /**
+     * Callback function for filtering answers with array_filter
+     *
+     * @param mixed $value
+     * @return bool If true, this item should be saved.
+     */
+    public function is_not_blank($value) {
+        if (is_array($value)) {
+            $value = $value['text'];
+        }
+        $value = trim($value);
+        return ($value || $value === '0');
+    }
+
+    /**
+     * Loads the question type specific options for the question.
+     *
+     * This function loads any question type specific options for the
+     * question from the database into the question object. This information
+     * is placed in the $question->options field. A question type is
+     * free, however, to decide on a internal structure of the options field.
+     * @return bool            Indicates success or failure.
+     * @param object $question The question object for the question. This object
+     *                         should be updated to include the question type
+     *                         specific information (it is passed by reference).
+     */
+    public function get_question_options($question) {
+        global $DB, $OUTPUT;
+
+        // Load the options.
+        if (!$question->options = $DB->get_record('qtype_ordering_options', array('questionid' => $question->id))) {
+            echo $OUTPUT->notification('Error: Missing question options!');
+            return false;
+        }
+
+        // Load the answers - "fraction" is used to signify the order of the answers.
+        if (!$question->options->answers = $DB->get_records('question_answers',
+                array('question' => $question->id), 'fraction ASC')) {
+            echo $OUTPUT->notification('Error: Missing question answers for ordering question ' . $question->id . '!');
+            return false;
+        }
+
+        parent::get_question_options($question);
+        return true;
+    }
+
+    /**
+     * Deletes the question-type specific data when a question is deleted.
+     *
+     * @param int $questionid The id of question being deleted.
+     * @param int $contextid the context this quesiotn belongs to.
+     */
+    public function delete_question($questionid, $contextid) {
+        global $DB;
+        $DB->delete_records('qtype_ordering_options', array('questionid' => $questionid));
+        parent::delete_question($questionid, $contextid);
+    }
+
+    /**
+     * Import question from GIFT format
+     *
+     * @param array $lines
+     * @param object $question
+     * @param qformat_gift $format
+     * @param string $extra (optional, default=null)
+     * @return object Question instance
+     */
+    public function import_from_gift($lines, $question, $format, $extra=null) {
+        global $CFG;
+        require_once($CFG->dirroot.'/question/type/ordering/question.php');
+
+        // Convert $lines to a single a string - for preg_match().
+        $lines = implode(PHP_EOL, $lines);
+
+        // Extract question info from GIFT file $lines.
+        $questionname = '[^{]*';
+        $selectcount = '\d+';
+        $selecttype  = '(?:ALL|EXACT|'.
+                          'RANDOM|REL|'.
+                          'CONTIGUOUS|CONTIG)?';
+        $layouttype  = '(?:HORIZONTAL|HORI|H|1|'.
+                          'VERTICAL|VERT|V|0)?';
+        $gradingtype = '(?:ALL_OR_NOTHING|'.
+                          'ABSOLUTE_POSITION|'.
+                          'ABSOLUTE|ABS|'.
+                          'RELATIVE_NEXT_EXCLUDE_LAST|'.
+                          'RELATIVE_NEXT_INCLUDE_LAST|'.
+                          'RELATIVE_ONE_PREVIOUS_AND_NEXT|'.
+                          'RELATIVE_ALL_PREVIOUS_AND_NEXT|'.
+                          'RELATIVE|REL'.
+                          'LONGEST_ORDERED_SUBSET|'.
+                          'LONGEST_CONTIGUOUS_SUBSET)?';
+        $search = '/^(' . $questionname . ')\s*\{>\s*(' . $selectcount . ')\s*(' . $selecttype . ')\s*' .
+                '(' . $layouttype . ')\s*(' . $gradingtype . ')\s*(.*?)\s*\}\s*$/s';
+        // Item $1 the question name.
+        // Item $2 the number of items to be shown.
+        // Item  $3 the extraction/grading type.
+        // Item $4 the layout type.
+        // Item  $5 the grading type.
+        // Item $6 the lines of items to be ordered.
+        if (empty($extra) || ! preg_match($search, $lines, $matches)) {
+            return false; // Format not recognized.
+        }
+
+        $questionname = trim($matches[1]);
+        $selectcount = trim($matches[2]);
+        $selecttype = trim($matches[3]);
+        $layouttype = trim($matches[4]);
+        $gradingtype = trim($matches[5]);
+        $lines = explode(PHP_EOL, $matches[6]);
+        unset($matches);
+
+        $question->qtype = 'ordering';
+        $question->name = trim($question->name);
+
+        // Fix empty or long question name.
+        $question->name = $this->fix_questionname($question->name, $questionname);
+
+        // Set "selectcount" field from $selectcount.
+        if (is_numeric($selectcount) && $selectcount > 2 && $selectcount <= count($lines)) {
+            $selectcount = intval($selectcount);
+        } else {
+            $selectcount = min(6, count($lines));
+        }
+        $this->set_layout_select_count_grading($question, $layouttype, $selecttype, $selectcount, $gradingtype);
+
+        // Remove blank items.
+        $lines = array_map('trim', $lines);
+        $lines = array_filter($lines); // Remove blanks.
+
+        // Set up answer arrays.
+        $question->answer = array();
+        $question->answerformat = array();
+        $question->fraction = array();
+        $question->feedback = array();
+        $question->feedbackformat = array();
+
+        // Note that "fraction" field is used to denote sort order
+        // "fraction" fields will be set to correct values later
+        // in the save_question_options() method of this class.
+
+        foreach ($lines as $i => $line) {
+            $question->answer[$i] = $line;
+            $question->answerformat[$i] = FORMAT_MOODLE;
+            $question->fraction[$i] = 1; // Will be reset later in save_question_options().
+            $question->feedback[$i] = '';
+            $question->feedbackformat[$i] = FORMAT_MOODLE;
+        }
+
+        // Check that the required feedback fields exist.
+        $this->check_ordering_combined_feedback($question);
+
+        return $question;
+    }
+
+    /**
+     * Check that the required feedback fields exist
+     *
+     * @param object $question
+     */
+    protected function check_ordering_combined_feedback(&$question) {
+        foreach ($this->feedbackfields as $field) {
+            if (empty($question->$field)) {
+                $question->$field = array('text' => '', 'format' => FORMAT_MOODLE, 'itemid' => 0, 'files' => null);
+            }
+        }
+    }
+
+    /**
+     * Given question object, returns array with array layouttype, selecttype, selectcount, gradingtype, where
+     * layouttype, selecttype, gradingtype are string representation.
+     *
+     * @param object $question
+     * @return array(layouttype, selecttype, selectcount, gradingtype)
+     */
+    public function extract_layout_select_count_grading($question) {
+
+        switch ($question->options->layouttype) {
+            case qtype_ordering_question::LAYOUT_VERTICAL:
+                $layout = 'VERTICAL';
+                break;
+            case qtype_ordering_question::LAYOUT_HORIZONTAL:
+                $layout = 'HORIZONTAL';
+                break;
+            default:
+                $layout = ''; // Shouldn't happen !!
+        }
+
+        switch ($question->options->selecttype) {
+            case qtype_ordering_question::SELECT_ALL:
+                $select = 'ALL';
+                break;
+            case qtype_ordering_question::SELECT_RANDOM:
+                $select = 'RANDOM';
+                break;
+            case qtype_ordering_question::SELECT_CONTIGUOUS:
+                $select = 'CONTIGUOUS';
+                break;
+            default:
+                $select = ''; // Shouldn't happen !!
+        }
+
+        switch ($question->options->gradingtype) {
+            case qtype_ordering_question::GRADING_ALL_OR_NOTHING:
+                $grading = 'ALL_OR_NOTHING';
+                break;
+            case qtype_ordering_question::GRADING_ABSOLUTE_POSITION:
+                $grading = 'ABSOLUTE_POSITION';
+                break;
+            case qtype_ordering_question::GRADING_RELATIVE_NEXT_EXCLUDE_LAST:
+                $grading = 'RELATIVE_NEXT_EXCLUDE_LAST';
+                break;
+            case qtype_ordering_question::GRADING_RELATIVE_NEXT_INCLUDE_LAST:
+                $grading = 'RELATIVE_NEXT_INCLUDE_LAST';
+                break;
+            case qtype_ordering_question::GRADING_RELATIVE_ONE_PREVIOUS_AND_NEXT:
+                $grading = 'RELATIVE_ONE_PREVIOUS_AND_NEXT';
+                break;
+            case qtype_ordering_question::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT:
+                $grading = 'RELATIVE_ALL_PREVIOUS_AND_NEXT';
+                break;
+            case qtype_ordering_question::GRADING_LONGEST_ORDERED_SUBSET:
+                $grading = 'LONGEST_ORDERED_SUBSET';
+                break;
+            case qtype_ordering_question::GRADING_LONGEST_CONTIGUOUS_SUBSET:
+                $grading = 'LONGEST_CONTIGUOUS_SUBSET';
+                break;
+            default:
+                $grading = ''; // Shouldn't happen !!
+        }
+
+        // Note: this used to be (selectcount + 2).
+        $count = $question->options->selectcount;
+
+        return array($layout, $select, $count, $grading);
+    }
+
+    /**
+     * Exports question to GIFT format
+     *
+     * @param object $question
+     * @param qformat_gift $format
+     * @param string $extra (optional, default=null)
+     * @return string GIFT representation of question
+     */
+    public function export_to_gift($question, $format, $extra=null) {
+        global $CFG;
+        require_once($CFG->dirroot.'/question/type/ordering/question.php');
+
+        list($layouttype, $selecttype, $selectcount, $gradingtype) = $this->extract_layout_select_count_grading($question);
+        $output = $question->questiontext.'{>'.$selectcount.' '.
+                                               $selecttype.' '.
+                                               $layouttype.' '.
+                                               $gradingtype."\n";
+        foreach ($question->options->answers as $answer) {
+            $output .= $answer->answer."\n";
+        }
+        $output .= '}';
+        return $output;
+    }
+
+    /**
+     * Exports question to XML format
+     *
+     * @param object $question
+     * @param qformat_xml $format
+     * @param string $extra (optional, default=null)
+     * @return string XML representation of question
+     */
+    public function export_to_xml($question, qformat_xml $format, $extra=null) {
+        global $CFG;
+        require_once($CFG->dirroot.'/question/type/ordering/question.php');
+
+        list($layouttype, $selecttype, $selectcount, $gradingtype) = $this->extract_layout_select_count_grading($question);
+
+        $output = '';
+        $output .= "    <layouttype>$layouttype</layouttype>\n";
+        $output .= "    <selecttype>$selecttype</selecttype>\n";
+        $output .= "    <selectcount>$selectcount</selectcount>\n";
+        $output .= "    <gradingtype>$gradingtype</gradingtype>\n";
+        $output .= $format->write_combined_feedback($question->options, $question->id, $question->contextid);
+
+        foreach ($question->options->answers as $answer) {
+            $output .= '    <answer fraction="'.$answer->fraction.'" '.$format->format($answer->answerformat).">\n";
+            $output .= $format->writetext($answer->answer, 3);
+            $output .= $format->write_files($answer->answerfiles);
+            if ($feedback = trim($answer->feedback)) { // Usually there is no feedback.
+                $output .= '      <feedback '.$format->format($answer->feedbackformat).">\n";
+                $output .= $format->writetext($answer->feedback, 4);
+                $output .= $format->write_files($answer->feedbackfiles);
+                $output .= "      </feedback>\n";
+            }
+            $output .= "    </answer>\n";
+        }
+
+        return $output;
+    }
+
+    /**
+     * Imports question from the Moodle XML format
+     *
+     * Imports question using information from extra_question_fields function
+     * If some of you fields contains id's you'll need to reimplement this
+     *
+     * @param array $data
+     * @param qtype_ordering $question (or null)
+     * @param qformat_xml $format
+     * @param string $extra (optional, default=null)
+     * @return object New question object
+     */
+    public function import_from_xml($data, $question, qformat_xml $format, $extra=null) {
+        global $CFG;
+        require_once($CFG->dirroot.'/question/type/ordering/question.php');
+
+        $questiontype = $format->getpath($data, array('@', 'type'), '');
+
+        if ($questiontype != 'ordering') {
+            return false;
+        }
+
+        $newquestion = $format->import_headers($data);
+        $newquestion->qtype = $questiontype;
+
+        // Fix empty or long question name.
+        $newquestion->name = $this->fix_questionname($newquestion->name, $newquestion->questiontext);
+
+        // Extra fields - "selecttype" and "selectcount"
+        // (these fields used to be called "logical" and "studentsee").
+        if (isset($data['#']['selecttype'])) {
+            $selecttype = 'selecttype';
+            $selectcount = 'selectcount';
+        } else {
+            $selecttype = 'logical';
+            $selectcount = 'studentsee';
+        }
+        $layouttype = $format->getpath($data, array('#', 'layouttype', 0, '#'), 'VERTICAL');
+        $selecttype = $format->getpath($data, array('#', $selecttype, 0, '#'), 'RANDOM');
+        $selectcount = $format->getpath($data, array('#', $selectcount, 0, '#'), 6);
+        $gradingtype = $format->getpath($data, array('#', 'gradingtype', 0, '#'), 'RELATIVE');
+        $this->set_layout_select_count_grading($newquestion, $layouttype, $selecttype, $selectcount, $gradingtype);
+
+        $newquestion->answer = array();
+        $newquestion->answerformat = array();
+        $newquestion->fraction = array();
+        $newquestion->feedback = array();
+        $newquestion->feedbackformat = array();
+
+        $i = 0;
+        while ($answer = $format->getpath($data, array('#', 'answer', $i), '')) {
+            $ans = $format->import_answer($answer, true, $format->get_format($newquestion->questiontextformat));
+            $newquestion->answer[$i] = $ans->answer;
+            $newquestion->fraction[$i] = 1; // Will be reset later in save_question_options().
+            $newquestion->feedback[$i] = $ans->feedback;
+            $i++;
+        }
+
+        $format->import_combined_feedback($newquestion, $data, false);
+        // Check that the required feedback fields exist.
+        $this->check_ordering_combined_feedback($newquestion);
+
+        $format->import_hints($newquestion, $data, false);
+
+        return $newquestion;
+    }
+
+    /**
+     * Fix empty or long question name
+     *
+     * @param string $name
+     * @param string $defaultname (optional, default='')
+     * @param integer $maxnamelength (optional, default=42)
+     * @return string Fixed name
+     */
+    public function fix_questionname($name, $defaultname='', $maxnamelength = 42) {
+        if (trim($name) == '') {
+            if ($defaultname) {
+                $name = $defaultname;
+            } else {
+                $name = get_string('defaultquestionname', 'qtype_ordering');
+            }
+        }
+        if (strlen($name) > $maxnamelength) {
+            $name = substr($name, 0, $maxnamelength);
+            if ($pos = strrpos($name, ' ')) {
+                $name = substr($name, 0, $pos);
+            }
+            $name .= ' ...';
+        }
+        return $name;
+    }
+
+    /**
+     * Set layouttype, selecttype, selectcount, gradingtype based on their textual representation
+     *
+     * @param object $question (passed by reference)
+     * @param string $layout the layout type
+     * @param string $select the select type
+     * @param string $count the number of items to display
+     * @param string $grading the grading type
+     */
+    public function set_layout_select_count_grading(&$question, $layout, $select, $count, $grading) {
+
+        // Set default values.
+        $layouttype  = qtype_ordering_question::LAYOUT_VERTICAL;
+        $selecttype  = qtype_ordering_question::SELECT_RANDOM;
+        $selectcount = 3;
+        $gradingtype = qtype_ordering_question::GRADING_RELATIVE_NEXT_EXCLUDE_LAST;
+
+        switch (strtoupper($layout)) {
+
+            case 'HORIZONTAL':
+            case 'HORI':
+            case 'H':
+            case '1':
+                $layouttype = qtype_ordering_question::LAYOUT_HORIZONTAL;
+                break;
+
+            case 'VERTICAL':
+            case 'VERT':
+            case 'V':
+            case '0':
+                $layouttype = qtype_ordering_question::LAYOUT_VERTICAL;
+                break;
+        }
+
+        // Set "selecttype" from $select.
+        switch (strtoupper($select)) {
+            case 'ALL':
+            case 'EXACT':
+                $selecttype = qtype_ordering_question::SELECT_ALL;
+                break;
+            case 'RANDOM':
+            case 'REL':
+                $selecttype = qtype_ordering_question::SELECT_RANDOM;
+                break;
+            case 'CONTIGUOUS':
+            case 'CONTIG':
+                $selecttype = qtype_ordering_question::SELECT_CONTIGUOUS;
+                break;
+        }
+
+        // Set "selectcount" from $count
+        // this used to be ($count - 2).
+        if (is_numeric($count)) {
+            $selectcount = intval($count);
+        }
+
+        // Set "gradingtype" from $grading.
+        switch (strtoupper($grading)) {
+            case 'ALL_OR_NOTHING':
+                $gradingtype = qtype_ordering_question::GRADING_ALL_OR_NOTHING;
+                break;
+            case 'ABS':
+            case 'ABSOLUTE':
+            case 'ABSOLUTE_POSITION':
+                $gradingtype = qtype_ordering_question::GRADING_ABSOLUTE_POSITION;
+                break;
+            case 'REL':
+            case 'RELATIVE':
+            case 'RELATIVE_NEXT_EXCLUDE_LAST':
+                $gradingtype = qtype_ordering_question::GRADING_RELATIVE_NEXT_EXCLUDE_LAST;
+                break;
+            case 'RELATIVE_NEXT_INCLUDE_LAST':
+                $gradingtype = qtype_ordering_question::GRADING_RELATIVE_NEXT_INCLUDE_LAST;
+                break;
+            case 'RELATIVE_ONE_PREVIOUS_AND_NEXT':
+                $gradingtype = qtype_ordering_question::GRADING_RELATIVE_ONE_PREVIOUS_AND_NEXT;
+                break;
+            case 'RELATIVE_ALL_PREVIOUS_AND_NEXT':
+                $gradingtype = qtype_ordering_question::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT;
+                break;
+            case 'LONGEST_ORDERED_SUBSET':
+                $gradingtype = qtype_ordering_question::GRADING_LONGEST_ORDERED_SUBSET;
+                break;
+            case 'LONGEST_CONTIGUOUS_SUBSET':
+                $gradingtype = qtype_ordering_question::GRADING_LONGEST_CONTIGUOUS_SUBSET;
+                break;
+        }
+
+        $question->layouttype  = $layouttype;
+        $question->selecttype  = $selecttype;
+        $question->selectcount = $selectcount;
+        $question->gradingtype = $gradingtype;
+    }
+}
diff --git a/question/type/ordering/readme.txt b/question/type/ordering/readme.txt
new file mode 100755
index 0000000..86b4884
--- /dev/null
+++ b/question/type/ordering/readme.txt
@@ -0,0 +1,37 @@
+==========================================
+The Ordering question type for Moodle 2.x
+==========================================
+
+The ordering question type displays several short sentences in a random order which 
+are to be dragged into the correct sequential order. It was developed for the ordering 
+questions used in the Reader activity module for Moodle 2.x
+
+==========================================
+To INSTALL or UPDATE this plugin
+==========================================
+
+    1. get the files for this plugin from any one of the following locations:
+
+        (a) GIT: https://github.com/gbateson/moodle-qtype_ordering.git
+        (b) zip: the Moodle.org -> Plugins repository (search for Reader)
+        (c) zip: http://bateson.kanazawa-gu.ac.jp/zip/plugins_qtype_ordering.zip
+
+       If you are installing from a zip file, unzip the zip file, to create a folder called "ordering"
+       and upload or move this folder into the "question/type" folder on your Moodle 2.x site
+       to create a new folder at "question/type/ordering" - not "question/type/ordering/ordering" :-)
+
+    2. log in to Moodle as administrator to initiate install/upgrade
+
+        if install/upgrade does not begin automatically, you can initiate it manually by navigating to the following link:
+        Settings -> Site administration -> Notifications
+
+==========================================
+Further information
+==========================================
+
+    For more information, tutorials and online discussion forums, please visit:
+    http://moodlereader.org/
+
+    This plugin uses JQuery framework and plugins:
+    http://jqueryui.com/sortable/
+    http://touchpunch.furf.com/
diff --git a/question/type/ordering/renderer.php b/question/type/ordering/renderer.php
new file mode 100755
index 0000000..2a002ee
--- /dev/null
+++ b/question/type/ordering/renderer.php
@@ -0,0 +1,492 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question renderer class.
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordonbateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Prevent direct access to this script.
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Generates the output for ordering questions
+ *
+ * @copyright  2013 Gordon Bateson
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class qtype_ordering_renderer extends qtype_with_combined_feedback_renderer {
+
+    /** @var array of answerids in correct order */
+    protected $correctinfo = null;
+
+    /** @var array of answerids in order of current answer*/
+    protected $currentinfo = null;
+
+    /** @var array of scored for every item */
+    protected $itemscores = array();
+
+    /** @var bool True if answer is 100% correct */
+    protected $allcorrect = null;
+
+    /**
+     * Generate the display of the formulation part of the question. This is the
+     * area that contains the quetsion text, and the controls for students to
+     * input their answers. Some question types also embed bits of feedback, for
+     * example ticks and crosses, in this area.
+     *
+     * @param question_attempt $qa the question attempt to display.
+     * @param question_display_options $options controls what should and should not be displayed.
+     * @return string HTML fragment.
+     */
+    public function formulation_and_controls(question_attempt $qa, question_display_options $options) {
+        global $CFG, $DB;
+
+        $question = $qa->get_question();
+        $response = $qa->get_last_qt_data();
+        $question->update_current_response($response);
+
+        $currentresponse = $question->currentresponse;
+        $correctresponse = $question->correctresponse;
+
+        // Generate fieldnames and ids
+        // response_fieldname : 1_response_319
+        // response_name      : q27:1_response_319
+        // response_id        : id_q27_1_response_319
+        // sortable_id        : id_sortable_q27_1_response_319.
+        $responsefieldname = $question->get_response_fieldname();
+        $responsename      = $qa->get_qt_field_name($responsefieldname);
+        $responseid        = 'id_'.preg_replace('/[^a-zA-Z0-9]+/', '_', $responsename);
+        $sortableid        = 'id_sortable_'.$question->id;
+        $ablockid          = 'id_ablock_'.$question->id;
+
+        switch ($question->options->layouttype) {
+            case qtype_ordering_question::LAYOUT_VERTICAL:
+                $axis = 'y';
+                break;
+            case qtype_ordering_question::LAYOUT_HORIZONTAL:
+                $axis = '';
+                break;
+            default: $axis = '';
+        }
+
+        $result = '';
+
+        // Don't allow items to be dragged and dropped in readonly mode.
+        if (!($options->readonly || $options->correctness)) {
+            $script = "\n";
+            $script .= "//<![CDATA[\n";
+            $script .= "if (window.$) {\n";
+            $script .= "    $(function() {\n";
+            $script .= "        $('#$sortableid').sortable({\n";
+            $script .= "            axis: '$axis',\n";
+            $script .= "            containment: '#$ablockid',\n";
+            $script .= "            opacity: 0.6,\n";
+            $script .= "            update: function(event, ui) {\n";
+            $script .= "                var ItemsOrder = $(this).sortable('toArray').toString();\n";
+            $script .= "                $('#$responseid').attr('value', ItemsOrder);\n";
+            $script .= "            }\n";
+            $script .= "        });\n";
+            $script .= "        $('#$sortableid').disableSelection();\n";
+            $script .= "    });\n";
+            $script .= "    $(document).ready(function() {\n";
+            $script .= "        var ItemsOrder = $('#$sortableid').sortable('toArray').toString();\n";
+            $script .= "        $('#$responseid').attr('value', ItemsOrder);\n";
+            $script .= "    });\n";
+            $script .= "}\n";
+            $script .= "//]]>\n";
+            $result .= html_writer::tag('script', $script, array('type' => 'text/javascript'));
+        }
+
+        $result .= html_writer::tag('div', $question->format_questiontext($qa), array('class' => 'qtext'));
+
+        $printeditems = false;
+        if (count($currentresponse)) {
+
+            // Set layout class.
+            $layoutclass = $question->get_ordering_layoutclass();
+
+            // Generate ordering items.
+            foreach ($currentresponse as $position => $answerid) {
+
+                if (!array_key_exists($answerid, $question->answers)) {
+                    continue; // Shouldn't happen !!
+                }
+                if (!array_key_exists($position, $correctresponse)) {
+                    continue; // Shouldn't happen !!
+                }
+
+                if ($printeditems == false) {
+                    $printeditems = true;
+                    $result .= html_writer::start_tag('div', array('class' => 'ablock', 'id' => $ablockid));
+                    $result .= html_writer::start_tag('div', array('class' => 'answer ordering'));
+                    $result .= html_writer::start_tag('ul',  array('class' => 'sortablelist', 'id' => $sortableid));
+                }
+
+                // Set the CSS class and correctness img for this response.
+                if ($options->correctness) {
+                    $score = $this->get_ordering_item_score($question, $position, $answerid);
+                    list($score, $maxscore, $fraction, $percent, $class, $img) = $score;
+                } else {
+                    $class = 'sortableitem';
+                    $img = '';
+                }
+                $class = "$class $layoutclass";
+
+                // The original "id" revealed the correct order of the answers
+                // because $answer->fraction holds the correct order number.
+                $answer = $question->answers[$answerid];
+                $answer->answer = $question->format_text($answer->answer, $answer->answerformat, $qa, 'question', 'answer',
+                        $answerid);
+                $params = array('class' => $class, 'id' => $answer->md5key);
+                $result .= html_writer::tag('li', $img.$answer->answer, $params);
+            }
+        }
+
+        if ($printeditems) {
+            $result .= html_writer::end_tag('ul');
+            $result .= html_writer::end_tag('div'); // Close answer tag.
+            $result .= html_writer::end_tag('div'); // Close ablock tag.
+
+            $result .= html_writer::empty_tag('input', array('type'  => 'hidden',
+                                                             'name'  => $responsename,
+                                                             'id'    => $responseid,
+                                                             'value' => ''));
+        }
+
+        return $result;
+    }
+
+    /**
+     * Generate the specific feedback. This is feedback that varies according to
+     * the response the student gave.
+     *
+     * @param question_attempt $qa the question attempt to display.
+     * @return string HTML fragment.
+     */
+    public function specific_feedback(question_attempt $qa) {
+
+        if ($feedback = $this->combined_feedback($qa)) {
+            $feedback = html_writer::tag('p', $feedback);
+        }
+
+        $gradingtype = '';
+        $gradedetails = '';
+        $scoredetails = '';
+
+        // If required, add explanation of grade calculation.
+        if ($step = $qa->get_last_step()) {
+            $state = $step->get_state();
+            if ($state == 'gradedpartial' || $state == 'gradedwrong') {
+
+                $plugin = 'qtype_ordering';
+                $question = $qa->get_question();
+
+                // Fetch grading type.
+                $gradingtype = $question->options->gradingtype;
+                $gradingtype = qtype_ordering_question::get_grading_types($gradingtype);
+
+                // Format grading type, e.g. Grading type: Relative to next item, excluding last item.
+                if ($gradingtype) {
+                    $gradingtype = get_string('gradingtype', $plugin).': '.$gradingtype;
+                    $gradingtype = html_writer::tag('p', $gradingtype, array('class' => 'gradingtype'));
+                }
+
+                // Fetch grade details and score details.
+                if ($currentresponse = $question->currentresponse) {
+
+                    $totalscore = 0;
+                    $totalmaxscore = 0;
+
+                    $layoutclass = $question->get_ordering_layoutclass();
+                    $params = array('class' => $layoutclass);
+
+                    $scoredetails .= html_writer::tag('p', get_string('scoredetails', $plugin));
+                    $scoredetails .= html_writer::start_tag('ol', array('class' => 'scoredetails'));
+
+                    // Format scoredetails, e.g. 1 /2 = 50%, for each item.
+                    foreach ($currentresponse as $position => $answerid) {
+                        if (array_key_exists($answerid, $question->answers)) {
+                            $answer = $question->answers[$answerid];
+                            $score = $this->get_ordering_item_score($question, $position, $answerid);
+                            list($score, $maxscore, $fraction, $percent, $class, $img) = $score;
+                            if ($maxscore === null) {
+                                $score = get_string('noscore', $plugin);
+                            } else {
+                                $totalscore += $score;
+                                $totalmaxscore += $maxscore;
+                                $score = "$score / $maxscore = $percent%";
+                            }
+                            $scoredetails .= html_writer::tag('li', $score, $params);
+                        }
+                    }
+
+                    $scoredetails .= html_writer::end_tag('ol');
+
+                    if ($totalmaxscore == 0) {
+                        $scoredetails = ''; // ALL_OR_NOTHING.
+                    } else {
+                        // Format gradedetails, e.g. 4 /6 = 67%.
+                        if ($totalscore == 0) {
+                            $gradedetails = 0;
+                        } else {
+                            $gradedetails = round(100 * $totalscore / $totalmaxscore, 0);
+                        }
+                        $gradedetails = "$totalscore / $totalmaxscore = $gradedetails%";
+                        $gradedetails = get_string('gradedetails', $plugin).': '.$gradedetails;
+                        $gradedetails = html_writer::tag('p', $gradedetails, array('class' => 'gradedetails'));
+                    }
+                }
+            }
+        }
+
+        return $feedback.$gradingtype.$gradedetails.$scoredetails;
+    }
+
+    /**
+     * Gereate an automatic description of the correct response to this question.
+     * Not all question types can do this. If it is not possible, this method
+     * should just return an empty string.
+     *
+     * @param question_attempt $qa the question attempt to display.
+     * @return string HTML fragment.
+     */
+    public function correct_response(question_attempt $qa) {
+        global $DB;
+
+        $output = '';
+
+        $showcorrect = false;
+        $question = $qa->get_question();
+        if (empty($question->correctresponse)) {
+            $output .= html_writer::tag('p', get_string('noresponsedetails', 'qtype_ordering'));
+        } else {
+            if ($step = $qa->get_last_step()) {
+                switch ($step->get_state()) {
+                    case 'gradedright':
+                        $showcorrect = false;
+                        break;
+                    case 'gradedpartial':
+                        $showcorrect = true;
+                        break;
+                    case 'gradedwrong':
+                        $showcorrect = true;
+                        break;
+                }
+            }
+        }
+        if ($showcorrect) {
+            $layoutclass = $question->get_ordering_layoutclass();
+            $output .= html_writer::tag('p', get_string('correctorder', 'qtype_ordering'));
+            $output .= html_writer::start_tag('ol', array('class' => 'correctorder'));
+            $correctresponse = $question->correctresponse;
+            foreach ($correctresponse as $position => $answerid) {
+                $answer = $question->answers[$answerid];
+                $output .= html_writer::tag('li', $answer->answer, array('class' => $layoutclass));
+            }
+            $output .= html_writer::end_tag('ol');
+        }
+
+        return $output;
+    }
+
+    // Custom methods.
+
+    /**
+     * Fills $this->correctinfo and $this->currentinfo depending on question options.
+     *
+     * @param object $question
+     */
+    protected function get_response_info($question) {
+
+        $gradingtype = $question->options->gradingtype;
+        switch ($gradingtype) {
+
+            case qtype_ordering_question::GRADING_ALL_OR_NOTHING:
+            case qtype_ordering_question::GRADING_ABSOLUTE_POSITION:
+                $this->correctinfo = $question->correctresponse;
+                $this->currentinfo = $question->currentresponse;
+                break;
+
+            case qtype_ordering_question::GRADING_RELATIVE_NEXT_EXCLUDE_LAST:
+            case qtype_ordering_question::GRADING_RELATIVE_NEXT_INCLUDE_LAST:
+                $this->correctinfo = $question->get_next_answerids($question->correctresponse,
+                        $gradingtype == qtype_ordering_question::GRADING_RELATIVE_NEXT_INCLUDE_LAST);
+                $this->currentinfo = $question->get_next_answerids($question->currentresponse,
+                        $gradingtype == qtype_ordering_question::GRADING_RELATIVE_NEXT_INCLUDE_LAST);
+                break;
+
+            case qtype_ordering_question::GRADING_RELATIVE_ONE_PREVIOUS_AND_NEXT:
+            case qtype_ordering_question::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT:
+                $this->correctinfo = $question->get_previous_and_next_answerids($question->correctresponse,
+                        $gradingtype == qtype_ordering_question::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT);
+                $this->currentinfo = $question->get_previous_and_next_answerids($question->currentresponse,
+                        $gradingtype == qtype_ordering_question::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT);
+                break;
+
+            case qtype_ordering_question::GRADING_LONGEST_ORDERED_SUBSET:
+            case qtype_ordering_question::GRADING_LONGEST_CONTIGUOUS_SUBSET:
+                $this->correctinfo = $question->correctresponse;
+                $this->currentinfo = $question->currentresponse;
+                $subset = $question->get_ordered_subset($gradingtype == qtype_ordering_question::GRADING_LONGEST_CONTIGUOUS_SUBSET);
+                foreach ($this->currentinfo as $position => $answerid) {
+                    if (array_search($position, $subset) === false) {
+                        $this->currentinfo[$position] = 0;
+                    } else {
+                        $this->currentinfo[$position] = 1;
+                    }
+                }
+                break;
+        }
+    }
+
+    /**
+     * Returns score for one item depending on correctness and question settings.
+     *
+     * @param object $question
+     * @param int $position
+     * @param int $answerid
+     * @return array (score, maxscore, fraction, percent, class, img)
+     */
+    protected function get_ordering_item_score($question, $position, $answerid) {
+
+        if (! isset($this->itemscores[$position])) {
+
+            if ($this->correctinfo === null || $this->currentinfo === null) {
+                $this->get_response_info($question);
+            }
+
+            $correctinfo = $this->correctinfo;
+            $currentinfo = $this->currentinfo;
+
+            $score    = 0;    // Actual score for this item.
+            $maxscore = null; // Max score for this item.
+            $fraction = 0.0;  // Fraction $score / $maxscore.
+            $percent  = 0;    // 100 * $fraction.
+            $class    = '';   // CSS class.
+            $img      = '';   // Icon to show correctness.
+
+            switch ($question->options->gradingtype) {
+
+                case qtype_ordering_question::GRADING_ALL_OR_NOTHING:
+                    if ($this->is_all_correct()) {
+                        $score = 1;
+                        $maxscore = 1;
+                    }
+                    break;
+
+                case qtype_ordering_question::GRADING_ABSOLUTE_POSITION:
+                    if (isset($correctinfo[$position])) {
+                        if ($correctinfo[$position] == $answerid) {
+                            $score = 1;
+                        }
+                        $maxscore = 1;
+                    }
+                    break;
+
+                case qtype_ordering_question::GRADING_RELATIVE_NEXT_EXCLUDE_LAST:
+                case qtype_ordering_question::GRADING_RELATIVE_NEXT_INCLUDE_LAST:
+                    if (isset($correctinfo[$answerid])) {
+                        if (isset($currentinfo[$answerid]) && $currentinfo[$answerid] == $correctinfo[$answerid]) {
+                            $score = 1;
+                        }
+                        $maxscore = 1;
+                    }
+                    break;
+
+                case qtype_ordering_question::GRADING_RELATIVE_ONE_PREVIOUS_AND_NEXT:
+                case qtype_ordering_question::GRADING_RELATIVE_ALL_PREVIOUS_AND_NEXT:
+                    if (isset($correctinfo[$answerid])) {
+                        $maxscore = 0;
+                        $prev = $correctinfo[$answerid]->prev;
+                        $maxscore += count($prev);
+                        $prev = array_intersect($prev, $currentinfo[$answerid]->prev);
+                        $score += count($prev);
+                        $next = $correctinfo[$answerid]->next;
+                        $maxscore += count($next);
+                        $next = array_intersect($next, $currentinfo[$answerid]->next);
+                        $score += count($next);
+                    }
+                    break;
+
+                case qtype_ordering_question::GRADING_LONGEST_ORDERED_SUBSET:
+                case qtype_ordering_question::GRADING_LONGEST_CONTIGUOUS_SUBSET:
+                    if (isset($correctinfo[$position])) {
+                        if (isset($currentinfo[$position])) {
+                            $score = $currentinfo[$position];
+                        }
+                        $maxscore = 1;
+                    }
+                    break;
+            }
+
+            if ($maxscore === null) {
+                // An unscored item is either an illegal item
+                // or last item of RELATIVE_NEXT_EXCLUDE_LAST
+                // or an item in an incorrect ALL_OR_NOTHING
+                // or an item from an unrecognized grading type.
+                $class = 'unscored';
+            } else {
+                if ($maxscore == 0) {
+                    $fraction = 0.0;
+                    $percent = 0;
+                } else {
+                    $fraction = ($score / $maxscore);
+                    $percent = round(100 * $fraction, 0);
+                }
+                switch (true) {
+                    case ($fraction > 0.999999):
+                        $class = 'correct';
+                        break;
+                    case ($fraction < 0.000001):
+                        $class = 'incorrect';
+                        break;
+                    case ($fraction >= 0.66):
+                        $class = 'partial66';
+                        break;
+                    case ($fraction >= 0.33):
+                        $class = 'partial33';
+                        break;
+                    default:
+                        $class = 'partial00';
+                        break;
+                }
+                $img = $this->feedback_image($fraction);
+            }
+
+            $score = array($score, $maxscore, $fraction, $percent, $class, $img);
+            $this->itemscores[$position] = $score;
+        }
+
+        return $this->itemscores[$position];
+    }
+
+    /**
+     * Return true if answer is 100% correct.
+     *
+     * @return bool
+     */
+    protected function is_all_correct() {
+        if ($this->allcorrect === null) {
+            // Use "==" to determine if the two "info" arrays are identical.
+            $this->allcorrect = ($this->correctinfo == $this->currentinfo);
+        }
+        return $this->allcorrect;
+    }
+}
diff --git a/question/type/ordering/settings.php b/question/type/ordering/settings.php
new file mode 100755
index 0000000..f4327bb
--- /dev/null
+++ b/question/type/ordering/settings.php
@@ -0,0 +1,30 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Ordering question settings page.
+ *
+ * @package    qtype_ordering
+ * @copyright  2016 Vadim Dvorovenko
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die;
+
+if ($ADMIN->fulltree) {
+    $settings->add(new admin_setting_configselect('qtype_ordering/defaultanswerformat',
+            get_string('defaultanswerformat', 'qtype_ordering'), '', FORMAT_MOODLE, format_text_menu()));
+}
diff --git a/question/type/ordering/styles.css b/question/type/ordering/styles.css
new file mode 100755
index 0000000..b0e7fe9
--- /dev/null
+++ b/question/type/ordering/styles.css
@@ -0,0 +1,93 @@
+/* ensure container covers the draggable items */
+.que.ordering div.answer.ordering { overflow: auto; }
+
+.que.ordering ul.sortablelist {
+    border           : 1px solid #ccc;
+    float            : left;
+    font-family      : Arial, sans-serif;
+    font-size        : 13px;
+    list-style-type  : none;
+    margin           : 0px;
+    margin-left      : 5px;
+    padding          : 4px 4px 0 4px;
+    width            : 80%;
+}
+.que.ordering ul.sortablelist,
+.que.ordering ul.sortablelist li {
+    -webkit-border-radius: 6px; /* Safari and Chrome */
+    -moz-border-radius: 6px;   /* Firefox */
+    -o-border-radius: 6px;    /* Opera */
+    border-radius: 6px;      /* CSS3 */
+}
+.que.ordering ul.sortablelist li {
+    background-color : #eeeeee;
+    border           : 1px solid #cccccc;
+    border-image     : initial;
+    list-style-type  : none;
+    margin           : 4px;
+    padding          : 6px 12px;
+}
+.que.ordering ul.sortablelist li.sortableitem {
+    position         : relative;
+    cursor           : move;
+}
+.que.ordering ul.sortablelist li.horizontal {
+    float            : left;
+}
+.que.ordering ul.sortablelist li.vertical {
+    min-height       : 18px;
+}
+.que.ordering ul.sortablelist li.correct {
+    background-color : #dff4d8; /* light green */
+    border-color     : #99ff66; /* gentle green */
+}
+.que.ordering ul.sortablelist li.partial66 {
+    background-color : #dff4d8; /* light green */
+    border-color     : #ff9900; /* dark  orange */
+}
+.que.ordering ul.sortablelist li.partial33 {
+    background-color : #ffebcc; /* light orange */
+    border-color     : #ff9900; /* dark orange */
+}
+.que.ordering ul.sortablelist li.partial00 {
+    background-color : #ffdddd; /* light red */
+    border-color     : #ff9900; /* dark orange */
+}
+.que.ordering ul.sortablelist li.incorrect {
+    background-color : #ffdddd; /* light red */
+    border-color     : #ff7373; /* gentle red */
+}
+.que.ordering ul.sortablelist li.correct,
+.que.ordering ul.sortablelist li.partial66,
+.que.ordering ul.sortablelist li.partial33,
+.que.ordering ul.sortablelist li.partial00,
+.que.ordering ul.sortablelist li.incorrect,
+.que.ordering ul.sortablelist li.unscored {
+    border-style     : solid;
+    border-width     : 4px;
+    margin-bottom    : 4px;
+    margin-top       : 4px;
+}
+
+/*
+    force containing DIV to cover the floating LI elements
+    Note: if you add "overflow:auto;  to "ol.correctorder"
+    then the numbers for the <LI> elements disappear !!
+*/
+.que.ordering div.rightanswer {
+    overflow: auto;
+}
+.que.ordering div.rightanswer ol.correctorder li.horizontal {
+    float            : left;
+    margin-left      : 24px;
+    margin-right     : 24px;
+}
+.que.ordering div.rightanswer ol.correctorder li.horizontal:first-child {
+    margin-left      : 0px;
+}
+.que.ordering div.rightanswer ol.correctorder li.vertical {
+}
+
+/* the width restriction can be limited to editors for draggable items
+   by inserting "fieldset:nth-child(n+4)" before "div.feditor" */
+#page-question-type-ordering form.mform fieldset:nth-child(n+4) div.feditor { max-width: 480px; }
diff --git a/question/type/ordering/version.php b/question/type/ordering/version.php
new file mode 100755
index 0000000..ce83101
--- /dev/null
+++ b/question/type/ordering/version.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information for the ordering question type
+ *
+ * @package    qtype_ordering
+ * @copyright  2013 Gordon Bateson (gordonbateson@gmail.com)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Prevent direct access to this script.
+defined('MOODLE_INTERNAL') || die();
+
+$plugin->cron      = 0;
+$plugin->component = 'qtype_ordering';
+$plugin->maturity  = MATURITY_STABLE;
+$plugin->requires  = 2011070100; // Moodle 2.1.
+$plugin->version   = 2016051153;
+$plugin->release   = '2016-05-11 (53)';
-- 
1.8.3.1

