From a330a8f28fcde0426eaf6649983bb48c378f4c89 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Mon, 16 Oct 2017 10:26:35 +0300
Subject: [PATCH 78/95] theme/fordson (patch) Course filter (renderer +
 settings + lang) m31 block_course_overview

---
 .../output/block_course_overview_renderer.php      | 462 +++++++++++++++++++++
 .../fordson/classes/output/course_filter_form.php  |  88 ++++
 theme/fordson/lang/he/theme_fordson.php            |  60 +++
 theme/fordson/settings.php                         |   1 +
 .../fordson/settings/my_course_filter_settings.php |  57 +++
 5 files changed, 668 insertions(+)
 create mode 100644 theme/fordson/classes/output/block_course_overview_renderer.php
 create mode 100644 theme/fordson/classes/output/course_filter_form.php
 create mode 100644 theme/fordson/lang/he/theme_fordson.php
 create mode 100644 theme/fordson/settings/my_course_filter_settings.php

diff --git a/theme/fordson/classes/output/block_course_overview_renderer.php b/theme/fordson/classes/output/block_course_overview_renderer.php
new file mode 100644
index 0000000..4809e7e
--- /dev/null
+++ b/theme/fordson/classes/output/block_course_overview_renderer.php
@@ -0,0 +1,462 @@
+<?php
+
+use core_completion\progress;
+
+if (file_exists($CFG->dirroot . "/blocks/course_overview/renderer.php") ) {
+    include_once($CFG->dirroot . "/blocks/course_overview/renderer.php");
+
+    include_once("course_filter_form.php");
+
+    define ('SORTCOURSESBY_ABC', 0);
+    define ('SORTCOURSESBY_LASTACCESS', 1);
+
+    class theme_fordson_block_course_overview_renderer extends block_course_overview_renderer {
+
+        public function course_overview($courses, $overviews) {
+            global $CFG, $USER;
+
+            list($categories, $childrencats, $roles, $filterbycategory, $filterbyrole, $filterbysemester, $html) = filter_courses_form();
+
+            // Initiate semester list keys.
+            $semesterlistkeys = array('-1'=>get_string('all'));
+            foreach (explode(',',get_string('semesterlistkeys','theme_fordson')) as $semesterkey) {
+                $semesterlistkeys[] = $semesterkey;
+            }
+
+            // Remove courses which are not chosen by Category / Role / Semester
+            foreach ($courses as $key => $course) {
+                $course->context = context_course::instance($course->id, MUST_EXIST);
+                if ($filterbyrole > 0 && !user_has_role_assignment($USER->id, $filterbyrole, $course->context->id)){
+                    //continue;
+                    unset($courses[$key]);
+                }
+                if ($filterbycategory > 0) {
+                    if (isset($CFG->showonlytopcategories)) {  //Show courses from his category and all children categories
+                        if (!array_key_exists($course->category, $childrencats) && $course->category != $filterbycategory) {
+                            //continue;   //Course id not in category or in child category
+                            unset($courses[$key]);
+                        }
+                    } else {   //Show only courses in THIS category
+                        if ($course->category != $filterbycategory) {
+                            //continue;
+                            unset($courses[$key]);
+                        }
+                    }
+                }
+                list($course_year, $course_semester ,$course_code, $course_groupcode) = explode('_', $course->idnumber.'____');
+                if ( $filterbysemester >= 0 and $course_semester != $semesterlistkeys[$filterbysemester] ) {
+                    unset($courses[$key]);
+                }
+            }
+
+            // Start of sort buttons
+            if (isset($PAGE->theme->settings->sortcoursesbylastaccess) && $PAGE->theme->settings->sortcoursesbylastaccess) {
+                $sortcoursesbylastaccess = SORTCOURSESBY_LASTACCESS;
+            } else{
+                $showonlytopcategories = SORTCOURSESBY_ABC;
+            }
+            $sortcoursesby = optional_param('sortcoursesby', $showonlytopcategories, PARAM_INT);
+            $selectedsort_abc = '';
+            $selectedsort_lastaccess = '';
+            switch ($sortcoursesby) {
+                case SORTCOURSESBY_ABC:
+                    // Sort by course fullname
+                    usort($courses, function($a, $b) { return strcmp($a->fullname, $b->fullname); });
+                    $selectedsort_abc = 'selected';
+
+                    break;
+                case SORTCOURSESBY_LASTACCESS:
+                    // Sort by user's lastaccess to course
+                    //usort($courses, function($a, $b) { return $a->lastaccess - $b->lastaccess; });
+
+                //default:
+                    global $DB;
+                    $lastaccesscourses = $DB->get_records('user_lastaccess', array('userid'=>$USER->id), 'timeaccess DESC');
+                    //if ($USER->id == 5151) print_object($lastaccesscourses);
+                    foreach ($lastaccesscourses as $c) {
+                        if (isset($courses[$c->courseid])) {
+                            $courses[$c->courseid]->lastaccess = $c->timeaccess;
+                        }
+                    }
+                    // Sort by user's lastaccess to course
+                    usort($courses, function($a, $b) { return $b->lastaccess - $a->lastaccess; });
+                    $selectedsort_lastaccess = 'selected';
+
+            }
+
+            //$filterbycategory = optional_param('filterByCategory', $CFG->defaultcoursecategroy, PARAM_INT);
+            //$filterbyrole = optional_param('filterByRole', -1, PARAM_INT);
+            //$filterbysemester = optional_param('filterBySemester', -1, PARAM_INT);
+            $formfilterparams = array(
+                'filterByCategory'=>$filterbycategory,
+                'filterByRole'=> $filterbyrole,
+                'filterBySemester'=> $filterbysemester);
+
+            $html .= html_writer::start_div('filterbuttons');
+            $sortcoursesurl = new moodle_url('/my/index.php', array_merge($formfilterparams, array('sortcoursesby' => SORTCOURSESBY_LASTACCESS)));
+            $sortcoursesurlhtml = html_writer::link($sortcoursesurl, get_string('sortbylastaccess', 'theme_fordson'), array('class' => 'btn btn-secondary '.$selectedsort_lastaccess));
+            $html .= html_writer::tag('div', $sortcoursesurlhtml, array('class' => 'sortbylastaccess pull-left'));
+
+            $sortcoursesurl = new moodle_url('/my/index.php', array_merge($formfilterparams, array('sortcoursesby' => SORTCOURSESBY_ABC)));
+            $sortcoursesurlhtml = html_writer::link($sortcoursesurl, get_string('sortbyabc', 'theme_fordson'), array('class' => 'btn btn-secondary '.$selectedsort_abc));
+            $html .= html_writer::tag('div', $sortcoursesurlhtml, array('class' => 'sortbyabc pull-left'));
+            $html .= html_writer::end_div();
+            $html .= html_writer::empty_tag('br');
+
+            //$html .= html_writer::tag('hr', '',array('style'=>'clear:both;'));
+            // End of sort buttons
+
+            //return $html . parent::course_overview($courses, $overviews);
+
+            //$html = '';
+            $config = get_config('block_course_overview');
+            if ($config->showcategories != BLOCKS_COURSE_OVERVIEW_SHOWCATEGORIES_NONE) {
+                global $CFG;
+                require_once($CFG->libdir.'/coursecatlib.php');
+            }
+            $ismovingcourse = false;
+            $courseordernumber = 0;
+            $maxcourses = count($courses);
+            $userediting = false;
+            // Intialise string/icon etc if user is editing and courses > 1
+            if ($this->page->user_is_editing() && (count($courses) > 1)) {
+                $userediting = true;
+                $this->page->requires->js_init_call('M.block_course_overview.add_handles');
+
+                // Check if course is moving
+                $ismovingcourse = optional_param('movecourse', FALSE, PARAM_BOOL);
+                $movingcourseid = optional_param('courseid', 0, PARAM_INT);
+            }
+
+            // Render first movehere icon.
+            if ($ismovingcourse) {
+                // Remove movecourse param from url.
+                $this->page->ensure_param_not_in_url('movecourse');
+
+                // Show moving course notice, so user knows what is being moved.
+                $html .= $this->output->box_start('notice');
+                $a = new stdClass();
+                $a->fullname = $courses[$movingcourseid]->fullname;
+                $a->cancellink = html_writer::link($this->page->url, get_string('cancel'));
+                $html .= get_string('movingcourse', 'block_course_overview', $a);
+                $html .= $this->output->box_end();
+
+                $moveurl = new moodle_url('/blocks/course_overview/move.php',
+                    array('sesskey' => sesskey(), 'moveto' => 0, 'courseid' => $movingcourseid));
+                // Create move icon, so it can be used.
+                $movetofirsticon = html_writer::empty_tag('img',
+                    array('src' => $this->output->pix_url('movehere'),
+                        'alt' => get_string('movetofirst', 'block_course_overview', $courses[$movingcourseid]->fullname),
+                        'title' => get_string('movehere')));
+                $moveurl = html_writer::link($moveurl, $movetofirsticon);
+                $html .= html_writer::tag('div', $moveurl, array('class' => 'movehere'));
+            }
+
+            foreach ($courses as $key => $course) {
+                // If moving course, then don't show course which needs to be moved.
+                if ($ismovingcourse && ($course->id == $movingcourseid)) {
+                    continue;
+                }
+                $html .= $this->output->box_start('coursebox', "course-{$course->id}");
+                $html .= html_writer::start_tag('div', array('class' => 'course_title'));
+                // If user is editing, then add move icons.
+                if ($userediting && !$ismovingcourse) {
+                    $moveicon = html_writer::empty_tag('img',
+                        array('src' => $this->pix_url('t/move')->out(false),
+                            'alt' => get_string('movecourse', 'block_course_overview', $course->fullname),
+                            'title' => get_string('move')));
+                    $moveurl = new moodle_url($this->page->url, array('sesskey' => sesskey(), 'movecourse' => 1, 'courseid' => $course->id));
+                    $moveurl = html_writer::link($moveurl, $moveicon);
+                    $html .= html_writer::tag('div', $moveurl, array('class' => 'move'));
+
+                }
+
+                // No need to pass title through s() here as it will be done automatically by html_writer.
+                $attributes = array('title' => $course->fullname);
+                if ($course->id > 0) {
+                    if (empty($course->visible)) {
+                        $attributes['class'] = 'dimmed';
+                    }
+                    $courseurl = new moodle_url('/course/view.php', array('id' => $course->id));
+                    $coursefullname = format_string(get_course_display_name_for_list($course), true, $course->id);
+                    $link = html_writer::link($courseurl, $coursefullname, $attributes);
+                    //$html .= $this->output->heading('<i class="fa fa-university"></i>'.$link, 2, 'title');
+                    $html .= $this->output->heading($link, 2, 'title');
+
+                    // Course completion
+                    $completion = new \completion_info($course);
+
+                    // First, let's make sure completion is enabled.
+                    if ($completion->is_enabled()) {
+                        $percentage = progress::get_course_progress_percentage($course);
+                        if (!is_null($percentage)) {
+                            $percentage = floor($percentage);
+                        } else {
+                            $percentage = 0;
+                        }
+
+                        // $completion->is_course_complete($USER->id);
+                        $html .= html_writer::start_div('progress');
+                        // BS4 progress
+//                        $html .= html_writer::tag('div', '', array('class' => 'progress-bar', 'role' => 'progressbar',
+//                            'style' => "width: $percentage%", 'aria-valuenow' => $percentage,
+//                            'aria-valuemin' => '0', 'aria-valuemax' => '100'));
+                        // HTML5 progress
+
+                        //$html .= html_writer::tag('span', get_string('activitiescompleted', 'completion'));
+                        $html .= html_writer::tag('progress', "$percentage %", array('value'=> $percentage, 'max'=>'100'));
+                        $html .= html_writer::tag('span', " $percentage% " . get_string('completed', 'completion'));
+                        $html .= html_writer::end_div();
+
+                    }
+
+                    /*
+                    // Syllabus link + icon (top left)
+                    global $USER;
+                    $syllabuslink = html_writer::link(new moodle_url('/ws/levinsky/get_syllabus.php',
+                        array('courseid' => $course->id, 'userid' => $USER->id)), get_string('syllabus', 'theme_fordson'),
+                        array('target' => '_new', 'class' => 'link'));
+                    $html .= html_writer::tag('div', '<i class="fa fa-graduation-cap"></i>'.$syllabuslink, array('id'=>'syllabus'));
+                    */
+                } else {
+                    $html .= $this->output->heading(html_writer::link(
+                            new moodle_url('/auth/mnet/jump.php', array('hostid' => $course->hostid, 'wantsurl' => '/course/view.php?id='.$course->remoteid)),
+                            format_string($course->shortname, true), $attributes) . ' (' . format_string($course->hostname) . ')', 2, 'title');
+                }
+
+                //if ($course->has_summary()) {
+                    $coursefullsummary = $course->summary;
+                    $cs_notags = format_text(strip_tags($coursefullsummary), FORMAT_PLAIN);
+                    $coursesummary = mb_substr(trim($cs_notags), 0, 100);
+                    $html .= html_writer::div($coursesummary, 'coursesummary',array('id' => 'id_coursesummary'));
+                //}
+
+                /*
+                $html .= html_writer::tag('div', '<i class="fa fa-calendar"></i>'.get_string('timetabletitle', 'theme_fordson'),
+                    array('id'=>'timetableview', 'class'=>'tt'.$course->id));
+                $html .= html_writer::script("Y.one('#timetableview.tt$course->id').on('click', function(){
+                                        Y.one('#timetabletitle.ttt$course->id').toggleClass('tttshow');
+                                        Y.one('#timetable.tt$course->id').toggleClass('ttshow')
+                                        })");
+                */
+
+                // Display group(s) info. (Galit)
+                $coursegroups = groups_get_all_groups($course->id);
+                $meshotaf = '';
+                $grouplist = '';
+                if (count($coursegroups) > 1) {
+                    $meshotaf = ' משותף לכל הקבוצות / ';
+                    $grouplist = ' קבוצות: ';
+                    foreach ($coursegroups as $group) {
+                        $grouplist .= " - ". str_replace('קבוצה',' ',$group->name);
+                    }
+                }
+                $html .= html_writer::tag('div', $meshotaf.$grouplist, array('id'=>'groups'));
+
+                // List teachers.
+                global $CFG;
+                if ($course instanceof stdClass) {
+                    require_once($CFG->libdir. '/coursecatlib.php');
+                    $course = new course_in_list($course);
+                }
+                $html .= html_writer::start_tag('div', array('id' => 'teacherlist')); // #teacherlist
+                if ($course->has_course_contacts() and count($course->get_course_contacts()) < 4 ) {
+                    //$content .= get_string('teachers').': ';
+                    $html .= html_writer::start_tag('ul', array('class' => 'teachers'));
+                    $html .= html_writer::tag('li', get_string('teachers','theme_fordson').': ');
+                    $countteachers = count($course->get_course_contacts());
+                    $teachercounter = 0;
+                    foreach ($course->get_course_contacts() as $userid => $coursecontact) {
+                        $teachercounter++;
+                        if ($teachercounter < $countteachers) {
+                            $delemiter = ', ';
+                        } else {
+                            $delemiter = '';
+                        }
+                        // Disable link to teacher's profile.
+                        //$name = html_writer::link(new moodle_url('/user/view.php',
+                        //    array('id' => $userid, 'course' => SITEID)), $coursecontact['username'].$delemiter);
+                        $html .= html_writer::tag('li', $coursecontact['username'].$delemiter);
+                    }
+                    $html .= html_writer::end_tag('ul'); // .teacher
+                }
+                $html .= html_writer::end_tag('div'); // #teacherlist
+
+                /*
+                // If we display course in collapsed form but the course has summary or course contacts, display the link to the info page.
+                $html .= html_writer::start_tag('div', array('class' => 'moreinfo'));
+                //if ($chelper->get_show_courses() < self::COURSECAT_SHOW_COURSES_EXPANDED) {
+                    if ($course->has_summary() || $course->has_course_contacts() || $course->has_course_overviewfiles()) {
+                        $url = new moodle_url('/course/info.php', array('id' => $course->id));
+                        $image = html_writer::empty_tag('img', array('src' => $this->output->pix_url('i/info'),
+                            'alt' => get_string('summary')));
+                        $strmoreinfo = get_string('moreinfo', 'theme_fordson');
+                        $html .= html_writer::link($url, $image.$strmoreinfo, array('title' => get_string('summary')));
+                        // Make sure JS file to expand course content is included.
+                        //$this->coursecat_include_js();
+                    }
+                //}
+                $html .= html_writer::end_tag('div'); // .moreinfo
+                */
+/*
+                // Display course timetable (using course's teacher) in realtime, from Michlol database.
+                $course_users = $course->get_course_contacts();
+                $teacher = array_shift($course_users);
+                global $USER;
+                $specialmsg = 'מועדי המפגשים בקורסים המשותפים הם מפגשים לכל הקבוצות בקורס. אם אינכם יודעים מהו מועד המפגש של הקבוצה שלך ראה ב"מערכת מידע לסטודנט"';
+                $specialmsghtml = '';//html_writer::tag('span', $specialmsg, array('id'=>'timetablemsg', 'style'=>'color:red;'));
+
+                $html .= html_writer::tag('div', get_string('timetabletitle', 'theme_fordson').'-'.$specialmsghtml,
+                    array('id'=>'timetabletitle','class'=>'ttt'.$course->id));
+                //$timetable = $this->get_course_timetable($course, $USER->username); // $teacher['user']->username
+                $timetable = $this->get_course_timetable($course, $teacher['user']->username);
+                $html .= html_writer::tag('div', $timetable);
+*/
+                //$html .= $this->output->box('', 'flush');
+                $html .= html_writer::end_tag('div');
+
+                if (!empty($config->showchildren) && ($course->id > 0)) {
+                    // List children here.
+                    if ($children = block_course_overview_get_child_shortnames($course->id)) {
+                        $html .= html_writer::tag('span', $children, array('class' => 'coursechildren'));
+                    }
+                }
+
+                // If user is moving courses, then down't show overview.
+                if (isset($overviews[$course->id]) && !$ismovingcourse) {
+                    $html .= $this->activity_display($course->id, $overviews[$course->id]);
+                }
+
+                if ($config->showcategories != BLOCKS_COURSE_OVERVIEW_SHOWCATEGORIES_NONE) {
+                    // List category parent or categories path here.
+                    $currentcategory = coursecat::get($course->category, IGNORE_MISSING);
+                    if ($currentcategory !== null) {
+                        $html .= html_writer::start_tag('div', array('class' => 'categorypath'));
+                        if ($config->showcategories == BLOCKS_COURSE_OVERVIEW_SHOWCATEGORIES_FULL_PATH) {
+                            foreach ($currentcategory->get_parents() as $categoryid) {
+                                $category = coursecat::get($categoryid, IGNORE_MISSING);
+                                if ($category !== null) {
+                                    $html .= $category->get_formatted_name().' / ';
+                                }
+                            }
+                        }
+                        $html .= $currentcategory->get_formatted_name();
+                        $html .= html_writer::end_tag('div');
+                    }
+                }
+
+                $html .= $this->output->box('', 'flush');
+                $html .= $this->output->box_end();
+                $courseordernumber++;
+                if ($ismovingcourse) {
+                    $moveurl = new moodle_url('/blocks/course_overview/move.php',
+                        array('sesskey' => sesskey(), 'moveto' => $courseordernumber, 'courseid' => $movingcourseid));
+                    $a = new stdClass();
+                    $a->movingcoursename = $courses[$movingcourseid]->fullname;
+                    $a->currentcoursename = $course->fullname;
+                    $movehereicon = html_writer::empty_tag('img',
+                        array('src' => $this->output->pix_url('movehere'),
+                            'alt' => get_string('moveafterhere', 'block_course_overview', $a),
+                            'title' => get_string('movehere')));
+                    $moveurl = html_writer::link($moveurl, $movehereicon);
+                    $html .= html_writer::tag('div', $moveurl, array('class' => 'movehere'));
+                }
+            }
+            // Wrap course list in a div and return.
+            return html_writer::tag('div', $html, array('class' => 'course_list'));
+        }
+
+        private function get_course_timetable($course, $teacheruserid) {
+            //global $USER;
+            global $CFG;
+
+            return '.';
+
+            // todo: return to real user
+            //$sql_krsidnumber='תשעד_א_8742029_1212';
+            $sql_krsidnumber=$course->idnumber;
+            //$sql_usridnumber = 301653259;
+            $sql_usridnumber = $teacheruserid; //$USER->idnumber;
+            //$sql_allornum=3; // 0 = all sessions , num = from current date, retrieve num of sessions.
+            $sql_allornum=5;
+
+            $conn = mssql_connect($CFG->kobi_ws_host, $CFG->kobi_ws_dbuser, $CFG->kobi_ws_dbpass);
+            mssql_select_db( "formoodle2", $conn );
+            $stmt = mssql_init("spmifgashim",$conn);
+            mssql_bind($stmt, "@krsidnumber", $sql_krsidnumber, SQLVARCHAR, FALSE, FALSE, 30);
+            mssql_bind($stmt, "@usridnumber", $sql_usridnumber,  SQLINT4);
+            mssql_bind($stmt, "@AllOrNum", $sql_allornum,  SQLINT4);
+
+
+            $result = mssql_execute($stmt);
+
+            #$result = mssql_free_statement($stmt);
+
+            $columnnames = array(
+                'dt'=> get_string('date'),
+                'yom'=> get_string('day'),
+                'shaot'=> 'שעות', //get_string('times'),
+                'more'=> 'מרצה', //get_string('teacher'),
+                'hdr' => 'חדר', // get_string('room'),
+                'cancel'=> 'האם בוטל?' //get_string('cancelled')
+            );
+
+            if (!$result)
+            {
+                $message = 'ERROR: ' . mssql_get_last_message();
+                return $message;
+            } else {
+                $i = 0;
+                $htmloutput = '<table id="timetable" class="tt'.$course->id.'" border=0><thead><tr>';
+                while ($i < mssql_num_fields($result)) {
+                    $meta = mssql_fetch_field($result, $i);
+                    if ($i != 3) // Do not show "teacher name" column.
+                        $htmloutput .= '<th>' . $columnnames[$meta->name] . '</th>';
+                    $i = $i + 1;
+                }
+                $htmloutput .= '</tr></thead>';
+
+                /*
+                          // Get next (single) session.
+                          $row = mssql_fetch_row($result);
+                          $htmloutput .= '<tr>';
+                          $c_row = current($row);
+                          $htmloutput .= '<td>' . $c_row . '</td>';
+                          $htmloutput .= '</tr>';
+                */
+//
+                // Get all sessions.
+                $sessions = 0;
+                while ( ($row = mssql_fetch_row($result)) and $sessions++ < 6) { // todo: disable 5 sessions limit
+                    // Show only 4 future sessions. "more..." link to see all future sessions
+                    $count = count($row);
+                    $y = 0;
+                    $htmloutput .= '<tr>';
+                    while ($y < $count) {
+                        $c_row = current($row);
+                        if ($y != 3) // Do not show "teacher name" column.
+                            $htmloutput .= '<td>' . $c_row . '</td>';
+                        next($row);
+                        $y = $y + 1;
+                    }
+                    $htmloutput .= '</tr>';
+                }
+//
+                mssql_free_result($result);
+
+                $htmloutput .= '</table>';
+            }
+
+            if ($sessions == 0)
+                $htmloutput = html_writer::div(get_string('noclasses', 'theme_fordson'), 'alert tt'.$course->id ,array('id'=>'timetable'));
+
+            //echo count($row);die;
+            // No timetable for this course and teacher.
+            //if (count($row) < 6) $htmloutput = '';
+
+            mssql_close($conn); // close connection
+            return $htmloutput;
+
+        }
+    }
+}
\ No newline at end of file
diff --git a/theme/fordson/classes/output/course_filter_form.php b/theme/fordson/classes/output/course_filter_form.php
new file mode 100644
index 0000000..f81c94e
--- /dev/null
+++ b/theme/fordson/classes/output/course_filter_form.php
@@ -0,0 +1,88 @@
+<?php
+
+/*  Filter courses by categories and roles form function
+ *  Used in:
+ *      theme_fordson_core_user_renderer::courselist()
+ *      theme_fordson_core_course_renderer::frontpage_my_courses()
+*/
+
+function filter_courses_form() {
+    global $DB, $CFG, $PAGE;
+
+    $html = '';
+
+    $filterbycategory = optional_param('filterByCategory', $PAGE->theme->settings->defaultcoursecategroy, PARAM_INT);
+    $filterbyrole = optional_param('filterByRole', -1, PARAM_INT);
+    $filterbysemester = optional_param('filterBySemester', -1, PARAM_INT);
+
+    $semesterlist = array('-1'=>get_string('all'));
+    //$semesterlistkeys = explode(',', get_string('semesterlistkeys', 'theme_fordson'));
+    foreach (explode(',',get_string('semesterlist','theme_fordson')) as $key => $semester) {
+        //$semesterlist[$semesterlistkeys[$key]] = $semester;
+        $semesterlist[] = $semester;
+    }
+
+    if (isset($PAGE->theme->settings->showonlytopcategories) && $PAGE->theme->settings->showonlytopcategories) {
+        $showonlytopcategories = true;
+    } else{
+        $showonlytopcategories = false;
+    }
+
+    require_once($CFG->libdir . '/coursecatlib.php');
+
+    $childrencats = array();
+    $categories['-1'] =  get_string('showallcourses', 'theme_fordson');    //Add all courses option (No filter)
+    if ($showonlytopcategories) {  //Show only top categories
+
+        foreach (coursecat::get(0)->get_children() as $category) {
+            $categories[$category->id] = $category->name;
+        }
+
+        if ($filterbycategory > 0){ //If filter is set get a list of child categories
+            foreach (coursecat::get($filterbycategory)->get_children() as $category) {
+                $childrencats[$category->id] = $category->name;
+            }
+        }
+    } else {  //Show all categories
+        $fullcategories = coursecat::make_categories_list();
+        //$categories = array_merge($categories, $fullcategories);
+        $categories = array_merge($categories, $fullcategories);
+    }
+
+    $rolestudent = $DB->get_record('role', array('shortname'=>'student'));
+    $roleteacher = $DB->get_record('role', array('shortname'=>'editingteacher'));
+
+    $roles = array();
+    $roles['-1'] =  get_string('anyrole', 'theme_fordson');    //Add all courses option (No filter)
+    $roles[$rolestudent->id] = $rolestudent->name;
+    $roles[$roleteacher->id] = $roleteacher->name;
+
+    $html .= html_writer::start_tag('div', array('class'=>'filterwrapper'));
+    $html .= html_writer::start_tag('form',array('id'=>'frmFilters', 'action'=>'', 'method'=>'post'));
+    $html .= html_writer::start_tag('div',array('style'=>'width:95%;margin-left:auto;margin-right:auto;'));
+    $html .= html_writer::start_tag('h4');
+
+    $html .= get_string('filterby', 'theme_fordson');
+    //$html .= get_string('filterbycategory', 'theme_fordson');
+    $html .= html_writer::select($categories, 'filterByCategory', $filterbycategory, '',
+        array(  'onchange' => 'this.form.submit()'));
+    //,'style'=>'margin-left:auto;margin-right:auto;'));
+    $html .= '&nbsp;&nbsp;';
+
+    /*
+            $html .= get_string('filterbyrole', 'theme_fordson');
+            $html .= html_writer::select($roles, 'filterByRole', $filterbyrole, get_string('choose'),
+                array('onchange' => 'this.form.submit()'));
+    */
+    $html .= get_string('filterbysemester', 'theme_fordson');
+    $html .= html_writer::select($semesterlist, 'filterBySemester', $filterbysemester, '' /* get_string('choose') */,
+        array('onchange' => 'this.form.submit()'));
+
+    //$html .= html_writer::start_tag('h4');
+    $html .= html_writer::end_tag('div');
+    $html .= html_writer::end_tag('form');
+    $html .= html_writer::end_tag('div');
+
+    return array($categories, $childrencats, $roles, $filterbycategory, $filterbyrole, $filterbysemester, $html);
+
+}
\ No newline at end of file
diff --git a/theme/fordson/lang/he/theme_fordson.php b/theme/fordson/lang/he/theme_fordson.php
new file mode 100644
index 0000000..46fe763
--- /dev/null
+++ b/theme/fordson/lang/he/theme_fordson.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Language file.
+ *
+ * @package    theme_fordson
+ * @copyright  2016 Chris Kenniburg
+ * @credits    theme_boost - MoodleHQ
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/// Renderer - course filter
+$string['showallcourses'] = 'תצוגת כל הקורסים';
+$string['anyrole'] = 'כל התפקידים';
+$string['filterby'] = 'סינון לפי: ';
+$string['filterbycategory'] = 'קטגוריה';
+$string['filterbyrole'] = 'תפקיד';
+$string['defaultcoursecategroy'] = 'קטגוריית בררת־מחדל';
+$string['defaultcoursecategroydescription'] = 'קטגורית בררת המחדל בעמוד עדכונים בקורסים שלי';
+$string['showonlytopcategories'] = 'תצוגת קטגוריות ראשיות בלבד';
+$string['showonlytopcategoriesdescription'] = 'תצוגת קטגוריות ראשיות בלבד במסנן הקטגוריות';
+$string['navshowallcourses'] = 'תצוגת כל הקורסים';
+$string['confignavshowallcourses'] = 'This setting determines whether users who are enrolled in courses can see Courses (listing all courses) in the navigation, in addition to My Courses (listing courses in which they are enrolled).';
+$string['sortcoursesbylastaccess'] = 'מיון קורסים';
+$string['sortcoursesbylastaccessdescription'] = "מיון רשימת שמות הקורסים לפי זמן גישה";
+$string['filterbysemester'] = 'סמסטר';
+$string['semesterlist'] = 'סמסטר א,סמסטר ב,סמסטר קיץ,שנתי';
+$string['semesterlistkeys'] = 'א,ב,ק,ש';
+$string['my'] = 'חדש בקורסים';
+$string['filtercourses'] = 'סינון רשימת קורסים';
+$string['filtercourses_desc'] = 'סינון רשימת הקורסים של המשתמש בעמוד האישי';
+$string['sortbylastaccess'] = 'מיון קורסים לפי גישה אחרונה';
+$string['sortbyabc'] = 'מיון קורסים לפי א-ב';
+$string['timetabletitle'] = 'המפגשים הקרובים';
+$string['syllabus'] = 'סילבוס';
+$string['moreinfo'] = 'מידע נוסף';
+$string['mytimetable'] = 'המפגשים הקרובים';
+$string['chooseyear'] = 'בחרו שנה';
+$string['nosyllabus'] = 'לא זמין סילבוס לקורס זה, אנא פנו אל המרצה לקבלת מידע נוסף';
+$string['syllabus'] = 'סילבוס';
+$string['mytimetable'] = 'לוח מפגשים בכיתות';
+$string['noclasses'] = 'מידע אודות מיקום המפגשים בכיתות אינו זמין, יש לפנות למזכירות למידע עדכני.';
+$string['teachers'] = 'מרצים';
+$string['mycoursesfilter_settings'] = 'מסנן הקורסים שלי';
diff --git a/theme/fordson/settings.php b/theme/fordson/settings.php
index 7915b58..801db3c 100755
--- a/theme/fordson/settings.php
+++ b/theme/fordson/settings.php
@@ -41,6 +41,7 @@ if ($ADMIN->fulltree) {
     $settings = new theme_boost_admin_settingspage_tabs('themesettingfordson', get_string('configtitle', 'theme_fordson'));
 
     require('settings/presets_settings.php');
+    require('settings/my_course_filter_settings.php');
     require('settings/colours_settings.php');
     require('settings/menu_settings.php');
     require('settings/content_settings.php');
diff --git a/theme/fordson/settings/my_course_filter_settings.php b/theme/fordson/settings/my_course_filter_settings.php
new file mode 100644
index 0000000..5442dbb
--- /dev/null
+++ b/theme/fordson/settings/my_course_filter_settings.php
@@ -0,0 +1,57 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * My courses filter settings page file.
+ * (Moodle 3.1 block_course_overview)
+ *
+ * @package    theme_fordson
+ * @copyright  2016 Chris Kenniburg
+ * @credits    theme_boost - MoodleHQ
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$page = new admin_settingpage('theme_fordson_my_courses_filter', get_string('mycoursesfilter_settings', 'theme_fordson'));
+
+// Filtered courselist setting (custom plugin)
+//$categories = make_categories_options();
+$setting = new admin_setting_heading('theme_fordson/filtercourses', get_string('filtercourses', 'theme_fordson'),
+    get_string('filtercourses_desc', 'theme_fordson'));
+$page->add($setting);
+
+if (file_exists($CFG->libdir. '/coursecatlib.php') ) {
+    require_once($CFG->libdir. '/coursecatlib.php');
+    $categories = coursecat::make_categories_list();
+    $categories['-1'] = get_string('navshowallcourses','theme_fordson');
+    //$frontpage = $ADMIN->locate('frontpage');
+    $setting = new admin_setting_configselect('theme_fordson/defaultcoursecategroy',get_string('defaultcoursecategroy', 'theme_fordson'),
+        get_string('defaultcoursecategroydescription', 'theme_fordson'),'-1', $categories);
+    $page->add($setting);
+
+    $setting = new admin_setting_configcheckbox('theme_fordson/showonlytopcategories', get_string('showonlytopcategories', 'theme_fordson'),
+        get_string('showonlytopcategoriesdescription', 'theme_fordson'), 0);
+    $page->add($setting);
+
+    $setting = new admin_setting_configcheckbox('theme_fordson/sortcoursesbylastaccess', get_string('sortcoursesbylastaccess', 'theme_fordson'),
+        get_string('sortcoursesbylastaccessdescription', 'theme_fordson'), 0);
+    $page->add($setting);
+}
+
+
+// Must add the page after definiting all the settings!
+$settings->add($page);
-- 
1.8.3.1

