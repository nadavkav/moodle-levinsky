From f507c4a3b3b49f2249141a201bc5ce9f8b55bc41 Mon Sep 17 00:00:00 2001
From: root <root@moodle.levinsky.ac.il>
Date: Sun, 16 Jul 2017 23:50:15 +0300
Subject: [PATCH 06/95] mod/hvp (new)

---
 mod/hvp/.gitignore                                 |    4 +
 mod/hvp/.gitmodules                                |    9 +
 mod/hvp/.jshintrc                                  |    9 +
 mod/hvp/.travis.yml                                |   41 +
 mod/hvp/LICENSE                                    |  340 +++++
 mod/hvp/README.md                                  |   75 ++
 mod/hvp/ajax.php                                   |  280 ++++
 mod/hvp/autoloader.php                             |   71 +
 .../moodle2/backup_hvp_activity_task.class.php     |   83 ++
 mod/hvp/backup/moodle2/backup_hvp_stepslib.php     |  197 +++
 .../moodle2/restore_hvp_activity_task.class.php    |  112 ++
 mod/hvp/backup/moodle2/restore_hvp_stepslib.php    |  292 ++++
 mod/hvp/classes/content_type_cache_form.php        |   62 +
 mod/hvp/classes/content_user_data.php              |  235 ++++
 mod/hvp/classes/editor_ajax.php                    |  119 ++
 mod/hvp/classes/editor_framework.php               |  310 +++++
 mod/hvp/classes/event.php                          |   98 ++
 .../event/course_module_instance_list_viewed.php   |   39 +
 mod/hvp/classes/event/course_module_viewed.php     |   47 +
 mod/hvp/classes/file_storage.php                   |  820 ++++++++++++
 mod/hvp/classes/framework.php                      | 1396 ++++++++++++++++++++
 mod/hvp/classes/results.php                        |  369 ++++++
 mod/hvp/classes/task/look_for_updates.php          |   47 +
 mod/hvp/classes/task/remove_old_log_entries.php    |   48 +
 mod/hvp/classes/task/remove_tmpfiles.php           |   63 +
 mod/hvp/classes/upload_libraries_form.php          |  138 ++
 mod/hvp/classes/user_grades.php                    |   96 ++
 mod/hvp/classes/xapi_result.php                    |  142 ++
 mod/hvp/dataviews.js                               |   42 +
 mod/hvp/db/access.php                              |  159 +++
 mod/hvp/db/install.php                             |   55 +
 mod/hvp/db/install.xml                             |  214 +++
 mod/hvp/db/tasks.php                               |   54 +
 mod/hvp/db/upgrade.php                             |  371 ++++++
 mod/hvp/editor.js                                  |   28 +
 mod/hvp/grade.php                                  |  138 ++
 mod/hvp/index.php                                  |  141 ++
 mod/hvp/lang/de/hvp.php                            |  274 ++++
 mod/hvp/lang/en/hvp.php                            |  333 +++++
 mod/hvp/lang/fr/hvp.php                            |  278 ++++
 mod/hvp/lang/he/hvp.php                            |  274 ++++
 mod/hvp/lang/no/hvp.php                            |  290 ++++
 mod/hvp/lang/tr/hvp.php                            |  278 ++++
 mod/hvp/lib.php                                    |  399 ++++++
 mod/hvp/library_list.php                           |  148 +++
 mod/hvp/locallib.php                               |  406 ++++++
 mod/hvp/mod_form.php                               |  306 +++++
 mod/hvp/pix/icon.png                               |  Bin 0 -> 1991 bytes
 mod/hvp/pix/icon.svg                               |   22 +
 mod/hvp/renderer.php                               |   82 ++
 mod/hvp/review.php                                 |  167 +++
 mod/hvp/settings-hide-key.js                       |   31 +
 mod/hvp/settings.php                               |  131 ++
 mod/hvp/styles.css                                 |   82 ++
 mod/hvp/templates/review.mustache                  |   35 +
 mod/hvp/thirdpartylibs.xml                         |   21 +
 mod/hvp/upgrade_content_page.php                   |  102 ++
 mod/hvp/version.php                                |   31 +
 mod/hvp/view.php                                   |  212 +++
 mod/hvp/xapi-collector.js                          |  133 ++
 mod/hvp/xapi-custom-report.css                     |   69 +
 61 files changed, 10848 insertions(+)
 create mode 100644 mod/hvp/.gitignore
 create mode 100644 mod/hvp/.gitmodules
 create mode 100644 mod/hvp/.jshintrc
 create mode 100644 mod/hvp/.travis.yml
 create mode 100644 mod/hvp/LICENSE
 create mode 100644 mod/hvp/README.md
 create mode 100644 mod/hvp/ajax.php
 create mode 100644 mod/hvp/autoloader.php
 create mode 100644 mod/hvp/backup/moodle2/backup_hvp_activity_task.class.php
 create mode 100644 mod/hvp/backup/moodle2/backup_hvp_stepslib.php
 create mode 100644 mod/hvp/backup/moodle2/restore_hvp_activity_task.class.php
 create mode 100644 mod/hvp/backup/moodle2/restore_hvp_stepslib.php
 create mode 100644 mod/hvp/classes/content_type_cache_form.php
 create mode 100644 mod/hvp/classes/content_user_data.php
 create mode 100644 mod/hvp/classes/editor_ajax.php
 create mode 100644 mod/hvp/classes/editor_framework.php
 create mode 100644 mod/hvp/classes/event.php
 create mode 100644 mod/hvp/classes/event/course_module_instance_list_viewed.php
 create mode 100644 mod/hvp/classes/event/course_module_viewed.php
 create mode 100644 mod/hvp/classes/file_storage.php
 create mode 100644 mod/hvp/classes/framework.php
 create mode 100644 mod/hvp/classes/results.php
 create mode 100644 mod/hvp/classes/task/look_for_updates.php
 create mode 100644 mod/hvp/classes/task/remove_old_log_entries.php
 create mode 100644 mod/hvp/classes/task/remove_tmpfiles.php
 create mode 100644 mod/hvp/classes/upload_libraries_form.php
 create mode 100644 mod/hvp/classes/user_grades.php
 create mode 100644 mod/hvp/classes/xapi_result.php
 create mode 100644 mod/hvp/dataviews.js
 create mode 100644 mod/hvp/db/access.php
 create mode 100644 mod/hvp/db/install.php
 create mode 100644 mod/hvp/db/install.xml
 create mode 100644 mod/hvp/db/tasks.php
 create mode 100644 mod/hvp/db/upgrade.php
 create mode 100644 mod/hvp/editor.js
 create mode 100644 mod/hvp/grade.php
 create mode 100644 mod/hvp/index.php
 create mode 100644 mod/hvp/lang/de/hvp.php
 create mode 100644 mod/hvp/lang/en/hvp.php
 create mode 100644 mod/hvp/lang/fr/hvp.php
 create mode 100644 mod/hvp/lang/he/hvp.php
 create mode 100644 mod/hvp/lang/no/hvp.php
 create mode 100644 mod/hvp/lang/tr/hvp.php
 create mode 100644 mod/hvp/lib.php
 create mode 100644 mod/hvp/library_list.php
 create mode 100644 mod/hvp/locallib.php
 create mode 100644 mod/hvp/mod_form.php
 create mode 100644 mod/hvp/pix/icon.png
 create mode 100644 mod/hvp/pix/icon.svg
 create mode 100644 mod/hvp/renderer.php
 create mode 100644 mod/hvp/review.php
 create mode 100644 mod/hvp/settings-hide-key.js
 create mode 100644 mod/hvp/settings.php
 create mode 100644 mod/hvp/styles.css
 create mode 100644 mod/hvp/templates/review.mustache
 create mode 100644 mod/hvp/thirdpartylibs.xml
 create mode 100644 mod/hvp/upgrade_content_page.php
 create mode 100644 mod/hvp/version.php
 create mode 100644 mod/hvp/view.php
 create mode 100644 mod/hvp/xapi-collector.js
 create mode 100644 mod/hvp/xapi-custom-report.css

diff --git a/mod/hvp/.gitignore b/mod/hvp/.gitignore
new file mode 100644
index 0000000..4e18290
--- /dev/null
+++ b/mod/hvp/.gitignore
@@ -0,0 +1,4 @@
+files/tmp/*
+files/content/*
+files/libraries/*
+*~
diff --git a/mod/hvp/.gitmodules b/mod/hvp/.gitmodules
new file mode 100644
index 0000000..536c11a
--- /dev/null
+++ b/mod/hvp/.gitmodules
@@ -0,0 +1,9 @@
+[submodule "library"]
+	path = library
+	url = https://github.com/h5p/h5p-php-library.git
+[submodule "editor"]
+	path = editor
+	url = https://github.com/h5p/h5p-editor-php-library.git
+[submodule "reporting"]
+	path = reporting
+	url = https://github.com/h5p/h5p-php-report.git
diff --git a/mod/hvp/.jshintrc b/mod/hvp/.jshintrc
new file mode 100644
index 0000000..36a1eed
--- /dev/null
+++ b/mod/hvp/.jshintrc
@@ -0,0 +1,9 @@
+{
+  "globals": {
+    "H5PDataView": true,
+    "H5P": true,
+    "H5PIntegration": true,
+    "HVPSettingsHideKey": true,
+    "console": true
+  }
+}
diff --git a/mod/hvp/.travis.yml b/mod/hvp/.travis.yml
new file mode 100644
index 0000000..f7c57f0
--- /dev/null
+++ b/mod/hvp/.travis.yml
@@ -0,0 +1,41 @@
+language: php
+
+sudo: false
+
+cache:
+  directories:
+    - $HOME/.composer/cache
+
+php:
+ - 5.6
+ - 7.0
+
+env:
+ global:
+  - MOODLE_BRANCH=MOODLE_30_STABLE
+  - IGNORE_PATHS=lang
+ matrix:
+  - DB=pgsql
+  - DB=mysqli
+
+before_install:
+  - phpenv config-rm xdebug.ini
+  - cd ../..
+  - composer selfupdate
+  - composer create-project -n --no-dev moodlerooms/moodle-plugin-ci ci ^1
+  - export PATH="$(cd ci/bin; pwd):$(cd ci/vendor/bin; pwd):$PATH"
+
+install:
+  - moodle-plugin-ci install
+
+script:
+  - moodle-plugin-ci phplint
+  - moodle-plugin-ci phpcpd
+  - moodle-plugin-ci phpmd
+  - moodle-plugin-ci codechecker
+  - moodle-plugin-ci csslint
+  - moodle-plugin-ci shifter
+  - moodle-plugin-ci jshint
+  - moodle-plugin-ci validate
+  - moodle-plugin-ci phpunit
+  - moodle-plugin-ci behat
diff --git a/mod/hvp/LICENSE b/mod/hvp/LICENSE
new file mode 100644
index 0000000..8cdb845
--- /dev/null
+++ b/mod/hvp/LICENSE
@@ -0,0 +1,340 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc., <http://fsf.org/>
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                    GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+                            NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    {description}
+    Copyright (C) {year}  {fullname}
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  {signature of Ty Coon}, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
+
diff --git a/mod/hvp/README.md b/mod/hvp/README.md
new file mode 100644
index 0000000..a6d71dc
--- /dev/null
+++ b/mod/hvp/README.md
@@ -0,0 +1,75 @@
+# H5P Moodle Plugin
+
+This is the 1.0-rc version of the H5P plugin for Moodle. That means that this
+version is feature complete but you might encounter bugs or issues that will
+not be present in the final version.
+
+Create and add rich content inside your LMS for free. Some examples of what you
+get with H5P are Interactive Video, Quizzes, Collage and Timeline.
+
+## Description
+
+One of the great benefits with using H5P is that it gives you access to lots of
+different [interactive content types](https://h5p.org/content-types-and-applications).
+
+Another great benefit with H5P is that it allows you to easily share and reuse
+content. To reuse content, you just download the H5P you would like to edit and
+make your changes – e.g. translate to a new language or adjust it to a new
+situation.
+
+H5P is:
+
+* Open Source
+* Free to Use
+* HTML5
+* Responsive
+
+The H5P community is actively contributing to improve H5P. Updates and new
+features are continuously made available on the community portal
+[H5P.org](https://h5p.org).
+
+View our [setup for Moodle](https://h5p.org/moodle) to get information on how
+to get started with H5P.
+
+## Install
+
+### Beta Version
+If you can't wait for the final release or simply wish to help test the plugin,
+you can download the beta version.
+Here is an example. Remember to replace the version number with the latest from
+the [releases](https://github.com/h5p/h5p-moodle-plugin/releases) page:
+```
+git clone --branch 1.0-rc.2 https://github.com/h5p/h5p-moodle-plugin.git hvp && cd hvp && git submodule update --init
+```
+
+It's not recommended to download the tag/version from the
+[releases](https://github.com/h5p/h5p-moodle-plugin/releases) page as you would
+also have to download the appropriate version of
+[h5p-php-library](https://github.com/h5p/h5p-php-library/releases) and
+[h5p-editor-php-library](https://github.com/h5p/h5p-php-library/releases) to
+put inside the `library` and `editor` folders.
+
+### Development Version
+Warning! Using the development version may cause strange bugs, so do not use it
+for production!
+
+Inside your `moodle/mod` folder you run the following command:
+```
+git clone https://github.com/h5p/h5p-moodle-plugin.git hvp && cd hvp && git submodule update --init
+```
+
+### Enabling The Plugin
+In Moodle, go to administrator -> plugin overview, and press 'Update database'.
+
+## Settings
+
+Settings can be found at: Site Administration -> Plugins -> Activity Modules -> H5P
+
+## Contributing
+
+Feel free to contribute by:
+* Submitting translations
+* Testing and creating issues. But remember to check if the issues is already
+reported before creating a new one. Perhaps you can contribute to an already
+existing issue?
+* Solving issues and submitting code through Pull Requests.
diff --git a/mod/hvp/ajax.php b/mod/hvp/ajax.php
new file mode 100644
index 0000000..7ef2f0d
--- /dev/null
+++ b/mod/hvp/ajax.php
@@ -0,0 +1,280 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Responsible for handling AJAX requests related to H5P.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+define('AJAX_SCRIPT', true);
+require(__DIR__ . '/../../config.php');
+require_once($CFG->libdir . '/filelib.php');
+require_once("locallib.php");
+
+require_login();
+
+$action = required_param('action', PARAM_ALPHA);
+switch($action) {
+
+    /*
+     * Handle user data reporting
+     *
+     * Type: HTTP POST
+     *
+     * Parameters:
+     *  - content_id
+     *  - data_type
+     *  - sub_content_id
+     */
+    case 'contentsuserdata':
+        \mod_hvp\content_user_data::handle_ajax();
+        break;
+
+    /*
+     * Handle restricting H5P libraries
+     *
+     * Type: HTTP GET
+     *
+     * Parameters:
+     *  - library_id
+     *  - restrict (0 or 1)
+     *  - token
+     */
+    case 'restrictlibrary':
+
+        // Check permissions.
+        $context = \context_system::instance();
+        if (!has_capability('mod/hvp:restrictlibraries', $context)) {
+            \H5PCore::ajaxError(get_string('nopermissiontorestrict', 'hvp'));
+            http_response_code(403);
+            break;
+        }
+
+        $libraryid = required_param('library_id', PARAM_INT);
+        $restrict = required_param('restrict', PARAM_INT);
+
+        if (!\H5PCore::validToken('library_' . $libraryid, required_param('token', PARAM_RAW))) {
+            \H5PCore::ajaxError(get_string('invalidtoken', 'hvp'));
+            exit;
+        }
+
+        hvp_restrict_library($libraryid, $restrict);
+        header('Cache-Control: no-cache');
+        header('Content-Type: application/json');
+        echo json_encode(array(
+            'url' => (new moodle_url('/mod/hvp/ajax.php', array(
+                'action' => 'restrict_library',
+                'token' => \H5PCore::createToken('library_' . $libraryid),
+                'restrict' => ($restrict === '1' ? 0 : 1),
+                'library_id' => $libraryid
+            )))->out(false)));
+        break;
+
+    /*
+     * Collecting data needed by H5P content upgrade
+     *
+     * Type: HTTP GET
+     *
+     * Parameters:
+     *  - library (Format: /<machine-name>/<major-version>/<minor-version>)
+     */
+    case 'getlibrarydataforupgrade':
+
+        // Check permissions.
+        $context = \context_system::instance();
+        if (!has_capability('mod/hvp:updatelibraries', $context)) {
+            \H5PCore::ajaxError(get_string('nopermissiontoupgrade', 'hvp'));
+            http_response_code(403);
+            break;
+        }
+
+        $library = required_param('library', PARAM_TEXT);
+        $library = explode('/', substr($library, 1));
+
+        if (count($library) !== 3) {
+            http_response_code(422);
+            return;
+        }
+
+        $library = hvp_get_library_upgrade_info($library[0], $library[1], $library[2]);
+
+        header('Cache-Control: no-cache');
+        header('Content-Type: application/json');
+        print json_encode($library);
+
+        break;
+
+    /*
+     * Saving upgraded content, and returning next batch to process
+     *
+     * Type: HTTP POST
+     *
+     * Parameters:
+     *  - library_id
+     */
+    case 'libraryupgradeprogress':
+        // Check upgrade permissions.
+        $context = \context_system::instance();
+        if (!has_capability('mod/hvp:updatelibraries', $context)) {
+            \H5PCore::ajaxError(get_string('nopermissiontoupgrade', 'hvp'));
+            http_response_code(403);
+            break;
+        }
+
+        // Because of a confirmed bug in PHP, filter_input(INPUT_SERVER, ...)
+        // will return null on some versions of FCGI/PHP (5.4 and probably
+        // older versions as well), ref. https://bugs.php.net/bug.php?id=49184.
+        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
+            $libraryid = required_param('library_id', PARAM_INT);
+            $out = hvp_content_upgrade_progress($libraryid);
+            header('Cache-Control: no-cache');
+            header('Content-Type: application/json');
+            print json_encode($out);
+        } else {
+            // Only allow POST.
+            http_response_code(405);
+        }
+        break;
+
+    /*
+     * Handle set finished / storing grades
+     *
+     * Type: HTTP GET
+     *
+     * Parameters:
+     *  - contentId
+     *  - score
+     *  - maxScore
+     */
+    case 'setfinished':
+        \mod_hvp\user_grades::handle_ajax();
+        break;
+
+    /*
+     * Provide data for results view
+     *
+     * Type: HTTP GET
+     *
+     * Parameters:
+     *  int content_id
+     *  int offset
+     *  int limit
+     *  int sortBy
+     *  int sortDir
+     *  string[] filters
+     */
+    case 'results':
+        $results = new \mod_hvp\results();
+        $results->print_results();
+        break;
+
+    /*
+     * Load list of libraries or details for library.
+     *
+     * Parameters:
+     *  string machineName
+     *  int majorVersion
+     *  int minorVersion
+     */
+    case 'libraries':
+        // Get parameters.
+        $name = optional_param('machineName', '', PARAM_TEXT);
+        $major = optional_param('majorVersion', 0, PARAM_INT);
+        $minor = optional_param('minorVersion', 0, PARAM_INT);
+        $editor = \mod_hvp\framework::instance('editor');
+
+        if (!empty($name)) {
+            $editor->ajax->action(H5PEditorEndpoints::SINGLE_LIBRARY, $name,
+                $major, $minor, \mod_hvp\framework::get_language());
+
+            new \mod_hvp\event(
+                    'library', null,
+                    null, null,
+                    $name, $major . '.' . $minor
+            );
+        } else {
+            $editor->ajax->action(H5PEditorEndpoints::LIBRARIES);
+        }
+
+        break;
+
+    /*
+     * Load content type cache list to display available libraries in hub
+     */
+    case 'contenttypecache':
+        $editor = \mod_hvp\framework::instance('editor');
+        $editor->ajax->action(H5PEditorEndpoints::CONTENT_TYPE_CACHE);
+        break;
+
+    /*
+     * Handle file upload through the editor.
+     *
+     * Parameters:
+     *  int contentId
+     *  int contextId
+     */
+    case 'files':
+        $token = required_param('token', PARAM_RAW);
+        $contentid = required_param('contentId', PARAM_INT);
+        $editor = \mod_hvp\framework::instance('editor');
+        $editor->ajax->action(H5PEditorEndpoints::FILES, $token, $contentid);
+        break;
+
+    /*
+     * Handle file upload through the editor.
+     *
+     * Parameters:
+     *  raw token
+     *  raw contentTypeUrl
+     */
+    case 'libraryinstall':
+        $token = required_param('token', PARAM_RAW);
+        $machinename = required_param('id', PARAM_TEXT);
+        $editor = \mod_hvp\framework::instance('editor');
+        $editor->ajax->action(H5PEditorEndpoints::LIBRARY_INSTALL, $token, $machinename);
+        break;
+
+    /*
+     * Install libraries from h5p and retrieve content json
+     *
+     * Parameters:
+     *  file h5p
+     */
+    case 'libraryupload':
+        $token = required_param('token', PARAM_RAW);
+        $editor = \mod_hvp\framework::instance('editor');
+        $uploadpath = $_FILES['h5p']['tmp_name'];
+        $contentid = optional_param('contentId', 0, PARAM_INT);
+        $editor->ajax->action(H5PEditorEndpoints::LIBRARY_UPLOAD, $token, $uploadpath, $contentid);
+        break;
+
+    /*
+     * Record xAPI result from view
+     */
+    case 'xapiresult':
+        \mod_hvp\xapi_result::handle_ajax();
+        break;
+
+
+    /*
+     * Throw error if AJAX isnt handeled
+     */
+    default:
+        throw new coding_exception('Unhandled AJAX');
+        break;
+}
diff --git a/mod/hvp/autoloader.php b/mod/hvp/autoloader.php
new file mode 100644
index 0000000..d63365b
--- /dev/null
+++ b/mod/hvp/autoloader.php
@@ -0,0 +1,71 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * A simple autoloader which makes it easy to load classes when you need them.
+ *
+ * @param string $class name
+ */
+function hvp_autoloader($class) {
+    global $CFG;
+    static $classmap;
+    if (!isset($classmap)) {
+        $classmap = array(
+        // Core.
+        'H5PCore' => 'library/h5p.classes.php',
+        'H5PFrameworkInterface' => 'library/h5p.classes.php',
+        'H5PContentValidator' => 'library/h5p.classes.php',
+        'H5PValidator' => 'library/h5p.classes.php',
+        'H5PStorage' => 'library/h5p.classes.php',
+        'H5PExport' => 'library/h5p.classes.php',
+        'H5PDevelopment' => 'library/h5p-development.class.php',
+        'H5PFileStorage' => 'library/h5p-file-storage.interface.php',
+        'H5PDefaultStorage' => 'library/h5p-default-storage.class.php',
+        'H5PEventBase' => 'library/h5p-event-base.class.php',
+
+        // Editor.
+        'H5peditor' => 'editor/h5peditor.class.php',
+        'H5PEditorAjax' => 'editor/h5peditor-ajax.class.php',
+        'H5PEditorAjaxInterface' => 'editor/h5peditor-ajax.interface.php',
+        'H5peditorFile' => 'editor/h5peditor-file.class.php',
+        'H5peditorStorage' => 'editor/h5peditor-storage.interface.php',
+
+        // Reporting.
+        'H5PReport' => 'reporting/h5p-report.class.php',
+        'H5PReportXAPIData' => 'reporting/h5p-report-xapi-data.class.php',
+        'ChoiceProcessor' => 'reporting/type-processors/choice-processor.class.php',
+        'CompoundProcessor' => 'reporting/type-processors/compound-processor.class.php',
+        'FillInProcessor' => 'reporting/type-processors/fill-in-processor.class.php',
+        'LongChoiceProcessor' => 'reporting/type-processors/long-choice-processor.class.php',
+        'MatchingProcessor' => 'reporting/type-processors/matching-processor.class.php',
+        'TrueFalseProcessor' => 'reporting/type-processors/true-false-processor.class.php',
+        'TypeProcessor' => 'reporting/type-processors/type-processor.class.php',
+
+        // Plugin specific classes are loaded by Moodle.
+        );
+    }
+
+    if (isset($classmap[$class])) {
+        require_once($CFG->dirroot . '/mod/hvp/' . $classmap[$class]);
+    }
+}
+spl_autoload_register('hvp_autoloader');
diff --git a/mod/hvp/backup/moodle2/backup_hvp_activity_task.class.php b/mod/hvp/backup/moodle2/backup_hvp_activity_task.class.php
new file mode 100644
index 0000000..a855aa6
--- /dev/null
+++ b/mod/hvp/backup/moodle2/backup_hvp_activity_task.class.php
@@ -0,0 +1,83 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Defines backup_hvp_activity_task class
+ *
+ * @package     mod_hvp
+ * @category    backup
+ * @copyright   2016 Joubel AS <contact@joubel.com>
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/hvp/backup/moodle2/backup_hvp_stepslib.php');
+
+/**
+ * Provides the steps to perform one complete backup of a H5P instance
+ */
+class backup_hvp_activity_task extends backup_activity_task {
+
+    /**
+     * No specific settings for this activity
+     */
+    protected function define_my_settings() {
+    }
+
+    /**
+     * Defines a backup step to store the instance data in the hvp.xml file
+     */
+    protected function define_my_steps() {
+        global $CFG;
+
+        // Add hvp activity data and content files.
+        $this->add_step(new backup_hvp_activity_structure_step('hvp_structure', 'hvp.xml'));
+
+        // Allow user to override library backup.
+        $backuplibraries = !(isset($CFG->mod_hvp_backup_libraries) && $CFG->mod_hvp_backup_libraries === '0');
+
+        // Exclude hvp libraries step for local 'imports'.
+        if ($backuplibraries && backup_controller_dbops::backup_includes_files($this->plan->get_backupid())) {
+
+            // Note that this step will only run once per backup as it generates
+            // a shared resource.
+            $this->add_step(new backup_hvp_libraries_structure_step('hvp_libraries', 'hvp_libraries.xml'));
+        }
+    }
+
+    /**
+     * Encodes URLs to the index.php and view.php scripts
+     *
+     * @param string $content some HTML text that eventually contains URLs to the activity instance scripts
+     * @return string the content with the URLs encoded
+     */
+    static public function encode_content_links($content) {
+        global $CFG;
+
+        $base = preg_quote($CFG->wwwroot, "/");
+
+        // Link to the list of glossaries.
+        $search = "/(".$base."\/mod\/hvp\/index.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@HVPINDEX*$2@$', $content);
+
+        // Link to hvp view by module id.
+        $search = "/(".$base."\/mod\/hvp\/view.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@HVPVIEWBYID*$2@$', $content);
+
+        return $content;
+    }
+}
diff --git a/mod/hvp/backup/moodle2/backup_hvp_stepslib.php b/mod/hvp/backup/moodle2/backup_hvp_stepslib.php
new file mode 100644
index 0000000..9b875cf
--- /dev/null
+++ b/mod/hvp/backup/moodle2/backup_hvp_stepslib.php
@@ -0,0 +1,197 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Defines backup structure steps for both hvp content and hvp libraries.
+ *
+ * @package     mod_hvp
+ * @category    backup
+ * @copyright   2016 Joubel AS <contact@joubel.com>
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Define the complete hvp structure for backup, with file and id annotations
+ */
+class backup_hvp_activity_structure_step extends backup_activity_structure_step {
+
+    protected function define_structure() {
+
+        // To know if we are including user info.
+        $userinfo = $this->get_setting_value('userinfo');
+
+        // Define each element separated.
+        $hvp = new backup_nested_element('hvp', array('id'), array(
+            'name',
+            'machine_name',
+            'major_version',
+            'minor_version',
+            'intro',
+            'introformat',
+            'json_content',
+            'embed_type',
+            'disable',
+            'content_type',
+            'author',
+            'license',
+            'meta_keywords',
+            'meta_description',
+            'slug',
+            'timecreated',
+            'timemodified'
+        ));
+
+        // User data.
+        $entries = new backup_nested_element('content_user_data');
+        $contentuserdata = new backup_nested_element('entry', array(
+            'user_id', // Annotated.
+            'sub_content_id'
+            ), array(
+            'data_id',
+            'data',
+            'preloaded',
+            'delete_on_content_change',
+        ));
+
+        // Build the tree.
+
+        $hvp->add_child($entries);
+        $entries->add_child($contentuserdata);
+
+        // Define sources.
+
+        // Uses library name and version instead of main_library_id.
+        $hvp->set_source_sql('SELECT h.id, hl.machine_name,
+                                           hl.major_version,
+                                           hl.minor_version,
+                                     h.name, h.intro, h.introformat, h.json_content,
+                                     h.embed_type, h.disable, h.content_type, h.author,
+                                     h.license, h.meta_keywords, h.meta_description,
+                                     h.slug, h.timecreated, h.timemodified
+                                FROM {hvp} h
+                                JOIN {hvp_libraries} hl ON hl.id = h.main_library_id
+                               WHERE h.id = ?', array(backup::VAR_ACTIVITYID));
+
+        // All the rest of elements only happen if we are including user info.
+        if ($userinfo) {
+            $contentuserdata->set_source_table('hvp_content_user_data', array('hvp_id' => backup::VAR_PARENTID));
+        }
+
+        // Define id annotations.
+        $contentuserdata->annotate_ids('user', 'user_id');
+        // In an ideal world we would use the main_library_id and annotate that
+        // but since we cannot know the required dependencies of the content
+        // without parsing json_content and crawling the libraries_libraries
+        // (library dependencies) table it's much easier to just include all
+        // installed libraries.
+
+        // Define file annotations.
+        $hvp->annotate_files('mod_hvp', 'intro', null, null);
+        $hvp->annotate_files('mod_hvp', 'content', null, null);
+
+        // Return the root element (hvp), wrapped into standard activity structure.
+        return $this->prepare_activity_structure($hvp);
+    }
+}
+
+/**
+ * Structure step in charge of constructing the hvp_libraries.xml file for
+ * all the H5P libraries.
+ */
+class backup_hvp_libraries_structure_step extends backup_structure_step {
+
+    protected function execute_condition() {
+        $fullpath = $this->task->get_taskbasepath();
+        if (empty($fullpath)) {
+            throw new backup_step_exception('backup_structure_step_undefined_fullpath');
+        }
+
+        // Modify filename to use a globally shared file for all libraries.
+        $this->filename = "../{$this->filename}";
+
+        // Append the filename to the full path.
+        $fullpath = rtrim($fullpath, '/') . '/' . $this->filename;
+
+        // Determine if already generated.
+        return !file_exists($fullpath);
+    }
+
+    protected function define_structure() {
+
+        // Define each element separate.
+
+        // Libraries.
+        $libraries = new backup_nested_element('hvp_libraries');
+        $library = new backup_nested_element('library', array('id'), array(
+            'title',
+            'machine_name',
+            'major_version',
+            'minor_version',
+            'patch_version',
+            'runnable',
+            'fullscreen',
+            'embed_types',
+            'preloaded_js',
+            'preloaded_css',
+            'drop_library_css',
+            'semantics',
+            'restricted',
+            'tutorial_url'
+        ));
+
+        // Library translations.
+        $translations = new backup_nested_element('translations');
+        $translation = new backup_nested_element('translation', array(
+            'language_code'
+        ), array(
+            'language_json'
+        ));
+
+        // Library dependencies.
+        $dependencies = new backup_nested_element('dependencies');
+        $dependency = new backup_nested_element('dependency', array(
+            'required_library_id'
+        ), array(
+            'dependency_type'
+        ));
+
+        // Build the tree.
+        $libraries->add_child($library);
+
+        $library->add_child($translations);
+        $translations->add_child($translation);
+
+        $library->add_child($dependencies);
+        $dependencies->add_child($dependency);
+
+        // Define sources.
+
+        $library->set_source_table('hvp_libraries', array());
+
+        $translation->set_source_table('hvp_libraries_languages', array('library_id' => backup::VAR_PARENTID));
+
+        $dependency->set_source_table('hvp_libraries_libraries', array('library_id' => backup::VAR_PARENTID));
+
+        // Define file annotations.
+        $context = \context_system::instance();
+        $library->annotate_files('mod_hvp', 'libraries', null, $context->id);
+
+        // Return root element.
+        return $libraries;
+    }
+}
diff --git a/mod/hvp/backup/moodle2/restore_hvp_activity_task.class.php b/mod/hvp/backup/moodle2/restore_hvp_activity_task.class.php
new file mode 100644
index 0000000..3fe44cf
--- /dev/null
+++ b/mod/hvp/backup/moodle2/restore_hvp_activity_task.class.php
@@ -0,0 +1,112 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Describe how H5P activites are to be restored from backup
+ *
+ * @package     mod_hvp
+ * @category    backup
+ * @copyright   2016 Joubel AS <contact@joubel.com>
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/hvp/backup/moodle2/restore_hvp_stepslib.php'); // Because it exists (must).
+
+/**
+ * hvp restore task that provides all the settings and steps to perform one
+ * complete restore of the activity
+ */
+class restore_hvp_activity_task extends restore_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity.
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Add H5P libraries.
+        $this->add_step(new restore_hvp_libraries_structure_step('hvp_structure', 'hvp_libraries.xml'));
+
+        // Add H5P content.
+        $this->add_step(new restore_hvp_activity_structure_step('hvp_structure', 'hvp.xml'));
+    }
+
+    /**
+     * Define the contents in the activity that must be
+     * processed by the link decoder
+     */
+    static public function define_decode_contents() {
+        $contents = array();
+
+        $contents[] = new restore_decode_content('hvp', array('intro'), 'hvp');
+
+        return $contents;
+    }
+
+    /**
+     * Define the decoding rules for links belonging
+     * to the activity to be executed by the link decoder
+     */
+    static public function define_decode_rules() {
+        $rules = array();
+
+        $rules[] = new restore_decode_rule('HVPVIEWBYID', '/mod/hvp/view.php?id=$1', 'course_module');
+        $rules[] = new restore_decode_rule('HVPINDEX', '/mod/hvp/index.php?id=$1', 'course');
+
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * hvp logs. It must return one array
+     * of {@link restore_log_rule} objects
+     */
+    static public function define_restore_log_rules() {
+        $rules = array();
+
+        $rules[] = new restore_log_rule('hvp', 'add', 'view.php?id={course_module}', '{hvp}');
+        $rules[] = new restore_log_rule('hvp', 'update', 'view.php?id={course_module}', '{hvp}');
+        $rules[] = new restore_log_rule('hvp', 'view', 'view.php?id={course_module}', '{hvp}');
+
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * course logs. It must return one array
+     * of {@link restore_log_rule} objects
+     *
+     * Note this rules are applied when restoring course logs
+     * by the restore final task, but are defined here at
+     * activity level. All them are rules not linked to any module instance (cmid = 0)
+     */
+    static public function define_restore_log_rules_for_course() {
+        $rules = array();
+
+        $rules[] = new restore_log_rule('hvp', 'view all', 'index.php?id={course}', null);
+
+        return $rules;
+    }
+}
diff --git a/mod/hvp/backup/moodle2/restore_hvp_stepslib.php b/mod/hvp/backup/moodle2/restore_hvp_stepslib.php
new file mode 100644
index 0000000..38ff530
--- /dev/null
+++ b/mod/hvp/backup/moodle2/restore_hvp_stepslib.php
@@ -0,0 +1,292 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Restore structure step for both hvp content and hvp libraries
+ *
+ * @package     mod_hvp
+ * @category    backup
+ * @copyright   2016 Joubel AS <contact@joubel.com>
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Structure step to restore one H5P activity
+ */
+class restore_hvp_activity_structure_step extends restore_activity_structure_step {
+
+    protected function define_structure() {
+        $paths = array();
+        $userinfo = $this->get_setting_value('userinfo');
+
+        // Restore activities.
+        $paths[] = new restore_path_element('hvp', '/activity/hvp');
+
+        if ($userinfo) {
+            // Restore content state.
+            $paths[] = new restore_path_element('content_user_data', '/activity/hvp/content_user_data/entry');
+        }
+
+        // Return the paths wrapped into standard activity structure.
+        return $this->prepare_activity_structure($paths);
+    }
+
+    protected function process_hvp($data) {
+        global $DB;
+
+        $data = (object) $data;
+        $data->course = $this->get_courseid();
+        $data->main_library_id = \restore_hvp_libraries_structure_step::get_library_id($data);
+
+        $data->timecreated = $this->apply_date_offset($data->timecreated);
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+
+        // Insert the hvp record.
+        $newitemid = $DB->insert_record('hvp', $data);
+        // Immediately after inserting "activity" record, call this.
+        $this->apply_activity_instance($newitemid);
+    }
+
+    protected function process_content_user_data($data) {
+        global $DB;
+
+        $data = (object) $data;
+        $data->user_id = $this->get_mappingid('user', $data->user_id);
+        $data->hvp_id = $this->get_new_parentid('hvp');
+
+        $DB->insert_record('hvp_content_user_data', $data);
+    }
+
+    protected function after_execute() {
+        // Add files for intro field.
+        $this->add_related_files('mod_hvp', 'intro', null);
+
+        // Add hvp related files.
+        $this->add_related_files('mod_hvp', 'content', 'hvp');
+    }
+}
+
+/**
+ * Structure step to restore H5P libraries
+ */
+class restore_hvp_libraries_structure_step extends restore_activity_structure_step {
+
+    protected function execute_condition() {
+        static $librariesrestored;
+
+        // Prevent this step from running more than once
+        // since all hvp_libraries.xml files are the same.
+        if (!empty($librariesrestored)) {
+            return false;
+        }
+        $librariesrestored = true;
+
+        // Get full path to activity backup location.
+        $fullpath = $this->task->get_taskbasepath();
+        if (empty($fullpath)) {
+            throw new backup_step_exception('backup_structure_step_undefined_fullpath');
+        }
+        $fullpath = rtrim($fullpath, '/');
+
+        // Check for the activity's local hvp_libraries.xml file.
+        if (file_exists("{$fullpath}/{$this->filename}")) {
+            // Use that.
+            return true;
+        }
+
+        // Look for a global hvp_libraries.xml file.
+        if (file_exists("{$fullpath}/../{$this->filename}")) {
+            // Use it.
+            $this->filename = "../{$this->filename}";
+            return true;
+        }
+
+        // Not able to find a hvp_libraries.xml, skip restore and let the admin
+        // be responsible for providing the approperiate libraries.
+        // (Could also be using Import which doesn't need libraries).
+        return false;
+    }
+
+    protected function define_structure() {
+        $paths = array();
+
+        // Restore libraries first.
+        $paths[] = new restore_path_element('hvp_library', '/hvp_libraries/library');
+
+        // Add translations.
+        $paths[] = new restore_path_element('hvp_library_translation', '/hvp_libraries/library/translations/translation');
+
+        // ... and dependencies.
+        $paths[] = new restore_path_element('hvp_library_dependency', '/hvp_libraries/library/dependencies/dependency');
+
+        // Return the paths wrapped into standard activity structure.
+        return $this->prepare_activity_structure($paths);
+    }
+
+    protected function process_hvp_library($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+        unset($data->id);
+
+        $libraryid = self::get_library_id($data);
+        if (!$libraryid) {
+            // There is no updating of libraries. If an older patch version exists
+            // on the site that one will be used instead of the new one in the backup.
+            // This is due to the default behavior when files are restored in Moodle.
+
+            // Restore library.
+            $libraryid = $DB->insert_record('hvp_libraries', $data);
+
+            // Update libraries cache.
+            self::get_library_id($data, $libraryid);
+        }
+
+        // Keep track of libraries for translations and dependencies.
+        $this->set_mapping('hvp_library', $oldid, $libraryid);
+
+        // Update any dependencies that require this library.
+        $this->update_missing_dependencies($oldid, $libraryid);
+    }
+
+    protected function process_hvp_library_translation($data) {
+        global $DB;
+
+        $data = (object) $data;
+        $data->library_id = $this->get_new_parentid('hvp_library');
+
+        // Check that translations doesn't exists.
+        $translation = $DB->get_record_sql(
+            'SELECT id
+               FROM {hvp_libraries_languages}
+              WHERE library_id = ?
+                AND language_code = ?',
+              array($data->library_id,
+                    $data->language_code)
+        );
+
+        if (empty($translation)) {
+            // Only restore translations if library has been restored.
+            $DB->insert_record('hvp_libraries_languages', $data);
+        }
+    }
+
+    protected function process_hvp_library_dependency($data) {
+        global $DB;
+
+        $data             = (object) $data;
+        $data->library_id = $this->get_new_parentid('hvp_library');
+
+        $newlibraryid = $this->get_mappingid('hvp_library', $data->required_library_id);
+        if ($newlibraryid) {
+            $data->required_library_id = $newlibraryid;
+
+            // Check that the dependency doesn't exists.
+            $dependency = $DB->get_record_sql(
+                'SELECT id
+                 FROM {hvp_libraries_libraries}
+                WHERE library_id = ?
+                  AND required_library_id = ?',
+                [
+                    $data->library_id,
+                    $data->required_library_id,
+                ]
+            );
+            if (empty($dependency)) {
+                $DB->insert_record('hvp_libraries_libraries', $data);
+            }
+        } else {
+            // The required dependency hasn't been restored yet. We need to add this dependency later.
+            $this->update_missing_dependencies($data->required_library_id, null, $data);
+        }
+    }
+
+    protected function after_execute() {
+        // Add files for libraries.
+        $context = \context_system::instance();
+        $this->add_related_files('mod_hvp', 'libraries', null, $context->id);
+    }
+
+    /**
+     * Cache to reduce queries.
+     */
+    public static function get_library_id(&$library, $set = null) {
+        static $keytoid;
+        global $DB;
+
+        $key = $library->machine_name . ' ' . $library->major_version . '.' . $library->minor_version;
+        if (is_null($keytoid)) {
+            $keytoid = array();
+        }
+        if ($set !== null) {
+            $keytoid[$key] = $set;
+        } else if (!isset($keytoid[$key])) {
+            $lib = $DB->get_record_sql(
+                'SELECT id
+                   FROM {hvp_libraries}
+                  WHERE machine_name = ?
+                    AND major_version = ?
+                    AND minor_version = ?',
+                  array($library->machine_name,
+                        $library->major_version,
+                        $library->minor_version)
+            );
+
+            // Non existing = false.
+            $keytoid[$key] = (empty($lib) ? false : $lib->id);
+        }
+
+        return $keytoid[$key];
+    }
+
+    /**
+     * Keep track of missing dependencies since libraries aren't inserted
+     * in any special order
+     */
+    private function update_missing_dependencies($oldid, $newid, $setmissing = null) {
+        static $missingdeps;
+        global $DB;
+
+        if (is_null($missingdeps)) {
+            $missingdeps = array();
+        }
+
+        if ($setmissing !== null) {
+            $missingdeps[$oldid][] = $setmissing;
+        } else if (isset($missingdeps[$oldid])) {
+            foreach ($missingdeps[$oldid] as $missingdep) {
+                $missingdep->required_library_id = $newid;
+
+                // Check that the dependency doesn't exists.
+                $dependency = $DB->get_record_sql(
+                    'SELECT id
+                       FROM {hvp_libraries_libraries}
+                      WHERE library_id = ?
+                        AND required_library_id = ?',
+                      array($missingdep->library_id,
+                            $missingdep->required_library_id)
+                );
+                if (empty($dependency)) {
+                    $DB->insert_record('hvp_libraries_libraries', $missingdep);
+                }
+            }
+            unset($missingdeps[$oldid]);
+        }
+    }
+}
diff --git a/mod/hvp/classes/content_type_cache_form.php b/mod/hvp/classes/content_type_cache_form.php
new file mode 100644
index 0000000..6cc6f52
--- /dev/null
+++ b/mod/hvp/classes/content_type_cache_form.php
@@ -0,0 +1,62 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * \mod_hvp\content_type_cache_form class
+ *
+ * @package    mod_hvp
+ * @copyright  2017 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_hvp;
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->libdir . '/formslib.php');
+
+/**
+ * Form to update the content type cache that mirrors the available
+ * libraries in the H5P hub.
+ *
+ * @package    mod_hvp
+ * @copyright  2017 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class content_type_cache_form extends \moodleform {
+
+    /**
+     * Define form elements
+     */
+    public function definition() {
+        // Get form.
+        $mform = $this->_form;
+
+        // Get and format date.
+        $lastupdate = get_config('mod_hvp', 'content_type_cache_updated_at');
+
+        $dateformatted = $lastupdate ? \userdate($lastupdate) : get_string('ctcacheneverupdated', 'hvp');
+
+        // Add last update info.
+        $mform->addElement('static', 'lastupdate',
+            get_string('ctcachelastupdatelabel', 'hvp'), $dateformatted);
+
+        $mform->addElement('static', 'lastupdatedescription', '',
+            get_string('ctcachedescription', 'hvp'));
+
+        // Update cache button.
+        $this->add_action_buttons(false, get_string('ctcachebuttonlabel', 'hvp'));
+    }
+}
diff --git a/mod/hvp/classes/content_user_data.php b/mod/hvp/classes/content_user_data.php
new file mode 100644
index 0000000..ac7b843
--- /dev/null
+++ b/mod/hvp/classes/content_user_data.php
@@ -0,0 +1,235 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp content user data.
+ *
+ * @package    mod_hvp
+ * @since      Moodle 2.7
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Class content_user_data handles user data and corresponding db operations.
+ *
+ * @package mod_hvp
+ */
+class content_user_data {
+
+    /**
+     * Retrieves ajax parameters for content and update or delete
+     * user data depending on params.
+     *
+     * @throws \coding_exception
+     */
+    public static function handle_ajax() {
+        // Query String Parameters.
+        $contentid = required_param('content_id', PARAM_INT);
+        $dataid = required_param('data_type', PARAM_RAW);
+        $subcontentid = required_param('sub_content_id', PARAM_INT);
+
+        // Form Data.
+        $data = optional_param('data', null, PARAM_RAW);
+        $preload = optional_param('preload', null, PARAM_INT);
+        $invalidate = optional_param('invalidate', null, PARAM_INT);
+
+        if ($contentid === null || $dataid === null || $subcontentid === null) {
+            // Missing parameters.
+            \H5PCore::ajaxError(get_string('missingparameters', 'hvp'));
+            return;
+        }
+
+        // Saving data.
+        if ($data !== null && $preload !== null && $invalidate !== null) {
+            self::store_data($contentid, $subcontentid, $dataid, $data, $preload, $invalidate);
+        } else {
+            self::fetch_existing_data($contentid, $subcontentid, $dataid);
+        }
+    }
+
+    /**
+     * Stores content user data
+     *
+     * @param $contentid
+     * @param $subcontentid
+     * @param $dataid
+     * @param $data
+     * @param $preload
+     * @param $invalidate
+     */
+    private static function store_data($contentid, $subcontentid, $dataid, $data, $preload, $invalidate) {
+        global $DB;
+
+        // Validate token.
+        if (!\H5PCore::validToken('contentuserdata', required_param('token', PARAM_RAW))) {
+            \H5PCore::ajaxError(get_string('invalidtoken', 'hvp'));
+            return;
+        }
+
+        // Use context id if supplied.
+        $contextid = optional_param('contextId', null, PARAM_INT);
+        if ($contextid) {
+            $context = \context::instance_by_id($contextid);
+        } else { // Otherwise try to find it from content id.
+            $context = \context_course::instance($DB->get_field('hvp', 'course', array('id' => $contentid)));
+        }
+
+        // Check permissions.
+        if (!has_capability('mod/hvp:savecontentuserdata', $context)) {
+            \H5PCore::ajaxError(get_string('nopermissiontosavecontentuserdata', 'hvp'));
+            http_response_code(403);
+            return;
+        }
+
+        if ($data === '0') {
+            // Delete user data.
+            self::delete_user_data($contentid, $subcontentid, $dataid);
+        } else {
+            // Save user data.
+            self::save_user_data($contentid, $subcontentid, $dataid, $preload, $invalidate, $data);
+        }
+        \H5PCore::ajaxSuccess();
+    }
+
+    /**
+     * Return existing content user data
+     *
+     * @param $contentid
+     * @param $subcontentid
+     * @param $dataid
+     */
+    private static function fetch_existing_data($contentid, $subcontentid, $dataid) {
+        // Fetch user data.
+        $userdata = self::get_user_data($contentid, $subcontentid, $dataid);
+        \H5PCore::ajaxSuccess($userdata ? $userdata->data : null);
+    }
+
+    /**
+     * Get user data for content.
+     *
+     * @param $contentid
+     * @param $subcontentid
+     * @param $dataid
+     *
+     * @return mixed
+     */
+    public static function get_user_data($contentid, $subcontentid, $dataid) {
+        global $DB, $USER;
+
+        $result = $DB->get_record('hvp_content_user_data', array(
+                'user_id' => $USER->id,
+                'hvp_id' => $contentid,
+                'sub_content_id' => $subcontentid,
+                'data_id' => $dataid
+            )
+        );
+
+        return $result;
+    }
+
+    /**
+     * Save user data for specific content in database.
+     *
+     * @param $contentid
+     * @param $subcontentid
+     * @param $dataid
+     * @param $preload
+     * @param $invalidate
+     * @param $data
+     */
+    public static function save_user_data($contentid, $subcontentid, $dataid, $preload, $invalidate, $data) {
+        global $DB, $USER;
+
+        // Determine if we should update or insert.
+        $update = self::get_user_data($contentid, $subcontentid, $dataid);
+
+        // Wash values to ensure 0 or 1.
+        $preload = ($preload === '0' || $preload === 0) ? 0 : 1;
+        $invalidate = ($invalidate === '0' || $invalidate === 0) ? 0 : 1;
+
+        // New data to be inserted.
+        $newdata = (object)array(
+            'user_id' => $USER->id,
+            'hvp_id' => $contentid,
+            'sub_content_id' => $subcontentid,
+            'data_id' => $dataid,
+            'data' => $data,
+            'preloaded' => $preload,
+            'delete_on_content_change' => $invalidate
+        );
+
+        // Does not exist.
+        if ($update === false) {
+            // Insert new data.
+            $DB->insert_record('hvp_content_user_data', $newdata);
+        } else {
+            // Get old data id.
+            $newdata->id = $update->id;
+
+            // Update old data.
+            $DB->update_record('hvp_content_user_data', $newdata);
+        }
+    }
+
+    /**
+     * Delete user data with specific content from database
+     *
+     * @param $contentid
+     * @param $subcontentid
+     * @param $dataid
+     */
+    public static function delete_user_data($contentid, $subcontentid, $dataid) {
+        global $DB, $USER;
+
+        $DB->delete_records('hvp_content_user_data', array(
+            'user_id' => $USER->id,
+            'hvp_id' => $contentid,
+            'sub_content_id' => $subcontentid,
+            'data_id' => $dataid
+        ));
+    }
+
+    /**
+     * Load user data for specific content
+     *
+     * @param $contentid
+     * @return mixed User data for specific content if found, else null
+     */
+    public static function load_pre_loaded_user_data($contentid) {
+        global $DB, $USER;
+
+        $preloadeduserdata = array();
+
+        $results = $DB->get_records('hvp_content_user_data', array(
+            'user_id' => $USER->id,
+            'hvp_id' => $contentid,
+            'sub_content_id' => 0,
+            'preloaded' => 1
+        ));
+
+        // Get data for data ids.
+        foreach ($results as $contentuserdata) {
+            $preloadeduserdata[$contentuserdata->data_id] = $contentuserdata->data;
+        }
+
+        return $preloadeduserdata;
+    }
+}
diff --git a/mod/hvp/classes/editor_ajax.php b/mod/hvp/classes/editor_ajax.php
new file mode 100644
index 0000000..ddb16cf
--- /dev/null
+++ b/mod/hvp/classes/editor_ajax.php
@@ -0,0 +1,119 @@
+<?php
+
+/**
+ * \mod_hvp\editor_ajax class
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once __DIR__ . '/../autoloader.php';
+
+/**
+ * Moodle's implementation of the H5P Editor Ajax interface.
+ * Makes it possible for the editor's core ajax functionality to communicate with the
+ * database used by Moodle.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class editor_ajax implements \H5PEditorAjaxInterface {
+
+    /**
+     * Gets latest library versions that exists locally
+     *
+     * @return array Latest version of all local libraries
+     */
+    public function getLatestLibraryVersions() {
+        global $DB;
+
+        $max_major_version_sql = "
+            SELECT hl.machine_name, MAX(hl.major_version) AS major_version
+            FROM {hvp_libraries} hl
+            WHERE hl.runnable = 1
+            GROUP BY hl.machine_name";
+
+        $max_minor_version_sql = "
+            SELECT hl2.machine_name, hl2.major_version, MAX(hl2.minor_version) AS minor_version
+            FROM ({$max_major_version_sql}) hl1
+            JOIN {hvp_libraries} hl2
+            ON hl1.machine_name = hl2.machine_name
+            AND hl1.major_version = hl2.major_version
+            GROUP BY hl2.machine_name, hl2.major_version";
+
+        return $DB->get_records_sql("
+            SELECT hl4.id, hl4.machine_name, hl4.title, hl4.major_version,
+                hl4.minor_version, hl4.patch_version, hl4.has_icon, hl4.restricted
+            FROM {hvp_libraries} hl4
+            JOIN ({$max_minor_version_sql}) hl3
+            ON hl4.machine_name = hl3.machine_name
+            AND hl4.major_version = hl3.major_version
+            AND hl4.minor_version = hl3.minor_version"
+        );
+    }
+
+    /**
+     * Get locally stored Content Type Cache. If machine name is provided
+     * it will only get the given content type from the cache
+     *
+     * @param $machineName
+     *
+     * @return array|object|null Returns results from querying the database
+     */
+    public function getContentTypeCache($machineName = NULL) {
+        global $DB;
+
+        if ($machineName) {
+            return $DB->get_record_sql(
+                "SELECT id, is_recommended
+                   FROM {hvp_libraries_hub_cache}
+                  WHERE machine_name = ?",
+                array($machineName)
+            );
+        }
+
+        return $DB->get_records("hvp_libraries_hub_cache");
+    }
+
+    /**
+     * Gets recently used libraries for the current author
+     *
+     * @return array machine names. The first element in the array is the
+     * most recently used.
+     */
+    public function getAuthorsRecentlyUsedLibraries() {
+        global $DB;
+        global $USER;
+        $recently_used = array();
+
+        $results = $DB->get_records_sql(
+            "SELECT library_name, max(created_at) AS max_created_at
+            FROM {hvp_events}
+           WHERE type='content' AND sub_type = 'create' AND user_id = ?
+        GROUP BY library_name
+        ORDER BY max_created_at DESC", array($USER->id));
+
+        foreach ($results as $row) {
+            $recently_used[] = $row->library_name;
+        }
+
+        return $recently_used;
+    }
+
+    /**
+     * Checks if the provided token is valid for this endpoint
+     *
+     * @param string $token The token that will be validated for.
+     *
+     * @return bool True if successful validation
+     */
+    public function validateEditorToken($token) {
+        return \H5PCore::validToken('editorajax', $token);
+    }
+}
diff --git a/mod/hvp/classes/editor_framework.php b/mod/hvp/classes/editor_framework.php
new file mode 100644
index 0000000..48cbabc
--- /dev/null
+++ b/mod/hvp/classes/editor_framework.php
@@ -0,0 +1,310 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * \mod_hvp\framework class
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+
+use H5peditorFile;
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once __DIR__ . '/../autoloader.php';
+
+/**
+ * Moodle's implementation of the H5P Editor framework interface.
+ * Makes it possible for the editor's core library to communicate with the
+ * database used by Moodle.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class editor_framework implements \H5peditorStorage {
+
+    /**
+     * Load language file(JSON) from database.
+     * This is used to translate the editor fields(title, description etc.)
+     *
+     * @param string $name The machine readable name of the library(content type)
+     * @param int $major Major part of version number
+     * @param int $minor Minor part of version number
+     * @param string $lang Language code
+     * @return string Translation in JSON format
+     */
+    public function getLanguage($name, $major, $minor, $lang) {
+        global $DB;
+
+        // Load translation field from DB
+        return $DB->get_field_sql(
+            "SELECT hlt.language_json
+               FROM {hvp_libraries_languages} hlt
+               JOIN {hvp_libraries} hl ON hl.id = hlt.library_id
+              WHERE hl.machine_name = ?
+                AND hl.major_version = ?
+                AND hl.minor_version = ?
+                AND hlt.language_code = ?
+            ", array(
+                $name,
+                $major,
+                $minor,
+                $lang
+            )
+        );
+    }
+
+    /**
+     * "Callback" for mark the given file as a permanent file.
+     * Used when saving content that has new uploaded files.
+     *
+     * @param int $fileid
+     */
+    public function keepFile($fileid) {
+        global $DB;
+
+        // Remove from tmpfiles
+        $DB->delete_records('hvp_tmpfiles', array(
+            'id' => $fileid
+        ));
+    }
+
+    /**
+     * Decides which content types the editor should have.
+     *
+     * Two usecases:
+     * 1. No input, will list all the available content types.
+     * 2. Libraries supported are specified, load additional data and verify
+     * that the content types are available. Used by e.g. the Presentation Tool
+     * Editor that already knows which content types are supported in its
+     * slides.
+     *
+     * @param array $libraries List of library names + version to load info for
+     * @return array List of all libraries loaded
+     */
+    public function getLibraries($libraries = null) {
+        global $DB;
+
+        $context_id = required_param('contextId', PARAM_RAW);
+        $super_user = has_capability('mod/hvp:userestrictedlibraries',
+            \context::instance_by_id($context_id));
+
+        if ($libraries !== null) {
+            // Get details for the specified libraries only.
+            $librarieswithdetails = array();
+            foreach ($libraries as $library) {
+                // Look for library
+                $details = $DB->get_record_sql(
+                        "SELECT title,
+                                runnable,
+                                restricted,
+                                tutorial_url
+                           FROM {hvp_libraries}
+                          WHERE machine_name = ?
+                            AND major_version = ?
+                            AND minor_version = ?
+                            AND semantics IS NOT NULL
+                        ", array(
+                            $library->name,
+                            $library->majorVersion,
+                            $library->minorVersion
+                        )
+                );
+                if ($details) {
+                    // Library found, add details to list
+                    $library->tutorialUrl = $details->tutorial_url;
+                    $library->title = $details->title;
+                    $library->runnable = $details->runnable;
+                    $library->restricted = $super_user ? false : ($details->restricted === '1' ? true : false);
+                    $librarieswithdetails[] = $library;
+                }
+            }
+
+            // Done, return list with library details
+            return $librarieswithdetails;
+        }
+
+        // Load all libraries
+        $libraries = array();
+        $librariesresult = $DB->get_records_sql(
+                "SELECT id,
+                        machine_name AS name,
+                        title,
+                        major_version,
+                        minor_version,
+                        tutorial_url,
+                        restricted
+                   FROM {hvp_libraries}
+                  WHERE runnable = 1
+                    AND semantics IS NOT NULL
+               ORDER BY title"
+        );
+        foreach ($librariesresult as $library) {
+            // Remove unique index
+            unset($library->id);
+
+            // Convert snakes to camels
+            $library->majorVersion = (int) $library->major_version;
+            unset($library->major_version);
+            $library->minorVersion = (int) $library->minor_version;
+            unset($library->minor_version);
+            if (!empty($library->tutorial_url)) {
+              $library->tutorialUrl = $library->tutorial_url;
+            }
+            unset($library->tutorial_url);
+
+            // Make sure we only display the newest version of a library.
+            foreach ($libraries as $key => $existinglibrary) {
+                if ($library->name === $existinglibrary->name) {
+                    // Found library with same name, check versions
+                    if ( ( $library->majorVersion === $existinglibrary->majorVersion &&
+                           $library->minorVersion > $existinglibrary->minorVersion ) ||
+                         ( $library->majorVersion > $existinglibrary->majorVersion ) ) {
+                        // This is a newer version
+                        $existinglibrary->isOld = true;
+                    }
+                    else {
+                        // This is an older version
+                        $library->isOld = true;
+                    }
+                }
+            }
+
+            // Check to see if content type should be restricted
+            $library->restricted = $super_user ? false : ($library->restricted === '1' ? true : false);
+
+            // Add new library
+            $libraries[] = $library;
+        }
+        return $libraries;
+    }
+
+    /**
+     * Allow for other plugins to decide which styles and scripts are attached.
+     * This is useful for adding and/or modifing the functionality and look of
+     * the content types.
+     *
+     * @param array $files
+     *  List of files as objects with path and version as properties
+     * @param array $libraries
+     *  List of libraries indexed by machineName with objects as values. The objects
+     *  have majorVersion and minorVersion as properties.
+     */
+    public function alterLibraryFiles(&$files, $libraries) {
+      global $PAGE;
+
+      // Refactor dependency list
+      $libraryList = array();
+      foreach ($libraries as $dependency) {
+        $libraryList[$dependency['machineName']] = array(
+          'majorVersion' => $dependency['majorVersion'],
+          'minorVersion' => $dependency['minorVersion']
+        );
+      }
+
+      $contextId = required_param('contextId', PARAM_INT);
+      $context = \context::instance_by_id($contextId);
+
+      $PAGE->set_context($context);
+      $renderer = $PAGE->get_renderer('mod_hvp');
+
+      $embedType = 'editor';
+      $renderer->hvp_alter_scripts($files['scripts'], $libraryList, $embedType);
+      $renderer->hvp_alter_styles($files['styles'], $libraryList, $embedType);
+    }
+
+    /**
+     * Saves a file or moves it temporarily. This is often necessary in order to
+     * validate and store uploaded or fetched H5Ps.
+     *
+     * @param string $data Uri of data that should be saved as a temporary file
+     * @param boolean $move_file Can be set to TRUE to move the data instead of saving it
+     *
+     * @return bool|object Returns false if saving failed or an object with path
+     * of the directory and file that is temporarily saved
+     */
+    public static function saveFileTemporarily($data, $move_file = FALSE) {
+        global $CFG;
+
+        // Generate local tmp file path
+        $unique_h5p_id = uniqid('hvp-');
+        $file_name = $unique_h5p_id . '.h5p';
+        $directory = $CFG->tempdir . DIRECTORY_SEPARATOR . $unique_h5p_id;
+        $file_path = $directory . DIRECTORY_SEPARATOR . $file_name;
+
+        if (!is_dir($directory)) {
+            mkdir($directory, 0777, true);
+        }
+
+        // Move file or save data to new file so core can validate H5P
+        if ($move_file) {
+            move_uploaded_file($data, $file_path);
+        }
+        else {
+            file_put_contents($file_path, $data);
+        }
+
+        // Add folder and file paths to H5P Core
+        $interface = framework::instance('interface');
+        $interface->getUploadedH5pFolderPath($directory);
+        $interface->getUploadedH5pPath($directory . DIRECTORY_SEPARATOR . $file_name);
+
+        return (object) array(
+            'dir' => $directory,
+            'fileName' => $file_name
+        );
+    }
+
+    /**
+     * Marks a file for later cleanup, useful when files are not instantly cleaned
+     * up. E.g. for files that are uploaded through the editor.
+     *
+     * @param int $file Id of file that should be cleaned up
+     * @param int|null $content_id Content id of file
+     */
+    public static function markFileForCleanup($file, $content_id = null) {
+        global $DB;
+
+        // Let H5P Core clean up
+        if ($content_id) {
+            return;
+        }
+
+        // Track temporary files for later cleanup
+        $DB->insert_record_raw('hvp_tmpfiles', array(
+            'id' => $file
+        ), false, false, true);
+    }
+
+    /**
+     * Clean up temporary files
+     *
+     * @param string $filePath Path to file or directory
+     */
+    public static function removeTemporarilySavedFiles($filePath) {
+        if (is_dir($filePath)) {
+            \H5PCore::deleteFileTree($filePath);
+        }
+        else {
+            @unlink($filePath);
+        }
+    }
+}
diff --git a/mod/hvp/classes/event.php b/mod/hvp/classes/event.php
new file mode 100644
index 0000000..664b4b8
--- /dev/null
+++ b/mod/hvp/classes/event.php
@@ -0,0 +1,98 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp event logger, makes it easy to track events throughout
+ * the H5P system.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+defined('MOODLE_INTERNAL') || die();
+
+class event extends \H5PEventBase {
+    private $user;
+
+     /**
+      * @inheritdoc
+      */
+    public function __construct($type, $subtype = null, $contentid = null,
+        $contenttitle = null, $libraryname = null, $libraryversion = null) {
+        global $USER;
+
+        // Track the who initiated the event.
+        $this->user = $USER->id;
+
+        parent::__construct($type, $subtype, $contentid, $contenttitle, $libraryname, $libraryversion);
+    }
+
+    /**
+     * Store the event.
+     *
+     * @return int Event ID
+     */
+    protected function save() {
+        global $DB;
+
+        // Get data in array format without null values.
+        $data = $this->getDataArray();
+
+        // Add user.
+        $data['user_id'] = $this->user;
+
+        return $DB->insert_record('hvp_events', $data);
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    protected function saveStats() {
+        global $DB;
+        $type = $this->type . ' ' . $this->sub_type;
+
+        // Grab current counter to check if it exists.
+        $id = $DB->get_field_sql(
+            "SELECT id
+               FROM {hvp_counters}
+              WHERE type = ?
+                AND library_name = ?
+                AND library_version = ?",
+            array($type, $this->library_name, $this->library_version)
+        );
+
+        if ($id === false) {
+            // No counter found, insert new one.
+            $DB->insert_record('hvp_counters', array(
+                'type' => $type,
+                'library_name' => $this->library_name,
+                'library_version' => $this->library_version,
+                'num' => 1
+            ));
+        } else {
+            // Update num+1.
+            $DB->execute(
+                "UPDATE {hvp_counters}
+                    SET num = num + 1
+                  WHERE id = ?",
+                array($id)
+            );
+        }
+    }
+}
diff --git a/mod/hvp/classes/event/course_module_instance_list_viewed.php b/mod/hvp/classes/event/course_module_instance_list_viewed.php
new file mode 100644
index 0000000..17387fd
--- /dev/null
+++ b/mod/hvp/classes/event/course_module_instance_list_viewed.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp instance list viewed event.
+ *
+ * @package    mod_hvp
+ * @copyright  @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_hvp instance list viewed event class.
+ *
+ * @package    mod_hvp
+ * @copyright  @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class course_module_instance_list_viewed extends \core\event\course_module_instance_list_viewed
+{
+    // No code required here as the parent class handles it all.
+}
diff --git a/mod/hvp/classes/event/course_module_viewed.php b/mod/hvp/classes/event/course_module_viewed.php
new file mode 100644
index 0000000..694b61e
--- /dev/null
+++ b/mod/hvp/classes/event/course_module_viewed.php
@@ -0,0 +1,47 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp course module viewed event.
+ *
+ * @package    mod_hvp
+ * @copyright  @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_hvp course module viewed event class.
+ *
+ * @package    mod_hvp
+ * @copyright  @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class course_module_viewed extends \core\event\course_module_viewed
+{
+
+    /**
+     * Set basic properties for the event.
+     */
+    protected function init() {
+        $this->data['objecttable'] = 'hvp';
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+    }
+}
diff --git a/mod/hvp/classes/file_storage.php b/mod/hvp/classes/file_storage.php
new file mode 100644
index 0000000..56fbea5
--- /dev/null
+++ b/mod/hvp/classes/file_storage.php
@@ -0,0 +1,820 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp file storage
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->dirroot . '/mod/hvp/library/h5p-file-storage.interface.php');
+
+/**
+ * The mod_hvp file storage class.
+ *
+ * @package    mod_hvp
+ * @since      Moodle 2.7
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ *
+ * @SuppressWarnings(PHPMD.TooManyPublicMethods)
+ * @SuppressWarnings(PHPMD.ExcessiveClassComplexity)
+ */
+class file_storage implements \H5PFileStorage {
+
+    /**
+     * Store the library folder.
+     *
+     * @param array $library
+     *  Library properties
+     */
+    // @codingStandardsIgnoreLine
+    public function saveLibrary($library) {
+        // Libraries are stored in a system context.
+        $context = \context_system::instance();
+        $options = array(
+            'contextid' => $context->id,
+            'component' => 'mod_hvp',
+            'filearea' => 'libraries',
+            'itemid' => 0,
+            'filepath' => '/' . \H5PCore::libraryToString($library, true) . '/',
+        );
+
+        // Remove any old existing library files.
+        self::deleteFileTree($context->id, $options['filearea'], $options['filepath']);
+
+        // Move library folder.
+        self::readFileTree($library['uploadDirectory'], $options);
+    }
+
+    /**
+     * Store the content folder.
+     *
+     * @param string $source
+     *  Path on file system to content directory.
+     * @param array $content
+     *  Content properties
+     */
+    // @codingStandardsIgnoreLine
+    public function saveContent($source, $content) {
+        // Remove any old content.
+        $this->deleteContent($content);
+
+        // Contents are stored in a course context.
+        $context = \context_module::instance($content['coursemodule']);
+        $options = array(
+            'contextid' => $context->id,
+            'component' => 'mod_hvp',
+            'filearea' => 'content',
+            'itemid' => $content['id'],
+            'filepath' => '/',
+        );
+
+        // Move content folder.
+        self::readFileTree($source, $options);
+    }
+
+    /**
+     * Remove content folder.
+     *
+     * @param array $content
+     *  Content properties
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteContent($content) {
+        $context = \context_module::instance($content['coursemodule']);
+        self::deleteFileTree($context->id, 'content', '/', $content['id']);
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function cloneContent($id, $newid) {
+        // Not implemented in Moodle.
+    }
+
+    /**
+     * Get path to a new unique tmp folder.
+     *
+     * @return string Path
+     */
+    // @codingStandardsIgnoreLine
+    public function getTmpPath() {
+        global $CFG;
+
+        return $CFG->tempdir . uniqid('/hvp-');
+    }
+
+    /**
+     * Fetch content folder and save in target directory.
+     *
+     * @param int $id
+     *  Content identifier
+     * @param string $target
+     *  Where the content folder will be saved
+     */
+    // @codingStandardsIgnoreLine
+    public function exportContent($id, $target) {
+        $cm = \get_coursemodule_from_instance('hvp', $id);
+        $context = \context_module::instance($cm->id);
+        self::exportFileTree($target, $context->id, 'content', '/', $id);
+    }
+
+    /**
+     * Fetch library folder and save in target directory.
+     *
+     * @param array $library
+     *  Library properties
+     * @param string $target
+     *  Where the library folder will be saved
+     */
+    // @codingStandardsIgnoreLine
+    public function exportLibrary($library, $target) {
+        $folder = \H5PCore::libraryToString($library, true);
+        $context = \context_system::instance();
+        self::exportFileTree("{$target}/{$folder}", $context->id, 'libraries', "/{$folder}/");
+    }
+
+    /**
+     * Save export in file system
+     *
+     * @param string $source
+     *  Path on file system to temporary export file.
+     * @param string $filename
+     *  Name of export file.
+     */
+    // @codingStandardsIgnoreLine
+    public function saveExport($source, $filename) {
+        global $COURSE;
+
+        // Remove old export.
+        $this->deleteExport($filename);
+
+        // Create record.
+        $context = \context_course::instance($COURSE->id);
+        $record = array(
+            'contextid' => $context->id,
+            'component' => 'mod_hvp',
+            'filearea' => 'exports',
+            'itemid' => 0,
+            'filepath' => '/',
+            'filename' => $filename
+        );
+
+        // Store new export.
+        $fs = get_file_storage();
+        $fs->create_file_from_pathname($record, $source);
+    }
+
+    /**
+     * Get file object for given export file.
+     *
+     * @param string $filename
+     * @return stdClass Moodle file object
+     */
+    // @codingStandardsIgnoreLine
+    private function getExportFile($filename) {
+        global $COURSE;
+        $context = \context_course::instance($COURSE->id);
+
+        // Check if file exists.
+        $fs = get_file_storage();
+        return $fs->get_file($context->id, 'mod_hvp', 'exports', 0, '/', $filename);
+    }
+
+    /**
+     * Removes given export file
+     *
+     * @param string $filename
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteExport($filename) {
+        $file = $this->getExportFile($filename);
+        if ($file) {
+            // Remove old export.
+            $file->delete();
+        }
+    }
+
+    /**
+     * Check if the given export file exists
+     *
+     * @param string $filename
+     * @return boolean
+     */
+    // @codingStandardsIgnoreLine
+    public function hasExport($filename) {
+        return !!$this->getExportFile($filename);
+    }
+
+    /**
+     * Will concatenate all JavaScrips and Stylesheets into two files in order
+     * to improve page performance.
+     *
+     * @param array $files
+     *  A set of all the assets required for content to display
+     * @param string $key
+     *  Hashed key for cached asset
+     */
+    // @codingStandardsIgnoreLine
+    public function cacheAssets(&$files, $key) {
+        $context = \context_system::instance();
+        $fs = get_file_storage();
+
+        foreach ($files as $type => $assets) {
+            if (empty($assets)) {
+                continue;
+            }
+
+            $content = '';
+            foreach ($assets as $asset) {
+                // Find location of asset.
+                $location = array();
+                preg_match('/^\/(libraries|development)(.+\/)([^\/]+)$/', $asset->path, $location);
+
+                // Locate file.
+                $file = $fs->get_file($context->id, 'mod_hvp', $location[1], 0, $location[2], $location[3]);
+
+                // Get file content and concatenate.
+                if ($type === 'scripts') {
+                    $content .= $file->get_content() . ";\n";
+                } else {
+                    // Rewrite relative URLs used inside stylesheets.
+                    $content .= preg_replace_callback(
+                            '/url\([\'"]?([^"\')]+)[\'"]?\)/i',
+                            function ($matches) use ($location) {
+                                if (preg_match("/^(data:|([a-z0-9]+:)?\/)/i", $matches[1]) === 1) {
+                                    return $matches[0]; // Not relative, skip.
+                                }
+                                return 'url("../' . $location[1] . $location[2] . $matches[1] . '")';
+                            },
+                            $file->get_content()) . "\n";
+                }
+            }
+
+            // Create new file for cached assets.
+            $ext = ($type === 'scripts' ? 'js' : 'css');
+            $fileinfo = array(
+                'contextid' => $context->id,
+                'component' => 'mod_hvp',
+                'filearea' => 'cachedassets',
+                'itemid' => 0,
+                'filepath' => '/',
+                'filename' => "{$key}.{$ext}"
+            );
+
+            // Store concatenated content.
+            $fs->create_file_from_string($fileinfo, $content);
+            $files[$type] = array((object) array(
+                'path' => "/cachedassets/{$key}.{$ext}",
+                'version' => ''
+            ));
+        }
+    }
+
+    /**
+     * Will check if there are cache assets available for content.
+     *
+     * @param string $key
+     *  Hashed key for cached asset
+     * @return array
+     */
+    // @codingStandardsIgnoreLine
+    public function getCachedAssets($key) {
+        $context = \context_system::instance();
+        $fs = get_file_storage();
+
+        $files = array();
+
+        $js = $fs->get_file($context->id, 'mod_hvp', 'cachedassets', 0, '/', "{$key}.js");
+        if ($js) {
+            $files['scripts'] = array((object) array(
+                'path' => "/cachedassets/{$key}.js",
+                'version' => ''
+            ));
+        }
+
+        $css = $fs->get_file($context->id, 'mod_hvp', 'cachedassets', 0, '/', "{$key}.css");
+        if ($css) {
+            $files['styles'] = array((object) array(
+                'path' => "/cachedassets/{$key}.css",
+                'version' => ''
+            ));
+        }
+
+        return empty($files) ? null : $files;
+    }
+
+    /**
+     * Remove the aggregated cache files.
+     *
+     * @param array $keys
+     *   The hash keys of removed files
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteCachedAssets($keys) {
+        $context = \context_system::instance();
+        $fs = get_file_storage();
+
+        foreach ($keys as $hash) {
+            foreach (array('js', 'css') as $type) {
+                $cachedasset = $fs->get_file($context->id, 'mod_hvp', 'cachedassets', 0, '/', "{$hash}.{$type}");
+                if ($cachedasset) {
+                    $cachedasset->delete();
+                }
+            }
+        }
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function getContent($filepath) {
+        // Grab context and file storage.
+        $context = \context_system::instance();
+        $fs      = get_file_storage();
+
+        // Find location of file.
+        $location = [];
+        preg_match('/^\/(libraries|development|cachedassets)(.*\/)([^\/]+)$/', $filepath, $location);
+
+        // Locate file.
+        $file = $fs->get_file($context->id, 'mod_hvp', $location[1], 0, $location[2], $location[3]);
+
+        // Return content.
+        return $file->get_content();
+    }
+
+    /**
+     * Save files uploaded through the editor.
+     *
+     * @param \H5peditorFile $file
+     * @param int $contentid
+     * @param \stdClass $contextid Course Context ID
+     *
+     * @return int
+     */
+    // @codingStandardsIgnoreLine
+    public function saveFile($file, $contentid, $contextid = null) {
+        if ($contentid !== 0) {
+            // Grab cm context.
+            $cm = \get_coursemodule_from_instance('hvp', $contentid);
+            $context = \context_module::instance($cm->id);
+            $contextid = $context->id;
+        } else if ($contextid === null) {
+            // Check for context id in params.
+            $contextid = optional_param('contextId', null, PARAM_INT);
+        }
+
+        // Files not yet related to any activities are stored in a course context
+        // These are temporary files and should not be part of backups.
+
+        $record = array(
+            'contextid' => $contextid,
+            'component' => 'mod_hvp',
+            'filearea' => $contentid === 0 ? 'editor' : 'content',
+            'itemid' => $contentid,
+            'filepath' => '/' . $file->getType() . 's/',
+            'filename' => $file->getName()
+        );
+        $fs = get_file_storage();
+        $filedata = $file->getData();
+        if ($filedata) {
+            $storedfile = $fs->create_file_from_string($record, $filedata);
+        } else {
+            $storedfile = $fs->create_file_from_pathname($record, $_FILES['file']['tmp_name']);
+        }
+
+        return $storedfile->get_id();
+    }
+
+    /**
+     * Copy a file from another content or editor tmp dir.
+     * Used when copy pasting content in H5P.
+     *
+     * @param string $file path + name
+     * @param string|int $fromid Content ID or 'editor' string
+     * @param stdClass $tocontent Target Content
+     */
+    // @codingStandardsIgnoreLine
+    public function cloneContentFile($file, $fromid, $tocontent) {
+        // Determine source file area and item id.
+        $sourcefilearea = ($fromid === 'editor' ? $fromid : 'content');
+        $sourceitemid   = ($fromid === 'editor' ? 0 : $fromid);
+
+        // Check to see if source exist.
+        $sourcefile = $this->getFile($sourcefilearea, $sourceitemid, $file);
+        if ($sourcefile === false) {
+            return; // Nothing to copy from.
+        }
+
+        // Check to make sure source doesn't exist already.
+        if ($this->getFile('content', $tocontent, $file) !== false) {
+            return; // File exists, no need to copy.
+        }
+
+        // Grab context for CM.
+        $context = \context_module::instance($tocontent->coursemodule);
+
+        // Create new file record.
+        $record = [
+            'contextid' => $context->id,
+            'component' => 'mod_hvp',
+            'filearea'  => 'content',
+            'itemid'    => $tocontent->id,
+            'filepath'  => $this->getFilepath($file),
+            'filename'  => $this->getFilename($file),
+        ];
+        $fs     = get_file_storage();
+        $fs->create_file_from_storedfile($record, $sourcefile);
+    }
+
+    /**
+     * Checks to see if content has the given file.
+     * Used when saving content.
+     *
+     * @param string $file path + name
+     * @param stdClass $content
+     * @return string|int File ID or null if not found
+     */
+    // @codingStandardsIgnoreLine
+    public function getContentFile($file, $content) {
+        $file = $this->getFile('content', $content, $file);
+        return ($file === false ? null : $file->get_id());
+    }
+
+    /**
+     * Remove content files that are no longer used.
+     * Used when saving content.
+     *
+     * @param string $file path + name
+     * @param stdClass $content
+     */
+    // @codingStandardsIgnoreLine
+    public function removeContentFile($file, $content) {
+        $file = $this->getFile('content', $content, $file);
+        if ($file !== false) {
+            $file->delete();
+        }
+    }
+
+    /**
+     * Copies files from tmp folder to Moodle storage.
+     *
+     * @param string $source
+     *  Path to source directory
+     * @param array $options
+     *  For Moodle's file record
+     * @throws \Exception Unable to copy
+     */
+    // @codingStandardsIgnoreLine
+    private static function readFileTree($source, $options) {
+        $dir = opendir($source);
+        if ($dir === false) {
+            trigger_error('Unable to open directory ' . $source, E_USER_WARNING);
+            throw new \Exception('unabletocopy');
+        }
+
+        while (false !== ($file = readdir($dir))) {
+            if (($file != '.') && ($file != '..') && $file != '.git' && $file != '.gitignore') {
+                if (is_dir($source . DIRECTORY_SEPARATOR . $file)) {
+                    $suboptions = $options;
+                    $suboptions['filepath'] .= $file . '/';
+                    self::readFileTree($source . '/' . $file, $suboptions);
+                } else {
+                    $record = $options;
+                    $record['filename'] = $file;
+                    $fs = get_file_storage();
+                    $fs->create_file_from_pathname($record, $source . '/' . $file);
+                }
+            }
+        }
+        closedir($dir);
+    }
+
+    /**
+     * Copies files from Moodle storage to temporary folder.
+     *
+     * @param string $target
+     *  Path to temporary folder
+     * @param int $contextid
+     *  Moodle context where the files are found
+     * @param string $filearea
+     *  Moodle file area
+     * @param string $filepath
+     *  Moodle file path
+     * @param int $itemid
+     *  Optional Moodle item ID
+     */
+    // @codingStandardsIgnoreLine
+    private static function exportFileTree($target, $contextid, $filearea, $filepath, $itemid = 0) {
+        // Make sure target folder exists.
+        if (!file_exists($target)) {
+            mkdir($target, 0777, true);
+        }
+
+        // Read source files.
+        $fs = get_file_storage();
+        $files = $fs->get_directory_files($contextid, 'mod_hvp', $filearea, $itemid, $filepath, true);
+
+        foreach ($files as $file) {
+            // Correct target path for file.
+            $path = $target . str_replace($filepath, '/', $file->get_filepath());
+
+            if ($file->is_directory()) {
+                // Create directory.
+                $path = rtrim($path, '/');
+                if (!file_exists($path)) {
+                    mkdir($path, 0777, true);
+                }
+            } else {
+                // Copy file.
+                $file->copy_content_to($path . $file->get_filename());
+            }
+        }
+    }
+
+    /**
+     * Recursive removal of given filepath.
+     *
+     * @param int $contextid
+     * @param string $filearea
+     * @param string $filepath
+     * @param int $itemid
+     */
+    // @codingStandardsIgnoreLine
+    private static function deleteFileTree($contextid, $filearea, $filepath, $itemid = 0) {
+        $fs = get_file_storage();
+        if ($filepath === '/') {
+            // Remove complete file area.
+            $fs->delete_area_files($contextid, 'mod_hvp', $filearea, $itemid);
+            return;
+        }
+
+        // Look up files and remove.
+        $files = $fs->get_directory_files($contextid, 'mod_hvp', $filearea, $itemid, $filepath, true);
+        foreach ($files as $file) {
+            $file->delete();
+        }
+
+        // Remove root dir.
+        $file = $fs->get_file($contextid, 'mod_hvp', $filearea, $itemid, $filepath, '.');
+        if ($file) {
+            $file->delete();
+        }
+    }
+
+    /**
+     * Help make it easy to load content files.
+     *
+     * @param string $filearea
+     * @param int|object $itemid
+     * @param string $file path + name
+     *
+     * @return \stored_file|bool
+     */
+    // @codingStandardsIgnoreLine
+    private function getFile($filearea, $itemid, $file) {
+        global $COURSE;
+
+        if ($filearea === 'editor') {
+            // Use Course context.
+            $context = \context_course::instance($COURSE->id);
+        } else if (is_object($itemid)) {
+            // Grab CM context from item.
+            $context = \context_module::instance($itemid->coursemodule);
+            $itemid = $itemid->id;
+        } else {
+            // Use item ID to find CM context.
+            $cm = \get_coursemodule_from_instance('hvp', $itemid);
+            $context = \context_module::instance($cm->id);
+        }
+
+        // Load file.
+        $fs = get_file_storage();
+        return $fs->get_file($context->id, 'mod_hvp', $filearea, $itemid, $this->getFilepath($file), $this->getFilename($file));
+    }
+
+    /**
+     * Extract Moodle compatible filepath
+     *
+     * @param string $file
+     * @return string With slashes
+     */
+    // @codingStandardsIgnoreLine
+    private function getFilepath($file) {
+        return '/' . dirname($file) . '/';
+    }
+
+    /**
+     * Extract filename from filepath string
+     *
+     * @param string $file
+     * @return string Without slashes
+     */
+    // @codingStandardsIgnoreLine
+    private function getFilename($file) {
+        return basename($file);
+    }
+
+    /**
+     * Checks if a file exists
+     *
+     * @method fileExists
+     * @param  string     $filearea [description]
+     * @param  string     $filepath [description]
+     * @param  string     $filename [description]
+     * @return boolean
+     */
+    // @codingStandardsIgnoreLine
+    public static function fileExists($contextid, $filearea, $filepath, $filename) {
+        // Check if file exists.
+        $fs = get_file_storage();
+        return ($fs->get_file($contextid, 'mod_hvp', $filearea, 0, $filepath, $filename) !== false);
+    }
+
+    /**
+     * Check if server setup has write permission to
+     * the required folders
+     *
+     * @return bool true if server has the proper write access
+     */
+    // @codingStandardsIgnoreLine
+    public function hasWriteAccess() {
+        global $CFG;
+
+        if (!is_dir($CFG->dataroot)) {
+            trigger_error('Path is not a directory ' . $CFG->dataroot, E_USER_WARNING);
+            return false;
+        }
+
+        if (!is_writable($CFG->dataroot)) {
+            trigger_error('Unable to write to ' . $CFG->dataroot . ' – check directory permissions –', E_USER_WARNING);
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Copy a content from one directory to another. Defaults to cloning
+     * content from the current temporary upload folder to the editor path.
+     *
+     * @param string $source path to source directory
+     * @param string $contentid path of target directory. Defaults to editor path
+     *
+     * @return object|null Object containing h5p json and content json data
+     */
+    // @codingStandardsIgnoreLine
+    public function moveContentDirectory($source, $contentid = null) {
+        if ($source === null) {
+            return null;
+        }
+
+        // Default to 0 (editor).
+        if (!isset($contentid)) {
+            $contentid = 0;
+        }
+
+        // Find content context.
+        if ($contentid > 0) {
+            // Grab cm context.
+            $cm = \get_coursemodule_from_instance('hvp', $contentid);
+            $context = \context_module::instance($cm->id);
+            $contextid = $context->id;
+        }
+
+        // Get context from parameters.
+        if (!isset($contextid)) {
+            $contextid = required_param('contextId', PARAM_INT);
+        }
+
+        // Get h5p and content json.
+        $contentsource = $source . DIRECTORY_SEPARATOR . 'content';
+        $h5pjson = file_get_contents($source . DIRECTORY_SEPARATOR . 'h5p.json');
+        $contentjson = file_get_contents($contentsource . DIRECTORY_SEPARATOR . 'content.json');
+
+        // Move all temporary content files to editor.
+        $contentfiles = array_diff(scandir($contentsource), array('.', '..', 'content.json'));
+        foreach ($contentfiles as $file) {
+            if (is_dir("{$contentsource}/{$file}")) {
+                self::moveFileTree("{$contentsource}/{$file}", $contextid, $contentid);
+            } else {
+                self::moveFile("{$contentsource}/{$file}", $contextid, $contentid);
+            }
+        }
+
+        return (object) array(
+            'h5pJson' => $h5pjson,
+            'contentJson' => $contentjson
+        );
+    }
+
+    /**
+     * Move a single file to editor
+     *
+     * @param string $sourcefile Path to source fil
+     * @param int $contextid Id of context
+     * @param int $contentid Id of content, 0 if editor
+     */
+    // @codingStandardsIgnoreLine
+    private static function moveFile($sourcefile, $contextid, $contentid) {
+        $fs = get_file_storage();
+
+        $pathparts = pathinfo($sourcefile);
+        $filename  = $pathparts['basename'];
+        $filepath  = $pathparts['dirname'];
+        $foldername = basename($filepath);
+
+        if ($contentid > 0) {
+            // Create file record for content.
+            $record = array(
+                'contextid' => $contextid,
+                'component' => 'mod_hvp',
+                'filearea' => $contentid > 0 ? 'content' : 'editor',
+                'itemid' => $contentid,
+                'filepath' => '/' . $foldername . '/',
+                'filename' => $filename
+            );
+        } else {
+            // Create file record for editor.
+            $record = array(
+                'contextid' => $contextid,
+                'component' => 'mod_hvp',
+                'filearea' => 'editor',
+                'itemid' => 0,
+                'filepath' => '/' . $foldername . '/',
+                'filename' => $filename
+            );
+        }
+
+        $sourcedata = file_get_contents($sourcefile);
+
+        // Check if file already exists.
+        $fileexists = $fs->file_exists($record['contextid'], 'mod_hvp',
+            $record['filearea'], $record['itemid'], $record['filepath'],
+            $record['filename']
+        );
+
+        if ($fileexists) {
+            // Delete it to make sure that it is replaced with correct content.
+            $file = $fs->get_file($record['contextid'], 'mod_hvp',
+                $record['filearea'], $record['itemid'], $record['filepath'],
+                $record['filename']
+            );
+            if ($file) {
+                $file->delete();
+            }
+        }
+
+        $fs->create_file_from_string($record, $sourcedata);
+    }
+
+    /**
+     * Move a complete file tree to the editor
+     *
+     * @param string $sourcefiletree Path of file tree that should be moved
+     * @param int $contextid Id of context
+     * @param int $contentid Id of content, 0 for editor
+     *
+     * @throws \Exception
+     */
+    // @codingStandardsIgnoreLine
+    private static function moveFileTree($sourcefiletree, $contextid, $contentid) {
+        $dir = opendir($sourcefiletree);
+        if ($dir === false) {
+            trigger_error('Unable to open directory ' . $sourcefiletree, E_USER_WARNING);
+            throw new \Exception('unabletocopy');
+        }
+
+        while (false !== ($file = readdir($dir))) {
+            if (($file != '.') && ($file != '..') && $file != '.git' && $file != '.gitignore') {
+                if (is_dir("{$sourcefiletree}/{$file}")) {
+                    self::moveFileTree("{$sourcefiletree}/{$file}", $contextid, $contentid);
+                } else {
+                    self::moveFile("{$sourcefiletree}/{$file}", $contextid, $contentid);
+                }
+            }
+        }
+        closedir($dir);
+    }
+}
diff --git a/mod/hvp/classes/framework.php b/mod/hvp/classes/framework.php
new file mode 100644
index 0000000..9f7e3ae
--- /dev/null
+++ b/mod/hvp/classes/framework.php
@@ -0,0 +1,1396 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * \mod_hvp\framework class
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once(__DIR__ . '/../autoloader.php');
+require_once($CFG->libdir . '/filelib.php');
+require_once($CFG->libdir . '/adminlib.php');
+
+/**
+ * Moodle's implementation of the H5P framework interface.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class framework implements \H5PFrameworkInterface {
+
+    /**
+     * Get type of hvp instance
+     *
+     * @param string $type Type of hvp instance to get
+     * @return \H5PContentValidator|\H5PCore|\H5PStorage|\H5PValidator|\mod_hvp\framework|\H5peditor
+     */
+    public static function instance($type = null) {
+        global $CFG;
+        static $interface, $core, $editor, $editorinterface, $editorajaxinterface;
+
+        if (!isset($interface)) {
+            $interface = new \mod_hvp\framework();
+
+            $fs = new \mod_hvp\file_storage();
+
+            $context = \context_system::instance();
+            $url = "{$CFG->httpswwwroot}/pluginfile.php/{$context->id}/mod_hvp";
+
+            $language = self::get_language();
+
+            $export = !(isset($CFG->mod_hvp_export) && $CFG->mod_hvp_export === '0');
+
+            $core = new \H5PCore($interface, $fs, $url, $language, $export);
+            $core->aggregateAssets = !(isset($CFG->mod_hvp_aggregate_assets) && $CFG->mod_hvp_aggregate_assets === '0');
+        }
+
+        switch ($type) {
+            case 'validator':
+                return new \H5PValidator($interface, $core);
+            case 'storage':
+                return new \H5PStorage($interface, $core);
+            case 'contentvalidator':
+                return new \H5PContentValidator($interface, $core);
+            case 'interface':
+                return $interface;
+            case 'editor':
+                if (empty($editorinterface)) {
+                    $editorinterface = new \mod_hvp\editor_framework();
+                }
+
+                if (empty($editorajaxinterface)) {
+                    $editorajaxinterface = new editor_ajax();
+                }
+
+                if (empty($editor)) {
+                    $editor = new \H5peditor($core, $editorinterface, $editorajaxinterface);
+                }
+                return $editor;
+            case 'core':
+            default:
+                return $core;
+        }
+    }
+
+    /**
+     * Get current H5P language code.
+     *
+     * @return string Language Code
+     */
+    public static function get_language() {
+        static $map;
+
+        if (empty($map)) {
+            // Create mapping for "converting" language codes.
+            $map = array(
+                'no' => 'nb'
+            );
+        }
+
+        // Get current language in Moodle.
+        $language = str_replace('_', '-', strtolower(\current_language()));
+
+        // Try to map.
+        return isset($map[$language]) ? $map[$language] : $language;
+    }
+
+    /**
+     * Implements getPlatformInfo
+     */
+    // @codingStandardsIgnoreLine
+    public function getPlatformInfo() {
+        global $CFG;
+
+        return array(
+            'name' => 'Moodle',
+            'version' => $CFG->version,
+            'h5pVersion' => get_component_version('mod_hvp'),
+        );
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function fetchExternalData($url, $data = null, $blocking = true, $stream = null) {
+        global $CFG;
+
+        if ($stream !== null) {
+            // Download file.
+            @set_time_limit(0);
+
+            // Generate local tmp file path.
+            $localfolder = $CFG->tempdir . uniqid('/hvp-');
+            $stream = $localfolder . '.h5p';
+
+            // Add folder and file paths to H5P Core.
+            $interface = self::instance('interface');
+            $interface->getUploadedH5pFolderPath($localfolder);
+            $interface->getUploadedH5pPath($stream);
+        }
+
+        $response = download_file_content($url, null, $data, false, 300, 20, false, $stream);
+        return ($response === false ? null : $response);
+    }
+
+    /**
+     * Implements setLibraryTutorialUrl
+     *
+     * Set the tutorial URL for a library. All versions of the library is set
+     *
+     * @param string $libraryname
+     * @param string $url
+     */
+    // @codingStandardsIgnoreLine
+    public function setLibraryTutorialUrl($libraryname, $url) {
+        global $DB;
+
+        $DB->execute("UPDATE {hvp_libraries} SET tutorial_url = ? WHERE machine_name = ?", array($url, $libraryname));
+    }
+
+    /**
+     * Implements setErrorMessage
+     *
+     * @param string $message translated error message
+     */
+    // @codingStandardsIgnoreLine
+    public function setErrorMessage($message) {
+        if ($message !== null) {
+            self::messages('error', $message);
+        }
+    }
+
+    /**
+     * Implements setInfoMessage
+     */
+    // @codingStandardsIgnoreLine
+    public function setInfoMessage($message) {
+        if ($message !== null) {
+            self::messages('info', $message);
+        }
+    }
+
+    /**
+     * Store messages until they can be printed to the current user
+     *
+     * @param string $type Type of messages, e.g. 'info' or 'error'
+     * @param string $newmessage Optional
+     * @return array Array of stored messages
+     */
+    public static function messages($type, $newmessage = null) {
+        static $m = 'mod_hvp_messages';
+
+        if ($newmessage === null) {
+            // Return and reset messages.
+            $messages = isset($_SESSION[$m][$type]) ? $_SESSION[$m][$type] : array();
+            unset($_SESSION[$m][$type]);
+            if (empty($_SESSION[$m])) {
+                unset($_SESSION[$m]);
+            }
+            return $messages;
+        }
+
+        $_SESSION[$m][$type][] = $newmessage;
+    }
+
+    /**
+     * Simple print of given messages.
+     *
+     * @param string $type One of error|info
+     * @param array $messages
+     */
+    // @codingStandardsIgnoreLine
+    public static function printMessages($type, $messages) {
+        global $OUTPUT;
+        foreach ($messages as $message) {
+            print $OUTPUT->notification($message, ($type === 'error' ? 'notifyproblem' : 'notifymessage'));
+        }
+    }
+
+    /**
+     * Implements t
+     */
+    public function t($message, $replacements = array()) {
+        static $translationsmap;
+
+        if (empty($translationsmap)) {
+            // Create mapping.
+            // @codingStandardsIgnoreStart
+            $translationsmap = [
+                'Your PHP version does not support ZipArchive.' => 'noziparchive',
+                'The file you uploaded is not a valid HTML5 Package (It does not have the .h5p file extension)' => 'noextension',
+                'The file you uploaded is not a valid HTML5 Package (We are unable to unzip it)' => 'nounzip',
+                'Could not parse the main h5p.json file' => 'noparse',
+                'The main h5p.json file is not valid' => 'nojson',
+                'Invalid content folder' => 'invalidcontentfolder',
+                'Could not find or parse the content.json file' => 'nocontent',
+                'Library directory name must match machineName or machineName-majorVersion.minorVersion (from library.json). (Directory: %directoryName , machineName: %machineName, majorVersion: %majorVersion, minorVersion: %minorVersion)' => 'librarydirectoryerror',
+                'A valid content folder is missing' => 'missingcontentfolder',
+                'A valid main h5p.json file is missing' => 'invalidmainjson',
+                'Missing required library @library' => 'missinglibrary',
+                "Note that the libraries may exist in the file you uploaded, but you're not allowed to upload new libraries. Contact the site administrator about this." => 'missinguploadpermissions',
+                'Invalid library name: %name' => 'invalidlibraryname',
+                'Could not find library.json file with valid json format for library %name' => 'missinglibraryjson',
+                'Invalid semantics.json file has been included in the library %name' => 'invalidsemanticsjson',
+                'Invalid language file %file in library %library' => 'invalidlanguagefile',
+                'Invalid language file %languageFile has been included in the library %name' => 'invalidlanguagefile2',
+                'The file "%file" is missing from library: "%name"' => 'missinglibraryfile',
+                'The system was unable to install the <em>%component</em> component from the package, it requires a newer version of the H5P plugin. This site is currently running version %current, whereas the required version is %required or higher. You should consider upgrading and then try again.' => 'missingcoreversion',
+                "Invalid data provided for %property in %library. Boolean expected." => 'invalidlibrarydataboolean',
+                "Invalid data provided for %property in %library" => 'invalidlibrarydata',
+                "Can't read the property %property in %library" => 'invalidlibraryproperty',
+                'The required property %property is missing from %library' => 'missinglibraryproperty',
+                'Illegal option %option in %library' => 'invalidlibraryoption',
+                'Added %new new H5P libraries and updated %old old.' => 'addedandupdatelibraries',
+                'Added %new new H5P libraries.' => 'addednewlibraries',
+                'Updated %old H5P libraries.' => 'updatedlibraries',
+                'Missing dependency @dep required by @lib.' => 'missingdependency',
+                'Provided string is not valid according to regexp in semantics. (value: \"%value\", regexp: \"%regexp\")' => 'invalidstring',
+                'File "%filename" not allowed. Only files with the following extensions are allowed: %files-allowed.' => 'invalidfile',
+                'Invalid selected option in multi-select.' => 'invalidmultiselectoption',
+                'Invalid selected option in select.' => 'invalidselectoption',
+                'H5P internal error: unknown content type "@type" in semantics. Removing content!' => 'invalidsemanticstype',
+                'Copyright information' => 'copyrightinfo',
+                'Title' => 'title',
+                'Author' => 'author',
+                'Year(s)' => 'years',
+                'Year' => 'year',
+                'Source' => 'source',
+                'License' => 'license',
+                'Undisclosed' => 'undisclosed',
+                'Attribution 4.0' => 'attribution',
+                'Attribution-ShareAlike 4.0' => 'attributionsa',
+                'Attribution-NoDerivs 4.0' => 'attributionnd',
+                'Attribution-NonCommercial 4.0' => 'attributionnc',
+                'Attribution-NonCommercial-ShareAlike 4.0' => 'attributionncsa',
+                'Attribution-NonCommercial-NoDerivs 4.0' => 'attributionncnd',
+                'Attribution' => 'noversionattribution',
+                'Attribution-ShareAlike' => 'noversionattributionsa',
+                'Attribution-NoDerivs' => 'noversionattributionnd',
+                'Attribution-NonCommercial' => 'noversionattributionnc',
+                'Attribution-NonCommercial-ShareAlike' => 'noversionattributionncsa',
+                'Attribution-NonCommercial-NoDerivs' => 'noversionattributionncnd',
+                'General Public License v3' => 'gpl',
+                'Public Domain' => 'pd',
+                'Public Domain Dedication and Licence' => 'pddl',
+                'Public Domain Mark' => 'pdm',
+                'Copyright' => 'copyrightstring',
+                'Unable to create directory.' => 'unabletocreatedir',
+                'Unable to get field type.' => 'unabletogetfieldtype',
+                "File type isn't allowed." => 'filetypenotallowed',
+                'Invalid field type.' => 'invalidfieldtype',
+                'Invalid image file format. Use jpg, png or gif.' => 'invalidimageformat',
+                'File is not an image.' => 'filenotimage',
+                'Invalid audio file format. Use mp3 or wav.' => 'invalidaudioformat',
+                'Invalid video file format. Use mp4 or webm.' => 'invalidvideoformat',
+                'Could not save file.' => 'couldnotsave',
+                'Could not copy file.' => 'couldnotcopy',
+                'The mbstring PHP extension is not loaded. H5P need this to function properly' => 'missingmbstring',
+                'The version of the H5P library %machineName used in this content is not valid. Content contains %contentLibrary, but it should be %semanticsLibrary.' => 'wrongversion',
+                'The H5P library %library used in the content is not valid' => 'invalidlibrary',
+                'Your PHP version is outdated. H5P requires version 5.2 to function properly. Version 5.6 or later is recommended.' => 'oldphpversion',
+                'Your PHP max upload size is quite small. With your current setup, you may not upload files larger than %number MB. This might be a problem when trying to upload H5Ps, images and videos. Please consider to increase it to more than 5MB.' => 'maxuploadsizetoosmall',
+                'Your PHP max post size is quite small. With your current setup, you may not upload files larger than %number MB. This might be a problem when trying to upload H5Ps, images and videos. Please consider to increase it to more than 5MB' => 'maxpostsizetoosmall',
+                'Your server does not have SSL enabled. SSL should be enabled to ensure a secure connection with the H5P hub.' => 'sslnotenabled',
+                'H5P hub communication has been disabled because one or more H5P requirements failed.' => 'hubcommunicationdisabled',
+                'When you have revised your server setup you may re-enable H5P hub communication in H5P Settings.' => 'reviseserversetupandretry',
+                'A problem with the server write access was detected. Please make sure that your server can write to your data folder.' => 'nowriteaccess',
+                'Your PHP max upload size is bigger than your max post size. This is known to cause issues in some installations.' => 'uploadsizelargerthanpostsize',
+                'Library cache was successfully updated!' => 'ctcachesuccess',
+                'No content types were received from the H5P Hub. Please try again later.' => 'ctcachenolibraries',
+                "Couldn't communicate with the H5P Hub. Please try again later." => 'ctcacheconnectionfailed',
+                'The hub is disabled. You can re-enable it in the H5P settings.' => 'hubisdisabled',
+                'File not found on server. Check file upload settings.' => 'filenotfoundonserver',
+                'Invalid security token.' => 'invalidtoken',
+                'No content type was specified.' => 'nocontenttype',
+                'The chosen content type is invalid.' => 'invalidcontenttype',
+                'You do not have permission to install content types.' => 'installdenied',
+                'Validating h5p package failed.' => 'validatingh5pfailed',
+                'Failed to download the requested H5P.' => 'failedtodownloadh5p',
+                'A post message is required to access the given endpoint' => 'postmessagerequired',
+                'Could not get posted H5P.' => 'invalidh5ppost',
+                'Site could not be registered with the hub. Please contact your site administrator.' => 'sitecouldnotberegistered',
+                'The H5P Hub has been disabled until this problem can be resolved. You may still upload libraries through the "H5P Libraries" page.' => 'hubisdisableduploadlibraries',
+                'Your site was successfully registered with the H5P Hub.' => 'successfullyregisteredwithhub',
+                'You have been provided a unique key that identifies you with the Hub when receiving new updates. The key is available for viewing in the "H5P Settings" page.' => 'sitekeyregistered',
+                'Fullscreen' => 'fullscreen',
+                'Disable fullscreen' => 'disablefullscreen',
+                'Download' => 'download',
+                'Rights of use' => 'copyright',
+                'Embed' => 'embed',
+                'Size' => 'size',
+                'Show advanced' => 'showadvanced',
+                'Hide advanced' => 'hideadvanced',
+                'Include this script on your website if you want dynamic sizing of the embedded content:' => 'resizescript',
+                'Close' => 'close',
+                'Thumbnail' => 'thumbnail',
+                'No copyright information available for this content.' => 'nocopyright',
+                'Download this content as a H5P file.' => 'downloadtitle',
+                'View copyright information for this content.' => 'copyrighttitle',
+                'View the embed code for this content.' => 'embedtitle',
+                'Visit H5P.org to check out more cool content.' => 'h5ptitle',
+                'This content has changed since you last used it.' => 'contentchanged',
+                "You'll be starting over." => 'startingover',
+                'by' => 'by',
+                'Show more' => 'showmore',
+                'Show less' => 'showless',
+                'Sublevel' => 'sublevel',
+                'Confirm action' => 'confirmdialogheader',
+                'Please confirm that you wish to proceed. This action is not reversible.' => 'confirmdialogbody',
+                'Cancel' => 'cancellabel',
+                'Confirm' => 'confirmlabel',
+                '4.0 International' => 'licenseCC40',
+                '3.0 Unported' => 'licenseCC30',
+                '2.5 Generic' => 'licenseCC25',
+                '2.0 Generic' => 'licenseCC20',
+                '1.0 Generic' => 'licenseCC10',
+                'General Public License' => 'licenseGPL',
+                'Version 3' => 'licenseV3',
+                'Version 2' => 'licenseV2',
+                'Version 1' => 'licenseV1',
+                'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication' => 'licenseCC010',
+                'CC0 1.0 Universal' => 'licenseCC010U',
+                'License Version' => 'licenseversion',
+            ];
+            // @codingStandardsIgnoreEnd
+        }
+
+        return get_string($translationsmap[$message], 'hvp', $replacements);
+    }
+
+    /**
+     * Implements getH5PPath
+     */
+    // @codingStandardsIgnoreLine
+    public function getH5pPath() {
+        global $CFG;
+
+        return $CFG->dirroot . '/mod/hvp/files';
+    }
+
+    /**
+     * Implements getLibraryFileUrl
+     */
+    // @codingStandardsIgnoreLine
+    public function getLibraryFileUrl($libraryfoldername, $fileName) {
+        global $CFG;
+        $context  = \context_system::instance();
+        $basepath = $CFG->httpswwwroot . '/';
+        return "{$basepath}pluginfile.php/{$context->id}/mod_hvp/libraries/{$libraryfoldername}/{$fileName}";
+    }
+
+    /**
+     * Implements getUploadedH5PFolderPath
+     */
+    // @codingStandardsIgnoreLine
+    public function getUploadedH5pFolderPath($setpath = null) {
+        static $path;
+
+        if ($setpath !== null) {
+            $path = $setpath;
+        }
+
+        if (!isset($path)) {
+            throw new \coding_exception('Using getUploadedH5pFolderPath() before path is set');
+        }
+
+        return $path;
+    }
+
+    /**
+     * Implements getUploadedH5PPath
+     */
+    // @codingStandardsIgnoreLine
+    public function getUploadedH5pPath($setpath = null) {
+        static $path;
+
+        if ($setpath !== null) {
+            $path = $setpath;
+        }
+
+        return $path;
+    }
+
+    /**
+     * Implements loadLibraries
+     */
+    // @codingStandardsIgnoreLine
+    public function loadLibraries() {
+        global $DB;
+
+        $results = $DB->get_records_sql(
+              "SELECT id, machine_name, title, major_version, minor_version,
+                      patch_version, runnable, restricted
+                 FROM {hvp_libraries}
+             ORDER BY title ASC, major_version ASC, minor_version ASC");
+
+        $libraries = array();
+        foreach ($results as $library) {
+            $libraries[$library->machine_name][] = $library;
+        }
+
+        return $libraries;
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function setUnsupportedLibraries($libraries) {
+        // Not supported.
+    }
+
+    /**
+     * Implements getUnsupportedLibraries.
+     */
+    // @codingStandardsIgnoreLine
+    public function getUnsupportedLibraries() {
+        // Not supported.
+    }
+
+    /**
+     * Implements getAdminUrl.
+     */
+    // @codingStandardsIgnoreLine
+    public function getAdminUrl() {
+        // Not supported.
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function getLibraryId($machinename, $majorversion = null, $minorversion = null) {
+        global $DB;
+
+        // Look for specific library.
+        $sqlwhere = 'WHERE machine_name = ?';
+        $sqlargs = array($machinename);
+
+        if ($majorversion !== null) {
+            // Look for major version.
+            $sqlwhere .= ' AND major_version = ?';
+            $sqlargs[] = $majorversion;
+            if ($minorversion !== null) {
+                // Look for minor version.
+                $sqlwhere .= ' AND minor_version = ?';
+                $sqlargs[] = $minorversion;
+            }
+        }
+
+        // Get the lastest version which matches the input parameters.
+        $libraries = $DB->get_records_sql("
+                SELECT id
+                  FROM {hvp_libraries}
+          {$sqlwhere}
+              ORDER BY major_version DESC,
+                       minor_version DESC,
+                       patch_version DESC
+                ", $sqlargs, 0, 1);
+        if ($libraries) {
+            $library = reset($libraries);
+            return $library ? $library->id : false;
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * Implements isPatchedLibrary
+     */
+    // @codingStandardsIgnoreLine
+    public function isPatchedLibrary($library) {
+        global $DB, $CFG;
+
+        if (isset($CFG->mod_hvp_dev) && $CFG->mod_hvp_dev) {
+            // Makes sure libraries are updated, patch version does not matter.
+            return true;
+        }
+
+        $operator = $this->isInDevMode() ? '<=' : '<';
+        $library = $DB->get_record_sql(
+                'SELECT id
+                  FROM {hvp_libraries}
+                    WHERE machine_name = ?
+                    AND major_version = ?
+                    AND minor_version = ?
+                    AND patch_version ' . $operator . ' ?',
+                  array($library['machineName'],
+                  $library['majorVersion'],
+                  $library['minorVersion'],
+                  $library['patchVersion'])
+        );
+
+        return $library ? true : false;
+    }
+
+    /**
+     * Implements isInDevMode
+     */
+    // @codingStandardsIgnoreLine
+    public function isInDevMode() {
+        return false; // Not supported (Files in moodle not editable).
+    }
+
+    /**
+     * Implements mayUpdateLibraries
+     */
+    // @codingStandardsIgnoreLine
+    public function mayUpdateLibraries($allow = false) {
+        static $override;
+
+        // Allow overriding the permission check. Needed when installing.
+        // since caps hasn't been set.
+        if ($allow) {
+            $override = true;
+        }
+        if ($override) {
+            return true;
+        }
+
+        // Check permissions.
+        $context = \context_system::instance();
+        if (!has_capability('mod/hvp:updatelibraries', $context)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Implements getLibraryUsage
+     *
+     * Get number of content/nodes using a library, and the number of
+     * dependencies to other libraries
+     *
+     * @param int $id
+     * @param boolean $skipcontent Optional. Set as true to get number of content instances for library.
+     * @return array The array contains two elements, keyed by 'content' and 'libraries'.
+     *               Each element contains a number
+     */
+    // @codingStandardsIgnoreLine
+    public function getLibraryUsage($id, $skipcontent = false) {
+        global $DB;
+
+        if ($skipcontent) {
+            $content = -1;
+        } else {
+            $content = intval($DB->get_field_sql(
+                "SELECT COUNT(distinct c.id)
+                FROM {hvp_libraries} l
+                JOIN {hvp_contents_libraries} cl ON l.id = cl.library_id
+                JOIN {hvp} c ON cl.hvp_id = c.id
+                WHERE l.id = ?", array($id)
+            ));
+        }
+
+        $libraries = intval($DB->get_field_sql(
+            "SELECT COUNT(*)
+            FROM {hvp_libraries_libraries}
+            WHERE required_library_id = ?", array($id)
+        ));
+
+        return array(
+            'content' => $content,
+            'libraries' => $libraries,
+        );
+    }
+
+    /**
+     * Implements getLibraryContentCount
+     */
+    // @codingStandardsIgnoreLine
+    public function getLibraryContentCount() {
+        global $DB;
+        $contentcount = array();
+
+        // Count content using the same content type.
+        $res = $DB->get_records_sql(
+          "SELECT c.main_library_id,
+                  l.machine_name,
+                  l.major_version,
+                  l.minor_version,
+                  c.count
+             FROM (SELECT main_library_id,
+                          count(id) as count
+                     FROM {hvp}
+                 GROUP BY main_library_id) c,
+                 {hvp_libraries} l
+            WHERE c.main_library_id = l.id"
+        );
+
+        // Extract results.
+        foreach ($res as $lib) {
+            $contentcount["{$lib->machine_name} {$lib->major_version}.{$lib->minor_version}"] = $lib->count;
+        }
+
+        return $contentcount;
+    }
+
+    /**
+     * Implements saveLibraryData
+     */
+    // @codingStandardsIgnoreLine
+    public function saveLibraryData(&$librarydata, $new = true) {
+        global $DB;
+
+        // Some special properties needs some checking and converting before they can be saved.
+        $preloadedjs = $this->pathsToCsv($librarydata, 'preloadedJs');
+        $preloadedcss = $this->pathsToCsv($librarydata, 'preloadedCss');
+        $droplibrarycss = '';
+
+        if (isset($librarydata['dropLibraryCss'])) {
+            $libs = array();
+            foreach ($librarydata['dropLibraryCss'] as $lib) {
+                $libs[] = $lib['machineName'];
+            }
+            $droplibrarycss = implode(', ', $libs);
+        }
+
+        $embedtypes = '';
+        if (isset($librarydata['embedTypes'])) {
+            $embedtypes = implode(', ', $librarydata['embedTypes']);
+        }
+        if (!isset($librarydata['semantics'])) {
+            $librarydata['semantics'] = '';
+        }
+        if (!isset($librarydata['fullscreen'])) {
+            $librarydata['fullscreen'] = 0;
+        }
+        if (!isset($librarydata['hasIcon'])) {
+            $librarydata['hasIcon'] = 0;
+        }
+        // TODO: Can we move the above code to H5PCore? It's the same for multiple
+        // implementations. Perhaps core can update the data objects before calling
+        // this function?
+        // I think maybe it's best to do this when classes are created for
+        // library, content, etc.
+
+        $library = (object) array(
+            'title' => $librarydata['title'],
+            'machine_name' => $librarydata['machineName'],
+            'major_version' => $librarydata['majorVersion'],
+            'minor_version' => $librarydata['minorVersion'],
+            'patch_version' => $librarydata['patchVersion'],
+            'runnable' => $librarydata['runnable'],
+            'fullscreen' => $librarydata['fullscreen'],
+            'embed_types' => $embedtypes,
+            'preloaded_js' => $preloadedjs,
+            'preloaded_css' => $preloadedcss,
+            'drop_library_css' => $droplibrarycss,
+            'semantics' => $librarydata['semantics'],
+            'has_icon' => $librarydata['hasIcon'],
+        );
+
+        if ($new) {
+            // Create new library and keep track of id.
+            $library->id = $DB->insert_record('hvp_libraries', $library);
+            $librarydata['libraryId'] = $library->id;
+        } else {
+            // Update library data.
+            $library->id = $librarydata['libraryId'];
+
+            // Save library data.
+            $DB->update_record('hvp_libraries', (object) $library);
+
+            // Remove old dependencies.
+            $this->deleteLibraryDependencies($librarydata['libraryId']);
+        }
+
+        // Log library successfully installed/upgraded.
+        new \mod_hvp\event(
+              'library', ($new ? 'create' : 'update'),
+              null, null,
+              $library->machine_name, $library->major_version . '.' . $library->minor_version
+        );
+
+        // Update library translations.
+        $DB->delete_records('hvp_libraries_languages', array('library_id' => $librarydata['libraryId']));
+        if (isset($librarydata['language'])) {
+            foreach ($librarydata['language'] as $languagecode => $languagejson) {
+                $DB->insert_record('hvp_libraries_languages', array(
+                    'library_id' => $librarydata['libraryId'],
+                    'language_code' => $languagecode,
+                    'language_json' => $languagejson,
+                ));
+            }
+        }
+    }
+
+    /**
+     * Convert list of file paths to csv
+     *
+     * @param array $librarydata
+     *  Library data as found in library.json files
+     * @param string $key
+     *  Key that should be found in $librarydata
+     * @return string
+     *  file paths separated by ', '
+     */
+    // @codingStandardsIgnoreLine
+    private function pathsToCsv($librarydata, $key) {
+        if (isset($librarydata[$key])) {
+            $paths = array();
+            foreach ($librarydata[$key] as $file) {
+                $paths[] = $file['path'];
+            }
+            return implode(', ', $paths);
+        }
+        return '';
+    }
+
+    /**
+     * Implements lockDependencyStorage
+     */
+    // @codingStandardsIgnoreLine
+    public function lockDependencyStorage() {
+        // Library development mode not supported.
+    }
+
+    /**
+     * Implements unlockDependencyStorage
+     */
+    // @codingStandardsIgnoreLine
+    public function unlockDependencyStorage() {
+        // Library development mode not supported.
+    }
+
+    /**
+     * Implements deleteLibrary
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteLibrary($library) {
+        global $DB;
+
+        // Delete library files.
+        $librarybase = $this->getH5pPath() . '/libraries/';
+        $libname = "{$library->name}-{$library->major_version}.{$library->minor_version}";
+        \H5PCore::deleteFileTree("{$librarybase}{$libname}");
+
+        // Remove library data from database.
+        $DB->delete('hvp_libraries_libraries', array('library_id' => $library->id));
+        $DB->delete('hvp_libraries_languages', array('library_id' => $library->id));
+        $DB->delete('hvp_libraries', array('id' => $library->id));
+    }
+
+    /**
+     * Implements saveLibraryDependencies
+     *
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function saveLibraryDependencies($libraryid, $dependencies, $dependencytype) {
+        global $DB;
+
+        foreach ($dependencies as $dependency) {
+            // Find dependency library.
+            $dependencylibrary = $DB->get_record('hvp_libraries', array(
+                'machine_name' => $dependency['machineName'],
+                'major_version' => $dependency['majorVersion'],
+                'minor_version' => $dependency['minorVersion']
+            ));
+
+            // Create relation.
+            $DB->insert_record('hvp_libraries_libraries', array(
+                'library_id' => $libraryid,
+                'required_library_id' => $dependencylibrary->id,
+                'dependency_type' => $dependencytype
+            ));
+        }
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function updateContent($content, $contentmainid = null) {
+        global $DB;
+
+        if (!isset($content['disable'])) {
+            $content['disable'] = \H5PCore::DISABLE_NONE;
+        }
+
+        $data = array(
+            'name' => $content['name'],
+            'course' => $content['course'],
+            'intro' => $content['intro'],
+            'introformat' => $content['introformat'],
+            'json_content' => $content['params'],
+            'embed_type' => 'div',
+            'main_library_id' => $content['library']['libraryId'],
+            'filtered' => '',
+            'disable' => $content['disable'],
+            'timemodified' => time()
+        );
+
+        if (!isset($content['id'])) {
+            $data['slug'] = '';
+            $data['timecreated'] = $data['timemodified'];
+            $eventtype = 'create';
+            $id = $DB->insert_record('hvp', $data);
+        } else {
+            $data['id'] = $content['id'];
+            $DB->update_record('hvp', $data);
+            $eventtype = 'update';
+            $id = $data['id'];
+        }
+
+        // Log content create/update/upload.
+        if (!empty($content['uploaded'])) {
+            $eventtype .= ' upload';
+        }
+        new \mod_hvp\event(
+                'content', $eventtype,
+                $id, $content['name'],
+                $content['library']['machineName'],
+                $content['library']['majorVersion'] . '.' . $content['library']['minorVersion']
+        );
+
+        return $id;
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function insertContent($content, $contentmainid = null) {
+        return $this->updateContent($content);
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function resetContentUserData($contentid) {
+        global $DB;
+
+        // Reset user data for this content.
+        $DB->execute("UPDATE {hvp_content_user_data}
+                         SET data = 'RESET'
+                       WHERE hvp_id = ?
+                         AND delete_on_content_change = 1",
+                     array($contentid));
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function getWhitelist($islibrary, $defaultcontentwhitelist, $defaultlibrarywhitelist) {
+        return $defaultcontentwhitelist . ($islibrary ? ' ' . $defaultlibrarywhitelist : '');
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function copyLibraryUsage($contentid, $copyfromid, $contentmainid = null) {
+        global $DB;
+
+        $libraryusage = $DB->get_record('hvp_contents_libraries', array(
+            'id' => $copyfromid
+        ));
+
+        $libraryusage->id = $contentid;
+        $DB->insert_record_raw('hvp_contents_libraries', (array)$libraryusage, false, false, true);
+
+        // TODO: This must be verified at a later time.
+        // Currently in Moodle copyLibraryUsage() will never be called.
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function loadLibrarySemantics($name, $majorversion, $minorversion) {
+        global $DB;
+
+        $semantics = $DB->get_field_sql(
+            "SELECT semantics
+            FROM {hvp_libraries}
+            WHERE machine_name = ?
+            AND major_version = ?
+            AND minor_version = ?",
+            array($name, $majorversion, $minorversion));
+
+        return ($semantics === false ? null : $semantics);
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function alterLibrarySemantics(&$semantics, $name, $majorversion, $minorversion) {
+        global $PAGE;
+
+        $PAGE->set_context(null);
+
+        $renderer = $PAGE->get_renderer('mod_hvp');
+        $renderer->hvp_alter_semantics($semantics, $name, $majorversion, $minorversion);
+    }
+
+    /**
+     * Implements loadContent
+     */
+    // @codingStandardsIgnoreLine
+    public function loadContent($id) {
+        global $DB;
+
+        $data = $DB->get_record_sql(
+                "SELECT hc.id
+                      , hc.name
+                      , hc.intro
+                      , hc.introformat
+                      , hc.json_content
+                      , hc.filtered
+                      , hc.slug
+                      , hc.embed_type
+                      , hc.disable
+                      , hl.id AS library_id
+                      , hl.machine_name
+                      , hl.major_version
+                      , hl.minor_version
+                      , hl.embed_types
+                      , hl.fullscreen
+                FROM {hvp} hc
+                JOIN {hvp_libraries} hl ON hl.id = hc.main_library_id
+                WHERE hc.id = ?", array($id));
+
+        // Return null if not found.
+        if ($data === false) {
+            return null;
+        }
+
+        // Some databases do not support camelCase, so we need to manually
+        // map the values to the camelCase names used by the H5P core.
+        $content = array(
+            'id' => $data->id,
+            'title' => $data->name,
+            'intro' => $data->intro,
+            'introformat' => $data->introformat,
+            'params' => $data->json_content,
+            'filtered' => $data->filtered,
+            'slug' => $data->slug,
+            'embedType' => $data->embed_type,
+            'disable' => $data->disable,
+            'libraryId' => $data->library_id,
+            'libraryName' => $data->machine_name,
+            'libraryMajorVersion' => $data->major_version,
+            'libraryMinorVersion' => $data->minor_version,
+            'libraryEmbedTypes' => $data->embed_types,
+            'libraryFullscreen' => $data->fullscreen,
+        );
+
+        return $content;
+    }
+
+    /**
+     * Implements loadContentDependencies
+     */
+    // @codingStandardsIgnoreLine
+    public function loadContentDependencies($id, $type = null) {
+        global $DB;
+
+        $query = "SELECT hcl.id AS unidepid
+                       , hl.id
+                       , hl.machine_name
+                       , hl.major_version
+                       , hl.minor_version
+                       , hl.patch_version
+                       , hl.preloaded_css
+                       , hl.preloaded_js
+                       , hcl.drop_css
+                       , hcl.dependency_type
+                   FROM {hvp_contents_libraries} hcl
+                   JOIN {hvp_libraries} hl ON hcl.library_id = hl.id
+                  WHERE hcl.hvp_id = ?";
+        $queryargs = array($id);
+
+        if ($type !== null) {
+            $query .= " AND hcl.dependency_type = ?";
+            $queryargs[] = $type;
+        }
+
+        $query .= " ORDER BY hcl.weight";
+        $data = $DB->get_records_sql($query, $queryargs);
+
+        $dependencies = array();
+        foreach ($data as $dependency) {
+            unset($dependency->unidepid);
+            $dependencies[$dependency->machine_name] = \H5PCore::snakeToCamel($dependency);
+        }
+
+        return $dependencies;
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function getOption($name, $default = false) {
+        $value = get_config('mod_hvp', $name);
+        if ($value === false) {
+            return $default;
+        }
+        return $value;
+    }
+
+    /**
+     * Implements setOption().
+     */
+    // @codingStandardsIgnoreLine
+    public function setOption($name, $value) {
+        set_config($name, $value, 'mod_hvp');
+    }
+
+    /**
+     * Implements updateContentFields().
+     */
+    // @codingStandardsIgnoreLine
+    public function updateContentFields($id, $fields) {
+        global $DB;
+
+        $content = new \stdClass();
+        $content->id = $id;
+
+        foreach ($fields as $name => $value) {
+            $content->$name = $value;
+        }
+
+        $DB->update_record('hvp', $content);
+    }
+
+    /**
+     * Implements deleteLibraryDependencies
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteLibraryDependencies($libraryid) {
+        global $DB;
+
+        $DB->delete_records('hvp_libraries_libraries', array('library_id' => $libraryid));
+    }
+
+    /**
+     * Implements deleteContentData
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteContentData($contentid) {
+        global $DB;
+
+        // Remove content.
+        $DB->delete_records('hvp', array('id' => $contentid));
+
+        // Remove content library dependencies.
+        $this->deleteLibraryUsage($contentid);
+
+        // Remove user data for content.
+        $DB->delete_records('hvp_content_user_data', array('hvp_id' => $contentid));
+    }
+
+    /**
+     * Implements deleteLibraryUsage
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteLibraryUsage($contentid) {
+        global $DB;
+
+        $DB->delete_records('hvp_contents_libraries', array('hvp_id' => $contentid));
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function saveLibraryUsage($contentid, $librariesinuse) {
+        global $DB;
+
+        $droplibrarycsslist = array();
+        foreach ($librariesinuse as $dependency) {
+            if (!empty($dependency['library']['dropLibraryCss'])) {
+                $droplibrarycsslist = array_merge($droplibrarycsslist, explode(', ', $dependency['library']['dropLibraryCss']));
+            }
+        }
+        // TODO: Consider moving the above code to core. Same for all impl.
+
+        foreach ($librariesinuse as $dependency) {
+            $dropcss = in_array($dependency['library']['machineName'], $droplibrarycsslist) ? 1 : 0;
+            $DB->insert_record('hvp_contents_libraries', array(
+                'hvp_id' => $contentid,
+                'library_id' => $dependency['library']['libraryId'],
+                'dependency_type' => $dependency['type'],
+                'drop_css' => $dropcss,
+                'weight' => $dependency['weight']
+            ));
+        }
+    }
+
+    /**
+     * Implements loadLibrary
+     */
+    // @codingStandardsIgnoreLine
+    public function loadLibrary($machinename, $majorversion, $minorversion) {
+        global $DB;
+
+        $library = $DB->get_record('hvp_libraries', array(
+            'machine_name' => $machinename,
+            'major_version' => $majorversion,
+            'minor_version' => $minorversion
+        ));
+
+        $librarydata = array(
+            'libraryId' => $library->id,
+            'machineName' => $library->machine_name,
+            'title' => $library->title,
+            'majorVersion' => $library->major_version,
+            'minorVersion' => $library->minor_version,
+            'patchVersion' => $library->patch_version,
+            'embedTypes' => $library->embed_types,
+            'preloadedJs' => $library->preloaded_js,
+            'preloadedCss' => $library->preloaded_css,
+            'dropLibraryCss' => $library->drop_library_css,
+            'fullscreen' => $library->fullscreen,
+            'runnable' => $library->runnable,
+            'semantics' => $library->semantics,
+            'restricted' => $library->restricted,
+            'hasIcon' => $library->has_icon
+        );
+
+        $dependencies = $DB->get_records_sql(
+                'SELECT hl.id, hl.machine_name, hl.major_version, hl.minor_version, hll.dependency_type
+                   FROM {hvp_libraries_libraries} hll
+                   JOIN {hvp_libraries} hl ON hll.required_library_id = hl.id
+                  WHERE hll.library_id = ?', array($library->id));
+        foreach ($dependencies as $dependency) {
+            $librarydata[$dependency->dependency_type . 'Dependencies'][] = array(
+                'machineName' => $dependency->machine_name,
+                'majorVersion' => $dependency->major_version,
+                'minorVersion' => $dependency->minor_version
+            );
+        }
+
+        return $librarydata;
+    }
+
+    /**
+     * Implements clearFilteredParameters().
+     */
+    // @codingStandardsIgnoreLine
+    public function clearFilteredParameters($libraryid) {
+        global $DB;
+
+        $DB->execute("UPDATE {hvp} SET filtered = null WHERE main_library_id = ?", array($libraryid));
+    }
+
+    /**
+     * Implements getNumNotFiltered().
+     */
+    // @codingStandardsIgnoreLine
+    public function getNumNotFiltered() {
+        global $DB;
+
+        return (int) $DB->get_field_sql(
+                "SELECT COUNT(id)
+                   FROM {hvp}
+                  WHERE " . $DB->sql_compare_text('filtered') . " = ''");
+    }
+
+    /**
+     * Implements getNumContent().
+     */
+    // @codingStandardsIgnoreLine
+    public function getNumContent($libraryid) {
+        global $DB;
+
+        return (int) $DB->get_field_sql(
+                "SELECT COUNT(id) FROM {hvp} WHERE main_library_id = ?",
+                array($libraryid));
+    }
+
+    /**
+     * Implements isContentSlugAvailable
+     */
+    // @codingStandardsIgnoreLine
+    public function isContentSlugAvailable($slug) {
+        global $DB;
+
+        return !$DB->get_field_sql("SELECT slug FROM {hvp} WHERE slug = ?", array($slug));
+    }
+
+    /**
+     * Implements saveCachedAssets
+     */
+    // @codingStandardsIgnoreLine
+    public function saveCachedAssets($key, $libraries) {
+        global $DB;
+
+        foreach ($libraries as $library) {
+            $cachedasset = (object) array(
+                'library_id' => $library['id'],
+                'hash' => $key
+            );
+            $DB->insert_record('hvp_libraries_cachedassets', $cachedasset);
+        }
+    }
+
+    /**
+     * Implements deleteCachedAssets
+     */
+    // @codingStandardsIgnoreLine
+    public function deleteCachedAssets($libraryid) {
+        global $DB;
+
+        // Get all the keys so we can remove the files.
+        $results = $DB->get_records_sql(
+                'SELECT hash
+                   FROM {hvp_libraries_cachedassets}
+                  WHERE library_id = ?',
+                array($libraryid));
+
+        // Remove all invalid keys.
+        $hashes = array();
+        foreach ($results as $key) {
+            $hashes[] = $key->hash;
+            $DB->delete_records('hvp_libraries_cachedassets', array('hash' => $key->hash));
+        }
+
+        return $hashes;
+    }
+
+    /**
+     * Implements getLibraryStats
+     */
+    // @codingStandardsIgnoreLine
+    public function getLibraryStats($type) {
+        global $DB;
+        $count = array();
+
+        // Get the counts for the given type of event.
+        $records = $DB->get_records_sql(
+                "SELECT id,
+                        library_name AS name,
+                        library_version AS version,
+                        num
+                   FROM {hvp_counters}
+                  WHERE type = ?",
+                array($type));
+
+        // Extract num from records.
+        foreach ($records as $library) {
+            $count[$library->name . ' ' . $library->version] = $library->num;
+        }
+
+        return $count;
+    }
+
+    /**
+     * Implements getNumAuthors
+     */
+    // @codingStandardsIgnoreLine
+    public function getNumAuthors() {
+        global $DB;
+
+        // Get number of unique courses using H5P.
+        return intval($DB->get_field_sql(
+                "SELECT COUNT(DISTINCT course)
+                   FROM {hvp}"
+        ));
+    }
+
+    /**
+     * @inheritdoc
+     */
+    // @codingStandardsIgnoreLine
+    public function afterExportCreated($content, $filename) {
+    }
+
+    /**
+     * Implements hasPermission
+     * @method hasPermission
+     * @param  \H5PPermission $permission
+     * @param  int $contentid
+     * @return boolean
+     */
+    // @codingStandardsIgnoreLine
+    public function hasPermission($permission, $contentid = null) {
+        switch ($permission) {
+            case \H5PPermission::DOWNLOAD_H5P:
+                global $DB;
+                $context = \context_course::instance($DB->get_field('hvp', 'course', array('id' => $contentid)));
+                return has_capability('mod/hvp:getexport', $context);
+            case \H5PPermission::CREATE_RESTRICTED:
+                $context = \context_system::instance();
+                return has_capability('mod/hvp:userestrictedlibraries', $context);
+            case \H5PPermission::UPDATE_LIBRARIES:
+                $context = \context_system::instance();
+                return has_capability('mod/hvp:updatelibraries', $context);
+            case \H5PPermission::INSTALL_RECOMMENDED:
+                $context = \context_system::instance();
+                return has_capability('mod/hvp:installrecommendedh5plibraries', $context);
+
+        }
+        return false;
+    }
+
+    /**
+     * Replaces existing content type cache with the one passed in
+     *
+     * @param object $contenttypecache Json with an array called 'libraries'
+     *  containing the new content type cache that should replace the old one.
+     */
+    // @codingStandardsIgnoreLine
+    public function replaceContentTypeCache($contenttypecache) {
+        global $DB;
+
+        // Replace existing cache.
+        $DB->delete_records('hvp_libraries_hub_cache');
+        foreach ($contenttypecache->contentTypes as $ct) {
+            $DB->insert_record('hvp_libraries_hub_cache', (object) array(
+                'machine_name'      => $ct->id,
+                'major_version'     => $ct->version->major,
+                'minor_version'     => $ct->version->minor,
+                'patch_version'     => $ct->version->patch,
+                'h5p_major_version' => $ct->coreApiVersionNeeded->major,
+                'h5p_minor_version' => $ct->coreApiVersionNeeded->minor,
+                'title'             => $ct->title,
+                'summary'           => $ct->summary,
+                'description'       => $ct->description,
+                'icon'              => $ct->icon,
+                'created_at'        => (new \DateTime($ct->createdAt))->getTimestamp(),
+                'updated_at'        => (new \DateTime($ct->updatedAt))->getTimestamp(),
+                'is_recommended'    => $ct->isRecommended === true ? 1 : 0,
+                'popularity'        => $ct->popularity,
+                'screenshots'       => json_encode($ct->screenshots),
+                'license'           => json_encode(isset($ct->license) ? $ct->license : array()),
+                'example'           => $ct->example,
+                'tutorial'          => isset($ct->tutorial) ? $ct->tutorial : '',
+                'keywords'          => json_encode(isset($ct->keywords) ? $ct->keywords : array()),
+                'categories'        => json_encode(isset($ct->categories) ? $ct->categories : array()),
+                'owner'             => $ct->owner
+            ), false, true);
+        }
+    }
+}
diff --git a/mod/hvp/classes/results.php b/mod/hvp/classes/results.php
new file mode 100644
index 0000000..6bc1dd8
--- /dev/null
+++ b/mod/hvp/classes/results.php
@@ -0,0 +1,369 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp file storage
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_hvp file storage class.
+ *
+ * @package    mod_hvp
+ * @since      Moodle 2.7
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class results {
+
+    // Type specific inputs.
+    protected $contentid;
+
+    // Generic result inputs.
+    protected $offset, $limit, $orderby, $orderdir, $filters;
+
+    /**
+     * Start handling results by filtering input parameters.
+     */
+    public function __construct() {
+        $this->filter_input();
+    }
+
+    /**
+     * Filter and load input parameters
+     *
+     * @throws \coding_exception
+     */
+    protected function filter_input() {
+        // Type specifc.
+        $this->contentid = optional_param('content_id', 0, PARAM_INT);
+
+        // Used to handle pagination.
+        $this->offset = optional_param('offset', 0, PARAM_INT);
+
+        // Max number of items to display on one page.
+        $this->limit = optional_param('limit', 20, PARAM_INT);
+        if ($this->limit > 100) {
+            // Avoid wrong usage.
+            throw new \coding_exception('limit to high');
+        }
+
+        // Field to order by.
+        $this->orderby = optional_param('sortBy', 0, PARAM_INT);
+
+        // Direction to order in.
+        $this->orderdir = optional_param('sortDir', 0, PARAM_INT);
+
+        // List of fields to filter results on.
+        $this->filters = optional_param_array('filters', array(), PARAM_RAW_TRIMMED);
+    }
+
+    /**
+     * Print results data
+     */
+    public function print_results() {
+        global $DB, $USER;
+
+        // Check permission.
+        $course = $DB->get_field('hvp', 'course', array('id' => $this->contentid));
+        $context = \context_course::instance($course);
+        $viewownresults = has_capability('mod/hvp:viewresults', $context);
+        $viewallresults = has_capability('mod/hvp:viewallresults', $context);
+        if (!$viewownresults && !$viewallresults) {
+            \H5PCore::ajaxError(get_string('nopermissiontoviewresult', 'hvp'));
+            http_response_code(403);
+            return;
+        }
+
+        // Only get own results if can't view all.
+        $uid = $viewallresults ? null : (int)$USER->id;
+        $results = $this->get_results($uid);
+        $rows = $this->get_human_readable_results($results, $course);
+
+        header('Cache-Control: no-cache');
+        header('Content-type: application/json');
+        print json_encode(array(
+            'num' => $this->get_results_num(),
+            'rows' => $rows
+        ));
+    }
+
+    /**
+     * Constructs human readable results
+     *
+     * @param $results
+     * @param $course
+     *
+     * @return array
+     */
+    private function get_human_readable_results($results, $course) {
+        // Make data readable for humans.
+        $rows = array();
+        foreach ($results as $result) {
+            $userlink = \html_writer::link(
+                new \moodle_url('/user/view.php', array(
+                    'id' => $result->user_id,
+                    'course' => $course
+                )),
+                \fullname($result)
+            );
+
+            $reviewlink = '—';
+
+            // Check if result has xAPI data.
+            if ($result->xapiid) {
+                $reviewlink = \html_writer::link(
+                    new \moodle_url('/mod/hvp/review.php',
+                        array(
+                            'id' => $this->contentid,
+                            'course' => $course,
+                            'user' => $result->user_id
+                        )
+                    ),
+                    get_string('viewreportlabel', 'hvp')
+                );
+            } else if ($result->rawgrade !== null) {
+                $reviewlink = get_string('reportnotsupported', 'hvp');
+            }
+
+            $rows[] = array(
+                $userlink,
+                $result->rawgrade === null ? '—' : (int) $result->rawgrade,
+                $result->rawgrade === null ? '—' : (int) $result->rawgrademax,
+                empty($result->timemodified) ? '—' : date('Y/m/d – H:i', $result->timemodified),
+                $reviewlink
+            );
+        }
+
+        return $rows;
+    }
+
+    /**
+     * Builds the SQL query required to retrieve results for the given
+     * interactive content.
+     *
+     * @param int $uid Only get results for uid
+     *
+     * @throws \coding_exception
+     * @return array
+     */
+    protected function get_results($uid=null) {
+        // Add extra fields, joins and where for the different result lists.
+        if ($this->contentid !== 0) {
+            list($fields, $join, $where, $order, $args) = $this->get_content_sql($uid);
+        } else {
+            throw new \coding_exception('missing content_id');
+        }
+
+        // Build where statement.
+        $where[] = "i.itemtype = 'mod'";
+        $where[] = "i.itemmodule = 'hvp'";
+        $where = 'WHERE ' . implode(' AND ', $where);
+
+        // Order results by the select column and direction.
+        $order[] = 'g.rawgrade';
+        $order[] = 'g.rawgrademax';
+        $order[] = 'g.timemodified';
+        $orderby = $this->get_order_sql($order);
+
+        // Join on xAPI results.
+        $join .= ' LEFT JOIN {hvp_xapi_results} x ON i.iteminstance = x.content_id AND g.userid = x.user_id';
+        $groupby = ' GROUP BY g.id, u.id, i.iteminstance, x.id';
+
+        // Get from statement.
+        $from = $this->get_from_sql();
+
+        // Execute query and get results.
+        return $this->get_sql_results("
+                SELECT g.id,
+                       {$fields}
+                       g.rawgrade,
+                       g.rawgrademax,
+                       g.timemodified,
+                       x.id as xapiid
+                  {$from}
+                  {$join}
+                  {$where}
+                  {$groupby}
+                  {$orderby}
+                ", $args,
+                $this->offset,
+                $this->limit);
+    }
+
+    /**
+     * Build and execute the query needed to tell the number of total results.
+     * This is used to create pagination.
+     *
+     * @return int
+     */
+    protected function get_results_num() {
+        global $DB;
+
+        list(, $join, $where, , $args) = $this->get_content_sql();
+        $where[] = "i.itemtype = 'mod'";
+        $where[] = "i.itemmodule = 'hvp'";
+        $where = 'WHERE ' . implode(' AND ', $where);
+        $from = $this->get_from_sql();
+
+        return (int) $DB->get_field_sql("SELECT COUNT(i.id) {$from} {$join} {$where}", $args);
+    }
+
+    /**
+     * Builds the order part of the SQL query.
+     *
+     * @param array $fields Fields allowed to order by
+     * @throws \coding_exception
+     * @return string
+     */
+    protected function get_order_sql($fields) {
+        // Make sure selected order field is valid.
+        if (!isset($fields[$this->orderby])) {
+            throw new \coding_exception('invalid order field');
+        }
+
+        // Find selected sortable field.
+        $field = $fields[$this->orderby];
+
+        if (is_object($field)) {
+            // Some fields are reverse sorted by default, e.g. text fields.
+            // This feels more natural for the humans.
+            if (!empty($field->reverse)) {
+                $this->orderdir = !$this->orderdir;
+            }
+
+            $field = $field->name;
+        }
+
+        $dir = ($this->orderdir ? 'ASC' : 'DESC');
+        if ($field === 'u.firstname') {
+            // Order by all user name fields.
+            $field = implode(" {$dir}, ", self::get_ordered_user_name_fields());
+        }
+
+        return "ORDER BY {$field} {$dir}";
+    }
+
+    /**
+     * Get from part of the SQL query.
+     *
+     * @return string
+     */
+    protected function get_from_sql() {
+        return " FROM {grade_items} i JOIN {grade_grades} g ON i.id = g.itemid";
+    }
+
+    /**
+     * Get all user name fields in display order.
+     *
+     * @param string $prefix Optional table prefix to prepend to all fields
+     * @return array
+     */
+    public static function get_ordered_user_name_fields($prefix = 'u.') {
+        static $ordered;
+
+        if (empty($ordered)) {
+            $available = \get_all_user_name_fields();
+            $displayname = \fullname((object)$available);
+            if (empty($displayname)) {
+                $ordered = array("{$prefix}firstname", "{$prefix}lastname");
+            } else {
+                // Find fields in order.
+                $matches = array();
+                preg_match_all('/' . implode('|', $available) . '/', $displayname, $matches);
+                $ordered = $matches[0];
+                foreach ($ordered as $index => $value) {
+                    $ordered[$index] = "{$prefix}{$value}";
+                }
+            }
+        }
+
+        return $ordered;
+    }
+
+    /**
+     * Get the different parts needed to create the SQL for getting results
+     * belonging to a specifc content.
+     * (An alternative to this could be getting all the results for a
+     * specified user.)
+     *
+     * @param int $uid Only get users with this id
+     * @return array $fields, $join, $where, $order, $args
+     */
+    protected function get_content_sql($uid=null) {
+        global $DB;
+
+        $usernamefields = implode(', ', self::get_ordered_user_name_fields());
+        $fields = " u.id AS user_id, {$usernamefields}, ";
+        $join = " LEFT JOIN {user} u ON u.id = g.userid";
+        $where = array("i.iteminstance = ?");
+        $args = array($this->contentid);
+
+        // Only get entries with own user id.
+        if (isset($uid)) {
+            array_push($where, "u.id = ?");
+            array_push($args, $uid);
+        }
+
+        if (isset($this->filters[0])) {
+            $keywordswhere = array();
+
+            // Split up keywords using whitespace and comma.
+            foreach (preg_split("/[\s,]+/", $this->filters[0]) as $keyword) {
+                // Search all user name fields.
+                $usernamewhere = array();
+                foreach (self::get_ordered_user_name_fields() as $usernamefield) {
+                    $usernamewhere[] = $DB->sql_like($usernamefield, '?', false);
+                    $args[] = '%' . $keyword . '%';
+                }
+
+                // Add user name fields where to keywords where.
+                if (!empty($usernamewhere)) {
+                    $keywordswhere[] = '(' . implode(' OR ', $usernamewhere) . ')';
+                }
+            }
+
+            // Add keywords where to SQL where.
+            if (!empty($keywordswhere)) {
+                $where[] = '(' . implode(' AND ', $keywordswhere) . ')';
+            }
+        }
+        $order = array((object) array(
+            'name' => 'u.firstname',
+            'reverse' => true
+        ));
+
+        return array($fields, $join, $where, $order, $args);
+    }
+
+    /**
+     * Execute given query and return any results
+     *
+     * @param string $query
+     * @param array $args Used for placeholders
+     * @return array
+     */
+    protected function get_sql_results($query, $args, $limitfrom = 0, $limitnum = 0) {
+        global $DB;
+        return $DB->get_records_sql($query, $args, $limitfrom, $limitnum);
+    }
+}
diff --git a/mod/hvp/classes/task/look_for_updates.php b/mod/hvp/classes/task/look_for_updates.php
new file mode 100644
index 0000000..9f2aa09
--- /dev/null
+++ b/mod/hvp/classes/task/look_for_updates.php
@@ -0,0 +1,47 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Defines the task which looks for H5P updates.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp\task;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_hvp look for updates task class
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class look_for_updates extends \core\task\scheduled_task {
+    public function get_name() {
+        return get_string('lookforupdates', 'mod_hvp');
+    }
+
+    public function execute() {
+        // Check to make sure external communications hasn't been disabled.
+        if (get_config('mod_hvp', 'hub_is_enabled') || get_config('mod_hvp', 'send_usage_statistics')) {
+            $core = \mod_hvp\framework::instance();
+            $core->fetchLibrariesMetadata();
+        }
+    }
+}
diff --git a/mod/hvp/classes/task/remove_old_log_entries.php b/mod/hvp/classes/task/remove_old_log_entries.php
new file mode 100644
index 0000000..6d8ae83
--- /dev/null
+++ b/mod/hvp/classes/task/remove_old_log_entries.php
@@ -0,0 +1,48 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Defines the task which looks for H5P updates.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp\task;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_hvp look for updates task class
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class remove_old_log_entries extends \core\task\scheduled_task {
+    public function get_name() {
+        return get_string('removeoldlogentries', 'mod_hvp');
+    }
+
+    public function execute() {
+        global $DB;
+
+        require_once(__DIR__ . '/../../autoloader.php');
+        // @codingStandardsIgnoreLine
+        $olderthan = (time() - \H5PEventBase::$log_time);
+        $DB->execute("DELETE FROM {hvp_events} WHERE created_at < {$olderthan}");
+    }
+}
diff --git a/mod/hvp/classes/task/remove_tmpfiles.php b/mod/hvp/classes/task/remove_tmpfiles.php
new file mode 100644
index 0000000..7a5e7a5
--- /dev/null
+++ b/mod/hvp/classes/task/remove_tmpfiles.php
@@ -0,0 +1,63 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Defines the task which removes old tmp files
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp\task;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_hvp look for updates task class
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class remove_tmpfiles extends \core\task\scheduled_task {
+    public function get_name() {
+        return get_string('removetmpfiles', 'mod_hvp');
+    }
+
+    public function execute() {
+        global $DB;
+        $tmpfiles = $DB->get_records_sql(
+                "SELECT f.id
+                   FROM {hvp_tmpfiles} tf
+                   JOIN {files} f ON f.id = tf.id
+                  WHERE f.timecreated < ?",
+                array(time() - 86400)
+        );
+        if (empty($tmpfiles)) {
+            return; // Nothing to clean up.
+        }
+
+        $fs = get_file_storage();
+        foreach ($tmpfiles as $tmpfile) {
+            // Delete file.
+            $file = $fs->get_file_by_id($tmpfile->id);
+            $file->delete();
+
+            // Remove tmpfile entry.
+            $DB->delete_records('hvp_tmpfiles', array('id' => $tmpfile->id));
+        }
+    }
+}
diff --git a/mod/hvp/classes/upload_libraries_form.php b/mod/hvp/classes/upload_libraries_form.php
new file mode 100644
index 0000000..a9969cd
--- /dev/null
+++ b/mod/hvp/classes/upload_libraries_form.php
@@ -0,0 +1,138 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * \mod_hvp\upload_libraries_form class
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+
+defined('MOODLE_INTERNAL') || die();
+
+// Load moodleform class.
+require_once("$CFG->libdir/formslib.php");
+
+/**
+ * Form to upload new H5P libraries and upgrade existing once
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class upload_libraries_form extends \moodleform {
+
+    /**
+     * Define form elements
+     */
+    public function definition() {
+        global $CFG, $OUTPUT;
+
+        // Get form.
+        $mform = $this->_form;
+
+        // Add File Picker.
+        $mform->addElement('filepicker', 'h5pfile', get_string('h5pfile', 'hvp'), null,
+                   array('maxbytes' => $CFG->maxbytes, 'accepted_types' => '*.h5p'));
+
+        // Add options.
+        $mform->addElement('checkbox',
+            'onlyupdate',
+            get_string('options', 'hvp'),
+            get_string('onlyupdate', 'hvp'),
+            array('group' => 1)
+        );
+        $mform->setType('onlyupdate', PARAM_BOOL);
+        $mform->setDefault('onlyupdate', false);
+
+        $mform->addElement('checkbox',
+            'disablefileextensioncheck',
+            '',
+            get_string('disablefileextensioncheck', 'hvp'),
+            array('group' => 1)
+        );
+        $mform->setType('disablefileextensioncheck', PARAM_BOOL);
+        $mform->setDefault('disablefileextensioncheck', false);
+
+        $notification = $OUTPUT->notification(
+            get_string('disablefileextensioncheckwarning', 'hvp'),
+            'notifymessage'
+        );
+        $mform->addElement('static', '', '', $notification);
+
+        // Upload button.
+        $this->add_action_buttons(false, get_string('upload', 'hvp'));
+    }
+
+    /**
+     * Preprocess incoming data
+     *
+     * @param array $defaultvalues default values for form
+     */
+    public function data_preprocessing(&$defaultvalues) {
+        // Aaah.. we meet again h5pfile!.
+        $draftitemid = file_get_submitted_draft_itemid('h5pfile');
+        file_prepare_draft_area($draftitemid, $this->context->id, 'mod_hvp', 'package', 0);
+        $defaultvalues['h5pfile'] = $draftitemid;
+    }
+
+    /**
+     * Validate incoming data
+     *
+     * @param array $data array of ("fieldname"=>value) of submitted data
+     * @param array $files array of uploaded files "element_name"=>tmp_file_path
+     * @return array of "element_name"=>"error_description" if there are errors,
+     *         or an empty array if everything is OK (true allowed for backwards compatibility too).
+     */
+    public function validation($data, $files) {
+        global $CFG;
+        $errors = array();
+
+        // Check for file.
+        if (empty($data['h5pfile'])) {
+            $errors['h5pfile'] = get_string('required');
+            return $errors;
+        }
+
+        $files = $this->get_draft_files('h5pfile');
+        if (count($files) < 1) {
+            $errors['h5pfile'] = get_string('required');
+            return $errors;
+        }
+
+        // Add file so that core framework can find it.
+        $file = reset($files);
+        $interface = \mod_hvp\framework::instance('interface');
+
+        $path = $CFG->tempdir . uniqid('/hvp-');
+        $interface->getUploadedH5pFolderPath($path);
+        $path .= '.h5p';
+        $interface->getUploadedH5pPath($path);
+        $file->copy_content_to($path);
+
+        // Validate package.
+        $h5pvalidator = \mod_hvp\framework::instance('validator');
+        if (!$h5pvalidator->isValidPackage(true, isset($data['onlyupdate']))) {
+            $infomessages      = implode('<br/>', \mod_hvp\framework::messages('info'));
+            $errormessages     = implode('<br/>', \mod_hvp\framework::messages('error'));
+            $errors['h5pfile'] = ($errormessages ? $errormessages . '<br/>' : '') . $infomessages;
+        }
+        return $errors;
+    }
+}
diff --git a/mod/hvp/classes/user_grades.php b/mod/hvp/classes/user_grades.php
new file mode 100644
index 0000000..28c6595
--- /dev/null
+++ b/mod/hvp/classes/user_grades.php
@@ -0,0 +1,96 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp user grades
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_hvp;
+
+defined('MOODLE_INTERNAL') || die();
+
+require(__DIR__ . '/../lib.php');
+
+/**
+ * Handles grade storage for users
+ * @package mod_hvp
+ */
+class user_grades {
+
+    public static function handle_ajax() {
+        global $DB, $USER;
+
+        if (!\H5PCore::validToken('result', required_param('token', PARAM_RAW))) {
+            \H5PCore::ajaxError(get_string('invalidtoken', 'hvp'));
+            return;
+        }
+
+        // Content parameters.
+        $contentid = required_param('contentId', PARAM_INT);
+        $score = required_param('score', PARAM_INT);
+        $maxscore = required_param('maxScore', PARAM_INT);
+
+        // Get hvp data from contentId.
+        $hvp = $DB->get_record('hvp', array('id' => $contentid));
+
+        // Check permissions.
+        $context = \context_course::instance($hvp->course);
+        if (!has_capability('mod/hvp:saveresults', $context)) {
+            \H5PCore::ajaxError(get_string('nopermissiontosaveresult', 'hvp'));
+            http_response_code(403);
+            return;
+        }
+
+        // Create grade object and set grades.
+        $grade = (object) array(
+            'userid' => $USER->id
+        );
+
+        // Get course module id from db, required for grade item.
+        $cmidsql = "SELECT cm.id, h.name, cm.idnumber
+            FROM {course_modules} cm, {hvp} h, {modules} m
+            WHERE cm.instance = h.id AND h.id = ? AND m.name = 'hvp' AND m.id = cm.module";
+        $result = $DB->get_record_sql($cmidsql, array($contentid));
+
+        // Set grade using Gradebook API.
+        $hvp->cmidnumber = $result->idnumber;
+        $hvp->name = $result->name;
+        $hvp->rawgrade = $score;
+        $hvp->rawgrademax = $maxscore;
+        hvp_grade_item_update($hvp, $grade);
+
+        // Get content info for log.
+        $content = $DB->get_record_sql(
+                "SELECT c.name AS title, l.machine_name AS name, l.major_version, l.minor_version
+                   FROM {hvp} c
+                   JOIN {hvp_libraries} l ON l.id = c.main_library_id
+                  WHERE c.id = ?",
+                array($contentid)
+        );
+
+        // Log view.
+        new \mod_hvp\event(
+                'results', 'set',
+                $contentid, $content->title,
+                $content->name, $content->major_version . '.' . $content->minor_version
+        );
+
+        \H5PCore::ajaxSuccess();
+    }
+}
diff --git a/mod/hvp/classes/xapi_result.php b/mod/hvp/classes/xapi_result.php
new file mode 100644
index 0000000..d48d565
--- /dev/null
+++ b/mod/hvp/classes/xapi_result.php
@@ -0,0 +1,142 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_hvp content user data.
+ *
+ * @package    mod_hvp
+ * @since      Moodle 2.7
+ * @copyright  2017 Joubel AS
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_hvp;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Class xapi_result handles xapi results and corresponding db operations.
+ *
+ * @package mod_hvp
+ */
+class xapi_result {
+
+    /**
+     * Handle xapi results endpoint
+     */
+    public static function handle_ajax() {
+
+        // Validate token.
+        if (!self::validate_token()) {
+            $core = framework::instance();
+            \H5PCore::ajaxError($core->h5pF->t('Invalid security token.'),
+                'INVALID_TOKEN');
+            return;
+        }
+
+        $contentid = required_param('contentId', PARAM_INT);
+        $xapiresult = required_param('xAPIResult', PARAM_RAW);
+
+        $xapijson = json_decode($xapiresult);
+        if (!$xapijson) {
+            \H5PCore::ajaxError('Invalid json in xAPI data.');
+            return;
+        }
+
+        if (!self::validate_xapi_data($xapijson)) {
+            \H5PCore::ajaxError('Invalid xAPI data.');
+            return;
+        }
+
+        // Delete any old results.
+        self::remove_xapi_data($contentid);
+
+        // Store results.
+        self::store_xapi_data($contentid, $xapijson);
+
+        // Successfully inserted xAPI result.
+        \H5PCore::ajaxSuccess();
+    }
+
+    /**
+     * Validate xAPI results token
+     *
+     * @return bool True if token was valid
+     */
+    private static function validate_token() {
+        $token = required_param('token', PARAM_ALPHANUM);
+        return \H5PCore::validToken('xapiresult', $token);
+
+    }
+
+    /**
+     * Validate xAPI data
+     *
+     * @param object $xapidata xAPI data
+     *
+     * @return bool True if valid data
+     */
+    private static function validate_xapi_data($xapidata) {
+        $xapidata = new \H5PReportXAPIData($xapidata);
+        return $xapidata->validateData();
+    }
+
+    /**
+     * Store xAPI result(s)
+     *
+     * @param int $contentid Content id
+     * @param object $xapidata xAPI data
+     * @param int $parentid Parent id
+     */
+    private static function store_xapi_data($contentid, $xapidata, $parentid = null) {
+        global $DB, $USER;
+
+        $xapidata = new \H5PReportXAPIData($xapidata, $parentid);
+        $insertedid = $DB->insert_record('hvp_xapi_results', (object) array(
+            'content_id' => $contentid,
+            'user_id' => $USER->id,
+            'parent_id' => $xapidata->getParentID(),
+            'interaction_type' => $xapidata->getInteractionType(),
+            'description' => $xapidata->getDescription(),
+            'correct_responses_pattern' => $xapidata->getCorrectResponsesPattern(),
+            'response' => $xapidata->getResponse(),
+            'additionals' => $xapidata->getAdditionals(),
+            'raw_score' => $xapidata->getScoreRaw(),
+            'max_score' => $xapidata->getScoreMax(),
+        ));
+
+        // Save sub content statements data.
+        if ($xapidata->isCompound()) {
+            foreach ($xapidata->getChildren($contentid) as $child) {
+                self::store_xapi_data($contentid, $child, $insertedid);
+            }
+        }
+    }
+
+    /**
+     * Remove xAPI result(s)
+     *
+     * @param int $contentid Content id
+     */
+    private static function remove_xapi_data($contentid) {
+        global $DB, $USER;
+
+        $DB->delete_records('hvp_xapi_results', array(
+            'content_id' => $contentid,
+            'user_id' => $USER->id
+        ));
+    }
+}
diff --git a/mod/hvp/dataviews.js b/mod/hvp/dataviews.js
new file mode 100644
index 0000000..75a34b6
--- /dev/null
+++ b/mod/hvp/dataviews.js
@@ -0,0 +1,42 @@
+(function ($) {
+
+    /**
+   * Creates a new dataview.
+   *
+   * @private
+   * @param {object} dataView Structure
+   * @param {string} dataView.source AJAX URL for data view
+   * @param {object[]} dataView.headers Header text and props
+   * @param {boolean[]} dataView.filters Which fields to allow filtering for
+   * @param {object} dataView.order Default order by and direction
+   * @param {object} dataView.l10n Translations
+   * @param {Element} wrapper Where in the DOM should the dataview be appended
+   * @param {function} loaded Callback for when the dataview is ready
+   */
+    var createDataView = function (dataView, wrapper, loaded) {
+        new H5PDataView(
+        wrapper,
+        dataView.source,
+        dataView.headers,
+        dataView.l10n,
+        undefined,
+        dataView.filters,
+        loaded,
+        dataView.order
+        );
+    };
+
+    // Create data views when page is done loading.
+    $(document).ready(function () {
+        for (var id in H5PIntegration.dataViews) {
+            if (!H5PIntegration.dataViews.hasOwnProperty(id)) {
+                continue;
+            }
+
+            var wrapper = $('#' + id).get(0);
+            if (wrapper !== undefined) {
+                createDataView(H5PIntegration.dataViews[id], wrapper);
+            }
+        }
+    });
+})(H5P.jQuery);
diff --git a/mod/hvp/db/access.php b/mod/hvp/db/access.php
new file mode 100644
index 0000000..0d1023c
--- /dev/null
+++ b/mod/hvp/db/access.php
@@ -0,0 +1,159 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Capability definitions for the hvp module.
+ *
+ * Available archetypes:
+ *  manager
+ *  coursecreator
+ *  editingteacher
+ *  teacher
+ *  student
+ *  guest
+ *  user
+ *  frontpage
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$capabilities = array(
+
+    'mod/hvp:addinstance' => array(
+        'riskbitmask' => RISK_XSS,
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        ),
+        'clonepermissionsfrom' => 'moodle/course:manageactivities'
+    ),
+
+    'mod/hvp:restrictlibraries' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+        )
+    ),
+
+    'mod/hvp:updatelibraries' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+        )
+    ),
+
+    'mod/hvp:userestrictedlibraries' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:savecontentuserdata' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:saveresults' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:viewresults' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:viewallresults' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:getcachedassets' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_SYSTEM,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW,
+            'user' => CAP_ALLOW,
+            'guest' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:getcontent' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:getexport' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW
+        )
+    ),
+
+    'mod/hvp:installrecommendedh5plibraries' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+          'manager' => CAP_ALLOW,
+          'editingteacher' => CAP_ALLOW,
+          'teacher' => CAP_ALLOW
+        )
+    ),
+
+);
diff --git a/mod/hvp/db/install.php b/mod/hvp/db/install.php
new file mode 100644
index 0000000..ee3a13c
--- /dev/null
+++ b/mod/hvp/db/install.php
@@ -0,0 +1,55 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+defined('MOODLE_INTERNAL') || die();
+
+function xmldb_hvp_install() {
+
+    // Try to install all the default content types.
+    require_once(__DIR__ . '/../autoloader.php');
+
+    // Fetch info about library updates.
+    $core = \mod_hvp\framework::instance('core');
+    $core->fetchLibrariesMetadata();
+
+    // Check that plugin is set up correctly.
+    $core->checkSetupForRequirements();
+
+    // Print any messages.
+    echo '<h3>' . get_string('welcomeheader', 'hvp') . '</h3>' .
+         '<p>' .
+         get_string('welcomegettingstarted', 'hvp', array(
+             'moodle_tutorial' => 'href="https://h5p.org/moodle" target="_blank"',
+             'example_content' => 'href="https://h5p.org/content-types-and-applications" target="_blank"'
+         )) .
+         '</p>' .
+         '<p>' .
+         get_string('welcomecommunity', 'hvp', array(
+             'forums' => 'href="https://h5p.org/forum" target="_blank"',
+             'gitter' => 'href="https://gitter.im/h5p/CommunityChat" target="_blank"'
+         )) .
+         '</p>' .
+         '<p>' . get_string('welcomecontactus', 'hvp',
+            'href="https://h5p.org/contact" target="_blank"') .
+         '</p>';
+
+    // Notify of communication with H5P Hub.
+    // @codingStandardsIgnoreLine
+    echo "<p>H5P fetches content types directly from the H5P Hub. In order to do this the H5P plugin will communicate with the Hub once a day to fetch information about new and updated content types. It will send in anonymous data to the Hub about H5P usage. Read more at <a href=\"https://h5p.org/tracking-the-usage-of-h5p\">the plugin communication page at H5P.org</a>.</p>";
+
+    \mod_hvp\framework::printMessages('info', \mod_hvp\framework::messages('info'));
+    \mod_hvp\framework::printMessages('error', \mod_hvp\framework::messages('error'));
+}
diff --git a/mod/hvp/db/install.xml b/mod/hvp/db/install.xml
new file mode 100644
index 0000000..f1f915a
--- /dev/null
+++ b/mod/hvp/db/install.xml
@@ -0,0 +1,214 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="mod/hvp/db" VERSION="20160113" COMMENT="XMLDB file for Moodle mod/hvp"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="../../../lib/xmldb/xmldb.xsd"
+>
+  <TABLES>
+    <TABLE NAME="hvp" COMMENT="Activity data">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="intro" TYPE="text" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="json_content" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="The content in json format"/>
+        <FIELD NAME="embed_type" TYPE="char" LENGTH="127" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="disable" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="main_library_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="The library we first instanciate for this node"/>
+        <FIELD NAME="content_type" TYPE="char" LENGTH="127" NOTNULL="false" SEQUENCE="false" COMMENT="Content type as defined in h5p.json"/>
+        <FIELD NAME="author" TYPE="char" LENGTH="127" NOTNULL="false" SEQUENCE="false" COMMENT="Author as defined in h5p.json"/>
+        <FIELD NAME="license" TYPE="char" LENGTH="7" NOTNULL="false" SEQUENCE="false" COMMENT="License as defined in h5p.json"/>
+        <FIELD NAME="meta_keywords" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Keywords as defined in h5p.json"/>
+        <FIELD NAME="meta_description" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Meta description as defined in h5p.json"/>
+        <FIELD NAME="filtered" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Filtered version of json_content"/>
+        <FIELD NAME="slug" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="Human readable content identifier that is unique"/>
+        <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="hvp_xapi_results" COMMENT="Stored xAPI events">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="content_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="user_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="parent_id" TYPE="int" LENGTH="10" SEQUENCE="false"/>
+        <FIELD NAME="interaction_type" TYPE="char" LENGTH="127" NOTNULL="true"/>
+        <FIELD NAME="description" TYPE="text" NOTNULL="true"/>
+        <FIELD NAME="correct_responses_pattern" TYPE="text" NOTNULL="true"/>
+        <FIELD NAME="response" TYPE="text" NOTNULL="true"/>
+        <FIELD NAME="additionals" TYPE="text" NOTNULL="true"/>
+        <FIELD NAME="raw_score" TYPE="int" LENGTH="6" NOTNULL="false"/>
+        <FIELD NAME="max_score" TYPE="int" LENGTH="6" NOTNULL="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="result" UNIQUE="true" FIELDS="id, content_id, user_id"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="hvp_content_user_data" COMMENT="Stores user data about the content">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="user_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Id for the user answering this H5P"/>
+        <FIELD NAME="hvp_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Id of hvp content in the 'hvp' table"/>
+        <FIELD NAME="sub_content_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Subcontent id of hvp content, 0 if this is not subcontent"/>
+        <FIELD NAME="data_id" TYPE="char" LENGTH="127" NOTNULL="false" SEQUENCE="false" COMMENT="The data type identifier"/>
+        <FIELD NAME="data" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="The actual user data that was stored."/>
+        <FIELD NAME="preloaded" TYPE="int" LENGTH="1" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="delete_on_content_change" TYPE="int" LENGTH="1" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="hvp_libraries" COMMENT="Stores information about libraries.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="Primary Key: The id of the library"/>
+        <FIELD NAME="machine_name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="The library machine name"/>
+        <FIELD NAME="title" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="The human readable name of this library"/>
+        <FIELD NAME="major_version" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="minor_version" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="patch_version" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="runnable" TYPE="int" LENGTH="1" NOTNULL="true" SEQUENCE="false" COMMENT="Can this library be started by the module? i.e. not a dependency."/>
+        <FIELD NAME="fullscreen" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Display fullscreen button"/>
+        <FIELD NAME="embed_types" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="preloaded_js" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Comma separated list of scripts to load."/>
+        <FIELD NAME="preloaded_css" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Comma separated list of stylesheets to load."/>
+        <FIELD NAME="drop_library_css" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="List of libraries that should not have CSS included if this library is used. Comma separated list."/>
+        <FIELD NAME="semantics" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="The semantics definition in json format"/>
+        <FIELD NAME="restricted" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Restricts the ability to create new content using this library"/>
+        <FIELD NAME="tutorial_url" TYPE="char" LENGTH="1000" NOTNULL="false" SEQUENCE="false" COMMENT="URL to a tutorial for this library"/>
+        <FIELD NAME="has_icon" TYPE="int" LENGTH="1" UNSIGNED="true" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Whether or not this library contains an icon.svg"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="meta" UNIQUE="false" FIELDS="machine_name, major_version, minor_version, patch_version, runnable"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="hvp_libraries_hub_cache" COMMENT="Caches content types from the H5P hub.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="Primary Key: The id of the library"/>
+        <FIELD NAME="machine_name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="The library machine name"/>
+        <FIELD NAME="major_version" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="minor_version" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="patch_version" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="h5p_major_version" TYPE="int" LENGTH="4" NOTNULL="false" SEQUENCE="false" COMMENT="The major version required of H5P core"/>
+        <FIELD NAME="h5p_minor_version" TYPE="int" LENGTH="4" NOTNULL="false" SEQUENCE="false" COMMENT="The minor version required of H5P core"/>
+        <FIELD NAME="title" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="The human readable name of this library"/>
+        <FIELD NAME="summary" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Short description of library"/>
+        <FIELD NAME="description" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Long description of library"/>
+        <FIELD NAME="icon" TYPE="char" LENGTH="511" NOTNULL="true" SEQUENCE="false" COMMENT="URL to icon"/>
+        <FIELD NAME="created_at" TYPE="int" LENGTH="11" NOTNULL="true" SEQUENCE="false" COMMENT="Time that the library was uploaded"/>
+        <FIELD NAME="updated_at" TYPE="int" LENGTH="11" NOTNULL="true" SEQUENCE="false" COMMENT="Time that the library has its latest update"/>
+        <FIELD NAME="is_recommended" TYPE="int" LENGTH="1" UNSIGNED="true" NOTNULL="true" SEQUENCE="false" COMMENT="Whether the library is recommended by the HUB moderators"/>
+        <FIELD NAME="popularity" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="How many times the library has been downloaded"/>
+        <FIELD NAME="screenshots" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Screenshot URLs json encoded"/>
+        <FIELD NAME="license" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Library license(s) json encoded"/>
+        <FIELD NAME="example" TYPE="char" LENGTH="511" NOTNULL="true" SEQUENCE="false" COMMENT="URL to example content for this library"/>
+        <FIELD NAME="tutorial" TYPE="char" LENGTH="511" NOTNULL="false" SEQUENCE="false" COMMENT="Tutorial URL"/>
+        <FIELD NAME="keywords" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Keywords for library json encoded"/>
+        <FIELD NAME="categories" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Categories for library json encoded"/>
+        <FIELD NAME="owner" TYPE="char" LENGTH="511" NOTNULL="false" SEQUENCE="false" COMMENT="Owner of the library"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="hvp_libraries_libraries" COMMENT="Library dependencies">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="library_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Primary Key: The id of a H5P library."/>
+        <FIELD NAME="required_library_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="The dependency to load"/>
+        <FIELD NAME="dependency_type" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="'preloaded, dynamic, or editor'"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="hvp_libraries_languages" COMMENT="Translations for libraries">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="library_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="language_code" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="language_json" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="The translations defined in json format"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="hvp_libraries_cachedassets" COMMENT="Use to know which caches to clear when a library is updated">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="library_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="hash" TYPE="char" LENGTH="64" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="relation" UNIQUE="true" FIELDS="library_id, hash"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="hvp_contents_libraries" COMMENT="Store which library is used in which content.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="hvp_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Identifier for a content found from the 'hvp' table"/>
+        <FIELD NAME="library_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="The identifier of a H5P library this content uses"/>
+        <FIELD NAME="dependency_type" TYPE="char" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="dynamic, preloaded or editor"/>
+        <FIELD NAME="drop_css" TYPE="int" LENGTH="1" NOTNULL="true" SEQUENCE="false" COMMENT="1 if the preloaded css from the dependency is to be excluded"/>
+        <FIELD NAME="weight" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Determines the order in which the preloaded libraries will be loaded"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="meta" UNIQUE="false" FIELDS="drop_css"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="hvp_events" COMMENT="Keep track of logged H5P events">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="user_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="created_at" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="type" TYPE="char" LENGTH="63" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="sub_type" TYPE="char" LENGTH="63" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="content_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="content_title" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="library_name" TYPE="char" LENGTH="127" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="library_version" TYPE="char" LENGTH="31" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="hvp_tmpfiles" COMMENT="Keep track of files uploaded before content is saved">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="hvp_counters" COMMENT="A set of global counters to keep track of H5P usage">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="type" TYPE="char" LENGTH="63" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="library_name" TYPE="char" LENGTH="127" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="library_version" TYPE="char" LENGTH="31" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="num" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="realkey" UNIQUE="false" FIELDS="type, library_name, library_version"/>
+      </INDEXES>
+    </TABLE>
+  </TABLES>
+</XMLDB>
diff --git a/mod/hvp/db/tasks.php b/mod/hvp/db/tasks.php
new file mode 100644
index 0000000..077b89e
--- /dev/null
+++ b/mod/hvp/db/tasks.php
@@ -0,0 +1,54 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Defines the task which looks for H5P updates.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$tasks = array(
+    array(
+        'classname' => 'mod_hvp\task\look_for_updates',
+        'blocking' => 0,
+        'minute' => 'R',
+        'hour' => 'R',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'
+    ),
+    array(
+        'classname' => 'mod_hvp\task\remove_tmpfiles',
+        'blocking' => 0,
+        'minute' => 'R',
+        'hour' => 'R',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'
+    ),
+    array(
+        'classname' => 'mod_hvp\task\remove_old_log_entries',
+        'blocking' => 0,
+        'minute' => 'R',
+        'hour' => 'R',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'
+    )
+);
diff --git a/mod/hvp/db/upgrade.php b/mod/hvp/db/upgrade.php
new file mode 100644
index 0000000..ad730b7
--- /dev/null
+++ b/mod/hvp/db/upgrade.php
@@ -0,0 +1,371 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Upgrade definitions for the hvp module.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Adds data for tracking when content was created and last modified.
+ */
+function hvp_upgrade_2016011300() {
+    global $DB;
+    $dbman = $DB->get_manager();
+
+    $table = new xmldb_table('hvp');
+
+    // Define field timecreated to be added to hvp.
+    $timecreated = new xmldb_field('timecreated', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'slug');
+
+    // Conditionally launch add field timecreated.
+    if (!$dbman->field_exists($table, $timecreated)) {
+        $dbman->add_field($table, $timecreated);
+    }
+
+    // Define field timemodified to be added to hvp.
+    $timemodified = new xmldb_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'timecreated');
+
+    // Conditionally launch add field timemodified.
+    if (!$dbman->field_exists($table, $timemodified)) {
+        $dbman->add_field($table, $timemodified);
+    }
+}
+
+/**
+ * Adds table for keeping track of, and cleaning up temporary files
+ */
+function hvp_upgrade_2016042500() {
+    global $DB;
+    $dbman = $DB->get_manager();
+
+    // Define table hvp_tmpfiles to be created.
+    $table = new xmldb_table('hvp_tmpfiles');
+
+    // Adding fields to table hvp_tmpfiles.
+    $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+
+    // Adding keys to table hvp_tmpfiles.
+    $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);
+
+    // Conditionally launch create table for hvp_tmpfiles.
+    if (!$dbman->table_exists($table)) {
+        $dbman->create_table($table);
+    }
+}
+
+/**
+ * Adds events table
+ */
+function hvp_upgrade_2016050600() {
+    global $DB;
+    $dbman = $DB->get_manager();
+
+    // Define table hvp_events to be created.
+    $table = new xmldb_table('hvp_events');
+
+    // Adding fields to table hvp_events.
+    $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+    $table->add_field('user_id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('created_at', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('type', XMLDB_TYPE_CHAR, '63', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('sub_type', XMLDB_TYPE_CHAR, '63', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('content_id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('content_title', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('library_name', XMLDB_TYPE_CHAR, '127', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('library_version', XMLDB_TYPE_CHAR, '31', null, XMLDB_NOTNULL, null, null);
+
+    // Adding keys to table hvp_events.
+    $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);
+
+    // Conditionally launch create table for hvp_events.
+    if (!$dbman->table_exists($table)) {
+        $dbman->create_table($table);
+    }
+
+    // Define table hvp_counters to be created.
+    $table = new xmldb_table('hvp_counters');
+
+    // Adding fields to table hvp_counters.
+    $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+    $table->add_field('type', XMLDB_TYPE_CHAR, '63', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('library_name', XMLDB_TYPE_CHAR, '127', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('library_version', XMLDB_TYPE_CHAR, '31', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('num', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+
+    // Adding keys to table hvp_counters.
+    $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);
+
+    // Adding indexes to table hvp_counters.
+    $table->add_index('realkey', XMLDB_INDEX_NOTUNIQUE, [
+        'type',
+        'library_name',
+        'library_version',
+    ]);
+
+    // Conditionally launch create table for hvp_counters.
+    if (!$dbman->table_exists($table)) {
+        $dbman->create_table($table);
+    }
+}
+
+/**
+ * Adds intro and introformat to hvp table
+ */
+function hvp_upgrade_2016051000() {
+    global $DB;
+    $dbman = $DB->get_manager();
+
+    $table = new xmldb_table('hvp');
+
+    // Define field intro to be added to hvp.
+    $intro = new xmldb_field('intro', XMLDB_TYPE_TEXT, null, null, null, null, null, 'name');
+
+    // Add field intro if not defined already.
+    if (!$dbman->field_exists($table, $intro)) {
+        $dbman->add_field($table, $intro);
+    }
+
+    // Define field introformat to be added to hvp.
+    $introformat = new xmldb_field('introformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, '0', 'intro');
+
+    // Add field introformat if not defined already.
+    if (!$dbman->field_exists($table, $introformat)) {
+        $dbman->add_field($table, $introformat);
+    }
+}
+
+/**
+ * Changes context of activity files to enable backup an restore.
+ */
+function hvp_upgrade_2016110100() {
+    global $DB;
+
+    // Change context of activity files from COURSE to MODULE.
+    $filearea  = 'content';
+    $component = 'mod_hvp';
+
+    // Find activity ID and correct context ID.
+    $hvpsresult = $DB->get_records_sql(
+        "SELECT f.id AS fileid, f.itemid, c.id, f.filepath, f.filename, f.pathnamehash
+                   FROM {files} f
+                   JOIN {course_modules} cm ON f.itemid = cm.instance
+                   JOIN {modules} md ON md.id = cm.module
+                   JOIN {context} c ON c.instanceid = cm.id
+                  WHERE md.name = 'hvp'
+                    AND f.filearea = 'content'
+                    AND c.contextlevel = " . CONTEXT_MODULE
+    );
+
+    foreach ($hvpsresult as $hvp) {
+        // Need to re-hash pathname after changing context.
+        $pathnamehash = file_storage::get_pathname_hash($hvp->id,
+            $component,
+            $filearea,
+            $hvp->itemid,
+            $hvp->filepath,
+            $hvp->filename
+        );
+
+        // Double check that hash doesn't exist (avoid duplicate entries).
+        if (!$DB->get_field_sql("SELECT contextid FROM {files} WHERE pathnamehash = '{$pathnamehash}'")) {
+            // Update context ID and pathname hash for files.
+            $DB->execute("
+                  UPDATE {files}
+                  SET contextid = {$hvp->id},
+                      pathnamehash = '{$pathnamehash}'
+                  WHERE pathnamehash = '{$hvp->pathnamehash}'"
+            );
+        }
+    }
+}
+
+/**
+ * Notifies about breaking changes to H5P content type styling
+ */
+function hvp_upgrade_2016122800() {
+    // @codingStandardsIgnoreLine
+    \mod_hvp\framework::messages('info', '<span style="font-weight: bold;">Upgrade your H5P content types!</span> Old content types will still work, but the authoring tool will look and feel much better if you <a href="https://h5p.org/update-all-content-types">upgrade the content types</a>.');
+    \mod_hvp\framework::printMessages('info', \mod_hvp\framework::messages('info'));
+}
+
+/**
+ * Adds content type cache to enable the content type hub
+ */
+function hvp_upgrade_2017040500() {
+    global $DB;
+    $dbman = $DB->get_manager();
+
+    // Add content type cache database.
+    $table = new xmldb_table('hvp_libraries_hub_cache');
+
+    // Adding fields to table hvp_libraries_hub_cache.
+    $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+    $table->add_field('machine_name', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('major_version', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('minor_version', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('patch_version', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('h5p_major_version', XMLDB_TYPE_INTEGER, '4', null, null, null, null);
+    $table->add_field('h5p_minor_version', XMLDB_TYPE_INTEGER, '4', null, null, null, null);
+    $table->add_field('title', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('summary', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);
+    $table->add_field('description', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);
+    $table->add_field('icon', XMLDB_TYPE_CHAR, '511', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('created_at', XMLDB_TYPE_INTEGER, '11', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('updated_at', XMLDB_TYPE_INTEGER, '11', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('is_recommended', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null);
+    $table->add_field('popularity', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('screenshots', XMLDB_TYPE_TEXT, null, null, null, null, null);
+    $table->add_field('license', XMLDB_TYPE_TEXT, null, null, null, null, null);
+    $table->add_field('example', XMLDB_TYPE_CHAR, '511', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('tutorial', XMLDB_TYPE_CHAR, '511', null, null, null, null);
+    $table->add_field('keywords', XMLDB_TYPE_TEXT, null, null, null, null, null);
+    $table->add_field('categories', XMLDB_TYPE_TEXT, null, null, null, null, null);
+    $table->add_field('owner', XMLDB_TYPE_CHAR, '511', null, null, null, null);
+
+    // Adding keys to table hvp_libraries_hub_cache.
+    $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);
+
+    // Conditionally create table for hvp_libraries_hub_cache.
+    if (!$dbman->table_exists($table)) {
+        $dbman->create_table($table);
+    }
+
+    // Update the content type cache.
+    $core = \mod_hvp\framework::instance();
+    $core->updateContentTypeCache();
+
+    // Print messages.
+    \mod_hvp\framework::printMessages('info', \mod_hvp\framework::messages('info'));
+    \mod_hvp\framework::printMessages('error', \mod_hvp\framework::messages('error'));
+
+    // Add has_icon to libraries folder.
+    $table = new xmldb_table('hvp_libraries');
+
+    // Define field has_icon to be added to hvp_libraries.
+    $hasicon = new xmldb_field('has_icon', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0');
+
+    // Add field has_icon if it does not exist.
+    if (!$dbman->field_exists($table, $hasicon)) {
+        $dbman->add_field($table, $hasicon);
+    }
+
+    // Display hub communication info.
+    if (!get_config('mod_hvp', 'external_communication')) {
+        // @codingStandardsIgnoreLine
+        \mod_hvp\framework::messages('info', 'H5P now fetches content types directly from the H5P Hub. In order to do this, the H5P plugin will communicate with H5P.org once per day to fetch information about new and updated content types. It will send in anonymous data to the hub about H5P usage. You may disable the data contribution and/or the H5P Hub in the H5P settings.');
+        \mod_hvp\framework::printMessages('info', \mod_hvp\framework::messages('info'));
+    }
+
+    // Enable hub and delete old communication variable.
+    set_config('hub_is_enabled', true, 'mod_hvp');
+    unset_config('hub_is_enabled', 'mod_hvp');
+}
+
+/**
+ * Adds xAPI results table to enable reporting
+ */
+function hvp_upgrade_2017050900() {
+    global $DB;
+    $dbman = $DB->get_manager();
+
+    // Add report rendering.
+    $table = new xmldb_table('hvp_xapi_results');
+
+    // Add fields.
+    $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+    $table->add_field('content_id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('user_id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('parent_id', XMLDB_TYPE_INTEGER, '10', null, null, null, null);
+    $table->add_field('interaction_type', XMLDB_TYPE_CHAR, '127', null, XMLDB_NOTNULL, null, null);
+    $table->add_field('description', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);
+    $table->add_field('correct_responses_pattern', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);
+    $table->add_field('response', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);
+    $table->add_field('additionals', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);
+
+    // Add keys and index.
+    $table->add_key('primary', XMLDB_KEY_PRIMARY, ['id']);
+    $table->add_index('result', XMLDB_INDEX_UNIQUE, [
+        'id',
+        'content_id',
+        'user_id',
+    ]);
+
+    // Create table if it does not exist.
+    if (!$dbman->table_exists($table)) {
+        $dbman->create_table($table);
+    }
+}
+
+/**
+ * Adds raw score and max score to xapi results table
+ */
+function hvp_upgrade_2017060900() {
+    global $DB;
+    $dbman = $DB->get_manager();
+
+    // Add score to report rendering.
+    $table = new xmldb_table('hvp_xapi_results');
+
+    if ($dbman->table_exists($table)) {
+        // Raw score field.
+        $scorefield = new xmldb_field('raw_score', XMLDB_TYPE_INTEGER, '6');
+        if (!$dbman->field_exists($table, $scorefield)) {
+            $dbman->add_field($table, $scorefield);
+        }
+
+        // Max score field.
+        $maxscorefield = new xmldb_field('max_score', XMLDB_TYPE_INTEGER, '6');
+        if (!$dbman->field_exists($table, $maxscorefield)) {
+            $dbman->add_field($table, $maxscorefield);
+        }
+    }
+}
+
+/**
+ * Hvp module upgrade function.
+ *
+ * @param string $oldversion The version we are upgrading from
+ *
+ * @return bool Success
+ */
+function xmldb_hvp_upgrade($oldversion) {
+    $upgrades = [
+        2016011300,
+        2016042500,
+        2016050600,
+        2016051000,
+        2016110100,
+        2016122800,
+        2017040500,
+        2017050900,
+        2017060900,
+    ];
+
+    foreach ($upgrades as $version) {
+        if ($oldversion < $version) {
+            call_user_func("hvp_upgrade_{$version}");
+            upgrade_mod_savepoint(true, $version, 'hvp');
+        }
+    }
+
+    return true;
+}
diff --git a/mod/hvp/editor.js b/mod/hvp/editor.js
new file mode 100644
index 0000000..4721765
--- /dev/null
+++ b/mod/hvp/editor.js
@@ -0,0 +1,28 @@
+(function ($) {
+  function getRow ($el) {
+    return $el.closest('.fitem');
+  }
+
+  function init () {
+    var $editor = $('.h5p-editor');
+    var $fileField = $('input[name="h5pfile"]');
+
+    if (H5PIntegration.hubIsEnabled) {
+      // TODO: This can easily break in new themes. Improve robustness of this
+      // by not including h5paction in form, when it should not be used.
+      $('input[name="h5paction"]').parents('.fitem').last().hide();
+    }
+
+    H5PEditor.init(
+      $('#mform1'),
+      $('input[name="h5paction"]'),
+      getRow($fileField),
+      getRow($editor),
+      $editor,
+      $('input[name="h5plibrary"]'),
+      $('input[name="h5pparams"]')
+    );
+  }
+
+  $(document).ready(init);
+})(H5P.jQuery);
diff --git a/mod/hvp/grade.php b/mod/hvp/grade.php
new file mode 100644
index 0000000..5ea71bd
--- /dev/null
+++ b/mod/hvp/grade.php
@@ -0,0 +1,138 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * View all results for H5P Content
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once("locallib.php");
+
+global $DB, $PAGE, $USER, $COURSE;
+
+$id = required_param('id', PARAM_INT);
+$userid = optional_param('userid', (int)$USER->id, PARAM_INT);
+
+if (! $cm = get_coursemodule_from_id('hvp', $id)) {
+    print_error('invalidcoursemodule');
+}
+if (! $course = $DB->get_record('course', array('id' => $cm->course))) {
+    print_error('coursemisconf');
+}
+require_course_login($course, false, $cm);
+
+// Check permission.
+$coursecontext = context_course::instance($COURSE->id);
+hvp_require_view_results_permission($userid, $coursecontext, $cm->id);
+
+// Load H5P Content.
+$hvp = $DB->get_record_sql(
+        "SELECT h.id,
+                h.name AS title,
+                hl.machine_name,
+                hl.major_version,
+                hl.minor_version
+           FROM {hvp} h
+           JOIN {hvp_libraries} hl ON hl.id = h.main_library_id
+          WHERE h.id = ?",
+        array($cm->instance));
+
+if ($hvp === false) {
+    print_error('invalidhvp');
+}
+
+// Log content result view.
+new \mod_hvp\event(
+        'results', 'content',
+        $hvp->id, $hvp->title,
+        $hvp->machine_name, "{$hvp->major_version}.{$hvp->minor_version}"
+);
+
+// Set page properties.
+$pageurl = new moodle_url('/mod/hvp/grade.php', array('id' => $hvp->id));
+$PAGE->set_url($pageurl);
+$title = "Results for {$hvp->title}";
+$PAGE->set_title($title);
+$PAGE->set_heading($course->fullname);
+
+// List all results for specific content.
+$dataviewid = 'h5p-results';
+
+// Add required assets for data views.
+$PAGE->requires->js(new moodle_url($CFG->httpswwwroot . '/mod/hvp/library/js/jquery.js'), true);
+$PAGE->requires->js(new moodle_url($CFG->httpswwwroot . '/mod/hvp/library/js/h5p-utils.js'), true);
+$PAGE->requires->js(new moodle_url($CFG->httpswwwroot . '/mod/hvp/library/js/h5p-data-view.js'), true);
+$PAGE->requires->js(new moodle_url($CFG->httpswwwroot . '/mod/hvp/dataviews.js'), true);
+$PAGE->requires->css(new moodle_url($CFG->httpswwwroot . '/mod/hvp/styles.css'));
+
+// Add JavaScript settings to data views.
+$settings = array(
+    'dataViews' => array(
+        "{$dataviewid}" => array(
+            'source' => "{$CFG->httpswwwroot}/mod/hvp/ajax.php?action=results&content_id={$hvp->id}",
+            'headers' => array(
+                (object) array(
+                    'text' => get_string('user', 'hvp'),
+                    'sortable' => true
+                ),
+                (object) array(
+                    'text' => get_string('score', 'hvp'),
+                    'sortable' => true
+                ),
+                (object) array(
+                    'text' => get_string('maxscore', 'hvp'),
+                    'sortable' => true
+                ),
+                (object) array(
+                    'text' => get_string('finished', 'hvp'),
+                    'sortable' => true
+                ),
+                (object) array(
+                    'text' => get_string('dataviewreportlabel', 'hvp')
+                )
+            ),
+            'filters' => array(true),
+            'order' => (object) array(
+                'by' => 3,
+                'dir' => 0
+            ),
+            'l10n' => array(
+                'loading' => get_string('loadingdata', 'hvp'),
+                'ajaxFailed' => get_string('ajaxfailed', 'hvp'),
+                'noData' => get_string('nodata', 'hvp'),
+                'currentPage' => get_string('currentpage', 'hvp'),
+                'nextPage' => get_string('nextpage', 'hvp'),
+                'previousPage' => get_string('previouspage', 'hvp'),
+                'search' => get_string('search', 'hvp'),
+                'empty' => get_string('empty', 'hvp')
+            )
+        )
+    )
+);
+$PAGE->requires->data_for_js('H5PIntegration', $settings, true);
+
+// Print page HTML.
+echo $OUTPUT->header();
+echo '<div class="clearer"></div>';
+
+// Print H5P Content.
+echo "<h2>{$title}</h2>";
+echo '<div id="h5p-results">' . get_string('javascriptloading', 'hvp') . '</div>';
+
+echo $OUTPUT->footer();
diff --git a/mod/hvp/index.php b/mod/hvp/index.php
new file mode 100644
index 0000000..1c5c2ec
--- /dev/null
+++ b/mod/hvp/index.php
@@ -0,0 +1,141 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Form for creating new H5P Content
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+
+// Get Course ID.
+$id = optional_param('id', 0, PARAM_INT);
+
+// Set URL.
+$url = new \moodle_url('/mod/hvp/index.php', array('id' => $id));
+$PAGE->set_url($url);
+
+// Load Course.
+$course = $DB->get_record('course', array('id' => $id));
+if (!$course) {
+    print_error('invalidcourseid');
+}
+
+// Require login.
+require_course_login($course);
+$PAGE->set_pagelayout('incourse');
+$coursecontext = context_course::instance($course->id);
+
+// Trigger instances list viewed event.
+$params = array(
+    'context' => context_course::instance($course->id)
+);
+$event = \mod_hvp\event\course_module_instance_list_viewed::create($params);
+$event->add_record_snapshot('course', $course);
+$event->trigger();
+
+// Set title and heading.
+$PAGE->set_title($course->shortname . ': ' . get_string('modulenameplural', 'mod_hvp'));
+$PAGE->set_heading($course->fullname);
+
+echo $OUTPUT->header();
+
+// Load H5P list data.
+$rawh5ps = $DB->get_records_sql("SELECT cm.id AS coursemodule,
+                                     cw.section,
+                                     cm.visible,
+                                     h.name,
+                                     hl.title AS librarytitle
+                                FROM {course_modules} cm,
+                                     {course_sections} cw,
+                                     {modules} md,
+                                     {hvp} h,
+                                     {hvp_libraries} hl
+                               WHERE cm.course = ?
+                                 AND cm.instance = h.id
+                                 AND cm.section = cw.id
+                                 AND md.name = 'hvp'
+                                 AND md.id = cm.module
+                                 AND hl.id = h.main_library_id
+                             ", array($course->id));
+if (!$rawh5ps) {
+    notice(get_string('noh5ps', 'mod_hvp'), "../../course/view.php?id={$course->id}");
+    die;
+}
+
+$modinfo = get_fast_modinfo($course, null);
+if (empty($modinfo->instances['hvp'])) {
+    $h5ps = $rawh5ps;
+} else {
+    // Lets try to order these bad boys.
+    $h5ps = [];
+    foreach ($modinfo->instances['hvp'] as $cm) {
+        if (!$cm->uservisible || !isset($rawh5ps[$cm->id])) {
+            continue; // Not visible or not found.
+        }
+        if (!empty($cm->extra)) {
+            $rawh5ps[$cm->id]->extra = $cm->extra;
+        }
+        $h5ps[] = $rawh5ps[$cm->id];
+    }
+}
+
+// Print H5P list.
+$table = new html_table();
+$table->attributes['class'] = 'generaltable mod_index';
+
+$table->head = array();
+$table->align = array();
+
+$usesections = course_format_uses_sections($course->format);
+if ($usesections) {
+    // Section name.
+    $table->head[] = get_string('sectionname', 'format_'.$course->format);
+    $table->align[] = 'center';
+}
+
+// Activity name.
+$table->head[] = get_string('name');
+$table->align[] = 'left';
+
+// Content type.
+$table->head[] = 'Content Type';
+$table->align[] = 'left';
+
+// Add data rows.
+foreach ($h5ps as $h5p) {
+    $row = [];
+
+    if ($usesections) {
+        // Section name.
+        $row[] = get_section_name($course, $h5p->section);
+    }
+
+    // Activity name.
+    $attrs = ($h5p->visible ? '' : ' class="dimmed"');
+    $row[] = "<a href=\"view.php?id={$h5p->coursemodule}\"{$attrs}>{$h5p->name}</a>";
+
+    // Activity type.
+    $row[] = $h5p->librarytitle;
+
+    $table->data[] = $row;
+}
+
+echo html_writer::table($table);
+
+echo $OUTPUT->footer();
diff --git a/mod/hvp/lang/de/hvp.php b/mod/hvp/lang/de/hvp.php
new file mode 100644
index 0000000..3cbc1ea
--- /dev/null
+++ b/mod/hvp/lang/de/hvp.php
@@ -0,0 +1,274 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+$string['modulename'] = 'Interaktiver Inhalt';
+$string['modulename_help'] = 'Das H5P Aktivitätenmodul ermöglicht das Erstellen von interaktiven Inhalten, wie interaktive Videos, Fragebögen, Drag-and-Drop-Fragen, Multiple-Choice-Fragen, Präsentationen und vieles mehr.
+Zusätzlich zu den Funktionen als Tool für rich content, ermöglicht H5P es, H5P-Dateien zu importieren und exportieren, um die Inhalte effektiv wiederverwenden und teilen zu können.
+Nutzerinteraktion und Punkte werden mittels der xAPI verfolgt und sind im Moodle Notenbuch verfügbar.
+Interaktive H5P-Inhalte können durch das Hochladen von .h5p-Dateien hinzugefügt werden. Das Erstellen und Herunterladen von .h5p-Dateien ist unter h5p.org möglich.';
+$string['modulename_link'] = 'https://h5p.org/moodle-more-help';
+$string['modulenameplural'] = 'H5Ps';
+$string['pluginadministration'] = 'H5P';
+$string['pluginname'] = 'H5P';
+$string['hvp:addinstance'] = 'Neue H5P-Aktivität erstellen';
+$string['intro'] = 'Einleitung';
+$string['h5pfile'] = 'H5P-Datei';
+$string['fullscreen'] = 'Vollbild';
+$string['disablefullscreen'] = 'Vollbild beenden';
+$string['download'] = 'Herunterladen';
+$string['copyright'] = 'Nutzungsrechte';
+$string['embed'] = 'Einbinden';
+$string['showadvanced'] = 'Erweitert anzeigen';
+$string['hideadvanced'] = 'Erweitert ausblenden';
+$string['resizescript'] = 'Fügen Sie dieses Skript auf Ihrer Website ein, um die Größe des Inhalts dynamisch ändern zu können:';
+$string['size'] = 'Größe';
+$string['close'] = 'Schließen';
+$string['title'] = 'Titel';
+$string['author'] = 'Autor';
+$string['year'] = 'Jahr';
+$string['source'] = 'Quelle';
+$string['license'] = 'Lizenz';
+$string['thumbnail'] = 'Vorschau';
+$string['nocopyright'] = 'Für diesen Inhalt sind keine Informationen zu Urheberrechten verfügbar.';
+$string['downloadtitle'] = 'Diesen Inhalt als H5P-Datei herunterladen';
+$string['copyrighttitle'] = 'Informationen zum Urheberrecht für diesen Inhalt anzeigen.';
+$string['embedtitle'] = 'Code zur Einbettung dieses Inhalts anzeigen.';
+$string['h5ptitle'] = 'Besuche H5P.org um mehr coole Inhalte zu sehen.';
+$string['contentchanged'] = 'Dieser Inhalt hat sich seit der letzten Nutzung verändert.';
+$string['startingover'] = "Jetzt geht\'s los.";
+$string['confirmdialogheader'] = 'Bestätigen';
+$string['confirmdialogbody'] = 'Zum Fortfahren bestätigen. Dieser Vorgang kann nicht rückgängig gemacht werden.';
+$string['cancellabel'] = 'Abbrechen';
+$string['confirmlabel'] = 'Bestätigen';
+
+$string['lookforupdates'] = 'Nach H5P-Aktualisierungen suchen';
+$string['removetmpfiles'] = 'Entfernen alter temporärer H5P-Dateien';
+$string['removeoldlogentries'] = 'Entfernen alter H5P-Logdateien';
+
+// Admin settings.
+$string['displayoptionnevershow'] = 'Nie zeigen';
+$string['displayoptionalwaysshow'] = 'Immer zeigen';
+$string['displayoptionpermissions'] = 'Nur zeigen, wenn der Nutzer H5P exportieren darf';
+$string['displayoptionauthoron'] = 'Vom Autor gesteuert, Standard ist an';
+$string['displayoptionauthoroff'] = 'Vom Autor gesteuert, Standard ist aus';
+$string['displayoptions'] = 'Optionen anzeigen';
+$string['enableframe'] = 'Menüleiste und Rahmen anzeigen.';
+$string['enabledownload'] = 'Download-Knopf';
+$string['enableembed'] = 'Einbetten-Knopf';
+$string['enablecopyright'] = 'Urheberrecht-Knopf';
+$string['enableabout'] = 'Über-H5P-Knopf';
+
+
+$string['enablesavecontentstate'] = 'Inhalte automatisch speichern';
+$string['enablesavecontentstate_help'] = 'Automatisch den Status des interaktiven Inhalts für jeden Nutzer speichern. Das bedeutet, dass die Nutzer da weitermachen können, wo sie aufgehört haben.';
+$string['contentstatefrequency'] = 'Speicherhäufigkeit';
+$string['contentstatefrequency_help'] = 'Wie oft (in Sekunden) soll der Inhalt des Nutzers automatisch gespeichert werden? Bei Problemen mit zu vielen AJAX-Anfragen erhöhen.';
+
+// Admin menu.
+$string['settings'] = 'H5P-Einstellungen';
+$string['libraries'] = 'H5P-Bibliotheken';
+
+// Upload libraries section.
+$string['uploadlibraries'] = 'Bibliotheken hochladen';
+$string['options'] = 'Optionen';
+$string['onlyupdate'] = 'Nur bereits bestehende Bibliotheken aktualisieren';
+$string['disablefileextensioncheck'] = 'Prüfung der Dateiendung deaktivieren';
+$string['disablefileextensioncheckwarning'] = "Warnung! Das deaktivieren der Prüfung kann zu Sicherheitsproblemen führen, da das Hochladen von php-Dateien möglich wird. Dadurch könnten Hacker in der Lage sein, schadhaften Code in die Website einzuschleusen. Bitte stellen Sie sicher, dass Sie genau wissen, was sie tun.";
+$string['upload'] = 'Hochladen';
+
+// Installed libraries section.
+$string['installedlibraries'] = 'Installierte Bibliotheken';
+$string['invalidtoken'] = 'Ungültiger Sicherheitsschlüssel.';
+$string['missingparameters'] = 'Fehlende Parameter';
+
+// H5P library list headers on admin page.
+$string['librarylisttitle'] = 'Titel';
+$string['librarylistrestricted'] = 'Eingeschränkt';
+$string['librarylistinstances'] = 'Instanzen';
+$string['librarylistinstancedependencies'] = 'Instanzabhägigkeiten';
+$string['librarylistlibrarydependencies'] = 'Bibliotheksabhängigkeiten';
+$string['librarylistactions'] = 'Aktionen';
+
+// H5P library page labels.
+$string['addlibraries'] = 'Bibliotheken hinzufügen';
+$string['installedlibraries'] = 'Installierte Bibliotheken';
+$string['notapplicable'] = 'Nicht verfügbar';
+$string['upgradelibrarycontent'] = 'Inhalt der Bibliothek aktualisieren';
+
+// Upgrade H5P content page.
+$string['upgrade'] = 'Aktualisiere H5P';
+$string['upgradeheading'] = 'Aktualisiere {$a} Inhalt';
+$string['upgradenoavailableupgrades'] = 'Für diese Bibliothek sind keine Aktualisierungen verfügbar.';
+$string['enablejavascript'] = 'Bitte JavaScript aktivieren.';
+$string['upgrademessage'] = 'Es sollen {$a} Inhaltsinstanzen aktualisiert werden. Bitte die Version der Aktualisierung festlegen.';
+$string['upgradeinprogress'] = 'Aktualisieren auf %ver...';
+$string['upgradeerror'] = 'Ein Fehler trat beim Auswerten der Parameter auf:';
+$string['upgradeerrordata'] = 'Konnte die Daten der Bibliothek %lib nicht laden.';
+$string['upgradeerrorscript'] = 'Konnte das Aktualisierungsskript für %lib nicht laden.';
+$string['upgradeerrorcontent'] = 'Konnte den Inhalt %id nicht aktualisieren:';
+$string['upgradeerrorparamsbroken'] = 'Falsche Parameter.';
+$string['upgradedone'] = '{$a} Inhaltsinstanzen wurde(n) erfolgreich aktualisiert.';
+$string['upgradereturn'] = 'Zurück';
+$string['upgradenothingtodo'] = "Es gibt keine aktualisierbaren Inhaltsinstanzen.";
+$string['upgradebuttonlabel'] = 'Aktualisieren';
+$string['upgradeinvalidtoken'] = 'Fehler: Ungültiger Sicherheitsschlüssel!';
+$string['upgradelibrarymissing'] = 'Fehler: Die Bibliothek fehlt!';
+
+// Results / report page.
+$string['user'] = 'Nutzer';
+$string['score'] = 'Punkte';
+$string['maxscore'] = 'Maximale Punktzahl';
+$string['finished'] = 'Beendet';
+$string['loadingdata'] = 'Lade Daten.';
+$string['ajaxfailed'] = 'Fehler beim Laden der Daten.';
+$string['nodata'] = "Es sind keine Daten vorhanden, die den Kriterien entsprechen.";
+$string['currentpage'] = 'Seite $current von $total';
+$string['nextpage'] = 'Nächste Seite';
+$string['previouspage'] = 'Vorherige Seite';
+$string['search'] = 'Suchen';
+$string['empty'] = 'Keine Ergebnisse verfügbar';
+$string['viewreportlabel'] = 'Report';
+$string['dataviewreportlabel'] = 'View Answers';
+$string['invalidxapiresult'] = 'No xAPI results were found for the given content and user id combination';
+$string['reportnotsupported'] = 'Not supported';
+$string['reportingscorelabel'] = 'Score:';
+$string['reportingscaledscorelabel'] = 'Gradebook score:';
+$string['reportingscoredelimiter'] = 'out of';
+$string['reportingscaledscoredelimiter'] = ',';
+
+// Editor.
+$string['javascriptloading'] = 'Warte auf JavaScript';
+$string['action'] = 'Aktion';
+$string['upload'] = 'Hochladen';
+$string['create'] = 'Erstellen';
+$string['editor'] = 'Bearbeiten';
+
+$string['invalidlibrary'] = 'Ungültige Bibliothek';
+$string['nosuchlibrary'] = 'Bibliothek nicht vorhanden';
+$string['noparameters'] = 'Keine Parameter';
+$string['invalidparameters'] = 'Ungültige Parameter';
+$string['missingcontentuserdata'] = 'Fehler: Konnte den Nutzerinhalt nicht finden';
+
+$string['maximumgrade'] = 'Beste Bewertung';
+$string['maximumgradeerror'] = 'Bitte gib einen positive ganze Zahl als maximale Punktzahl für diese Aktivität an.';
+
+// Capabilities.
+$string['hvp:addinstance'] = 'Neue H5P-Aktivität hinzufügen';
+$string['hvp:restrictlibraries'] = 'H5P-Bibliothek beschränken';
+$string['hvp:updatelibraries'] = 'Aktualisieren einer H5P-Bibliothek';
+$string['hvp:userestrictedlibraries'] = 'Verwendung eingeschränkter H5P-Bibliotheken';
+$string['hvp:savecontentuserdata'] = 'H5P-Nutzerinhalt speichern';
+$string['hvp:saveresults'] = 'Ergebnis des H5P-Inhalts speichern';
+$string['hvp:viewresults'] = 'Ergebnis des H5P-Inhalts ansehen';
+$string['hvp:viewallresults'] = 'View result for all users in course';
+$string['hvp:getcachedassets'] = 'Zwischengespeicherte H5P-Inhaltswerte erhalten';
+$string['hvp:getcontent'] = 'H5P-Dateiinhalt im Kurs verwenden/ansehen';
+$string['hvp:getexport'] = 'Exportierte H5P Datei im Kurs verwenden';
+
+// Capabilities error messages.
+$string['nopermissiontoupgrade'] = 'Die nötigen Rechte, um die Bibliothek zu aktualisieren, sind nicht vorhanden.';
+$string['nopermissiontorestrict'] = 'Die nötigen Rechte, um Bibliotheken zu beschränken, sind nicht vorhanden.';
+$string['nopermissiontosavecontentuserdata'] = 'Die nötigen Rechte, um Nutzerinhalte zu speichern, sind nicht vorhanden.';
+$string['nopermissiontosaveresult'] = 'Die nötigen Rechte, um die Ergebnisse dieses Inhalts zu speichern, sind nicht vorhanden.';
+$string['nopermissiontoviewresult'] = 'Die nötigen Rechte, um die Ergebnisse dieses Inhalts anzusehen, sind nicht vorhanden.';
+
+// Editor translations.
+$string['noziparchive'] = 'Diese PHP-Version unterstützt ZipArchive nicht.';
+$string['noextension'] = 'Die hochgeladene Datei ist kein gültiges HTML5-Paket (Keine .h5p Dateiendung)';
+$string['nounzip'] = 'Die hochgeladene Datei ist kein gültiges HTML5-Paket (Kann nicht entpackt werden)';
+$string['noparse'] = 'Konnte die zentrale h5p.json-Datei nicht analysieren';
+$string['nojson'] = 'Die zentrale h5p.json-Datei ist ungültig';
+$string['invalidcontentfolder'] = 'Ungültiger Inhaltsordner';
+$string['nocontent'] = 'Konnte die content.json-Datei nicht finden oder analysieren';
+$string['librarydirectoryerror'] = 'Der Name des Bibliotheksverzeichnisses muss machineName oder machineName-majorVersion.minorVersion (aus library.json) entsprechen. (Verzeichnis: {$a->%directoryName} , machineName: {$a->%machineName}, majorVersion: {$a->%majorVersion}, minorVersion: {$a->%minorVersion})';
+$string['missingcontentfolder'] = 'Ein gültiger Inhaltsordner fehlt';
+$string['invalidmainjson'] = 'Eine gültige zentrale h5p.json-Datei fehlt';
+$string['missinglibrary'] = 'Die benötigte Bibliothek {$a->@library} fehlt';
+$string['missinguploadpermissions'] = "Hinweis: Die Bibliotheken mögen in den hochgeladenen Dateien zwar enthalten sein, aber die nötigen Rechte, um neue Bibliotheken hochzuladen, fehlen. Dazu bitte den Seitenadministrator kontaktieren.";
+$string['invalidlibraryname'] = 'Ungültiger Bibliotheksname: {$a->%name}';
+$string['missinglibraryjson'] = 'Konnte die Datei library.json mit gültigem json-format für die Bibliothek {$a->%name} nicht finden.';
+$string['invalidsemanticsjson'] = 'Ungültige semantics.json Datei wurde in die Bibliothek {$a->%name} eingefügt';
+$string['invalidlanguagefile'] = 'Ungültige Sprachdatei {$a->%file} in Bibliothek {$a->%library}';
+$string['invalidlanguagefile2'] = 'Ungültige Sprachdatei {$a->%languageFile} wurde in die Bibliothek {$a->%name} eingefügt';
+$string['missinglibraryfile'] = 'Die Datei "{$a->%file}" fehlt in der Bibliothek "{$a->%name}"';
+$string['invalidlibrarydataboolean'] = 'Ungültige Daten für {$a->%property} in {$a->%library}. Boolean wurde erwartet.';
+$string['invalidlibrarydata'] = 'Ungültige Daten für {$a->%property} in {$a->%library}';
+$string['invalidlibraryproperty'] = 'Kann das Merkmal {$a->%property} in {$a->%library} nicht lesen';
+$string['missinglibraryproperty'] = 'Das benötigte Merkmal {$a->%property} fehlt in {$a->%library}';
+$string['invalidlibraryoption'] = 'Nicht erlaubte Option {$a->%option} in {$a->%library}';
+$string['addedandupdatelibraries'] = '{$a->%new} neue H5P-Bibliotheken hinzugefügt und {$a->%old} alte aktualisiert.';
+$string['addednewlibraries'] = '{$a->%new} neue H5P-Bibliotheken hinzugefügt.';
+$string['updatedlibraries'] = '{$a->%old} H5P-Bibliotheken aktualisiert.';
+$string['missingdependency'] = 'Fehlende Abhängigkeit {$a->@dep} wird von {$a->@lib} benötigt.';
+$string['invalidstring'] = 'Der übergebene string ist nicht gültig gemäß des regulären Ausdrucks in semantics. (value: \"{$a->%value}\", regexp: \"{$a->%regexp}\")';
+$string['invalidfile'] = 'Datei "{$a->%filename}" nicht erlaubt. Es sind nur Dateien mit den folgenden Endungen erlaubt: {$a->%files-allowed}.';
+$string['invalidmultiselectoption'] = 'Ungültige Option bei der Mehrfachauswahl ausgewählt.';
+$string['invalidselectoption'] = 'Ungültige Option bei der Auswahl ausgewählt.';
+$string['invalidsemanticstype'] = 'Interner H5P-Fehler: Unbekannter Inhaltstyp "{$a->@type}" in semantics. Inhalt wird entfernt!';
+$string['invalidsemantics'] = 'Laut semantics ist die im Inhalt verwendete Bibliothek keine gültige.';
+$string['unabletocreatedir'] = 'Erstellen des Verzeichnisses nicht möglich.';
+$string['unabletogetfieldtype'] = 'Bestimmen des Feldtyps nicht möglich.';
+$string['filetypenotallowed'] = 'Dateityp nicht erlaubt.';
+$string['invalidfieldtype'] = 'Ungültiger Feldtyp.';
+$string['invalidimageformat'] = 'Ungültiges Bild-Dateiformat. Verwende jpg, png oder gif.';
+$string['filenotimage'] = 'Die Datei ist kein Bild.';
+$string['invalidaudioformat'] = 'Ungültiges Audio-Dateiformat. Verwende mp3 oder wav.';
+$string['invalidvideoformat'] = 'Ungültiges Video-Dateiformat. Verwende mp4 oder webm.';
+$string['couldnotsave'] = 'Konnte die Datei nicht speichern.';
+$string['couldnotcopy'] = 'Konnte die Datei nicht kopieren.';
+
+// Welcome messages.
+$string['welcomeheader'] = 'Willkommen in der Welt von H5P!';
+$string['welcomegettingstarted'] = 'Um mit H5P und Moodle loszulegen, befindet sich hier ein <a {$a->moodle_tutorial}>Tutorial</a> und es gibt<a {$a->example_content}>Beispielinhalte</a> auf H5P.org als Inspiration.';
+$string['welcomecommunity'] = 'Wir hoffen, dass Ihnen H5P gefällt und bieten die Möglichkeit, im <a {$a->forums}>Forum</a> und im Chat-Room <a {$a->gitter}>H5P bei Gitter</a> aktiv zu werden.';
+$string['welcomecontactus'] = 'Für Feedback bitte nicht zögern, uns zu <a {$a}>kontaktieren</a>. Wir nehmen Feedback sehr ernst und bemühen uns, H5P jeden Tag besser zu machen!';
+
+// Licensing.
+$string['copyrightinfo'] = 'Urheberrechtsinformationen';
+$string['years'] = 'Jahr(e)';
+$string['undisclosed'] = 'Unbestimmt';
+$string['attribution'] = 'Namensnennung 4.0 (CC BY)';
+$string['attributionsa'] = 'Namensnennung-Weitergabe unter gleichen Bedingungen 4.0 (CC BY-SA)';
+$string['attributionnd'] = 'Namensnennung-KeineBearbeitung 4.0 (CC BY-ND)';
+$string['attributionnc'] = 'Namensnennung-NichtKommerziell 4.0 (CC BY-NC)';
+$string['attributionncsa'] = 'Namensnennung-NichtKommerziell-Weitergabe unter gleichen Bedingungen 4.0 (CC BY-NC-SA)';
+$string['attributionncnd'] = 'Namensnennung-NichtKommerziell-KeineBearbeitung 4.0 (CC BY-NC-ND)';
+$string['gpl'] = 'General Public License v3';
+$string['pd'] = 'Gemeingut';
+$string['pddl'] = 'Gemeingut Einsatz und Lizenz';
+$string['pdm'] = 'Gemeingut Zeichen';
+$string['copyrightstring'] = 'Urheberrecht';
+$string['by'] = 'by';
+$string['showmore'] = 'Show more';
+$string['showless'] = 'Show less';
+$string['sublevel'] = 'Sublevel';
+$string['noversionattribution'] = 'Attribution';
+$string['noversionattributionsa'] = 'Attribution-ShareAlike';
+$string['noversionattributionnd'] = 'Attribution-NoDerivs';
+$string['noversionattributionnc'] = 'Attribution-NonCommercial';
+$string['noversionattributionncsa'] = 'Attribution-NonCommercial-ShareAlike';
+$string['noversionattributionncnd'] = 'Attribution-NonCommercial-NoDerivs';
+$string['licenseCC40'] = '4.0 International';
+$string['licenseCC30'] = '3.0 Unported';
+$string['licenseCC25'] = '2.5 Generic';
+$string['licenseCC20'] = '2.0 Generic';
+$string['licenseCC10'] = '1.0 Generic';
+$string['licenseGPL'] = 'General Public License';
+$string['licenseV3'] = 'Version 3';
+$string['licenseV2'] = 'Version 2';
+$string['licenseV1'] = 'Version 1';
+$string['licenseCC010'] = 'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication';
+$string['licenseCC010U'] = 'CC0 1.0 Universal';
+$string['licenseversion'] = 'License Version';
diff --git a/mod/hvp/lang/en/hvp.php b/mod/hvp/lang/en/hvp.php
new file mode 100644
index 0000000..59bdaa5
--- /dev/null
+++ b/mod/hvp/lang/en/hvp.php
@@ -0,0 +1,333 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+$string['modulename'] = 'Interactive Content';
+$string['modulename_help'] = 'The H5P activity module enables you to create interactive content such as Interactive Videos, Question Sets, Drag and Drop Questions, Multi-Choice Questions, Presentations and much more.
+
+In addition to being an authoring tool for rich content, H5P enables you to import and export H5P files for effective reuse and sharing of content.
+
+User interactions and scores are tracked using xAPI and are available through the Moodle Gradebook.
+
+You add interactive H5P content by creating content using the built-in authoring tool or uploading H5P files found on other H5P enabled sites.';
+$string['modulename_link'] = 'https://h5p.org/moodle-more-help';
+$string['modulenameplural'] = 'Interactive Content';
+$string['pluginadministration'] = 'H5P';
+$string['pluginname'] = 'H5P';
+$string['intro'] = 'Introduction';
+$string['h5pfile'] = 'H5P File';
+$string['fullscreen'] = 'Fullscreen';
+$string['disablefullscreen'] = 'Disable fullscreen';
+$string['download'] = 'Download';
+$string['copyright'] = 'Rights of use';
+$string['embed'] = 'Embed';
+$string['showadvanced'] = 'Show advanced';
+$string['hideadvanced'] = 'Hide advanced';
+$string['resizescript'] = 'Include this script on your website if you want dynamic sizing of the embedded content:';
+$string['size'] = 'Size';
+$string['close'] = 'Close';
+$string['title'] = 'Title';
+$string['author'] = 'Author';
+$string['year'] = 'Year';
+$string['source'] = 'Source';
+$string['license'] = 'License';
+$string['thumbnail'] = 'Thumbnail';
+$string['nocopyright'] = 'No copyright information available for this content.';
+$string['downloadtitle'] = 'Download this content as a H5P file.';
+$string['copyrighttitle'] = 'View copyright information for this content.';
+$string['embedtitle'] = 'View the embed code for this content.';
+$string['h5ptitle'] = 'Visit H5P.org to check out more cool content.';
+$string['contentchanged'] = 'This content has changed since you last used it.';
+$string['startingover'] = "You'll be starting over.";
+$string['confirmdialogheader'] = 'Confirm action';
+$string['confirmdialogbody'] = 'Please confirm that you wish to proceed. This action is not reversible.';
+$string['cancellabel'] = 'Cancel';
+$string['confirmlabel'] = 'Confirm';
+$string['noh5ps'] = 'There\'s no interactive content available for this course.';
+
+$string['lookforupdates'] = 'Look for H5P updates';
+$string['updatelibraries'] = 'Update All Libraries';
+$string['removetmpfiles'] = 'Remove old H5P temporary files';
+$string['removeoldlogentries'] = 'Remove old H5P log entries';
+
+// Admin settings.
+$string['displayoptionnevershow'] = 'Never show';
+$string['displayoptionalwaysshow'] = 'Always show';
+$string['displayoptionpermissions'] = 'Show only if user has permissions to export H5P';
+$string['displayoptionauthoron'] = 'Controlled by author, default is on';
+$string['displayoptionauthoroff'] = 'Controlled by author, default is off';
+$string['displayoptions'] = 'Display Options';
+$string['enableframe'] = 'Display action bar and frame';
+$string['enabledownload'] = 'Download button';
+$string['enableembed'] = 'Embed button';
+$string['enablecopyright'] = 'Copyright button';
+$string['enableabout'] = 'About H5P button';
+$string['hubsettingsheader'] = 'Content Types';
+$string['enablehublabel'] = 'Use H5P Hub';
+$string['disablehubdescription'] = "It's strongly encouraged to keep this option enabled. The H5P Hub provides an easy interface for getting new content types and keeping existing content types up to date. In the future, it will also make it easier to share and reuse content. If this option is disabled you'll have to install and update content types through file upload forms.";
+$string['empty'] = 'Empty';
+$string['reveal'] = 'Reveal';
+$string['hide'] = 'Hide';
+$string['sitekey'] = 'Site Key';
+$string['sitekeydescription'] = 'The site key is a secret that uniquely identifies this site with the Hub.';
+
+$string['sendusagestatistics'] = 'Contribute usage statistics';
+$string['sendusagestatistics_help'] = 'Usage statistics numbers will automatically be reported to help the developers better understand how H5P is used and to determine potential areas of improvement.';
+$string['enablesavecontentstate'] = 'Save content state';
+$string['enablesavecontentstate_help'] = 'Automatically save the current state of interactive content for each user. This means that the user may pick up where he left off.';
+$string['contentstatefrequency'] = 'Save content state frequency';
+$string['contentstatefrequency_help'] = 'In seconds, how often do you wish the user to auto save their progress. Increase this number if you\'re having issues with many ajax requests';
+$string['enabledlrscontenttypes'] = 'Enable LRS dependent content types';
+$string['enabledlrscontenttypes_help'] = 'Makes it possible to use content types that rely upon a Learning Record Store to function properly, like the Questionnaire content type.';
+
+// Admin menu.
+$string['contenttypecacheheader'] = 'Content Type Cache';
+$string['settings'] = 'H5P Settings';
+$string['libraries'] = 'H5P Libraries';
+
+// Content type cache section.
+$string['ctcacheconnectionfailed'] = "Couldn't communicate with the H5P Hub. Please try again later.";
+$string['ctcachenolibraries'] = 'No content types were received from the H5P Hub. Please try again later.';
+$string['ctcachesuccess'] = 'Library cache was successfully updated!';
+$string['ctcachelastupdatelabel'] = 'Last update';
+$string['ctcachebuttonlabel'] = 'Update content type cache';
+$string['ctcacheneverupdated'] = 'Never';
+$string['ctcachetaskname'] = 'Update content type cache';
+$string['ctcachedescription'] = 'Making sure the content type cache is up to date will ensure that you can view, download and use the latest libraries. This is different from updating the libraries themselves.';
+
+// Upload libraries section.
+$string['uploadlibraries'] = 'Upload Libraries';
+$string['options'] = 'Options';
+$string['onlyupdate'] = 'Only update existing libraries';
+$string['disablefileextensioncheck'] = 'Disable file extension check';
+$string['disablefileextensioncheckwarning'] = "Warning! Disabling the file extension check may have security implications as it allows for uploading of php files. That in turn could make it possible for attackers to execute malicious code on your site. Please make sure you know exactly what you're uploading.";
+$string['upload'] = 'Upload';
+
+// Installed libraries section.
+$string['installedlibraries'] = 'Installed Libraries';
+$string['invalidtoken'] = 'Invalid security token.';
+$string['missingparameters'] = 'Missing parameters';
+$string['nocontenttype'] = 'No content type was specified.';
+$string['invalidcontenttype'] = 'The chosen content type is invalid.';
+$string['installdenied'] = 'You do not have permission to install content types. Contact the administrator of your site.';
+$string['downloadfailed'] = 'Downloading the requested library failed.';
+$string['validationfailed'] = 'The requested H5P was not valid';
+$string['validatingh5pfailed'] = 'Validating h5p package failed.';
+
+// H5P library list headers on admin page.
+$string['librarylisttitle'] = 'Title';
+$string['librarylistrestricted'] = 'Restricted';
+$string['librarylistinstances'] = 'Instances';
+$string['librarylistinstancedependencies'] = 'Instance dependencies';
+$string['librarylistlibrarydependencies'] = 'Library dependencies';
+$string['librarylistactions'] = 'Actions';
+
+// H5P library page labels.
+$string['addlibraries'] = 'Add libraries';
+$string['installedlibraries'] = 'Installed libraries';
+$string['notapplicable'] = 'N/A';
+$string['upgradelibrarycontent'] = 'Upgrade library content';
+
+// Upgrade H5P content page.
+$string['upgrade'] = 'Upgrade H5P';
+$string['upgradeheading'] = 'Upgrade {$a} content';
+$string['upgradenoavailableupgrades'] = 'There are no available upgrades for this library.';
+$string['enablejavascript'] = 'Please enable JavaScript.';
+$string['upgrademessage'] = 'You are about to upgrade {$a} content instance(s). Please select upgrade version.';
+$string['upgradeinprogress'] = 'Upgrading to %ver...';
+$string['upgradeerror'] = 'An error occurred while processing parameters:';
+$string['upgradeerrordata'] = 'Could not load data for library %lib.';
+$string['upgradeerrorscript'] = 'Could not load upgrades script for %lib.';
+$string['upgradeerrorcontent'] = 'Could not upgrade content %id:';
+$string['upgradeerrorparamsbroken'] = 'Parameters are broken.';
+$string['upgradedone'] = 'You have successfully upgraded {$a} content instance(s).';
+$string['upgradereturn'] = 'Return';
+$string['upgradenothingtodo'] = "There's no content instances to upgrade.";
+$string['upgradebuttonlabel'] = 'Upgrade';
+$string['upgradeinvalidtoken'] = 'Error: Invalid security token!';
+$string['upgradelibrarymissing'] = 'Error: Your library is missing!';
+
+// Results / report page.
+$string['user'] = 'User';
+$string['score'] = 'Score';
+$string['maxscore'] = 'Maximum Score';
+$string['finished'] = 'Finished';
+$string['loadingdata'] = 'Loading data.';
+$string['ajaxfailed'] = 'Failed to load data.';
+$string['nodata'] = "There's no data available that matches your criteria.";
+$string['currentpage'] = 'Page $current of $total';
+$string['nextpage'] = 'Next page';
+$string['previouspage'] = 'Previous page';
+$string['search'] = 'Search';
+$string['empty'] = 'No results available';
+$string['viewreportlabel'] = 'Report';
+$string['dataviewreportlabel'] = 'View Answers';
+$string['invalidxapiresult'] = 'No xAPI results were found for the given content and user id combination';
+$string['reportnotsupported'] = 'Not supported';
+$string['reportingscorelabel'] = 'Score:';
+$string['reportingscaledscorelabel'] = 'Gradebook score:';
+$string['reportingscoredelimiter'] = 'out of';
+$string['reportingscaledscoredelimiter'] = ',';
+
+// Editor.
+$string['javascriptloading'] = 'Waiting for JavaScript...';
+$string['action'] = 'Action';
+$string['upload'] = 'Upload';
+$string['create'] = 'Create';
+$string['editor'] = 'Editor';
+
+$string['invalidlibrary'] = 'Invalid library';
+$string['nosuchlibrary'] = 'No such library';
+$string['noparameters'] = 'No parameters';
+$string['invalidparameters'] = 'Invalid Parameters';
+$string['missingcontentuserdata'] = 'Error: Could not find content user data';
+
+$string['maximumgrade'] = 'Maximum grade';
+$string['maximumgradeerror'] = 'Please enter a valid positive integer as the max points available for this activity';
+
+// Capabilities.
+$string['hvp:addinstance'] = 'Add a new H5P Activity';
+$string['hvp:restrictlibraries'] = 'Restrict a H5P library';
+$string['hvp:updatelibraries'] = 'Update the version of an H5P library';
+$string['hvp:userestrictedlibraries'] = 'Use restricted H5P libraries';
+$string['hvp:savecontentuserdata'] = 'Save H5P content user data';
+$string['hvp:saveresults'] = 'Save result for H5P content';
+$string['hvp:viewresults'] = 'View result for own questions in course';
+$string['hvp:viewallresults'] = 'View result for all users in course';
+$string['hvp:getcachedassets'] = 'Get cached H5P content assets';
+$string['hvp:getcontent'] = 'Get/view content of H5P file in course';
+$string['hvp:getexport'] = 'Get export file from H5P in course';
+$string['hvp:installrecommendedh5plibraries'] = 'Install recommended H5P libraries';
+
+// Capabilities error messages.
+$string['nopermissiontoupgrade'] = 'You do not have permission to upgrade libraries.';
+$string['nopermissiontorestrict'] = 'You do not have permission to restrict libraries.';
+$string['nopermissiontosavecontentuserdata'] = 'You do not have permission to save content user data.';
+$string['nopermissiontosaveresult'] = 'You do not have permission to save result for this content.';
+$string['nopermissiontoviewresult'] = 'You do not have permission to view results for this content.';
+
+// Editor translations.
+$string['noziparchive'] = 'Your PHP version does not support ZipArchive.';
+$string['noextension'] = 'The file you uploaded is not a valid HTML5 Package (It does not have the .h5p file extension)';
+$string['nounzip'] = 'The file you uploaded is not a valid HTML5 Package (We are unable to unzip it)';
+$string['noparse'] = 'Could not parse the main h5p.json file';
+$string['nojson'] = 'The main h5p.json file is not valid';
+$string['invalidcontentfolder'] = 'Invalid content folder';
+$string['nocontent'] = 'Could not find or parse the content.json file';
+$string['librarydirectoryerror'] = 'Library directory name must match machineName or machineName-majorVersion.minorVersion (from library.json). (Directory: {$a->%directoryName} , machineName: {$a->%machineName}, majorVersion: {$a->%majorVersion}, minorVersion: {$a->%minorVersion})';
+$string['missingcontentfolder'] = 'A valid content folder is missing';
+$string['invalidmainjson'] = 'A valid main h5p.json file is missing';
+$string['missinglibrary'] = 'Missing required library {$a->@library}';
+$string['missinguploadpermissions'] = "Note that the libraries may exist in the file you uploaded, but you're not allowed to upload new libraries. Contact the site administrator about this.";
+$string['invalidlibraryname'] = 'Invalid library name: {$a->%name}';
+$string['missinglibraryjson'] = 'Could not find library.json file with valid json format for library {$a->%name}';
+$string['invalidsemanticsjson'] = 'Invalid semantics.json file has been included in the library {$a->%name}';
+$string['invalidlanguagefile'] = 'Invalid language file {$a->%file} in library {$a->%library}';
+$string['invalidlanguagefile2'] = 'Invalid language file {$a->%languageFile} has been included in the library {$a->%name}';
+$string['missinglibraryfile'] = 'The file "{$a->%file}" is missing from library: "{$a->%name}"';
+$string['missingcoreversion'] = 'The system was unable to install the <em>{$a->%component}</em> component from the package, it requires a newer version of the H5P plugin. This site is currently running version {$a->%current}, whereas the required version is {$a->%required} or higher. You should consider upgrading and then try again.';
+$string['invalidlibrarydataboolean'] = 'Invalid data provided for {$a->%property} in {$a->%library}. Boolean expected.';
+$string['invalidlibrarydata'] = 'Invalid data provided for {$a->%property} in {$a->%library}';
+$string['invalidlibraryproperty'] = 'Can\'t read the property {$a->%property} in {$a->%library}';
+$string['missinglibraryproperty'] = 'The required property {$a->%property} is missing from {$a->%library}';
+$string['invalidlibraryoption'] = 'Illegal option {$a->%option} in {$a->%library}';
+$string['addedandupdatelibraries'] = 'Added {$a->%new} new H5P libraries and updated {$a->%old} old.';
+$string['addednewlibraries'] = 'Added {$a->%new} new H5P libraries.';
+$string['updatedlibraries'] = 'Updated {$a->%old} H5P libraries.';
+$string['missingdependency'] = 'Missing dependency {$a->@dep} required by {$a->@lib}.';
+$string['invalidstring'] = 'Provided string is not valid according to regexp in semantics. (value: \"{$a->%value}\", regexp: \"{$a->%regexp}\")';
+$string['invalidfile'] = 'File "{$a->%filename}" not allowed. Only files with the following extensions are allowed: {$a->%files-allowed}.';
+$string['invalidmultiselectoption'] = 'Invalid selected option in multi-select.';
+$string['invalidselectoption'] = 'Invalid selected option in select.';
+$string['invalidsemanticstype'] = 'H5P internal error: unknown content type "{$a->@type}" in semantics. Removing content!';
+$string['unabletocreatedir'] = 'Unable to create directory.';
+$string['unabletogetfieldtype'] = 'Unable to get field type.';
+$string['filetypenotallowed'] = 'File type isn\'t allowed.';
+$string['invalidfieldtype'] = 'Invalid field type.';
+$string['invalidimageformat'] = 'Invalid image file format. Use jpg, png or gif.';
+$string['filenotimage'] = 'File is not an image.';
+$string['invalidaudioformat'] = 'Invalid audio file format. Use mp3 or wav.';
+$string['invalidvideoformat'] = 'Invalid video file format. Use mp4 or webm.';
+$string['couldnotsave'] = 'Could not save file.';
+$string['couldnotcopy'] = 'Could not copy file.';
+
+// Welcome messages.
+$string['welcomeheader'] = 'Welcome to the world of H5P!';
+$string['welcomegettingstarted'] = 'To get started with H5P and Moodle take a look at our <a {$a->moodle_tutorial}>tutorial</a> and check out the <a {$a->example_content}>example content</a> at H5P.org for inspiration.';
+$string['welcomecommunity'] = 'We hope you will enjoy H5P and get engaged in our growing community through our <a {$a->forums}>forums</a> and chat room <a {$a->gitter}>H5P at Gitter</a>';
+$string['welcomecontactus'] = 'If you have any feedback, don\'t hesitate to <a {$a}>contact us</a>. We take feedback very seriously and are dedicated to making H5P better every day!';
+$string['missingmbstring'] = 'The mbstring PHP extension is not loaded. H5P need this to function properly';
+$string['wrongversion'] = 'The version of the H5P library {$a->%machineName} used in this content is not valid. Content contains {$a->%contentLibrary}, but it should be {$a->%semanticsLibrary}.';
+$string['invalidlibrary'] = 'The H5P library {$a->%library} used in the content is not valid';
+
+// Setup errors.
+$string['oldphpversion'] = 'Your PHP version is outdated. H5P requires version 5.2 to function properly. Version 5.6 or later is recommended.';
+$string['maxuploadsizetoosmall'] = 'Your PHP max upload size is quite small. With your current setup, you may not upload files larger than {$a->%number} MB. This might be a problem when trying to upload H5Ps, images and videos. Please consider to increase it to more than 5MB.';
+$string['maxpostsizetoosmall'] = 'Your PHP max post size is quite small. With your current setup, you may not upload files larger than {$a->%number} MB. This might be a problem when trying to upload H5Ps, images and videos. Please consider to increase it to more than 5MB';
+$string['sslnotenabled'] = 'Your server does not have SSL enabled. SSL should be enabled to ensure a secure connection with the H5P hub.';
+$string['hubcommunicationdisabled'] = 'H5P hub communication has been disabled because one or more H5P requirements failed.';
+$string['reviseserversetupandretry'] = 'When you have revised your server setup you may re-enable H5P hub communication in H5P Settings.';
+$string['disablehubconfirmationmsg'] = 'Do you still want to enable the hub ?';
+$string['nowriteaccess'] = 'A problem with the server write access was detected. Please make sure that your server can write to your data folder.';
+$string['uploadsizelargerthanpostsize'] = 'Your PHP max upload size is bigger than your max post size. This is known to cause issues in some installations.';
+$string['sitecouldnotberegistered'] = 'Site could not be registered with the hub. Please contact your site administrator.';
+$string['hubisdisableduploadlibraries'] = 'The H5P Hub has been disabled until this problem can be resolved. You may still upload libraries through the "H5P Libraries" page.';
+$string['successfullyregisteredwithhub'] = 'Your site was successfully registered with the H5P Hub.';
+$string['sitekeyregistered'] = 'You have been provided a unique key that identifies you with the Hub when receiving new updates. The key is available for viewing in the "H5P Settings" page.';
+
+// Ajax messages.
+$string['hubisdisabled'] = 'The hub is disabled. You can re-enable it in the H5P settings.';
+$string['invalidh5ppost'] = 'Could not get posted H5P.';
+$string['filenotfoundonserver'] = 'File not found on server. Check file upload settings.';
+$string['failedtodownloadh5p'] = 'Failed to download the requested H5P.';
+$string['postmessagerequired'] = 'A post message is required to access the given endpoint';
+
+// Licensing.
+$string['copyrightinfo'] = 'Copyright information';
+$string['years'] = 'Year(s)';
+$string['undisclosed'] = 'Undisclosed';
+$string['attribution'] = 'Attribution 4.0';
+$string['attributionsa'] = 'Attribution-ShareAlike 4.0';
+$string['attributionnd'] = 'Attribution-NoDerivs 4.0';
+$string['attributionnc'] = 'Attribution-NonCommercial 4.0';
+$string['attributionncsa'] = 'Attribution-NonCommercial-ShareAlike 4.0';
+$string['attributionncnd'] = 'Attribution-NonCommercial-NoDerivs 4.0';
+$string['gpl'] = 'General Public License v3';
+$string['pd'] = 'Public Domain';
+$string['pddl'] = 'Public Domain Dedication and Licence';
+$string['pdm'] = 'Public Domain Mark';
+$string['copyrightstring'] = 'Copyright';
+$string['by'] = 'by';
+$string['showmore'] = 'Show more';
+$string['showless'] = 'Show less';
+$string['sublevel'] = 'Sublevel';
+$string['noversionattribution'] = 'Attribution';
+$string['noversionattributionsa'] = 'Attribution-ShareAlike';
+$string['noversionattributionnd'] = 'Attribution-NoDerivs';
+$string['noversionattributionnc'] = 'Attribution-NonCommercial';
+$string['noversionattributionncsa'] = 'Attribution-NonCommercial-ShareAlike';
+$string['noversionattributionncnd'] = 'Attribution-NonCommercial-NoDerivs';
+$string['licenseCC40'] = '4.0 International';
+$string['licenseCC30'] = '3.0 Unported';
+$string['licenseCC25'] = '2.5 Generic';
+$string['licenseCC20'] = '2.0 Generic';
+$string['licenseCC10'] = '1.0 Generic';
+$string['licenseGPL'] = 'General Public License';
+$string['licenseV3'] = 'Version 3';
+$string['licenseV2'] = 'Version 2';
+$string['licenseV1'] = 'Version 1';
+$string['licenseCC010'] = 'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication';
+$string['licenseCC010U'] = 'CC0 1.0 Universal';
+$string['licenseversion'] = 'License Version';
diff --git a/mod/hvp/lang/fr/hvp.php b/mod/hvp/lang/fr/hvp.php
new file mode 100644
index 0000000..3039d8e
--- /dev/null
+++ b/mod/hvp/lang/fr/hvp.php
@@ -0,0 +1,278 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+$string['modulename'] = 'Contenu interactif';
+$string['modulename_help'] = 'L\'activité H5P vous permet de créer des contenus interactifs tels que des vidéos interactives, des jeux de questions, des questions en glisser/déposer, des QCM, des présentations et bien plus encore.
+
+En plus d\'être un outil auteur pour générer des contenus riches, H5P vous permet d\'importer ou d\'exporter vos ressources pour les réutiliser et les partager.
+
+Les interactions utilisateur et les scores sont gérés par xAPI et disponibles dans le carnet de notes de moodle.
+
+Vous pouvez ajouter des contenus interactifs H5P en uploadant des fichiers avec l\'extension .h5p. Vous pouvez créer et télécharger de tels fichiers sur le site h5p.org';
+$string['modulename_link'] = 'https://h5p.org/moodle-more-help';
+$string['modulenameplural'] = 'Contenus interactifs';
+$string['pluginadministration'] = 'H5P';
+$string['pluginname'] = 'H5P';
+$string['intro'] = 'Introduction';
+$string['h5pfile'] = 'Fichier H5P';
+$string['fullscreen'] = 'Plein écran';
+$string['disablefullscreen'] = 'Désactiver le plein écran';
+$string['download'] = 'Télécharger';
+$string['copyright'] = 'Droits d\'utilisation';
+$string['embed'] = 'Embed';
+$string['showadvanced'] = 'Afficher les options avancées';
+$string['hideadvanced'] = 'Masquer les options avancées';
+$string['resizescript'] = 'Incluez ce script dans votre site web si vous voulez bénéficier du redimensionnement dynamique de votre contenu embarqué:';
+$string['size'] = 'Taille';
+$string['close'] = 'Fermer';
+$string['title'] = 'Titre';
+$string['author'] = 'Auteur';
+$string['year'] = 'Année';
+$string['source'] = 'Source';
+$string['license'] = 'Licence';
+$string['thumbnail'] = 'Miniatures';
+$string['nocopyright'] = 'Aucune information de copyright disponible pour ce contenu.';
+$string['downloadtitle'] = 'Télécharger ce contenu au format H5P.';
+$string['copyrighttitle'] = 'Voir les informations de droit d\'auteur pour ce contenu.';
+$string['embedtitle'] = 'Voir le code embarqué pour ce contenu.';
+$string['h5ptitle'] = 'Visitez H5P.org pour accéder à d\'autres ressources aussi cools.';
+$string['contentchanged'] = 'Ce contenu a changé depuis votre dernière utilisation.';
+$string['startingover'] = "Vous allez recommencer.";
+$string['confirmdialogheader'] = 'Confirmez l\'action';
+$string['confirmdialogbody'] = 'Merci de confirmer votre action. Cette opération est irréversible.';
+$string['cancellabel'] = 'Annuler';
+$string['confirmlabel'] = 'Confirmer';
+$string['noh5ps'] = 'Il n\'y a aucune ressource interactive disponible pour ce cours.';
+
+$string['lookforupdates'] = 'Rechercher des mises à jour H5P';
+$string['removetmpfiles'] = 'Supprimer les anciens fichiers temporaires H5P';
+$string['removeoldlogentries'] = 'Supprimer les anciennes entrées de logs H5P';
+
+// Admin settings.
+$string['displayoptionnevershow'] = 'Never show';
+$string['displayoptionalwaysshow'] = 'Always show';
+$string['displayoptionpermissions'] = 'Show only if user has permissions to export H5P';
+$string['displayoptionauthoron'] = 'Controlled by author, default is on';
+$string['displayoptionauthoroff'] = 'Controlled by author, default is off';
+$string['displayoptions'] = 'Afficher les options';
+$string['enableframe'] = 'Afficher la barre de menu des actions';
+$string['enabledownload'] = 'Bouton de téléchargement';
+$string['enableembed'] = 'Bouton d\'intégration';
+$string['enablecopyright'] = 'Bouton de copyright';
+$string['enableabout'] = 'Bouton à propos de H5P';
+
+$string['enablesavecontentstate'] = 'Sauvegarder l\'état du contenu actuel';
+$string['enablesavecontentstate_help'] = 'Sauvegarder automatiquement l\'état actuel du contenu interactif pour chaque utilisateur. Ceci signifie que l\'utilisateur pourra reprendre là où il en est resté la fois précédente.';
+$string['contentstatefrequency'] = 'Fréquence des sauvegardes d\'état de vos contenus';
+$string['contentstatefrequency_help'] = 'Fréquence des sauvegardes automatiques de la progression des utilisateurs en secondes. Augmentez ce nombre si vous rencontrez des problèmes avec des requêtes ajax';
+
+// Admin menu.
+$string['settings'] = 'Paramètres H5P';
+$string['libraries'] = 'Bibliothèques H5P';
+
+// Upload libraries section.
+$string['uploadlibraries'] = 'Uploader les bibliothèques';
+$string['options'] = 'Options';
+$string['onlyupdate'] = 'Ne mettre à jour que les bibliothèques existantes';
+$string['disablefileextensioncheck'] = 'Désactiver la vérification des extensions de fichiers';
+$string['disablefileextensioncheckwarning'] = "Attention! Désactiver la vérification des extensions de fichiers peut entrainer des failles de sécurité puisqu\'il est alors possible de télécharger des fichiers php. Ceci permettrait à un attaquant d\'executer du code malicieux sur vos site. Vérifiez bien que vous savez ce que vous uploadez.";
+$string['upload'] = 'Uploader';
+
+// Installed libraries section.
+$string['installedlibraries'] = 'Bibliothèques installées';
+$string['invalidtoken'] = 'Token de sécurité invalide.';
+$string['missingparameters'] = 'Paramètres manquants';
+
+// H5P library list headers on admin page.
+$string['librarylisttitle'] = 'Titre';
+$string['librarylistrestricted'] = 'Restreint';
+$string['librarylistinstances'] = 'Instances';
+$string['librarylistinstancedependencies'] = 'Dépendances d\'instance';
+$string['librarylistlibrarydependencies'] = 'Dépendances des bibliothèques';
+$string['librarylistactions'] = 'Actions';
+
+// H5P library page labels.
+$string['addlibraries'] = 'Ajouter des bibliothèques';
+$string['installedlibraries'] = 'Bibliothèques installées';
+$string['notapplicable'] = 'N/A';
+$string['upgradelibrarycontent'] = 'Mettre à jour les contenus des bibliothèques';
+
+// Upgrade H5P content page.
+$string['upgrade'] = 'Mettre à jour H5P';
+$string['upgradeheading'] = 'Mettre à jour le contenu {$a}';
+$string['upgradenoavailableupgrades'] = 'Il n\'y a aucune mise à jour disponible pour cette bibliothèque.';
+$string['enablejavascript'] = 'Merci d\'activer JavaScript.';
+$string['upgrademessage'] = 'Vous êtes sur le point de mettre à jour {$a} instance(s). Sélectionnez la version.';
+$string['upgradeinprogress'] = 'Mise à jour vers la version %ver en cours...';
+$string['upgradeerror'] = 'Une erreur est survenue durant l\'analyse des paramètres:';
+$string['upgradeerrordata'] = 'Impossible de charger les données pour la bibliothèque %lib.';
+$string['upgradeerrorscript'] = 'Impossible de charger les scripts de mise à jour pour %lib.';
+$string['upgradeerrorcontent'] = 'Impossible de mettre à jour le contenu %id:';
+$string['upgradeerrorparamsbroken'] = 'Les paramètres sont invalides.';
+$string['upgradedone'] = 'Vous avez mis à jour {$a} instance(s) avec succès.';
+$string['upgradereturn'] = 'Retour';
+$string['upgradenothingtodo'] = "Il n\'y a aucune instance à mettre à jour.";
+$string['upgradebuttonlabel'] = 'Mettre à jour';
+$string['upgradeinvalidtoken'] = 'Erreur : Token de sécruité invalide!';
+$string['upgradelibrarymissing'] = 'Erreur : Votre bibliothèque est manquante!';
+
+// Results / report page.
+$string['user'] = 'Utilisateur';
+$string['score'] = 'Score';
+$string['maxscore'] = 'Score Maximum';
+$string['finished'] = 'Terminé';
+$string['loadingdata'] = 'Chargement des données.';
+$string['ajaxfailed'] = 'Le chargement des données a échoué.';
+$string['nodata'] = "Il n\'y a aucune donnée correspondant à vos critères.";
+$string['currentpage'] = 'Page $current sur $total';
+$string['nextpage'] = 'Page suivante';
+$string['previouspage'] = 'Page précédente';
+$string['search'] = 'Rechercher';
+$string['empty'] = 'Aucun résultat disponible';
+$string['viewreportlabel'] = 'Report';
+$string['dataviewreportlabel'] = 'View Answers';
+$string['invalidxapiresult'] = 'No xAPI results were found for the given content and user id combination';
+$string['reportnotsupported'] = 'Not supported';
+$string['reportingscorelabel'] = 'Score:';
+$string['reportingscaledscorelabel'] = 'Gradebook score:';
+$string['reportingscoredelimiter'] = 'out of';
+$string['reportingscaledscoredelimiter'] = ',';
+
+// Editor.
+$string['javascriptloading'] = 'Chargement de JavaScript...';
+$string['action'] = 'Action';
+$string['upload'] = 'Uploader';
+$string['create'] = 'Créer';
+$string['editor'] = 'Editeur';
+
+$string['invalidlibrary'] = 'Bibliothèque invalide';
+$string['nosuchlibrary'] = 'Aucune bibliothèque de ce type';
+$string['noparameters'] = 'Pas de paramètres';
+$string['invalidparameters'] = 'Paramètres invalides';
+$string['missingcontentuserdata'] = 'Erreur : impossible de trouver les données utilisateur';
+
+$string['maximumgrade'] = 'Maximum grade';
+$string['maximumgradeerror'] = 'Please enter a valid positive integer as the max points available for this activity';
+
+// Capabilities.
+$string['hvp:addinstance'] = 'Ajouter une nouvelle activité H5P';
+$string['hvp:restrictlibraries'] = 'Restreindre une bibliothèque H5P';
+$string['hvp:updatelibraries'] = 'Mettre à jour la version d\'une bibliothèque H5P';
+$string['hvp:userestrictedlibraries'] = 'Utiliser des bibliothèques H5P restreintes';
+$string['hvp:savecontentuserdata'] = 'Sauvegarder les données utilisateur H5P';
+$string['hvp:saveresults'] = 'Sauvegarder les résultats';
+$string['hvp:viewresults'] = 'Visualiser les résultats';
+$string['hvp:viewallresults'] = 'View result for all users in course';
+$string['hvp:getcachedassets'] = 'Récupérer les assets mis en cache';
+$string['hvp:getcontent'] = 'Visualiser le contenu d\'un fichier H5P dans un cours';
+$string['hvp:getexport'] = 'Récupérer un fichier H5P dans un cours';
+
+// Capabilities error messages.
+$string['nopermissiontoupgrade'] = 'Vous n\'avez pas les droits pour mettre à jour les bibliothèques.';
+$string['nopermissiontorestrict'] = 'Vous n\'avez pas les droits pour restreindre les biliothèques.';
+$string['nopermissiontosavecontentuserdata'] = 'Vous n\'avez pas les droits pour sauvegarder les données utilisateur.';
+$string['nopermissiontosaveresult'] = 'Vous n\'avez pas les droits pour sauvegarder les résultats pour ce contenu.';
+$string['nopermissiontoviewresult'] = 'Vous n\'avez pas les droits pour visualiser les résultats de ce contenu.';
+
+// Editor translations.
+$string['noziparchive'] = 'Votre version de PHP ne supporte pas ZipArchive.';
+$string['noextension'] = 'Le fichier que vous avez uploadé n\'est pas un package HTML5 valide (il n\'a pas l\'extension .h5p)';
+$string['nounzip'] = 'Le fichier que vous avez uploadé n\'est pas un package HTML5 valide (impossible de le décompresser)';
+$string['noparse'] = 'Impossible de parser le fichier h5p.json';
+$string['nojson'] = 'Le fichier h5p.json n\'est pas valide';
+$string['invalidcontentfolder'] = 'Répertoire de contenu invalide';
+$string['nocontent'] = 'Impossible de trouver ou de parser le fichier content.json';
+$string['librarydirectoryerror'] = 'Le nom du répertoire des bibliothèques doit être de la forme machineName ou machineName-majorVersion.minorVersion (issue de library.json). (Répertoire: {$a->%directoryName} , machineName: {$a->%machineName}, majorVersion: {$a->%majorVersion}, minorVersion: {$a->%minorVersion})';
+$string['missingcontentfolder'] = 'Un répertoire valide de contenu est manquant';
+$string['invalidmainjson'] = 'Un fichier h5p.json valide est manquant';
+$string['missinglibrary'] = 'La bibliothèque requise {$a->@library} est manquante';
+$string['missinguploadpermissions'] = "Notez que les bibliothèques doivent exister dans le fichier uploadé, mais vous n\'avez pas autorisé l\'upload de nouvelles bibliothèques. Contactez votre administrateur.";
+$string['invalidlibraryname'] = 'Nom de bibliothèque non valide: {$a->%name}';
+$string['missinglibraryjson'] = 'Impossible de trouver le fichier library.json file avec un format json valide pour la bibliothèque {$a->%name}';
+$string['invalidsemanticsjson'] = 'Le fichier semantics.json inclu dans la bibliothèque {$a->%name} n\'est pas valide';
+$string['invalidlanguagefile'] = 'Le fichier de langue {$a->%file} de la bibliothèque {$a->%library} n\'est pas valide';
+$string['invalidlanguagefile2'] = 'Le fichier de langue {$a->%languageFile} inclu dans la bibliothèque {$a->%name} n\'est pas valide';
+$string['missinglibraryfile'] = 'Le fichier "{$a->%file}" de la bibliothèque "{$a->%name}" est manquant.';
+$string['missingcoreversion'] = 'Le système n\'est pas en mesure d\'installer le composant <em>{$a->%component}</em> depuis le package, ceci nécessite une version plus récente du plugin H5P. Ce site utilise actuellement la version {$a->%current}, alors que la version requise est {$a->%required} ou supérieur. Vous devriez faire une mise à jour et essayer à nouveau.';
+$string['invalidlibrarydataboolean'] = 'La donnée fournie pour la proriété {$a->%property} de la bibliothèque {$a->%library} n\'est pas valide. Booléen attendu.';
+$string['invalidlibrarydata'] = 'La donnée fournie pour la proriété {$a->%property} de la bibliothèque {$a->%library} n\'est pas valide';
+$string['invalidlibraryproperty'] = 'Impossible de lire la propriété {$a->%property} de la bibliothèque {$a->%library}';
+$string['missinglibraryproperty'] = 'La propriété requise {$a->%property} de la bibliothèque {$a->%library} est manquante';
+$string['invalidlibraryoption'] = 'L\'option {$a->%option} de la bibliothèque {$a->%library} n\'est pas autorisée';
+$string['addedandupdatelibraries'] = '{$a->%new} nouvelles bibliothèques H5P ont été ajoutées et {$a->%old} déjà existantes ont été mises à jour.';
+$string['addednewlibraries'] = '{$a->%new} nouvelles bibliothèques H5P ont été ajoutées.';
+$string['updatedlibraries'] = '{$a->%old} bibliothèques H5P ont été mises à jour.';
+$string['missingdependency'] = 'la dépendance {$a->@dep} requise par {$a->@lib} est manquante.';
+$string['invalidstring'] = 'La chaine fournie n\'est pas valide selon l\'expression régulière suivante : (value: \"{$a->%value}\", regexp: \"{$a->%regexp}\")';
+$string['invalidfile'] = 'Le fichier "{$a->%filename}" n\est pas autorisé. Seuls les fichiers avec les extensions suivantes sont autorisés : {$a->%files-allowed}.';
+$string['invalidmultiselectoption'] = 'éléments selectionnés dans un multi-select non valides.';
+$string['invalidselectoption'] = 'élément sélectionné dans un select non valide.';
+$string['invalidsemanticstype'] = 'Erreur interne H5P: Type de contenu "{$a->@type}" non valide. Supprimez ce contenu!';
+$string['invalidsemantics'] = 'La bibliothèque utilisée dans cette ressource n\'est pas valide';
+$string['unabletocreatedir'] = 'Impossible de créer le répertoire.';
+$string['unabletogetfieldtype'] = 'Impossible de récupérer le type de champ.';
+$string['filetypenotallowed'] = 'Type de fichier non autorisé.';
+$string['invalidfieldtype'] = 'Type de champ invalide.';
+$string['invalidimageformat'] = 'Format de fichier image non valide. Utilisez jpg, png ou gif.';
+$string['filenotimage'] = 'Ce fichier n\'est pas une image.';
+$string['invalidaudioformat'] = 'Format de fichier audio non valide. Utilisez mp3 ou wav.';
+$string['invalidvideoformat'] = 'Format de fichier vidéo non valide. Utilisez mp4 ou webm.';
+$string['couldnotsave'] = 'Impossible de sauvegarder le fichier.';
+$string['couldnotcopy'] = 'Impossible de copier le fichier.';
+
+// Welcome messages.
+$string['welcomeheader'] = 'Bienvenue dans le monde H5P!';
+$string['welcomegettingstarted'] = 'Pour démarrer avec H5P et Moodle, consultez nos tutoriels <a {$a->moodle_tutorial}>tutorial</a> et testez <a {$a->example_content}>nos exemples</a> sur le site H5P.org pour vous en inspirer.';
+$string['welcomecommunity'] = 'Nous espérons que vous allez apprécier H5P et rejoindre notre communauté en constante augmentation au travers de nos <a {$a->forums}>forums</a> et notre chat <a {$a->gitter}>H5P sur Gitter</a>';
+$string['welcomecontactus'] = 'Si vous avez des suggestions, n\'hésitez pas à <a {$a}>nous contacter</a>. Nous prenons toutes les suggestions très sérieuse en considération pour rendre H5P meilleur chaque jour !';
+
+// Licensing.
+$string['copyrightinfo'] = 'Information copyright';
+$string['years'] = 'Année(s)';
+$string['undisclosed'] = 'Masqué';
+$string['attribution'] = 'Attribution 4.0';
+$string['attributionsa'] = 'Attribution - Partage dans les Mêmes Conditions 4.0';
+$string['attributionnd'] = 'Attribution - Pas de Modification 4.0';
+$string['attributionnc'] = 'Attribution - Non Commercial 4.0';
+$string['attributionncsa'] = 'Attribution - Non Commercial- Partage dans les Mêmes Conditions 4.0';
+$string['attributionncnd'] = 'Attribution - Non Commercial- Non Commercial 4.0';
+$string['gpl'] = 'Licence GPL v3';
+$string['pd'] = 'Domaine Public';
+$string['pddl'] = 'Transfert dans le Domaine Public et Licence';
+$string['pdm'] = 'Marque du domaine public';
+$string['copyrightstring'] = 'Copyright';
+$string['by'] = 'by';
+$string['showmore'] = 'Show more';
+$string['showless'] = 'Show less';
+$string['sublevel'] = 'Sublevel';
+$string['noversionattribution'] = 'Attribution';
+$string['noversionattributionsa'] = 'Attribution-ShareAlike';
+$string['noversionattributionnd'] = 'Attribution-NoDerivs';
+$string['noversionattributionnc'] = 'Attribution-NonCommercial';
+$string['noversionattributionncsa'] = 'Attribution-NonCommercial-ShareAlike';
+$string['noversionattributionncnd'] = 'Attribution-NonCommercial-NoDerivs';
+$string['licenseCC40'] = '4.0 International';
+$string['licenseCC30'] = '3.0 Unported';
+$string['licenseCC25'] = '2.5 Generic';
+$string['licenseCC20'] = '2.0 Generic';
+$string['licenseCC10'] = '1.0 Generic';
+$string['licenseGPL'] = 'General Public License';
+$string['licenseV3'] = 'Version 3';
+$string['licenseV2'] = 'Version 2';
+$string['licenseV1'] = 'Version 1';
+$string['licenseCC010'] = 'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication';
+$string['licenseCC010U'] = 'CC0 1.0 Universal';
+$string['licenseversion'] = 'License Version';
diff --git a/mod/hvp/lang/he/hvp.php b/mod/hvp/lang/he/hvp.php
new file mode 100644
index 0000000..6684516
--- /dev/null
+++ b/mod/hvp/lang/he/hvp.php
@@ -0,0 +1,274 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+$string['modulename'] = 'תוכן אינטראקטיבי';
+$string['modulename_help'] = 'פעילות H5P מאפשר יצירה של תוכן דינמי ואינטראקטיבי כגון: סרטוני וידאו משובצים בשאלות מסוגים שונים, מצגות הכוללות שאלות מגוונות, משחקוני למידה, שאלות גרירה למיניהן, רב־בררה, ועוד סוגים רבים...
+בנוסף, ניתן ליבא וליצא חבילות לומדה לשימוש חוזר בתכנים קיימים.  הפעילות מבצעת מקב למידה מבוסס על תקן xAPI ומדווחת ציונים לגליון הציונים של ה Moodle.
+ניתן להעלות קבצי h5p ממאגר עצמי הלמידה (OER) של אתר h5p.org';
+$string['modulename_link'] = 'https://h5p.org/moodle-more-help';
+$string['modulenameplural'] = 'תוכן אינטראקטיבי';
+$string['pluginadministration'] = 'H5P';
+$string['pluginname'] = 'H5P';
+$string['intro'] = 'הנחיה לתלמידים';
+$string['h5pfile'] = 'קובץ H5P';
+$string['fullscreen'] = 'מסך־מלא';
+$string['disablefullscreen'] = 'תצוגה רגילה';
+$string['download'] = 'הורדה';
+$string['copyright'] = 'זכויות יוצרים';
+$string['embed'] = 'שיבוץ';
+$string['showadvanced'] = 'תצוגת תכונות מתקדמות';
+$string['hideadvanced'] = 'הסתרת תכונות מתקדמות';
+$string['resizescript'] = 'Include this script on your website if you want dynamic sizing of the embedded content:';
+$string['size'] = 'גודל';
+$string['close'] = 'סגירה';
+$string['title'] = 'כותרת';
+$string['author'] = 'יוצר/ת';
+$string['year'] = 'שנה';
+$string['source'] = 'מקור';
+$string['license'] = 'רשיון';
+$string['thumbnail'] = 'תמונה ממוזערת';
+$string['nocopyright'] = 'לא קיים מידע אודות זכויות יוצרים עבור תוכן זה.';
+$string['downloadtitle'] = 'הורדת תוכן זה כקובץ H5P.';
+$string['copyrighttitle'] = 'צפיה בזכויות היוצרים של תוכן זה.';
+$string['embedtitle'] = 'תצוגת קוד השיבוץ של תוכן זה.';
+$string['h5ptitle'] = 'בקרו באתר H5P.org לחיפוש ואיחזור של תוכן נוסף.';
+$string['contentchanged'] = 'התוכן של רכיב זה עודכן מאז השימוש האחרון שלכם בפעילות זו.';
+$string['startingover'] = "הפעילות תוצג מההתחלה.";
+$string['confirmdialogheader'] = 'אישור פעולה';
+$string['confirmdialogbody'] = 'יש לאשר פעולה זו. שימו לב! לא ניתן יהיה לחזור למצב הנוכחי.';
+$string['cancellabel'] = 'ביטול';
+$string['confirmlabel'] = 'אישור';
+$string['noh5ps'] = 'לא קיים תוכן H5P אינטראקטיבי בקורס זה.';
+
+$string['lookforupdates'] = 'Look for H5P updates';
+$string['removetmpfiles'] = 'Remove old H5P temporary files';
+$string['removeoldlogentries'] = 'Remove old H5P log entries';
+
+// Admin settings.
+$string['displayoptionnevershow'] = 'Never show';
+$string['displayoptionalwaysshow'] = 'Always show';
+$string['displayoptionpermissions'] = 'Show only if user has permissions to export H5P';
+$string['displayoptionauthoron'] = 'Controlled by author, default is on';
+$string['displayoptionauthoroff'] = 'Controlled by author, default is off';
+$string['displayoptions'] = 'Display Options';
+$string['enableframe'] = 'Display action bar and frame';
+$string['enabledownload'] = 'Download button';
+$string['enableembed'] = 'Embed button';
+$string['enablecopyright'] = 'Copyright button';
+$string['enableabout'] = 'About H5P button';
+
+$string['enablesavecontentstate'] = 'Save content state';
+$string['enablesavecontentstate_help'] = 'Automatically save the current state of interactive content for each user. This means that the user may pick up where he left off.';
+$string['contentstatefrequency'] = 'Save content state frequency';
+$string['contentstatefrequency_help'] = 'In seconds, how often do you wish the user to auto save their progress. Increase this number if you\'re having issues with many ajax requests';
+
+// Admin menu.
+$string['settings'] = 'H5P Settings';
+$string['libraries'] = 'H5P Libraries';
+
+// Upload libraries section.
+$string['uploadlibraries'] = 'Upload Libraries';
+$string['options'] = 'Options';
+$string['onlyupdate'] = 'Only update existing libraries';
+$string['disablefileextensioncheck'] = 'Disable file extension check';
+$string['disablefileextensioncheckwarning'] = "Warning! Disabling the file extension check may have security implications as it allows for uploading of php files. That in turn could make it possible for attackers to execute malicious code on your site. Please make sure you know exactly what you're uploading.";
+$string['upload'] = 'Upload';
+
+// Installed libraries section.
+$string['installedlibraries'] = 'Installed Libraries';
+$string['invalidtoken'] = 'Invalid security token.';
+$string['missingparameters'] = 'Missing parameters';
+
+// H5P library list headers on admin page.
+$string['librarylisttitle'] = 'Title';
+$string['librarylistrestricted'] = 'Restricted';
+$string['librarylistinstances'] = 'Instances';
+$string['librarylistinstancedependencies'] = 'Instance dependencies';
+$string['librarylistlibrarydependencies'] = 'Library dependencies';
+$string['librarylistactions'] = 'Actions';
+
+// H5P library page labels.
+$string['addlibraries'] = 'Add libraries';
+$string['installedlibraries'] = 'Installed libraries';
+$string['notapplicable'] = 'N/A';
+$string['upgradelibrarycontent'] = 'Upgrade library content';
+
+// Upgrade H5P content page.
+$string['upgrade'] = 'Upgrade H5P';
+$string['upgradeheading'] = 'Upgrade {$a} content';
+$string['upgradenoavailableupgrades'] = 'There are no available upgrades for this library.';
+$string['enablejavascript'] = 'Please enable JavaScript.';
+$string['upgrademessage'] = 'You are about to upgrade {$a} content instance(s). Please select upgrade version.';
+$string['upgradeinprogress'] = 'Upgrading to %ver...';
+$string['upgradeerror'] = 'An error occurred while processing parameters:';
+$string['upgradeerrordata'] = 'Could not load data for library %lib.';
+$string['upgradeerrorscript'] = 'Could not load upgrades script for %lib.';
+$string['upgradeerrorcontent'] = 'Could not upgrade content %id:';
+$string['upgradeerrorparamsbroken'] = 'Parameters are broken.';
+$string['upgradedone'] = 'You have successfully upgraded {$a} content instance(s).';
+$string['upgradereturn'] = 'Return';
+$string['upgradenothingtodo'] = "There's no content instances to upgrade.";
+$string['upgradebuttonlabel'] = 'Upgrade';
+$string['upgradeinvalidtoken'] = 'Error: Invalid security token!';
+$string['upgradelibrarymissing'] = 'Error: Your library is missing!';
+
+// Results / report page.
+$string['user'] = 'משתמש';
+$string['score'] = 'ניקוד';
+$string['maxscore'] = 'ניקוד מירבי';
+$string['finished'] = 'הסתיים';
+$string['loadingdata'] = 'מאחזר את התוכן.';
+$string['ajaxfailed'] = 'התרחשה שגיאה, התוכן לא זמין.';
+$string['nodata'] = "לא קיימים תכנים העונים על בקשת החיפוש שלך.";
+$string['currentpage'] = 'עמוד $current מתוך $total';
+$string['nextpage'] = 'לעמוד הבא';
+$string['previouspage'] = 'לעמוד הקודם';
+$string['search'] = 'חיפוש';
+$string['empty'] = 'לא נמצאו תכנים';
+$string['viewreportlabel'] = 'Report';
+$string['dataviewreportlabel'] = 'View Answers';
+$string['invalidxapiresult'] = 'No xAPI results were found for the given content and user id combination';
+$string['reportnotsupported'] = 'Not supported';
+$string['reportingscorelabel'] = 'Score:';
+$string['reportingscaledscorelabel'] = 'Gradebook score:';
+$string['reportingscoredelimiter'] = 'out of';
+$string['reportingscaledscoredelimiter'] = ',';
+
+// Editor.
+$string['javascriptloading'] = 'מחכים ל JavaScript...';
+$string['action'] = 'פעולה';
+$string['upload'] = 'העלאה';
+$string['create'] = 'יצירה';
+$string['editor'] = 'עורך';
+
+$string['invalidlibrary'] = 'ספריה לא תקינה';
+$string['nosuchlibrary'] = 'לא קיימת ספריה כזו';
+$string['noparameters'] = 'חסרים משתני אתחול';
+$string['invalidparameters'] = 'משתני אתחול לא תקינים';
+$string['missingcontentuserdata'] = 'התרחשה תקלה: לא זמינים נתוני השימוש של התלמיד עבור פעילות זו';
+
+$string['maximumgrade'] = 'Maximum grade';
+$string['maximumgradeerror'] = 'Please enter a valid positive integer as the max points available for this activity';
+
+// Capabilities.
+$string['hvp:addinstance'] = 'הוספת פעילות H5P חדשה';
+$string['hvp:restrictlibraries'] = 'הגבלת גישה לספריית H5P';
+$string['hvp:updatelibraries'] = 'עדכון גרסה של ספריית H5P';
+$string['hvp:userestrictedlibraries'] = 'שימוש בספריות H5P שמורות';
+$string['hvp:savecontentuserdata'] = 'שמירת נתוני משתמש מתוך פעילות H5P';
+$string['hvp:saveresults'] = 'שמירת תוצאות שימוש ברכיב H5P';
+$string['hvp:viewresults'] = 'צפיה בתוצאות שימוש ברכיב H5P';
+$string['hvp:viewallresults'] = 'View result for all users in course';
+$string['hvp:getcachedassets'] = 'אחזור משאבי מטמון של רכיב H5P';
+$string['hvp:getcontent'] = 'צפיה בתוכן פעילות H5P מתוך הקורס';
+$string['hvp:getexport'] = 'יצוא תוכן פעילות H5P מתוך הקורס';
+
+// Capabilities error messages.
+$string['nopermissiontoupgrade'] = 'You do not have permission to upgrade libraries.';
+$string['nopermissiontorestrict'] = 'You do not have permission to restrict libraries.';
+$string['nopermissiontosavecontentuserdata'] = 'You do not have permission to save content user data.';
+$string['nopermissiontosaveresult'] = 'You do not have permission to save result for this content.';
+$string['nopermissiontoviewresult'] = 'You do not have permission to view results for this content.';
+
+// Editor translations.
+$string['noziparchive'] = 'Your PHP version does not support ZipArchive.';
+$string['noextension'] = 'The file you uploaded is not a valid HTML5 Package (It does not have the .h5p file extension)';
+$string['nounzip'] = 'The file you uploaded is not a valid HTML5 Package (We are unable to unzip it)';
+$string['noparse'] = 'Could not parse the main h5p.json file';
+$string['nojson'] = 'The main h5p.json file is not valid';
+$string['invalidcontentfolder'] = 'Invalid content folder';
+$string['nocontent'] = 'Could not find or parse the content.json file';
+$string['librarydirectoryerror'] = 'Library directory name must match machineName or machineName-majorVersion.minorVersion (from library.json). (Directory: {$a->%directoryName} , machineName: {$a->%machineName}, majorVersion: {$a->%majorVersion}, minorVersion: {$a->%minorVersion})';
+$string['missingcontentfolder'] = 'A valid content folder is missing';
+$string['invalidmainjson'] = 'A valid main h5p.json file is missing';
+$string['missinglibrary'] = 'Missing required library {$a->@library}';
+$string['missinguploadpermissions'] = "Note that the libraries may exist in the file you uploaded, but you're not allowed to upload new libraries. Contact the site administrator about this.";
+$string['invalidlibraryname'] = 'Invalid library name: {$a->%name}';
+$string['missinglibraryjson'] = 'Could not find library.json file with valid json format for library {$a->%name}';
+$string['invalidsemanticsjson'] = 'Invalid semantics.json file has been included in the library {$a->%name}';
+$string['invalidlanguagefile'] = 'Invalid language file {$a->%file} in library {$a->%library}';
+$string['invalidlanguagefile2'] = 'Invalid language file {$a->%languageFile} has been included in the library {$a->%name}';
+$string['missinglibraryfile'] = 'The file "{$a->%file}" is missing from library: "{$a->%name}"';
+$string['missingcoreversion'] = 'The system was unable to install the <em>{$a->%component}</em> component from the package, it requires a newer version of the H5P plugin. This site is currently running version {$a->%current}, whereas the required version is {$a->%required} or higher. You should consider upgrading and then try again.';
+$string['invalidlibrarydataboolean'] = 'Invalid data provided for {$a->%property} in {$a->%library}. Boolean expected.';
+$string['invalidlibrarydata'] = 'Invalid data provided for {$a->%property} in {$a->%library}';
+$string['invalidlibraryproperty'] = 'Can\'t read the property {$a->%property} in {$a->%library}';
+$string['missinglibraryproperty'] = 'The required property {$a->%property} is missing from {$a->%library}';
+$string['invalidlibraryoption'] = 'Illegal option {$a->%option} in {$a->%library}';
+$string['addedandupdatelibraries'] = 'Added {$a->%new} new H5P libraries and updated {$a->%old} old.';
+$string['addednewlibraries'] = 'Added {$a->%new} new H5P libraries.';
+$string['updatedlibraries'] = 'Updated {$a->%old} H5P libraries.';
+$string['missingdependency'] = 'Missing dependency {$a->@dep} required by {$a->@lib}.';
+$string['invalidstring'] = 'Provided string is not valid according to regexp in semantics. (value: \"{$a->%value}\", regexp: \"{$a->%regexp}\")';
+$string['invalidfile'] = 'File "{$a->%filename}" not allowed. Only files with the following extensions are allowed: {$a->%files-allowed}.';
+$string['invalidmultiselectoption'] = 'Invalid selected option in multi-select.';
+$string['invalidselectoption'] = 'Invalid selected option in select.';
+$string['invalidsemanticstype'] = 'H5P internal error: unknown content type "{$a->@type}" in semantics. Removing content!';
+$string['invalidsemantics'] = 'Library used in content is not a valid library according to semantics';
+$string['unabletocreatedir'] = 'Unable to create directory.';
+$string['unabletogetfieldtype'] = 'Unable to get field type.';
+$string['filetypenotallowed'] = 'File type isn\'t allowed.';
+$string['invalidfieldtype'] = 'Invalid field type.';
+$string['invalidimageformat'] = 'Invalid image file format. Use jpg, png or gif.';
+$string['filenotimage'] = 'File is not an image.';
+$string['invalidaudioformat'] = 'Invalid audio file format. Use mp3 or wav.';
+$string['invalidvideoformat'] = 'Invalid video file format. Use mp4 or webm.';
+$string['couldnotsave'] = 'Could not save file.';
+$string['couldnotcopy'] = 'Could not copy file.';
+
+// Welcome messages.
+$string['welcomeheader'] = 'ברוכים הבאים לעולם של H5P!';
+$string['welcomegettingstarted'] = 'כדי להתחיל בהכרת רכיב H5P במערכת Moodle ניתן לבחור ב<a {$a->moodle_tutorial}>מדריך</a> וגם <a {$a->example_content}>תוכן לדוגמה</a> באתר H5P.org לקבלת השראה.';
+$string['welcomecommunity'] = 'אנו מקווים שתהנו פעילות ברכיב H5P ושתמצאו עניין וזמן להצטרף לקהילת המשתמשים ויצרני התוכן העולמית שלנו בעזרת הקישורים הבאים  <a {$a->forums}>פורומים, קבוצות דיון</a> וחדרי רב־שיח <a {$a->gitter}>H5P at Gitter</a>';
+$string['welcomecontactus'] = 'נשמח לקבל כל משוב <a {$a}>יצירת קשר</a>. אנו מתייחסים למשוב באופן מאוד רציני ומחוייבים ליצירת חווית שימוש איכותית ומשופרת ברכיב H5P !';
+
+// Licensing.
+$string['copyrightinfo'] = 'Copyright information';
+$string['years'] = 'Year(s)';
+$string['undisclosed'] = 'Undisclosed';
+$string['attribution'] = 'Attribution 4.0';
+$string['attributionsa'] = 'Attribution-ShareAlike 4.0';
+$string['attributionnd'] = 'Attribution-NoDerivs 4.0';
+$string['attributionnc'] = 'Attribution-NonCommercial 4.0';
+$string['attributionncsa'] = 'Attribution-NonCommercial-ShareAlike 4.0';
+$string['attributionncnd'] = 'Attribution-NonCommercial-NoDerivs 4.0';
+$string['gpl'] = 'General Public License v3';
+$string['pd'] = 'Public Domain';
+$string['pddl'] = 'Public Domain Dedication and Licence';
+$string['pdm'] = 'Public Domain Mark';
+$string['copyrightstring'] = 'Copyright';
+$string['by'] = 'by';
+$string['showmore'] = 'Show more';
+$string['showless'] = 'Show less';
+$string['sublevel'] = 'Sublevel';
+$string['noversionattribution'] = 'Attribution';
+$string['noversionattributionsa'] = 'Attribution-ShareAlike';
+$string['noversionattributionnd'] = 'Attribution-NoDerivs';
+$string['noversionattributionnc'] = 'Attribution-NonCommercial';
+$string['noversionattributionncsa'] = 'Attribution-NonCommercial-ShareAlike';
+$string['noversionattributionncnd'] = 'Attribution-NonCommercial-NoDerivs';
+$string['licenseCC40'] = '4.0 International';
+$string['licenseCC30'] = '3.0 Unported';
+$string['licenseCC25'] = '2.5 Generic';
+$string['licenseCC20'] = '2.0 Generic';
+$string['licenseCC10'] = '1.0 Generic';
+$string['licenseGPL'] = 'General Public License';
+$string['licenseV3'] = 'Version 3';
+$string['licenseV2'] = 'Version 2';
+$string['licenseV1'] = 'Version 1';
+$string['licenseCC010'] = 'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication';
+$string['licenseCC010U'] = 'CC0 1.0 Universal';
+$string['licenseversion'] = 'License Version';
diff --git a/mod/hvp/lang/no/hvp.php b/mod/hvp/lang/no/hvp.php
new file mode 100644
index 0000000..fb3b403
--- /dev/null
+++ b/mod/hvp/lang/no/hvp.php
@@ -0,0 +1,290 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+$string['modulename'] = 'Interaktivt innhold';
+$string['modulename_help'] = 'Aktivitetsmodulen H5P gjør deg istand til å lage interaktivt innhold som feks Interaktive videoer, spørsmåls-sett, dra og slipp, flervalg, presentasjoner og mye mer.
+
+I tillegg til å være et forfatterverktøy for rikt innhold, gjør H5P det mulig å importere og eksportere H5P-filer for effektiv gjenbruk og deling av innhold.
+
+Brukerinteraksjoner og poeng spores vha xAPI og er tilgjengelig gjennom Moodles karakterbok
+
+Du kan legge til eksisterende interaktivt H5P-innhold fra andre nettsider ved å laste opp en .h5p-fil. Du kan lage og laste ned .h5p-filer på feks h5p.org';
+$string['modulename_link'] = 'https://h5p.org/moodle-more-help';
+$string['modulenameplural'] = 'Interaktivt innhold';
+$string['pluginadministration'] = 'H5P';
+$string['pluginname'] = 'H5P';
+$string['intro'] = 'Introduksjon';
+$string['h5pfile'] = 'H5P-fil';
+$string['fullscreen'] = 'Fullskjermsvisning';
+$string['disablefullscreen'] = 'Gå ut av fullskjermsvisning';
+$string['download'] = 'Last ned';
+$string['copyright'] = 'Opphavsrett';
+$string['embed'] = 'Inkluder';
+$string['showadvanced'] = 'Vis avanserte instillinger';
+$string['hideadvanced'] = 'Skjul avanserte instillinger';
+$string['resizescript'] = 'Inkluder dette scriptet på din nettside hvis du ønsker dynamisk endring av størrelse på inkludert innhold:';
+$string['size'] = 'Størrelse';
+$string['close'] = 'Lukk';
+$string['title'] = 'Tittel';
+$string['author'] = 'Forfatter';
+$string['year'] = 'År';
+$string['source'] = 'Kilde';
+$string['license'] = 'Lisens';
+$string['thumbnail'] = 'Miniatyrbilde';
+$string['nocopyright'] = 'Informasjon om opphavsrett ikke tilgjengelig for dette innholdet.';
+$string['downloadtitle'] = 'Last ned dette innholdet som en H5P-fil.';
+$string['copyrighttitle'] = 'Informasjon om opphavsrett for dette innholdet.';
+$string['embedtitle'] = 'Vis HTML-kode du kan bruke for å inkludere innholdet på en annen nettside.';
+$string['h5ptitle'] = 'Besøk H5P.org for å se mer interaktivt innhold.';
+$string['contentchanged'] = 'Dette innholdet har endret seg siden sist du brukte det.';
+$string['startingover'] = 'Du starter på nytt.';
+$string['confirmdialogheader'] = 'Bekreft handling';
+$string['confirmdialogbody'] = 'Er du sikker på at du ønsker å gjøre dette? Handlingen er ikke reversibel.';
+$string['cancellabel'] = 'Avbryt';
+$string['confirmlabel'] = 'Bekreft';
+$string['noh5ps'] = 'Der finnes ikke noe interaktivt innhold for dette kurset.';
+
+// Update message email for admin.
+$string['messageprovider:updates'] = 'Varsel om tilgjengelige H5P-oppdateringer';
+$string['updatesavailabletitle'] = 'Nye H5P-oppdateringer er tilgjengelig';
+$string['updatesavailablemsgpt1'] = 'Der er tilgjengelige oppdateringer for H5P-innholdstypene du har i din Moodle-installasjon.';
+$string['updatesavailablemsgpt2'] = 'Naviger til lenka under for ytterligere instruksjoner.';
+$string['updatesavailablemsgpt3'] = 'Den seneste oppdateringen ble sluppet: {$a}';
+$string['updatesavailablemsgpt4'] = 'Du kjører en versjon fra: {$a}';
+
+$string['lookforupdates'] = 'Se etter H5P-oppdateringer';
+$string['removetmpfiles'] = 'Fjern gamle midlertidige filer';
+$string['removeoldlogentries'] = 'Fjern gamle H5P-loggmeldinger';
+
+// Admin settings.
+$string['displayoptionnevershow'] = 'Vis aldri';
+$string['displayoptionalwaysshow'] = 'Vis alltid';
+$string['displayoptionpermissions'] = 'Vis kun for brukere som har tilgang til å eksportere H5Per';
+$string['displayoptionauthoron'] = 'Settes av forfatter, standard på';
+$string['displayoptionauthoroff'] = 'Settes av forfatter, standard av';
+$string['displayoptions'] = 'Visningsinnstillinger';
+$string['enableframe'] = 'Vis handlingslinjen og rammen';
+$string['enabledownload'] = 'Nedlastings-knapp';
+$string['enableembed'] = 'Inkluder-knapp';
+$string['enablecopyright'] = 'Opphavsretts-knapp';
+$string['enableabout'] = 'Om H5P-knapp';
+
+$string['enablesavecontentstate'] = 'Lagre tilstanden til innholdet';
+$string['enablesavecontentstate_help'] = 'Automatisk lagring av hva brukeren har svart og hvor langt brukeren har kommet. Dette betyr brukeren kan fortsette der han avsluttet.';
+$string['contentstatefrequency'] = 'Frekvens for tilstandslagring';
+$string['contentstatefrequency_help'] = 'Hvor ofte skal man lagre tilstanden (i antall sekunder). Øk dette tallet hvis du har problemer med for mange ajax-forespørsler';
+$string['enabledlrscontenttypes'] = 'Skru på LRS-avhengige innholdstyper';
+$string['enabledlrscontenttypes_help'] = 'Gjør det mulig å bruke innholdstyper som er avhengig av en såkalt Learning Record Store for å virke, slik som Questionnaire-innholdstypen.';
+
+// Admin menu.
+$string['settings'] = 'H5P-innstillinger';
+$string['libraries'] = 'H5P-bibliotek';
+
+// Upload libraries section.
+$string['uploadlibraries'] = 'Last opp bilbliotek';
+$string['options'] = 'Innstillinger';
+$string['onlyupdate'] = 'Oppdater kun eksisterende bibliotek';
+$string['disablefileextensioncheck'] = 'Slå av sjekk for fil-endelser';
+$string['disablefileextensioncheckwarning'] = 'Advarsel! Det å slå av sjekk for fil-endelser kan ha alvorlige sikkerhetsimplikasjoner, siden man da tillater å laste opp php-filer. Dette kan gjøre det mulig for eksterne å kjøre ondsinnet kode på ditt nettsted. Gjør dette kun hvis du vet hva du holder på med.';
+$string['upload'] = 'Last opp';
+
+// Installed libraries section.
+$string['installedlibraries'] = 'Installerte bibliotek';
+$string['invalidtoken'] = 'Ufyldig sikkerhetsnøkkel.';
+$string['missingparameters'] = 'Mangler parametre';
+
+// H5P library list headers on admin page.
+$string['librarylisttitle'] = 'Tittel';
+$string['librarylistrestricted'] = 'Begrenset';
+$string['librarylistinstances'] = 'Instanser';
+$string['librarylistinstancedependencies'] = 'Instansavhengigheter';
+$string['librarylistlibrarydependencies'] = 'Biblioteksavhengigheter';
+$string['librarylistactions'] = 'Handlinger';
+
+// H5P library page labels.
+$string['addlibraries'] = 'Legg til bibliotek';
+$string['installedlibraries'] = 'Installerte bibliotek';
+$string['notapplicable'] = '--';
+$string['upgradelibrarycontent'] = 'Oppgrader H5P-innhold';
+
+// Upgrade H5P content page.
+$string['upgrade'] = 'Oppgrader H5P';
+$string['upgradeheading'] = 'Oppgrader {$a}-innhold';
+$string['upgradenoavailableupgrades'] = 'Det finnes ingen oppgraderinger for dette biblioteket.';
+$string['enablejavascript'] = 'Vær vennlig å slå på JavaScript-støtte i nettleseren din.';
+$string['upgrademessage'] = 'Du er iferd med å oppgradere {$a} innholdsinstans(er). Men først må du velge hvilke versjon du ønsker å oppgradere til.';
+$string['upgradeinprogress'] = 'Oppgraderer til %ver...';
+$string['upgradeerror'] = 'En fil skjedde under prosesseringen:';
+$string['upgradeerrordata'] = 'Klarte ikke å laste data for biblioteket %lib.';
+$string['upgradeerrorscript'] = 'Klarte ikke å laste oppgraderingskoden til %lib.';
+$string['upgradeerrorcontent'] = 'Klarte ikke å oppgradere innholdet med ID: %id:';
+$string['upgradeerrorparamsbroken'] = 'Parameterne er ødelagt.';
+$string['upgradedone'] = 'Du har nå oppgrader {$a} innholdsinstans(er).';
+$string['upgradereturn'] = 'Gå tilbake';
+$string['upgradenothingtodo'] = 'Det finnes ikke noe innhold å oppgradere';
+$string['upgradebuttonlabel'] = 'Oppgrader';
+$string['upgradeinvalidtoken'] = 'Feil: Ugyldig sikkerhetsnøkkel!';
+$string['upgradelibrarymissing'] = 'Feil: Et bibliotek mangler!';
+
+// Results / report page.
+$string['user'] = 'Bruker';
+$string['score'] = 'Poeng';
+$string['maxscore'] = 'Max poeng';
+$string['finished'] = 'Ferdig';
+$string['loadingdata'] = 'Laster data.';
+$string['ajaxfailed'] = 'Feilet ved lasting av data.';
+$string['nodata'] = 'Det finnes ikke data som passer til kriteriene.';
+$string['currentpage'] = 'Side $current av $total';
+$string['nextpage'] = 'Neste side';
+$string['previouspage'] = 'Forrige side';
+$string['search'] = 'Søk';
+$string['empty'] = 'Ingen resultater tilgjengelig';
+$string['viewreportlabel'] = 'Report';
+$string['dataviewreportlabel'] = 'View Answers';
+$string['invalidxapiresult'] = 'No xAPI results were found for the given content and user id combination';
+$string['reportnotsupported'] = 'Not supported';
+$string['reportingscorelabel'] = 'Score:';
+$string['reportingscaledscorelabel'] = 'Gradebook score:';
+$string['reportingscoredelimiter'] = 'out of';
+$string['reportingscaledscoredelimiter'] = ',';
+
+// Editor.
+$string['javascriptloading'] = 'Venter på JavaScript...';
+$string['action'] = 'Handling';
+$string['upload'] = 'Laste opp';
+$string['create'] = 'Lag ny';
+$string['editor'] = 'Innholdstype';
+
+$string['invalidlibrary'] = 'Ugyldig bibliotek';
+$string['nosuchlibrary'] = 'Biblioteket finnes ikke';
+$string['noparameters'] = 'Ingen parametre';
+$string['invalidparameters'] = 'Ugyldige parametre';
+$string['missingcontentuserdata'] = 'Feil: Kunne ikke finne innholdsbrukerdata';
+
+$string['maximumgrade'] = 'Maximum grade';
+$string['maximumgradeerror'] = 'Please enter a valid positive integer as the max points available for this activity';
+
+// Capabilities.
+$string['hvp:addinstance'] = 'Legg til en ny H5P-aktivitet';
+$string['hvp:restrictlibraries'] = 'Begrense et H5P-bibliotek';
+$string['hvp:updatelibraries'] = 'Oppdatere versjonen til et H5P-bibliotek';
+$string['hvp:userestrictedlibraries'] = 'Bruke begrenset H5P-bibliotek';
+$string['hvp:savecontentuserdata'] = 'Lagre H5P-brukerdata';
+$string['hvp:saveresults'] = 'Lagre resultater for H5P-innhold';
+$string['hvp:viewresults'] = 'Vis resultater for eget H5P-innhold';
+$string['hvp:viewallresults'] = 'Vis resultater for alle brukeres H5P-innhold';
+$string['hvp:getcachedassets'] = 'Tilgang til bufret H5P-innholdsressurser';
+$string['hvp:getcontent'] = 'Tilgang til innholdet til H5P-fil i kurs';
+$string['hvp:getexport'] = 'Tilgang til eksportfil fra H5P i kurs';
+
+// Capabilities error messages.
+$string['nopermissiontoupgrade'] = 'Du har ikke tillatelse til å oppgradere bibliotek.';
+$string['nopermissiontorestrict'] = 'Du har ikke tillatelse til å begrense tilgang til bibliotek.';
+$string['nopermissiontosavecontentuserdata'] = 'Du har ikke tillatelse til å lagre brukerdata.';
+$string['nopermissiontosaveresult'] = 'Du har ikke tillatelse til å lagre resultater for dette innholdet.';
+$string['nopermissiontoviewresult'] = 'Du har ikke tillatelse til å se resultater for dette innholdet.';
+
+// Editor translations.
+$string['noziparchive'] = 'PHP-versjonen du bruker støtter ikke ZipArchive.';
+$string['noextension'] = 'Fila du lastet opp er ikke en gyldig H5P (Den har ikke .h5p som filendelse)';
+$string['nounzip'] = 'Fila du lastet opp er ikke en gyldig H5P (Jeg klarer ikke å unzippe den)';
+$string['noparse'] = 'Jeg klarte ikke å tolke h5p.json-fila';
+$string['nojson'] = 'h5p.json-fila er ugyldig';
+$string['invalidcontentfolder'] = 'Ugyldig innholdskatalog';
+$string['nocontent'] = 'Kunne ikke finne eller tolke content.json-fila';
+$string['librarydirectoryerror'] = 'Biblioteks-katalogavnet må være lik machineName eller machineName-majorVersion.minorVersion (fra library.json). (Katalog: {$a->%directoryName} , machineName: {$a->%machineName}, majorVersion: {$a->%majorVersion}, minorVersion: {$a->%minorVersion})';
+$string['missingcontentfolder'] = 'Finner ingen gyldig innholdskatalog';
+$string['invalidmainjson'] = 'Finner ingen gyldig h5p.json-fil';
+$string['missinglibrary'] = 'Mangler et påkrevd bibliotek {$a->@library}';
+$string['missinguploadpermissions'] = 'Vær oppmerksom på at bibliotekene kan skistere i den opplastede fila, men at du ikke tillates å laste opp nye bibliotek. Kontakt nettstedsadministratoren.';
+$string['invalidlibraryname'] = 'Ugyldig biblioteksnavn: {$a->%name}';
+$string['missinglibraryjson'] = 'Klarte ikke å finne en library.json-fil med gyldig json format for bibliotek {$a->%name}';
+$string['invalidsemanticsjson'] = 'En ugyldig semantics.json-fil er inkludert i biblioteket {$a->%name}';
+$string['invalidlanguagefile'] = 'En ugyldig språkfil {$a->%file} i biblioteket {$a->%library}';
+$string['invalidlanguagefile2'] = 'En ugyldig språkfil {$a->%languageFile} er inkludert i biblioteket {$a->%name}';
+$string['missinglibraryfile'] = 'Fila "{$a->%file}" mangler i biblioteket: "{$a->%name}"';
+$string['missingcoreversion'] = 'Systemet kunne ikke installere <em>{$a->%component}</em>-komponenten fra pakken, den krever en nyere versjon av H5P-utvidelsen. Dette nettstedet kjører versjon {$a->%current}, mens påkrevd versjon er {$a->%required} eller høyere. Du bør vurdere å oppgradere for deretter å prøve på nytt.';
+$string['invalidlibrarydataboolean'] = 'Ugyldig data angitt for {$a->%property} i {$a->%library}. Boolsk verdi forventet.';
+$string['invalidlibrarydata'] = 'Ugyldig data angitt for {$a->%property} i {$a->%library}';
+$string['invalidlibraryproperty'] = 'Kan ikke lese feltet {$a->%property} i {$a->%library}';
+$string['missinglibraryproperty'] = 'Det obligatoriske feltet {$a->%property} finnes ikke i {$a->%library}';
+$string['invalidlibraryoption'] = 'Ulovlig verdi {$a->%option} i {$a->%library}';
+$string['addedandupdatelibraries'] = 'La til {$a->%new} nye H5P-bibliotek og oppdaterte {$a->%old} eksisterende.';
+$string['addednewlibraries'] = 'La til {$a->%new} nye H5P-bibliotek.';
+$string['updatedlibraries'] = 'Oppdaterte {$a->%old} eksisterende H5P-bibliotek.';
+$string['missingdependency'] = 'Mangler avhengigheten {$a->@dep} som kreves av {$a->@lib}.';
+$string['invalidstring'] = 'Angitt streng er ugyldig iforhold til det regulære uttrykket i semantikken. (verdi: \"{$a->%value}\", regexp: \"{$a->%regexp}\")';
+$string['invalidfile'] = 'Fila "{$a->%filename}" er ikke tillatt. Bare filer med de følgende filendingene er tillatt: {$a->%files-allowed}.';
+$string['invalidmultiselectoption'] = 'Ugyldig valg gjort i flervalg.';
+$string['invalidselectoption'] = 'Ugyldig valg gjort.';
+$string['invalidsemanticstype'] = 'Intern H5P-feil: ukjent innholdstype "{$a->@type}" i semantikken. Fjerner det aktuelle innholdet!';
+$string['unabletocreatedir'] = 'Ikke istand til å opprette katalog.';
+$string['unabletogetfieldtype'] = 'Ikke istand til å hente felt-type.';
+$string['filetypenotallowed'] = 'Filtypen er ikke tillatt.';
+$string['invalidfieldtype'] = 'Ugyldig felt-type.';
+$string['invalidimageformat'] = 'Ugyldig bidlefilformat. Bruk jpg, png eller gif.';
+$string['filenotimage'] = 'Fila er ikke et bilde.';
+$string['invalidaudioformat'] = 'Ugyldig lydfilformat. Bruk mp3 eller wav.';
+$string['invalidvideoformat'] = 'Ugyldig videofilformat. Bruk mp4 eller webm.';
+$string['couldnotsave'] = 'Klarte ikke å lagre fila.';
+$string['couldnotcopy'] = 'Klarte ikke å kopiere fila.';
+
+// Welcome messages.
+$string['welcomeheader'] = 'Welcome to the world of H5P!';
+$string['welcomegettingstarted'] = 'To get started with H5P and Moodle take a look at our <a {$a->moodle_tutorial}>tutorial</a> and check out the <a {$a->example_content}>example content</a> at H5P.org for inspiration.';
+$string['welcomecommunity'] = 'We hope you will enjoy H5P and get engaged in our growing community through our <a {$a->forums}>forums</a> and chat room <a {$a->gitter}>H5P at Gitter</a>';
+$string['welcomecontactus'] = 'If you have any feedback, don\'t hesitate to <a {$a}>contact us</a>. We take feedback very seriously and are dedicated to making H5P better every day!';
+$string['missingmbstring'] = 'PHP-utvidelsen mbstring mangler. H5P trenger denne for å kunne virke';
+$string['wrongversion'] = 'En ugyldig versjon av H5P-biblioteket {$a->%machineName} er brukt i innholdet. Innholdet bruker {$a->%contentLibrary}, mens det skal bruke {$a->%semanticsLibrary}.';
+$string['invalidlibrary'] = 'H5P-biblioteket {$a->%library} brukt i innholdet er ugyldig';
+
+// Licensing.
+$string['copyrightinfo'] = 'Opphavsrettsinformasjon';
+$string['years'] = 'År';
+$string['undisclosed'] = 'Undisclosed';
+$string['attribution'] = 'Attribution 4.0';
+$string['attributionsa'] = 'Attribution-ShareAlike 4.0';
+$string['attributionnd'] = 'Attribution-NoDerivs 4.0';
+$string['attributionnc'] = 'Attribution-NonCommercial 4.0';
+$string['attributionncsa'] = 'Attribution-NonCommercial-ShareAlike 4.0';
+$string['attributionncnd'] = 'Attribution-NonCommercial-NoDerivs 4.0';
+$string['gpl'] = 'General Public License v3';
+$string['pd'] = 'Public Domain';
+$string['pddl'] = 'Public Domain Dedication and Licence';
+$string['pdm'] = 'Public Domain Mark';
+$string['copyrightstring'] = 'Opphavsrett';
+$string['by'] = 'by';
+$string['showmore'] = 'Show more';
+$string['showless'] = 'Show less';
+$string['sublevel'] = 'Sublevel';
+$string['noversionattribution'] = 'Attribution';
+$string['noversionattributionsa'] = 'Attribution-ShareAlike';
+$string['noversionattributionnd'] = 'Attribution-NoDerivs';
+$string['noversionattributionnc'] = 'Attribution-NonCommercial';
+$string['noversionattributionncsa'] = 'Attribution-NonCommercial-ShareAlike';
+$string['noversionattributionncnd'] = 'Attribution-NonCommercial-NoDerivs';
+$string['licenseCC40'] = '4.0 International';
+$string['licenseCC30'] = '3.0 Unported';
+$string['licenseCC25'] = '2.5 Generic';
+$string['licenseCC20'] = '2.0 Generic';
+$string['licenseCC10'] = '1.0 Generic';
+$string['licenseGPL'] = 'General Public License';
+$string['licenseV3'] = 'Version 3';
+$string['licenseV2'] = 'Version 2';
+$string['licenseV1'] = 'Version 1';
+$string['licenseCC010'] = 'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication';
+$string['licenseCC010U'] = 'CC0 1.0 Universal';
+$string['licenseversion'] = 'License Version';
diff --git a/mod/hvp/lang/tr/hvp.php b/mod/hvp/lang/tr/hvp.php
new file mode 100644
index 0000000..eeb9a68
--- /dev/null
+++ b/mod/hvp/lang/tr/hvp.php
@@ -0,0 +1,278 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+$string['modulename'] = 'Etkileşimsel İçerik';
+$string['modulename_help'] = 'H5P etkinlik modülü Etkileşimsel Videolar, Soru Setleri, Sürükle ve Bırak Sorular, Çoktan Seçmeli Sorular, Sunumlar ve daha bir çoğu etkileşimsel içerik türünü oluşturmanızı sağlar.
+
+Bir zengin içerik oluşturma gereci olmasının yanında, H5P içeriğin yeniden kullanımı ve paylaşılması için H5P dosyalarının içeri ve dışarı aktarılmasına da olanak sağlar.
+
+Kullanıcının etkileşim ve skorları xAPI kullanılarak saklanır ve Moodle Puan Defterine kaydedilir.
+
+Etkileşimsel H5P içerik bir .h5p dosya yüklenerek eklenebilir. .h5p dosyalarını h5p.org üzerinde oluşturup indirebilirsiniz';
+$string['modulename_link'] = 'https://h5p.org/moodle-more-help';
+$string['modulenameplural'] = 'Etkileşimsel İçerik';
+$string['pluginadministration'] = 'H5P';
+$string['pluginname'] = 'H5P';
+$string['intro'] = 'Giriş';
+$string['h5pfile'] = 'H5P Dosyası';
+$string['fullscreen'] = 'Tam Ekran';
+$string['disablefullscreen'] = 'Tam ekranı kapat';
+$string['download'] = 'İndir';
+$string['copyright'] = 'Kullanım hakları';
+$string['embed'] = 'Kat';
+$string['showadvanced'] = 'İleri düzeyi göster';
+$string['hideadvanced'] = 'İleri düzeyi gizle';
+$string['resizescript'] = 'Katılan içeriğin dinamik boyutlandırılmasını istiyorsanız web sitenize bu dizgeyi dahil edin:';
+$string['size'] = 'Boyut';
+$string['close'] = 'Kapat';
+$string['title'] = 'Başlık';
+$string['author'] = 'Yazan';
+$string['year'] = 'Yıl';
+$string['source'] = 'Kaynak';
+$string['license'] = 'Lisans';
+$string['thumbnail'] = 'Küçük resim';
+$string['nocopyright'] = 'Bu içerik için telif hakkı bilgisi yok.';
+$string['downloadtitle'] = 'Bu içeriği bir H5P dosyası olarak indir.';
+$string['copyrighttitle'] = 'Bu içeriğin telif hakkı bilgisine bak.';
+$string['embedtitle'] = 'Bu içeriğin katma koduna bak.';
+$string['h5ptitle'] = 'Daha fazla içerik için H5P.org adresine gidin.';
+$string['contentchanged'] = 'Son kullandığınızdan bu yana bu içerik değişti.';
+$string['startingover'] = "Yeniden başlayacaksınız.";
+$string['confirmdialogheader'] = 'Eylemi onayla';
+$string['confirmdialogbody'] = 'Devam etmeyi istediğinizi onaylayın. Bu eylem geri alınamaz.';
+$string['cancellabel'] = 'İptal';
+$string['confirmlabel'] = 'Onayla';
+$string['noh5ps'] = 'Bu kurs içn etkileşimsel içerik yok.';
+
+$string['lookforupdates'] = 'H5P güncellemelerine bak';
+$string['removetmpfiles'] = 'Eski H5P geçici dosyalarını kaldır';
+$string['removeoldlogentries'] = 'Eski H5P kütük girdilerini kaldır';
+
+// Admin settings.
+$string['displayoptionnevershow'] = 'Never show';
+$string['displayoptionalwaysshow'] = 'Always show';
+$string['displayoptionpermissions'] = 'Show only if user has permissions to export H5P';
+$string['displayoptionauthoron'] = 'Controlled by author, default is on';
+$string['displayoptionauthoroff'] = 'Controlled by author, default is off';
+$string['displayoptions'] = 'Seçenekleri Göster';
+$string['enableframe'] = 'Eylem çubuğunu ve çerçevesini göster';
+$string['enabledownload'] = 'İndirme tuşu';
+$string['enableembed'] = 'Katma tuşu';
+$string['enablecopyright'] = 'Telif hakkı tuşu';
+$string['enableabout'] = 'H5P bilgisi tuşu';
+
+$string['enablesavecontentstate'] = 'İçerik durumunu kaydet';
+$string['enablesavecontentstate_help'] = 'Her bir kullanıcı için mevcut etkileşimsel çerik durumunu kendiliğinden kaydet. Böylece kullanıcı bıraktığı yerden devam edebilir.';
+$string['contentstatefrequency'] = 'İçerik durumunu kaydetme sıklığı';
+$string['contentstatefrequency_help'] = 'Saniye değeriyle, kullanıcının ilerlemesi ne sıklıkla kendiliğinden kaydedilsin. Ajax istemleriyle sorun yaşıyorsanız bu sayıyı artırın.';
+
+// Admin menu.
+$string['settings'] = 'H5P Ayarları';
+$string['libraries'] = 'H5P Kitaplıkları';
+
+// Upload libraries section.
+$string['uploadlibraries'] = 'Kitaplıkları Yükle';
+$string['options'] = 'Seçenekler';
+$string['onlyupdate'] = 'Yalnızca mevcut kitaplıkları güncelle';
+$string['disablefileextensioncheck'] = 'Dosya uzantısı denetimini devreden çıkar';
+$string['disablefileextensioncheckwarning'] = "Dikkat! Dosya uzantısı denetimini devreden çıkarmak, php uzantılı dosyaların da yüklenmesine olanak vereceği için, güvenlik sorunu oluşturabilir. Bu tür dosyalar sitenize zararlı kodların yüklenmesini sağlayabilir. Ne yükleneceğinden emin olmadıkça bu seçeneği kullanmayın.";
+$string['upload'] = 'Yükle';
+
+// Installed libraries section.
+$string['installedlibraries'] = 'Kurulu Kitaplıklar';
+$string['invalidtoken'] = 'Güvenlik bilgisi geçersiz.';
+$string['missingparameters'] = 'Parametreler eksik';
+
+// H5P library list headers on admin page.
+$string['librarylisttitle'] = 'Başlık';
+$string['librarylistrestricted'] = 'Kısıtlı';
+$string['librarylistinstances'] = 'Oluşumlar';
+$string['librarylistinstancedependencies'] = 'Oluşum bağımlılıkları';
+$string['librarylistlibrarydependencies'] = 'Kitaplık bağımlılıkları';
+$string['librarylistactions'] = 'Eylemler';
+
+// H5P library page labels.
+$string['addlibraries'] = 'Kitaplık ekle';
+$string['installedlibraries'] = 'Kurulu kitaplıklar';
+$string['notapplicable'] = 'Yok';
+$string['upgradelibrarycontent'] = 'Kitaplık içeriğini yükselt';
+
+// Upgrade H5P content page.
+$string['upgrade'] = 'H5P yazılımını yükselt';
+$string['upgradeheading'] = '{$a} içeriğini yükselt';
+$string['upgradenoavailableupgrades'] = 'Bu kitaplık için mevcut yükseltme yok.';
+$string['enablejavascript'] = 'JavaScript devreye sokulmalı.';
+$string['upgrademessage'] = '{$a} içerik oluşumu yükseltilecek. Yükseltme sürümünü seçin.';
+$string['upgradeinprogress'] = '%ver sürümüne yükseltiliyor ...';
+$string['upgradeerror'] = 'Parametreler işlenirken bir sorun oluştu:';
+$string['upgradeerrordata'] = '%lib kitaplığı için veriler yüklenemedi.';
+$string['upgradeerrorscript'] = '%lib kitaplığı için yükseltme dizgesi yüklenemedi.';
+$string['upgradeerrorcontent'] = '%id içeriği yükseltilemedi:';
+$string['upgradeerrorparamsbroken'] = 'Parametreler bozuk.';
+$string['upgradedone'] = '{$a} içerik oluşumu başarıyla yükseltildi.';
+$string['upgradereturn'] = 'Geri dön';
+$string['upgradenothingtodo'] = "Yükseltilecek içerik oluşumu yok.";
+$string['upgradebuttonlabel'] = 'Yükselt';
+$string['upgradeinvalidtoken'] = 'Hata: Güvenlik bilgisi geçersiz!';
+$string['upgradelibrarymissing'] = 'Hata: Kitaplığınız yok!';
+
+// Results / report page.
+$string['user'] = 'Kullanıcı';
+$string['score'] = 'Skor';
+$string['maxscore'] = 'En yüksek skor';
+$string['finished'] = 'Bitti';
+$string['loadingdata'] = 'Veri yükleniyor.';
+$string['ajaxfailed'] = 'Veri yüklenemedi.';
+$string['nodata'] = "Ölçütünüze uyan veri yok.";
+$string['currentpage'] = 'Sayfa $current / $total';
+$string['nextpage'] = 'Sonraki sayfa';
+$string['previouspage'] = 'Önceki sayfa';
+$string['search'] = 'Ara';
+$string['empty'] = 'Sonuç yok';
+$string['viewreportlabel'] = 'Report';
+$string['dataviewreportlabel'] = 'View Answers';
+$string['invalidxapiresult'] = 'No xAPI results were found for the given content and user id combination';
+$string['reportnotsupported'] = 'Not supported';
+$string['reportingscorelabel'] = 'Score:';
+$string['reportingscaledscorelabel'] = 'Gradebook score:';
+$string['reportingscoredelimiter'] = 'out of';
+$string['reportingscaledscoredelimiter'] = ',';
+
+// Editor.
+$string['javascriptloading'] = 'JavaScript bekleniyor ...';
+$string['action'] = 'Eylem';
+$string['upload'] = 'Yükle';
+$string['create'] = 'Oluştur';
+$string['editor'] = 'Editör';
+
+$string['invalidlibrary'] = 'Kitaplık geçersz';
+$string['nosuchlibrary'] = 'Böyle bir kitaplık yok';
+$string['noparameters'] = 'Parametre yok';
+$string['invalidparameters'] = 'Parametreler geçersiz';
+$string['missingcontentuserdata'] = 'Hata: İçerik kullanıcısı verisi bulunamadı';
+
+$string['maximumgrade'] = 'Maximum grade';
+$string['maximumgradeerror'] = 'Please enter a valid positive integer as the max points available for this activity';
+
+// Capabilities.
+$string['hvp:addinstance'] = 'Yeni bir H5P Etkinliği ekle';
+$string['hvp:restrictlibraries'] = 'Bir H5P kitaplığını kısıtla';
+$string['hvp:updatelibraries'] = 'Bir H5P kitaplığı sürümünü yükle';
+$string['hvp:userestrictedlibraries'] = 'Kısıtlı H5P kitaplıkları kullan';
+$string['hvp:savecontentuserdata'] = 'H5P içerik kullanıcısı verisini kaydet';
+$string['hvp:saveresults'] = 'H5P içeriği için sonucu kaydet';
+$string['hvp:viewresults'] = 'H5P içeriği için sonucu gör';
+$string['hvp:viewallresults'] = 'View result for all users in course';
+$string['hvp:getcachedassets'] = 'Ön belleğe alınmış H5P içerik değerlerini al';
+$string['hvp:getcontent'] = 'Kurs içìndeki H5P dosyası içeriğini al/gör';
+$string['hvp:getexport'] = 'Kurs içindeki H5P içeriğinden dışa aktarma dosyası al';
+
+// Capabilities error messages.
+$string['nopermissiontoupgrade'] = 'Kitaplıkları yükseltme yetkiniz yok.';
+$string['nopermissiontorestrict'] = 'Kitaplıkları kısıtlama yetkiniz yok.';
+$string['nopermissiontosavecontentuserdata'] = 'İçerik kullanıcısı verilerini kaydetme yetkiniz yok.';
+$string['nopermissiontosaveresult'] = 'Bu içerik için sonucu kaydetme yetkiniz yok.';
+$string['nopermissiontoviewresult'] = 'Bu içerik için sonuçları görme yetkiniz yokY.';
+
+// Editor translations.
+$string['noziparchive'] = 'PHP sürümünüz ZipArchive desteklemiyor.';
+$string['noextension'] = 'Yüklediğiniz dosya geçerli bir HTML5 Paketi değil (Dosya uzantısı .h5p değil.)';
+$string['nounzip'] = 'Yüklediğiniz dosya geçerli bir HTML5 Paketi değil (Dosya açılamadı)';
+$string['noparse'] = 'Ana h5p.json dosyası işlenemedi';
+$string['nojson'] = 'Ana h5p.json dosyası geçersiz';
+$string['invalidcontentfolder'] = 'İçerik klasörü geçersiz';
+$string['nocontent'] = 'content.json dosyası bulunamadı ya da işlenemedi';
+$string['librarydirectoryerror'] = 'Kitaplık dizin adı machineName ya da machineName-majorVersion.minorVersion (library.json gereksinimi) ile uyuşmalı. (Dizin: {$a->%directoryName} , machineName: {$a->%machineName}, majorVersion: {$a->%majorVersion}, minorVersion: {$a->%minorVersion})';
+$string['missingcontentfolder'] = 'Geçerli bir içerik klasörü eksik';
+$string['invalidmainjson'] = 'Geçerli bir ana h5p.json dosyası yok';
+$string['missinglibrary'] = 'Gereken kitaplık eksik {$a->@library}';
+$string['missinguploadpermissions'] = "Yüklediğiniz dosyada kitaplıklar olabilir ama yeni kitaplık yükleme izniniz yok. Bu konuda site yönetimiyle iletişime geçin.";
+$string['invalidlibraryname'] = 'Kitaplık adı geçersiz: {$a->%name}';
+$string['missinglibraryjson'] = 'Geçerli json formatında library.json dosyası bu kitaplık {$a->%name} için bulunamadı';
+$string['invalidsemanticsjson'] = 'semantics.json dosyası kitaplık {$a->%name} içìn geçersiz';
+$string['invalidlanguagefile'] = 'Dil dosyası {$a->%file} kitaplık {$a->%library} için geçersiz';
+$string['invalidlanguagefile2'] = '{$a->%name} kitaplığında geçersiz dil dosyası {$a->%languageFile}';
+$string['missinglibraryfile'] = '"{$a->%file}" dosyası bu kitaplıkta yok: "{$a->%name}"';
+$string['missingcoreversion'] = 'Sistem bu paketten <em>{$a->%component}</em> içeriğini yükleyemedi; H5P eklentisinin daha üst bir sürümü gerekiyor. Bu sitede şu an kullanılan sürüm {$a->%current}; gereken sürüm ise en az {$a->%required}. Yükseltip yeniden deneyebilirsiniz.';
+$string['invalidlibrarydataboolean'] = '{$a->%library} kitaplığında {$a->%property} için geçersiz veri. Boolean olmalı.';
+$string['invalidlibrarydata'] = '{$a->%library} kitaplığında {$a->%property} için geçersiz veri sağlandı';
+$string['invalidlibraryproperty'] = '{$a->%library} kitaplığında {$a->%property} okunamıyor';
+$string['missinglibraryproperty'] = '{$a->%library} kitaplığında gerekli {$a->%property} özelliği yok';
+$string['invalidlibraryoption'] = '{$a->%library} kitaplığında geçersiz seçenek {$a->%option}';
+$string['addedandupdatelibraries'] = '{$a->%new} yeni H5P kitaplığı yüklendi ve {$a->%old} kitaplık güncellendi.';
+$string['addednewlibraries'] = '{$a->%new} yeni H5P kitaplığı yüklendi.';
+$string['updatedlibraries'] = '$a->%old} H5P kitaplığı güncellendi.';
+$string['missingdependency'] = '{$a->@lib} için gereken bağımlılık {$a->@dep} yok.';
+$string['invalidstring'] = 'Semantikteki regexp değerine göre sağlanan dizge geçersiz. (value: \"{$a->%value}\", regexp: \"{$a->%regexp}\")';
+$string['invalidfile'] = 'Dosya "{$a->%filename}" için izin yok. İzin verilen dosya uzantıları: {$a->%files-allowed}.';
+$string['invalidmultiselectoption'] = 'Birden fazla seçenekte geçersiz seçili unsur.';
+$string['invalidselectoption'] = 'Seçimde geçersiz seçili unsur.';
+$string['invalidsemanticstype'] = 'H5P dahili hatası: semantikte bilinmeyen içerik türü "{$a->@type}". İçerik kaldırılıyor!';
+$string['invalidsemantics'] = 'Semantiğe göre, içerikte kullanılan kitaplık geçerli bir kitaplık değil';
+$string['unabletocreatedir'] = 'Dizin oluşturulamadı.';
+$string['unabletogetfieldtype'] = 'Alan türü alınamadı.';
+$string['filetypenotallowed'] = 'Dosya türüne izin yok.';
+$string['invalidfieldtype'] = 'Alan türü geçersiz.';
+$string['invalidimageformat'] = 'Resim dosyası türü geçersiz.jpg, png ya da gif kullanın.';
+$string['filenotimage'] = 'Bu bir resim dosyası değil.';
+$string['invalidaudioformat'] = 'Ses dosyası türü geçersiz. mp3 ya da wav kullanın.';
+$string['invalidvideoformat'] = 'Video dosyası türü geçersiz. mp4 ya da webm kullanın.';
+$string['couldnotsave'] = 'Dosya kaydedilemedi.';
+$string['couldnotcopy'] = 'Dosya kopyalanamadı.';
+
+// Welcome messages.
+$string['welcomeheader'] = 'H5P dünyasına hoşgeldiniz!';
+$string['welcomegettingstarted'] = 'H5P ve Moodle kullanımına bakmak için <a {$a->moodle_tutorial}>kullanım</a> turumuza bakabilir ve h5p.org üzerinde <a {$a->example_content}>örnek içerik</a> le bir fikir edinebilirsiniz.';
+$string['welcomecommunity'] = 'Umarız H5P kullanmaktan memnun kalır ve sürekli büyüyen topluluğumuza<a {$a->forums}>forumlarımız</a> ve <a {$a->gitter}>Gitter adresinde H5P</a> üzerindeki sohbet odamızla katılırsınız';
+$string['welcomecontactus'] = 'Herhangi bir geribildiriminiz varsa<a {$a}>bize iletin</a>. Geribildirimleri titizlikle ele alıyor ve her geçen gün H5P yazılımını geliştirmeye çabalıyoruz!';
+
+// Licensing.
+$string['copyrightinfo'] = 'Telif hakkı bilgisi';
+$string['years'] = 'Yıl';
+$string['undisclosed'] = 'Belirtilmedi';
+$string['attribution'] = 'Attribution 4.0';
+$string['attributionsa'] = 'Attribution-ShareAlike 4.0';
+$string['attributionnd'] = 'Attribution-NoDerivs 4.0';
+$string['attributionnc'] = 'Attribution-NonCommercial 4.0';
+$string['attributionncsa'] = 'Attribution-NonCommercial-ShareAlike 4.0';
+$string['attributionncnd'] = 'Attribution-NonCommercial-NoDerivs 4.0';
+$string['gpl'] = 'General Public License v3';
+$string['pd'] = 'Public Domain';
+$string['pddl'] = 'Public Domain Dedication and Licence';
+$string['pdm'] = 'Public Domain Mark';
+$string['copyrightstring'] = 'Telif hakkı';
+$string['by'] = 'by';
+$string['showmore'] = 'Show more';
+$string['showless'] = 'Show less';
+$string['sublevel'] = 'Sublevel';
+$string['noversionattribution'] = 'Attribution';
+$string['noversionattributionsa'] = 'Attribution-ShareAlike';
+$string['noversionattributionnd'] = 'Attribution-NoDerivs';
+$string['noversionattributionnc'] = 'Attribution-NonCommercial';
+$string['noversionattributionncsa'] = 'Attribution-NonCommercial-ShareAlike';
+$string['noversionattributionncnd'] = 'Attribution-NonCommercial-NoDerivs';
+$string['licenseCC40'] = '4.0 International';
+$string['licenseCC30'] = '3.0 Unported';
+$string['licenseCC25'] = '2.5 Generic';
+$string['licenseCC20'] = '2.0 Generic';
+$string['licenseCC10'] = '1.0 Generic';
+$string['licenseGPL'] = 'General Public License';
+$string['licenseV3'] = 'Version 3';
+$string['licenseV2'] = 'Version 2';
+$string['licenseV1'] = 'Version 1';
+$string['licenseCC010'] = 'CC0 1.0 Universal (CC0 1.0) Public Domain Dedication';
+$string['licenseCC010U'] = 'CC0 1.0 Universal';
+$string['licenseversion'] = 'License Version';
diff --git a/mod/hvp/lib.php b/mod/hvp/lib.php
new file mode 100644
index 0000000..ca4d995
--- /dev/null
+++ b/mod/hvp/lib.php
@@ -0,0 +1,399 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Library of interface functions and constants for module hvp.
+ *
+ * All the core Moodle functions, neeeded to allow the module to work
+ * integrated in Moodle should be placed here.
+ *
+ * All the hvp specific functions, needed to implement all the module
+ * logic, should go to locallib.php. This will help to save some memory when
+ * Moodle is performing actions across all modules.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once('autoloader.php');
+
+ /* Moodle core API */
+
+/**
+ * Returns the information on whether the module supports a feature
+ *
+ * See {@link plugin_supports()} for more info.
+ *
+ * @param string $feature FEATURE_xx constant for requested feature
+ * @return mixed true if the feature is supported, null if unknown
+ */
+function hvp_supports($feature) {
+    switch($feature) {
+        case FEATURE_GROUPS:
+            return true;
+        case FEATURE_GROUPINGS:
+            return true;
+        case FEATURE_GROUPMEMBERSONLY:
+            return true;
+        case FEATURE_MOD_INTRO:
+            return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS:
+            return true;
+        case FEATURE_COMPLETION_HAS_RULES:
+            return false;
+        case FEATURE_GRADE_HAS_GRADE:
+            return true;
+        case FEATURE_GRADE_OUTCOMES:
+            return false;
+        case FEATURE_BACKUP_MOODLE2:
+            return true;
+        case FEATURE_SHOW_DESCRIPTION:
+            return true;
+
+        default:
+            return null;
+    }
+}
+
+/**
+ * Saves a new instance of the hvp into the database
+ *
+ * Given an object containing all the necessary data,
+ * (defined by the form in mod_form.php) this function
+ * will create a new instance and return the id number
+ * of the new instance.
+ *
+ * @param stdClass $hvp Submitted data from the form in mod_form.php
+ * @return int The id of the newly inserted newmodule record
+ */
+function hvp_add_instance($hvp) {
+    // Save content.
+    $hvp->id = hvp_save_content($hvp);
+
+    // Set and create grade item.
+    hvp_grade_item_update($hvp);
+
+    return $hvp->id;
+}
+
+/**
+ * Updates an instance of the hvp in the database
+ *
+ * Given an object containing all the necessary data,
+ * (defined by the form in mod_form.php) this function
+ * will update an existing instance with new data.
+ *
+ * @param stdClass $hvp An object from the form in mod_form.php
+ * @return boolean Success/Fail
+ */
+function hvp_update_instance($hvp) {
+    // Make ID available for core to save.
+    $hvp->id = $hvp->instance;
+
+    // Save content.
+    hvp_save_content($hvp);
+    hvp_grade_item_update($hvp);
+    return true;
+}
+
+/**
+ * Does the actual process of saving the H5P content that's submitted through
+ * the activity form
+ *
+ * @param stdClass $hvp
+ * @return int Content ID
+ */
+function hvp_save_content($hvp) {
+    // Determine disabled content features.
+    $hvp->disable = hvp_get_disabled_content_features($hvp);
+
+    // Determine if we're uploading or creating.
+    if ($hvp->h5paction === 'upload') {
+        // Save uploaded package.
+        $hvp->uploaded = true;
+        $h5pstorage = \mod_hvp\framework::instance('storage');
+        $h5pstorage->savePackage((array)$hvp);
+        $hvp->id = $h5pstorage->contentId;
+    } else {
+        // Save newly created or edited content.
+        $core = \mod_hvp\framework::instance();
+        $editor = \mod_hvp\framework::instance('editor');
+
+        if (!empty($hvp->id)) {
+            // Load existing content to get old parameters for comparison.
+            $content = $core->loadContent($hvp->id);
+            $oldlib = $content['library'];
+            $oldparams = json_decode($content['params']);
+        }
+
+        // Make params and library available for core to save.
+        $hvp->params = $hvp->h5pparams;
+        $hvp->library = H5PCore::libraryFromString($hvp->h5plibrary);
+        $hvp->library['libraryId'] = $core->h5pF->getLibraryId($hvp->library['machineName'],
+                                                               $hvp->library['majorVersion'],
+                                                               $hvp->library['minorVersion']);
+
+        $hvp->id = $core->saveContent((array)$hvp);
+        // We need to process the parameters to move any images or files and
+        // to determine which dependencies the content has.
+
+        // Prepare current parameters.
+        $params = json_decode($hvp->params);
+
+        // Move any uploaded images or files. Determine content dependencies.
+        $editor->processParameters($hvp, $hvp->library, $params,
+                                   isset($oldlib) ? $oldlib : null,
+                                   isset($oldparams) ? $oldparams : null);
+    }
+
+    return $hvp->id;
+}
+
+/**
+ * Help determine which content features have been disabled through the
+ * activity form submitted.
+ *
+ * @param stdClass $hvp
+ * @return int Disabled flags
+ */
+function hvp_get_disabled_content_features($hvp) {
+    $disablesettings = [
+        \H5PCore::DISPLAY_OPTION_FRAME     => isset($hvp->frame) ? $hvp->frame : 0,
+        \H5PCore::DISPLAY_OPTION_DOWNLOAD  => isset($hvp->export) ? $hvp->export : 0,
+        \H5PCore::DISPLAY_OPTION_COPYRIGHT => isset($hvp->copyright) ? $hvp->copyright : 0,
+    ];
+    $core            = \mod_hvp\framework::instance();
+    return $core->getStorableDisplayOptions($disablesettings, 0);
+}
+
+/**
+ * Removes an instance of the hvp from the database
+ *
+ * Given an ID of an instance of this module,
+ * this function will permanently delete the instance
+ * and any data that depends on it.
+ *
+ * @param int $id Id of the module instance
+ * @return boolean Success/Failure
+ */
+function hvp_delete_instance($id) {
+    global $DB;
+
+    // Load content record.
+    if (! $hvp = $DB->get_record('hvp', array('id' => "$id"))) {
+        return false;
+    }
+
+    // Load CM.
+    $cm = \get_coursemodule_from_instance('hvp', $id);
+
+    // Delete content.
+    $h5pstorage = \mod_hvp\framework::instance('storage');
+    $h5pstorage->deletePackage(array('id' => $hvp->id, 'slug' => $hvp->slug, 'coursemodule' => $cm->id));
+
+    // Delete xAPI statements.
+    $DB->delete_records('hvp_xapi_results', array (
+      'content_id' => $hvp->id
+    ));
+
+    // Get library details.
+    $library = $DB->get_record_sql(
+            "SELECT machine_name AS name, major_version, minor_version
+               FROM {hvp_libraries}
+              WHERE id = ?",
+            array($hvp->main_library_id)
+    );
+
+    // Log content delete.
+    new \mod_hvp\event(
+            'content', 'delete',
+            $hvp->id, $hvp->name,
+            $library->name, $library->major_version . '.' . $library->minor_version
+    );
+
+    return true;
+}
+
+/**
+ * Serves the files from the hvp file areas
+ *
+ * @package mod_hvp
+ * @category files
+ *
+ * @param stdClass $course the course object
+ * @param stdClass $cm the course module object
+ * @param stdClass $context the newmodule's context
+ * @param string $filearea the name of the file area
+ * @param array $args extra arguments (itemid, path)
+ * @param bool $forcedownload whether or not force download
+ * @param array $options additional options affecting the file serving
+ *
+ * @return true|false Success
+ */
+function hvp_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, $options = array()) {
+    switch ($filearea) {
+        default:
+            return false; // Invalid file area.
+
+        case 'libraries':
+        case 'cachedassets':
+            if ($context->contextlevel != CONTEXT_SYSTEM) {
+                return false; // Invalid context.
+            }
+
+            // Check permissions.
+            if (!has_capability('mod/hvp:getcachedassets', $context)) {
+                return false;
+            }
+
+            $itemid = 0;
+            break;
+
+        case 'content':
+            if ($context->contextlevel != CONTEXT_MODULE) {
+                return false; // Invalid context.
+            }
+
+            // Check permissions.
+            if (!has_capability('mod/hvp:getcontent', $context)) {
+                return false;
+            }
+
+            $itemid = array_shift($args);
+            break;
+
+        case 'exports':
+            if ($context->contextlevel != CONTEXT_COURSE) {
+                return false; // Invalid context.
+            }
+
+            // Get core.
+            $h5pinterface = \mod_hvp\framework::instance('interface');
+            $h5pcore = \mod_hvp\framework::instance('core');
+
+            // Get content id from filename.
+            if (!preg_match('/(\d*).h5p/', $args[0], $matches)) {
+                // Did not find any content ID.
+                return false;
+            }
+
+            $contentid = $matches[1];
+            $content = $h5pinterface->loadContent($contentid);
+            $displayoptions = $h5pcore->getDisplayOptionsForView($content['disable'], $contentid);
+
+            // Check permissions.
+            if (!$displayoptions['export']) {
+                return false;
+            }
+
+            $itemid = 0;
+            break;
+
+        case 'editor':
+            if ($context->contextlevel != CONTEXT_COURSE) {
+                return false; // Invalid context.
+            }
+
+            // Check permissions.
+            if (!has_capability('mod/hvp:addinstance', $context)) {
+                return false;
+            }
+
+            $itemid = 0;
+            break;
+    }
+
+    $filename = array_pop($args);
+    $filepath = (!$args ? '/' : '/' .implode('/', $args) . '/');
+
+    $fs = get_file_storage();
+    $file = $fs->get_file($context->id, 'mod_hvp', $filearea, $itemid, $filepath, $filename);
+    if (!$file) {
+        return false; // No such file.
+    }
+
+    send_stored_file($file, 86400, 0, $forcedownload, $options);
+
+    return true;
+}
+
+/**
+ * Create/update grade item for given hvp
+ *
+ * @category grade
+ * @param stdClass $hvp object with extra cmidnumber
+ * @param mixed $grades Optional array/object of grade(s); 'reset' means reset grades in gradebook
+ * @return int, 0 if ok, error code otherwise
+ */
+function hvp_grade_item_update($hvp, $grades=null) {
+    global $CFG;
+
+    if (!function_exists('grade_update')) { // Workaround for buggy PHP versions.
+        require_once($CFG->libdir . '/gradelib.php');
+    }
+
+    $params = array('itemname' => $hvp->name, 'idnumber' => $hvp->cmidnumber);
+
+    if (isset($hvp->maximumgrade)) {
+        $params['gradetype'] = GRADE_TYPE_VALUE;
+        $params['grademax'] = $hvp->maximumgrade;
+    }
+
+    // Recalculate rawgrade relative to grademax.
+    if (isset($hvp->rawgrade) && isset($hvp->rawgrademax)) {
+        // Get max grade Obs: do not try to use grade_get_grades because it
+        // requires context which we don't have inside an ajax.
+        $gradeitem = grade_item::fetch(array(
+            'itemtype' => 'mod',
+            'itemmodule' => 'hvp',
+            'iteminstance' => $hvp->id,
+            'courseid' => $hvp->course
+        ));
+
+        if (isset($gradeitem) && isset($gradeitem->grademax)) {
+            $grades->rawgrade = ($hvp->rawgrade / $hvp->rawgrademax) * $gradeitem->grademax;
+        }
+    }
+
+    if ($grades === 'reset') {
+        $params['reset'] = true;
+        $grades = null;
+    }
+
+    return grade_update('mod/hvp', $hvp->course, 'mod', 'hvp', $hvp->id, 0, $grades, $params);
+}
+
+/**
+ * Update activity grades
+ *
+ * @category grade
+ * @param stdClass $hvp null means all hvps (with extra cmidnumber property)
+ * @param int $userid specific user only, 0 means all
+ * @param bool $nullifnone If true and the user has no grade then a grade item with rawgrade == null will be inserted
+ */
+function hvp_update_grades($hvp=null, $userid=0, $nullifnone=true) {
+    if ($userid and $nullifnone) {
+        $grade = new stdClass();
+        $grade->userid   = $userid;
+        $grade->rawgrade = null;
+        hvp_grade_item_update($hvp, $grade);
+
+    } else {
+        hvp_grade_item_update($hvp);
+    }
+}
diff --git a/mod/hvp/library_list.php b/mod/hvp/library_list.php
new file mode 100644
index 0000000..7c0f3f0
--- /dev/null
+++ b/mod/hvp/library_list.php
@@ -0,0 +1,148 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Responsible for displaying the library list page
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once("../../config.php");
+require_once($CFG->libdir.'/adminlib.php');
+require_once("locallib.php");
+
+// No guest autologin.
+require_login(0, false);
+
+$pageurl = new moodle_url('/mod/hvp/library_list.php');
+$PAGE->set_url($pageurl);
+
+// Inform moodle which menu entry currently is active!
+admin_externalpage_setup('h5plibraries');
+
+$PAGE->set_title("{$SITE->shortname}: " . get_string('libraries', 'hvp'));
+
+// Create upload libraries form
+$uploadform = new \mod_hvp\upload_libraries_form();
+if ($formdata = $uploadform->get_data()) {
+    // Handle submitted valid form
+    $h5pStorage = \mod_hvp\framework::instance('storage');
+    $h5pStorage->savePackage(null, null, true);
+}
+
+$core = \mod_hvp\framework::instance();
+
+$hubOn = $core->h5pF->getOption('hub_is_enabled', TRUE);
+if ($hubOn) {
+    // Create content type cache form
+    $ct_cache_form = new \mod_hvp\content_type_cache_form();
+
+    // On form submit
+    if ($ct_cache_form->get_data()) {
+        // Update cache and reload page
+        $core->updateContentTypeCache();
+        redirect($pageurl);
+    }
+}
+
+$numNotFiltered = $core->h5pF->getNumNotFiltered();
+$libraries = $core->h5pF->loadLibraries();
+
+// Add settings for each library
+$settings = array();
+$i = 0;
+foreach ($libraries as $versions) {
+    foreach ($versions as $library) {
+        $usage = $core->h5pF->getLibraryUsage($library->id, $numNotFiltered ? true : false);
+        if ($library->runnable) {
+            $upgrades = $core->getUpgrades($library, $versions);
+            $upgradeUrl = empty($upgrades) ? false : (new moodle_url('/mod/hvp/upgrade_content_page.php', array(
+                'library_id' => $library->id
+            )))->out(false);
+
+            $restricted = (isset($library->restricted) && $library->restricted == 1 ? true : false);
+            $restricted_url = (new moodle_url('/mod/hvp/ajax.php', array(
+                'action' => 'restrict_library',
+                'token' => \H5PCore::createToken('library_' . $library->id),
+                'restrict' => ($restricted ? 0 : 1),
+                'library_id' => $library->id
+            )))->out(false);
+        }
+        else {
+            $upgradeUrl = null;
+            $restricted = null;
+            $restricted_url = null;
+        }
+
+        $settings['libraryList']['listData'][] = array(
+            'title' => $library->title . ' (' . \H5PCore::libraryVersion($library) . ')',
+            'restricted' => $restricted,
+            'restrictedUrl' => $restricted_url,
+            'numContent' => $core->h5pF->getNumContent($library->id),
+            'numContentDependencies' => $usage['content'] === -1 ? '' : $usage['content'],
+            'numLibraryDependencies' => $usage['libraries'],
+            'upgradeUrl' => $upgradeUrl,
+            'detailsUrl' => null, // Not implemented in Moodle
+            'deleteUrl' => null // Not implemented in Moodle
+        );
+
+        $i++;
+    }
+}
+
+// All translations are made server side
+$settings['libraryList']['listHeaders'] = array(
+    get_string('librarylisttitle', 'hvp'),
+    get_string('librarylistrestricted', 'hvp'),
+    get_string('librarylistinstances', 'hvp'),
+    get_string('librarylistinstancedependencies', 'hvp'),
+    get_string('librarylistlibrarydependencies', 'hvp'),
+    get_string('librarylistactions', 'hvp')
+);
+
+// Add js
+$lib_url = $CFG->httpswwwroot . '/mod/hvp/library/';
+
+hvp_admin_add_generic_css_and_js($PAGE, $lib_url, $settings);
+$PAGE->requires->js(new moodle_url($lib_url . 'js/h5p-library-list.js' . hvp_get_cache_buster()), true);
+
+// RENDER PAGE OUTPUT
+
+echo $OUTPUT->header();
+
+// Print any messages
+\mod_hvp\framework::printMessages('info', \mod_hvp\framework::messages('info'));
+\mod_hvp\framework::printMessages('error', \mod_hvp\framework::messages('error'));
+
+// Page Header
+echo '<h2>' . get_string('libraries', 'hvp') . '</h2>';
+
+if ($hubOn) {
+    // Content type cache form
+    echo '<h3>' . get_string('contenttypecacheheader', 'hvp') . '</h3>';
+    $ct_cache_form->display();
+}
+
+// Upload Form
+echo '<h3 class="h5p-admin-header">' . get_string('uploadlibraries', 'hvp') . '</h3>';
+$uploadform->display();
+
+// Installed Libraries List
+echo '<h3 class="h5p-admin-header">' . get_string('installedlibraries', 'hvp')  . '</h3>';
+echo '<div id="h5p-admin-container"></div>';
+
+echo $OUTPUT->footer();
diff --git a/mod/hvp/locallib.php b/mod/hvp/locallib.php
new file mode 100644
index 0000000..add2cb2
--- /dev/null
+++ b/mod/hvp/locallib.php
@@ -0,0 +1,406 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Internal library of functions for module hvp
+ *
+ * All the hvp specific functions, needed to implement the module
+ * logic, should go here. Never include this file from your lib.php!
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once('autoloader.php');
+
+/**
+ * Get array with settings for hvp core
+ *
+ * @return array Settings
+ */
+function hvp_get_core_settings() {
+    global $USER, $CFG, $COURSE;
+
+    $systemcontext = \context_system::instance();
+    $coursecontext = \context_course::instance($COURSE->id);
+
+    $basepath = $CFG->httpswwwroot . '/';
+    $ajaxpath = "{$basepath}mod/hvp/ajax.php?contextId={$coursecontext->id}&token=";
+
+    $core = \mod_hvp\framework::instance('core');
+
+    $settings = array(
+        'baseUrl' => $basepath,
+        'url' => "{$basepath}pluginfile.php/{$coursecontext->id}/mod_hvp",
+        'libraryUrl' => "{$basepath}pluginfile.php/{$systemcontext->id}/mod_hvp/libraries",
+        'postUserStatistics' => true,
+        'ajax' => array(
+            'setFinished' => $ajaxpath . \H5PCore::createToken('result') . '&action=set_finished',
+            'contentUserData' => $ajaxpath . \H5PCore::createToken('contentuserdata') .
+                                 '&action=contents_user_data&content_id=:contentId&data_type=:dataType&sub_content_id=:subContentId'
+        ),
+        'saveFreq' => get_config('mod_hvp', 'enable_save_content_state') ? get_config('mod_hvp', 'content_state_frequency') : false,
+        'siteUrl' => $CFG->wwwroot,
+        'l10n' => array('H5P' => $core->getLocalization()),
+        'user' => array(
+            'name' => $USER->firstname . ' ' . $USER->lastname,
+            'mail' => $USER->email
+        ),
+        'hubIsEnabled' => get_config('mod_hvp', 'hub_is_enabled') ? true : false
+    );
+
+    return $settings;
+}
+
+/**
+ * Get assets (scripts and styles) for hvp core.
+ *
+ * @return array
+ */
+function hvp_get_core_assets() {
+    global $CFG, $PAGE;
+
+    // Get core settings.
+    $settings = \hvp_get_core_settings();
+    $settings['core'] = array(
+        'styles' => array(),
+        'scripts' => array()
+    );
+    $settings['loadedJs'] = array();
+    $settings['loadedCss'] = array();
+
+    // Make sure files are reloaded for each plugin update.
+    $cachebuster = \hvp_get_cache_buster();
+
+    // Use relative URL to support both http and https.
+    $liburl = $CFG->httpswwwroot . '/mod/hvp/library/';
+    $relpath = '/' . preg_replace('/^[^:]+:\/\/[^\/]+\//', '', $liburl);
+
+    // Add core stylesheets.
+    foreach (\H5PCore::$styles as $style) {
+        $settings['core']['styles'][] = $relpath . $style . $cachebuster;
+        $PAGE->requires->css(new moodle_url($liburl . $style . $cachebuster));
+    }
+    // Add core JavaScript.
+    foreach (\H5PCore::$scripts as $script) {
+        $settings['core']['scripts'][] = $relpath . $script . $cachebuster;
+        $PAGE->requires->js(new moodle_url($liburl . $script . $cachebuster), true);
+    }
+
+    return $settings;
+}
+
+/**
+ * Add required assets for displaying the editor.
+ *
+ * @param int $id Content being edited. null for creating new content
+ */
+function hvp_add_editor_assets($id = null) {
+    global $PAGE, $CFG, $COURSE;
+    $settings = \hvp_get_core_assets();
+
+    // Use jQuery and styles from core.
+    $assets = array(
+        'css' => $settings['core']['styles'],
+        'js' => $settings['core']['scripts']
+    );
+
+    // Use relative URL to support both http and https.
+    $url = $CFG->httpswwwroot . '/mod/hvp/';
+    $url = '/' . preg_replace('/^[^:]+:\/\/[^\/]+\//', '', $url);
+
+    // Make sure files are reloaded for each plugin update.
+    $cachebuster = \hvp_get_cache_buster();
+
+    // Add editor styles.
+    foreach (H5peditor::$styles as $style) {
+        $assets['css'][] = $url . 'editor/' . $style . $cachebuster;
+    }
+
+    // Add editor JavaScript.
+    foreach (H5peditor::$scripts as $script) {
+        // We do not want the creator of the iframe inside the iframe.
+        if ($script !== 'scripts/h5peditor-editor.js') {
+            $assets['js'][] = $url . 'editor/' . $script . $cachebuster;
+        }
+    }
+
+    // Add JavaScript with library framework integration (editor part).
+    $PAGE->requires->js(new moodle_url('/mod/hvp/editor/scripts/h5peditor-editor.js' . $cachebuster), true);
+    $PAGE->requires->js(new moodle_url('/mod/hvp/editor/scripts/h5peditor-init.js' . $cachebuster), true);
+    $PAGE->requires->js(new moodle_url('/mod/hvp/editor.js' . $cachebuster), true);
+
+    // Add translations.
+    $language = \mod_hvp\framework::get_language();
+    $languagescript = "editor/language/{$language}.js";
+    if (!file_exists("{$CFG->dirroot}/mod/hvp/{$languagescript}")) {
+        $languagescript = 'editor/language/en.js';
+    }
+    $PAGE->requires->js(new moodle_url('/mod/hvp/' . $languagescript . $cachebuster), true);
+
+    // Add JavaScript settings.
+    $context = \context_course::instance($COURSE->id);
+    $filespathbase = "{$CFG->httpswwwroot}/pluginfile.php/{$context->id}/mod_hvp/";
+    $contentvalidator = \mod_hvp\framework::instance('contentvalidator');
+    $editorajaxtoken = \H5PCore::createToken('editorajax');
+    $settings['editor'] = array(
+      'filesPath' => $filespathbase . 'editor',
+      'fileIcon' => array(
+        'path' => $url . 'editor/images/binary-file.png',
+        'width' => 50,
+        'height' => 50,
+      ),
+      'ajaxPath' => "{$url}ajax.php?contextId={$context->id}&token={$editorajaxtoken}&action=",
+      'libraryUrl' => $url . 'editor/',
+      'copyrightSemantics' => $contentvalidator->getCopyrightSemantics(),
+      'assets' => $assets,
+      // @codingStandardsIgnoreLine
+      'apiVersion' => H5PCore::$coreApi
+    );
+
+    if ($id !== null) {
+        $settings['editor']['nodeVersionId'] = $id;
+
+        // Find cm context.
+        $cm      = \get_coursemodule_from_instance('hvp', $id);
+        $context = \context_module::instance($cm->id);
+
+        // Override content URL.
+        $contenturl = "{$CFG->httpswwwroot}/pluginfile.php/{$context->id}/mod_hvp/content/{$id}";
+        $settings['contents']['cid-' . $id]['contentUrl'] = $contenturl;
+    }
+
+    $PAGE->requires->data_for_js('H5PIntegration', $settings, true);
+}
+
+/**
+ * Add core JS and CSS to page.
+ *
+ * @param moodle_page $page
+ * @param moodle_url|string $liburl
+ * @param array|null $settings
+ * @throws \coding_exception
+ */
+function hvp_admin_add_generic_css_and_js($page, $liburl, $settings = null) {
+    // @codingStandardsIgnoreLine
+    foreach (\H5PCore::$adminScripts as $script) {
+        $page->requires->js(new moodle_url($liburl . $script . hvp_get_cache_buster()), true);
+    }
+
+    if ($settings === null) {
+        $settings = array();
+    }
+
+    $settings['containerSelector'] = '#h5p-admin-container';
+    $settings['l10n'] = array(
+        'NA' => get_string('notapplicable', 'hvp'),
+        'viewLibrary' => '',
+        'deleteLibrary' => '',
+        'upgradeLibrary' => get_string('upgradelibrarycontent', 'hvp')
+    );
+
+    $page->requires->data_for_js('H5PAdminIntegration', $settings, true);
+    $page->requires->css(new moodle_url($liburl . 'styles/h5p.css' . hvp_get_cache_buster()));
+    $page->requires->css(new moodle_url($liburl . 'styles/h5p-admin.css' . hvp_get_cache_buster()));
+
+    // Add settings.
+    $page->requires->data_for_js('h5p', hvp_get_core_settings(), true);
+}
+
+/**
+ * Get a query string with the plugin version number to include at the end
+ * of URLs. This is used to force the browser to reload the asset when the
+ * plugin is updated.
+ *
+ * @return string
+ */
+function hvp_get_cache_buster() {
+    return '?ver=' . get_config('mod_hvp', 'version');
+}
+
+/**
+ * Restrict access to a given content type.
+ *
+ * @param int $library_id
+ * @param bool $restrict
+ */
+function hvp_restrict_library($libraryid, $restrict) {
+    global $DB;
+    $DB->update_record('hvp_libraries', (object) array(
+        'id' => $libraryid,
+        'restricted' => $restrict ? 1 : 0
+    ));
+}
+
+/**
+ * Handle content upgrade progress
+ *
+ * @method hvp_content_upgrade_progress
+ * @param  int $library_id
+ * @return object An object including the json content for the H5P instances
+ *                (maximum 40) that should be upgraded.
+ */
+function hvp_content_upgrade_progress($libraryid) {
+    global $DB;
+
+    $tolibraryid = filter_input(INPUT_POST, 'libraryId');
+
+    // Verify security token.
+    if (!\H5PCore::validToken('contentupgrade', required_param('token', PARAM_RAW))) {
+        print get_string('upgradeinvalidtoken', 'hvp');
+        return;
+    }
+
+    // Get the library we're upgrading to.
+    $tolibrary = $DB->get_record('hvp_libraries', array(
+        'id' => $tolibraryid
+    ));
+    if (!$tolibrary) {
+        print get_string('upgradelibrarymissing', 'hvp');
+        return;
+    }
+
+    // Prepare response.
+    $out = new stdClass();
+    $out->params = array();
+    $out->token = \H5PCore::createToken('contentupgrade');
+
+    // Prepare our interface.
+    $interface = \mod_hvp\framework::instance('interface');
+
+    // Get updated params.
+    $params = filter_input(INPUT_POST, 'params');
+    if ($params !== null) {
+        // Update params.
+        $params = json_decode($params);
+        foreach ($params as $id => $param) {
+            $DB->update_record('hvp', (object) array(
+                'id' => $id,
+                'main_library_id' => $tolibrary->id,
+                'json_content' => $param,
+                'filtered' => ''
+            ));
+
+            // Log content upgrade successful.
+            new \mod_hvp\event(
+                    'content', 'upgrade',
+                    $id, $DB->get_field_sql("SELECT name FROM {hvp} WHERE id = ?", array($id)),
+                    $tolibrary->machine_name, $tolibrary->major_version . '.' . $tolibrary->minor_version
+            );
+        }
+    }
+
+    // Get number of contents for this library.
+    $out->left = $interface->getNumContent($libraryid);
+
+    if ($out->left) {
+        // Find the 40 first contents using this library version and add to params.
+        $results = $DB->get_records_sql(
+            "SELECT id, json_content as params
+               FROM {hvp}
+              WHERE main_library_id = ?
+           ORDER BY name ASC", array($libraryid), 0 , 40
+        );
+
+        foreach ($results as $content) {
+            $out->params[$content->id] = $content->params;
+        }
+    }
+
+    return $out;
+}
+
+/**
+ * Gets the information needed when content is upgraded
+ *
+ * @method hvp_get_library_upgrade_info
+ * @param  string $name
+ * @param  int $major
+ * @param  int $minor
+ * @return object Library metadata including name, version, semantics and path
+ *                to upgrade script
+ */
+function hvp_get_library_upgrade_info($name, $major, $minor) {
+    global $CFG;
+
+    $library = (object) array(
+        'name' => $name,
+        'version' => (object) array(
+            'major' => $major,
+            'minor' => $minor
+        )
+    );
+
+    $core = \mod_hvp\framework::instance();
+
+    $library->semantics = $core->loadLibrarySemantics($library->name, $library->version->major, $library->version->minor);
+    if ($library->semantics === null) {
+        http_response_code(404);
+        return;
+    }
+
+    $context = \context_system::instance();
+    $libraryfoldername = "{$library->name}-{$library->version->major}.{$library->version->minor}";
+    if (\mod_hvp\file_storage::fileExists($context->id, 'libraries', '/' . $libraryfoldername . '/', 'upgrades.js')) {
+        $basepath = $CFG->httpswwwroot . '/';
+        $library->upgradesScript = "{$basepath}pluginfile.php/{$context->id}/mod_hvp/libraries/{$libraryfoldername}/upgrades.js";
+    }
+
+    return $library;
+}
+
+/**
+ * Check permissions to view given user's results
+ *
+ * @param int $userid Id of the user the results belong to
+ * @param context $context Current context, usually course context
+ *
+ * @return bool true if current user has permission to view given user results
+ */
+function hvp_has_view_results_permission($userid, $context) {
+    global $USER;
+
+    // Check if user can view all results.
+    if (has_capability('mod/hvp:viewallresults', $context)) {
+        return true;
+    }
+
+    // Check if viewing own results, and have permission for it.
+    return $userid === (int) $USER->id ? has_capability('mod/hvp:viewresults', $context) : false;
+}
+
+/**
+ * Require view results capability for this page
+ *
+ * @param int $userid User id who owns results
+ * @param context $context Current context
+ * @param int $redirectcontentid Redirect to this content id if not allowed
+ *  to view own results
+ */
+function hvp_require_view_results_permission($userid, $context, $redirectcontentid = null) {
+    global $USER;
+
+    if (!hvp_has_view_results_permission($userid, $context)) {
+        if ($userid === (int) $USER->id && isset($redirectcontentid)) {
+            // Not allowed to view own results, redirect.
+            redirect(new moodle_url('/mod/hvp/view.php', ['id' => $redirectcontentid]));
+        } else {
+            // Other user's results, require capability to view all results.
+            require_capability('mod/hvp:viewallresults', $context);
+        }
+    }
+}
diff --git a/mod/hvp/mod_form.php b/mod/hvp/mod_form.php
new file mode 100644
index 0000000..55591a1
--- /dev/null
+++ b/mod/hvp/mod_form.php
@@ -0,0 +1,306 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Form for creating new H5P Content
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/course/moodleform_mod.php');
+
+class mod_hvp_mod_form extends moodleform_mod {
+
+    public function definition() {
+        global $CFG, $COURSE, $PAGE;
+
+        $mform =& $this->_form;
+
+        // Name.
+        $mform->addElement('text', 'name', get_string('name'));
+        $mform->setType('name', PARAM_TEXT);
+        $mform->addRule('name', null, 'required', null, 'client');
+        $mform->addRule('name', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');
+
+        // Intro.
+        if (method_exists($this, 'standard_intro_elements')) {
+            $this->standard_intro_elements();
+        } else {
+            $this->add_intro_editor(false, get_string('intro', 'hvp'));
+        }
+
+        // Max grade.
+        $mform->addElement('text', 'maximumgrade', get_string('maximumgrade', 'hvp'));
+        $mform->setType('maximumgrade', PARAM_INT);
+        $mform->setDefault('maximumgrade', 10);
+
+        // Action.
+        $h5paction = array();
+        $h5paction[] = $mform->createElement('radio', 'h5paction', '', get_string('upload', 'hvp'), 'upload');
+        $h5paction[] = $mform->createElement('radio', 'h5paction', '', get_string('create', 'hvp'), 'create');
+        $mform->addGroup($h5paction, 'h5pactiongroup', get_string('action', 'hvp'), array('<br/>'), false);
+        $mform->setDefault('h5paction', 'create');
+
+        // Upload.
+        $mform->addElement('filepicker', 'h5pfile', get_string('h5pfile', 'hvp'), null,
+            array('maxbytes' => $COURSE->maxbytes, 'accepted_types' => '*'));
+
+        // Editor placeholder.
+        if ($CFG->theme == 'boost' || in_array('boost', $PAGE->theme->parents)) {
+            $h5peditor   = [];
+            $h5peditor[] = $mform->createElement('html',
+                                                 '<div class="h5p-editor">' . get_string('javascriptloading', 'hvp') . '</div>');
+            $mform->addGroup($h5peditor, 'h5peditorgroup', get_string('editor', 'hvp'));
+        } else {
+            $mform->addElement('static', 'h5peditor', get_string('editor', 'hvp'),
+                               '<div class="h5p-editor">' . get_string('javascriptloading', 'hvp') . '</div>');
+        }
+
+        // Hidden fields.
+        $mform->addElement('hidden', 'h5plibrary', '');
+        $mform->setType('h5plibrary', PARAM_RAW);
+        $mform->addElement('hidden', 'h5pparams', '');
+        $mform->setType('h5pparams', PARAM_RAW);
+
+        $core = \mod_hvp\framework::instance();
+        $displayoptions = $core->getDisplayOptionsForEdit();
+        if (isset($displayoptions[\H5PCore::DISPLAY_OPTION_FRAME])) {
+            // Display options group.
+            $mform->addElement('header', 'displayoptions', get_string('displayoptions', 'hvp'));
+
+            $mform->addElement('checkbox', \H5PCore::DISPLAY_OPTION_FRAME, get_string('enableframe', 'hvp'));
+            $mform->setType(\H5PCore::DISPLAY_OPTION_FRAME, PARAM_BOOL);
+            $mform->setDefault(\H5PCore::DISPLAY_OPTION_FRAME, true);
+
+            if (isset($displayoptions[\H5PCore::DISPLAY_OPTION_DOWNLOAD])) {
+                $mform->addElement('checkbox', \H5PCore::DISPLAY_OPTION_DOWNLOAD, get_string('enabledownload', 'hvp'));
+                $mform->setType(\H5PCore::DISPLAY_OPTION_DOWNLOAD, PARAM_BOOL);
+                $mform->setDefault(\H5PCore::DISPLAY_OPTION_DOWNLOAD, $displayoptions[\H5PCore::DISPLAY_OPTION_DOWNLOAD]);
+                $mform->disabledIf(\H5PCore::DISPLAY_OPTION_DOWNLOAD, 'frame');
+            }
+
+            if (isset($displayoptions[\H5PCore::DISPLAY_OPTION_COPYRIGHT])) {
+                $mform->addElement('checkbox', \H5PCore::DISPLAY_OPTION_COPYRIGHT, get_string('enablecopyright', 'hvp'));
+                $mform->setType(\H5PCore::DISPLAY_OPTION_COPYRIGHT, PARAM_BOOL);
+                $mform->setDefault(\H5PCore::DISPLAY_OPTION_COPYRIGHT, $displayoptions[\H5PCore::DISPLAY_OPTION_COPYRIGHT]);
+                $mform->disabledIf(\H5PCore::DISPLAY_OPTION_COPYRIGHT, 'frame');
+            }
+        }
+
+        $this->standard_coursemodule_elements();
+
+        $this->add_action_buttons();
+    }
+
+    /**
+     * Sets display options within default values
+     *
+     * @param $defaultvalues
+     */
+    private function set_display_options(&$defaultvalues) {
+        // Individual display options are not stored, must be extracted from disable.
+        if (isset($defaultvalues['disable'])) {
+            $h5pcore = \mod_hvp\framework::instance('core');
+            $displayoptions = $h5pcore->getDisplayOptionsForEdit($defaultvalues['disable']);
+            if (isset ($displayoptions[\H5PCore::DISPLAY_OPTION_FRAME])) {
+                $defaultvalues[\H5PCore::DISPLAY_OPTION_FRAME] = $displayoptions[\H5PCore::DISPLAY_OPTION_FRAME];
+            }
+            if (isset($displayoptions[\H5PCore::DISPLAY_OPTION_DOWNLOAD])) {
+                $defaultvalues[\H5PCore::DISPLAY_OPTION_DOWNLOAD] = $displayoptions[\H5PCore::DISPLAY_OPTION_DOWNLOAD];
+            }
+            if (isset($displayoptions[\H5PCore::DISPLAY_OPTION_COPYRIGHT])) {
+                $defaultvalues[\H5PCore::DISPLAY_OPTION_COPYRIGHT] = $displayoptions[\H5PCore::DISPLAY_OPTION_COPYRIGHT];
+            }
+        }
+    }
+
+    /**
+     * Sets max grade in default values from grade item
+     *
+     * @param $content
+     * @param $defaultvalues
+     */
+    private function set_max_grade($content, &$defaultvalues) {
+        // Set default maxgrade.
+        if (isset($content) && isset($content['id'])
+            && isset($defaultvalues) && isset($defaultvalues['course'])) {
+
+            // Get the gradeitem and set maxgrade.
+            $gradeitem = grade_item::fetch(array(
+                'itemtype' => 'mod',
+                'itemmodule' => 'hvp',
+                'iteminstance' => $content['id'],
+                'courseid' => $defaultvalues['course']
+            ));
+
+            if (isset($gradeitem) && isset($gradeitem->grademax)) {
+                $defaultvalues['maximumgrade'] = $gradeitem->grademax;
+            }
+        }
+    }
+
+    public function data_preprocessing(&$defaultvalues) {
+        global $DB;
+        $core = \mod_hvp\framework::instance();
+
+        $content = null;
+        if (!empty($defaultvalues['id'])) {
+            // Load Content.
+            $content = $core->loadContent($defaultvalues['id']);
+            if ($content === null) {
+                print_error('invalidhvp');
+            }
+        }
+
+        $this->set_max_grade($content, $defaultvalues);
+
+        // Aaah.. we meet again h5pfile!
+        $draftitemid = file_get_submitted_draft_itemid('h5pfile');
+        file_prepare_draft_area($draftitemid, $this->context->id, 'mod_hvp', 'package', 0);
+        $defaultvalues['h5pfile'] = $draftitemid;
+        $this->set_display_options($defaultvalues);
+
+        // Determine default action.
+        if (!get_config('mod_hvp', 'hub_is_enabled') && $content === null &&
+            $DB->get_field_sql("SELECT id FROM {hvp_libraries} WHERE runnable = 1", null, IGNORE_MULTIPLE) === false) {
+            $defaultvalues['h5paction'] = 'upload';
+        }
+
+        // Set editor defaults.
+        $defaultvalues['h5plibrary'] = ($content === null ? 0 : H5PCore::libraryToString($content['library']));
+        $defaultvalues['h5pparams'] = ($content === null ? '{}' : $core->filterParameters($content));
+
+        // Add required editor assets.
+        require_once('locallib.php');
+        \hvp_add_editor_assets($content === null ? null : $defaultvalues['id']);
+    }
+
+    /**
+     * Validate uploaded H5P
+     *
+     * @param $data
+     * @param $errors
+     */
+    private function validate_upload($data, &$errors) {
+        global $CFG;
+
+        if (empty($data['h5pfile'])) {
+            // Field missing.
+            $errors['h5pfile'] = get_string('required');
+        } else {
+            $files = $this->get_draft_files('h5pfile');
+            if (count($files) < 1) {
+                // No file uploaded.
+                $errors['h5pfile'] = get_string('required');
+            } else {
+                // Prepare to validate package.
+                $file = reset($files);
+                $interface = \mod_hvp\framework::instance('interface');
+
+                $path = $CFG->tempdir . uniqid('/hvp-');
+                $interface->getUploadedH5pFolderPath($path);
+                $path .= '.h5p';
+                $interface->getUploadedH5pPath($path);
+                $file->copy_content_to($path);
+
+                $h5pvalidator = \mod_hvp\framework::instance('validator');
+                if (! $h5pvalidator->isValidPackage()) {
+                    // Errors while validating the package.
+                    $infomessages = implode('<br/>', \mod_hvp\framework::messages('info'));
+                    $errormessages = implode('<br/>', \mod_hvp\framework::messages('error'));
+                    $errors['h5pfile'] = ($errormessages ? $errormessages . '<br/>' : '') . $infomessages;
+                }
+            }
+        }
+    }
+
+    /**
+     * Validate new H5P
+     *
+     * @param $data
+     */
+    private function validate_created(&$data, &$errors) {
+        // Validate library and params used in editor.
+        $core = \mod_hvp\framework::instance();
+
+        // Get library array from string.
+        $library = H5PCore::libraryFromString($data['h5plibrary']);
+
+        if (!$library) {
+            $errors['h5peditor'] = get_string('invalidlibrary', 'hvp');
+        } else {
+            // Check that library exists.
+            $library['libraryId'] = $core->h5pF->getLibraryId($library['machineName'],
+                $library['majorVersion'],
+                $library['minorVersion']);
+            if (!$library['libraryId']) {
+                $errors['h5peditor'] = get_string('nosuchlibrary', 'hvp');
+            } else {
+                $data['h5plibrary'] = $library;
+
+                // Verify that parameters are valid.
+                if (empty($data['h5pparams'])) {
+                    $errors['h5peditor'] = get_string('noparameters', 'hvp');
+                } else {
+                    $params = json_decode($data['h5pparams']);
+                    if ($params === null) {
+                        $errors['h5peditor'] = get_string('invalidparameters', 'hvp');
+                    } else {
+                        $data['h5pparams'] = $params;
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Validates editor form
+     *
+     * @param array $data
+     * @param array $files
+     *
+     * @return array
+     */
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        // Validate max grade as a non-negative numeric value.
+        if (!is_numeric($data['maximumgrade']) || $data['maximumgrade'] < 0) {
+            $errors['maximumgrade'] = get_string('maximumgradeerror', 'hvp');
+        }
+
+        if ($data['h5paction'] === 'upload') {
+            // Validate uploaded H5P file.
+            $this->validate_upload($data, $errors);
+
+        } else {
+            $this->validate_created($data, $errors);
+
+        }
+        return $errors;
+    }
+
+    public function get_data() {
+        $data = parent::get_data();
+        if (!$data) {
+            return false;
+        }
+        return $data;
+    }
+}
diff --git a/mod/hvp/pix/icon.png b/mod/hvp/pix/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..3aeb6a20b7b11be0234ab5af6e1605f0947b56e4
GIT binary patch
literal 1991
zcmZ`(3pkY98vdy?GcHYTX_UrLt~0|_$~4ApblmTRWE;#d7{kn9#${agR>@@y+DL4h
zPO)R#Ng|iZA(UG#MHn_x+8nn+OxdHH_CDu%&i_2?Uu(Vp`@Qe?egAq^vc2s;Bq1;e
z005E}<^)IKtgt;mV#4=Cq`^7>h+0rgP3<jAP2u)*8krJI0)W$LX<0o%GRCrP-*I}K
zD~_HtzL6s}v<j!_*d#~sR2Ac75iR!8R}(`b+vdF^B8HDp=+dg7J!Xr=2Mh+|9;NKv
z65(ChYyAF27Hj`*V_Crm^8K(=H(ifNtaL>38}6?ZfQ=fC<&(9p?e4Af9qh^ONJ_~u
z_Ys%Y0Z0F?VEyz8^~b<_n%?i<JYE;T5I&rfYJrlK3oseYdvfvSk{@e)JfxQ8mw!Lm
zMo53c>(_dT!>bN8?;~`BUc{iH^zmr6zEwDwEywm8bdjt3e$*)(wXRq-N)H!<)+3g~
zHAmWqcHKPu%S6*q?DQSIlAv})6I#9O+LJ=%aZm8z%jU+0yDT0Jb5+_QJ}j->GsppB
z)s3NEEzKV3oXzY<zM^=Gmg$THcZ@01_&8M5id`zWx;8WFw~|Y-u>oU09}YW~A#pc|
z7<4In@uIr>w56Wu40i?sOg4R*vwPDRoqA|gq8cvRWsoeF&l>eALUMu8e34xGF6s;_
zUFlIt!=%UjJcbvb1fTBb#cjTSxT-B^Eo{QqDs5aOT&0&#=U&0<;tun<6$?W}mHR5T
zR*N6p5}8aob&LOz)|K-1Ncf_}^D`#*^JeC?3T{KUBz<n^af~+T@|oy<=;m+Wr2+h9
zq@nDliGRnytV^K7ul9XIdM=pSr-#U)&8OXQN9E{hkfgeg!6CgzpRZpm67(Z-Rm2xf
z1PZN7AArjbm16{)*r<V?!qzZ>>%l^<)#9qf{-#=zGe-nl^C)SBwwWP3Ti{T0cLo56
z%WMx3;M#TJu@f1jIJ+_3Y^<@qG%AYdNAn?}SkzD<8vt-DtZ+#sF^O;%H8_NUWf>s8
zFtEb)HjGBVzfhP#1_(DBd$=i$PJ*9Aoj~az@DMm0j-&gLv5thZJK@5e0V06O48@|+
zk&%(8$m1v)-5;&1udk2R!Jsi1q>zDRutS(c7BYmP@>S$NIs_8Kmre;~QfMLYZC#=d
zEu3k9Kx`X*d%ot$q>%q|3SsP&B`grV{RORy(m{XI7KY-sQLHJA8cHWI7(#u#F76BS
zzp%f2zVhwp6p}F0?R>uR|Bn4H-#&oGqzSu5r}$cgFiCWw*-kWO$L;?!cC>Kl?ZW@o
zh_7A#f(qM=hv3lPei<GjIuySL0Ct&L5R9G8B?n!eX_XTdwz@joYEK;K_BngUsEZJi
zSM^$Z$W1+~+11?xI(vO!Sj$rHGe9zSS9TxH$UwBf$yE-RDGXU*fgQ(fT1d^RNV?y&
zwv6l9jQ;n6zm}Gk(|R*;%Op7A^Jhrv98}{&p;UesnP*tyZr!N+@fdOwMJb+`pO-}C
zh_l)3c0Y`{s&v)N^z@_oh-Y{uZoWd*vMq;$hlq=tffLHK^Q@oxYhu*RC#I%+#fwTy
zL4xj{9;63_qA?e7MxDk_CLrVuqn%t__Q0k?PkTcJb8`|ZDk`AeyUbf;atjJtySt@4
z&Y#~eb!lmR{qpQA<xa+xvbXQvL1Km1KwzK=wm=NY;c%Y3dIfWJb%jcZEiEnr12115
zUknTivWhOvKK4s`y425-Qc@5kETtolK0MypnYwsajamd#Qj)KG_b!kWaFeyRv7!0L
zvu7!_PrmOsW1zpEzcBu=clh9s*Kas#tPAk=93oM~i+ccRcz%Lj-#a#zwzRag2JNu1
z-Gb~T2TvuhwP1cY)Y@vOTC=vcR$5VE#%9;a671}_i<Om?4vvnAiHV~6$C;(KZ_7mL
z>FKpNQS-1koO6ABy``G_(&&p9tI8)fYOaSjyzYMdIH7N%>P>ZZwQ3CbVVO6B;k28X
z=aD%27FycaXmGEgp*%f3J-f!z#@ZTWbnaYEA4y{w+hQ4g^Rf&i>4)#!-OI|)`p$;w
ztoZu+_7(-uXl=c{P|<{VDLdT;FZ7V&C?mjcl+X8})1`U+pu$W$w+k2Kyv)q@<f{EE
z7{qw}&rhFX%PT8ObO+R%OG-*|uU*TW9vm3(=5V~;c6D_Xr&c|H@bdG;SAm3njSCMV
z6w5UcI(yG?+f<_SyK(s>Z*SmvfGmT-FnKdDKF;Oy`TLf!s(r^>;HNK{`U`r-#tN!W
zRTQO+jEvOQ)$wMYgIkhOPI!@=oSZ(R7)uxoX2hSIEM|3rphG8|dq4Q~+r|5MqERSo
zSPcHBY!7YuEbOU++Ex!1m{`O1%}*R~&(=hP|J0E*3A|^ja#q)^gxf@g;`SIZP>6@-
vvMur_cFvZ>sH3;Xy4)XYTP3k^`#y^%JU)>4KH>1{_N{1PW=r_h#5?g%86R(y

literal 0
HcmV?d00001

diff --git a/mod/hvp/pix/icon.svg b/mod/hvp/pix/icon.svg
new file mode 100644
index 0000000..b484160
--- /dev/null
+++ b/mod/hvp/pix/icon.svg
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Generator: Adobe Illustrator 19.2.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
+<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
+	 viewBox="0 0 1000 1000" style="enable-background:new 0 0 1000 1000;" xml:space="preserve">
+<style type="text/css">
+	.st0{fill:#1D1D1D;}
+	.st1{fill:#FFFFFF;}
+</style>
+<g>
+	<rect class="st0" width="1000" height="1000"/>
+	<g>
+		<path class="st1" d="M880,347.5c-20.1-19.2-50.3-28.5-90.6-28.5H682h-29v73H490.7l-13.3,56.3c11.1-5.2,26.8-9.7,37.7-12.3
+			c10.9-2.6,21.7-1.8,32.3-1.8c36.1,0,65.3,11.2,87.8,33c22.5,21.8,33.7,49.4,33.7,82.5c0,23.3-5.8,45.7-17.3,67.2
+			c-11.6,21.5-28,38.4-49.2,49.7c-7.6,4.1-16,3.8-25.2,10.4H682h29V545h66.1c44.9,0,78.3-10.1,100.2-30.6
+			c21.9-20.5,32.8-48.8,32.8-85.2C910.1,393.8,900.1,366.7,880,347.5z M788.6,460.4c-8.7,7.5-23.8,10.6-45.3,10.6H711v-79h36.8
+			c20.8,0,35,3.8,42.6,11.7c7.5,7.9,11.3,17.1,11.3,28.4C801.7,443.7,797.3,452.9,788.6,460.4z"/>
+		<path class="st1" d="M511.5,499.3c-19.5,0-36.3,11.3-44.4,27.6l-97.6-13.3L413.6,319h-58.3H323v152H206V319H94v358h112V545h117
+			v132h32.3H459c-16.6-6.6-30.8-11.6-42.5-20.4c-11.9-8.9-21.5-19.3-28.9-30.6c-7.4-11.3-13.2-24-18.1-40.9l97.7-14.1
+			c8.1,16.2,24.9,27.3,44.3,27.3c27.4,0,49.6-22.2,49.6-49.6C561,521.5,538.8,499.3,511.5,499.3z"/>
+	</g>
+</g>
+</svg>
diff --git a/mod/hvp/renderer.php b/mod/hvp/renderer.php
new file mode 100644
index 0000000..6a317ea
--- /dev/null
+++ b/mod/hvp/renderer.php
@@ -0,0 +1,82 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Defines the renderer for the hvp (H5P) module.
+ *
+ * @package     mod_hvp
+ * @copyright   2016 Joubel AS <contact@joubel.com>
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The renderer for the hvp module.
+ *
+ * @copyright   2016 Joubel AS <contact@joubel.com>
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class mod_hvp_renderer extends plugin_renderer_base {
+
+    /**
+     * Alter which stylesheets are loaded for H5P. This is useful for adding
+     * your own custom styles or replacing existing ones.
+     *
+     * @param object $scripts List of stylesheets that will be loaded
+     * @param array $libraries Array of libraries indexed by the library's machineName
+     * @param string $embedtype Possible values: div, iframe, external, editor
+     */
+    public function hvp_alter_styles(&$scripts, $libraries, $embedtype) {
+    }
+
+    /**
+     * Alter which scripts are loaded for H5P. Useful for adding your
+     * own custom scripts or replacing existing ones.
+     *
+     * @param object $scripts List of JavaScripts that will be loaded
+     * @param array $libraries Array of libraries indexed by the library's machineName
+     * @param string $embedtype Possible values: div, iframe, external, editor
+     */
+    public function hvp_alter_scripts(&$scripts, $libraries, $embedtype) {
+    }
+
+    /**
+     * Alter semantics before they are processed. This is useful for changing
+     * how the editor looks and how content parameters are filtered.
+     *
+     * @param object $semantics Semantics as object
+     * @param string $name Machine name of library
+     * @param int $majorversion Major version of library
+     * @param int $minorversion Minor version of library
+     */
+    public function hvp_alter_semantics(&$semantics, $name, $majorversion, $minorversion) {
+    }
+
+    /**
+     * Alter parameters of H5P content after it has been filtered through
+     * semantics. This is useful for adapting the content to the current context.
+     *
+     * @param object $parameters The content parameters for the library
+     * @param string $name The machine readable name of the library
+     * @param int $majorversion Major version of the library
+     * @param int $minorversion Minor version of the library
+     */
+    public function hvp_alter_filtered_parameters(&$parameters, $name, $majorversion, $minorversion) {
+    }
+}
diff --git a/mod/hvp/review.php b/mod/hvp/review.php
new file mode 100644
index 0000000..4b66494
--- /dev/null
+++ b/mod/hvp/review.php
@@ -0,0 +1,167 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * View all results for H5P Content
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once("locallib.php");
+global $USER, $PAGE, $DB, $CFG, $OUTPUT, $COURSE;
+
+$id     = required_param('id', PARAM_INT);
+$userid = optional_param('user', (int) $USER->id, PARAM_INT);
+
+if (!$cm = get_coursemodule_from_instance('hvp', $id)) {
+    print_error('invalidcoursemodule');
+}
+if (!$course = $DB->get_record('course', ['id' => $cm->course])) {
+    print_error('coursemisconf');
+}
+require_login($course, false, $cm);
+
+// Check permission.
+$coursecontext = context_course::instance($COURSE->id);
+hvp_require_view_results_permission($userid, $coursecontext, $cm->id);
+
+// Load H5P Content.
+$hvp = $DB->get_record_sql(
+    "SELECT h.id,
+                h.name AS title,
+                hl.machine_name,
+                hl.major_version,
+                hl.minor_version
+           FROM {hvp} h
+           JOIN {hvp_libraries} hl ON hl.id = h.main_library_id
+          WHERE h.id = ?",
+    [$id]);
+
+if ($hvp === false) {
+    print_error('invalidhvp');
+}
+
+// Set page properties.
+$pageurl = new moodle_url('/mod/hvp/review.php', [
+    'id' => $hvp->id,
+]);
+$PAGE->set_url($pageurl);
+$PAGE->set_title($hvp->title);
+$PAGE->set_heading($COURSE->fullname);
+$PAGE->requires->css(new moodle_url($CFG->httpswwwroot . '/mod/hvp/xapi-custom-report.css'));
+
+// We have to get grades from gradebook as well.
+$xapiresults = $DB->get_records_sql("
+    SELECT x.*, i.grademax
+    FROM {hvp_xapi_results} x
+    JOIN {grade_items} i ON i.iteminstance = x.content_id
+    WHERE x.user_id = ?
+    AND x.content_id = ?
+    AND i.itemtype = 'mod'
+    AND i.itemmodule = 'hvp'", [$userid, $id]
+);
+
+if (!$xapiresults) {
+    print_error('invalidxapiresult', 'hvp');
+}
+
+$totalrawscore       = 0;
+$totalmaxscore       = 0;
+$totalscaledscore    = 0;
+$scaledscoreperscore = 0;
+
+// Assemble our question tree.
+$basequestion = null;
+
+// Find base question.
+foreach ($xapiresults as $question) {
+    if ($question->parent_id === null) {
+        // This is the root of our tree.
+        $basequestion = $question;
+
+        if (isset($question->raw_score) && isset($question->grademax) && isset($question->max_score)) {
+            $scaledscoreperscore   = $question->grademax / $question->max_score;
+            $question->score_scale = round($scaledscoreperscore, 2);
+            $totalrawscore         = $question->raw_score;
+            $totalmaxscore         = $question->max_score;
+            if ($question->raw_score === $question->max_score) {
+                $totalscaledscore = round($question->grademax, 2);
+            } else {
+                $totalscaledscore = round($question->score_scale * $question->raw_score, 2);
+            }
+        }
+        break;
+    }
+}
+
+foreach ($xapiresults as $question) {
+    if ($question->parent_id === null) {
+        // Already processed.
+        continue;
+    } else if (isset($xapiresults[$question->parent_id])) {
+        // Add to parent.
+        $xapiresults[$question->parent_id]->children[] = $question;
+    }
+
+    // Set scores.
+    if (isset($question->raw_score) && isset($question->grademax) && isset($question->max_score)) {
+        $question->score_scale = round($question->raw_score * $scaledscoreperscore, 2);
+    }
+
+    // Set score labels.
+    $question->score_label            = get_string('reportingscorelabel', 'hvp');
+    $question->scaled_score_label     = get_string('reportingscaledscorelabel', 'hvp');
+    $question->score_delimiter        = get_string('reportingscoredelimiter', 'hvp');
+    $question->scaled_score_delimiter = get_string('reportingscaledscoredelimiter', 'hvp');
+}
+
+// Initialize reporter.
+$reporter   = H5PReport::getInstance();
+$reporthtml = $reporter->generateReport($basequestion, null, count($xapiresults) <= 1);
+$styles     = $reporter->getStylesUsed();
+foreach ($styles as $style) {
+    $PAGE->requires->css(new moodle_url($CFG->httpswwwroot . '/mod/hvp/reporting/' . $style));
+}
+
+$renderer = $PAGE->get_renderer('mod_hvp');
+
+// Print title and report.
+$title = $hvp->title;
+
+// Show user name if other then self.
+if ($userid !== (int) $USER->id) {
+    $userresult = $DB->get_record('user', ["id" => $userid], 'username');
+    if (isset($userresult) && isset($userresult->username)) {
+        $title .= ": {$userresult->username}";
+    }
+}
+
+// Create title.
+$reviewcontext = [
+    'title'          => $title,
+    'report'         => $reporthtml,
+    'rawScore'       => $totalrawscore,
+    'maxScore'       => $totalmaxscore,
+    'scaledScore'    => $totalscaledscore,
+    'maxScaledScore' => round($basequestion->grademax, 2),
+];
+
+// Print page HTML.
+echo $OUTPUT->header();
+echo $renderer->render_from_template('hvp/review', $reviewcontext);
+echo $OUTPUT->footer();
diff --git a/mod/hvp/settings-hide-key.js b/mod/hvp/settings-hide-key.js
new file mode 100644
index 0000000..949b071
--- /dev/null
+++ b/mod/hvp/settings-hide-key.js
@@ -0,0 +1,31 @@
+/**
+ * Prepares for hiding of the Site Key setting since you cannot modify attributes and such in Moodle.
+ */
+(function ($) {
+    $(document).ready(function () {
+        if (!window.HVPSettingsHideKey) {
+            return;
+        }
+
+        var $input = $('#' + HVPSettingsHideKey.input);
+        if (!$input.length) {
+            return;
+        }
+
+        $input.attr('maxlength', 36)
+            .attr('placeholder', $input.val() || HVPSettingsHideKey.value ? HVPSettingsHideKey.placeholder : HVPSettingsHideKey.empty)
+            .data('value', HVPSettingsHideKey.value)
+            .val('');
+
+        $('<button/>', {
+            'type': 'button',
+            'class': 'h5p-reveal-value',
+            'text': HVPSettingsHideKey.reveal,
+            'data': {
+                'control': HVPSettingsHideKey.input,
+                'hide': HVPSettingsHideKey.hide
+            },
+            insertAfter: $input
+        });
+    });
+})(H5P.jQuery);
diff --git a/mod/hvp/settings.php b/mod/hvp/settings.php
new file mode 100644
index 0000000..2e51772
--- /dev/null
+++ b/mod/hvp/settings.php
@@ -0,0 +1,131 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Administration settings definitions for the hvp module.
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Make sure we are called from an internal Moodle site.
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/hvp/lib.php');
+
+global $PAGE;
+
+// Make sure core is loaded.
+$core = \mod_hvp\framework::instance('core');
+
+// Redefine the H5P admin menu entry to be expandable.
+$modltifolder = new admin_category('modhvpfolder', new lang_string('pluginname', 'mod_hvp'), $module->is_enabled() === false);
+// Add the Settings admin menu entry.
+$ADMIN->add('modsettings', $modltifolder);
+$settings->visiblename = new lang_string('settings', 'mod_hvp');
+// Add the Libraries admin menu entry.
+$ADMIN->add('modhvpfolder', $settings);
+$ADMIN->add('modhvpfolder', new admin_externalpage('h5plibraries',
+    get_string('libraries', 'hvp'), new moodle_url('/mod/hvp/library_list.php')));
+
+if ($ADMIN->fulltree) {
+    // Settings is stored on the global $CFG object.
+
+    // Content state.
+    $settings->add(
+            new admin_setting_configcheckbox('mod_hvp/enable_save_content_state',
+                    get_string('enablesavecontentstate', 'hvp'),
+                    get_string('enablesavecontentstate_help', 'hvp'), 0));
+    $settings->add(
+            new admin_setting_configtext('mod_hvp/content_state_frequency',
+                    get_string('contentstatefrequency', 'hvp'),
+                    get_string('contentstatefrequency_help', 'hvp'), 30, PARAM_INT));
+
+    $PAGE->requires->js('/mod/hvp/library/js/jquery.js', true);
+    $PAGE->requires->js('/mod/hvp/library/js/h5p-display-options.js', true);
+
+    // Send usage statistics.
+    $settings->add(
+            new admin_setting_configcheckbox('mod_hvp/send_usage_statistics',
+                    get_string('sendusagestatistics', 'hvp'),
+                    get_string('sendusagestatistics_help', 'hvp'), 1));
+
+    $choices = array(
+        H5PDisplayOptionBehaviour::NEVER_SHOW => get_string('displayoptionnevershow', 'hvp'),
+        H5PDisplayOptionBehaviour::ALWAYS_SHOW => get_string('displayoptionalwaysshow', 'hvp'),
+        H5PDisplayOptionBehaviour::CONTROLLED_BY_PERMISSIONS => get_string('displayoptionpermissions', 'hvp'),
+        H5PDisplayOptionBehaviour::CONTROLLED_BY_AUTHOR_DEFAULT_ON => get_string('displayoptionauthoron', 'hvp'),
+        H5PDisplayOptionBehaviour::CONTROLLED_BY_AUTHOR_DEFAULT_OFF => get_string('displayoptionauthoroff', 'hvp')
+    );
+
+    // Display options for H5P frame.
+    $settings->add(new admin_setting_heading('mod_hvp/display_options', get_string('displayoptions', 'hvp'), ''));
+    $settings->add(new admin_setting_configcheckbox('mod_hvp/frame', get_string('enableframe', 'hvp'), '', 1));
+    $settings->add(new admin_setting_configselect('mod_hvp/export', get_string('enabledownload', 'hvp'), '',
+                                                  H5PDisplayOptionBehaviour::ALWAYS_SHOW, $choices));
+    $settings->add(new admin_setting_configcheckbox('mod_hvp/copyright', get_string('enablecopyright', 'hvp'), '', 1));
+    $settings->add(new admin_setting_configcheckbox('mod_hvp/icon', get_string('enableabout', 'hvp'), '', 1));
+
+    // Content Types header.
+    $settings->add(new admin_setting_heading('mod_hvp/hub_settings', get_string('hubsettingsheader', 'hvp'), ''));
+
+    // LRS.
+    $settings->add(
+            new admin_setting_configcheckbox('mod_hvp/enable_lrs_content_types',
+                    get_string('enabledlrscontenttypes', 'hvp'),
+                    get_string('enabledlrscontenttypes_help', 'hvp'), 0));
+
+    // Use H5P Hub.
+    $settings->add(
+        new admin_setting_configcheckbox(
+            'mod_hvp/hub_is_enabled',
+            get_string('enablehublabel', 'hvp'),
+            get_string('disablehubdescription', 'hvp'),
+            1
+        )
+    );
+
+    // Load js for disable hub confirmation dialog functionality.
+    $PAGE->requires->js('/mod/hvp/library/js/jquery.js', true);
+    $PAGE->requires->js('/mod/hvp/library/js/h5p-event-dispatcher.js', true);
+    $PAGE->requires->js('/mod/hvp/library/js/h5p-confirmation-dialog.js', true);
+    $PAGE->requires->js('/mod/hvp/library/js/settings/h5p-disable-hub.js', true);
+
+    // Skip applying css when page has already loaded, since Moodle does not.
+    // allow us to require the css at this point.
+    if ($PAGE->state !== 2) {
+        $PAGE->requires->css('/mod/hvp/library/styles/h5p-confirmation-dialog.css');
+        $PAGE->requires->css('/mod/hvp/library/styles/h5p.css');
+        $PAGE->requires->css('/mod/hvp/library/styles/h5p-core-button.css');
+    }
+
+    // Find missing requirements.
+    $core = \mod_hvp\framework::instance('core');
+    $errors = $core->checkSetupErrorMessage()->errors;
+
+    $PAGE->requires->data_for_js('H5PDisableHubData', array(
+        'selector' => '#id_s_mod_hvp_hub_is_enabled',
+        'overlaySelector' => '#adminsettings',
+        'header' => get_string('confirmdialogheader', 'hvp'),
+        'confirmLabel' => get_string('confirmlabel', 'hvp'),
+        'cancelLabel' => get_string('cancellabel', 'hvp'),
+        'confirmationDialogMsg' => get_string('disablehubconfirmationmsg', 'hvp'),
+        'errors' => $errors
+    ));
+}
+
+// Prevent Moodle from adding settings block in standard location.
+$settings = null;
diff --git a/mod/hvp/styles.css b/mod/hvp/styles.css
new file mode 100644
index 0000000..5670e74
--- /dev/null
+++ b/mod/hvp/styles.css
@@ -0,0 +1,82 @@
+.h5p-data-view table {
+  border: 1px solid #e5e5e5;
+  box-shadow: 0 1px 1px rgba(0, 0, 0, .04);
+  table-layout: fixed;
+  width: 100%;
+}
+
+.h5p-data-view td,
+.h5p-data-view th {
+  color: #555;
+  font-size: 13px;
+  line-height: 1.5em;
+  padding: 8px 10px;
+  vertical-align: top;
+  word-wrap: break-word;
+}
+
+.h5p-data-view th {
+  color: #32373c;
+  font-size: 14px;
+  font-weight: normal;
+  line-height: 1.4em;
+}
+
+.h5p-data-view thead th {
+  border-bottom: 1px solid #e1e1e1;
+}
+
+.h5p-data-view tfoot td {
+  border-top: 1px solid #e1e1e1;
+  font-size: 14px;
+}
+
+.h5p-data-view tr:nth-child(odd) {
+  background-color: #F9F9F9;
+}
+
+.h5p-pagination {
+  line-height: 2em;
+  text-align: center;
+}
+
+.h5p-pagination > span, .h5p-pagination > input {
+  margin: 0 1em;
+}
+
+.h5p-pagination button {
+  margin: 0;
+}
+
+.h5p-data-view input[type="text"] {
+  margin-bottom: 0.5em;
+}
+
+.h5p-data-view input[type="text"]::-ms-clear {
+  display: none;
+}
+
+.h5p-data-view th[role="button"] {
+  cursor: pointer;
+}
+
+.h5p-data-view th[role="button"].h5p-sort:after,
+.h5p-data-view th[role="button"]:hover:after,
+.h5p-data-view th[role="button"].h5p-sort.h5p-reverse:hover:after {
+  content: "\25BE";
+  left: 0.5em;
+  position: relative;
+  top: -1px;
+}
+
+.h5p-data-view th[role="button"].h5p-sort.h5p-reverse:after,
+.h5p-data-view th[role="button"].h5p-sort:hover:after {
+  content: "\25B4";
+  top: -2px;
+}
+
+.h5p-data-view th[role="button"]:hover:after,
+.h5p-data-view th[role="button"].h5p-sort.h5p-reverse:hover:after,
+.h5p-data-view th[role="button"].h5p-sort:hover:after {
+  color: #999;
+}
diff --git a/mod/hvp/templates/review.mustache b/mod/hvp/templates/review.mustache
new file mode 100644
index 0000000..539a305
--- /dev/null
+++ b/mod/hvp/templates/review.mustache
@@ -0,0 +1,35 @@
+<div class="clearer"></div>
+<div class="h5p-reporting-main-container">
+  <div class="h5p-reporting-main-header">
+
+    <!--Title-->
+    <div class="h5p-reporting-main-title">{{title}}</div>
+
+    <!--Scoring-->
+    <div class="h5p-reporting-main-score-wrapper">
+
+      <!--Raw score-->
+      <div class="h5p-reporting-main-score-container">
+        <span class="h5p-reporting-main-score-label">
+          {{# str }} reportingscorelabel, mod_hvp {{/ str }}
+        </span>
+        <span class="h5p-reporting-main-score">
+          {{rawScore}} {{# str }} reportingscoredelimiter, mod_hvp {{/ str }} {{maxScore}}
+        </span>
+      </div>
+
+      <!--Scaled score-->
+      <div class="h5p-reporting-main-scaled-container">
+        <span class="h5p-reporting-scaled-label">
+          {{# str }} reportingscaledscorelabel, mod_hvp {{/ str }}
+        </span>
+        <span class="h5p-reporting-scaled-score">
+          {{scaledScore}} {{# str }} reportingscoredelimiter, mod_hvp {{/ str }} {{maxScaledScore}}
+        </span>
+      </div>
+    </div>
+  </div>
+
+  <!--Render report as html-->
+  <div class="h5p-report-view">{{{report}}}</div>
+</div>
diff --git a/mod/hvp/thirdpartylibs.xml b/mod/hvp/thirdpartylibs.xml
new file mode 100644
index 0000000..ef5c841
--- /dev/null
+++ b/mod/hvp/thirdpartylibs.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0"?>
+<libraries>
+    <library>
+        <location>library</location>
+        <name>H5P Core</name>
+        <version>1.13</version>
+        <license>MIT</license>
+    </library>
+    <library>
+        <location>editor</location>
+        <name>H5P Editor</name>
+        <version>(86b5450)</version>
+        <license>MIT</license>
+    </library>
+    <library>
+        <location>reporting</location>
+        <name>H5P Reporting</name>
+        <version>(8fe2c5d)</version>
+        <license>MIT</license>
+    </library>
+</libraries>
diff --git a/mod/hvp/upgrade_content_page.php b/mod/hvp/upgrade_content_page.php
new file mode 100644
index 0000000..7ac1fee
--- /dev/null
+++ b/mod/hvp/upgrade_content_page.php
@@ -0,0 +1,102 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Responsible for displaying the content upgrade page
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once("../../config.php");
+require_once($CFG->libdir.'/adminlib.php');
+require_once("locallib.php");
+
+// No guest autologin.
+require_login(0, false);
+
+$libraryid = required_param('library_id', PARAM_INT);
+$pageurl = new moodle_url('/mod/hvp/upgrade_content_page.php', array('library_id' => $libraryid));
+$PAGE->set_url($pageurl);
+admin_externalpage_setup('h5plibraries');
+$PAGE->set_title("{$SITE->shortname}: " . get_string('upgrade', 'hvp'));
+
+// Inform moodle which menu entry currently is active!
+$core = \mod_hvp\framework::instance();
+global $DB;
+$results = $DB->get_records_sql('SELECT hl2.id as id, hl2.machine_name as name, hl2.title, hl2.major_version,
+                                        hl2.minor_version, hl2.patch_version
+                                   FROM {hvp_libraries} hl1 JOIN {hvp_libraries} hl2 ON hl1.machine_name = hl2.machine_name
+                                  WHERE hl1.id = ?
+                               ORDER BY hl2.title ASC, hl2.major_version ASC, hl2.minor_version ASC', array($libraryid));
+$versions = array();
+foreach ($results as $result) {
+    $versions[$result->id] = $result;
+}
+$library = $versions[$libraryid];
+$upgrades = $core->getUpgrades($library, $versions);
+
+$PAGE->set_heading(get_string('upgradeheading', 'hvp', $library->title . ' (' . \H5PCore::libraryVersion($library) . ')'));
+
+// Get num of contents that can be upgraded.
+$numcontents = $core->h5pF->getNumContent($libraryid);
+if (count($versions) < 2) {
+    echo $OUTPUT->header();
+    echo get_string('upgradenoavailableupgrades', 'hvp');
+} else if ($numcontents === 0) {
+    echo $OUTPUT->header();
+    echo get_string('upgradenothingtodo', 'hvp');
+} else {
+    $settings = array(
+        'libraryInfo' => array(
+            'message' => get_string('upgrademessage', 'hvp', $numcontents),
+            'inProgress' => get_string('upgradeinprogress', 'hvp'),
+            'error' => get_string('upgradeerror', 'hvp'),
+            'errorData' => get_string('upgradeerrordata', 'hvp'),
+            'errorScript' => get_string('upgradeerrorscript', 'hvp'),
+            'errorContent' => get_string('upgradeerrorcontent', 'hvp'),
+            'errorParamsBroken' => get_string('upgradeerrorparamsbroken', 'hvp'),
+            'done' => get_string('upgradedone', 'hvp', $numcontents) .
+                      ' <a href="' . (new moodle_url('/mod/hvp/library_list.php'))->out(false) . '">' .
+                      get_string('upgradereturn', 'hvp') . '</a>',
+            'library' => array(
+                'name' => $library->name,
+                'version' => $library->major_version . '.' . $library->minor_version,
+            ),
+            'libraryBaseUrl' => (new moodle_url('/mod/hvp/ajax.php',
+                                 array('action' => 'getlibrarydataforupgrade')))->out(false) . '&library=',
+            'scriptBaseUrl' => (new moodle_url('/mod/hvp/library/js'))->out(false),
+            'buster' => hvp_get_cache_buster(),
+            'versions' => $upgrades,
+            'contents' => $numcontents,
+            'buttonLabel' => get_string('upgradebuttonlabel', 'hvp'),
+            'infoUrl' => (new moodle_url('/mod/hvp/ajax.php', array('action' => 'libraryupgradeprogress',
+                          'library_id' => $libraryid)))->out(false),
+            'total' => $numcontents,
+            'token' => \H5PCore::createToken('contentupgrade')
+        )
+    );
+
+    // Add JavaScripts.
+    $liburl = $CFG->httpswwwroot . '/mod/hvp/library/';
+    hvp_admin_add_generic_css_and_js($PAGE, $liburl, $settings);
+    $PAGE->requires->js(new moodle_url($liburl . 'js/h5p-version.js' . hvp_get_cache_buster()), true);
+    $PAGE->requires->js(new moodle_url($liburl . 'js/h5p-content-upgrade.js' . hvp_get_cache_buster()), true);
+    echo $OUTPUT->header();
+    echo '<div id="h5p-admin-container">' . get_string('enablejavascript', 'hvp') . '</div>';
+}
+
+echo $OUTPUT->footer();
diff --git a/mod/hvp/version.php b/mod/hvp/version.php
new file mode 100644
index 0000000..38c98f4
--- /dev/null
+++ b/mod/hvp/version.php
@@ -0,0 +1,31 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package    mod
+ * @subpackage hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$plugin->version   = 2017062700;
+$plugin->requires  = 2013051403;
+$plugin->cron      = 0;
+$plugin->component = 'mod_hvp';
+$plugin->maturity  = MATURITY_STABLE;
+$plugin->release   = '1.4';
diff --git a/mod/hvp/view.php b/mod/hvp/view.php
new file mode 100644
index 0000000..1bfe0ce
--- /dev/null
+++ b/mod/hvp/view.php
@@ -0,0 +1,212 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * View H5P Content
+ *
+ * @package    mod_hvp
+ * @copyright  2016 Joubel AS <contact@joubel.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once("../../config.php");
+require_once("locallib.php");
+
+$id = required_param('id', PARAM_INT);
+
+$url = new \moodle_url('/mod/hvp/view.php', array('id' => $id));
+$PAGE->set_url($url);
+
+if (! $cm = get_coursemodule_from_id('hvp', $id)) {
+    print_error('invalidcoursemodule');
+}
+if (! $course = $DB->get_record('course', array('id' => $cm->course))) {
+    print_error('coursemisconf');
+}
+
+require_course_login($course, false, $cm);
+
+// Load H5P Core.
+$core = \mod_hvp\framework::instance();
+
+// Load H5P Content.
+$content = $core->loadContent($cm->instance);
+if ($content === null) {
+    print_error('invalidhvp');
+}
+
+// Log view.
+new \mod_hvp\event(
+        'content', null,
+        $content['id'], $content['title'],
+        $content['library']['name'],
+        $content['library']['majorVersion'] . '.' . $content['library']['minorVersion']
+);
+
+$PAGE->set_title(format_string($content['title']));
+$PAGE->set_heading($course->fullname);
+
+// Mark viewed by user (if required).
+$completion = new completion_info($course);
+$completion->set_module_viewed($cm);
+
+// Attach scripts, styles, etc. from core.
+$settings = hvp_get_core_assets();
+
+// Display options.
+$displayoptions = $core->getDisplayOptionsForView($content['disable'], $content['id']);
+// Embed is not supported in Moodle.
+$displayoptions[\H5PCore::DISPLAY_OPTION_EMBED] = false;
+
+// Filter content parameters.
+$safeparameters = $core->filterParameters($content);
+$decodedparams = json_decode($safeparameters);
+$hvpoutput = $PAGE->get_renderer('mod_hvp');
+$hvpoutput->hvp_alter_filtered_parameters(
+    $decodedparams,
+    $content['library']['name'],
+    $content['library']['majorVersion'],
+    $content['library']['minorVersion']
+);
+$safeparameters = json_encode($decodedparams);
+
+$export = '';
+if ($displayoptions[\H5PCore::DISPLAY_OPTION_DOWNLOAD] && (!isset($CFG->mod_hvp_export) || $CFG->mod_hvp_export === true)) {
+    // Find course context.
+    $context = \context_course::instance($course->id);
+    $hvppath = "{$CFG->httpswwwroot}/pluginfile.php/{$context->id}/mod_hvp";
+    $exportfilename = ($content['slug'] ? $content['slug'] . '-' : '') . $content['id'] . '.h5p';
+    $export = "{$hvppath}/exports/{$exportfilename}";
+}
+
+// Find cm context.
+$context = \context_module::instance($cm->id);
+
+// Add JavaScript settings for this content.
+$cid = 'cid-' . $content['id'];
+$settings['contents'][$cid] = array(
+    'library' => \H5PCore::libraryToString($content['library']),
+    'jsonContent' => $safeparameters,
+    'fullScreen' => $content['library']['fullscreen'],
+    'exportUrl' => $export,
+    'title' => $content['title'],
+    'displayOptions' => $displayoptions,
+    'url' => "{$CFG->httpswwwroot}/mod/hvp/view.php?id={$id}",
+    'contentUrl' => "{$CFG->httpswwwroot}/pluginfile.php/{$context->id}/mod_hvp/content/" . $content['id'],
+    'contentUserData' => array(
+        0 => \mod_hvp\content_user_data::load_pre_loaded_user_data($content['id'])
+    )
+);
+
+// Get assets for this content.
+$preloadeddependencies = $core->loadContentDependencies($content['id'], 'preloaded');
+$files = $core->getDependenciesFiles($preloadeddependencies);
+
+// Determine embed type.
+$embedtype = \H5PCore::determineEmbedType($content['embedType'], $content['library']['embedTypes']);
+
+// Add additional asset files if required.
+$hvpoutput->hvp_alter_scripts($files['scripts'], $preloadeddependencies, $embedtype);
+$hvpoutput->hvp_alter_styles($files['styles'], $preloadeddependencies, $embedtype);
+
+if ($embedtype === 'div') {
+    $context = \context_system::instance();
+    $hvppath = "/pluginfile.php/{$context->id}/mod_hvp";
+
+    // Schedule JavaScripts for loading through Moodle.
+    foreach ($files['scripts'] as $script) {
+        $url = $script->path . $script->version;
+
+        // Add URL prefix if not external.
+        $isexternal = strpos($script->path, '://');
+        if ($isexternal === false) {
+            $url = $hvppath . $url;
+        }
+        $settings['loadedJs'][] = $url;
+        $PAGE->requires->js(new moodle_url($isexternal ? $url : $CFG->httpswwwroot . $url), true);
+    }
+
+    // Schedule stylesheets for loading through Moodle.
+    foreach ($files['styles'] as $style) {
+        $url = $style->path . $style->version;
+
+        // Add URL prefix if not external.
+        $isexternal = strpos($style->path, '://');
+        if ($isexternal === false) {
+            $url = $hvppath . $url;
+        }
+        $settings['loadedCss'][] = $url;
+        $PAGE->requires->css(new moodle_url($isexternal ? $url : $CFG->httpswwwroot . $url));
+    }
+} else {
+    // JavaScripts and stylesheets will be loaded through h5p.js.
+    $settings['contents'][$cid]['scripts'] = $core->getAssetsUrls($files['scripts']);
+    $settings['contents'][$cid]['styles'] = $core->getAssetsUrls($files['styles']);
+}
+
+// XAPI collector token.
+$xapiresultsurl = new moodle_url('/mod/hvp/ajax.php',
+    array(
+        'token' => \H5PCore::createToken('xapiresult'),
+        'action' => 'xapiresult'
+    ));
+$settings['ajax']['xAPIResult'] = $xapiresultsurl->out(false);
+
+// Print JavaScript settings to page.
+$PAGE->requires->data_for_js('H5PIntegration', $settings, true);
+
+// Add xAPI collector script.
+$PAGE->requires->js(new moodle_url($CFG->httpswwwroot . '/mod/hvp/xapi-collector.js'), true);
+
+// Print page HTML.
+echo $OUTPUT->header();
+echo $OUTPUT->heading(format_string($content['title']));
+echo '<div class="clearer"></div>';
+
+// Print any messages.
+\mod_hvp\framework::printMessages('info', \mod_hvp\framework::messages('info'));
+\mod_hvp\framework::printMessages('error', \mod_hvp\framework::messages('error'));
+
+// Print intro.
+if (trim(strip_tags($content['intro']))) {
+    echo $OUTPUT->box_start('mod_introbox', 'hvpintro');
+    echo format_module_intro('hvp', (object) array(
+      'intro' => $content['intro'],
+      'introformat' => $content['introformat'],
+    ), $cm->id);
+    echo $OUTPUT->box_end();
+}
+
+// Print H5P Content.
+if ($embedtype === 'div') {
+    echo '<div class="h5p-content" data-content-id="' .  $content['id'] . '"></div>';
+} else {
+    echo '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content['id'] .
+        '" class="h5p-iframe" data-content-id="' . $content['id'] .
+        '" style="height:1px" src="about:blank" frameBorder="0" scrolling="no"></iframe></div>';
+}
+
+// Find cm context.
+$context = \context_module::instance($cm->id);
+
+// Trigger module viewed event.
+$event = \mod_hvp\event\course_module_viewed::create(array(
+    'objectid' => $cm->instance,
+    'context' => $context
+));
+$event->add_record_snapshot('course_modules', $cm);
+$event->trigger();
+
+echo $OUTPUT->footer();
diff --git a/mod/hvp/xapi-collector.js b/mod/hvp/xapi-collector.js
new file mode 100644
index 0000000..bbbbaa5
--- /dev/null
+++ b/mod/hvp/xapi-collector.js
@@ -0,0 +1,133 @@
+/**
+ * Collect results from xAPI events
+ */
+(function ($) {
+
+    /**
+     * Finds a H5P library instance in an array based on the content ID
+     *
+     * @param  {Array} instances
+     * @param  {number} contentId
+     * @returns {Object} Content instance
+     */
+    function findInstanceInArray(instances, contentId) {
+        if (instances !== undefined && contentId !== undefined) {
+            for (var i = 0; i < instances.length; i++) {
+                if (instances[i].contentId === contentId) {
+                    return instances[i];
+                }
+            }
+        }
+    }
+
+    /**
+     * Finds the global instance from content id by looking through the DOM
+     *
+     * @param {number} [contentId] Content identifier
+     * @returns {Object} Content instance
+     */
+    function getH5PInstance(contentId) {
+        var iframes, instance = null; // Returning null means no instance is found.
+
+        // No content id given, search for instance.
+        if (!contentId) {
+            instance = H5P.instances[0];
+            if (!instance) {
+                iframes = document.getElementsByClassName('h5p-iframe');
+                // Assume first iframe.
+                instance = iframes[0].contentWindow.H5P.instances[0];
+            }
+        }
+        else {
+            // Try this documents instances.
+            instance = findInstanceInArray(H5P.instances, contentId);
+            if (!instance) {
+                // Locate iframes.
+                iframes = document.getElementsByClassName('h5p-iframe');
+                for (var i = 0; i < iframes.length; i++) {
+                    // Search through each iframe for content.
+                    instance = findInstanceInArray(iframes[i].contentWindow.H5P.instances, contentId);
+                    if (instance) {
+                        break;
+                    }
+                }
+            }
+        }
+
+        return instance;
+    }
+
+    /**
+     * Get xAPI data for content type and send off.
+     *
+     * @param {number} contentId Content id
+     * @param {Object} event Original xAPI event
+     */
+    function storeXAPIData(contentId, event) {
+        var xAPIData;
+        var instance = getH5PInstance(contentId);
+
+        // Use getXAPIData contract, needed to get children.
+        if (instance && instance.getXAPIData) {
+            xAPIData = instance.getXAPIData();
+        }
+        else {
+            // Fallback to event data.
+            xAPIData = {
+                statement: event.data.statement
+            };
+        }
+
+        // Ship the xAPI result.
+        $.post(H5PIntegration.ajax.xAPIResult, {
+            contentId: contentId,
+            xAPIResult: JSON.stringify(xAPIData)
+        }).done(function (data) {
+            if (data.error) {
+                console.debug('Storing xAPI results failed with error message:', data);
+            }
+        });
+    }
+
+    $(document).ready(function () {
+        // No external dispatcher.
+        if (!(window.H5P && H5P.externalDispatcher)) {
+            console.debug('External dispatcher not found');
+            return;
+        }
+
+        // No ajax path.
+        if (!(window.H5PIntegration && H5PIntegration.ajax && H5PIntegration.ajax.xAPIResult)) {
+            console.debug('No ajax path found');
+            return;
+        }
+
+        // Get emitted xAPI data.
+        H5P.externalDispatcher.on('xAPI', function (event) {
+            // Skip malformed events.
+            var hasStatement = event && event.data && event.data.statement;
+            if (!hasStatement) {
+                return;
+            }
+
+            var statement = event.data.statement;
+            var validVerb = statement.verb && statement.verb.display && statement.verb.display['en-US'];
+            if (!validVerb) {
+                return;
+            }
+
+            var isCompleted = statement.verb.display['en-US'] === 'answered' ||
+                statement.verb.display['en-US'] === 'completed';
+            var isChild = statement.context && statement.context.contextActivities &&
+                statement.context.contextActivities.parent &&
+                statement.context.contextActivities.parent[0] &&
+                statement.context.contextActivities.parent[0].id;
+
+            // Store only completed root events.
+            if (isCompleted && !isChild) {
+                // Get xAPI data with children if possible.
+                storeXAPIData(this.contentId, event);
+            }
+        });
+    });
+})(H5P.jQuery);
diff --git a/mod/hvp/xapi-custom-report.css b/mod/hvp/xapi-custom-report.css
new file mode 100644
index 0000000..3de40b7
--- /dev/null
+++ b/mod/hvp/xapi-custom-report.css
@@ -0,0 +1,69 @@
+body .h5p-result {
+  background: #fff;
+  border: solid 1px #C9C9C9;
+  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.12);
+  color: #5C5C5C;
+  font-size: 15px;
+  height: auto;
+  margin: 1em 0;
+  padding: 30px;
+}
+
+body .h5p-compound-container {
+  border: none;
+  box-shadow: none;
+  margin: 0;
+  padding: 0;
+}
+
+body .h5p-reporting-main-title {
+  display: inline-block;
+  font-size: 1.3em;
+  font-weight: 600;
+}
+
+body .h5p-reporting-main-container {
+  margin: 10px;
+}
+
+body .h5p-reporting-main-header {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  margin-bottom: 10px;
+
+  background-color: #f3f3f3;
+  border-bottom: solid 1px #dfdfdf;
+  padding: 0.7em 2em;
+}
+
+body .h5p-reporting-main-score-wrapper {
+  display: inline-block;
+  font-size: 0.95em;
+  font-weight: bold;
+  text-align: right;
+}
+
+body .h5p-reporting-scaled-label,
+body .h5p-reporting-main-score-label {
+  font-weight: normal;
+}
+
+/* Properly formats content after it has been cleaned */
+body .h5p-reporting-main-score-container,
+body .h5p-reporting-main-scaled-container {
+  display: block;
+}
+
+body .h5p-reporting-main-score-label,
+body .h5p-reporting-main-score,
+body .h5p-reporting-score-label,
+body .h5p-reporting-score,
+body .h5p-reporting-scaled-label,
+body .h5p-reporting-scaled-score {
+  display: inline-block;
+}
+
+body .h5p-reporting-main-score {
+  margin-left: 0.4em;
+}
-- 
1.8.3.1

