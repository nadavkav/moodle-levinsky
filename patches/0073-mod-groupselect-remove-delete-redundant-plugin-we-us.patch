From 03c962957bdd86d9f7060b13b1ef1845b2f0f145 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Mon, 16 Oct 2017 10:19:16 +0300
Subject: [PATCH 73/95] mod/groupselect (remove) delete redundant plugin (we
 use choicegroup)

---
 mod/groupselect/.travis.yml                        |  40 -
 mod/groupselect/CHANGES.md                         |  14 -
 mod/groupselect/README.md                          |  54 --
 mod/groupselect/backup/moodle1/lib.php             | 126 ----
 .../backup_groupselect_activity_task.class.php     |  68 --
 .../backup/moodle2/backup_groupselect_stepslib.php |  82 --
 .../restore_groupselect_activity_task.class.php    | 110 ---
 .../moodle2/restore_groupselect_stepslib.php       | 111 ---
 .../event/course_module_instance_list_viewed.php   |   7 -
 .../classes/event/course_module_viewed.php         |  38 -
 .../classes/event/export_link_created.php          |  54 --
 .../classes/event/group_teacher_added.php          |  71 --
 mod/groupselect/create_form.php                    |  95 ---
 mod/groupselect/db/access.php                      |  82 --
 mod/groupselect/db/install.xml                     |  63 --
 mod/groupselect/db/log.php                         |  35 -
 mod/groupselect/db/upgrade.php                     | 260 -------
 mod/groupselect/index.php                          | 101 ---
 .../jquery/jeditable/jquery.jeditable.js           | 546 --------------
 mod/groupselect/jquery/plugins.php                 |   8 -
 mod/groupselect/lang/de/groupselect.php            |  18 -
 mod/groupselect/lang/en/groupselect.php            |  86 ---
 mod/groupselect/lang/fi/groupselect.php            |  67 --
 mod/groupselect/lib.php                            | 303 --------
 mod/groupselect/lib/sorttable/sorttable.js         | 489 ------------
 mod/groupselect/locallib.php                       | 125 ----
 mod/groupselect/mod_form.php                       | 189 -----
 mod/groupselect/pix/icon.png                       | Bin 945 -> 0 bytes
 mod/groupselect/pix/icon.svg                       |  36 -
 mod/groupselect/select_form.php                    |  88 ---
 mod/groupselect/settings.php                       |  89 ---
 mod/groupselect/styles.css                         |  68 --
 mod/groupselect/version.php                        |  35 -
 mod/groupselect/view.php                           | 828 ---------------------
 34 files changed, 4386 deletions(-)
 delete mode 100644 mod/groupselect/.travis.yml
 delete mode 100644 mod/groupselect/CHANGES.md
 delete mode 100644 mod/groupselect/README.md
 delete mode 100644 mod/groupselect/backup/moodle1/lib.php
 delete mode 100644 mod/groupselect/backup/moodle2/backup_groupselect_activity_task.class.php
 delete mode 100644 mod/groupselect/backup/moodle2/backup_groupselect_stepslib.php
 delete mode 100644 mod/groupselect/backup/moodle2/restore_groupselect_activity_task.class.php
 delete mode 100644 mod/groupselect/backup/moodle2/restore_groupselect_stepslib.php
 delete mode 100644 mod/groupselect/classes/event/course_module_instance_list_viewed.php
 delete mode 100644 mod/groupselect/classes/event/course_module_viewed.php
 delete mode 100644 mod/groupselect/classes/event/export_link_created.php
 delete mode 100644 mod/groupselect/classes/event/group_teacher_added.php
 delete mode 100644 mod/groupselect/create_form.php
 delete mode 100644 mod/groupselect/db/access.php
 delete mode 100644 mod/groupselect/db/install.xml
 delete mode 100644 mod/groupselect/db/log.php
 delete mode 100644 mod/groupselect/db/upgrade.php
 delete mode 100644 mod/groupselect/index.php
 delete mode 100644 mod/groupselect/jquery/jeditable/jquery.jeditable.js
 delete mode 100644 mod/groupselect/jquery/plugins.php
 delete mode 100644 mod/groupselect/lang/de/groupselect.php
 delete mode 100644 mod/groupselect/lang/en/groupselect.php
 delete mode 100644 mod/groupselect/lang/fi/groupselect.php
 delete mode 100644 mod/groupselect/lib.php
 delete mode 100644 mod/groupselect/lib/sorttable/sorttable.js
 delete mode 100644 mod/groupselect/locallib.php
 delete mode 100644 mod/groupselect/mod_form.php
 delete mode 100644 mod/groupselect/pix/icon.png
 delete mode 100644 mod/groupselect/pix/icon.svg
 delete mode 100644 mod/groupselect/select_form.php
 delete mode 100644 mod/groupselect/settings.php
 delete mode 100644 mod/groupselect/styles.css
 delete mode 100644 mod/groupselect/version.php
 delete mode 100644 mod/groupselect/view.php

diff --git a/mod/groupselect/.travis.yml b/mod/groupselect/.travis.yml
deleted file mode 100644
index 94c8c97..0000000
--- a/mod/groupselect/.travis.yml
+++ /dev/null
@@ -1,40 +0,0 @@
-language: php
-
-sudo: false
-
-cache:
-  directories:
-    - $HOME/.composer/cache
-
-php:
- - 5.6
- - 7.0
-
-env:
- global:
-  - MOODLE_BRANCH=MOODLE_32_STABLE
- matrix:
-  - DB=pgsql
-  - DB=mysqli
-
-before_install:
-  - phpenv config-rm xdebug.ini
-  - cd ../..
-  - composer selfupdate
-  - composer create-project -n --no-dev --prefer-dist moodlerooms/moodle-plugin-ci ci ^1
-  - export PATH="$(cd ci/bin; pwd):$(cd ci/vendor/bin; pwd):$PATH"
-
-install:
-  - moodle-plugin-ci install
-
-script:
-  - moodle-plugin-ci phplint
-  - moodle-plugin-ci phpcpd
-  - moodle-plugin-ci phpmd
-  - moodle-plugin-ci codechecker
-  - moodle-plugin-ci csslint
-  - moodle-plugin-ci shifter
-  - moodle-plugin-ci jshint
-  - moodle-plugin-ci validate
-  - moodle-plugin-ci phpunit
-  - moodle-plugin-ci behat
\ No newline at end of file
diff --git a/mod/groupselect/CHANGES.md b/mod/groupselect/CHANGES.md
deleted file mode 100644
index 0921b98..0000000
--- a/mod/groupselect/CHANGES.md
+++ /dev/null
@@ -1,14 +0,0 @@
-# Changes for mod_groupselect
-
-## Version 3.13 (2017061206)
-
-*   Better error messages for the module administration (via @phish108)
-*   Allow to configure participation in multiple groups (fixes issue #8, via @phish108)
-*   Allow administrators and teachers to set supervision roles (fixes bug #14, via @phish108)
-*   Omit including unnecessary libraries (fixes bug #10, via @lucaboesch)
-*   Better conformity with Moodle Coding and Packaging Standards
-
-## Older Versions
-
-Older Version did not document their changes. The change log starts with
-version 3.13.
diff --git a/mod/groupselect/README.md b/mod/groupselect/README.md
deleted file mode 100644
index 94d1202..0000000
--- a/mod/groupselect/README.md
+++ /dev/null
@@ -1,54 +0,0 @@
-Group self-selection module for Moodle
-
-* Copyright (C) 2017 HTWChur
-* Copyright (C) 2014 Tampere University of Technology, Pirkka Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
-* Copyright (C) 2008-2011 Petr Skoda (http://skodak.org/)
-
-This program is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 3 of the License, or
-(at your option) any later version.
-
-This program is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details:
-http://www.gnu.org/copyleft/gpl.html
-
-Lets students create and select groups. Features:
-
-* Students can create groups, give them a description and set them password protected, if wanted
-* Students can select and join groups
-* Non-editing teachers may be assigned to groups
-* Teacher can export course group list as a csv-file
-* Full compatibility with basic Moodle groups: groups may be created by other means if needed, supports group assignment submissions etc.
-
-
-Thanks to Pirkka Pyykkönen, Petr Skoda, Helen Foster, Daniel Neis Araujo and other
-contributors, on whose earlier work this plugin is based on.
-
-Project page:
-
-* https://github.com/marinaglancy/moodle-mod_groupselect (moodle) by Marina Glancy
-* https://github.com/BLC-HTWChur/moodle-mod_groupselect (version >=3.06) by HTWChur
-* https://github.com/birrel/moodle-mod_groupselect (version <= 3.05 beta) by Pirkka Pyykkönen
-* https://github.com/skodak/moodle-mod_groupselect (original <= 2.1 versions) by Petr Skoda
-
-NOTABLE UPDATES:
-* 2017.02.01: Default values for activity settings available
-* 2016.09.07: Export only current grouping, if specified
-* 2016.08.26: Enabled show description feature and tableview improvements for longer groupnames
-* 2016.06.11: New option to disable notifications if the open until date is reached
-* 2016.06.06: New option for students to define the group name; New option to avoid that students can define passwords;
-Fixed validation messages for creating groups, fixed install.xml
-* 2016.06.02: Fixed wrong instance_id in table groupselect_groups_teachers; Backup and restore works now;
-Added new logging events for adding non-editign teachers and creating a downloadlink; Some small fixes.
-* 2016.05.09: Removed general setting 'requiremodintro', not supported anymore
-* 2015.03.25: Fixed: password was asked when joining group without
-password (if upgraded from older versions), sql queries should now work
-with oracle
-* 2014.12.17: Migrated to new logging system
-* 2014.12.15: Small fixes
-* 2014.12.01: Fixed upgrade.php, project renamed as groupselect
-* 2014.11.07: Non-editing teacher assignment, group description editing, improved csv-export, small optional features added
-* 2014.09.11: Fixed mysql insertion related bug, added some notifications and small fixes
diff --git a/mod/groupselect/backup/moodle1/lib.php b/mod/groupselect/backup/moodle1/lib.php
deleted file mode 100644
index 223258d..0000000
--- a/mod/groupselect/backup/moodle1/lib.php
+++ /dev/null
@@ -1,126 +0,0 @@
-<?php
-// This file is part of Book module for Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Provides support for the conversion of moodle1 backup to the moodle2 format
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2011 Petr Skoda (http://skodak.org)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die();
-
-/**
- * Book conversion handler
- */
-class moodle1_mod_groupselect_handler extends moodle1_mod_handler {
-
-    /** @var moodle1_file_manager */
-    protected $fileman = null;
-
-    /** @var int cmid */
-    protected $moduleid = null;
-
-    /**
-     * Declare the paths in moodle.xml we are able to convert
-     *
-     * The method returns list of {@link convert_path} instances. For each path returned,
-     * at least one of on_xxx_start(), process_xxx() and on_xxx_end() methods must be
-     * defined. The method process_xxx() is not executed if the associated path element is
-     * empty (i.e. it contains none elements or sub-paths only).
-     *
-     * Note that the path /MOODLE_BACKUP/COURSE/MODULES/MOD/groupselect does not
-     * actually exist in the file. The last element with the module name was
-     * appended by the moodle1_converter class.
-     *
-     * @return array of {@link convert_path} instances
-     */
-    public function get_paths() {
-        return array(
-            new convert_path('groupselect', '/MOODLE_BACKUP/COURSE/MODULES/MOD/GROUPSELECT',
-                    array(
-                        'newfields' => array(
-                            'introformat' => FORMAT_MOODLE,
-                        ),
-                    )
-                ),
-        );
-    }
-
-    /**
-     * This is executed every time we have one /MOODLE_BACKUP/COURSE/MODULES/MOD/groupselect
-     * data available
-     * @param array $data
-     */
-    public function process_groupselect($data) {
-        global $CFG;
-
-        // get the course module id and context id
-        $instanceid     = $data['id'];
-        $cminfo         = $this->get_cminfo($instanceid);
-        $this->moduleid = $cminfo['id'];
-        $contextid      = $this->converter->get_contextid(CONTEXT_MODULE, $this->moduleid);
-
-        // replay the upgrade step 2009042006
-        if ($CFG->texteditors !== 'textarea') {
-            $data['intro']       = text_to_html($data['intro'], false, false, true);
-            $data['introformat'] = FORMAT_HTML;
-        }
-
-        // get a fresh new file manager for this instance
-        $this->fileman = $this->converter->get_file_manager($contextid, 'mod_groupselect');
-
-        // convert course files embedded into the intro
-        $this->fileman->filearea = 'intro';
-        $this->fileman->itemid   = 0;
-        $data['intro'] = moodle1_converter::migrate_referenced_files($data['intro'], $this->fileman);
-
-        // start writing groupselect.xml
-        $this->open_xml_writer("activities/groupselect_{$this->moduleid}/groupselect.xml");
-        $this->xmlwriter->begin_tag('activity', array('id' => $instanceid, 'moduleid' => $this->moduleid,
-            'modulename' => 'groupselect', 'contextid' => $contextid));
-        $this->xmlwriter->begin_tag('groupselect', array('id' => $instanceid));
-
-        foreach ($data as $field => $value) {
-            if ($field <> 'id') {
-                $this->xmlwriter->full_tag($field, $value);
-            }
-        }
-    }
-
-    /**
-     * This is executed when we reach the closing </MOD> tag of our 'groupselect' path
-     */
-    public function on_groupselect_end() {
-        // finalize groupselect.xml
-        $this->xmlwriter->end_tag('groupselect');
-        $this->xmlwriter->end_tag('activity');
-        $this->close_xml_writer();
-
-        // write inforef.xml
-        $this->open_xml_writer("activities/groupselect_{$this->moduleid}/inforef.xml");
-        $this->xmlwriter->begin_tag('inforef');
-        $this->xmlwriter->begin_tag('fileref');
-        foreach ($this->fileman->get_fileids() as $fileid) {
-            $this->write_xml('file', array('id' => $fileid));
-        }
-        $this->xmlwriter->end_tag('fileref');
-        $this->xmlwriter->end_tag('inforef');
-        $this->close_xml_writer();
-    }
-}
diff --git a/mod/groupselect/backup/moodle2/backup_groupselect_activity_task.class.php b/mod/groupselect/backup/moodle2/backup_groupselect_activity_task.class.php
deleted file mode 100644
index 7ca60b9..0000000
--- a/mod/groupselect/backup/moodle2/backup_groupselect_activity_task.class.php
+++ /dev/null
@@ -1,68 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * @package    mod
- * @subpackage groupselect
- * @copyright  2011 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-require_once($CFG->dirroot . '/mod/groupselect/backup/moodle2/backup_groupselect_stepslib.php'); // Because it exists (must)
-
-/**
- * groupselect backup task that provides all the settings and steps to perform one
- * complete backup of the activity
- */
-class backup_groupselect_activity_task extends backup_activity_task {
-
-    /**
-     * Define (add) particular settings this activity can have
-     */
-    protected function define_my_settings() {
-        // No particular settings for this activity
-    }
-
-    /**
-     * Define (add) particular steps this activity can have
-     */
-    protected function define_my_steps() {
-        // Choice only has one structure step
-        $this->add_step(new backup_groupselect_activity_structure_step('groupselect_structure', 'groupselect.xml'));
-    }
-
-    /**
-     * Code the transformations to perform in the activity in
-     * order to get transportable (encoded) links
-     */
-    static public function encode_content_links($content) {
-        global $CFG;
-
-        $base = preg_quote($CFG->wwwroot, "/");
-
-        // Link to the list of groupselects
-        $search = "/(".$base."\/mod\/groupselect\/index.php\?id\=)([0-9]+)/";
-        $content = preg_replace($search, '$@GROUPSELECTINDEX*$2@$', $content);
-
-        // Link to groupselect view by moduleid
-        $search = "/(".$base."\/mod\/groupselect\/view.php\?id\=)([0-9]+)/";
-        $content = preg_replace($search, '$@GROUPSELECTVIEWBYID*$2@$', $content);
-
-        return $content;
-    }
-}
diff --git a/mod/groupselect/backup/moodle2/backup_groupselect_stepslib.php b/mod/groupselect/backup/moodle2/backup_groupselect_stepslib.php
deleted file mode 100644
index 197e1d1..0000000
--- a/mod/groupselect/backup/moodle2/backup_groupselect_stepslib.php
+++ /dev/null
@@ -1,82 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Define all the backup steps that will be used by the backup_groupselect_activity_task
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2011 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-/**
- * Define the complete groupselect structure for backup, with file and id annotations
- */
-class backup_groupselect_activity_structure_step extends backup_activity_structure_step {
-
-    protected function define_structure() {
-
-        // To know if we are including userinfo
-        $userinfo = $this->get_setting_value('userinfo');
-
-        // Define each element separated
-        $groupselect = new backup_nested_element('groupselect', array('id'), array(
-            'name', 'intro', 'introformat', 'targetgrouping', 'maxmembers', 'timeavailable', 'timedue',
-            'timecreated', 'timemodified', 'hidefullgroups', 'deleteemptygroups',
-            'studentcancreate', 'minmembers', 'assignteachers', 'studentcansetdesc',
-            'showassignedteacher', 'studentcansetenrolmentkey', 'studentcansetgroupname',
-            'notifyexpiredselection'
-        ));
-
-        $passwords = new backup_nested_element('passwords');
-
-        $password = new backup_nested_element('password', array('id'), array(
-                'groupid', 'password'));
-
-        $groupteachers = new backup_nested_element('groupteachers');
-
-        $groupteacher = new backup_nested_element('groupteacher', array('id'), array(
-                'groupid', 'teacherid'));
-
-        // Build the tree
-        $groupselect->add_child($passwords);
-        $passwords->add_child($password);
-        $groupselect->add_child($groupteachers);
-        $groupteachers->add_child($groupteacher);
-
-        // Define sources
-        $groupselect->set_source_table('groupselect', array('id' => backup::VAR_ACTIVITYID));
-        $password->set_source_table('groupselect_passwords', array('instance_id' => backup::VAR_ACTIVITYID));
-        if ($userinfo) {
-            $groupteacher->set_source_table('groupselect_groups_teachers', array('instance_id' => backup::VAR_ACTIVITYID));
-        }
-
-        // Define id annotations
-        $groupselect->annotate_ids('grouping', 'targetgrouping');
-        $password->annotate_ids('group', 'groupid');
-        $groupteacher->annotate_ids('group', 'groupid');
-        $groupteacher->annotate_ids('user', 'teacherid');
-
-        // Define file annotations
-        $groupselect->annotate_files('mod_groupselect', 'intro', null); // This file areas haven't itemid
-
-        // Return the root element (groupselect), wrapped into standard activity structure
-        return $this->prepare_activity_structure($groupselect);
-    }
-}
diff --git a/mod/groupselect/backup/moodle2/restore_groupselect_activity_task.class.php b/mod/groupselect/backup/moodle2/restore_groupselect_activity_task.class.php
deleted file mode 100644
index 9304826..0000000
--- a/mod/groupselect/backup/moodle2/restore_groupselect_activity_task.class.php
+++ /dev/null
@@ -1,110 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * @package    mod
- * @subpackage groupselect
- * @copyright  2011 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die();
-
-require_once($CFG->dirroot . '/mod/groupselect/backup/moodle2/restore_groupselect_stepslib.php'); // Because it exists (must)
-
-/**
- * groupselect restore task that provides all the settings and steps to perform one
- * complete restore of the activity
- */
-class restore_groupselect_activity_task extends restore_activity_task {
-
-    /**
-     * Define (add) particular settings this activity can have
-     */
-    protected function define_my_settings() {
-        // No particular settings for this activity
-    }
-
-    /**
-     * Define (add) particular steps this activity can have
-     */
-    protected function define_my_steps() {
-        // label only has one structure step
-        $this->add_step(new restore_groupselect_activity_structure_step('groupselect_structure', 'groupselect.xml'));
-    }
-
-    /**
-     * Define the contents in the activity that must be
-     * processed by the link decoder
-     */
-    static public function define_decode_contents() {
-        $contents = array();
-
-        $contents[] = new restore_decode_content('groupselect', array('intro'), 'groupselect');
-
-        return $contents;
-    }
-
-    /**
-     * Define the decoding rules for links belonging
-     * to the activity to be executed by the link decoder
-     */
-    static public function define_decode_rules() {
-        $rules = array();
-
-        $rules[] = new restore_decode_rule('GROUPSELECTVIEWBYID', '/mod/groupselect/view.php?id=$1', 'course_module');
-        $rules[] = new restore_decode_rule('GROUPSELECTINDEX', '/mod/groupselect/index.php?id=$1', 'course');
-
-        return $rules;
-
-    }
-
-    /**
-     * Define the restore log rules that will be applied
-     * by the {@link restore_logs_processor} when restoring
-     * groupselect logs. It must return one array
-     * of {@link restore_log_rule} objects
-     */
-    static public function define_restore_log_rules() {
-        $rules = array();
-
-        $rules[] = new restore_log_rule('groupselect', 'select', 'view.php?id={course_module}', '{groupselect}');
-        $rules[] = new restore_log_rule('groupselect', 'unselect', 'view.php?id={course_module}', '{groupselect}');
-        $rules[] = new restore_log_rule('groupselect', 'add', 'view.php?id={course_module}', '{groupselect}');
-        $rules[] = new restore_log_rule('groupselect', 'update', 'view.php?id={course_module}', '{groupselect}');
-        $rules[] = new restore_log_rule('groupselect', 'view', 'view.php?id={course_module}', '{groupselect}');
-
-        return $rules;
-    }
-
-    /**
-     * Define the restore log rules that will be applied
-     * by the {@link restore_logs_processor} when restoring
-     * course logs. It must return one array
-     * of {@link restore_log_rule} objects
-     *
-     * Note this rules are applied when restoring course logs
-     * by the restore final task, but are defined here at
-     * activity level. All them are rules not linked to any module instance (cmid = 0)
-     */
-    static public function define_restore_log_rules_for_course() {
-        $rules = array();
-
-        $rules[] = new restore_log_rule('groupselect', 'view all', 'index.php?id={course}', null);
-
-        return $rules;
-    }
-}
diff --git a/mod/groupselect/backup/moodle2/restore_groupselect_stepslib.php b/mod/groupselect/backup/moodle2/restore_groupselect_stepslib.php
deleted file mode 100644
index 1bff746..0000000
--- a/mod/groupselect/backup/moodle2/restore_groupselect_stepslib.php
+++ /dev/null
@@ -1,111 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Define all the restore steps that will be used by the restore_groupselect_activity_task
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2011 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die();
-
-/**
- * Structure step to restore one groupselect activity
- */
-class restore_groupselect_activity_structure_step extends restore_activity_structure_step {
-
-    protected function define_structure() {
-
-        $paths = array();
-        $userinfo = $this->get_setting_value('userinfo');
-
-        $paths[] = new restore_path_element('groupselect', '/activity/groupselect');
-        if ($userinfo) {
-            $paths[] = new restore_path_element('groupselect_groups_teachers', '/activity/groupselect/groupteachers/groupteacher');
-        }
-        $paths[] = new restore_path_element('groupselect_passwords', '/activity/groupselect/passwords/password');
-
-        // Return the paths wrapped into standard activity structure
-        return $this->prepare_activity_structure($paths);
-    }
-
-    protected function process_groupselect($data) {
-        global $DB;
-
-        $data = (object)$data;
-        $oldid = $data->id;
-        $data->course = $this->get_courseid();
-
-        $data->timeavailable = $this->apply_date_offset($data->timeavailable);
-        $data->timedue = $this->apply_date_offset($data->timedue);
-        $data->timecreated = $this->apply_date_offset($data->timecreated);
-        $data->timemodified = $this->apply_date_offset($data->timemodified);
-
-        if (!empty($data->targetgrouping)) {
-            $data->targetgrouping = $this->get_mappingid('grouping', $data->targetgrouping);
-        }
-
-        // insert the groupselect record
-        $newitemid = $DB->insert_record('groupselect', $data);
-
-        $this->set_mapping('groupselect', $oldid, $newitemid, true);
-
-        // immediately after inserting "activity" record, call this
-        $this->apply_activity_instance($newitemid);
-    }
-
-    protected function process_groupselect_groups_teachers($data) {
-        global $DB;
-
-        $data = (object)$data;
-        $oldid = $data->id;
-        $data->instance_id = $this->get_new_parentid('groupselect');
-
-        $data->teacherid = $this->get_mappingid('user', $data->teacherid);
-        $data->groupid = $this->get_mappingid('group', $data->groupid);
-
-        // insert the groupselect record
-        if ($data->groupid && $data->teacherid) {
-            $newitemid = $DB->insert_record('groupselect_groups_teachers', $data);
-            $this->set_mapping('groupselect_groups_teacher', $oldid, $newitemid, true);
-        }
-    }
-
-    protected function process_groupselect_passwords($data) {
-        global $DB;
-
-        $data = (object)$data;
-        $oldid = $data->id;
-        $data->instance_id = $this->get_new_parentid('groupselect');
-
-        $data->groupid = $this->get_mappingid('group', $data->groupid);
-
-        // insert the groupselect record
-        if ($data->groupid) {
-            $newitemid = $DB->insert_record('groupselect_passwords', $data);
-            $this->set_mapping('groupselect_password', $oldid, $newitemid, true);
-        }
-
-    }
-
-    protected function after_execute() {
-        // Add groupselect related files, no need to match by itemname (just internally handled context)
-        $this->add_related_files('mod_groupselect', 'intro', null);
-    }
-}
diff --git a/mod/groupselect/classes/event/course_module_instance_list_viewed.php b/mod/groupselect/classes/event/course_module_instance_list_viewed.php
deleted file mode 100644
index 390ac42..0000000
--- a/mod/groupselect/classes/event/course_module_instance_list_viewed.php
+++ /dev/null
@@ -1,7 +0,0 @@
-<?php
-
-namespace mod_groupselect\event;
-defined('MOODLE_INTERNAL') || die();
-class course_module_instance_list_viewed extends \core\event\course_module_instance_list_viewed {
-}
-
diff --git a/mod/groupselect/classes/event/course_module_viewed.php b/mod/groupselect/classes/event/course_module_viewed.php
deleted file mode 100644
index fe99856..0000000
--- a/mod/groupselect/classes/event/course_module_viewed.php
+++ /dev/null
@@ -1,38 +0,0 @@
-<?php
-
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle. If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Group self selection - course module viewed event
- *
- * @package mod
- * @subpackage groupselect
- * @copyright 2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-
-namespace mod_groupselect\event;
-defined('MOODLE_INTERNAL') || die();
-
-class course_module_viewed extends \core\event\course_module_viewed
-{
-    protected function init() {
-        $this->data['objecttable'] = 'groupselect';
-        parent::init();
-    }
-}
-
diff --git a/mod/groupselect/classes/event/export_link_created.php b/mod/groupselect/classes/event/export_link_created.php
deleted file mode 100644
index 3cccf74..0000000
--- a/mod/groupselect/classes/event/export_link_created.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * The export_link_created event.
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2016 HTW Chur Roger Barras
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-namespace mod_groupselect\event;
-defined('MOODLE_INTERNAL') || die();
-/**
- * The export_link_created event class.
- *
- *
- * @since     Moodle 2.9
- * @copyright 2016 HTW Chur Roger Barras
- * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- **/
-class export_link_created extends \core\event\base {
-    protected function init() {
-        $this->data['crud'] = 'c'; // c(reate), r(ead), u(pdate), d(elete)
-        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
-    }
-
-    public static function get_name() {
-        return get_string('eventexportlinkcreated', 'mod_groupselect');
-    }
-
-    public function get_description() {
-        return "The user with id '$this->userid' created a download link " .
-                "for the groupselect with the course module id '$this->contextinstanceid'";
-    }
-
-    public function get_url() {
-        return new \moodle_url('/mod/groupselect/view.php', array('id' => $this->contextinstanceid));
-    }
-
-}
diff --git a/mod/groupselect/classes/event/group_teacher_added.php b/mod/groupselect/classes/event/group_teacher_added.php
deleted file mode 100644
index 45f26ec..0000000
--- a/mod/groupselect/classes/event/group_teacher_added.php
+++ /dev/null
@@ -1,71 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * The group_teacher_added event.
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2016 HTW Chur Roger Barras
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-namespace mod_groupselect\event;
-defined('MOODLE_INTERNAL') || die();
-/**
- * The group_teacher_added event class.
- *
- * @property-read array $other {
- *      Extra information about event.
- *
- *      - int groupid: id of the group
- * }
- *
- * @since     Moodle 2.9
- * @copyright 2016 HTW Chur Roger Barras
- * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- **/
-class group_teacher_added extends \core\event\base {
-    protected function init() {
-        $this->data['crud'] = 'c'; // c(reate), r(ead), u(pdate), d(elete)
-        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
-        $this->data['objecttable'] = 'groupselect_groups_teachers';
-    }
-
-    public static function get_name() {
-        return get_string('eventgroupteacheradded', 'mod_groupselect');
-    }
-
-    public function get_description() {
-        return "The user with id '$this->userid' added the non editing teacher user with id '$this->relateduserid' " .
-                "to the groupselect with the course module id '$this->contextinstanceid' and group id '{$this->objectid}'";
-    }
-
-    public function get_url() {
-        return new \moodle_url('/mod/groupselect/view.php', array('id' => $this->contextinstanceid));
-    }
-
-
-    public static function get_objectid_mapping() {
-        return array('db' => 'groupselect_groups_teachers', 'restore' => 'groupselect_groups_teacher');
-    }
-
-    public static function get_other_mapping() {
-        $othermapped = array();
-        $othermapped['groupid'] = array('db' => 'group', 'restore' => 'group');
-
-        return $othermapped;
-    }
-}
diff --git a/mod/groupselect/create_form.php b/mod/groupselect/create_form.php
deleted file mode 100644
index e58546e..0000000
--- a/mod/groupselect/create_form.php
+++ /dev/null
@@ -1,95 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Group self selection - group creation form
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-require_once($CFG->dirroot.'/lib/formslib.php');
-
-class create_form extends moodleform {
-
-    const DESCRIPTION_MAXLEN = 1024;
-    const PASSWORD_MAXLEN = 254;
-    const GROUP_NAME_MAXLEN = 254;
-
-    public function definition() {
-
-        $mform = $this->_form;
-        list($data, $this->groupselect) = $this->_customdata;
-
-        $mform->addElement('hidden', 'id');
-        $mform->setType('id', PARAM_INT);
-
-        if ($this->groupselect->studentcansetgroupname) {
-            $mform->addElement('text', 'groupname', get_string('groupname', 'group'), array('size' => '100', 'maxlength' => self::GROUP_NAME_MAXLEN - 1));
-        } else {
-            $mform->addElement('hidden', 'groupname', '');
-        }
-        $mform->setType('groupname', PARAM_TEXT);
-
-
-        if ($this->groupselect->studentcansetdesc) {
-            $mform->addElement('textarea', 'description', get_string('description', 'mod_groupselect'),
-                array('wrap' => 'virtual', 'maxlength' => self::DESCRIPTION_MAXLEN - 1, 'rows' => '3', 'cols' => '25', ''));
-        } else {
-            $mform->addElement('hidden', 'description', '');
-        }
-        $mform->setType('description', PARAM_NOTAGS);
-
-        if ($this->groupselect->studentcansetenrolmentkey) {
-            $mform->addElement('passwordunmask', 'password', get_string('password'), array('maxlength' => self::PASSWORD_MAXLEN - 1, 'size' => "24"));
-        } else {
-            $mform->addElement('hidden', 'password', '');
-        }
-        $mform->setType('password', PARAM_RAW);
-
-        $this->add_action_buttons(true, get_string('creategroup', 'mod_groupselect'));
-        $this->set_data($data);
-
-
-    }
-
-    public function validation($data, $files) {
-        global $COURSE;
-
-        $errors = parent::validation($data, $files);
-
-        $description = $data['description'];
-        if (strlen($description) > self::DESCRIPTION_MAXLEN) {
-            $errors['description'] = get_string('maxcharlenreached', 'mod_groupselect');
-        }
-        $password = $data['password'];
-        if (strlen($password) > self::PASSWORD_MAXLEN) {
-            $errors['password'] = get_string('maxcharlenreached', 'mod_groupselect');
-        }
-        $groupname = $data['groupname'];
-        if (strlen($groupname) > self::GROUP_NAME_MAXLEN) {
-            $errors['groupname'] = get_string('maxcharlenreached', 'mod_groupselect');
-        }
-        if (groups_get_group_by_name($COURSE->id, $groupname)) {
-            $errors['groupname'] = get_string('groupnameexists', 'group', $groupname);
-        }
-        return $errors;
-    }
-}
diff --git a/mod/groupselect/db/access.php b/mod/groupselect/db/access.php
deleted file mode 100644
index 6583abd..0000000
--- a/mod/groupselect/db/access.php
+++ /dev/null
@@ -1,82 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Page module capability definition
- *
- * @package mod
- * @subpackage groupselect
- * @copyright 2011 Petr Skoda (http://skodak.org)
- * @copyright 2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-defined('MOODLE_INTERNAL') || die();
-
-$capabilities = array(
-        'mod/groupselect:addinstance' => array(
-                'riskbitmask' => RISK_XSS,
-                'captype' => 'write',
-                'contextlevel' => CONTEXT_COURSE,
-                'archetypes' => array(
-                        'editingteacher' => CAP_ALLOW,
-                        'manager' => CAP_ALLOW
-                ),
-                'clonepermissionsfrom' => 'moodle/course:manageactivities'
-        ),
-
-        'mod/groupselect:create' => array(
-                'riskbitmask' => RISK_XSS,
-                'captype' => 'write',
-                'contextlevel' => CONTEXT_MODULE,
-                'archetypes' => array(
-                        'student' => CAP_ALLOW
-                )
-        ),
-
-        'mod/groupselect:select' => array(
-                'captype' => 'write',
-                'contextlevel' => CONTEXT_MODULE,
-                'archetypes' => array(
-                        'student' => CAP_ALLOW
-                )
-        ),
-
-        'mod/groupselect:unselect' => array(
-                'captype' => 'write',
-                'contextlevel' => CONTEXT_MODULE,
-                'archetypes' => array(
-                        'student' => CAP_ALLOW
-                )
-        ),
-
-        'mod/groupselect:export' => array(
-                'riskbitmask' => RISK_PERSONAL,
-                    'captype' => 'read',
-                'contextlevel' => CONTEXT_MODULE,
-                'archetypes' => array(
-                        'manager' => CAP_ALLOW,
-                        'editingteacher' => CAP_ALLOW
-                )
-        ),
-        'mod/groupselect:assign' => array(
-                'captype' => 'write',
-                'contextlevel' => CONTEXT_MODULE,
-                'archetypes' => array(
-                        'manager' => CAP_ALLOW,
-                        'editingteacher' => CAP_ALLOW
-                )
-        ),
-);
diff --git a/mod/groupselect/db/install.xml b/mod/groupselect/db/install.xml
deleted file mode 100644
index d3e33c2..0000000
--- a/mod/groupselect/db/install.xml
+++ /dev/null
@@ -1,63 +0,0 @@
-<?xml version="1.0" encoding="UTF-8" ?>
-<XMLDB PATH="mod/groupselect/db" VERSION="2017061207" COMMENT="XMLDB file for Moodle mod/groupselect"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:noNamespaceSchemaLocation="../../../lib/xmldb/xmldb.xsd"
->
-  <TABLES>
-    <TABLE NAME="groupselect" COMMENT="Defines groupselects">
-      <FIELDS>
-        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
-        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
-        <FIELD NAME="intro" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="The introductory text desplayed on the view.php page."/>
-        <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="targetgrouping" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="ID of grouping the selection may be done from or zero if not limited"/>
-        <FIELD NAME="maxmembers" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="timeavailable" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="timedue" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="When the instance was created"/>
-        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="hidefullgroups" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="deleteemptygroups" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
-        <FIELD NAME="studentcancreate" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
-        <FIELD NAME="minmembers" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="assignteachers" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="studentcansetdesc" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
-        <FIELD NAME="showassignedteacher" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="studentcansetenrolmentkey" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
-        <FIELD NAME="studentcansetgroupname" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
-        <FIELD NAME="notifyexpiredselection" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
-        <FIELD NAME="supervisionrole" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
-        <FIELD NAME="maxgroupmembership" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
-      </FIELDS>
-      <KEYS>
-        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
-      </KEYS>
-      <INDEXES>
-        <INDEX NAME="course" UNIQUE="false" FIELDS="course"/>
-      </INDEXES>
-    </TABLE>
-    <TABLE NAME="groupselect_passwords" COMMENT="Stores password hashes of groups">
-      <FIELDS>
-        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
-        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
-        <FIELD NAME="password" TYPE="char" LENGTH="60" NOTNULL="true" SEQUENCE="false"/>
-        <FIELD NAME="instance_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="groupselect instance id"/>
-      </FIELDS>
-      <KEYS>
-        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
-      </KEYS>
-    </TABLE>
-    <TABLE NAME="groupselect_groups_teachers" COMMENT="Stores group-teacher relations">
-      <FIELDS>
-        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
-        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
-        <FIELD NAME="teacherid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
-        <FIELD NAME="instance_id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
-      </FIELDS>
-      <KEYS>
-        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
-      </KEYS>
-    </TABLE>
-  </TABLES>
-</XMLDB>
diff --git a/mod/groupselect/db/log.php b/mod/groupselect/db/log.php
deleted file mode 100644
index b6cb4a7..0000000
--- a/mod/groupselect/db/log.php
+++ /dev/null
@@ -1,35 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Definition of log events
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2011 Petr Skoda (http://skodak.org)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die();
-
-$logs = array(
-    array('module' => 'groupselect', 'action' => 'select', 'mtable' => 'groupselect', 'field' => 'name'),
-    array('module' => 'groupselect', 'action' => 'unselect', 'mtable' => 'groupselect', 'field' => 'name'),
-    array('module' => 'groupselect', 'action' => 'view', 'mtable' => 'groupselect', 'field' => 'name'),
-    array('module' => 'groupselect', 'action' => 'view all', 'mtable' => 'groupselect', 'field' => 'name'),
-    array('module' => 'groupselect', 'action' => 'update', 'mtable' => 'groupselect', 'field' => 'name'),
-    array('module' => 'groupselect', 'action' => 'add', 'mtable' => 'groupselect', 'field' => 'name'),
-);
\ No newline at end of file
diff --git a/mod/groupselect/db/upgrade.php b/mod/groupselect/db/upgrade.php
deleted file mode 100644
index e743408..0000000
--- a/mod/groupselect/db/upgrade.php
+++ /dev/null
@@ -1,260 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Group self selection interface
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2008-2011 Petr Skoda (http://skodak.org)
- * @copyright  2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-function xmldb_groupselect_upgrade($oldversion) {
-    global $DB;
-
-    $dbman = $DB->get_manager();
-
-    if ($oldversion < 2009020600) {
-        $table = new xmldb_table('groupselect');
-
-        // Define field timecreated to be added to groupselect
-        $fieldtimecreatednew = new xmldb_field('timecreated', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0', 'timedue');
-
-        // Conditionally launch add temporary fields
-        if (!$dbman->field_exists($table, $fieldtimecreatednew)) {
-            $dbman->add_field($table, $fieldtimecreatednew);
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2009020600, 'groupselect');
-
-    }
-
-    if ($oldversion < 2009030500) {
-
-        // Define field targetgrouping to be added to groupselect
-        $table = new xmldb_table('groupselect');
-        $fieldtargetgroupingnew = new xmldb_field('targetgrouping', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, null, '0', 'intro');
-        // Conditionally launch adding fields
-        if (!$dbman->field_exists($table, $fieldtargetgroupingnew)) {
-            $dbman->add_field($table, $fieldtargetgroupingnew);
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2009030500, 'groupselect');
-
-    }
-
-    // ==== Moodle 2.0 upgrade line =====
-
-    if ($oldversion < 2010010100) {
-        // Define field introformat to be added to groupselect
-        $table = new xmldb_table('groupselect');
-        $field = new xmldb_field('introformat', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', 'intro');
-
-        // Launch add field introformat
-        if (!$dbman->field_exists($table, $field)) {
-            $dbman->add_field($table, $field);
-        }
-
-        $DB->set_field('groupselect', 'introformat', FORMAT_HTML, array());
-
-        // groupselect savepoint reached
-        upgrade_mod_savepoint(true, 2010010100, 'groupselect');
-    }
-
-    if ($oldversion < 2010010102) {
-        $table = new xmldb_table('groupselect');
-
-        // Define field signuptype to be added to groupselect
-        $fieldsignuptype = new xmldb_field('signuptype', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, null, '0', 'targetgrouping');
-
-        // Conditionally launch removing fields
-        if ($dbman->field_exists($table, $fieldsignuptype)) {
-            $dbman->drop_field($table, $fieldsignuptype);
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2010010102, 'groupselect');
-
-    }
-
-    if ($oldversion < 2011101800) {
-        $table = new xmldb_table('groupselect');
-        $field = new xmldb_field('intro', XMLDB_TYPE_TEXT, 'big', null, XMLDB_NOTNULL, null, null, 'name');
-
-        // Make text field bigger
-        $dbman->change_field_precision($table, $field);
-
-        // savepoint reached
-        upgrade_mod_savepoint(true, 2011101800, 'groupselect');
-    }
-    // Group self-formation update
-    if ($oldversion < 2014090201) {
-
-        // Update module settings table
-        $table = new xmldb_table('groupselect');
-        $fields[] = new xmldb_field('hidefullgroups', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'timemodified');
-        $fields[] = new xmldb_field('deleteemptygroups', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '1', 'hidefullgroups');
-        $fields[] = new xmldb_field('studentcancreate', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '1', 'deleteemptygroups');
-        $fields[] = new xmldb_field('minmembers', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'studentcancreate');
-        $fields[] = new xmldb_field('assignteachers', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'minmembers');
-        $fields[] = new xmldb_field('studentcansetdesc', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '1', 'assignteachers');
-        $fields[] = new xmldb_field('showassignedteacher', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'studentcansetdesc');
-
-        foreach ($fields as $field) {
-            if (!$dbman->field_exists($table, $field)) {
-                $dbman->add_field($table, $field);
-            }
-        }
-
-        // Add a new table for group passwords
-        $table = new xmldb_table('groupselect_passwords');
-        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null);
-        $table->add_field('groupid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, 'id');
-        $table->add_field('password', XMLDB_TYPE_CHAR, '60', null, XMLDB_NOTNULL, null, null, 'groupid');
-        $table->add_field('instance_id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, 'password');
-        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
-
-        if (!$dbman->table_exists($table)) {
-            $dbman->create_table($table);
-        }
-
-        // Add a new table for group-teacher relations
-        $table = new xmldb_table('groupselect_groups_teachers');
-        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, XMLDB_SEQUENCE, null, null);
-        $table->add_field('groupid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, 'id');
-        $table->add_field('teacherid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, 'groupid');
-        $table->add_field('instance_id', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, null, 'teacherid');
-        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
-
-        if (!$dbman->table_exists($table)) {
-            $dbman->create_table($table);
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2014090201, 'groupselect');
-    }
-
-    if ($oldversion < 2015032500) {
-        $table = new xmldb_table('groupselect');
-        $field = new xmldb_field('password', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, null, 'maxmembers');
-        if ($dbman->table_exists( $table ) and $dbman->field_exists($table, $field)) {
-             $dbman->drop_field($table, $field);
-        }
-
-        upgrade_mod_savepoint(true, 2015032500, 'groupselect');
-    }
-
-    if ($oldversion < 2016060200) {
-
-        // update wrong instace_ids
-        $table = new xmldb_table('groupselect_groups_teachers');
-        if ($dbman->table_exists( $table )) {
-            $gsteachers = $DB->get_records('groupselect_groups_teachers');
-
-            foreach ($gsteachers as $gsteacher) {
-                $coursemodule = $DB->get_record('course_modules', array('id' => $gsteacher->instance_id));
-                if (isset($coursemodule->instance)) {
-                    $gsteacher->instance_id = $coursemodule->instance;
-                    $DB->update_record('groupselect_groups_teachers', $gsteacher, $bulk = false);
-                } else {
-                    $DB->delete_records('groupselect_groups_teachers', array('id' => $gsteacher->id));
-                }
-            }
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2016060200, 'groupselect');
-    }
-    if ($oldversion < 2016060603) {
-
-        // Update module settings table
-        $fields = array();
-        $table = new xmldb_table('groupselect');
-        $fields[] = new xmldb_field('studentcansetenrolmentkey', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'showassignedteacher');
-        $fields[] = new xmldb_field('studentcansetgroupname', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '1', 'studentcansetenrolmentkey');
-
-        foreach ($fields as $field) {
-            if (!$dbman->field_exists($table, $field)) {
-                $dbman->add_field($table, $field);
-            }
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2016060603, 'groupselect');
-    }
-    if ($oldversion < 2016061100) {
-
-        // Update module settings table
-        $fields = array();
-        $table = new xmldb_table('groupselect');
-        $fields[] = new xmldb_field('notifyexpiredselection', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '1', 'studentcansetgroupname');
-
-        foreach ($fields as $field) {
-            if (!$dbman->field_exists($table, $field)) {
-                $dbman->add_field($table, $field);
-            }
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2016061100, 'groupselect');
-    }
-
-    if ($oldversion < 2017061205) {
-
-        // get default teacher role
-        $teacherRole = $DB->get_record( 'role', array (
-            'shortname' => "teacher"
-        ), '*', MUST_EXIST );
-
-        // Update module settings table
-        $fields = array();
-        $table = new xmldb_table('groupselect');
-        $fields[] = new xmldb_field('supervisionrole', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, $teacherRole->id, 'notifyexpiredselection');
-
-        foreach ($fields as $field) {
-            if (!$dbman->field_exists($table, $field)) {
-                $dbman->add_field($table, $field);
-            }
-        }
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2017061205, 'groupselect');
-    }
-
-    if ($oldversion < 2017061207) {
-
-        // Update module settings table
-        $fields = array();
-        $table = new xmldb_table('groupselect');
-        $fields[] = new xmldb_field('maxgroupmembership', XMLDB_TYPE_INTEGER, 10, null, XMLDB_NOTNULL, null, '1', 'supervisionrole');
-    
-
-        foreach ($fields as $field) {
-            if (!$dbman->field_exists($table, $field)) {
-                $dbman->add_field($table, $field);
-            }
-        }
-
-        // search savepoint reached
-        upgrade_mod_savepoint(true, 2017061207, 'groupselect');
-    }
-    return true;
-}
diff --git a/mod/groupselect/index.php b/mod/groupselect/index.php
deleted file mode 100644
index b3dab44..0000000
--- a/mod/groupselect/index.php
+++ /dev/null
@@ -1,101 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * List of all groupselection modules in course
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2008-2011 Petr Skoda (http://skodak.org)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-require('../../config.php');
-
-$id = required_param('id', PARAM_INT); // course id
-
-$course = $DB->get_record('course', array('id' => $id), '*', MUST_EXIST);
-
-require_course_login($course, true);
-$PAGE->set_pagelayout('incourse');
-
-// add_to_log($course->id, 'groupselect', 'view all', "index.php?id=$course->id", '');
-\mod_groupselect\event\course_module_instance_list_viewed::create(array('context' => context_course::instance($course->id)))->trigger();
-
-$strgroupselect  = get_string('modulename', 'mod_groupselect');
-$strgroupselects = get_string('modulenameplural', 'mod_groupselect');
-$strsectionname  = get_string('sectionname', 'format_'.$course->format);
-$strname         = get_string('name');
-$strintro        = get_string('moduleintro');
-$strlastmodified = get_string('lastmodified');
-
-$PAGE->set_url('/mod/groupselect/index.php', array('id' => $course->id));
-$PAGE->set_title($course->shortname.': '.$strgroupselects);
-$PAGE->set_heading($course->fullname);
-$PAGE->navbar->add($strgroupselects);
-echo $OUTPUT->header();
-
-if (!$groupselects = get_all_instances_in_course('groupselect', $course)) {
-    notice(get_string('thereareno', 'moodle', $strgroupselects), "$CFG->wwwroot/course/view.php?id=$course->id");
-    exit;
-}
-
-$usesections = course_format_uses_sections($course->format);
-if ($usesections) {
-    $sections = get_fast_modinfo($course)->get_section_info_all();
-}
-
-$table = new html_table();
-$table->attributes['class'] = 'generaltable mod_index';
-
-if ($usesections) {
-    $table->head  = array ($strsectionname, $strname, $strintro);
-    $table->align = array ('center', 'left', 'left');
-} else {
-    $table->head  = array ($strlastmodified, $strname, $strintro);
-    $table->align = array ('left', 'left', 'left');
-}
-
-$modinfo = get_fast_modinfo($course);
-$currentsection = '';
-foreach ($groupselects as $groupselect) {
-    $cm = $modinfo->cms[$groupselect->coursemodule];
-    if ($usesections) {
-        $printsection = '';
-        if ($groupselect->section !== $currentsection) {
-            if ($groupselect->section) {
-                $printsection = get_section_name($course, $sections[$groupselect->section]);
-            }
-            if ($currentsection !== '') {
-                $table->data[] = 'hr';
-            }
-            $currentsection = $groupselect->section;
-        }
-    } else {
-        $printsection = '<span class="smallinfo">'.userdate($groupselect->timemodified)."</span>";
-    }
-
-    $class = $groupselect->visible ? '' : 'class="dimmed"'; // hidden modules are dimmed
-
-    $table->data[] = array (
-        $printsection,
-        "<a $class href=\"view.php?id=$cm->id\">".format_string($groupselect->name)."</a>",
-        format_module_intro('groupselect', $groupselect, $cm->id));
-}
-
-echo html_writer::table($table);
-
-echo $OUTPUT->footer();
diff --git a/mod/groupselect/jquery/jeditable/jquery.jeditable.js b/mod/groupselect/jquery/jeditable/jquery.jeditable.js
deleted file mode 100644
index 585332c..0000000
--- a/mod/groupselect/jquery/jeditable/jquery.jeditable.js
+++ /dev/null
@@ -1,546 +0,0 @@
-/*
- * Jeditable - jQuery in place edit plugin
- *
- * Copyright (c) 2006-2013 Mika Tuupola, Dylan Verheul
- *
- * Licensed under the MIT license:
- *   http://www.opensource.org/licenses/mit-license.php
- *
- * Project home:
- *   http://www.appelsiini.net/projects/jeditable
- *
- * Based on editable by Dylan Verheul <dylan_at_dyve.net>:
- *    http://www.dyve.net/jquery/?editable
- *
- */
-
-/**
-  * Version 1.7.3
-  *
-  * ** means there is basic unit tests for this parameter.
-  *
-  * @name  Jeditable
-  * @type  jQuery
-  * @param String  target             (POST) URL or function to send edited content to **
-  * @param Hash    options            additional options
-  * @param String  options[method]    method to use to send edited content (POST or PUT) **
-  * @param Function options[callback] Function to run after submitting edited content **
-  * @param String  options[name]      POST parameter name of edited content
-  * @param String  options[id]        POST parameter name of edited div id
-  * @param Hash    options[submitdata] Extra parameters to send when submitting edited content.
-  * @param String  options[type]      text, textarea or select (or any 3rd party input type) **
-  * @param Integer options[rows]      number of rows if using textarea **
-  * @param Integer options[cols]      number of columns if using textarea **
-  * @param Mixed   options[height]    'auto', 'none' or height in pixels **
-  * @param Mixed   options[width]     'auto', 'none' or width in pixels **
-  * @param String  options[loadurl]   URL to fetch input content before editing **
-  * @param String  options[loadtype]  Request type for load url. Should be GET or POST.
-  * @param String  options[loadtext]  Text to display while loading external content.
-  * @param Mixed   options[loaddata]  Extra parameters to pass when fetching content before editing.
-  * @param Mixed   options[data]      Or content given as paramameter. String or function.**
-  * @param String  options[indicator] indicator html to show when saving
-  * @param String  options[tooltip]   optional tooltip text via title attribute **
-  * @param String  options[event]     jQuery event such as 'click' of 'dblclick' **
-  * @param String  options[submit]    submit button value, empty means no button **
-  * @param String  options[cancel]    cancel button value, empty means no button **
-  * @param String  options[cssclass]  CSS class to apply to input form. 'inherit' to copy from parent. **
-  * @param String  options[style]     Style to apply to input form 'inherit' to copy from parent. **
-  * @param String  options[select]    true or false, when true text is highlighted ??
-  * @param String  options[placeholder] Placeholder text or html to insert when element is empty. **
-  * @param String  options[onblur]    'cancel', 'submit', 'ignore' or function ??
-  *
-  * @param Function options[onsubmit] function(settings, original) { ... } called before submit
-  * @param Function options[onreset]  function(settings, original) { ... } called before reset
-  * @param Function options[onerror]  function(settings, original, xhr) { ... } called on error
-  *
-  * @param Hash    options[ajaxoptions]  jQuery Ajax options. See docs.jquery.com.
-  *
-  */
-
-(function($) {
-
-    $.fn.editable = function(target, options) {
-
-        if ('disable' == target) {
-            $(this).data('disabled.editable', true);
-            return;
-        }
-        if ('enable' == target) {
-            $(this).data('disabled.editable', false);
-            return;
-        }
-        if ('destroy' == target) {
-            $(this)
-                .unbind($(this).data('event.editable'))
-                .removeData('disabled.editable')
-                .removeData('event.editable');
-            return;
-        }
-
-        var settings = $.extend({}, $.fn.editable.defaults, {target:target}, options);
-
-        /* setup some functions */
-        var plugin   = $.editable.types[settings.type].plugin || function() { };
-        var submit   = $.editable.types[settings.type].submit || function() { };
-        var buttons  = $.editable.types[settings.type].buttons
-                    || $.editable.types['defaults'].buttons;
-        var content  = $.editable.types[settings.type].content
-                    || $.editable.types['defaults'].content;
-        var element  = $.editable.types[settings.type].element
-                    || $.editable.types['defaults'].element;
-        var reset    = $.editable.types[settings.type].reset
-                    || $.editable.types['defaults'].reset;
-        var callback = settings.callback || function() { };
-        var onedit   = settings.onedit   || function() { };
-        var onsubmit = settings.onsubmit || function() { };
-        var onreset  = settings.onreset  || function() { };
-        var onerror  = settings.onerror  || reset;
-
-        /* Show tooltip. */
-        if (settings.tooltip) {
-            $(this).attr('title', settings.tooltip);
-        }
-
-        settings.autowidth  = 'auto' == settings.width;
-        settings.autoheight = 'auto' == settings.height;
-
-        return this.each(function() {
-
-            /* Save this to self because this changes when scope changes. */
-            var self = this;
-
-            /* Inlined block elements lose their width and height after first edit. */
-            /* Save them for later use as workaround. */
-            var savedwidth  = $(self).width();
-            var savedheight = $(self).height();
-
-            /* Save so it can be later used by $.editable('destroy') */
-            $(this).data('event.editable', settings.event);
-
-            /* If element is empty add something clickable (if requested) */
-            if (!$.trim($(this).html())) {
-                $(this).html(settings.placeholder);
-            }
-
-            $(this).bind(settings.event, function(e) {
-
-                /* Abort if element is disabled. */
-                if (true === $(this).data('disabled.editable')) {
-                    return;
-                }
-
-                /* Prevent throwing an exeption if edit field is clicked again. */
-                if (self.editing) {
-                    return;
-                }
-
-                /* Abort if onedit hook returns false. */
-                if (false === onedit.apply(this, [settings, self])) {
-                   return;
-                }
-
-                /* Prevent default action and bubbling. */
-                e.preventDefault();
-                e.stopPropagation();
-
-                /* Remove tooltip. */
-                if (settings.tooltip) {
-                    $(self).removeAttr('title');
-                }
-
-                /* Figure out how wide and tall we are, saved width and height. */
-                /* Workaround for http://dev.jquery.com/ticket/2190 */
-                if (0 == $(self).width()) {
-                    settings.width  = savedwidth;
-                    settings.height = savedheight;
-                } else {
-                    if (settings.width != 'none') {
-                        settings.width =
-                            settings.autowidth ? $(self).width()  : settings.width;
-                    }
-                    if (settings.height != 'none') {
-                        settings.height =
-                            settings.autoheight ? $(self).height() : settings.height;
-                    }
-                }
-
-                /* Remove placeholder text, replace is here because of IE. */
-                if ($(this).html().toLowerCase().replace(/(;|"|\/)/g, '') ==
-                    settings.placeholder.toLowerCase().replace(/(;|"|\/)/g, '')) {
-                        $(this).html('');
-                }
-
-                self.editing    = true;
-                self.revert     = $(self).html();
-                $(self).html('');
-
-                /* Create the form object. */
-                var form = $('<form />');
-
-                /* Apply css or style or both. */
-                if (settings.cssclass) {
-                    if ('inherit' == settings.cssclass) {
-                        form.attr('class', $(self).attr('class'));
-                    } else {
-                        form.attr('class', settings.cssclass);
-                    }
-                }
-
-                if (settings.style) {
-                    if ('inherit' == settings.style) {
-                        form.attr('style', $(self).attr('style'));
-                        /* IE needs the second line or display wont be inherited. */
-                        form.css('display', $(self).css('display'));
-                    } else {
-                        form.attr('style', settings.style);
-                    }
-                }
-
-                /* Add main input element to form and store it in input. */
-                var input = element.apply(form, [settings, self]);
-
-                /* Set input content via POST, GET, given data or existing value. */
-                var input_content;
-
-                if (settings.loadurl) {
-                    var t = setTimeout(function() {
-                        input.disabled = true;
-                        content.apply(form, [settings.loadtext, settings, self]);
-                    }, 100);
-
-                    var loaddata = {};
-                    loaddata[settings.id] = self.id;
-                    if ($.isFunction(settings.loaddata)) {
-                        $.extend(loaddata, settings.loaddata.apply(self, [self.revert, settings]));
-                    } else {
-                        $.extend(loaddata, settings.loaddata);
-                    }
-                    $.ajax({
-                       type : settings.loadtype,
-                       url  : settings.loadurl,
-                       data : loaddata,
-                       async : false,
-                       success: function(result) {
-                          window.clearTimeout(t);
-                          input_content = result;
-                          input.disabled = false;
-                       }
-                    });
-                } else if (settings.data) {
-                    input_content = settings.data;
-                    if ($.isFunction(settings.data)) {
-                        input_content = settings.data.apply(self, [self.revert, settings]);
-                    }
-                } else {
-                    input_content = self.revert;
-                }
-                content.apply(form, [input_content, settings, self]);
-
-                input.attr('name', settings.name);
-
-                /* Add buttons to the form. */
-                buttons.apply(form, [settings, self]);
-
-                /* Add created form to self. */
-                $(self).append(form);
-
-                /* Attach 3rd party plugin if requested. */
-                plugin.apply(form, [settings, self]);
-
-                /* Focus to first visible form element. */
-                $(':input:visible:enabled:first', form).focus();
-
-                /* Highlight input contents when requested. */
-                if (settings.select) {
-                    input.select();
-                }
-
-                /* discard changes if pressing esc */
-                input.keydown(function(e) {
-                    if (e.keyCode == 27) {
-                        e.preventDefault();
-                        reset.apply(form, [settings, self]);
-                    }
-                });
-
-                /* Discard, submit or nothing with changes when clicking outside. */
-                /* Do nothing is usable when navigating with tab. */
-                var t;
-                if ('cancel' == settings.onblur) {
-                    input.blur(function(e) {
-                        /* Prevent canceling if submit was clicked. */
-                        t = setTimeout(function() {
-                            reset.apply(form, [settings, self]);
-                        }, 500);
-                    });
-                } else if ('submit' == settings.onblur) {
-                    input.blur(function(e) {
-                        /* Prevent double submit if submit was clicked. */
-                        t = setTimeout(function() {
-                            form.submit();
-                        }, 200);
-                    });
-                } else if ($.isFunction(settings.onblur)) {
-                    input.blur(function(e) {
-                        settings.onblur.apply(self, [input.val(), settings]);
-                    });
-                } else {
-                    input.blur(function(e) {
-                      /* TODO: maybe something here */
-                    });
-                }
-
-                form.submit(function(e) {
-
-                    if (t) {
-                        clearTimeout(t);
-                    }
-
-                    /* Do no submit. */
-                    e.preventDefault();
-
-                    /* Call before submit hook. */
-                    /* If it returns false abort submitting. */
-                    if (false !== onsubmit.apply(form, [settings, self])) {
-                        /* Custom inputs call before submit hook. */
-                        /* If it returns false abort submitting. */
-                        if (false !== submit.apply(form, [settings, self])) {
-
-                          /* Check if given target is function */
-                          if ($.isFunction(settings.target)) {
-                              var str = settings.target.apply(self, [input.val(), settings]);
-                              $(self).html(str);
-                              self.editing = false;
-                              callback.apply(self, [self.innerHTML, settings]);
-                              /* TODO: this is not dry */
-                              if (!$.trim($(self).html())) {
-                                  $(self).html(settings.placeholder);
-                              }
-                          } else {
-                              /* Add edited content and id of edited element to POST. */
-                              var submitdata = {};
-                              submitdata[settings.name] = input.val();
-                              submitdata[settings.id] = self.id;
-                              /* Add extra data to be POST:ed. */
-                              if ($.isFunction(settings.submitdata)) {
-                                  $.extend(submitdata, settings.submitdata.apply(self, [self.revert, settings]));
-                              } else {
-                                  $.extend(submitdata, settings.submitdata);
-                              }
-
-                              /* Quick and dirty PUT support. */
-                              if ('PUT' == settings.method) {
-                                  submitdata['_method'] = 'put';
-                              }
-
-                              /* Show the saving indicator. */
-                              $(self).html(settings.indicator);
-
-                              /* Defaults for ajaxoptions. */
-                              var ajaxoptions = {
-                                  type    : 'POST',
-                                  data    : submitdata,
-                                  dataType: 'html',
-                                  url     : settings.target,
-                                  success : function(result, status) {
-                                      if (ajaxoptions.dataType == 'html') {
-                                        $(self).html(result);
-                                      }
-                                      self.editing = false;
-                                      callback.apply(self, [result, settings]);
-                                      if (!$.trim($(self).html())) {
-                                          $(self).html(settings.placeholder);
-                                      }
-                                  },
-                                  error   : function(xhr, status, error) {
-                                      onerror.apply(form, [settings, self, xhr]);
-                                  }
-                              };
-
-                              /* Override with what is given in settings.ajaxoptions. */
-                              $.extend(ajaxoptions, settings.ajaxoptions);
-                              $.ajax(ajaxoptions);
-
-                            }
-                        }
-                    }
-
-                    /* Show tooltip again. */
-                    $(self).attr('title', settings.tooltip);
-
-                    return false;
-                });
-            });
-
-            /* Privileged methods */
-            this.reset = function(form) {
-                /* Prevent calling reset twice when blurring. */
-                if (this.editing) {
-                    /* Before reset hook, if it returns false abort reseting. */
-                    if (false !== onreset.apply(form, [settings, self])) {
-                        $(self).html(self.revert);
-                        self.editing   = false;
-                        if (!$.trim($(self).html())) {
-                            $(self).html(settings.placeholder);
-                        }
-                        /* Show tooltip again. */
-                        if (settings.tooltip) {
-                            $(self).attr('title', settings.tooltip);
-                        }
-                    }
-                }
-            };
-        });
-
-    };
-
-
-    $.editable = {
-        types: {
-            defaults: {
-                element : function(settings, original) {
-                    var input = $('<input type="hidden"></input>');
-                    $(this).append(input);
-                    return(input);
-                },
-                content : function(string, settings, original) {
-                    $(':input:first', this).val(string);
-                },
-                reset : function(settings, original) {
-                  original.reset(this);
-                },
-                buttons : function(settings, original) {
-                    var form = this;
-                    if (settings.submit) {
-                        /* If given html string use that. */
-                        if (settings.submit.match(/>$/)) {
-                            var submit = $(settings.submit).click(function() {
-                                if (submit.attr("type") != "submit") {
-                                    form.submit();
-                                }
-                            });
-                        /* Otherwise use button with given string as text. */
-                        } else {
-                            var submit = $('<button type="submit" />');
-                            submit.html(settings.submit);
-                        }
-                        $(this).append(submit);
-                    }
-                    if (settings.cancel) {
-                        /* If given html string use that. */
-                        if (settings.cancel.match(/>$/)) {
-                            var cancel = $(settings.cancel);
-                        /* otherwise use button with given string as text */
-                        } else {
-                            var cancel = $('<button type="cancel" />');
-                            cancel.html(settings.cancel);
-                        }
-                        $(this).append(cancel);
-
-                        $(cancel).click(function(event) {
-                            if ($.isFunction($.editable.types[settings.type].reset)) {
-                                var reset = $.editable.types[settings.type].reset;
-                            } else {
-                                var reset = $.editable.types['defaults'].reset;
-                            }
-                            reset.apply(form, [settings, original]);
-                            return false;
-                        });
-                    }
-                }
-            },
-            text: {
-                element : function(settings, original) {
-                    var input = $('<input />');
-                    if (settings.width  != 'none') { input.attr('width', settings.width);  }
-                    if (settings.height != 'none') { input.attr('height', settings.height); }
-                    /* https://bugzilla.mozilla.org/show_bug.cgi?id=236791 */
-                    //input[0].setAttribute('autocomplete','off');
-                    input.attr('autocomplete','off');
-                    $(this).append(input);
-                    return(input);
-                }
-            },
-            textarea: {
-                element : function(settings, original) {
-                    var textarea = $('<textarea />');
-                    if (settings.rows) {
-                        textarea.attr('rows', settings.rows);
-                    } else if (settings.height != "none") {
-                        textarea.height(settings.height);
-                    }
-                    if (settings.cols) {
-                        textarea.attr('cols', settings.cols);
-                    } else if (settings.width != "none") {
-                        textarea.width(settings.width);
-                    }
-                    $(this).append(textarea);
-                    return(textarea);
-                }
-            },
-            select: {
-               element : function(settings, original) {
-                    var select = $('<select />');
-                    $(this).append(select);
-                    return(select);
-                },
-                content : function(data, settings, original) {
-                    /* If it is string assume it is json. */
-                    if (String == data.constructor) {
-                        eval ('var json = ' + data);
-                    } else {
-                    /* Otherwise assume it is a hash already. */
-                        var json = data;
-                    }
-                    for (var key in json) {
-                        if (!json.hasOwnProperty(key)) {
-                            continue;
-                        }
-                        if ('selected' == key) {
-                            continue;
-                        }
-                        var option = $('<option />').val(key).append(json[key]);
-                        $('select', this).append(option);
-                    }
-                    /* Loop option again to set selected. IE needed this... */
-                    $('select', this).children().each(function() {
-                        if ($(this).val() == json['selected'] ||
-                            $(this).text() == $.trim(original.revert)) {
-                                $(this).attr('selected', 'selected');
-                        }
-                    });
-                    /* Submit on change if no submit button defined. */
-                    if (!settings.submit) {
-                        var form = this;
-                        $('select', this).change(function() {
-                            form.submit();
-                        });
-                    }
-                }
-            }
-        },
-
-        /* Add new input type */
-        addInputType: function(name, input) {
-            $.editable.types[name] = input;
-        }
-    };
-
-    /* Publicly accessible defaults. */
-    $.fn.editable.defaults = {
-        name       : 'value',
-        id         : 'id',
-        type       : 'text',
-        width      : 'auto',
-        height     : 'auto',
-        event      : 'click.editable',
-        onblur     : 'cancel',
-        loadtype   : 'GET',
-        loadtext   : 'Loading...',
-        placeholder: 'Click to edit',
-        loaddata   : {},
-        submitdata : {},
-        ajaxoptions: {}
-    };
-
-})(jQuery);
diff --git a/mod/groupselect/jquery/plugins.php b/mod/groupselect/jquery/plugins.php
deleted file mode 100644
index dc2de11..0000000
--- a/mod/groupselect/jquery/plugins.php
+++ /dev/null
@@ -1,8 +0,0 @@
-<?php
-$plugins = array(
-        'groupselect-jeditable' => array(
-            'files' => array(
-                'jeditable/jquery.jeditable.js',
-            ),
-         ),
-    );
diff --git a/mod/groupselect/lang/de/groupselect.php b/mod/groupselect/lang/de/groupselect.php
deleted file mode 100644
index 4f731c1..0000000
--- a/mod/groupselect/lang/de/groupselect.php
+++ /dev/null
@@ -1,18 +0,0 @@
-<?php
-
-$string['assignedteacher'] = 'Betreuung';
-$string['eventgroupteacheradded'] = 'Betreuung zugeordnet';
-$string['eventexportlinkcreated'] = 'Exportlink erstellt';
-$string['maxgroupmembership'] = 'Maximale Anzahl der Gruppenteilnahme pro Teilnehmenden ';
-$string['maxgroupmembership_error_low'] = 'Fehler: Es muss mindestens eine (1) Gruppe wählbar sein!';
-$string['modulename_help'] = '<p>Teilnehmer/innen können Gruppen erstellen und wählen: </p><ul><li>Teilnehmer/innen können Gruppen erstellen, diesen eine Beschreibung geben und, falls gewünscht, mit einem Passwort schützen</li><li>Teilnehmer/innen können Gruppen auswählen und betreten</li><li>Trainer/innen ohne Bearbeitungsrechte können Gruppen hinzugefügt werden</li><li>Trainer/in kann die Gruppenliste des Kurses als CSV-Datei exportieren</li><li>Volle Kompatibilität zu Basis Moodle-Gruppen: Gruppen können auch durch andere Plugins erzeugt werden.</li></ul>';
-$string['notifyexpiredselection'] = 'Zeige Meldung, wenn das Einschreibeende vorüber ist';
-$string['notifyexpiredselection_help'] = 'Wenn gesetzt, wird eine Meldung angezeigt falls das Einschreibeende vorüber ist';
-$string['studentcansetenrolmentkey'] = 'Teilnehmende können Passwörter setzen um Gruppen beizutreten';
-$string['studentcansetenrolmentkey_help'] = 'Wenn gesetzt, kann ein/e Teilnehmer/in ein Gruppenpasswort setzen';
-$string['studentcansetgroupname'] = 'Teilnehmende dürfen Gruppennamen selbst bestimmen.';
-$string['studentcansetgroupname_help'] = 'Wenn gesetzt, kann ein/e Teilnehmer/in einen Gruppennamen setzen';
-$string['supervisionrole'] = 'Rolle für die Betreuung';
-$string['supervisionrole_help'] = 'Supervisorenrolle festlegen für die Betreuung der Gruppen festlegen (Standard: Lehrer ohne Bearbeitungsrecht)';
-$string['timeavailable_error_past_timedue'] = 'Fehler: Aktivität kann nicht nach dem Ende anfangen!';
-$string['timedue_error_pre_timeavailable'] = 'Fehler: Aktivität kann nicht vor dem Start enden!';
diff --git a/mod/groupselect/lang/en/groupselect.php b/mod/groupselect/lang/en/groupselect.php
deleted file mode 100644
index 5be3ee5..0000000
--- a/mod/groupselect/lang/en/groupselect.php
+++ /dev/null
@@ -1,86 +0,0 @@
-<?php
-
-$string['action'] = 'Action';
-$string['assignedteacher'] = 'Supervisor';
-$string['assigngroup'] = 'Assign non-editing teachers to groups';
-$string['assigngroup_confirm'] = 'This will assign non-editing teachers to groups, overriding possible previous assignment irreversibly. Are you sure?';
-$string['assigngroup_help'] = 'If set, enables a button which assigns non-editing teachers to groups (if course has non-editing teachers). Assigned non-editing teachers are not group members, but they show up in export file and in the main view (if set). Useful if course uses assistants to handle groups.';
-$string['cannotselectclosed'] = 'You can not become group member any more.';
-$string['cannotselectmaxed'] = 'You can not join group {$a} - maximum number of members reached.';
-$string['cannotselectnocap'] = 'You are not allowed to select group.';
-$string['cannotselectnoenrol'] = 'You need to be enrolled into course in order to become a group member.';
-$string['cannotunselectclosed'] = 'You can not leave group any more';
-$string['creategroup'] = 'Create a new group';
-$string['deleteemptygroups'] = 'Delete group when last student leaves';
-$string['deleteemptygroups_help'] = 'If set, automatically deletes group when last student leaves from it';
-$string['description'] = 'Group description';
-$string['edittooltip'] = 'Click to edit';
-$string['eventexportlinkcreated'] = 'Export link created';
-$string['eventgroupteacheradded'] = 'Non-editing teacher added';
-$string['export'] = 'Create a download link for group data file (CSV)';
-$string['export_download'] = 'Download CSV-file';
-$string['fromallgroups'] = 'All groups';
-$string['globalpassword_help'] = 'Set a global password for group joining. Overrides student set passwords.';
-$string['groupid'] = 'Group ID';
-$string['groupselect:addinstance'] = 'Add a new group self-selection';
-$string['groupselect:assign'] = 'Allow to assign teachers to groups';
-$string['groupselect:create'] = 'Allow creating of group';
-$string['groupselect:export'] = 'Allow export of group members';
-$string['groupselect:select'] = 'Allow becoming of group member';
-$string['groupselect:unselect'] = 'Allow leaving of group';
-$string['hidefullgroups'] = 'Hide full groups from the main view';
-$string['hidefullgroups_help'] = 'If set, hides all groups, which have reached max member count, from the main list view (excluding user\'s own group). May be useful if the activity has lots of groups.';
-$string['incorrectpassword'] = 'Incorrect password';
-$string['managegroups'] = 'Manage groups';
-$string['maxcharlenreached'] = 'Maximum character number reached';
-$string['maxgroupmembership'] = 'Maximum number of groups to participate in';
-$string['maxgroupmembership_error_low'] = 'Error: At least 1 group needs to be selectable!';
-$string['maxlimitreached'] = 'Maximum number reached';
-$string['maxmembers'] = 'Max members per group';
-$string['maxmembers_error_low'] = "Error: use 0 to indicate for unlimited group size!";
-$string['maxmembers_error_smaller_minmembers'] = "Error: Needs to be greater than the minimum participants per group!";
-$string['maxmembers_help'] = 'Maximum number of members per group, 0 for unlimited.';
-$string['member'] = 'Member';
-$string['membercount'] = 'Count';
-$string['membershidden'] = 'Member list not available';
-$string['memberslist'] = 'Members';
-$string['minmembers'] = 'Min members per group';
-$string['minmembers_error_low'] = "Error: negative numbers are not allowed for the minimum group size!";
-$string['minmembers_error_bigger_maxmembers'] = "Error: the minimum group size needs to be smaller than the maximum participants per group!";
-$string['minmembers_help'] = 'Minimum number of members per group. Adds notifications for members of groups which are under this limit. Default is 0 (disabled).';
-$string['minmembers_icon'] = 'Group has less members than required';
-$string['minmembers_notification'] = 'Your group has less members than required! Minimum is {$a}.';
-$string['modulename'] = 'Group self-selection';
-$string['modulename_help'] = '<p>Lets students create and select groups. Features: </p><ul><li>Students can create groups, give them a description and set them password protected, if wanted</li><li>Students can select and join groups</li><li>Non-editing teachers may be assigned to groups</li><li>Teacher can export course group list as a csv-file</li><li>Full compatibility with basic Moodle groups: groups may be created by other means if needed, supports group assignment submissions etc.</li></ul>';
-$string['modulenameplural'] = 'Group self-selections';
-$string['nogroups'] = 'No groups available to select from, sorry.';
-$string['notavailableanymore'] = 'Group selection is not available anymore, sorry (since {$a}).';
-$string['notavailableyet'] = 'Group selection will be available on {$a}.';
-$string['notifyexpiredselection'] = 'Show message, if the open until date is reached';
-$string['notifyexpiredselection_help'] = 'If set, a message will appear if the open until date is reached';
-$string['ok'] = 'OK';
-$string['password'] = 'Requires password';
-$string['pluginadministration'] = 'Module administration';
-$string['pluginname'] = 'Group self-selection';
-$string['saving'] = 'Saving...';
-$string['select'] = 'Become member of {$a}';
-$string['selectconfirm'] = 'Do you really want to become member of the group <em>{$a}</em>?';
-$string['showassignedteacher'] = 'Show assigned teachers';
-$string['showassignedteacher_help'] = 'If set, assigned teachers will show up in group members. Useful if students need to know their assigned teacher';
-$string['studentcancreate'] = 'Students can create groups';
-$string['studentcancreate_help'] = 'If set, students without group (in selected grouping) can create groups';
-$string['studentcansetdesc'] = 'Students can set and edit group description';
-$string['studentcansetdesc_help'] = 'If set, student can set a a group description when creating one and group members can edit it';
-$string['studentcansetenrolmentkey'] = 'Students can set passwords for joining groups';
-$string['studentcansetenrolmentkey_help'] = 'If set, students can set an enrolment key for joining groups';
-$string['studentcansetgroupname'] = 'Students can set the name of new groups';
-$string['studentcansetgroupname_help'] = 'If set, students can set the group names';
-$string['supervisionrole'] = 'Supervisor role';
-$string['supervisionrole_help'] = 'Define the role for supervisors (formally non-editing teachers)';
-$string['targetgrouping'] = 'Select groups from grouping';
-$string['timeavailable'] = 'Open from';
-$string['timeavailable_error_past_timedue'] = 'Error: cannot start after due date!';
-$string['timedue'] = 'Open until';
-$string['timedue_error_pre_timeavailable'] = 'Error: cannot end before start date!';
-$string['unselect'] = 'Leave group {$a}';
-$string['unselectconfirm'] = 'Do you really want to leave the group <em>{$a}</em>?';
diff --git a/mod/groupselect/lang/fi/groupselect.php b/mod/groupselect/lang/fi/groupselect.php
deleted file mode 100644
index dd47a92..0000000
--- a/mod/groupselect/lang/fi/groupselect.php
+++ /dev/null
@@ -1,67 +0,0 @@
-<?php
-
-$string['action'] = 'Toiminto';
-$string['assigngroup'] = 'Jaa assistentit ryhmiin';
-$string['assigngroup_confirm'] = 'Jakaa opettaja ilman muokkausoikeutta -roolin käyttäjät ryhmiin. Toiminto korvaa mahdollisen aikaisemman jaon peruuttamattomasti. Oletko varma?';
-$string['assigngroup_help'] = 'Jos päällä, opettajalle näkyy päänäkymässä painike, joka mahdollistaa assistenttien (kurssilla olevien opettaja ilman muokkausoikeutta -roolin omaavien käyttäjien) jakamisen ryhmiin. Jaetut assistentit eivät ole ryhmien jäseniä, mutta näkyvät viedyssä csv-tiedostossa ja päänäkymässä (jos asetettu).';
-$string['assignedteacher'] = 'Ryhmän assistentti';
-$string['cannotselectclosed'] = 'Et voi enää liittyä ryhmään.';
-$string['cannotselectmaxed'] = 'Et voi liittyä ryhmään {$a} - ryhmä on täynnä.';
-$string['cannotselectnocap'] = 'Sinulla ei ole oikeutta valita ryhmää.';
-$string['cannotselectnoenrol'] = 'Sinun täytyy olla kirjautuneena kurssille voidaksesi liittyä ryhmään.';
-$string['creategroup'] = 'Luo uusi ryhmä';
-$string['cannotunselectclosed'] = 'Et voi enää lähteä ryhmästä';
-$string['deleteemptygroups'] = 'Poista ryhmä viimeisen jäsenen poistuessa';
-$string['deleteemptygroups_help'] = 'Jos päällä, poistaa ryhmän automaattisesti viimeisen jäsenen poistuessa siitä';
-$string['description'] = 'Ryhmän kuvaus';
-$string['edittooltip'] = 'Klikkaa muokataksesi';
-$string['export'] = 'Luo CSV-tiedoston latauslinkki';
-$string['export_download'] = 'Lataa CSV-tiedosto';
-$string['fromallgroups'] = 'Kaikki ryhmät';
-$string['globalpassword_help'] = 'Aseta yleinen salasana ryhmään liittymiselle. Korvaa mahdollisen ryhmäkohtaisen salasanan.';
-$string['groupid'] = 'Ryhmätunniste';
-$string['groupselect:addinstance'] = 'Luo uusi ryhmävalinta';
-$string['groupselect:assign'] = 'Salli assistenttien jakaminen ryhmiin';
-$string['groupselect:create'] = 'Salli ryhmän luonti';
-$string['groupselect:select'] = 'Salli ryhmään liittyminen';
-$string['groupselect:unselect'] = 'Salli ryhmästä lähteminen';
-$string['hidefullgroups'] = 'Piilota täynnä olevat ryhmät';
-$string['hidefullgroups_help'] = 'Piilottaa täynnä olevat ryhmät listanäkymästä (poislukien käyttäjän oman ryhmän). Voi olla hyödyllinen, jos ryhmiä on paljon.';
-$string['incorrectpassword'] = 'Virheellinen salasana';
-$string['managegroups'] = 'Hallinnoi ryhmiä';
-$string['maxcharlenreached'] = 'Merkkien enimmäismäärä saavutettu';
-$string['maxlimitreached'] = 'Suurin sallittu määrä saavutettu';
-$string['maxmembers'] = 'Ryhmän jäsenten enimmäismäärä';
-$string['maxmembers_help'] = 'Ryhmän jäsenten enimmäismäärä, 0 jos rajoittamaton.';
-$string['member'] = 'Jäsen';
-$string['membercount'] = 'Lukumäärä';
-$string['membershidden'] = 'Jäsenlista ei nähtävissä';
-$string['memberslist'] = 'Jäsenet';
-$string['minmembers'] = 'Ryhmän jäsenten vähimmäismäärä';
-$string['minmembers_help'] = 'Ryhmän jäsenten vähimmäismäärä. Jos käytössä, näyttää vähimmäismäärän alittavien ryhmien jäsenille huomautuksen. Oletusarvo 0 (pois käytöstä)';
-$string['minmembers_icon'] = 'Ryhmässä on liian vähän jäseniä';
-$string['minmembers_notification'] = 'Ryhmässäsi on liian vähän jäseniä! Vähimmäismäärä on {$a}.';
-$string['modulename'] = 'Ryhmänmuodostus';
-$string['modulename_help'] = '<p>Antaa opiskelijoiden itse muodostaa ryhmät. Ominaisuudet:</p><ul><li>Opiskelija voi luoda ryhmän, antaa sille kuvauksen ja salasanan</li><li>Opiskelijat voivat liittyä ryhmiin</li><li>Assistenttien jakaminen ryhmiin</li><li>Opettaja voi ladata listan ryhmistä csv-tiedostona </li><li>Yhteensopiva Moodlen ryhmien kanssa: ryhmiä voi tarvittaessa luoda käyttäjähallinnan kautta, voi tehdä ryhmäpalautuksia jne.</li></ul>';
-$string['modulenameplural'] = 'Ryhmänmuodostukset';
-$string['nogroups'] = 'Ei luotuja ryhmiä.';
-$string['notavailableanymore'] = 'Ryhmävalinta sulkeutunut {$a}.';
-$string['notavailableyet'] = 'Ryhmävalinta aukeaa {$a}.';
-$string['ok'] = 'OK';
-$string['password'] = 'Vaatii salasanan';
-$string['pluginadministration'] = 'Moduulinhallinta';
-$string['pluginname'] = 'Ryhmänmuodostus';
-$string['saving'] = 'Tallennetaan';
-$string['selectconfirm'] = 'Haluatko todella liittyä ryhmään <em>{$a}</em>?';
-$string['showassignedteacher'] = 'Näytä jaetut assistentit';
-$string['showassignedteacher_help'] = 'Jos asetettu, ryhmälle jaettu assistentti näkyy päänäkymän jäsenlistassa. Hyödyllinen, jos opiskelijoiden on tarpeen tietää ryhmänsä assistentti.';
-$string['studentcancreate'] = 'Opiskelijat voivat luoda ryhmiä';
-$string['studentcancreate_help'] = 'Salli ryhmättömien opiskelijoiden (valitussa ryhmittelyssä) luoda ryhmiä';
-$string['studentcansetdesc'] = 'Opiskelijat voivat asettaa ryhmälleen kuvauksen ja muokata sitä';
-$string['studentcansetdesc_help'] = 'Salli opiskelijan asettaa ryhmälleen kuvaus ryhmänluonnin yhteydessä ja ryhmän jäsenten muokata sitä';
-$string['unselectconfirm'] = 'Haluatko todella lähteä ryhmästä <em>{$a}</em>?';
-$string['unselect'] = 'Lähde ryhmästä {$a}';
-$string['select'] = 'Liity ryhmään {$a}';
-$string['targetgrouping'] = 'Käytä ryhmittelyä';
-$string['timeavailable'] = 'Avautuu';
-$string['timedue'] = 'Sulkeutuu';
diff --git a/mod/groupselect/lib.php b/mod/groupselect/lib.php
deleted file mode 100644
index 63526cf..0000000
--- a/mod/groupselect/lib.php
+++ /dev/null
@@ -1,303 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Library of functions and constants of Group selection module
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2008-2011 Petr Skoda (http://skodak.org)
- * @copyright  2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-/**
- * List of features supported in groupselect module
- * @param string $feature FEATURE_xx constant for requested feature
- * @return mixed True if module supports feature, false if not, null if doesn't know
- */
-function groupselect_supports($feature) {
-    switch($feature) {
-        case FEATURE_MOD_ARCHETYPE:
-            return MOD_ARCHETYPE_OTHER;
-        case FEATURE_GROUPS:
-            return true;  // only separate mode makes sense - you hide members of other groups here
-        case FEATURE_GROUPINGS:
-            return false; // should be true
-        case FEATURE_GROUPMEMBERSONLY:
-            return false;  // this could be very confusing
-        case FEATURE_MOD_INTRO:
-            return true;
-        case FEATURE_COMPLETION_TRACKS_VIEWS:
-            return false;
-        case FEATURE_GRADE_HAS_GRADE:
-            return false;
-        case FEATURE_GRADE_OUTCOMES:
-            return false;
-        case FEATURE_BACKUP_MOODLE2:
-            return true;
-        case FEATURE_SHOW_DESCRIPTION:
-            return true;
-
-        default:
-            return null;
-    }
-}
-
-/**
- * Returns all other caps used in module
- * @return array
- */
-function groupselect_get_extra_capabilities() {
-    return array('moodle/site:accessallgroups', 'moodle/site:viewfullnames');
-}
-
-/**
- * Given an object containing all the necessary data, (defined by the form in mod.html)
- * this function will create a new instance and return the id number of the new instance.
- *
- * @param object $groupselect Object containing all the necessary data defined by the form in mod_form.php
- * $return int The id of the newly created instance
- */
-function groupselect_add_instance($groupselect) {
-    global $DB;
-
-    $groupselect->timecreated = time();
-    $groupselect->timemodified = time();
-
-    $groupselect->id = $DB->insert_record('groupselect', $groupselect);
-
-    groupselect_set_events($groupselect);
-
-    return $groupselect->id;
-}
-
-
-/**
- * Update an existing instance with new data.
- *
- * @param object $groupselect An object containing all the necessary data defined by the mod_form.php
- * @return bool
- */
-function groupselect_update_instance($groupselect) {
-    global $DB;
-
-    $groupselect->timemodified = time();
-    $groupselect->id = $groupselect->instance;
-
-    $DB->update_record('groupselect', $groupselect);
-
-    groupselect_set_events($groupselect);
-
-    return true;
-}
-
-
-/**
- * Permanently delete the instance of the module and any data that depends on it.
- *
- * @param int $id Instance id
- * @return bool
- */
-function groupselect_delete_instance($id) {
-    global $DB;
-    // delete group password rows related to this instance (but not the groups)
-    $DB->delete_records('groupselect_passwords', array('instance_id' => $id));
-
-    $DB->delete_records('groupselect_groups_teachers', array('instance_id' => $id));
-
-    $DB->delete_records('groupselect', array('id' => $id));
-
-    return true;
-}
-
-/**
- * This standard function will check all instances of this module
- * and make sure there are up-to-date events created for each of them.
- * If courseid = 0, then every chat event in the site is checked, else
- * only chat events belonging to the course specified are checked.
- * This function is used, in its new format, by restore_refresh_events()
- *
- * @param int $courseid
- * @return bool
- */
-function groupselect_refresh_events($courseid = 0) {
-    global $DB;
-
-    $params = $courseid ? ['course' => $courseid] : [];
-    $modules = $DB->get_records('groupselect', $params);
-
-    foreach ($modules as $module) {
-        groupselect_set_events($module);
-    }
-    return true;
-}
-
-/**
- * This creates new events given as timeopen and closeopen by $feedback.
- *
- * @param stdClass $groupselect
- * @return void
- */
-function groupselect_set_events($groupselect) {
-    global $DB, $CFG;
-
-    // Include calendar/lib.php.
-    require_once($CFG->dirroot.'/calendar/lib.php');
-
-    // Get CMID if not sent as part of $groupselect.
-    if (!isset($groupselect->coursemodule)) {
-        $cm = get_coursemodule_from_instance('groupselect',
-                $groupselect->id, $groupselect->course);
-        $groupselect->coursemodule = $cm->id;
-    }
-
-    // Find existing calendar event.
-    $event = $DB->get_record('event',
-            array('modulename' => 'groupselect',
-                'instance' => $groupselect->id, 'eventtype' => 'due'));
-
-    if ($event) {
-        $calendarevent = calendar_event::load($event);
-
-        if ($groupselect->timedue) {
-            // Update calendar event.
-            $data = fullclone($event);
-            $data->name = $groupselect->name;
-            $data->description = format_module_intro('groupselect', $groupselect, $groupselect->coursemodule);
-            $data->timestart = $groupselect->timedue;
-            $calendarevent->update($data);
-        } else {
-            // Delete calendar event.
-            $calendarevent->delete();
-        }
-
-    } else if ($groupselect->timedue) {
-
-        // Create calendar event.
-        $event->name = $groupselect->name;
-        $event->description = format_module_intro('groupselect', $groupselect, $groupselect->coursemodule); // TODO: this is weird
-        $event->courseid = $groupselect->course;
-        $event->groupid = 0;
-        $event->userid = 0;
-        $event->modulename = 'groupselect';
-        $event->instance = $groupselect->id;
-        $event->eventtype = 'due';
-        $event->timestart = $groupselect->timedue;
-        $event->timeduration = 0;
-
-        calendar_event::create($event);
-    }
-}
-
-
-/**
- * Returns the users with data in this module
- *
- * We have no data/users here but this must exists in every module
- *
- * @param int $groupselectid
- * @return bool
- */
-function groupselect_get_participants($groupselectid) {
-    // no participants here - all data is stored in the group tables
-    return false;
-}
-
-
-/**
- * groupselect_get_view_actions
- *
- * @return array
- */
-function groupselect_get_view_actions() {
-    return array('view', 'export');
-}
-
-
-/**
- * groupselect_get_post_actions
- *
- * @return array
- */
-function groupselect_get_post_actions() {
-    return array('select', 'unselect', 'create', 'assign');
-}
-
-
-/**
- * This function is used by the reset_course_userdata function in moodlelib.
- *
- * @param $data the data submitted from the reset course.
- * @return array status array
- */
-function groupselect_reset_userdata($data) {
-    // no resetting here - all data is stored in the group tables
-    return array();
-}
-
-/**
- * Used to create exportable csv-file in view.php
- *
- * @param $data the data submitted from the reset course.
- * @return array status array
- */
-function groupselect_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options=array()) {
-    // Check the contextlevel is as expected - if your plugin is a block, this becomes CONTEXT_BLOCK, etc.
-    if ($context->contextlevel != CONTEXT_MODULE) {
-        return false;
-    }
-
-    // Make sure the filearea is one of those used by the plugin.
-    if ($filearea !== 'export') { // && $filearea !== 'anotherexpectedfilearea') {
-        return false;
-    }
-
-    // Make sure the user is logged in and has access to the module (plugins that are not course modules should leave out the 'cm' part).
-    require_login($course, true, $cm);
-
-    // Check the relevant capabilities - these may vary depending on the filearea being accessed.
-    if (!has_capability('mod/groupselect:export', $context)) {
-        return false;
-    }
-
-    // Leave this line out if you set the itemid to null in make_pluginfile_url (set $itemid to 0 instead).
-    $itemid = array_shift($args); // The first item in the $args array.
-
-    // Use the itemid to retrieve any relevant data records and perform any security checks to see if the
-    // user really does have access to the file in question.
-
-    // Extract the filename / filepath from the $args array.
-    $filename = array_pop($args); // The last item in the $args array.
-    if (!$args) {
-        $filepath = '/'; // $args is empty => the path is '/'
-    } else {
-        $filepath = '/'.implode('/', $args).'/'; // $args contains elements of the filepath
-    }
-
-    // Retrieve the file from the Files API.
-    $fs = get_file_storage();
-    $file = $fs->get_file($context->id, 'mod_groupselect', $filearea, $itemid, $filepath, $filename);
-    if (!$file) {
-        return false; // The file does not exist.
-    }
-
-    // We can now send the file back to the browser - in this case with a cache lifetime of 1 day and no filtering.
-    // From Moodle 2.3, use send_stored_file instead.
-    send_stored_file($file, 86400, 0, 'true', $options);
-}
diff --git a/mod/groupselect/lib/sorttable/sorttable.js b/mod/groupselect/lib/sorttable/sorttable.js
deleted file mode 100644
index 2cdf40c..0000000
--- a/mod/groupselect/lib/sorttable/sorttable.js
+++ /dev/null
@@ -1,489 +0,0 @@
-/*
-  SortTable
-  version 2
-  7th April 2007
-  Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
-
-  Thanks to many, many people for contributions and suggestions.
-  Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
-  This basically means: do what you want with it.
-*/
-
-
-var stIsIE = /*@cc_on!@*/false;
-
-sorttable = {
-  init: function() {
-    // quit if this function has already been called
-    if (arguments.callee.done) return;
-    // flag this function so we don't do the same thing twice
-    arguments.callee.done = true;
-    // kill the timer
-    if (_timer) clearInterval(_timer);
-
-    if (!document.createElement || !document.getElementsByTagName) return;
-
-    sorttable.DATE_RE = /^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/;
-
-    forEach(document.getElementsByTagName('table'), function(table) {
-      if (table.className.search(/\bsortable\b/) != -1) {
-        sorttable.makeSortable(table);
-      }
-    });
-
-  },
-
-  makeSortable: function(table) {
-    if (table.getElementsByTagName('thead').length == 0) {
-      // table doesn't have a tHead. Since it should have, create one and
-      // put the first table row in it.
-      the = document.createElement('thead');
-      the.appendChild(table.rows[0]);
-      table.insertBefore(the,table.firstChild);
-    }
-    // Safari doesn't support table.tHead, sigh
-    if (table.tHead == null) table.tHead = table.getElementsByTagName('thead')[0];
-
-    if (table.tHead.rows.length != 1) return; // can't cope with two header rows
-
-    // Sorttable v1 put rows with a class of "sortbottom" at the bottom (as
-    // "total" rows, for example). This is B&R, since what you're supposed
-    // to do is put them in a tfoot. So, if there are sortbottom rows,
-    // for backwards compatibility, move them to tfoot (creating it if needed).
-    sortbottomrows = [];
-    for (var i=0; i<table.rows.length; i++) {
-      if (table.rows[i].className.search(/\bsortbottom\b/) != -1) {
-        sortbottomrows[sortbottomrows.length] = table.rows[i];
-      }
-    }
-    if (sortbottomrows) {
-      if (table.tFoot == null) {
-        // table doesn't have a tfoot. Create one.
-        tfo = document.createElement('tfoot');
-        table.appendChild(tfo);
-      }
-      for (var i=0; i<sortbottomrows.length; i++) {
-        tfo.appendChild(sortbottomrows[i]);
-      }
-      delete sortbottomrows;
-    }
-
-    // work through each column and calculate its type
-    headrow = table.tHead.rows[0].cells;
-    for (var i=0; i<headrow.length; i++) {
-      // manually override the type with a sorttable_type attribute
-      if (!headrow[i].className.match(/\bsorttable_nosort\b/)) { // skip this col
-        mtch = headrow[i].className.match(/\bsorttable_([a-z0-9]+)\b/);
-        if (mtch) { override = mtch[1]; }
-        if (mtch && typeof sorttable["sort_"+override] == 'function') {
-          headrow[i].sorttable_sortfunction = sorttable["sort_"+override];
-        } else {
-          headrow[i].sorttable_sortfunction = sorttable.guessType(table,i);
-        }
-        // make it clickable to sort
-        headrow[i].sorttable_columnindex = i;
-        headrow[i].sorttable_tbody = table.tBodies[0];
-        dean_addEvent(headrow[i],"click", sorttable.innerSortFunction = function(e) {
-
-          if (this.className.search(/\bsorttable_sorted\b/) != -1) {
-            // if we're already sorted by this column, just
-            // reverse the table, which is quicker
-            sorttable.reverse(this.sorttable_tbody);
-            this.className = this.className.replace('sorttable_sorted',
-                                                    'sorttable_sorted_reverse');
-            this.removeChild(document.getElementById('sorttable_sortfwdind'));
-            sortrevind = document.createElement('span');
-            sortrevind.id = "sorttable_sortrevind";
-            sortrevind.innerHTML = stIsIE ? '&nbsp<font face="webdings">5</font>' : '&nbsp;&#x25B4;';
-            this.appendChild(sortrevind);
-            return;
-          }
-          if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) {
-            // if we're already sorted by this column in reverse, just
-            // re-reverse the table, which is quicker
-            sorttable.reverse(this.sorttable_tbody);
-            this.className = this.className.replace('sorttable_sorted_reverse',
-                                                    'sorttable_sorted');
-            this.removeChild(document.getElementById('sorttable_sortrevind'));
-            sortfwdind = document.createElement('span');
-            sortfwdind.id = "sorttable_sortfwdind";
-            sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
-            this.appendChild(sortfwdind);
-            return;
-          }
-
-          // remove sorttable_sorted classes
-          theadrow = this.parentNode;
-          forEach(theadrow.childNodes, function(cell) {
-            if (cell.nodeType == 1) { // an element
-              cell.className = cell.className.replace('sorttable_sorted_reverse','');
-              cell.className = cell.className.replace('sorttable_sorted','');
-            }
-          });
-          sortfwdind = document.getElementById('sorttable_sortfwdind');
-          if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
-          sortrevind = document.getElementById('sorttable_sortrevind');
-          if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }
-
-          this.className += ' sorttable_sorted';
-          sortfwdind = document.createElement('span');
-          sortfwdind.id = "sorttable_sortfwdind";
-          sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
-          this.appendChild(sortfwdind);
-
-          // build an array to sort. This is a Schwartzian transform thing,
-          // i.e., we "decorate" each row with the actual sort key,
-          // sort based on the sort keys, and then put the rows back in order
-          // which is a lot faster because you only do getInnerText once per row
-          row_array = [];
-          col = this.sorttable_columnindex;
-          rows = this.sorttable_tbody.rows;
-          for (var j=0; j<rows.length; j++) {
-            row_array[row_array.length] = [sorttable.getInnerText(rows[j].cells[col]), rows[j]];
-          }
-          /* If you want a stable sort, uncomment the following line */
-          //sorttable.shaker_sort(row_array, this.sorttable_sortfunction);
-          /* and comment out this one */
-          row_array.sort(this.sorttable_sortfunction);
-
-          tb = this.sorttable_tbody;
-          for (var j=0; j<row_array.length; j++) {
-            tb.appendChild(row_array[j][1]);
-          }
-
-          delete row_array;
-        });
-      }
-    }
-  },
-
-  guessType: function(table, column) {
-    // guess the type of a column based on its first non-blank row
-    sortfn = sorttable.sort_alpha;
-    for (var i=0; i<table.tBodies[0].rows.length; i++) {
-      text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column]);
-      if (text != '') {
-        if (text.match(/^-?[£$¤]?[\d,.]+%?$/)) {
-          return sorttable.sort_numeric;
-        }
-        // check for a date: dd/mm/yyyy or dd/mm/yy
-        // can have / or . or - as separator
-        // can be mm/dd as well
-        possdate = text.match(sorttable.DATE_RE)
-        if (possdate) {
-          // looks like a date
-          first = parseInt(possdate[1]);
-          second = parseInt(possdate[2]);
-          if (first > 12) {
-            // definitely dd/mm
-            return sorttable.sort_ddmm;
-          } else if (second > 12) {
-            return sorttable.sort_mmdd;
-          } else {
-            // looks like a date, but we can't tell which, so assume
-            // that it's dd/mm (English imperialism!) and keep looking
-            sortfn = sorttable.sort_ddmm;
-          }
-        }
-      }
-    }
-    return sortfn;
-  },
-
-  getInnerText: function(node) {
-    // gets the text we want to use for sorting for a cell.
-    // strips leading and trailing whitespace.
-    // this is *not* a generic getInnerText function; it's special to sorttable.
-    // for example, you can override the cell text with a customkey attribute.
-    // it also gets .value for <input> fields.
-
-    if (!node) return "";
-
-    hasInputs = (typeof node.getElementsByTagName == 'function') &&
-                 node.getElementsByTagName('input').length;
-
-    if (node.getAttribute("sorttable_customkey") != null) {
-      return node.getAttribute("sorttable_customkey");
-    }
-    else if (typeof node.textContent != 'undefined' && !hasInputs) {
-      return node.textContent.replace(/^\s+|\s+$/g, '');
-    }
-    else if (typeof node.innerText != 'undefined' && !hasInputs) {
-      return node.innerText.replace(/^\s+|\s+$/g, '');
-    }
-    else if (typeof node.text != 'undefined' && !hasInputs) {
-      return node.text.replace(/^\s+|\s+$/g, '');
-    }
-    else {
-      switch (node.nodeType) {
-        case 3:
-          if (node.nodeName.toLowerCase() == 'input') {
-            return node.value.replace(/^\s+|\s+$/g, '');
-          }
-        case 4:
-          return node.nodeValue.replace(/^\s+|\s+$/g, '');
-          break;
-        case 1:
-        case 11:
-          var innerText = '';
-          for (var i = 0; i < node.childNodes.length; i++) {
-            innerText += sorttable.getInnerText(node.childNodes[i]);
-          }
-          return innerText.replace(/^\s+|\s+$/g, '');
-          break;
-        default:
-          return '';
-      }
-    }
-  },
-
-  reverse: function(tbody) {
-    // reverse the rows in a tbody
-    newrows = [];
-    for (var i=0; i<tbody.rows.length; i++) {
-      newrows[newrows.length] = tbody.rows[i];
-    }
-    for (var i=newrows.length-1; i>=0; i--) {
-       tbody.appendChild(newrows[i]);
-    }
-    delete newrows;
-  },
-
-  /* sort functions
-     each sort function takes two parameters, a and b
-     you are comparing a[0] and b[0] */
-  sort_numeric: function(a,b) {
-    aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
-    if (isNaN(aa)) aa = 0;
-    bb = parseFloat(b[0].replace(/[^0-9.-]/g,''));
-    if (isNaN(bb)) bb = 0;
-    return aa-bb;
-  },
-  sort_alpha: function(a,b) {
-    if (a[0]==b[0]) return 0;
-    if (a[0]<b[0]) return -1;
-    return 1;
-  },
-  sort_ddmm: function(a,b) {
-    mtch = a[0].match(sorttable.DATE_RE);
-    y = mtch[3]; m = mtch[2]; d = mtch[1];
-    if (m.length == 1) m = '0'+m;
-    if (d.length == 1) d = '0'+d;
-    dt1 = y+m+d;
-    mtch = b[0].match(sorttable.DATE_RE);
-    y = mtch[3]; m = mtch[2]; d = mtch[1];
-    if (m.length == 1) m = '0'+m;
-    if (d.length == 1) d = '0'+d;
-    dt2 = y+m+d;
-    if (dt1==dt2) return 0;
-    if (dt1<dt2) return -1;
-    return 1;
-  },
-  sort_mmdd: function(a,b) {
-    mtch = a[0].match(sorttable.DATE_RE);
-    y = mtch[3]; d = mtch[2]; m = mtch[1];
-    if (m.length == 1) m = '0'+m;
-    if (d.length == 1) d = '0'+d;
-    dt1 = y+m+d;
-    mtch = b[0].match(sorttable.DATE_RE);
-    y = mtch[3]; d = mtch[2]; m = mtch[1];
-    if (m.length == 1) m = '0'+m;
-    if (d.length == 1) d = '0'+d;
-    dt2 = y+m+d;
-    if (dt1==dt2) return 0;
-    if (dt1<dt2) return -1;
-    return 1;
-  },
-
-  shaker_sort: function(list, comp_func) {
-    // A stable sort function to allow multi-level sorting of data
-    // see: http://en.wikipedia.org/wiki/Cocktail_sort
-    // thanks to Joseph Nahmias
-    var b = 0;
-    var t = list.length - 1;
-    var swap = true;
-
-    while(swap) {
-        swap = false;
-        for(var i = b; i < t; ++i) {
-            if ( comp_func(list[i], list[i+1]) > 0 ) {
-                var q = list[i]; list[i] = list[i+1]; list[i+1] = q;
-                swap = true;
-            }
-        } // for
-        t--;
-
-        if (!swap) break;
-
-        for(var i = t; i > b; --i) {
-            if ( comp_func(list[i], list[i-1]) < 0 ) {
-                var q = list[i]; list[i] = list[i-1]; list[i-1] = q;
-                swap = true;
-            }
-        } // for
-        b++;
-
-    } // while(swap)
-  }
-}
-
-/* ******************************************************************
-   Supporting functions: bundled here to avoid depending on a library
-   ****************************************************************** */
-
-// Dean Edwards/Matthias Miller/John Resig
-
-/* for Mozilla/Opera9 */
-if (document.addEventListener) {
-    document.addEventListener("DOMContentLoaded", sorttable.init, false);
-}
-
-/* for Internet Explorer */
-/*@cc_on @*/
-/*@if (@_win32)
-    document.write("<script id=__ie_onload defer src=javascript:void(0)><\/script>");
-    var script = document.getElementById("__ie_onload");
-    script.onreadystatechange = function() {
-        if (this.readyState == "complete") {
-            sorttable.init(); // call the onload handler
-        }
-    };
-/*@end @*/
-
-/* for Safari */
-if (/WebKit/i.test(navigator.userAgent)) { // sniff
-    var _timer = setInterval(function() {
-        if (/loaded|complete/.test(document.readyState)) {
-            sorttable.init(); // call the onload handler
-        }
-    }, 10);
-}
-
-/* for other browsers */
-window.onload = sorttable.init;
-
-// written by Dean Edwards, 2005
-// with input from Tino Zijdel, Matthias Miller, Diego Perini
-
-// http://dean.edwards.name/weblog/2005/10/add-event/
-
-function dean_addEvent(element, type, handler) {
-    if (element.addEventListener) {
-        element.addEventListener(type, handler, false);
-    } else {
-        // assign each event handler a unique ID
-        if (!handler.$$guid) handler.$$guid = dean_addEvent.guid++;
-        // create a hash table of event types for the element
-        if (!element.events) element.events = {};
-        // create a hash table of event handlers for each element/event pair
-        var handlers = element.events[type];
-        if (!handlers) {
-            handlers = element.events[type] = {};
-            // store the existing event handler (if there is one)
-            if (element["on" + type]) {
-                handlers[0] = element["on" + type];
-            }
-        }
-        // store the event handler in the hash table
-        handlers[handler.$$guid] = handler;
-        // assign a global event handler to do all the work
-        element["on" + type] = handleEvent;
-    }
-};
-// a counter used to create unique IDs
-dean_addEvent.guid = 1;
-
-function removeEvent(element, type, handler) {
-    if (element.removeEventListener) {
-        element.removeEventListener(type, handler, false);
-    } else {
-        // delete the event handler from the hash table
-        if (element.events && element.events[type]) {
-            delete element.events[type][handler.$$guid];
-        }
-    }
-};
-
-function handleEvent(event) {
-    var returnValue = true;
-    // grab the event object (IE uses a global event object)
-    event = event || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);
-    // get a reference to the hash table of event handlers
-    var handlers = this.events[event.type];
-    // execute each event handler
-    for (var i in handlers) {
-        this.$$handleEvent = handlers[i];
-        if (this.$$handleEvent(event) === false) {
-            returnValue = false;
-        }
-    }
-    return returnValue;
-};
-
-function fixEvent(event) {
-    // add W3C standard event methods
-    event.preventDefault = fixEvent.preventDefault;
-    event.stopPropagation = fixEvent.stopPropagation;
-    return event;
-};
-fixEvent.preventDefault = function() {
-    this.returnValue = false;
-};
-fixEvent.stopPropagation = function() {
-  this.cancelBubble = true;
-}
-
-// Dean's forEach: http://dean.edwards.name/base/forEach.js
-/*
-    forEach, version 1.0
-    Copyright 2006, Dean Edwards
-    License: http://www.opensource.org/licenses/mit-license.php
-*/
-
-// array-like enumeration
-if (!Array.forEach) { // mozilla already supports this
-    Array.forEach = function(array, block, context) {
-        for (var i = 0; i < array.length; i++) {
-            block.call(context, array[i], i, array);
-        }
-    };
-}
-
-// generic enumeration
-Function.prototype.forEach = function(object, block, context) {
-    for (var key in object) {
-        if (typeof this.prototype[key] == "undefined") {
-            block.call(context, object[key], key, object);
-        }
-    }
-};
-
-// character enumeration
-String.forEach = function(string, block, context) {
-    Array.forEach(string.split(""), function(chr, index) {
-        block.call(context, chr, index, string);
-    });
-};
-
-// globally resolve forEach enumeration
-var forEach = function(object, block, context) {
-    if (object) {
-        var resolve = Object; // default
-        if (object instanceof Function) {
-            // functions have a "length" property
-            resolve = Function;
-        } else if (object.forEach instanceof Function) {
-            // the object implements a custom forEach method so use that
-            object.forEach(block, context);
-            return;
-        } else if (typeof object == "string") {
-            // the object is a string
-            resolve = String;
-        } else if (typeof object.length == "number") {
-            // the object is array-like
-            resolve = Array;
-        }
-        resolve.forEach(object, block, context);
-    }
-};
-
diff --git a/mod/groupselect/locallib.php b/mod/groupselect/locallib.php
deleted file mode 100644
index 22f634d..0000000
--- a/mod/groupselect/locallib.php
+++ /dev/null
@@ -1,125 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Library of functions and constants of Group selection module
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2008-2011 Petr Skoda (http://skodak.org)
- * @copyright  2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-require_once("$CFG->dirroot/group/lib.php");
-// require_once("$CFG->dirroot/group/externallib.php");
-require_once("$CFG->dirroot/mod/groupselect/lib.php");
-
-function groupselect_get_group_info($group) {
-    $group = clone($group);
-    $context = context_course::instance($group->courseid);
-
-    $group->description = file_rewrite_pluginfile_urls($group->description, 'pluginfile.php', $context->id, 'group', 'description', $group->id);
-    if (!isset($group->descriptionformat)) {
-        $group->descriptionformat = FORMAT_MOODLE;
-    }
-    $options = new stdClass;
-    $options->overflowdiv = true;
-    return format_text($group->description, $group->descriptionformat, array('filter' => false, 'overflowdiv' => true, 'context' => $context));
-}
-
-/**
- * Is the given group selection open for students to select their group at the moment?
- *
- * @param object $groupselect groupselect record
- * @return bool True if the group selection is open right now, false otherwise
- */
-function groupselect_is_open($groupselect) {
-    $now = time();
-    return ($groupselect->timeavailable < $now AND ($groupselect->timedue == 0 or $groupselect->timedue > $now));
-}
-
-
-/**
- * Get the number of members in all groups the user can select from in this activity
- *
- * @param $cm Course module slot of the groupselect instance
- * @param $targetgrouping The id of grouping the user can select a group from
- * @return array of objects: [id] => object(->usercount ->id) where id is group id
- */
-function groupselect_group_member_counts($cm, $targetgrouping=0) {
-    global $DB;
-
-    // TODO: join into enrolment table
-
-    if (empty($targetgrouping)) {
-        // all groups
-        $sql = "SELECT g.id, COUNT(gm.userid) AS usercount
-                  FROM {groups_members} gm
-                       JOIN {groups} g ON g.id = gm.groupid
-                 WHERE g.courseid = :course
-              GROUP BY g.id";
-        $params = array('course' => $cm->course);
-
-    } else {
-        $sql = "SELECT g.id, COUNT(gm.userid) AS usercount
-                  FROM {groups_members} gm
-                       JOIN {groups} g            ON g.id = gm.groupid
-                       JOIN {groupings_groups} gg ON gg.groupid = g.id
-                 WHERE g.courseid = :course
-                       AND gg.groupingid = :grouping
-              GROUP BY g.id";
-        $params = array('course' => $cm->course, 'grouping' => $targetgrouping);
-    }
-
-    return $DB->get_records_sql($sql, $params);
-}
-
-/**
- * Get password protected groups
- *
- * @return array of group ids
- */
-function groupselect_get_password_protected_groups($groupselect) {
-    global $DB;
-    $sql = "SELECT  groupid
-            FROM    {groupselect_passwords} gp
-            WHERE   gp.instance_id = ?";
-
-    $result = $DB->get_records_sql($sql, array($groupselect->id));
-    $ids = array();
-    foreach ($result as $r) {
-        array_push($ids, $r->groupid);
-    }
-    return $ids;
-}
-
-/**
- * Get users with given role in given context
- *
- * @return array of user ids
- */
-function groupselect_get_context_members_by_role($context, $roleid) {
-    global $DB;
-    $sql = "SELECT r.userid
-                  FROM   {role_assignments} r
-                 WHERE  r.contextid = ?
-                   AND    r.roleid = ?";
-
-    return $DB->get_records_sql($sql, array($context, $roleid));
-}
diff --git a/mod/groupselect/mod_form.php b/mod/groupselect/mod_form.php
deleted file mode 100644
index d30ab8b..0000000
--- a/mod/groupselect/mod_form.php
+++ /dev/null
@@ -1,189 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Group self selection instance configuration
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2008-2011 Petr Skoda (http://skodak.org)
- * @copyright  2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-require_once($CFG->dirroot.'/course/moodleform_mod.php');
-
-class mod_groupselect_mod_form extends moodleform_mod {
-
-    public function definition() {
-        global $CFG, $COURSE, $DB; // TODO: get rid of the sloppy $COURSE
-
-        $mform = $this->_form;
-
-        $config = get_config('groupselect');
-
-        $mform->addElement('header', 'general', get_string('general', 'form'));
-        $mform->addElement('text', 'name', get_string('name'), array('size' => '48'));
-        if (!empty($CFG->formatstringstriptags)) {
-            $mform->setType('name', PARAM_TEXT);
-        } else {
-            $mform->setType('name', PARAM_CLEANHTML);
-        }
-        $mform->addRule('name', null, 'required', null, 'client');
-
-        $this->standard_intro_elements();
-
-        // -------------------------------------------------------
-
-        $options = array();
-        $options[0] = get_string('fromallgroups', 'mod_groupselect');
-        if ($groupings = groups_get_all_groupings($COURSE->id)) {
-            foreach ($groupings as $grouping) {
-                $options[$grouping->id] = format_string($grouping->name);
-            }
-        }
-
-        $roles = $DB->get_records("role");
-        $supervisionRoles = [];
-
-        foreach ($roles as $role) {
-            $supervisionRoles[$role->id] = $role->name;
-        }
-
-        $mform->addElement('select', 'targetgrouping', get_string('targetgrouping', 'mod_groupselect'), $options);
-
-        // Legacy master-password functionality.
-        // $mform->addElement('passwordunmask', 'password', get_string('password', 'mod_groupselect'), 'maxlength="254" size="24"');
-        // $mform->setType('password', PARAM_RAW);
-        // $mform->addHelpButton('password', 'globalpassword', 'mod_groupselect');
-
-        $mform->addElement('text', 'minmembers', get_string('minmembers', 'mod_groupselect'), array('size' => '4'));
-        $mform->setType('minmembers', PARAM_INT);
-        $mform->setDefault('minmembers', $config->minmembers);
-        $mform->addHelpButton('minmembers', 'minmembers', 'mod_groupselect');
-
-        $mform->addElement('text', 'maxmembers', get_string('maxmembers', 'mod_groupselect'), array('size' => '4'));
-        $mform->setType('maxmembers', PARAM_INT);
-        $mform->setDefault('maxmembers', $config->maxmembers);
-        $mform->addHelpButton('maxmembers', 'maxmembers', 'mod_groupselect');
-
-        // Multi group selection
-        $mform->addElement('text', 'maxgroupmembership', get_string('maxgroupmembership', 'mod_groupselect'), array('size' => '4'));
-        $mform->setType('maxgroupmembership', PARAM_INT);
-        $mform->setDefault('maxgroupmembership', $config->maxgroupmembership);
-        // $mform->addHelpButton('maxgroupmembership', 'maxgroupmembership', 'mod_groupselect');
-
-        $mform->addElement('date_time_selector', 'timeavailable', get_string('timeavailable', 'mod_groupselect'), array('optional' => true));
-        $mform->setDefault('timeavailable', 0);
-        $mform->addElement('date_time_selector', 'timedue', get_string('timedue', 'mod_groupselect'), array('optional' => true));
-        $mform->setDefault('timedue', 0);
-
-        $mform->addElement('advcheckbox', 'studentcancreate', get_string('studentcancreate', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('studentcancreate', 'studentcancreate', 'mod_groupselect');
-        $mform->setDefault('studentcancreate', $config->studentcancreate);
-
-        $mform->addElement('advcheckbox', 'studentcansetgroupname', get_string('studentcansetgroupname', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('studentcansetgroupname', 'studentcansetgroupname', 'mod_groupselect');
-        $mform->setDefault('studentcansetgroupname', $config->studentcansetgroupname);
-        $mform->disabledIf('studentcansetgroupname', 'studentcancreate', 'notchecked');
-
-        $mform->addElement('advcheckbox', 'studentcansetdesc', get_string('studentcansetdesc', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('studentcansetdesc', 'studentcansetdesc', 'mod_groupselect');
-        $mform->setDefault('studentcansetdesc', $config->studentcansetdesc);
-        $mform->disabledIf('studentcansetdesc', 'studentcancreate', 'notchecked');
-
-        $mform->addElement('advcheckbox', 'studentcansetenrolmentkey', get_string('studentcansetenrolmentkey', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('studentcansetenrolmentkey', 'studentcansetenrolmentkey', 'mod_groupselect');
-        $mform->setDefault('studentcansetenrolmentkey', $config->studentcansetenrolmentkey);
-        $mform->disabledIf('studentcansetenrolmentkey', 'studentcancreate', 'notchecked');
-
-        // part of fixing #14
-        $mform->addElement('select', 'supervisionrole', get_string('supervisionrole', 'mod_groupselect'), $supervisionRoles);
-        // $mform->setType('supervisionrole', PARAM_INT);
-        $mform->setDefault('supervisionrole', $config->supervisionrole);
-        // $mform->addHelpButton('supervisionrole', 'mod_groupselect');
-
-        $mform->addElement('advcheckbox', 'assignteachers', get_string('assigngroup', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('assignteachers', 'assigngroup', 'mod_groupselect');
-        $mform->setDefault('assignteachers', $config->assignteachers);
-
-        $mform->addElement('advcheckbox', 'showassignedteacher', get_string('showassignedteacher', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('showassignedteacher', 'showassignedteacher', 'mod_groupselect');
-        $mform->setDefault('showassignedteacher', $config->showassignedteacher);
-        $mform->disabledIf('showassignedteacher', 'assignteachers', 'notchecked');
-
-        $mform->addElement('advcheckbox', 'hidefullgroups', get_string('hidefullgroups', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('hidefullgroups', 'hidefullgroups', 'mod_groupselect');
-        $mform->setDefault('hidefullgroups', $config->hidefullgroups);
-
-        $mform->addElement('advcheckbox', 'deleteemptygroups', get_string('deleteemptygroups', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('deleteemptygroups', 'deleteemptygroups', 'mod_groupselect');
-        $mform->setDefault('deleteemptygroups', $config->deleteemptygroups);
-
-        $mform->addElement('advcheckbox', 'notifyexpiredselection', get_string('notifyexpiredselection', 'mod_groupselect'), '',
-                array('optional' => true, 'group' => null), array(0, 1));
-        $mform->addHelpButton('notifyexpiredselection', 'notifyexpiredselection', 'mod_groupselect');
-        $mform->setDefault('notifyexpiredselection', $config->notifyexpiredselection);
-
-        // -------------------------------------------------------
-        // buttons
-        // -------------------------------------------------------
-        $this->standard_coursemodule_elements();
-
-        // -------------------------------------------------------
-        $this->add_action_buttons();
-    }
-
-    public function validation($data, $files) {
-        $errors = parent::validation($data, $files);
-
-        $maxgroupmembership = $data['maxgroupmembership'];
-        $maxmembers = $data['maxmembers'];
-        $minmembers = $data['minmembers'];
-        $timeavailable = $data['timeavailable'];
-        $timedue = $data['timedue'];
-
-        if ($maxmembers < 0) {
-            $errors['maxmembers'] = get_string('maxmembers_error_low');
-        }
-        if ($minmembers < 0) {
-            $errors['minmembers'] = get_string('minmembers_error_low');
-        }
-        if ($minmembers > $maxmembers) {
-            $errors['minmembers'] = get_string('minmembers_error_bigger_maxmembers');
-            $errors['maxmembers'] = get_string('maxmembers_error_smaller_minmembers');
-        }
-        if ($timeavailable >= $timedue and $timeavailable > 0) {
-            $errors['timeavailable'] = get_string('timeavailable_error_past_timedue');
-            $errors['timedue'] = get_string('timedue_error_pre_timeavailable');
-        }
-        if ($maxgroupmembership < 1) {
-            $errors['maxgroupmembership'] = get_string('maxgroupmembership_error_low');
-        }
-
-        return $errors;
-    }
-}
diff --git a/mod/groupselect/pix/icon.png b/mod/groupselect/pix/icon.png
deleted file mode 100644
index 6efa58bd054bf57bf597022fb06af19f87fb589b..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 945
zcmV;i15W&jP)<h;3K|Lk000e1NJLTq000;O000;W1^@s6;CDUv0000PbVXQnQ*UN;
zcVTj606}DLVr3vnZDD6+Qe|Oed2z{QJOBU#Q%OWYRCwB?R!dJ4Q561WI`oaSB48AC
z2tHzr+Jq1nO2mamHzLNwCEx}VH?no3?oDvxf{l+KU}R@vOl(ZVg~Zet;)6#UVZpnv
zX-j81b3J!DEn_KC;5H|7?z#7#@1AqMb5jAfF)}g|qR%i%H%Wq|m*gRzYrz>XXC~}i
zI6X8tI2b{VL$Emy&?ia~uuQ!cn9L`cV{c8PZ}J)kZX=LHEdZiTAGSFUlY~mn4R;(X
zg;i5X4_JG#U4R=l{S`@HX`=4?g^xdUQ@CEScWVGjk8Ha=AF<NynL|a&H-qtM-4w2q
zEnuCgIf6|$Yjop@Ssgi*nZk9g7)9*>RIqS`Jz%j2T3`n6z7@&~T<5kbXSS@ts7>$T
zb5704cp9q;D=%=J+n$VF?5_ntvgwa)#p8!BX~Ag!ctqcDXnaaXdyClj`(ASbf-o$U
z>cv3)!3K^$Ta0Xoz-peSrMd21?pbE@_%gi_fZO5<>(14C-ZUIKCLcU^8C;r9c7z~E
zAAa6#3RSX*v*M9;bIzcl+>wtmcjR#j=xleCopYVr_*(43QFtW>v~OW(U*AJgR?u|f
zY=G(OeIk+L`_^;73p-#@a~OgVIIvg5gPRgLL^+b%=j(7?1*R7a{AnO|EzQ7L(27yd
z#~`)U!@VciJ#mN0r=BmzM0*EQnqJc91?AqHceu`)&MODE-Abgu==ZzTORa8{#fUFL
za=KyYEL2(K^~x*Fa4z36^?dX9s_Zy3rJ-wX2}?`?<IYQun_d7TR<k0&s92S|Yr!q)
zr)G0>e*ulF*?%Hng@P#*L9DV5wl%Uzg+g_4YMK$01THVu(pl1(*@zP5U9caloKr)w
zs!vExjipzTvftYPBfVNokH?REHV-A94tKmx?k)mK!Q;ib6=*^od2yKO5!`;v|5@bf
zP_?IGTcdL{^|GMpl&TEikW3JDEsr%tjdZ?AMs^MG`I<jk=Mdp@Q4Mk#Ff|X!P~rDU
zA-*<t)!)A>fR;u{KD=LokWCet!+Ri|Kub_WYl~C%xP%v<uK1$TP66trJd8}ieBss$
zLrhYVa8t@!_tjx`9`cR>%%TdS?Qer^a8OMpB8d1eK)B1(J-*4>M6|Z-{uN*V8`_gi
TdMAAO00000NkvXXu0mjfRT{EW

diff --git a/mod/groupselect/pix/icon.svg b/mod/groupselect/pix/icon.svg
deleted file mode 100644
index 09018bf..0000000
--- a/mod/groupselect/pix/icon.svg
+++ /dev/null
@@ -1,36 +0,0 @@
-<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
-    <linearGradient id="dj" gradientUnits="userSpaceOnUse" x1="206.285" y1="-304.215" x2="206.285" y2="-320.215" gradientTransform="matrix(1 0 0 -1 -198.285 -296.215)">
-        <stop offset="0" stop-color="#db6d17"/>
-        <stop offset="1" stop-color="#bf3b08"/>
-    </linearGradient>
-    <linearGradient id="dk" gradientUnits="userSpaceOnUse" x1="206.035" y1="-305.215" x2="206.035" y2="-319.229" gradientTransform="matrix(1 0 0 -1 -198.285 -296.215)">
-        <stop offset="0" stop-color="#f6a55e"/>
-        <stop offset="1" stop-color="#ea5b03"/>
-    </linearGradient>
-    <linearGradient id="dl" gradientUnits="userSpaceOnUse" x1="204.485" y1="-306.201" x2="204.485" y2="-318.215" gradientTransform="matrix(1 0 0 -1 -198.285 -296.215)">
-        <stop offset="0" stop-color="#f17219"/>
-        <stop offset="1" stop-color="#ea5b03"/>
-    </linearGradient>
-    <path d="M3 16H0v-4l3.2-1.7c.5-.3.6-.8.3-1.3 0 0-1.4-1.8-1.4-3.8C2 2.4 3.8 0 6 0c.4 0 .7.1 1.1.2-1.2 1.1-2 3-2 5C5 7 5.6 8 6.1 8.7c.6.9.1 1-.3 1.3L3 11.4V16zm13-4.1l-3.1-1.6c-.5-.3-.6-.8-.3-1.2 0 0 1.4-1.8 1.4-3.8C14 2.4 12.2 0 10 0S6 2.4 6 5.3c0 2 1.4 3.8 1.4 3.8.3.4.2 1-.3 1.3L4 12v4h12v-4.1z" fill="#999"/>
-    <linearGradient id="dm" gradientUnits="userSpaceOnUse" x1="214.185" y1="-304.215" x2="214.185" y2="-320.215" gradientTransform="matrix(1 0 0 -1 -198.285 -296.215)">
-        <stop offset="0" stop-color="#db6d17"/>
-        <stop offset="1" stop-color="#bf3b08"/>
-    </linearGradient>
-    <path d="M24 24v-3.4l-3-1.5c-.5-.3-.6-.8-.3-1.2 0 0 1.6-2 1.6-4.2 0-3.2-1.9-5.7-4.4-5.7-2.4 0-4.4 2.6-4.4 5.7 0 2.1 1.6 4.2 1.6 4.2.3.4.2 1-.3 1.3l-6 3.2c-.5.3-1 .9-1 1.5v.1H24z" fill="url(#dm)"/>
-    <linearGradient id="dn" gradientUnits="userSpaceOnUse" x1="214.735" y1="-305.215" x2="214.735" y2="-319.229" gradientTransform="matrix(1 0 0 -1 -198.285 -296.215)">
-        <stop offset="0" stop-color="#f6a55e"/>
-        <stop offset="1" stop-color="#ea5b03"/>
-    </linearGradient>
-    <path d="M9.8 23l5.7-3c.5-.3.8-.7 1-1.2.1-.5 0-1.1-.4-1.5 0 0-1.4-1.8-1.4-3.6 0-2.6 1.5-4.7 3.4-4.7s3.4 2.1 3.4 4.7c0 1.8-1.4 3.6-1.4 3.6-.3.4-.5 1-.4 1.5.1.5.5 1 1 1.2l2.4 1.2V23H9.8z" fill="url(#dn)"/>
-    <linearGradient id="do" gradientUnits="userSpaceOnUse" x1="216.285" y1="-306.201" x2="216.285" y2="-318.215" gradientTransform="matrix(1 0 0 -1 -198.285 -296.215)">
-        <stop offset="0" stop-color="#f17219"/>
-        <stop offset="1" stop-color="#ea5b03"/>
-    </linearGradient>
-    <path d="M13.9 22l2.1-1.1c.8-.4 1.3-1.1 1.5-1.9s0-1.7-.6-2.3c-.3-.4-1.2-1.8-1.2-3 0-2 1.1-3.7 2.4-3.7 1.3 0 2.4 1.7 2.4 3.7 0 1.2-.9 2.5-1.2 3-.5.7-.7 1.5-.6 2.3.2.8.7 1.5 1.5 1.9l1.9 1v.1h-8.2z" fill="url(#do)"/>
-    <path fill="none" stroke="#8cc63f" stroke-width="6" stroke-miterlimit="10" d="M11 9v15"/>
-    <path fill="#8cc63f" d="M5.4 13.2l5.6-2.3 5.6 2.3L11 0z"/>
-    <g>
-        <path fill="none" stroke="#006837" stroke-width="2" stroke-miterlimit="10" d="M11 9v15"/>
-        <path fill="#006837" d="M7.3 11.4L11 9.8l3.7 1.6L11 2.6z"/>
-    </g>
-</svg>
diff --git a/mod/groupselect/select_form.php b/mod/groupselect/select_form.php
deleted file mode 100644
index 58a825f..0000000
--- a/mod/groupselect/select_form.php
+++ /dev/null
@@ -1,88 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Group self selection interface
- *
- * @package mod
- * @subpackage groupselect
- * @copyright 2008-2011 Petr Skoda (http://skodak.org)
- * @copyright 2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-defined( 'MOODLE_INTERNAL' ) || die();
-
-require_once($CFG->dirroot . '/lib/formslib.php');
-class select_form extends moodleform {
-    private $groupselect;
-
-    // Define the form
-    public function definition() {
-        global $OUTPUT;
-        $mform = $this->_form;
-
-        list( $data, $this->groupselect, $grpname ) = $this->_customdata;
-
-        // if ($this->groupselect->password !== '') {
-        //     $mform->addElement ( 'passwordunmask', 'password', get_string ( 'password', 'mod_groupselect' ), 'maxlength="254" size="24"' );
-        //     $mform->setType ( 'password', PARAM_RAW );
-        // }
-        if ($data ['group_password']) {
-            $mform->addElement( 'passwordunmask', 'password', get_string( 'password', 'mod_groupselect' ), 'maxlength="254" size="24"' );
-            $mform->setType( 'password', PARAM_RAW );
-        }
-
-        $mform->addElement( 'hidden', 'id' );
-        $mform->setType( 'id', PARAM_INT );
-
-        $mform->addElement( 'hidden', 'select' );
-        $mform->setType( 'select', PARAM_INT );
-
-        $mform->addElement( 'hidden', 'group_password' );
-        $mform->setType( 'group_password', PARAM_BOOL );
-
-        $this->add_action_buttons( true, get_string( 'select', 'mod_groupselect', $grpname ) );
-
-        $this->set_data( $data );
-    }
-
-    public function validation($data, $files) {
-        global $OUTPUT;
-
-        $errors = parent::validation( $data, $files );
-
-        // if ($this->groupselect->password !== '') {
-        //     if ($this->groupselect->password !== $data ['password']) {
-        //        $errors ['password'] = get_string ( 'incorrectpassword', 'mod_groupselect' );
-        //     }
-        // } else
-        if ($data ['group_password']) {
-            global $DB;
-            $sql = "SELECT  g.password
-                                  FROM    {groupselect_passwords} g
-                                 WHERE   g.groupid = ?";
-            $params = array (
-                    'id' => $data ['select']
-            );
-            $password = $DB->get_record_sql( $sql, $params )->password;
-
-            if (! password_verify( $data ['password'], $password )) {
-                $errors ['password'] = get_string( 'incorrectpassword', 'mod_groupselect' );
-            }
-        }
-        return $errors;
-    }
-}
diff --git a/mod/groupselect/settings.php b/mod/groupselect/settings.php
deleted file mode 100644
index dd8a338..0000000
--- a/mod/groupselect/settings.php
+++ /dev/null
@@ -1,89 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Group self selection module admin settings and defaults
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2008-2011 Petr Skoda (http://skodak.org)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-if ($ADMIN->fulltree) {
-    // get all course roles
-    $roles = $DB->get_records("role");
-    $configRoles = [];
-
-    foreach ($roles as $role) {
-        $configRoles[$role->id] = $role->name;
-    }
-
-    // --- modedit defaults -----------------------------------------------------------------------------------
-    $settings->add(new admin_setting_heading('groupselectmodeditdefaults',
-        get_string('modeditdefaults', 'admin'),
-        get_string('condifmodeditdefaults', 'admin')));
-
-    $settings->add(new admin_setting_configselect('groupselect/supervisionrole',
-        get_string('supervisionrole', 'mod_groupselect'),
-        get_string('supervisionrole_help', 'mod_groupselect'), 4, $configRoles));
-
-    $settings->add(new admin_setting_configtext('groupselect/minmembers',
-        get_string('minmembers', 'mod_groupselect'),
-        get_string('minmembers_help', 'mod_groupselect'), 0, PARAM_INT));
-
-    $settings->add(new admin_setting_configtext('groupselect/maxmembers',
-        get_string('maxmembers', 'mod_groupselect'),
-        get_string('maxmembers_help', 'mod_groupselect'), 0, PARAM_INT));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/studentcancreate',
-        get_string('studentcancreate', 'mod_groupselect'),
-        get_string('studentcancreate_help', 'mod_groupselect'), 1));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/studentcansetgroupname',
-        get_string('studentcansetgroupname', 'mod_groupselect'),
-        get_string('studentcansetgroupname_help', 'mod_groupselect'), 1));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/studentcansetdesc',
-        get_string('studentcansetdesc', 'mod_groupselect'),
-        get_string('studentcansetdesc_help', 'mod_groupselect'), 1));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/studentcansetenrolmentkey',
-        get_string('studentcansetenrolmentkey', 'mod_groupselect'),
-        get_string('studentcansetenrolmentkey_help', 'mod_groupselect'), 0));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/assignteachers',
-        get_string('assigngroup', 'mod_groupselect'),
-        get_string('assigngroup_help', 'mod_groupselect'), 0));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/showassignedteacher',
-        get_string('showassignedteacher', 'mod_groupselect'),
-        get_string('showassignedteacher_help', 'mod_groupselect'), 0));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/hidefullgroups',
-        get_string('hidefullgroups', 'mod_groupselect'),
-        get_string('hidefullgroups_help', 'mod_groupselect'), 0));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/deleteemptygroups',
-        get_string('deleteemptygroups', 'mod_groupselect'),
-        get_string('deleteemptygroups_help', 'mod_groupselect'), 1));
-
-    $settings->add(new admin_setting_configcheckbox('groupselect/notifyexpiredselection',
-        get_string('notifyexpiredselection', 'mod_groupselect'),
-        get_string('notifyexpiredselection_help', 'mod_groupselect'), 1));
-}
diff --git a/mod/groupselect/styles.css b/mod/groupselect/styles.css
deleted file mode 100644
index 3019ef3..0000000
--- a/mod/groupselect/styles.css
+++ /dev/null
@@ -1,68 +0,0 @@
-
-.mod_groupselect .mygroup,
-#page-mod-groupselect-view .me {
-  font-weight: bold;
-}
-
-.mod_groupselect .membershidden {
-  color:#AAAAAA;
-}
-
-.mod_groupselect .maxlimitreached {
-  color:#AAAAAA;
-}
-
-.mod_groupselect .export_url {
-    background-color: yellow;
-    color: red;
-}
-
-.mod_groupselect .edit, .mod_groupselect .text_to_html, .mod_groupselect td {
-  /*word-wrap:break-word !important;*/
-  word-break: break-all !important;
-}
-
-.mod_groupselect table.sortable th:not(.sorttable_sorted):not(.sorttable_sorted_reverse):not(.sorttable_nosort):after {
-    content: " \25B4\25BE"
-}
-
-/*fix hyphens in table for narrow views*/
-.mod_groupselect .groupselect-table {
-     -webkit-hyphens: auto;
-    -moz-hyphens: auto;
-    -ms-hyphens: auto;
-    hyphens: auto;
-}
-
-/*fix width and wrap for groupselect table*/
-.mod_groupselect .groupselect-table .lastcol input[type="submit"],
-.mod_groupselect .groupselect-table .lastcol input[type="submit"]:first-child{
-    white-space: pre-wrap;
-    -webkit-hyphens: auto;
-    -moz-hyphens: auto;
-    -ms-hyphens: auto;
-    hyphens: auto;
-    /*fix button width*/
-    min-width: 144px;
-}
-
-
-.mod_groupselect .c3 span, .mod_groupselect .c3 a {
-    white-space: nowrap;
-}
-.mod_groupselect td.cell.c3 {
-    min-width: 185px;
-    max-width: 200px;
-    width: auto;
-}
-.mod_groupselect .c3 a img {
-    margin-top: 4px;
-}
-
-.mod_groupselect tr div{
-    word-break: normal;
-
-}
-.mod_groupselect th {
-    white-space: nowrap;
-}
\ No newline at end of file
diff --git a/mod/groupselect/version.php b/mod/groupselect/version.php
deleted file mode 100644
index c471817..0000000
--- a/mod/groupselect/version.php
+++ /dev/null
@@ -1,35 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Group self selection
- *
- * @package    mod
- * @subpackage groupselect
- * @copyright  2008-2012 Petr Skoda (http://skodak.org)
- * @copyright  2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-
-defined('MOODLE_INTERNAL') || die;
-
-$plugin->version   = 2017061301; // The current module version (Date: YYYYMMDDXX)
-$plugin->requires  = 2015051100; // Requires this Moodle version
-$plugin->cron      = 0;          // Period for cron to check this module (secs)
-$plugin->component = 'mod_groupselect'; // Full name of the plugin (used for diagnostics)
-
-$plugin->maturity  = MATURITY_STABLE;
-$plugin->release   = "3.12"; // User-friendly version number
diff --git a/mod/groupselect/view.php b/mod/groupselect/view.php
deleted file mode 100644
index 931ca69..0000000
--- a/mod/groupselect/view.php
+++ /dev/null
@@ -1,828 +0,0 @@
-<?php
-// This file is part of Moodle - http://moodle.org/
-//
-// Moodle is free software: you can redistribute it and/or modify
-// it under the terms of the GNU General Public License as published by
-// the Free Software Foundation, either version 3 of the License, or
-// (at your option) any later version.
-//
-// Moodle is distributed in the hope that it will be useful,
-// but WITHOUT ANY WARRANTY; without even the implied warranty of
-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-// GNU General Public License for more details.
-//
-// You should have received a copy of the GNU General Public License
-// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
-
-/**
- * Main group self selection interface
- *
- * @package mod
- * @subpackage groupselect
- * @copyright 2008-2011 Petr Skoda (http://skodak.org)
- * @copyright 2014 Tampere University of Technology, P. Pyykkönen (pirkka.pyykkonen ÄT tut.fi)
- * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
- */
-require('../../config.php');
-require_once('locallib.php');
-require_once('select_form.php');
-require_once('create_form.php');
-$PAGE->requires->jquery_plugin('groupselect-jeditable', 'mod_groupselect');
-
-$id = optional_param( 'id', 0, PARAM_INT ); // Course Module ID, or
-$g = optional_param( 'g', 0, PARAM_INT ); // Page instance ID
-$select = optional_param( 'select', 0, PARAM_INT );
-$unselect = optional_param( 'unselect', 0, PARAM_INT );
-$confirm = optional_param( 'confirm', 0, PARAM_BOOL );
-$create = optional_param( 'create', 0, PARAM_BOOL );
-$password = optional_param( 'group_password', 0, PARAM_BOOL );
-$export = optional_param( 'export', 0, PARAM_BOOL );
-$assign = optional_param( 'assign', 0, PARAM_BOOL );
-$groupid = optional_param( 'groupid', 0, PARAM_INT );
-$newdescription = optional_param( 'newdescription', 0, PARAM_TEXT );
-
-if ($g) {
-    $groupselect = $DB->get_record( 'groupselect', array (
-            'id' => $g
-    ), '*', MUST_EXIST );
-    $cm = get_coursemodule_from_instance( 'groupselect', $groupselect->id, $groupselect->course, false, MUST_EXIST );
-} else {
-    $cm = get_coursemodule_from_id( 'groupselect', $id, 0, false, MUST_EXIST );
-    $groupselect = $DB->get_record( 'groupselect', array (
-            'id' => $cm->instance
-    ), '*', MUST_EXIST );
-}
-
-$course = $DB->get_record( 'course', array (
-        'id' => $cm->course
-), '*', MUST_EXIST );
-
-require_login( $course, true, $cm );
-$context = context_module::instance( $cm->id );
-
-/* add_to_log ( $course->id, 'groupselect', 'view', 'view.php?id=' . $cm->id, $groupselect->id, $cm->id );*/
-
-$PAGE->set_url( '/mod/groupselect/view.php', array (
-        'id' => $cm->id
-) );
-$PAGE->add_body_class( 'mod_groupselect' );
-$PAGE->set_title( $course->shortname . ': ' . $groupselect->name );
-$PAGE->set_heading( $course->fullname );
-$PAGE->set_activity_record( $groupselect );
-
-$event = \mod_groupselect\event\course_module_viewed::create(array(
-    'objectid' => $groupselect->id,
-    'context' => $context,
-));
-$event->add_record_snapshot('course', $course);
-$event->add_record_snapshot('groupselect', $groupselect);
-$event->trigger();
-
-$mygroups = groups_get_all_groups( $course->id, $USER->id, $groupselect->targetgrouping, 'g.*' );
-$isopen = groupselect_is_open( $groupselect );
-$groupmode = groups_get_activity_groupmode( $cm, $course );
-$counts = groupselect_group_member_counts( $cm, $groupselect->targetgrouping );
-$groups = groups_get_all_groups( $course->id, 0, $groupselect->targetgrouping );
-$passwordgroups = groupselect_get_password_protected_groups( $groupselect );
-$hidefullgroups = $groupselect->hidefullgroups;
-$exporturl = '';
-
-// fixes #14 Hard-coded role ID
-// instead of having a hard coded role id, the module should allow
-// administrators and lecturers to configure the roles to their needs
-
-// fallback variant 1 with hard coded role short name
-$teacherRole = $DB->get_record( 'role', array (
-    'shortname' => "teacher"
-), '*', MUST_EXIST );
-
-$assignrole = $teacherRole->id; // Assign non-editing teachers.
-
-// variant 2 for system wide supervision roles
-$gs_config = get_config("groupselect");
-if (property_exists($gs_config, "supervisionrole") && $gs_config->supervisionrole > 0) {
-    $assignrole = $gs_config->supervisionrole;
-}
-
-// variant 3 for course specific supervision roles.
-if (property_exists($groupselect, "supervisionrole") && $groupselect->supervisionrole > 0) {
-    $assignrole = $groupselect->supervisionrole;
-}
-
-// Permissions.
-$accessall = has_capability( 'moodle/site:accessallgroups', $context );
-$viewfullnames = has_capability( 'moodle/site:viewfullnames', $context );
-
-// multi group selection prerequisite
-$canselect = (has_capability( 'mod/groupselect:select', $context ) and is_enrolled( $context ) and (empty( $mygroups ) or count( $mygroups ) < $groupselect->maxgroupmembership));
-
-$canunselect = (has_capability( 'mod/groupselect:unselect', $context ) and is_enrolled( $context ) and ! empty( $mygroups ));
-$cancreate = ($groupselect->studentcancreate and has_capability( 'mod/groupselect:create', $context ) and is_enrolled( $context ) and empty( $mygroups ));
-$canexport = (has_capability( 'mod/groupselect:export', $context ) and count( $groups ) > 0);
-$canassign = (has_capability( 'mod/groupselect:assign', $context ) and $groupselect->assignteachers
-            and (count(groupselect_get_context_members_by_role( context_course::instance( $course->id )->id, $assignrole )) > 0));
-$canedit = ($groupselect->studentcansetdesc and $isopen);
-$cansetgroupname = ($groupselect->studentcansetgroupname);
-
-if ($course->id == SITEID) {
-    $viewothers = has_capability( 'moodle/site:viewparticipants', $context );
-} else {
-    $viewothers = has_capability( 'moodle/course:viewparticipants', $context );
-}
-
-$strgroup = get_string( 'group' );
-$strgroupdesc = get_string( 'groupdescription', 'group' );
-$strmembers = get_string( 'memberslist', 'mod_groupselect' );
-$straction = get_string( 'action', 'mod_groupselect' );
-$strcount = get_string( 'membercount', 'mod_groupselect' );
-
-// Problem notification.
-$problems = array ();
-
-if (! is_enrolled( $context )) {
-    $problems [] = get_string( 'cannotselectnoenrol', 'mod_groupselect' );
-} else {
-    if (! has_capability( 'mod/groupselect:select', $context )) {
-        $problems [] = get_string( 'cannotselectnocap', 'mod_groupselect' );
-    } else if ($groupselect->timedue != 0 and $groupselect->timedue < time() and ($groupselect->notifyexpiredselection)) {
-        $problems [] = get_string( 'notavailableanymore', 'mod_groupselect', userdate( $groupselect->timedue ) );
-    }
-}
-
-// Group description edit.
-if ($groupid and $canedit and isset($mygroups[$groupid]) and data_submitted()) {
-    $egroup = $DB->get_record_sql("SELECT *
-                                 FROM {groups} g
-                                WHERE g.id = ?", array($groupid));
-    if (strlen($newdescription) > create_form::DESCRIPTION_MAXLEN) {
-        $newdescription = substr($newdescription, 0, create_form::DESCRIPTION_MAXLEN);
-    }
-    $egroup->description = $newdescription;
-    groups_update_group($egroup);
-
-    echo strip_tags(groupselect_get_group_info($egroup));
-    die;
-}
-
-
-// Student group self-creation.
-if ($cancreate and $isopen) {
-    $data = array (
-            'id' => $id,
-            'description' => ''
-    );
-    $mform = new create_form( null, array (
-            $data,
-            $groupselect
-    ) );
-    if ($mform->is_cancelled()) {
-        redirect( $PAGE->url );
-    }
-    if ($formdata = $mform->get_data ()) {
-        /* Create a new group and add the creator as a member of it */
-        $params = array (
-            $course->id
-        );
-
-        if (!$formdata->groupname) {
-            $names = $DB->get_records_sql( "SELECT g.name
-                       FROM {groups} g
-                      WHERE g.courseid = ?", $params );
-
-            $max = 0;
-            foreach ($names as $n) {
-                if (intval( $n->name ) >= $max) {
-                    $max = intval( $n->name );
-                }
-            }
-
-            $groupname = strval( $max + 1 );
-        } else {
-            $groupname = $formdata->groupname;
-        }
-
-        $data = ( object ) array (
-                'name' => $groupname,
-                'description' => $formdata->description,
-                'courseid' => $course->id
-        );
-        $id = groups_create_group( $data, false );
-        if ($groupselect->targetgrouping != 0) {
-            groups_assign_grouping( $groupselect->targetgrouping, $id );
-        }
-
-        groups_add_member( $id, $USER->id );
-        /* add_to_log ( $course->id, 'groupselect', 'select', 'view.php?id=' . $cm->id, $groupselect->id, $cm->id );*/
-
-        if ($formdata->password !== '') {
-            $passworddata = ( object ) array (
-                    'groupid' => $id,
-                    'password' => password_hash( $formdata->password, PASSWORD_DEFAULT ),
-                    'instance_id' => $groupselect->id
-            );
-            $DB->insert_record( 'groupselect_passwords', $passworddata, false );
-        }
-        redirect ( $PAGE->url );
-    } else if ($create or $mform->is_submitted()) {
-        /* If create button was clicked, show the form
-         * or show validation errors
-         */
-        echo $OUTPUT->header();
-        echo $OUTPUT->heading( get_string( 'creategroup', 'mod_groupselect' ) );
-        $mform->display();
-        echo $OUTPUT->footer();
-        die();
-    }
-}
-
-// Student group self-selection.
-if ($select and $canselect and isset( $groups [$select] ) and $isopen) {
-
-    $grpname = format_string( $groups [$select]->name, true, array (
-            'context' => $context
-    ) );
-    $usercount = isset( $counts [$select] ) ? $counts [$select]->usercount : 0;
-
-    $data = array (
-            'id' => $id,
-            'select' => $select,
-            'group_password' => $password
-    );
-    $mform = new select_form( null, array (
-            $data,
-            $groupselect,
-            $grpname
-    ) );
-
-    if ($mform->is_cancelled()) {
-        redirect ( $PAGE->url );
-    }
-
-    if (! $isopen) {
-        $problems [] = get_string( 'cannotselectclosed', 'mod_groupselect' );
-    } else if ($groupselect->maxmembers and $groupselect->maxmembers <= $usercount) {
-        $problems [] = get_string( 'cannotselectmaxed', 'mod_groupselect', $grpname );
-    } else if ($return = $mform->get_data()) {
-        groups_add_member( $select, $USER->id );
-        // add_to_log ( $course->id, 'groupselect', 'select', 'view.php?id=' . $cm->id, $groupselect->id, $cm->id );
-
-        redirect ( $PAGE->url );
-    } else {
-        echo $OUTPUT->header();
-        echo $OUTPUT->heading( get_string( 'select', 'mod_groupselect', $grpname ) );
-        echo $OUTPUT->box_start( 'generalbox', 'notice' );
-        echo '<p>' . get_string( 'selectconfirm', 'mod_groupselect', $grpname ) . '</p>';
-        $mform->display();
-        echo $OUTPUT->box_end();
-        echo $OUTPUT->footer();
-        die();
-    }
-} else if ($unselect and $canunselect and isset( $mygroups [$unselect] )) {
-    // User unselected group.
-
-    if (! $isopen) {
-        $problems [] = get_string( 'cannotunselectclosed', 'mod_groupselect' );
-    } else if ($confirm and data_submitted() and confirm_sesskey()) {
-        groups_remove_member( $unselect, $USER->id );
-        if ($groupselect->deleteemptygroups and ! groups_get_members( $unselect )) {
-            groups_delete_group( $unselect );
-            $DB->delete_records( 'groupselect_passwords', array (
-                    'groupid' => $unselect
-            ) );
-            $DB->delete_records( 'groupselect_groups_teachers', array (
-                    'groupid' => $unselect
-            ) );
-        }
-        // add_to_log ( $course->id, 'groupselect', 'unselect', 'view.php?id=' . $cm->id, $groupselect->id, $cm->id );
-
-        redirect ( $PAGE->url );
-    } else {
-        $grpname = format_string( $mygroups [$unselect]->name, true, array (
-                'context' => $context
-        ) );
-        echo $OUTPUT->header();
-        echo $OUTPUT->heading( get_string( 'unselect', 'mod_groupselect', $grpname ) );
-        $yesurl = new moodle_url( '/mod/groupselect/view.php', array (
-                'id' => $cm->id,
-                'unselect' => $unselect,
-                'confirm' => 1,
-                'sesskey' => sesskey()
-        ) );
-        $message = get_string( 'unselectconfirm', 'mod_groupselect', $grpname );
-        echo $OUTPUT->confirm( $message, $yesurl, $PAGE->url );
-        echo $OUTPUT->footer();
-        die();
-    }
-}
-
-// Group user data export.
-if ($export and $canexport) {
-    // Fetch groups & assigned teachers.
-    $params = ['cmid' => $id, 'courseid' => $course->id, 'instanceid' => $groupselect->id];
-    $groupingsql = '';
-    if ($groupselect->targetgrouping) {
-        $groupingsql = "JOIN {groupings_groups} gg ON gg.groupid = g.id AND gg.groupingid = :grouping";
-        $params['grouping'] = $groupselect->targetgrouping;
-    }
-    $sql = "SELECT g.id AS groupid, g.name, g.description, u.username, u.firstname, u.lastname, u.email
-              FROM {groups} g
-                 $groupingsql
-         LEFT JOIN {groupselect_groups_teachers} gt
-                ON g.id = gt.groupid AND gt.instance_id = :instanceid
-         LEFT JOIN {user} u
-                ON u.id = gt.teacherid
-             WHERE g.courseid = :courseid
-          ORDER BY g.id ASC";
-    $grouplist = $DB->get_records_sql( $sql, $params );
-
-    // Fetch students & groups.
-    $sql = "SELECT m.id, u.username, u.idnumber, u.firstname, u.lastname, u.email, g.id AS groupid
-            FROM   {groups} g
-            $groupingsql
-            JOIN {groups_members} m ON g.id = m.groupid
-            JOIN {user} u ON u.id = m.userid
-            WHERE  g.courseid = :courseid
-            ORDER BY groupid ASC";
-
-    $students = $DB->get_records_sql( $sql, $params );
-
-    // Fetch max number of students in a group (may differ from setting, because teacher may add members w/o limits).
-
-    $sql = "SELECT MAX(t.memberscount) AS max
-            FROM (
-                SELECT g.id, COUNT(m.userid) AS memberscount
-                FROM {groups} g
-                $groupingsql
-                JOIN {groups_members} m on m.groupid = g.id
-                WHERE g.courseid = :courseid
-                GROUP BY g.id
-            ) t
-            ";
-
-    $maxgroupsize = $DB->get_records_sql( $sql, $params );
-    $maxgroupsize = array_pop($maxgroupsize)->max;
-
-    foreach ($students as $student) {
-        $gid = $student->groupid;
-        foreach ($grouplist as $group) {
-            if ($gid === $group->groupid) {
-                for ($i = 1; $i < intval($maxgroupsize) + 1; $i++) {
-                    if (!isset($group->$i)) {
-                        $group->$i = $student;
-                        break;
-                    }
-                }
-            }
-        }
-    }
-
-    // Format data to csv.
-    $quote = '"';
-    $charstoescape = array(
-                        $quote => $quote.$quote
-                        );
-    $assignedteacher = 'Assigned teacher ';
-    $groupmember = 'Member ';
-    $header = array(
-    // get_string ( 'groupid', 'mod_groupselect' ),
-    // get_string ( 'groupname', 'group' ),
-    // get_string ( 'groupdescription', 'group' ),
-    // get_string ( 'assignedteacher', 'mod_groupselect' ) . ' ' . get_string ( 'username' ),
-    // get_string ( 'assignedteacher', 'mod_groupselect' ) . ' ' . get_string ( 'firstname' ),
-    // get_string ( 'assignedteacher', 'mod_groupselect' ) . ' ' . get_string ( 'lastname' ),
-    // get_string ( 'assignedteacher', 'mod_groupselect' ) . ' ' . get_string ( 'email' )
-
-        'Group ID',
-        'Group Name',
-        'Group Size',
-        'Group Description',
-    $assignedteacher . 'Username',
-    $assignedteacher . 'Firstname',
-    $assignedteacher . 'Lastname',
-    $assignedteacher . 'Email',
-            );
-
-    for ($i = 0; $i < $maxgroupsize; $i++) {
-        // $header[] = get_string('member', 'mod_groupselect').' '.strval($i+1).' '. get_string ( 'username' );
-        // $header[] = get_string('member', 'mod_groupselect').' '.strval($i+1).' '. get_string ( 'idnumber' );
-        // $header[] = get_string('member', 'mod_groupselect').' '.strval($i+1).' '. get_string ( 'firstname' );
-        // $header[] = get_string('member', 'mod_groupselect').' '.strval($i+1).' '. get_string ( 'lastname' );
-        // $header[] = get_string('member', 'mod_groupselect').' '.strval($i+1).' '. get_string ( 'email' );
-
-        $header[] = $groupmember.strval($i + 1).' '.'Username';
-        $header[] = $groupmember.strval($i + 1).' '.'ID Number';
-        $header[] = $groupmember.strval($i + 1).' '.'Firstname';
-        $header[] = $groupmember.strval($i + 1).' '.'Lastname';
-        $header[] = $groupmember.strval($i + 1).' '.'Email';
-    }
-    $content = implode( (','), $header ) . "\n";
-
-    // TODO: add better export options
-    // Quick workaround for Excel
-    $content = 'sep=,' . "\n" . $content;
-
-    foreach ($grouplist as $r) {
-        $row = array (
-                $quote.strtr($r->groupid, $charstoescape).$quote,
-                $quote.strtr($r->name, $charstoescape).$quote,
-                $quote.strtr($r->description, $charstoescape).$quote,
-                $quote.strtr($r->username, $charstoescape).$quote,
-                $quote.strtr($r->firstname, $charstoescape).$quote,
-                $quote.strtr($r->lastname, $charstoescape).$quote,
-                $quote.strtr($r->email, $charstoescape).$quote
-        );
-        $groupsize = 0;
-        for ($i = 1; $i < $maxgroupsize + 1; $i++) {
-            if (isset($r->$i)) {
-                // First element contains group-member relation id which is not needed, so skip it
-                $first = true;
-                foreach ($r->$i as $memberfield) {
-                    if ($first) {
-                        $first = false;
-                        continue;
-                    }
-                    $row[] = $quote.strtr($memberfield, $charstoescape).$quote;
-                }
-                array_pop($row);
-                $groupsize++;
-            }
-        }
-        array_splice($row, 2, 0, $quote.strval($groupsize).$quote);
-        $content = $content . implode( (','), $row ) . "\n";
-    }
-
-    // File info
-    $separator = '_';
-    $filename = get_string( 'modulename', 'mod_groupselect' ) . $separator .
-            clean_param(format_string($course->shortname), PARAM_FILE) . $separator .
-                date( 'Y-m-d' ) . '.csv';
-    $filename = str_replace( ' ', '', $filename );
-    $fs = get_file_storage();
-    $fileinfo = array (
-            'contextid' => $context->id, // ID of context
-            'component' => 'mod_groupselect', // usually = table name
-            'filearea' => 'export', // usually = table name
-            'itemid' => $groupselect->id, // usually = ID of row in table
-            'filepath' => '/', // any path beginning and ending in /
-            'filename' => $filename
-    ); // any filename
-
-    // See if same file exists
-    $file = $fs->get_file( $fileinfo ['contextid'], $fileinfo ['component'], $fileinfo ['filearea'], $fileinfo ['itemid'], $fileinfo ['filepath'], $fileinfo ['filename'] );
-
-    // Delete already existing file
-    if ($file) {
-        $file->delete();
-    }
-
-    $file = $fs->create_file_from_string( $fileinfo, $content );
-    // Store file url to show later
-    $exporturl = moodle_url::make_pluginfile_url( $file->get_contextid(), $file->get_component(), $file->get_filearea(),
-                                                  $file->get_itemid(), $file->get_filepath(), $file->get_filename());
-
-    // event logging
-    $event = \mod_groupselect\event\export_link_created::create(array(
-            'context' => $context,
-    ));
-    $event->trigger();
-}
-
-// User wants to assign supervisors via supervisionrole
-if ($assign and $canassign) {
-
-    $alreadyassigned = count ( $DB->get_records( 'groupselect_groups_teachers', array (
-            'instance_id' => $groupselect->id
-    ) ) ) > 0 ? true : false;
-    if ($alreadyassigned) {
-        $DB->delete_records( 'groupselect_groups_teachers', array (
-                'instance_id' => $groupselect->id
-        ) );
-    }
-
-    $coursecontext = context_course::instance( $course->id )->id;
-    $teachers = groupselect_get_context_members_by_role( $coursecontext, $assignrole );
-    shuffle( $teachers );
-
-    $agroups = $groups;
-    $teachercount = count($teachers);
-
-    foreach ($teachers as $teacher) {
-        $i = 0;
-        $iterations = ceil( count( $agroups ) / $teachercount );
-        while ( $i < $iterations ) {
-            $group = array_rand( $agroups );
-
-            unset ( $agroups [$group] );
-            $newgroupteacherrelation = ( object ) array (
-                    'groupid' => $group,
-                    'teacherid' => $teacher->userid,
-                    'instance_id' => $groupselect->id
-            );
-
-            $gsgteacherid = $DB->insert_record( 'groupselect_groups_teachers', $newgroupteacherrelation );
-            $newgroupteacherrelation->id = $gsgteacherid;
-
-            // event logging
-            $event = \mod_groupselect\event\group_teacher_added::create(array(
-                    'context' => $context,
-                    'objectid' => $gsgteacherid,
-                    'relateduserid' => $teacher->userid,
-                    'other' => array(
-                    'groupid' => $group)
-                    ));
-            $event->add_record_snapshot('groupselect', $groupselect);
-            $event->add_record_snapshot('groupselect_groups_teachers', $newgroupteacherrelation);
-            $event->trigger();
-
-            $i ++;
-        }
-        $teachercount --;
-    }
-}
-
-// *** PAGE OUTPUT ***
-echo $OUTPUT->header();
-echo $OUTPUT->heading( format_string( $groupselect->name, true, array (
-        'context' => $context
-) ) );
-
-if (trim( strip_tags( $groupselect->intro ) )) {
-    echo $OUTPUT->box_start( 'mod_introbox', 'groupselectintro' );
-    echo format_module_intro( 'groupselect', $groupselect, $cm->id );
-    echo $OUTPUT->box_end();
-}
-
-// Too few members in my group-notification.
-if ($groupselect->minmembers > 0 and ! empty( $mygroups )) {
-    $mygroup = array_keys( $mygroups );
-    $mygroup = $mygroup [0];
-    $usercount = isset( $counts [$mygroup] ) ? $counts [$mygroup]->usercount : 0;
-    if ($groupselect->minmembers > $usercount) {
-        echo $OUTPUT->notification( get_string( 'minmembers_notification', 'mod_groupselect', $groupselect->minmembers ) );
-    }
-}
-
-// Activity opening/closing related notificatins.
-if ($groupselect->timeavailable !== 0 and $groupselect->timeavailable > time()) {
-    echo $OUTPUT->notification( get_string( 'timeavailable', 'mod_groupselect' ) . ' ' . strval( userdate( $groupselect->timeavailable ) ) );
-}
-if ($groupselect->timedue !== 0 and $groupselect->timedue > time()) {
-    echo $OUTPUT->notification( get_string( 'timedue', 'mod_groupselect' ) . ' ' . strval( userdate( $groupselect->timedue ) ) );
-}
-
-// Create group button.
-if ($cancreate and $isopen and ! $create) {
-    echo $OUTPUT->single_button( new moodle_url( '/mod/groupselect/view.php', array (
-            'id' => $cm->id,
-            'create' => true
-    ) ), get_string( 'creategroup', 'mod_groupselect' ) );
-}
-
-// Export button.
-if ($canexport) {
-    if ($exporturl === '') {
-        echo $OUTPUT->single_button( new moodle_url( '/mod/groupselect/view.php', array (
-                    'id' => $cm->id,
-                    'export' => true
-            ) ), get_string( 'export', 'mod_groupselect' ) );
-    } else {
-        echo '<div class="export_url" >';
-        echo $OUTPUT->action_link( $exporturl, get_string( 'export_download', 'mod_groupselect' ) );
-        echo '</div> <br>';
-    }
-}
-
-// Assign button.
-if ($canassign and count($groups) > 0 ) {
-    $action = new confirm_action(get_string('assigngroup_confirm', 'mod_groupselect'));
-    $button = new single_button(new moodle_url( '/mod/groupselect/view.php', array (
-            'id' => $cm->id,
-                        'assign' => true
-    ) ), get_string( 'assigngroup', 'mod_groupselect' ) );
-    $button->add_action($action);
-    echo $OUTPUT->render($button);
-}
-
-if (empty ( $groups )) {
-    echo $OUTPUT->notification( get_string( 'nogroups', 'mod_groupselect' ) );
-} else {
-    if ($problems) {
-        foreach ($problems as $problem) {
-            echo $OUTPUT->notification( $problem, 'notifyproblem' );
-        }
-    }
-
-    $data = array ();
-    $actionpresent = false;
-
-    $assignedrelation = $DB->get_records_sql( "SELECT g.id AS rid, g.teacherid AS id, g.groupid
-                                                FROM  {groupselect_groups_teachers} g
-                                                WHERE g.instance_id = ?", array (
-                                                                                    'instance_id' => $groupselect->id
-    ) );
-    $assignedteacherids = array ();
-    foreach ($assignedrelation as $r) {
-        array_push( $assignedteacherids, $r->id );
-    }
-    $assignedteacherids = array_unique( $assignedteacherids );
-
-    if (count ( $assignedteacherids ) > 0) {
-        $sql = "SELECT   *
-                      FROM   {user} u
-                     WHERE ";
-        foreach ($assignedteacherids as $i) {
-            $sql = $sql . "u.id = ? OR ";
-        }
-        $sql = substr ( $sql, 0, - 3 );
-
-        $assignedteachers = $DB->get_records_sql($sql, $assignedteacherids);
-    }
-
-    // Group list.
-    foreach ($groups as $group) {
-        $ismember = isset( $mygroups [$group->id] );
-        $usercount = isset( $counts [$group->id] ) ? $counts [$group->id]->usercount : 0;
-        $grpname = format_string( $group->name, true, array (
-                'context' => $context
-        ) );
-
-        // Skips listing full groups if set.
-        if (! $ismember and $hidefullgroups and $groupselect->maxmembers === $usercount) {
-            continue;
-        }
-
-        if (in_array( $group->id, $passwordgroups )) {
-            $group->password = true;
-        } else {
-            $group->password = false;
-        }
-
-        // Groupname.
-        $line = array ();
-        if ($ismember) {
-            $line [0] = '<div class="mygroup">' . $grpname . '</div>';
-        } else {
-            $line [0] = $grpname;
-        }
-
-        // Group description.
-        if ($ismember and $canedit) {
-            $line [1] = '<div id="' . $group->id . '" class="edit">' .
-                // $group->description
-                strip_tags(groupselect_get_group_info( $group ))
-                . '</div>';
-        } else {
-            $line [1] = strip_tags(groupselect_get_group_info( $group ));
-        }
-
-        // Member count
-        if ($groupselect->maxmembers) {
-            $line [2] = $usercount . '/' . $groupselect->maxmembers;
-        } else {
-            $line [2] = $usercount;
-        }
-
-        if ($accessall) {
-            $canseemembers = true;
-        } else {
-            if ($groupmode == SEPARATEGROUPS and ! $ismember) {
-                $canseemembers = false;
-            } else {
-                $canseemembers = $viewothers;
-            }
-        }
-
-        // Group members.
-        if ($canseemembers) {
-            if ($members = groups_get_members( $group->id )) {
-                $membernames = array ();
-                foreach ($members as $member) {
-                    $pic = $OUTPUT->user_picture( $member, array (
-                            'courseid' => $course->id
-                    ) );
-                    if ($member->id == $USER->id) {
-                        $membernames [] = '<span class="me">' . $pic . '&nbsp;' . fullname( $member, $viewfullnames ) . '</span>';
-                    } else {
-                        $membernames [] = $pic . '&nbsp;<a href="' . $CFG->wwwroot . '/user/view.php?id=' . $member->id .
-                                          '&amp;course=' . $course->id . '">' . fullname( $member, $viewfullnames ) . '</a>';
-                    }
-                }
-                // Show assigned teacher, if exists, when enabled or when user is non-assigned teacher
-                if ($groupselect->showassignedteacher or user_has_role_assignment($USER->id, $assignrole, context_course::instance( $course->id )->id)) {
-                    $teacherid = null;
-                    foreach ($assignedrelation as $r) {
-                        if ($r->groupid === $group->id) {
-                            $teacherid = $r->id;
-                            break;
-                        }
-                    }
-                    if ($teacherid) {
-                        $teacher = null;
-                        foreach ($assignedteachers as $a) {
-                            if ($a->id === $teacherid) {
-                                $teacher = $a;
-                                $break;
-                            }
-                        }
-                        $pic = $OUTPUT->user_picture( $teacher, array (
-                                'courseid' => $course->id
-                        ) );
-                        if ($teacher->id == $USER->id) {
-                            $membernames [] = '<span class="me">' . $pic . '&nbsp;' . fullname( $teacher, $viewfullnames ) .
-                                              ' (' . get_string( 'assignedteacher', 'mod_groupselect' ) . ')'.'</span>';
-                        } else {
-                            $membernames [] = $pic . '&nbsp;<a href="' . $CFG->wwwroot . '/user/view.php?id=' . $teacher->id .
-                                              '&amp;course=' . $course->id . '">' . fullname( $teacher, $viewfullnames ) .
-                                              ' (' . get_string( 'assignedteacher', 'mod_groupselect' ) . ')</a>';
-                        }
-                    }
-                }
-                $line [3] = implode( ', ', $membernames );
-            } else {
-                $line [3] = '';
-            }
-        } else {
-            $line [3] = '<div class="membershidden">' . get_string( 'membershidden', 'mod_groupselect' ) . '</div>';
-        }
-
-        // Icons.
-        $line [4] = '<div class="icons">';
-        if ($groupselect->minmembers > $usercount) {
-            $line [4] = $line [4] . $OUTPUT->pix_icon( 'i/risk_xss', get_string( 'minmembers_icon', 'mod_groupselect' ), null,
-                array (
-                    'align' => 'left'
-                )
-            );
-        }
-        if ($group->password) {
-            $line [4] = $line [4] . $OUTPUT->pix_icon( 't/locked', get_string( 'password', 'mod_groupselect' ), null, array (
-                    'align' => 'right'
-            ) );
-        }
-        $line [4] = $line [4] . '</div>';
-
-        // Action buttons.
-        if ($isopen) {
-            if (! $ismember and $canselect and $groupselect->maxmembers and $groupselect->maxmembers <= $usercount) {
-                $line [5] = '<div class="maxlimitreached">' . get_string( 'maxlimitreached', 'mod_groupselect' ) . '</div>'; // full - no more members
-                $actionpresent = true;
-            } else if ($ismember and $canunselect) {
-                $line [5] = $OUTPUT->single_button( new moodle_url( '/mod/groupselect/view.php', array (
-                        'id' => $cm->id,
-                        'unselect' => $group->id
-                ) ), get_string( 'unselect', 'mod_groupselect', "") );
-                $actionpresent = true;
-            } else if (! $ismember and $canselect) {
-                $line [5] = $OUTPUT->single_button( new moodle_url( '/mod/groupselect/view.php', array (
-                        'id' => $cm->id,
-                        'select' => $group->id,
-                        'group_password' => $group->password
-                ) ), get_string ( 'select', 'mod_groupselect', "") );
-                $actionpresent = true;
-            } else {
-                $line [5] = '';
-            }
-        }
-        if (!$ismember) {
-            $data [] = $line;
-        } else {
-            array_unshift($data, $line);
-        }
-    }
-
-    $sortscript = file_get_contents( './lib/sorttable/sorttable.js' );
-    echo html_writer::script( $sortscript );
-    $table = new html_table();
-    $table->attributes = array (
-            'class' => 'generaltable sortable groupselect-table',
-    );
-    $table->head = array (
-            $strgroup,
-            $strgroupdesc,
-            $strcount,
-            $strmembers,
-            ''
-    );
-    if ($actionpresent) {
-        array_push($table->head, $straction);
-    }
-
-    $table->data = $data;
-    echo html_writer::table( $table );
-}
-
-echo $OUTPUT->footer();
-$url = $PAGE->url;
-// Group description edit JS.
-if ($canedit) {
-    echo '<script type="text/javascript">$(document).ready(function() {
-        $(".edit").editable("' . $url .'", {
-            id        : "groupid",
-            name      : "newdescription",
-            type      : "textarea",
-            submit    : "'.get_string('ok', 'mod_groupselect').'",
-            indicator : "'.get_string('saving', 'mod_groupselect').'",
-            tooltip   : "'.get_string('edittooltip', 'mod_groupselect').'"
-        });
-    });</script>';
-}
-- 
1.8.3.1

