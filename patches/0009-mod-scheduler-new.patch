From f55ec1b74755144102d9325083bf26d9b9c3f908 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Sat, 23 Sep 2017 11:36:07 +0300
Subject: [PATCH 09/95] mod/scheduler (new)

---
 mod/scheduler/README.txt                           |  217 +++
 mod/scheduler/ajax.php                             |   48 +
 mod/scheduler/appointmentforms.php                 |  158 +++
 .../backup_scheduler_activity_task.class.php       |   60 +
 .../backup/moodle2/backup_scheduler_stepslib.php   |   86 ++
 .../restore_scheduler_activity_task.class.php      |   99 ++
 .../backup/moodle2/restore_scheduler_stepslib.php  |  113 ++
 mod/scheduler/bookingform.php                      |  127 ++
 mod/scheduler/classes/event/appointment_base.php   |   91 ++
 .../classes/event/appointment_list_viewed.php      |   62 +
 mod/scheduler/classes/event/booking_added.php      |   63 +
 .../classes/event/booking_form_viewed.php          |   63 +
 mod/scheduler/classes/event/booking_removed.php    |   64 +
 .../event/course_module_instance_list_viewed.php   |   24 +
 mod/scheduler/classes/event/scheduler_base.php     |  110 ++
 mod/scheduler/classes/event/slot_added.php         |   64 +
 mod/scheduler/classes/event/slot_base.php          |   90 ++
 mod/scheduler/classes/event/slot_deleted.php       |   71 +
 mod/scheduler/classes/search/activity.php          |   23 +
 mod/scheduler/classes/task/purge_unused_slots.php  |   32 +
 mod/scheduler/classes/task/send_reminders.php      |   67 +
 mod/scheduler/customlib.php                        |   65 +
 mod/scheduler/datelist.php                         |  232 ++++
 mod/scheduler/db/access.php                        |  149 +++
 mod/scheduler/db/install.xml                       |   87 ++
 mod/scheduler/db/messages.php                      |   27 +
 mod/scheduler/db/tasks.php                         |   30 +
 mod/scheduler/db/upgrade.php                       |  325 +++++
 mod/scheduler/export.php                           |  122 ++
 mod/scheduler/exportform.php                       |  157 +++
 mod/scheduler/exportlib.php                        | 1401 ++++++++++++++++++++
 mod/scheduler/index.php                            |   89 ++
 mod/scheduler/lang/en/scheduler.php                |  583 ++++++++
 mod/scheduler/lib.php                              |  714 ++++++++++
 mod/scheduler/locallib.php                         |  333 +++++
 mod/scheduler/mailtemplatelib.php                  |  206 +++
 mod/scheduler/message_form.php                     |   96 ++
 mod/scheduler/mod_form.php                         |  214 +++
 mod/scheduler/model/modellib.php                   |  497 +++++++
 mod/scheduler/model/scheduler_appointment.php      |  128 ++
 mod/scheduler/model/scheduler_instance.php         | 1205 +++++++++++++++++
 mod/scheduler/model/scheduler_slot.php             |  467 +++++++
 mod/scheduler/pix/attachment.png                   |  Bin 0 -> 710 bytes
 mod/scheduler/pix/attachment.svg                   |   55 +
 mod/scheduler/pix/icon.gif                         |  Bin 0 -> 217 bytes
 mod/scheduler/pix/icon.png                         |  Bin 0 -> 1271 bytes
 mod/scheduler/pix/icon.svg                         |  151 +++
 mod/scheduler/pix/ticked.gif                       |  Bin 0 -> 944 bytes
 mod/scheduler/pix/unticked.gif                     |  Bin 0 -> 943 bytes
 mod/scheduler/renderable.php                       |  680 ++++++++++
 mod/scheduler/renderer.php                         | 1064 +++++++++++++++
 mod/scheduler/settings.php                         |   47 +
 mod/scheduler/slotforms.php                        |  618 +++++++++
 mod/scheduler/studentview.controller.php           |  286 ++++
 mod/scheduler/studentview.php                      |  242 ++++
 mod/scheduler/styles.css                           |  214 +++
 mod/scheduler/teacherview.controller.php           |  344 +++++
 mod/scheduler/teacherview.php                      |  638 +++++++++
 mod/scheduler/tests/behat/add_slots.feature        |  113 ++
 mod/scheduler/tests/behat/behat_mod_scheduler.php  |  138 ++
 mod/scheduler/tests/behat/conflicts.feature        |  199 +++
 .../tests/behat/group_availability.feature         |   77 ++
 mod/scheduler/tests/behat/groupmode.feature        |  350 +++++
 mod/scheduler/tests/behat/groupscheduling.feature  |  155 +++
 mod/scheduler/tests/behat/notes.feature            |  175 +++
 mod/scheduler/tests/behat/officehours.feature      |   96 ++
 mod/scheduler/tests/behat/studentdata.feature      |   89 ++
 .../tests/behat/tutorappointments.feature          |  222 ++++
 mod/scheduler/tests/behat/viewslots.feature        |  177 +++
 mod/scheduler/tests/fixtures/studentfile.txt       |    1 +
 mod/scheduler/tests/generator/lib.php              |  103 ++
 mod/scheduler/tests/model_test.php                 |  132 ++
 mod/scheduler/tests/scheduler_test.php             |  493 +++++++
 mod/scheduler/tests/slot_test.php                  |  296 +++++
 mod/scheduler/version.php                          |   21 +
 mod/scheduler/view.php                             |   78 ++
 mod/scheduler/viewstatistics.php                   |  276 ++++
 mod/scheduler/viewstudent.php                      |  141 ++
 .../moodle-mod_scheduler-delselected-debug.js      |  Bin 0 -> 955 bytes
 .../moodle-mod_scheduler-delselected-min.js        |  Bin 0 -> 584 bytes
 .../moodle-mod_scheduler-delselected.js            |  Bin 0 -> 955 bytes
 .../moodle-mod_scheduler-saveseen-debug.js         |  Bin 0 -> 1828 bytes
 .../moodle-mod_scheduler-saveseen-min.js           |  Bin 0 -> 867 bytes
 .../moodle-mod_scheduler-saveseen.js               |  Bin 0 -> 1828 bytes
 .../moodle-mod_scheduler-studentlist-debug.js      |  Bin 0 -> 983 bytes
 .../moodle-mod_scheduler-studentlist-min.js        |  Bin 0 -> 777 bytes
 .../moodle-mod_scheduler-studentlist.js            |  Bin 0 -> 983 bytes
 mod/scheduler/yui/src/delselected/build.json       |   10 +
 .../yui/src/delselected/js/delselected.js          |   36 +
 .../yui/src/delselected/meta/delselected.json      |    7 +
 mod/scheduler/yui/src/saveseen/build.json          |   10 +
 mod/scheduler/yui/src/saveseen/js/saveseen.js      |   62 +
 mod/scheduler/yui/src/saveseen/meta/saveseen.json  |    7 +
 mod/scheduler/yui/src/studentlist/build.json       |   10 +
 .../yui/src/studentlist/js/studentlist.js          |   35 +
 .../yui/src/studentlist/meta/studentlist.json      |    7 +
 96 files changed, 16714 insertions(+)
 create mode 100644 mod/scheduler/README.txt
 create mode 100644 mod/scheduler/ajax.php
 create mode 100644 mod/scheduler/appointmentforms.php
 create mode 100644 mod/scheduler/backup/moodle2/backup_scheduler_activity_task.class.php
 create mode 100644 mod/scheduler/backup/moodle2/backup_scheduler_stepslib.php
 create mode 100644 mod/scheduler/backup/moodle2/restore_scheduler_activity_task.class.php
 create mode 100644 mod/scheduler/backup/moodle2/restore_scheduler_stepslib.php
 create mode 100644 mod/scheduler/bookingform.php
 create mode 100644 mod/scheduler/classes/event/appointment_base.php
 create mode 100644 mod/scheduler/classes/event/appointment_list_viewed.php
 create mode 100644 mod/scheduler/classes/event/booking_added.php
 create mode 100644 mod/scheduler/classes/event/booking_form_viewed.php
 create mode 100644 mod/scheduler/classes/event/booking_removed.php
 create mode 100644 mod/scheduler/classes/event/course_module_instance_list_viewed.php
 create mode 100644 mod/scheduler/classes/event/scheduler_base.php
 create mode 100644 mod/scheduler/classes/event/slot_added.php
 create mode 100644 mod/scheduler/classes/event/slot_base.php
 create mode 100644 mod/scheduler/classes/event/slot_deleted.php
 create mode 100644 mod/scheduler/classes/search/activity.php
 create mode 100644 mod/scheduler/classes/task/purge_unused_slots.php
 create mode 100644 mod/scheduler/classes/task/send_reminders.php
 create mode 100644 mod/scheduler/customlib.php
 create mode 100644 mod/scheduler/datelist.php
 create mode 100644 mod/scheduler/db/access.php
 create mode 100644 mod/scheduler/db/install.xml
 create mode 100644 mod/scheduler/db/messages.php
 create mode 100644 mod/scheduler/db/tasks.php
 create mode 100644 mod/scheduler/db/upgrade.php
 create mode 100644 mod/scheduler/export.php
 create mode 100644 mod/scheduler/exportform.php
 create mode 100644 mod/scheduler/exportlib.php
 create mode 100644 mod/scheduler/index.php
 create mode 100644 mod/scheduler/lang/en/scheduler.php
 create mode 100644 mod/scheduler/lib.php
 create mode 100644 mod/scheduler/locallib.php
 create mode 100644 mod/scheduler/mailtemplatelib.php
 create mode 100644 mod/scheduler/message_form.php
 create mode 100644 mod/scheduler/mod_form.php
 create mode 100644 mod/scheduler/model/modellib.php
 create mode 100644 mod/scheduler/model/scheduler_appointment.php
 create mode 100644 mod/scheduler/model/scheduler_instance.php
 create mode 100644 mod/scheduler/model/scheduler_slot.php
 create mode 100644 mod/scheduler/pix/attachment.png
 create mode 100644 mod/scheduler/pix/attachment.svg
 create mode 100644 mod/scheduler/pix/icon.gif
 create mode 100644 mod/scheduler/pix/icon.png
 create mode 100644 mod/scheduler/pix/icon.svg
 create mode 100644 mod/scheduler/pix/ticked.gif
 create mode 100644 mod/scheduler/pix/unticked.gif
 create mode 100644 mod/scheduler/renderable.php
 create mode 100644 mod/scheduler/renderer.php
 create mode 100644 mod/scheduler/settings.php
 create mode 100644 mod/scheduler/slotforms.php
 create mode 100644 mod/scheduler/studentview.controller.php
 create mode 100644 mod/scheduler/studentview.php
 create mode 100644 mod/scheduler/styles.css
 create mode 100644 mod/scheduler/teacherview.controller.php
 create mode 100644 mod/scheduler/teacherview.php
 create mode 100644 mod/scheduler/tests/behat/add_slots.feature
 create mode 100644 mod/scheduler/tests/behat/behat_mod_scheduler.php
 create mode 100644 mod/scheduler/tests/behat/conflicts.feature
 create mode 100644 mod/scheduler/tests/behat/group_availability.feature
 create mode 100644 mod/scheduler/tests/behat/groupmode.feature
 create mode 100644 mod/scheduler/tests/behat/groupscheduling.feature
 create mode 100644 mod/scheduler/tests/behat/notes.feature
 create mode 100644 mod/scheduler/tests/behat/officehours.feature
 create mode 100644 mod/scheduler/tests/behat/studentdata.feature
 create mode 100644 mod/scheduler/tests/behat/tutorappointments.feature
 create mode 100644 mod/scheduler/tests/behat/viewslots.feature
 create mode 100644 mod/scheduler/tests/fixtures/studentfile.txt
 create mode 100644 mod/scheduler/tests/generator/lib.php
 create mode 100644 mod/scheduler/tests/model_test.php
 create mode 100644 mod/scheduler/tests/scheduler_test.php
 create mode 100644 mod/scheduler/tests/slot_test.php
 create mode 100644 mod/scheduler/version.php
 create mode 100644 mod/scheduler/view.php
 create mode 100644 mod/scheduler/viewstatistics.php
 create mode 100644 mod/scheduler/viewstudent.php
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected-debug.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected-min.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen-debug.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen-min.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist-debug.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist-min.js
 create mode 100644 mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist.js
 create mode 100644 mod/scheduler/yui/src/delselected/build.json
 create mode 100644 mod/scheduler/yui/src/delselected/js/delselected.js
 create mode 100644 mod/scheduler/yui/src/delselected/meta/delselected.json
 create mode 100644 mod/scheduler/yui/src/saveseen/build.json
 create mode 100644 mod/scheduler/yui/src/saveseen/js/saveseen.js
 create mode 100644 mod/scheduler/yui/src/saveseen/meta/saveseen.json
 create mode 100644 mod/scheduler/yui/src/studentlist/build.json
 create mode 100644 mod/scheduler/yui/src/studentlist/js/studentlist.js
 create mode 100644 mod/scheduler/yui/src/studentlist/meta/studentlist.json

diff --git a/mod/scheduler/README.txt b/mod/scheduler/README.txt
new file mode 100644
index 0000000..ea0d5fa
--- /dev/null
+++ b/mod/scheduler/README.txt
@@ -0,0 +1,217 @@
+Appointment Scheduler for Moodle
+
+This program is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details:
+
+http://www.gnu.org/copyleft/gpl.html
+
+
+=== Description ===
+
+The Scheduler module helps you to schedule appointments with your students. 
+Teachers specify time slots for meetings, students then choose one of them on Moodle.
+Teacher in turn can record the outcome of the meeting - and optionally a grade - 
+within the scheduler.
+
+For further information, please see:
+    http://docs.moodle.org/33/en/Scheduler_module
+
+(Note that the information there may refer to a previous version of the module.)
+
+
+=== Installation instructions ===
+
+Place the code of the module into the mod/scheduler directory of your Moodle
+directory root. That is, the present file should be located at:
+mod/scheduler/README.txt
+
+For further installation instructions please see:
+    http://docs.moodle.org/en/Installing_contributed_modules_or_plugins
+
+This module is intended for Moodle 3.3 and above.
+
+
+=== Authors ===
+
+Current maintainer:
+ Henning Bostelmann, University of York <henning.bostelmann@york.ac.uk>
+
+Based on previous work by:
+
+* Gustav Delius <gustav.delius@york.ac.uk> (until Moodle 1.7)
+* Valery Fremaux <valery.fremaux@club-internet.fr> (Moodle 1.8 - Moodle 1.9)
+
+With further contributions taken from:
+
+* Vivek Arora (independent migration of the module to 2.0)
+* Andriy Semenets (Russian and Ukrainian localization)
+* Gaël Mifsud (French localization)
+* Various authors of the core Moodle code
+
+
+=== Release notes ===
+
+--- Version 3.3 ---
+
+Intended for Moodle 3.3 and later.
+
+New features / improvements:
+
+Optionally, before making an appointment, students now see a booking screen 
+in which they need to enter text, upload a file, and/or solve a captcha.
+
+Filter strings (e.g., multilang syntax) are now processed in course shortname,
+course fullname, and location fields.
+
+Export files can now include custom profile fields of students.
+
+Feature changes:
+
+For booking in groups, students now need to select explicitly which group
+they are booking for, or whether they want to make an individual booking.
+Individual bookings can be disabled via a global configuration setting.
+
+For viewing student's email addresses, the capability 
+moodle/site:viewuseridentity is now required.
+
+When allowing an "unlimited" number of appointments, students will no longer
+be included in reminder e-mails if they have booked at least one slot. 
+
+Refactoring / API changes:
+
+The function scheduler_get_user_fields() in customlib.php has changed 
+signature. If you have customized it in an earlier version, you will want 
+to edit your code.
+
+--- Version 3.1 ---
+
+Intended for Moodle 3.1 and later.
+
+New features / improvements:
+
+An additional "confidential note" field is supplied for appointments;
+the contents can be read by teachers only.
+
+Slot notes and appointment notes can now contain attachments.
+
+Students can now be allowed to see existing bookings of other students.
+See https://docs.moodle.org/31/en/Scheduler_Module_capabilities#Student_side
+
+Feature changes:
+
+Sending of invitations and reminders is no longer handled via a "mailto" link
+but rather via a webform, using Moodle's messaging system.
+
+The conflict detection feature (when creating new slots) has been reworked slightly.
+See https://docs.moodle.org/31/en/Scheduler:_Conflicts
+
+Refactoring / API changes:
+
+All email-related features now use the Messaging API.
+
+Appointment reminders and deletion of past unused slots are now handled via
+the Scheduled Tasks API.
+
+The new Search API is supported for the activity description only.
+
+--- Version 2.9 ---
+
+Intended for Moodle 2.9 and later.
+
+New features / improvements:
+
+The export screen now allows users to choose the format of the output file,
+as well as the data fields to include in the export. File format may
+slightly differ from previous versions.
+
+Improved gradebook integration: Grades overridden in the gradebook will now 
+show up as such in the scheduler.
+
+Lists of students to be scheduled now take availability conditions
+(groups and groupings) into account.
+
+Feature changes:
+
+The handling of "group mode" in Scheduler has changed. The feature of "booking
+entire groups into a slot" is now controlled by a setting "Booking in groups" 
+at the level of each scheduler. The setting "Group mode" in "Common module 
+settings" is now used in line with usual Moodle conventions - setting it to,
+e.g., "Separate groups" will mean that students can only book slots with 
+teachers in the same group. The old "Group mode" settings are automatically
+migrated to "Booking in groups" and the "Group mode" set to "None".
+If you have used group scheduling in previous versions, please check your data
+after migration.
+
+The student view has been redesigned. Bookable appointments are now displayed 
+in pages of 25, and student select a slot by clicking a button "Book slot"
+rather then selecting with a radio button and clicking "Save choice".  
+ 
+For using the Overview screen outside the current scheduler, e.g., for displaying
+all slots of a user across the site, users will now need extra permissions;
+see CONTRIB-5750 for details.
+
+Refactoring / API changes:
+
+Config settings have been migrated to the config_plugins table.
+
+--- Version 2.7 ---
+
+Intended for Moodle 2.7 and later. 
+
+New features:
+
+Students can now be allowed to book several slots at a time.
+"Volatile slots" replaced with "guard time" - students cannot change their booking
+for slots closer than this time to the current time.
+
+Feature changes:
+
+"Notes" field will now be shown to students at booking time.
+
+Refactoring / API changes:
+
+Major refactoring of teacher view (slot list), student view (booking screen),
+teacher view of individual appointments, as well as of the backend.
+Security enhancements (sessionid parameter now used throughout).
+Adapted to changes in core API and to the new logging/event system (Event 2).
+
+--- Version 2.5 ---
+
+Intended for Moodle 2.5 and later. 
+
+Module adapted to API changes Moodle core.
+"Add slot" and "Edit slot" forms refactored, now based on Moodle Forms.
+Language packs migrated to AMOS, removed from plugin codebase.
+
+--- Version 2.3 ---
+
+Intended for Moodle 2.3 and later; no major functional changes, but API adapted and minor enhancements.
+
+--- Version 2.0 --- 
+
+No major functional changes over 1.9; bug fixes and API migration only. Requires 1.9 for database upgrades.  
+
+
+=== Technical notes ===
+
+The code of this module is rather old, some of it still predates even Moodle 1.9.
+It has now largely, but not completely, been adapted to the new APIs.
+The following aspects have been migrated, that is, malfunction in this respect 
+should be considered a bug:
+
+* Gradebook integration
+* Moodle 2 backup
+* New rich text editor and file API 
+* Localization / language packs
+* Logging / event system
+* Scheduler tasks API
+* Messaging API
+
+The module does not use any deprecated API as of Moodle 3.3.
diff --git a/mod/scheduler/ajax.php b/mod/scheduler/ajax.php
new file mode 100644
index 0000000..1a9910e
--- /dev/null
+++ b/mod/scheduler/ajax.php
@@ -0,0 +1,48 @@
+<?php
+
+/**
+ * Process ajax requests
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+define('AJAX_SCRIPT', true);
+
+require_once(dirname(dirname(dirname(__FILE__))).'/config.php');
+require_once('locallib.php');
+
+$id = required_param('id', PARAM_INT);
+$action = required_param('action', PARAM_ALPHA);
+
+$cm = get_coursemodule_from_id('scheduler', $id, 0, false, MUST_EXIST);
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$scheduler = scheduler_instance::load_by_coursemodule_id($id);
+
+require_login($course, true, $cm);
+require_sesskey();
+
+$return = 'OK';
+
+switch ($action) {
+    case 'saveseen':
+
+        $appid = required_param('appointmentid', PARAM_INT);
+        $slotid = $DB->get_field('scheduler_appointment', 'slotid', array('id' => $appid));
+        $slot = $scheduler->get_slot($slotid);
+        $app = $slot->get_appointment($appid);
+        $newseen = required_param('seen', PARAM_BOOL);
+
+        if ($USER->id != $slot->teacherid) {
+            require_capability('mod/scheduler:manageallappointments', $scheduler->context);
+        }
+
+        $app->attended = $newseen;
+        $slot->save();
+
+        break;
+}
+
+echo json_encode($return);
+die;
diff --git a/mod/scheduler/appointmentforms.php b/mod/scheduler/appointmentforms.php
new file mode 100644
index 0000000..fb72df3
--- /dev/null
+++ b/mod/scheduler/appointmentforms.php
@@ -0,0 +1,158 @@
+<?php
+
+/**
+ * Appointment-related forms of the scheduler module
+ * (using Moodle formslib)
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Form to edit one appointment
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_editappointment_form extends moodleform {
+
+    /**
+     * @var scheduler_appointment the appointment being edited
+     */
+    protected $appointment;
+
+   /**
+     * @var bool whether to distribute grade to all group members
+     */
+    protected $distribute;
+
+    /**
+     * @var whether the teacher can edit grades
+     */
+    protected $editgrade;
+
+    /**
+     * @var array options for notes fields
+     */
+    public $noteoptions;
+
+    /**
+     * Create a new edit appointment form
+     *
+     * @param scheduler_appointment $appointment the appointment to edit
+     * @param mixed $action the action attribute for the form
+     * @param bool $editgrade whether the grade can be edited
+     * @param bool $distribute whether to distribute grades to all group members
+     */
+    public function __construct(scheduler_appointment $appointment, $action, $editgrade, $distribute) {
+        $this->appointment = $appointment;
+        $this->distribute = $distribute;
+        $this->editgrade = $editgrade;
+        $this->noteoptions = array('trusttext' => true, 'maxfiles' => -1, 'maxbytes' => 0,
+                                   'context' => $appointment->get_scheduler()->get_context(),
+                                   'subdirs' => false, 'collapsed' => true);
+        parent::__construct($action, null);
+    }
+
+    protected function definition() {
+
+        global $output;
+
+        $mform = $this->_form;
+        $scheduler = $this->appointment->get_scheduler();
+
+        // Seen tickbox.
+        $mform->addElement('checkbox', 'attended', get_string('attended', 'scheduler'));
+
+        // Grade.
+        if ($scheduler->scale != 0) {
+            if ($this->editgrade) {
+                $gradechoices = $output->grading_choices($scheduler);
+                $mform->addElement('select', 'grade', get_string('grade', 'scheduler'), $gradechoices);
+            } else {
+                $gradetext = $output->format_grade($scheduler, $this->appointment->grade);
+                $mform->addElement('static', 'gradedisplay', get_string('grade', 'scheduler'), $gradetext);
+            }
+        }
+        // Appointment notes (visible to teacher and/or student).
+        if ($scheduler->uses_appointmentnotes()) {
+            $mform->addElement('editor', 'appointmentnote_editor', get_string('appointmentnote', 'scheduler'),
+                               array('rows' => 3, 'columns' => 60), $this->noteoptions);
+            $mform->setType('appointmentnote', PARAM_RAW); // Must be PARAM_RAW for rich text editor content.
+        }
+        if ($scheduler->uses_teachernotes()) {
+            $mform->addElement('editor', 'teachernote_editor', get_string('teachernote', 'scheduler'),
+                               array('rows' => 3, 'columns' => 60), $this->noteoptions);
+            $mform->setType('teachernote', PARAM_RAW); // Must be PARAM_RAW for rich text editor content.
+        }
+        if ($this->distribute && ($scheduler->uses_appointmentnotes() || $scheduler->uses_teachernotes() || $this->editgrade) ) {
+            $mform->addElement('checkbox', 'distribute', get_string('distributetoslot', 'scheduler'));
+            $mform->setDefault('distribute', false);
+        }
+
+        $this->add_action_buttons();
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        return $errors;
+    }
+
+    /**
+     * Prepare form data from an appointment record
+     *
+     * @param scheduler_appointment $appointment appointment to edit
+     * @return stdClass form data
+     */
+    public function prepare_appointment_data(scheduler_appointment $appointment) {
+        $newdata = clone($appointment->get_data());
+        $context = $this->appointment->get_scheduler()->get_context();
+
+        $newdata = file_prepare_standard_editor($newdata, 'appointmentnote', $this->noteoptions, $context,
+                                                'mod_scheduler', 'appointmentnote', $this->appointment->id);
+
+        $newdata = file_prepare_standard_editor($newdata, 'teachernote', $this->noteoptions, $context,
+                                                'mod_scheduler', 'teachernote', $this->appointment->id);
+        return $newdata;
+    }
+
+    /**
+     * Save form data into appointment record
+     *
+     * @param stdClass $formdata data extracted from form
+     * @param scheduler_appointment $appointment appointment to update
+     */
+    public function save_appointment_data(stdClass $formdata, scheduler_appointment $appointment) {
+        $scheduler = $appointment->get_scheduler();
+        $cid = $scheduler->context->id;
+        $appointment->set_data($formdata);
+        $appointment->attended = isset($formdata->attended);
+        if ($scheduler->uses_appointmentnotes() && isset($formdata->appointmentnote_editor)) {
+            $editor = $formdata->appointmentnote_editor;
+            $appointment->appointmentnote = file_save_draft_area_files($editor['itemid'], $cid,
+                    'mod_scheduler', 'appointmentnote', $appointment->id,
+                    $this->noteoptions, $editor['text']);
+            $appointment->appointmentnoteformat = $editor['format'];
+        }
+        if ($scheduler->uses_teachernotes() && isset($formdata->teachernote_editor)) {
+            $editor = $formdata->teachernote_editor;
+            $appointment->teachernote = file_save_draft_area_files($editor['itemid'], $cid,
+                    'mod_scheduler', 'teachernote', $appointment->id,
+                    $this->noteoptions, $editor['text']);
+            $appointment->teachernoteformat = $editor['format'];
+        }
+        $appointment->save();
+        if (isset($formdata->distribute)) {
+            $slot = $appointment->get_slot();
+            $slot->distribute_appointment_data($appointment);
+        }
+    }
+}
+
diff --git a/mod/scheduler/backup/moodle2/backup_scheduler_activity_task.class.php b/mod/scheduler/backup/moodle2/backup_scheduler_activity_task.class.php
new file mode 100644
index 0000000..fa2bff4
--- /dev/null
+++ b/mod/scheduler/backup/moodle2/backup_scheduler_activity_task.class.php
@@ -0,0 +1,60 @@
+<?php
+
+/**
+ * Backup activity task for the Scheduler module
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/scheduler/backup/moodle2/backup_scheduler_stepslib.php');
+
+/**
+ * Scheduler backup task that provides all the settings and steps to perform one
+ * complete backup of the activity.
+ *
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class backup_scheduler_activity_task extends backup_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity.
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Scheduler only has one structure step.
+        $this->add_step(new backup_scheduler_activity_structure_step('scheduler_structure', 'scheduler.xml'));
+    }
+
+    /**
+     * Code the transformations to perform in the activity in
+     * order to get transportable (encoded) links
+     *
+     * @param string $content some HTML text that eventually contains URLs to the activity instance scripts
+     */
+    static public function encode_content_links($content) {
+        global $CFG;
+
+        $base = preg_quote($CFG->wwwroot, "/");
+
+        // Link to the list of schedulers.
+        $search = "/(".$base."\/mod\/scheduler\/index.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@SCHEDULERINDEX*$2@$', $content);
+
+        // Link to scheduler view by coursemoduleid.
+        $search = "/(".$base."\/mod\/scheduler\/view.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@SCHEDULERVIEWBYID*$2@$', $content);
+
+        return $content;
+    }
+}
diff --git a/mod/scheduler/backup/moodle2/backup_scheduler_stepslib.php b/mod/scheduler/backup/moodle2/backup_scheduler_stepslib.php
new file mode 100644
index 0000000..9e5c819
--- /dev/null
+++ b/mod/scheduler/backup/moodle2/backup_scheduler_stepslib.php
@@ -0,0 +1,86 @@
+<?php
+
+/**
+ * Define all the backup steps that will be used by the backup_scheduler_activity_task
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Define the complete scheduler structure for backup, with file and id annotations
+ *
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class backup_scheduler_activity_structure_step extends backup_activity_structure_step {
+
+    protected function define_structure() {
+
+        // To know if we are including userinfo.
+        $userinfo = $this->get_setting_value('userinfo');
+
+        // Define each element separated.
+        $scheduler = new backup_nested_element('scheduler', array('id'), array(
+            'name', 'intro', 'introformat', 'schedulermode', 'maxbookings',
+            'guardtime', 'defaultslotduration', 'allownotifications', 'staffrolename',
+            'scale', 'gradingstrategy', 'bookingrouping', 'usenotes',
+            'usebookingform', 'bookinginstructions', 'bookinginstructionsformat',
+            'usestudentnotes', 'requireupload', 'uploadmaxfiles', 'uploadmaxsize',
+            'usecaptcha', 'timemodified'));
+
+        $slots = new backup_nested_element('slots');
+
+        $slot = new backup_nested_element('slot', array('id'), array(
+            'starttime', 'duration', 'teacherid', 'appointmentlocation',
+            'timemodified', 'notes', 'notesformat', 'exclusivity',
+            'emaildate', 'hideuntil'));
+
+        $appointments = new backup_nested_element('appointments');
+
+        $appointment = new backup_nested_element('appointment', array('id'), array(
+            'studentid', 'attended', 'grade',
+            'appointmentnote', 'appointmentnoteformat', 'teachernote', 'teachernoteformat',
+            'studentnote', 'studentnoteformat', 'timecreated', 'timemodified'));
+
+        // Build the tree.
+
+        $scheduler->add_child($slots);
+        $slots->add_child($slot);
+
+        $slot->add_child($appointments);
+        $appointments->add_child($appointment);
+
+        // Define sources.
+        $scheduler->set_source_table('scheduler', array('id' => backup::VAR_ACTIVITYID));
+        $scheduler->annotate_ids('grouping', 'bookingrouping');
+
+        // Include appointments only if we back up user information.
+        if ($userinfo) {
+            $slot->set_source_table('scheduler_slots', array('schedulerid' => backup::VAR_PARENTID));
+            $appointment->set_source_table('scheduler_appointment', array('slotid' => backup::VAR_PARENTID));
+        }
+
+        // Define id annotations.
+        $scheduler->annotate_ids('scale', 'scale');
+
+        if ($userinfo) {
+            $slot->annotate_ids('user', 'teacherid');
+            $appointment->annotate_ids('user', 'studentid');
+        }
+
+        // Define file annotations.
+        $scheduler->annotate_files('mod_scheduler', 'intro', null); // Files stored in intro field.
+        $scheduler->annotate_files('mod_scheduler', 'bookinginstructions', null); // Files stored in intro field.
+        $slot->annotate_files('mod_scheduler', 'slotnote', 'id'); // Files stored in slot notes.
+        $appointment->annotate_files('mod_scheduler', 'appointmentnote', 'id'); // Files stored in appointment notes.
+        $appointment->annotate_files('mod_scheduler', 'teachernote', 'id'); // Files stored in teacher-only notes.
+        $appointment->annotate_files('mod_scheduler', 'studentfiles', 'id'); // Files uploaded by students.
+
+        // Return the root element (scheduler), wrapped into standard activity structure.
+        return $this->prepare_activity_structure($scheduler);
+    }
+}
diff --git a/mod/scheduler/backup/moodle2/restore_scheduler_activity_task.class.php b/mod/scheduler/backup/moodle2/restore_scheduler_activity_task.class.php
new file mode 100644
index 0000000..c505368
--- /dev/null
+++ b/mod/scheduler/backup/moodle2/restore_scheduler_activity_task.class.php
@@ -0,0 +1,99 @@
+<?php
+
+/**
+ * Restore task for Scheduler.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/scheduler/backup/moodle2/restore_scheduler_stepslib.php');
+
+/**
+ * scheduler restore task that provides all the settings and steps to perform one
+ * complete restore of the activity
+ *
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class restore_scheduler_activity_task extends restore_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity.
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Scheduler has only one structure step.
+        $this->add_step(new restore_scheduler_activity_structure_step('scheduler_structure', 'scheduler.xml'));
+    }
+
+    /**
+     * Define the contents in the activity that must be
+     * processed by the link decoder
+     */
+    static public function define_decode_contents() {
+        $contents = array();
+
+        $contents[] = new restore_decode_content('scheduler', array('intro'), 'scheduler');
+
+        return $contents;
+    }
+
+    /**
+     * Define the decoding rules for links belonging
+     * to the activity to be executed by the link decoder
+     */
+    static public function define_decode_rules() {
+        $rules = array();
+
+        $rules[] = new restore_decode_rule('SCHEDULERVIEWBYID', '/mod/scheduler/view.php?id=$1', 'course_module');
+        $rules[] = new restore_decode_rule('SCHEDULERINDEX', '/mod/scheduler/index.php?id=$1', 'course');
+
+        return $rules;
+
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * scheduler logs. It must return one array
+     * of {@link restore_log_rule} objects
+     */
+    static public function define_restore_log_rules() {
+        $rules = array();
+
+        $rules[] = new restore_log_rule('scheduler', 'add', 'view.php?id={course_module}', '{scheduler}');
+        $rules[] = new restore_log_rule('scheduler', 'update', 'view.php?id={course_module}', '{scheduler}');
+        $rules[] = new restore_log_rule('scheduler', 'view', 'view.php?id={course_module}', '{scheduler}');
+
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * course logs. It must return one array
+     * of {@link restore_log_rule} objects
+     *
+     * Note this rules are applied when restoring course logs
+     * by the restore final task, but are defined here at
+     * activity level. All them are rules not linked to any module instance (cmid = 0)
+     */
+    static public function define_restore_log_rules_for_course() {
+        $rules = array();
+
+        $rules[] = new restore_log_rule('scheduler', 'view all', 'index.php?id={course}', null);
+
+        return $rules;
+    }
+}
diff --git a/mod/scheduler/backup/moodle2/restore_scheduler_stepslib.php b/mod/scheduler/backup/moodle2/restore_scheduler_stepslib.php
new file mode 100644
index 0000000..028c346
--- /dev/null
+++ b/mod/scheduler/backup/moodle2/restore_scheduler_stepslib.php
@@ -0,0 +1,113 @@
+<?php
+
+/**
+ * Define all the restore steps that will be used by the restore_scheduler_activity_task
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Structure step to restore one scheduler activity
+ *
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class restore_scheduler_activity_structure_step extends restore_activity_structure_step {
+
+    protected function define_structure() {
+
+        $paths = array();
+        $userinfo = $this->get_setting_value('userinfo');
+
+        $scheduler = new restore_path_element('scheduler', '/activity/scheduler');
+        $paths[] = $scheduler;
+
+        if ($userinfo) {
+            $slot = new restore_path_element('scheduler_slot', '/activity/scheduler/slots/slot');
+            $paths[] = $slot;
+
+            $appointment = new restore_path_element('scheduler_appointment',
+                                                    '/activity/scheduler/slots/slot/appointments/appointment');
+            $paths[] = $appointment;
+        }
+
+        // Return the paths wrapped into standard activity structure.
+        return $this->prepare_activity_structure($paths);
+    }
+
+    protected function process_scheduler($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+        $data->course = $this->get_courseid();
+
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+
+        if ($data->scale < 0) { // Scale found, get mapping.
+            $data->scale = -($this->get_mappingid('scale', abs($data->scale)));
+        }
+
+        if (is_null($data->gradingstrategy)) { // Catch inconsistent data created by pre-1.9 DB schema.
+            $data->gradingstrategy = 0;
+        }
+
+        if ($data->bookingrouping > 0) {
+            $data->bookingrouping = $this->get_mappingid('grouping', $data->bookingrouping);
+        }
+
+        // Insert the scheduler record.
+        $newitemid = $DB->insert_record('scheduler', $data);
+        // Immediately after inserting "activity" record, call this.
+        $this->apply_activity_instance($newitemid);
+    }
+
+    protected function process_scheduler_slot($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->schedulerid = $this->get_new_parentid('scheduler');
+        $data->starttime = $this->apply_date_offset($data->starttime);
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+        $data->emaildate = $this->apply_date_offset($data->emaildate);
+        $data->hideuntil = $this->apply_date_offset($data->hideuntil);
+
+        $data->teacherid = $this->get_mappingid('user', $data->teacherid);
+
+        $newitemid = $DB->insert_record('scheduler_slots', $data);
+        $this->set_mapping('scheduler_slot', $oldid, $newitemid, true);
+    }
+
+    protected function process_scheduler_appointment($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->slotid = $this->get_new_parentid('scheduler_slot');
+
+        $data->timecreated = $this->apply_date_offset($data->timecreated);
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+
+        $data->studentid = $this->get_mappingid('user', $data->studentid);
+
+        $newitemid = $DB->insert_record('scheduler_appointment', $data);
+        $this->set_mapping('scheduler_appointment', $oldid, $newitemid, true);
+    }
+
+    protected function after_execute() {
+        // Add scheduler related files.
+        $this->add_related_files('mod_scheduler', 'intro', null);
+        $this->add_related_files('mod_scheduler', 'bookinginstructions', null);
+        $this->add_related_files('mod_scheduler', 'slotnote', 'scheduler_slot');
+        $this->add_related_files('mod_scheduler', 'appointmentnote', 'scheduler_appointment');
+        $this->add_related_files('mod_scheduler', 'teachernote', 'scheduler_appointment');
+        $this->add_related_files('mod_scheduler', 'studentfiles', 'scheduler_appointment');
+    }
+}
diff --git a/mod/scheduler/bookingform.php b/mod/scheduler/bookingform.php
new file mode 100644
index 0000000..285de39
--- /dev/null
+++ b/mod/scheduler/bookingform.php
@@ -0,0 +1,127 @@
+<?php
+
+/**
+ * Appointment booking form of the scheduler module
+ * (using Moodle formslib)
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Student-side form to book or edit an appointment in a selected slot
+ */
+class scheduler_booking_form extends moodleform {
+
+    protected $slot;
+    protected $appointment = null;
+    protected $uploadoptions;
+    protected $existing;
+
+    public function __construct(scheduler_slot $slot, $action, $existing = false) {
+        $this->slot = $slot;
+        $this->existing = $existing;
+        parent::__construct($action, null);
+    }
+
+    protected function definition() {
+
+        global $CFG, $output;
+
+        $mform = $this->_form;
+        $scheduler = $this->slot->get_scheduler();
+
+        $this->noteoptions = array('trusttext' => false, 'maxfiles' => 0, 'maxbytes' => 0,
+                                   'context' => $scheduler->get_context(),
+                                   'collapsed' => true);
+
+        $this->uploadoptions = array('subdirs' => 0,
+                                     'maxbytes' => $scheduler->uploadmaxsize,
+                                     'maxfiles' => $scheduler->uploadmaxfiles);
+
+        // Text field for student-supplied data.
+        if ($scheduler->uses_studentnotes()) {
+
+            $mform->addElement('editor', 'studentnote_editor', get_string('yourstudentnote', 'scheduler'),
+                                array('rows' => 3, 'columns' => 60), $this->noteoptions);
+            $mform->setType('studentnote', PARAM_RAW); // Must be PARAM_RAW for rich text editor content.
+            if ($scheduler->usestudentnotes == 2) {
+                $mform->addRule('studentnote_editor', get_string('notesrequired', 'scheduler'), 'required');
+            }
+        }
+
+        // Student file upload.
+        if ($scheduler->uses_studentfiles()) {
+            $mform->addElement('filemanager', 'studentfiles',
+                    get_string('uploadstudentfiles', 'scheduler'),
+                    null, $this->uploadoptions );
+            if ($scheduler->requireupload) {
+                $mform->addRule('studentfiles', get_string('uploadrequired', 'scheduler'), 'required');
+            }
+        }
+
+        // Captcha.
+        if ($scheduler->uses_bookingcaptcha() && !$this->existing) {
+            $mform->addElement('recaptcha', 'bookingcaptcha', get_string('security_question', 'auth'), array('https' => true));
+            $mform->addHelpButton('bookingcaptcha', 'recaptcha', 'auth');
+            $mform->closeHeaderBefore('bookingcaptcha');
+        }
+
+        $submitlabel = $this->existing ? null : get_string('confirmbooking', 'scheduler');
+        $this->add_action_buttons(true, $submitlabel);
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        if (!$this->existing && $this->slot->get_scheduler()->uses_bookingcaptcha()) {
+            $recaptcha = $this->_form->getElement('bookingcaptcha');
+            if (!empty($this->_form->_submitValues['recaptcha_challenge_field'])) {
+                $challenge = $this->_form->_submitValues['recaptcha_challenge_field'];
+                $response = $this->_form->_submitValues['recaptcha_response_field'];
+                if (true !== ($result = $recaptcha->verify($challenge, $response))) {
+                    $errors['bookingcaptcha'] = $result;
+                }
+            } else {
+                $errors['bookingcaptcha'] = get_string('missingrecaptchachallengefield');
+            }
+        }
+
+        return $errors;
+    }
+
+    public function prepare_booking_data(scheduler_appointment $appointment) {
+        $this->appointment = $appointment;
+
+        $newdata = clone($appointment->get_data());
+        $context = $appointment->get_scheduler()->get_context();
+
+        $newdata = file_prepare_standard_editor($newdata, 'studentnote', $this->noteoptions, $context);
+
+        $draftitemid = file_get_submitted_draft_itemid('studentfiles');
+        file_prepare_draft_area($draftitemid, $context->id, 'mod_scheduler', 'studentfiles', $appointment->id);
+        $newdata->studentfiles = $draftitemid;
+
+        return $newdata;
+    }
+
+    public function save_booking_data(stdClass $formdata, scheduler_appointment $appointment) {
+        $scheduler = $appointment->get_scheduler();
+        if ($scheduler->uses_studentnotes() && isset($formdata->studentnote_editor)) {
+            $editor = $formdata->studentnote_editor;
+            $appointment->studentnote = $editor['text'];
+            $appointment->studentnoteformat = $editor['format'];
+        }
+        if ($scheduler->uses_studentfiles()) {
+            file_save_draft_area_files($formdata->studentfiles, $scheduler->context->id,
+                                       'mod_scheduler', 'studentfiles', $appointment->id,
+                                       $this->uploadoptions);
+        }
+        $appointment->save();
+    }
+}
diff --git a/mod/scheduler/classes/event/appointment_base.php b/mod/scheduler/classes/event/appointment_base.php
new file mode 100644
index 0000000..62aa8f1
--- /dev/null
+++ b/mod/scheduler/classes/event/appointment_base.php
@@ -0,0 +1,91 @@
+<?php
+
+/**
+ * Base class for appointment-based events.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler abstract base event class for appointment-based events.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class appointment_base extends \core\event\base {
+
+
+    /**
+     * @var \scheduler_appointment the appointment associated with this event
+     */
+    protected $appointment;
+
+    /**
+     * Return the base data fields for an appointment
+     *
+     * @param \scheduler_appointment $appointment the appointment in question
+     * @return array
+     */
+    protected static function base_data(\scheduler_appointment $appointment) {
+        return array(
+            'context' => $appointment->get_parent()->get_context(),
+            'objectid' => $appointment->id
+        );
+    }
+
+    /**
+     * Set data of the event from an appointment record.
+     *
+     * @param \scheduler_appointment $appointment
+     */
+    protected function set_appointment(\scheduler_appointment $appointment) {
+        $this->add_record_snapshot('scheduler_appointment', $appointment->data);
+        $this->add_record_snapshot('scheduler_slots', $appointment->get_parent()->data);
+        $this->add_record_snapshot('scheduler', $appointment->get_parent()->get_parent()->data);
+        $this->appointment = $appointment;
+        $this->data['objecttable'] = 'scheduler_appointments';
+    }
+
+    /**
+     * Get appointment object.
+     *
+     * NOTE: to be used from observers only.
+     *
+     * @throws \coding_exception
+     * @return \scheduler_appointment
+     */
+    public function get_appointment() {
+        if ($this->is_restored()) {
+            throw new \coding_exception('get_appointment() is intended for event observers only');
+        }
+        return $this->appointment;
+    }
+
+    /**
+     * Returns relevant URL.
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/scheduler/view.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+}
diff --git a/mod/scheduler/classes/event/appointment_list_viewed.php b/mod/scheduler/classes/event/appointment_list_viewed.php
new file mode 100644
index 0000000..49eab72
--- /dev/null
+++ b/mod/scheduler/classes/event/appointment_list_viewed.php
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * Defines the mod_scheduler appointment list viewed event.
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler appointment list viewed event.
+ *
+ * Indicates that a teacher has viewed the list of appointments and slots.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+ class appointment_list_viewed extends scheduler_base {
+
+    /**
+     * Create this event on a given scheduler.
+     *
+     * @param \scheduler_instance $scheduler
+     * @return \core\event\base
+     */
+    public static function create_from_scheduler(\scheduler_instance $scheduler) {
+        $event = self::create(self::base_data($scheduler));
+        $event->set_scheduler($scheduler);
+        return $event;
+    }
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event_appointmentlistviewed', 'scheduler');
+    }
+
+    /**
+     * Returns non-localised event description with id's for admin use only.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' has viewed the list of appointments in the scheduler with course module id '$this->contextinstanceid'.";
+    }
+}
diff --git a/mod/scheduler/classes/event/booking_added.php b/mod/scheduler/classes/event/booking_added.php
new file mode 100644
index 0000000..bf05468
--- /dev/null
+++ b/mod/scheduler/classes/event/booking_added.php
@@ -0,0 +1,63 @@
+<?php
+
+/**
+ * Defines the mod_scheduler booking form added event.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler booking form added event.
+ *
+ * Indicates that a student has booked into a slot.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class booking_added extends slot_base {
+
+    /**
+     * Create this event on a given scheduler.
+     *
+     * @param \scheduler_instance $scheduler
+     * @return \core\event\base
+     */
+    public static function create_from_slot(\scheduler_slot $slot) {
+        $event = self::create(self::base_data($slot));
+        $event->set_slot($slot);
+        return $event;
+    }
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event_bookingadded', 'scheduler');
+    }
+
+    /**
+     * Returns non-localised event description with id's for admin use only.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' has booked into the slot with id  '{$this->objectid}'"
+                ." in the scheduler with course module id '$this->contextinstanceid'.";
+    }
+}
diff --git a/mod/scheduler/classes/event/booking_form_viewed.php b/mod/scheduler/classes/event/booking_form_viewed.php
new file mode 100644
index 0000000..9807564
--- /dev/null
+++ b/mod/scheduler/classes/event/booking_form_viewed.php
@@ -0,0 +1,63 @@
+<?php
+
+/**
+ * Defines the mod_scheduler booking form viewed event.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler booking form viewed event.
+ *
+ * Indicates that a student has viewed the booking form.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class booking_form_viewed extends scheduler_base {
+
+    /**
+     * Create this event on a given scheduler.
+     *
+     * @param \scheduler_instance $scheduler
+     * @return \core\event\base
+     */
+    public static function create_from_scheduler(\scheduler_instance $scheduler) {
+        $event = self::create(self::base_data($scheduler));
+        $event->set_scheduler($scheduler);
+        return $event;
+    }
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event_bookingformviewed', 'scheduler');
+    }
+
+    /**
+     * Returns non-localised event description with id's for admin use only.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' has viewed the booking form in the scheduler with course module id '$this->contextinstanceid'.";
+    }
+}
diff --git a/mod/scheduler/classes/event/booking_removed.php b/mod/scheduler/classes/event/booking_removed.php
new file mode 100644
index 0000000..620e80c
--- /dev/null
+++ b/mod/scheduler/classes/event/booking_removed.php
@@ -0,0 +1,64 @@
+<?php
+
+/**
+ * Defines the mod_scheduler booking form removed event.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler booking form removed event.
+ *
+ * Indicates that a student has removed their booking from a slot.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class booking_removed extends slot_base {
+
+    /**
+     * Create this event on a given slot.
+     *
+     * @param \scheduler_slot $slot
+     * @return \core\event\base
+     */
+    public static function create_from_slot(\scheduler_slot $slot) {
+        $event = self::create(self::base_data($slot));
+        $event->set_slot($slot);
+        return $event;
+    }
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event_bookingremoved', 'scheduler');
+    }
+
+    /**
+     * Returns non-localised event description with id's for admin use only.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' has removed their booking from the slot with id  '{$this->objectid}'"
+                ." in the scheduler with course module id '$this->contextinstanceid'.";
+    }
+}
diff --git a/mod/scheduler/classes/event/course_module_instance_list_viewed.php b/mod/scheduler/classes/event/course_module_instance_list_viewed.php
new file mode 100644
index 0000000..aed949f
--- /dev/null
+++ b/mod/scheduler/classes/event/course_module_instance_list_viewed.php
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ * Defines the mod_scheduler course module viewed event.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler course module viewed event.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class course_module_instance_list_viewed extends \core\event\course_module_instance_list_viewed {
+}
+
diff --git a/mod/scheduler/classes/event/scheduler_base.php b/mod/scheduler/classes/event/scheduler_base.php
new file mode 100644
index 0000000..1a39cfa
--- /dev/null
+++ b/mod/scheduler/classes/event/scheduler_base.php
@@ -0,0 +1,110 @@
+<?php
+
+/**
+ * Defines a base class for scheduler events.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler abstract base event class.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class scheduler_base extends \core\event\base {
+
+    /**
+     * @var \scheduler_instance the scheduler associated with this event
+     */
+    protected $scheduler;
+
+    /**
+     * Legacy log data.
+     *
+     * @var array
+     */
+    protected $legacylogdata;
+
+    /**
+     * Retrieve base data for this event from a scheduler.
+     *
+     * @param \scheduler_instance $scheduler
+     * @return array
+     */
+    protected static function base_data(\scheduler_instance $scheduler) {
+        return array(
+            'context' => $scheduler->get_context(),
+            'objectid' => $scheduler->id
+        );
+    }
+
+    /**
+     * Set the scheduler associated with this event.
+     *
+     * @param \scheduler_instance $scheduler
+     */
+    protected function set_scheduler(\scheduler_instance $scheduler) {
+        $this->add_record_snapshot('scheduler', $scheduler->data);
+        $this->scheduler = $scheduler;
+        $this->data['objecttable'] = 'scheduler';
+    }
+
+    /**
+     * Get scheduler instance.
+     *
+     * NOTE: to be used from observers only.
+     *
+     * @throws \coding_exception
+     * @return \scheduler_instance
+     */
+    public function get_scheduler() {
+        if ($this->is_restored()) {
+            throw new \coding_exception('get_scheduler() is intended for event observers only');
+        }
+        if (!isset($this->scheduler)) {
+            debugging('scheduler property should be initialised in each event', DEBUG_DEVELOPER);
+            global $CFG;
+            require_once($CFG->dirroot . '/mod/scheduler/locallib.php');
+            $this->scheduler = \scheduler_instance::load_by_coursemodule_id($this->contextinstanceid);
+        }
+        return $this->scheduler;
+    }
+
+
+    /**
+     * Returns relevant URL.
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/scheduler/view.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['objecttable'] = 'scheduler';
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+}
diff --git a/mod/scheduler/classes/event/slot_added.php b/mod/scheduler/classes/event/slot_added.php
new file mode 100644
index 0000000..3c219f3
--- /dev/null
+++ b/mod/scheduler/classes/event/slot_added.php
@@ -0,0 +1,64 @@
+<?php
+
+/**
+ * Defines the mod_scheduler slot added event.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler slot added event.
+ *
+ * Indicates that a teacher has added a slot.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class slot_added extends slot_base {
+
+    /**
+     * Create this event on a given slot.
+     *
+     * @param \scheduler_slot $slot
+     * @return \core\event\base
+     */
+    public static function create_from_slot(\scheduler_slot $slot) {
+        $event = self::create(self::base_data($slot));
+        $event->set_slot($slot);
+        return $event;
+    }
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event_slotadded', 'scheduler');
+    }
+
+    /**
+     * Returns non-localised event description with id's for admin use only.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' created the slot with id  '{$this->objectid}'"
+                ." in the scheduler with course module id '$this->contextinstanceid'.";
+    }
+}
diff --git a/mod/scheduler/classes/event/slot_base.php b/mod/scheduler/classes/event/slot_base.php
new file mode 100644
index 0000000..540ba44
--- /dev/null
+++ b/mod/scheduler/classes/event/slot_base.php
@@ -0,0 +1,90 @@
+<?php
+
+/**
+ * Defines a base class for slot-based events.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler abstract base event class for slot-based events.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class slot_base extends \core\event\base {
+
+    /**
+     * @var \scheduler_slot the slot associated with this event
+     */
+    protected $slot;
+
+    /**
+     * Return the base data fields for a slot
+     *
+     * @param \scheduler_slot $slot the slot in question
+     * @return array
+     */
+    protected static function base_data(\scheduler_slot $slot) {
+        return array(
+            'context' => $slot->get_scheduler()->get_context(),
+            'objectid' => $slot->id,
+            'relateduserid' => $slot->teacherid
+        );
+    }
+
+    /**
+     * Set the slot associated with this event
+     *
+     * @param \scheduler_slot $slot
+     */
+    protected function set_slot(\scheduler_slot $slot) {
+        $this->add_record_snapshot('scheduler_slots', $slot->data);
+        $this->add_record_snapshot('scheduler', $slot->get_scheduler()->data);
+        $this->slot = $slot;
+        $this->data['objecttable'] = 'scheduler_slots';
+    }
+
+    /**
+     * Get slot object.
+     *
+     * NOTE: to be used from observers only.
+     *
+     * @throws \coding_exception
+     * @return \scheduler_slot
+     */
+    public function get_slot() {
+        if ($this->is_restored()) {
+            throw new \coding_exception('get_slot() is intended for event observers only');
+        }
+        return $this->slot;
+    }
+
+    /**
+     * Returns relevant URL.
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/scheduler/view.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+}
diff --git a/mod/scheduler/classes/event/slot_deleted.php b/mod/scheduler/classes/event/slot_deleted.php
new file mode 100644
index 0000000..bd26b09
--- /dev/null
+++ b/mod/scheduler/classes/event/slot_deleted.php
@@ -0,0 +1,71 @@
+<?php
+
+/**
+ * Defines the mod_scheduler slot deleted event.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_scheduler slot deleted event.
+ *
+ * Indicates that a teacher has deleted a slot.
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class slot_deleted extends slot_base {
+
+    /**
+     * Create this event on a given slot.
+     *
+     * @param \scheduler_slot $slot
+     * @return \core\event\base
+     */
+    public static function create_from_slot(\scheduler_slot $slot, $action) {
+        $data = self::base_data($slot);
+        $data['other'] = array('action' => $action);
+        $event = self::create($data);
+        $event->set_slot($slot);
+        return $event;
+    }
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event_slotdeleted', 'scheduler');
+    }
+
+    /**
+     * Returns non-localised event description with id's for admin use only.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $desc = "The user with id '$this->userid' deleted the slot with id  '{$this->objectid}'"
+                ." in the scheduler with course module id '$this->contextinstanceid'";
+        if ($act = $this->other['action']) {
+            $desc .= " during action '$act'";
+        }
+        $desc .= '.';
+        return $desc;
+    }
+}
diff --git a/mod/scheduler/classes/search/activity.php b/mod/scheduler/classes/search/activity.php
new file mode 100644
index 0000000..3707072
--- /dev/null
+++ b/mod/scheduler/classes/search/activity.php
@@ -0,0 +1,23 @@
+<?php
+
+/**
+ * Search area for Scheduler activities.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\search;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Search area for mod_scheduler activities.
+ *
+ * This covers the activity description and intro section only.
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class activity extends \core_search\base_activity {
+}
diff --git a/mod/scheduler/classes/task/purge_unused_slots.php b/mod/scheduler/classes/task/purge_unused_slots.php
new file mode 100644
index 0000000..b5e39b5
--- /dev/null
+++ b/mod/scheduler/classes/task/purge_unused_slots.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Scheduled background task for sending automated appointment reminders
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\task;
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/../../model/scheduler_instance.php');
+
+/**
+ * Scheduled background task for sending automated appointment reminders
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+ class purge_unused_slots extends \core\task\scheduled_task {
+    public function get_name() {
+        return get_string('purgeunusedslots', 'mod_scheduler');
+    }
+
+    public function execute() {
+        \scheduler_instance::free_late_unused_slots();
+    }
+}
\ No newline at end of file
diff --git a/mod/scheduler/classes/task/send_reminders.php b/mod/scheduler/classes/task/send_reminders.php
new file mode 100644
index 0000000..f3aece3
--- /dev/null
+++ b/mod/scheduler/classes/task/send_reminders.php
@@ -0,0 +1,67 @@
+<?php
+
+/**
+ * Scheduled background task for sending automated appointment reminders
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_scheduler\task;
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/../../model/scheduler_instance.php');
+require_once(dirname(__FILE__).'/../../model/scheduler_slot.php');
+require_once(dirname(__FILE__).'/../../model/scheduler_appointment.php');
+require_once(dirname(__FILE__).'/../../mailtemplatelib.php');
+
+/**
+ * Scheduled background task for sending automated appointment reminders
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+ class send_reminders extends \core\task\scheduled_task {
+
+    public function get_name() {
+        return get_string('sendreminders', 'mod_scheduler');
+    }
+
+    public function execute() {
+
+        global $DB;
+
+        $date = make_timestamp(date('Y'), date('m'), date('d'), date('H'), date('i'));
+
+        // Find relevant slots in all schedulers.
+        $select = 'emaildate > 0 AND emaildate <= ? AND starttime > ?';
+        $slots = $DB->get_records_select('scheduler_slots', $select, array($date, $date), 'starttime');
+
+        foreach ($slots as $slot) {
+            // Get teacher record.
+            $teacher = $DB->get_record('user', array('id' => $slot->teacherid));
+
+            // Get scheduler, slot and course.
+            $scheduler = \scheduler_instance::load_by_id($slot->schedulerid);
+            $slotm = $scheduler->get_slot($slot->id);
+            $course = $scheduler->get_courserec();
+
+            // Mark as sent. (Do this first for safe fallback in case of an exception.)
+            $slot->emaildate = -1;
+            $DB->update_record('scheduler_slots', $slot);
+
+            // Send reminder to all students in the slot.
+            foreach ($slotm->get_appointments() as $appointment) {
+                $student = $DB->get_record('user', array('id' => $appointment->studentid));
+                cron_setup_user($student, $course);
+                \scheduler_messenger::send_slot_notification($slotm,
+                        'reminder', 'reminder', $teacher, $student, $teacher, $student, $course);
+            }
+        }
+        cron_setup_user();
+    }
+
+}
\ No newline at end of file
diff --git a/mod/scheduler/customlib.php b/mod/scheduler/customlib.php
new file mode 100644
index 0000000..734623a
--- /dev/null
+++ b/mod/scheduler/customlib.php
@@ -0,0 +1,65 @@
+<?php
+
+/**
+ * Library with functions that are intended for local customizations.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Get a list of fields to be displayed in lists of users, etc.
+ *
+ * The input of the function is a user record;
+ * possibly null, in this case the function should return only the field titles.
+ *
+ * The function returns an array of objects that describe user data fields.
+ * Each of these objects has the following properties:
+ *  $field->title : Displayable title of the field
+ *  $field->value : Value of the field for this user (not set if $user is null)
+ *
+ * @param stdClass $user the user record; may be null
+ * @param context $context context for permission checks
+ * @return array an array of field objects
+ */
+function scheduler_get_user_fields($user, $context) {
+
+    $fields = array();
+
+    if (has_capability('moodle/site:viewuseridentity', $context)) {
+        $emailfield = new stdClass();
+        $fields[] = $emailfield;
+        $emailfield->title = get_string('email');
+        if ($user) {
+            $emailfield->value = obfuscate_mailto($user->email);
+        }
+    }
+
+    /*
+     * As an example: Uncomment the following lines in order to display the user's city and country.
+     */
+
+    /*
+    $cityfield = new stdClass();
+    $cityfield->title = get_string('city');
+    $fields[] = $cityfield;
+
+    $countryfield = new stdClass();
+    $countryfield->title = get_string('country');
+    $fields[] = $countryfield;
+
+    if ($user) {
+        $cityfield->value = $user->city;
+        if ($user->country) {
+            $countryfield->value = get_string($user->country, 'countries');
+        }
+        else {
+            $countryfield->value = '';
+        }
+    }
+    */
+    return $fields;
+}
diff --git a/mod/scheduler/datelist.php b/mod/scheduler/datelist.php
new file mode 100644
index 0000000..6ef10e4
--- /dev/null
+++ b/mod/scheduler/datelist.php
@@ -0,0 +1,232 @@
+<?php
+
+/**
+ * Shows a sortable list of appointments
+ *
+ * @package    mod_scheduler
+ * @copyright  2015 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir.'/tablelib.php');
+
+$PAGE->set_docs_path('mod/scheduler/datelist');
+
+$scope = optional_param('scope', 'activity', PARAM_TEXT);
+if (!in_array($scope, array('activity', 'course', 'site'))) {
+    $scope = 'activity';
+}
+$teacherid = optional_param('teacherid', 0, PARAM_INT);
+
+if ($scope == 'site') {
+    $scopecontext = context_system::instance();
+} else if ($scope == 'course') {
+    $scopecontext = context_course::instance($scheduler->courseid);
+} else {
+    $scopecontext = $context;
+}
+
+if (!has_capability('mod/scheduler:seeoverviewoutsideactivity', $context)) {
+    $scope = 'activity';
+}
+if (!has_capability('mod/scheduler:canseeotherteachersbooking', $scopecontext)) {
+    $teacherid = 0;
+}
+
+$taburl = new moodle_url('/mod/scheduler/view.php',
+                array('id' => $scheduler->cmid, 'what' => 'datelist', 'scope' => $scope, 'teacherid' => $teacherid));
+$returnurl = new moodle_url('/mod/scheduler/view.php', array('id' => $scheduler->cmid));
+
+$PAGE->set_url($taburl);
+
+echo $output->header();
+
+// Print top tabs.
+
+echo $output->teacherview_tabs($scheduler, $taburl, 'datelist');
+
+
+// Find active group in case that group mode is in use.
+$currentgroupid = 0;
+$groupmode = groups_get_activity_groupmode($scheduler->cm);
+if ($groupmode) {
+    $currentgroupid = groups_get_activity_group($scheduler->cm, true);
+
+    echo html_writer::start_div('dropdownmenu');
+    groups_print_activity_menu($scheduler->cm, $taburl);
+    echo html_writer::end_div();
+}
+
+$scopemenukey = 'scopemenuself';
+if (has_capability('mod/scheduler:canseeotherteachersbooking', $scopecontext)) {
+    $teachers = $scheduler->get_available_teachers($currentgroupid);
+    $teachermenu = array();
+    foreach ($teachers as $teacher) {
+        $teachermenu[$teacher->id] = fullname($teacher);
+    }
+    $select = $output->single_select($taburl, 'teacherid', $teachermenu, $teacherid,
+                    array(0 => get_string('myself', 'scheduler')), 'teacheridform');
+    echo html_writer::div(get_string('teachersmenu', 'scheduler', $select), 'dropdownmenu');
+    $scopemenukey = 'scopemenu';
+}
+if (has_capability('mod/scheduler:seeoverviewoutsideactivity', $context)) {
+    $scopemenu = array('activity' => get_string('thisscheduler', 'scheduler'),
+                    'course' => get_string('thiscourse', 'scheduler'),
+                    'site' => get_string('thissite', 'scheduler'));
+    $select = $output->single_select($taburl, 'scope', $scopemenu, $scope, null, 'scopeform');
+    echo html_writer::div(get_string($scopemenukey, 'scheduler', $select), 'dropdownmenu');
+}
+
+// Getting date list.
+
+$params = array();
+$params['teacherid']   = $teacherid == 0 ? $USER->id : $teacherid;
+$params['courseid']    = $scheduler->courseid;
+$params['schedulerid'] = $scheduler->id;
+
+$scopecond = '';
+if ($scope == 'activity') {
+    $scopecond = ' AND sc.id = :schedulerid';
+} else if ($scope == 'course') {
+    $scopecond = ' AND c.id = :courseid';
+}
+
+$sql = "SELECT a.id AS id, ".
+               user_picture::fields('u1', array('email', 'department'), 'studentid', 'student').", ".
+               $DB->sql_fullname('u1.firstname', 'u1.lastname')." AS studentfullname,
+               a.appointmentnote,
+               a.appointmentnoteformat,
+               a.teachernote,
+               a.teachernoteformat,
+               a.grade,
+               sc.name,
+               sc.id AS schedulerid,
+               sc.scale,
+               c.shortname AS courseshort,
+               c.id AS courseid, ".
+               user_picture::fields('u2', null, 'teacherid').",
+               s.id AS sid,
+               s.starttime,
+               s.duration,
+               s.appointmentlocation,
+               s.notes,
+               s.notesformat
+          FROM {course} c,
+               {scheduler} sc,
+               {scheduler_appointment} a,
+               {scheduler_slots} s,
+               {user} u1,
+               {user} u2
+         WHERE c.id = sc.course AND
+               sc.id = s.schedulerid AND
+               a.slotid = s.id AND
+               u1.id = a.studentid AND
+               u2.id = s.teacherid AND
+               s.teacherid = :teacherid ".
+               $scopecond;
+
+$sqlcount =
+       "SELECT COUNT(*)
+          FROM {course} c,
+               {scheduler} sc,
+               {scheduler_appointment} a,
+               {scheduler_slots} s
+         WHERE c.id = sc.course AND
+               sc.id = s.schedulerid AND
+               a.slotid = s.id AND
+               s.teacherid = :teacherid ".
+               $scopecond;
+
+$numrecords = $DB->count_records_sql($sqlcount, $params);
+
+
+$limit = 30;
+
+if ($numrecords) {
+
+    // Make the table of results.
+
+    $coursestr = get_string('course', 'scheduler');
+    $schedulerstr = get_string('scheduler', 'scheduler');
+    $whenstr = get_string('when', 'scheduler');
+    $wherestr = get_string('where', 'scheduler');
+    $whostr = get_string('who', 'scheduler');
+    $wherefromstr = get_string('department', 'scheduler');
+    $whatstr = get_string('what', 'scheduler');
+    $whatresultedstr = get_string('whatresulted', 'scheduler');
+    $whathappenedstr = get_string('whathappened', 'scheduler');
+
+    $tablecolumns = array('courseshort', 'schedulerid', 'starttime', 'appointmentlocation',
+                          'studentfullname', 'studentdepartment', 'notes', 'grade', 'appointmentnote');
+    $tableheaders = array($coursestr, $schedulerstr, $whenstr, $wherestr,
+                          $whostr, $wherefromstr, $whatstr, $whatresultedstr, $whathappenedstr);
+
+    $table = new flexible_table('mod-scheduler-datelist');
+    $table->define_columns($tablecolumns);
+    $table->define_headers($tableheaders);
+
+    $table->define_baseurl($taburl);
+
+    $table->sortable(true, 'when'); // Sorted by date by default.
+    $table->collapsible(true);      // Allow column hiding.
+    $table->initialbars(true);
+
+    $table->column_suppress('courseshort');
+    $table->column_suppress('schedulerid');
+    $table->column_suppress('starttime');
+    $table->column_suppress('studentfullname');
+    $table->column_suppress('notes');
+
+    $table->set_attribute('id', 'dates');
+    $table->set_attribute('class', 'datelist');
+
+    $table->column_class('course', 'datelist_course');
+    $table->column_class('scheduler', 'datelist_scheduler');
+
+    $table->setup();
+
+    // Get extra query parameters from flexible_table behaviour.
+    $where = $table->get_sql_where();
+    $sort = $table->get_sql_sort();
+    $table->pagesize($limit, $numrecords);
+
+    if (!empty($sort)) {
+        $sql .= " ORDER BY $sort";
+    }
+
+    $results = $DB->get_records_sql($sql, $params);
+
+    foreach ($results as $id => $row) {
+        $courseurl = new moodle_url('/course/view.php', array('id' => $row->courseid));
+        $coursedata = html_writer::link($courseurl, format_string($row->courseshort));
+        $schedulerurl = new moodle_url('/mod/scheduler/view.php', array('a' => $row->schedulerid));
+        $schedulerdata = html_writer::link($schedulerurl, format_string($row->name));
+        $a = mod_scheduler_renderer::slotdatetime($row->starttime, $row->duration);
+        $whendata = get_string('slotdatetime', 'scheduler', $a);
+        $whourl = new moodle_url('/mod/scheduler/view.php',
+                        array('what' => 'viewstudent', 'a' => $row->schedulerid, 'appointmentid' => $row->id));
+        $whodata = html_writer::link($whourl, $row->studentfullname);
+        $whatdata = $output->format_notes($row->notes, $row->notesformat, $context, 'slotnote', $row->sid);
+        $gradedata = $row->scale == 0 ? '' : $output->format_grade($row->scale, $row->grade);
+
+        $dataset = array(
+                        $coursedata,
+                        $schedulerdata,
+                        $whendata,
+                        format_string($row->appointmentlocation),
+                        $whodata,
+                        $row->studentdepartment,
+                        $whatdata,
+                        $gradedata,
+                        $output->format_appointment_notes($scheduler, $row) );
+        $table->add_data($dataset);
+    }
+    $table->print_html();
+    echo $output->continue_button($returnurl);
+} else {
+    notice(get_string('noresults', 'scheduler'), $returnurl);
+}
+
+echo $output->footer();
\ No newline at end of file
diff --git a/mod/scheduler/db/access.php b/mod/scheduler/db/access.php
new file mode 100644
index 0000000..e4eb179
--- /dev/null
+++ b/mod/scheduler/db/access.php
@@ -0,0 +1,149 @@
+<?php
+
+/**
+ * Scheduler module capability definition
+ *
+ * @package    mod_scheduler
+ * @copyright  2017 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$capabilities = array(
+
+    'mod/scheduler:addinstance' => array(
+        'riskbitmask' => RISK_XSS,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        ),
+        'clonepermissionsfrom' => 'moodle/course:manageactivities'
+    ),
+
+    'mod/scheduler:appoint' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+        )
+    ),
+
+    'mod/scheduler:attend' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:manage' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:manageallappointments' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:canscheduletootherteachers' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:canseeotherteachersbooking' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:seeoverviewoutsideactivity' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:disengage' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:viewslots' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+        ),
+        'clonepermissionsfrom' => 'mod/scheduler:appoint'
+    ),
+
+    'mod/scheduler:viewfullslots' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+        )
+    ),
+
+    'mod/scheduler:seeotherstudentsbooking' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/scheduler:seeotherstudentsresults' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    )
+
+);
+
+
diff --git a/mod/scheduler/db/install.xml b/mod/scheduler/db/install.xml
new file mode 100644
index 0000000..5df0139
--- /dev/null
+++ b/mod/scheduler/db/install.xml
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="mod/scheduler/db" VERSION="20170205" COMMENT="XMLDB file for scheduler module"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="../../../lib/xmldb/xmldb.xsd"
+>
+  <TABLES>
+    <TABLE NAME="scheduler" COMMENT="Scheduler instances">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="intro" TYPE="text" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="schedulermode" TYPE="char" LENGTH="10" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="maxbookings" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="1" SEQUENCE="false" COMMENT="Maximum number of bookings for each student (depends on scheduler mode)"/>
+        <FIELD NAME="guardtime" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="reuseguardtime" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="legacy"/>
+        <FIELD NAME="defaultslotduration" TYPE="int" LENGTH="4" NOTNULL="false" DEFAULT="15" SEQUENCE="false"/>
+        <FIELD NAME="allownotifications" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="staffrolename" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="scale" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="gradingstrategy" TYPE="int" LENGTH="2" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="bookingrouping" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="-1" SEQUENCE="false" COMMENT="Groups can be scheduled from this grouping, -1 if none, 0 if all"/>
+        <FIELD NAME="usenotes" TYPE="int" LENGTH="2" NOTNULL="true" DEFAULT="1" SEQUENCE="false" COMMENT="Which types of notes to show for appointments"/>
+        <FIELD NAME="usebookingform" TYPE="int" LENGTH="2" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="whether a booking form is used"/>
+        <FIELD NAME="bookinginstructions" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Text field with instructions for booking"/>
+        <FIELD NAME="bookinginstructionsformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
+        <FIELD NAME="usestudentnotes" TYPE="int" LENGTH="2" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="whether students can enter notes at time of booking"/>
+        <FIELD NAME="requireupload" TYPE="int" LENGTH="2" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="whether students must upload files when booking"/>
+        <FIELD NAME="uploadmaxfiles" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Maximum number of files that a student can upload with a booking"/>
+        <FIELD NAME="uploadmaxsize" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Maximum file size for student uploads"/>
+        <FIELD NAME="usecaptcha" TYPE="int" LENGTH="2" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Whether a CAPTCHA is used when students make a booking"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for scheduler"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="scheduler_slots" COMMENT="Scheduler slots">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="schedulerid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="starttime" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="duration" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="teacherid" TYPE="int" LENGTH="11" NOTNULL="false" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="appointmentlocation" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="reuse" TYPE="int" LENGTH="5" NOTNULL="false" DEFAULT="0" SEQUENCE="false" COMMENT="legacy"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="notes" TYPE="text" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="notesformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="exclusivity" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
+        <FIELD NAME="emaildate" TYPE="int" LENGTH="11" NOTNULL="false" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="hideuntil" TYPE="int" LENGTH="11" NOTNULL="false" DEFAULT="0" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for scheduler_slots"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="schedulerid-teacherid" UNIQUE="false" FIELDS="schedulerid, teacherid" COMMENT="By scheduler id, then teacher id"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="scheduler_appointment" COMMENT="Scheduler appointments">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="11" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="slotid" TYPE="int" LENGTH="11" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="studentid" TYPE="int" LENGTH="11" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="attended" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="grade" TYPE="int" LENGTH="4" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="appointmentnote" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Notes visible to teacher and student"/>
+        <FIELD NAME="appointmentnoteformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="teachernote" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Notes visible to teacher only"/>
+        <FIELD NAME="teachernoteformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="studentnote" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Note supplied by student at time of booking"/>
+        <FIELD NAME="studentnoteformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="timecreated" TYPE="int" LENGTH="11" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="11" NOTNULL="false" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for scheduler_appointment"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="slotid" UNIQUE="false" FIELDS="slotid" COMMENT="By slot id"/>
+        <INDEX NAME="studentid" UNIQUE="false" FIELDS="studentid" COMMENT="By student id"/>
+      </INDEXES>
+    </TABLE>
+  </TABLES>
+</XMLDB>
\ No newline at end of file
diff --git a/mod/scheduler/db/messages.php b/mod/scheduler/db/messages.php
new file mode 100644
index 0000000..2067cb0
--- /dev/null
+++ b/mod/scheduler/db/messages.php
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * Defines message providers (types of messages being sent)
+ *
+ * @package mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$messageproviders = array (
+
+    // Invitations to make a booking.
+    'invitation' => array(
+    ),
+
+    // Notifications about bookings (to teachers or students).
+    'bookingnotification' => array(
+    ),
+
+    // Automated reminders about upcoming appointments.
+    'reminder' => array(
+    ),
+
+);
diff --git a/mod/scheduler/db/tasks.php b/mod/scheduler/db/tasks.php
new file mode 100644
index 0000000..c448636
--- /dev/null
+++ b/mod/scheduler/db/tasks.php
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * Scheduled background tasks in the scheduler module
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$tasks = array(
+            array(
+                'classname' => 'mod_scheduler\task\send_reminders',
+                'minute' => 'R',
+                'hour' => '*',
+                'day' => '*',
+                'dayofweek' => '*',
+                'month' => '*'
+            ),
+            array(
+                'classname' => 'mod_scheduler\task\purge_unused_slots',
+                'minute' => '*/5',
+                'hour' => '*',
+                'day' => '*',
+                'dayofweek' => '*',
+                'month' => '*'
+            )
+);
\ No newline at end of file
diff --git a/mod/scheduler/db/upgrade.php b/mod/scheduler/db/upgrade.php
new file mode 100644
index 0000000..734f9e5
--- /dev/null
+++ b/mod/scheduler/db/upgrade.php
@@ -0,0 +1,325 @@
+<?php
+
+/**
+ * Upgrade code for the scheduler module
+ *
+ * @package    mod_scheduler
+ * @copyright  2017 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Migrate a configuration setting from global to plugin specific.
+ *
+ * @param string $name name of configuration setting
+ */
+function scheduler_migrate_config_setting($name) {
+    $oldval = get_config('core', 'scheduler_'.$name);
+    set_config($name, $oldval, 'mod_scheduler');
+    unset_config('scheduler_'.$name);
+}
+
+/**
+ * Migrate the group mode settings to new 2.9 conventions.
+ *
+ * @param int $sid id of the scheduler to migrate
+ */
+function scheduler_migrate_groupmode($sid) {
+    global $DB;
+    $globalenable = (bool) get_config('mod_scheduler', 'groupscheduling');
+    $cm = get_coursemodule_from_instance('scheduler', $sid, 0, false, IGNORE_MISSING);
+    if ($cm) {
+        if ((groups_get_activity_groupmode($cm) > 0) && $globalenable) {
+            $g = $cm->groupingid;
+        } else {
+            $g = -1;
+        }
+        $DB->set_field('scheduler', 'bookingrouping', $g, array('id' => $sid));
+        $DB->set_field('course_modules', 'groupmode', 0, array('id' => $cm->id));
+        $DB->set_field('course_modules', 'groupingid', 0, array('id' => $cm->id));
+    }
+}
+
+/**
+ * This function does anything necessary to upgrade older versions to match current functionality.
+ *
+ * @param int $oldversion version number to be migrated from
+ * @return bool true if upgrade is successful
+ */
+function xmldb_scheduler_upgrade($oldversion=0) {
+
+    global $CFG, $DB;
+
+    $dbman = $DB->get_manager();
+
+    $result = true;
+
+    /* ******************* 2.0 upgrade line ********************** */
+
+    if ($oldversion < 2011081302) {
+
+        // Rename description field to intro, and define field introformat to be added to scheduler.
+        $table = new xmldb_table('scheduler');
+        $introfield = new xmldb_field('description', XMLDB_TYPE_TEXT, 'small', null, XMLDB_NOTNULL, null, null, 'name');
+        $dbman->rename_field($table, $introfield, 'intro', false);
+
+        $formatfield = new xmldb_field('introformat', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED,
+            XMLDB_NOTNULL, null, '0', 'intro');
+
+        if (!$dbman->field_exists($table, $formatfield)) {
+            $dbman->add_field($table, $formatfield);
+        }
+
+        // Conditionally migrate to html format in intro.
+        if ($CFG->texteditors !== 'textarea') {
+            $rs = $DB->get_recordset('scheduler', array('introformat' => FORMAT_MOODLE),
+                '', 'id, intro, introformat');
+            foreach ($rs as $q) {
+                $q->intro       = text_to_html($q->intro, false, false, true);
+                $q->introformat = FORMAT_HTML;
+                $DB->update_record('scheduler', $q);
+                upgrade_set_timeout();
+            }
+            $rs->close();
+        }
+
+        // Savepoint reached.
+        upgrade_mod_savepoint(true, 2011081302, 'scheduler');
+    }
+
+    /* ******************* 2.5 upgrade line ********************** */
+
+    if ($oldversion < 2012102903) {
+
+        // Define fields notesformat and appointmentnote in respective tables.
+        $table = new xmldb_table('scheduler_slots');
+        $formatfield = new xmldb_field('notesformat', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED,
+            XMLDB_NOTNULL, null, '0', 'notes');
+        if (!$dbman->field_exists($table, $formatfield)) {
+            $dbman->add_field($table, $formatfield);
+        }
+
+        $table = new xmldb_table('scheduler_appointment');
+        $formatfield = new xmldb_field('appointmentnoteformat', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED,
+            XMLDB_NOTNULL, null, '0', 'appointmentnote');
+        if (!$dbman->field_exists($table, $formatfield)) {
+            $dbman->add_field($table, $formatfield);
+        }
+
+        // Migrate html format.
+        if ($CFG->texteditors !== 'textarea') {
+            upgrade_set_timeout();
+            $DB->set_field('scheduler_slots', 'notesformat', FORMAT_HTML);
+            $DB->set_field('scheduler_appointment', 'appointmentnoteformat', FORMAT_HTML);
+        }
+
+        // Savepoint reached.
+        upgrade_mod_savepoint(true, 2012102903, 'scheduler');
+    }
+
+    /* ******************* 2.7 upgrade line ********************** */
+
+    if ($oldversion < 2014071300) {
+
+        // Define field teacher to be dropped from scheduler.
+        $table = new xmldb_table('scheduler');
+        $field = new xmldb_field('teacher');
+
+        // Conditionally drop field teacher.
+        if ($dbman->field_exists($table, $field)) {
+            $dbman->drop_field($table, $field);
+        }
+
+        // Define field maxbookings to be added to scheduler.
+        $table = new xmldb_table('scheduler');
+        $field = new xmldb_field('maxbookings', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '1', 'schedulermode');
+
+        // Conditionally launch add field maxbookings.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Define field guardtime to be added to scheduler.
+        $table = new xmldb_table('scheduler');
+        $field = new xmldb_field('guardtime', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'maxbookings');
+
+        // Conditionally launch add field guardtime.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Changing length of field staffrolename on table scheduler to (255).
+        $table = new xmldb_table('scheduler');
+        $field = new xmldb_field('staffrolename', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, 'allownotifications');
+
+        // Launch change of precision for field staffrolename.
+        $dbman->change_field_precision($table, $field);
+
+        // Changing length of field appointmentlocation on table scheduler_slots to (255).
+        $table = new xmldb_table('scheduler_slots');
+        $field = new xmldb_field('appointmentlocation', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, 'teacherid');
+
+        // Launch change of precision for field appointmentlocation.
+        $dbman->change_field_precision($table, $field);
+
+        // Define index schedulerid-teacherid (not unique) to be added to scheduler_slots.
+        $table = new xmldb_table('scheduler_slots');
+        $index = new xmldb_index('schedulerid-teacherid', XMLDB_INDEX_NOTUNIQUE, array('schedulerid', 'teacherid'));
+
+        // Conditionally launch add index schedulerid-teacherid.
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Define index slotid (not unique) to be added to scheduler_appointment.
+        $table = new xmldb_table('scheduler_appointment');
+        $index = new xmldb_index('slotid', XMLDB_INDEX_NOTUNIQUE, array('slotid'));
+
+        // Conditionally add index slotid.
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Define index studentid (not unique) to be added to scheduler_appointment.
+        $table = new xmldb_table('scheduler_appointment');
+        $index = new xmldb_index('studentid', XMLDB_INDEX_NOTUNIQUE, array('studentid'));
+
+        // Conditionally add index studentid.
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Convert old calendar events.
+        $sql = 'UPDATE {event} SET modulename = ? WHERE eventtype LIKE ? OR eventtype LIKE ?';
+        $DB->execute($sql, array('scheduler', 'SSsup:%', 'SSstu:%'));
+
+        // Savepoint reached.
+        upgrade_mod_savepoint(true, 2014071300, 'scheduler');
+    }
+
+    /* ******************* 2.9 upgrade line ********************** */
+
+    if ($oldversion < 2015050400) {
+
+        // Migrate config settings to config_plugins table.
+        scheduler_migrate_config_setting('allteachersgrading');
+        scheduler_migrate_config_setting('showemailplain');
+        scheduler_migrate_config_setting('groupscheduling');
+        scheduler_migrate_config_setting('maxstudentlistsize');
+
+        // Savepoint reached.
+        upgrade_mod_savepoint(true, 2015050400, 'scheduler');
+    }
+
+    if ($oldversion < 2015062601) {
+
+        // Define field bookingrouping to be added to scheduler.
+        $table = new xmldb_table('scheduler');
+        $field = new xmldb_field('bookingrouping', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '-1', 'gradingstrategy');
+
+        // Conditionally launch add field bookingrouping.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Convert old group mode into instance setting for scheduler.
+        $sids = $DB->get_fieldset_select('scheduler', 'id', '');
+        foreach ($sids as $sid) {
+            scheduler_migrate_groupmode($sid);
+        }
+
+        // Scheduler savepoint reached.
+        upgrade_mod_savepoint(true, 2015062601, 'scheduler');
+    }
+
+    /* ******************* 3.1 upgrade line ********************** */
+
+    if ($oldversion < 2016051700) {
+
+        // Add configuration field "usenotes" to scheduler table.
+        $table = new xmldb_table('scheduler');
+        $field = new xmldb_field('usenotes', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '1', 'bookingrouping');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Add field "teachernote" (note visible to teachers only) and corresponding format field to scheduler_appointment.
+        $table = new xmldb_table('scheduler_appointment');
+        $field1 = new xmldb_field('teachernote', XMLDB_TYPE_TEXT, null, null, null, null, null, 'appointmentnoteformat');
+        if (!$dbman->field_exists($table, $field1)) {
+            $dbman->add_field($table, $field1);
+        }
+        $field2 = new xmldb_field('teachernoteformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, '0', 'teachernote');
+        if (!$dbman->field_exists($table, $field2)) {
+            $dbman->add_field($table, $field2);
+        }
+
+        // Drop old unused field "appointmentnote" from scheduler_slots table.
+        $table = new xmldb_table('scheduler_slots');
+        $field = new xmldb_field('appointmentnote');
+        if ($dbman->field_exists($table, $field)) {
+            $dbman->drop_field($table, $field);
+        }
+
+        // Scheduler savepoint reached.
+        upgrade_mod_savepoint(true, 2016051700, 'scheduler');
+    }
+
+    /* ******************* 3.3 upgrade line ********************** */
+
+    if ($oldversion < 2017040100) {
+
+        // Add new configuration fields (relating to booking form) to scheduler.
+        $table = new xmldb_table('scheduler');
+
+        $field = new xmldb_field('usebookingform', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0', 'usenotes');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('bookinginstructions', XMLDB_TYPE_TEXT, null, null, null, null, null, 'usebookingform');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('bookinginstructionsformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, '1', 'bookinginstructions');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('usestudentnotes', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0', 'bookinginstructionsformat');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('requireupload', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0', 'usestudentnotes');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('uploadmaxfiles', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'requireupload');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('uploadmaxsize', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'uploadmaxfiles');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('usecaptcha', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0', 'uploadmaxsize');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Add field "studentnote" and corresponding format field to scheduler_appointment.
+        $table = new xmldb_table('scheduler_appointment');
+        $field1 = new xmldb_field('studentnote', XMLDB_TYPE_TEXT, null, null, null, null, null, 'teachernoteformat');
+        if (!$dbman->field_exists($table, $field1)) {
+            $dbman->add_field($table, $field1);
+        }
+        $field2 = new xmldb_field('studentnoteformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, '0', 'studentnote');
+        if (!$dbman->field_exists($table, $field2)) {
+            $dbman->add_field($table, $field2);
+        }
+
+        // Scheduler savepoint reached.
+        upgrade_mod_savepoint(true, 2017040100, 'scheduler');
+    }
+    return true;
+}
\ No newline at end of file
diff --git a/mod/scheduler/export.php b/mod/scheduler/export.php
new file mode 100644
index 0000000..314be35
--- /dev/null
+++ b/mod/scheduler/export.php
@@ -0,0 +1,122 @@
+<?php
+
+/**
+ * Export scheduler data to a file.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/exportform.php');
+
+$PAGE->set_docs_path('mod/scheduler/export');
+
+// Find active group in case that group mode is in use.
+$currentgroupid = 0;
+$groupmode = groups_get_activity_groupmode($scheduler->cm);
+if ($groupmode) {
+    $currentgroupid = groups_get_activity_group($scheduler->cm, true);
+}
+
+$actionurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'export', 'id' => $scheduler->cmid));
+$returnurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'view', 'id' => $scheduler->cmid));
+$PAGE->set_url($actionurl);
+$mform = new scheduler_export_form($actionurl, $scheduler);
+
+if ($mform->is_cancelled()) {
+    redirect($returnurl);
+}
+
+$data = $mform->get_data();
+if ($data) {
+    $availablefields = scheduler_get_export_fields();
+    $selectedfields = array();
+    foreach ($availablefields as $field) {
+        $inputid = 'field-'.$field->get_id();
+        if (isset($data->{$inputid}) && $data->{$inputid} == 1) {
+            $selectedfields[] = $field;
+            $field->set_renderer($output);
+        }
+    }
+    $userid = $USER->id;
+    if (isset($data->includewhom) && $data->includewhom == 'all') {
+        require_capability('mod/scheduler:canseeotherteachersbooking', $context);
+        $userid = 0;
+    }
+    $pageperteacher = isset($data->paging) && $data->paging == 'perteacher';
+    $preview = isset($data->preview);
+} else {
+    $preview = false;
+}
+
+if (!$data || $preview) {
+    echo $OUTPUT->header();
+
+    // Print top tabs.
+    $taburl = new moodle_url('/mod/scheduler/view.php', array('id' => $scheduler->cmid, 'what' => 'export'));
+    echo $output->teacherview_tabs($scheduler, $taburl, 'export');
+
+    if ($groupmode) {
+        groups_print_activity_menu($scheduler->cm, $taburl);
+    }
+
+    echo $output->heading(get_string('exporthdr', 'scheduler'), 2);
+
+    $mform->display();
+
+    if ($preview) {
+        $canvas = new scheduler_html_canvas();
+        $export = new scheduler_export($canvas);
+
+        $export->build($scheduler,
+                        $selectedfields,
+                        $data->content,
+                        $userid,
+                        $currentgroupid,
+                        $data->includeemptyslots,
+                        $pageperteacher);
+
+        $limit = 20;
+        echo $canvas->as_html($limit, false);
+
+        echo html_writer::div(get_string('previewlimited', 'scheduler', $limit), 'previewlimited');
+    }
+
+    echo $output->footer();
+    exit();
+}
+
+switch ($data->outputformat) {
+    case 'csv':
+        $canvas = new scheduler_csv_canvas($data->csvseparator);
+        break;
+    case 'xls':
+        $canvas = new scheduler_excel_canvas();
+        break;
+    case 'ods':
+        $canvas = new scheduler_ods_canvas();
+        break;
+    case 'html':
+        $canvas = new scheduler_html_canvas($returnurl);
+        break;
+    case 'pdf':
+        $canvas = new scheduler_pdf_canvas($data->pdforientation);
+        break;
+}
+
+$export = new scheduler_export($canvas);
+
+$export->build($scheduler,
+               $selectedfields,
+               $data->content,
+               $userid,
+               $currentgroupid,
+               $data->includeemptyslots,
+               $pageperteacher);
+
+$filename = clean_filename(format_string($course->shortname).'_'.format_string($scheduler->name));
+$canvas->send($filename);
+
diff --git a/mod/scheduler/exportform.php b/mod/scheduler/exportform.php
new file mode 100644
index 0000000..e91cbbd
--- /dev/null
+++ b/mod/scheduler/exportform.php
@@ -0,0 +1,157 @@
+<?php
+
+/**
+ * Export settings form
+ *
+ * @package    mod_scheduler
+ * @copyright  2015 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir.'/formslib.php');
+require_once($CFG->dirroot.'/mod/scheduler/exportlib.php');
+
+/**
+ * Export settings form
+ * (using Moodle formslib)
+ *
+ * @package    mod_scheduler
+ * @copyright  2015 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_export_form extends moodleform {
+
+    /**
+     * @var scheduler_instance the scheduler to be exported
+     */
+    protected $scheduler;
+
+    /**
+     * Create a new export settings form.
+     *
+     * @param string $action
+     * @param scheduler_instance $scheduler the scheduler to export
+     * @param object $customdata
+     */
+    public function __construct($action, scheduler_instance $scheduler, $customdata=null) {
+        $this->scheduler = $scheduler;
+        parent::__construct($action, $customdata);
+    }
+
+    protected function definition() {
+
+        $mform = $this->_form;
+
+        // General introduction.
+        $mform->addElement('header', 'general', get_string('general', 'form'));
+
+        $radios = array();
+        $radios[] = $mform->createElement('radio', 'content', '',
+                                          get_string('onelineperslot', 'scheduler'), 'onelineperslot');
+        $radios[] = $mform->createElement('radio', 'content', '',
+                                          get_string('onelineperappointment', 'scheduler'),  'onelineperappointment');
+        $radios[] = $mform->createElement('radio', 'content', '',
+                                          get_string('appointmentsgrouped', 'scheduler'), 'appointmentsgrouped');
+        $mform->addGroup($radios, 'contentgroup',
+                                          get_string('contentformat', 'scheduler'), null, false);
+        $mform->setDefault('content', 'onelineperappointment');
+        $mform->addHelpButton('contentgroup', 'contentformat', 'scheduler');
+
+        if (has_capability('mod/scheduler:canseeotherteachersbooking', $this->scheduler->get_context())) {
+            $selopt = array('me' => get_string('myself', 'scheduler'),
+                'all' => get_string ('everyone', 'scheduler'));
+            $mform->addElement('select', 'includewhom', get_string('includeslotsfor', 'scheduler'), $selopt);
+            $mform->setDefault('includewhom', 'all');
+
+            $selopt = array('all' => get_string('allononepage', 'scheduler'),
+                'perteacher' => get_string('pageperteacher', 'scheduler', $this->scheduler->get_teacher_name()) );
+            $mform->addElement('select', 'paging', get_string('pagination', 'scheduler'),  $selopt);
+            $mform->addHelpButton('paging', 'pagination', 'scheduler');
+
+        }
+
+        $mform->addElement('selectyesno', 'includeemptyslots', get_string('includeemptyslots', 'scheduler'));
+        $mform->setDefault('includeemptyslots', 1);
+
+        // Select data to export.
+        $mform->addElement('header', 'datafieldhdr', get_string('datatoinclude', 'scheduler'));
+        $mform->addHelpButton('datafieldhdr', 'datatoinclude', 'scheduler');
+
+        $this->add_exportfield_group('slot', 'slot');
+        $this->add_exportfield_group('student', 'student');
+        $this->add_exportfield_group('appointment', 'appointment');
+
+        $mform->setDefault('field-date', 1);
+        $mform->setDefault('field-starttime', 1);
+        $mform->setDefault('field-endtime', 1);
+        $mform->setDefault('field-teachername', 1);
+        $mform->setDefault('field-studentfullname', 1);
+        $mform->setDefault('field-attended', 1);
+
+        // Output file format.
+        $mform->addElement('header', 'fileformathdr', get_string('fileformat', 'scheduler'));
+        $mform->addHelpButton('fileformathdr', 'fileformat', 'scheduler');
+
+        $radios = array();
+        $radios[] = $mform->createElement('radio', 'outputformat', '', get_string('csvformat', 'scheduler'), 'csv');
+        $radios[] = $mform->createElement('radio', 'outputformat', '', get_string('excelformat', 'scheduler'),  'xls');
+        $radios[] = $mform->createElement('radio', 'outputformat', '', get_string('odsformat', 'scheduler'), 'ods');
+        $radios[] = $mform->createElement('radio', 'outputformat', '', get_string('htmlformat', 'scheduler'), 'html');
+        $radios[] = $mform->createElement('radio', 'outputformat', '', get_string('pdfformat', 'scheduler'), 'pdf');
+        $mform->addGroup($radios, 'outputformatgroup', get_string('fileformat', 'scheduler'), null, false);
+        $mform->setDefault('outputformat', 'csv');
+
+        $selopt = array('comma'     => get_string('sepcomma', 'scheduler'),
+                        'colon'     => get_string('sepcolon', 'scheduler'),
+                        'semicolon' => get_string('sepsemicolon', 'scheduler'),
+                        'tab'       => get_string('septab', 'scheduler'));
+        $mform->addElement('select', 'csvseparator', get_string('csvfieldseparator', 'scheduler'),  $selopt);
+        $mform->setDefault('csvseparator', 'comma');
+        $mform->disabledIf('csvseparator', 'outputformat', 'neq', 'csv');
+
+        $selopt = array('P' => get_string('portrait', 'scheduler'),
+                        'L' => get_string('landscape', 'scheduler'));
+        $mform->addElement('select', 'pdforientation', get_string('pdforientation', 'scheduler'),  $selopt);
+        $mform->disabledIf('pdforientation', 'outputformat', 'neq', 'pdf');
+
+        $buttonarray = array();
+        $buttonarray[] = $mform->createElement('submit', 'preview', get_string('preview', 'scheduler'));
+        $buttonarray[] = $mform->createElement('submit', 'submitbutton', get_string('createexport', 'scheduler'));
+        $buttonarray[] = $mform->createElement('cancel');
+        $mform->addGroup($buttonarray, 'buttonar', '', array(' '), false);
+        $mform->closeHeaderBefore('buttonar');
+
+    }
+
+    /**
+     * Add a group of export fields to the form.
+     *
+     * @param string $groupid id of the group in the list of fields
+     * @param string $labelid language string id for the group label
+     */
+    private function add_exportfield_group($groupid, $labelid) {
+
+        $mform = $this->_form;
+        $fields = scheduler_get_export_fields();
+        $checkboxes = array();
+
+        foreach ($fields as $field) {
+            if ($field->get_group() == $groupid && $field->is_available($this->scheduler)) {
+                $inputid = 'field-'.$field->get_id();
+                $label = $field->get_formlabel($this->scheduler);
+                $checkboxes[] = $mform->createElement('checkbox', $inputid, '', $label);
+            }
+        }
+        $grouplabel = get_string($labelid, 'scheduler');
+        $mform->addGroup($checkboxes, 'fields-'.$groupid, $grouplabel, null, false);
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        return $errors;
+    }
+
+}
diff --git a/mod/scheduler/exportlib.php b/mod/scheduler/exportlib.php
new file mode 100644
index 0000000..5415c6a
--- /dev/null
+++ b/mod/scheduler/exportlib.php
@@ -0,0 +1,1401 @@
+<?php
+
+/**
+ * Library for export functions
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot.'/lib/excellib.class.php');
+require_once($CFG->dirroot.'/lib/odslib.class.php');
+require_once($CFG->dirroot.'/lib/csvlib.class.php');
+require_once($CFG->dirroot.'/lib/pdflib.php');
+require_once($CFG->dirroot.'/user/profile/lib.php');
+
+
+/**
+ * A data field included in an export from Scheduler.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class scheduler_export_field {
+
+    protected $renderer;
+
+    public function set_renderer(mod_scheduler_renderer $renderer) {
+        $this->renderer = $renderer;
+    }
+
+    /**
+     * Is the field available in this scheduler?
+     * @return bool whether the field is available
+     */
+    public function is_available(scheduler_instance $scheduler) {
+        return true;
+    }
+
+    /**
+     * Retrieve the unique id (a string) for this field
+     */
+    public abstract function get_id();
+
+    /**
+     * Retrieve the group that this field belongs to -
+     * either 'slot' or 'student' or 'appointment',
+     *
+     * @return string the group id as above
+     */
+    public abstract function get_group();
+
+    /**
+     * Retrieve the header (in the sense of table header in the output)
+     * used for this field.
+     *
+     * @param $scheduler the scheduler instance in question
+     * @return string the header for this field
+     */
+    public function get_header(scheduler_instance $scheduler) {
+        return get_string('field-'.$this->get_id(), 'scheduler');
+    }
+
+    /**
+     * Retrieve the label used in the configuration form to label this field.
+     * By default, this equals the table header.
+     *
+     * @param $scheduler the scheduler instance in question
+     * @return string the form label for this field
+     */
+    public function get_formlabel(scheduler_instance $scheduler) {
+        return $this->get_header($scheduler);
+    }
+
+    /**
+     * Retrieve the typical width (in characters) of this field.
+     * This is used to set the width of columns in the output, where this is relevant.
+     *
+     * @param $scheduler the scheduler instance in question
+     * @return int the width of this field (number of characters)
+     */
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return strlen($this->get_formlabel($scheduler));
+    }
+
+    /**
+     * Does this field use wrapped text?
+     *
+     * @return bool whether wrapping is used for this field
+     */
+    public function is_wrapping() {
+        return false;
+    }
+
+    /**
+     * Retrieve the value of this field in a particular data record
+     *
+     * @param $slot the scheduler slot to get data from
+     * @param $appointment the appointment to evaluate (may be null for an empty slot)
+     * @return string the value of this field for the given data
+     */
+    public abstract function get_value(scheduler_slot $slot, $appointment);
+
+}
+
+
+/**
+ * Get a list of all export fields available.
+ *
+ * @return array the fields as an array of scheduler_export_field objects.
+ */
+function scheduler_get_export_fields() {
+    $result = array();
+    $result[] = new scheduler_slotdate_field();
+    $result[] = new scheduler_starttime_field();
+    $result[] = new scheduler_endtime_field();
+    $result[] = new scheduler_location_field();
+    $result[] = new scheduler_teachername_field();
+    $result[] = new scheduler_maxstudents_field();
+    $result[] = new scheduler_slotnotes_field();
+
+    $result[] = new scheduler_student_field('studentfullname', 'fullname', 25);
+    $result[] = new scheduler_student_field('studentfirstname', 'firstname');
+    $result[] = new scheduler_student_field('studentlastname', 'lastname');
+    $result[] = new scheduler_student_field('studentemail', 'email', 0, true);
+    $result[] = new scheduler_student_field('studentusername', 'username');
+    $result[] = new scheduler_student_field('studentidnumber', 'idnumber', 0, true);
+
+    $pfields = profile_get_custom_fields();
+    foreach ($pfields as $id => $field) {
+        $type = $field->datatype;
+        $result[] = new scheduler_profile_field('profile_'.$type, $id, $type);
+    }
+
+    $result[] = new scheduler_attended_field();
+    $result[] = new scheduler_grade_field();
+    $result[] = new scheduler_appointmentnote_field();
+    $result[] = new scheduler_teachernote_field();
+    $result[] = new scheduler_studentnote_field();
+    $result[] = new scheduler_filecount_field();
+
+    return $result;
+}
+
+
+/**
+ * Export field: Date of the slot
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_slotdate_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'date';
+    }
+
+    public function get_group() {
+        return 'slot';
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return strlen(mod_scheduler_renderer::userdate(1)) + 3;
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        return mod_scheduler_renderer::userdate($slot->starttime);
+    }
+}
+
+/**
+ * Export field: Start time of the slot
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_starttime_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'starttime';
+    }
+
+    public function get_group() {
+        return 'slot';
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        return mod_scheduler_renderer::usertime($slot->starttime);
+    }
+
+}
+
+
+/**
+ * Export field: End time of the slot
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_endtime_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'endtime';
+    }
+
+    public function get_group() {
+        return 'slot';
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        return mod_scheduler_renderer::usertime($slot->endtime);
+    }
+
+}
+
+/**
+ * Export field: Full name of the teacher
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_teachername_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'teachername';
+    }
+
+    public function get_group() {
+        return 'slot';
+    }
+
+    public function get_header(scheduler_instance $scheduler) {
+        return $scheduler->get_teacher_name();
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return 20;
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        return fullname($slot->teacher);
+    }
+
+}
+
+/**
+ * Export field: Appointment location
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_location_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'location';
+    }
+
+    public function get_group() {
+        return 'slot';
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        return format_string($slot->appointmentlocation);
+    }
+
+}
+
+/**
+ * Export field: Maximum number of students / appointments in the slot
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_maxstudents_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'maxstudents';
+    }
+
+    public function get_group() {
+        return 'slot';
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if ($slot->exclusivity <= 0) {
+            return get_string('unlimited', 'scheduler');
+        } else {
+            return $slot->exclusivity;
+        }
+    }
+
+}
+
+/**
+ * Export field: A field in the student record (to be chosen via the constructor)
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_student_field extends scheduler_export_field {
+
+    protected $id;
+    protected $studfield;
+    protected $typicalwidth;
+    protected $idfield;
+
+    public function __construct($id, $studfield, $typicalwidth = 0, $idfield = false) {
+        $this->id = $id;
+        $this->studfield = $studfield;
+        $this->typicalwidth = $typicalwidth;
+        $this->idfield = $idfield;
+    }
+
+    public function get_id() {
+        return $this->id;
+    }
+
+    public function get_group() {
+        return 'student';
+    }
+
+    public function is_available(scheduler_instance $scheduler) {
+        if (!$this->idfield) {
+            return true;
+        }
+        $ctx = $scheduler->get_context();
+        return has_capability('moodle/site:viewuseridentity', $ctx);
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        if ($this->typicalwidth > 0) {
+            return $this->typicalwidth;
+        } else {
+            return parent::get_typical_width($scheduler);
+        }
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (! $appointment instanceof scheduler_appointment) {
+            return '';
+        }
+        $student = $appointment->get_student();
+        if (is_null($student)) {
+            return '';
+        }
+        if ($this->studfield == 'fullname') {
+            return fullname($student);
+        } else {
+            return $student->{$this->studfield};
+        }
+    }
+
+}
+
+/**
+ * Export field: A cutom profile field in the student record
+ *
+ * @package    mod_scheduler
+ * @copyright  2017 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_profile_field extends scheduler_export_field {
+
+    protected $id;
+    protected $field;
+
+    /**
+     * Create a new export entry for a custom profile field.
+     *
+     * @param string $id the id of the field (for internal use)
+     * @param int $fieldid id of the field in the database table
+     * @param string $type data type of profile field to add
+     */
+    public function __construct($id, $fieldid, $type) {
+        global $CFG;
+
+        $this->id = $id;
+        require_once($CFG->dirroot.'/user/profile/field/'.$type.'/field.class.php');
+        $fieldclass = 'profile_field_'.$type;
+        $fieldobj = new $fieldclass($fieldid, 0);
+        $this->field = $fieldobj;
+    }
+
+    public function get_id() {
+        return $this->id;
+    }
+
+    public function get_group() {
+        return 'student';
+    }
+
+    public function get_header(scheduler_instance $scheduler) {
+        return format_string($this->field->field->name);
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (!$appointment instanceof scheduler_appointment || $appointment->studentid == 0) {
+            return '';
+        }
+        $this->field->set_userid($appointment->studentid);
+        $this->field->load_data();
+        if ($this->field->is_visible()) {
+            $content = $this->field->display_data();
+            return strip_tags($content);
+        }
+        return '';
+    }
+
+}
+
+
+/**
+ * Export field: Whether the appointment has been attended
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_attended_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'attended';
+    }
+
+    public function get_group() {
+        return 'appointment';
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (! $appointment instanceof scheduler_appointment) {
+            return '';
+        }
+        $str = $appointment->is_attended() ? get_string('yes') : get_string('no');
+        return $str;
+    }
+
+}
+
+/**
+ * Export field: Slot notes
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_slotnotes_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'slotnotes';
+    }
+
+    public function get_group() {
+        return 'slot';
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return 30;
+    }
+
+    public function is_wrapping() {
+        return true;
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        return strip_tags($slot->notes);
+    }
+
+}
+
+/**
+ * Export field: Appointment notes
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_appointmentnote_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'appointmentnote';
+    }
+
+    public function get_group() {
+        return 'appointment';
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return 30;
+    }
+
+    public function is_wrapping() {
+        return true;
+    }
+
+    public function is_available(scheduler_instance $scheduler) {
+        return $scheduler->uses_appointmentnotes();
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (! $appointment instanceof scheduler_appointment) {
+            return '';
+        }
+        return strip_tags($appointment->appointmentnote);
+    }
+
+}
+
+/**
+ * Export field: Teacher notes
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_teachernote_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'teachernote';
+    }
+
+    public function get_group() {
+        return 'appointment';
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return 30;
+    }
+
+    public function is_wrapping() {
+        return true;
+    }
+
+    public function is_available(scheduler_instance $scheduler) {
+        return $scheduler->uses_teachernotes();
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (! $appointment instanceof scheduler_appointment) {
+            return '';
+        }
+        return strip_tags($appointment->teachernote);
+    }
+
+}
+
+/**
+ * Export field: Student-provided notes
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_studentnote_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'studentnote';
+    }
+
+    public function get_group() {
+        return 'appointment';
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return 30;
+    }
+
+    public function is_wrapping() {
+        return true;
+    }
+
+    public function is_available(scheduler_instance $scheduler) {
+        return $scheduler->uses_studentnotes();
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (! $appointment instanceof scheduler_appointment) {
+            return '';
+        }
+        return strip_tags($appointment->studentnote);
+    }
+
+}
+
+/**
+ * Export field: Number of student-provided files
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_filecount_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'filecount';
+    }
+
+    public function get_group() {
+        return 'appointment';
+    }
+
+    public function get_typical_width(scheduler_instance $scheduler) {
+        return 2;
+    }
+
+    public function is_wrapping() {
+        return false;
+    }
+
+    public function is_available(scheduler_instance $scheduler) {
+        return $scheduler->uses_studentfiles();
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (! $appointment instanceof scheduler_appointment) {
+            return '';
+        }
+        return $appointment->count_studentfiles();
+    }
+
+}
+
+/**
+ * Export field: Grade for the appointment
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_grade_field extends scheduler_export_field {
+
+    public function get_id() {
+        return 'grade';
+    }
+
+    public function get_group() {
+        return 'appointment';
+    }
+
+    public function is_available(scheduler_instance $scheduler) {
+        return $scheduler->uses_grades();
+    }
+
+    public function get_value(scheduler_slot $slot, $appointment) {
+        if (! $appointment instanceof scheduler_appointment) {
+            return '';
+        }
+        return $this->renderer->format_grade($slot->get_scheduler(), $appointment->grade);
+    }
+
+}
+
+/**
+ * An "output device" for scheduler exports
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class scheduler_canvas {
+
+
+    /**
+     * @var object format instructions for header
+     */
+    public $formatheader;
+
+    /**
+     * @var object format instructions for boldface text
+     */
+    public $formatbold;
+
+    /**
+     * @var object format instructions for boldface italic text
+     */
+    public $formatboldit;
+
+    /**
+     * @var object format instructions for text with line wrapping
+     */
+    public $formatwrap;
+
+    /**
+     * Start a new page (tab, etc.) with an optional title.
+     *
+     * @param $title the title of the page
+     */
+    public abstract function start_page($title);
+
+    /**
+     * Write a string into a certain position of the canvas.
+     *
+     * @param $row the row into which to write (starts with 0)
+     * @param $column the column into which to write (starts with 0)
+     * @param $str the string to write
+     * @param $format the format to use (one of the $format... fields of this object), can be null
+     */
+    public abstract function write_string($row, $col, $str, $format);
+
+    /**
+     * Write a number into a certain position of the canvas.
+     *
+     * @param $row the row into which to write (starts with 0)
+     * @param $column the column into which to write (starts with 0)
+     * @param $num the number to write
+     * @param $format the format to use (one of the $format... fields of this object), can be null
+     */
+    public abstract function write_number($row, $col, $num, $format);
+
+    /**
+     * Merge a range of cells in the same row.
+     *
+     * @param $row the row in which to merge
+     * @param $fromcol the first column to merge
+     * @param $tocol the last column to merge
+     */
+    public abstract function merge_cells($row, $fromcol, $tocol);
+
+    /**
+     * Set the width of a particular column. (This will make sense only for certain outout formats,
+     * it can be ignored otherwise.)
+     *
+     * @param $col the affected column
+     * @param $width the width of that column
+     */
+    public function set_column_width($col, $width) {
+        // Ignore widths by default.
+    }
+
+    /**
+     * @var string title of the output file
+     */
+    protected $title;
+
+    /**
+     * Set the title of the entire output file.
+     *
+     * This is stored in the field $title, and can be used as appropriate for the particular implementation.
+     *
+     * @param title the title to set
+     */
+    public function set_title($title) {
+        $this->title = $title;
+    }
+
+    /**
+     * Send the output file via HTTP, as a downloadable file.
+     *
+     * @param $filename the file name to send
+     */
+    public abstract function send($filename);
+
+}
+
+
+
+/**
+ * Output device: Excel file
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_excel_canvas extends scheduler_canvas {
+
+    protected $workbook;
+    protected $worksheet;
+
+
+    public function __construct() {
+
+        // Create a workbook.
+        $this->workbook = new MoodleExcelWorkbook("-");
+
+        // Set up formats.
+        $this->formatheader = $this->workbook->add_format();
+        $this->formatbold = $this->workbook->add_format();
+        $this->formatbold = $this->workbook->add_format();
+        $this->formatboldit = $this->workbook->add_format();
+        $this->formatwrap = $this->workbook->add_format();
+        $this->formatheader->set_bold();
+        $this->formatbold->set_bold();
+        $this->formatboldit->set_bold();
+        $this->formatboldit->set_italic();
+        $this->formatwrap->set_text_wrap();
+
+    }
+
+
+    public function start_page($title) {
+        $this->worksheet = $this->workbook->add_worksheet($title);
+    }
+
+    private function ensure_open_page() {
+        if (!$this->worksheet) {
+            $this->start_page('');
+        }
+    }
+
+    public function write_string($row, $col, $str, $format=null) {
+        $this->ensure_open_page();
+        $this->worksheet->write_string($row, $col, $str, $format);
+    }
+
+    public function write_number($row, $col, $num, $format=null) {
+        $this->ensure_open_page();
+        $this->worksheet->write_number($row, $col, $num, $format);
+    }
+
+    public function merge_cells($row, $fromcol, $tocol) {
+        $this->ensure_open_page();
+        $this->worksheet->merge_cells($row, $fromcol, $row, $tocol);
+    }
+
+    public function set_column_width($col, $width) {
+        $this->worksheet->set_column($col, $col, $width);
+    }
+
+    public function send($filename) {
+        $this->workbook->send($filename);
+        $this->workbook->close();
+    }
+
+}
+
+/**
+ * Output device: ODS file
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_ods_canvas extends scheduler_canvas {
+
+    protected $workbook;
+    protected $worksheet;
+
+
+    public function __construct() {
+
+        // Create a workbook.
+        $this->workbook = new MoodleODSWorkbook("-");
+
+        // Set up formats.
+        $this->formatheader = $this->workbook->add_format();
+        $this->formatbold = $this->workbook->add_format();
+        $this->formatboldit = $this->workbook->add_format();
+        $this->formatwrap = $this->workbook->add_format();
+        $this->formatheader->set_bold();
+        $this->formatbold->set_bold();
+        $this->formatboldit->set_bold();
+        $this->formatboldit->set_italic();
+        $this->formatwrap->set_text_wrap();
+
+    }
+
+
+    public function start_page($title) {
+        $this->worksheet = $this->workbook->add_worksheet($title);
+    }
+
+    private function ensure_open_page() {
+        if (!$this->worksheet) {
+            $this->start_page('');
+        }
+    }
+
+
+    public function write_string($row, $col, $str, $format=null) {
+        $this->ensure_open_page();
+        $this->worksheet->write_string($row, $col, $str, $format);
+    }
+
+    public function write_number($row, $col, $num, $format=null) {
+        $this->ensure_open_page();
+        $this->worksheet->write_number($row, $col, $num, $format);
+    }
+
+    public function merge_cells($row, $fromcol, $tocol) {
+        $this->ensure_open_page();
+        $this->worksheet->merge_cells($row, $fromcol, $row, $tocol);
+    }
+
+    public function set_column_width($col, $width) {
+        $this->worksheet->set_column($col, $col, $width);
+    }
+
+    public function send($filename) {
+        $this->workbook->send($filename);
+        $this->workbook->close();
+    }
+
+}
+
+
+/**
+ * An output device that is based on first collecting all text in an array.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class scheduler_cached_text_canvas extends scheduler_canvas {
+
+    protected $pages;
+    protected $curpage;
+
+    public function __construct() {
+
+        $this->formatheader = 'header';
+        $this->formatbold = 'bold';
+        $this->formatboldit = 'boldit';
+        $this->formatwrap = 'wrap';
+
+        $this->start_page('');
+
+    }
+
+    protected function get_col_count($page) {
+        $maxcol = 0;
+        foreach ($page->cells as $rownum => $row) {
+            foreach ($row as $colnum => $col) {
+                if ($colnum > $maxcol) {
+                    $maxcol = $colnum;
+                }
+            }
+        }
+        return $maxcol + 1;
+    }
+
+    protected function get_row_count($page) {
+        $maxrow = 0;
+        foreach ($page->cells as $rownum => $row) {
+            if ($rownum > $maxrow) {
+                $maxrow = $rownum;
+            }
+        }
+        return $maxrow + 1;
+    }
+
+    protected function compute_relative_widths($page) {
+        $cols = $this->get_col_count($page);
+        $sum = 0;
+        foreach ($page->columnwidths as $width) {
+            $sum += $width;
+        }
+        $relwidths = array();
+        for ($col = 0; $col < $cols; $col++) {
+            if ($sum > 0 && isset($page->columnwidths[$col])) {
+                $relwidths[$col] = (int) ($page->columnwidths[$col] / $sum * 100);
+            } else {
+                $relwidths[$col] = 0;
+            }
+        }
+        return $relwidths;
+    }
+
+    public function start_page($title) {
+        $onemptypage = $this->curpage &&  !$this->curpage->cells && !$this->curpage->mergers && !$this->curpage->title;
+        if ($onemptypage) {
+            $this->curpage->title = $title;
+        } else {
+            $newpage = new stdClass;
+            $newpage->title = $title;
+            $newpage->cells = array();
+            $newpage->formats = array();
+            $newpage->mergers = array();
+            $newpage->columnwidths = array();
+            $this->pages[] = $newpage;
+            $this->curpage = $newpage;
+        }
+    }
+
+
+    public function write_string($row, $col, $str, $format=null) {
+        $this->curpage->cells[$row][$col] = $str;
+        $this->curpage->formats[$row][$col] = $format;
+    }
+
+    public function write_number($row, $col, $num, $format=null) {
+        $this->write_string($row, $col, $num, $format);
+    }
+
+    public function merge_cells($row, $fromcol, $tocol) {
+        $this->curpage->mergers[$row][$fromcol] = $tocol - $fromcol + 1;
+    }
+
+    public function set_column_width($col, $width) {
+        $this->curpage->columnwidths[$col] = $width;
+    }
+
+}
+
+/**
+ * Output device: HTML file
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_html_canvas extends scheduler_cached_text_canvas {
+
+    public function as_html($rowcutoff, $usetitle = true) {
+        global $OUTPUT;
+
+        $o = '';
+
+        if ($usetitle && $this->title) {
+            $o .= html_writer::tag('h1', $this->title);
+        }
+
+        foreach ($this->pages as $page) {
+            if ($page->title) {
+                $o .= html_writer::tag('h2', $page->title);
+            }
+
+            // Find extent of the table.
+            $rows = $this->get_row_count($page);
+            $cols = $this->get_col_count($page);
+            if ($rowcutoff && $rows > $rowcutoff) {
+                $rows = $rowcutoff;
+            }
+            $relwidths = $this->compute_relative_widths($page);
+
+            $table = new html_table();
+            $table->cellpadding = 3;
+            for ($row = 0; $row < $rows; $row++) {
+                $hrow = new html_table_row();
+                $col = 0;
+                while ($col < $cols) {
+                    $span = 1;
+                    if (isset($page->mergers[$row][$col])) {
+                        $mergewidth = (int) $page->mergers[$row][$col];
+                        if ($mergewidth >= 1) {
+                            $span = $mergewidth;
+                        }
+                    }
+                    $cell = new html_table_cell('');
+                    $text = '';
+                    if (isset($page->cells[$row][$col])) {
+                        $text = $page->cells[$row][$col];
+                    }
+                    if (isset($page->formats[$row][$col])) {
+                        $cell->header = ($page->formats[$row][$col] == 'header');
+                        if ($page->formats[$row][$col] == 'boldit') {
+                            $text = html_writer::tag('i', $text);
+                            $text = html_writer::tag('b', $text);
+                        }
+                        if ($page->formats[$row][$col] == 'bold') {
+                            $text = html_writer::tag('b', $text);
+                        }
+                    }
+                    if ($span > 1) {
+                        $cell->colspan = $span;
+                    }
+                    if ($row == 0 & $relwidths[$col] > 0) {
+                        $cell->width = $relwidths[$col].'%';
+                    }
+                    $cell->text = $text;
+                    $hrow->cells[] = $cell;
+                    $col = $col + $span;
+                }
+                $table->data[] = $hrow;
+            }
+            $o .= html_writer::table($table);
+        }
+        return $o;
+    }
+
+    public function send($filename) {
+        global $OUTPUT, $PAGE;
+        $PAGE->set_pagelayout('print');
+        echo $OUTPUT->header();
+        echo $this->as_html(0, true);
+        echo $OUTPUT->footer();
+    }
+
+}
+
+/**
+ * Output device: CSV (text) file
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_csv_canvas extends scheduler_cached_text_canvas {
+
+    protected $delimiter;
+
+    public function __construct($delimiter) {
+        parent::__construct();
+        $this->delimiter = $delimiter;
+    }
+
+    public function send($filename) {
+
+        $writer = new csv_export_writer($this->delimiter);
+        $writer->set_filename($filename);
+
+        foreach ($this->pages as $page) {
+            if ($page->title) {
+                $writer->add_data(array('*** '.$page->title.' ***'));
+            }
+
+            // Find extent of the table.
+            $rows = $this->get_row_count($page);
+            $cols = $this->get_col_count($page);
+
+            for ($row = 0; $row < $rows; $row++) {
+                $data = array();
+                $col = 0;
+                while ($col < $cols) {
+                    if (isset($page->cells[$row][$col])) {
+                        $data[] = $page->cells[$row][$col];
+                    } else {
+                        $data[] = '';
+                    }
+
+                    $span = 1;
+                    if (isset($page->mergers[$row][$col])) {
+                        $mergewidth = (int) $page->mergers[$row][$col];
+                        if ($mergewidth >= 1) {
+                            $span = $mergewidth;
+                        }
+                    }
+                    $col += $span;
+                }
+                $writer->add_data($data);
+            }
+        }
+
+        $writer->download_file();
+    }
+
+}
+
+/**
+ * Output device: PDF file
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_pdf_canvas extends scheduler_cached_text_canvas {
+
+    protected $orientation;
+
+    public function __construct($orientation) {
+        parent::__construct();
+        $this->orientation = $orientation;
+    }
+
+    public function send($filename) {
+
+        $doc = new pdf($this->orientation);
+        if ($this->title) {
+            $doc->setHeaderData('', 0, $this->title);
+            $doc->setPrintHeader(true);
+        } else {
+            $doc->setPrintHeader(false);
+        }
+        $doc->setPrintFooter(false);
+
+        foreach ($this->pages as $page) {
+            $doc->AddPage();
+            if ($page->title) {
+                $doc->writeHtml('<h2>'.$page->title.'</h2>');
+            }
+
+            // Find extent of the table.
+            $rows = $this->get_row_count($page);
+            $cols = $this->get_col_count($page);
+            $relwidths = $this->compute_relative_widths($page);
+
+            $o = html_writer::start_tag('table', array('border' => 1, 'cellpadding' => 1));
+            for ($row = 0; $row < $rows; $row++) {
+                $o .= html_writer::start_tag('tr');
+                $col = 0;
+                while ($col < $cols) {
+                    $span = 1;
+                    if (isset($page->mergers[$row][$col])) {
+                        $mergewidth = (int) $page->mergers[$row][$col];
+                        if ($mergewidth >= 1) {
+                            $span = $mergewidth;
+                        }
+                    }
+                    $opts = array();
+                    if ($row == 0 && $relwidths[$col] > 0) {
+                        $opts['width'] = $relwidths[$col].'%';
+                    }
+                    if ($span > 1) {
+                        $opts['colspan'] = $span;
+                    }
+                    $o .= html_writer::start_tag('td', $opts);
+                    $cell = '';
+                    if (isset($page->cells[$row][$col])) {
+                        $cell = s($page->cells[$row][$col]);
+                        if (isset($page->formats[$row][$col])) {
+                            $thisformat = $page->formats[$row][$col];
+                            if ($thisformat == 'header') {
+                                $cell = html_writer::tag('b', $cell);
+                            } else if ($thisformat == 'boldit') {
+                                $cell = html_writer::tag('i', $cell);
+                            }
+                        }
+                    }
+                    $o .= $cell;
+
+                    $o .= html_writer::end_tag('td');
+
+                    $col += $span;
+                }
+                $o .= html_writer::end_tag('tr');
+            }
+            $o .= html_Writer::end_tag('table');
+            $doc->writeHtml($o);
+        }
+
+        $doc->Output($filename.'.pdf');
+    }
+
+}
+
+/**
+ * A class that generates the export file with given settings.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_export {
+
+    /**
+     * @var scheduler_canvas the canvas used for output
+     */
+    protected $canvas;
+
+    /**
+     * @var array a list of student ids to be filtered for
+     */
+    protected $studfilter = null;
+
+    /**
+     * Create a new export with a given canvas
+     *
+     * @param scheduler_canvas $canvas the canvas to use
+     */
+    public function __construct(scheduler_canvas $canvas) {
+        $this->canvas = $canvas;
+    }
+
+    /**
+     * Build the output on the canvas.
+     *
+     * @param scheduler_instance $scheduler the scheduler to export
+     * @param array $fields the fields to include
+     * @param string $mode output mode
+     * @param int $userid id of the teacher to export for, 0 if slots for all teachers are exported
+     * @param int $groupid the id of the group (of students) to export appointments for, 0 if none
+     * @param bool $includeempty whether to include slots without appointments
+     * @param bool $pageperteacher whether one page should be used for each teacher
+     */
+    public function build(scheduler_instance $scheduler, array $fields, $mode, $userid, $groupid, $includeempty, $pageperteacher) {
+        if ($groupid) {
+            $this->studfilter = array_keys(groups_get_members($groupid, 'u.id'));
+        }
+        $this->canvas->set_title(format_string($scheduler->name));
+        if ($userid) {
+            $slots = $scheduler->get_slots_for_teacher($userid, $groupid);
+            $this->build_page($scheduler, $fields, $slots, $mode, $includeempty);
+        } else if ($pageperteacher) {
+            $teachers = $scheduler->get_teachers();
+            foreach ($teachers as $teacher) {
+                $slots = $scheduler->get_slots_for_teacher($teacher->id, $groupid);
+                $title = fullname($teacher);
+                $this->canvas->start_page($title);
+                $this->build_page($scheduler, $fields, $slots, $mode, $includeempty);
+            }
+        } else {
+            $slots = $scheduler->get_slots_for_group($groupid);
+            $this->build_page($scheduler, $fields, $slots, $mode, $includeempty);
+        }
+    }
+
+    /**
+     * Write a page of output to the canvas.
+     * (Pages correspond to "tabs" in spreadsheet format, not to printed pages.)
+     *
+     * @param scheduler_instance $scheduler the scheduler being exported
+     * @param array $fields the fields to include
+     * @param array $slots the slots to include
+     * @param string $mode output mode
+     * @param bool $includeempty whether to include slots without appointments
+     */
+    protected function build_page(scheduler_instance $scheduler, array $fields, array $slots, $mode, $includeempty) {
+
+        // Output the header.
+        $row = 0;
+        $col = 0;
+        foreach ($fields as $field) {
+            if ($field->get_group() != 'slot' || $mode != 'appointmentsgrouped') {
+                $header = $field->get_header($scheduler);
+                $this->canvas->write_string($row, $col, $header, $this->canvas->formatheader);
+                $this->canvas->set_column_width($col, $field->get_typical_width($scheduler));
+                $col++;
+            }
+        }
+        $row++;
+
+        // Output the data rows.
+        foreach ($slots as $slot) {
+            $appts = $slot->get_appointments($this->studfilter);
+            if ($mode == 'appointmentsgrouped') {
+                if ($appts || $includeempty) {
+                    $this->write_row_summary($row, $slot, $fields);
+                    $row++;
+                }
+                foreach ($appts as $appt) {
+                    $this->write_row($row, $slot, $appt, $fields, false);
+                    $row++;
+                }
+            } else {
+                if ($appts) {
+                    if ($mode == 'onelineperappointment') {
+                        foreach ($appts as $appt) {
+                            $this->write_row($row, $slot, $appt, $fields, true);
+                            $row++;
+                        }
+                    } else {
+                        $this->write_row($row, $slot, $appts[0], $fields, true, count($appts) > 1);
+                        $row++;
+                    }
+                } else if ($includeempty) {
+                    $this->write_row($row, $slot, null, $fields, true);
+                    $row++;
+                }
+            }
+        }
+
+    }
+
+    /**
+     * Write a row of the export to the canvas
+     * @param int $row row number on canvas
+     * @param scheduler_slot $slot the slot of the appointment to write
+     * @param scheduler_appointment $appointment the appointment to write
+     * @param array $fields list of fields to include
+     * @param bool $includeslotfields whether fields relating to slots, rather than appointments, should be included
+     * @param string $multiple whether the row represents multiple values (appointments)
+     */
+    protected function write_row($row, scheduler_slot $slot, $appointment, array $fields, $includeslotfields = true, $multiple = false) {
+
+        $col = 0;
+        foreach ($fields as $field) {
+            if ($includeslotfields || $field->get_group() != 'slot') {
+                if ($multiple && $field->get_group() != 'slot') {
+                    $value = get_string('multiple', 'scheduler');
+                } else {
+                    $value = $field->get_value($slot, $appointment);
+                }
+                $format = $field->is_wrapping() ? $this->canvas->formatwrap : null;
+                $this->canvas->write_string($row, $col, $value, $format);
+                $col++;
+            }
+        }
+    }
+
+    /**
+     * Write a summary of slot-related data into a row
+     *
+     * @param int $row the row number on the canvas
+     * @param scheduler_slot $slot the slot to be written
+     * @param array $fields the fields to include
+     */
+    protected function write_row_summary($row, scheduler_slot $slot, array $fields) {
+
+        $strs = array();
+        $cols = 0;
+        foreach ($fields as $field) {
+            if ($field->get_group() == 'slot') {
+                $strs[] = $field->get_value($slot, null);
+            } else {
+                $cols++;
+            }
+        }
+        $str = implode(' - ', $strs);
+        $this->canvas->write_string($row, 0, $str, $this->canvas->formatboldit);
+        $this->canvas->merge_cells($row, 0, $cols - 1);
+    }
+
+}
diff --git a/mod/scheduler/index.php b/mod/scheduler/index.php
new file mode 100644
index 0000000..0954a58
--- /dev/null
+++ b/mod/scheduler/index.php
@@ -0,0 +1,89 @@
+<?PHP
+
+/**
+ * Main file of the scheduler package.
+ * It lists all the instances of scheduler in a particular course.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(dirname(dirname(__FILE__))).'/config.php');
+require_once(dirname(__FILE__).'/lib.php');
+
+$id = required_param('id', PARAM_INT);   // Course id.
+$course = $DB->get_record('course', array('id' => $id), '*', MUST_EXIST);
+
+$PAGE->set_url('/mod/scheduler/index.php', array('id' => $id));
+$PAGE->set_pagelayout('incourse');
+
+$coursecontext = context_course::instance($id);
+require_login($course->id);
+
+$event = \mod_scheduler\event\course_module_instance_list_viewed::create(array(
+    'context' => $coursecontext
+));
+$event->add_record_snapshot('course', $course);
+$event->trigger();
+
+// Get all required strings.
+
+$strschedulers = get_string('modulenameplural', 'scheduler');
+$strscheduler  = get_string('modulename', 'scheduler');
+
+// Print the header.
+
+$title = $course->shortname . ': ' . $strschedulers;
+$PAGE->set_title($title);
+$PAGE->set_heading($course->fullname);
+echo $OUTPUT->header($course);
+
+
+// Get all the appropriate data.
+
+if (!$schedulers = get_all_instances_in_course('scheduler', $course)) {
+    notice(get_string('noschedulers', 'scheduler'), "../../course/view.php?id=$course->id");
+    die;
+}
+
+// Print the list of instances.
+
+$timenow = time();
+$strname  = get_string('name');
+$strweek  = get_string('week');
+$strtopic  = get_string('topic');
+
+$table = new html_table();
+
+if ($course->format == 'weeks') {
+    $table->head  = array ($strweek, $strname);
+    $table->align = array ('CENTER', 'LEFT');
+} else if ($course->format == 'topics') {
+    $table->head  = array ($strtopic, $strname);
+    $table->align = array ('CENTER', 'LEFT', 'LEFT', 'LEFT');
+} else {
+    $table->head  = array ($strname);
+    $table->align = array ('LEFT', 'LEFT', 'LEFT');
+}
+
+foreach ($schedulers as $scheduler) {
+    $url = new moodle_url('/mod/scheduler/view.php', array('id' => $scheduler->coursemodule));
+    // Show dimmed if the mod is hidden.
+    $attr = $scheduler->visible ? null : array('class' => 'dimmed');
+    $link = html_writer::link($url, $scheduler->name, $attr);
+    if ($scheduler->visible or has_capability('moodle/course:viewhiddenactivities', $coursecontext)) {
+        if ($course->format == 'weeks' or $course->format == 'topics') {
+            $table->data[] = array ($scheduler->section, $link);
+        } else {
+            $table->data[] = array ($link);
+        }
+    }
+}
+
+echo html_writer::table($table);
+
+// Finish the page.
+
+echo $OUTPUT->footer($course);
+
diff --git a/mod/scheduler/lang/en/scheduler.php b/mod/scheduler/lang/en/scheduler.php
new file mode 100644
index 0000000..b0759ce
--- /dev/null
+++ b/mod/scheduler/lang/en/scheduler.php
@@ -0,0 +1,583 @@
+<?php
+
+/**
+ * Strings for component 'mod_scheduler', language 'en'
+ *
+ * @package    mod_scheduler
+ * @copyright  2017 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['pluginname'] = 'Scheduler';
+$string['pluginadministration'] = 'Scheduler administration';
+$string['modulename'] = 'Scheduler';
+$string['modulename_help'] = 'The scheduler activity helps you in scheduling appointments with your students.
+
+Teachers specify time slots for meetings, students then choose one of them on Moodle.
+Teachers in turn can record the outcome of the meeting - and optionally a grade - within the scheduler.
+
+Group scheduling is supported; that is, each time slot can accommodate several students, and optionally it is possible to schedule appointments for entire groups at the same time.';
+$string['modulename_link'] = 'mod/scheduler/view';
+$string['modulenameplural'] = 'Schedulers';
+
+/* ***** Capabilities ****** */
+$string['scheduler:addinstance'] = 'Add a new scheduler';
+$string['scheduler:appoint'] = 'Book slots';
+$string['scheduler:attend'] = 'Attend students';
+$string['scheduler:canscheduletootherteachers'] = 'Schedule appointments for other staff members';
+$string['scheduler:canseeotherteachersbooking'] = 'See and browse other teachers booking';
+$string['scheduler:disengage'] = 'This capability is deprecated and does nothing';
+$string['scheduler:manage'] = 'Manage your slots and appointments';
+$string['scheduler:manageallappointments'] = 'Manage all scheduler data';
+$string['scheduler:viewslots'] = 'See slots that are open for booking (in student screen)';
+$string['scheduler:viewfullslots'] = 'See slots even if they are fully booked (in student screen)';
+$string['scheduler:seeotherstudentsbooking'] = 'See other students booked on the slot';
+$string['scheduler:seeotherstudentsresults'] = 'See other slot student\'s results';
+$string['scheduler:seeoverviewoutsideactivity'] = 'Use the overview screen to see slots outside the current scheduler activity.';
+
+/* ***** Events ***** */
+$string['event_bookingformviewed'] = 'Scheduler booking form viewed';
+$string['event_bookingadded'] = 'Scheduler booking added';
+$string['event_bookingremoved'] = 'Scheduler booking removed';
+$string['event_appointmentlistviewed'] = 'Scheduler appointment list viewed';
+$string['event_slotadded'] = 'Scheduler slot added';
+$string['event_slotdeleted'] = 'Scheduler slot deleted';
+
+/* ***** Message types ***** */
+$string['messageprovider:invitation'] = 'Invitation to book a slot';
+$string['messageprovider:bookingnotification'] = 'Notification when a booking is made or cancelled';
+$string['messageprovider:reminder'] = 'Reminder of an upcoming appointment';
+
+/* ***** Search areas ***** */
+$string['search:activity'] = 'Scheduler - activity information';
+
+/* ***** Interface strings ****** */
+
+$string['onedaybefore'] = '1 day before slot';
+$string['oneweekbefore'] = '1 week before slot';
+$string['areaappointmentnote'] = 'Files in appointment notes';
+$string['areaslotnote'] = 'Files in slot notes';
+$string['areateachernote'] = 'Files in confidential notes';
+$string['action'] = 'Action';
+$string['actions'] = 'Actions';
+$string['addappointment'] = 'Add another student';
+$string['addcommands'] = 'Add slots';
+$string['addondays'] = 'Add appointments on';
+$string['addsession'] = 'Add repeated slots';
+$string['addsingleslot'] = 'Add single slot';
+$string['addslot'] = 'You can add additional appointment slots at any time.';
+$string['addstudenttogroup'] = 'Add this student to appointment group';
+$string['allappointments'] = 'All appointments';
+$string['allononepage'] = 'All slots on one page';
+$string['allowgroup'] = 'Exclusive slot - click to change';
+$string['allteachersgrading'] = 'Teachers can grade all appointments';
+$string['allteachersgrading_desc'] = 'When enabled, teachers can grade appointments they are not assigned to.';
+$string['alreadyappointed'] = 'Cannot make the appointment. The slot is already fully booked.';
+$string['appointfor'] = 'Make appointment for';
+$string['appointforgroup'] = 'Make appointments for: {$a}';
+$string['appointingstudent'] = 'Appointment for slot';
+$string['appointingstudentinnew'] = 'Appointment for new slot';
+$string['appointment'] = 'Appointment';
+$string['appointmentno'] = 'Appointment {$a}';
+$string['appointmentnote'] = 'Notes for appointment (visible to student)';
+$string['appointments'] = 'Appointments';
+$string['appointmentsgrouped'] = 'Appointments grouped by slot';
+$string['appointsolo'] = 'just me';
+$string['appointsomeone'] = 'Add new appointment';
+$string['appointmentsummary'] = 'Appointment on {$a->startdate} from {$a->starttime} to {$a->endtime} with {$a->teacher}';
+$string['attendable'] = 'Attendable';
+$string['attendablelbl'] = 'Total candidates for scheduling';
+$string['attended'] = 'Attended';
+$string['attendedlbl'] = 'Amount of attended students';
+$string['attendedslots'] = 'Attended slots';
+$string['availableslots'] = 'Available slots';
+$string['availableslotsall'] = 'All slots';
+$string['availableslotsnotowned'] = 'Not owned';
+$string['availableslotsowned'] = 'Owned';
+$string['bookingformoptions'] = 'Booking form and student-supplied data';
+$string['bookinginstructions'] = 'Booking instructions';
+$string['bookinginstructions_help'] = 'This text will be displayed to students before they make a booking. It can, for example, instruct students how to fill out the optional message field or which files to upload.';
+$string['bookslot'] = 'Book slot';
+$string['bookaslot'] = 'Book a slot';
+$string['bookingdetails'] = 'Booking details';
+$string['bookwithteacher'] = 'Teacher';
+$string['break'] = 'Break between slots';
+$string['breaknotnegative'] = 'Length of the break must not be negative';
+$string['cancelbooking'] = 'Cancel booking';
+$string['canbooksingleappointment'] = 'You can book one appointment in this scheduler.';
+$string['canbook1appointment'] = 'You can book one more appointment in this scheduler.';
+$string['canbooknappointments'] = 'You can book {$a} more appointments in this scheduler.';
+$string['canbooknofurtherappointments'] = 'You cannot book further appointments in this scheduler.';
+$string['canbookunlimitedappointments'] = 'You can book any number of appointments in this scheduler.';
+$string['chooseexisting'] = 'Choose existing';
+$string['choosingslotstart'] = 'Choosing the start time';
+$string['comments'] = 'Comments';
+$string['conflictlocal'] = '{$a->datetime} ({$a->duration} minutes) in this scheduler';
+$string['conflictremote'] = '{$a->datetime} ({$a->duration} minutes) in course {$a->courseshortname}, scheduler {$a->schedulername}';
+$string['contentformat'] = 'Format';
+$string['contentformat_help'] = '<p>There are three basic choices for the export format,
+     differing in how slots with several appointments are handled.
+     <dl>
+         <dt>One line per slot</dt>:
+         <dd>
+             The output file will contain one line for each slot. If a slot contains multiple
+             appointments, then instead of the student\'s name, etc., a marker "(multiple)" will be shown.
+         </dd>
+         <dt>One line per appointment</dt>:
+         <dd>
+             The output file will contain one line for each appointment. If a slot contains multiple
+             appointments, then it will appear several times in the list (with its data repeated).
+         </dd>
+         <dt>Appointments grouped by slot</dt>:
+         <dd>
+             All appointments of one slot are grouped together, preceded by a header line that
+             indicates the slot in question. This may not work well with the CSV output file format,
+             as the number of columns is not constant.
+         </dd>
+    </dl>
+    You can explore the effect of these options using the "Preview" button.</p>';
+$string['complete'] = 'Booked';
+$string['confirmbooking'] = "Confirm booking";
+$string['confirmdelete-all'] = 'This will delete <b>all</b> slots in this scheduler. Deletion cannot be undone. Continue anyway?';
+$string['confirmdelete-mine'] = 'This will delete all your slots in this scheduler. Deletion cannot be undone. Continue anyway?';
+$string['confirmdelete-myunused'] = 'This will delete all your unused slots in this scheduler. Deletion cannot be undone. Continue anyway?';
+$string['confirmdelete-selected'] = 'This will delete the selected slots. Deletion cannot be undone. Continue anyway?';
+$string['confirmdelete-one'] = 'Delete slot?';
+$string['confirmdelete-unused'] = 'This will delete all unused slots in this scheduler. Deletion cannot be undone. Continue anyway?';
+$string['conflictingslots'] = 'The slot on {$a} cannot be created due to conflicting slots:';
+$string['copytomyself'] = 'Send a copy to myself';
+$string['course'] = 'Course';
+$string['createexport'] = 'Create export file';
+$string['csvformat'] = 'CSV';
+$string['csvfieldseparator'] = 'Field separator for CSV';
+$string['cumulatedduration'] = 'Summed duration of appointments';
+$string['datatoinclude'] = 'Data to include';
+$string['datatoinclude_help'] = 'Select the fields that should be included in the export. Each of these will appear in one column of the output file.';
+$string['date'] = 'Date';
+$string['datelist'] = 'Overview';
+$string['defaultslotduration'] = 'Default slot duration';
+$string['defaultslotduration_help'] = 'The default length (in minutes) for appointment slots that you set up';
+$string['deleteallslots'] = 'Delete all slots';
+$string['deleteallunusedslots'] = 'Delete unused slots';
+$string['deletecommands'] = 'Delete slots';
+$string['deletemyslots'] = 'Delete all my slots';
+$string['deleteselection'] = 'Delete selected slots';
+$string['deletetheseslots'] = 'Delete these slots';
+$string['deleteunusedslots'] = 'Delete my unused slots';
+$string['deleteonsave'] = 'Delete this appointment (when saving the form)';
+$string['deletedconflictingslots'] = 'For the slot on {$a}, conflicting slots have been deleted:';
+$string['department'] = 'From where?';
+$string['disengage'] = 'Drop my appointments';
+$string['displayfrom'] = 'Display slot to students from';
+$string['distributetoslot'] = 'Distribute to the whole group';
+$string['divide'] = 'Divide into slots?';
+$string['duration'] = 'Duration';
+$string['durationrange'] = 'Slot duration must be between {$a->min} and {$a->max} minutes.';
+$string['editbooking'] = 'Edit booking';
+$string['emailreminder'] = 'Email a reminder';
+$string['emailreminderondate'] = 'Email a reminder on';
+$string['end'] = 'End';
+$string['enddate'] = 'Repeat time slots until';
+$string['excelformat'] = 'Excel';
+$string['exclusive'] = 'Exclusive';
+$string['exclusivity'] = 'Exclusivity';
+$string['exclusivitypositive'] = 'The number of students per slot needs to be 1 or more.';
+$string['exclusivityoverload'] = 'The slot has {$a} appointed students, more than allowed by this setting.';
+$string['explaingeneralconfig'] = 'These options can only be setup at site level and will apply to all schedulers of this Moodle installation.';
+$string['export'] = 'Export';
+$string['exporthdr'] = 'Export slots and appointments';
+$string['everyone'] = 'Everyone';
+$string['field-date'] = 'Date';
+$string['field-starttime'] = 'Start time';
+$string['field-endtime'] = 'End time';
+$string['field-location'] = 'Location';
+$string['field-maxstudents'] = 'Max. students';
+$string['field-studentfullname'] = 'Student full name';
+$string['field-studentfirstname'] = 'Student first name';
+$string['field-studentlastname'] = 'Student last name';
+$string['field-studentemail'] = 'Student e-mail';
+$string['field-studentusername'] = 'Student user name';
+$string['field-studentidnumber'] = 'Student id number';
+$string['field-attended'] = 'Attended';
+$string['field-slotnotes'] = 'Slot notes';
+$string['field-appointmentnote'] = 'Appointment note (to student)';
+$string['field-teachernote'] = 'Confidential note (teacher only)';
+$string['field-studentnote'] = 'Message by student';
+$string['field-filecount'] = 'Number of uploaded files';
+$string['field-grade'] = 'Grade';
+$string['fileformat'] = 'File format';
+$string['fileformat_help'] = 'The following file formats are available:
+     <ul>
+          <li>Comma Separated Value (CSV) text files. The field separator, by default a comma, can be chosen below.
+               CSV files can be opened in most spreadshet applications;</li>
+          <li>Microsoft Excel files (Excel 2007 format);</li>
+          <li>Open Document spreadsheets (ODS);</li>
+          <li>HTML format - a web page displaying the output table,
+                which can be printed using the browser\'s print feature;</li>
+          <li>PDF documents. You can choose between landscape and portrait orientation.</li>
+     </ul>';
+$string['finalgrade'] = 'Final grade';
+$string['firstslotavailable'] = 'The first slot will be open on: {$a}';
+$string['forbidgroup'] = 'Group slot - click to change';
+$string['forcewhenoverlap'] = 'Force when overlap';
+$string['forcourses'] = 'Choose students in courses';
+$string['friday'] = 'Friday';
+$string['generalconfig'] = 'General configuration';
+$string['grade'] = 'Grade';
+$string['gradeingradebook'] = 'Grade in gradebook';
+$string['gradingstrategy'] = 'Grading strategy';
+$string['gradingstrategy_help'] = 'In a scheduler where students can have several appointments, select how grades are aggregated.
+    The gradebook can show either <ul><li>the mean grade or</li><li>the maximum grade</li></ul> that the student has achieved.';
+$string['group'] = 'group ';
+$string['groupbreakdown'] = 'By group size';
+$string['groupbookings'] = 'Booking in groups';
+$string['groupbookings_help'] = 'Allow students to book a slot for all members of their group.
+(Note that this is separate from the "group mode" setting, which controls the slots a student can see.)';
+$string['groupmodeyourgroups'] = 'Group mode: {$a->groupmode}. Only students in {$a->grouplist} can book appointments with you.';
+$string['groupmodeyourgroupsempty'] = 'Group mode: {$a->groupmode}. You are not member of any group, therefore students cannot book appointments with you.';
+$string['groupscheduling'] = 'Enable group scheduling';
+$string['groupscheduling_desc'] = 'Allow entire groups to be scheduled at once.
+(Apart from the global option, the setting "Booking in groups" must be enabled in the respective scheduler instance.)';
+$string['groupsession'] = 'Group session';
+$string['groupsize'] = 'Group size';
+$string['guardtime'] = 'Guard time';
+$string['guestscantdoanything'] = 'Guests can\'t do anything here.';
+$string['htmlformat'] = 'HTML';
+$string['howtoaddstudents'] = 'For adding students to a global scoped scheduler, use the role setting for the module.<br/>You may also use module role definitions to define the attenders of your students.';
+$string['ignoreconflicts'] = 'Ignore scheduling conflicts';
+$string['ignoreconflicts_help'] = 'If this box is ticked, then the slot will be moved to the requested date and time, even if other slots exist at the same time. This may lead to overlapping appointments for some teachers or students, and should therefore be used with care.';
+$string['ignoreconflicts_link'] = 'mod/scheduler/conflict';
+$string['includeemptyslots'] = 'Include empty slots';
+$string['includeslotsfor'] = 'Include slots for';
+$string['incourse'] = ' in course ';
+$string['mixindivgroup'] = 'Mix individual and group bookings';
+$string['mixindivgroup_desc'] = 'Where group scheduling is enabled, allow individual bookings as well.';
+$string['introduction'] = 'Introduction';
+$string['isnonexclusive'] = 'Non-exclusive';
+$string['landscape'] = 'Landscape';
+$string['lengthbreakdown'] = 'By slot duration';
+$string['limited'] = 'Limited ({$a} left)';
+$string['location'] = 'Location';
+$string['markseen'] = 'After you have had an appointment with a student please mark them as "Seen" by clicking the checkbox near to their user picture above.';
+$string['markasseennow'] = 'Mark as seen now';
+$string['maxgrade'] = 'Take the highest grade';
+$string['maxstudentsperslot'] = 'Maximum number of students per slot';
+$string['maxstudentsperslot_desc'] = 'Group slots / non-exclusive slots can have at most this number of students. Note that in addition, the setting "unlimited" can always be chosen for a slot.';
+$string['maxstudentlistsize'] = 'Maximum length of student list';
+$string['maxstudentlistsize_desc'] = 'The maximum length of the list of students who need to make an appointment, as shown in the teacher view of the scheduler. If there are more students than this, no list will be displayed.';
+$string['meangrade'] = 'Take the mean grade';
+$string['meetingwith'] = 'Meeting with your';
+$string['meetingwithplural'] = 'Meeting with your';
+$string['message'] = 'Message';
+$string['messagesent'] = 'Message sent to {$a} recipients';
+$string['messagesubject'] = 'Subject';
+$string['messagebody'] = 'Message body';
+$string['minutes'] = 'minutes';
+$string['minutesperslot'] = 'minutes per slot';
+$string['missingstudents'] = '{$a} students still need to make an appointment';
+$string['missingstudentsmany'] = '{$a} students still need to make an appointment. No list is being displayed due to size.';
+$string['mode'] = 'Mode';
+$string['modeintro'] = 'Students can register';
+$string['modeappointments'] = 'appointment(s)';
+$string['modeoneonly'] = 'in this scheduler';
+$string['modeoneatatime'] = 'at a time';
+$string['monday'] = 'Monday';
+$string['multiple'] = '(multiple)';
+$string['myappointments'] = 'My appointments';
+$string['myself'] = 'Myself';
+$string['name'] = 'Scheduler name';
+$string['needteachers'] = 'Slots cannot be added as this course has no teachers';
+$string['negativerange'] = 'Range is negative. This can\'t be.';
+$string['never'] = 'Never';
+$string['nfiles'] = '{$a} files';
+$string['noappointments'] = 'No appointments';
+$string['noexistingstudents'] = 'No students available for scheduling';
+$string['nogroups'] = 'No group available for scheduling.';
+$string['noresults'] = 'No results. ';
+$string['noschedulers'] = 'There are no schedulers';
+$string['noslots'] = 'There are no appointment slots available.';
+$string['noslotsavailable'] = 'No slots are available for booking at this time.';
+$string['noslotsopennow'] = 'No slots are open for booking right now.';
+$string['nostudents'] = 'No students scheduled';
+$string['nostudenttobook'] = 'No student to book';
+$string['note'] = 'Grade';
+$string['noteacherforslot'] = 'No teacher for the slots';
+$string['noteachershere'] = 'No teacher available';
+$string['notenoughplaces'] = 'Sorry, there are not enough free appointments in this slot.';
+$string['notesrequired'] = 'You must enter text into this field before booking the slot.';
+$string['notifications'] = 'Notifications';
+$string['notseen'] = 'Not seen';
+$string['now'] = 'Now';
+$string['occurrences'] = 'Occurrences';
+$string['odsformat'] = 'ODS';
+$string['on'] = 'on';
+$string['onelineperappointment'] = 'One line per appointment';
+$string['onelineperslot'] = 'One line per slot';
+$string['oneslotadded'] = '1 slot added';
+$string['oneslotdeleted'] = '1 slot deleted';
+$string['onthemorningofappointment'] = 'On the morning of the appointment';
+$string['options'] = 'Options';
+$string['otherstudents'] = 'Other participants';
+$string['outlineappointments'] = '{$a->attended} appointments attended, {$a->upcoming} upcoming. ';
+$string['outlinegrade'] = 'Grade: {$a}.';
+$string['overall'] = 'Overall';
+$string['overlappings'] = 'Some other slots are overlapping';
+$string['pageperteacher'] = 'One page for each {$a}';
+$string['pagination'] = 'Pagination';
+$string['pagination_help'] = 'Choose whether the export should contain a separate page for each teacher.
+   In Excel and in ODS file format, these pages correspond to tabs (worksheets) in the workbook.';
+$string['pdfformat'] = 'PDF';
+$string['pdforientation'] = 'PDF page orientation';
+$string['portrait'] = 'Portrait';
+$string['preview'] = 'Preview';
+$string['previewlimited'] = '(Preview is limited to {$a} rows.)';
+$string['purgeunusedslots'] = 'Purge unused slots in the past';
+$string['recipients'] = 'Recipients';
+$string['registeredlbl'] = 'Student appointed';
+$string['reminder'] = 'Reminder';
+$string['requireupload'] = 'File upload required';
+$string['resetslots'] = 'Delete scheduler slots';
+$string['resetappointments'] = 'Delete appointments and grades';
+$string['return'] = 'Back to course';
+$string['revoke'] = 'Revoke the appointment';
+$string['saturday'] = 'Saturday';
+$string['save'] = 'Save';
+$string['savechoice'] = 'Save my choice';
+$string['saveseen'] = 'Save seen';
+$string['schedule'] = 'Schedule';
+$string['scheduleappointment'] = 'Schedule appointment for {$a}';
+$string['schedulecancelled'] = '{$a} : Your appointment cancelled or moved';
+$string['schedulegroups'] = 'Schedule by group';
+$string['scheduleinnew'] = 'Schedule in a new slot';
+$string['scheduleinslot'] = 'Schedule in slot';
+$string['scheduler'] = 'Scheduler';
+$string['schedulestudents'] = 'Schedule by student';
+$string['scopemenu'] = 'Show slots in: {$a}';
+$string['scopemenuself'] = 'Show my slots in: {$a}';
+$string['seen'] = 'Seen';
+$string['selectedtoomany'] = 'You have selected too many slots. You can select no more than {$a}.';
+$string['sendmessage'] = 'Send message';
+$string['sendinvitation'] = 'Send invitation';
+$string['sendreminder'] = 'Send reminder';
+$string['sendreminders'] = 'Send e-mail reminders for upcoming appointments';
+$string['sepcolon'] = 'Colon';
+$string['sepcomma'] = 'Comma';
+$string['sepsemicolon'] = 'Semicolon';
+$string['septab'] = 'Tab';
+$string['showemailplain'] = 'Show e-mail addresses in plain text';
+$string['showemailplain_desc'] = 'In the teacher\'s view of the scheduler, show the e-mail addresses of students needing an appointment in plain text, in addition to mailto: links.';
+$string['showparticipants'] = 'Show participants';
+$string['slot_is_just_in_use'] = 'Sorry, the appointment has just been chosen by another student! Please try again.';
+$string['slotdatetime'] = '{$a->shortdatetime} for {$a->duration} minutes';
+$string['slotdatetimelong'] = '{$a->date}, {$a->starttime} &ndash; {$a->endtime}';
+$string['slotdatetimelabel'] = 'Date and time';
+$string['slotdescription'] = '{$a->status} on {$a->startdate} from {$a->starttime} to {$a->endtime} at {$a->location} with {$a->facilitator}.';
+$string['slot'] = 'Slot';
+$string['slots'] = 'Slots';
+$string['slotsadded'] = '{$a} slots have been added';
+$string['slotsdeleted'] = '{$a} slots have been deleted';
+$string['slottype'] = 'Slot type';
+$string['slotupdated'] = '1 slot updated';
+$string['slotwarning'] = '<strong>Warning:</strong> Moving this slot to the selected time conflicts with the slot(s) listed below. Tick "Ignore scheduling conflicts" if you want to move the slot nevertheless.';
+$string['staffbreakdown'] = 'By {$a}';
+$string['staffrolename'] = 'Role name of the teacher';
+$string['start'] = 'Start';
+$string['startpast'] = 'You can\'t start an empty appointment slot in the past';
+$string['statistics'] = 'Statistics';
+$string['student'] = 'Student';
+$string['studentbreakdown'] = 'By student';
+$string['studentcomments'] = 'Student\'s message';
+$string['studentdetails'] = 'Student details';
+$string['studentfiles'] = 'Uploaded files';
+$string['studentmultiselect'] = 'Each student can be selected only once in this slot';
+$string['studentnote'] = 'Message by student';
+$string['students'] = 'Students';
+$string['studentprovided'] = 'Student provided: {$a}';
+$string['sunday'] = 'Sunday';
+$string['tab-thisappointment'] = 'This appointment';
+$string['tab-otherappointments'] = 'All appointments of this student';
+$string['tab-otherstudents'] = 'Students in this slot';
+$string['teacher'] = 'Teacher';
+$string['teachernote'] = 'Confidential notes (visible to teacher only)';
+$string['teachersmenu'] = 'Show slots for: {$a}';
+$string['thisscheduler'] = 'this scheduler';
+$string['thiscourse'] = 'this course';
+$string['thissite'] = 'the entire site';
+$string['thursday'] = 'Thursday';
+$string['timefrom'] = 'From:';
+$string['timerange'] = 'Time range';
+$string['timeto'] = 'To:';
+$string['totalgrade'] = 'Total grade';
+$string['tuesday'] = 'Tuesday';
+$string['unattended'] = 'Unattended';
+$string['unlimited'] = 'Unlimited';
+$string['unregisteredlbl'] = 'Unappointed students';
+$string['upcomingslots'] = 'Upcoming slots';
+$string['updategrades'] = 'Update grades';
+$string['updatesingleslot'] = '';
+$string['uploadrequired'] = 'You must upload files here before booking the slot.';
+$string['uploadstudentfiles'] = 'Upload files';
+$string['uploadmaxfiles'] = 'Maximum number of uploaded files';
+$string['uploadmaxfiles_help'] = 'The maximum number of files that a student can upload in the booking form. File upload is optional unless the "File upload required" box is ticked. If set to 0, students will not see a file upload box.';
+$string['uploadmaxsize'] = 'Maximum file size';
+$string['uploadmaxsize_help'] = 'Maximum file size for student uploads. This limit applies per file.';
+$string['uploadmaxfilesglobal'] = 'Maximum number of uploaded files';
+$string['uploadmaxfilesglobal_desc'] = 'The maximum number of files that a student can upload in a booking form. This can be reduced further at the level of individual schedulers.';
+$string['usebookingform'] = 'Use booking form';
+$string['usebookingform_help'] = 'If enabled, student see a separate booking screen before they can book a slot. The booking screen may require them to enter data, upload files, or solve a captcha; see options below.';
+$string['usebookingform_link'] = 'mod/scheduler/bookingform';
+$string['usecaptcha'] = 'Use CAPTCHA for new bookings';
+$string['usecaptcha_help'] = 'If enabled, students will need to solve a CAPTCHA security question before making a new booking.
+Use this setting if you suspect that students use automated programs to snap up available slots.
+<p>No captcha will be displayed if the student edits an existing booking.</p>';
+$string['usenotes'] = 'Use notes for appointments';
+$string['usenotesnone'] = 'none';
+$string['usenotesstudent'] = 'Appointment note, visible to teacher and student';
+$string['usenotesteacher'] = 'Confidential note, visible to teachers only';
+$string['usenotesboth'] = 'Both types of notes';
+$string['usestudentnotes'] = 'Let students enter a message';
+$string['usestudentnotes_help'] = 'If enabled, the booking screen will contain a text box in which students can enter a message. Use the "booking instructions" above to instruct students what information they should supply.';
+$string['viewbooking'] = 'See details';
+$string['wednesday'] = 'Wednesday';
+$string['welcomebackstudent'] = 'You can book additional slots by clicking on the corresponding "Book slot" button below.';
+$string['welcomenewstudent'] = 'The table below shows all available slots for an appointment. Make your choice by clicking on the corresponding "Book slot" button. If you need to make a change later you can revisit this page.';
+$string['welcomenewteacher'] = 'Please click on the button below to add appointment slots.';
+$string['what'] = 'What?';
+$string['whathappened'] = 'What happened?';
+$string['whatresulted'] = 'What resulted?';
+$string['when'] = 'When?';
+$string['where'] = 'Where?';
+$string['who'] = 'With whom?';
+$string['whosthere'] = 'Who\'s there ?';
+$string['xdaysbefore'] = '{$a} days before slot';
+$string['xweeksbefore'] = '{$a} weeks before slot';
+$string['yesallgroups'] = 'Yes, for all groups';
+$string['yesingrouping'] = 'Yes, in grouping {$a}';
+$string['yesoptional'] = 'Yes, optional for student';
+$string['yesrequired'] = 'Yes, student must enter a message';
+$string['yourappointmentnote'] = 'Comments for your eyes';
+$string['yourslotnotes'] = 'Comments on the meeting';
+$string['yourstudentnote'] = 'Your message';
+$string['yourtotalgrade'] = 'Your total grade in this activity is <strong>{$a}</strong>.';
+
+
+/* ***********  Help strings from here on ************ */
+
+$string['forcewhenoverlap_help'] = '
+<h3>Forcing slot creation when slots overlap</h3>
+<p>This setting determines how new slots will be handled if they overlap with other, already existing slots.</p>
+<p>If enabled, the overlapping existing slot will be deleted and the new slot created.</p>
+<p>If disabled, the overlapping existing slot will be kept and a new slot will <em>not</em> be created.</p>
+';
+$string['forcewhenoverlap_link'] = 'mod/scheduler/conflict';
+
+$string['appointmentmode'] = 'Setting the appointment mode';
+$string['appointmentmode_help'] = '<p>You may choose here some variants in the way appointments can be taken. </p>
+<p><ul>
+<li><strong>"<emph>n</emph> appointments in this scheduler":</strong> The student can only book a fixed number of appointments in this activity. Even if the teacher marks them as "seen", they will not be allowed to book further meetings. The only way to reset ability of a student to book is to delete the old "seen" records.</li>
+<li><strong>"<emph>n</emph> appointments at a time":</strong> The student can book a fixed number of appointments. Once the meeting is over and the teacher has marked the student as "seen", the student can book further appointments. However the student is limited to <emph>n</emph> "open" (unseen) slots at any given time.
+</li>
+</ul>
+</p>';
+
+$string['appointagroup_help'] = 'Choose whether you want to make the appointment only for yourself, or for an entire group.';
+
+$string['bookwithteacher_help'] = 'Choose a teacher for the appointment.';
+
+$string['choosingslotstart_help'] = 'Change (or choose) the appointment start time. If this appointment collides with some other slots, you\'ll be asked
+if this slot replaces all conflicting appointments. Note that the new slot parameters will override all previous
+settings.';
+
+$string['exclusivity_help'] = '<p>You can set a limit on the number of students that can apply for a given slot. </p>
+<p>Setting a limit of 1 (default) will mean that the slot is exclusive to a single student.</p>
+<p>Setting a limit of, e.g., 3  will mean that up to three students can book into the slot.</p>
+<p>If disabled, any number of students can book the slot; it will never be considered "full".</p>';
+
+$string['location_help'] = 'Specify the scheduled location of the meeting.';
+
+$string['notifications_help'] = 'When this option is enabled, teachers and students will receive notifications when appointments are applied for or cancelled.';
+
+$string['staffrolename_help'] = '
+The label for the role who attends students. This is not necessarily a "teacher".';
+
+$string['guardtime_help'] = 'A guard time prevents students from changing their booking shortly before the appointment.
+<p>If the guard time is enabled and set to, for example, 2 hours, then students will be unable to book a slot that starts in less than 2 hours time from now,
+and they will be unable to drop an appointment if it start in less than 2 hours.</p>';
+
+
+/* ***********  E-mail templates from here on ************ */
+
+$string['email_applied_subject'] = '{$a->course_short}: New appointment';
+$string['email_applied_plain'] = 'An appointment has been applied for on {$a->date} at {$a->time},
+by the student {$a->attendee} for the course:
+
+{$a->course_short}: {$a->course}
+
+using the scheduler titled "{$a->module}" on the website: {$a->site}.';
+
+$string['email_applied_html'] = '<p>An appointment has been applied for on {$a->date} at {$a->time},<br/>
+by the student <a href="{$a->attendee_url}">{$a->attendee}</a> for the course:
+
+<p>{$a->course_short}: <a href="{$a->course_url}">{$a->course}</a></p>
+
+<p>using the scheduler titled "<em><a href="{$a->scheduler_url}">{$a->module}</a></em>" on the website: <a href="{$a->site_url}">{$a->site}</a>.</p>';
+
+$string['email_cancelled_subject'] = '{$a->course_short}: Appointment cancelled or moved by a student';
+
+$string['email_cancelled_plain'] = 'Your appointment on  {$a->date} at {$a->time},
+with the student {$a->attendee} for course:
+
+{$a->course_short} : {$a->course}
+
+in the scheduler titled "{$a->module}" on the website : {$a->site}
+
+has been cancelled or moved.';
+
+$string['email_cancelled_html'] = '<p>Your appointment on <strong>{$a->date}</strong> at <strong>{$a->time}</strong>,<br/>
+with the student <strong><a href="{$a->attendee_url}">{$a->attendee}</a></strong> for course :</p>
+
+<p><strong>{$a->course_short} : <a href="{$a->course_url}">{$a->course}</a></strong></p>
+
+<p>in the scheduler titled "<em><a href="{$a->scheduler_url}">{$a->module}</a></em>" on the website : <strong><a href="{$a->site_url}">{$a->site}</a></strong></p>
+
+<p><strong><span class="error">has been cancelled or moved</span></strong>.</p>';
+
+$string['email_reminder_subject'] = '{$a->course_short}: Appointment reminder';
+
+$string['email_reminder_plain'] = 'You have an upcoming appointment
+on {$a->date} from {$a->time} to {$a->endtime}
+with {$a->attendant}.
+
+Location: {$a->location}';
+
+$string['email_reminder_html'] = '<p>You have an upcoming appointment on <strong>{$a->date}</strong>
+from <strong>{$a->time}</strong> to <strong>{$a->endtime}</strong><br/>
+with <strong><a href="{$a->attendant_url}">{$a->attendant}</a></strong>.</p>
+
+<p>Location: <strong>{$a->location}</strong></p>';
+
+$string['email_teachercancelled_subject'] = '{$a->course_short}: Appointment cancelled by the teacher';
+
+$string['email_teachercancelled_plain'] = 'Your appointment on {$a->date} at {$a->time},
+with the {$a->staffrole} {$a->attendant} for course:
+
+{$a->course_short}: {$a->course}
+
+in the scheduler titled "{$a->module}" on the website: {$a->site}
+
+has been cancelled. Please apply for a new slot.';
+
+$string['email_teachercancelled_html'] = '<p>Your appointment on <strong>{$a->date}</strong> at <strong>{$a->time} </strong>,<br/>
+with the {$a->staffrole} <strong><a href="{$a->attendant_url}">{$a->attendant}</a></strong> for course:</p>
+
+<p><strong>{$a->course_short}: <a href="{$a->course_url}">{$a->course}</a></strong></p>
+
+<p>in the scheduler "<em><a href="{$a->scheduler_url}">{$a->module}</a></em>" on the website: <strong><a href="{$a->site_url}">{$a->site}</a></strong></p>
+
+<p><strong><span class="error">has been cancelled</span></strong>. Please apply for a new slot.</p>';
+
+$string['email_invite_subject'] = 'Invitation: {$a->module}';
+$string['email_invite_html'] = '<p>Please choose a time slot for an appointment at:</p> <p>{$a->scheduler_url}</p>';
+
+$string['email_invitereminder_subject'] = 'Reminder: {$a->module}';
+$string['email_invitereminder_html'] = '<p>This is just a reminder that you have not yet set up your appointment. Please choose a time slot as soon as possible at:</p><p>{$a->scheduler_url}</p>';
diff --git a/mod/scheduler/lib.php b/mod/scheduler/lib.php
new file mode 100644
index 0000000..735d380
--- /dev/null
+++ b/mod/scheduler/lib.php
@@ -0,0 +1,714 @@
+<?PHP
+
+/**
+ * Library (public API) of the scheduler module
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+// Library of functions and constants for module Scheduler.
+
+require_once($CFG->dirroot.'/mod/scheduler/locallib.php');
+require_once($CFG->dirroot.'/mod/scheduler/mailtemplatelib.php');
+require_once($CFG->dirroot.'/mod/scheduler/renderer.php');
+require_once($CFG->dirroot.'/mod/scheduler/renderable.php');
+
+define('SCHEDULER_TIMEUNKNOWN', 0);  // This is used for appointments for which no time is entered.
+define('SCHEDULER_SELF', 0); // Used for setting conflict search scope.
+define('SCHEDULER_OTHERS', 1); // Used for setting conflict search scope.
+define('SCHEDULER_ALL', 2); // Used for setting conflict search scope.
+
+define ('SCHEDULER_MEAN_GRADE', 0); // Used for grading strategy.
+define ('SCHEDULER_MAX_GRADE', 1);  // Used for grading strategy.
+
+/**
+ * Given an object containing all the necessary data,
+ * will create a new instance and return the id number
+ * of the new instance.
+ *
+ * @param stdClass $data the current instance
+ * @param moodleform $mform the form that the user filled
+ * @return int the new instance id
+ * @uses $DB
+ */
+function scheduler_add_instance($data, $mform = null) {
+    global $DB;
+
+    $cmid = $data->coursemodule;
+
+    $data->timemodified = time();
+    $data->scale = isset($data->grade) ? $data->grade : 0;
+
+    $data->id = $DB->insert_record('scheduler', $data);
+
+    $DB->set_field('course_modules', 'instance', $data->id, array('id' => $cmid));
+    $context = context_module::instance($cmid);
+
+    if ($mform) {
+        $mform->save_mod_data($data, $context);
+    }
+
+    scheduler_grade_item_update($data);
+
+    return $data->id;
+}
+
+/**
+ * Given an object containing all the necessary data,
+ * (defined by the form in mod.html) this function
+ * will update an existing instance with new data.
+ *
+ * @param object $scheduler the current instance
+ * @param moodleform $mform the form that the user filled
+ * @return object the updated instance
+ * @uses $DB
+ */
+function scheduler_update_instance($data, $mform) {
+    global $DB;
+
+    $data->timemodified = time();
+    $data->id = $data->instance;
+
+    $data->scale = $data->grade;
+
+    $DB->update_record('scheduler', $data);
+
+    $context = context_module::instance($data->coursemodule);
+    $mform->save_mod_data($data, $context);
+
+    // Update grade item and grades.
+    scheduler_update_grades($data);
+
+    return true;
+}
+
+
+/**
+ * Given an ID of an instance of this module,
+ * this function will permanently delete the instance
+ * and any data that depends on it.
+ *
+ * @param int $id the instance to be deleted
+ * @return bool true if success, false otherwise
+ * @uses $DB
+ */
+function scheduler_delete_instance($id) {
+    global $DB;
+
+    if (! $DB->record_exists('scheduler', array('id' => $id))) {
+        return false;
+    }
+
+    $scheduler = scheduler_instance::load_by_id($id);
+    $scheduler->delete();
+
+    // Clean up any possibly remaining event records.
+    $params = array('modulename' => 'scheduler', 'instance' => $id);
+    $DB->delete_records('event', $params);
+
+    return true;
+}
+
+/**
+ * Return a small object with summary information about what a
+ * user has done with a given particular instance of this module
+ * Used for user activity reports.
+ *
+ * $return->time = the time they did it
+ * $return->info = a short text description
+ * @param object $course the course instance
+ * @param object $user the concerned user instance
+ * @param object $mod the current course module instance
+ * @param object $scheduler the activity module behind the course module instance
+ * @return object an information object as defined above
+ */
+function scheduler_user_outline($course, $user, $mod, $scheduler) {
+
+    $scheduler = scheduler_instance::load_by_coursemodule_id($mod->id);
+    $upcoming = count($scheduler->get_upcoming_slots_for_student($user->id));
+    $attended = count($scheduler->get_attended_slots_for_student($user->id));
+
+    $text = '';
+
+    if ($attended + $upcoming > 0) {
+        $a = array('attended' => $attended, 'upcoming' => $upcoming);
+        $text .= get_string('outlineappointments', 'scheduler', $a);
+    }
+
+    if ($scheduler->uses_grades()) {
+        $grade = $scheduler->get_gradebook_info($user->id);
+        if ($grade) {
+            $text .= get_string('outlinegrade', 'scheduler', $grade->str_long_grade);
+        }
+    }
+
+    $return = new stdClass();
+    $return->info = $text;
+    return $return;
+}
+
+/**
+ * Prints a detailed representation of what a user has done with
+ * a given particular instance of this module, for user activity reports.
+ *
+ * @param object $course the course instance
+ * @param object $user the concerned user instance
+ * @param object $mod the current course module instance
+ * @param object $scheduler the activity module behind the course module instance
+ */
+function scheduler_user_complete($course, $user, $mod, $scheduler) {
+
+    global $PAGE;
+
+    $scheduler = scheduler_instance::load_by_coursemodule_id($mod->id);
+    $output = $PAGE->get_renderer('mod_scheduler', null, RENDERER_TARGET_GENERAL);
+
+    $appointments = $scheduler->get_appointments_for_student($user->id);
+
+    if (count($appointments) > 0) {
+        $table = new scheduler_slot_table($scheduler);
+        $table->showattended = true;
+        foreach ($appointments as $app) {
+            $table->add_slot($app->get_slot(), $app, null, false);
+        }
+
+        echo $output->render($table);
+    } else {
+        echo get_string('noappointments', 'scheduler');
+    }
+
+    if ($scheduler->uses_grades()) {
+        $grade = $scheduler->get_gradebook_info($user->id);
+        if ($grade) {
+            $info = new scheduler_totalgrade_info($scheduler, $grade);
+            echo $output->render($info);
+        }
+    }
+
+}
+
+/**
+ * Given a course and a time, this module should find recent activity
+ * that has occurred in scheduler activities and print it out.
+ * Return true if there was output, or false is there was none.
+ *
+ * @param object $course the course instance
+ * @param bool $isteacher true tells a teacher uses the function
+ * @param int $timestart a time start timestamp
+ * @return bool true if anything was printed, otherwise false
+ */
+function scheduler_print_recent_activity($course, $isteacher, $timestart) {
+
+    return false;
+}
+
+
+/**
+ * This function returns whether a scale is being used by a scheduler.
+ *
+ * @param int $cmid ID of an instance of this module
+ * @param int $casleid the id of the scale in question
+ * @return mixed
+ * @uses $DB
+ **/
+function scheduler_scale_used($cmid, $scaleid) {
+    global $DB;
+
+    $return = false;
+
+    // Note: scales are assigned using negative index in the grade field of the appointment (see mod/assignement/lib.php).
+    $rec = $DB->get_record('scheduler', array('id' => $cmid, 'scale' => -$scaleid));
+
+    if (!empty($rec) && !empty($scaleid)) {
+        $return = true;
+    }
+
+    return $return;
+}
+
+
+/**
+ * Checks if scale is being used by any instance of scheduler
+ *
+ * @param $scaleid int the id of the scale in question
+ * @return bool True if the scale is used by any scheduler
+ * @uses $DB
+ */
+function scheduler_scale_used_anywhere($scaleid) {
+    global $DB;
+
+    if ($scaleid and $DB->record_exists('scheduler', array('scale' => -$scaleid))) {
+        return true;
+    } else {
+        return false;
+    }
+}
+
+
+/*
+ * Course resetting API
+ *
+ */
+
+/**
+ * Called by course/reset.php
+ *
+ * @param $mform form passed by reference
+ * @uses $COURSE
+ * @uses $DB
+ */
+function scheduler_reset_course_form_definition(&$mform) {
+    global $COURSE, $DB;
+
+    $mform->addElement('header', 'schedulerheader', get_string('modulenameplural', 'scheduler'));
+
+    if ($DB->record_exists('scheduler', array('course' => $COURSE->id))) {
+
+        $mform->addElement('checkbox', 'reset_scheduler_slots', get_string('resetslots', 'scheduler'));
+        $mform->addElement('checkbox', 'reset_scheduler_appointments', get_string('resetappointments', 'scheduler'));
+        $mform->disabledIf('reset_scheduler_appointments', 'reset_scheduler_slots', 'checked');
+    }
+}
+
+/**
+ * Default values for the reset form
+ *
+ * @param stdClass $course the course in which the reset takes place
+ */
+function scheduler_reset_course_form_defaults($course) {
+    return array('reset_scheduler_slots' => 1, 'reset_scheduler_appointments' => 1);
+}
+
+
+/**
+ * This function is used by the remove_course_userdata function in moodlelib.
+ * If this function exists, remove_course_userdata will execute it.
+ * This function will remove all slots and appointments from the specified scheduler.
+ *
+ * @param object $data the reset options
+ * @return void
+ */
+function scheduler_reset_userdata($data) {
+    global $CFG, $DB;
+
+    $status = array();
+    $componentstr = get_string('modulenameplural', 'scheduler');
+
+    $sqlfromslots = 'FROM {scheduler_slots} WHERE schedulerid IN '.
+        '(SELECT sc.id FROM {scheduler} sc '.
+        ' WHERE sc.course = :course)';
+
+    $params = array('course' => $data->courseid);
+
+    $strreset = get_string('reset');
+
+    if (!empty($data->reset_scheduler_appointments) || !empty($data->reset_scheduler_slots)) {
+
+        $slots = $DB->get_recordset_sql('SELECT * '.$sqlfromslots, $params);
+        $success = true;
+        foreach ($slots as $slot) {
+            // Delete calendar events.
+            $success = $success && scheduler_delete_calendar_events($slot);
+
+            // Delete appointments.
+            $success = $success && $DB->delete_records('scheduler_appointment', array('slotid' => $slot->id));
+        }
+        $slots->close();
+
+        // Reset gradebook.
+        $schedulers = $DB->get_records('scheduler', $params);
+        foreach ($schedulers as $scheduler) {
+            scheduler_grade_item_update($scheduler, 'reset');
+        }
+
+        $status[] = array(
+                        'component' => $componentstr,
+                        'item' => get_string('resetappointments', 'scheduler'),
+                        'error' => !$success
+                    );
+    }
+    if (!empty($data->reset_scheduler_slots)) {
+        if ($DB->execute('DELETE '.$sqlfromslots, $params)) {
+            $status[] = array('component' => $componentstr, 'item' => get_string('resetslots', 'scheduler'), 'error' => false);
+        }
+    }
+    return $status;
+}
+
+/**
+ * Determine whether a certain feature is supported by Scheduler.
+ *
+ * @param string $feature FEATURE_xx constant for requested feature
+ * @return mixed True if module supports feature, null if doesn't know
+ */
+function scheduler_supports($feature) {
+    switch($feature) {
+        case FEATURE_GROUPS:                  return true;
+        case FEATURE_GROUPINGS:               return true;
+        case FEATURE_GROUPMEMBERSONLY:        return true;
+        case FEATURE_MOD_INTRO:               return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return false;
+        case FEATURE_GRADE_HAS_GRADE:         return true;
+        case FEATURE_GRADE_OUTCOMES:          return false;
+        case FEATURE_BACKUP_MOODLE2:          return true;
+
+        default: return null;
+    }
+}
+
+/* Gradebook API */
+/*
+ * add xxx_update_grades() function into mod/xxx/lib.php
+ * add xxx_grade_item_update() function into mod/xxx/lib.php
+ * patch xxx_update_instance(), xxx_add_instance() and xxx_delete_instance() to call xxx_grade_item_update()
+ * patch all places of code that change grade values to call xxx_update_grades()
+ * patch code that displays grades to students to use final grades from the gradebook
+ */
+
+/**
+ * Update activity grades
+ *
+ * @param object $schedulerrecord
+ * @param int $userid specific user only, 0 means all
+ * @param bool $nullifnone not used
+ * @uses $CFG
+ * @uses $DB
+ */
+function scheduler_update_grades($schedulerrecord, $userid=0, $nullifnone=true) {
+    global $CFG, $DB;
+    require_once($CFG->libdir.'/gradelib.php');
+
+    $scheduler = scheduler_instance::load_by_id($schedulerrecord->id);
+
+    if ($scheduler->scale == 0) {
+        scheduler_grade_item_update($schedulerrecord);
+
+    } else if ($grades = $scheduler->get_user_grades($userid)) {
+        foreach ($grades as $k => $v) {
+            if ($v->rawgrade == -1) {
+                $grades[$k]->rawgrade = null;
+            }
+        }
+        scheduler_grade_item_update($schedulerrecord, $grades);
+
+    } else {
+        scheduler_grade_item_update($schedulerrecord);
+    }
+}
+
+
+/**
+ * Create grade item for given scheduler
+ *
+ * @param object $scheduler object
+ * @param mixed $grades optional array/object of grade(s); 'reset' means reset grades in gradebook
+ * @return int 0 if ok, error code otherwise
+ */
+function scheduler_grade_item_update($scheduler, $grades=null) {
+    global $CFG, $DB;
+    require_once($CFG->libdir.'/gradelib.php');
+
+    if (!isset($scheduler->courseid)) {
+        $scheduler->courseid = $scheduler->course;
+    }
+    $moduleid = $DB->get_field('modules', 'id', array('name' => 'scheduler'));
+    $cmid = $DB->get_field('course_modules', 'id', array('module' => $moduleid, 'instance' => $scheduler->id));
+
+    if ($scheduler->scale == 0) {
+        // Delete any grade item.
+        scheduler_grade_item_delete($scheduler);
+        return 0;
+    } else {
+        $params = array('itemname' => $scheduler->name, 'idnumber' => $cmid);
+
+        if ($scheduler->scale > 0) {
+            $params['gradetype'] = GRADE_TYPE_VALUE;
+            $params['grademax']  = $scheduler->scale;
+            $params['grademin']  = 0;
+
+        } else if ($scheduler->scale < 0) {
+            $params['gradetype'] = GRADE_TYPE_SCALE;
+            $params['scaleid']   = -$scheduler->scale;
+
+        } else {
+            $params['gradetype'] = GRADE_TYPE_TEXT; // Allow text comments only.
+        }
+
+        if ($grades === 'reset') {
+            $params['reset'] = true;
+            $grades = null;
+        }
+
+        return grade_update('mod/scheduler', $scheduler->courseid, 'mod', 'scheduler', $scheduler->id, 0, $grades, $params);
+    }
+}
+
+
+
+/**
+ * Update all grades in gradebook.
+ */
+function scheduler_upgrade_grades() {
+    global $DB;
+
+    $sql = "SELECT COUNT('x')
+        FROM {scheduler} s, {course_modules} cm, {modules} m
+        WHERE m.name='scheduler' AND m.id=cm.module AND cm.instance=s.id";
+    $count = $DB->count_records_sql($sql);
+
+    $sql = "SELECT s.*, cm.idnumber AS cmidnumber, s.course AS courseid
+        FROM {scheduler} s, {course_modules} cm, {modules} m
+        WHERE m.name='scheduler' AND m.id=cm.module AND cm.instance=s.id";
+    $rs = $DB->get_recordset_sql($sql);
+    if ($rs->valid()) {
+        $pbar = new progress_bar('schedulerupgradegrades', 500, true);
+        $i = 0;
+        foreach ($rs as $scheduler) {
+            $i++;
+            upgrade_set_timeout(60 * 5); // Set up timeout, may also abort execution.
+            scheduler_update_grades($scheduler);
+            $pbar->update($i, $count, "Updating scheduler grades ($i/$count).");
+        }
+        upgrade_set_timeout(); // Reset to default timeout.
+    }
+    $rs->close();
+}
+
+
+/**
+ * Delete grade item for given scheduler
+ *
+ * @param object $scheduler object
+ * @return object scheduler
+ */
+function scheduler_grade_item_delete($scheduler) {
+    global $CFG;
+    require_once($CFG->libdir.'/gradelib.php');
+
+    if (!isset($scheduler->courseid)) {
+        $scheduler->courseid = $scheduler->course;
+    }
+
+    return grade_update('mod/scheduler', $scheduler->courseid, 'mod', 'scheduler', $scheduler->id, 0, null, array('deleted' => 1));
+}
+
+
+/*
+ * File API
+ */
+
+/**
+ * Lists all browsable file areas
+ *
+ * @package  mod_scheduler
+ * @category files
+ * @param stdClass $course course object
+ * @param stdClass $cm course module object
+ * @param stdClass $context context object
+ * @return array
+ */
+function scheduler_get_file_areas($course, $cm, $context) {
+    return array(
+            'bookinginstructions' => get_string('bookinginstructions', 'scheduler'),
+            'slotnote' => get_string('areaslotnote', 'scheduler'),
+            'appointmentnote' => get_string('areaappointmentnote', 'scheduler'),
+            'teachernote' => get_string('areateachernote', 'scheduler')
+    );
+}
+
+/**
+ * File browsing support for scheduler module.
+ *
+ * @param file_browser $browser
+ * @param array $areas
+ * @param stdClass $course
+ * @param cm_info $cm
+ * @param context $context
+ * @param string $filearea
+ * @param int $itemid
+ * @param string $filepath
+ * @param string $filename
+ * @return file_info_stored file_info_stored instance or null if not found
+ */
+function scheduler_get_file_info($browser, $areas, $course, $cm, $context, $filearea, $itemid, $filepath, $filename) {
+    global $CFG, $DB, $USER;
+
+    // Note: 'intro' area is handled in file_browser automatically.
+
+    if (!has_any_capability(array('mod/scheduler:appoint', 'mod/scheduler:attend'), $context)) {
+        return null;
+    }
+
+    require_once(dirname(__FILE__).'/locallib.php');
+
+    $validareas = array_keys(scheduler_get_file_areas($course, $cm, $context));
+    if (!in_array($filearea, $validareas)) {
+        return null;
+    }
+
+    if (is_null($itemid)) {
+        return new scheduler_file_info($browser, $course, $cm, $context, $areas, $filearea);
+    }
+
+    try {
+        $scheduler = scheduler_instance::load_by_coursemodule_id($cm->id);
+
+        if ($filearea === 'bookinginstructions') {
+            $cansee = true;
+            $canwrite = has_capability('moodle/course:manageactivities', $context);
+            $name = get_string('bookinginstructions', 'scheduler');
+
+        } else if ($filearea === 'slotnote') {
+            $slot = $scheduler->get_slot($itemid);
+
+            $cansee = true;
+            $canwrite = $USER->id == $slot->teacherid
+                        || has_capability('mod/scheduler:manageallappointments', $context);
+            $name = get_string('slot', 'scheduler'). ' '.$itemid;
+
+        } else if ($filearea === 'appointmentnote') {
+            if (!$scheduler->uses_appointmentnotes()) {
+                return null;
+            }
+            list($slot, $app) = $scheduler->get_slot_appointment($itemid);
+            $cansee = $USER->id == $app->studentid || $USER->id == $slot->teacherid
+                        || has_capability('mod/scheduler:manageallappointments', $context);
+            $canwrite = $USER->id == $slot->teacherid
+                        || has_capability('mod/scheduler:manageallappointments', $context);
+            $name = get_string('appointment', 'scheduler'). ' '.$itemid;
+
+        } else if ($filearea === 'teachernote') {
+            if (!$scheduler->uses_teachernotes()) {
+                return null;
+            }
+
+            list($slot, $app) = $scheduler->get_slot_appointment($itemid);
+            $cansee = $USER->id == $slot->teacherid
+                        || has_capability('mod/scheduler:manageallappointments', $context);
+            $canwrite = $cansee;
+            $name = get_string('appointment', 'scheduler'). ' '.$itemid;
+        }
+
+        $fs = get_file_storage();
+        $filepath = is_null($filepath) ? '/' : $filepath;
+        $filename = is_null($filename) ? '.' : $filename;
+        if (!$storedfile = $fs->get_file($context->id, 'mod_scheduler', $filearea, $itemid, $filepath, $filename)) {
+            return null;
+        }
+
+        $urlbase = $CFG->wwwroot.'/pluginfile.php';
+        return new file_info_stored($browser, $context, $storedfile, $urlbase, $name, true, true, $canwrite, false);
+    } catch (Exception $e) {
+        return null;
+    }
+}
+
+/**
+ * Serves the files embedded in various rich text fields, or uploaded by students
+ *
+ * @package  mod_scheduler
+ * @category files
+ * @param stdClass $course course object
+ * @param stdClass $cm course module object
+ * @param stdClsss $context context object
+ * @param string $filearea file area
+ * @param array $args extra arguments
+ * @param bool $forcedownload whether or not force download
+ * @param array $options additional options affecting the file serving
+ * @return bool false if file not found, does not return if found - just send the file
+ */
+function scheduler_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload, array $options=array()) {
+    global $CFG, $DB, $USER;
+
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return false;
+    }
+
+    require_course_login($course, true, $cm);
+    if (!has_any_capability(array('mod/scheduler:appoint', 'mod/scheduler:attend'), $context)) {
+        return false;
+    }
+
+    try {
+        $scheduler = scheduler_instance::load_by_coursemodule_id($cm->id);
+
+        $entryid = (int)array_shift($args);
+        $relativepath = implode('/', $args);
+
+        if ($filearea === 'slotnote') {
+            if (!$scheduler->get_slot($entryid)) {
+                return false;
+            }
+            // No further access control required - everyone can see slots notes.
+
+        } else if ($filearea === 'appointmentnote') {
+            if (!$scheduler->uses_appointmentnotes()) {
+                return false;
+            }
+
+            list($slot, $app) = $scheduler->get_slot_appointment($entryid);
+            if (!$app) {
+                return false;
+            }
+
+            if (!($USER->id == $app->studentid || $USER->id == $slot->teacherid)) {
+                require_capability('mod/scheduler:manageallappointments', $context);
+            }
+
+        } else if ($filearea === 'teachernote') {
+            if (!$scheduler->uses_teachernotes()) {
+                return false;
+            }
+
+            list($slot, $app) = $scheduler->get_slot_appointment($entryid);
+            if (!$app) {
+                return false;
+            }
+
+            if (!($USER->id == $slot->teacherid)) {
+                require_capability('mod/scheduler:manageallappointments', $context);
+            }
+
+        } else if ($filearea === 'bookinginstructions') {
+            $caps = array('moodle/course:manageactivities', 'mod/scheduler:appoint');
+            if (!has_any_capability($caps)) {
+                return false;
+            }
+
+        } else if ($filearea === 'studentfiles') {
+            if (!$scheduler->uses_studentfiles()) {
+                return false;
+            }
+
+            list($slot, $app) = $scheduler->get_slot_appointment($entryid);
+            if (!$app) {
+                return false;
+            }
+
+            if (($USER->id != $slot->teacherid) && ($USER->id != $app->studentid)) {
+                require_capability('mod/scheduler:manageallappointments', $context);
+            }
+
+        } else {
+            // Unknown file area.
+            return false;
+        }
+    } catch (Exception $e) {
+        // Typically, records that are not found in the database.
+        return false;
+    }
+
+    $fullpath = "/$context->id/mod_scheduler/$filearea/$entryid/$relativepath";
+
+    $fs = get_file_storage();
+    if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+        return false;
+    }
+
+    send_stored_file($file, 0, 0, $forcedownload, $options);
+}
+
diff --git a/mod/scheduler/locallib.php b/mod/scheduler/locallib.php
new file mode 100644
index 0000000..9571a29
--- /dev/null
+++ b/mod/scheduler/locallib.php
@@ -0,0 +1,333 @@
+<?php
+
+/**
+ * General library for the scheduler module.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/customlib.php');
+
+require_once(dirname(__FILE__).'/model/scheduler_instance.php');
+require_once(dirname(__FILE__).'/model/scheduler_slot.php');
+require_once(dirname(__FILE__).'/model/scheduler_appointment.php');
+
+
+/* Events related functions */
+
+/**
+ * Will delete calendar events for a given scheduler slot, and not complain if the record does not exist.
+ * The only argument this function requires is the complete database record of a scheduler slot.
+ * @param object $slot the slot instance
+ * @uses $DB
+ * @return bool true if success, false otherwise
+ */
+function scheduler_delete_calendar_events($slot) {
+    global $DB;
+
+    $scheduler = $DB->get_record('scheduler', array('id' => $slot->schedulerid));
+
+    if (!$scheduler) {
+        return false;
+    }
+
+    $teachereventtype = "SSsup:{$slot->id}:{$scheduler->course}";
+    $studenteventtype = "SSstu:{$slot->id}:{$scheduler->course}";
+
+    $teacherdeletionsuccess = $DB->delete_records('event', array('eventtype' => $teachereventtype));
+    $studentdeletionsuccess = $DB->delete_records('event', array('eventtype' => $studenteventtype));
+
+    return ($teacherdeletionsuccess && $studentdeletionsuccess);
+    // This return may not be meaningful if the delete records functions do not return anything meaningful.
+}
+
+
+
+
+/**
+ * Prints a summary of a user in a nice little box.
+ *
+ * @uses $CFG
+ * @uses $USER
+ * @param user $user A {@link $USER} object representing a user
+ * @param course $course A {@link $COURSE} object representing a course
+ * @param bool $messageselect whether to include a checkbox to select the user
+ * @param bool $return whether the HTML fragment is to be returned as a string (otherwise printed)
+ * @return string HTML fragment, if so selected
+ */
+function scheduler_print_user($user, $course, $messageselect=false, $return=false) {
+
+    global $CFG, $USER, $OUTPUT;
+
+    $output = '';
+
+    static $string;
+    static $datestring;
+    static $countries;
+
+    $context = context_course::instance($course->id);
+    if (isset($user->context->id)) {
+        $usercontext = $user->context;
+    } else {
+        $usercontext = context_user::instance($user->id);
+    }
+
+    if (empty($string)) {     // Cache all the strings for the rest of the page.
+
+        $string = new stdClass();
+        $string->email       = get_string('email');
+        $string->lastaccess  = get_string('lastaccess');
+        $string->activity    = get_string('activity');
+        $string->loginas     = get_string('loginas');
+        $string->fullprofile = get_string('fullprofile');
+        $string->role        = get_string('role');
+        $string->name        = get_string('name');
+        $string->never       = get_string('never');
+
+        $datestring = new stdClass();
+        $datestring->day     = get_string('day');
+        $datestring->days    = get_string('days');
+        $datestring->hour    = get_string('hour');
+        $datestring->hours   = get_string('hours');
+        $datestring->min     = get_string('min');
+        $datestring->mins    = get_string('mins');
+        $datestring->sec     = get_string('sec');
+        $datestring->secs    = get_string('secs');
+        $datestring->year    = get_string('year');
+        $datestring->years   = get_string('years');
+
+    }
+
+    // Get the hidden field list.
+    if (has_capability('moodle/course:viewhiddenuserfields', $context)) {
+        $hiddenfields = array();
+    } else {
+        $hiddenfields = array_flip(explode(',', $CFG->hiddenuserfields));
+    }
+
+    $output .= '<table class="userinfobox">';
+    $output .= '<tr>';
+    $output .= '<td class="left side">';
+    $output .= $OUTPUT->user_picture($user, array('size' => 100));
+    $output .= '</td>';
+    $output .= '<td class="content">';
+    $output .= '<div class="username">'.fullname($user, has_capability('moodle/site:viewfullnames', $context)).'</div>';
+    $output .= '<div class="info">';
+    if (!empty($user->role) and ($user->role <> $course->teacher)) {
+        $output .= $string->role .': '. $user->role .'<br />';
+    }
+
+    $extrafields = scheduler_get_user_fields($user, $context);
+    foreach ($extrafields as $field) {
+        $output .= $field->title . ': ' . $field->value . '<br />';
+    }
+
+    if (!isset($hiddenfields['lastaccess'])) {
+        if ($user->lastaccess) {
+            $output .= $string->lastaccess .': '. userdate($user->lastaccess);
+            $output .= '&nbsp; ('. format_time(time() - $user->lastaccess, $datestring) .')';
+        } else {
+            $output .= $string->lastaccess .': '. $string->never;
+        }
+    }
+    $output .= '</div></td><td class="links">';
+    // Link to blogs.
+    if ($CFG->bloglevel > 0) {
+        $output .= '<a href="'.$CFG->wwwroot.'/blog/index.php?userid='.$user->id.'">'.get_string('blogs', 'blog').'</a><br />';
+    }
+    // Link to notes.
+    if (!empty($CFG->enablenotes) and (has_capability('moodle/notes:manage', $context)
+            || has_capability('moodle/notes:view', $context))) {
+        $output .= '<a href="'.$CFG->wwwroot.'/notes/index.php?course=' . $course->id. '&amp;user='.$user->id.'">'.
+                    get_string('notes', 'notes').'</a><br />';
+    }
+
+    if (has_capability('moodle/site:viewreports', $context) or
+            has_capability('moodle/user:viewuseractivitiesreport', $usercontext)) {
+        $output .= '<a href="'. $CFG->wwwroot .'/course/user.php?id='. $course->id .'&amp;user='. $user->id .'">'.
+                    $string->activity .'</a><br />';
+    }
+    $output .= '<a href="'. $CFG->wwwroot .'/user/profile.php?id='. $user->id .'">'. $string->fullprofile .'...</a>';
+
+    if (!empty($messageselect)) {
+        $output .= '<br /><input type="checkbox" name="user'.$user->id.'" /> ';
+    }
+
+    $output .= '</td></tr></table>';
+
+    if ($return) {
+        return $output;
+    } else {
+        echo $output;
+    }
+}
+
+
+/**
+ * File browsing support class
+ *
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_file_info extends file_info {
+    /** @var stdClass Course object */
+    protected $course;
+    /** @var stdClass Course module object */
+    protected $cm;
+    /** @var array Available file areas */
+    protected $areas;
+    /** @var string File area to browse */
+    protected $filearea;
+    /** @var scheduler_instance The scheduler that this file area refers to */
+    protected $scheduler;
+
+    /**
+     * Constructor
+     *
+     * @param file_browser $browser file_browser instance
+     * @param stdClass $course course object
+     * @param stdClass $cm course module object
+     * @param stdClass $context module context
+     * @param array $areas available file areas
+     * @param string $filearea file area to browse
+     */
+    public function __construct($browser, $course, $cm, $context, $areas, $filearea) {
+        parent::__construct($browser, $context);
+        $this->course   = $course;
+        $this->cm       = $cm;
+        $this->areas    = $areas;
+        $this->filearea = $filearea;
+        $this->scheduler = scheduler_instance::load_by_coursemodule_id($cm->id);
+    }
+
+    /**
+     * Returns list of standard virtual file/directory identification.
+     * The difference from stored_file parameters is that null values
+     * are allowed in all fields
+     * @return array with keys contextid, filearea, itemid, filepath and filename
+     */
+    public function get_params() {
+        return array('contextid' => $this->context->id,
+                     'component' => 'mod_scheduler',
+                     'filearea'  => $this->filearea,
+                     'itemid'    => null,
+                     'filepath'  => null,
+                     'filename'  => null);
+    }
+
+    /**
+     * Returns localised visible name.
+     * @return string
+     */
+    public function get_visible_name() {
+        return $this->areas[$this->filearea];
+    }
+
+    /**
+     * Can I add new files or directories?
+     * @return bool
+     */
+    public function is_writable() {
+        return false;
+    }
+
+    /**
+     * Is directory?
+     * @return bool
+     */
+    public function is_directory() {
+        return true;
+    }
+
+    /**
+     * Returns list of children.
+     * @return array of file_info instances
+     */
+    public function get_children() {
+        return $this->get_filtered_children('*', false, true);
+    }
+
+    /**
+     * Helper function to return files matching extensions or their count
+     *
+     * @param string|array $extensions either '*' or array of lowercase extensions, i.e. array('.gif','.jpg')
+     * @param bool|int $countonly if false returns the children, if an int returns just the
+     *    count of children but stops counting when $countonly number of children is reached
+     * @param bool $returnemptyfolders if true returns items that don't have matching files inside
+     * @return array|int array of file_info instances or the count
+     * @uses $DB
+     */
+    private function get_filtered_children($extensions = '*', $countonly = false, $returnemptyfolders = false) {
+        global $DB;
+
+        $params = array('contextid' => $this->context->id,
+                        'component' => 'mod_scheduler',
+                        'filearea' => $this->filearea);
+        $sql = "SELECT DISTINCT f.itemid AS id
+                           FROM {files} f
+                          WHERE f.contextid = :contextid
+                                AND f.component = :component
+                                AND f.filearea = :filearea";
+        if (!$returnemptyfolders) {
+            $sql .= ' AND filename <> :emptyfilename';
+            $params['emptyfilename'] = '.';
+        }
+        list($sql2, $params2) = $this->build_search_files_sql($extensions, 'f');
+        $sql .= ' '.$sql2;
+        $params = array_merge($params, $params2);
+
+        $rs = $DB->get_recordset_sql($sql, $params);
+        $children = array();
+        foreach ($rs as $record) {
+            if ($child = $this->browser->get_file_info($this->context, 'mod_scheduler', $this->filearea, $record->id)) {
+                if ($returnemptyfolders || $child->count_non_empty_children($extensions)) {
+                    $children[] = $child;
+                }
+            }
+            if ($countonly !== false && count($children) >= $countonly) {
+                break;
+            }
+        }
+        $rs->close();
+        if ($countonly !== false) {
+            return count($children);
+        }
+        return $children;
+    }
+
+    /**
+     * Returns list of children which are either files matching the specified extensions
+     * or folders that contain at least one such file.
+     *
+     * @param string|array $extensions either '*' or array of lowercase extensions, i.e. array('.gif','.jpg')
+     * @return array of file_info instances
+     */
+    public function get_non_empty_children($extensions = '*') {
+        return $this->get_filtered_children($extensions, false);
+    }
+
+    /**
+     * Returns the number of children which are either files matching the specified extensions
+     * or folders containing at least one such file.
+     *
+     * @param string|array $extensions for example '*' or array('.gif','.jpg')
+     * @param int $limit stop counting after at least $limit non-empty children are found
+     * @return int
+     */
+    public function count_non_empty_children($extensions = '*', $limit = 1) {
+        return $this->get_filtered_children($extensions, $limit);
+    }
+
+    /**
+     * Returns parent file_info instance
+     *
+     * @return file_info or null for root
+     */
+    public function get_parent() {
+        return $this->browser->get_file_info($this->context);
+    }
+}
diff --git a/mod/scheduler/mailtemplatelib.php b/mod/scheduler/mailtemplatelib.php
new file mode 100644
index 0000000..51400c97
--- /dev/null
+++ b/mod/scheduler/mailtemplatelib.php
@@ -0,0 +1,206 @@
+<?php
+
+/**
+ * Message formatting from templates.
+ *
+ * @package mod_scheduler
+ * @copyright 2016 Henning Bostelmann and others (see README.txt)
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+/**
+ * Message functionality for scheduler module
+ *
+ * @package mod_scheduler
+ * @copyright 2016 Henning Bostelmann and others (see README.txt)
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_messenger {
+    /**
+     * Returns the language to be used in a message to a user
+     *
+     * @param stdClass $user
+     *            the user to whom the message will be sent
+     * @param stdClass $course
+     *            the course from which the message originates
+     * @return string
+     */
+    protected static function get_message_language($user, $course) {
+        if ($course && ! empty ($course->id) and $course->id != SITEID and !empty($course->lang)) {
+            // Course language overrides user language.
+            $return = $course->lang;
+        } else if (!empty($user->lang)) {
+            $return = $user->lang;
+        } else if (isset ($CFG->lang)) {
+            $return = $CFG->lang;
+        } else {
+            $return = 'en';
+        }
+
+        return $return;
+    }
+
+    /**
+     * Gets the content of an e-mail from language strings.
+     *
+     * Looks for the language string email_$template_$format and replaces the parameter values.
+     *
+     * @param string $template the template's identified
+     * @param string $format the mail format ('subject', 'html' or 'plain')
+     * @param array $parameters an array ontaining pairs of parm => data to replace in template
+     * @param string $module module to use language strings from
+     * @param string $lang language to use
+     * @return a fully resolved template where all data has been injected
+     *
+     */
+    public static function compile_mail_template($template, $format, $parameters, $module = 'scheduler', $lang = null) {
+        $params = array ();
+        foreach ($parameters as $key => $value) {
+            $params [strtolower($key)] = $value;
+        }
+        $mailstr = get_string_manager()->get_string("email_{$template}_{$format}", $module, $params, $lang);
+        return $mailstr;
+    }
+
+    /**
+     * Sends a message based on a template.
+     * Several template substitution values are automatically filled by this routine.
+     *
+     * @uses $CFG
+     * @uses $SITE
+     * @param string $modulename
+     *            name of the module that sends the message
+     * @param string $messagename
+     *            name of the message in messages.php
+     * @param int $isnotification
+     *            1 for notifications, 0 for personal messages
+     * @param user $sender
+     *            A {@link $USER} object describing the sender
+     * @param user $recipient
+     *            A {@link $USER} object describing the recipient
+     * @param object $course
+     *            The course that the activity is in. Can be null.
+     * @param string $template
+     *            the mail template name as in language config file (without "_html" part)
+     * @param array $parameters
+     *            a hash containing pairs of parm => data to replace in template
+     * @return bool|int Returns message id if message was sent OK, "false" if there was another sort of error.
+     */
+    public static function send_message_from_template($modulename, $messagename, $isnotification,
+                                                      stdClass $sender, stdClass $recipient, $course,
+                                                      $template, array $parameters) {
+        global $CFG;
+        global $SITE;
+
+        $lang = self::get_message_language($recipient, $course);
+
+        $defaultvars = array (
+                'SITE' => $SITE->fullname,
+                'SITE_SHORT' => $SITE->shortname,
+                'SITE_URL' => $CFG->wwwroot,
+                'SENDER' => fullname ( $sender ),
+                'RECIPIENT' => fullname ( $recipient )
+        );
+
+        if ($course) {
+            $defaultvars['COURSE_SHORT'] = format_string($course->shortname);
+            $defaultvars['COURSE'] = format_string($course->fullname);
+            $defaultvars['COURSE_URL'] = $CFG->wwwroot . '/course/view.php?id=' . $course->id;
+        }
+
+        $vars = array_merge($defaultvars, $parameters);
+
+        $message = new \core\message\message();
+        $message->component = $modulename;
+        $message->name = $messagename;
+        $message->userfrom = $sender;
+        $message->userto = $recipient;
+        $message->subject = self::compile_mail_template($template, 'subject', $vars, $modulename, $lang);
+        $message->fullmessage = self::compile_mail_template($template, 'plain', $vars, $modulename, $lang);
+        $message->fullmessageformat = FORMAT_PLAIN;
+        $message->fullmessagehtml = self::compile_mail_template ( $template, 'html', $vars, $modulename, $lang );
+        $message->notification = '1';
+        $message->courseid = $course->id;
+        $message->contexturl = $defaultvars['COURSE_URL'];
+        $message->contexturlname = $course->fullname;
+
+        $msgid = message_send($message);
+        return $msgid;
+    }
+
+    /**
+     * Construct an array with subtitution rules for mail templates, relating to
+     * a single appointment. Any of the parameters can be null.
+     *
+     * @param scheduler_instance $scheduler The scheduler instance
+     * @param scheduler_slot $slot The slot data as an MVC object, may be null
+     * @param user $teacher A {@link $USER} object describing the attendant (teacher)
+     * @param user $student A {@link $USER} object describing the attendee (student)
+     * @param object $course A course object relating to the ontext of the message
+     * @param object $recipient A {@link $USER} object describing the recipient of the message
+     *                          (used for determining the message language)
+     * @return array A hash with mail template substitutions
+     */
+    public static function get_scheduler_variables(scheduler_instance $scheduler,  $slot,
+                                                   $teacher, $student, $course, $recipient) {
+
+        global $CFG;
+
+        $lang = self::get_message_language($recipient, $course);
+        // Force any string formatting to happen in the target language.
+        $oldlang = force_current_language($lang);
+
+        $tz = core_date::get_user_timezone($recipient);
+
+        $vars = array();
+
+        if ($scheduler) {
+            $vars['MODULE']     = format_string($scheduler->name);
+            $vars['STAFFROLE']  = $scheduler->get_teacher_name();
+            $vars['SCHEDULER_URL'] = $CFG->wwwroot.'/mod/scheduler/view.php?id='.$scheduler->cmid;
+        }
+        if ($slot) {
+            $vars ['DATE']     = userdate($slot->starttime, get_string('strftimedate'), $tz);
+            $vars ['TIME']     = userdate($slot->starttime, get_string('strftimetime'), $tz);
+            $vars ['ENDTIME']  = userdate($slot->endtime, get_string('strftimetime'), $tz);
+            $vars ['LOCATION'] = format_string($slot->appointmentlocation);
+        }
+        if ($teacher) {
+            $vars['ATTENDANT']     = fullname($teacher);
+            $vars['ATTENDANT_URL'] = $CFG->wwwroot.'/user/view.php?id='.$teacher->id.'&course='.$scheduler->course;
+        }
+        if ($student) {
+            $vars['ATTENDEE']     = fullname($student);
+            $vars['ATTENDEE_URL'] = $CFG->wwwroot.'/user/view.php?id='.$student->id.'&course='.$scheduler->course;
+        }
+
+        // Reset language settings.
+        force_current_language($oldlang);
+
+        return $vars;
+
+    }
+
+
+    /**
+     * Send a notification message about a scheduler slot.
+     *
+     * @param scheduler_slot $slot the slot that the notification relates to
+     * @param string $messagename name of message as in db/message.php
+     * @param string $template template name to use (language string up to prefix/postfix)
+     * @param stdClass $sender user record for sender
+     * @param stdClass $recipient  user record for recipient
+     * @param stdClass $teacher user record for teacher
+     * @param stdClass $student user record for student
+     * @param stdClass $course course record
+     */
+    public static function send_slot_notification(scheduler_slot $slot, $messagename, $template,
+                                                  stdClass $sender, stdClass $recipient,
+                                                  stdClass $teacher, stdClass $student, stdClass $course) {
+        $vars = self::get_scheduler_variables($slot->get_scheduler(), $slot, $teacher, $student, $course, $recipient);
+        self::send_message_from_template('mod_scheduler', $messagename, 1, $sender, $recipient, $course, $template, $vars);
+    }
+
+}
\ No newline at end of file
diff --git a/mod/scheduler/message_form.php b/mod/scheduler/message_form.php
new file mode 100644
index 0000000..b6de542
--- /dev/null
+++ b/mod/scheduler/message_form.php
@@ -0,0 +1,96 @@
+<?php
+
+/**
+ * Message form for invitations
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Message form for invitations
+ * (using Moodle formslib)
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_message_form extends moodleform {
+
+    /**
+     * @var scheduler_instance scheduler in whose context the messages are sent
+     */
+    protected $scheduler;
+
+    /**
+     * Create a new messge form
+     *
+     * @param string $action
+     * @param scheduler_instance $scheduler scheduler in whose context the messages are sent
+     * @param object $customdata
+     */
+    public function __construct($action, scheduler_instance $scheduler, $customdata=null) {
+        $this->scheduler = $scheduler;
+        parent::__construct($action, $customdata);
+    }
+
+    protected function definition() {
+
+        $mform = $this->_form;
+
+        // Select users to sent the message to.
+        $checkboxes = array();
+        $recipients = $this->_customdata['recipients'];
+        foreach ($recipients as $recipient) {
+            $inputid = 'recipient['.$recipient->id.']';
+            $label = fullname($recipient);
+            $checkboxes[] = $mform->createElement('checkbox', $inputid, '', $label);
+            $mform->setDefault($inputid, true);
+        }
+        $mform->addGroup($checkboxes, 'recipients', get_string('recipients', 'scheduler'), null, false);
+
+        if (get_config('mod_scheduler', 'showemailplain')) {
+            $maillist = array();
+            foreach ($recipients as $recipient) {
+                $maillist[] = trim($recipient->email);
+            }
+            $maildisplay = html_writer::div(implode(', ', $maillist));
+            $mform->addElement('html', $maildisplay);
+        }
+
+        $mform->addElement('selectyesno', 'copytomyself', get_string('copytomyself', 'scheduler'));
+        $mform->setDefault('copytomyself', true);
+
+        $mform->addElement('text', 'subject', get_string('messagesubject', 'scheduler'), array('size' => '60'));
+        $mform->setType('subject', PARAM_TEXT);
+        $mform->addRule('subject', null, 'required');
+        if (isset($this->_customdata['subject'])) {
+            $mform->setDefault('subject', $this->_customdata['subject']);
+        }
+
+        $bodyedit = $mform->addElement('editor', 'body', get_string('messagebody', 'scheduler'),
+                                       array('rows' => 15, 'columns' => 60), array('collapsed' => true));
+        $mform->setType('body', PARAM_RAW); // Must be PARAM_RAW for rich text editor content.
+        if (isset($this->_customdata['body'])) {
+            $bodyedit->setValue(array('text' => $this->_customdata['body']));
+        }
+
+        $buttonarray = array();
+        $buttonarray[] = $mform->createElement('submit', 'submitbutton', get_string('sendmessage', 'scheduler'));
+        $buttonarray[] = $mform->createElement('cancel');
+        $mform->addGroup($buttonarray, 'buttonar', '', array(' '), false);
+
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        return $errors;
+    }
+
+}
diff --git a/mod/scheduler/mod_form.php b/mod/scheduler/mod_form.php
new file mode 100644
index 0000000..be63d97
--- /dev/null
+++ b/mod/scheduler/mod_form.php
@@ -0,0 +1,214 @@
+<?php
+
+/**
+ * Defines the scheduler module settings form.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/course/moodleform_mod.php');
+
+/**
+ * Scheduler modedit form - overrides moodleform
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_scheduler_mod_form extends moodleform_mod {
+
+    protected $editoroptions;
+
+
+    function definition() {
+
+        global $CFG, $COURSE, $OUTPUT;
+        $mform    =& $this->_form;
+
+        // General introduction.
+        $mform->addElement('header', 'general', get_string('general', 'form'));
+
+        $mform->addElement('text', 'name', get_string('name'), array('size' => '64'));
+        if (!empty($CFG->formatstringstriptags)) {
+            $mform->setType('name', PARAM_TEXT);
+        } else {
+            $mform->setType('name', PARAM_CLEANHTML);
+        }
+        $mform->addRule('name', null, 'required', null, 'client');
+        $mform->addRule('name', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');
+
+        $this->standard_intro_elements(get_string('introduction', 'scheduler'));
+
+        // Scheduler options.
+        $mform->addElement('header', 'optionhdr', get_string('options', 'scheduler'));
+        $mform->setExpanded('optionhdr');
+
+        $mform->addElement('text', 'staffrolename', get_string('staffrolename', 'scheduler'), array('size' => '48'));
+        $mform->setType('staffrolename', PARAM_TEXT);
+        $mform->addRule('staffrolename', get_string('error'), 'maxlength', 255);
+        $mform->addHelpButton('staffrolename', 'staffrolename', 'scheduler');
+
+        $modegroup = array();
+        $modegroup[] = $mform->createElement('static', 'modeintro', '', get_string('modeintro', 'scheduler'));
+
+        $maxbookoptions = array();
+        $maxbookoptions['0'] = get_string('unlimited', 'scheduler');
+        for ($i = 1; $i <= 10; $i++) {
+            $maxbookoptions[(string)$i] = $i;
+        }
+        $modegroup[] = $mform->createElement('select', 'maxbookings', '', $maxbookoptions);
+        $mform->setDefault('maxbookings', 1);
+
+        $modegroup[] = $mform->createElement('static', 'modeappointments', '', get_string('modeappointments', 'scheduler'));
+
+        $modeoptions['oneonly'] = get_string('modeoneonly', 'scheduler');
+        $modeoptions['onetime'] = get_string('modeoneatatime', 'scheduler');
+        $modegroup[] = $mform->createElement('select', 'schedulermode', '', $modeoptions);
+        $mform->setDefault('schedulermode', 'oneonly');
+
+        $mform->addGroup($modegroup, 'modegrp', get_string('mode', 'scheduler'), ' ', false);
+        $mform->addHelpButton('modegrp', 'appointmentmode', 'scheduler');
+
+        if (get_config('mod_scheduler', 'groupscheduling')) {
+            $selopt = array(
+                            -1 => get_string('no'),
+                             0 => get_string('yesallgroups', 'scheduler')
+                           );
+            $groupings = groups_get_all_groupings($COURSE->id);
+            foreach ($groupings as $grouping) {
+                $selopt[$grouping->id] = get_string('yesingrouping', 'scheduler', $grouping->name);
+            }
+            $mform->addElement('select', 'bookingrouping', get_string('groupbookings', 'scheduler'), $selopt);
+            $mform->addHelpButton('bookingrouping', 'groupbookings', 'scheduler');
+            $mform->setDefault('bookingrouping', '-1');
+        }
+
+        $mform->addElement('duration', 'guardtime', get_string('guardtime', 'scheduler'), array('optional' => true));
+        $mform->addHelpButton('guardtime', 'guardtime', 'scheduler');
+
+        $mform->addElement('text', 'defaultslotduration', get_string('defaultslotduration', 'scheduler'), array('size' => '2'));
+        $mform->setType('defaultslotduration', PARAM_INT);
+        $mform->addHelpButton('defaultslotduration', 'defaultslotduration', 'scheduler');
+        $mform->setDefault('defaultslotduration', 15);
+
+        $mform->addElement('selectyesno', 'allownotifications', get_string('notifications', 'scheduler'));
+        $mform->addHelpButton('allownotifications', 'notifications', 'scheduler');
+
+        $noteoptions['0'] = get_string('usenotesnone', 'scheduler');
+        $noteoptions['1'] = get_string('usenotesstudent', 'scheduler');
+        $noteoptions['2'] = get_string('usenotesteacher', 'scheduler');
+        $noteoptions['3'] = get_string('usenotesboth', 'scheduler');
+        $mform->addElement('select', 'usenotes', get_string('usenotes', 'scheduler'), $noteoptions);
+        $mform->setDefault('usenotes', '1');
+
+        // Grade settings.
+        $this->standard_grading_coursemodule_elements();
+
+        $mform->setDefault('grade', 0);
+
+        $gradingstrategy[SCHEDULER_MEAN_GRADE] = get_string('meangrade', 'scheduler');
+        $gradingstrategy[SCHEDULER_MAX_GRADE] = get_string('maxgrade', 'scheduler');
+        $mform->addElement('select', 'gradingstrategy', get_string('gradingstrategy', 'scheduler'), $gradingstrategy);
+        $mform->addHelpButton('gradingstrategy', 'gradingstrategy', 'scheduler');
+        $mform->disabledIf('gradingstrategy', 'grade[modgrade_type]', 'eq', 'none');
+
+        // Booking form and student-supplied data.
+        $mform->addElement('header', 'bookinghdr', get_string('bookingformoptions', 'scheduler'));
+
+        $mform->addElement('selectyesno', 'usebookingform', get_string('usebookingform', 'scheduler'));
+        $mform->addHelpButton('usebookingform', 'usebookingform', 'scheduler');
+
+        $this->editoroptions = array('trusttext' => true, 'maxfiles' => -1, 'maxbytes' => 0,
+                                     'context' => $this->context, 'collapsed' => true);
+        $mform->addElement('editor', 'bookinginstructions_editor', get_string('bookinginstructions', 'scheduler'),
+                array('rows' => 3, 'columns' => 60), $this->editoroptions);
+        $mform->setType('bookinginstructions', PARAM_RAW); // Must be PARAM_RAW for rich text editor content.
+        $mform->disabledIf('bookinginstructions_editor', 'usebookingform', 'eq', '0');
+        $mform->addHelpButton('bookinginstructions_editor', 'bookinginstructions', 'scheduler');
+
+        $studentnoteoptions['0'] = get_string('no');
+        $studentnoteoptions['1'] = get_string('yesoptional', 'scheduler');
+        $studentnoteoptions['2'] = get_string('yesrequired', 'scheduler');
+        $mform->addElement('select', 'usestudentnotes', get_string('usestudentnotes', 'scheduler'), $studentnoteoptions);
+        $mform->setDefault('usestudentnotes', '0');
+        $mform->disabledIf('usestudentnotes', 'usebookingform', 'eq', '0');
+        $mform->addHelpButton('usestudentnotes', 'usestudentnotes', 'scheduler');
+
+        $uploadgroup = array();
+
+        $filechoices = array();
+        for ($i = 0; $i <= get_config('mod_scheduler', 'uploadmaxfiles'); $i++) {
+            $filechoices[$i] = $i;
+        }
+        $uploadgroup[] = $mform->createElement('select', 'uploadmaxfiles', get_string('uploadmaxfiles', 'scheduler'), $filechoices);
+        $mform->setDefault('uploadmaxfiles', 0);
+        $mform->disabledIf('uploadmaxfiles', 'usebookingform', 'eq', '0');
+        $uploadgroup[] = $mform->createElement('advcheckbox', 'requireupload', '', get_string('requireupload', 'scheduler'));
+        $mform->disabledIf('requireupload', 'usebookingform', 'eq', '0');
+
+        $mform->addGroup($uploadgroup, 'uploadgrp', get_string('uploadmaxfiles', 'scheduler'), ' ', false);
+        $mform->addHelpButton('uploadgrp', 'uploadmaxfiles', 'scheduler');
+
+        $sizechoices = get_max_upload_sizes($CFG->maxbytes, $COURSE->maxbytes, 0);
+        $mform->addElement('select', 'uploadmaxsize', get_string('uploadmaxsize', 'scheduler'), $sizechoices);
+        $mform->setDefault('assignsubmission_file_maxsizebytes', $COURSE->maxbytes);
+        $mform->disabledIf('uploadmaxsize', 'usebookingform', 'eq', '0');
+        $mform->disabledIf('uploadmaxsize', 'uploadmaxfiles', 'eq', '0');
+        $mform->addHelpButton('uploadmaxsize', 'uploadmaxsize', 'scheduler');
+
+        if (!empty($CFG->recaptchapublickey) && !empty($CFG->recaptchaprivatekey)) {
+            $mform->addElement('selectyesno', 'usecaptcha', get_string('usecaptcha', 'scheduler'), $studentnoteoptions);
+            $mform->setDefault('usecaptcha', '0');
+            $mform->disabledIf('usecaptcha', 'usebookingform', 'eq', '0');
+            $mform->addHelpButton('usecaptcha', 'usecaptcha', 'scheduler');
+        }
+
+        // Common module settings.
+        $this->standard_coursemodule_elements();
+        $mform->setDefault('groupmode', NOGROUPS);
+
+        $this->add_action_buttons();
+    }
+
+    function data_preprocessing(&$defaultvalues) {
+        parent::data_preprocessing($defaultvalues);
+        if ($this->current->instance) {
+            $newvalues = file_prepare_standard_editor((object)$defaultvalues, 'bookinginstructions',
+                             $this->editoroptions, $this->context,
+                            'mod_scheduler', 'bookinginstructions', 0);
+            $defaultvalues['bookinginstructions_editor'] = $newvalues->bookinginstructions_editor;
+        }
+        if (array_key_exists('scale', $defaultvalues)) {
+            $dgrade = $defaultvalues['scale'];
+            $defaultvalues['grade'] = $dgrade;
+            $type = 'none';
+            if ($dgrade > 0) {
+                $type = 'point';
+            } else if ($dgrade < 0) {
+                $type = 'scale';
+            }
+            $defaultvalues['grade[modgrade_type]'] = $type;
+        }
+    }
+
+    public function save_mod_data(stdClass $data, context_module $context) {
+        global $DB;
+
+        $editor = $data->bookinginstructions_editor;
+        if ($editor) {
+            $data->bookinginstructions = file_save_draft_area_files($editor['itemid'], $context->id,
+                                            'mod_scheduler', 'bookinginstructions', 0,
+                                            $this->editoroptions, $editor['text']);
+            $data->bookinginstructionsformat = $editor['format'];
+            $DB->update_record('scheduler', $data);
+        }
+    }
+
+
+
+}
diff --git a/mod/scheduler/model/modellib.php b/mod/scheduler/model/modellib.php
new file mode 100644
index 0000000..fc3c42e
--- /dev/null
+++ b/mod/scheduler/model/modellib.php
@@ -0,0 +1,497 @@
+<?php
+
+use GuzzleHttp\Cookie\SetCookie;
+
+/**
+ * Library for basic Model-View-Controller (MVC) structures
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+
+/**
+ * A generic MVC model
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mvc_model {
+
+}
+
+
+/**
+ * A model mirroring one datebase record in a specific table of the Moodle DB
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class mvc_record_model extends mvc_model {
+
+    /**
+     * @var stdClass the underlying data record
+     */
+    protected $data = null;
+
+    /**
+     * Retrieve the name of the underlying database table
+     *
+     *  @return string
+     */
+    abstract protected function get_table();
+
+    /**
+     * Create a new model. (To be used in subclass constructors.)
+     */
+    protected function __construct() {
+        $data = new stdClass();
+    }
+
+    /**
+     * Load data from database. Should be used only in constructors / factory methods.
+     */
+    public function load($id) {
+        global $DB;
+        $rec = $DB->get_record($this->get_table(), array('id' => $id), '*', MUST_EXIST);
+        $this->data = $rec;
+    }
+
+    /**
+     * Load data from a database record
+     *
+     * @param stdClass the database record
+     */
+    public function load_record(stdClass $rec) {
+        $this->data = $rec;
+    }
+
+    /**
+     * Magic get method
+     *
+     * Attempts to call a get_$key method to return the property.
+     * If not possible, returns the property from the internal record.
+     * If even that is not possible, fails with an exception.
+     *
+     * @param str $key
+     * @return mixed
+     */
+    public function __get($key) {
+        if (method_exists($this, 'get_'.$key)) {
+            return $this->{'get_'.$key}();
+        } else if (property_exists($this->data, $key)) {
+            return $this->data->{$key};
+        } else {
+            throw new coding_exception('unknown property: '.$key);
+        }
+    }
+
+    /**
+     * Magic set method
+     *
+     * Attempts to call a set_$key method to set the property.
+     * If not possible, sets the property directly in the internal record.
+     *
+     * @param str $key
+     * @return mixed
+     */
+    public function __set($key, $value) {
+        if (method_exists($this, 'set_'.$key)) {
+            $this->{'set_'.$key}($value);
+        } else {
+            $this->data->{$key} = $value;
+        }
+    }
+
+    /**
+     * Save any changes to the database
+     */
+    public function save() {
+        global $DB;
+        if (is_null($this->data)) {
+            throw new coding_exception('Missing data, cannot save');
+        } else if (property_exists($this->data, 'id') && ($this->data->id)) {
+            $DB->update_record($this->get_table(), $this->data);
+        } else {
+            $newid = $DB->insert_record($this->get_table(), $this->data);
+            $this->data->id = $newid;
+        }
+    }
+
+    /**
+     * Retrieve the id number of the record
+     *
+     * @return int
+     */
+    public function get_id() {
+        if (is_null($this->data)) {
+            return 0;
+        } else {
+            return $this->data->id;
+        }
+    }
+
+    /**
+     * Retrieve the associated data record
+     *
+     * Note that this is a copy (clone) of the data,
+     * changes to the returned record object will not lead to changes in the
+     * data of the present record.
+     *
+     * @return stdClass
+     */
+    public function get_data() {
+        return clone($this->data);
+    }
+
+    /**
+     * Set a number of properties at once.
+     *
+     * @param mixed $data either an array or an object describing the properties to be set
+     * @param array $propnames list of properties to be set,
+     *        or null if all properties in the input should be used
+     */
+    public function set_data($data, $propnames = null) {
+        $data = (array) $data;
+        if (is_null($propnames)) {
+            $propnames = array_keys($data);
+        }
+        foreach ($propnames as $propname) {
+            $this->{$propname} = $data[$propname];
+        }
+    }
+
+    /**
+     * Delete this model (from the database).
+     */
+    public function delete() {
+        global $DB;
+
+        $id = $this->get_id();
+        if ($id != 0) {
+            $DB->delete_records($this->get_table(), array('id' => $id));
+        }
+    }
+
+}
+
+/**
+ * A model mirroring one datebase record which as a "parent-child"
+ * relationship to a record in another table.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class mvc_child_record_model extends mvc_record_model {
+
+    /**
+     * @var mvc_record_model the parent record
+     */
+    private $parentrec;
+
+    /**
+     * Set the parent record.
+     *
+     * @param mvc_record_model $newparent
+     * @throws coding_exception
+     */
+    protected function set_parent(mvc_record_model $newparent) {
+        if (is_null($this->parentrec)) {
+            $this->parentrec = $newparent;
+        } else {
+            throw new coding_exception('parent record can be set only once');
+        }
+    }
+
+    /**
+     * Retrieve the parent record.
+     *
+     * @throws coding_exception
+     * @return mvc_record_model
+     */
+    protected function get_parent() {
+        if (is_null($this->parentrec)) {
+            throw new coding_exception('parent has not been set');
+        }
+        return $this->parentrec;
+    }
+
+    /**
+     * Retrieve the id of the parent record
+     *
+     * @return int
+     */
+    protected function get_parent_id() {
+        return $this->get_parent()->get_id();
+    }
+
+}
+
+/**
+ * An abstract factory class for loading records from the database.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class mvc_model_factory {
+
+    /**
+     * Create a new instance of a record, with no data.
+     *
+     *  @return mvc_model
+     */
+    public abstract function create();
+
+    /**
+     * Create a new record by loading it from the database.
+     *
+     * @param int $id the id of the record to load
+     * @return mvc_model
+     */
+    public function create_from_id($id) {
+        $new = $this->create();
+        $new->load($id);
+        return $new;
+    }
+
+}
+
+/**
+ * An abstract factory class for loading child records from the database.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class mvc_child_model_factory extends mvc_model_factory {
+
+    /**
+     * @var mvc_model the parent record
+     */
+    protected $myparent;
+
+    /**
+     * Create a new factory based on a parent record
+     * @param mvc_record_model $parent
+     */
+    public function __construct(mvc_record_model $parent) {
+        $this->myparent = $parent;
+    }
+
+    public function create() {
+        return $this->create_child($this->myparent);
+    }
+
+    /**
+     * Create a new child record (with no data)
+     *
+     * @param mvc_record_model $parent
+     */
+    public abstract function create_child(mvc_record_model $parent);
+
+    /**
+     * Create a child record from a database entry, already loaded
+     *
+     * @param stdClass $rec the record from the database
+     * @return mvc_child_record_model the new child record
+     */
+    public function create_child_from_record(stdClass $rec) {
+        $new = $this->create_child($this->myparent);
+        $new->load_record($rec);
+        return $new;
+    }
+}
+
+
+/**
+ * A list of child records.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mvc_child_list {
+
+    /**
+     * @var array list of child records
+     */
+    private $children;
+
+    /**
+     * @var int number of child records
+     */
+    private $childcount;
+
+    /**
+     * @var string name of the table for child records
+     */
+    private $childtable;
+
+    /**
+     * @var string name of parent id field in child table
+     */
+    private $childfield;
+
+    /**
+     * @var mvc_child_model_factory factory for new child records
+     */
+    private $childfactory;
+
+    /**
+     * @var array list of child records marked for deletion
+     */
+    private $childrenfordeletion;
+
+    /**
+     * @var mvc_record_model parent record
+     */
+    private $parentmodel;
+
+    /**
+     * Create a new child list.
+     *
+     * @param mvc_record_model $parent parent record
+     * @param string $childtable name of table for child records
+     * @param string $childfield name of parent id field in child table
+     * @param mvc_model_factory $factory factory for child records
+     */
+    public function __construct(mvc_record_model $parent, $childtable, $childfield,
+                                mvc_model_factory $factory) {
+        $this->children = null;
+        $this->childcount = -1;
+        $this->childfield = $childfield;
+        $this->childtable = $childtable;
+        $this->childfactory = $factory;
+        $this->parentmodel = $parent;
+        $this->childrenfordeletion = array();
+    }
+
+    /**
+     * Retrieve the id of the parent record
+     * @return int
+     */
+    private function get_parent_id() {
+        return $this->parentmodel->get_id();
+    }
+
+    /**
+     * Load the list of all children from the database
+     */
+    public function load() {
+        global $DB;
+        if (!is_null($this->children)) {
+            return; // Children already loaded.
+        } else if (!$this->get_parent_id()) {
+            // Parent ID is invalid - not yet stored.
+            $this->children = array();
+        } else {
+            $this->children = array();
+            $childrecs = $DB->get_records($this->childtable, array($this->childfield => $this->get_parent_id()));
+            $cnt = 0;
+            foreach ($childrecs as $rec) {
+                $app = $this->childfactory->create_child_from_record($rec, $this->parentmodel);
+                $this->children[$rec->id] = $app;
+                $cnt++;
+            }
+            $this->childcount = $cnt;
+        }
+    }
+
+    /**
+     * Return a child record by its id
+     *
+     * @param int $id
+     * @return mvc_child_record_model child record, or null if none found
+     */
+    public function get_child_by_id($id) {
+        $this->load();
+        $found = null;
+        foreach ($this->children as $child) {
+            if ($child->id == $id) {
+                $found = $child;
+                break;
+            }
+        }
+        return $found;
+    }
+
+    /**
+     * Return all children in this list
+     *
+     * @return array
+     */
+    public function get_children() {
+        $this->load();
+        return $this->children;
+    }
+
+    /**
+     * Count the children in this list.
+     *
+     * @return int
+     */
+    public function get_child_count() {
+        global $DB;
+        if ($this->childcount >= 0) {
+            return $this->childcount;
+        } else if (!$this->get_parent_id()) {
+            return 0; // No valid parent.
+        } else {
+            $cnt = $DB->count_records($this->childtable, array($this->childfield => $this->get_parent_id()));
+            $this->childcount = $cnt;
+            return $cnt;
+        }
+    }
+
+    /**
+     * Save all child records to the database.
+     */
+    public function save_children() {
+        if (!is_null($this->children)) {
+            foreach ($this->children as $child) {
+                $child->save();
+            }
+        }
+        foreach ($this->childrenfordeletion as $delchild) {
+            $delchild->delete();
+        }
+        $this->childrenfordeletion = array();
+    }
+
+    /**
+     * Create a new, empty child record.
+     * @return mvc_child_record_model the new record
+     */
+    public function create_child() {
+        $this->load();
+        $newchild = $this->childfactory->create();
+        $this->children[] = $newchild;
+        return $newchild;
+    }
+
+    /**
+     * Remove a child record from the list
+     * @param mvc_child_record_model $child the record to remove
+     * @throws coding_exception if the record does nto belong to this list
+     */
+    public function remove_child(mvc_child_record_model $child) {
+        if (is_null($this->children) || !in_array($child, $this->children)) {
+            throw new coding_exception ('Child record to remove not found in list');
+        }
+        $key = array_search($child, $this->children, true);
+        unset($this->children[$key]);
+        $this->childrenfordeletion[] = $child;
+    }
+
+    /**
+     * Delete all child records
+     */
+    public function delete_children() {
+        $this->load();
+        foreach ($this->children as $child) {
+            $child->delete();
+        }
+    }
+
+}
diff --git a/mod/scheduler/model/scheduler_appointment.php b/mod/scheduler/model/scheduler_appointment.php
new file mode 100644
index 0000000..a2c9692
--- /dev/null
+++ b/mod/scheduler/model/scheduler_appointment.php
@@ -0,0 +1,128 @@
+<?php
+
+/**
+ * A class for representing a scheduler appointment.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once('modellib.php');
+
+
+/**
+ * A class for representing a scheduler appointment.
+ *
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_appointment extends mvc_child_record_model {
+
+
+    protected function get_table() {
+        return 'scheduler_appointment';
+    }
+
+    public function __construct(scheduler_slot $slot) {
+        parent::__construct();
+        $this->data = new stdClass();
+        $this->set_parent($slot);
+        $this->data->slotid = $slot->get_id();
+        $this->data->attended = 0;
+        $this->data->appointmentnoteformat = FORMAT_HTML;
+        $this->data->teachernoteformat = FORMAT_HTML;
+    }
+
+    public function save() {
+        $this->data->slotid = $this->get_parent()->get_id();
+        parent::save();
+        $scheddata = $this->get_scheduler()->get_data();
+        scheduler_update_grades($scheddata, $this->studentid);
+    }
+
+    public function delete() {
+        $studid = $this->studentid;
+        parent::delete();
+        $scheddata = $this->get_scheduler()->get_data();
+        scheduler_update_grades($scheddata, $studid);
+    }
+
+    /**
+     * Retrieve the slot associated with this appointment
+     *
+     * @return scheduler_slot;
+     */
+    public function get_slot() {
+        return $this->get_parent();
+    }
+
+    /**
+     * Retrieve the scheduler associated with this appointment
+     *
+     * @return scheduler_instance
+     */
+    public function get_scheduler() {
+        return $this->get_parent()->get_parent();
+    }
+
+    /**
+     * Return the student object.
+     * May be null if no student is assigned to this appointment (this _should_ never happen).
+     */
+    public function get_student() {
+        global $DB;
+        if ($this->data->studentid) {
+            return $DB->get_record('user', array('id' => $this->data->studentid), '*', MUST_EXIST);
+        } else {
+            return null;
+        }
+    }
+
+    /**
+     * Has this student attended?
+     */
+    public function is_attended() {
+        return (boolean) $this->data->attended;
+    }
+
+    /**
+     * Are there any student notes associated with this appointment?
+     * @return boolean
+     */
+    public function has_studentnotes() {
+        return $this->get_scheduler()->uses_studentnotes() &&
+                strlen(trim(strip_tags($this->studentnote))) > 0;
+    }
+
+    /**
+     * How many files has the student uploaded for this appointment?
+     *
+     * @return int
+     */
+    public function count_studentfiles() {
+        if (!$this->get_scheduler()->uses_studentnotes()) {
+            return 0;
+        }
+        $ctx = $this->get_scheduler()->context->id;
+        $fs = get_file_storage();
+        $files = $fs->get_area_files($ctx, 'mod_scheduler', 'studentfiles', $this->id, "filename", false);
+        return count($files);
+    }
+
+}
+
+/**
+ * A factory class for scheduler appointments.
+ *
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_appointment_factory extends mvc_child_model_factory {
+    public function create_child(mvc_record_model $parent) {
+        return new scheduler_appointment($parent);
+    }
+}
diff --git a/mod/scheduler/model/scheduler_instance.php b/mod/scheduler/model/scheduler_instance.php
new file mode 100644
index 0000000..36f31d0
--- /dev/null
+++ b/mod/scheduler/model/scheduler_instance.php
@@ -0,0 +1,1205 @@
+<?php
+
+/**
+ * A class for representing a scheduler instance.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once('modellib.php');
+require_once($CFG->dirroot . '/grade/lib.php');
+
+/**
+ * A class for representing a scheduler instance, as an MVC model.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_instance extends mvc_record_model {
+
+    /**
+     * @var stdClass course module record for this scheduler
+     */
+    protected $cm = null;
+
+    /**
+     * @var stdClass course record for this scheduler
+     */
+    protected $courserec = null;
+
+    /**
+     * @var context_module context record of this scheduler
+     */
+    protected $context = null;
+
+    /**
+     * @var effective group mode of this scheduler
+     */
+    protected $groupmode;
+
+    /**
+     * @var mvc_child_list list of slots in this scheduler
+     */
+    protected $slots;
+
+    protected function get_table() {
+        return 'scheduler';
+    }
+
+    protected function __construct() {
+        parent::__construct();
+        $this->slots = new mvc_child_list($this, 'scheduler_slots', 'schedulerid',
+            new scheduler_slot_factory($this));
+    }
+
+    /**
+     * Create a scheduler instance from the database.
+     *
+     * @param int $id module id of the scheduler
+     * @return scheduler_instance
+     */
+    public static function load_by_id($id) {
+        global $DB;
+        $cm = get_coursemodule_from_instance('scheduler', $id, 0, false, MUST_EXIST);
+        return self::load_from_record($id, $cm);
+    }
+
+    /**
+     * Create a scheduler instance from the database.
+     *
+     * @param int $cmid course module id of the scheduler
+     * @return scheduler_instance
+     */
+    public static function load_by_coursemodule_id($cmid) {
+        global $DB;
+        $cm = get_coursemodule_from_id('scheduler', $cmid, 0, false, MUST_EXIST);
+        return self::load_from_record($cm->instance, $cm);
+    }
+
+    /**
+     * Create a scheduler instance from an already loaded record.
+     *
+     * @param int $id the module id of the scheduler
+     * @param stdClass $coursemodule course module record
+     * @return scheduler_instance
+     */
+    protected static function load_from_record($id, stdClass $coursemodule) {
+        $scheduler = new scheduler_instance();
+        $scheduler->load($id);
+        $scheduler->cm = $coursemodule;
+        $scheduler->groupmode = groups_get_activity_groupmode($coursemodule);
+        return $scheduler;
+    }
+
+    /**
+     * Save any changes to the database
+     */
+    public function save() {
+        parent::save();
+        $this->slots->save_children();
+    }
+
+    /**
+     * Delete the scheduler
+     */
+    public function delete() {
+        $this->slots->delete_children();
+        scheduler_grade_item_delete($this);
+        parent::delete();
+    }
+
+    /**
+     * Retrieve the course module id of this scheduler
+     *
+     * @return int
+     */
+    public function get_cmid() {
+        return $this->cm->id;
+    }
+
+    /**
+     * Retrieve the course module record of this scheduler
+     *
+     * @return stdClass
+     */
+    public function get_cm() {
+        return $this->cm;
+    }
+
+    /**
+     * Retrieve the course id of this scheduler
+     *
+     * @return int
+     */
+    public function get_courseid() {
+        return $this->data->course;
+    }
+
+    /**
+     * Retrieve the course record of this scheduler
+     *
+     * @return stdClass
+     */
+    public function get_courserec() {
+        global $DB;
+        if (is_null($this->courserec)) {
+            $this->courserec = $DB->get_record('course', array('id' => $this->get_courseid()), '*', MUST_EXIST);
+        }
+        return $this->courserec;
+    }
+
+    /**
+     * Retrieve the activity module context of this scheduler
+     *
+     * @return context_module
+     */
+    public function get_context() {
+        if ($this->context == null) {
+            $this->context = context_module::instance($this->get_cmid());
+        }
+        return $this->context;
+    }
+
+    /**
+     * Return the last modification date (as stored in database) for this scheduler instance.
+     *
+     * @return int
+     */
+    public function get_timemodified() {
+        return $this->data->timemodified;
+    }
+
+    /**
+     * Retrieve the name of this scheduler
+     *
+     * @param bool $applyfilters whether to apply filters so that the output is printable
+     * @return string
+     */
+    public function get_name($applyfilters = false) {
+        $name = $this->data->name;
+        if ($applyfilters) {
+            $name = format_text($name);
+        }
+        return $name;
+    }
+
+    /**
+     * Retrieve the intro of this scheduler
+     *
+     * @param bool $applyfilters whether to apply filters so that the output is printable
+     * @return string
+     */
+    public function get_intro($applyfilters = false) {
+        $intro = $this->data->intro;
+        if ($applyfilters) {
+            $intro = format_text($intro);
+        }
+        return $intro;
+    }
+
+    /**
+     * Retrieve the name for "teacher" in the context of this scheduler
+     *
+     * TODO: This involves part of the presentation, should it be here?
+     *
+     * @return string
+     */
+    public function get_teacher_name() {
+        $name = format_string($this->data->staffrolename);
+        if (empty($name)) {
+            $name = get_string('teacher', 'scheduler');
+        }
+        return $name;
+    }
+
+    /**
+     * Retrieve the default duration of a slot, in minutes
+     *
+     * @return int
+     */
+    public function get_default_slot_duration() {
+        return $this->data->defaultslotduration;
+    }
+
+    /**
+     * Retrieve whether group scheduling is enabled in this instance
+     *
+     * @return boolean
+     */
+    public function is_group_scheduling_enabled() {
+        global $CFG;
+        $globalenable = (bool) get_config('mod_scheduler', 'groupscheduling');
+        $localenable = $this->bookingrouping >= 0;
+        return $globalenable && $localenable;
+    }
+
+    /**
+     * Retrieve whether individual scheduling is enabled in this instance.
+     * This is usually the case, but is disabled if the instance uses group scheduling
+     * and the configuration setting 'mixindivgroup' is set to inactive.
+     *
+     * @return boolean
+     */
+    public function is_individual_scheduling_enabled() {
+        if ($this->is_group_scheduling_enabled()) {
+            return (bool) get_config('mod_scheduler', 'mixindivgroup');
+        } else {
+            return true;
+        }
+    }
+
+    /**
+     * get the last location of a certain teacher in this scheduler
+     *
+     * @param stdClass $user
+     * @uses $DB
+     * @return string the last known location for the current user (teacher)
+     */
+    public function get_last_location($user) {
+        global $DB;
+
+        $select = 'schedulerid = :schedulerid AND teacherid = :teacherid ORDER BY timemodified DESC LIMIT 1';
+        $params = array('schedulerid' => $this->data->id, 'teacherid' => $user->id);
+        $lastlocation = $DB->get_field('scheduler_slots', 'appointmentlocation', $params, IGNORE_MULTIPLE);
+        if (!$lastlocation) {
+            $lastlocation = '';
+        }
+        return $lastlocation;
+    }
+
+    /**
+     * Whether this scheduler uses "appointment notes" visible to teachers and students
+     * @return bool whether appointment notes are used
+     */
+    public function uses_appointmentnotes() {
+        return ($this->data->usenotes % 2 == 1);
+    }
+
+    /**
+     * Whether this scheduler uses "teacher notes" visible to teachers only
+     * @return bool whether appointment notes are used
+     */
+    public function uses_teachernotes() {
+        return (floor($this->data->usenotes / 2) % 2 == 1);
+    }
+
+    /**
+     * Whether this scheduler uses booking forms at all
+     * @return bool whether the booking form is used
+     */
+    public function uses_bookingform() {
+        return $this->data->usebookingform;
+    }
+
+    /**
+     * Whether this scheduler has booking instructions
+     * @return bool whether booking instructions present
+     */
+    public function has_bookinginstructions() {
+        $instr = trim(strip_tags($this->data->bookinginstructions));
+        return $this->uses_bookingform() && strlen($instr) > 0;
+    }
+
+    /**
+     * Whether this scheduler uses "student notes" filled by students at booking time
+     * @return bool whether student notes are used
+     */
+    public function uses_studentnotes() {
+        return $this->uses_bookingform() && $this->usestudentnotes > 0;
+    }
+
+    /**
+     * Whether this scheduler uses student file uploads at booking time
+     * @return bool whether student file uploads are used
+     */
+    public function uses_studentfiles() {
+        return $this->uses_bookingform() && $this->uploadmaxfiles > 0;
+    }
+
+    /**
+     * Whether this scheduler uses any data entered by the student at booking time
+     * @return bool whether student data is used
+     */
+    public function uses_studentdata() {
+        return $this->uses_studentnotes() || $this->uses_studentfiles();
+    }
+
+    /**
+     * Whether this scheduler uses captchas at booking time
+     * @return bool whether captchas are used
+     */
+    public function uses_bookingcaptcha() {
+        global $CFG;
+        return  $this->uses_bookingform() && $this->data->usecaptcha
+                && !empty($CFG->recaptchapublickey) && !empty($CFG->recaptchaprivatekey);
+    }
+
+
+    /**
+     * Checks whether this scheduler allows a student (in principle) to book several slots at a time
+     * @return bool whether the student can book multiple appointments
+     */
+    public function allows_multiple_bookings() {
+        return ($this->maxbookings != 1);
+    }
+
+    /**
+     * Checks whether this scheduler allows unlimited bookings per student.
+     * @return bool
+     */
+    public function allows_unlimited_bookings() {
+        return ($this->maxbookings == 0);
+    }
+
+    /**
+     * Checks whether this scheduler uses grading at all.
+     * @return boolean
+     */
+    public function uses_grades() {
+        return ($this->scale != 0);
+    }
+
+    /**
+     * Return grade for given user.
+     * This does not take gradebook data into account.
+     *
+     * @param int $schedulerid id of scheduler
+     * @param int $userid user id
+     * @return int grade of this user
+     */
+    public function get_user_grade($userid) {
+        $grades = $this->get_user_grades($userid);
+        return $grades[$userid]->rawgrade;
+    }
+
+    /**
+     * Return grade for given user or all users.
+     *
+     * @param int $schedulerid id of scheduler
+     * @param int $userid optional user id, 0 means all users
+     * @return array array of grades, false if none
+     */
+    public function get_user_grades($userid=0) {
+        global $CFG, $DB;
+
+        if ($this->scale == 0) {
+            return false;
+        }
+
+        $usersql = '';
+        $params = array();
+        if ($userid) {
+            $usersql = ' AND a.studentid = :userid';
+            $params['userid'] = $userid;
+        }
+        $params['sid'] = $this->id;
+
+        $sql = 'SELECT a.id, a.studentid, a.grade '.
+               'FROM {scheduler_slots} s JOIN {scheduler_appointment} a ON s.id = a.slotid '.
+               'WHERE s.schedulerid = :sid AND a.grade IS NOT NULL'.$usersql;
+
+        $grades = $DB->get_records_sql($sql, $params);
+        $finalgrades = array();
+        $gradesums = array();
+
+        foreach ($grades as $grade) {
+            $gradesums[$grade->studentid] = new stdClass();
+            $finalgrades[$grade->studentid] = new stdClass();
+            $finalgrades[$grade->studentid]->userid = $grade->studentid;
+        }
+        if ($this->scale > 0) { // Grading numerically.
+            foreach ($grades as $grade) {
+                $gradesums[$grade->studentid]->sum = @$gradesums[$grade->studentid]->sum + $grade->grade;
+                $gradesums[$grade->studentid]->count = @$gradesums[$grade->studentid]->count + 1;
+                $gradesums[$grade->studentid]->max = (@$gradesums[$grade->studentid]->max < $grade->grade) ?
+                                                     $grade->grade : @$gradesums[$grade->studentid]->max;
+            }
+
+            // Retrieve the adequate strategy.
+            foreach ($gradesums as $student => $gradeset) {
+                switch ($this->gradingstrategy) {
+                    case SCHEDULER_MAX_GRADE:
+                        $finalgrades[$student]->rawgrade = $gradeset->max;
+                        break;
+                    case SCHEDULER_MEAN_GRADE:
+                        $finalgrades[$student]->rawgrade = $gradeset->sum / $gradeset->count;
+                        break;
+                }
+            }
+
+        } else { // Grading on scales.
+            $scaleid = - ($this->scale);
+            $maxgrade = '';
+            if ($scale = $DB->get_record('scale', array('id' => $scaleid))) {
+                $scalegrades = make_menu_from_list($scale->scale);
+                foreach ($grades as $grade) {
+                    $gradesums[$grade->studentid]->sum = @$gradesums[$grade->studentid]->sum + $grade->grade;
+                    $gradesums[$grade->studentid]->count = @$gradesums[$grade->studentid]->count + 1;
+                    $gradesums[$grade->studentid]->max = (@$gradesums[$grade->studentid]->max < $grade) ?
+                                                         $grade->grade : @$gradesums[$grade->studentid]->max;
+                }
+                $maxgrade = $scale->name;
+            }
+
+            // Retrieve the adequate strategy.
+            foreach ($gradesums as $student => $gradeset) {
+                switch ($this->gradingstrategy) {
+                    case SCHEDULER_MAX_GRADE:
+                        $finalgrades[$student]->rawgrade = $gradeset->max;
+                        break;
+                    case SCHEDULER_MEAN_GRADE:
+                        $finalgrades[$student]->rawgrade = $gradeset->sum / $gradeset->count;
+                        break;
+                }
+            }
+
+        }
+        // Include any empty grades.
+        if ($userid > 0) {
+            if (!array_key_exists($userid, $finalgrades)) {
+                $finalgrades[$userid] = new stdClass();
+                $finalgrades[$userid]->userid = $userid;
+                $finalgrades[$userid]->rawgrade = null;
+            }
+        } else {
+            $gui = new graded_users_iterator($this->get_courserec());
+            $gui->init();
+            while ($userdata = $gui->next_user()) {
+                $uid = $userdata->user->id;
+                if (!array_key_exists($uid, $finalgrades)) {
+                    $finalgrades[$uid] = new stdClass();
+                    $finalgrades[$uid]->userid = $uid;
+                    $finalgrades[$uid]->rawgrade = null;
+                }
+            }
+        }
+        return $finalgrades;
+
+    }
+
+    /**
+     * Get gradebook information for a particular student.
+     * The return value is a grade_grade object.
+     *
+     * @param int $studentid id number of the student
+     * @return stdClass the gradebook information. May be null if no info is found.
+     */
+    public function get_gradebook_info($studentid) {
+
+        $gradinginfo = grade_get_grades($this->courseid, 'mod', 'scheduler', $this->id, $studentid);
+        if (!empty($gradinginfo->items)) {
+            $item = $gradinginfo->items[0];
+            if (isset($item->grades[$studentid])) {
+                return $item->grades[$studentid];
+            }
+        }
+        return null;
+    }
+
+
+    /* *********************** Loading lists of slots *********************** */
+
+    /**
+     * Fetch a generic list of slots from the database
+     *
+     * @param string $wherecond WHERE condition
+     * @param string $havingcond HAVING condition
+     * @param array $params parameters for DB query
+     * @param mixed $limitfrom query limit from here
+     * @param mixed $limitnum max number od records to fetch
+     * @param string $orderby ORDER BY fields
+     * @return scheduler_slot[]
+     */
+    protected function fetch_slots($wherecond, $havingcond, array $params, $limitfrom='', $limitnum='', $orderby='s.id') {
+        global $DB;
+        $select = 'SELECT s.* FROM {scheduler_slots} s';
+
+        $where = 'WHERE schedulerid = :schedulerid';
+        if ($wherecond) {
+            $where .= ' AND ('.$wherecond.')';
+        }
+        $params['schedulerid'] = $this->data->id;
+
+        $having = '';
+        if ($havingcond) {
+            $having = 'HAVING '.$havingcond;
+        }
+
+        $order = 'ORDER BY '.$orderby;
+
+        $sql = "$select $where $having $order";
+
+        $slotdata = $DB->get_records_sql($sql, $params, $limitfrom, $limitnum);
+        $slots = array();
+        foreach ($slotdata as $slotrecord) {
+            $slot = new scheduler_slot($this);
+            $slot->load_record($slotrecord);
+            $slots[] = $slot;
+        }
+        return $slots;
+    }
+
+    /**
+     * Count a list of slots (for this scheduler) in the database
+     *
+     * @param string $wherecond WHERE condition
+     * @param array $params parameters for DB query
+     * @return int
+     */
+    protected function count_slots($wherecond, array $params) {
+        global $DB;
+        $select = 'SELECT COUNT(*) FROM {scheduler_slots} s';
+
+        $where = 'WHERE schedulerid = :schedulerid';
+        if ($wherecond) {
+            $where .= ' AND ('.$wherecond.')';
+        }
+        $params['schedulerid'] = $this->data->id;
+
+        $sql = "$select $where";
+
+        return $DB->count_records_sql($sql, $params);
+    }
+
+
+    /**
+     * Subquery that counts appointments in the current slot.
+     * Only to be used in conjunction with fetch_slots()
+     *
+     * @return string
+     */
+    protected function appointment_count_query() {
+        return "(SELECT COUNT(a.id) FROM {scheduler_appointment} a WHERE a.slotid = s.id)";
+    }
+
+    /**
+     * @var int number of student parameters used in queries
+     */
+    protected $studparno = 0;
+
+    /**
+     * Return a WHERE condition relating to sutdents in a slot
+     *
+     * @param array $params parameters for the query (by reference)
+     * @param int $studentid id of student to look for
+     * @param bool $mustbeattended include only attended appointments?
+     * @param bool $mustbeunattended include only unattended appointments?
+     * @return string
+     */
+    protected function student_in_slot_condition(&$params, $studentid, $mustbeattended, $mustbeunattended) {
+        $cond = 'EXISTS (SELECT 1 FROM {scheduler_appointment} a WHERE a.studentid = :studentid'.
+                $this->studparno.' and a.slotid=s.id';
+        if ($mustbeattended) {
+            $cond .= ' AND a.attended = 1';
+        }
+        if ($mustbeunattended) {
+            $cond .= ' AND a.attended = 0';
+        }
+        $cond .= ')';
+        $params['studentid'.$this->studparno] = $studentid;
+        $this->studparno++;
+        return $cond;
+    }
+
+
+    /**
+     * Retrieve a slot by id.
+     *
+     * @param int $id
+     * @return scheduler_slot
+     * @uses $DB
+     */
+    public function get_slot($id) {
+
+        global $DB;
+
+        $slotdata = $DB->get_record('scheduler_slots', array('id' => $id, 'schedulerid' => $this->id), '*', MUST_EXIST);
+        $slot = new scheduler_slot($this);
+        $slot->load_record($slotdata);
+        return $slot;
+    }
+
+    /**
+     * Retrieve a list of all slots in this scheduler
+     *
+     * @return scheduler_slot[]
+     */
+    public function get_slots() {
+        return $this->slots->get_children();
+    }
+
+    /**
+     * Retrieve the number of slots in the scheduler
+     *
+     * @return int
+     */
+    public function get_slot_count() {
+        return $this->slots->get_child_count();
+    }
+
+    /**
+     * Load a list of all slots, between certain limits
+     *
+     * @param string $limitfrom start from this entry
+     * @param string $limitnum max number of entries
+     * @return scheduler_slot[]
+     */
+    public function get_all_slots($limitfrom='', $limitnum='') {
+        return $this->fetch_slots('', '', array(), $limitfrom, $limitnum, 's.starttime ASC');
+    }
+
+    /**
+     * Retrieves attended slots of a student. These will be sorted by start time.
+     *
+     * @param int $studentid
+     * @return scheduler_slot[]
+     */
+    public function get_attended_slots_for_student($studentid) {
+
+        $params = array();
+        $wherecond = $this->student_in_slot_condition($params, $studentid, true, false);
+
+        $slots = $this->fetch_slots($wherecond, '', $params, '', '', 's.starttime');
+
+        return $slots;
+    }
+
+    /**
+     * Retrieves upcoming slots booked by a student. These will be sorted by start time.
+     * A slot is "upcoming" if it as been booked but is not attended.
+     *
+     * @param int $studentid
+     * @return scheduler_slot[]
+     */
+    public function get_upcoming_slots_for_student($studentid) {
+
+        $params = array();
+        $wherecond = $this->student_in_slot_condition($params, $studentid, false, true);
+        $slots = $this->fetch_slots($wherecond, '', $params, '', '', 's.starttime');
+
+        return $slots;
+    }
+
+    /**
+     * Retrieves the slots available to a student.
+     *
+     * Note: this does not check for scheduling conflicts.
+     * It does however check for group restrictions if group mode is enabled.
+     *
+     * @param int $studentid
+     * @param bool $includefullybooked include slots that are already fully booked
+     * @return scheduler_slot[]
+     */
+    public function get_slots_available_to_student($studentid, $includefullybooked = false) {
+
+        global $DB;
+
+        $params = array();
+        $wherecond = "(s.starttime > :cutofftime) AND (s.hideuntil < :nowhide)";
+        $params['nowhide'] = time();
+        $params['cutofftime'] = time() + $this->guardtime;
+        $subcond = 'NOT ('.$this->student_in_slot_condition($params, $studentid, false, false).')';
+        if (!$includefullybooked) {
+            $subcond .= ' AND (s.exclusivity = 0 OR s.exclusivity > '.$this->appointment_count_query().')';
+        }
+        if ($this->groupmode != NOGROUPS) {
+            $groups = groups_get_all_groups($this->cm->course, $studentid, $this->cm->groupingid);
+            if ($groups) {
+                $groupids = array();
+                foreach ($groups as $group) {
+                    $groupids[] = $group->id;
+                }
+                list($sqlin, $paramsin) = $DB->get_in_or_equal($groupids, SQL_PARAMS_NAMED);
+                $subquery = "SELECT 1 FROM {groups_members} gm WHERE gm.userid = s.teacherid AND gm.groupid $sqlin";
+                $subcond .= " AND EXISTS ($subquery)";
+                $params = array_merge($params, $paramsin);
+            } else {
+                $subcond .= " AND FALSE";
+            }
+        }
+        $wherecond .= " AND ($subcond)";
+        $order = 's.starttime ASC';
+        $slots = $this->fetch_slots($wherecond, '', $params, '', '', $order);
+
+        return $slots;
+    }
+
+    /**
+     * Does htis scheduler have a slot where a certain student is booked?
+     *
+     * @param int $studentid student to look for
+     * @param bool $mustbeattended include only attended slots
+     * @param bool $mustbeunattended include only unattended slots
+     * @return boolean
+     */
+    public function has_slots_for_student($studentid, $mustbeattended, $mustbeunattended) {
+        $params = array();
+        $where = $this->student_in_slot_condition($params, $studentid, $mustbeattended, $mustbeunattended);
+        $cnt = $this->count_slots($where, $params);
+        return $cnt > 0;
+    }
+
+
+    /**
+     * Does this scheduler contain any slots where a certain group has booked?
+     *
+     * @param int $groupid the group to look for
+     * @param bool $mustbeattended include only attended slots
+     * @param bool $mustbeunattended include only unattended slots
+     * @return boolean
+     */
+    public function has_slots_booked_for_group($groupid, $mustbeattended = false, $mustbeunattended = false) {
+        global $DB;
+        $attendcond = '';
+        if ($mustbeattended) {
+            $attendcond .= " AND a.attended = 1";
+        }
+        if ($mustbeunattended) {
+            $attendcond .= " AND a.attended = 0";
+        }
+        $sql = "SELECT COUNT(*)
+                  FROM {scheduler_slots} s
+                  JOIN {scheduler_appointment} a ON a.slotid = s.id
+                  JOIN {groups_members} gm ON a.studentid = gm.userid
+                 WHERE s.schedulerid = :schedulerid
+                       AND gm.groupid = :groupid
+                       $attendcond";
+        $params = array('schedulerid' => $this->id, 'groupid' => $groupid);
+        return $DB->count_records_sql($sql, $params) > 0;
+    }
+
+
+    /**
+     * retrieves slots without any appointment made
+     *
+     * @param int $teacherid if given, will return only slots for this teacher
+     * @return scheduler_slot[] list of unused slots
+     */
+    public function get_slots_without_appointment($teacherid = 0) {
+        $wherecond = '('.$this->appointment_count_query().' = 0)';
+        $params = array();
+        if ($teacherid > 0) {
+            list($twhere, $params) = $this->slots_for_teacher_cond($teacherid, 0, false);
+            $wherecond .= " AND $twhere";
+        }
+        $slots = $this->fetch_slots($wherecond, '', $params);
+        return $slots;
+    }
+
+    /**
+     * Retrieve a list of slots for a certain teacher or group of teachers
+     * @param int $teacherid id of teacher to look for, can be 0
+     * @param int $groupid find only slots with a teacher in this group, can be 0
+     * @param bool $inpast include only slots in the past?
+     * @return mixed SQL condition and parameters
+     */
+    protected function slots_for_teacher_cond($teacherid, $groupid, $inpast) {
+        $wheres = array();
+        $params = array();
+        if ($teacherid > 0) {
+            $wheres[] = "teacherid = :tid";
+            $params['tid'] = $teacherid;
+        }
+        if ($groupid > 0) {
+            $wheres[] = "EXISTS (SELECT 1 FROM {groups_members} gm WHERE gm.groupid = :gid AND gm.userid = s.teacherid)";
+            $params['gid'] = $groupid;
+        }
+        if ($inpast) {
+            $wheres[] = "s.starttime < ".strtotime('now');
+        }
+        $where = implode(" AND ", $wheres);
+        return array($where, $params);
+    }
+
+    /**
+     * Count the number of slots available to a teacher or group of teachers
+     *
+     * @param int $teacherid id of teacher to look for, can be 0
+     * @param int $groupid find only slots with a teacher in this group, can be 0
+     * @param bool $inpast include only slots in the past?
+     * @return int
+     */
+    public function count_slots_for_teacher($teacherid, $groupid = 0, $inpast = false) {
+        list($where, $params) = $this->slots_for_teacher_cond($teacherid, $groupid, $inpast);
+        return $this->count_slots($where, $params);
+    }
+
+    /**
+     * Retrieve slots available to a teacher or group of teachers
+     *
+     * @param int $teacherid id of teacher to look for, can be 0
+     * @param int $groupid find only slots with a teacher in this group, can be 0
+     * @param mixed $limitfrom start from this entry
+     * @param mixed $limitnum max number of entries
+     * @return scheduler_slot[]
+     */
+    public function get_slots_for_teacher($teacherid, $groupid = 0, $limitfrom = '', $limitnum = '') {
+        list($where, $params) = $this->slots_for_teacher_cond($teacherid, $groupid, false);
+        return $this->fetch_slots($where, '', $params, $limitfrom, $limitnum, 's.starttime ASC');
+    }
+
+    /**
+     * Retrieve slots available to a group of teachers
+     *
+     * @param int $groupid find only slots with a teacher in this group
+     * @param mixed $limitfrom start from this entry
+     * @param mixed $limitnum max number of entries
+     * @return scheduler_slot[]
+     */
+    public function get_slots_for_group($groupid, $limitfrom = '', $limitnum = '') {
+        list($where, $params) = $this->slots_for_teacher_cond(0, $groupid, false);
+        return $this->fetch_slots($where, '', $params, $limitfrom, $limitnum, 's.starttime ASC');
+    }
+
+
+    /* ************** End of slot retrieveal routines ******************** */
+
+    /**
+     * Returns an array of slots that would overlap with this one.
+     *
+     * @param int $starttime the start of time slot as a timestamp
+     * @param int $endtime end of time slot as a timestamp
+     * @param int $teacher the id of the teacher constraint, or 0 for "all teachers"
+     * @param int $student the id of the student constraint, or 0 for "all students"
+     * @param int $others selects where to search for conflicts, [SCHEDULER_SELF, SCHEDULER_OTHERS, SCHEDULER_ALL]
+     * @param int $excludeslot exclude slot with this id (useful to exclude present slot when saving)
+     * @uses $DB
+     * @return array conflicting slots
+     */
+    function get_conflicts($starttime, $endtime, $teacher = 0, $student = 0,
+                           $others = SCHEDULER_SELF, $excludeslot = 0) {
+        global $DB;
+
+        $params = array();
+
+        $slotscope = ($excludeslot == 0) ? "" : "sl.id != :excludeslot AND ";
+        $params['excludeslot'] = $excludeslot;
+
+        switch ($others) {
+            case SCHEDULER_SELF:
+                $schedulerscope = "sl.schedulerid = :schedulerid AND ";
+                $params['schedulerid'] = $this->id;
+                break;
+            case SCHEDULER_OTHERS:
+                $schedulerscope = "sl.schedulerid != :schedulerid AND ";
+                $params['schedulerid'] = $this->id;
+                break;
+            default:
+                $schedulerscope = '';
+        }
+        if ($teacher != 0) {
+            $teacherscope = "sl.teacherid = :teacherid AND ";
+            $params['teacherid'] = $teacher;
+        } else {
+            $teacherscope = "";
+        }
+
+        $studentjoin = ($student != 0) ? "JOIN {scheduler_appointment} a ON a.slotid = sl.id AND a.studentid = :studentid " : '';
+        $params['studentid'] = $student;
+
+        $timeclause = "( (sl.starttime <= :starttime1 AND sl.starttime + sl.duration * 60 > :starttime2) OR
+                         (sl.starttime < :endtime1 AND sl.starttime + sl.duration * 60 >= :endtime2) OR
+                         (sl.starttime >= :starttime3 AND sl.starttime + sl.duration * 60 <= :endtime3) )
+                       AND sl.starttime + sl.duration * 60 > :nowtime";
+        $params['starttime1'] = $starttime;
+        $params['starttime2'] = $starttime;
+        $params['starttime3'] = $starttime;
+        $params['endtime1'] = $endtime;
+        $params['endtime2'] = $endtime;
+        $params['endtime3'] = $endtime;
+        $params['nowtime'] = time();
+
+        $sql = "SELECT sl.*,
+                       s.name AS schedulername,
+                       (CASE WHEN (s.id = :thisid) THEN 1 ELSE 0 END) AS isself,
+                       c.id AS courseid, c.shortname AS courseshortname, c.fullname AS coursefullname,
+                       (SELECT COUNT(*) FROM {scheduler_appointment} ac WHERE sl.id = ac.slotid) AS numstudents
+                  FROM {scheduler_slots} sl
+                       $studentjoin
+                  JOIN {scheduler} s ON sl.schedulerid = s.id
+                  JOIN {course} c ON c.id = s.course
+                 WHERE $slotscope $schedulerscope $teacherscope $timeclause
+              ORDER BY sl.starttime ASC, sl.duration ASC";
+
+        $params['thisid'] = $this->id;
+
+        $conflicting = $DB->get_records_sql($sql, $params);
+
+        return $conflicting;
+    }
+
+    /**
+     * retrieves an appointment and the corresponding slot
+     *
+     * @return mixed List of (scheduler_slot, scheduler_appointment)
+     */
+    public function get_slot_appointment($appointmentid) {
+        global $DB;
+
+        $appointrec = $DB->get_record('scheduler_appointment', array('id' => $appointmentid), '*', MUST_EXIST);
+        $slotrec = $DB->get_record('scheduler_slots', array('id' => $appointrec->slotid), '*', MUST_EXIST);
+
+        $slot = new scheduler_slot($this);
+        $slot->load_record($slotrec);
+        $appointment = new scheduler_appointment($slot);
+        $appointment->load_record($appointrec);
+
+        return array($slot, $appointment);
+    }
+
+    /**
+     * Retrieves all appointments of a student. These will be sorted by start time.
+     *
+     * @param int $studentid
+     * @return array of scheduler_appointment objects
+     */
+    public function get_appointments_for_student($studentid) {
+
+        global $DB;
+
+        $sql = "SELECT s.*, a.id as appointmentid
+                  FROM {scheduler_slots} s, {scheduler_appointment} a
+                 WHERE s.schedulerid = :schedulerid
+                       AND s.id = a.slotid
+                       AND a.studentid = :studid
+              ORDER BY s.starttime";
+        $params = array('schedulerid' => $this->id, 'studid' => $studentid);
+
+        $slotrecs = $DB->get_records_sql($sql, $params);
+
+        $appointments = array();
+        foreach ($slotrecs as $rec) {
+            $slot = new scheduler_slot($this);
+            $slot->load_record($rec);
+            $appointrec = $DB->get_record('scheduler_appointment', array('id' => $rec->appointmentid), '*', MUST_EXIST);
+            $appointment = new scheduler_appointment($slot);
+            $appointment->load_record($appointrec);
+            $appointments[] = $appointment;
+        }
+
+        return $appointments;
+    }
+
+    /**
+     * Create a new slot relating to this scheduler.
+     *
+     * @return scheduler_slot
+     */
+    public function create_slot() {
+        return $this->slots->create_child();
+    }
+
+    /**
+     * Computes how many appointments a student can still book.
+     *
+     * @param int $studentid
+     * @param bool $includechangeable include appointments that are booked but can still be changed?
+     * @return int the number of bookable or changeable appointments, possibly 0; returns -1 if unlimited.
+     */
+    public function count_bookable_appointments($studentid, $includechangeable = true) {
+        global $DB;
+
+        // Find how many slots have already been booked.
+        $sql = 'SELECT COUNT(*) FROM {scheduler_slots} s'
+              .' JOIN {scheduler_appointment} a ON s.id = a.slotid'
+              .' WHERE s.schedulerid = :schedulerid AND a.studentid=:studentid';
+        if ($this->schedulermode == 'onetime') {
+            if ($includechangeable) {
+                $sql .= ' AND s.starttime <= :cutofftime';
+            }
+            $sql .= ' AND a.attended = 0';
+        } else if ($includechangeable) {
+            $sql .= ' AND (s.starttime <= :cutofftime OR a.attended = 1)';
+        }
+        $params = array('schedulerid' => $this->id, 'studentid' => $studentid, 'cutofftime' => time() + $this->guardtime);
+
+        $booked = $DB->count_records_sql($sql, $params);
+        $allowed = $this->maxbookings;
+
+        if ($allowed == 0) {
+            return -1;
+        } else if ($booked >= $allowed) {
+            return 0;
+        } else {
+            return $allowed - $booked;
+        }
+
+    }
+
+    /**
+     * Get list of teachers that have slots in this scheduler
+     *
+     * @return stdClass[]
+     */
+    public function get_teachers() {
+        global $DB;
+        $sql = "SELECT DISTINCT u.*
+                  FROM {scheduler_slots} s, {user} u
+                 WHERE s.teacherid = u.id
+                       AND schedulerid = ?";
+        $teachers = $DB->get_records_sql($sql, array($this->id));
+        return $teachers;
+    }
+
+    /**
+     * Get list of available users with a certain capability.
+     *
+     * @param string $capability the capabilty to look for
+     * @param int|array $groupids - group id or array of group ids; if set, will only return users who are in these groups.
+     *                             (for legacy processing, allow also group objects and arrays of these)
+     * @return stdClass[] array of moodle user records
+     */
+    protected function get_available_users($capability, $groupids = 0) {
+
+        // If full group objects are given, reduce the array to only group ids.
+        if (is_array($groupids) && is_object(array_values($groupids)[0])) {
+            $groupids = array_keys($groupids);
+        } else if (is_object($groupids)) {
+            $groupids = $groupids->id;
+        }
+
+        // Legacy: empty string amounts to no group filter.
+        if ($groupids === '') {
+            $groupids = 0;
+        }
+
+        $users = array();
+        if (is_integer($groupids)) {
+            $users = get_enrolled_users($this->get_context(), $capability, $groupids, 'u.*', null, 0, 0, true);
+
+        } else if (is_array($groupids)) {
+            foreach ($groupids as $groupid) {
+                $groupusers = get_enrolled_users($this->get_context(), 'mod/scheduler:appoint', $groupid,
+                                                 'u.*', null, 0, 0, true);
+                foreach ($groupusers as $user) {
+                    if (!array_key_exists($user->id, $users)) {
+                        $users[$user->id] = $user;
+                    }
+                }
+            }
+        }
+
+        $modinfo = get_fast_modinfo($this->courseid);
+        $info = new \core_availability\info_module($modinfo->get_cm($this->cmid));
+        $users = $info->filter_user_list($users);
+
+        return $users;
+    }
+
+    /**
+     * Get list of available students (i.e., users that can book slots)
+     *
+     * @param mixed $groupids - group id or array of group ids; if set, will only return users who are in these groups.
+     * @return stdClass[] array of moodle user records
+     */
+    public function get_available_students($groupids = 0) {
+
+        return $this->get_available_users('mod/scheduler:appoint', $groupids);
+    }
+
+    /**
+     * Get list of available teachers (i.e., users that can offer slots)
+     *
+     * @param mixed $groupids - only return users who are in this group.
+     * @return stdClass array of moodle user records
+     */
+    public function get_available_teachers($groupids = 0) {
+
+        return $this->get_available_users('mod/scheduler:attend', $groupids);
+    }
+
+    /**
+     * Checks whether there are any possible teachers for the scheduler
+     *
+     * @return bool whether teachers are present
+     */
+    public function has_available_teachers() {
+        $teachers = $this->get_available_teachers();
+        return count($teachers) > 0;
+    }
+
+    /**
+     * Get a list of students that can still make an appointment.
+     *
+     * @param mixed $groups single group or array of groups - only return
+     *            users who are in one of these group(s).
+     * @param int $cutoff if the number of students in the course is more than this limit,
+     *            the routine will return the number of students rather than a list
+     *            (this is for performance reasons).
+     * @param bool $onlymandatory include only students who _must_ (rather than _can_) make
+     *            another appointment. This matters onyl in schedulers where students can make
+     *            unlimited appointments.
+     * @return int|array of moodle user records; or int 0 if there are no students in the course;
+     *            or the number of students if there are too many students. Array keys are student ids.
+     */
+    public function get_students_for_scheduling($groups = '', $cutoff = 0, $onlymandatory = false) {
+        $studs = $this->get_available_students($groups);
+        if (($cutoff > 0 && count($studs) > $cutoff) || count($studs) == 0) {
+            return count($studs);
+        }
+        $schedstuds = array();
+        foreach ($studs as $stud) {
+            $include = false;
+            if ($this->allows_unlimited_bookings()) {
+                $include = !$onlymandatory || !$this->has_slots_for_student($stud->id, false, false);
+            } else {
+                $include = ($this->count_bookable_appointments($stud->id, false) != 0);
+            }
+            if ($include) {
+                $schedstuds[$stud->id] = $stud;
+            }
+        }
+        return $schedstuds;
+    }
+
+
+    /**
+     * Delete an appointment, and do whatever is needed
+     *
+     * @param int $appointmentid
+     * @uses $DB
+     */
+    public function delete_appointment($appointmentid) {
+        global $DB;
+
+        if (!$oldrecord = $DB->get_record('scheduler_appointment', array('id' => $appointmentid))) {
+            return;
+        }
+
+        $slot = $this->get_slot($oldrecord->slotid);
+        $appointment = $slot->get_appointment($appointmentid);
+
+        // Delete the appointment.
+        $slot->remove_appointment($appointment);
+        $slot->save();
+    }
+
+    /**
+     * Frees all empty slots that are in the past, hence no longer bookable.
+     * This applies to all schedulers in the system.
+     *
+     * @uses $CFG
+     * @uses $DB
+     */
+    public static function free_late_unused_slots() {
+        global $DB;
+
+        $sql = "SELECT DISTINCT s.id
+                           FROM {scheduler_slots} s
+                LEFT OUTER JOIN {scheduler_appointment} a ON s.id = a.slotid
+                          WHERE a.studentid IS NULL
+                            AND starttime < ?";
+        $now = time();
+        $todelete = $DB->get_records_sql($sql, array($now), 0, 1000);
+        if ($todelete) {
+            list($usql, $params) = $DB->get_in_or_equal(array_keys($todelete));
+            $DB->delete_records_select('scheduler_slots', " id $usql ", $params);
+        }
+    }
+
+}
diff --git a/mod/scheduler/model/scheduler_slot.php b/mod/scheduler/model/scheduler_slot.php
new file mode 100644
index 0000000..ac0d030
--- /dev/null
+++ b/mod/scheduler/model/scheduler_slot.php
@@ -0,0 +1,467 @@
+<?php
+
+/**
+ * A class for representing a scheduler slot.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * A class for representing a scheduler slot.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_slot extends mvc_child_record_model {
+
+    /**
+     * @var mvc_child_list list of appointments in this slot
+     */
+    protected $appointments;
+
+    protected function get_table() {
+        return 'scheduler_slots';
+    }
+
+    /**
+     * Create a new slot in a specific scheduler
+     *
+     * @param scheduler_instance $scheduler
+     */
+    public function __construct(scheduler_instance $scheduler) {
+        parent::__construct();
+        $this->data = new stdClass();
+        $this->data->id = 0;
+        $this->set_parent($scheduler);
+        $this->data->schedulerid = $scheduler->get_id();
+        $this->appointments = new mvc_child_list($this, 'scheduler_appointment', 'slotid',
+                        new scheduler_appointment_factory($this));
+    }
+
+    /**
+     * Create a scheduler slot from the database.
+     */
+    public static function load_by_id($id, scheduler_instance $scheduler) {
+        $slot = new scheduler_slot($scheduler);
+        $slot->load($id);
+        return $slot;
+    }
+
+    /**
+     * Save any changes to the database
+     */
+    public function save() {
+        $this->data->schedulerid = $this->get_parent()->get_id();
+        parent::save();
+        $this->appointments->save_children();
+        $this->update_calendar();
+    }
+
+    /**
+     * Sets appointment-related data (grade, comments) for all student in this slot.
+     *
+     * @param scheduler_appointment $template appointment from which the data will be read
+     */
+    public function distribute_appointment_data(scheduler_appointment $template) {
+        $scheduler = $this->get_scheduler();
+        foreach ($this->appointments->get_children() as $appointment) {
+            if ($appointment->id != $template->id) {
+                if ($scheduler->uses_grades()) {
+                    $appointment->grade = $template->grade;
+                }
+                if ($scheduler->uses_appointmentnotes()) {
+                    $appointment->appointmentnote = $template->appointmentnote;
+                    $appointment->appointmentnoteformat = $template->appointmentnoteformat;
+                    $this->distribute_file_area('appointmentnote', $template->id, $appointment->id);
+                }
+                if ($scheduler->uses_teachernotes()) {
+                    $appointment->teachernote = $template->teachernote;
+                    $appointment->teachernoteformat = $template->teachernoteformat;
+                    $this->distribute_file_area('teachernote', $template->id, $appointment->id);
+                }
+                $appointment->save();
+            }
+        }
+    }
+
+    /**
+     * Distribute plugin files from a source to a target id within a file area
+     *
+     * @param unknown $area
+     * @param unknown $sourceid
+     * @param unknown $targetid
+     */
+    private function distribute_file_area($area, $sourceid, $targetid) {
+
+        if ($sourceid == $targetid) {
+            return;
+        }
+
+        $fs = get_file_storage();
+        $component = 'mod_scheduler';
+        $ctxid = $this->get_scheduler()->context->id;
+
+        // Delete old files in the target area.
+        $files = $fs->get_area_files($ctxid, $component, $area, $targetid);
+        foreach ($files as $f) {
+            $f->delete();
+        }
+
+        // Copy files from the source to the target.
+        $files = $fs->get_area_files($ctxid, $component, $area, $sourceid);
+        foreach ($files as $f) {
+            $fs->create_file_from_storedfile(array('itemid' => $targetid), $f);
+        }
+    }
+
+    /**
+     * Retrieve the scheduler associated with this appointment.
+     *
+     * @return scheduler_instance the scheduler
+     */
+    public function get_scheduler() {
+        return $this->get_parent();
+    }
+
+    /**
+     * Return the teacher object
+     *
+     * @return stdClass
+     */
+    public function get_teacher() {
+        global $DB;
+        if ($this->data->teacherid) {
+            return $DB->get_record('user', array('id' => $this->data->teacherid), '*', MUST_EXIST);
+        } else {
+            return new stdClass();
+        }
+    }
+
+    /**
+     * Return the end time of the slot
+     *
+     * @return int
+     */
+    public function get_endtime() {
+        return $this->data->starttime + $this->data->duration * MINSECS;
+    }
+
+    /**
+     * Is this slot bookable in its bookable period for students.
+     * This checks for the availability time of the slot and for the "guard time" restriction,
+     * but not for the number of actualy booked appointments.
+     *
+     * @return boolean
+     */
+    public function is_in_bookable_period() {
+        $available = $this->hideuntil <= time();
+        $beforeguardtime = $this->starttime > time() + $this->parent->guardtime;
+        return $available && $beforeguardtime;
+    }
+
+    /**
+     * Is this a group slot (i.e., more than one student is permitted)
+     *
+     * @return boolean
+     */
+    public function is_groupslot() {
+        return (boolean) !($this->data->exclusivity == 1);
+    }
+
+
+    /**
+     * Count the number of appointments in this slot
+     *
+     * @return int
+     */
+    public function get_appointment_count() {
+        return $this->appointments->get_child_count();
+    }
+
+    /**
+     * Get the appointment in this slot for a specific student, or null if the student doesn't have one.
+     *
+     * @param int $studentid the id number of the student in question
+     * @return scheduler_appointment the appointment for the specified student
+     */
+    public function get_student_appointment($studentid) {
+        $studapp = null;
+        foreach ($this->get_appointments() as $app) {
+            if ($app->studentid == $studentid) {
+                $studapp = $app;
+                break;
+            }
+        }
+        return $studapp;
+    }
+
+
+    /**
+     * Has the slot been attended?
+     *
+     * @return boolean
+     */
+    public function is_attended() {
+        $isattended = false;
+        foreach ($this->appointments->get_children() as $app) {
+            $isattended = $isattended || $app->attended;
+        }
+        return $isattended;
+    }
+
+    /**
+     * Has the slot been booked by a specific student?
+     *
+     * @return boolean
+     */
+    public function is_booked_by_student($studentid) {
+        $result = false;
+        foreach ($this->get_appointments() as $appointment) {
+            $result = $result || $appointment->studentid == $studentid;
+        }
+        return $result;
+    }
+
+    /**
+     * Count the remaining free appointments in this slot
+     *
+     * @return int
+     */
+    public function count_remaining_appointments() {
+        if ($this->exclusivity == 0) {
+            return -1;
+        } else {
+            $rem = $this->exclusivity - $this->get_appointment_count();
+            if ($rem < 0) {
+                $rem = 0;
+            }
+            return $rem;
+        }
+    }
+
+    /**
+     *  Get an appointment by ID
+     *
+     *  @return scheduler_appointment
+     */
+    public function get_appointment($id) {
+        return $this->appointments->get_child_by_id($id);
+    }
+
+    /**
+     *  Get an array of all appointments
+     *
+     *  @return array
+     */
+    public function get_appointments($userfilter = null) {
+        $apps = $this->appointments->get_children();
+        if ($userfilter) {
+            foreach ($apps as $key => $app) {
+                if (!in_array($app->studentid, $userfilter)) {
+                    unset($apps[$key]);
+                }
+            }
+        }
+        return array_values($apps);
+    }
+
+    /**
+     * Create a new appointment relating to this slot.
+     *
+     * @return scheduler_appointment
+     */
+    public function create_appointment() {
+        return $this->appointments->create_child();
+    }
+
+    /**
+     * Remove an appointment from this slot.
+     *
+     * @param scheduler_appointment $app
+     */
+    public function remove_appointment($app) {
+        $this->appointments->remove_child($app);
+    }
+
+    public function delete() {
+        $this->appointments->delete_children();
+        $this->clear_calendar();
+        parent::delete();
+    }
+
+
+    /* The event code is SSstu (for a student event) or SSsup (for a teacher event).
+     * then, the id of the scheduler slot that it belongs to.
+    * finally, the courseID (legacy reasons -- not really used),
+    * all in a colon delimited string. This will run into problems when the IDs of slots and courses
+    * are bigger than 7 digits in length...
+    */
+
+    /**
+     * Get the id string for teacher events in this slot
+     * @return string
+     */
+    private function get_teacher_eventtype() {
+        $slotid = $this->get_id();
+        $courseid = $this->get_parent()->get_courseid();
+        return "SSsup:{$slotid}:{$courseid}";
+    }
+
+    /**
+     * Get the id string for student events in this slot
+     * @return string
+     */
+    private function get_student_eventtype() {
+        $slotid = $this->get_id();
+        $courseid = $this->get_parent()->get_courseid();
+        return "SSstu:{$slotid}:{$courseid}";
+    }
+
+    /**
+     * Remove all calendar events related to this slot from the DB
+     *
+     * @uses $DB
+     */
+    private function clear_calendar() {
+        global $DB;
+        $DB->delete_records('event', array('eventtype' => $this->get_teacher_eventtype()));
+        $DB->delete_records('event', array('eventtype' => $this->get_student_eventtype()));
+    }
+
+    /**
+     * Update calendar events related to this slot
+     *
+     * @uses $DB
+     */
+    private function update_calendar() {
+
+        global $DB;
+
+        $scheduler = $this->get_parent();
+
+        $myappointments = $this->appointments->get_children();
+
+        $studentids = array();
+        foreach ($myappointments as $appointment) {
+            if (!$appointment->is_attended()) {
+                $studentids[] = $appointment->studentid;
+            }
+        }
+
+        $teacher = $DB->get_record('user', array('id' => $this->teacherid));
+        $students = $DB->get_records_list('user', 'id', $studentids);
+        $studentnames = array();
+        foreach ($students as $student) {
+            $studentnames[] = fullname($student);
+        }
+
+        $schedulername = $scheduler->get_name(true);
+        $schedulerdescription = $scheduler->get_intro();
+
+        $slotid = $this->get_id();
+        $courseid = $scheduler->get_courseid();
+
+        $baseevent = new stdClass();
+        $baseevent->description = "$schedulername<br/><br/>$schedulerdescription";
+        $baseevent->format = 1;
+        $baseevent->modulename = 'scheduler';
+        $baseevent->courseid = 0;
+        $baseevent->instance = $this->get_parent_id();
+        $baseevent->timestart = $this->starttime;
+        $baseevent->timeduration = $this->duration * MINSECS;
+        $baseevent->visible = 1;
+
+        // Update student events.
+
+        $studentevent = clone($baseevent);
+        $studenteventname = get_string('meetingwith', 'scheduler').' '.$scheduler->get_teacher_name().', '.fullname($teacher);
+        $studentevent->name = shorten_text($studenteventname, 200);
+
+        $this->update_calendar_events( $this->get_student_eventtype(), $studentids, $studentevent);
+
+        // Update teacher events.
+
+        $teacherids = array();
+        $teacherevent = clone($baseevent);
+        if (count($studentids) > 0) {
+            $teacherids[] = $teacher->id;
+            if (count($studentids) > 1) {
+                $teachereventname = get_string('meetingwithplural', 'scheduler').' '.
+                                get_string('students', 'scheduler').', '.implode(', ', $studentnames);
+            } else {
+                $teachereventname = get_string('meetingwith', 'scheduler').' '.
+                                get_string('student', 'scheduler').', '.$studentnames[0];
+            }
+            $teacherevent->name = shorten_text($teachereventname, 200);
+        }
+
+        $this->update_calendar_events( $this->get_teacher_eventtype(), $teacherids, $teacherevent);
+
+    }
+
+    /**
+     * Update a certain type of calendat events related to this slot.
+     *
+     * @param string $eventtype
+     * @param array $userids users to assign to the event
+     * @param stdClass $eventdata dertails of the event
+     */
+    private function update_calendar_events($eventtype, array $userids, stdClass $eventdata) {
+
+        global $CFG, $DB;
+        require_once($CFG->dirroot.'/calendar/lib.php');
+
+        $eventdata->eventtype = $eventtype;
+
+        $existingevents = $DB->get_records('event', array('modulename' => 'scheduler', 'eventtype' => $eventtype));
+        $handledevents = array();
+        $handledusers = array();
+
+        // Update existing calendar events.
+        foreach ($existingevents as $eventid => $existingdata) {
+            if (in_array($existingdata->userid, $userids)) {
+                $eventdata->userid = $existingdata->userid;
+                $calendarevent = calendar_event::load($existingdata);
+                $calendarevent->update($eventdata, false);
+                $handledevents[] = $eventid;
+                $handledusers[] = $existingdata->userid;
+            }
+        }
+
+        // Add new calendar events.
+        foreach ($userids as $userid) {
+            if (!in_array($userid, $handledusers)) {
+                $thisevent = clone($eventdata);
+                $thisevent->userid = $userid;
+                calendar_event::create($thisevent, false);
+            }
+        }
+
+        // Remove old, obsolete calendar events.
+        foreach ($existingevents as $eventid => $existingdata) {
+            if (!in_array($eventid, $handledevents)) {
+                $calendarevent = calendar_event::load($existingdata);
+                $calendarevent->delete();
+            }
+        }
+
+    }
+
+
+}
+
+/**
+ * A factory class for scheduler slots.
+ *
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_slot_factory extends mvc_child_model_factory {
+    public function create_child(mvc_record_model $parent) {
+        return new scheduler_slot($parent);
+    }
+}
diff --git a/mod/scheduler/pix/attachment.png b/mod/scheduler/pix/attachment.png
new file mode 100644
index 0000000000000000000000000000000000000000..214462c8b2d00e02798b1816b0e05d924dca913d
GIT binary patch
literal 710
zcmV;%0y+JOP)<h;3K|Lk000e1NJLTq000jF000mO1^@s6$yOx<00004b3#c}2nYxW
zd<bNS00009a7bBm0001S0001S0USSocK`qY8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10z*keK~yM_jnYd<RB;pr@b5eK4w_8KwM{|>L2U{OdVrgtOhqfq
zUSkV`B<|chOjy(=C}^;Sw9r~Kc^|!9v}zkf5JW9n1VKpA%AH1pZennnd;h166H|zF
zmfy$kEDneGkBQ@Ww=re{z)k>PN#4xo^N;v17)8;5s+LvNYinzJvADRn6~Hvfsa0_h
z1jk9<R@FY=_dhk{+eki>Rp1cG$uv!S8X*8wDwSCP8&<?Y5Db$Xw=ApMw(a#%6g_V2
zv)Sx0fH(FEaD?PlV@#K-ZX)><z)-yp!|<@GUKf#lf8a0-^8hXb=(25li!o+eL{7M_
z`)+yhQ2=ETIpn(TEE`}Ez<Fa#w}@;9@IX}uecyk-3{R50WsK<;k+Z7$N&p~=q6+{D
zNs=6}ENcgV`y`LlVH8EDNlu7JuZZ{ncD1y$yk;1Ny#Qik%-&k9w$#+r^jSpuUDy4%
z49}?QSemANmStTcxmi^QJ<qF%s$L^`u}~;{Yi@4t0PwvIgCH1D)skgdJtA@iKu0E%
z8Sp%>0suD2J+)fxB>>FL&3$QaZ?A=67?Vs?^<bK&J*qlJa&5I*J?42{wSFf7umm6r
z0HsnXNs?qg$q%YJV_8<Gh>Vk5<2cT#(b3W05CB9~pJy_ed_5=@i$C)D{9VU!;v`A#
zk<|J5`Jr4c_w(<cV7XlGux<M-fQKS7)!N#+xUjI$NpcdvjN>@xa=BdkHv|9zKpe*#
s(=@$7vLC=Y05ht3$M^jwE1~-Q0{4aaXw@i7BLDyZ07*qoM6N<$f=FO7WdHyG

literal 0
HcmV?d00001

diff --git a/mod/scheduler/pix/attachment.svg b/mod/scheduler/pix/attachment.svg
new file mode 100644
index 0000000..36c5f5f
--- /dev/null
+++ b/mod/scheduler/pix/attachment.svg
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   version="1.1"
+   id="Layer_1"
+   x="0px"
+   y="0px"
+   viewBox="0 0 16 16"
+   enable-background="new 0 0 500 500"
+   xml:space="preserve"
+   inkscape:version="0.91 r13725"
+   sodipodi:docname="attachment.svg"
+   width="16"
+   height="16"><metadata
+     id="metadata9"><rdf:RDF><cc:Work
+         rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><defs
+     id="defs7" /><sodipodi:namedview
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1"
+     objecttolerance="10"
+     gridtolerance="10"
+     guidetolerance="10"
+     inkscape:pageopacity="0"
+     inkscape:pageshadow="2"
+     inkscape:window-width="1839"
+     inkscape:window-height="1050"
+     id="namedview5"
+     showgrid="false"
+     inkscape:zoom="56.061688"
+     inkscape:cx="8.0000087"
+     inkscape:cy="8.0001159"
+     inkscape:window-x="81"
+     inkscape:window-y="30"
+     inkscape:window-maximized="1"
+     inkscape:current-layer="Layer_1"
+     fit-margin-top="0"
+     fit-margin-left="0"
+     fit-margin-right="0"
+     fit-margin-bottom="0" /><path
+     d="m 9.8906244,0.96273053 -0.855802,0.78393997 -1.956118,1.79187 -5.616854,5.14521 C -0.42440662,10.41162 -0.49426762,13.15701 1.3046624,14.80489 c 1.79893,1.64787 4.795983,1.58388 6.682239,-0.14399 L 15.559873,7.7238205 14.826329,7.0518705 7.2533574,13.98575 c -1.481061,1.3567 -3.817923,1.42389 -5.21515,0.14399 C 0.64447238,12.85303 0.71433438,10.7124 2.1953954,9.3525005 l 5.595895,-5.12922 0.0035,0.003 c 0.007,-0.006 0.01397,-0.016 0.02096,-0.0224 l 1.956118,-1.79187 0.8558016,-0.78394 c 0.992031,-0.90872997 2.602336,-0.90872997 3.590874,0 0.992031,0.90873 0.992031,2.38382 0,3.28935 l -1.173671,1.07832 -1.638249,1.50069 c -0.007,0.006 -0.01747,0.0128 -0.02445,0.0192 l 0.0035,0 -4.0205216,3.6893195 c -0.52396,0.47996 -1.376269,0.47996 -1.900229,0 -0.52396,-0.47997 -0.52396,-1.2607095 0,-1.7406695 l 5.1906996,-4.75164 -0.7335446,-0.67195 -5.194192,4.75484 c -0.929156,0.85114 -0.929156,2.2366295 0,3.0877695 0.929156,0.85113 2.441655,0.85113 3.370811,0 l 4.0449726,-3.7053195 1.638249,-1.50069 1.170177,-1.07832 c 1.397228,-1.2799 1.397228,-3.35975 0,-4.63964997 -1.397227,-1.2831 -3.664228,-1.2767 -5.0614546,0.003 z"
+     id="path3"
+     inkscape:connector-curvature="0"
+     style="fill:#999999;fill-opacity:1"
+     inkscape:export-xdpi="2.8797832"
+     inkscape:export-ydpi="2.8797832" /></svg>
\ No newline at end of file
diff --git a/mod/scheduler/pix/icon.gif b/mod/scheduler/pix/icon.gif
new file mode 100644
index 0000000000000000000000000000000000000000..b75dcd26a4103ed7b60eb37d6148fcef5fc3db66
GIT binary patch
literal 217
zcmZ?wbhEHb6krfw*vtR||NsBL-PpV>Fy#926FatSEiNkl_4C);H*cp+o&M|pe>Zpc
zZ(qJVxPSle-@ibWia%Kx85sB(bU->mW-zd{eK=_;y!fkMP?v_tWPz3hu4YS<Afr76
zJx%9@?ypbqa9#C`Y0`?RUNs!N&50KaO61y@4htHnOzLD+y1*bR)aAgGz|kR`=Ke^L
z&qAQ}=)x!ic88u#I~UsOa4>Sn=&<pmRW@+4%E)H3@+QXcdi2Cw%Qp3La(a20u!hYI
Qla&(b>Svb_5oE9i0NUkKPyhe`

literal 0
HcmV?d00001

diff --git a/mod/scheduler/pix/icon.png b/mod/scheduler/pix/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..a2b061d4087bc0b1ce7edeaf62dd37fd4779721a
GIT binary patch
literal 1271
zcmV<T1PJ?yP)<h;3K|Lk000e1NJLTq000;O000;W1^@s6;CDUv00004b3#c}2nYxW
zd<bNS00009a7bBm000fw000fw0YWI7cmMzZ8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H101k9TSaeirbZlh+Lt$)XZe(F{G$|C80000KbVXQnL3MO!Z*l-i
zVQY0_AX9W@X>Mh5=KJ?A0000%bVXQnQ*U*0V`TtnbaZe!FE3+nZEbIEb1rvjYiVs|
zWNBe8Z*pfZcWG;BFGgu>Wjar0W@%$(En{J9Wo~3)axQarXKWwdCjbBg?MXyIR7i=n
zmQP3=R~*N`zc+7oX0o%pZlklotf{(TZ4zn@CA6k$Xd45D3WZW?4hhs0brnKsq$eXi
zXxc;YR4f4_rH4T5rNl(=kZLX|Ax15vU=$C96&2mOw$Qjce_jvkPIh&h>cJoUc<=pY
z=KFc?H^290NC<)bG`6qm0C?`;o0gUz{I-2cR#ir9Z*0f5#j0hEb`K48<;E$SqR!6F
zL-j9S%zdn?KC!q6;=G{Hf0;<7a4Qh_;}_G63=a?6g;r1&OePPA)z!=cdy>zXuIoj?
zV9)@tv;*Mt`KG2+6?2hDMtqMipNOz-+w#r+{-xZw3rHrDZ#Tzcth}-kyQ(ZA5CFy)
zhzPPI;nzoxl#Y&$0|NsC|Lg#GJf2St!=TMnDo@9<ENpCS;I)GXcQ7o|gr;eb7=z<D
zc;nbHNtWe{0B&aQaZAPL_cwaI-aLV?y1MY@@#8po;soBStHa9jGM1N?@b$H8IDhUO
zj#gB_vMdl07!iWOAc~5LI&(E#Kyh*LA!%FXT)cD%zdd_~C)3lId;S~~6BDp)8-`)v
zY(oRmsT5Y0mqA1zB1n>ia5x+(2&k;6&`it91L!^<?%%tIZ?9iR-I+7^u&D`$!(nt@
zxq`C|4FG_}c-#dD$3b;<wHk}XO7j5i?d@;9US2M32RwQF7(;`D7=Q2pp->1!1Rzr}
zWk-%=0E>%YSpa}&G|F^c|1u9C%kqVik`i(pClByRb2ILaj^fALxAD`RJD7U<)XleH
z7*JF-Zv{jIzu%8&G}@BY-~izF`_FrI9h>R2E8c(O23A&9P#KBf{>TVwPM^lRwY4wv
z%^1qUVZ^rpEC<rq*cj;U?*6E^xA$ib07fWuSdyf?+1J+B<Kg%?*4EbW#nr2Lr=|vs
zu{@#AE?<V%>vhN3YvFL1H8nNe>gnkTk`MxSM@G!r`g)!=O&3sTt1-qPG3K_p{oED+
z5{ZO8I5_x_x3#rZ$2vN=;_<*E%LQb&Y}+ieeaCTNnI=rjf@PYB$K#lpnZf-0{O^5z
zeIIbn`TJvIW0;<vhRitx03pN<$5z~Jg@9$-ur13yE`$*9dc9a!SU?~UPyv7|igHrs
z9DgPfP*t^{=&NGe$H`<eyBR~Rt*upD)3l?yu48?D9rCMEv`Z60U~_X5x~>N_O}oG~
zO)DxbErp^eux<PQ6?S1&RaFQEgHROZ6i*})-%n0Xe$F|U9mkPu+vY+D<~WWdgkV`m
z=IciQKtuw7AR;I0j4?acXJ==vbUOVV6*~KgNCDv6at(k2K*r0n%LZTpNC9{O;4c7w
h3n9`wwD$YA<zKK0qmaAw$?5<A002ovPDHLkV1gVlJ>38R

literal 0
HcmV?d00001

diff --git a/mod/scheduler/pix/icon.svg b/mod/scheduler/pix/icon.svg
new file mode 100644
index 0000000..7aaee5a
--- /dev/null
+++ b/mod/scheduler/pix/icon.svg
@@ -0,0 +1,151 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   version="1.1"
+   width="24"
+   height="24"
+   id="svg1288">
+  <defs
+     id="defs3">
+    <linearGradient
+       id="linearGradient2563">
+      <stop
+         id="stop2565"
+         style="stop-color:#e2e2e2;stop-opacity:1"
+         offset="0" />
+      <stop
+         id="stop2567"
+         style="stop-color:#9f9f9f;stop-opacity:1"
+         offset="1" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2551">
+      <stop
+         id="stop2553"
+         style="stop-color:#000000;stop-opacity:1"
+         offset="0" />
+      <stop
+         id="stop2555"
+         style="stop-color:#000000;stop-opacity:0"
+         offset="1" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient2526">
+      <stop
+         id="stop2528"
+         style="stop-color:#e7ebeb;stop-opacity:1"
+         offset="0" />
+      <stop
+         id="stop2534"
+         style="stop-color:#e6ebeb;stop-opacity:1"
+         offset="0.5" />
+      <stop
+         id="stop2530"
+         style="stop-color:#ffffff;stop-opacity:1"
+         offset="1" />
+    </linearGradient>
+    <linearGradient
+       x1="13.357142"
+       y1="14.428571"
+       x2="42.214283"
+       y2="28.428572"
+       id="linearGradient2532"
+       xlink:href="#linearGradient2526"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="translate(0,0.785718)" />
+    <radialGradient
+       cx="26"
+       cy="29"
+       r="18.428572"
+       fx="26"
+       fy="29"
+       id="radialGradient2557"
+       xlink:href="#linearGradient2551"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(1,0,0,0.751938,0,7.193799)" />
+    <linearGradient
+       x1="6.7857146"
+       y1="30.785713"
+       x2="42.214283"
+       y2="30.785713"
+       id="linearGradient2569"
+       xlink:href="#linearGradient2563"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="matrix(0.57963528,0,0,0.57963528,-2.409621,22.564906)" />
+    <linearGradient
+       x1="13.357142"
+       y1="14.428571"
+       x2="42.214283"
+       y2="28.428572"
+       id="linearGradient2582"
+       xlink:href="#linearGradient2526"
+       gradientUnits="userSpaceOnUse"
+       gradientTransform="translate(0,0.785718)" />
+  </defs>
+  <g
+     transform="translate(0,-24)"
+     id="layer1">
+    <path
+       d="M 44.428572,29 A 18.428572,13.857142 0 1 1 7.5714283,29 18.428572,13.857142 0 1 1 44.428572,29 z"
+       transform="matrix(0.63296633,0,0,0.31073261,-4.4669552,34.130721)"
+       id="path2549"
+       style="color:#000000;fill:url(#radialGradient2557);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.99999964;marker:none;visibility:visible;display:inline;overflow:visible" />
+    <path
+       d="M 0.40574977,44.384029 C 0.28154198,44.963664 0.75767177,45.564 1.5443193,45.5433 l 20.9703767,0 c 0.745244,-0.0207 0.99366,-0.703843 0.82805,-1.262778 l -4.554279,-16.705916 -15.0705155,0 -3.31220173,16.809423 z"
+       id="path1316"
+       style="fill:#a7a7a7;fill-opacity:1;fill-rule:evenodd;stroke:#656565;stroke-width:0.57963532px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
+    <path
+       d="m 2.9012894,39.965983 17.5238746,0 c 0.496864,0 0.896869,0.389681 0.896869,0.873723 l 0.769285,2.782792 c 0,0.484043 -0.400002,0.873723 -0.89687,0.873723 l -18.8060163,0 c -0.4968645,0 -0.8968673,-0.38968 -0.8968673,-0.873723 l 0.5128565,-2.782792 c 0,-0.484042 0.4000028,-0.873723 0.8968685,-0.873723 z"
+       id="path2575"
+       style="opacity:0.10857143;color:#000000;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0.57963502;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;font-family:Bitstream Vera Sans" />
+    <path
+       d="m 1.0959216,44.022915 c -0.11584603,0.540618 -0.23106933,0.915626 0.2752804,0.915626 l 21.049267,0 c 0.530979,0 0.429942,-0.42875 0.275481,-0.950062 l -4.371919,-15.809087 -14.056059,0 -3.1720504,15.843523 z"
+       id="path2520"
+       style="fill:none;stroke:#ffffff;stroke-width:0.57963514px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:0.3446328" />
+    <path
+       d="m 3.1791063,39.457131 16.9762557,0 c 0.481338,0 0.868841,0.377502 0.868841,0.846418 l 0.745245,2.69583 c 0,0.468915 -0.387503,0.846419 -0.868839,0.846419 l -18.2183324,0 c -0.4813385,0 -0.8688407,-0.377504 -0.8688407,-0.846419 l 0.4968295,-2.69583 c 0,-0.468916 0.3875037,-0.846418 0.8688409,-0.846418 z"
+       id="path2518"
+       style="color:#000000;fill:#c5c5c5;fill-opacity:1;fill-rule:evenodd;stroke:#696969;stroke-width:0.57963502;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible;font-family:Bitstream Vera Sans" />
+    <path
+       d="m 3.1791063,38.215055 16.9762557,0 c 0.481338,0 0.868841,0.377505 0.868841,0.84642 l 0.745245,2.69583 c 0,0.468915 -0.387503,0.846418 -0.868839,0.846418 l -18.2183324,0 c -0.4813385,0 -0.8688407,-0.377503 -0.8688407,-0.846418 l 0.4968295,-2.69583 c 0,-0.468915 0.3875037,-0.84642 0.8688409,-0.84642 z"
+       id="rect2225"
+       style="color:#000000;fill:url(#linearGradient2569);fill-opacity:1;fill-rule:evenodd;stroke:#696969;stroke-width:0.57963502;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible" />
+    <g
+       transform="matrix(0.54633465,0,0,0.54633465,-2.5386593,23.185196)"
+       id="g2578">
+      <path
+         d="M 10.891973,11.500004 6.5714281,33.21429 c 0,0 26.2857149,1e-6 26.2857149,1e-6 12.584832,0 15.228163,-4.000001 15.228163,-4.000001 0,0 -3.357142,-1.178571 -4.785713,-6.142857 0,0 -3.060953,-11.571429 -3.060953,-11.571429 l -29.346667,0 z"
+         id="path2524"
+         style="fill:url(#linearGradient2582);fill-opacity:1;fill-rule:evenodd;stroke:#696969;stroke-width:1.06095243px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
+      <path
+         d="M 11.803734,12.474609 7.8122567,32.239668 c 0,0 17.1442613,10e-7 24.4261253,10e-7 11.226639,0 14.110429,-2.850865 14.110429,-2.850865 0,0 -2.99306,-1.862842 -4.293392,-6.381499 0,0 -2.738563,-10.461267 -2.738563,-10.461267 l -27.513122,-0.07143 z"
+         id="path2571"
+         style="fill:none;stroke:#ffffff;stroke-width:1.06095195px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
+    </g>
+    <path
+       d="m 4.1493567,26.415335 14.5945293,0 c 0.506089,0 0.913518,0.387643 0.913518,0.869156 l 0.207015,1.242672 c 0,0.481512 -0.40743,0.869154 -0.913521,0.869154 l -15.0085535,0 c -0.5060899,0 -0.913519,-0.387642 -0.913519,-0.869154 l 0.2070121,-1.242672 c 0,-0.481513 0.4074302,-0.869156 0.9135191,-0.869156 z"
+       id="rect2522"
+       style="color:#000000;fill:#fa3c3c;fill-opacity:1;fill-rule:evenodd;stroke:#696969;stroke-width:0.5796349;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible" />
+    <path
+       d="m 9.7448425,35.08926 c 0.5729195,0.05434 0.9983535,0.215856 1.2763005,0.484539 0.278294,0.26567 0.392988,0.6053 0.344081,1.018893 -0.07176,0.606809 -0.399236,1.095879 -0.982414,1.467207 -0.5831875,0.371331 -1.3375294,0.556995 -2.263033,0.556996 -0.7105273,-10e-7 -1.3094622,-0.111696 -1.7968055,-0.335104 l 0.1392353,-1.177387 c 0.5120729,0.353217 1.0942227,0.529823 1.7464503,0.529823 0.5210507,0 0.9318549,-0.08452 1.2324184,-0.253591 0.300912,-0.172078 0.469756,-0.413594 0.506532,-0.724545 0.03857,-0.326045 -0.08263,-0.564542 -0.363564,-0.715491 C 9.3031046,35.789656 8.8347041,35.714184 8.1788372,35.714179 l -0.7378537,0 0.1199567,-1.014362 0.7870439,0 c 0.5174047,3e-6 0.9220307,-0.0785 1.2138774,-0.235479 0.292198,-0.16 0.4556115,-0.386421 0.4902475,-0.679264 0.03248,-0.274719 -0.05258,-0.4951 -0.2552145,-0.661148 -0.202636,-0.166036 -0.5243958,-0.249057 -0.965281,-0.249061 -0.5574924,4e-6 -1.1032886,0.163027 -1.6373899,0.489068 l 0.133345,-1.127576 c 0.5984074,-0.253584 1.2692703,-0.38038 2.0125931,-0.380387 0.7178093,7e-6 1.2685553,0.149444 1.6522443,0.448312 0.387321,0.298883 0.553495,0.680778 0.498519,1.145691 -0.05106,0.431712 -0.222179,0.784929 -0.513368,1.059648 -0.290839,0.271708 -0.701745,0.464921 -1.2327145,0.579639"
+       id="text2541"
+       style="font-size:17.57787704px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:100%;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Segoe" />
+    <path
+       d="m 16.722619,38.603309 -1.453846,0 -0.644146,-5.425041 -1.792524,0.461897 -0.120978,-1.018892 3.211955,-0.751718 0.799539,6.733754"
+       id="text2545"
+       style="font-size:17.57787704px;font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:100%;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Segoe" />
+    <path
+       d="m 12.857143,9.9285717 a 1.3571428,1.3571428 0 1 1 -2.714286,0 1.3571428,1.3571428 0 1 1 2.714286,0 z"
+       transform="matrix(0.39659282,0,0,0.39659282,-0.34603013,23.429998)"
+       id="path2559"
+       style="opacity:0.52571429;color:#000000;fill:#fefefe;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:0.99999964;marker:none;visibility:visible;display:inline;overflow:visible" />
+    <path
+       d="m 5.1500123,27.094925 13.5224597,0"
+       id="path2561"
+       style="opacity:0.3028571;fill:none;stroke:#ffffff;stroke-width:0.57963538px;stroke-linecap:round;stroke-linejoin:miter;stroke-opacity:1" />
+  </g>
+</svg>
diff --git a/mod/scheduler/pix/ticked.gif b/mod/scheduler/pix/ticked.gif
new file mode 100644
index 0000000000000000000000000000000000000000..e2137bbe7a58c44be70dacf4153374a26786a3e7
GIT binary patch
literal 944
zcmchWy-U_%6o!xTf`*VrBz?HlQiKh0h>DhX>5Cd#0)vtQISGX*Ehfzpi4au7S^5}i
zDJZO#)<Rz71h$9>L1;7=4bgPE&aeK4p5^6mp65Q-eV^ZZ^7M%#N3Zltzx<NFM@3A;
zMM5NnN>$WET{J|qnx<kV=3*h1b=Otg#9chZvz~@Zn1oA&M4}|Ak|ybrAxVKY(rEFR
z+gWq!n5wIWYSvgPGc{KWwJZvnZtAWc>RC|S4byOq&`210s%e_88JbLm8Zn@u1dASn
z(MB3A9%mV<n&W0+mgSGJRPN?so@Eybn&B2<k+=tnyOwSlme?Z?FnLWJ_y+=qP$LF3
zlw5^_!Du6mR#tM=rsjluR*?8(ELDU@k}Gzhpy?T&<Vey402kK@8n;AA9$@mCIAFps
z4xvU2XkLN^2ZPZ@I%`FBn>IBk*%(3MkFivdSqp5|Ulh$oYoE=M3aZJy*4so`j7>VV
z?Z$8+Hy&#F4OTg5CLzt|z?KLPPmG#a`tk2${J%fDf490sR%N)x)_+2J=jG+5p;NEE
zyxq||u>Wjla<<)C8M$<C->0>9tNZG?H!F8GK3rQE8oe<vzkX<LVdCQ4xAx_}3(Ge3
zb^85md$9ZTv-{H@7h4ZrkB!|Q-&h=eba;65%=gLl`Ax^qZ@zwWdF{o+tuviHw}0+j
q93R}f{np*7=k2GhgEQM!mmasD^la&jbk@82dJc5necm-7$Nm7GdWiY}

literal 0
HcmV?d00001

diff --git a/mod/scheduler/pix/unticked.gif b/mod/scheduler/pix/unticked.gif
new file mode 100644
index 0000000000000000000000000000000000000000..3a98e0ab708e5ae026a057c373d5ebb6c2961598
GIT binary patch
literal 943
zcmchWzf0C}5XUdDv<M%eA0RZOL6o)~i4}oMrO+0|qtOuLVOZhV(qNHGx=Ob+M?;3_
zE`-pJi-sW0$v_C&q9K~D*L~}6=(9W=_xZf<^?u*?xiofh_{`0gwB(okJt|@%E)pUs
zRH~vT>Y^c<)if0|F&7K5th=t_Chp=Pp7k_T!X#WGBoZY_l{8703`q*Kkw%Nh+|HU)
z$5dT4RI|oXnW?#2sAW;mbW?ZrP|t$mZkUE^ghs;1Q%%!!&Cp~j)QABMC0O(rj5g9}
z@i@y+)f_hqvn+p%rE)h9^DMhi&<wW-i^M%p+_iMeu*4pDfXQp(z&{W;gc>oRq2wwY
z3`QGiw6c<`HZ>>Qvx3AQW2quMl3cM11x?TJBuA1a0JykL(6}W^@&J?9!~qkAaR@bH
zK=TqTI2epJ(pf92+q9`U$;Jp0e~hJy%vxZx{-S6$TKjC4R8URswcaMmVr<f>Z8wGs
zx$#iTZ?MWiGYM%v2ew3bcw*GOcR&7pjQ{ti?{~*8kxe;OW9vU5UGuWE_sHn0?bY6{
zo`K76X68mZKDXaK9D35fGQIq=uV?tt)xoLd_KgE42e(f5wvJu9GkJGsZJ~4g!r<7I
z?e)&q;Nr^A`<>PCjrPo~$%V;}iyITidrrKbT3H-<aJJ{^+SaG%qr3N=|MLCY`s~Qk
m*MrlCZg0+BfBfvjz|4#G;qHl}_t*Mo=jZnP?B3rc=l%fMV1=as

literal 0
HcmV?d00001

diff --git a/mod/scheduler/renderable.php b/mod/scheduler/renderable.php
new file mode 100644
index 0000000..af12342
--- /dev/null
+++ b/mod/scheduler/renderable.php
@@ -0,0 +1,680 @@
+<?php
+
+/**
+ * This file contains the definition for the renderable classes for the assignment
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * This class represents a table of slots associated with one student
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_slot_table implements renderable {
+
+    /** @var array list of slots in this table */
+    public $slots = array();
+
+    /** @var scheduler_instance the scheduler that the slots are in */
+    public $scheduler;
+
+    /** @var bool whether to show grades in the table */
+    public $showgrades;
+
+    /** @var bool whether any slot in the table has other students to show */
+    public $hasotherstudents = false;
+
+    /** @var bool whether to show start/end time of the slots */
+    public $showslot = true;
+
+    /** @var bool whether to show the attended/not attended icons */
+    public $showattended = false;
+
+    /** @var bool whether to show action buttons (for cancelling) */
+    public $showactions = true;
+
+    /** @var bool whether to show (confidential) teacher notes */
+    public $showteachernotes = false;
+
+    /** @var bool whether to show a link to edit appointments */
+    public $showeditlink = false;
+
+    /** @var bool whether to show the location of the appointment */
+    public $showlocation = true;
+
+    /** @var bool whether to show the students in the slot */
+    public $showstudent = false;
+
+    /** @var moodle_url|null action URL for buttons */
+    public $actionurl;
+
+    /**
+     * Add a slot to the table.
+     *
+     * @param scheduler_slot $slotmodel the slot to be added
+     * @param scheduler_appointment $appointmentmodel the corresponding appointment
+     * @param array $otherstudents any other students in the same slot
+     * @param bool $cancancel whether the use can canel the appointment
+     * @param bool $canedit whether the use can edit the slot/appointment
+     * @param bool $canview whether the use can view the appointment
+     */
+    public function add_slot(scheduler_slot $slotmodel, scheduler_appointment $appointmentmodel,
+                             $otherstudents, $cancancel = false, $canedit = false, $canview = false) {
+        $slot = new stdClass();
+        $slot->slotid = $slotmodel->id;
+        if ($this->showstudent) {
+            $slot->student = $appointmentmodel->student;
+        }
+        $slot->starttime = $slotmodel->starttime;
+        $slot->endtime = $slotmodel->endtime;
+        $slot->attended = $appointmentmodel->attended;
+        $slot->location = $slotmodel->appointmentlocation;
+        $slot->slotnote = $slotmodel->notes;
+        $slot->slotnoteformat = $slotmodel->notesformat;
+        $slot->teacher = $slotmodel->get_teacher();
+        $slot->appointmentid = $appointmentmodel->id;
+        if ($this->scheduler->uses_appointmentnotes()) {
+            $slot->appointmentnote = $appointmentmodel->appointmentnote;
+            $slot->appointmentnoteformat = $appointmentmodel->appointmentnoteformat;
+        }
+        if ($this->scheduler->uses_teachernotes() && $this->showteachernotes) {
+            $slot->teachernote = $appointmentmodel->teachernote;
+            $slot->teachernoteformat = $appointmentmodel->teachernoteformat;
+        }
+        $slot->otherstudents = $otherstudents;
+        $slot->cancancel = $cancancel;
+        $slot->canedit = $canedit;
+        $slot->canview = $canview;
+        if ($this->showgrades) {
+            $slot->grade = $appointmentmodel->grade;
+        }
+        $this->showactions = $this->showactions || $cancancel;
+        $this->hasotherstudents = $this->hasotherstudents || (bool) $otherstudents;
+
+        $this->slots[] = $slot;
+    }
+
+    /**
+     * Create a new slot table.
+     *
+     * @param scheduler_instance $scheduler the scheduler in which the slots are
+     * @param bool $showgrades whether to show grades
+     * @param moodle_url|null $actionurl action URL for buttons
+     */
+    public function __construct(scheduler_instance $scheduler, $showgrades=true, $actionurl = null) {
+        $this->scheduler = $scheduler;
+        $this->showgrades = $showgrades && $scheduler->uses_grades();
+        $this->actionurl = $actionurl;
+    }
+
+}
+
+
+/**
+ * This class represents a list of students in a slot, to be displayed "inline" within a larger table
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_student_list implements renderable {
+
+    /** @var array list of students to be displayed */
+    public $students = array();
+
+    /** @var scheduler_instance the scheduler in whose context the list is */
+    public $scheduler;
+
+    /** @var bool whether tho show the grades of the students */
+    public $showgrades;
+
+    /** @var bool whether to show students in an expandable list */
+    public $expandable = true;
+
+    /** @var bool whether the expandable list is already expanded */
+    public $expanded = true;
+
+    /** @var bool whether appointments can be edited */
+    public $editable = false;
+
+    /** @var string name of the checkbox group used for marking students as seen */
+    public $checkboxname = '';
+
+    /** @var string text of the edit button */
+    public $buttontext = '';
+
+    /** @var moodle_url|null action URL for buttons */
+    public $actionurl = null;
+
+    /** @var bool whether to include links to individual appointments */
+    public $linkappointment = false;
+
+    /**
+     * Add a student to the list.
+     *
+     * @param scheduler_appointment $appointment the appointment to add (one student)
+     * @param bool $highlight whether this entry is highlighted
+     * @param bool $checked whether the "seen" tickbox is checked
+     * @param bool $showgrade whether to show a grade with this entry
+     * @param bool $showstudprovided whether to show an icon for student-provided files
+     */
+    public function add_student(scheduler_appointment $appointment, $highlight, $checked = false,
+                                $showgrade = true, $showstudprovided = false) {
+        $student = new stdClass();
+        $student->user = $appointment->get_student();
+        if ($this->showgrades && $showgrade) {
+            $student->grade = $appointment->grade;
+        } else {
+            $student->grade = null;
+        }
+        $student->highlight = $highlight;
+        $student->checked = $checked;
+        $student->entryid = $appointment->id;
+        $scheduler = $appointment->get_scheduler();
+        $student->notesprovided = false;
+        $student->filesprovided = 0;
+        if ($showstudprovided) {
+            $student->notesprovided = $scheduler->uses_studentnotes() && $appointment->has_studentnotes();
+            if ($scheduler->uses_studentfiles()) {
+                $student->filesprovided = $appointment->count_studentfiles();
+            }
+        }
+        $this->students[] = $student;
+    }
+
+    /**
+     * Create a new student list.
+     *
+     * @param scheduler_instance $scheduler the scheduler in whose context the list is
+     * @param bool $showgrades whether tho show grades of students
+     */
+    public function __construct(scheduler_instance $scheduler, $showgrades = true) {
+        $this->scheduler = $scheduler;
+        $this->showgrades = $showgrades;
+    }
+
+}
+
+
+/**
+ * This class represents a table of slots which a student can book.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_slot_booker implements renderable {
+
+    /**
+     * @var array list of slots to be displayed
+     */
+    public $slots = array();
+
+    /**
+     * @var scheduler_instance scheduler in whose context the list is
+     */
+    public $scheduler;
+
+    /**
+     * @var int the id number of the student booking slots
+     */
+    public $studentid;
+
+    /**
+     * @var moodle_url action url for buttons
+     */
+    public $actionurl;
+
+    /**
+     * Add a slot to the list.
+     *
+     * @param scheduler_slot $slotmodel the slot to be added
+     * @param bool $canbook whether the slot can be booked
+     * @param bool $bookedbyme whether the slot is already booked by the current student
+     * @param string $groupinfo information about group slots
+     * @param array $otherstudents other students in this slot
+     */
+    public function add_slot(scheduler_slot $slotmodel, $canbook, $bookedbyme, $groupinfo, $otherstudents) {
+        $slot = new stdClass();
+        $slot->slotid = $slotmodel->id;
+        $slot->starttime = $slotmodel->starttime;
+        $slot->endtime = $slotmodel->endtime;
+        $slot->location = $slotmodel->appointmentlocation;
+        $slot->notes = $slotmodel->notes;
+        $slot->notesformat = $slotmodel->notesformat;
+        $slot->bookedbyme = $bookedbyme;
+        $slot->canbook = $canbook;
+        $slot->groupinfo = $groupinfo;
+        $slot->teacher = $slotmodel->get_teacher();
+        $slot->otherstudents = $otherstudents;
+
+        $this->slots[] = $slot;
+    }
+
+    /**
+     * Contructs a slot booker.
+     *
+     * @param scheduler_instance $scheduler the scheduler in which the booking takes place
+     * @param int $studentid the student who books
+     * @param moodle_url action_url
+     * @param int $maxselect no longer used
+     */
+    public function __construct(scheduler_instance $scheduler, $studentid, moodle_url $actionurl, $maxselect) {
+        $this->scheduler = $scheduler;
+        $this->studentid = $studentid;
+        $this->actionurl = $actionurl;
+    }
+
+}
+
+/**
+ * Command bar with action buttons, used by teachers.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_command_bar implements renderable {
+
+    /**
+     * @var array list of drop-down menus in the command bar
+     */
+    public $menus = array();
+
+    /**
+     * @var array list of action_link objects used in the menu
+     */
+    public $linkactions = array();
+
+    /**
+     * @var string title of the menu
+     */
+    public $title = '';
+
+    /**
+     * Adds a group of menu items in a menu.
+     *
+     * @param string $title the title of the group
+     * @param array $actions an array of action_menu_link instances, representing the commands
+     */
+    public function add_group($title, array $actions) {
+        $menu = new action_menu($actions);
+        $menu->actiontext = $title;
+        $this->menus[] = $menu;
+    }
+
+    /**
+     * Creates an action link with an optional confirmation dialogue attached.
+     *
+     * @param moodle_url $url URL of the action
+     * @param string $titlekey key of the link title
+     * @param string $iconkey key of the icon to display
+     * @param string|null $confirmkey key for the confirmation text
+     * @param string|null $id id attribute of the new link
+     * @return action_link the new action link
+     */
+    public function action_link(moodle_url $url, $titlekey, $iconkey, $confirmkey = null, $id = null) {
+        $title = get_string($titlekey, 'scheduler');
+        $pix = new pix_icon($iconkey, $title, 'moodle', array('class' => 'iconsmall', 'title' => ''));
+        $attributes = array();
+        if ($id) {
+            $attributes['id'] = $id;
+        }
+        $confirmaction = null;
+        if ($confirmkey) {
+            $confirmaction = new confirm_action(get_string($confirmkey, 'scheduler'));
+        }
+        $act = new action_link($url, $title, $confirmaction, $attributes, $pix);
+        $act->primary = false;
+        return $act;
+    }
+
+    /**
+     * Contructs a command bar
+     */
+    public function __construct() {
+        // Nothing to add right now.
+    }
+
+}
+
+/**
+ * This class represents a table of slots displayed to a teacher, with options to modify the list.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_slot_manager implements renderable {
+
+    /**
+     * @var array list of slots
+     */
+    public $slots = array();
+
+    /**
+     * @var scheduler_instance scheduler in whose context the list is
+     */
+    public $scheduler;
+
+    /**
+     * @var moodle_url action URL for buttons
+     */
+    public $actionurl;
+
+    /**
+     * @var bool should the teacher owning the slot be shown?
+     */
+    public $showteacher = true;
+
+    /**
+     * Add a slot to the list.
+     *
+     * @param scheduler_slot $slotmodel the slot to be added
+     * @param scheduler_student_list $students the list of students in the slot
+     * @param bool $editable whether the slot is editable
+     */
+    public function add_slot(scheduler_slot $slotmodel, scheduler_student_list $students, $editable) {
+        $slot = new stdClass();
+        $slot->slotid = $slotmodel->id;
+        $slot->starttime = $slotmodel->starttime;
+        $slot->endtime = $slotmodel->endtime;
+        $slot->location = $slotmodel->appointmentlocation;
+        $slot->teacher = $slotmodel->get_teacher();
+        $slot->students = $students;
+        $slot->editable = $editable;
+        $slot->isattended = $slotmodel->is_attended();
+        $slot->isappointed = $slotmodel->get_appointment_count();
+        $slot->exclusivity = $slotmodel->exclusivity;
+
+        $this->slots[] = $slot;
+    }
+
+    /**
+     * Contructs a slot manager.
+     *
+     * @param scheduler_instance $scheduler the scheduler in which the booking takes place
+     * @param moodle_url $actionurl action URL for buttons
+     */
+    public function __construct(scheduler_instance $scheduler, moodle_url $actionurl) {
+        $this->scheduler = $scheduler;
+        $this->actionurl = $actionurl;
+    }
+
+}
+
+
+/**
+ * A list of students displayed to a teacher, with action menus to schedule the students.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_scheduling_list implements renderable {
+
+    /**
+     * @var array lines in the list
+     */
+    public $lines = array();
+
+    /**
+     * @var scheduler_instance the scheduler in whose context the list is
+     */
+    public $scheduler;
+
+    /**
+     * @var array extra headers for custom fields in the list
+     */
+    public $extraheaders;
+
+    /**
+     * @var string HTML id of the list
+     */
+    public $id = 'schedulinglist';
+
+    /**
+     * Add a line to the list.
+     *
+     * @param string $pix icon to display next to the student's name
+     * @param string $name name of the student
+     * @param array $extrafields content of extra data fields to be displayed
+     * @param array $actions actions to be displayed in an action menu
+     */
+    public function add_line($pix, $name, array $extrafields, $actions) {
+        $line = new stdClass();
+        $line->pix = $pix;
+        $line->name = $name;
+        $line->extrafields = $extrafields;
+        $line->actions = $actions;
+
+        $this->lines[] = $line;
+    }
+
+    /**
+     * Contructs a scheduling list.
+     *
+     * @param scheduler_instance $scheduler the scheduler in which the booking takes place
+     * @param array $extraheaders headers for extra data fields
+     */
+    public function __construct(scheduler_instance $scheduler, array $extraheaders) {
+        $this->scheduler = $scheduler;
+        $this->extraheaders = $extraheaders;
+    }
+
+}
+
+
+/**
+ * Represents information about a student's total grade in the scheduler, plus gradebook information.
+ * To be used in teacher screens.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_totalgrade_info implements renderable {
+
+    /**
+     * @var stdClass|null gradebook grade for the student
+     */
+    public $gbgrade;
+
+    /**
+     * @var scheduler_instance scheduler in whose context the information is
+     */
+    public $scheduler;
+
+    /**
+     * @var bool whether to show a total grade
+     */
+    public $showtotalgrade;
+
+    /**
+     * @var int the total grade to display
+     */
+    public $totalgrade;
+
+    /**
+     * Constructs a grade info object
+     *
+     * @param scheduler_instance $scheduler the scheduler in question
+     * @param stdClass $gbgrade information about the grade in the gradebook (may be null)
+     * @param bool $showtotalgrade whether the total grade in the scheduler should be shown
+     * @param int $totalgrade the total grade of the student in this scheduler
+     */
+    public function __construct(scheduler_instance $scheduler, $gbgrade, $showtotalgrade = false, $totalgrade = 0) {
+        $this->scheduler = $scheduler;
+        $this->gbgrade = $gbgrade;
+        $this->showtotalgrade = $showtotalgrade;
+        $this->totalgrade = $totalgrade;
+    }
+
+}
+
+/**
+ * This class represents a list of scheduling conflicts.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_conflict_list implements renderable {
+
+    /**
+     * @var array list of conflicts
+     */
+    public $conflicts = array();
+
+    /**
+     * Add a conflict to the list.
+     *
+     * @param stdClass $conflict information about the conflict
+     * @param stdClass $user the user who is affected
+     */
+    public function add_conflict(stdClass $conflict, $user = null) {
+        $c = clone($conflict);
+        if ($user) {
+            $c->userfullname = fullname($user);
+        } else {
+            $c->userfullname = '';
+        }
+        $this->conflicts[] = $c;
+    }
+
+    /**
+     * Add several conflicts to the list.
+     *
+     * @param array $conflicts information about the conflicts
+     */
+    public function add_conflicts(array $conflicts) {
+        foreach ($conflicts as $c) {
+            $this->add_conflict($c);
+        }
+    }
+
+}
+
+/**
+ * Information about an appointment in the scheduler.
+ *
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_appointment_info implements renderable {
+
+    /**
+     * @var scheduler_instance scheduler in whose context the appointment is
+     */
+    public $scheduler;
+
+    /**
+     * @var scheduler_slot slot in which the appointment is
+     */
+    public $slot;
+
+    /**
+     * @var scheduler_appointment the appointment itself
+     */
+    public $appointment;
+
+    /**
+     * @var bool whether to show information about the slot (times, etc.)
+     */
+    public $showslotinfo;
+
+    /**
+     * @var bool whether to show booking instructions
+     */
+    public $showbookinginfo;
+
+    /**
+     * @var bool whether to show information about the student
+     */
+    public $showstudentdata;
+
+    /**
+     * @var string information about the group the booking is for
+     */
+    public $groupinfo;
+
+    /**
+     * @var bool whether the information is shown to a student (rather than a teacher)
+     */
+    public $onstudentside;
+
+    /**
+     * @var bool whether to show grades and appointment notes
+     */
+    public $showresult;
+
+    /**
+     * Create appointment information for a new appointment in a slot.
+     *
+     * @param scheduler_slot $slot the slot in question
+     * @param bool $showbookinginstr whether to show booking instructions
+     * @param bool $onstudentside whether the screen is shown to a student
+     * @param string $groupinfo information about the group that the booking is for
+     * @return scheduler_appointment_info
+     */
+    public static function make_from_slot(scheduler_slot $slot, $showbookinginstr = true, $onstudentside = true,
+                                          $groupinfo = null) {
+        $info = new scheduler_appointment_info();
+        $info->slot = $slot;
+        $info->scheduler = $slot->get_scheduler();
+        $info->showslotinfo = true;
+        $info->showbookinginfo = $showbookinginstr;
+        $info->showstudentdata   = false;
+        $info->showresult   = false;
+        $info->onstudentside = $onstudentside;
+        $info->groupinfo = $groupinfo;
+
+        return $info;
+    }
+
+    /**
+     * Create appointment information for an existing appointment.
+     *
+     * @param scheduler_slot $slot the slot in question
+     * @param scheduler_appointment $appointment the appointment in question
+     * @param string $onstudentside whether the screen is shown to a student
+     * @return scheduler_appointment_info
+     */
+    public static function make_from_appointment(scheduler_slot $slot, scheduler_appointment $appointment, $onstudentside = true) {
+        $info = new scheduler_appointment_info();
+        $info->slot = $slot;
+        $info->appointment = $appointment;
+        $info->scheduler = $slot->get_scheduler();
+        $info->showslotinfo = true;
+        $info->showboookinginfo = true;
+        $info->showstudentdata = $info->scheduler->uses_studentdata();
+        $info->showresult   = true;
+        $info->onstudentside = $onstudentside;
+        $info->groupinfo = null;
+
+        return $info;
+    }
+
+    /**
+     * Create appointment information for an existing appointment, shown to a teacher.
+     * This excludes booking instructions and results.
+     *
+     * @param scheduler_slot $slot the slot in question
+     * @param scheduler_appointment $appointment the appointment in question
+     * @return scheduler_appointment_info
+     */
+    public static function make_for_teacher(scheduler_slot $slot, scheduler_appointment $appointment) {
+        $info = new scheduler_appointment_info();
+        $info->slot = $slot;
+        $info->appointment = $appointment;
+        $info->scheduler = $slot->get_scheduler();
+        $info->showslotinfo = true;
+        $info->showboookinginfo = false;
+        $info->showstudentdata = $info->scheduler->uses_studentdata();
+        $info->showresult   = false;
+        $info->onstudentside = false;
+        $info->groupinfo = null;
+
+        return $info;
+    }
+
+}
\ No newline at end of file
diff --git a/mod/scheduler/renderer.php b/mod/scheduler/renderer.php
new file mode 100644
index 0000000..fec2c3f
--- /dev/null
+++ b/mod/scheduler/renderer.php
@@ -0,0 +1,1064 @@
+<?php
+
+/**
+ * This file contains a renderer for the scheduler module
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/assign/locallib.php');
+
+/**
+ * A custom renderer class that extends the plugin_renderer_base and is used by the scheduler module.
+ *
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_scheduler_renderer extends plugin_renderer_base {
+
+    /**
+     * Format a date in the current user's timezone.
+     * @param int $date a timestamp
+     * @return string printable date
+     */
+    public static function userdate($date) {
+        if ($date == 0) {
+            return '';
+        } else {
+            return userdate($date, get_string('strftimedaydate'));
+        }
+    }
+
+    /**
+     * Format a time in the current user's timezone.
+     * @param int $date a timestamp
+     * @return string printable time
+     */
+    public static function usertime($date) {
+        if ($date == 0) {
+            return '';
+        } else {
+            $timeformat = get_user_preferences('calendar_timeformat'); // Get user config.
+            if (empty($timeformat)) {
+                $timeformat = get_config(null, 'calendar_site_timeformat'); // Get calendar config if above not exist.
+            }
+            if (empty($timeformat)) {
+                $timeformat = get_string('strftimetime'); // Get locale default format if both of the above do not exist.
+            }
+            return userdate($date, $timeformat);
+        }
+    }
+
+    /**
+     * Format a slot date and time, for use as a parameter in a language string.
+     *
+     * @param int $slotdate
+     *            a timestamp, start time of the slot
+     * @param int $duration
+     *            length of the slot in minutes
+     * @return stdClass date and time formatted for usage in language strings
+     */
+    public static function slotdatetime($slotdate, $duration) {
+        $shortformat = get_string('strftimedatetimeshort');
+
+        $a = new stdClass();
+        $a->date = self::userdate($slotdate);
+        $a->starttime = self::usertime($slotdate);
+        $a->shortdatetime = userdate($slotdate, $shortformat);
+        $a->endtime = self::usertime($slotdate + $duration * MINSECS);
+        $a->duration = $duration;
+
+        return $a;
+    }
+
+    /**
+     * @var array a cached version of scale levels
+     */
+    protected $scalecache = array();
+
+    /**
+     * Get a list of levels in a grading scale.
+     *
+     * @param int $scaleid id number of the scale
+     * @return array levels on the scale
+     */
+    public function get_scale_levels($scaleid) {
+        global $DB;
+
+        if (!array_key_exists($scaleid, $this->scalecache)) {
+            $this->scalecache[$scaleid] = array();
+            if ($scale = $DB->get_record('scale', array('id' => $scaleid))) {
+                $levels = explode(',', $scale->scale);
+                foreach ($levels as $levelid => $value) {
+                    $this->scalecache[$scaleid][$levelid + 1] = $value;
+                }
+            }
+        }
+        return $this->scalecache[$scaleid];
+    }
+
+    /**
+     * Formats a grade in a specific scheduler for display.
+     *
+     * @param mixed $subject either a scheduler instance or a scale id
+     * @param string $grade the grade to be displayed
+     * @param bool $short formats the grade in short form (result empty if grading is
+     * not used, or no grade is available; parantheses are put around the grade if it is present)
+     * @return string the formatted grade
+     */
+    public function format_grade($subject, $grade, $short = false) {
+        if ($subject instanceof scheduler_instance) {
+            $scaleid = $subject->scale;
+        } else {
+            $scaleid = (int) $subject;
+        }
+
+        $result = '';
+        if ($scaleid == 0 || is_null($grade) ) {
+            // Scheduler doesn't allow grading, or no grade entered.
+            if (!$short) {
+                $result = get_string('nograde');
+            }
+        } else {
+            $grade = (int) $grade;
+            if ($scaleid > 0) {
+                // Numeric grade.
+                $result .= $grade;
+                if (strlen($grade) > 0) {
+                    $result .= '/' . $scaleid;
+                }
+            } else {
+                // Grade on scale.
+                if ($grade > 0) {
+                    $levels = $this->get_scale_levels(-$scaleid);
+                    if (array_key_exists($grade, $levels)) {
+                        $result .= $levels[$grade];
+                    }
+                }
+            }
+            if ($short && (strlen($result) > 0)) {
+                $result = '('.$result.')';
+            }
+        }
+        return $result;
+    }
+
+    /**
+     * A utility function for producing grading lists (for use in formslib)
+     *
+     * Note that the selection list will contain a "nothing selected" option
+     * with key -1 which will be displayed as "No grade".
+     *
+     * @param reference $scheduler
+     * @return array the choices to be displayed in a grade chooser
+     */
+    public function grading_choices($scheduler) {
+        if ($scheduler->scale > 0) {
+            $scalegrades = array();
+            for ($i = 0; $i <= $scheduler->scale; $i++) {
+                $scalegrades[$i] = $i;
+            }
+        } else {
+            $scaleid = - ($scheduler->scale);
+            $scalegrades = $this->get_scale_levels($scaleid);
+        }
+        $scalegrades = array(-1 => get_string('nograde')) + $scalegrades;
+        return $scalegrades;
+    }
+
+    /**
+     * Return a string describing the grading strategy of a scheduler.
+     *
+     * @param int $strategy id number for the strategy
+     * @return string description of the strategy
+     */
+    public function format_grading_strategy($strategy) {
+        if ($strategy == SCHEDULER_MAX_GRADE) {
+            return get_string('maxgrade', 'scheduler');
+        } else {
+            return get_string('meangrade', 'scheduler');
+        }
+    }
+
+    /**
+     * Format a user-entered "note" on a slot or appointment, adjusting any links to embedded files.
+     *
+     * @param string $content content of the note
+     * @param int $format format of the note
+     * @param context $context context of the note
+     * @param string $area file ara for embedded files
+     * @param int $itemid item id for embedded files
+     * @return string the formatted note
+     */
+    public function format_notes($content, $format, $context, $area, $itemid) {
+        $text = file_rewrite_pluginfile_urls($content, 'pluginfile.php', $context->id, 'mod_scheduler', $area, $itemid);
+        return format_text($text, $format);
+    }
+
+    /**
+     * Format the notes relating to an appointment (appointment notes and confidential notes).
+     *
+     * @param scheduler_instance $scheduler the scheduler in whose context the appointment is
+     * @param stdClass $data database record describing the appointment
+     * @param string $idfield the field in the record containing the item id
+     * @return string formatted notes
+     */
+    public function format_appointment_notes(scheduler_instance $scheduler, $data, $idfield = 'id') {
+        $note = '';
+        $id = $data->{$idfield};
+        if (isset($data->appointmentnote) && $scheduler->uses_appointmentnotes()) {
+            $note .= $this->format_notes($data->appointmentnote, $data->appointmentnoteformat, $scheduler->get_context(),
+                                         'appointmentnote', $id);
+        }
+        if (isset($data->teachernote) && $scheduler->uses_teachernotes()) {
+            $note .= $this->format_notes($data->teachernote, $data->teachernoteformat, $scheduler->get_context(),
+                                         'teachernote', $id);
+        }
+        return $note;
+    }
+
+    /**
+     * Produce HTML code for a link to a user's profile.
+     * That is, the full name of the user is displayed with a link to the user's course profile on it.
+     *
+     * @param scheduler_instance $scheduler the scheduler in whose context the link is
+     * @param stdClass $user the user to link to
+     * @return string HTML code of the link
+     */
+    public function user_profile_link(scheduler_instance $scheduler, stdClass $user) {
+        $profileurl = new moodle_url('/user/view.php', array('id' => $user->id, 'course' => $scheduler->course));
+        return html_writer::link($profileurl, fullname($user));
+    }
+
+    /**
+     * Produce HTML code for a link to a user's appointment.
+     * That is, the full name of the user is displayed with a link to a given appointment.
+     *
+     * @param unknown $scheduler the scheduler in whose context the link is
+     * @param unknown $user the use in question
+     * @param unknown $appointmentid id number of the appointment to link to
+     * @return string HTML code of the link
+     */
+    public function appointment_link($scheduler, $user, $appointmentid) {
+        $paras = array(
+                        'what' => 'viewstudent',
+                        'id' => $scheduler->cmid,
+                        'appointmentid' => $appointmentid
+        );
+        $url = new moodle_url('/mod/scheduler/view.php', $paras);
+        return html_writer::link($url, fullname($user));
+    }
+
+    /**
+     * Render a list of files in a filearea.
+     *
+     * @param int $contextid id number of the context of the files
+     * @param string $filearea name of the file area
+     * @param int $itemid item id in the file area
+     * @return string rendered list of files
+     */
+    public function render_attachments($contextid, $filearea, $itemid) {
+
+        $fs = get_file_storage();
+        $o = '';
+
+        // We retrieve all files according to the time that they were created.  In the case that several files were uploaded
+        // at the sametime (e.g. in the case of drag/drop upload) we revert to using the filename.
+        $files = $fs->get_area_files($contextid, 'mod_scheduler', $filearea, $itemid, "filename", false);
+        if ($files) {
+            $o .= html_writer::start_tag('ul', array('class' => 'scheduler_filelist'));
+            foreach ($files as $file) {
+                $filename = $file->get_filename();
+                $pathname = $file->get_filepath();
+                $mimetype = $file->get_mimetype();
+                $iconimage = $this->pix_icon(file_file_icon($file), get_mimetype_description($file),
+                                             'moodle', array('class' => 'icon'));
+                $path = moodle_url::make_pluginfile_url($contextid, 'mod_scheduler', $filearea, $itemid, $pathname, $filename);
+
+                $ulitem = html_writer::link($path, $iconimage) . html_writer::link($path, s($filename));
+                $o .= html_writer::tag('ul', $ulitem);
+            }
+            $o .= html_writer::end_tag('ul');
+        }
+
+        return $o;
+    }
+
+
+    /**
+     * Render the module introduction of a scheduler.
+     *
+     * @param scheduler_instance $scheduler the scheduler in question
+     * @return string rendered module info
+     */
+    public function mod_intro($scheduler) {
+        $o = $this->heading(format_string($scheduler->name), 2);
+
+        if (trim(strip_tags($scheduler->intro))) {
+            $o .= $this->box_start('mod_introbox');
+            $o .= format_module_intro('scheduler', $scheduler->get_data(), $scheduler->cmid);
+            $o .= $this->box_end();
+        }
+        return $o;
+    }
+
+    /**
+     * Construct a tab header in the teacher view.
+     *
+     * @param moodle_url $baseurl
+     * @param string $namekey
+     * @param string $what
+     * @param string $subpage
+     * @param string $nameargs
+     * @return tabobject
+     */
+    private function teacherview_tab(moodle_url $baseurl, $namekey, $what, $subpage = '', $nameargs = null) {
+        $taburl = new moodle_url($baseurl, array('what' => $what, 'subpage' => $subpage));
+        $tabname = get_string($namekey, 'scheduler', $nameargs);
+        $id = ($subpage != '') ? $subpage : $what;
+        $tab = new tabobject($id, $taburl, $tabname);
+        return $tab;
+    }
+
+    /**
+     * Render the tab header hierarchy in the teacher view.
+     *
+     * @param scheduler_instance $scheduler the scheduler in question
+     * @param moodle_url $baseurl base URL for the tab addresses
+     * @param string $selected the selected tab
+     * @param array $inactive any inactive tabs
+     * @return string rendered tab tree
+     */
+    public function teacherview_tabs(scheduler_instance $scheduler, moodle_url $baseurl, $selected, $inactive = null) {
+
+        $statstab = $this->teacherview_tab($baseurl, 'statistics', 'viewstatistics', 'overall');
+        $statstab->subtree = array(
+                        $this->teacherview_tab($baseurl, 'overall', 'viewstatistics', 'overall'),
+                        $this->teacherview_tab($baseurl, 'studentbreakdown', 'viewstatistics', 'studentbreakdown'),
+                        $this->teacherview_tab($baseurl, 'staffbreakdown', 'viewstatistics', 'staffbreakdown',
+                                               $scheduler->get_teacher_name()),
+                        $this->teacherview_tab($baseurl, 'lengthbreakdown', 'viewstatistics', 'lengthbreakdown'),
+                        $this->teacherview_tab($baseurl, 'groupbreakdown', 'viewstatistics', 'groupbreakdown')
+        );
+
+        $level1 = array(
+                        $this->teacherview_tab($baseurl, 'myappointments', 'view', 'myappointments'),
+                        $this->teacherview_tab($baseurl, 'allappointments', 'view', 'allappointments'),
+                        $this->teacherview_tab($baseurl, 'datelist', 'datelist'),
+                        $statstab,
+                        $this->teacherview_tab($baseurl, 'export', 'export')
+        );
+
+        return $this->tabtree($level1, $selected, $inactive);
+    }
+
+    /**
+     * Render an action message (such as "1 slot added").
+     *
+     * @param string $message the message
+     * @param string $type type of the message
+     * @return string the rendered message
+     */
+    public function action_message($message, $type = 'success') {
+        $classes = 'actionmessage '.$type;
+        return html_writer::div($message, $classes);
+    }
+
+    /**
+     * Render a table of slots
+     *
+     * @param scheduler_slot_table $slottable the table to rended
+     * @return string the HTML output
+     */
+    public function render_scheduler_slot_table(scheduler_slot_table $slottable) {
+        $table = new html_table();
+
+        if ($slottable->showslot) {
+            $table->head  = array(get_string('date', 'scheduler'));
+            $table->align = array('left');
+        }
+        if ($slottable->showstudent) {
+            $table->head[]  = get_string('name');
+            $table->align[] = 'left';
+        }
+        if ($slottable->showattended) {
+            $table->head[] = get_string('seen', 'scheduler');
+            $table->align[] = 'center';
+        }
+        if ($slottable->showslot) {
+            $table->head[]  = $slottable->scheduler->get_teacher_name();
+            $table->align[] = 'left';
+        }
+        if ($slottable->showslot && $slottable->showlocation) {
+            $table->head[]  = get_string('location', 'scheduler');
+            $table->align[] = 'left';
+        }
+
+        $table->head[] = get_string('comments', 'scheduler');
+        $table->align[] = 'left';
+
+        if ($slottable->showgrades) {
+            $table->head[] = get_string('grade', 'scheduler');
+            $table->align[] = 'left';
+        } else if ($slottable->hasotherstudents) {
+            $table->head[] = get_string('otherstudents', 'scheduler');
+            $table->align[] = 'left';
+        }
+        if ($slottable->showactions) {
+            $table->head[] = '';
+            $table->align[] = 'right';
+        }
+
+        $table->data = array();
+
+        foreach ($slottable->slots as $slot) {
+            $rowdata = array();
+
+            $studenturl = new moodle_url($slottable->actionurl, array('appointmentid' => $slot->appointmentid));
+
+            $timedata = $this->userdate($slot->starttime);
+            if ($slottable->showeditlink) {
+                $timedata = $this->action_link($studenturl, $timedata);
+            }
+            $timedata = html_writer::div($timedata, 'datelabel');
+
+            $starttime = $this->usertime($slot->starttime);
+            $endtime   = $this->usertime($slot->endtime);
+            $timedata .= html_writer::div("{$starttime} &ndash; {$endtime}", 'timelabel');
+
+            if ($slottable->showslot) {
+                $rowdata[] = $timedata;
+            }
+
+            if ($slottable->showstudent) {
+                $name = fullname($slot->student);
+                if ($slottable->showeditlink) {
+                    $name = $this->action_link($studenturl, $name);
+                }
+                $rowdata[] = $name;
+            }
+
+            if ($slottable->showattended) {
+                $iconid = $slot->attended ? 'ticked' : 'unticked';
+                $iconhelp = $slot->attended ? 'seen' : 'notseen';
+                $attendedpix = $this->pix_icon($iconid, get_string($iconhelp, 'scheduler'), 'mod_scheduler');
+                $rowdata[] = $attendedpix;
+            }
+
+            if ($slottable->showslot) {
+                $rowdata[] = $this->user_profile_link($slottable->scheduler, $slot->teacher);
+            }
+
+            if ($slottable->showslot && $slottable->showlocation) {
+                $rowdata[] = format_string($slot->location);
+            }
+
+            $notes = '';
+            if ($slottable->showslot && isset($slot->slotnote)) {
+                $notes .= $this->format_notes($slot->slotnote, $slot->slotnoteformat,
+                                              $slottable->scheduler->get_context(), 'slotnote', $slot->slotid);
+            }
+            $notes .= $this->format_appointment_notes($slottable->scheduler, $slot, 'appointmentid');
+            $rowdata[] = $notes;
+
+            if ($slottable->showgrades || $slottable->hasotherstudents) {
+                $gradedata = '';
+                if ($slot->otherstudents) {
+                    $gradedata = $this->render($slot->otherstudents);
+                } else if ($slottable->showgrades) {
+                    $gradedata = $this->format_grade($slottable->scheduler, $slot->grade);
+                }
+                $rowdata[] = $gradedata;
+            }
+            if ($slottable->showactions) {
+                $actions = '';
+                if ($slot->canedit) {
+                    $buttonurl = new moodle_url($slottable->actionurl,
+                                     array('what' => 'editbooking', 'appointmentid' => $slot->appointmentid));
+                    $button = new single_button($buttonurl, get_string('editbooking', 'scheduler'));
+                    $actions .= $this->render($button);
+                }
+                if ($slot->canview) {
+                    $buttonurl = new moodle_url($slottable->actionurl,
+                                     array('what' => 'viewbooking', 'appointmentid' => $slot->appointmentid));
+                    $button = new single_button($buttonurl, get_string('viewbooking', 'scheduler'));
+                    $actions .= $this->render($button);
+                }
+                if ($slot->cancancel) {
+                    $buttonurl = new moodle_url($slottable->actionurl,
+                                     array('what' => 'cancelbooking', 'slotid' => $slot->slotid));
+                    $button = new single_button($buttonurl, get_string('cancelbooking', 'scheduler'));
+                    $actions .= $this->render($button);
+                }
+                $rowdata[] = $actions;
+            }
+            $table->data[] = $rowdata;
+        }
+
+        return html_writer::table($table);
+    }
+
+    /**
+     * Rendering a list of student, to be displayed within a larger table
+     *
+     * @param scheduler_student_list $studentlist
+     * @return string
+     */
+    public function render_scheduler_student_list(scheduler_student_list $studentlist) {
+
+        $o = '';
+
+        $toggleid = html_writer::random_id('toggle');
+
+        if ($studentlist->expandable && count($studentlist->students) > 0) {
+            $this->page->requires->yui_module('moodle-mod_scheduler-studentlist',
+                            'M.mod_scheduler.studentlist.init',
+                            array($toggleid, (boolean) $studentlist->expanded) );
+            $imgclass = 'studentlist-togglebutton';
+            $alttext = get_string('showparticipants', 'scheduler');
+            $o .= $this->output->pix_icon('t/switch', $alttext, 'moodle',
+                            array('id' => $toggleid, 'class' => $imgclass));
+        }
+
+        $divprops = array('id' => 'list'.$toggleid);
+        $o .= html_writer::start_div('studentlist', $divprops);
+        if (count($studentlist->students) > 0) {
+            $editable = $studentlist->actionurl && $studentlist->editable;
+            if ($editable) {
+                $o .= html_writer::start_tag('form', array('action' => $studentlist->actionurl,
+                                'method' => 'post', 'class' => 'studentselectform'));
+            }
+
+            foreach ($studentlist->students as $student) {
+                $class = 'otherstudent';
+                $checkbox = '';
+                if ($studentlist->checkboxname) {
+                    if ($editable) {
+                        $checkbox = html_writer::checkbox($studentlist->checkboxname, $student->entryid, $student->checked, '',
+                                        array('class' => 'studentselect'));
+                    } else {
+                        $img = $student->checked ? 'ticked' : 'unticked';
+                        $checkbox = $this->render(new pix_icon($img, '', 'scheduler', array('class' => 'statictickbox')));
+                    }
+                }
+                if ($studentlist->linkappointment) {
+                    $name = $this->appointment_link($studentlist->scheduler, $student->user, $student->entryid);
+                } else {
+                    $name = fullname($student->user);
+                }
+                $studicons = '';
+                $studprovided = array();
+                if ($student->notesprovided) {
+                    $studprovided[] = get_string('message', 'scheduler');
+                }
+                if ($student->filesprovided) {
+                    $studprovided[] = get_string('nfiles', 'scheduler', $student->filesprovided);
+                }
+                if ($studprovided) {
+                    $providedstr = implode(', ', $studprovided);
+                    $alttext = get_string('studentprovided', 'scheduler', $providedstr);
+                    $attachicon = new pix_icon('attachment', $alttext, 'scheduler', array('class' => 'studdataicon'));
+                    $studicons .= $this->render($attachicon);
+                }
+
+                if ($student->highlight) {
+                    $class .= ' highlight';
+                }
+                $picture = $this->user_picture($student->user, array('courseid' => $studentlist->scheduler->courseid));
+                $grade = '';
+                if ($studentlist->showgrades && $student->grade) {
+                    $grade = $this->format_grade($studentlist->scheduler, $student->grade, true);
+                }
+                $o .= html_writer::div($checkbox . $picture . ' ' . $name . $studicons . ' ' . $grade, $class);
+            }
+
+            if ($editable) {
+                $o .= html_writer::empty_tag('input', array(
+                                'type' => 'submit',
+                                'class' => 'studentselectsubmit',
+                                'value' => $studentlist->buttontext
+                ));
+                $o .= html_writer::end_tag('form');
+            }
+        }
+        $o .= html_writer::end_div();
+
+        return $o;
+    }
+
+    /**
+     * Render a slot booker.
+     *
+     * @param scheduler_slot_booker $booker
+     * @return string
+     */
+    public function render_scheduler_slot_booker(scheduler_slot_booker $booker) {
+
+        $table = new html_table();
+        $table->head  = array( get_string('date', 'scheduler'), get_string('start', 'scheduler'),
+                        get_string('end', 'scheduler'), get_string('location', 'scheduler'),
+                        get_string('comments', 'scheduler'), s($booker->scheduler->get_teacher_name()),
+                        get_string('groupsession', 'scheduler'), '');
+        $table->align = array ('left', 'left', 'left', 'left', 'left', 'left', 'left', 'left');
+        $table->id = 'slotbookertable';
+        $table->data = array();
+
+        $previousdate = '';
+        $previoustime = '';
+        $previousendtime = '';
+        $canappoint = false;
+
+        foreach ($booker->slots as $slot) {
+
+            $rowdata = array();
+
+            $startdate = $this->userdate($slot->starttime);
+            $starttime = $this->usertime($slot->starttime);
+            $endtime = $this->usertime($slot->endtime);
+            // Simplify display of dates, start and end times.
+            if ($startdate == $previousdate && $starttime == $previoustime && $endtime == $previousendtime) {
+                // If this row exactly matches previous, there's nothing to display.
+                $startdatestr = '';
+                $starttimestr = '';
+                $endtimestr = '';
+            } else if ($startdate == $previousdate) {
+                // If this date matches previous date, just display times.
+                $startdatestr = '';
+                $starttimestr = $starttime;
+                $endtimestr = $endtime;
+            } else {
+                // Otherwise, display all elements.
+                $startdatestr = $startdate;
+                $starttimestr = $starttime;
+                $endtimestr = $endtime;
+            }
+
+            $rowdata[] = $startdatestr;
+            $rowdata[] = $starttimestr;
+            $rowdata[] = $endtimestr;
+
+            $rowdata[] = format_string($slot->location);
+
+            $rowdata[] = $this->format_notes($slot->notes, $slot->notesformat, $booker->scheduler->get_context(),
+                                             'slotnote', $slot->slotid);
+
+            $rowdata[] = $this->user_profile_link($booker->scheduler, $slot->teacher);
+
+            $groupinfo = $slot->bookedbyme ? get_string('complete', 'scheduler') : $slot->groupinfo;
+            if ($slot->otherstudents) {
+                $groupinfo .= $this->render($slot->otherstudents);
+            }
+
+            $rowdata[] = $groupinfo;
+
+            if ($slot->canbook) {
+                $bookaction = $booker->scheduler->uses_bookingform() ? 'bookingform' : 'bookslot';
+                $bookurl = new moodle_url($booker->actionurl, array('what' => $bookaction, 'slotid' => $slot->slotid));
+                $button = new single_button($bookurl, get_string('bookslot', 'scheduler'));
+                $rowdata[] = $this->render($button);
+            } else {
+                $rowdata[] = '';
+            }
+
+            $table->data[] = $rowdata;
+
+            $previoustime = $starttime;
+            $previousendtime = $endtime;
+            $previousdate = $startdate;
+        }
+
+        return html_writer::table($table);
+    }
+
+    /**
+     * Render a command bar.
+     *
+     * @param scheduler_command_bar $commandbar
+     * @return string
+     */
+    public function render_scheduler_command_bar(scheduler_command_bar $commandbar) {
+        $o = '';
+        foreach ($commandbar->linkactions as $id => $action) {
+            $this->add_action_handler($action, $id);
+        }
+        $o .= html_writer::start_div('commandbar');
+        if ($commandbar->title) {
+            $o .= html_writer::span($commandbar->title, 'title');
+        }
+        foreach ($commandbar->menus as $m) {
+            $o .= $this->render($m);
+        }
+        $o .= html_writer::end_div();
+        return $o;
+    }
+
+    /**
+     * Render a slot manager.
+     *
+     * @param scheduler_slot_manager $slotman
+     * @return string
+     */
+    public function render_scheduler_slot_manager(scheduler_slot_manager $slotman) {
+
+        $this->page->requires->yui_module('moodle-mod_scheduler-saveseen',
+                        'M.mod_scheduler.saveseen.init', array($slotman->scheduler->cmid) );
+
+        $o = '';
+
+        $table = new html_table();
+        $table->head  = array('', get_string('date', 'scheduler'), get_string('start', 'scheduler'),
+                        get_string('end', 'scheduler'), get_string('location', 'scheduler'), get_string('students', 'scheduler') );
+        $table->align = array ('center', 'left', 'left', 'left', 'left', 'left');
+        if ($slotman->showteacher) {
+            $table->head[] = s($slotman->scheduler->get_teacher_name());
+            $table->align[] = 'left';
+        }
+        $table->head[] = get_string('action', 'scheduler');
+        $table->align[] = 'center';
+
+        $table->id = 'slotmanager';
+        $table->data = array();
+
+        $previousdate = '';
+        $previoustime = '';
+        $previousendtime = '';
+
+        foreach ($slotman->slots as $slot) {
+
+            $rowdata = array();
+
+            $selectbox = html_writer::checkbox('selectedslot[]', $slot->slotid, false, '', array('class' => 'slotselect'));
+            $rowdata[] = $slot->editable ? $selectbox : '';
+
+            $startdate = $this->userdate($slot->starttime);
+            $starttime = $this->usertime($slot->starttime);
+            $endtime = $this->usertime($slot->endtime);
+            // Simplify display of dates, start and end times.
+            if ($startdate == $previousdate && $starttime == $previoustime && $endtime == $previousendtime) {
+                // If this row exactly matches previous, there's nothing to display.
+                $startdatestr = '';
+                $starttimestr = '';
+                $endtimestr = '';
+            } else if ($startdate == $previousdate) {
+                // If this date matches previous date, just display times.
+                $startdatestr = '';
+                $starttimestr = $starttime;
+                $endtimestr = $endtime;
+            } else {
+                // Otherwise, display all elements.
+                $startdatestr = $startdate;
+                $starttimestr = $starttime;
+                $endtimestr = $endtime;
+            }
+
+            $rowdata[] = $startdatestr;
+            $rowdata[] = $starttimestr;
+            $rowdata[] = $endtimestr;
+
+            $rowdata[] = format_string($slot->location);
+
+            $rowdata[] = $this->render($slot->students);
+
+            if ($slotman->showteacher) {
+                $rowdata[] = $this->user_profile_link($slotman->scheduler, $slot->teacher);
+            }
+
+            $actions = '';
+            if ($slot->editable) {
+                $url = new moodle_url($slotman->actionurl, array('what' => 'deleteslot', 'slotid' => $slot->slotid));
+                $confirmdelete = new confirm_action(get_string('confirmdelete-one', 'scheduler'));
+                $actions .= $this->action_icon($url, new pix_icon('t/delete', get_string('delete')), $confirmdelete);
+
+                $url = new moodle_url($slotman->actionurl, array('what' => 'updateslot', 'slotid' => $slot->slotid));
+                $actions .= $this->action_icon($url, new pix_icon('t/edit', get_string('edit')));
+            }
+
+            if ($slot->isattended || $slot->isappointed > 1) {
+                $groupicon = 'i/groupevent';
+            } else if ($slot->exclusivity == 1) {
+                $groupicon = 't/groupn';
+            } else {
+                $groupicon = 't/groupv';
+            }
+            $groupalt = ''; $groupact = null;
+            if ($slot->isattended) {
+                $groupalt = 'attended';
+            } else if ($slot->isappointed > 1) {
+                $groupalt = 'isnonexclusive';
+            } else if ($slot->editable) {
+                if ($slot->exclusivity == 1) {
+                    $groupact = array('what' => 'allowgroup', 'slotid' => $slot->slotid);
+                    $groupalt = 'allowgroup';
+                } else {
+                    $groupact = array('what' => 'forbidgroup', 'slotid' => $slot->slotid);
+                    $groupalt = 'forbidgroup';
+                }
+            } else {
+                if ($slot->exclusivity == 1) {
+                    $groupalt = 'allowgroup';
+                } else {
+                    $groupalt = 'forbidgroup';
+                }
+            }
+            if ($groupact) {
+                $url = new moodle_url($slotman->actionurl, $groupact);
+                $actions .= $this->action_icon($url, new pix_icon($groupicon, get_string($groupalt, 'scheduler')));
+            } else {
+                $actions .= $this->pix_icon($groupicon, get_string($groupalt, 'scheduler'));
+            }
+
+            if ($slot->editable && $slot->isappointed) {
+                $url = new moodle_url($slotman->actionurl, array('what' => 'revokeall', 'slotid' => $slot->slotid));
+                $actions .= $this->action_icon($url, new pix_icon('s/no', get_string('revoke', 'scheduler')));
+            }
+
+            if ($slot->exclusivity > 1) {
+                $actions .= ' ('.$slot->exclusivity.')';
+            }
+            $rowdata[] = $actions;
+
+            $table->data[] = $rowdata;
+
+            $previoustime = $starttime;
+            $previousendtime = $endtime;
+            $previousdate = $startdate;
+        }
+        $o .= html_writer::table($table);
+
+        return $o;
+    }
+
+    /**
+     * Render a scheduling list.
+     *
+     * @param scheduler_scheduling_list $list
+     * @return string
+     */
+    public function render_scheduler_scheduling_list(scheduler_scheduling_list $list) {
+
+        $mtable = new html_table();
+
+        $mtable->id = $list->id;
+        $mtable->head  = array ('', get_string('name'));
+        $mtable->align = array ('center', 'left');
+        foreach ($list->extraheaders as $field) {
+            $mtable->head[] = $field;
+            $mtable->align[] = 'left';
+        }
+        $mtable->head[] = get_string('action', 'scheduler');
+        $mtable->align[] = 'center';
+
+        $mtable->data = array();
+        foreach ($list->lines as $line) {
+            $data = array($line->pix, $line->name);
+            foreach ($line->extrafields as $field) {
+                $data[] = $field;
+            }
+            $actions = '';
+            if ($line->actions) {
+                $menu = new action_menu($line->actions);
+                $menu->actiontext = get_string('schedule', 'scheduler');
+                $actions = $this->render($menu);
+            }
+            $data[] = $actions;
+            $mtable->data[] = $data;
+        }
+        return html_writer::table($mtable);
+    }
+
+    /**
+     * Render total grade information.
+     *
+     * @param scheduler_totalgrade_info $gradeinfo
+     * @return string
+     */
+    public function render_scheduler_totalgrade_info(scheduler_totalgrade_info $gradeinfo) {
+        $items = array();
+
+        if ($gradeinfo->showtotalgrade) {
+            $items[] = array('gradingstrategy', $this->format_grading_strategy($gradeinfo->scheduler->gradingstrategy));
+            $items[] = array('totalgrade', $this->format_grade($gradeinfo->scheduler, $gradeinfo->totalgrade));
+        }
+
+        if (!is_null($gradeinfo->gbgrade)) {
+            $gbgradeinfo = $this->format_grade($gradeinfo->scheduler, $gradeinfo->gbgrade->grade);
+            $attributes = array();
+            if ($gradeinfo->gbgrade->hidden) {
+                $attributes[] = get_string('hidden', 'grades');
+            }
+            if ($gradeinfo->gbgrade->locked) {
+                $attributes[] = get_string('locked', 'grades');
+            }
+            if ($gradeinfo->gbgrade->overridden) {
+                $attributes[] = get_string('overridden', 'grades');
+            }
+            if (count($attributes) > 0) {
+                $gbgradeinfo .= ' ('.implode(', ', $attributes) .')';
+            }
+            $items[] = array('gradeingradebook', $gbgradeinfo);
+        }
+
+        $o = html_writer::start_div('totalgrade');
+        $o .= html_writer::start_tag('dl', array('class' => 'totalgrade'));
+        foreach ($items as $item) {
+            $o .= html_writer::tag('dt', get_string($item[0], 'scheduler'));
+            $o .= html_writer::tag('dd', $item[1]);
+        }
+        $o .= html_writer::end_tag('dl');
+        $o .= html_writer::end_div('totalgrade');
+        return $o;
+    }
+
+    /**
+     * Render a conflict list.
+     *
+     * @param scheduler_conflict_list $cl
+     * @return string
+     */
+    public function render_scheduler_conflict_list(scheduler_conflict_list $cl) {
+
+        $o = html_writer::start_tag('ul');
+
+        foreach ($cl->conflicts as $conflict) {
+            $a = new stdClass();
+            $a->datetime = userdate($conflict->starttime);
+            $a->duration = $conflict->duration;
+            if ($conflict->isself) {
+                $entry = get_string('conflictlocal', 'scheduler', $a);
+            } else {
+                $a->courseshortname = $conflict->courseshortname;
+                $a->coursefullname = $conflict->coursefullname;
+                $a->schedulername = format_string($conflict->schedulername);
+                $entry = get_string('conflictremote', 'scheduler', $a);
+            }
+            $o .= html_writer::tag('li', $entry);
+        }
+
+        $o .= html_writer::end_tag('ul');
+
+        return $o;
+    }
+
+
+    /**
+     * Render a table containing information about a booked appointment
+     *
+     * @param scheduler_appointment_info $ai
+     * @return string
+     */
+    public function render_scheduler_appointment_info(scheduler_appointment_info $ai) {
+        $o = '';
+        $o .= $this->output->container_start('appointmentinfotable');
+
+        $o .= $this->output->box_start('boxaligncenter appointmentinfotable');
+
+        $t = new html_table();
+
+        if ($ai->showslotinfo) {
+            $row = new html_table_row();
+            $cell1 = new html_table_cell(get_string('slotdatetimelabel', 'scheduler'));
+            $data = self::slotdatetime($ai->slot->starttime, $ai->slot->duration);
+            $cell2 = new html_table_cell(get_string('slotdatetimelong', 'scheduler', $data));
+            $row->cells = array($cell1, $cell2);
+            $t->data[] = $row;
+
+            $row = new html_table_row();
+            $cell1 = new html_table_cell($ai->scheduler->get_teacher_name());
+            $cell2 = new html_table_cell(fullname($ai->slot->get_teacher()));
+            $row->cells = array($cell1, $cell2);
+            $t->data[] = $row;
+
+            if ($ai->slot->appointmentlocation) {
+                $row = new html_table_row();
+                $cell1 = new html_table_cell(get_string('location', 'scheduler'));
+                $cell2 = new html_table_cell(format_string($ai->slot->appointmentlocation));
+                $row->cells = array($cell1, $cell2);
+                $t->data[] = $row;
+            }
+
+            if ($ai->slot->notes) {
+                $row = new html_table_row();
+                $cell1 = new html_table_cell(get_string('comments', 'scheduler'));
+                $notes = $this->format_notes($ai->slot->notes, $ai->slot->notesformat, $ai->scheduler->get_context(),
+                                              'slotnote', $ai->slot->id);
+                $cell2 = new html_table_cell($notes);
+                $row->cells = array($cell1, $cell2);
+                $t->data[] = $row;
+            }
+        }
+
+        if ($ai->groupinfo) {
+            $row = new html_table_row();
+            $cell1 = new html_table_cell(get_string('appointfor', 'scheduler'));
+            $cell2 = new html_table_cell(format_string($ai->groupinfo));
+            $row->cells = array($cell1, $cell2);
+            $t->data[] = $row;
+        }
+
+        if ($ai->showbookinginfo) {
+            if ($ai->scheduler->has_bookinginstructions()) {
+                $row = new html_table_row();
+                $cell1 = new html_table_cell(get_string('bookinginstructions', 'scheduler'));
+                $cell2 = new html_table_cell(format_text($ai->scheduler->bookinginstructions,
+                                                         $ai->scheduler->bookinginstructionsformat));
+                $row->cells = array($cell1, $cell2);
+                $t->data[] = $row;
+            }
+        }
+
+        if ($ai->showstudentdata) {
+            if ($ai->scheduler->uses_studentnotes()) {
+                $row = new html_table_row();
+                if ($ai->onstudentside) {
+                    $key = 'yourstudentnote';
+                } else {
+                    $key = 'studentnote';
+                }
+                $cell1 = new html_table_cell(get_string($key, 'scheduler'));
+                $note = format_text($ai->appointment->studentnote, $ai->appointment->studentnoteformat);
+                $cell2 = new html_table_cell($note);
+                $row->cells = array($cell1, $cell2);
+                $t->data[] = $row;
+            }
+            if ($ai->scheduler->uses_studentfiles()) {
+                $row = new html_table_row();
+                $cell1 = new html_table_cell(get_string('studentfiles', 'scheduler'));
+                $att = $this->render_attachments($ai->scheduler->context->id, 'studentfiles', $ai->appointment->id);
+                $cell2 = new html_table_cell($att);
+                $row->cells = array($cell1, $cell2);
+                $t->data[] = $row;
+            }
+        }
+
+        if ($ai->showresult) {
+            if ($ai->scheduler->uses_appointmentnotes() && $ai->appointment->appointmentnote) {
+                $row = new html_table_row();
+                $cell1 = new html_table_cell(get_string('appointmentnotes', 'scheduler'));
+                $note = $this->format_notes($ai->appointment->appointmentnote, $ai->appointment->appointmentnoteformat,
+                                            $ai->scheduler->get_context(), 'appointmentnote', $ai->appointment->id);
+                $cell2 = new html_table_cell($note);
+                $row->cells = array($cell1, $cell2);
+                $t->data[] = $row;
+            }
+            if ($ai->scheduler->uses_grades()) {
+                $row = new html_table_row();
+                $cell1 = new html_table_cell(get_string('grade', 'scheduler'));
+                $gradetext = $this->format_grade($ai->scheduler, $ai->appointment->grade, false);
+                $cell2 = new html_table_cell($gradetext);
+                $row->cells = array($cell1, $cell2);
+                $t->data[] = $row;
+            }
+        }
+
+        $o .= html_writer::table($t);
+        $o .= $this->output->box_end();
+
+        $o .= $this->output->container_end();
+        return $o;
+    }
+
+}
diff --git a/mod/scheduler/settings.php b/mod/scheduler/settings.php
new file mode 100644
index 0000000..d89fd65
--- /dev/null
+++ b/mod/scheduler/settings.php
@@ -0,0 +1,47 @@
+<?php
+
+/**
+ * Global configuration settings for the scheduler module.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die;
+
+if ($ADMIN->fulltree) {
+
+    require_once($CFG->dirroot.'/mod/scheduler/lib.php');
+
+    $settings->add(new admin_setting_configcheckbox('mod_scheduler/allteachersgrading',
+                     get_string('allteachersgrading', 'scheduler'),
+                     get_string('allteachersgrading_desc', 'scheduler'),
+                     0));
+
+    $settings->add(new admin_setting_configcheckbox('mod_scheduler/showemailplain',
+                     get_string('showemailplain', 'scheduler'),
+                     get_string('showemailplain_desc', 'scheduler'),
+                     0));
+
+    $settings->add(new admin_setting_configcheckbox('mod_scheduler/groupscheduling',
+                     get_string('groupscheduling', 'scheduler'),
+                     get_string('groupscheduling_desc', 'scheduler'),
+                     1));
+
+    $settings->add(new admin_setting_configcheckbox('mod_scheduler/mixindivgroup',
+                     get_string('mixindivgroup', 'scheduler'),
+                     get_string('mixindivgroup_desc', 'scheduler'),
+                     1));
+
+    $settings->add(new admin_setting_configtext('mod_scheduler/maxstudentlistsize',
+                     get_string('maxstudentlistsize', 'scheduler'),
+                     get_string('maxstudentlistsize_desc', 'scheduler'),
+                     200, PARAM_INT));
+
+    $settings->add(new admin_setting_configtext('mod_scheduler/uploadmaxfiles',
+                     get_string('uploadmaxfilesglobal', 'scheduler'),
+                     get_string('uploadmaxfilesglobal_desc', 'scheduler'),
+                     5, PARAM_INT));
+
+}
diff --git a/mod/scheduler/slotforms.php b/mod/scheduler/slotforms.php
new file mode 100644
index 0000000..db9b9b9
--- /dev/null
+++ b/mod/scheduler/slotforms.php
@@ -0,0 +1,618 @@
+<?php
+
+/**
+ * Slot-related forms of the scheduler module
+ * (using Moodle formslib)
+ *
+ * @package    mod_scheduler
+ * @copyright  2013 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Base class for slot-related forms
+ *
+ * @package    mod_scheduler
+ * @copyright  2013 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class scheduler_slotform_base extends moodleform {
+
+    /**
+     * @var scheduler_instance the scheduler that this form refers to
+     */
+    protected $scheduler;
+
+    /**
+     * @var array user groups to filter for
+     */
+    protected $usergroups;
+
+    /**
+     * @var bool does this form have a duration field?
+     */
+    protected $hasduration = false;
+
+    /**
+     * @var array options for note fields
+     */
+    protected $noteoptions;
+
+    /**
+     * Create a new form
+     *
+     * @param mixed $action the action attribute for the form
+     * @param scheduler_instance $scheduler
+     * @param object $cm unused
+     * @param array $usergroups groups to filter for
+     * @param array $customdata
+     */
+    public function __construct($action, scheduler_instance $scheduler, $cm, $usergroups, $customdata=null) {
+        $this->scheduler = $scheduler;
+        $this->usergroups = $usergroups;
+        $this->noteoptions = array('trusttext' => true, 'maxfiles' => -1, 'maxbytes' => 0,
+                                   'context' => $scheduler->get_context(), 'subdirs' => false);
+
+        parent::__construct($action, $customdata);
+    }
+
+    /**
+     * Add basic fields to this form. To be used in definition() methods of subclasses.
+     */
+    protected function add_base_fields() {
+
+        global $CFG, $USER;
+
+        $mform = $this->_form;
+
+        // Exclusivity.
+        $exclgroup = array();
+
+        $exclgroup[] = $mform->createElement('text', 'exclusivity', '', array('size' => '10'));
+        $mform->setType('exclusivity', PARAM_INTEGER);
+        $mform->setDefault('exclusivity', 1);
+
+        $exclgroup[] = $mform->createElement('advcheckbox', 'exclusivityenable', '', get_string('enable'));
+        $mform->setDefault('exclusivityenable', 1);
+        $mform->disabledIf('exclusivity', 'exclusivityenable', 'eq', 0);
+
+        $mform->addGroup($exclgroup, 'exclusivitygroup', get_string('maxstudentsperslot', 'scheduler'), ' ', false);
+        $mform->addHelpButton('exclusivitygroup', 'exclusivity', 'scheduler');
+
+        // Location of the appointment.
+        $mform->addElement('text', 'appointmentlocation', get_string('location', 'scheduler'), array('size' => '30'));
+        $mform->setType('appointmentlocation', PARAM_TEXT);
+        $mform->addRule('appointmentlocation', get_string('error'), 'maxlength', 255);
+        $mform->setDefault('appointmentlocation', $this->scheduler->get_last_location($USER));
+        $mform->addHelpButton('appointmentlocation', 'location', 'scheduler');
+
+        // Choose the teacher (if allowed).
+        if (has_capability('mod/scheduler:canscheduletootherteachers', $this->scheduler->get_context())) {
+            $teachername = s($this->scheduler->get_teacher_name());
+            $teachers = $this->scheduler->get_available_teachers();
+            $teachersmenu = array();
+            if ($teachers) {
+                foreach ($teachers as $teacher) {
+                    $teachersmenu[$teacher->id] = fullname($teacher);
+                }
+                $mform->addElement('select', 'teacherid', $teachername, $teachersmenu);
+                $mform->addRule('teacherid', get_string('noteacherforslot', 'scheduler'), 'required');
+                $mform->setDefault('teacherid', $USER->id);
+            } else {
+                $mform->addElement('static', 'teacherid', $teachername, get_string('noteachershere', 'scheduler', $teachername));
+            }
+            $mform->addHelpButton('teacherid', 'bookwithteacher', 'scheduler');
+        } else {
+            $mform->addElement('hidden', 'teacherid');
+            $mform->setDefault('teacherid', $USER->id);
+            $mform->setType('teacherid', PARAM_INT);
+        }
+
+    }
+
+    /**
+     * Add an input field for a number of minutes
+     *
+     * @param string $name field name
+     * @param string $label language key for field label
+     * @param int $defaultval default value
+     * @param string $minuteslabel language key for suffix "minutes"
+     */
+    protected function add_minutes_field($name, $label, $defaultval, $minuteslabel = 'minutes') {
+        $mform = $this->_form;
+        $group = array();
+        $group[] =& $mform->createElement('text', $name, '', array('size' => 5));
+        $group[] =& $mform->createElement('static', $name.'mintext', '', get_string($minuteslabel, 'scheduler'));
+        $mform->addGroup($group, $name.'group', get_string($label, 'scheduler'), array(' '), false);
+        $mform->setType($name, PARAM_INT);
+        $mform->setDefault($name, $defaultval);
+    }
+
+    /**
+     * Add theduration field to the form.
+     * @param string $minuteslabel language key for the "minutes" label
+     */
+    protected function add_duration_field($minuteslabel = 'minutes') {
+        $this->add_minutes_field('duration', 'duration', $this->scheduler->defaultslotduration, $minuteslabel);
+        $this->hasduration = true;
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        // Check duration for valid range.
+        if ($this->hasduration) {
+            $limits = array('min' => 1, 'max' => 24 * 60);
+            if ($data['duration'] < $limits['min'] || $data['duration'] > $limits['max']) {
+                $errors['durationgroup'] = get_string('durationrange', 'scheduler', $limits);
+            }
+        }
+
+        return $errors;
+    }
+
+}
+
+/**
+ * Slot edit form
+ *
+ * @package    mod_scheduler
+ * @copyright  2013 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_editslot_form extends scheduler_slotform_base {
+
+    /**
+     * @var int id of the slot being edited
+     */
+    protected $slotid;
+
+    protected function definition() {
+
+        global $DB, $output;
+
+        $mform = $this->_form;
+        $this->slotid = 0;
+        if (isset($this->_customdata['slotid'])) {
+            $this->slotid = $this->_customdata['slotid'];
+        }
+        $timeoptions = null;
+        if (isset($this->_customdata['timeoptions'])) {
+            $timeoptions = $this->_customdata['timeoptions'];
+        }
+
+        // Start date/time of the slot.
+        $mform->addElement('date_time_selector', 'starttime', get_string('date', 'scheduler'), $timeoptions);
+        $mform->setDefault('starttime', time());
+        $mform->addHelpButton('starttime', 'choosingslotstart', 'scheduler');
+
+        // Duration of the slot.
+        $this->add_duration_field();
+
+        // Ignore conflict checkbox.
+        $mform->addElement('checkbox', 'ignoreconflicts', get_string('ignoreconflicts', 'scheduler'));
+        $mform->setDefault('ignoreconflicts', false);
+        $mform->addHelpButton('ignoreconflicts', 'ignoreconflicts', 'scheduler');
+
+        // Common fields.
+        $this->add_base_fields();
+
+        // Display slot from this date.
+        $mform->addElement('date_selector', 'hideuntil', get_string('displayfrom', 'scheduler'));
+        $mform->setDefault('hideuntil', time());
+
+        // Send e-mail reminder?
+        $mform->addElement('date_selector', 'emaildate', get_string('emailreminderondate', 'scheduler'),
+                            array('optional'  => true));
+        $mform->setDefault('remindersel', -1);
+
+        // Slot comments.
+        $mform->addElement('editor', 'notes_editor', get_string('comments', 'scheduler'),
+                           array('rows' => 3, 'columns' => 60), $this->noteoptions);
+        $mform->setType('notes', PARAM_RAW); // Must be PARAM_RAW for rich text editor content.
+
+        // Appointments.
+
+        $repeatarray = array();
+        $grouparray = array();
+        $repeatarray[] = $mform->createElement('header', 'appointhead', get_string('appointmentno', 'scheduler', '{no}'));
+
+        // Choose student.
+        $students = $this->scheduler->get_available_students($this->usergroups);
+        $studentsmenu = array('0' => get_string('choosedots'));
+        if ($students) {
+            foreach ($students as $astudent) {
+                $studentsmenu[$astudent->id] = fullname($astudent);
+            }
+        }
+        $grouparray[] = $mform->createElement('select', 'studentid', '', $studentsmenu);
+        $grouparray[] = $mform->createElement('hidden', 'appointid', 0);
+
+        // Seen tickbox.
+        $grouparray[] = $mform->createElement('static', 'attendedlabel', '', get_string('seen', 'scheduler'));
+        $grouparray[] = $mform->createElement('checkbox', 'attended');
+
+        // Grade.
+        if ($this->scheduler->scale != 0) {
+            $gradechoices = $output->grading_choices($this->scheduler);
+            $grouparray[] = $mform->createElement('static', 'attendedlabel', '', get_string('grade', 'scheduler'));
+            $grouparray[] = $mform->createElement('select', 'grade', '', $gradechoices);
+        }
+
+        $repeatarray[] = $mform->createElement('group', 'studgroup', get_string('student', 'scheduler'), $grouparray, null, false);
+
+        // Appointment notes, visible to teacher and/or student.
+
+        if ($this->scheduler->uses_appointmentnotes()) {
+            $repeatarray[] = $mform->createElement('editor', 'appointmentnote_editor', get_string('appointmentnote', 'scheduler'),
+                                                   array('rows' => 3, 'columns' => 60), $this->noteoptions);
+        }
+        if ($this->scheduler->uses_teachernotes()) {
+            $repeatarray[] = $mform->createElement('editor', 'teachernote_editor', get_string('teachernote', 'scheduler'),
+                                                   array('rows' => 3, 'columns' => 60), $this->noteoptions);
+        }
+
+        // Tickbox to remove the student
+        $repeatarray[] = $mform->createElement('advcheckbox', 'deletestudent', '', get_string('deleteonsave', 'scheduler'));
+
+
+        if (isset($this->_customdata['repeats'])) {
+            $repeatno = $this->_customdata['repeats'];
+        } else if ($this->slotid) {
+            $repeatno = $DB->count_records('scheduler_appointment', array('slotid' => $this->slotid));
+            $repeatno += 1;
+        } else {
+            $repeatno = 1;
+        }
+
+        $repeateloptions = array();
+        $repeateloptions['appointid']['type'] = PARAM_INT;
+        $repeateloptions['studentid']['disabledif'] = array('appointid', 'neq', 0);
+        $nostudcheck = array('studentid', 'eq', 0);
+        $repeateloptions['attended']['disabledif'] = $nostudcheck;
+        $repeateloptions['appointmentnote_editor']['disabledif'] = $nostudcheck;
+        $repeateloptions['teachernote_editor']['disabledif'] = $nostudcheck;
+        $repeateloptions['grade']['disabledif'] = $nostudcheck;
+        $repeateloptions['deletestudent']['disabledif'] = $nostudcheck;
+        $repeateloptions['appointhead']['expanded'] = true;
+
+        $this->repeat_elements($repeatarray, $repeatno, $repeateloptions,
+                        'appointment_repeats', 'appointment_add', 1, get_string('addappointment', 'scheduler'));
+
+        $this->add_action_buttons();
+
+    }
+
+    public function validation($data, $files) {
+        global $output;
+
+        $errors = parent::validation($data, $files);
+
+        // Check number of appointments vs exclusivity.
+        $numappointments = 0;
+        for ($i = 0; $i < $data['appointment_repeats']; $i++) {
+            if ($data['studentid'][$i] > 0 && $data['deletestudent'][$i] == 0) {
+                $numappointments++;
+            }
+        }
+        if ($data['exclusivityenable'] && $data['exclusivity'] <= 0) {
+            $errors['exclusivitygroup'] = get_string('exclusivitypositive', 'scheduler');
+        } else if ($data['exclusivityenable'] && $numappointments > $data['exclusivity']) {
+            $errors['exclusivitygroup'] = get_string('exclusivityoverload', 'scheduler', $numappointments);
+        }
+
+        // Avoid empty slots starting in the past.
+        if ($numappointments == 0 && $data['starttime'] < time()) {
+            $errors['starttime'] = get_string('startpast', 'scheduler');
+        }
+
+        // Check whether students have been selected several times.
+        for ($i = 0; $i < $data['appointment_repeats']; $i++) {
+            for ($j = 0; $j < $i; $j++) {
+                if ($data['deletestudent'][$j] == 0 && $data['studentid'][$i] > 0
+                        && $data['studentid'][$i] == $data['studentid'][$j]) {
+                    $errors['studgroup['.$i.']'] = get_string('studentmultiselect', 'scheduler');
+                    $errors['studgroup['.$j.']'] = get_string('studentmultiselect', 'scheduler');
+                }
+            }
+        }
+
+        if (!isset($data['ignoreconflicts'])) {
+            /* Avoid overlapping slots by warning the user */
+            $conflicts = $this->scheduler->get_conflicts(
+                            $data['starttime'], $data['starttime'] + $data['duration'] * 60,
+                            $data['teacherid'], 0, SCHEDULER_ALL, $this->slotid);
+
+            if (count($conflicts) > 0) {
+
+                $cl = new scheduler_conflict_list();
+                $cl->add_conflicts($conflicts);
+
+                $msg = get_string('slotwarning', 'scheduler');
+                $msg .= $output->render($cl);
+                $msg .= $output->doc_link('mod/scheduler/conflict', '', true);
+
+                $errors['starttime'] = $msg;
+            }
+        }
+        return $errors;
+    }
+
+    /**
+     * Fill the form data from an existing slot
+     *
+     * @param scheduler_slot $slot
+     * @return stdClass form data
+     */
+    public function prepare_formdata(scheduler_slot $slot) {
+
+        $context = $slot->get_scheduler()->get_context();
+
+        $data = $slot->get_data();
+        $data->exclusivityenable = ($data->exclusivity > 0);
+
+        $data = file_prepare_standard_editor($data, "notes", $this->noteoptions, $context,
+                'mod_scheduler', 'slotnote', $slot->id);
+        $data->notes = array();
+        $data->notes['text'] = $slot->notes;
+        $data->notes['format'] = $slot->notesformat;
+
+        if ($slot->emaildate < 0) {
+            $data->emaildate = 0;
+        }
+
+        $i = 0;
+        foreach ($slot->get_appointments() as $appointment) {
+            $data->appointid[$i] = $appointment->id;
+            $data->studentid[$i] = $appointment->studentid;
+            $data->attended[$i] = $appointment->attended;
+
+            $draftid = file_get_submitted_draft_itemid('appointmentnote');
+            $currenttext = file_prepare_draft_area($draftid, $context->id,
+                    'mod_scheduler', 'appointmentnote', $appointment->id,
+                    $this->noteoptions, $appointment->appointmentnote);
+            $data->appointmentnote_editor[$i] = array('text' => $currenttext,
+                    'format' => $appointment->appointmentnoteformat,
+                    'itemid' => $draftid);
+
+            $draftid = file_get_submitted_draft_itemid('teachernote');
+            $currenttext = file_prepare_draft_area($draftid, $context->id,
+                    'mod_scheduler', 'teachernote', $appointment->id,
+                    $this->noteoptions, $appointment->teachernote);
+            $data->teachernote_editor[$i] = array('text' => $currenttext,
+                    'format' => $appointment->teachernoteformat,
+                    'itemid' => $draftid);
+
+            $data->grade[$i] = $appointment->grade;
+            $i++;
+        }
+
+        return $data;
+    }
+
+    /**
+     * Save a slot object, updating it with data from the form
+     * @param int $slotid
+     * @param mixed $data form data
+     * @return scheduler_slot the updated slot
+     */
+    public function save_slot($slotid, $data) {
+
+        $context = $this->scheduler->get_context();
+
+        if ($slotid) {
+            $slot = scheduler_slot::load_by_id($slotid, $this->scheduler);
+        } else {
+            $slot = new scheduler_slot($this->scheduler);
+        }
+
+        // Set data fields from input form.
+        $slot->starttime = $data->starttime;
+        $slot->duration = $data->duration;
+        $slot->exclusivity = $data->exclusivityenable ? $data->exclusivity : 0;
+        $slot->teacherid = $data->teacherid;
+        $slot->appointmentlocation = $data->appointmentlocation;
+        $slot->hideuntil = $data->hideuntil;
+        $slot->emaildate = $data->emaildate;
+        $slot->timemodified = time();
+
+        if (!$slotid) {
+            $slot->save(); // Make sure that a new slot has a slot id before proceeding.
+        }
+
+        $editor = $data->notes_editor;
+        $slot->notes = file_save_draft_area_files($editor['itemid'], $context->id, 'mod_scheduler', 'slotnote', $slotid,
+                $this->noteoptions, $editor['text']);
+        $slot->notesformat = $editor['format'];
+
+        $currentapps = $slot->get_appointments();
+        for ($i = 0; $i < $data->appointment_repeats; $i++) {
+            if ($data->deletestudent[$i] != 0) {
+                if ($data->appointid[$i]) {
+                    $app = $slot->get_appointment($data->appointid[$i]);
+                    $slot->remove_appointment($app);
+                }
+            }
+            else if ($data->studentid[$i] > 0) {
+                $app = null;
+                if ($data->appointid[$i]) {
+                    $app = $slot->get_appointment($data->appointid[$i]);
+                } else {
+                    $app = $slot->create_appointment();
+                    $app->studentid = $data->studentid[$i];
+                    $app->save();
+                }
+                $app->attended = isset($data->attended[$i]);
+
+                if (isset($data->grade)) {
+                    $selgrade = $data->grade[$i];
+                    $app->grade = ($selgrade >= 0) ? $selgrade : null;
+                }
+
+                if ($this->scheduler->uses_appointmentnotes()) {
+                    $editor = $data->appointmentnote_editor[$i];
+                    $app->appointmentnote = file_save_draft_area_files($editor['itemid'], $context->id,
+                            'mod_scheduler', 'appointmentnote', $app->id,
+                            $this->noteoptions, $editor['text']);
+                    $app->appointmentnoteformat = $editor['format'];
+                }
+                if ($this->scheduler->uses_teachernotes()) {
+                    $editor = $data->teachernote_editor[$i];
+                    $app->teachernote = file_save_draft_area_files($editor['itemid'], $context->id,
+                            'mod_scheduler', 'teachernote', $app->id,
+                            $this->noteoptions, $editor['text']);
+                    $app->teachernoteformat = $editor['format'];
+                }
+            }
+        }
+
+        $slot->save();
+
+        $slot = $this->scheduler->get_slot($slot->id);
+
+        return $slot;
+    }
+}
+
+/**
+ * "Add session" form
+ *
+ * @package    mod_scheduler
+ * @copyright  2013 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class scheduler_addsession_form extends scheduler_slotform_base {
+
+    protected function definition() {
+
+        global $DB;
+
+        $mform = $this->_form;
+
+        // Start and end of range.
+        $mform->addElement('date_selector', 'rangestart', get_string('date', 'scheduler'));
+        $mform->setDefault('rangestart', time());
+
+        $mform->addElement('date_selector', 'rangeend', get_string('enddate', 'scheduler'),
+                            array('optional'  => true) );
+
+        // Weekdays selection.
+        $checkboxes = array();
+        $weekdays = array('monday', 'tuesday', 'wednesday', 'thursday', 'friday');
+        foreach ($weekdays as $day) {
+            $checkboxes[] = $mform->createElement('advcheckbox', $day, '', get_string($day, 'scheduler'));
+            $mform->setDefault($day, true);
+        }
+        $checkboxes[] = $mform->createElement('advcheckbox', 'saturday', '', get_string('saturday', 'scheduler'));
+        $checkboxes[] = $mform->createElement('advcheckbox', 'sunday', '', get_string('sunday', 'scheduler'));
+        $mform->addGroup($checkboxes, 'weekdays', get_string('addondays', 'scheduler'), null, false);
+
+        // Start and end time.
+        $hours = array();
+        $minutes = array();
+        for ($i = 0; $i <= 23; $i++) {
+            $hours[$i] = sprintf("%02d", $i);
+        }
+        for ($i = 0; $i < 60; $i += 5) {
+            $minutes[$i] = sprintf("%02d", $i);
+        }
+        $timegroup = array();
+        $timegroup[] = $mform->createElement('static', 'timefrom', '', get_string('timefrom', 'scheduler'));
+        $timegroup[] = $mform->createElement('select', 'starthour', get_string('hour', 'form'), $hours);
+        $timegroup[] = $mform->createElement('select', 'startminute', get_string('minute', 'form'), $minutes);
+        $timegroup[] = $mform->createElement('static', 'timeto', '', get_string('timeto', 'scheduler'));
+        $timegroup[] = $mform->createElement('select', 'endhour', get_string('hour', 'form'), $hours);
+        $timegroup[] = $mform->createElement('select', 'endminute', get_string('minute', 'form'), $minutes);
+        $mform->addGroup($timegroup, 'timerange', get_string('timerange', 'scheduler'), null, false);
+
+        // Divide into slots?
+        $mform->addElement('selectyesno', 'divide', get_string('divide', 'scheduler'));
+        $mform->setDefault('divide', 1);
+
+        // Duration of the slot.
+        $this->add_duration_field('minutesperslot');
+        $mform->disabledIf('duration', 'divide', 'eq', '0');
+
+        // Break between slots.
+        $this->add_minutes_field('break', 'break', 0, 'minutes');
+        $mform->disabledIf('break', 'divide', 'eq', '0');
+
+        // Force when overlap?
+        $mform->addElement('selectyesno', 'forcewhenoverlap', get_string('forcewhenoverlap', 'scheduler'));
+        $mform->addHelpButton('forcewhenoverlap', 'forcewhenoverlap', 'scheduler');
+
+        // Common fields.
+        $this->add_base_fields();
+
+        // Display slot from date - relative.
+        $hideuntilsel = array();
+        $hideuntilsel[0] = get_string('now', 'scheduler');
+        $hideuntilsel[DAYSECS] = get_string('onedaybefore', 'scheduler');
+        for ($i = 2; $i < 7; $i++) {
+            $hideuntilsel[DAYSECS * $i] = get_string('xdaysbefore', 'scheduler', $i);
+        }
+        $hideuntilsel[WEEKSECS] = get_string('oneweekbefore', 'scheduler');
+        for ($i = 2; $i < 7; $i++) {
+            $hideuntilsel[WEEKSECS * $i] = get_string('xweeksbefore', 'scheduler', $i);
+        }
+        $mform->addElement('select', 'hideuntilrel', get_string('displayfrom', 'scheduler'), $hideuntilsel);
+        $mform->setDefault('hideuntilsel', 0);
+
+        // E-mail reminder from.
+        $remindersel = array();
+        $remindersel[-1] = get_string('never', 'scheduler');
+        $remindersel[0] = get_string('onthemorningofappointment', 'scheduler');
+        $remindersel[DAYSECS] = get_string('onedaybefore', 'scheduler');
+        for ($i = 2; $i < 7; $i++) {
+            $remindersel[DAYSECS * $i] = get_string('xdaysbefore', 'scheduler', $i);
+        }
+        $remindersel[WEEKSECS] = get_string('oneweekbefore', 'scheduler');
+        for ($i = 2; $i < 7; $i++) {
+            $remindersel[WEEKSECS * $i] = get_string('xweeksbefore', 'scheduler', $i);
+        }
+
+        $mform->addElement('select', 'emaildaterel', get_string('emailreminder', 'scheduler'), $remindersel);
+        $mform->setDefault('remindersel', -1);
+
+        $this->add_action_buttons();
+
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        // Range is negative.
+        $fordays = 0;
+        if ($data['rangeend'] > 0) {
+            $fordays = ($data['rangeend'] - $data['rangestart']) / DAYSECS;
+            if ($fordays < 0) {
+                $errors['rangeend'] = get_string('negativerange', 'scheduler');
+            }
+        }
+
+        // Time range is negative.
+        $starttime = $data['starthour'] * 60 + $data['startminute'];
+        $endtime = $data['endhour'] * 60 + $data['endminute'];
+        if ($starttime > $endtime) {
+            $errors['endtime'] = get_string('negativerange', 'scheduler');
+        }
+
+        // First slot is in the past.
+        if ($data['rangestart'] < time() - DAYSECS) {
+            $errors['rangestart'] = get_string('startpast', 'scheduler');
+        }
+
+        // Break must be nonnegative.
+        if ($data['break'] < 0) {
+            $errors['breakgroup'] = get_string('breaknotnegative', 'scheduler');
+        }
+
+        // Conflict checks are now being done after submitting the form.
+
+        return $errors;
+    }
+}
diff --git a/mod/scheduler/studentview.controller.php b/mod/scheduler/studentview.controller.php
new file mode 100644
index 0000000..6d1a04c
--- /dev/null
+++ b/mod/scheduler/studentview.controller.php
@@ -0,0 +1,286 @@
+<?php
+
+/**
+ * Controller for student view
+ *
+ * @package    mod_scheduler
+ * @copyright  2015 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot.'/mod/scheduler/mailtemplatelib.php');
+
+
+function scheduler_book_slot($scheduler, $slotid, $userid, $groupid, $mform, $formdata, $returnurl) {
+
+    global $DB, $COURSE, $output;
+
+    $slot = $scheduler->get_slot($slotid);
+    if (!$slot) {
+        throw new moodle_exception('error');
+    }
+
+    if (!$slot->is_in_bookable_period()) {
+        throw new moodle_exception('nopermissions');
+    }
+
+    $requiredcapacity = 1;
+    $userstobook = array($userid);
+    if ($groupid > 0) {
+        if (!$scheduler->is_group_scheduling_enabled()) {
+            throw new moodle_exception('error');
+        }
+        $groupmembers = $scheduler->get_available_students($groupid);
+        $requiredcapacity = count($groupmembers);
+        $userstobook = array_keys($groupmembers);
+    } else if ($groupid == 0) {
+        if (!$scheduler->is_individual_scheduling_enabled()) {
+            throw new moodle_exception('error');
+        }
+    } else {
+        // Group scheduling enabled but no group selected.
+        throw new moodle_exception('error');
+    }
+
+    $errormessage = '';
+
+    $bookinglimit = $scheduler->count_bookable_appointments($userid, false);
+    if ($bookinglimit == 0) {
+        $errormessage = get_string('selectedtoomany', 'scheduler', $bookinglimit);
+    } else {
+        // Validate our user ids.
+        $existingstudents = array();
+        foreach ($slot->get_appointments() as $app) {
+            $existingstudents[] = $app->studentid;
+        }
+        $userstobook = array_diff($userstobook, $existingstudents);
+
+        $remaining = $slot->count_remaining_appointments();
+        // If the slot is already overcrowded...
+        if ($remaining >= 0 && $remaining < $requiredcapacity) {
+            if ($requiredcapacity > 1) {
+                $errormessage = get_string('notenoughplaces', 'scheduler');
+            } else {
+                $errormessage = get_string('slot_is_just_in_use', 'scheduler');
+            }
+        }
+    }
+
+    if ($errormessage) {
+        echo $output->header();
+        echo $output->box($errormessage, 'error');
+        echo $output->continue_button($returnurl);
+        echo $output->footer();
+        exit();
+    }
+
+    // Create new appointment for each member of the group.
+    foreach ($userstobook as $studentid) {
+        $appointment = $slot->create_appointment();
+        $appointment->studentid = $studentid;
+        $appointment->attended = 0;
+        $appointment->timecreated = time();
+        $appointment->timemodified = time();
+        $appointment->save();
+
+        if (($studentid == $userid) && $mform) {
+            $mform->save_booking_data($formdata, $appointment);
+        }
+
+        \mod_scheduler\event\booking_added::create_from_slot($slot)->trigger();
+
+        // Notify the teacher.
+        if ($scheduler->allownotifications) {
+            $student = $DB->get_record('user', array('id' => $appointment->studentid), '*', MUST_EXIST);
+            $teacher = $DB->get_record('user', array('id' => $slot->teacherid), '*', MUST_EXIST);
+            scheduler_messenger::send_slot_notification($slot, 'bookingnotification', 'applied',
+                    $student, $teacher, $teacher, $student, $COURSE);
+        }
+    }
+    $slot->save();
+    redirect($returnurl);
+
+}
+
+$returnurlparas =  array('id' => $cm->id);
+if ($scheduler->is_group_scheduling_enabled()) {
+    $returnurlparas['appointgroup'] = $appointgroup;
+}
+$returnurl = new moodle_url('/mod/scheduler/view.php', $returnurlparas);
+
+
+/******************************************** Show the booking form *******************************************/
+
+if ($action == 'bookingform') {
+    require_once($CFG->dirroot.'/mod/scheduler/bookingform.php');
+
+    require_sesskey();
+    require_capability('mod/scheduler:appoint', $context);
+
+    $slotid = required_param('slotid', PARAM_INT);
+    $slot = $scheduler->get_slot($slotid);
+
+    $actionurl = new moodle_url($returnurl, array('what' => 'bookingform', 'slotid' => $slotid));
+
+    $mform = new scheduler_booking_form($slot, $actionurl);
+
+    if ($mform->is_cancelled()) {
+        redirect($returnurl);
+    } else if (($formdata = $mform->get_data()) || $appointgroup < 0) {
+        // Workaround - call scheduler_book_slot also if no group was selected, to show an error message.
+        scheduler_book_slot($scheduler, $slotid, $USER->id, $appointgroup, $mform, $formdata, $returnurl);
+        redirect($returnurl);
+    } else {
+        $groupinfo = null;
+        if ($scheduler->is_group_scheduling_enabled() && $appointgroup == 0) {
+            $groupinfo = get_string('myself', 'scheduler');
+        } else if ($appointgroup > 0) {
+            $groupinfo = $mygroupsforscheduling[$appointgroup]->name;
+        }
+
+        echo $output->header();
+        echo $output->heading(get_string('bookaslot', 'scheduler'));
+        echo $output->box(format_text($scheduler->intro, $scheduler->introformat));
+
+        $info = scheduler_appointment_info::make_from_slot($slot, true, true, $groupinfo);
+        echo $output->render($info);
+        $mform->display();
+        echo $output->footer();
+        exit();
+    }
+
+}
+
+/************************************************ Book a slot  ************************************************/
+
+if ($action == 'bookslot') {
+
+    require_sesskey();
+    require_capability('mod/scheduler:appoint', $context);
+
+    // Reject this request if the user is required to go through a booking form.
+    if ($scheduler->uses_bookingform()) {
+        throw new moodle_exception('error');
+    }
+
+    // Get the request parameters.
+    $slotid = required_param('slotid', PARAM_INT);
+
+    scheduler_book_slot($scheduler, $slotid, $USER->id, $appointgroup, null, null, $returnurl);
+}
+
+/******************************************** Show details of booking *******************************************/
+
+if ($action == 'viewbooking') {
+    require_once($CFG->dirroot.'/mod/scheduler/bookingform.php');
+
+    require_sesskey();
+    require_capability('mod/scheduler:appoint', $context);
+
+    $appointmentid = required_param('appointmentid', PARAM_INT);
+    list($slot, $appointment) = $scheduler->get_slot_appointment($appointmentid);
+
+    if ($appointment->studentid != $USER->id) {
+        throw new moodle_exception('nopermissions');
+    }
+
+    echo $output->header();
+    echo $output->heading(get_string('bookingdetails', 'scheduler'));
+    echo $output->box(format_text($scheduler->intro, $scheduler->introformat));
+    $info = scheduler_appointment_info::make_from_appointment($slot, $appointment);
+    echo $output->render($info);
+
+    echo $output->continue_button($returnurl);
+    echo $output->footer();
+    exit();
+
+}
+
+/******************************************** Edit a booking *******************************************/
+
+if ($action == 'editbooking') {
+    require_once($CFG->dirroot.'/mod/scheduler/bookingform.php');
+
+    require_sesskey();
+    require_capability('mod/scheduler:appoint', $context);
+
+    if (!$scheduler->uses_studentdata()) {
+        throw new moodle_exception('error');
+    }
+
+    $appointmentid = required_param('appointmentid', PARAM_INT);
+    list($slot, $appointment) = $scheduler->get_slot_appointment($appointmentid);
+
+    if ($appointment->studentid != $USER->id) {
+        throw new moodle_exception('nopermissions');
+    }
+    if (!$slot->is_in_bookable_period()) {
+        throw new moodle_exception('nopermissions');
+    }
+
+    $actionurl = new moodle_url($returnurl, array('what' => 'editbooking', 'appointmentid' => $appointmentid));
+
+    $mform = new scheduler_booking_form($slot, $actionurl, true);
+    $mform->set_data($mform->prepare_booking_data($appointment));
+
+    if ($mform->is_cancelled()) {
+        redirect($returnurl);
+    } else if ($formdata = $mform->get_data()) {
+        $mform->save_booking_data($formdata, $appointment);
+        redirect($returnurl);
+    } else {
+        echo $output->header();
+        echo $output->heading(get_string('editbooking', 'scheduler'));
+        echo $output->box(format_text($scheduler->intro, $scheduler->introformat));
+        $info = scheduler_appointment_info::make_from_slot($slot);
+        echo $output->render($info);
+        $mform->display();
+        echo $output->footer();
+        exit();
+    }
+
+}
+
+
+/******************************** Cancel a booking (for the current student or a group) ******************************/
+
+if ($action == 'cancelbooking') {
+
+    require_sesskey();
+    require_capability('mod/scheduler:appoint', $context);
+
+    // Get the request parameters.
+    $slotid = required_param('slotid', PARAM_INT);
+    $slot = $scheduler->get_slot($slotid);
+    if (!$slot) {
+        throw new moodle_exception('error');
+    }
+
+    if (!$slot->is_in_bookable_period()) {
+        throw new moodle_exception('nopermissions');
+    }
+
+    $userstocancel = array($USER->id);
+    if ($appointgroup) {
+        $userstocancel = array_keys($scheduler->get_available_students($appointgroup));
+    }
+
+    foreach ($userstocancel as $userid) {
+        if ($appointment = $slot->get_student_appointment($userid)) {
+            $scheduler->delete_appointment($appointment->id);
+
+            // Notify the teacher.
+            if ($scheduler->allownotifications) {
+                $student = $DB->get_record('user', array('id' => $USER->id));
+                $teacher = $DB->get_record('user', array('id' => $slot->teacherid));
+                scheduler_messenger::send_slot_notification($slot, 'bookingnotification', 'cancelled',
+                                                            $student, $teacher, $teacher, $student, $COURSE);
+            }
+            \mod_scheduler\event\booking_removed::create_from_slot($slot)->trigger();
+        }
+    }
+    redirect($returnurl);
+
+}
diff --git a/mod/scheduler/studentview.php b/mod/scheduler/studentview.php
new file mode 100644
index 0000000..d235fd6
--- /dev/null
+++ b/mod/scheduler/studentview.php
@@ -0,0 +1,242 @@
+<?php
+
+/**
+ * Student scheduler screen (where students choose appointments).
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$appointgroup = optional_param('appointgroup', -1, PARAM_INT);
+
+\mod_scheduler\event\booking_form_viewed::create_from_scheduler($scheduler)->trigger();
+
+$PAGE->set_docs_path('mod/scheduler/studentview');
+
+$urlparas = array(
+        'id' => $scheduler->cmid,
+        'sesskey' => sesskey()
+);
+if ($appointgroup >= 0) {
+    $urlparas['appointgroup'] = $appointgroup;
+}
+$actionurl = new moodle_url('/mod/scheduler/view.php', $urlparas);
+
+
+// General permissions check.
+require_capability('mod/scheduler:viewslots', $context);
+$canbook = has_capability('mod/scheduler:appoint', $context);
+$canseefull = has_capability('mod/scheduler:viewfullslots', $context);
+
+if ($scheduler->is_group_scheduling_enabled()) {
+    $mygroupsforscheduling = groups_get_all_groups($scheduler->courseid, $USER->id, $scheduler->bookingrouping, 'g.id, g.name');
+    if ($appointgroup > 0 && !array_key_exists($appointgroup, $mygroupsforscheduling)) {
+        throw new moodle_exception('nopermissions');
+    }
+}
+
+if ($scheduler->is_group_scheduling_enabled()) {
+    $canbook = $canbook && ($appointgroup >= 0);
+} else {
+    $appointgroup = 0;
+}
+
+
+include($CFG->dirroot.'/mod/scheduler/studentview.controller.php');
+
+echo $output->header();
+
+// Print intro.
+echo $output->mod_intro($scheduler);
+
+
+$showowngrades = $scheduler->uses_grades();
+// Print total grade (if any).
+if ($showowngrades) {
+    $totalgrade = $scheduler->get_user_grade($USER->id);
+    $gradebookinfo = $scheduler->get_gradebook_info($USER->id);
+
+    $showowngrades = !$gradebookinfo->hidden;
+
+    if ($gradebookinfo && !$gradebookinfo->hidden && ($totalgrade || $gradebookinfo->overridden) ) {
+        $grademsg = '';
+        if ($gradebookinfo->overridden) {
+            $grademsg = html_writer::tag('p',
+                            get_string('overriddennotice', 'grades'),  array('class' => 'overriddennotice')
+                        );
+        } else {
+            $grademsg = get_string('yourtotalgrade', 'scheduler', $output->format_grade($scheduler, $totalgrade));
+        }
+        echo html_writer::div($grademsg, 'totalgrade');
+    }
+}
+
+// Print group selection menu if given.
+if ($scheduler->is_group_scheduling_enabled()) {
+    $groupchoice = array();
+    if ($scheduler->is_individual_scheduling_enabled()) {
+        $groupchoice[0] = get_string('myself', 'scheduler');
+    }
+    foreach ($mygroupsforscheduling as $group) {
+        $groupchoice[$group->id] = $group->name;
+    }
+    $select = $output->single_select($actionurl, 'appointgroup', $groupchoice, $appointgroup,
+                                     array(-1 => 'choosedots'), 'appointgroupform');
+    echo html_writer::div(get_string('appointforgroup', 'scheduler', $select), 'dropdownmenu');
+}
+
+// Get past (attended) slots.
+
+$pastslots = $scheduler->get_attended_slots_for_student($USER->id);
+
+if (count($pastslots) > 0) {
+    $slottable = new scheduler_slot_table($scheduler, $showowngrades || $scheduler->is_group_scheduling_enabled());
+    foreach ($pastslots as $pastslot) {
+        $appointment = $pastslot->get_student_appointment($USER->id);
+
+        if ($pastslot->is_groupslot() && has_capability('mod/scheduler:seeotherstudentsresults', $context)) {
+            $others = new scheduler_student_list($scheduler, true);
+            foreach ($pastslot->get_appointments() as $otherapp) {
+                $othermark = $scheduler->get_gradebook_info($otherapp->studentid);
+                $gradehidden = !is_null($othermark) && ($othermark->hidden <> 0);
+                $others->add_student($otherapp, $otherapp->studentid == $USER->id, false, !$gradehidden);
+            }
+        } else {
+            $others = null;
+        }
+        $hasdetails = $scheduler->uses_studentdata();
+        $slottable->add_slot($pastslot, $appointment, $others, false, false, $hasdetails);
+    }
+
+    echo $output->heading(get_string('attendedslots', 'scheduler'), 3);
+    echo $output->render($slottable);
+}
+
+
+$upcomingslots = $scheduler->get_upcoming_slots_for_student($USER->id);
+
+if (count($upcomingslots) > 0) {
+    $slottable = new scheduler_slot_table($scheduler, $showowngrades || $scheduler->is_group_scheduling_enabled(), $actionurl);
+    foreach ($upcomingslots as $slot) {
+        $appointment = $slot->get_student_appointment($USER->id);
+
+        if ($slot->is_groupslot() && has_capability('mod/scheduler:seeotherstudentsbooking', $context)) {
+            $showothergrades = has_capability('mod/scheduler:seeotherstudentsresults', $context);
+            $others = new scheduler_student_list($scheduler);
+            foreach ($slot->get_appointments() as $otherapp) {
+                $gradehidden = !$scheduler->uses_grades() ||
+                               ($scheduler->get_gradebook_info($otherapp->studentid)->hidden <> 0) ||
+                               (!$showothergrades && $otherapp->studentid <> $USER->id);
+                $others->add_student($otherapp, $otherapp->studentid == $USER->id, false, !$gradehidden);
+            }
+        } else {
+            $others = null;
+        }
+
+        $cancancel = $slot->is_in_bookable_period();
+        $canedit = $cancancel && $scheduler->uses_studentdata();
+        $canview = !$cancancel && $scheduler->uses_studentdata();
+        if ($scheduler->is_group_scheduling_enabled()) {
+            $cancancel = $cancancel && ($appointgroup >= 0);
+        }
+        $slottable->add_slot($slot, $appointment, $others, $cancancel, $canedit, $canview);
+    }
+
+    echo $output->heading(get_string('upcomingslots', 'scheduler'), 3);
+    echo $output->render($slottable);
+}
+
+$bookablecnt = $scheduler->count_bookable_appointments($USER->id, false);
+$bookableslots = array_values($scheduler->get_slots_available_to_student($USER->id, $canseefull));
+
+if (!$canseefull && $bookablecnt == 0) {
+    echo html_writer::div(get_string('canbooknofurtherappointments', 'scheduler'), 'studentbookingmessage');
+
+} else if (count($bookableslots) == 0) {
+
+    // No slots are available at this time.
+    $noslots = get_string('noslotsavailable', 'scheduler');
+    echo html_writer::div($noslots, 'studentbookingmessage');
+
+} else {
+    // The student can book (or see) further appointments, and slots are available.
+    // Show the booking form.
+
+    $booker = new scheduler_slot_booker($scheduler, $USER->id, $actionurl, $bookablecnt);
+
+    $pagesize = 25;
+    $total = count($bookableslots);
+    $start = ($offset >= 0) ? $offset * $pagesize : 0;
+    $end = $start + $pagesize;
+    if ($end > $total) {
+        $end = $total;
+    }
+
+    for ($idx = $start; $idx < $end; $idx++) {
+        $slot = $bookableslots[$idx];
+        $canbookthisslot = $canbook && ($bookablecnt != 0);
+
+        if (has_capability('mod/scheduler:seeotherstudentsbooking', $context)) {
+            $others = new scheduler_student_list($scheduler, false);
+            foreach ($slot->get_appointments() as $otherapp) {
+                $others->add_student($otherapp, $otherapp->studentid == $USER->id);
+            }
+            $others->expandable = true;
+            $others->expanded = false;
+        } else {
+            $others = null;
+        }
+
+        // Check what to print as group information...
+        $remaining = $slot->count_remaining_appointments();
+        if ($slot->exclusivity == 0) {
+            $groupinfo = get_string('yes');
+        } else if ($slot->exclusivity == 1 && $remaining == 1) {
+            $groupinfo = get_string('no');
+        } else {
+            if ($remaining > 0) {
+                $groupinfo = get_string('limited', 'scheduler', $remaining.'/'.$slot->exclusivity);
+            } else { // Group info should not be visible to students.
+                $groupinfo = get_string('complete', 'scheduler');
+                $canbookthisslot = false;
+            }
+        }
+
+        $booker->add_slot($slot, $canbookthisslot, false, $groupinfo, $others);
+    }
+
+
+    $msgkey = $scheduler->has_slots_for_student($USER->id, true, false) ? 'welcomebackstudent' : 'welcomenewstudent';
+    $bookingmsg1 = get_string($msgkey, 'scheduler');
+
+    $a = $bookablecnt;
+    if ($bookablecnt == 0) {
+        $msgkey = 'canbooknofurtherappointments';
+    } else if ($bookablecnt == 1) {
+        $msgkey = ($scheduler->schedulermode == 'oneonly') ? 'canbooksingleappointment' : 'canbook1appointment';
+    } else if ($bookablecnt > 1) {
+        $msgkey = 'canbooknappointments';
+    } else {
+        $msgkey = 'canbookunlimitedappointments';
+    }
+    $bookingmsg2 = get_string($msgkey, 'scheduler', $a);
+
+    echo $output->heading(get_string('availableslots', 'scheduler'), 3);
+    if ($canbook) {
+        echo html_writer::div($bookingmsg1, 'studentbookingmessage');
+        echo html_writer::div($bookingmsg2, 'studentbookingmessage');
+    }
+    if ($total > $pagesize) {
+        echo $output->paging_bar($total, $offset, $pagesize, $actionurl, 'offset');
+    }
+    echo $output->render($booker);
+    if ($total > $pagesize) {
+        echo $output->paging_bar($total, $offset, $pagesize, $actionurl, 'offset');
+    }
+
+}
+
+echo $output->footer();
\ No newline at end of file
diff --git a/mod/scheduler/styles.css b/mod/scheduler/styles.css
new file mode 100644
index 0000000..2108e98
--- /dev/null
+++ b/mod/scheduler/styles.css
@@ -0,0 +1,214 @@
+.path-mod-scheduler .timelabel {
+    color: #808080;
+}
+
+.path-mod-scheduler .attended {
+    color: green;
+}
+
+.path-mod-scheduler div.otherstudent.highlight {
+    font-weight: bold;
+}
+
+.path-mod-scheduler div.slotnotes {
+    background-color: #e8e9ee;
+    border: solid 1px #a7abbe;
+    font-size: 0.9em;
+    padding: 2px;
+    margin: 1px;
+}
+
+div .path-mod-scheduler .appointmentnote {
+    background-color: #e7efe7;
+    border: solid 1px #a0c5a4;
+    font-size: 0.9em;
+    padding: 2px;
+    margin: 1px;
+}
+
+.path-mod-scheduler #slotbookertable {
+    margin-left: auto;
+    margin-right: auto;
+}
+
+.path-mod-scheduler #slotbookertable {
+    margin-left: auto;
+    margin-right: auto;
+}
+
+.path-mod-scheduler div.bookercontrols {
+    text-align: center;
+}
+
+.path-mod-scheduler div.studentlist.expanded {
+    display: block;
+}
+
+.path-mod-scheduler div.studentlist.collapsed {
+    display: none;
+}
+
+.path-mod-scheduler div.commandbar {
+    width: 100%;
+    margin-left: auto;
+    margin-right: auto;
+    background-color: #eee;
+    padding: 0.5em;
+}
+
+/* Reduce space usage by single buttons in table cells */
+.path-mod-scheduler table div.singlebutton div {
+    margin-bottom: 0px;
+}
+.path-mod-scheduler table div.singlebutton input {
+    margin: 0px;
+}
+
+.path-mod-scheduler div.commandbar span.title {
+    float: left;
+    clear: right;
+    width: 8em;
+    text-align: left;
+    font-weight: bold;
+}
+
+.path-mod-scheduler div.commandbar .moodle-actionmenu {
+    display: inline-block;
+}
+
+.path-mod-scheduler div.commandbar .moodle-actionmenu.show[data-enhanced] .menu.align-tr-br {
+    left: 0;
+    right: auto;
+}
+
+.path-mod-scheduler div.commandbar .moodle-actionmenu .menubar {
+    width: 12em;
+}
+
+.path-mod-scheduler .moodle-actionmenu img.iconsmall {
+    width: auto;
+}
+.path-mod-scheduler .moodle-actionmenu .menu-action-text {
+    display: inline;
+}
+
+
+body.path-mod-scheduler input.slotselect {
+    display: none;
+}
+body.path-mod-scheduler.jsenabled input.slotselect {
+    display: inline;
+}
+
+body.path-mod-scheduler.jsenabled  input.studentselectsubmit {
+    display: none;
+}
+
+.path-mod-scheduler img.statictickbox {
+    padding-right: 5px;
+}
+
+.path-mod-scheduler .maildisplay {
+    width: 90%;
+    margin-left: auto;
+    margin-right: auto;
+    background: #eee;
+    text-align: center;
+}
+
+.path-mod-scheduler div.schedulelist.halfsize {
+    width: 46%;
+    display: inline-table;
+    padding: 3px;
+}
+
+.path-mod-scheduler div.schedulelist.fullsize {
+    width: 96%;
+    display: block;
+    padding: 3px;
+}
+
+.path-mod-scheduler div.schedulelist div.singlebutton,
+.path-mod-scheduler div.schedulelist div.singlebutton form {
+    display: inline;
+}
+
+.path-mod-scheduler div.actionmessage {
+    width: 50%;
+    margin-left: auto;
+    margin-right: auto;
+    margin-bottom: 10px;
+    border: solid 2px;
+    padding: 5px;
+    display: block;
+    text-align: center;
+    font-weight: bold;
+}
+
+.path-mod-scheduler div.actionmessage.success {
+    background-color: #96fca6;
+    border-color: #14fa34;
+}
+
+.path-mod-scheduler div.actionmessage.error {
+    background-color: #ffb2b8;
+    border-color: #f40000;
+}
+
+.path-mod-scheduler div.totalgrade {
+    padding-bottom: 25px;
+}
+.path-mod-scheduler dl.totalgrade dl {
+    width: 100%;
+}
+.path-mod-scheduler dl.totalgrade dt {
+    float: left;
+    clear: left;
+    width: 30%;
+}
+.path-mod-scheduler dl.totalgrade dd {
+    float: left;
+    width: 60%;
+}
+
+.path-mod-scheduler div.dropdownmenu {
+    display: inline-block;
+    padding-right: 1em;
+}
+
+.path-mod-scheduler div.dropdownmenu select {
+    vertical-align: middle;
+}
+
+/* Format data fields in vertical rather than horizontal list. */
+
+.path-mod-scheduler #id_datafieldhdr .form-group,
+.path-mod-scheduler #id_datafieldhdr .fitem_fgroup {
+    float: left;
+    clear: none;
+}
+
+.path-mod-scheduler #id_datafieldhdr .col-md-3,
+.path-mod-scheduler #id_datafieldhdr fieldset.fgroup {
+    width: 100%;
+    text-align: left;
+    margin-left: 0;
+}
+
+.path-mod-scheduler #id_datafieldhdr .col-md-9 {
+	float: none;
+	width: 100%;
+}
+
+.path-mod-scheduler #id_datafieldhdr .col-form-label,
+.path-mod-scheduler #id_datafieldhdr .fitemtitle {
+    font-weight: bold;
+    text-align: left;
+}
+
+.path-mod-scheduler #id_datafieldhdr .form-group .felement .fitem,
+.path-mod-scheduler #id_datafieldhdr fieldset.fgroup > span {
+    clear: left;
+    float: left;
+    margin-left: 0.5em;
+}
diff --git a/mod/scheduler/teacherview.controller.php b/mod/scheduler/teacherview.controller.php
new file mode 100644
index 0000000..a477615
--- /dev/null
+++ b/mod/scheduler/teacherview.controller.php
@@ -0,0 +1,344 @@
+<?php
+
+/**
+ * Controller for all teacher-related views.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+
+/**
+ * Add a session (confirmed action) from data entered into the add session form
+ * @param scheduler_instance $scheduler
+ * @param mixed $formdata
+ */
+function scheduler_action_doaddsession($scheduler, $formdata) {
+
+    global $DB, $output;
+
+    $data = (object) $formdata;
+
+    $fordays = 0;
+    if ($data->rangeend > 0) {
+        $fordays = ($data->rangeend - $data->rangestart) / DAYSECS;
+    }
+
+    // Create as many slots of $duration as will fit between $starttime and $endtime and that do not conflict.
+    $countslots = 0;
+    $couldnotcreateslots = '';
+    $startfrom = $data->rangestart + ($data->starthour * 60 + $data->startminute) * 60;
+    $endat = $data->rangestart + ($data->endhour * 60 + $data->endminute) * 60;
+    $slot = new stdClass();
+    $slot->schedulerid = $scheduler->id;
+    $slot->teacherid = $data->teacherid;
+    $slot->appointmentlocation = $data->appointmentlocation;
+    $slot->exclusivity = $data->exclusivityenable ? $data->exclusivity : 0;
+    if ($data->divide) {
+        $slot->duration = $data->duration;
+    } else {
+        $slot->duration = $data->endhour * 60 + $data->endminute - $data->starthour * 60 - $data->startminute;
+    };
+    $slot->notes = '';
+    $slot->notesformat = FORMAT_HTML;
+    $slot->timemodified = time();
+
+    for ($d = 0; $d <= $fordays; $d ++) {
+        $starttime = $startfrom + ($d * DAYSECS);
+        $eventdate = usergetdate($starttime);
+        $dayofweek = $eventdate['wday'];
+        if ((($dayofweek == 1) && ($data->monday == 1)) ||
+        (($dayofweek == 2) && ($data->tuesday == 1)) ||
+        (($dayofweek == 3) && ($data->wednesday == 1)) ||
+        (($dayofweek == 4) && ($data->thursday == 1)) ||
+        (($dayofweek == 5) && ($data->friday == 1)) ||
+        (($dayofweek == 6) && ($data->saturday == 1)) ||
+        (($dayofweek == 0) && ($data->sunday == 1))) {
+            $slot->starttime = make_timestamp($eventdate['year'], $eventdate['mon'], $eventdate['mday'],
+                                              $data->starthour, $data->startminute);
+            $data->timestart = $slot->starttime;
+            $data->timeend = make_timestamp($eventdate['year'], $eventdate['mon'], $eventdate['mday'],
+                                            $data->endhour, $data->endminute);
+
+            // This corrects around midnight bug.
+            if ($data->timestart > $data->timeend) {
+                $data->timeend += DAYSECS;
+            }
+            if ($data->hideuntilrel == 0) {
+                $slot->hideuntil = time();
+            } else {
+                $slot->hideuntil = make_timestamp($eventdate['year'], $eventdate['mon'], $eventdate['mday'], 6, 0) -
+                                    $data->hideuntilrel;
+            }
+            if ($data->emaildaterel == -1) {
+                $slot->emaildate = 0;
+            } else {
+                $slot->emaildate = make_timestamp($eventdate['year'], $eventdate['mon'], $eventdate['mday'], 0, 0) -
+                                    $data->emaildaterel;
+            }
+            while ($slot->starttime <= $data->timeend - $slot->duration * 60) {
+                $conflicts = $scheduler->get_conflicts($data->timestart, $data->timestart + $slot->duration * 60,
+                                                       $data->teacherid, 0, SCHEDULER_ALL);
+                $resolvable = (boolean) $data->forcewhenoverlap;
+                foreach ($conflicts as $conflict) {
+                    $resolvable = $resolvable
+                                     && $conflict->isself == 1       // Do not delete slots outside the current scheduler.
+                                     && $conflict->numstudents == 0; // Do not delete slots with bookings.
+                }
+
+                if ($conflicts) {
+                    $cl = new scheduler_conflict_list();
+                    $cl->add_conflicts($conflicts);
+                    if (!$resolvable) {
+                        print_string('conflictingslots', 'scheduler', userdate($data->timestart));
+                        echo $output->doc_link('mod/scheduler/conflict', '', true);
+                        echo $output->render($cl);
+                    } else { // We force, so delete all conflicting before inserting.
+                        foreach ($conflicts as $conflict) {
+                            $cslot = $scheduler->get_slot($conflict->id);
+                            \mod_scheduler\event\slot_deleted::create_from_slot($cslot, 'addsession-conflict')->trigger();
+                            $cslot->delete();
+                        }
+                        print_string('deletedconflictingslots', 'scheduler', userdate($data->timestart));
+                        echo $output->doc_link('mod/scheduler/conflict', '', true);
+                        echo $output->render($cl);
+                    }
+                }
+                if (!$conflicts || $resolvable) {
+                    $slotid = $DB->insert_record('scheduler_slots', $slot, true, true);
+                    $slotobj = $scheduler->get_slot($slotid);
+                    \mod_scheduler\event\slot_added::create_from_slot($slotobj)->trigger();
+                    $countslots++;
+                }
+                $slot->starttime += ($slot->duration + $data->break) * 60;
+                $data->timestart += ($slot->duration + $data->break) * 60;
+            }
+        }
+    }
+    echo $output->action_message(get_string('slotsadded', 'scheduler', $countslots));
+}
+
+/**
+ * Send a message (confirmed action) after filling the message form
+ *
+ * @param scheduler_instance $scheduler
+ * @param mixed $formdata
+ */
+function scheduler_action_dosendmessage($scheduler, $formdata) {
+
+    global $DB, $USER, $output;
+
+    $data = (object) $formdata;
+
+    $recipients = $data->recipient;
+    if ($data->copytomyself) {
+        $recipients[$USER->id] = 1;
+    }
+    $rawmessage = $data->body['text'];
+    $format = $data->body['format'];
+    $textmessage = format_text_email($rawmessage, $format);
+    $htmlmessage = null;
+    if ($format == FORMAT_HTML) {
+        $htmlmessage = $rawmessage;
+    }
+
+    $cnt = 0;
+    foreach ($recipients as $recipientid => $value) {
+        if ($value) {
+            $message = new \core\message\message();
+            $message->component = 'mod_scheduler';
+            $message->name = 'invitation';
+            $message->userfrom = $USER;
+            $message->userto = $recipientid;
+            $message->subject = $data->subject;
+            $message->fullmessage = $textmessage;
+            $message->fullmessageformat = $format;
+            if ($htmlmessage) {
+                $message->fullmessagehtml = $htmlmessage;
+            }
+            $message->notification = '0';
+
+            message_send($message);
+            $cnt++;
+        }
+    }
+
+    echo $output->action_message(get_string('messagesent', 'scheduler', $cnt));
+}
+
+/**
+ * Delete slots (after UI button has beebn pushed)
+ *
+ * @param scheduler_slot[] $slots list of slots to be deleted
+ * @param string $action description of the action
+ */
+function scheduler_delete_slots_from_ui(array $slots, $action) {
+    global $output;
+
+    $cnt = 0;
+    foreach ($slots as $slot) {
+        \mod_scheduler\event\slot_deleted::create_from_slot($slot, $action)->trigger();
+        $slot->delete();
+        $cnt++;
+    }
+
+    if ($cnt == 1) {
+        $msg = get_string('oneslotdeleted', 'scheduler');
+    } else {
+        $msg = get_string('slotsdeleted', 'scheduler', $cnt);
+    }
+    echo $output->action_message($msg);
+}
+
+// Require valid session key for all actions.
+require_sesskey();
+
+// We first have to check whether some action needs to be performed.
+switch ($action) {
+    /************************************ Deleting a slot ***********************************************/
+    case 'deleteslot': {
+        $slotid = required_param('slotid', PARAM_INT);
+        $slot = $scheduler->get_slot($slotid);
+        scheduler_delete_slots_from_ui(array($slot), $action);
+        break;
+    }
+    /************************************ Deleting multiple slots ***********************************************/
+    case 'deleteslots': {
+        $slotids = required_param('items', PARAM_SEQUENCE);
+        $slotids = explode(",", $slotids);
+        $slots = array();
+        foreach ($slotids as $slotid) {
+            if ($slotid > 0) {
+                $slots[] = $scheduler->get_slot($slotid);
+            }
+        }
+        scheduler_delete_slots_from_ui($slots, $action);
+        break;
+    }
+    /************************************ Students were seen ***************************************************/
+    case 'saveseen': {
+        $slotid = required_param('slotid', PARAM_INT);
+        $slot = $scheduler->get_slot($slotid);
+        $seen = optional_param_array('seen', array(), PARAM_INT);
+
+        if (is_array($seen)) {
+            foreach ($slot->get_appointments() as $app) {
+                $app->attended = (in_array($app->id, $seen)) ? 1 : 0;
+                $app->timemodified = time();
+            }
+        }
+        $slot->save();
+        break;
+    }
+    /************************************ Revoking all appointments to a slot ***************************************/
+    case 'revokeall': {
+        $slotid = required_param('slotid', PARAM_INT);
+        $slot = $scheduler->get_slot($slotid);
+
+        $oldstudents = array();
+        foreach ($slot->get_appointments() as $app) {
+            $oldstudents[] = $app->studentid;
+            $slot->remove_appointment($app);
+        }
+        // Notify the student.
+        if ($scheduler->allownotifications) {
+            foreach ($oldstudents as $oldstudent) {
+                include_once($CFG->dirroot.'/mod/scheduler/mailtemplatelib.php');
+
+                $student = $DB->get_record('user', array('id' => $oldstudent));
+                $teacher = $DB->get_record('user', array('id' => $slot->teacherid));
+
+                scheduler_messenger::send_slot_notification($slot, 'bookingnotification', 'teachercancelled',
+                                        $teacher, $student, $teacher, $student, $COURSE);
+            }
+        }
+
+        $slot->save();
+        break;
+    }
+
+    /************************************ Toggling to unlimited group ***************************************/
+    case 'allowgroup':{
+        $slotid = required_param('slotid', PARAM_INT);
+        $slot = new stdClass();
+        $slot->id = $slotid;
+        $slot->exclusivity = 0;
+        $DB->update_record('scheduler_slots', $slot);
+        break;
+    }
+
+    /************************************ Toggling to single student ******************************************/
+    case 'forbidgroup':{
+        $slotid = required_param('slotid', PARAM_INT);
+        $slot = new stdClass();
+        $slot->id = $slotid;
+        $slot->exclusivity = 1;
+        $DB->update_record('scheduler_slots', $slot);
+        break;
+    }
+
+    /************************************ Deleting all slots ***************************************************/
+    case 'deleteall':{
+        require_capability('mod/scheduler:manageallappointments', $context);
+        $slots = $scheduler->get_all_slots();
+        scheduler_delete_slots_from_ui($slots, $action);
+        break;
+    }
+    /************************************ Deleting unused slots *************************************************/
+    case 'deleteunused':{
+        $slots = $scheduler->get_slots_without_appointment($USER->id);
+        scheduler_delete_slots_from_ui($slots, $action);
+        break;
+    }
+    /************************************ Deleting unused slots (all teachers) ************************************/
+    case 'deleteallunused': {
+        require_capability('mod/scheduler:manageallappointments', $context);
+        $slots = $scheduler->get_slots_without_appointment();
+        scheduler_delete_slots_from_ui($slots, $action);
+        break;
+    }
+    /************************************ Deleting current teacher's slots ***************************************/
+    case 'deleteonlymine': {
+        $slots = $scheduler->get_slots_for_teacher($USER->id);
+        scheduler_delete_slots_from_ui($slots, $action);
+        break;
+    }
+    /************************************ Mark as seen now *******************************************************/
+    case 'markasseennow': {
+        $slot = new stdClass();
+        $slot->schedulerid = $scheduler->id;
+        $slot->teacherid = $USER->id;
+        $slot->starttime = time();
+        $slot->duration = $scheduler->defaultslotduration;
+        $slot->exclusivity = 1;
+        $slot->notes = '';
+        $slot->notesformat = FORMAT_HTML;
+        $slot->hideuntil = time();
+        $slot->appointmentlocation = '';
+        $slot->emaildate = 0;
+        $slot->timemodified = time();
+        $slotid = $DB->insert_record('scheduler_slots', $slot);
+
+        $appointment = new stdClass();
+        $appointment->slotid = $slotid;
+        $appointment->studentid = required_param('studentid', PARAM_INT);
+        $appointment->attended = 1;
+        $appointment->appointmentnote = '';
+        $appointment->appointmentnoteformat = FORMAT_HTML;
+        $appointment->teachernote = '';
+        $appointment->teachernoteformat = FORMAT_HTML;
+        $appointment->timecreated = time();
+        $appointment->timemodified = time();
+        $DB->insert_record('scheduler_appointment', $appointment);
+
+        $slot = $scheduler->get_slot($slotid);
+        \mod_scheduler\event\slot_added::create_from_slot($slot)->trigger();
+
+        break;
+    }
+}
+
+/*************************************************************************************************************/
diff --git a/mod/scheduler/teacherview.php b/mod/scheduler/teacherview.php
new file mode 100644
index 0000000..3538c1d
--- /dev/null
+++ b/mod/scheduler/teacherview.php
@@ -0,0 +1,638 @@
+<?php
+
+/**
+ * Contains various sub-screens that a teacher can see.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Print a selection box of existing slots to be scheduler in
+ *
+ * @param scheduler_instance $scheduler
+ * @param int $studentid student to schedule
+ * @param int $groupid group to schedule
+ */
+function scheduler_print_schedulebox(scheduler_instance $scheduler, $studentid, $groupid = 0) {
+    global $output;
+
+    $availableslots = $scheduler->get_slots_available_to_student($studentid);
+
+    $startdatemem = '';
+    $starttimemem = '';
+    $availableslotsmenu = array();
+    foreach ($availableslots as $slot) {
+        $startdatecnv = $output->userdate($slot->starttime);
+        $starttimecnv = $output->usertime($slot->starttime);
+
+        $startdatestr = ($startdatemem != '' and $startdatemem == $startdatecnv) ? "-----------------" : $startdatecnv;
+        $starttimestr = ($starttimemem != '' and $starttimemem == $starttimecnv) ? '' : $starttimecnv;
+
+        $startdatemem = $startdatecnv;
+        $starttimemem = $starttimecnv;
+
+        $url = new moodle_url('/mod/scheduler/view.php',
+                        array('id' => $scheduler->cmid, 'slotid' => $slot->id, 'sesskey' => sesskey()));
+        if ($groupid) {
+            $url->param('what', 'schedulegroup');
+            $url->param('subaction', 'dochooseslot');
+            $url->param('groupid', $groupid);
+        } else {
+            $url->param('what', 'schedule');
+            $url->param('subaction', 'dochooseslot');
+            $url->param('studentid', $studentid);
+        }
+        $availableslotsmenu[$url->out()] = "$startdatestr $starttimestr";
+    }
+
+    $chooser = new url_select($availableslotsmenu);
+
+    if ($availableslots) {
+        echo $output->box_start();
+        echo $output->heading(get_string('chooseexisting', 'scheduler'), 3);
+        echo $output->render($chooser);
+        echo $output->box_end();
+    }
+}
+
+// Load group restrictions.
+$groupmode = groups_get_activity_groupmode($cm);
+$currentgroup = false;
+if ($groupmode) {
+    $currentgroup = groups_get_activity_group($cm, true);
+}
+
+// All group arrays in the following are in the format used by groups_get_all_groups.
+// The special value '' (empty string) is used to signal "all groups" (no restrictions).
+
+// Find groups which the current teacher can see ($groupsicansee, $groupsicurrentlysee).
+// $groupsicansee contains all groups that a teacher potentially has access to.
+// $groupsicurrentlysee may be restricted by the user to one group, using the drop-down box.
+$userfilter = $USER->id;
+if (has_capability('moodle/site:accessallgroups', $context)) {
+    $userfilter = 0;
+}
+$groupsicansee = '';
+$groupsicurrentlysee = '';
+if ($groupmode) {
+    if ($userfilter) {
+        $groupsicansee = groups_get_all_groups($COURSE->id, $userfilter, $cm->groupingid);
+    }
+    $groupsicurrentlysee = $groupsicansee;
+    if ($currentgroup) {
+        if ($userfilter && !groups_is_member($currentgroup, $userfilter)) {
+            $groupsicurrentlysee = array();
+        } else {
+            $cgobj = groups_get_group($currentgroup);
+            $groupsicurrentlysee = array($currentgroup => $cgobj);
+        }
+    }
+}
+
+// Find groups which the current teacher can schedule as a group ($groupsicanschedule).
+$groupsicanschedule = array();
+if ($scheduler->is_group_scheduling_enabled()) {
+    $groupsicanschedule = groups_get_all_groups($COURSE->id, $userfilter, $scheduler->bookingrouping);
+}
+
+// Find groups which can book an appointment with the current teacher ($groupsthatcanseeme).
+
+$groupsthatcanseeme = '';
+if ($groupmode) {
+    $groupsthatcanseeme = groups_get_all_groups($COURSE->id, $USER->id, $cm->groupingid);
+}
+
+
+$taburl = new moodle_url('/mod/scheduler/view.php', array('id' => $scheduler->cmid, 'what' => 'view', 'subpage' => $subpage));
+$PAGE->set_url($taburl);
+
+echo $output->header();
+
+if ($action != 'view') {
+    require_once($CFG->dirroot.'/mod/scheduler/slotforms.php');
+    include($CFG->dirroot.'/mod/scheduler/teacherview.controller.php');
+}
+
+/************************************ View : New single slot form ****************************************/
+if ($action == 'addslot') {
+    $actionurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'addslot', 'subpage' => $subpage, 'id' => $cm->id));
+    $returnurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'view', 'subpage' => $subpage, 'id' => $cm->id));
+
+    if (!$scheduler->has_available_teachers()) {
+        print_error('needteachers', 'scheduler', $returnurl);
+    }
+
+    $mform = new scheduler_editslot_form($actionurl, $scheduler, $cm, $groupsicansee);
+
+    if ($mform->is_cancelled()) {
+        redirect($returnurl);
+    } else if ($formdata = $mform->get_data()) {
+        $slot = $mform->save_slot(0, $formdata);
+        \mod_scheduler\event\slot_added::create_from_slot($slot)->trigger();
+        echo $output->action_message(get_string('oneslotadded', 'scheduler'));
+    } else {
+        echo $output->heading(get_string('addsingleslot', 'scheduler'));
+        $mform->display();
+        echo $output->footer($course);
+        die;
+    }
+}
+/************************************ View : Update single slot form ****************************************/
+if ($action == 'updateslot') {
+
+    $slotid = required_param('slotid', PARAM_INT);
+    $slot = $scheduler->get_slot($slotid);
+    if ($slot->starttime % 300 !== 0 || $slot->duration % 5 !== 0) {
+        $timeoptions = array('step' => 1, 'optional' => false);
+    } else {
+        $timeoptions = array('step' => 5, 'optional' => false);
+    }
+
+    $actionurl = new moodle_url('/mod/scheduler/view.php',
+                    array('what' => 'updateslot', 'id' => $cm->id, 'slotid' => $slotid,
+                          'subpage' => $subpage, 'offset' => $offset));
+    $returnurl = new moodle_url('/mod/scheduler/view.php',
+                    array('what' => 'view', 'id' => $cm->id, 'subpage' => $subpage, 'offset' => $offset));
+
+    $mform = new scheduler_editslot_form($actionurl, $scheduler, $cm, $groupsicansee, array(
+            'slotid' => $slotid,
+            'timeoptions' => $timeoptions)
+        );
+    $data = $mform->prepare_formdata($slot);
+    $mform->set_data($data);
+
+    if ($mform->is_cancelled()) {
+        redirect($returnurl);
+    } else if ($formdata = $mform->get_data()) {
+        $mform->save_slot($slotid, $formdata);
+        echo $output->action_message(get_string('slotupdated', 'scheduler'));
+    } else {
+        echo $output->heading(get_string('updatesingleslot', 'scheduler'));
+        $mform->display();
+        echo $output->footer($course);
+        die;
+    }
+
+}
+/************************************ Add session multiple slots form ****************************************/
+if ($action == 'addsession') {
+
+    $actionurl = new moodle_url('/mod/scheduler/view.php',
+                    array('what' => 'addsession', 'id' => $cm->id, 'subpage' => $subpage));
+    $returnurl = new moodle_url('/mod/scheduler/view.php',
+                    array('what' => 'view', 'id' => $cm->id, 'subpage' => $subpage));
+
+    if (!$scheduler->has_available_teachers()) {
+        print_error('needteachers', 'scheduler', $returnurl);
+    }
+
+    $mform = new scheduler_addsession_form($actionurl, $scheduler, $cm, $groupsicansee);
+
+    if ($mform->is_cancelled()) {
+        redirect($returnurl);
+    } else if ($formdata = $mform->get_data()) {
+        scheduler_action_doaddsession($scheduler, $formdata);
+    } else {
+        echo $output->heading(get_string('addsession', 'scheduler'));
+        $mform->display();
+        echo $output->footer();
+        die;
+    }
+}
+
+/************************************ Schedule a student form ***********************************************/
+if ($action == 'schedule') {
+    if ($subaction == 'dochooseslot') {
+        $slotid = required_param('slotid', PARAM_INT);
+        $slot = $scheduler->get_slot($slotid);
+        $studentid = required_param('studentid', PARAM_INT);
+
+        $actionurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'updateslot', 'id' => $cm->id, 'slotid' => $slotid));
+        $returnurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'view', 'id' => $cm->id));
+
+
+        $repeats = $slot->get_appointment_count() + 1;
+        $mform = new scheduler_editslot_form($actionurl, $scheduler, $cm, $groupsicansee,
+                                             array('slotid' => $slotid, 'repeats' => $repeats));
+        $data = $mform->prepare_formdata($slot);
+        $data->studentid[] = $studentid;
+        $mform->set_data($data);
+
+        echo $output->heading(get_string('updatesingleslot', 'scheduler'), 2);
+        $mform->display();
+
+    } else if (empty($subaction)) {
+        $studentid = required_param('studentid', PARAM_INT);
+        $student = $DB->get_record('user', array('id' => $studentid), '*', MUST_EXIST);
+
+        $actionurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'addslot', 'id' => $cm->id));
+        $returnurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'view', 'id' => $cm->id));
+
+        $mform = new scheduler_editslot_form($actionurl, $scheduler, $cm, $groupsicansee);
+
+        $data = array();
+        $data['studentid'][0] = $studentid;
+        $mform->set_data($data);
+        echo $output->heading(get_string('scheduleappointment', 'scheduler', fullname($student)));
+
+        scheduler_print_schedulebox($scheduler, $studentid);
+
+        echo $output->box_start();
+        echo $output->heading(get_string('scheduleinnew', 'scheduler'), 3);
+        $mform->display();
+        echo $output->box_end();
+    }
+
+    echo $output->footer();
+    die();
+}
+/************************************ Schedule a whole group in form ***********************************************/
+if ($action == 'schedulegroup') {
+
+    $groupid = required_param('groupid', PARAM_INT);
+    $group = $DB->get_record('groups', array('id' => $groupid), '*', MUST_EXIST);
+    $members = groups_get_members($groupid);
+
+    if ($subaction == 'dochooseslot') {
+
+        $slotid = required_param('slotid', PARAM_INT);
+        $groupid = required_param('groupid', PARAM_INT);
+        $slot = $scheduler->get_slot($slotid);
+
+        $actionurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'updateslot', 'id' => $cm->id, 'slotid' => $slotid));
+        $returnurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'view', 'id' => $cm->id));
+
+        $repeats = $slot->get_appointment_count() + count($members);
+        $mform = new scheduler_editslot_form($actionurl, $scheduler, $cm, $groupsicansee,
+                                             array('slotid' => $slotid, 'repeats' => $repeats));
+        $data = $mform->prepare_formdata($slot);
+        foreach ($members as $member) {
+            $data->studentid[] = $member->id;
+        }
+        $mform->set_data($data);
+
+        echo $output->heading(get_string('updatesingleslot', 'scheduler'), 3);
+        $mform->display();
+
+    } else if (empty($subaction)) {
+
+        $actionurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'addslot', 'id' => $cm->id));
+        $returnurl = new moodle_url('/mod/scheduler/view.php', array('what' => 'view', 'id' => $cm->id));
+
+        $data = array();
+        $i = 0;
+        foreach ($members as $member) {
+            $data['studentid'][$i] = $member->id;
+            $i++;
+        }
+        $data['exclusivity'] = $i;
+
+        $mform = new scheduler_editslot_form($actionurl, $scheduler, $cm, $groupsicansee, array('repeats' => $i));
+        $mform->set_data($data);
+
+        echo $output->heading(get_string('scheduleappointment', 'scheduler', $group->name));
+
+        scheduler_print_schedulebox($scheduler, 0, $groupid);
+
+        echo $output->box_start();
+        echo $output->heading(get_string('scheduleinnew', 'scheduler'), 3);
+        $mform->display();
+        echo $output->box_end();
+
+    }
+    echo $output->footer();
+    die();
+}
+
+/************************************ Send message to students ****************************************/
+if ($action == 'sendmessage') {
+    require_once($CFG->dirroot.'/mod/scheduler/message_form.php');
+
+    $template = optional_param('template', 'none', PARAM_ALPHA);
+    $recipientids = required_param('recipients', PARAM_SEQUENCE);
+
+    $actionurl = new moodle_url('/mod/scheduler/view.php',
+            array('what' => 'sendmessage', 'id' => $cm->id, 'subpage' => $subpage,
+                  'template' => $template, 'recipients' => $recipientids));
+    $returnurl = new moodle_url('/mod/scheduler/view.php',
+            array('what' => 'view', 'id' => $cm->id, 'subpage' => $subpage));
+
+    $templatedata = array();
+    if ($template != 'none') {
+        $vars = scheduler_messenger::get_scheduler_variables($scheduler, null, $USER, null, $COURSE, null);
+        $templatedata['subject'] = scheduler_messenger::compile_mail_template($template, 'subject', $vars);
+        $templatedata['body'] = scheduler_messenger::compile_mail_template($template, 'html', $vars);
+    }
+    $templatedata['recipients'] = $DB->get_records_list('user', 'id', explode(',', $recipientids), 'lastname,firstname');
+
+    $mform = new scheduler_message_form($actionurl, $scheduler, $templatedata);
+
+    if ($mform->is_cancelled()) {
+        redirect($returnurl);
+    } else if ($formdata = $mform->get_data()) {
+        scheduler_action_dosendmessage($scheduler, $formdata);
+    } else {
+        echo $output->heading(get_string('sendmessage', 'scheduler'));
+        $mform->display();
+        echo $output->footer();
+        die;
+    }
+}
+
+
+/****************** Standard view ***********************************************/
+
+
+// Trigger view event.
+\mod_scheduler\event\appointment_list_viewed::create_from_scheduler($scheduler)->trigger();
+
+
+// Print top tabs.
+
+$actionurl = new moodle_url($taburl, array('offset' => $offset, 'sesskey' => sesskey()));
+
+$inactive = array();
+if ($DB->count_records('scheduler_slots', array('schedulerid' => $scheduler->id)) <=
+         $DB->count_records('scheduler_slots', array('schedulerid' => $scheduler->id, 'teacherid' => $USER->id)) ) {
+    // We are alone in this scheduler.
+    $inactive[] = 'allappointments';
+    if ($subpage = 'allappointments') {
+        $subpage = 'myappointments';
+    }
+}
+
+echo $output->teacherview_tabs($scheduler, $taburl, $subpage, $inactive);
+if ($groupmode) {
+    if ($subpage == 'allappointments') {
+        groups_print_activity_menu($cm, $taburl);
+    } else {
+        $a = new stdClass();
+        $a->groupmode = get_string($groupmode == VISIBLEGROUPS ? 'groupsvisible' : 'groupsseparate');
+        $groupnames = array();
+        foreach ($groupsthatcanseeme as $id => $group) {
+            $groupnames[] = $group->name;
+        }
+        $a->grouplist = implode(', ', $groupnames);
+        $messagekey = $groupsthatcanseeme ? 'groupmodeyourgroups' : 'groupmodeyourgroupsempty';
+        $message = get_string($messagekey, 'scheduler', $a);
+        echo html_writer::div($message, 'groupmodeyourgroups');
+    }
+}
+
+// Print intro.
+echo $output->mod_intro($scheduler);
+
+
+if ($subpage == 'allappointments') {
+    $teacherid = 0;
+} else {
+    $teacherid = $USER->id;
+    $subpage = 'myappointments';
+}
+$sqlcount = $scheduler->count_slots_for_teacher($teacherid, $currentgroup);
+
+$pagesize = 25;
+if ($offset == -1) {
+    if ($sqlcount > $pagesize) {
+        $offsetcount = $scheduler->count_slots_for_teacher($teacherid, $currentgroup, true);
+        $offset = floor($offsetcount / $pagesize);
+    } else {
+        $offset = 0;
+    }
+}
+if ($offset * $pagesize >= $sqlcount && $sqlcount > 0) {
+    $offset = floor(($sqlcount-1) / $pagesize);
+}
+
+$slots = $scheduler->get_slots_for_teacher($teacherid, $currentgroup, $offset * $pagesize, $pagesize);
+
+echo $output->heading(get_string('slots', 'scheduler'));
+
+// Print instructions and button for creating slots.
+$key = ($slots) ? 'addslot' : 'welcomenewteacher';
+echo html_writer::div(get_string($key, 'scheduler'));
+
+
+$commandbar = new scheduler_command_bar();
+$commandbar->title = get_string('actions', 'scheduler');
+
+$addbuttons = array();
+$addbuttons[] = $commandbar->action_link(new moodle_url($actionurl, array('what' => 'addsession')), 'addsession', 't/add');
+$addbuttons[] = $commandbar->action_link(new moodle_url($actionurl, array('what' => 'addslot')), 'addsingleslot', 't/add');
+$commandbar->add_group(get_string('addcommands', 'scheduler'), $addbuttons);
+
+// If slots already exist, also show delete buttons.
+if ($slots) {
+    $delbuttons = array();
+
+    $delselectedurl = new moodle_url($actionurl, array('what' => 'deleteslots'));
+    $PAGE->requires->yui_module('moodle-mod_scheduler-delselected', 'M.mod_scheduler.delselected.init',
+                                array($delselectedurl->out(false)) );
+    $delselected = $commandbar->action_link($delselectedurl, 'deleteselection', 't/delete',
+                                            'confirmdelete-selected', 'delselected');
+    $delselected->formid = 'delselected';
+    $delbuttons[] = $delselected;
+
+    if (has_capability('mod/scheduler:manageallappointments', $context) && $subpage == 'allappointments') {
+        $delbuttons[] = $commandbar->action_link(
+                        new moodle_url($actionurl, array('what' => 'deleteall')),
+                        'deleteallslots', 't/delete', 'confirmdelete-all');
+        $delbuttons[] = $commandbar->action_link(
+                        new moodle_url($actionurl, array('what' => 'deleteallunused')),
+                        'deleteallunusedslots', 't/delete', 'confirmdelete-unused');
+    }
+    $delbuttons[] = $commandbar->action_link(
+                    new moodle_url($actionurl, array('what' => 'deleteunused')),
+                    'deleteunusedslots', 't/delete', 'confirmdelete-myunused');
+    $delbuttons[] = $commandbar->action_link(
+                    new moodle_url($actionurl, array('what' => 'deleteonlymine')),
+                    'deletemyslots', 't/delete', 'confirmdelete-mine');
+
+    $commandbar->add_group(get_string('deletecommands', 'scheduler'), $delbuttons);
+}
+
+echo $output->render($commandbar);
+
+
+// Some slots already exist - prepare the table of slots.
+if ($slots) {
+
+    $slotman = new scheduler_slot_manager($scheduler, $actionurl);
+    $slotman->showteacher = ($subpage == 'allappointments');
+
+    foreach ($slots as $slot) {
+
+        $editable = ($USER->id == $slot->teacherid || has_capability('mod/scheduler:manageallappointments', $context));
+
+        $studlist = new scheduler_student_list($slotman->scheduler);
+        $studlist->expandable = false;
+        $studlist->expanded = true;
+        $studlist->editable = $editable;
+        $studlist->linkappointment = true;
+        $studlist->checkboxname = 'seen[]';
+        $studlist->buttontext = get_string('saveseen', 'scheduler');
+        $studlist->actionurl = new moodle_url($actionurl, array('what' => 'saveseen', 'slotid' => $slot->id));
+        foreach ($slot->get_appointments() as $app) {
+            $studlist->add_student($app, false, $app->is_attended(), true, $scheduler->uses_studentdata());
+        }
+
+        $slotman->add_slot($slot, $studlist, $editable);
+    }
+
+    echo $output->render($slotman);
+
+    if ($sqlcount > $pagesize) {
+        echo $output->paging_bar($sqlcount, $offset, $pagesize, $actionurl, 'offset');
+    }
+
+    // Instruction for teacher to click Seen box after appointment.
+    echo html_writer::div(get_string('markseen', 'scheduler'));
+
+}
+
+$groupfilter = ($subpage == 'myappointments') ? $groupsthatcanseeme : $groupsicurrentlysee;
+$maxlistsize = get_config('mod_scheduler', 'maxstudentlistsize');
+$students = array();
+$reminderstudents = array();
+if ($groupfilter === '') {
+    $students = $scheduler->get_students_for_scheduling('', $maxlistsize);
+    if ($scheduler->allows_unlimited_bookings()) {
+        $reminderstudents  = $scheduler->get_students_for_scheduling('', $maxlistsize, true);
+    } else {
+        $reminderstudents = $students;
+    }
+} else if (count($groupfilter) > 0) {
+    $students = $scheduler->get_students_for_scheduling(array_keys($groupfilter), $maxlistsize);
+    if ($scheduler->allows_unlimited_bookings()) {
+        $reminderstudents = $scheduler->get_students_for_scheduling(array_keys($groupfilter), $maxlistsize, true);
+    } else {
+        $reminderstudents = $students;
+    }
+}
+
+if ($students === 0) {
+    $nostudentstr = get_string('noexistingstudents', 'scheduler');
+    if ($COURSE->id == SITEID) {
+        $nostudentstr .= '<br/>'.get_string('howtoaddstudents', 'scheduler');
+    }
+    echo $output->notification($nostudentstr, 'notifyproblem');
+} else if (is_integer($students)) {
+    // There are too many students who still have to make appointments, don't display a list.
+    $toomanystr = get_string('missingstudentsmany', 'scheduler', $students);
+    echo $output->notification($toomanystr, 'notifymessage');
+
+} else if (count($students) > 0) {
+
+    if (count($reminderstudents) > 0) {
+        $studids = implode(',', array_keys($reminderstudents));
+
+        $messageurl = new moodle_url($actionurl, array('what' => 'sendmessage', 'recipients' => $studids));
+        $invitationurl = new moodle_url($messageurl, array('template' => 'invite'));
+        $reminderurl = new moodle_url($messageurl, array('template' => 'invitereminder'));
+
+        $maildisplay = '';
+        $maildisplay .= html_writer::link($invitationurl, get_string('sendinvitation', 'scheduler'));
+        $maildisplay .= ' &mdash; ';
+        $maildisplay .= html_writer::link($reminderurl, get_string('sendreminder', 'scheduler'));
+
+        echo $output->box_start('maildisplay');
+        // Print number of students who still have to make an appointment.
+        echo $output->heading(get_string('missingstudents', 'scheduler', count($reminderstudents)), 3);
+        // Print e-mail addresses and mailto links.
+        echo $maildisplay;
+        echo $output->box_end();
+    }
+
+    $userfields = scheduler_get_user_fields(null, $context);
+    $fieldtitles = array();
+    foreach ($userfields as $f) {
+        $fieldtitles[] = $f->title;
+    }
+    $studtable = new scheduler_scheduling_list($scheduler, $fieldtitles);
+    $studtable->id = 'studentstoschedule';
+
+    foreach ($students as $student) {
+        $picture = $output->user_picture($student);
+        $name = $output->user_profile_link($scheduler, $student);
+        $actions = array();
+        $actions[] = new action_menu_link_secondary(
+                        new moodle_url($actionurl, array('what' => 'schedule', 'studentid' => $student->id)),
+                        new pix_icon('e/insert_date', '', 'moodle'),
+                        get_string('scheduleinslot', 'scheduler') );
+        $actions[] = new action_menu_link_secondary(
+                        new moodle_url($actionurl, array('what' => 'markasseennow', 'studentid' => $student->id)),
+                        new pix_icon('t/approve', '', 'moodle'),
+                        get_string('markasseennow', 'scheduler') );
+
+        $userfields = scheduler_get_user_fields($student, $context);
+        $fieldvals = array();
+        foreach ($userfields as $f) {
+            $fieldvals[] = $f->value;
+        }
+        $studtable->add_line($picture, $name, $fieldvals, $actions);
+    }
+
+    $divclass = 'schedulelist '.($scheduler->is_group_scheduling_enabled() ? 'halfsize' : 'fullsize');
+    echo html_writer::start_div($divclass);
+    echo $output->heading(get_string('schedulestudents', 'scheduler'), 3);
+
+    // Print table of students who still have to make appointments.
+    echo $output->render($studtable);
+    echo html_writer::end_div();
+
+    if ($scheduler->is_group_scheduling_enabled()) {
+
+        // Print list of groups that can be scheduled.
+
+        echo html_writer::start_div('schedulelist halfsize');
+        echo $output->heading(get_string('schedulegroups', 'scheduler'), 3);
+
+        if (empty($groupsicanschedule)) {
+            echo $output->notification(get_string('nogroups', 'scheduler'));
+        } else {
+            $grouptable = new scheduler_scheduling_list($scheduler, array());
+            $grouptable->id = 'groupstoschedule';
+
+            $groupcnt = 0;
+            foreach ($groupsicanschedule as $group) {
+                $members = groups_get_members($group->id, user_picture::fields('u'), 'u.lastname, u.firstname');
+                if (empty($members)) {
+                    continue;
+                }
+                if (!$scheduler->has_slots_booked_for_group($group->id, false, $scheduler->schedulermode == 'onetime')) {
+
+                    $picture = print_group_picture($group, $course->id, false, true, true);
+                    $name = $group->name;
+                    $groupmembers = array();
+                    foreach ($members as $member) {
+                        $groupmembers[] = fullname($member);
+                    }
+                    $name .= ' ['. implode(', ', $groupmembers) . ']';
+                    $actions = array();
+                    $actions[] = new action_menu_link_secondary(
+                                    new moodle_url($actionurl, array('what' => 'schedulegroup', 'groupid' => $group->id)),
+                                    new pix_icon('e/insert_date', '', 'moodle'),
+                                    get_string('scheduleinslot', 'scheduler') );
+
+                    $grouptable->add_line($picture, $name, array(), $actions);
+                    $groupcnt++;
+                }
+            }
+            // Print table of groups that still need to make appointments.
+            if ($groupcnt > 0) {
+                echo $output->render($grouptable);
+            } else {
+                echo $output->notification(get_string('nogroups', 'scheduler'));
+            }
+        }
+        echo html_writer::end_div();
+    }
+
+} else {
+    echo $output->notification(get_string('noexistingstudents', 'scheduler'));
+}
+echo $output->footer();
\ No newline at end of file
diff --git a/mod/scheduler/tests/behat/add_slots.feature b/mod/scheduler/tests/behat/add_slots.feature
new file mode 100644
index 0000000..36079f2
--- /dev/null
+++ b/mod/scheduler/tests/behat/add_slots.feature
@@ -0,0 +1,113 @@
+@mod_scheduler
+Feature: Teacher can add slots to a scheduler activity
+  In order to allow students to book a slot
+  As a teacher
+  I need to add slots to the scheduler
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | teacher1 | Teacher | 1 | teacher1@example.com |
+      | student1 | Student | 1 | student1@example.com |
+      | student2 | Student | 2 | student2@example.com |
+      | student3 | Student | 3 | student3@example.com |
+      | student4 | Student | 4 | student4@example.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | editingteacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+      | student3 | C1 | student |
+      | student4 | C1 | student |
+    And the following "activities" exist:
+      | activity  | name           | intro | course | idnumber   |
+      | scheduler | Test scheduler | n     | C1     | scheduler1 |
+
+  @javascript
+  Scenario: Teacher adds a single, empty slot to the scheduler
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I click on "Add slots" "link"
+    And I follow "Add single slot"
+    And I set the following fields to these values:
+      | starttime[day]   | 1     |
+      | starttime[month] | April |
+      | starttime[year]  | 2050  |
+      | duration         | 30    |
+    And I click on "Save changes" "button"
+    Then I should see "1 slot added"
+    And I should see "Friday, 1 April 2050"
+    
+  @javascript
+  Scenario: Teacher enters invalid values when adding a slot
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I click on "Add slots" "link"
+    And I follow "Add single slot"
+    And I set the following fields to these values:
+      | starttime[day]   | 1     |
+      | starttime[month] | April |
+      | starttime[year]  | 2010  |
+    And I click on "Save changes" "button"
+    Then I should see "in the past"
+    And I set the following fields to these values:
+      | starttime[year]  | 2050  |
+      | duration         | -1    |
+    And I click on "Save changes" "button"
+    And I should see "Slot duration must be between"
+    And I set the following fields to these values:
+      | duration         | 10    |
+      | exclusivity      | -10   |
+    And I click on "Save changes" "button"
+    And I should see "needs to be 1 or more"
+    And I set the following fields to these values:
+      | exclusivity      | 5     |
+    And I click on "Save changes" "button"
+    And I should see "1 slot added"
+
+  @javascript
+  Scenario: Teacher enters a slot and schedules 3 students
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I click on "Add slots" "link"
+    And I follow "Add single slot"
+    And I set the following fields to these values:
+      | starttime[day]   | 1         |
+      | starttime[month] | April     |
+      | starttime[year]  | 2050      |
+      | exclusivity      | 2         |
+      | studentid[0]     | Student 1 |
+    And I click on "Add another student" "button"
+    And I set the following fields to these values:
+      | studentid[1]     | Student 2 |
+    And I click on "Add another student" "button"
+    And I set the following fields to these values:
+      | studentid[2]     | Student 3 |
+    And I click on "Save changes" "button"
+    Then I should see "more than allowed"
+    And I set the following fields to these values:
+      | exclusivity      | 3         |
+    And I click on "Save changes" "button"
+    And I should see "1 slot added"
+    And I should see "Student 1"
+    And I should see "Student 2"
+    And I should see "Student 3"
+
+
+  @javascript
+  Scenario: Teacher creates 10 slots at once
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Test scheduler" scheduler and I fill the form with:
+      | Location  | Here |
+    Then I should see "10 slots have been added"
+    And I should see "1:00 AM"
+    And I should see "2:00 AM"
+    And I should see "10:00 AM"
+    And I should not see "11:00 AM"
diff --git a/mod/scheduler/tests/behat/behat_mod_scheduler.php b/mod/scheduler/tests/behat/behat_mod_scheduler.php
new file mode 100644
index 0000000..2536573
--- /dev/null
+++ b/mod/scheduler/tests/behat/behat_mod_scheduler.php
@@ -0,0 +1,138 @@
+<?php
+
+/**
+ * Steps definitions related with the scheduler activity.
+ *
+ * @package    mod_scheduler
+ * @category   test
+ * @copyright  2015 Henning Bostelmann
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// NOTE: no MOODLE_INTERNAL test here, this file may be required by behat before including /config.php.
+require_once(__DIR__ . '/../../../../lib/behat/behat_base.php');
+
+use Behat\Behat\Context\Step\Given as Given, Behat\Behat\Context\Step\When as When, Behat\Gherkin\Node\TableNode as TableNode;
+/**
+ * Scheduler-related steps definitions.
+ *
+ * @package mod_scheduler
+ * @category test
+ * @copyright  2015 Henning Bostelmann
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class behat_mod_scheduler extends behat_base {
+
+    /**
+     * Adds a series of slots to the scheduler
+     *
+     * @Given /^I add a slot (\d+) days ahead at (\d+) in "(?P<activityname_string>(?:[^"]|\\")*)" scheduler and I fill the form with:$/
+     *
+     * @param int $daysahead
+     * @param int $time
+     * @param string $activityname
+     * @param TableNode $fielddata
+     */
+    public function i_add_a_slot_days_ahead_at_in_scheduler_and_i_fill_the_form_with(
+                              $daysahead, $time, $activityname, TableNode $fielddata) {
+
+        $hours = floor($time / 100);
+        $mins  = $time - 100 * $hours;
+        $startdate = time() + $daysahead * DAYSECS;
+
+        $this->execute('behat_general::click_link', $this->escape($activityname));
+        $this->execute('behat_general::i_click_on', array('Add slots', 'link'));
+        $this->execute('behat_general::click_link', 'Add single slot');
+
+        $rows = array();
+        $rows[] = array('starttime[day]', date("j", $startdate));
+        $rows[] = array('starttime[month]', date("F", $startdate));
+        $rows[] = array('starttime[year]', date("Y", $startdate));
+        $rows[] = array('starttime[hour]', $hours);
+        $rows[] = array('starttime[minute]', $mins);
+        $rows[] = array('duration', '45');
+        foreach ($fielddata->getRows() as $row) {
+            $rows[] = $row;
+        }
+        $this->execute('behat_forms::i_set_the_following_fields_to_these_values', new TableNode($rows));
+
+        $this->execute('behat_general::i_click_on', array('Save changes', 'button'));
+    }
+
+
+    /**
+     * Adds a series of slots to the scheduler
+     *
+     * @Given /^I add (\d+) slots (\d+) days ahead in "(?P<activityname_string>(?:[^"]|\\")*)" scheduler and I fill the form with:$/
+     *
+     * @param int $slotcount
+     * @param int $daysahead
+     * @param string $activityname
+     * @param TableNode $fielddata
+     */
+    public function i_add_slots_days_ahead_in_scheduler_and_i_fill_the_form_with(
+                        $slotcount, $daysahead, $activityname, TableNode $fielddata) {
+
+        $startdate = time() + $daysahead * DAYSECS;
+
+        $this->execute('behat_general::click_link', $this->escape($activityname));
+        $this->execute('behat_general::i_click_on', array('Add slots', 'link'));
+        $this->execute('behat_general::click_link', 'Add repeated slots');
+
+        $rows = array();
+        $rows[] = array('rangestart[day]', date("j", $startdate));
+        $rows[] = array('rangestart[month]', date("F", $startdate));
+        $rows[] = array('rangestart[year]', date("Y", $startdate));
+        $rows[] = array('Saturday', '1');
+        $rows[] = array('Sunday', '1');
+        $rows[] = array('starthour', '1');
+        $rows[] = array('endhour', $slotcount + 1);
+        $rows[] = array('duration', '45');
+        $rows[] = array('break', '15');
+        foreach ($fielddata->getRows() as $row) {
+            $rows[] = $row;
+        }
+
+        $this->execute('behat_forms::i_set_the_following_fields_to_these_values', new TableNode($rows));
+
+        $this->execute('behat_general::i_click_on', array('Save changes', 'button'));
+
+    }
+
+    /**
+     * Add the "upcoming events" block, globally on every page.
+     *
+     * This is useful as it provides an easy way of checking a user's calendar entries.
+     *
+     * @Given /^I add the upcoming events block globally$/
+     */
+    public function i_add_the_upcoming_events_block_globally() {
+
+        $home = $this->escape(get_string('sitehome'));
+
+        $this->execute('behat_data_generators::the_following_exist', array('users',
+                        new TableNode(array(
+                            array('username', 'firstname', 'lastname', 'email'),
+                            array('globalmanager1', 'GlobalManager', '1', 'globalmanager1@example.com')
+                        )) ) );
+
+        $this->execute('behat_data_generators::the_following_exist', array('system role assigns',
+                        new TableNode(array(
+                            array('user', 'role'),
+                            array('globalmanager1', 'manager')
+                        )) ) );
+        $this->execute('behat_auth::i_log_in_as', 'globalmanager1');
+        $this->execute('behat_general::click_link', $home);
+        $this->execute('behat_navigation::i_navigate_to_in_current_page_administration', array('Turn editing on'));
+        $this->execute('behat_blocks::i_add_the_block', 'Upcoming events');
+
+        $this->execute('behat_blocks::i_open_the_blocks_action_menu', 'Upcoming events');
+        $this->execute('behat_general::click_link', 'Configure Upcoming events block');
+        $this->execute('behat_forms::i_set_the_following_fields_to_these_values', new TableNode(array(
+                            array('Page contexts', 'Display throughout the entire site')
+                        )) );
+        $this->execute('behat_general::i_click_on', array('Save changes', 'button'));
+        $this->execute('behat_auth::i_log_out');
+
+    }
+}
diff --git a/mod/scheduler/tests/behat/conflicts.feature b/mod/scheduler/tests/behat/conflicts.feature
new file mode 100644
index 0000000..40c2df7
--- /dev/null
+++ b/mod/scheduler/tests/behat/conflicts.feature
@@ -0,0 +1,199 @@
+@mod_scheduler
+Feature: Teachers are warned about scheduling conflicts
+  In order to create useful slots
+  As a teacher
+  I need to take care not to create conflicting schedules.
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname   | lastname | email                |
+      | manager1 | Manager     | 1        | manager1@example.com | 
+      | teacher1 | Teacher     | 1        | teacher1@example.com |
+      | teacher2 | Teacher     | 2        | teacher2@example.com |
+      | student1 | Student     | 1        | student1@example.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user  | course | role           |  
+      | teacher1  | C1 | editingteacher |
+      | teacher2  | C1 | editingteacher |
+      | student1  | C1 | student        |
+    And the following "system role assigns" exist:
+      | user     | role    |
+      | manager1 | manager |
+    And the following "activities" exist:
+      | activity  | name             | intro | course | idnumber   | groupmode | schedulermode | maxbookings |
+      | scheduler | Test scheduler A | n     | C1     | schedulerA | 0         | oneonly       | 1           |
+      | scheduler | Test scheduler B | n     | C1     | schedulerB | 0         | oneonly       | 1           |
+
+ @javascript
+ Scenario: A teacher edits a single slot and is warned about conflicts
+           
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I add 5 slots 5 days ahead in "Test scheduler A" scheduler and I fill the form with:
+      | Location | My office |
+    And I am on "Course 1" course homepage    
+    And I add a slot 5 days ahead at 1000 in "Test scheduler B" scheduler and I fill the form with:
+      | Location | My office |
+      
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler A"
+    And I click on "Edit" "link" in the "2:00 AM" "table_row"
+    And I set the following fields to these values:
+      | starttime[minute] | 40 |      
+    And I click on "Save changes" "button"
+    Then I should see "conflict"
+    And "Save changes" "button" should exist
+    And I should see "3:00 AM"
+    And I should not see "2:00 AM"
+     
+    When I set the following fields to these values:
+      | starttime[hour]   | 09 |      
+      | starttime[minute] | 55 |      
+    And I click on "Save changes" "button"
+    Then I should see "conflict"
+    And "Save changes" "button" should exist
+    And I should see "10:00 AM"
+    And I should see "in course C1, scheduler Test scheduler B"
+    And I should not see "2:00 AM"
+   
+    When I set the following fields to these values:
+      | starttime[hour]   | 09 |      
+      | starttime[minute] | 55 |
+      | Ignore scheduling conflicts | 1 |      
+    And I click on "Save changes" "button"
+    Then I should see "slot updated"
+    And "9:55 AM" "table_row" should exist
+    And I log out
+    
+ @javascript
+ Scenario: A manager edits slots for several teachers, creating conflicts
+           
+    Given I log in as "manager1"
+    And I follow "Site home"
+    And I navigate to "Turn editing on" in current page administration
+    And I add the "Navigation" block if not present
+    And I click on "Courses" "link" in the "Navigation" "block"
+    And I am on "Course 1" course homepage
+    And I add 6 slots 5 days ahead in "Test scheduler A" scheduler and I fill the form with:
+      | Location | Office T1 |
+      | Teacher  | Teacher 1 |
+    And I am on "Course 1" course homepage
+    And I add 5 slots 5 days ahead in "Test scheduler B" scheduler and I fill the form with:
+      | Location | Office T2 |
+      | Teacher  | Teacher 2 |
+      
+    When I am on "Course 1" course homepage    
+    And I follow "Test scheduler A"
+    And I click on "Edit" "link" in the "3:00 AM" "table_row"
+    And I set the following fields to these values:
+      | starttime[hour]   | 6  |      
+      | starttime[minute] | 40 |      
+      | duration          | 5  |      
+    And I click on "Save changes" "button"
+    Then I should see "conflict"
+    And "Save changes" "button" should exist
+    And I should see "6:00 AM"
+    And I should see "in this scheduler"
+    And I should not see "3:00 AM"
+     
+    When I set the following fields to these values:
+      | starttime[hour]   | 5  |      
+      | starttime[minute] | 40 |      
+      | duration          | 5  |      
+      | Teacher           | Teacher 2 |      
+    And I click on "Save changes" "button"
+    Then I should see "conflict"
+    And "Save changes" "button" should exist
+    And I should see "5:00 AM"
+    And I should see "in course C1, scheduler Test scheduler B"
+    And I should not see "3:00 AM"
+
+    When I set the following fields to these values:
+      | starttime[hour]   | 6  |      
+      | starttime[minute] | 40 |      
+      | duration          | 5  |      
+      | Teacher           | Teacher 2 |      
+    And I click on "Save changes" "button"
+    Then I should not see "conflict"
+    And "Save changes" "button" should not exist
+    And I should see "slot updated"
+    And "6:40 AM" "table_row" should exist
+    And I log out
+    
+    
+ @javascript
+ Scenario: A teacher adds a series of slots, creating conflicts
+           
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I add a slot 5 days ahead at 0125 in "Test scheduler A" scheduler and I fill the form with:
+      | Location  | My office |
+      | duration  | 15        |
+    # Blocks 3 other slots on a 1-hour grid
+    And I am on "Course 1" course homepage
+    And I add a slot 5 days ahead at 0225 in "Test scheduler A" scheduler and I fill the form with:
+      | Location  | My office |
+      | duration  | 100       |
+    # Booked slot - must not be deleted as conflict
+    And I am on "Course 1" course homepage
+    And I add a slot 5 days ahead at 0855 in "Test scheduler A" scheduler and I fill the form with:
+      | Location  | My office |
+      | duration  | 10        |
+      | studentid[0]  | Student 1 |
+    # Slot in other scheduler - must not be deleted as conflict
+    And I am on "Course 1" course homepage
+    And I add a slot 5 days ahead at 0605 in "Test scheduler B" scheduler and I fill the form with:
+      | Location  | My office |
+      | duration  | 20        |
+
+    When I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Test scheduler A" scheduler and I fill the form with:
+      | Location | Lecture hall |    
+    Then I should see "conflicting slots"
+    And I should not see "deleted"
+    And I should see "4 slots have been added"
+    And  "1:25 AM" "table_row" should exist
+    And  "2:25 AM" "table_row" should exist
+    And  "8:55 AM" "table_row" should exist
+    And  "1:00 AM" "table_row" should not exist
+    And  "2:00 AM" "table_row" should not exist
+    And  "3:00 AM" "table_row" should not exist
+    And  "4:00 AM" "table_row" should not exist
+    And  "5:00 AM" "table_row" should exist
+    And  "6:00 AM" "table_row" should not exist
+    And  "7:00 AM" "table_row" should exist
+    And  "8:00 AM" "table_row" should exist
+    And  "9:00 AM" "table_row" should not exist
+    And "10:00 AM" "table_row" should exist
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler B"
+    And "6:05 AM" "table_row" should exist
+
+    When I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Test scheduler A" scheduler and I fill the form with:
+      | Location | Lecture hall |    
+      | Force when overlap | 1  |    
+    Then I should see "conflicting slots"
+    And I should see "deleted"
+    And I should see "8 slots have been added"
+    And  "1:25 AM" "table_row" should not exist
+    And  "2:25 AM" "table_row" should not exist
+    And  "9:55 AM" "table_row" should not exist
+    And  "1:00 AM" "table_row" should exist
+    And  "2:00 AM" "table_row" should exist
+    And  "3:00 AM" "table_row" should exist
+    And  "4:00 AM" "table_row" should exist
+    And  "5:00 AM" "table_row" should exist
+    And  "6:00 AM" "table_row" should not exist
+    And  "7:00 AM" "table_row" should exist
+    And  "8:00 AM" "table_row" should exist
+    And  "9:00 AM" "table_row" should not exist
+    And "10:00 AM" "table_row" should exist
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler B"
+    And "6:05 AM" "table_row" should exist
+   
+    And I log out
diff --git a/mod/scheduler/tests/behat/group_availability.feature b/mod/scheduler/tests/behat/group_availability.feature
new file mode 100644
index 0000000..c7b0e90
--- /dev/null
+++ b/mod/scheduler/tests/behat/group_availability.feature
@@ -0,0 +1,77 @@
+@mod_scheduler
+Feature: As a teacher I need to see an accurate list of users to be scheduled
+  In order to see who needs to schedule an appointment
+  As a teacher
+  I need to view the table of students in the teacher view
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | teacher  | Teacher   | Teacher  | teacher@example.com |
+      | student1 | Student   | 1        | student.1@example.com |
+      | student2 | Student   | 2        | student.2@example.com |
+      | student3 | Student   | 3        | student.3@example.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher  | C1 | editingteacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+      | student3 | C1 | student |
+    And the following "groups" exist:
+      | name | course | idnumber |
+      | Group 1 | C1 | G1 |
+      | Group 2 | C1 | G2 |
+    And the following "group members" exist:
+      | user        | group |
+      | student1    | G1    |
+      | student2    | G2    |
+    And the following "groupings" exist:
+      | name        | course | idnumber |
+      | Grouping 1  | C1     | GG1      |
+    And the following "grouping groups" exist:
+      | grouping | group |
+      | GG1      | G1    |
+    And the following config values are set as admin:
+      | enableavailability | 1 |
+    And the following "activities" exist:
+      | activity  | name           | intro | course | idnumber   |
+      | scheduler | Test scheduler | n     | C1     | scheduler1 |      
+    And I log in as "teacher"
+    And I am on "Course 1" course homepage
+
+  @javascript
+  Scenario: A scheduler that is restricted to a single group
+    When I follow "Test scheduler"
+    Then I should see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 2" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    
+    When I navigate to "Edit settings" in current page administration
+    And I expand all fieldsets
+    And I click on "Add restriction..." "button"
+    And I click on "Group" "button" in the "Add restriction..." "dialogue"
+    And I set the field with xpath "//select[@name='id']" to "Group 2"
+    And I press "Save and display"
+    Then I should not see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 2" in the "studentstoschedule" "table"
+    And I should not see "Student 3" in the "studentstoschedule" "table"
+
+  @javascript
+  Scenario: A scheduler that is restricted to a grouping
+    When I follow "Test scheduler"
+    Then I should see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 2" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    
+    When I navigate to "Edit settings" in current page administration
+    And I expand all fieldsets
+    And I click on "Add restriction..." "button"
+    And I click on "Grouping" "button" in the "Add restriction..." "dialogue"
+    And I set the field with xpath "//select[@name='id']" to "Grouping 1"
+    And I press "Save and display"
+    Then I should see "Student 1" in the "studentstoschedule" "table"
+    And I should not see "Student 2" in the "studentstoschedule" "table"
+    And I should not see "Student 3" in the "studentstoschedule" "table"
diff --git a/mod/scheduler/tests/behat/groupmode.feature b/mod/scheduler/tests/behat/groupmode.feature
new file mode 100644
index 0000000..07b0a6e
--- /dev/null
+++ b/mod/scheduler/tests/behat/groupmode.feature
@@ -0,0 +1,350 @@
+@mod_scheduler
+Feature: Users can only see their own groups if the scheduler is in group mode
+  In order to see slots
+  As a user
+  I must be allowed to see the group of the relevant teacher
+
+  Background:
+    Given the following "users" exist:
+      | username   | firstname      | lastname | email                  |
+      | edteacher1 | Editingteacher | 1        | edteacher1@example.com |
+      | neteacher1 | Nonedteacher   | 1        | neteacher1@example.com |
+      | neteacher2 | Nonedteacher   | 2        | neteacher2@example.com |
+      | student1   | Student        | 1        | student1@example.com   |
+      | student2   | Student        | 2        | student2@example.com   |
+      | student3   | Student        | 3        | student3@example.com   |
+      | student4   | Student        | 4        | student4@example.com   |
+      | student5   | Student        | 5        | student5@example.com   |
+      | student6   | Student        | 6        | student5@example.com   |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user       | course | role           |
+      | edteacher1 | C1     | editingteacher |
+      | neteacher1 | C1     | teacher        |
+      | neteacher2 | C1     | teacher        |
+      | student1   | C1     | student        |
+      | student2   | C1     | student        |
+      | student3   | C1     | student        |
+      | student4   | C1     | student        |
+      | student5   | C1     | student        |
+      | student6   | C1     | student        |
+    And the following "groups" exist:
+      | name    | course | idnumber |
+      | Group A | C1     | GA       |
+      | Group B | C1     | GB       |
+      | Group C | C1     | GC       |
+      | Group D | C1     | GD       |
+    And the following "group members" exist:
+      | user       | group |
+      | edteacher1 | GA    |
+      | edteacher1 | GB    |
+      | neteacher1 | GB    |
+      | neteacher1 | GC    |
+      | student1   | GA    |
+      | student2   | GA    |
+      | student3   | GB    |  
+      | student4   | GB    |
+      | student5   | GD    |
+    And the following "activities" exist:
+      | activity  | name                    | intro | course | idnumber   | groupmode |
+      | scheduler | Test scheduler none     | n     | C1     | schedulern | 0         |
+      | scheduler | Test scheduler separate | n     | C1     | schedulers | 1         |
+      | scheduler | Test scheduler visible  | n     | C1     | schedulerv | 2         |
+    And the following "permission overrides" exist:
+      | capability                  | permission | role    | contextlevel | reference |
+      | moodle/site:accessallgroups | Prevent    | teacher | Course       | C1        |
+    And I add the upcoming events block globally
+    And I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I add 5 slots 10 days ahead in "Test scheduler none" scheduler and I fill the form with:
+      | Location  | Here |
+    And I am on "Course 1" course homepage
+    And I add 5 slots 11 days ahead in "Test scheduler visible" scheduler and I fill the form with:
+      | Location  | Here |
+    And I am on "Course 1" course homepage
+    And I add 5 slots 12 days ahead in "Test scheduler separate" scheduler and I fill the form with:
+      | Location  | Here |
+    And I log out
+    And I log in as "neteacher1"
+    And I am on "Course 1" course homepage
+    And I add 5 slots 10 days ahead in "Test scheduler none" scheduler and I fill the form with:
+      | Location  | There |
+    And I am on "Course 1" course homepage
+    And I add 5 slots 11 days ahead in "Test scheduler visible" scheduler and I fill the form with:
+      | Location  | There |
+    And I am on "Course 1" course homepage
+    And I add 5 slots 12 days ahead in "Test scheduler separate" scheduler and I fill the form with:
+      | Location  | There |
+    And I log out
+    
+  @javascript
+  Scenario: Editing teachers can see all slots and all groups
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    And I follow "Statistics"
+    And I follow "All appointments"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    And I should see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    And I should see "Student 5" in the "studentstoschedule" "table"
+    And I should see "Student 6" in the "studentstoschedule" "table"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler visible"
+    And I follow "Statistics"
+    And I follow "All appointments"
+    Then I should see "Visible groups"
+    And the "group" select box should contain "All participants"
+    And the "group" select box should contain "Group A"
+    And the "group" select box should contain "Group B"
+    And the "group" select box should contain "Group C"
+    And the "group" select box should contain "Group D"
+    When I set the field "group" to "All participants"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    When I set the field "group" to "Group A"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should not see "Nonedteacher 1" in the "slotmanager" "table"
+    When I set the field "group" to "Group B"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    When I set the field "group" to "Group C"
+    Then I should not see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    And I follow "Statistics"
+    And I follow "All appointments"
+    Then I should see "Separate groups"
+    And the "group" select box should contain "All participants"
+    And the "group" select box should contain "Group A"
+    And the "group" select box should contain "Group B"
+    And the "group" select box should contain "Group C"
+    And the "group" select box should contain "Group D"
+    When I set the field "group" to "All participants"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    And I should see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    And I should see "Student 5" in the "studentstoschedule" "table"
+    And I should see "Student 6" in the "studentstoschedule" "table"
+    When I set the field "group" to "Group A"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should not see "Nonedteacher 1" in the "slotmanager" "table"
+    And I should see "Student 1" in the "studentstoschedule" "table"
+    And I should not see "Student 3" in the "studentstoschedule" "table"
+    And I should not see "Student 5" in the "studentstoschedule" "table"
+    And I should not see "Student 6" in the "studentstoschedule" "table"
+    When I set the field "group" to "Group B"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    And I should not see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    And I should not see "Student 5" in the "studentstoschedule" "table"
+    And I should not see "Student 6" in the "studentstoschedule" "table"
+    When I set the field "group" to "Group C"
+    Then I should not see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+
+    # In the "My appointments" tab, the teacher should only see students to schedule from their groups,
+    # i.e., groups A and B.
+    # Students outside any group should not be visible.
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "Group mode: Separate groups"
+    And I should see "Only students in Group A, Group B can book"
+    And I should see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    And I should not see "Student 5" in the "studentstoschedule" "table"
+    And I should not see "Student 6" in the "studentstoschedule" "table"
+    And I log out
+    
+  @javascript
+  Scenario: Nonediting teachers can see groups only if allowed by the group mode
+    
+    When I log in as "neteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "6 students still need to make an appointment"
+    When I follow "All appointments"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table" 
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler visible"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "2 students still need to make an appointment"
+    When I follow "All appointments"
+    Then I should see "Visible groups"
+    And the "group" select box should contain "All participants"
+    And the "group" select box should contain "Group A"
+    And the "group" select box should contain "Group B"
+    And the "group" select box should contain "Group C"
+    And the "group" select box should contain "Group D"
+    When I set the field "group" to "All participants"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    When I set the field "group" to "Group A"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should not see "Nonedteacher 1" in the "slotmanager" "table"    
+    When I set the field "group" to "Group B"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    When I set the field "group" to "Group C"
+    Then I should not see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "2 students still need to make an appointment"
+    When I follow "All appointments"
+    Then I should see "Separate groups"
+    And the "group" select box should not contain "All participants"
+    And the "group" select box should not contain "Group A"
+    And the "group" select box should contain "Group B"
+    And the "group" select box should contain "Group C"
+    And the "group" select box should not contain "Group D"
+    When I set the field "group" to "Group B"
+    Then I should see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+    When I set the field "group" to "Group C"
+    Then I should not see "Editingteacher 1" in the "slotmanager" "table"
+    And I should see "Nonedteacher 1" in the "slotmanager" "table"
+
+    When I set the field "group" to "Group B"
+    And I click on "Edit" "link_or_button" in the "Nonedteacher 1" "table_row"
+    Then I should see "Appointment 1"
+    And "Student 1" "option" should not exist in the "studentid[0]" "field"
+    And "Student 3" "option" should exist in the "studentid[0]" "field"
+    And I click on "Save changes" "button"
+
+    # In the "My appointments" tab, the teacher should only see students to schedule from their groups,
+    # i.e., group B (and C).
+    # Students in group 1 and outside any group should not be visible.
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "Group mode: Separate groups"
+    And I should see "Only students in Group B, Group C can book"
+    And I should not see "Student 1" in the "studentstoschedule" "table"
+    And I should not see "Student 2" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    And I should see "Student 4" in the "studentstoschedule" "table"
+    And I should not see "Student 5" in the "studentstoschedule" "table"
+    And I should not see "Student 6" in the "studentstoschedule" "table"
+    And I log out
+
+    # neteacher2 sees no students for scheduling in group mode, since he's not member of a group
+
+    When I log in as "neteacher2"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "6 students still need to make an appointment"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler visible"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "No students available for scheduling"
+    And I should see "Group mode: Visible groups"
+    And I should see "students cannot book appointments with you"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "No students available for scheduling"
+    And I should see "Group mode: Separate groups"
+    And I should see "students cannot book appointments with you"
+    
+  @javascript
+  Scenario: Students can see slots available to their own groups, or a slots if group mode is off
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    Then I should see "Editingteacher 1"
+    And I should see "Nonedteacher 1"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler visible"
+    Then I should see "Editingteacher 1"
+    And I should not see "Nonedteacher 1"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    Then I should see "Editingteacher 1"
+    And I should not see "Nonedteacher 1"
+    And I log out
+
+    When I log in as "student3"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    Then I should see "Editingteacher 1"
+    And I should see "Nonedteacher 1"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler visible"
+    Then I should see "Editingteacher 1"
+    And I should see "Nonedteacher 1"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    Then I should see "Editingteacher 1"
+    And I should see "Nonedteacher 1"
+    And I log out
+
+    When I log in as "student5"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    Then I should see "Editingteacher 1"
+    And I should see "Nonedteacher 1"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler visible"
+    Then I should see "No slots are available"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    Then I should see "No slots are available"
+    And I log out
+
+    When I log in as "student6"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    Then I should see "Editingteacher 1"
+    And I should see "Nonedteacher 1"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler visible"
+    Then I should see "No slots are available"
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler separate"
+    Then I should see "No slots are available"
+    And I log out
+
+  @javascript
+  Scenario: Students can see slots available to their own groups in forced group mode
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I navigate to "Edit settings" in current page administration
+    And I expand all fieldsets
+    And I set the field "Group mode" to "Separate groups"
+    And I set the field "Force group mode" to "Yes"
+    And I press "Save and display"
+    Then I should see "Test scheduler none"
+    And I log out
+
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler none"
+    Then I should see "Editingteacher 1"
+    And I should not see "Nonedteacher 1"
+    And I log out
\ No newline at end of file
diff --git a/mod/scheduler/tests/behat/groupscheduling.feature b/mod/scheduler/tests/behat/groupscheduling.feature
new file mode 100644
index 0000000..a1626b1
--- /dev/null
+++ b/mod/scheduler/tests/behat/groupscheduling.feature
@@ -0,0 +1,155 @@
+@mod_scheduler
+Feature: Entire groups can be booked into slots at once
+  In order to allow booking of entire groups
+  As a teacher
+  I need to use a scheduler with group bookings
+
+  Background:
+    Given the following "users" exist:
+      | username   | firstname      | lastname | email                  |
+      | edteacher1 | Editingteacher | 1        | edteacher1@example.com |
+      | neteacher1 | Nonedteacher   | 1        | neteacher1@example.com |
+      | student1   | Student        | 1        | student1@example.com   |
+      | student2   | Student        | 2        | student2@example.com   |
+      | student3   | Student        | 3        | student3@example.com   |
+      | student4   | Student        | 4        | student4@example.com   |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user       | course | role           |
+      | edteacher1 | C1     | editingteacher |
+      | neteacher1 | C1     | teacher        |
+      | student1   | C1     | student        |
+      | student2   | C1     | student        |
+      | student3   | C1     | student        |
+      | student4   | C1     | student        |
+    And the following "groups" exist:
+      | name     | course | idnumber |
+      | Group A1 | C1     | GA1      |
+      | Group A2 | C1     | GA2      |
+      | Group B1 | C1     | GB1      |
+      | Group B2 | C1     | GB2      |
+   And the following "groupings" exist:
+      | name       | course  | idnumber  |
+      | Grouping A | C1      | GROUPINGA |
+      | Grouping B | C1      | GROUPINGB |
+    And the following "group members" exist:
+      | user       | group |
+      | neteacher1 | GB1   |
+      | neteacher1 | GA1   |
+      | student1   | GA1   |
+      | student2   | GA1   |
+      | student3   | GA2   |  
+      | student4   | GA2   |
+      | student1   | GB1   |
+      | student2   | GB2   |
+      | student3   | GB1   |  
+      | student4   | GB2   |
+    And the following "grouping groups" exist:
+      | grouping  | group |
+      | GROUPINGA | GA1   |
+      | GROUPINGA | GA2   |
+      | GROUPINGB | GB1   |
+      | GROUPINGB | GB2   |
+    And the following "activities" exist:
+      | activity  | name                           | intro | course | idnumber   |
+      | scheduler | Test scheduler no grouping     | n     | C1     | schedulern |
+      | scheduler | Test scheduler grouping A      | n     | C1     | schedulera |
+      | scheduler | Test scheduler grouping B      | n     | C1     | schedulerb |
+    And I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler no grouping"
+    And I navigate to "Edit settings" in current page administration
+    And I set the following fields to these values:
+      | Booking in groups | Yes, for all groups |
+    And I click on "Save and return to course" "button"
+    And I follow "Test scheduler grouping A"
+    And I navigate to "Edit settings" in current page administration
+    And I set the following fields to these values:
+      | Booking in groups | Yes, in grouping Grouping A |
+    And I click on "Save and return to course" "button"
+    And I follow "Test scheduler grouping B"
+    And I navigate to "Edit settings" in current page administration
+    And I set the following fields to these values:
+      | Booking in groups | Yes, in grouping Grouping B |
+    And I click on "Save and return to course" "button"
+    And I log out
+    
+  @javascript
+  Scenario: Editing teachers can see and schedule relevant groups
+    Given I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler no grouping"
+    Then I should see "Group A1" in the "groupstoschedule" "table"
+    And I should see "Group A2" in the "groupstoschedule" "table"
+    And I should see "Group B1" in the "groupstoschedule" "table"
+    And I should see "Group B2" in the "groupstoschedule" "table"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler grouping A"
+    Then I should see "Group A1" in the "groupstoschedule" "table"
+    And I should see "Group A2" in the "groupstoschedule" "table"
+    And I should not see "Group B" in the "groupstoschedule" "table"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler grouping B"
+    Then I should not see "Group A" in the "groupstoschedule" "table"
+    And I should see "Group B1" in the "groupstoschedule" "table"
+    And I should see "Group B2" in the "groupstoschedule" "table"
+
+    When I am on "Course 1" course homepage
+    And I follow "Test scheduler no grouping"
+    And I click on "Schedule" "link_or_button" in the "Group A1" "table_row"
+    And I click on "Schedule in slot" "text" in the "Group A1" "table_row"
+    And I click on "Save changes" "button"
+    Then I should see "Student 1" in the "slotmanager" "table"
+    And I should see "Student 2" in the "slotmanager" "table"
+    And I should see "2 students still need to make an appointment"
+    And I should not see "Group A1" in the "groupstoschedule" "table"
+    And I should see "Group A2" in the "groupstoschedule" "table"
+    And I should not see "Group B1" in the "groupstoschedule" "table"
+    And I should not see "Group B2" in the "groupstoschedule" "table"
+    
+  @javascript
+  Scenario: Students can book their entire group into a slot
+    Given I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler no grouping"
+    And I add 8 slots 5 days ahead in "Test scheduler" scheduler and I fill the form with:
+      | Location    | Large office |
+      | exclusivity | 5            | 
+    And I add 5 slots 6 days ahead in "Test scheduler" scheduler and I fill the form with:
+      | Location    | Small office |
+      | exclusivity | 1            | 
+    And I log out
+   
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler no grouping"
+    Then the "appointgroup" select box should contain "Myself"
+    And the "appointgroup" select box should contain "Group A1"       
+    And the "appointgroup" select box should contain "Group B1"       
+    And the "appointgroup" select box should not contain "Group A2"       
+    And the "appointgroup" select box should not contain "Group B2"       
+   
+    When I set the field "appointgroup" to "Group A1"
+    And I click on "Book slot" "button" in the "8:00 AM" "table_row"
+    Then I should see "8:00 AM" in the "Large office" "table_row"
+    And I log out
+
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler no grouping"
+    Then I should see "Student 1" in the "8:00 AM" "table_row"
+    And I should see "Student 2" in the "8:00 AM" "table_row"
+    And I should see "2 students still need to make an appointment"
+    And I should not see "Group A1" in the "groupstoschedule" "table"
+    And I should see "Group A2" in the "groupstoschedule" "table"
+    And I should not see "Group B1" in the "groupstoschedule" "table"
+    And I should not see "Group B2" in the "groupstoschedule" "table"
+    And I log out
+    
+   
\ No newline at end of file
diff --git a/mod/scheduler/tests/behat/notes.feature b/mod/scheduler/tests/behat/notes.feature
new file mode 100644
index 0000000..0c21203
--- /dev/null
+++ b/mod/scheduler/tests/behat/notes.feature
@@ -0,0 +1,175 @@
+@mod_scheduler
+Feature: Teachers can write notes on slots and appointments
+  In order to record details about a meeting
+  As a teacher
+  I need to enter notes for the appointment
+
+  Background:
+    Given the following "users" exist:
+      | username   | firstname      | lastname | email                  |
+      | edteacher1 | Editingteacher | 1        | edteacher1@example.com |
+      | neteacher1 | Nonedteacher   | 1        | neteacher1@example.com |
+      | student1   | Student        | 1        | student1@example.com   |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user       | course | role           |
+      | edteacher1 | C1     | editingteacher |
+      | neteacher1 | C1     | teacher        |
+      | student1   | C1     | student        |
+    And the following "activities" exist:
+      | activity  | name               | intro | course | idnumber   | usenotes |
+      | scheduler | Test scheduler     | n     | C1     | schedulern | 3        |
+    And I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I add 5 slots 10 days ahead in "Test scheduler" scheduler and I fill the form with:
+      | Location  | Here |
+    And I log out
+    
+  @javascript
+  Scenario: Teachers can enter slot notes and appointment notes for others to see
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I follow "Statistics"
+    And I follow "All appointments"
+    And I click on "Edit" "link" in the "4:00 AM" "table_row"
+    And I set the following fields to these values:
+      | Comments | Note-for-slot |
+    And I click on "Save" "button"
+    Then I should see "slot updated"
+    When I click on "Edit" "link" in the "4:00 AM" "table_row"
+    Then I should see "Note-for-slot"
+    And I log out
+
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    Then I should see "Note-for-slot" in the "4:00 AM" "table_row"
+    When I click on "Book slot" "button" in the "4:00 AM" "table_row"
+    Then I should see "Note-for-slot"
+    And I log out
+    
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I follow "Statistics"
+    And I follow "All appointments"
+    And I click on "//a[text()='Student 1']" "xpath_element" in the "4:00 AM" "table_row"
+    Then I should see ", 4:00 AM" in the "Date and time" "table_row"
+    And I should see "4:45 AM" in the "Date and time" "table_row"
+    And I should see "Editingteacher 1" in the "Teacher" "table_row"
+    And I set the following fields to these values:
+      | Attended | 1 |
+      | Notes for appointment (visible to student) | note-for-appointment |
+      | Confidential notes (visible to teacher only) | note-confidential |
+    And I click on "Save changes" "button"
+    Then I should see "note-for-appointment"
+    And I should see "note-confidential"
+    And I log out
+        
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    Then I should see "Attended slots"
+    And I should see "note-for-appointment"
+    And I should not see "note-confidential"
+    And I log out
+    
+  @javascript
+  Scenario: Teachers see only the comments fields specified in the configuration
+
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I click on "Book slot" "button" in the "4:00 AM" "table_row"
+    Then I should see "Upcoming slots"
+    And I log out
+    
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I follow "Statistics"
+    And I follow "All appointments"
+    And I click on "//a[text()='Student 1']" "xpath_element" in the "4:00 AM" "table_row"
+    And I set the following fields to these values:
+      | Notes for appointment (visible to student) | note-for-appointment |
+      | Confidential notes (visible to teacher only) | note-confidential |
+    And I click on "Save changes" "button"
+    Then I should see "note-for-appointment"
+    And I should see "note-confidential"
+
+	When I follow "Test scheduler"
+	And I navigate to "Edit settings" in current page administration
+	And I set the field "Use notes for appointments" to "0"
+	And I click on "Save and display" "button"
+    And I click on "//a[text()='Student 1']" "xpath_element" in the "4:00 AM" "table_row"
+	Then I should not see "Notes for appointment"
+	And I should not see "note-for-appointment"
+	And I should not see "Confidential notes"
+	And I should not see "note-confidential"
+	And I click on "Save changes" "button"
+	And I log out
+
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    Then I should not see "note-for-appointment"
+    And I should not see "note-confidential"
+    And I log out
+
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I navigate to "Edit settings" in current page administration
+	And I set the field "Use notes for appointments" to "1"
+	And I click on "Save and display" "button"
+    And I click on "//a[text()='Student 1']" "xpath_element" in the "4:00 AM" "table_row"
+	Then I should see "Notes for appointment"
+	And I should see "note-for-appointment"
+	And I should not see "Confidential notes"
+	And I should not see "note-confidential"
+	And I click on "Save changes" "button"
+	And I log out
+	
+	When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    Then I should see "note-for-appointment"
+    And I should not see "note-confidential"
+    And I log out
+    
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I navigate to "Edit settings" in current page administration
+	And I set the field "Use notes for appointments" to "2"
+	And I click on "Save and display" "button"
+    And I click on "//a[text()='Student 1']" "xpath_element" in the "4:00 AM" "table_row"
+	Then I should not see "Notes for appointment"
+	And I should not see "note-for-appointment"
+	And I should see "Confidential notes"
+	And I should see "note-confidential"
+	And I click on "Save changes" "button"
+	And I log out
+
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    Then I should not see "note-for-appointment"
+    And I should not see "note-confidential"
+    And I log out
+
+    When I log in as "edteacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I navigate to "Edit settings" in current page administration
+	And I set the field "Use notes for appointments" to "3"
+	And I click on "Save and display" "button"
+    And I click on "//a[text()='Student 1']" "xpath_element" in the "4:00 AM" "table_row"
+	Then I should see "Notes for appointment"
+	And I should see "note-for-appointment"
+	And I should see "Confidential notes"
+	And I should see "note-confidential"
+	And I log out
\ No newline at end of file
diff --git a/mod/scheduler/tests/behat/officehours.feature b/mod/scheduler/tests/behat/officehours.feature
new file mode 100644
index 0000000..b376bc9
--- /dev/null
+++ b/mod/scheduler/tests/behat/officehours.feature
@@ -0,0 +1,96 @@
+@mod_scheduler
+Feature: Office hours bookings with Scheduler, one booking per student
+  In order to organize my office hours
+  As a teacher
+  I can use a scheduler to let students choose a time slot.
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email                |
+      | manager1 | Manager   | 1        | manager1@example.com |
+      | teacher1 | Teacher   | 1        | teacher1@example.com |
+      | student1 | Student   | 1        | student1@example.com |
+      | student2 | Student   | 2        | student2@example.com |
+      | student3 | Student   | 3        | student3@example.com |
+      | student4 | Student   | 4        | student4@example.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | editingteacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+      | student3 | C1 | student |
+      | student4 | C1 | student |
+    And the following "system role assigns" exist:
+      | user     | role    |
+      | manager1 | manager |
+    And the following "activities" exist:
+      | activity  | name           | intro | course | idnumber   | schedulermode |
+      | scheduler | Test scheduler | n     | C1     | scheduler1 | oneonly       |
+    And I add the upcoming events block globally
+
+  @javascript
+  Scenario: The teacher adds slots, and students book them
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Test scheduler" scheduler and I fill the form with:
+      | Location | My office |
+    Then I should see "10 slots have been added"
+    And I should see "4 students still need to make an appointment"
+    And I should see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 2" in the "studentstoschedule" "table"
+    And I should see "Student 3" in the "studentstoschedule" "table"
+    And I should see "Student 4" in the "studentstoschedule" "table"
+    And I log out
+           
+    When I log in as "student1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should see "10:00 AM" in the "slotbookertable" "table"
+    When I click on "Book slot" "button" in the "2:00 AM" "table_row"
+    Then "Cancel booking" "button" should exist
+    And I should see "Meeting with your Teacher, Teacher 1" in the "Upcoming events" "block"
+    And I log out
+    
+    When I log in as "student3"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should not see "2:00 AM" in the "slotbookertable" "table"
+    And I should see "10:00 AM" in the "slotbookertable" "table"
+    When I click on "Book slot" "button" in the "5:00 AM" "table_row" 
+    Then "Cancel booking" "button" should exist
+    And I should see "Meeting with your Teacher, Teacher 1" in the "Upcoming events" "block"
+    And I log out
+    
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then I should see "1:00 AM" in the "slotmanager" "table"
+    And I should see "Student 1" in the "2:00 AM" "table_row"
+    And I should see "Student 3" in the "5:00 AM" "table_row"
+    And I should see "10:00 AM" in the "slotmanager" "table"
+    And I should see "Meeting with your Student, Student 1" in the "Upcoming events" "block"
+    And I should see "Meeting with your Student, Student 3" in the "Upcoming events" "block"
+    And I should see "2 students still need to make an appointment"
+    And I should not see "Student 1" in the "studentstoschedule" "table"
+    And I should see "Student 2" in the "studentstoschedule" "table"
+    And I should not see "Student 3" in the "studentstoschedule" "table"
+    And I should see "Student 4" in the "studentstoschedule" "table"
+    When I click on "seen[]" "checkbox" in the "2:00 AM" "table_row"
+    And I follow "Test scheduler"
+    Then I should not see "Meeting with your Student, Student 1" in the "Upcoming events" "block"
+    And I should see "Meeting with your Student, Student 3" in the "Upcoming events" "block"    
+    And I log out
+    
+    When I log in as "student1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then I should see "Attended slots"
+    And "slotbookertable" "table" should not exist
+    And I should not see "Cancel booking"
+    And I should not see "Meeting with your" in the "Upcoming events" "block"
+    And I log out
diff --git a/mod/scheduler/tests/behat/studentdata.feature b/mod/scheduler/tests/behat/studentdata.feature
new file mode 100644
index 0000000..3b5663b
--- /dev/null
+++ b/mod/scheduler/tests/behat/studentdata.feature
@@ -0,0 +1,89 @@
+@mod_scheduler @javascript @_file_upload
+Feature: Student-supplied data
+  In order to collect data from students
+  As a teacher
+  I can configure a booking form for the scheduler.
+
+  Background:
+    Given the following "users" exist:
+      | username  | firstname   | lastname | email                |
+      | teacher1  | Teacher     | 1        | teacher1@example.com |
+      | student1  | Student     | 1        | student1@example.com |
+      | student2  | Student     | 2        | student2@example.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user  | course | role           |  
+      | teacher1  | C1 | editingteacher |
+      | student1  | C1 | student        |
+      | student2  | C1 | student        |
+    And the following "activities" exist:
+      | activity  | name           | intro | course | idnumber   | groupmode | schedulermode | maxbookings |
+      | scheduler | Test scheduler | n     | C1     | scheduler1 | 0         | oneonly       | 0           |
+
+  @javascript
+  Scenario: A teacher configures a booking form, and students enter data
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I navigate to "Edit settings" in current page administration
+    And I expand all fieldsets
+    And I set the field "Use booking form" to "1"
+    And I set the field "Booking instructions" to "Please enter your first name"
+    And I set the field "Let students enter a message" to "Yes, student must enter a message"
+    And I set the field "Maximum number of uploaded files" to "1"
+    And I click on "Save and display" "button"
+    And I add 10 slots 5 days ahead in "Test scheduler" scheduler and I fill the form with:
+      | Location | My office |
+    Then I should see "10 slots have been added"
+    And I log out
+           
+    When I log in as "student1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then I should see "3:00 AM" in the "slotbookertable" "table"
+    
+    When I click on "Book slot" "button" in the "3:00 AM" "table_row"
+    Then I should see "Please enter your first name"
+    
+    When I click on "Confirm booking" "button"
+    Then I should see "You must enter text into this field"    
+    
+    When I set the field "Your message" to "Joe"
+    And I click on "Confirm booking" "button"
+    Then "Cancel booking" "button" should exist
+    And I log out
+
+    When I log in as "student2"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    And I click on "Book slot" "button" in the "4:00 AM" "table_row"
+    Then I should see "Please enter your first name"
+    
+    When I set the field "Your message" to "Jill"
+    And I upload "mod/scheduler/tests/fixtures/studentfile.txt" file to "Upload files" filemanager
+    And I click on "Confirm booking" "button"
+    Then "Cancel booking" "button" should exist
+    And I log out
+
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test scheduler"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then I should see "Student 1" in the "3:00 AM" "table_row"
+    And I should see "Student 2" in the "4:00 AM" "table_row"
+    
+    When I click on "Student 1" "link" in the "3:00 AM" "table_row"
+    Then I should see "Student 1"
+    And I should see "Joe"
+    And I should not see "studentfile.txt"
+
+    When I click on "Continue" "button"
+    And I click on "Student 2" "link" in the "4:00 AM" "table_row"
+    Then I should see "Student 2"
+    And I should see "Jill"
+    And I should see "studentfile.txt"
+    And I log out
+    
\ No newline at end of file
diff --git a/mod/scheduler/tests/behat/tutorappointments.feature b/mod/scheduler/tests/behat/tutorappointments.feature
new file mode 100644
index 0000000..670ad9b
--- /dev/null
+++ b/mod/scheduler/tests/behat/tutorappointments.feature
@@ -0,0 +1,222 @@
+@mod_scheduler
+Feature: Booking of appointments with individual tutors per group
+  In order to organize appointments with the students in my group
+  As a tutor
+  I can use a scheduler to let students choose a time slot.
+
+  Background:
+    Given the following "users" exist:
+      | username  | firstname   | lastname | email                 |
+      | manager1  | Manager     | 1        | manager1@example.com  | 
+      | coor1     | Coordinator | 1        | coor1@example.com     |
+      | tutor2    | Tutor       | 2        | tutor2@example.com    |
+      | tutor3    | Tutor       | 3        | tutor3@example.com    |
+      | student1a | Student     | 1a       | student1a@example.com |
+      | student1b | Student     | 1b       | student1b@example.com |
+      | student2a | Student     | 2a       | student2a@example.com |
+      | student2b | Student     | 2b       | student2b@example.com |
+      | student3a | Student     | 3a       | student3a@example.com |
+      | student3b | Student     | 3b       | student3b@example.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user  | course | role           |  
+      | coor1     | C1 | editingteacher |
+      | tutor2    | C1 | teacher        |
+      | tutor3    | C1 | teacher        |
+      | student1a | C1 | student        |
+      | student1b | C1 | student        |
+      | student2a | C1 | student        |
+      | student2b | C1 | student        |
+      | student3a | C1 | student        |
+      | student3b | C1 | student        |
+    And the following "groups" exist:
+      | name    | course | idnumber |
+      | Group 1 | C1     | G1       |
+      | Group 2 | C1     | G2       |
+      | Group 3 | C1     | G3       |
+    And the following "group members" exist:
+      | user       | group |
+      | coor1      | G1    |
+      | tutor2     | G2    |
+      | tutor3     | G3    |
+      | student1a  | G1    |
+      | student1b  | G1    |
+      | student2a  | G2    |
+      | student2b  | G2    |
+      | student3a  | G3    |
+      | student3b  | G3    |
+    And the following "system role assigns" exist:
+      | user     | role    |
+      | manager1 | manager |
+    And the following "permission overrides" exist:
+      | capability                  | permission | role    | contextlevel | reference |
+      | moodle/site:accessallgroups | Prevent    | teacher | Course       | C1        |
+    And the following "activities" exist:
+      | activity  | name           | intro | course | idnumber   | groupmode | schedulermode | maxbookings |
+      | scheduler | Tutor sessions | n     | C1     | scheduler1 | 1         | oneonly       | 0           |
+    And I add the upcoming events block globally
+
+  @javascript
+  Scenario: A tutor adds slots, and students book them
+    When I log in as "tutor2"
+    And I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Tutor sessions" scheduler and I fill the form with:
+      | Location | My office |
+    Then I should see "10 slots have been added"
+    And I should see "2 students still need to make an appointment"
+    And I should see "Student 2a" in the "studentstoschedule" "table"
+    And I should see "Student 2b" in the "studentstoschedule" "table"
+    And I log out
+           
+    When I log in as "student2a"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should see "10:00 AM" in the "slotbookertable" "table"
+    When I click on "Book slot" "button" in the "2:00 AM" "table_row"
+    Then "Cancel booking" "button" should exist
+    And I should see "Meeting with your Teacher, Tutor 2" in the "Upcoming events" "block"
+    And I log out
+    
+    When I log in as "student2b"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should not see "2:00 AM" in the "slotbookertable" "table"
+    And I should see "10:00 AM" in the "slotbookertable" "table"
+    When I click on "Book slot" "button" in the "5:00 AM" "table_row" 
+    Then "Cancel booking" "button" should exist
+    And I should see "Meeting with your Teacher, Tutor 2" in the "Upcoming events" "block"
+    And I log out
+    
+    When I log in as "tutor2"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should see "1:00 AM" in the "slotmanager" "table"
+    And I should see "Student 2a" in the "2:00 AM" "table_row"
+    And I should see "Student 2b" in the "5:00 AM" "table_row"
+    And I should see "10:00 AM" in the "slotmanager" "table"
+    And I should see "Meeting with your Student, Student 2a" in the "Upcoming events" "block"
+    And I should see "Meeting with your Student, Student 2b" in the "Upcoming events" "block"
+    And I should not see "students still need to make an appointment"
+    And I log out
+
+  @javascript
+  Scenario: Several tutors add slots, they can be seen only by relevant users
+    When I log in as "coor1"
+    And I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Tutor sessions" scheduler and I fill the form with:
+      | Location | Office 1 |
+    Then I should see "10 slots have been added"
+    And I should see "2 students still need to make an appointment"
+    And I should see "Student 1a" in the "studentstoschedule" "table"
+    And I should see "Student 1b" in the "studentstoschedule" "table"
+    And I log out
+
+    When I log in as "tutor2"
+    And I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Tutor sessions" scheduler and I fill the form with:
+      | Location | Office 2 |
+    Then I should see "10 slots have been added"
+    And I should see "2 students still need to make an appointment"
+    And I should see "Student 2a" in the "studentstoschedule" "table"
+    And I should see "Student 2b" in the "studentstoschedule" "table"
+    And I log out
+
+    When I log in as "tutor3"
+    And I am on "Course 1" course homepage
+    And I add 10 slots 5 days ahead in "Tutor sessions" scheduler and I fill the form with:
+      | Location | Office 2 |
+    Then I should see "10 slots have been added"
+    And I should see "2 students still need to make an appointment"
+    And I should see "Student 3a" in the "studentstoschedule" "table"
+    And I should see "Student 3b" in the "studentstoschedule" "table"
+    And I log out
+
+    When I log in as "student1a"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should see "10:00 AM" in the "slotbookertable" "table"
+    And I should see "Coordinator 1" in the "slotbookertable" "table"
+    And I should not see "Tutor 2" in the "slotbookertable" "table"
+    And I should not see "Tutor 3" in the "slotbookertable" "table"
+    When I click on "Book slot" "button" in the "1:00 AM" "table_row"
+    Then "Cancel booking" "button" should exist
+    And I should see "Meeting with your Teacher, Coordinator 1" in the "Upcoming events" "block"
+    And I log out
+
+    When I log in as "student2a"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should see "10:00 AM" in the "slotbookertable" "table"
+    And I should not see "Coordinator 1" in the "slotbookertable" "table"
+    And I should see "Tutor 2" in the "slotbookertable" "table"
+    And I should not see "Tutor 3" in the "slotbookertable" "table"
+    When I click on "Book slot" "button" in the "2:00 AM" "table_row"
+    Then "Cancel booking" "button" should exist
+    And I should see "Meeting with your Teacher, Tutor 2" in the "Upcoming events" "block"
+    And I log out
+    
+    When I log in as "coor1"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should see "Student 1a" in the "slotmanager" "table"
+    And I should not see "Student 1b" in the "slotmanager" "table"
+    And I should not see "Student 2a" in the "slotmanager" "table"
+    And I should see "Student 1a" in the "Upcoming events" "block"
+    And I should not see "Student 1b" in the "Upcoming events" "block"
+    And I should not see "Student 2a" in the "Upcoming events" "block"
+    When I follow "All appointments"
+    Then I should see "Student 1a" in the "slotmanager" "table"
+    And I should not see "Student 1b" in the "slotmanager" "table"
+    And I should see "Student 2a" in the "slotmanager" "table"    
+    And I log out
+    
+    When I log in as "tutor2"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should not see "Student 1a" in the "slotmanager" "table"
+    And I should not see "Student 1b" in the "slotmanager" "table"
+    And I should see "Student 2a" in the "slotmanager" "table"
+    And I should not see "Student 1a" in the "Upcoming events" "block"
+    And I should see "Student 2a" in the "Upcoming events" "block"
+    And I should not see "Student 2b" in the "Upcoming events" "block"
+    When I follow "All appointments"
+    Then I should not see "Student 1a" in the "slotmanager" "table"
+    And I should not see "Student 1b" in the "slotmanager" "table"
+    And I should see "Student 2a" in the "slotmanager" "table"    
+    And I log out
+    
+    When I log in as "tutor3"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    Then I should not see "Student 1a" in the "slotmanager" "table"
+    And I should not see "Student 1b" in the "slotmanager" "table"
+    And I should not see "Student 2a" in the "slotmanager" "table"
+    When I follow "All appointments"
+    Then I should not see "Student 1a" in the "slotmanager" "table"
+    And I should not see "Student 1b" in the "slotmanager" "table"
+    And I should not see "Student 2a" in the "slotmanager" "table"    
+    And I log out
+    
+    When I log in as "manager1"
+    And I follow "Site home"
+    And I navigate to "Turn editing on" in current page administration
+    And I add the "Navigation" block if not present
+    And I click on "Courses" "link" in the "Navigation" "block"
+    And I am on "Course 1" course homepage    
+    And I follow "Tutor sessions"
+    And I follow "Statistics"
+    And I follow "My appointments"
+    Then "slotmanager" "table" should not exist
+    And I should see "No students available for scheduling"
+    When I follow "All appointments"
+    Then I should see "Student 1a" in the "slotmanager" "table"
+    And I should not see "Student 1b" in the "slotmanager" "table"
+    And I should see "Student 2a" in the "slotmanager" "table"    
+    And I log out
+    
\ No newline at end of file
diff --git a/mod/scheduler/tests/behat/viewslots.feature b/mod/scheduler/tests/behat/viewslots.feature
new file mode 100644
index 0000000..4cc2819
--- /dev/null
+++ b/mod/scheduler/tests/behat/viewslots.feature
@@ -0,0 +1,177 @@
+@mod_scheduler
+Feature: Students viewing slots available for booking
+  In order to view slots that are available for booking
+  As a student
+  I need to have appopriate permissions in the student screen.
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname   | lastname | email                |
+      | manager1 | Manager     | 1        | manager1@example.com | 
+      | teacher1 | Teacher     | 1        | teacher1@example.com |
+      | student1 | Student     | 1        | student1@example.com |
+      | student2 | Student     | 2        | student2@example.com |
+      | student3 | Student     | 3        | student3@example.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user  | course | role           |  
+      | teacher1  | C1 | editingteacher |
+      | student1  | C1 | student        |
+      | student2  | C1 | student        |
+      | student3  | C1 | student        |
+    And the following "system role assigns" exist:
+      | user     | role    |
+      | manager1 | manager |
+    And the following "activities" exist:
+      | activity  | name           | intro | course | idnumber   | groupmode | schedulermode | maxbookings | guardtime |
+      | scheduler | Test scheduler | n     | C1     | scheduler1 | 0         | oneonly       | 1           | 172800    |
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    # Slot 1 is available to only 1 student and is not yet booked  
+    And I add a slot 5 days ahead at 0100 in "Test scheduler" scheduler and I fill the form with:
+      | exclusivity | 1 |
+    # Slot 2 is available to only 1 student and is already booked  
+    And I add a slot 5 days ahead at 0200 in "Test scheduler" scheduler and I fill the form with:
+      | exclusivity  | 1         |
+      | studentid[0] | Student 3 |
+    # Slot 3 is a group slot that is empty 
+    And I add a slot 5 days ahead at 0300 in "Test scheduler" scheduler and I fill the form with:
+      | exclusivity | 3        |
+    # Slot 4 is a group slot that is partially booked 
+    And I add a slot 5 days ahead at 0400 in "Test scheduler" scheduler and I fill the form with:
+      | exclusivity  | 2         |
+      | studentid[0] | Student 3 |
+    # Slot 5 is an unlimited group slot that is empty 
+    And I add a slot 5 days ahead at 0500 in "Test scheduler" scheduler and I fill the form with:
+      | exclusivityenable | 0         |
+    # Slot 6 is an unlimited group slot that is partially booked 
+    And I add a slot 5 days ahead at 0600 in "Test scheduler" scheduler and I fill the form with:
+      | exclusivityenable | 0         |
+      | studentid[0]      | Student 3 |
+    # Slot 7 is not yet available to students
+    And I add a slot 5 days ahead at 0700 in "Test scheduler" scheduler and I fill the form with:
+      | hideuntil[year] | 2040 |
+    # Slot 8 is no longer available since the it's too close in the future
+    And I add a slot 1 days ahead at 0800 in "Test scheduler" scheduler and I fill the form with:
+      | appointmentlocation | My office |
+    And I log out
+
+  @javascript
+  Scenario: A student can see only available upcoming slots (default setting)
+           
+    When I log in as "student1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then "Book slot" "button" should exist in the "1:00 AM" "table_row"
+    And I should not see "2:00 AM" in the "slotbookertable" "table"
+    And "Book slot" "button" should exist in the "3:00 AM" "table_row"
+    And "Book slot" "button" should exist in the "4:00 AM" "table_row"
+    And "Book slot" "button" should exist in the "5:00 AM" "table_row"
+    And "Book slot" "button" should exist in the "6:00 AM" "table_row"
+    And I should not see "7:00 AM" in the "slotbookertable" "table"
+    And I should not see "8:00 AM" in the "slotbookertable" "table"
+
+    When I click on "Book slot" "button" in the "1:00 AM" "table_row"
+    Then "Cancel booking" "button" should exist
+    And "slotbookertable" "table" should not exist
+
+    When I click on "Cancel booking" "button"
+    Then "Book slot" "button" should exist in the "1:00 AM" "table_row"
+    
+    When I click on "Book slot" "button" in the "4:00 AM" "table_row"
+    And I log out
+    And I log in as "student2"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then "Book slot" "button" should exist in the "3:00 AM" "table_row"
+    And I should not see "4:00 AM" in the "slotbookertable" "table"
+    And I log out
+
+  @javascript
+  Scenario: Students can view all slots, even full ones
+    Given the following "permission overrides" exist:
+      | capability                  | permission | role    | contextlevel | reference |
+      | mod/scheduler:appoint       | Allow      | student | Course       | C1        |
+      | mod/scheduler:viewslots     | Allow      | student | Course       | C1        |
+      | mod/scheduler:viewfullslots | Allow      | student | Course       | C1        |
+    
+    When I log in as "student1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then "Book slot" "button" should exist in the "1:00 AM" "table_row"
+    And I should see "2:00 AM" in the "slotbookertable" "table"
+    Then "Book slot" "button" should not exist in the "2:00 AM" "table_row"
+    And "Book slot" "button" should exist in the "3:00 AM" "table_row"
+    And "Book slot" "button" should exist in the "4:00 AM" "table_row"
+    And "Book slot" "button" should exist in the "5:00 AM" "table_row"
+    And "Book slot" "button" should exist in the "6:00 AM" "table_row"
+    And I should not see "7:00 AM" in the "slotbookertable" "table"
+    And I should not see "8:00 AM" in the "slotbookertable" "table"
+
+    When I click on "Book slot" "button" in the "1:00 AM" "table_row"
+    Then "Cancel booking" "button" should exist
+    And "slotbookertable" "table" should exist
+    And I should not see "1:00 AM" in the "slotbookertable" "table"
+    And "Book slot" "button" should not exist
+
+    When I click on "Cancel booking" "button"
+    Then "Book slot" "button" should exist in the "1:00 AM" "table_row"
+    
+    When I click on "Book slot" "button" in the "4:00 AM" "table_row"
+    And I log out
+    And I log in as "student2"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then "Book slot" "button" should exist in the "3:00 AM" "table_row"
+    And I should see "4:00 AM" in the "slotbookertable" "table"
+    And "Book slot" "button" should not exist in the "4:00 AM" "table_row"
+    And I log out
+    
+  @javascript
+  Scenario: Students can view all slots, but they cannot book any
+    Given the following "permission overrides" exist:
+      | capability                  | permission | role    | contextlevel | reference |
+      | mod/scheduler:appoint       | Prevent    | student | Course       | C1        |
+      | mod/scheduler:viewslots     | Allow      | student | Course       | C1        |
+      | mod/scheduler:viewfullslots | Allow      | student | Course       | C1        |
+    
+    When I log in as "student1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then "Book slot" "button" should not exist
+    And I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should see "2:00 AM" in the "slotbookertable" "table"
+    And I should see "3:00 AM" in the "slotbookertable" "table"
+    And I should see "4:00 AM" in the "slotbookertable" "table"
+    And I should see "5:00 AM" in the "slotbookertable" "table"
+    And I should see "6:00 AM" in the "slotbookertable" "table"
+    And I should not see "7:00 AM" in the "slotbookertable" "table"
+    And I should not see "8:00 AM" in the "slotbookertable" "table"
+    
+    And I log out
+    
+ @javascript
+ Scenario: Students can view bookable slots, but they cannot book any
+    Given the following "permission overrides" exist:
+      | capability                  | permission | role    | contextlevel | reference |
+      | mod/scheduler:appoint       | Prevent    | student | Course       | C1        |
+      | mod/scheduler:viewslots     | Allow      | student | Course       | C1        |
+      | mod/scheduler:viewfullslots | Prevent    | student | Course       | C1        |
+    
+    When I log in as "student1"
+    And I am on "Course 1" course homepage    
+    And I follow "Test scheduler"
+    Then "Book slot" "button" should not exist
+    And I should see "1:00 AM" in the "slotbookertable" "table"
+    And I should not see "2:00 AM" in the "slotbookertable" "table"
+    And I should see "3:00 AM" in the "slotbookertable" "table"
+    And I should see "4:00 AM" in the "slotbookertable" "table"
+    And I should see "5:00 AM" in the "slotbookertable" "table"
+    And I should see "6:00 AM" in the "slotbookertable" "table"
+    And I should not see "7:00 AM" in the "slotbookertable" "table"
+    And I should not see "8:00 AM" in the "slotbookertable" "table"
+    
+    And I log out
+ 
\ No newline at end of file
diff --git a/mod/scheduler/tests/fixtures/studentfile.txt b/mod/scheduler/tests/fixtures/studentfile.txt
new file mode 100644
index 0000000..4f94cd1
--- /dev/null
+++ b/mod/scheduler/tests/fixtures/studentfile.txt
@@ -0,0 +1 @@
+Test file to be uploaded by a student
diff --git a/mod/scheduler/tests/generator/lib.php b/mod/scheduler/tests/generator/lib.php
new file mode 100644
index 0000000..5934e9f
--- /dev/null
+++ b/mod/scheduler/tests/generator/lib.php
@@ -0,0 +1,103 @@
+<?php
+
+/**
+ * mod_scheduler data generator
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+
+/**
+ * Scheduler module PHPUnit data generator class
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_scheduler_generator extends testing_module_generator {
+
+    private function set_default($record, $property, $value) {
+        if (!isset($record->$property)) {
+            $record->$property = $value;
+        }
+    }
+
+    /**
+     * Create new scheduler module instance
+     * @param array|stdClass $record
+     * @param array $options
+     * @return stdClass activity record with extra cmid field
+     */
+    public function create_instance($record = null, array $options = null) {
+        global $CFG, $DB;
+        require_once("$CFG->dirroot/mod/scheduler/lib.php");
+
+        $this->instancecount++;
+        $i = $this->instancecount;
+
+        $record = (object)(array)$record;
+        $options = (array)$options;
+
+        if (empty($record->course)) {
+            throw new coding_exception('module generator requires $record->course');
+        }
+        self::set_default($record, 'name', get_string('pluginname', 'scheduler').' '.$i);
+        self::set_default($record, 'intro', 'Test scheduler '.$i);
+        self::set_default($record, 'introformat', FORMAT_MOODLE);
+        self::set_default($record, 'schedulermode', 'onetime');
+        self::set_default($record, 'guardtime', 0);
+        self::set_default($record, 'defaultslotduration', 15);
+        self::set_default($record, 'staffrolename', '');
+        self::set_default($record, 'scale', 0);
+        if (isset($options['idnumber'])) {
+            $record->cmidnumber = $options['idnumber'];
+        } else {
+            $record->cmidnumber = '';
+        }
+
+        $record->coursemodule = $this->precreate_course_module($record->course, $options);
+        $id = scheduler_add_instance($record);
+        $modinst = $this->post_add_instance($id, $record->coursemodule);
+
+        if (isset($options['slottimes'])) {
+            $slottimes = (array) $options['slottimes'];
+            foreach ($slottimes as $slotkey => $time) {
+                $slot = new stdClass();
+                $slot->schedulerid = $id;
+                $slot->starttime = $time;
+                $slot->duration = 10;
+                $slot->teacherid = 2; // Admin user - for the moment.
+                $slot->appointmentlocation = 'Test Loc';
+                $slot->timemodified = time();
+                $slot->notes = '';
+                $slot->slotnote = '';
+                $slot->exclusivity = isset($options['slotexclusivity'][$slotkey]) ? $options['slotexclusivity'][$slotkey] : 0;
+                $slot->emaildate = 0;
+                $slot->hideuntil = 0;
+                $slotid = $DB->insert_record('scheduler_slots', $slot);
+
+                if (isset($options['slotstudents'][$slotkey])) {
+                    $students = (array)$options['slotstudents'][$slotkey];
+                    foreach ($students as $studentkey => $userid) {
+                        $appointment = new stdClass();
+                        $appointment->slotid = $slotid;
+                        $appointment->studentid = $userid;
+                        $appointment->attended = isset($options['slotattended'][$slotkey]) && $options['slotattended'][$slotkey];
+                        $appointment->grade = 0;
+                        $appointment->appointmentnote = '';
+                        $appointment->teachernote = '';
+                        $appointment->timecreated = time();
+                        $appointment->timemodified = time();
+                        $appointmentid = $DB->insert_record('scheduler_appointment', $appointment);
+                    }
+                }
+            }
+        }
+
+        return $modinst;
+    }
+}
diff --git a/mod/scheduler/tests/model_test.php b/mod/scheduler/tests/model_test.php
new file mode 100644
index 0000000..06cdbe6
--- /dev/null
+++ b/mod/scheduler/tests/model_test.php
@@ -0,0 +1,132 @@
+<?php
+
+/**
+ * Unit tests for the MVC model classes
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/scheduler/locallib.php');
+
+/**
+ * Unit tests for the MVC model classes
+ *
+ * @group mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_scheduler_model_testcase extends advanced_testcase {
+
+    /**
+     * @var int Course_modules id used for testing
+     */
+    protected $moduleid;
+
+    /**
+     * @var int Course id used for testing
+     */
+    protected $courseid;
+
+    /**
+     * @var int Scheduler id used for testing
+     */
+    protected $schedulerid;
+
+    /**
+     * @var int User id used for testing
+     */
+    protected $userid;
+
+    protected function setUp() {
+        global $DB, $CFG;
+
+        $this->resetAfterTest(true);
+
+        $course = $this->getDataGenerator()->create_course();
+        $options = array();
+        $options['slottimes'] = array();
+        $options['slotstudents'] = array();
+        for ($c = 0; $c < 4; $c++) {
+            $options['slottimes'][$c] = time() + ($c + 1) * DAYSECS;
+            $options['slotstudents'][$c] = array($this->getDataGenerator()->create_user()->id);
+        }
+        $options['slottimes'][4] = time() + 10 * DAYSECS;
+        $options['slottimes'][5] = time() + 11 * DAYSECS;
+        $options['slotstudents'][5] = array(
+                                            $this->getDataGenerator()->create_user()->id,
+                                            $this->getDataGenerator()->create_user()->id
+                                           );
+
+        $scheduler = $this->getDataGenerator()->create_module('scheduler', array('course' => $course->id), $options);
+        $coursemodule = $DB->get_record('course_modules', array('id' => $scheduler->cmid));
+
+        $this->schedulerid = $scheduler->id;
+        $this->moduleid  = $coursemodule->id;
+        $this->courseid  = $coursemodule->course;
+        $this->userid = 2;  // Admin user.
+    }
+
+    /**
+     * Test loading a scheduler instance from the database
+     */
+    public function test_scheduler_instance() {
+        global $DB;
+
+        $dbdata = $DB->get_record('scheduler', array('id' => $this->schedulerid));
+
+        $instance = scheduler_instance::load_by_coursemodule_id($this->moduleid);
+
+        $this->assertEquals( $dbdata->name, $instance->get_name());
+
+    }
+
+    /**
+     * Test the "appointment" data object
+     * (basic functionality, with minimal reference to slots)
+     **/
+    public function test_appointment() {
+
+        global $DB;
+
+        $instance = scheduler_instance::load_by_coursemodule_id($this->moduleid);
+        $slot = array_values($instance->get_slots())[0];
+        $factory = new scheduler_appointment_factory($slot);
+
+        $user = $this->getdataGenerator()->create_user();
+
+        $app0 = new stdClass();
+        $app0->slotid = 1;
+        $app0->studentid = $user->id;
+        $app0->attended = 0;
+        $app0->grade = 0;
+        $app0->appointmentnote = 'testnote';
+        $app0->teachernote = 'confidentialtestnote';
+        $app0->timecreated = time();
+        $app0->timemodified = time();
+
+        $id1 = $DB->insert_record('scheduler_appointment', $app0);
+
+        $appobj = $factory->create_from_id($id1);
+        $this->assertEquals($user->id, $appobj->studentid);
+        $this->assertEquals(fullname($user), fullname($appobj->get_student()));
+        $this->assertFalse($appobj->is_attended());
+        $this->assertEquals(0, $appobj->grade);
+
+        $app0->attended = 1;
+        $app0->grade = -7;
+        $id2 = $DB->insert_record('scheduler_appointment', $app0);
+
+        $appobj = $factory->create_from_id($id2);
+        $this->assertEquals($user->id, $appobj->studentid);
+        $this->assertEquals(fullname($user), fullname($appobj->get_student()));
+        $this->assertTrue($appobj->is_attended());
+        $this->assertEquals(-7, $appobj->grade);
+
+    }
+
+}
diff --git a/mod/scheduler/tests/scheduler_test.php b/mod/scheduler/tests/scheduler_test.php
new file mode 100644
index 0000000..c4a7868
--- /dev/null
+++ b/mod/scheduler/tests/scheduler_test.php
@@ -0,0 +1,493 @@
+<?php
+
+/**
+ * Unit tests for the scheduler_instance class.
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/scheduler/locallib.php');
+
+/**
+ * Unit tests for the scheduler_instance class.
+ *
+ * @group mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_scheduler_scheduler_testcase extends advanced_testcase {
+
+    /**
+     * @var intger Course_module id used for testing
+     */
+    protected $moduleid;
+
+    /**
+     * @var int Course id used for testing
+     */
+    protected $courseid;
+
+    /**
+     * @var int Scheduler id used for testing
+     */
+    protected $schedulerid;
+
+    /**
+     * @var int One of the slots used for testing
+     */
+    protected $slotid;
+
+    protected function setUp() {
+        global $DB, $CFG;
+
+        $this->resetAfterTest(true);
+
+        $course = $this->getDataGenerator()->create_course();
+        $this->courseid  = $course->id;
+
+        $options = array();
+        $options['slottimes'] = array();
+        $options['slotstudents'] = array();
+        for ($c = 0; $c < 4; $c++) {
+            $options['slottimes'][$c] = time() + ($c + 1) * DAYSECS;
+            $options['slotstudents'][$c] = array($this->getDataGenerator()->create_user()->id);
+        }
+        $options['slottimes'][4] = time() + 10 * DAYSECS;
+        $options['slottimes'][5] = time() + 11 * DAYSECS;
+        $options['slotstudents'][5] = array(
+                                        $this->getDataGenerator()->create_user()->id,
+                                        $this->getDataGenerator()->create_user()->id
+                                      );
+
+        $scheduler = $this->getDataGenerator()->create_module('scheduler', array('course' => $course->id), $options);
+        $coursemodule = $DB->get_record('course_modules', array('id' => $scheduler->cmid));
+
+        $this->schedulerid = $scheduler->id;
+        $this->moduleid  = $coursemodule->id;
+
+        $recs = $DB->get_records('scheduler_slots', array('schedulerid' => $scheduler->id), 'id DESC');
+        $this->slotid = array_keys($recs)[0];
+        $this->appointmentids = array_keys($DB->get_records('scheduler_appointment', array('slotid' => $this->slotid)));
+    }
+
+    /**
+     * Create a student record and enrol him in a course.
+     *
+     * @param int $courseid
+     * @return int user id
+     */
+    private function create_student($courseid = 0) {
+        if ($courseid == 0) {
+            $courseid = $this->courseid;
+        }
+        $userid = $this->getDataGenerator()->create_user()->id;
+        $this->getDataGenerator()->enrol_user($userid, $courseid);
+        return $userid;
+    }
+
+    /**
+     * Assert a record count in the database.
+     *
+     * @param string $table table name to test
+     * @param string $field field name
+     * @param string $value value to look for
+     * @param int $expect expected record count where that field has that value
+     */
+    private function assert_record_count($table, $field, $value, $expect) {
+        global $DB;
+
+        $act = $DB->count_records($table, array($field => $value));
+        $this->assertEquals($expect, $act, "Checking whether table $table has $expect records with $field equal to $value");
+    }
+
+    /**
+     * Test a scheduler instance
+     */
+    public function test_scheduler_instance() {
+        global $DB;
+
+        $dbdata = $DB->get_record('scheduler', array('id' => $this->schedulerid));
+
+        $instance = scheduler_instance::load_by_coursemodule_id($this->moduleid);
+
+        $this->assertEquals($dbdata->name, $instance->get_name());
+
+    }
+
+    /**
+     * Test the loading of slots
+     */
+    public function test_load_slots() {
+        global $DB;
+
+        $instance = scheduler_instance::load_by_coursemodule_id($this->moduleid);
+
+        /* test slot retrieval */
+
+        $slotcount = $instance->get_slot_count();
+        $this->assertEquals(6, $slotcount);
+
+        $slots = $instance->get_all_slots(2, 3);
+        $this->assertEquals(3, count($slots));
+
+        $slots = $instance->get_slots_without_appointment();
+        $this->assertEquals(1, count($slots));
+
+        $allslots = $instance->get_all_slots();
+        $this->assertEquals(6, count($allslots));
+
+        $cnt = 0;
+        foreach ($allslots as $slot) {
+            $this->assertTrue($slot instanceof scheduler_slot);
+
+            if ($cnt == 5) {
+                $expectedapp = 2;
+            } else if ($cnt == 4) {
+                $expectedapp = 0;
+            } else {
+                $expectedapp = 1;
+            }
+            $this->assertEquals($expectedapp, $slot->get_appointment_count());
+
+            $apps = $slot->get_appointments();
+            $this->assertEquals($expectedapp, count($apps));
+
+            foreach ($apps as $app) {
+                $this->assertTrue($app instanceof scheduler_appointment);
+            }
+            $cnt++;
+        }
+
+    }
+
+    /**
+     * Test adding slots to a scheduler
+     */
+    public function test_add_slot() {
+
+        $scheduler = scheduler_instance::load_by_coursemodule_id($this->moduleid);
+
+        $newslot = $scheduler->create_slot();
+        $newslot->teacherid = $this->getDataGenerator()->create_user()->id;
+        $newslot->starttime = time() + MINSECS;
+        $newslot->duration = 10;
+
+        $allslots = $scheduler->get_slots();
+        $this->assertEquals(7, count($allslots));
+
+        $scheduler->save();
+
+    }
+
+    /**
+     * Test deleting a scheduler
+     */
+    public function test_delete_scheduler() {
+
+        $options = array();
+        $options['slottimes'] = array();
+        $options['slotstudents'] = array();
+        for ($c = 0; $c < 10; $c++) {
+            $options['slottimes'][$c] = time() + ($c + 1) * DAYSECS;
+            $options['slotstudents'][$c] = array($this->getDataGenerator()->create_user()->id);
+        }
+
+        $delrec = $this->getDataGenerator()->create_module('scheduler', array('course' => $this->courseid), $options);
+        $delid = $delrec->id;
+
+        $delsched = scheduler_instance::load_by_id($delid);
+
+        $this->assert_record_count('scheduler', 'id', $this->schedulerid, 1);
+        $this->assert_record_count('scheduler_slots', 'schedulerid', $this->schedulerid, 6);
+        $this->assert_record_count('scheduler_appointment', 'slotid', $this->slotid, 2);
+
+        $this->assert_record_count('scheduler', 'id', $delid, 1);
+        $this->assert_record_count('scheduler_slots', 'schedulerid', $delid, 10);
+
+        $delsched->delete();
+
+        $this->assert_record_count('scheduler', 'id', $this->schedulerid, 1);
+        $this->assert_record_count('scheduler_slots', 'schedulerid', $this->schedulerid, 6);
+        $this->assert_record_count('scheduler_appointment', 'slotid', $this->slotid, 2);
+
+        $this->assert_record_count('scheduler', 'id', $delid, 0);
+        $this->assert_record_count('scheduler_slots', 'schedulerid', $delid, 0);
+
+    }
+
+    /**
+     * Assert that slot times have certain values
+     * @param array $expected list of expected slots
+     * @param array $actual list of actual slots
+     * @param array $options expected attributes of slots
+     * @param string $message
+     */
+    private function assert_slot_times($expected, $actual, $options, $message) {
+        $this->assertEquals(count($expected), count($actual), "Slot count - $message");
+        $slottimes = array();
+        foreach ($expected as $e) {
+            $slottimes[] = $options['slottimes'][$e];
+        }
+        foreach ($actual as $a) {
+            $this->assertTrue( in_array($a->starttime, $slottimes), "Slot at {$a->starttime} - $message");
+        }
+    }
+
+    /**
+     * Check slots in the scheduler for certain patterns.
+     *
+     * @param int $schedulerid id of the scheduler
+     * @param unknown $studentid
+     * @param array $slotoptions expected attributes of slots
+     * @param array $expattended which slots are expected to be "attended"
+     * @param array $expupcoming which slots are expected to be "upcoming"
+     * @param unknown $expavailable which slots are expected to be "available" (including already booked ones)
+     * @param unknown $expbookable  which slots are expected to be "bookable"
+     */
+    private function check_timed_slots($schedulerid, $studentid, $slotoptions,
+                                       $expattended, $expupcoming, $expavailable, $expbookable) {
+
+        $sched = scheduler_instance::load_by_id($schedulerid);
+
+        $attended = $sched->get_attended_slots_for_student($studentid);
+        $this->assert_slot_times($expattended, $attended, $slotoptions, 'Attended slots');
+
+        $upcoming = $sched->get_upcoming_slots_for_student($studentid);
+        $this->assert_slot_times($expupcoming, $upcoming, $slotoptions, 'Upcoming slots');
+
+        $available = $sched->get_slots_available_to_student($studentid, false);
+        $this->assert_slot_times($expavailable, $available, $slotoptions, 'Available slots (incl. booked)');
+
+        $bookable = $sched->get_slots_available_to_student($studentid, true);
+        $this->assert_slot_times($expbookable, $bookable, $slotoptions, 'Booked slots');
+
+    }
+
+    /**
+     * Test slot timings when parameters of the scheduler are altered.
+     */
+    public function test_load_slot_timing() {
+
+        global $DB;
+
+        $currentstud = $this->getDataGenerator()->create_user()->id;
+        $otherstud   = $this->getDataGenerator()->create_user()->id;
+
+        $options = array();
+        $options['slottimes'] = array();
+        $options['slotstudents'] = array();
+        $options['slotattended'] = array();
+
+        // Create slots 0 to 5, n days in the future, booked by the student but not attended.
+        for ($c = 0; $c <= 5; $c++) {
+            $options['slottimes'][$c] = time() + $c * DAYSECS + 12 * HOURSECS;
+            $options['slotstudents'][$c] = $currentstud;
+            $options['slotattended'][$c] = false;
+        }
+
+        // Create slot 6, located in the past, booked by the student but not attended.
+        $options['slottimes'][6] = time() - 3 * DAYSECS;
+        $options['slotstudents'][6] = $currentstud;
+        $options['slotattended'][6] = false;
+
+        // Create slot 7, located in the past, booked by the student and attended.
+        $options['slottimes'][7] = time() - 4 * DAYSECS;
+        $options['slotstudents'][7] = $currentstud;
+        $options['slotattended'][7] = true;
+
+        // Create slot 8, located less than one day in the future but marked attended.
+        $options['slottimes'][8] = time() + 8 * HOURSECS;
+        $options['slotstudents'][8] = $currentstud;
+        $options['slotattended'][8] = true;
+
+        // Create slot 9, located in the future but already booked by another student.
+        $options['slottimes'][9] = time() + 10 * DAYSECS + 9 * HOURSECS;
+        $options['slotstudents'][9] = $otherstud;
+        $options['slotattended'][9] = false;
+        $options['slotexclusivity'][9] = 1;
+
+        // Create slots 10 to 14, (n-10) days in the future, open for booking.
+        for ($c = 10; $c <= 14; $c++) {
+            $options['slottimes'][$c] = time() + ($c - 10) * DAYSECS + 10 * HOURSECS;
+        }
+
+        $schedrec = $this->getDataGenerator()->create_module('scheduler', array('course' => $this->courseid), $options);
+        $schedid = $schedrec->id;
+
+        $schedrec->guardtime = 0;
+        $DB->update_record('scheduler', $schedrec);
+
+        $this->check_timed_slots($schedid, $currentstud, $options,
+                     array(7, 8),
+                     array(0, 1, 2, 3, 4, 5, 6),
+                     array(10, 11, 12, 13, 14),
+                     array(10, 11, 12, 13, 14, 9) );
+
+        $schedrec->guardtime = DAYSECS;
+        $DB->update_record('scheduler', $schedrec);
+
+        $this->check_timed_slots($schedid, $currentstud, $options,
+                     array(7, 8),
+                     array(0, 1, 2, 3, 4, 5, 6),
+                     array(11, 12, 13, 14),
+                     array(11, 12, 13, 14, 9) );
+
+        $schedrec->guardtime = 4 * DAYSECS;
+        $DB->update_record('scheduler', $schedrec);
+
+        $this->check_timed_slots($schedid, $currentstud, $options,
+                     array(7, 8),
+                     array(0, 1, 2, 3, 4, 5, 6),
+                     array(14),
+                     array(14, 9) );
+
+        $schedrec->guardtime = 20 * DAYSECS;
+        $DB->update_record('scheduler', $schedrec);
+
+        $this->check_timed_slots($schedid, $currentstud, $options,
+                     array(7, 8),
+                     array(0, 1, 2, 3, 4, 5, 6),
+                     array(),
+                     array() );
+
+    }
+
+    /**
+     * Assert the number of appointments for a student with certain properties.
+     *
+     * @param int $expectedwithchangeables expected number of bookable appointments, including changeable ones
+     * @param int $expectedwithoutchangeables expected number of bookable appointments, excluding changeable ones
+     * @param int $schedid scheduler id
+     * @param int $studentid student id
+     */
+    private function assert_bookable_appointments($expectedwithchangeables, $expectedwithoutchangeables,
+                                                  $schedid, $studentid) {
+        $scheduler = scheduler_instance::load_by_id($schedid);
+
+        $actualwithchangeables = $scheduler->count_bookable_appointments($studentid, true);
+        $this->assertEquals($expectedwithchangeables, $actualwithchangeables,
+                        'Checking number of bookable appointments (including changeable bookings)');
+
+        $actualwithoutchangeables = $scheduler->count_bookable_appointments($studentid, false);
+        $this->assertEquals($expectedwithoutchangeables, $actualwithoutchangeables,
+                        'Checking number of bookable appointments (excluding changeable bookings)');
+
+        $studs = $scheduler->get_students_for_scheduling();
+        if ($expectedwithoutchangeables != 0) {
+            $this->assertTrue(is_array($studs), 'Checking that get_students_for_scheduling returns an array');
+        }
+        $actualnum = count($studs);
+        $expectednum = ($expectedwithoutchangeables > 0) ? 3 : 2;
+        $this->assertEquals($expectednum, $actualnum, 'Checking number of students available for scheduling');
+    }
+
+    /**
+     * Creates a scheduler with certain settings,
+     * having 10 appointments, from 1 hour in the future to 9 days, 1 hour in the future,
+     * and booking a given student into these slots - either unattended bookings ($bookedslots)
+     * or attended bookings ($attendedslots).
+     *
+     * The scheduler is created in a new course, into which the given student is enrolled.
+     * Also, two other students (without any slot bookings) is created in the course.
+     *
+     * @param int $schedulermode scheduler mode
+     * @param int $maxbookings max number of bookings per student
+     * @param int $guardtime guard time
+     * @param int $studentid student to book into slots
+     * @param array $bookedslots slots to book the student in
+     * @param array $attendedslots slots which the student has attended
+     */
+    private function create_data_for_bookable_appointments($schedulermode, $maxbookings, $guardtime, $studentid,
+                                                           array $bookedslots, array $attendedslots) {
+
+        global $DB;
+
+        $course = $this->getDataGenerator()->create_course();
+        $this->getDataGenerator()->enrol_user($studentid, $course->id);
+
+        $options['slottimes'] = array();
+        for ($c = 0; $c < 10; $c++) {
+            $options['slottimes'][$c] = time() + $c * DAYSECS + HOURSECS;
+            if (in_array($c, $bookedslots) || in_array($c, $attendedslots)) {
+                $options['slotstudents'][$c] = $studentid;
+            }
+        }
+
+        $schedrec = $this->getDataGenerator()->create_module('scheduler', array('course' => $course->id), $options);
+
+        $scheduler = scheduler_instance::load_by_id($schedrec->id);
+
+        $scheduler->schedulermode = $schedulermode;
+        $scheduler->maxbookings = $maxbookings;
+        $scheduler->guardtime = $guardtime;
+        $scheduler->save();
+
+        $slotrecs = $DB->get_records('scheduler_slots', array('schedulerid' => $scheduler->id), 'starttime ASC');
+        $slotrecs = array_values($slotrecs);
+
+        foreach ($attendedslots as $id) {
+            $DB->set_field('scheduler_appointment', 'attended', 1, array('slotid' => $slotrecs[$id]->id));
+        }
+
+        for ($i = 0; $i < 2; $i++) {
+            $dummystud = $this->create_student($course->id);
+        }
+
+        return $scheduler->id;
+    }
+
+    /**
+     * Test the retrieveal routines for bookable appointments.
+     */
+    public function test_bookable_appointments() {
+
+        $studid = $this->create_student();
+
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 1, 0, $studid, array(), array());
+        $this->assert_bookable_appointments(1, 1, $sid, $studid);
+
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 1, 0, $studid, array(5), array());
+        $this->assert_bookable_appointments(1, 0, $sid, $studid);
+
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 1, 0, $studid, array(5, 6, 7), array());
+        $this->assert_bookable_appointments(1, 0, $sid, $studid);
+
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 1, 0, $studid, array(5, 6), array(8));
+        $this->assert_bookable_appointments(0, 0, $sid, $studid);
+
+        // One booking inside guard time, cannot be rebooked.
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 1, 5 * DAYSECS, $studid, array(1), array());
+        $this->assert_bookable_appointments(0, 0, $sid, $studid);
+
+        // Five bookings allowed, three booked, one of which attended.
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 5, 0, $studid, array(2, 3), array(4));
+        $this->assert_bookable_appointments(4, 2, $sid, $studid);
+
+        // Five bookings allowed, three booked, one of which inside guard time.
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 5, 5 * DAYSECS, $studid, array(2, 7, 8), array());
+        $this->assert_bookable_appointments(4, 2, $sid, $studid);
+
+        // Five bookings allowed, four booked, of which two inside guard time (one attended), two outside guard time (one attended).
+        $sid = $this->create_data_for_bookable_appointments('oneonly', 5, 5 * DAYSECS, $studid, array(2, 7), array(1, 8));
+        $this->assert_bookable_appointments(2, 1, $sid, $studid);
+
+        // One booking allowed at a time. Two attended already present (one inside GT, one outside GT).
+        $sid = $this->create_data_for_bookable_appointments('onetime', 1, 5 * DAYSECS, $studid, array(), array(3, 7));
+        $this->assert_bookable_appointments(1, 1, $sid, $studid);
+
+        // One booking allowed at a time. One booked outside GT.
+        $sid = $this->create_data_for_bookable_appointments('onetime', 1, 5 * DAYSECS, $studid, array(7), array());
+        $this->assert_bookable_appointments(1, 0, $sid, $studid);
+
+        // One booking allowed at a time. One booked inside GT.
+        $sid = $this->create_data_for_bookable_appointments('onetime', 1, 5 * DAYSECS, $studid, array(2), array());
+        $this->assert_bookable_appointments(0, 0, $sid, $studid);
+
+    }
+
+}
diff --git a/mod/scheduler/tests/slot_test.php b/mod/scheduler/tests/slot_test.php
new file mode 100644
index 0000000..093ec6c
--- /dev/null
+++ b/mod/scheduler/tests/slot_test.php
@@ -0,0 +1,296 @@
+<?php
+
+/**
+ * Unit tests for scheduler slots
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/scheduler/locallib.php');
+
+/**
+ * Unit tests for the scheduler_slots class.
+ *
+ * @group      mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_scheduler_slot_testcase extends advanced_testcase {
+
+    /**
+     * @var int Course_modules id used for testing
+     */
+    protected $moduleid;
+
+    /**
+     * @var int Course id used for testing
+     */
+    protected $courseid;
+
+    /**
+     * @var int Scheduler id used for testing
+     */
+    protected $schedulerid;
+
+    /**
+     * @var int User id of teacher used for testing
+     */
+    protected $teacherid;
+
+    /**
+     * @var int a slot used for testing
+     */
+    protected $slotid;
+
+    /**
+     * @var int[] appointments used for testing
+     */
+    protected $appointmentids;
+
+    /**
+     * @var int[] id of students used for testing
+     */
+    protected $students;
+
+    protected function setUp() {
+        global $DB, $CFG;
+
+        $this->resetAfterTest(true);
+
+        $course = $this->getDataGenerator()->create_course();
+
+        $this->students = array();
+        for ($i = 0; $i < 3; $i++) {
+            $this->students[$i] = $this->getDataGenerator()->create_user()->id;
+        }
+
+        $options = array();
+        $options['slottimes'] = array();
+        $options['slotstudents'] = array();
+        $options['slottimes'][0] = time() + DAYSECS;
+        $options['slotstudents'][0] = $this->students;
+
+        $scheduler = $this->getDataGenerator()->create_module('scheduler', array('course' => $course->id), $options);
+        $coursemodule = $DB->get_record('course_modules', array('id' => $scheduler->cmid));
+
+        $this->schedulerid = $scheduler->id;
+        $this->moduleid  = $coursemodule->id;
+        $this->courseid  = $coursemodule->course;
+        $this->teacherid = 2;  // Admin user.
+        $this->slotid = $DB->get_field('scheduler_slots', 'id', array('schedulerid' => $scheduler->id), MUST_EXIST);
+        $this->appointmentids = array_keys($DB->get_records('scheduler_appointment', array('slotid' => $this->slotid)));
+    }
+
+    /**
+     * Assert that a record is present in the DB
+     *
+     * @param string $table name of table to test
+     * @param int $id id of record to look for
+     * @param string $msg message
+     */
+    private function assert_record_present($table, $id, $msg = "") {
+        global $DB;
+
+        $ex = $DB->record_exists($table, array('id' => $id));
+        $this->assertTrue($ex, "Checking whether record $id is present in table $table: $msg");
+    }
+
+    /**
+     * Assert that a record is absent from the DB
+     *
+     * @param string $table name of table to test
+     * @param int $id id of record to look for
+     * @param string $msg message
+     */
+    private function assert_record_absent($table, $id, $msg = "") {
+        global $DB;
+
+        $ex = $DB->record_exists($table, array('id' => $id));
+        $this->assertFalse($ex, "Checking whether record $id is absent in table $table: $msg");
+    }
+
+    /**
+     * Test creating a slot with appointments
+     */
+    public function test_create() {
+
+        global $DB;
+
+        $scheduler = scheduler_instance::load_by_id($this->schedulerid);
+        $slot = $scheduler->create_slot();
+
+        $slot->teacherid = $this->getDataGenerator()->create_user()->id;
+        $slot->starttime = time();
+        $slot->duration = 60;
+
+        $newapp1 = $slot->create_appointment();
+        $newapp1->studentid = $this->getDataGenerator()->create_user()->id;
+        $newapp2 = $slot->create_appointment();
+        $newapp2->studentid = $this->getDataGenerator()->create_user()->id;
+
+        $slot->save();
+
+        $newid = $slot->get_id();
+        $this->assertNotEquals(0, $newid, "Checking slot id after creation");
+
+        $newcnt = $DB->count_records('scheduler_appointment', array('slotid' => $newid));
+        $this->assertEquals(2, $newcnt, "Counting number of appointments after addition");
+
+    }
+
+
+    /**
+     * Test deleting a slot and associated data
+     */
+    public function test_delete() {
+
+        $scheduler = scheduler_instance::load_by_id($this->schedulerid);
+
+        // Make sure calendar events are all created.
+        $slot = scheduler_slot::load_by_id($this->slotid, $scheduler);
+        $start = $slot->starttime;
+        $slot->save();
+
+        // Load again, to delete.
+        $slot = scheduler_slot::load_by_id($this->slotid, $scheduler);
+        $slot->delete();
+
+        $this->assert_record_absent('scheduler_slots', $this->slotid);
+        foreach ($this->appointmentids as $id) {
+            $this->assert_record_absent('scheduler_appointment', $id);
+        }
+
+        $this->assert_event_absent($this->teacherid, $start, "");
+        foreach ($this->students as $student) {
+            $this->assert_event_absent($student, $start, "");
+        }
+
+    }
+
+    /**
+     * Test adding an appointment to a slot.
+     */
+    public function test_add_appointment() {
+
+        global $DB;
+
+        $scheduler = scheduler_instance::load_by_id($this->schedulerid);
+        $slot = scheduler_slot::load_by_id($this->slotid, $scheduler);
+
+        $oldcnt = $DB->count_records('scheduler_appointment', array('slotid' => $slot->get_id()));
+        $this->assertEquals(3, $oldcnt, "Counting number of appointments before addition");
+
+        $newapp = $slot->create_appointment();
+        $newapp->studentid = $this->getDataGenerator()->create_user()->id;
+
+        $slot->save();
+
+        $newcnt = $DB->count_records('scheduler_appointment', array('slotid' => $slot->get_id()));
+        $this->assertEquals(4, $newcnt, "Counting number of appointments after addition");
+
+    }
+
+    /**
+     * Test removing an appointment from a slot.
+     */
+    public function test_remove_appointment() {
+
+        global $DB;
+
+        $scheduler = scheduler_instance::load_by_id($this->schedulerid);
+        $slot = scheduler_slot::load_by_id($this->slotid, $scheduler);
+
+        $apps = $slot->get_appointments();
+        $appointment = array_pop($apps);
+        $delid = $appointment->get_id();
+
+        $this->assert_record_present('scheduler_appointment', $delid);
+
+        $slot->remove_appointment($appointment);
+        $slot->save();
+
+        $this->assert_record_absent('scheduler_appointment', $delid);
+    }
+
+    /**
+     * Test presence or absence of event records when appointments are modified.
+     */
+    public function test_calendar_events() {
+        global $DB;
+
+        $scheduler = scheduler_instance::load_by_id($this->schedulerid);
+        $slot = scheduler_slot::load_by_id($this->slotid, $scheduler);
+        $slot->save();
+
+        $oldstart = $slot->starttime;
+
+        $this->assert_event_exists($this->teacherid, $slot->starttime, "Meeting with your Students");
+        foreach ($this->students as $student) {
+            $this->assert_event_exists($student, $slot->starttime, "Meeting with your Teacher");
+        }
+
+        $newstart = time() + 3 * DAYSECS;
+        $slot->starttime = $newstart;
+        $slot->save();
+
+        foreach ($this->students as $student) {
+            $this->assert_event_absent($student, $oldstart);
+            $this->assert_event_exists($student, $newstart, "Meeting with your Teacher");
+        }
+        $this->assert_event_absent($this->teacherid, $oldstart);
+        $this->assert_event_exists($this->teacherid, $newstart, "Meeting with your Students");
+
+        // Delete one of the appointments.
+        $app = $slot->get_appointment($this->appointmentids[0]);
+        $slot->remove_appointment($app);
+        $slot->save();
+
+        $this->assert_event_absent($this->students[0], $newstart);
+        $this->assert_event_exists($this->students[1], $newstart, "Meeting with your Teacher");
+        $this->assert_event_exists($this->teacherid, $newstart, "Meeting with your Students");
+
+        // Delete all appointments.
+        $DB->delete_records('scheduler_appointment', array('slotid' => $this->slotid));
+        $slot = scheduler_slot::load_by_id($this->slotid, $scheduler);
+        $slot->save();
+
+        foreach ($this->students as $student) {
+            $this->assert_event_absent($student, $newstart);
+        }
+        $this->assert_event_absent($this->teacherid, $newstart);
+
+    }
+
+    /**
+     * Assert that a calendar event exists in the DB.
+     *
+     * @param int $userid user associated with event
+     * @param int $time start time of the event
+     * @param string $titlestart beginning of the title of the event
+     */
+    private function assert_event_exists($userid, $time, $titlestart) {
+        global $DB;
+        $events = calendar_get_events($time - MINSECS, $time + HOURSECS, $userid, false, false);
+        $this->assertEquals(1, count($events), "Expecting exactly one event at time $time for user $userid");
+        $event = array_pop($events);
+        $this->assertEquals($time, $event->timestart);
+        $this->assertEquals('scheduler', $event->modulename);
+        $this->assertTrue(strpos($event->name, $titlestart) === 0, "Checking event title start: $titlestart");
+    }
+
+    /**
+     * Assert that a calendar event at a certain time is absent from the DB.
+     *
+     * @param int $userid user id associated with event
+     * @param int $time start time of the event
+     */
+    private function assert_event_absent($userid, $time) {
+        $events = calendar_get_events($time - MINSECS, $time + HOURSECS, $userid, false, false);
+        $this->assertEquals(0, count($events), "Expecting no event at time $time for user $userid");
+    }
+}
diff --git a/mod/scheduler/version.php b/mod/scheduler/version.php
new file mode 100644
index 0000000..548988c
--- /dev/null
+++ b/mod/scheduler/version.php
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Version information for mod/scheduler
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/*
+ * This is the development branch (master) of the scheduler module.
+ */
+
+$plugin->component = 'mod_scheduler'; // Full name of the plugin (used for diagnostics).
+$plugin->version   = 2017051500;      // The current module version (Date: YYYYMMDDXX).
+$plugin->release   = '3.x dev';       // Human-friendly version name.
+$plugin->requires  = 2017051200;      // Requires Moodle 3.3.
+$plugin->maturity  = MATURITY_ALPHA;  // Alpha development code - not for production sites!
diff --git a/mod/scheduler/view.php b/mod/scheduler/view.php
new file mode 100644
index 0000000..5dcc658
--- /dev/null
+++ b/mod/scheduler/view.php
@@ -0,0 +1,78 @@
+<?php
+
+/**
+ * This page prints a particular instance of scheduler and handles
+ * top level interactions
+ *
+ * @package    mod_scheduler
+ * @copyright  2014 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot.'/mod/scheduler/lib.php');
+require_once($CFG->dirroot.'/mod/scheduler/locallib.php');
+require_once($CFG->dirroot.'/mod/scheduler/renderable.php');
+
+// Read common request parameters.
+$id = optional_param('id', '', PARAM_INT);    // Course Module ID - if it's not specified, must specify 'a', see below.
+$action = optional_param('what', 'view', PARAM_ALPHA);
+$subaction = optional_param('subaction', '', PARAM_ALPHA);
+$offset = optional_param('offset', -1, PARAM_INT);
+
+if ($id) {
+    $cm = get_coursemodule_from_id('scheduler', $id, 0, false, MUST_EXIST);
+    $scheduler = scheduler_instance::load_by_coursemodule_id($id);
+} else {
+    $a = required_param('a', PARAM_INT);     // Scheduler ID.
+    $scheduler = scheduler_instance::load_by_id($a);
+    $cm = $scheduler->get_cm();
+}
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+$defaultsubpage = groups_get_activity_groupmode($cm) ? 'myappointments' : 'allappointments';
+$subpage = optional_param('subpage', $defaultsubpage, PARAM_ALPHA);
+
+require_login($course->id, true, $cm);
+$context = context_module::instance($cm->id);
+
+// Initialize $PAGE, compute blocks.
+$PAGE->set_url('/mod/scheduler/view.php', array('id' => $cm->id));
+
+$output = $PAGE->get_renderer('mod_scheduler');
+
+// Print the page header.
+
+$title = $course->shortname . ': ' . format_string($scheduler->name);
+$PAGE->set_title($title);
+$PAGE->set_heading($course->fullname);
+
+
+// Route to screen.
+
+$isteacher = has_capability('mod/scheduler:manage', $context);
+$isstudent = has_capability('mod/scheduler:viewslots', $context);
+if ($isteacher) {
+    // Teacher side.
+    if ($action == 'viewstatistics') {
+        include($CFG->dirroot.'/mod/scheduler/viewstatistics.php');
+    } else if ($action == 'viewstudent') {
+        include($CFG->dirroot.'/mod/scheduler/viewstudent.php');
+    } else if ($action == 'export') {
+        include($CFG->dirroot.'/mod/scheduler/export.php');
+    } else if ($action == 'datelist') {
+        include($CFG->dirroot.'/mod/scheduler/datelist.php');
+    } else {
+        include($CFG->dirroot.'/mod/scheduler/teacherview.php');
+    }
+
+} else if ($isstudent) {
+    // Student side.
+    include($CFG->dirroot.'/mod/scheduler/studentview.php');
+
+} else {
+    // For guests.
+    echo $OUTPUT->header();
+    echo $OUTPUT->box(get_string('guestscantdoanything', 'scheduler'), 'generalbox');
+    echo $OUTPUT->footer($course);
+}
diff --git a/mod/scheduler/viewstatistics.php b/mod/scheduler/viewstatistics.php
new file mode 100644
index 0000000..aa2f492
--- /dev/null
+++ b/mod/scheduler/viewstatistics.php
@@ -0,0 +1,276 @@
+<?php
+
+/**
+ * Statistics report for the scheduler
+ *
+ * @package    mod_scheduler
+ * @copyright  2011 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+// A function utility for sorting stat results.
+function byname($a, $b) {
+    return strcasecmp($a[0], $b[0]);
+}
+
+$taburl = new moodle_url('/mod/scheduler/view.php', array('id' => $scheduler->cmid,
+                         'what' => 'viewstatistics', 'subpage' => $subpage));
+$PAGE->set_url($taburl);
+
+echo $OUTPUT->header();
+
+// Display navigation tabs.
+
+echo $output->teacherview_tabs($scheduler, $taburl, $subpage);
+
+// Find active group in case that group mode is in use.
+$currentgroupid = 0;
+$groupmode = groups_get_activity_groupmode($scheduler->cm);
+if ($groupmode) {
+    $currentgroupid = groups_get_activity_group($scheduler->cm, true);
+    groups_print_activity_menu($scheduler->cm, $taburl);
+}
+
+// Display correct type of statistics by request.
+
+$usergroups = ($currentgroupid > 0) ? array($currentgroupid) : '';
+$attendees = $scheduler->get_available_students($usergroups);
+
+switch ($subpage) {
+    case 'overall':
+        $sql = '
+            SELECT
+            COUNT(DISTINCT(a.studentid))
+            FROM
+            {scheduler_slots} s,
+            {scheduler_appointment} a
+            WHERE
+            s.id = a.slotid AND
+            s.schedulerid = ? AND
+            a.attended = 1
+            ';
+        $attended = $DB->count_records_sql($sql, array($scheduler->id));
+
+        $sql = '
+            SELECT
+            COUNT(DISTINCT(a.studentid))
+            FROM
+            {scheduler_slots} s,
+            {scheduler_appointment} a
+            WHERE
+            s.id = a.slotid AND
+            s.schedulerid = ? AND
+            a.attended = 0
+            ';
+        $registered = $DB->count_records_sql($sql, array($scheduler->id));
+
+        $sql = '
+            SELECT
+            COUNT(DISTINCT(s.id))
+            FROM
+            {scheduler_slots} s
+            LEFT JOIN
+            {scheduler_appointment} a
+            ON
+            s.id = a.slotid
+            WHERE
+            s.schedulerid = ? AND
+            s.teacherid = ? AND
+            a.attended IS NULL
+            ';
+        $freeowned = $DB->count_records_sql($sql, array($scheduler->id, $USER->id));
+
+        $sql = '
+            SELECT
+            COUNT(DISTINCT(s.id))
+            FROM
+            {scheduler_slots} s
+            LEFT JOIN
+            {scheduler_appointment} a
+            ON
+            s.id = a.slotid
+            WHERE
+            s.schedulerid = ? AND
+            s.teacherid != ? AND
+            a.attended IS NULL
+            ';
+        $freenotowned = $DB->count_records_sql($sql, array($scheduler->id, $USER->id));
+
+        $allattendees = ($attendees) ? count($attendees) : 0;
+
+        $str = '<h3>'.get_string('attendable', 'scheduler').'</h3>';
+        $str .= '<strong>'.get_string('attendablelbl', 'scheduler').'</strong>: ' . $allattendees . '<br/>';
+        $str .= '<h3>'.get_string('attended', 'scheduler').'</h3>';
+        $str .= '<strong>'.get_string('attendedlbl', 'scheduler').'</strong>: ' . $attended . '<br/><br/>';
+        $str .= '<h3>'.get_string('unattended', 'scheduler').'</h3>';
+        $str .= '<strong>'.get_string('registeredlbl', 'scheduler').'</strong>: ' . $registered . '<br/>';
+        $str .= '<strong>'.get_string('unregisteredlbl', 'scheduler').'</strong>: ' .
+                ($allattendees - $registered - $attended) . '<br/>';
+        $str .= '<h3>'.get_string('availableslots', 'scheduler').'</h3>';
+        $str .= '<strong>'.get_string('availableslotsowned', 'scheduler').'</strong>: ' . $freeowned . '<br/>';
+        $str .= '<strong>'.get_string('availableslotsnotowned', 'scheduler').'</strong>: ' . $freenotowned . '<br/>';
+        $str .= '<strong>'.get_string('availableslotsall', 'scheduler').'</strong>: ' . ($freeowned + $freenotowned) . '<br/>';
+
+        echo $OUTPUT->box($str);
+
+        break;
+    case 'studentbreakdown':
+        // Display the amount of time each student has received.
+
+        if (!empty($attendees)) {
+            $table = new html_table();
+            $table->head  = array (get_string('student', 'scheduler'), get_string('duration', 'scheduler'));
+            $table->align = array ('LEFT', 'CENTER');
+            $table->width = '70%';
+            $table->data = array();
+            $sql = '
+                SELECT
+                a.studentid,
+                SUM(s.duration) as totaltime
+                FROM
+                {scheduler_slots} s,
+                {scheduler_appointment} a
+                WHERE
+                s.id = a.slotid AND
+                a.studentid > 0 AND
+                s.schedulerid = ?
+                GROUP BY
+                a.studentid
+                ';
+            if ($statrecords = $DB->get_records_sql($sql, array($scheduler->id))) {
+                foreach ($statrecords as $arecord) {
+                    if (array_key_exists($arecord->studentid, $attendees)) {
+                        $table->data[] = array (fullname($attendees[$arecord->studentid]), $arecord->totaltime);
+                    }
+                }
+                uasort($table->data, 'byname');
+            }
+            echo html_writer::table($table);
+        } else {
+            echo $OUTPUT->box(get_string('nostudents', 'scheduler'), 'center', '70%');
+        }
+        break;
+    case 'staffbreakdown':
+        // Display break down by member of staff.
+        $sql = "SELECT s.teacherid,
+                       SUM(s.duration) as totaltime
+                  FROM {scheduler_slots} s
+             LEFT JOIN {scheduler_appointment} a
+                    ON a.slotid = s.id
+                 WHERE
+                       s.schedulerid = :sid
+                       AND a.studentid IS NOT NULL";
+        $params = array('sid' => $scheduler->id);
+        if ($currentgroupid > 0) {
+            $sql .= " AND EXISTS (SELECT 1 FROM {groups_members} gm WHERE gm.userid = a.studentid AND gm.groupid = :gid)";
+            $params['gid'] = $currentgroupid;
+        }
+        $sql .= " GROUP BY s.teacherid";
+        if ($statrecords = $DB->get_records_sql($sql, $params)) {
+            $table = new html_table();
+            $table->width = '70%';
+            $table->head  = array (s($scheduler->get_teacher_name()), get_string('cumulatedduration', 'scheduler'));
+            $table->align = array ('LEFT', 'CENTER');
+            foreach ($statrecords as $arecord) {
+                $ateacher = $DB->get_record('user', array('id' => $arecord->teacherid));
+                $table->data[] = array (fullname($ateacher), $arecord->totaltime);
+            }
+            uasort($table->data, 'byname');
+            echo html_writer::table($table);
+        }
+        break;
+    case 'lengthbreakdown':
+        // Display by number of atendees to one member of staff.
+        $sql = '
+            SELECT
+            s.starttime,
+            COUNT(*) as groupsize,
+            MAX(s.duration) as duration
+            FROM
+            {scheduler_slots} s
+            LEFT JOIN
+            {scheduler_appointment} a
+            ON
+            a.slotid = s.id
+            WHERE
+            a.studentid IS NOT NULL AND
+            schedulerid = :sid';
+        $params = array('sid' => $scheduler->id);
+        if ($currentgroupid > 0) {
+            $sql .= " AND EXISTS (SELECT 1 FROM {groups_members} gm WHERE gm.userid = a.studentid AND gm.groupid = :gid)";
+            $params['gid'] = $currentgroupid;
+        }
+        $sql .= " GROUP BY s.starttime ORDER BY groupsize DESC";
+        if ($groupslots = $DB->get_records_sql($sql, $params)) {
+            $table = new html_table();
+            $table->head  = array (get_string('duration', 'scheduler'), get_string('appointments', 'scheduler'));
+            $table->align = array ('LEFT', 'CENTER');
+            $table->width = '70%';
+
+            $durationcount = array();
+            foreach ($groupslots as $slot) {
+                if (array_key_exists($slot->duration, $durationcount)) {
+                    $durationcount[$slot->duration] ++;
+                } else {
+                    $durationcount[$slot->duration] = 1;
+                }
+            }
+            foreach ($durationcount as $key => $duration) {
+                $table->data[] = array ($key, $duration);
+            }
+            echo html_writer::table($table);
+        }
+        break;
+    case 'groupbreakdown':
+        // Display by number of atendees to one member of staff.
+        $sql = "
+            SELECT
+            s.starttime,
+            COUNT(*) as groupsize,
+            MAX(s.duration) as duration
+            FROM
+            {scheduler_slots} s
+            LEFT JOIN
+            {scheduler_appointment} a
+            ON
+            a.slotid = s.id
+            WHERE
+            a.studentid IS NOT NULL AND
+            s.schedulerid = :sid";
+        $params = array('sid' => $scheduler->id);
+        if ($currentgroupid > 0) {
+            $sql .= " AND EXISTS (SELECT 1 FROM {groups_members} gm WHERE gm.userid = s.teacherid AND gm.groupid = :gid)";
+            $params['gid'] = $currentgroupid;
+        }
+        $sql .= " GROUP BY s.starttime
+                  ORDER BY groupsize DESC";
+        if ($groupslots = $DB->get_records_sql($sql, $params)) {
+            $table = new html_table();
+            $table->head  = array (get_string('groupsize', 'scheduler'), get_string('occurrences', 'scheduler'),
+                                   get_string('cumulatedduration', 'scheduler'));
+            $table->align = array ('LEFT', 'CENTER', 'CENTER');
+            $table->width = '70%';
+            $grouprows = array();
+            foreach ($groupslots as $agroup) {
+                if (!array_key_exists($agroup->groupsize, $grouprows)) {
+                    $grouprows[$agroup->groupsize] = new stdClass();
+                    $grouprows[$agroup->groupsize]->occurrences = 0;
+                    $grouprows[$agroup->groupsize]->duration = 0;
+                }
+                $grouprows[$agroup->groupsize]->occurrences++;
+                $grouprows[$agroup->groupsize]->duration += $agroup->duration;
+            }
+            foreach (array_keys($grouprows) as $agroupsize) {
+                $table->data[] = array ($agroupsize, $grouprows[$agroupsize]->occurrences, $grouprows[$agroupsize]->duration);
+            }
+            echo html_writer::table($table);
+        }
+}
+echo '<br/>';
+echo $OUTPUT->continue_button("$CFG->wwwroot/mod/scheduler/view.php?id=".$cm->id);
+// Finish the page.
+echo $OUTPUT->footer($course);
+exit;
diff --git a/mod/scheduler/viewstudent.php b/mod/scheduler/viewstudent.php
new file mode 100644
index 0000000..67ac402
--- /dev/null
+++ b/mod/scheduler/viewstudent.php
@@ -0,0 +1,141 @@
+<?php
+
+/**
+ * Prints the screen that displays a single student to a teacher.
+ *
+ * @package    mod_scheduler
+ * @copyright  2016 Henning Bostelmann and others (see README.txt)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot.'/mod/scheduler/locallib.php');
+
+if (!has_capability('mod/scheduler:manage', $context)) {
+    require_capability('mod/scheduler:manageallappointments', $context);
+}
+
+$appointmentid = required_param('appointmentid', PARAM_INT);
+list($slot, $appointment) = $scheduler->get_slot_appointment($appointmentid);
+$studentid = $appointment->studentid;
+
+$urlparas = array('what' => 'viewstudent',
+    'id' => $scheduler->cmid,
+    'appointmentid' => $appointmentid,
+    'course' => $scheduler->courseid);
+$taburl = new moodle_url('/mod/scheduler/view.php', $urlparas);
+$PAGE->set_url($taburl);
+
+$appts = $scheduler->get_appointments_for_student($studentid);
+
+$pages = array('thisappointment');
+if ($slot->get_appointment_count() > 1) {
+    $pages[] = 'otherstudents';
+}
+if (count($appts) > 1) {
+    $pages[] = 'otherappointments';
+}
+
+if (!in_array($subpage, $pages) ) {
+    $subpage = 'thisappointment';
+}
+
+// Process edit form before page output starts.
+if ($subpage == 'thisappointment') {
+    require_once($CFG->dirroot.'/mod/scheduler/appointmentforms.php');
+
+    $actionurl = new moodle_url($taburl, array('page' => 'thisappointment'));
+    $returnurl = new moodle_url($taburl, array('page' => 'thisappointment'));
+
+    $distribute = ($slot->get_appointment_count() > 1);
+    $gradeedit = ($slot->teacherid == $USER->id) || get_config('mod_scheduler', 'allteachersgrading');
+    $mform = new scheduler_editappointment_form($appointment, $actionurl, $gradeedit, $distribute);
+    $mform->set_data($mform->prepare_appointment_data($appointment));
+
+    if ($mform->is_cancelled()) {
+        redirect($returnurl);
+    } else if ($formdata = $mform->get_data()) {
+        $mform->save_appointment_data($formdata, $appointment);
+        redirect($returnurl);
+    }
+}
+
+echo $output->header();
+
+// Print user summary.
+
+scheduler_print_user($DB->get_record('user', array('id' => $appointment->studentid)), $course);
+
+// Print tabs.
+$tabrows = array();
+$row  = array();
+
+if (count($pages) > 1) {
+    foreach ($pages as $tabpage) {
+        $tabname = get_string('tab-'.$tabpage, 'scheduler');
+        $row[] = new tabobject($tabpage, new moodle_url($taburl, array('subpage' => $tabpage)), $tabname);
+    }
+    $tabrows[] = $row;
+    print_tabs($tabrows, $subpage);
+}
+
+$totalgradeinfo = new scheduler_totalgrade_info($scheduler, $scheduler->get_gradebook_info($appointment->studentid));
+
+if ($subpage == 'thisappointment') {
+
+    $ai = scheduler_appointment_info::make_for_teacher($slot, $appointment);
+    echo $output->render($ai);
+
+    $mform->display();
+
+    if ($scheduler->uses_grades()) {
+        echo $output->render($totalgradeinfo);
+    }
+
+} else if ($subpage == 'otherappointments') {
+    // Print table of other appointments of the same student.
+
+    $studenturl = new moodle_url($taburl, array('page' => 'thisappointment'));
+    $table = new scheduler_slot_table($scheduler, true, $studenturl);
+    $table->showattended = true;
+    $table->showteachernotes = true;
+    $table->showeditlink = true;
+    $table->showlocation = false;
+
+    foreach ($appts as $appt) {
+        $table->add_slot($appt->get_slot(), $appt, null, false);
+    }
+
+    echo $output->render($table);
+
+    if ($scheduler->uses_grades()) {
+        $totalgradeinfo->showtotalgrade = true;
+        $totalgradeinfo->totalgrade = $scheduler->get_user_grade($appointment->studentid);
+        echo $output->render($totalgradeinfo);
+    }
+
+} else if ($subpage == 'otherstudents') {
+    // Print table of other students in the same slot.
+
+    $ai = scheduler_appointment_info::make_from_slot($slot, false);
+    echo $output->render($ai);
+
+    $studenturl = new moodle_url($taburl, array('page' => 'thisappointment'));
+    $table = new scheduler_slot_table($scheduler, true, $studenturl);
+    $table->showattended = true;
+    $table->showslot = false;
+    $table->showstudent = true;
+    $table->showteachernotes = true;
+    $table->showeditlink = true;
+
+    foreach ($slot->get_appointments() as $otherappointment) {
+        $table->add_slot($otherappointment->get_slot(), $otherappointment, null, false);
+    }
+
+    echo $output->render($table);
+}
+
+echo $output->continue_button(new moodle_url('/mod/scheduler/view.php', array('id' => $scheduler->cmid)));
+echo $output->footer($course);
+exit;
diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected-debug.js b/mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..057dc44dbb213c3e71b437f5a4c1d506fafe5a1c
GIT binary patch
literal 955
zcmZWoU2mH}5PXJTu_aQ$HX(hE<;t$(he&ZO#c5Tms-gqd_Q}VcdmJd0!+-A{U`iYw
z__*Djota%W-|r)qrh%U+l?uGhRQi%9drS*~`Z`6Cqrk*q>W8o`WMa6I5NtwtoGljv
zIJs`gG^`g7i}~~FX$=!Pg7&&wJj~|L_p8TS@Kat!iOMo2)0hg_)jQ~}qyhT2`bi~*
z#R9K#p$t{A9ctk6SeVG3G_3r(t_thNa&<R$!Cgl0BoLv?leafGRb!X(KL(>7Evtp{
z+?(Ohg(1w<@h_M?!r2js6~5*~$|zv6AqPjMS%!wls%@REF+Y-lyhPY4oe`1+n`$(L
zmQX65()W#JL;eWs^-I&h8a?Se4+NKo5Mq{Np+#-HW1Xj5!E-~IzCU)IO~ix<x^YCE
zpMwZlvJd{_#p>0fI1b-JKp)W#P2khylLHNV(8TIs+aeMucV-V?;Y%BI&do>EJ+$o|
zr?R)+d52swQJ_DtNt9FB7b_{s(aem|JT43d{$AsjHm#L8@;`HfSw8VcEhLrMkyy95
z<W}~1DTAIhwKEo-;+sfG>^agcrDb5X*Lj~NAPZ6Z>NLERBsT<44!y+>uvLDsQvI#@
zIK_+6)ehL^RV}3o!JqzEJgw<JnNqKlr}0n0X>Gh)_~ltuUI?C4Y5l|!rSX1S|Na53
CmMD|}

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected-min.js b/mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..5abde09fa5c5cc0c22a557b93c2ae4ddc8d6238d
GIT binary patch
literal 584
zcmZXRQA@)x6oudY74r^C!?NJ>N@a8QVK5!IDT>HQo4YkEO*KvX()GWaQYqbh3b{GC
z_dDl)ysj7*!iOx+g~Dl;i+z!#C`yH9Do_=uFtI3r9!i~9nQI@ZC3VHkNQd=fv|cQC
ztIhKagsfPSXBpQbc8`2~@p~Jsqvh^l^F9O1V};{F<<@EW5zR>I@6xii(v5?Ln&63D
zz=T)#^SO4a>na-z4O@XjQmuo1*V*xhy%9@IXGDeo0Wz+XuUSt@81f|bdpVLC*%7S|
zE}-P(G9jMlOQujCZF+y#UM3+>Ak>|I(u%7Rfslq!=Me3}S|j7qq7SLT15h&oPg=~1
z5GIne#8OK;fb0;BYnW?ve0}63Ft?#DmGV5}-W-;a$!WMKQeTBOjOTwczHysvNYhZ5
kzeO)wx7In(+Tc$q4HmOch<Sm|pw2~mV1?SkS3`oEUs&kMZ~y=R

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected.js b/mod/scheduler/yui/build/moodle-mod_scheduler-delselected/moodle-mod_scheduler-delselected.js
new file mode 100644
index 0000000000000000000000000000000000000000..057dc44dbb213c3e71b437f5a4c1d506fafe5a1c
GIT binary patch
literal 955
zcmZWoU2mH}5PXJTu_aQ$HX(hE<;t$(he&ZO#c5Tms-gqd_Q}VcdmJd0!+-A{U`iYw
z__*Djota%W-|r)qrh%U+l?uGhRQi%9drS*~`Z`6Cqrk*q>W8o`WMa6I5NtwtoGljv
zIJs`gG^`g7i}~~FX$=!Pg7&&wJj~|L_p8TS@Kat!iOMo2)0hg_)jQ~}qyhT2`bi~*
z#R9K#p$t{A9ctk6SeVG3G_3r(t_thNa&<R$!Cgl0BoLv?leafGRb!X(KL(>7Evtp{
z+?(Ohg(1w<@h_M?!r2js6~5*~$|zv6AqPjMS%!wls%@REF+Y-lyhPY4oe`1+n`$(L
zmQX65()W#JL;eWs^-I&h8a?Se4+NKo5Mq{Np+#-HW1Xj5!E-~IzCU)IO~ix<x^YCE
zpMwZlvJd{_#p>0fI1b-JKp)W#P2khylLHNV(8TIs+aeMucV-V?;Y%BI&do>EJ+$o|
zr?R)+d52swQJ_DtNt9FB7b_{s(aem|JT43d{$AsjHm#L8@;`HfSw8VcEhLrMkyy95
z<W}~1DTAIhwKEo-;+sfG>^agcrDb5X*Lj~NAPZ6Z>NLERBsT<44!y+>uvLDsQvI#@
zIK_+6)ehL^RV}3o!JqzEJgw<JnNqKlr}0n0X>Gh)_~ltuUI?C4Y5l|!rSX1S|Na53
CmMD|}

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen-debug.js b/mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..160f7582190ce07b29a534b9b57dd4fd5f8992e8
GIT binary patch
literal 1828
zcmb7FZExE)5dLicii7t-a-vE>fqYRhAX{o+#g+!Bv!OvT1dMpLxJsl(QnrWI|9yAV
zi(lHUD8EoT-rI9`eE9hLn^Z^{N3}7s!WXrXPp&9YwiVhJPHfO2>L`I#s|&A;hWIgo
zw?Ex2=J07c-3SZI#czw-hx>O+_>n}=uiIZ1x4-^;|9-K|A@bt6!XI2^d@ZzCqlJ~R
zb?SU8QG16K7M>-bbkq7%c@$jkld#?0zkW4^>0Nq~Cj~y2eEtld_OGU-|K(viz~Y2S
zX_{SJOyL5Sgcf{>Fk{R!a9;S<rF6unH;u5OhN4z7C>5r)4k-_+6exM5BATYxq0Ov<
zwk3=kp*_%{QQFsp`^dyKN^2_114SRcRYBEurP*rOmWqN<+Dfm3l||oL4I2{zXN)tT
zdg^i}U_-xRPB`JPylLDrwqytrn#dh{OqGf6(qgqvx7)2X#=|8<8NtiOamd79VwW~$
zL*sC0be4szE&ko2^AM^eJX$VXzohUYKQft!FiJESLnorHy@P?0c_{R$^r&=H*u2Ly
zMqy(HmyamVj-305|Kv0(jM8EF9aU(+#&54`G_B9!`s(T`0YZ39o~a$ug?@I&>A@h&
zUgJvXZhCOTGkrjBD5FEULY7`wPXNXqc`LN*ilQX<WGKY2_cM|5IK*?h0!ORA8iT~O
zMM2p9(|rQF(ta(*R%vOrR2cuz0gT7|zNXIchO|m0@jNX)-zV_$`s)AlT?tjS7Qa7V
z=APQE`4XShg9G!@qGqpzmI#G!@?`|k<>B`Mcm8z1Iy-=x>PIZq8(VaZ(GFSvi$Fvl
zgVnHqt0?{5rK`xJXe_3<E3jd5jS0_rwMPF(eWp?LluhnS<-+-%teD9H5h$(vIRkJ9
zCy%M9s(9q<^uW>c6h%?ShlzYPyI?Y*kCYONic;t`9z6sxb_x^j!@yZg#I08qzbQ|>
zkRJ^8A~emVH#Ux>+C+28cruxs@%Bi~$86S982ebGkE4yKT8!qM*C3$>tN4hLWqr`#
xeLtU0#>&tvMmK*f-YwtUzrA4wn=xf6>h3Iu53^_CaF)PK8yWU+i)Vkb`M<oV4aNWf

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen-min.js b/mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..2135ecc5a62ef5d709ca82d41108eeda8413875c
GIT binary patch
literal 867
zcmZ9L-)q}25Xay5R~YTZqN*}B`r;5MD}j~K71nNSj1g4p5^J?jo^*~gT>tMoB~6;<
z#o|u7AK$x=e}22x#@bvo-rE|^8*dk}tiX0Pg!5?D5CKrAWrrm>k2xrk!`g%lXT#N}
z`PJu-w?F20g&^}#!`oPUY7Ckcgly?Uqa$?|kRsGjQu1UD+m2rQ#i+vcM!%{(JF%ah
z27Yzw)%y-->2_-^A{px9?9eeOR6#j8fObB=(dBZb`@Rp})0voX(aAyZ#QZTE-Bzto
zgEeG|!E99*VqZrnXA4rMZM{QkSQ^`?(vXV4M~si~uh<oNwnjy+0pC$^0UwmdV&Dz~
z6^8~v4o=6)_qiNZ?8=g}9NngY_YSS^bp*QK<;oAyDY$YLQt<nWcl=!%S9bwUQatYr
zO#?-me;U%6$i&&+xQ7j?hHLZo_(g!&dW?|V<1_$u0keH6h0tfL(g)D6DWTo6fpQ#G
z>5(|3pvuLOy9wH%qoZ}CMVPwIQNQpbHJGw`5ruL<&9sTKGPr^x{=$wv$0T&*>ICm1
zwhj>jvx(XukB@xFg>`Eo<tbMOVvb?SnGwAL%Ej8$9SFHM`A;Yx!Lq|i7L)Xe%kT5A
jch|RHE*X*le>=yMDt?Iv6S+@;-lhZAjE49<%ITZ`IJY_0

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen.js b/mod/scheduler/yui/build/moodle-mod_scheduler-saveseen/moodle-mod_scheduler-saveseen.js
new file mode 100644
index 0000000000000000000000000000000000000000..160f7582190ce07b29a534b9b57dd4fd5f8992e8
GIT binary patch
literal 1828
zcmb7FZExE)5dLicii7t-a-vE>fqYRhAX{o+#g+!Bv!OvT1dMpLxJsl(QnrWI|9yAV
zi(lHUD8EoT-rI9`eE9hLn^Z^{N3}7s!WXrXPp&9YwiVhJPHfO2>L`I#s|&A;hWIgo
zw?Ex2=J07c-3SZI#czw-hx>O+_>n}=uiIZ1x4-^;|9-K|A@bt6!XI2^d@ZzCqlJ~R
zb?SU8QG16K7M>-bbkq7%c@$jkld#?0zkW4^>0Nq~Cj~y2eEtld_OGU-|K(viz~Y2S
zX_{SJOyL5Sgcf{>Fk{R!a9;S<rF6unH;u5OhN4z7C>5r)4k-_+6exM5BATYxq0Ov<
zwk3=kp*_%{QQFsp`^dyKN^2_114SRcRYBEurP*rOmWqN<+Dfm3l||oL4I2{zXN)tT
zdg^i}U_-xRPB`JPylLDrwqytrn#dh{OqGf6(qgqvx7)2X#=|8<8NtiOamd79VwW~$
zL*sC0be4szE&ko2^AM^eJX$VXzohUYKQft!FiJESLnorHy@P?0c_{R$^r&=H*u2Ly
zMqy(HmyamVj-305|Kv0(jM8EF9aU(+#&54`G_B9!`s(T`0YZ39o~a$ug?@I&>A@h&
zUgJvXZhCOTGkrjBD5FEULY7`wPXNXqc`LN*ilQX<WGKY2_cM|5IK*?h0!ORA8iT~O
zMM2p9(|rQF(ta(*R%vOrR2cuz0gT7|zNXIchO|m0@jNX)-zV_$`s)AlT?tjS7Qa7V
z=APQE`4XShg9G!@qGqpzmI#G!@?`|k<>B`Mcm8z1Iy-=x>PIZq8(VaZ(GFSvi$Fvl
zgVnHqt0?{5rK`xJXe_3<E3jd5jS0_rwMPF(eWp?LluhnS<-+-%teD9H5h$(vIRkJ9
zCy%M9s(9q<^uW>c6h%?ShlzYPyI?Y*kCYONic;t`9z6sxb_x^j!@yZg#I08qzbQ|>
zkRJ^8A~emVH#Ux>+C+28cruxs@%Bi~$86S982ebGkE4yKT8!qM*C3$>tN4hLWqr`#
xeLtU0#>&tvMmK*f-YwtUzrA4wn=xf6>h3Iu53^_CaF)PK8yWU+i)Vkb`M<oV4aNWf

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist-debug.js b/mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..c4e6f545cc8c6be7241e0cbff657cc01989ea655
GIT binary patch
literal 983
zcma)5(Q4Z;6n(b7Lh~LZGgo_W88jq$C^Si#S!o!fsMc*FrdXXNhe7Ip-<1-_PBPg1
zVtnt_(YfawFTdRhsT5}$Yn6ekjaARCT!U&1)K|_o3My~3^DL*YO;vhrE6SHSosVYI
zjP3{_TUpa_QP3~=l}w)=M)S#Za!nchev_2~#d4C27x(w0ha%QXYm9tz*dXl<Av1Au
zC&HXp-rwmCCufVvWm60&1_lvvF%b@Y;iU(xb+oxwIqgUV>WSXSRhU=`TLEVu*(a^C
z8<Lc^^0@Y(6BRgg^(*BkFx|YUVPm&2HqtqciiqRZ0rWV9a`z*hUU4Gw3Dh}rb%~14
zMB}v)vHslDhBN=UyP9QqhT_vwFb={#$1Bc>oZNEQF4*4lIHmeuM0y_slce3diQ0R+
zS{e9@{899Oi0dA;(=R62(h*%t*ApGC;@8?8osRZ?(A{~Y)MY_eI(XUVAlQBphBL5>
z8C-FYlYKkG;BZzNUH%;W9~`n^##xMqNgYbWquBf4wFlOu%_+NmoPI6t7V}$#-laAC
fYIF@Qy{6yO7wI6)X<Ato->}8FhJv=~j{x!qFOfHv

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist-min.js b/mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..9a5b5de9c24025458c5880437d43f25fe77787ca
GIT binary patch
literal 777
zcma)4OHTqZ5Wf2>v|id+>K(EX0vt$qMIzA{L&|o9#?oRtOH7vi@9rWj>lzYIO~2{%
zd(6B%4TMyRl8tl9Kx5<7BE)M@i2>gTm?*GlbU?!26C0y;mI6nX?xerAQQCi=cE-Ja
zuSwu*E3E=Wcy}@!cBZoejGZxZ8*(&jjl{3dquPDHPcuH6^y;{%h=_ikhyXZ4i4c{V
zkb9Quja)$l!dal?mfRuZv9p*vD8Yl3qTnCsu_ioh+zz@%hCr<-)tAjhK&R@-FXIQY
zLJ1|o$AphWg4&1!yhyyE1n<jC7-P)~eCHoedMb1kG5_H^$DI=%(iG@cD+BekSb8xS
z9p*adrGe<AXD!2D`?%JjoC8IEQ}!K+wbfXik7a4S$1+|WRz5dMVx!}a>awx4wkXww
ysM@2*GL~hWwCDZD*<dnm6P|kbOtgp4d?ia6fN)}+Dh}A?YmuMYk++PsuD$`8)eWEk

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist.js b/mod/scheduler/yui/build/moodle-mod_scheduler-studentlist/moodle-mod_scheduler-studentlist.js
new file mode 100644
index 0000000000000000000000000000000000000000..c4e6f545cc8c6be7241e0cbff657cc01989ea655
GIT binary patch
literal 983
zcma)5(Q4Z;6n(b7Lh~LZGgo_W88jq$C^Si#S!o!fsMc*FrdXXNhe7Ip-<1-_PBPg1
zVtnt_(YfawFTdRhsT5}$Yn6ekjaARCT!U&1)K|_o3My~3^DL*YO;vhrE6SHSosVYI
zjP3{_TUpa_QP3~=l}w)=M)S#Za!nchev_2~#d4C27x(w0ha%QXYm9tz*dXl<Av1Au
zC&HXp-rwmCCufVvWm60&1_lvvF%b@Y;iU(xb+oxwIqgUV>WSXSRhU=`TLEVu*(a^C
z8<Lc^^0@Y(6BRgg^(*BkFx|YUVPm&2HqtqciiqRZ0rWV9a`z*hUU4Gw3Dh}rb%~14
zMB}v)vHslDhBN=UyP9QqhT_vwFb={#$1Bc>oZNEQF4*4lIHmeuM0y_slce3diQ0R+
zS{e9@{899Oi0dA;(=R62(h*%t*ApGC;@8?8osRZ?(A{~Y)MY_eI(XUVAlQBphBL5>
z8C-FYlYKkG;BZzNUH%;W9~`n^##xMqNgYbWquBf4wFlOu%_+NmoPI6t7V}$#-laAC
fYIF@Qy{6yO7wI6)X<Ato->}8FhJv=~j{x!qFOfHv

literal 0
HcmV?d00001

diff --git a/mod/scheduler/yui/src/delselected/build.json b/mod/scheduler/yui/src/delselected/build.json
new file mode 100644
index 0000000..f4b97f0
--- /dev/null
+++ b/mod/scheduler/yui/src/delselected/build.json
@@ -0,0 +1,10 @@
+{
+    "name": "moodle-mod_scheduler-delselected",
+    "builds": {
+        "moodle-mod_scheduler-delselected": {
+            "jsfiles": [
+                "delselected.js"
+            ]
+        }
+    }
+}
diff --git a/mod/scheduler/yui/src/delselected/js/delselected.js b/mod/scheduler/yui/src/delselected/js/delselected.js
new file mode 100644
index 0000000..7b621e4
--- /dev/null
+++ b/mod/scheduler/yui/src/delselected/js/delselected.js
@@ -0,0 +1,36 @@
+var SELECTORS = {
+        DELACTION: 'div.commandbar a#delselected',
+        SELECTBOX: 'table#slotmanager input.slotselect'
+    },
+    MOD;
+ 
+M.mod_scheduler = M.mod_scheduler || {};
+MOD = M.mod_scheduler.delselected = {};
+
+/**
+ * Copy the selected boexs into an input parameter of the respective form
+ *
+ * @return void
+ */
+MOD.collect_selection = function(link, baseurl) {
+
+	var sellist = '';
+	Y.all(SELECTORS.SELECTBOX).each( function(box) {
+		if (box.get('checked')) {
+			if (sellist.length > 0) {
+				sellist += ',';
+			}
+			sellist += box.get('value');
+		}
+	});
+	link.setAttribute('href', baseurl+'&items='+sellist);
+};
+
+MOD.init = function(baseurl) {
+	var link = Y.one(SELECTORS.DELACTION);
+	if (link != null) {
+		link.on('click', function(e) {
+			M.mod_scheduler.delselected.collect_selection(link, baseurl);
+		});
+	}
+};
\ No newline at end of file
diff --git a/mod/scheduler/yui/src/delselected/meta/delselected.json b/mod/scheduler/yui/src/delselected/meta/delselected.json
new file mode 100644
index 0000000..87b1f1a
--- /dev/null
+++ b/mod/scheduler/yui/src/delselected/meta/delselected.json
@@ -0,0 +1,7 @@
+{
+    "moodle-mod_scheduler-delselected": {
+        "requires": [
+            "base", "node", "event"
+        ]
+    }
+}
diff --git a/mod/scheduler/yui/src/saveseen/build.json b/mod/scheduler/yui/src/saveseen/build.json
new file mode 100644
index 0000000..665cece
--- /dev/null
+++ b/mod/scheduler/yui/src/saveseen/build.json
@@ -0,0 +1,10 @@
+{
+    "name": "moodle-mod_scheduler-saveseen",
+    "builds": {
+        "moodle-mod_scheduler-saveseen": {
+            "jsfiles": [
+                "saveseen.js"
+            ]
+        }
+    }
+}
diff --git a/mod/scheduler/yui/src/saveseen/js/saveseen.js b/mod/scheduler/yui/src/saveseen/js/saveseen.js
new file mode 100644
index 0000000..e21b94f
--- /dev/null
+++ b/mod/scheduler/yui/src/saveseen/js/saveseen.js
@@ -0,0 +1,62 @@
+var SELECTORS = {
+        CHECKBOXES: 'table#slotmanager form.studentselectform input.studentselect'
+    },
+    MOD;
+ 
+M.mod_scheduler = M.mod_scheduler || {};
+MOD = M.mod_scheduler.saveseen = {};
+
+/**
+ * Save the "seen" status.
+ *
+ * @param cmid the coursemodule id
+ * @param appid the id of the relevant appointment
+ * @param spinner The spinner icon shown while saving
+ * @return void
+ */
+MOD.save_status = function(cmid, appid, newseen, spinner) {
+
+    Y.io(M.cfg.wwwroot + '/mod/scheduler/ajax.php', {
+        // The request paramaters.
+        data: {
+        	action: 'saveseen',
+            id: cmid,
+            appointmentid : appid,
+            seen: newseen,
+            sesskey: M.cfg.sesskey
+        },
+
+        timeout: 5000, // 5 seconds of timeout.
+
+        //Define the events.
+        on: {
+            start : function(transactionid) {
+                spinner.show();
+            },
+            success : function(transactionid, xhr) {
+                window.setTimeout(function() {
+                    spinner.hide();
+                }, 250);
+            },
+            failure : function(transactionid, xhr) {
+                var msg = {
+                    name : xhr.status+' '+xhr.statusText,
+                    message : xhr.responseText
+                };
+                spinner.hide();
+                return new M.core.exception(msg);
+            }
+        },
+        context:this
+    });
+};
+
+
+MOD.init = function(cmid) {
+	Y.all(SELECTORS.CHECKBOXES).each( function(box) {
+		box.on('change', function(e) {
+			var spinner = M.util.add_spinner(Y, box.ancestor('div'));
+			M.mod_scheduler.saveseen.save_status(cmid, box.get('value'), box.get('checked'), spinner);
+		})
+	});
+};
diff --git a/mod/scheduler/yui/src/saveseen/meta/saveseen.json b/mod/scheduler/yui/src/saveseen/meta/saveseen.json
new file mode 100644
index 0000000..b5cd040
--- /dev/null
+++ b/mod/scheduler/yui/src/saveseen/meta/saveseen.json
@@ -0,0 +1,7 @@
+{
+    "moodle-mod_scheduler-saveseen": {
+        "requires": [
+            "base", "node", "event"
+        ]
+    }
+}
diff --git a/mod/scheduler/yui/src/studentlist/build.json b/mod/scheduler/yui/src/studentlist/build.json
new file mode 100644
index 0000000..7340899
--- /dev/null
+++ b/mod/scheduler/yui/src/studentlist/build.json
@@ -0,0 +1,10 @@
+{
+    "name": "moodle-mod_scheduler-studentlist",
+    "builds": {
+        "moodle-mod_scheduler-studentlist": {
+            "jsfiles": [
+                "studentlist.js"
+            ]
+        }
+    }
+}
diff --git a/mod/scheduler/yui/src/studentlist/js/studentlist.js b/mod/scheduler/yui/src/studentlist/js/studentlist.js
new file mode 100644
index 0000000..12d4f46
--- /dev/null
+++ b/mod/scheduler/yui/src/studentlist/js/studentlist.js
@@ -0,0 +1,35 @@
+
+var CSS = {
+	EXPANDED: 'expanded',
+	COLLAPSED: 'collapsed'
+};
+
+M.mod_scheduler = M.mod_scheduler || {};
+MOD = M.mod_scheduler.studentlist = {};
+
+MOD.setState = function(id, expanded) {
+	image = Y.one('#'+id);
+	content = Y.one('#list'+id);
+	if (expanded) {
+		content.removeClass(CSS.COLLAPSED);
+		content.addClass(CSS.EXPANDED);
+		image.set('src', M.util.image_url('t/expanded'));
+    } else {
+		content.removeClass(CSS.EXPANDED);
+		content.addClass(CSS.COLLAPSED);
+		image.set('src', M.util.image_url('t/collapsed'));
+	}
+};
+
+MOD.toggleState = function(id) {
+	content = Y.one('#list'+id);
+	isVisible = content.hasClass(CSS.EXPANDED);
+	this.setState(id, !isVisible);
+};
+
+MOD.init = function(imageid, expanded) {
+	this.setState(imageid, expanded);
+	Y.one('#'+imageid).on('click', function(e){
+		M.mod_scheduler.studentlist.toggleState(imageid);
+	});
+};
diff --git a/mod/scheduler/yui/src/studentlist/meta/studentlist.json b/mod/scheduler/yui/src/studentlist/meta/studentlist.json
new file mode 100644
index 0000000..d4c64dd
--- /dev/null
+++ b/mod/scheduler/yui/src/studentlist/meta/studentlist.json
@@ -0,0 +1,7 @@
+{
+    "moodle-mod_scheduler-studentlist": {
+        "requires": [
+            "base", "node", "event", "io"
+        ]
+    }
+}
-- 
1.8.3.1

