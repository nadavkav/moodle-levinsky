From 8b2decf5c9a402fd5f13ea98ae195b3c3d3a0fd8 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Wed, 11 Oct 2017 21:29:56 +0300
Subject: [PATCH 46/95] local/ws_rashim (new)

---
 local/ws_rashim/changelog.txt                      |   86 +
 local/ws_rashim/classes/event/category_created.php |   31 +
 local/ws_rashim/classes/event/course_created.php   |   10 +
 local/ws_rashim/classes/event/course_deleted.php   |   14 +
 .../classes/event/course_idnumber_updated.php      |   14 +
 .../classes/event/course_module_created.php        |   10 +
 .../classes/event/course_module_deleted.php        |   10 +
 .../classes/event/course_module_updated.php        |   10 +
 .../classes/event/course_section_copied.php        |   30 +
 .../classes/event/course_section_updated.php       |   10 +
 local/ws_rashim/classes/event/course_updated.php   |   10 +
 local/ws_rashim/classes/event/meeting_created.php  |   30 +
 local/ws_rashim/classes/event/meeting_deleted.php  |   24 +
 local/ws_rashim/classes/event/meeting_updated.php  |   30 +
 local/ws_rashim/classes/event/session_created.php  |   25 +
 local/ws_rashim/classes/event/session_ended.php    |   25 +
 .../classes/event/tikyesod_shl_changed.php         |   30 +
 local/ws_rashim/classes/event/user_created.php     |   10 +
 .../classes/event/user_enrolment_created.php       |   10 +
 .../classes/event/user_enrolment_deleted.php       |   10 +
 local/ws_rashim/classes/event/user_loggedin.php    |   10 +
 .../classes/event/user_profile_field_missing.php   |   18 +
 local/ws_rashim/classes/event/user_updated.php     |   10 +
 local/ws_rashim/classes/observer.php               |  142 ++
 local/ws_rashim/db/events.php                      |   19 +
 local/ws_rashim/db/install.xml                     |   55 +
 local/ws_rashim/index.php                          |    3 +
 local/ws_rashim/lang/en/local_ws_rashim.php        |   38 +
 local/ws_rashim/lang/he/local_ws_rashim.php        |   28 +
 local/ws_rashim/lib.php                            | 2047 ++++++++++++++++++++
 local/ws_rashim/login.php                          |  118 ++
 local/ws_rashim/service.php                        |   16 +
 local/ws_rashim/settings.php                       |   56 +
 local/ws_rashim/update.php                         |   95 +
 local/ws_rashim/version.php                        |   10 +
 local/ws_rashim/wsdl.php                           |   12 +
 local/ws_rashim/wsdl.xml                           |  585 ++++++
 37 files changed, 3691 insertions(+)
 create mode 100755 local/ws_rashim/changelog.txt
 create mode 100755 local/ws_rashim/classes/event/category_created.php
 create mode 100755 local/ws_rashim/classes/event/course_created.php
 create mode 100755 local/ws_rashim/classes/event/course_deleted.php
 create mode 100755 local/ws_rashim/classes/event/course_idnumber_updated.php
 create mode 100755 local/ws_rashim/classes/event/course_module_created.php
 create mode 100755 local/ws_rashim/classes/event/course_module_deleted.php
 create mode 100755 local/ws_rashim/classes/event/course_module_updated.php
 create mode 100755 local/ws_rashim/classes/event/course_section_copied.php
 create mode 100755 local/ws_rashim/classes/event/course_section_updated.php
 create mode 100755 local/ws_rashim/classes/event/course_updated.php
 create mode 100755 local/ws_rashim/classes/event/meeting_created.php
 create mode 100755 local/ws_rashim/classes/event/meeting_deleted.php
 create mode 100755 local/ws_rashim/classes/event/meeting_updated.php
 create mode 100755 local/ws_rashim/classes/event/session_created.php
 create mode 100755 local/ws_rashim/classes/event/session_ended.php
 create mode 100755 local/ws_rashim/classes/event/tikyesod_shl_changed.php
 create mode 100755 local/ws_rashim/classes/event/user_created.php
 create mode 100755 local/ws_rashim/classes/event/user_enrolment_created.php
 create mode 100755 local/ws_rashim/classes/event/user_enrolment_deleted.php
 create mode 100755 local/ws_rashim/classes/event/user_loggedin.php
 create mode 100755 local/ws_rashim/classes/event/user_profile_field_missing.php
 create mode 100755 local/ws_rashim/classes/event/user_updated.php
 create mode 100755 local/ws_rashim/classes/observer.php
 create mode 100755 local/ws_rashim/db/events.php
 create mode 100755 local/ws_rashim/db/install.xml
 create mode 100644 local/ws_rashim/index.php
 create mode 100755 local/ws_rashim/lang/en/local_ws_rashim.php
 create mode 100755 local/ws_rashim/lang/he/local_ws_rashim.php
 create mode 100755 local/ws_rashim/lib.php
 create mode 100755 local/ws_rashim/login.php
 create mode 100755 local/ws_rashim/service.php
 create mode 100755 local/ws_rashim/settings.php
 create mode 100755 local/ws_rashim/update.php
 create mode 100755 local/ws_rashim/version.php
 create mode 100755 local/ws_rashim/wsdl.php
 create mode 100755 local/ws_rashim/wsdl.xml

diff --git a/local/ws_rashim/changelog.txt b/local/ws_rashim/changelog.txt
new file mode 100755
index 0000000..9e06f46
--- /dev/null
+++ b/local/ws_rashim/changelog.txt
@@ -0,0 +1,86 @@
+VERSION	3.1.0.3
+DATE	26/10/2016
+CHANGES
+	* New version for Moodle 3.1.x - same functionality as 2.2.7.21
+--------------------------------------------------------------------------------
+VERSION	3.1.0.7 - 20161229.1455
+DATE	29/12/2016
+CHANGES
+	* Finalizing RC version fo academic
+	* Supports 2.7 and onward...
+--------------------------------------------------------------------------------
+VERSION	3.1.0.9 - 20170103.1325
+DATE	03/01/2017
+CHANGES
+	* Fixing special case for police/iaa
+	* Fixing log writings (missing paramters and text)
+	* Pre 3.1 hack for 'course_update_section' (not exists before)
+--------------------------------------------------------------------------------
+VERSION	3.1.0.11 - 20170104.1235
+DATE	04/01/2017
+CHANGES
+	* Adding new page to update old style assignments
+--------------------------------------------------------------------------------
+VERSION	3.1.0.15 - 20170110.1025
+DATE	10/01/2017
+CHANGES
+	* Fixing login both from Michlol and directly
+--------------------------------------------------------------------------------
+VERSION	3.1.0.17 - 20170116.1025
+DATE	16/01/2017
+CHANGES
+	* Fixing time zone issues
+--------------------------------------------------------------------------------
+VERSION	3.1.0.19 - 2017011700.1335
+DATE	17/01/2017
+CHANGES
+	* Do not return moodle's final (course) grade to michlol, only for assignments...
+	* Extend version number to format YYYYMMDD00.HHmm
+--------------------------------------------------------------------------------
+VERSION	3.1.0.21 - 2017011800.1225
+CHANGES
+	* Fixing enrolment when using different than 'manual'
+	* Dropping date from changelog
+--------------------------------------------------------------------------------
+VERSION	3.1.0.23 - 2017011800.1735
+CHANGES
+	* Fixing session management when client runs in batch mode...
+--------------------------------------------------------------------------------
+VERSION	3.1.0.25 - 2017013100.0915
+CHANGES
+	* Restoring grouping creation for users...
+--------------------------------------------------------------------------------
+VERSION	3.1.0.27 - 2017020100.1105
+CHANGES
+	* Fixing broken backward compatibility for multiply gorup memberships in same course...
+--------------------------------------------------------------------------------
+VERSION	3.1.0.29 - 2017020800.1155
+CHANGES
+	* Fix grade return on automatic grading (quiz completition)
+	* Deleteing link to michlol when deleting asignment/quiz
+--------------------------------------------------------------------------------
+VERSION	3.1.0.31 - 2017022000.1225
+CHANGES
+	* Fix PHP constructor problem
+	* Fix login.php - no output before user authentication (cause a problem with session creation)
+--------------------------------------------------------------------------------
+VERSION	3.1.0.33 - 2017022200.1005
+CHANGES
+	* Fix PHP Notes on unset variables (observer.php)
+--------------------------------------------------------------------------------
+VERSION	3.1.0.35 - 2017030500.1045
+CHANGES
+	* Removed *quiz_attempt_submitted* event handler. It only creates a duplicate...
+--------------------------------------------------------------------------------
+VERSION	3.1.0.37 - 2017032700.1015
+CHANGES
+	* Update short name too on key update...
+--------------------------------------------------------------------------------
+VERSION	3.1.0.39 - 2017040200.1415
+CHANGES
+	* Rashat - Manage knowledge tree...
+--------------------------------------------------------------------------------
+VERSION	3.1.0.41 - 2017040400.1625
+CHANGES
+	* Rashat - Login directly to resource in knowledge tree...
+		
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/category_created.php b/local/ws_rashim/classes/event/category_created.php
new file mode 100755
index 0000000..ec42f3d
--- /dev/null
+++ b/local/ws_rashim/classes/event/category_created.php
@@ -0,0 +1,31 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class category_created extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'course_categories';
+		$this->data ['crud'] = 'c';
+		$this->data ['edulevel'] = self::LEVEL_OTHER;
+		$this->context = \context_system::instance ();
+	}
+
+	public static function get_name() {
+		return get_string ( 'eventcategorycreated', 'local_ws_rashim' );
+	}
+
+	public function get_url() {
+		return new \moodle_url ( '/course/management.php', array (
+				'categoryid' => $this->objectid 
+		) );
+	}
+
+	public function get_description() {
+		return "The user with id '$this->userid' created the category with id '$this->objectid'.";
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/course_created.php b/local/ws_rashim/classes/event/course_created.php
new file mode 100755
index 0000000..c3ba345
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_created.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_created extends \core\event\course_created {
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/course_deleted.php b/local/ws_rashim/classes/event/course_deleted.php
new file mode 100755
index 0000000..c7bb047
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_deleted.php
@@ -0,0 +1,14 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_deleted extends \core\event\course_deleted {
+
+	public function get_description() {
+		return "The user with id '$this->userid' " . ($this->other ['nodelete'] ? 'hid' : 'deleted') . " the course with id '$this->courseid'.";
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/course_idnumber_updated.php b/local/ws_rashim/classes/event/course_idnumber_updated.php
new file mode 100755
index 0000000..a3a823f
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_idnumber_updated.php
@@ -0,0 +1,14 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_idnumber_updated extends \core\event\course_updated {
+
+	public function get_description() {
+		return "The user with id '$this->userid' updated the idnumber of the course with id '$this->courseid' from '" . $this->other['old_idnumber'] . "' to '" . $this->other['new_idnumber'] . "'.";
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/course_module_created.php b/local/ws_rashim/classes/event/course_module_created.php
new file mode 100755
index 0000000..c3f6aa7
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_module_created.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_module_created extends \core\event\course_module_created {
+}
+
+?>
diff --git a/local/ws_rashim/classes/event/course_module_deleted.php b/local/ws_rashim/classes/event/course_module_deleted.php
new file mode 100755
index 0000000..e9a1ff8
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_module_deleted.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_module_deleted extends \core\event\course_module_deleted {
+}
+
+?>
diff --git a/local/ws_rashim/classes/event/course_module_updated.php b/local/ws_rashim/classes/event/course_module_updated.php
new file mode 100755
index 0000000..989bb4e
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_module_updated.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_module_updated extends \core\event\course_module_updated {
+}
+
+?>
diff --git a/local/ws_rashim/classes/event/course_section_copied.php b/local/ws_rashim/classes/event/course_section_copied.php
new file mode 100755
index 0000000..91f49bc
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_section_copied.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_section_copied extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'course_sections';
+		$this->data ['crud'] = 'u';
+		$this->data ['edulevel'] = self::LEVEL_TEACHING;
+	}
+
+	public static function get_name() {
+		return get_string ( 'eventcoursesectioncopied', 'local_ws_rashim' );
+	}
+
+	public function get_description() {
+		return "The user with id '$this->userid' copied the module with id '" . $this->other ['old_moduleid'] . "' from section with id '" . $this->other ['old_sectionid'] . " to module with id '" . $this->other ['new_moduleid'] . "' in section with id '" . $this->other ['new_sectionid'] . "'.";
+	}
+
+	public function get_url() {
+		return new \moodle_url ( '/course/editsection.php', array (
+				'id' => $this->objectid 
+		) );
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/course_section_updated.php b/local/ws_rashim/classes/event/course_section_updated.php
new file mode 100755
index 0000000..df3a8d6
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_section_updated.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_section_updated extends \core\event\course_section_updated {
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/course_updated.php b/local/ws_rashim/classes/event/course_updated.php
new file mode 100755
index 0000000..78da568
--- /dev/null
+++ b/local/ws_rashim/classes/event/course_updated.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class course_updated extends \core\event\course_updated {
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/meeting_created.php b/local/ws_rashim/classes/event/meeting_created.php
new file mode 100755
index 0000000..5ee11e9
--- /dev/null
+++ b/local/ws_rashim/classes/event/meeting_created.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class meeting_created extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'course_sections';
+		$this->data ['crud'] = 'c';
+		$this->data ['edulevel'] = self::LEVEL_TEACHING;
+	}
+
+	public static function get_name() {
+		return get_string ( 'eventcoursesectioncreated', 'local_ws_rashim' );
+	}
+
+	public function get_description() {
+		return "The user with id '$this->userid' created the section with id '$this->objectid' in course with id '$this->courseid'.";
+	}
+
+	public function get_url() {
+		return new \moodle_url ( '/course/editsection.php', array (
+				'id' => $this->objectid 
+		) );
+	}
+}
+
+?>
diff --git a/local/ws_rashim/classes/event/meeting_deleted.php b/local/ws_rashim/classes/event/meeting_deleted.php
new file mode 100755
index 0000000..b6027a8
--- /dev/null
+++ b/local/ws_rashim/classes/event/meeting_deleted.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class meeting_deleted extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'course_sections';
+		$this->data ['crud'] = 'd';
+		$this->data ['edulevel'] = self::LEVEL_TEACHING;
+	}
+
+	public static function get_name() {
+		return get_string ( 'eventcoursesectiondeleted', 'local_ws_rashim' );
+	}
+
+	public function get_description() {
+		return "The user with id '$this->userid' deleted the meeting with id '$this->objectid' in course with id '$this->courseid'.";
+	}
+}
+
+?>
diff --git a/local/ws_rashim/classes/event/meeting_updated.php b/local/ws_rashim/classes/event/meeting_updated.php
new file mode 100755
index 0000000..2816a72
--- /dev/null
+++ b/local/ws_rashim/classes/event/meeting_updated.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class meeting_updated extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'course_sections';
+		$this->data ['crud'] = 'u';
+		$this->data ['edulevel'] = self::LEVEL_TEACHING;
+	}
+
+	public static function get_name() {
+		return get_string ( 'eventcoursesectionupdated', 'local_ws_rashim' );
+	}
+
+	public function get_description() {
+		return "The user with id '$this->userid' updated the meeting with id '$this->objectid' in course with id '$this->courseid'.";
+	}
+
+	public function get_url() {
+		return new \moodle_url ( '/course/editsection.php', array (
+				'id' => $this->objectid 
+		) );
+	}
+}
+
+?>
diff --git a/local/ws_rashim/classes/event/session_created.php b/local/ws_rashim/classes/event/session_created.php
new file mode 100755
index 0000000..2055725
--- /dev/null
+++ b/local/ws_rashim/classes/event/session_created.php
@@ -0,0 +1,25 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class session_created extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'webservices_sessions';
+		$this->data ['crud'] = 'c';
+		$this->data ['edulevel'] = self::LEVEL_OTHER;
+		$this->context = \context_system::instance();
+	}
+	
+	public function get_description() {
+		return "The user with id '$this->userid' created a session with id '" . $this->other['sessionid']. "'.";
+	}
+
+	public static function get_name() {
+		return get_string ( 'eventsessioncreated', 'local_ws_rashim' );
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/session_ended.php b/local/ws_rashim/classes/event/session_ended.php
new file mode 100755
index 0000000..c188723
--- /dev/null
+++ b/local/ws_rashim/classes/event/session_ended.php
@@ -0,0 +1,25 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class session_ended extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'webservices_sessions';
+		$this->data ['crud'] = 'u';
+		$this->data ['edulevel'] = self::LEVEL_OTHER;
+		$this->context = \context_system::instance ();
+	}
+	
+	public function get_description() {
+		return "The user with id '$this->userid' ended a session with id '" . $this->other['sessionid']. "'.";
+	}
+
+	public static function get_name() {
+		return get_string ( 'eventsessionended', 'local_ws_rashim' );
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/tikyesod_shl_changed.php b/local/ws_rashim/classes/event/tikyesod_shl_changed.php
new file mode 100755
index 0000000..acf4ca4
--- /dev/null
+++ b/local/ws_rashim/classes/event/tikyesod_shl_changed.php
@@ -0,0 +1,30 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class tikyesod_shl_changed extends \core\event\base {
+
+	protected function init() {
+		$this->data ['objecttable'] = 'meetings';
+		$this->data ['crud'] = 'u';
+		$this->data ['edulevel'] = self::LEVEL_OTHER;
+	}
+	
+	public static function get_name() {
+		return get_string ( 'eventcoursemoved', 'local_ws_rashim' );
+	}
+
+	public function get_description() {
+		return "The user with id '$this->userid' moved the course with id '$this->courseid' from SHL '$this->other['old_shl']' to SHL '$this->other['new_shl']'.";
+	}
+
+	public function get_url() {
+		return new \moodle_url ( '/course/edit.php', array (
+				'id' => $this->objectid 
+		) );
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/user_created.php b/local/ws_rashim/classes/event/user_created.php
new file mode 100755
index 0000000..2e5e64d
--- /dev/null
+++ b/local/ws_rashim/classes/event/user_created.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class user_created extends \core\event\user_created {
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/user_enrolment_created.php b/local/ws_rashim/classes/event/user_enrolment_created.php
new file mode 100755
index 0000000..f606e30
--- /dev/null
+++ b/local/ws_rashim/classes/event/user_enrolment_created.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class user_enrolment_created extends \core\event\user_enrolment_created {
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/user_enrolment_deleted.php b/local/ws_rashim/classes/event/user_enrolment_deleted.php
new file mode 100755
index 0000000..97c06c7
--- /dev/null
+++ b/local/ws_rashim/classes/event/user_enrolment_deleted.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class user_enrolment_deleted extends \core\event\user_enrolment_deleted {
+}
+
+?>
diff --git a/local/ws_rashim/classes/event/user_loggedin.php b/local/ws_rashim/classes/event/user_loggedin.php
new file mode 100755
index 0000000..3e8fb12
--- /dev/null
+++ b/local/ws_rashim/classes/event/user_loggedin.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class user_loggedin extends \core\event\user_loggedin {
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/user_profile_field_missing.php b/local/ws_rashim/classes/event/user_profile_field_missing.php
new file mode 100755
index 0000000..25b867f
--- /dev/null
+++ b/local/ws_rashim/classes/event/user_profile_field_missing.php
@@ -0,0 +1,18 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class user_profile_field_missing extends \core\event\user_updated {
+
+	public static function get_name() {
+		return get_string ( 'eventprofilefieldmissing', 'local_ws_rashim' );
+	}
+
+	public function get_description() {
+		return "The user with id '$this->relateduserid' has no profile field by name '{$this->other['field']}'.";
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/event/user_updated.php b/local/ws_rashim/classes/event/user_updated.php
new file mode 100755
index 0000000..c3e182f
--- /dev/null
+++ b/local/ws_rashim/classes/event/user_updated.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace local_ws_rashim\event;
+
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+class user_updated extends \core\event\user_updated {
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/classes/observer.php b/local/ws_rashim/classes/observer.php
new file mode 100755
index 0000000..f1b4a05
--- /dev/null
+++ b/local/ws_rashim/classes/observer.php
@@ -0,0 +1,142 @@
+<?php
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+function grade_update_112($updated_grade) {
+	return <<<EOXML
+<?xml version="1.0" encoding="utf-8" ?>
+<PARAMS>
+    <ZHT>$updated_grade->user_idnumber</ZHT>
+    <BHN_KRS>$updated_grade->michlol_krs_bhn_krs</BHN_KRS>
+    <BHN_SMS>$updated_grade->michlol_krs_bhn_sms</BHN_SMS>
+    <BHN_SID>$updated_grade->michlol_krs_bhn_sid</BHN_SID>
+    <ZIN>$updated_grade->finalgrade</ZIN>
+</PARAMS>
+EOXML;
+}
+
+function grade_update_113($updated_grade) {
+	return <<<EOXML
+<?xml version="1.0" encoding="utf-8" ?>
+<PARAMS>
+	<ZHT>$updated_grade->user_idnumber</ZHT>
+	<TASKID>$updated_grade->course_idnumber</TASKID>
+	<ZIN>$updated_grade->finalgrade</ZIN>
+</PARAMS>
+EOXML;
+}
+
+class local_ws_rashim_observer {
+
+	protected static function send_grade($course_id, $mod, $mod_id, $user_idnumber, $course_idnumber, $finalgrade) {
+		global $DB;
+		
+		$config = get_config ( 'local_ws_rashim' );
+		
+		if (empty ( $config->api_url )) {
+			return;
+		}
+		
+		$send112 = true;
+		
+		$client = new SoapClient ( $config->api_url . '/MichlolApi.asmx?WSDL', array (
+				'exceptions' => true,
+				'trace' => true,
+				'soap_version' => SOAP_1_2,
+				'encoding' => 'UTF-8',
+				'features' => SOAP_SINGLE_ELEMENT_ARRAYS,
+				'cache_wsdl' => WSDL_CACHE_NONE 
+		) );
+		
+		$updated_grade = $DB->get_record ( 'matalot', array (
+				'course_id' => $course_id,
+				'moodle_type' => $mod,
+				'moodle_id' => $mod_id 
+		) );
+		
+		if (! $updated_grade) {
+			$updated_grade = new stdClass ();
+			
+			$send112 = false;
+		}
+		
+		$updated_grade->finalgrade = $finalgrade;
+		$updated_grade->user_idnumber = $user_idnumber;
+		$updated_grade->course_idnumber = $course_idnumber;
+		
+		if ($send112) {
+			// call 112
+			$param = array (
+					'P_RequestParams' => array (
+							'RequestID' => 112,
+							'InputData' => grade_update_112 ( $updated_grade ) 
+					),
+					'Authenticator' => array (
+							'UserName' => $config->api_user,
+							'Password' => $config->api_psw 
+					) 
+			);
+		} else {
+			// call 113
+			$param = array (
+					'P_RequestParams' => array (
+							'RequestID' => 113,
+							'InputData' => grade_update_113 ( $updated_grade ) 
+					),
+					'Authenticator' => array (
+							'UserName' => $config->api_user,
+							'Password' => $config->api_psw 
+					) 
+			);
+		}
+		
+		$result = $client->ProcessRequest ( $param );
+	}
+
+	public static function grades_export_handler(\core\event\user_graded $eventdata) {
+		global $DB;
+		
+		$grade = $eventdata->get_grade ();
+		$grade_item = $grade->grade_item;
+		
+		$user = $DB->get_record ( 'user', array (
+				'id' => $grade->userid 
+		) );
+		
+		$course = $DB->get_record ( 'course', array (
+				'id' => $grade_item->courseid 
+		) );
+		
+		local_ws_rashim_observer::send_grade ( $course->id, $grade_item->itemmodule, $grade_item->iteminstance, $user->idnumber, $course->idnumber, $grade->finalgrade );
+		
+		return true;
+	}
+
+	public static function course_deleted_handler(\core\event\course_deleted $eventdata) {
+		global $DB;
+		
+		if (! isset ( $eventdata->other ['nodelete'] ) || $eventdata->other ['nodelete'] == 0) {
+			$conditions = array (
+					"course_id" => $eventdata->courseid 
+			);
+			$DB->delete_records ( 'matalot', $conditions );
+			$DB->delete_records ( 'meetings', $conditions );
+		}
+		
+		return true;
+	}
+
+	public static function course_module_deleted_handler(\core\event\course_module_deleted $eventdata) {
+		global $DB;
+		
+		$conditions = array (
+				"course_id" => $eventdata->courseid,
+				"moodle_type" => $eventdata->other ['modulename'],
+				"moodle_id" => $eventdata->other ['instanceid'] 
+		);
+		$DB->delete_records ( 'matalot', $conditions );
+		
+		return true;
+	}
+}
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/db/events.php b/local/ws_rashim/db/events.php
new file mode 100755
index 0000000..689982a
--- /dev/null
+++ b/local/ws_rashim/db/events.php
@@ -0,0 +1,19 @@
+<?php
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+$observers = array (
+		array (
+				'eventname' => '\core\event\user_graded',
+				'callback' => 'local_ws_rashim_observer::grades_export_handler' 
+		),
+		array (
+				'eventname' => '\core\event\course_deleted',
+				'callback' => 'local_ws_rashim_observer::course_deleted_handler' 
+		),
+		array (
+				'eventname' => '\core\event\course_module_deleted',
+				'callback' => 'local_ws_rashim_observer::course_module_deleted_handler'
+		)
+);
+
+?>
diff --git a/local/ws_rashim/db/install.xml b/local/ws_rashim/db/install.xml
new file mode 100755
index 0000000..162c339
--- /dev/null
+++ b/local/ws_rashim/db/install.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<XMLDB PATH="local/ws_rashim/db" VERSION="20161212.00" COMMENT="XMLDB file for Michlol syncronization services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="..../lib/xmldb/xmldb.xsd">
+	<TABLES>
+		<TABLE NAME="webservices_sessions" COMMENT="Stores web services session data" NEXT="meetings">
+			<FIELDS>
+				<FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="sessionbegin"/>
+				<FIELD NAME="sessionbegin" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="id" NEXT="sessionend"/>
+				<FIELD NAME="sessionend" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="sessionbegin" NEXT="sessionkey"/>
+				<FIELD NAME="sessionkey" TYPE="char" LENGTH="32" NOTNULL="true" SEQUENCE="false" PREVIOUS="sessionend" NEXT="userid"/>
+				<FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="sessionkey" NEXT="verified"/>
+				<FIELD NAME="verified" TYPE="int" LENGTH="1" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="userid" NEXT="ip"/>
+				<FIELD NAME="ip" TYPE="char" LENGTH="64" NOTNULL="true" SEQUENCE="false" PREVIOUS="verified" />
+			</FIELDS>
+			<KEYS>
+				<KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for webservices_sessions"/>
+			</KEYS>
+		</TABLE>
+		<TABLE NAME="meetings" COMMENT="Stores data to enable sorting meetings" PREVIOUS="webservices_sessions" NEXT="matalot">
+			<FIELDS>
+				<FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="snl"/>
+				<FIELD NAME="snl" TYPE="char" LENGTH="4" NOTNULL="true" SEQUENCE="false" PREVIOUS="id" NEXT="shl"/>
+				<FIELD NAME="shl" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="snl" NEXT="hit"/>
+				<FIELD NAME="hit" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="shl" NEXT="krs"/>
+				<FIELD NAME="krs" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="hit" NEXT="mfgs"/>
+				<FIELD NAME="mfgs" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="false" PREVIOUS="krs" NEXT="course_id"/>
+				<FIELD NAME="course_id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="mfgs" NEXT="section_num"/>
+				<FIELD NAME="section_num" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="course_id" NEXT="subject"/>
+				<FIELD NAME="subject" TYPE="char" LENGTH="256" NOTNULL="true" SEQUENCE="false" PREVIOUS="section_num" NEXT="week"/>
+				<FIELD NAME="week" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="subject" NEXT="day"/>
+				<FIELD NAME="day" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" PREVIOUS="week" NEXT="meeting_date"/>
+				<FIELD NAME="meeting_date" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" PREVIOUS="day" NEXT="hour_begin"/>
+				<FIELD NAME="hour_begin" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" PREVIOUS="meeting_date" NEXT="hour_end"/>
+				<FIELD NAME="hour_end" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" PREVIOUS="hour_begin"/>
+			</FIELDS>
+			<KEYS>
+				<KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for meetings"/>
+			</KEYS>
+		</TABLE>
+		<TABLE NAME="matalot" COMMENT="Stores data to link matalot to michlol" PREVIOUS="meetings">
+			<FIELDS>
+				<FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="course_id"/>
+				<FIELD NAME="course_id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="id" NEXT="michlol_krs_bhn_krs"/>
+				<FIELD NAME="michlol_krs_bhn_krs" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="course_id" NEXT="michlol_krs_bhn_sms"/>
+				<FIELD NAME="michlol_krs_bhn_sms" TYPE="char" LENGTH="1" NOTNULL="true" SEQUENCE="false" PREVIOUS="michlol_krs_bhn_krs" NEXT="michlol_krs_bhn_sid"/>
+				<FIELD NAME="michlol_krs_bhn_sid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="michlol_krs_bhn_sms" NEXT="moodle_type"/>
+				<FIELD NAME="moodle_type" TYPE="char" LENGTH="64" NOTNULL="true" SEQUENCE="false" PREVIOUS="michlol_krs_bhn_sid" NEXT="moodle_id"/>
+				<FIELD NAME="moodle_id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="moodle_type"/>
+			</FIELDS>
+			<KEYS>
+				<KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for matalot"/>
+			</KEYS>
+		</TABLE>
+	</TABLES>
+</XMLDB>
+
diff --git a/local/ws_rashim/index.php b/local/ws_rashim/index.php
new file mode 100644
index 0000000..2f505b2
--- /dev/null
+++ b/local/ws_rashim/index.php
@@ -0,0 +1,3 @@
+<?php
+
+echo "This is an internal WS, sorry! no access.";die;
diff --git a/local/ws_rashim/lang/en/local_ws_rashim.php b/local/ws_rashim/lang/en/local_ws_rashim.php
new file mode 100755
index 0000000..4c6c615
--- /dev/null
+++ b/local/ws_rashim/lang/en/local_ws_rashim.php
@@ -0,0 +1,38 @@
+<?php
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+$string ['pluginname'] = 'Synchronizer for Michlol';
+
+$string ['updateassignment'] = 'Update old assignments for Michlol';
+$string ['noassignments'] = 'No old assignemnts found';
+
+$string ['assignment'] = 'The assignment';
+$string ['course'] = 'in course';
+$string ['updated'] = 'updated.';
+
+$string ['michlolauth'] = 'Default authentication method for user created from Michlol';
+$string ['michlol_course_visible'] = 'Default state of course created from Michlol';
+$string ['def_city'] = 'Default city for user created from Michlol';
+$string ['def_country'] = 'Default country for user created from Michlol';
+
+$string ['michlol_api'] = 'Settings for Michlol API';
+$string ['michlolurl'] = 'URL to Michlol API';
+$string ['michloluser'] = 'User name';
+$string ['michlolpsw'] = 'Password';
+
+$string ['michlol_obsolate'] = 'Handle with extra care!';
+$string ['michlol_useid'] = 'Michlol uses ID instead of IDNUMBER';
+
+$string ['version'] = 'Version: ';
+
+$string ['eventprofilefieldmissing'] = 'Profile field missing';
+$string ['eventcategorycreated'] = 'Category created';
+$string ['eventcoursesectioncreated'] = 'Meeting created';
+$string ['eventcoursesectionupdated'] = 'Meeting updated';
+$string ['eventcoursesectiondeleted'] = 'Meeting deleted';
+$string ['eventcoursesectioncopied'] = 'Section copied';
+$string ['eventsessionended'] = 'Session ended';
+$string ['eventsessioncreated'] = 'Session created';
+$string ['eventcoursemoved'] = 'Course moved';
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/lang/he/local_ws_rashim.php b/local/ws_rashim/lang/he/local_ws_rashim.php
new file mode 100755
index 0000000..119e47c
--- /dev/null
+++ b/local/ws_rashim/lang/he/local_ws_rashim.php
@@ -0,0 +1,28 @@
+<?php
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+$string ['pluginname'] = 'סינכרון עבור מכלול';
+
+$string ['updateassignment'] = 'עדכן מטלות ישנות עבור מכלול';
+$string ['noassignments'] = 'לא נמצאו מטלות ישנות';
+
+$string ['assignment'] = 'המטלה';
+$string ['course'] = 'בקורס';
+$string ['updated'] = 'עודכן.';
+
+$string ['michlolauth'] = 'צורת הזדהות ברירת מחדל עברו משתמש הנוצר ממכלול';
+$string ['michlol_course_visible'] = 'סטטוס ברירת מחדל עבור קורס הנוצר ממכלול';
+$string ['def_city'] = 'עיר ברירת מחדל עבור משתמש הנוצר ממכלול';
+$string ['def_country'] = 'ארץ ברירת מחדל עבור משתמש הנוצר ממכלול';
+
+$string ['michlol_api'] = 'הגדרות עבור API של מכלול';
+$string ['michlolurl'] = 'כתובת';
+$string ['michloluser'] = 'משתמש';
+$string ['michlolpsw'] = 'סיסמא';
+
+$string ['michlol_obsolate'] = 'זהירות! סכנה!';
+$string ['michlol_useid'] = 'מכלול משתמש בשדה ID לצורך סינכרון';
+
+$string ['version'] = 'גירסא: ';
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/lib.php b/local/ws_rashim/lib.php
new file mode 100755
index 0000000..d90e542
--- /dev/null
+++ b/local/ws_rashim/lib.php
@@ -0,0 +1,2047 @@
+<?php
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+require_once (__DIR__ . '../../../course/lib.php');
+require_once (__DIR__ . '../../../course/format/lib.php');
+require_once (__DIR__ . '../../../course/modlib.php');
+require_once (__DIR__ . '../../../user/lib.php');
+require_once (__DIR__ . '../../../user/profile/lib.php');
+require_once (__DIR__ . '../../../group/lib.php');
+require_once (__DIR__ . '../../../mod/assign/lib.php');
+require_once (__DIR__ . '../../../mod/quiz/lib.php');
+require_once (__DIR__ . '../../../mod/url/lib.php');
+require_once (__DIR__ . '../../../lib/coursecatlib.php');
+require_once (__DIR__ . '../../../lib/moodlelib.php');
+
+class error_msg {
+	static $E5001 = 'Could not get validated client session.';
+	// static $E5002 = '';
+	// static $E5003 = '';
+	static $E5004 = 'Failed to close session.';
+	static $E5005 = 'Could not find session.';
+	static $E5006 = 'Access is denied.';
+	static $E5007 = 'Missing required fields.';
+	static $E5008 = 'Invalid username and / or password.';
+	static $E5009 = 'User cannot open more than one sessions.';
+	static $E5010 = 'Could not add user.';
+	static $E5011 = 'User does not exists.';
+	// static $E5012 = '';
+	// static $E5013 = '';
+	static $E5014 = 'Course does not exists.';
+	// static $E5015 = '';
+	// static $E5016 = '';
+	static $E5017 = 'Parent category does not exists.';
+	static $E5018 = 'Category does not exists.';
+	static $E5019 = 'Could not delete course.';
+	static $E5020 = 'Could not add category.';
+	// static $E5021 = '';
+	// static $E5022 = '';
+	// static $E5023 = '';
+	// static $E5024 = '';
+	// static $E5025 = '';
+	static $E5026 = 'Could not add/update syllabus.';
+	static $E5027 = 'Could not create group.';
+	static $E5028 = 'Could not create grouping.';
+	static $E5029 = 'Could not add group to grouping.';
+	static $E5030 = 'Could not add exam module.';
+	// static $E5031 = '';
+	static $E5032 = 'Exam does not exists.';
+	static $E5033 = 'Module does not exists.';
+	// static $E5034 = '';
+	static $E5035 = 'Could not create course section.';
+	static $E5036 = 'Course section does not exists.';
+	// static $E5037 = '';
+	// static $E5038 = '';
+	// static $E5039 = '';
+	// static $E5040 = '';
+	static $E5041 = 'Meeting does not exists.';
+	static $E5042 = 'Error reading XML.';
+	static $E5043 = 'Role does not exists.';
+	static $E5044 = 'Can not add user to group.';
+}
+
+class server {
+	protected $DB;
+	protected $CFG;
+	protected $config;
+	protected $local;
+	protected $admin;
+	protected $sessiontimeout = 1800;
+
+	public function __construct($local = false) {
+		global $DB;
+		global $CFG;
+		
+		$this->DB = $DB;
+		$this->CFG = $CFG;
+		$this->config = get_config ( 'local_ws_rashim' );
+		$this->local = $local;
+	}
+
+	public function server($local = false) {
+		self::__construct ( $local );
+	}
+
+	protected function error($err, $msg = '') {
+		if ($msg == '') {
+			$errno = 'E' . $err;
+			$msg = error_msg::$$errno;
+		}
+		
+		if ($this->local) {
+			$loc_err->err = $err;
+			$loc_err->msg = $msg;
+			
+			return $loc_err;
+		} else {
+			throw new SoapFault ( 'Server', "{$err}~{$msg}" );
+		}
+	}
+
+	protected function valid_login($session_key, $admin_name, $admin_psw) {
+		return $this->admin_login ( $admin_name, $admin_psw );
+	}
+
+	protected function admin_login($admin_name, $admin_psw) {
+		$conditions = array (
+				'username' => $admin_name 
+		);
+		if (! $admin = $this->DB->get_record ( 'user', $conditions )) {
+			return $this->error ( 5008 );
+		}
+		
+		// we do not use this function in the first place
+		// because the functon creates the user if does not exists!
+		$admin = authenticate_user_login ( $admin_name, $admin_psw );
+		
+		complete_user_login ( $admin );
+		
+		if (($admin === false) || ($admin && $admin->id == 0)) {
+			return $this->error ( 5008 );
+		} else {
+			if (! is_siteadmin ( $admin->id )) {
+				return $this->error ( 5006 );
+			} else {
+				$event = \local_ws_rashim\event\user_loggedin::create ( array (
+						'userid' => $admin->id,
+						'objectid' => $admin->id,
+						'other' => array (
+								'username' => $admin->username 
+						) 
+				) );
+				
+				$event->trigger ();
+				
+				$this->admin = $admin;
+				
+				return true;
+			}
+		}
+	}
+
+	protected function get_course_condition($course_id) {
+		if (isset ( $this->config->michlol_useid ) && $this->config->michlol_useid) {
+			return (array (
+					'id' => $course_id 
+			));
+		} else {
+			return (array (
+					'idnumber' => $course_id 
+			));
+		}
+	}
+
+	protected function user_unenroll($course, $user) {
+		$auth = 'manual';
+		
+		$manualenrol = enrol_get_plugin ( $auth );
+		$enrolinstance = $this->DB->get_record ( 'enrol', array (
+				'courseid' => $course,
+				'status' => ENROL_INSTANCE_ENABLED,
+				'enrol' => $auth 
+		), '*', MUST_EXIST );
+		$manualenrol->unenrol_user ( $enrolinstance, $user );
+		
+		$event = \local_ws_rashim\event\user_enrolment_deleted::create ( array (
+				'userid' => $this->admin->id,
+				'courseid' => $course,
+				'context' => context_course::instance ( $course ),
+				'relateduserid' => $user,
+				'objectid' => $user,
+				'other' => array (
+						'userenrolment' => '',
+						'enrol' => $auth 
+				) 
+		) );
+		
+		$event->trigger ();
+	}
+
+	protected function user_enroll($course, $user, $role) {
+		$auth = 'manual';
+		
+		$manualenrol = enrol_get_plugin ( $auth );
+		$enrolinstance = $this->DB->get_record ( 'enrol', array (
+				'courseid' => $course,
+				'status' => ENROL_INSTANCE_ENABLED,
+				'enrol' => $auth 
+		), '*', MUST_EXIST );
+		$manualenrol->enrol_user ( $enrolinstance, $user, $role );
+		
+		$event = \local_ws_rashim\event\user_enrolment_created::create ( array (
+				'userid' => $this->admin->id,
+				'courseid' => $course,
+				'relateduserid' => $user,
+				'objectid' => $user,
+				'context' => context_course::instance ( $course ),
+				'other' => array (
+						'enrol' => $auth 
+				) 
+		) );
+		
+		$event->trigger ();
+	}
+
+	protected function add_syllabus_url($course, $url) {
+		$conditions = array (
+				'course' => $course->id,
+				'name' => 'סילבוס' 
+		);
+		if (! $syl = $this->DB->get_record ( 'url', $conditions )) {
+			$syl = new stdClass ();
+			$syl->course = $course->id;
+			$syl->name = 'סילבוס';
+			$syl->intro = 'קישור לסילבוס במכלול';
+			$syl->introformat = 0;
+			$syl->externalurl = $url;
+			$syl->display = 0;
+			$syl->timemodified = time ();
+			
+			$syl->modulename = 'url';
+			$syl->module = $this->DB->get_field ( 'modules', 'id', array (
+					'name' => 'url' 
+			), MUST_EXIST );
+			$syl->section = 0;
+			$syl->visible = true;
+			
+			$module = add_moduleinfo ( $syl, $course );
+			$syl->id = $module->instance;
+			
+			if (empty ( $syl->id )) {
+				return $this->error ( 5026 );
+			}
+			
+			$event = \local_ws_rashim\event\course_module_created::create ( array (
+					'userid' => $this->admin->id,
+					'context' => context_course::instance ( $course->id ),
+					'objectid' => $module->id,
+					'other' => array (
+							'modulename' => 'url',
+							'instanceid' => $module->instance,
+							'name' => $module->name 
+					) 
+			) );
+			
+			$event->trigger ();
+		} else {
+			$conditions = array (
+					'course' => $course->id,
+					'instance' => $syl->id 
+			);
+			$cm = $this->DB->get_record ( 'course_modules', $conditions );
+			
+			if (empty ( $url )) {
+				course_delete_module ( $cm->id );
+				
+				$event = \local_ws_rashim\event\course_module_deleted::create ( array (
+						'userid' => $this->admin->id,
+						'courseid' => $cm->course,
+						'context' => context_course::instance ( $cm->course ),
+						'objectid' => $cm->id,
+						'other' => array (
+								'modulename' => 'url',
+								'instanceid' => $cm->instance 
+						) 
+				) );
+				
+				$event->trigger ();
+			} else {
+				$cm->modname = 'url';
+				
+				$syl->modulename = 'url';
+				$syl->coursemodule = $cm->id;
+				$syl->externalurl = $url;
+				$syl->introeditor ['text'] = 'קישור לסילבוס במכלול';
+				$syl->introeditor ['format'] = 0;
+				$syl->visible = true;
+				
+				update_moduleinfo ( $cm, $syl, $course );
+				
+				$event = \local_ws_rashim\event\course_module_updated::create ( array (
+						'userid' => $this->admin->id,
+						'context' => context_course::instance ( $cm->course ),
+						'objectid' => $cm->id,
+						'other' => array (
+								'modulename' => 'url',
+								'instanceid' => $cm->instance,
+								'name' => $cm->name 
+						) 
+				) );
+				
+				$event->trigger ();
+			}
+		}
+	}
+
+	protected function handle_course_section($course_id, $section_num, $section_name = null, $visible = 1) {
+		course_create_sections_if_missing ( $course_id, $section_num );
+		
+		$conditions = array (
+				'course' => $course_id,
+				'section' => $section_num 
+		);
+		$section = $this->DB->get_record ( 'course_sections', $conditions );
+		
+		if (empty ( $section->id )) {
+			return $this->error ( 5035 );
+		}
+		
+		$section->name = $section_name;
+		$section->visible = $visible;
+		
+		// pre 3.1 hack
+		if (function_exists ( 'course_update_section' )) {
+			course_update_section ( $course_id, $section );
+		} else {
+			$this->DB->update_record ( 'course_sections', $section );
+			rebuild_course_cache ( $course_id, true );
+		}
+		
+		$event = \local_ws_rashim\event\course_section_updated::create ( array (
+				'userid' => $this->admin->id,
+				'courseid' => $course_id,
+				'context' => context_course::instance ( $course_id ),
+				'objectid' => $section->id,
+				'other' => array (
+						'sectionnum' => $section->section 
+				) 
+		) );
+		
+		$event->trigger ();
+		
+		return ($section->id);
+	}
+
+	protected function user_extra($user, $extra) {
+		$save = false;
+		
+		$arr1 = explode ( ';', $extra );
+		
+		$profile = profile_user_record ( null, false );
+		
+		foreach ( $arr1 as $key1 => $value1 ) {
+			$arr2 = explode ( '=', $value1 );
+			
+			$field = $arr2 [0];
+			$value = $arr2 [1];
+			
+			if (! empty ( $field )) {
+				if (property_exists ( $profile, $field )) {
+					$user->{'profile_field_' . $field} = $value;
+					
+					$save = true;
+				} else {
+					$event = \local_ws_rashim\event\user_profile_field_missing::create ( array (
+							'userid' => $this->admin->id,
+							'objectid' => $user->id,
+							'relateduserid' => $user->id,
+							'context' => context_user::instance ( $user->id ),
+							'other' => array (
+									'field' => $field 
+							) 
+					) );
+					
+					$event->trigger ();
+				}
+			}
+		}
+		
+		if ($save) {
+			profile_save_data ( $user );
+		}
+	}
+
+	protected function update_assignment($course, $bhn, $bhn_shm, $moodle_type, $start, $end) {
+		if ($moodle_type == 'quiz') {
+			$bhn->timeopen = $start == 0 ? 0 : $start;
+			$bhn->timeclose = $end == 0 ? 0 : $end;
+			
+			$bhn->quizpassword = '';
+		} else if ($moodle_type == 'assign') {
+			if ($bhn->name == $bhn->description) {
+				$bhn->description = $bhn_shm;
+			}
+			
+			$bhn->duedate = $start == 0 ? 0 : $start;
+			$bhn->cutoffdate = $end == 0 ? 0 : $end;
+			
+			$plugins = $this->DB->get_records ( 'assign_plugin_config', array (
+					'assignment' => $bhn->id 
+			) );
+			
+			foreach ( $plugins as $key => $value ) {
+				if (isset ( $value->value )) {
+					if ($value->plugin == 'file') {
+						if ($value->name == 'maxfilesubmissions')
+							$value->name = 'maxfiles';
+						if ($value->name == 'maxsubmissionsizebytes')
+							$value->name = 'maxsizebytes';
+					}
+					
+					$bhn->{$value->subtype . '_' . $value->plugin . '_' . $value->name } = $value->value;
+				}
+			}
+		}
+		
+		$conditions = array (
+				'course' => $course->id,
+				'instance' => $bhn->id 
+		);
+		$cm = $this->DB->get_record ( 'course_modules', $conditions );
+		
+		$cm->modname = $moodle_type;
+		
+		$bhn->name = $bhn_shm;
+		
+		$bhn->modulename = $moodle_type;
+		$bhn->coursemodule = $cm->id;
+		$bhn->introeditor ['text'] = $bhn->intro;
+		$bhn->introeditor ['format'] = 0;
+		$bhn->visible = $cm->visible;
+		
+		$rv = update_moduleinfo ( $cm, $bhn, $course );
+		$moduleinfo = $rv [1];
+		
+		$event = \local_ws_rashim\event\course_module_updated::create ( array (
+				'userid' => $this->admin->id,
+				'courseid' => $course->id,
+				'context' => context_course::instance ( $course->id ),
+				'objectid' => $moduleinfo->id,
+				'other' => array (
+						'modulename' => $bhn->modulename,
+						'instanceid' => $moduleinfo->instance,
+						'name' => $bhn->name 
+				) 
+		) );
+		
+		$event->trigger ();
+		
+		return $moduleinfo;
+	}
+
+	protected function add_assignment($course_id, $section_num, $bhn_shm, $michlol_krs, $michlol_sms, $michlol_sid, $moodle_type, $start, $end) {
+		// quiz - b
+		// assignment/online - m
+		// assignment/offline - t
+		// assignment/upload - k
+		$course = $this->DB->get_record ( 'course', array (
+				'id' => $course_id 
+		) );
+		
+		$conditions = array (
+				'course_id' => $course_id,
+				'michlol_krs_bhn_krs' => $michlol_krs,
+				'michlol_krs_bhn_sms' => $michlol_sms,
+				'michlol_krs_bhn_sid' => $michlol_sid 
+		);
+		if (! $matala = $this->DB->get_record ( 'matalot', $conditions )) {
+			$bhn = new stdClass ();
+			
+			if ($moodle_type == 'b') {
+				$bhn->modulename = 'quiz';
+				
+				$bhn->timeopen = $start == 0 ? 0 : $start;
+				$bhn->timeclose = $end == 0 ? 0 : $end;
+				
+				$bhn->quizpassword = '';
+				$bhn->preferredbehaviour = 'deferredfeedback';
+				$bhn->shuffleanswers = true;
+			} else if (($moodle_type == 'm') || ($moodle_type == 't') || ($moodle_type == 'k')) {
+				$bhn->modulename = 'assign';
+				
+				$bhn->duedate = $start == 0 ? 0 : $start;
+				$bhn->cutoffdate = $end == 0 ? 0 : $end;
+				
+				if ($moodle_type == 'm') {
+					$bhn->assignsubmission_onlinetext_enabled = true;
+				}
+				
+				if ($moodle_type == 'k') {
+					$bhn->assignsubmission_file_maxfiles = 3;
+					$bhn->assignsubmission_file_enabled = true;
+				}
+				
+				$bhn->submissiondrafts = 0;
+				$bhn->requiresubmissionstatement = 0;
+				$bhn->sendnotifications = 0;
+				$bhn->sendlatenotifications = 0;
+				$bhn->allowsubmissionsfromdate = 0;
+				$bhn->teamsubmission = 0;
+				$bhn->requireallteammemberssubmit = 0;
+				$bhn->blindmarking = 0;
+				$bhn->markingworkflow = 0;
+			}
+			
+			$bhn->course = $course_id;
+			$bhn->name = $bhn_shm;
+			$bhn->intro = 'מטלה נוצרה ממכלול';
+			$bhn->introformat = 0;
+			
+			$bhn->module = $this->DB->get_field ( 'modules', 'id', array (
+					'name' => $bhn->modulename 
+			), MUST_EXIST );
+			;
+			$bhn->visible = 0;
+			$bhn->section = $section_num;
+			$bhn->grade = 100;
+			
+			$moduleinfo = add_moduleinfo ( $bhn, $course );
+			
+			if (empty ( $moduleinfo->instance )) {
+				return $this->error ( 5030 );
+			}
+			
+			$matala = new stdClass ();
+			$matala->course_id = $course_id;
+			$matala->michlol_krs_bhn_krs = $michlol_krs;
+			$matala->michlol_krs_bhn_sms = $michlol_sms;
+			$matala->michlol_krs_bhn_sid = $michlol_sid;
+			$matala->moodle_type = $bhn->modulename;
+			$matala->moodle_id = $moduleinfo->instance;
+			
+			$this->DB->insert_record ( 'matalot', $matala );
+			
+			$event = \local_ws_rashim\event\course_module_created::create ( array (
+					'userid' => $this->admin->id,
+					'courseid' => $matala->course_id,
+					'context' => context_course::instance ( $matala->course_id ),
+					'objectid' => $moduleinfo->id,
+					'other' => array (
+							'modulename' => $bhn->modulename,
+							'instanceid' => $moduleinfo->instance,
+							'name' => $bhn->name 
+					) 
+			) );
+			
+			$event->trigger ();
+			
+			return $moduleinfo;
+		} else {
+			$conditions = array (
+					'id' => $matala->moodle_id 
+			);
+			if ($bhn = $this->DB->get_record ( $matala->moodle_type, $conditions )) {
+				return $this->update_assignment ( $course, $bhn, $bhn_shm, $matala->moodle_type, $start, $end );
+			}
+		}
+	}
+
+	protected function add_assignment_link($course_id, $section_num, $bhn_shm, $michlol_krs, $michlol_sms, $michlol_sid, $moodle_type, $start, $end) {
+		// quiz - b
+		// assignment/online - m
+		// assignment/offline - t
+		// assignment/upload - k
+		$course = $this->DB->get_record ( 'course', array (
+				'id' => $course_id 
+		) );
+		
+		if ($moodle_type == 'b') {
+			$type = 'quiz';
+		} else if (($moodle_type == 'm') || ($moodle_type == 't') || ($moodle_type == 'k')) {
+			$type = 'assign';
+		}
+		
+		$conditions = array (
+				'course_id' => $course_id,
+				'michlol_krs_bhn_krs' => $michlol_krs,
+				'michlol_krs_bhn_sms' => $michlol_sms,
+				'michlol_krs_bhn_sid' => $michlol_sid 
+		);
+		if (! $matala = $this->DB->get_record ( 'matalot', $conditions )) {
+			$conditions = array (
+					'course' => $course_id,
+					'section' => $section_num 
+			);
+			if (! $section = $this->DB->get_record ( 'course_sections', $conditions )) {
+				return $this->error ( 5036 );
+			}
+			
+			$conditions = array (
+					'course' => $course_id,
+					'section' => $section->id,
+					'module' => $this->DB->get_field ( 'modules', 'id', array (
+							'name' => $type 
+					), MUST_EXIST ) 
+			);
+			if (! $module = $this->DB->get_record ( 'course_modules', $conditions )) {
+				return $this->error ( 5033 );
+			}
+			
+			$conditions = array (
+					'course' => $course_id,
+					'id' => $module->instance 
+			);
+			$bhn = $this->DB->get_record ( $type, $conditions );
+			
+			if (empty ( $bhn->id )) {
+				return $this->error ( 5030 );
+			}
+			
+			$this->update_assignment ( $course, $bhn, $bhn_shm, $type, $start, $end );
+			
+			$matala->course_id = $course_id;
+			$matala->michlol_krs_bhn_krs = $michlol_krs;
+			$matala->michlol_krs_bhn_sms = $michlol_sms;
+			$matala->michlol_krs_bhn_sid = $michlol_sid;
+			$matala->moodle_type = $type;
+			$matala->moodle_id = $bhn->id;
+			
+			$this->DB->insert_record ( 'matalot', $matala );
+		} else {
+			$conditions = array (
+					'id' => $matala->moodle_id 
+			);
+			$bhn = $this->DB->get_record ( $matala->moodle_type, $conditions );
+			
+			if (empty ( $bhn->id )) {
+				return $this->error ( 5030 );
+			}
+			
+			$this->update_assignment ( $course, $bhn, $bhn_shm, $matala->moodle_type, $start, $end );
+		}
+	}
+
+	protected function xml2meetings($course_id, $xml) {
+		$section_num = 1;
+		
+		foreach ( $xml->MEETINGS->children () as $meeting ) {
+			if (! isset ( $meeting->WEEK )) {
+				$meeting->WEEK = - 1;
+			}
+			
+			if (! isset ( $meeting->DAY )) {
+				$meeting->DAY = - 1;
+			}
+			
+			if (! isset ( $meeting->MEETING_DATE )) {
+				$meeting->MEETING_DATE = - 1;
+			}
+			
+			$conditions = array (
+					'snl' => ( string ) $xml->DATA->SNL,
+					'shl' => ( integer ) $xml->DATA->SHL,
+					'hit' => ( integer ) $xml->DATA->MIS,
+					'krs' => ( integer ) $meeting->MIS,
+					'mfgs' => ( integer ) $meeting->SID 
+			);
+			if (! $meeting_old = $this->DB->get_record ( 'meetings', $conditions )) {
+				$section = $this->handle_course_section ( $course_id, $section_num, ( string ) $meeting->SHM );
+				
+				// write record to the help table anable sorting
+				$meeting_new->snl = ( string ) $xml->DATA->SNL;
+				$meeting_new->shl = ( integer ) $xml->DATA->SHL;
+				$meeting_new->hit = ( integer ) $xml->DATA->MIS;
+				$meeting_new->krs = ( integer ) $meeting->MIS;
+				$meeting_new->mfgs = ( integer ) $meeting->SID;
+				
+				$meeting_new->course_id = $course_id;
+				$meeting_new->section_num = $section_num;
+				
+				$meeting_new->subject = ( string ) $meeting->SUB;
+				$meeting_new->week = ( integer ) $meeting->WEEK;
+				$meeting_new->day = ( integer ) $meeting->DAY;
+				$meeting_new->meeting_date = ( integer ) $meeting->MEETING_DATE;
+				$meeting_new->hour_begin = ( integer ) $meeting->BEGIN;
+				$meeting_new->hour_end = ( integer ) $meeting->END;
+				
+				$this->DB->insert_record ( 'meetings', $meeting_new );
+				
+				$section_num ++;
+				
+				$event = \local_ws_rashim\event\meeting_created::create ( array (
+						'userid' => $this->admin->id,
+						'objectid' => $section,
+						'courseid' => $meeting_new->course_id,
+						'context' => context_course::instance ( $meeting_new->course_id ),
+						'other' => array (
+								'sectionnum' => $meeting_new->section_num 
+						) 
+				) );
+				
+				$event->trigger ();
+			} else {
+				$meeting_old->subject = ( string ) $meeting->SUB;
+				$meeting_old->week = ( integer ) $meeting->WEEK;
+				$meeting_old->day = ( integer ) $meeting->DAY;
+				$meeting_old->meeting_date = ( integer ) $meeting->MEETING_DATE;
+				$meeting_old->hour_begin = ( integer ) $meeting->BEGIN;
+				$meeting_old->hour_end = ( integer ) $meeting->END;
+				
+				$this->DB->update_record ( 'meetings', $meeting_old );
+				
+				$section_conditions = array (
+						'course' => $meeting_old->course_id,
+						'section' => $meeting_old->section_num 
+				);
+				
+				if (! $section = $this->DB->get_record ( 'course_sections', $section_conditions )) {
+					return $this->error ( 5036 );
+				}
+				
+				$this->handle_course_section ( $meeting_old->course_id, $meeting_old->section_num, ( string ) $meeting->SHM );
+				
+				$event = \local_ws_rashim\event\meeting_updated::create ( array (
+						'userid' => $this->admin->id,
+						'objectid' => $section->id,
+						'courseid' => $meeting_old->course_id,
+						'context' => context_course::instance ( $meeting_old->course_id ),
+						'other' => array (
+								'sectionnum' => $meeting_old->section_num 
+						) 
+				) );
+				
+				$event->trigger ();
+				
+				$section_num = $meeting_old->section_num + 1;
+			}
+		}
+		
+		course_get_format ( $course_id )->update_course_format_options ( array (
+				'numsections' => $section_num - 1 
+		) );
+	}
+
+	protected function xml2assignments($course_id, $xml) {
+		foreach ( $xml->ASSIGNMENTS->children () as $assignment ) {
+			if (( integer ) $assignment->ORG_KRS != - 1) {
+				$this->xml2assignments_modula ( $course_id, $assignment );
+			} else {
+				$conditions = array (
+						'snl' => ( string ) $xml->DATA->SNL,
+						'shl' => ( integer ) $xml->DATA->SHL,
+						'hit' => ( integer ) $xml->DATA->MIS,
+						'krs' => ( integer ) $assignment->MIS,
+						'mfgs' => ( integer ) $assignment->SID 
+				);
+				if (! $meeting = $this->DB->get_record ( 'meetings', $conditions )) {
+					return $this->error ( 5041 );
+				}
+				
+				if ($meeting->meeting_date == - 1) {
+					$this->add_assignment ( $course_id, $meeting->section_num, ( string ) $assignment->BHN_SHM, ( integer ) $assignment->BHN_KRS, ( string ) $assignment->BHN_SMS, ( integer ) $assignment->BHN_SID, ( string ) $assignment->BHN_MOODLETYPE, 0, 0 );
+				} else {
+					$this->add_assignment ( $course_id, $meeting->section_num, ( string ) $assignment->BHN_SHM, ( integer ) $assignment->BHN_KRS, ( string ) $assignment->BHN_SMS, ( integer ) $assignment->BHN_SID, ( string ) $assignment->BHN_MOODLETYPE, $meeting->meeting_date + $meeting->hour_begin, $meeting->meeting_date + $meeting->hour_end );
+				}
+			}
+		}
+	}
+
+	protected function xml2assignments_link($course_id, $xml) {
+		foreach ( $xml->ASSIGNMENTS->children () as $assignment ) {
+			if (( integer ) $assignment->ORG_KRS != - 1) {
+				$this->xml2assignments_modula ( $course_id, $assignment );
+			} else {
+				$conditions = array (
+						'snl' => ( string ) $xml->DATA->SNL,
+						'shl' => ( integer ) $xml->DATA->SHL,
+						'hit' => ( integer ) $xml->DATA->MIS,
+						'krs' => ( integer ) $assignment->MIS,
+						'mfgs' => ( integer ) $assignment->SID 
+				);
+				if (! $meeting = $this->DB->get_record ( 'meetings', $conditions )) {
+					return $this->error ( 5041 );
+				}
+				
+				if ($meeting->meeting_date == - 1) {
+					$this->add_assignment_link ( $course_id, $meeting->section_num, ( string ) $assignment->BHN_SHM, ( integer ) $assignment->BHN_KRS, ( string ) $assignment->BHN_SMS, ( integer ) $assignment->BHN_SID, ( string ) $assignment->BHN_MOODLETYPE, 0, 0 );
+				} else {
+					$this->add_assignment_link ( $course_id, $meeting->section_num, ( string ) $assignment->BHN_SHM, ( integer ) $assignment->BHN_KRS, ( string ) $assignment->BHN_SMS, ( integer ) $assignment->BHN_SID, ( string ) $assignment->BHN_MOODLETYPE, $meeting->meeting_date + $meeting->hour_begin, $meeting->meeting_date + $meeting->hour_end );
+				}
+			}
+		}
+	}
+
+	protected function xml2assignments_modula($course_id, $assignment) {
+		$conditions = array (
+				'krs' => ( integer ) $assignment->MIS,
+				'mfgs' => ( integer ) $assignment->SID,
+				'course_id' => $course_id 
+		);
+		if (! $mfgs = $this->DB->get_record ( 'meetings', $conditions )) {
+			return $this->error ( 5041 );
+		} else {
+			$conditions = array (
+					'course' => $course_id,
+					'section' => $mfgs->section_num 
+			);
+			if (! $dest_sec = $this->DB->get_record ( 'course_sections', $conditions )) {
+				return $this->error ( 5036 );
+			} else {
+				$conditions = array (
+						'michlol_krs_bhn_krs' => ( integer ) $assignment->ORG_KRS,
+						'michlol_krs_bhn_sms' => ( string ) $assignment->ORG_SMS,
+						'michlol_krs_bhn_sid' => ( integer ) $assignment->ORG_SID 
+				);
+				if (! $bhn = $this->DB->get_record ( 'matalot', $conditions )) {
+					return $this->error ( 5032 );
+				} else {
+					$conditions = array (
+							'course' => $bhn->course_id,
+							'instance' => $bhn->moodle_id 
+					);
+					if (! $module = $this->DB->get_record ( 'course_modules', $conditions )) {
+						return $this->error ( 5033 );
+					} else {
+						$this->copy_section ( $module->section, $dest_sec->id );
+						
+						$conditions = array (
+								'course' => $course_id,
+								'section' => $dest_sec->id 
+						);
+						if (! $module = $this->DB->get_record ( 'course_modules', $conditions )) {
+							return $this->error ( 5033 );
+						} else {
+							$this->add_assignment_link ( $course_id, $mfgs->section_num, ( string ) $assignment->BHN_SHM, ( integer ) $assignment->BHN_KRS, ( string ) $assignment->BHN_SMS, ( integer ) $assignment->BHN_SID, ( string ) $assignment->BHN_MOODLETYPE );
+						}
+					}
+				}
+			}
+		}
+	}
+
+	protected function add_user($user_id, $user_name, $user_psw, $user_firstname, $user_lastname, $user_email, $user_phone1, $user_phone2, $user_address, $user_lang, $user_extra) {
+		$conditions = array (
+				'idnumber' => $user_id 
+		);
+		if (! $user = $this->DB->get_record ( 'user', $conditions )) {
+			if (! isset ( $user_name ) || ! isset ( $user_psw ) || ! isset ( $user_id ) || ! isset ( $user_firstname ) || ! isset ( $user_lastname )) {
+				return $this->error ( 5007 );
+			}
+			
+			$user->confirmed = true;
+			$user->mnethostid = $this->CFG->mnet_localhost_id;
+			
+			if (isset ( $user_lang )) {
+				$user->lang = $user_lang;
+			}
+			
+			$user->password = $user_psw;
+			
+			$user->idnumber = $user_id;
+			$user->username = $user_name;
+			$user->firstname = $user_firstname;
+			$user->lastname = $user_lastname;
+			$user->email = isset ( $user_email ) ? $user_email : '';
+			$user->phone1 = isset ( $user_phone1 ) ? $user_phone1 : '';
+			$user->phone2 = isset ( $user_phone2 ) ? $user_phone2 : '';
+			$user->address = $user_address;
+			
+			if (isset ( $this->config->michlolauth )) {
+				$user->auth = $this->config->michlolauth;
+			}
+			
+			if (isset ( $this->config->def_city )) {
+				$user->city = $this->config->def_city;
+			}
+			
+			if (isset ( $this->config->def_country )) {
+				$user->country = $this->config->def_country;
+			}
+			
+			$user->id = user_create_user ( $user );
+			
+			if (empty ( $user->id )) {
+				return $this->error ( 5010 );
+			}
+			
+			$event = \local_ws_rashim\event\user_created::create ( array (
+					'userid' => $this->admin->id,
+					'objectid' => $user->id,
+					'context' => context_user::instance ( $user->id ),
+					'relateduserid' => $user->id 
+			) );
+			
+			$event->trigger ();
+		} else {
+			if (! isset ( $user_id )) {
+				return $this->error ( 5007 );
+			}
+			
+			$user->password = $user_psw;
+			
+			$user->username = $user_name;
+			$user->firstname = $user_firstname;
+			$user->lastname = $user_lastname;
+			$user->email = isset ( $user_email ) ? $user_email : '';
+			$user->phone1 = isset ( $user_phone1 ) ? $user_phone1 : '';
+			$user->phone2 = isset ( $user_phone2 ) ? $user_phone2 : '';
+			$user->address = $user_address;
+			
+			user_update_user ( $user );
+			
+			$event = \local_ws_rashim\event\user_updated::create ( array (
+					'userid' => $this->admin->id,
+					'objectid' => $user->id,
+					'context' => context_user::instance ( $user->id ),
+					'relateduserid' => $user->id 
+			) );
+			
+			$event->trigger ();
+		}
+		
+		$this->user_extra ( $user, $user_extra );
+		
+		return $user;
+	}
+
+	protected function category_add($category_parent, $category_code, $category_name) {
+		$category->visible = true;
+		$category->timemodified = time ();
+		$category->name = $category_name;
+		$category->parent = $category_parent;
+		$category->idnumber = $category_code;
+		
+		$coursecat = coursecat::create ( $category );
+		
+		$category->id = $coursecat->id;
+		
+		if (empty ( $category->id )) {
+			return $this->error ( 5020 );
+		} else {
+			$event = \local_ws_rashim\event\category_created::create ( array (
+					'userid' => $this->admin->id,
+					'objectid' => $category->id 
+			) );
+			
+			$event->trigger ();
+			
+			return $category->id;
+		}
+	}
+
+	protected function category_tree($category_snlcode, $category_snlname, $category_shlcode, $category_shlname, $category_mslcode, $category_mslname) {
+		$conditions = array (
+				'idnumber' => $category_snlcode 
+		);
+		if (! ($category_snl = $this->DB->get_record ( 'course_categories', $conditions ))) {
+			$conditions = array (
+					'name' => $category_snlname 
+			);
+			$category_snl = $this->DB->get_record ( 'course_categories', $conditions );
+		}
+		
+		if ($category_snl != null) {
+			$conditions = array (
+					'idnumber' => $category_shlcode 
+			);
+			if (! ($category_shl = $this->DB->get_record ( 'course_categories', $conditions ))) {
+				$conditions = array (
+						'name' => $category_shlname,
+						'parent' => $category_snl->id 
+				);
+				$category_shl = $this->DB->get_record ( 'course_categories', $conditions );
+			}
+			
+			if ($category_shl != null) {
+				$conditions = array (
+						'idnumber' => $category_mslcode 
+				);
+				if (! ($category_msl = $this->DB->get_record ( 'course_categories', $conditions ))) {
+					$conditions = array (
+							'name' => $category_mslname,
+							'parent' => $category_shl->id 
+					);
+					$category_msl = $this->DB->get_record ( 'course_categories', $conditions );
+				}
+			}
+		}
+		
+		if ($category_msl == null) {
+			if ($category_shl == null) {
+				if ($category_snl == null) {
+					$category_snl->id = $this->category_add ( 0, $category_snlcode, $category_snlname );
+				}
+				
+				$category_shl->id = $this->category_add ( $category_snl->id, $category_shlcode, $category_shlname );
+			}
+			
+			if ($category_mslcode != - 1) {
+				$category_msl->id = $this->category_add ( $category_shl->id, $category_mslcode, $category_mslname );
+			}
+		}
+		
+		if ($category_mslcode != - 1) {
+			return $category_msl->id;
+		} else {
+			return $category_shl->id;
+		}
+	}
+
+	protected function copy_course_section($src, $dest) {
+		$conditions = array (
+				'course_id' => $src 
+		);
+		$tikyesod = $this->DB->get_records ( 'meetings', $conditions, 'krs, mfgs' );
+		
+		$conditions = array (
+				'course_id' => $dest 
+		);
+		$machzor = $this->DB->get_records ( 'meetings', $conditions, 'krs, mfgs' );
+		
+		foreach ( $tikyesod as $t_mfgs ) {
+			foreach ( $machzor as $m_mfgs ) {
+				if (($m_mfgs->krs == $t_mfgs->krs) && ($m_mfgs->mfgs == $t_mfgs->mfgs)) {
+					$conditions = array (
+							'course' => $t_mfgs->course_id,
+							'section' => $t_mfgs->section_num 
+					);
+					$src_sec = $this->DB->get_record ( 'course_sections', $conditions );
+					
+					$conditions = array (
+							'course' => $m_mfgs->course_id,
+							'section' => $m_mfgs->section_num 
+					);
+					$dest_sec = $this->DB->get_record ( 'course_sections', $conditions );
+					
+					$this->copy_section ( $src_sec->id, $dest_sec->id );
+				}
+			}
+		}
+	}
+
+	protected function copy_course_section_tik($xml) {
+		foreach ( $xml->MEETINGS->children () as $meeting ) {
+			$conditions = array (
+					'snl' => '9999',
+					'shl' => ( integer ) $xml->DATA->SHL,
+					'hit' => ( integer ) $xml->DATA->PREV_VERSION,
+					'krs' => ( integer ) $meeting->PREV_VERSION,
+					'mfgs' => ( integer ) $meeting->SID 
+			);
+			if ($src = $this->DB->get_record ( 'meetings', $conditions )) {
+				$conditions = array (
+						'snl' => '9999',
+						'shl' => ( integer ) $xml->DATA->SHL,
+						'hit' => ( integer ) $xml->DATA->MIS,
+						'krs' => ( integer ) $meeting->MIS,
+						'mfgs' => ( integer ) $meeting->SID 
+				);
+				if ($dest = $this->DB->get_record ( 'meetings', $conditions )) {
+					$conditions = array (
+							'course' => $src->course_id,
+							'section' => $src->section_num 
+					);
+					$src_sec = $this->DB->get_record ( 'course_sections', $conditions );
+					
+					$conditions = array (
+							'course' => $dest->course_id,
+							'section' => $dest->section_num 
+					);
+					$dest_sec = $this->DB->get_record ( 'course_sections', $conditions );
+					
+					$this->copy_section ( $src_sec->id, $dest_sec->id );
+				}
+			}
+		}
+	}
+
+	protected function copy_section($src, $dest) {
+		$conditions = array (
+				'id' => $src 
+		);
+		if ($section_src = $this->DB->get_record ( 'course_sections', $conditions )) {
+			$conditions = array (
+					'id' => $dest 
+			);
+			if ($section_dest = $this->DB->get_record ( 'course_sections', $conditions )) {
+				$conditions = array (
+						'id' => $section_src->course 
+				);
+				$course_src = $this->DB->get_record ( 'course', $conditions );
+				
+				$conditions = array (
+						'id' => $section_dest->course 
+				);
+				$course_dest = $this->DB->get_record ( 'course', $conditions );
+				
+				$conditions = array (
+						'section' => $src 
+				);
+				if ($modules = $this->DB->get_records ( 'course_modules', $conditions )) {
+					foreach ( $modules as $module ) {
+						$module->modname = $this->DB->get_field ( 'modules', 'name', array (
+								'id' => $module->module 
+						), MUST_EXIST );
+						
+						$module_new = duplicate_module ( $course_dest, $module );
+						
+						delete_mod_from_section ( $module_new->id, $src );
+						
+						course_add_cm_to_section ( $course_dest->id, $module_new->id, $section_dest->section );
+						
+						$event = \local_ws_rashim\event\course_section_copied::create ( array (
+								'userid' => $this->admin->id,
+								'courseid' => $section_dest->course,
+								'objectid' => $section_dest->id,
+								'context' => context_course::instance ( $section_dest->course ),
+								'other' => array (
+										'sectionnum' => $section_dest->section,
+										'old_moduleid' => $module->id,
+										'old_sectionid' => $src,
+										'new_moduleid' => $module_new->id,
+										'new_sectionid' => $dest 
+								) 
+						) );
+						
+						$event->trigger ();
+					}
+				}
+			}
+		}
+	}
+
+	public function session_login($admin_name, $admin_psw) {
+		return md5 ( ( string ) time () ^ ( string ) random_string ( 10 ) );
+	}
+
+	public function session_logout($session_key) {
+		return true;
+	}
+
+	public function course_add($admin_name, $admin_psw, $session_key, $course_id, $course_psw, $course_name, $course_shortname, $course_sylurl, $category_code, $category_snlcode, $category_snlname, $category_shlcode, $category_shlname, $category_mslcode, $category_mslname) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			if (! isset ( $category_code )) {
+				$category_code = $this->category_tree ( $category_snlcode, $category_snlname, $category_shlcode, $category_shlname, $category_mslcode, $category_mslname );
+			}
+			
+			$conditions = $this->get_course_condition ( $course_id );
+			if (! $course = $this->DB->get_record ( 'course', $conditions )) {
+				if (isset ( $this->config->michlol_useid ) && $this->config->michlol_useid) {
+					return $this->error ( 5014 );
+				}
+				
+				if (! isset ( $course_name ) || ! isset ( $course_id )) {
+					return $this->error ( 5007 );
+				}
+				
+				$course->idnumber = $course_id;
+				$course->fullname = $course_name;
+				$course->shortname = $course_shortname;
+				$course->category = $category_code;
+				$course->startdate = time ();
+				
+				$course->password = md5 ( $course_psw );
+				
+				$courseconfig = get_config ( 'moodlecourse' );
+				foreach ( $courseconfig as $key => $value ) {
+					$course->$key = $value;
+				}
+				
+				if (isset ( $this->config->michlol_course_visible )) {
+					$course->visible = ( int ) $this->config->michlol_course_visible;
+				}
+				
+				$course = create_course ( $course );
+				
+				$event = \local_ws_rashim\event\course_created::create ( array (
+						'userid' => $this->admin->id,
+						'courseid' => $course->id,
+						'context' => context_course::instance ( $course->id ),
+						'objectid' => $course->id,
+						'other' => array (
+								'fullname' => $course->fullname 
+						) 
+				) );
+				
+				$event->trigger ();
+			} else {
+				if (! isset ( $course_id )) {
+					return $this->error ( 5007 );
+				}
+				
+				$course->idnumber = $course_id;
+				$course->fullname = $course_name;
+				$course->shortname = $course_shortname;
+				$course->category = $category_code;
+				
+				$course->password = md5 ( $course_psw );
+				
+				update_course ( $course );
+				
+				$event = \local_ws_rashim\event\course_updated::create ( array (
+						'userid' => $this->admin->id,
+						'courseid' => $course->id,
+						'context' => context_course::instance ( $course->id ),
+						'objectid' => $course->id 
+				) );
+				
+				$event->trigger ();
+			}
+			
+			$this->add_syllabus_url ( $course, $course_sylurl );
+			
+			return true;
+		}
+	}
+
+	public function course_delete($admin_name, $admin_psw, $course_id, $nodelete) {
+		if ($this->admin_login ( $admin_name, $admin_psw )) {
+			if (empty ( $course_id )) {
+				return $this->error ( 5007 );
+			}
+			
+			$conditions = $this->get_course_condition ( $course_id );
+			if ($course = $this->DB->get_record ( 'course', $conditions )) {
+				$context = context_course::instance ( $course->id );
+				
+				if ($nodelete) {
+					$course->visible = 0;
+					
+					update_course ( $course );
+				} else {
+					if (! delete_course ( $course, false )) {
+						return $this->error ( 5019 );
+					}
+				}
+			}
+			
+			$event = \local_ws_rashim\event\course_deleted::create ( array (
+					'userid' => $this->admin->id,
+					'courseid' => $course->id,
+					'context' => $context,
+					'objectid' => $course->id,
+					'other' => array (
+							'fullname' => $course->fullname,
+							'nodelete' => $nodelete 
+					) 
+			) );
+			
+			$event->trigger ();
+			
+			return true;
+		}
+	}
+
+	public function user_add($admin_name, $admin_psw, $session_key, $user_id, $user_name, $user_psw, $user_firstname, $user_lastname, $user_email, $user_phone1, $user_phone2, $user_address, $user_lang, $user_extra, $course_id, $course_role, $group_id, $group_name) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			$user = $this->add_user ( $user_id, $user_name, $user_psw, $user_firstname, $user_lastname, $user_email, $user_phone1, $user_phone2, $user_address, $user_lang, $user_extra );
+			
+			if (isset ( $course_id )) {
+				$conditions = $this->get_course_condition ( $course_id );
+				if (! $course = $this->DB->get_record ( 'course', $conditions )) {
+					return $this->error ( 5014 );
+				}
+				
+				if (isset ( $course_role )) {
+					$conditions = array (
+							'shortname' => $course_role 
+					);
+					if (! $role = $this->DB->get_record ( 'role', $conditions )) {
+						return $this->error ( 5043 );
+					}
+					
+					$this->user_enroll ( $course->id, $user->id, $role->id );
+				}
+				
+				if (isset ( $group_id ) && isset ( $group_name )) {
+					$conditions = array (
+							'courseid' => $course->id,
+							'enrolmentkey' => $group_id 
+					);
+					if (! $group = $this->DB->get_record ( 'groups', $conditions )) {
+						$group = new stdClass ();
+						$group->courseid = $course->id;
+						$group->name = $group_name;
+						$group->enrolmentkey = $group_id;
+						
+						if (! $group->id = groups_create_group ( $group )) {
+							return $this->error ( 5027 );
+						}
+					}
+					
+					$conditions = array (
+							'courseid' => $course->id,
+							'idnumber' => $group_id 
+					);
+					if (! $grouping = $this->DB->get_record ( 'groupings', $conditions )) {
+						$conditions = array (
+								'courseid' => $course->id,
+								'name' => $group_name 
+						);
+						if (! $grouping = $this->DB->get_record ( 'groupings', $conditions )) {
+							$grouping = new stdClass ();
+							$grouping->courseid = $course->id;
+							$grouping->name = $group_name;
+							$grouping->idnumber = $group_id;
+							$grouping->description = 'נוצר ממכלול';
+							
+							if (! $grouping->id = groups_create_grouping ( $grouping )) {
+								return $this->error ( 5028 );
+							}
+						}
+					}
+					
+					if (! groups_assign_grouping ( $grouping->id, $group->id )) {
+						return $this->error ( 5029 );
+					}
+					
+					if (! groups_add_member ( $group->id, $user->id )) {
+						return $this->error ( 5044 );
+					}
+				}
+			}
+			
+			return true;
+		}
+	}
+
+	public function user_remove($admin_name, $admin_psw, $user_id, $course_id, $course_role) {
+		if ($this->admin_login ( $admin_name, $admin_psw )) {
+			$conditions = array (
+					'idnumber' => $user_id 
+			);
+			if (! $user = $this->DB->get_record ( 'user', $conditions )) {
+				return $this->error ( 5011 );
+			}
+			
+			$conditions = $this->get_course_condition ( $course_id );
+			if (! $course = $this->DB->get_record ( 'course', $conditions )) {
+				return $this->error ( 5014 );
+			}
+			
+			$this->user_unenroll ( $course->id, $user->id );
+			
+			return true;
+		}
+	}
+
+	public function bhn_add($admin_name, $admin_psw, $session_key, $course_id, $bhn_shm, $michlol_krs, $michlol_sms, $michlol_sid, $moodle_type) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			if (! isset ( $course_id ) || ! isset ( $bhn_shm ) || ! isset ( $michlol_krs ) || ! isset ( $michlol_sms ) || ! isset ( $michlol_sid ) || ! isset ( $moodle_type )) {
+				return $this->error ( 5007 );
+			}
+			
+			$conditions = $this->get_course_condition ( $course_id );
+			if ($course = $this->DB->get_record ( 'course', $conditions )) {
+				$modinfo = $this->add_assignment ( $course->id, 0, $bhn_shm, $michlol_krs, $michlol_sms, $michlol_sid, $moodle_type, 0, 0 );
+			} else {
+				return $this->error ( 5014 );
+			}
+			
+			return true;
+		}
+	}
+
+	public function bhn_delete($admin_name, $admin_psw, $michlol_krs, $michlol_sms, $michlol_sid) {
+		if ($this->admin_login ( $admin_name, $admin_psw )) {
+			if (! isset ( $michlol_krs ) || ! isset ( $michlol_sms ) || ! isset ( $michlol_sid )) {
+				return $this->error ( 5007 );
+			}
+			
+			$conditions = array (
+					'michlol_krs_bhn_krs' => $michlol_krs,
+					'michlol_krs_bhn_sms' => $michlol_sms,
+					'michlol_krs_bhn_sid' => $michlol_sid 
+			);
+			if ($matala = $this->DB->get_record ( 'matalot', $conditions )) {
+				
+				$conditions = array (
+						'course' => $matala->course_id,
+						'instance' => $matala->moodle_id 
+				);
+				if ($module = $this->DB->get_record ( 'course_modules', $conditions )) {
+					course_delete_module ( $module->id );
+				}
+				
+				$conditions = array (
+						'id' => $matala->id 
+				);
+				$this->DB->delete_records ( 'matalot', $conditions );
+			} else {
+				return $this->error ( 5032 );
+			}
+			
+			$modname = $this->DB->get_field ( 'modules', 'name', array (
+					'id' => $module->module 
+			), MUST_EXIST );
+			
+			$event = \local_ws_rashim\event\course_module_deleted::create ( array (
+					'userid' => $this->admin->id,
+					'courseid' => $course->id,
+					'context' => context_course::instance ( $matala->course_id ),
+					'objectid' => $module->id,
+					'other' => array (
+							'modulename' => $modname,
+							'instanceid' => $module->instance 
+					) 
+			) );
+			
+			$event->trigger ();
+			
+			return true;
+		}
+	}
+
+	public function tikyesod_add($admin_name, $admin_psw, $session_key, $xml) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			if (! isset ( $xml )) {
+				return $this->error ( 5007 );
+			}
+			
+			$xml = new SimpleXMLElement ( $xml );
+			
+			if ($xml) {
+				$conditions = array (
+						'idnumber' => "{$xml->DATA->SNL}_{$xml->DATA->SHL}_{$xml->DATA->MIS}" 
+				);
+				if ($course = $this->DB->get_record ( 'course', $conditions )) {
+					$course->fullname = ( string ) $xml->DATA->SHM;
+					$course->shortname = ( string ) $xml->DATA->SHM_UNIQUE;
+					
+					update_course ( $course );
+					
+					$event = \local_ws_rashim\event\course_updated::create ( array (
+							'userid' => $this->admin->id,
+							'courseid' => $course->id,
+							'context' => context_course::instance ( $course->id ),
+							'objectid' => $course->id 
+					) );
+					
+					$event->trigger ();
+				} else {
+					$course = new stdClass ();
+					$course->fullname = ( string ) $xml->DATA->SHM;
+					$course->shortname = ( string ) $xml->DATA->SHM_UNIQUE;
+					$course->idnumber = "{$xml->DATA->SNL}_{$xml->DATA->SHL}_{$xml->DATA->MIS}";
+					$course->category = $this->DB->get_field_sql ( 'SELECT MIN(id) FROM {course_categories}', null, MUST_EXIST );
+					
+					$courseconfig = get_config ( 'moodlecourse' );
+					foreach ( $courseconfig as $key => $value ) {
+						$course->$key = $value;
+					}
+					
+					if (isset ( $this->config->michlol_course_visible )) {
+						$course->visible = ( int ) $this->config->michlol_course_visible;
+					}
+					
+					$course = create_course ( $course );
+					
+					$event = \local_ws_rashim\event\course_created::create ( array (
+							'userid' => $this->admin->id,
+							'courseid' => $course->id,
+							'context' => context_course::instance ( $course->id ),
+							'objectid' => $course->id,
+							'other' => array (
+									'fullname' => $course->fullname 
+							) 
+					) );
+					
+					$event->trigger ();
+				}
+				
+				$this->xml2meetings ( $course->id, $xml );
+				
+				if (( integer ) $xml->DATA->PREV_VERSION != - 1) {
+					$this->copy_course_section_tik ( $xml );
+					
+					$this->xml2assignments_link ( $course->id, $xml );
+				} else {
+					$this->xml2assignments ( $course->id, $xml );
+				}
+			} else {
+				return $this->error ( 5042 );
+			}
+			
+			return true;
+		}
+	}
+
+	public function tikyesod_delete($admin_name, $admin_psw, $shl, $hit) {
+		if ($this->admin_login ( $admin_name, $admin_psw )) {
+			if (! isset ( $shl ) || ! isset ( $hit )) {
+				return $this->error ( 5007 );
+			}
+			
+			$conditions = array (
+					'snl' => '9999',
+					'shl' => $shl,
+					'hit' => $hit 
+			);
+			if ($tikyesod = $this->DB->get_record ( 'meetings', $conditions )) {
+				$conditions = array (
+						'id' => $tikyesod->course_id 
+				);
+				if ($course = $this->DB->get_record ( 'course', $conditions )) {
+					$course->visible = 0;
+					
+					update_course ( $course );
+				} else {
+					return $this->error ( 5014 );
+				}
+			} else {
+				return $this->error ( 5041 );
+			}
+			
+			$event = \local_ws_rashim\event\course_deleted::create ( array (
+					'userid' => $this->admin->id,
+					'courseid' => $course->id,
+					'context' => context_course::instance ( $course->id ),
+					'objectid' => $course->id,
+					'other' => array (
+							'nodelete' => true,
+							'fullname' => $course->fullname 
+					) 
+			) );
+			
+			$event->trigger ();
+			
+			return true;
+		}
+	}
+
+	public function machzor_add($admin_name, $admin_psw, $session_key, $xml) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			if (! isset ( $xml )) {
+				return $this->error ( 5007 );
+			}
+			
+			$xml = new SimpleXMLElement ( $xml );
+			
+			if ($xml) {
+				$conditions = array (
+						'idnumber' => $course->idnumber 
+				);
+				if ($course = $this->DB->get_record ( 'course', $conditions )) {
+					$course->fullname = ( string ) $xml->DATA->SHM;
+					$course->shortname = ( string ) $xml->DATA->SHM_UNIQUE;
+					
+					update_course ( $course );
+					
+					$event = \local_ws_rashim\event\course_updated::create ( array (
+							'userid' => $this->admin->id,
+							'courseid' => $course->id,
+							'context' => context_course::instance ( $course->id ),
+							'objectid' => $course->id,
+							'other' => array (
+									'fullname' => $course->fullname 
+							) 
+					) );
+					
+					$event->trigger ();
+				} else {
+					$course = new stdClass ();
+					$course->fullname = ( string ) $xml->DATA->SHM;
+					$course->shortname = ( string ) $xml->DATA->SHM_UNIQUE;
+					$course->idnumber = "{$xml->DATA->SNL}_{$xml->DATA->SHL}_{$xml->DATA->MIS}";
+					$course->category = 1;
+					
+					$courseconfig = get_config ( 'moodlecourse' );
+					foreach ( $courseconfig as $key => $value ) {
+						$course->$key = $value;
+					}
+					
+					if (isset ( $this->config->michlol_course_visible )) {
+						$course->visible = ( int ) $this->config->michlol_course_visible;
+					}
+					
+					$course = create_course ( $course );
+					
+					$event = \local_ws_rashim\event\course_created::create ( array (
+							'userid' => $this->admin->id,
+							'courseid' => $course->id,
+							'context' => context_course::instance ( $course->id ),
+							'objectid' => $course->id,
+							'other' => array (
+									'fullname' => $course->fullname 
+							) 
+					) );
+					
+					$event->trigger ();
+				}
+				
+				$this->xml2meetings ( $course->id, $xml );
+				
+				$conditions = array (
+						'snl' => '9999',
+						'shl' => ( integer ) $xml->DATA->SHL,
+						'hit' => ( integer ) $xml->DATA->TAVNIT 
+				);
+				if ($tikyesod = $this->DB->get_record ( 'meetings', $conditions )) {
+					$this->copy_course_section ( $tikyesod->course_id, $course->id );
+				} else {
+					return $this->error ( 5041 );
+				}
+				
+				$this->xml2assignments_link ( $course->id, $xml );
+			} else {
+				return $this->error ( 5042 );
+			}
+			
+			return true;
+		}
+	}
+
+	public function machzor_delete($admin_name, $admin_psw, $snl, $shl, $hit) {
+		if ($this->admin_login ( $admin_name, $admin_psw )) {
+			if (! isset ( $snl ) || ! isset ( $shl ) || ! isset ( $hit )) {
+				return $this->error ( 5007 );
+			}
+			
+			$conditions = array (
+					'snl' => $snl,
+					'shl' => $shl,
+					'hit' => $hit 
+			);
+			if ($machzor = $this->DB->get_record ( 'meetings', $conditions )) {
+				$conditions = array (
+						'id' => $machzor->course_id 
+				);
+				if ($course = $this->DB->get_record ( 'course', $conditions )) {
+					$course->visible = 0;
+					
+					update_course ( $course );
+				} else {
+					return $this->error ( 5014 );
+				}
+			} else {
+				return $this->error ( 5041 );
+			}
+			
+			$event = \local_ws_rashim\event\course_deleted::create ( array (
+					'userid' => $this->admin->id,
+					'courseid' => $course->id,
+					'context' => context_course::instance ( $course->id ),
+					'objectid' => $course->id,
+					'other' => array (
+							'nodelete' => true,
+							'fullname' => $course->fullname 
+					) 
+			) );
+			
+			$event->trigger ();
+			
+			return true;
+		}
+	}
+
+	public function machzor_user_add($admin_name, $admin_psw, $session_key, $user_id, $user_name, $user_psw, $user_firstname, $user_lastname, $user_email, $user_phone1, $user_phone2, $user_address, $user_lang, $user_extra, $snl, $shl, $hit, $course_role) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			$user = $this->add_user ( $user_id, $user_name, $user_psw, $user_firstname, $user_lastname, $user_email, $user_phone1, $user_phone2, $user_address, $user_lang, $user_extra );
+			
+			$conditions = array (
+					'snl' => $snl,
+					'shl' => $shl,
+					'hit' => $hit 
+			);
+			if (! $meeting = $this->DB->get_record ( 'meetings', $conditions )) {
+				return $this->error ( 5041 );
+			}
+			
+			$conditions = array (
+					'shortname' => $course_role 
+			);
+			if (! $role = $this->DB->get_record ( 'role', $conditions )) {
+				return $this->error ( 5044 );
+			}
+			
+			$this->user_enroll ( $meeting->course_id, $user->id, $role->id );
+			
+			return true;
+		}
+	}
+
+	public function machzor_user_remove($admin_name, $admin_psw, $user_id, $snl, $shl, $hit, $course_role) {
+		if ($this->admin_login ( $admin_name, $admin_psw )) {
+			$conditions = array (
+					'idnumber' => $user_id 
+			);
+			if (! $user = $this->DB->get_record ( 'user', $conditions )) {
+				return $this->error ( 5011 );
+			}
+			
+			$conditions = array (
+					'snl' => $snl,
+					'shl' => $shl,
+					'hit' => $hit 
+			);
+			if (! $meeting = $this->DB->get_record ( 'meetings', $conditions )) {
+				return $this->error ( 5041 );
+			}
+			
+			$this->user_unenroll ( $meeting->course_id, $user->id );
+			
+			return true;
+		}
+	}
+
+	public function machzormfgs_upd($admin_name, $admin_psw, $session_key, $xml) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			if (! isset ( $xml )) {
+				return $this->error ( 5007 );
+			}
+			
+			$section_num = 0;
+			
+			$xml = new SimpleXMLElement ( $xml );
+			
+			if ($xml) {
+				if (! isset ( $xml->MEETING->WEEK )) {
+					$xml->MEETING->WEEK = - 1;
+				}
+				
+				if (! isset ( $xml->MEETING->DAY )) {
+					$xml->MEETING->DAY = - 1;
+				}
+				
+				if (! isset ( $xml->MEETING->MEETING_DATE )) {
+					$xml->MEETING->MEETING_DATE = - 1;
+				}
+				
+				$conditions = array (
+						'snl' => ( string ) $xml->MEETING->SNL,
+						'shl' => ( string ) $xml->MEETING->SHL,
+						'hit' => ( string ) $xml->MEETING->HIT,
+						'krs' => ( string ) $xml->MEETING->MIS,
+						'mfgs' => ( string ) $xml->MEETING->SID 
+				);
+				if (! $meeting = $this->DB->get_record ( 'meetings', $conditions )) {
+					$mbase = new stdClass ();
+					
+					$conditions = array (
+							'snl' => ( string ) $xml->MEETING->SNL,
+							'shl' => ( string ) $xml->MEETING->SHL,
+							'hit' => ( string ) $xml->MEETING->HIT 
+					);
+					if (! $meeting_base = $this->DB->get_records ( 'meetings', $conditions, 'section_num DESC' )) {
+						$conditions = array (
+								'idnumber' => "{$xml->DATA->SNL}_{$xml->DATA->SHL}_{$xml->DATA->MIS}" 
+						);
+						if (! $coursebase = $this->DB->get_record ( 'course', $conditions )) {
+							return $this->error ( 5014 );
+						}
+						
+						$mbase->course_id = $coursebase->id;
+						$mbase->section_num = 0;
+						$mbase->snl = ( string ) $xml->MEETING->SNL;
+						$mbase->shl = ( integer ) $xml->MEETING->SHL;
+						$mbase->hit = ( integer ) $xml->MEETING->HIT;
+					} else {
+						$index = array_shift ( array_keys ( $meeting_base ) );
+						
+						$mbase->course_id = $meeting_base [$index]->course_id;
+						$mbase->section_num = $meeting_base [$index]->section_num;
+						$mbase->snl = $meeting_base [$index]->snl;
+						$mbase->shl = $meeting_base [$index]->shl;
+						$mbase->hit = $meeting_base [$index]->hit;
+					}
+					
+					$section = $this->handle_course_section ( $mbase->course_id, $mbase->section_num + 1, ( string ) $xml->MEETING->SHM );
+					
+					$meeting_new->snl = $mbase->snl;
+					$meeting_new->shl = $mbase->shl;
+					$meeting_new->hit = $mbase->hit;
+					$meeting_new->krs = ( integer ) $xml->MEETING->MIS;
+					$meeting_new->mfgs = ( integer ) $xml->MEETING->SID;
+					
+					$meeting_new->course_id = $mbase->course_id;
+					$meeting_new->section_num = $mbase->section_num + 1;
+					
+					$meeting_new->subject = ( string ) $xml->MEETING->SUB;
+					
+					$meeting_new->week = ( integer ) $xml->MEETING->WEEK;
+					$meeting_new->day = ( integer ) $xml->MEETING->DAY;
+					
+					$meeting_new->meeting_date = ( integer ) $xml->MEETING->MEETING_DATE;
+					
+					$meeting_new->hour_begin = ( integer ) $xml->MEETING->BEGIN;
+					$meeting_new->hour_end = ( integer ) $xml->MEETING->END;
+					
+					$this->DB->insert_record ( 'meetings', $meeting_new );
+					
+					$course_id = $meeting_new->course_id;
+					$section_num = $meeting_new->section_num;
+					
+					$event = \local_ws_rashim\event\meeting_created::create ( array (
+							'userid' => $this->admin->id,
+							'objectid' => $section,
+							'courseid' => $meeting_new->course_id,
+							'context' => context_course::instance ( $meeting_new->course_id ),
+							'other' => array (
+									'sectionnum' => $meeting_new->section_num 
+							) 
+					) );
+					
+					$event->trigger ();
+				} else {
+					$meeting->week = ( integer ) $xml->MEETING->WEEK;
+					$meeting->day = ( integer ) $xml->MEETING->DAY;
+					
+					$meeting->meeting_date = ( string ) $xml->MEETING->MEETING_DATE;
+					
+					$meeting->hour_begin = ( integer ) $xml->MEETING->BEGIN;
+					$meeting->hour_end = ( integer ) $xml->MEETING->END;
+					
+					$meeting->subject = ( string ) $xml->MEETING->SUB;
+					
+					$this->DB->update_record ( 'meetings', $meeting );
+					
+					$this->handle_course_section ( $meeting->course_id, $meeting->section_num, ( string ) $xml->MEETING->SHM );
+					
+					$course_id = $meeting->course_id;
+					$section_num = $meeting->section_num;
+					
+					$event = \local_ws_rashim\event\meeting_updated::create ( array (
+							'userid' => $this->admin->id,
+							'objectid' => $section->id,
+							'courseid' => $meeting->course_id,
+							'context' => context_course::instance ( $meeting->course_id ),
+							'other' => array (
+									'sectionnum' => $meeting->section_num 
+							) 
+					) );
+					
+					$event->trigger ();
+				}
+				
+				course_get_format ( $course_id )->update_course_format_options ( array (
+						'numsections' => $section_num 
+				) );
+				
+				$this->xml2assignments ( $course_id, $xml );
+			} else {
+				return $this->error ( 5042 );
+			}
+			
+			return true;
+		}
+	}
+
+	public function machzormfgs_del($admin_name, $admin_psw, $session_key, $xml) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			if (! isset ( $xml )) {
+				return $this->error ( 5007 );
+			}
+			
+			$xml = new SimpleXMLElement ( $xml );
+			
+			if ($xml) {
+				$conditions = array (
+						'snl' => ( string ) $xml->MEETING->SNL,
+						'shl' => ( string ) $xml->MEETING->SHL,
+						'hit' => ( string ) $xml->MEETING->HIT,
+						'krs' => ( string ) $xml->MEETING->MIS,
+						'mfgs' => ( string ) $xml->MEETING->SID 
+				);
+				if (! $meeting = $this->DB->get_record ( 'meetings', $conditions )) {
+					return $this->error ( 5041 );
+				} else {
+					$section_conditions = array (
+							'course' => $meeting->course_id,
+							'section' => $meeting->section_num 
+					);
+					if ($section = $this->DB->get_record ( 'course_sections', $section_conditions )) {
+						if (( string ) $xml->MEETING->SNL == '9999') {
+							course_delete_section ( $section->course, $section );
+						} else {
+							$this->handle_course_section ( $section->course, $section->section, $section->name, 0 );
+						}
+					}
+					
+					if (( string ) $xml->MEETING->SNL == '9999') {
+						$this->DB->delete_records ( 'meetings', $conditions );
+					}
+				}
+			} else {
+				return $this->error ( 5042 );
+			}
+			
+			$event = \local_ws_rashim\event\meeting_deleted::create ( array (
+					'userid' => $this->admin->id,
+					'objectid' => $section->id,
+					'courseid' => $section->course,
+					'context' => context_course::instance ( $section->course ),
+					'other' => array (
+							'sectionnum' => $section->section,
+							'sectionname' => $section->name 
+					) 
+			) );
+			
+			$event->trigger ();
+			
+			return true;
+		}
+	}
+
+	public function tikyesod_shl_change($admin_name, $admin_psw, $session_key, $xml) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			if (! isset ( $xml )) {
+				return $this->error ( 5007 );
+			}
+			
+			$xml = new SimpleXMLElement ( $xml );
+			
+			if ($xml) {
+				$sql_krs = 'UPDATE {meetings} SET shl = ?, krs = ? WHERE shl = ? AND krs = ?';
+				
+				foreach ( $xml->KRS_LIST->children () as $krs ) {
+					$this->DB->execute ( $sql_krs, array (
+							( integer ) $krs->NEW_SHL,
+							( integer ) $krs->NEW_MIS,
+							( integer ) $krs->OLD_SHL,
+							( integer ) $krs->OLD_MIS 
+					) );
+				}
+				
+				$sql_hit = 'UPDATE {meetings} SET shl = ? WHERE snl = ? AND shl = ? AND hit = ?';
+				
+				foreach ( $xml->HIT_LIST->children () as $hit ) {
+					$this->DB->execute ( $sql_hit, array (
+							( integer ) $hit->NEW_SHL,
+							( integer ) $hit->SNL,
+							( integer ) $hit->OLD_SHL,
+							( integer ) $hit->MIS 
+					) );
+					
+					$conditions = array (
+							'idnumber' => ( string ) $hit->OLD_KEY 
+					);
+					if ($course = $this->DB->get_record ( 'course', $conditions )) {
+						return $this->error ( 5014 );
+						
+						$course->idnumber = ( string ) $hit->NEW_KEY;
+						
+						update_course ( $course );
+						
+						$event = \local_ws_rashim\event\tikyesod_shl_changed::create ( array (
+								'userid' => $this->admin->id,
+								'objectid' => $course->id,
+								'courseid' => $course->id,
+								'context' => context_course::instance ( $course->id ),
+								'other' => array (
+										'old_shl' => ( integer ) $hit->OLD_SHL,
+										'new_shl' => ( integer ) $hit->NEW_SHL 
+								) 
+						) );
+						
+						$event->trigger ();
+					}
+				}
+			} else {
+				return $this->error ( 5042 );
+			}
+			
+			return true;
+		}
+	}
+
+	public function course_update_key($admin_name, $admin_psw, $course_old_id, $course_new_id, $course_shortname) {
+		if ($this->admin_login ( $admin_name, $admin_psw )) {
+			$conditions = array (
+					'idnumber' => $course_old_id 
+			);
+			if (! $course = $this->DB->get_record ( 'course', $conditions )) {
+				return $this->error ( 5014 );
+			}
+			
+			$course->idnumber = $course_new_id;
+			$course->shortname = $course_shortname;
+			
+			update_course ( $course );
+			
+			$event = \local_ws_rashim\event\course_idnumber_updated::create ( array (
+					'userid' => $this->admin->id,
+					'objectid' => $course->id,
+					'courseid' => $course->id,
+					'context' => context_course::instance ( $course->id ),
+					'other' => array (
+							'old_idnumber' => $course_old_id,
+							'new_idnumber' => $course_new_id 
+					) 
+			) );
+			
+			$event->trigger ();
+			
+			return true;
+		}
+	}
+
+	public function manage_ktree($admin_name, $admin_psw, $session_key, $category_id, $parent_id, $category_name, $user_id, $role, $add) {
+		if ($this->valid_login ( $session_key, $admin_name, $admin_psw )) {
+			$conditions = array (
+					'idnumber' => $category_id 
+			);
+			$category = $this->DB->get_record ( 'course_categories', $conditions );
+			
+			if (! empty ( $parent_id )) {
+				$conditions = array (
+						'idnumber' => $parent_id 
+				);
+				$parent = $this->DB->get_record ( 'course_categories', $conditions );
+				
+				if (empty ( $parent->id )) {
+					return $this->error ( 5017 );
+				}
+				
+				$parent_id = $parent->id;
+			}
+			
+			if (empty ( $category->id )) {
+				if ($add) {
+					$cartegory_id = $this->category_add ( $parent_id, $category_id, $category_name );
+				} else {
+					return $this->error ( 5018 );
+				}
+			} else {
+				$category_id = $category->id;
+				
+				if (empty ( $user_id )) {
+					$cat = coursecat::get ( $category_id );
+					
+					$category->name = ! empty ( $category_name ) ? $category_name : $category->name;
+					$category->parent = ! empty ( $parent_id ) ? $parent_id : null;
+					$cat->update ( $category );
+				}
+			}
+			
+			if (! empty ( $user_id )) {
+				$conditions = array (
+						'idnumber' => $user_id 
+				);
+				$user = $this->DB->get_record ( 'user', $conditions );
+				
+				if (empty ( $user->id )) {
+					return $this->error ( 5011 );
+				}
+				
+				$conditions = array (
+						'shortname' => $role 
+				);
+				
+				$roleid = $this->DB->get_field ( 'role', 'id', $conditions, MUST_EXIST );
+				if (empty ( $roleid )) {
+					return $this->error ( 5043 );
+				}
+				
+				if ($add) {
+					role_assign ( $roleid, $user->id, context_coursecat::instance ( $category_id ) );
+				} else {
+					role_unassign ( $roleid, $user->id, context_coursecat::instance ( $category_id )->id );
+				}
+			}
+		}
+		
+		return true;
+	}
+}
+
+?>
diff --git a/local/ws_rashim/login.php b/local/ws_rashim/login.php
new file mode 100755
index 0000000..074bd05
--- /dev/null
+++ b/local/ws_rashim/login.php
@@ -0,0 +1,118 @@
+<html>
+<head>
+<title></title>
+</head>
+<body>
+<?php
+
+function print_err($target, $error, $module = null) {
+	echo $target->box_start ( 'loginpanel' );
+	echo '<span class="error">' . get_string ( $error, $module ) . '</span>';
+	echo $target->box_end ();
+}
+
+global $CFG;
+global $DB;
+
+require_once ("../../config.php");
+require_once ('lib.php');
+
+$config = get_config ( 'local_ws_rashim' );
+
+$user = $_POST ['username'];
+$psw = $_POST ['password'];
+$course = $_POST ['course'];
+
+$mfgs_krs = $_POST ['mfgs_krs'];
+$mfgs_sid = $_POST ['mfgs_sid'];
+
+// Special redirect to bypass RASHIM login (nadavkav)
+redirect("https://moodle.levinsky.ac.il/auth/saml/index.php?wantsurl=$CFG->wwwroot/course/view.php?idnumber=$course");
+
+$resource_type = $_POST ['resource_type'];
+$resource_id = $_POST ['resource_id'];
+
+$PAGE->https_required ();
+$PAGE->set_url ( "$CFG->httpswwwroot/login/index.php" );
+$PAGE->set_context ( context_system::instance () );
+$PAGE->set_pagelayout ( 'login' );
+$PAGE->navbar->ignore_active ();
+$PAGE->navbar->add ( get_string ( "loginsite" ) );
+$PAGE->set_heading ( get_site ()->fullname );
+
+$conditions = array (
+		"username" => $user 
+);
+if (! $login_user = $DB->get_record ( 'user', $conditions )) {
+	echo $OUTPUT->header ();
+	print_err ( $OUTPUT, 'invalidlogin' );
+	echo $OUTPUT->footer ();
+	die ();
+}
+
+// we do not use this function in the first place
+// because the functon creates the user if does not exists!
+$login_user = authenticate_user_login ( $user, $psw );
+
+if (($login_user === false) || ($login_user && $login_user->id == 0)) {
+	echo $OUTPUT->header ();
+	print_err ( $OUTPUT, 'invalidlogin' );
+	echo $OUTPUT->footer ();
+	die ();
+} else {
+	complete_user_login ( $login_user );
+	
+	$url = "$CFG->httpswwwroot/login/index.php";
+	
+	if ($course != '') {
+		if (isset ( $config->michlol_useid ) && $config->michlol_useid) {
+			$conditions = array (
+					"id" => $course 
+			);
+		} else {
+			$conditions = array (
+					"idnumber" => $course 
+			);
+		}
+		
+		if (isset ( $resource_type ) && ! empty ( $resource_type )) {
+			$url = "$CFG->httpswwwroot/mod/{$resource_type}/view.php?id={$resource_id}";
+		} else {
+			if (! $courseget = $DB->get_record ( 'course', $conditions )) {
+				echo $OUTPUT->header ();
+				print_err ( $OUTPUT, 'invalidlogin' );
+				echo $OUTPUT->footer ();
+				die ();
+			} else {
+				$conditions = array (
+						"krs" => $mfgs_krs,
+						"mfgs" => $mfgs_sid,
+						"course_id" => $courseget->id 
+				);
+				
+				if (! $meetings = $DB->get_record ( 'meetings', $conditions )) {
+					$url = "$CFG->httpswwwroot/course/view.php?id={$courseget->id}";
+				} else {
+					$url = "$CFG->httpswwwroot/course/view.php?id={$courseget->id}&section={$meetings->section_num}";
+				}
+			}
+		}
+	}
+}
+echo $OUTPUT->header ();
+?>
+	<form id="formLogin" name="formLogin" method="post"
+		action="<?php echo $url; ?>">
+		<input name="username" type="hidden" value="<?php echo $user; ?>" /> <input
+			name="password" type="hidden" value="<?php echo $psw; ?>" />
+	</form>
+	<script type="text/javascript">
+		window.document.forms["formLogin"].submit();
+	</script>
+<?php
+echo $OUTPUT->footer ();
+?>
+</body>
+</html>
+</body>
+</html>
diff --git a/local/ws_rashim/service.php b/local/ws_rashim/service.php
new file mode 100755
index 0000000..c54a8d2
--- /dev/null
+++ b/local/ws_rashim/service.php
@@ -0,0 +1,16 @@
+<?php
+require_once ("../../config.php");
+
+if ($_SERVER ["REQUEST_METHOD"] == "POST") {
+	require_once ("lib.php");
+	
+	$server = new SoapServer ( 'wsdl.xml' );
+	
+	$server->setClass ( "server" );
+	$server->handle ();
+} else {
+	header ( "Location: ../../local/ws_rashim/wsdl.php" );
+	exit ();
+}
+
+?>
diff --git a/local/ws_rashim/settings.php b/local/ws_rashim/settings.php
new file mode 100755
index 0000000..e9ff33d
--- /dev/null
+++ b/local/ws_rashim/settings.php
@@ -0,0 +1,56 @@
+<?php
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+global $DB;
+
+if ($hassiteconfig) {
+	$settings = new admin_settingpage ( 'local_ws_rashim', get_string ( 'pluginname', 'local_ws_rashim' ) );
+	
+	$ADMIN->add ( 'localplugins', $settings );
+	
+	$auths = get_plugin_list ( 'auth' );
+	$auth_options = array ();
+	
+	foreach ( $auths as $auth => $unused ) {
+		if (is_enabled_auth ( $auth )) {
+			$auth_options [$auth] = get_string ( 'pluginname', "auth_{$auth}" );
+		}
+	}
+	
+	$settings->add ( new admin_setting_heading ( 'local_ws_rashim/version', '<h6>' . get_string ( 'version', 'local_ws_rashim' ) . $this->release . ' (' . $this->versiondisk . ')</h6>', '' ) );
+	
+	$settings->add ( new admin_setting_configselect ( 'local_ws_rashim/michlolauth', get_string ( 'michlolauth', 'local_ws_rashim' ), null, 'manual', $auth_options ) );
+	
+	$settings->add ( new admin_setting_configselect ( 'local_ws_rashim/michlol_course_visible', get_string ( 'michlol_course_visible', 'local_ws_rashim' ), null, 0, [ 
+			get_string ( 'hide' ),
+			get_string ( 'show' ) 
+	] ) );
+	
+	$settings->add ( new admin_setting_configtext ( 'local_ws_rashim/def_city', get_string ( 'def_city', 'local_ws_rashim' ), null, 'ירושלים' ) );
+	
+	$settings->add ( new admin_settings_country_select ( 'local_ws_rashim/def_country', get_string ( 'def_country', 'local_ws_rashim' ), null, 'IL' ) );
+	
+	$settings->add ( new admin_setting_heading ( 'local_ws_rashim/michlol_api', '<h2>' . get_string ( 'michlol_api', 'local_ws_rashim' ) . '</h2>', '' ) );
+	
+	$settings->add ( new admin_setting_configtext ( 'local_ws_rashim/api_url', get_string ( 'michlolurl', 'local_ws_rashim' ), NULL, NULL ) );
+	
+	$settings->add ( new admin_setting_configtext ( 'local_ws_rashim/api_user', get_string ( 'michloluser', 'local_ws_rashim' ), NULL, NULL ) );
+	
+	$settings->add ( new admin_setting_configpasswordunmask ( 'local_ws_rashim/api_psw', get_string ( 'michlolpsw', 'local_ws_rashim' ), NULL, NULL ) );
+	
+	$settings->add ( new admin_setting_heading ( 'local_ws_rashim/michlol_obsolate', '<h2>' . get_string ( 'michlol_obsolate', 'local_ws_rashim' ) . '</h2>', '' ) );
+	
+	$settings->add ( new admin_setting_configcheckbox ( 'local_ws_rashim/michlol_useid', get_string ( 'michlol_useid', 'local_ws_rashim' ), null, 0 ) );
+	
+	$dbman = $DB->get_manager ();
+	
+	if ($dbman->table_exists ( 'assignment' )) {
+		if ($rows = $DB->get_records ( 'matalot', array (
+				'moodle_type' => 'assignment' 
+		) )) {
+			$ADMIN->add ( 'localplugins', new admin_externalpage ( 'local_ws_rashim_update', get_string ( 'updateassignment', 'local_ws_rashim' ), new moodle_url ( '/local/ws_rashim/update.php' ) ) );
+		}
+	}
+}
+
+?>
diff --git a/local/ws_rashim/update.php b/local/ws_rashim/update.php
new file mode 100755
index 0000000..cd5b452
--- /dev/null
+++ b/local/ws_rashim/update.php
@@ -0,0 +1,95 @@
+<?php
+require_once ("../../config.php");
+require_once ('../../admin/tool/assignmentupgrade/locallib.php');
+
+global $DB;
+
+$PAGE->set_url ( '/local/ws_rashim/update.php' );
+$PAGE->set_context ( context_system::instance () );
+$PAGE->set_pagelayout ( 'admin' );
+$PAGE->set_cacheable ( false );
+$PAGE->set_heading ( $SITE->fullname );
+$PAGE->set_title ( $SITE->fullname . ': ' . get_string ( 'pluginname', 'local_ws_rashim' ) );
+
+echo $OUTPUT->header ();
+echo $OUTPUT->heading ( get_string ( 'pluginname', 'local_ws_rashim' ) );
+
+$dbman = $DB->get_manager ();
+
+$rows = $DB->get_records ( 'matalot', array (
+		'moodle_type' => 'assignment' 
+) );
+
+if ($dbman->table_exists ( 'assignment' ) && count ( $rows ) > 0) {
+	$mod = $DB->get_field ( 'modules', 'id', array (
+			'name' => 'assignment' 
+	), MUST_EXIST );
+	
+	echo $OUTPUT->heading ( get_string ( 'updateassignment', 'local_ws_rashim' ) );
+	echo $OUTPUT->box_start ( 'generalbox' );
+	
+	foreach ( $rows as $row ) {
+		$course = $DB->get_record ( 'course', array (
+				'id' => $row->course_id 
+		) );
+		
+		$assignment = $DB->get_record ( 'assignment', array (
+				'id' => $row->moodle_id 
+		) );
+		
+		$module_old = $DB->get_record ( 'course_modules', array (
+				'course' => $row->course_id,
+				'module' => $mod,
+				'instance' => $row->moodle_id 
+		) );
+		
+		$section_old = $DB->get_record ( 'course_sections', array (
+				'course' => $row->course_id,
+				'id' => $module_old->section 
+		) );
+		
+		if (! $course || ! $assignment || ! $module_old || ! $section_old) {
+			echo '<p>' . get_string ( 'assignment', 'local_ws_rashim' ) . " '$assignment->name', " . get_string ( 'course', 'local_ws_rashim' ) . " '$course->fullname'... X" . '</p>';
+			
+			$DB->delete_records ( 'matalot', array (
+					'id' => $row->id 
+			) );
+			
+			continue;
+		}
+		
+		echo '<p>' . get_string ( 'assignment', 'local_ws_rashim' ) . " '$assignment->name', " . get_string ( 'course', 'local_ws_rashim' ) . " '$course->fullname'... ";
+		
+		$rv = tool_assignmentupgrade_upgrade_assignment ( $row->moodle_id );
+		
+		$section_new = $DB->get_record ( 'course_sections', array (
+				'id' => $section_old->id 
+		), '*', MUST_EXIST );
+		
+		$old = explode ( ',', $section_old->sequence );
+		$new = explode ( ',', $section_new->sequence );
+		
+		$diff = array_diff ( $new, $old );
+		
+		$sec = current ( $diff );
+		
+		$module_new = $DB->get_record ( 'course_modules', array (
+				'id' => $sec 
+		), '*', MUST_EXIST );
+		
+		$row->moodle_type = 'assign';
+		$row->moodle_id = $module_new->instance;
+		
+		$DB->update_record ( 'matalot', $row );
+		
+		echo get_string ( 'updated', 'local_ws_rashim' ) . '</p>';
+	}
+	
+	echo $OUTPUT->box_end ();
+} else {
+	echo $OUTPUT->heading ( get_string ( 'noassignments', 'local_ws_rashim' ) );
+}
+
+echo $OUTPUT->footer ();
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/version.php b/local/ws_rashim/version.php
new file mode 100755
index 0000000..808cfe5
--- /dev/null
+++ b/local/ws_rashim/version.php
@@ -0,0 +1,10 @@
+<?php
+defined ( 'MOODLE_INTERNAL' ) || die ();
+
+$plugin->version = 2017040400.1625;
+$plugin->release = '3.1.0.41';
+$plugin->requires = 2014051200;
+$plugin->component = 'local_ws_rashim';
+$plugin->maturity = MATURITY_RC; // MATURITY_STABLE
+
+?>
\ No newline at end of file
diff --git a/local/ws_rashim/wsdl.php b/local/ws_rashim/wsdl.php
new file mode 100755
index 0000000..ab0deb9
--- /dev/null
+++ b/local/ws_rashim/wsdl.php
@@ -0,0 +1,12 @@
+<?php
+
+// the wsdl uses double instead of long because of a bug in the mysql/mssql connection layer when using bigint!!!
+// it is completly safe to convert the values to long with no data loss
+header ( "Content-Type: text/xml; charset=UTF-8" );
+
+echo file_get_contents ( 'wsdl.xml' );
+
+?>
+
+
+
diff --git a/local/ws_rashim/wsdl.xml b/local/ws_rashim/wsdl.xml
new file mode 100755
index 0000000..279029f
--- /dev/null
+++ b/local/ws_rashim/wsdl.xml
@@ -0,0 +1,585 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<definitions xmlns="http://schemas.xmlsoap.org/wsdl/"
+			 xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
+			 xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
+			 xmlns:soap-enc="http://schemas.xmlsoap.org/soap/encoding/"
+			 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
+			 xmlns:tns="http://www.rashim.co.il/ws/rashim/wsdl"
+			 targetNamespace="http://www.rashim.co.il/ws/rashim/wsdl">
+
+	<message name="Session_LoginRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+	</message>
+
+	<message name="Session_LoginResponse">
+		<part name="Session_Key" type="xsd:string" />
+	</message>
+
+	<message name="Session_LogoutRequest">
+		<part name="Session_Key" type="xsd:string" />
+	</message>
+
+	<message name="Session_LogoutResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="User_AddRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="User_ID" type="xsd:string" />
+		<part name="User_Name" type="xsd:string" />
+		<part name="User_Psw" type="xsd:string" />
+		<part name="User_FirstName" type="xsd:string" />
+		<part name="User_LastName" type="xsd:string" />
+		<part name="User_Email" type="xsd:string" />
+		<part name="User_Phone1" type="xsd:string" />
+		<part name="User_Phone2" type="xsd:string" />
+		<part name="User_Address" type="xsd:string" />
+		<part name="User_Lang" type="xsd:string" />
+		<part name="User_Extra" type="xsd:string" />
+		<part name="Course_ID" type="xsd:string" />
+		<part name="Course_Role" type="xsd:string" />
+		<part name="Group_ID" type="xsd:string" />
+		<part name="Group_Name" type="xsd:string" />
+	</message>
+
+	<message name="User_AddResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="User_RemoveRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="User_ID" type="xsd:string" />
+		<part name="Course_ID" type="xsd:string" />
+		<part name="Course_Role" type="xsd:string" />
+	</message>
+
+	<message name="User_RemoveResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="Course_AddRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="Course_ID" type="xsd:string" />
+		<part name="Course_Psw" type="xsd:string" />
+		<part name="Course_Name" type="xsd:string" />
+		<part name="Course_ShortName" type="xsd:string" />
+		<part name="Course_SylUrl" type="xsd:string" />
+		<part name="Category_Code" type="xsd:string" />
+		<part name="Category_SnlCode" type="xsd:string" />
+		<part name="Category_SnlName" type="xsd:string" />
+		<part name="Category_ShlCode" type="xsd:string" />
+		<part name="Category_ShlName" type="xsd:string" />
+		<part name="Category_MslCode" type="xsd:string" />
+		<part name="Category_MslName" type="xsd:string" />
+	</message>
+
+	<message name="Course_AddResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="Course_DeleteRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Course_ID" type="xsd:string" />
+		<part name="NoDelete" type="xsd:boolean" />
+	</message>
+
+	<message name="Course_DeleteResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="Bhn_AddRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="Course_ID" type="xsd:string" />
+		<part name="Bhn_Shm" type="xsd:string" />
+		<part name="Michlol_Krs" type="xsd:string" />
+		<part name="Michlol_Sms" type="xsd:string" />
+		<part name="Michlol_Sid" type="xsd:string" />
+		<part name="Moodle_Type" type="xsd:string" />
+	</message>
+
+	<message name="Bhn_AddResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="Bhn_DeleteRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Michlol_Krs" type="xsd:string" />
+		<part name="Michlol_Sms" type="xsd:string" />
+		<part name="Michlol_Sid" type="xsd:string" />
+	</message>
+
+	<message name="Bhn_DeleteResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="TikYesod_AddRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="XML" type="xsd:string" />
+	</message>
+
+	<message name="TikYesod_AddResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="TikYesod_DeleteRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Shl" type="xsd:string" />
+		<part name="Hit" type="xsd:string" />
+	</message>
+
+	<message name="TikYesod_DeleteResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="TikYesod_Shl_ChangeRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="XML" type="xsd:string" />
+	</message>
+
+	<message name="TikYesod_Shl_ChangeResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+		
+	<message name="Machzor_AddRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="XML" type="xsd:string" />
+	</message>
+
+	<message name="Machzor_AddResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="Machzor_DeleteRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Snl" type="xsd:string" />
+		<part name="Shl" type="xsd:string" />
+		<part name="Hit" type="xsd:string" />
+	</message>
+
+	<message name="Machzor_DeleteResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+	
+	<message name="Machzor_User_AddRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="User_ID" type="xsd:string" />
+		<part name="User_Name" type="xsd:string" />
+		<part name="User_Psw" type="xsd:string" />
+		<part name="User_FirstName" type="xsd:string" />
+		<part name="User_LastName" type="xsd:string" />
+		<part name="User_Email" type="xsd:string" />
+		<part name="User_Phone1" type="xsd:string" />
+		<part name="User_Phone2" type="xsd:string" />
+		<part name="User_Address" type="xsd:string" />
+		<part name="User_Lang" type="xsd:string" />
+		<part name="User_Extra" type="xsd:string" />
+		<part name="Snl" type="xsd:string" />
+		<part name="Shl" type="xsd:string" />
+		<part name="Hit" type="xsd:string" />
+		<part name="Course_Role" type="xsd:string" />
+	</message>
+
+	<message name="Machzor_User_AddResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="Machzor_User_RemoveRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="User_ID" type="xsd:string" />
+		<part name="Snl" type="xsd:string" />
+		<part name="Shl" type="xsd:string" />
+		<part name="Hit" type="xsd:string" />
+		<part name="Course_Role" type="xsd:string" />
+	</message>
+
+	<message name="Machzor_User_RemoveResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="MachzorMfgs_UpdRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="XML" type="xsd:string" />
+	</message>
+
+	<message name="MachzorMfgs_UpdResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="MachzorMfgs_DelRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="XML" type="xsd:string" />
+	</message>
+
+	<message name="MachzorMfgs_DelResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+		
+	<message name="Course_Update_KeyRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Course_Old_ID" type="xsd:string" />
+		<part name="Course_New_ID" type="xsd:string" />
+		<part name="Course_ShortName" type="xsd:string" />
+	</message>
+
+	<message name="Course_Update_KeyResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<message name="Manage_KTreeRequest">
+		<part name="Admin_Name" type="xsd:string" />
+		<part name="Admin_Psw" type="xsd:string" />
+		<part name="Session_Key" type="xsd:string" />
+		<part name="Category_Id" type="xsd:string" />
+		<part name="Parent_Id" type="xsd:string" />
+		<part name="Category_Name" type="xsd:string" />
+		<part name="User_Id" type="xsd:string" />
+		<part name="Role" type="xsd:string" />
+		<part name="Add" type="xsd:boolean" />
+	</message>
+
+	<message name="Manage_KTreeResponse">
+		<part name="Return" type="xsd:boolean" />
+	</message>
+
+	<portType name="WebServicePortType">
+		<operation name="Session_Login">
+			<documentation>Login</documentation>
+			<input message="tns:Session_LoginRequest" />
+			<output message="tns:Session_LoginResponse" />
+		</operation>
+
+		<operation name="Session_Logout">
+			<documentation>Logout</documentation>
+			<input message="tns:Session_LogoutRequest" />
+			<output message="tns:Session_LogoutResponse" />
+		</operation>
+
+		<operation name="User_Add">
+			<documentation>Adds/Updates user, and enrols if necessary</documentation>
+			<input message="tns:User_AddRequest" />
+			<output message="tns:User_AddResponse" />
+		</operation>
+
+		<operation name="User_Remove">
+			<documentation>Removes user from course</documentation>
+			<input message="tns:User_RemoveRequest" />
+			<output message="tns:User_RemoveResponse" />
+		</operation>
+
+		<operation name="Course_Add">
+			<documentation>Adds/Updates course</documentation>
+			<input message="tns:Course_AddRequest" />
+			<output message="tns:Course_AddResponse" />
+		</operation>
+
+		<operation name="Course_Delete">
+			<documentation>Deletes course</documentation>
+			<input message="tns:Course_DeleteRequest" />
+			<output message="tns:Course_DeleteResponse" />
+		</operation>
+
+		<operation name="Bhn_Add">
+			<documentation>Adds/Updates course assigments</documentation>
+			<input message="tns:Bhn_AddRequest" />
+			<output message="tns:Bhn_AddResponse" />
+		</operation>
+
+		<operation name="Bhn_Delete">
+			<documentation>Deletes course assigments</documentation>
+			<input message="tns:Bhn_DeleteRequest" />
+			<output message="tns:Bhn_DeleteResponse" />
+		</operation>
+
+		<operation name="TikYesod_Add">
+			<documentation>Adds tik yesod</documentation>
+			<input message="tns:TikYesod_AddRequest" />
+			<output message="tns:TikYesod_AddResponse" />
+		</operation>
+
+		<operation name="TikYesod_Delete">
+			<documentation>Removes tik yesod</documentation>
+			<input message="tns:TikYesod_DeleteRequest" />
+			<output message="tns:TikYesod_DeleteResponse" />
+		</operation>
+
+		<operation name="TikYesod_Shl_Change">
+			<documentation>Changes shl of tik yesod (and related mahzorim)</documentation>
+			<input message="tns:TikYesod_Shl_ChangeRequest" />
+			<output message="tns:TikYesod_Shl_ChangeResponse" />
+		</operation>
+		
+		<operation name="Machzor_Add">
+			<documentation>Adds machzor</documentation>
+			<input message="tns:Machzor_AddRequest" />
+			<output message="tns:Machzor_AddResponse" />
+		</operation>
+
+		<operation name="Machzor_Delete">
+			<documentation>Removes machzor</documentation>
+			<input message="tns:Machzor_DeleteRequest" />
+			<output message="tns:Machzor_DeleteResponse" />
+		</operation>
+
+		<operation name="Machzor_User_Add">
+			<documentation>Adds/Updates user, and enrols if necessary</documentation>
+			<input message="tns:Machzor_User_AddRequest" />
+			<output message="tns:Machzor_User_AddResponse" />
+		</operation>
+
+		<operation name="Machzor_User_Remove">
+			<documentation>Removes user from course</documentation>
+			<input message="tns:Machzor_User_RemoveRequest" />
+			<output message="tns:Machzor_User_RemoveResponse" />
+		</operation>
+
+		<operation name="MachzorMfgs_Upd">
+			<documentation>Updates meeting in machzor</documentation>
+			<input message="tns:MachzorMfgs_UpdRequest" />
+			<output message="tns:MachzorMfgs_UpdResponse" />
+		</operation>
+
+		<operation name="MachzorMfgs_Del">
+			<documentation>Updates meeting in machzor</documentation>
+			<input message="tns:MachzorMfgs_DelRequest" />
+			<output message="tns:MachzorMfgs_DelResponse" />
+		</operation>
+		
+		<operation name="Course_Update_Key">
+			<documentation>Updates course key</documentation>
+			<input message="tns:Course_Update_KeyRequest" />
+			<output message="tns:Course_Update_KeyResponse" />
+		</operation>
+
+		<operation name="Manage_KTree">
+			<documentation>Manages Knowledge Tree</documentation>
+			<input message="tns:Manage_KTreeRequest" />
+			<output message="tns:Manage_KTreeResponse" />
+		</operation>
+	</portType>
+
+	<binding name="WebServiceBinding" type="tns:WebServicePortType">
+		<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http" />
+
+		<operation name="Session_Login">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Session_Login" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Session_Logout">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Session_Logout" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="User_Add">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#User_Add" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="User_Remove">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#User_Remove" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Course_Add">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Course_Add" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Course_Delete">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Course_Delete" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Bhn_Add">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Bhn_Add" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Bhn_Delete">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Bhn_Delete" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="TikYesod_Add">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#TikYesod_Add" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="TikYesod_Delete">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#TikYesod_Delete" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="TikYesod_Shl_Change">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#TikYesod_Shl_Change" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+		
+		<operation name="Machzor_Add">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Machzor_Add" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Machzor_Delete">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Machzor_Delete" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Machzor_User_Add">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Machzor_User_Add" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Machzor_User_Remove">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Machzor_User_Remove" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="MachzorMfgs_Upd">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#MachzorMfgs_Upd" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="MachzorMfgs_Del">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#MachzorMfgs_Del" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+		
+		<operation name="Course_Update_Key">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Course_Update_Key" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+
+		<operation name="Manage_KTree">
+			<soap:operation soapAction="http://www.rashim.co.il/ws/rashim/wsdl#Manage_KTree" style="rpc" />
+			<input>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</input>
+			<output>
+				<soap:body use="encoded" namespace="http://www.rashim.co.il/ws/rashim/wsdl" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" />
+			</output>
+		</operation>
+	</binding>
+
+	<service name="WebService">
+		<port name="WebServicePort" binding="tns:WebServiceBinding">
+			<soap:address location="http://www.rashim.co.il/ws/rashim/service.php" />
+		</port>
+	</service>
+</definitions>
\ No newline at end of file
-- 
1.8.3.1

