From 5728c5690eb57044ca20c210e79913cf66959d4e Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Mon, 16 Oct 2017 10:16:42 +0300
Subject: [PATCH 71/95] mod/choicegroup (install) Use M31 version (todo: will
 later updates)

---
 mod/choicegroup/README.md                          |   0
 .../backup_choicegroup_activity_task.class.php     |   1 -
 .../moodle2/backup_choicegroup_settingslib.php     |   0
 .../backup/moodle2/backup_choicegroup_stepslib.php |   0
 .../restore_choicegroup_activity_task.class.php    |   0
 .../moodle2/restore_choicegroup_stepslib.php       |   0
 mod/choicegroup/classes/event/choice_removed.php   |   0
 mod/choicegroup/classes/event/choice_updated.php   |   0
 .../event/course_module_instance_list_viewed.php   |   0
 .../classes/event/course_module_viewed.php         |   0
 mod/choicegroup/classes/event/report_viewed.php    |   0
 mod/choicegroup/db/access.php                      |   0
 mod/choicegroup/db/install.xml                     |   0
 mod/choicegroup/db/log.php                         |   0
 mod/choicegroup/db/upgrade.php                     |  40 +--
 mod/choicegroup/index.php                          |   0
 mod/choicegroup/javascript.js                      |   8 +-
 mod/choicegroup/lang/en/choicegroup.php            |   7 +-
 mod/choicegroup/lang/es/choicegroup.php            |   0
 mod/choicegroup/lang/et/choicegroup.php            |   0
 mod/choicegroup/lang/fi/choicegroup.php            |   0
 mod/choicegroup/lang/fr/choicegroup.php            |   0
 mod/choicegroup/lang/it/choicegroup.php            |   0
 mod/choicegroup/lang/sv/choicegroup.php            |   0
 mod/choicegroup/lib.php                            | 298 +++++++++----------
 mod/choicegroup/mod_form.php                       | 212 ++++++--------
 mod/choicegroup/pix/column.png                     | Bin
 mod/choicegroup/pix/icon.gif                       | Bin
 mod/choicegroup/pix/icon.svg                       |   0
 mod/choicegroup/pix/row.png                        | Bin
 mod/choicegroup/renderer.php                       | 190 ++++++------
 mod/choicegroup/report.php                         |   5 +-
 mod/choicegroup/settings.php                       |   0
 mod/choicegroup/styles.css                         |   3 -
 mod/choicegroup/version.php                        |   4 +-
 mod/choicegroup/view.php                           |  15 +-
 mod/choicegroup/yui/form/form.js                   | 321 ++-------------------
 37 files changed, 384 insertions(+), 720 deletions(-)
 mode change 100644 => 100755 mod/choicegroup/README.md
 mode change 100644 => 100755 mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php
 mode change 100644 => 100755 mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php
 mode change 100644 => 100755 mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php
 mode change 100644 => 100755 mod/choicegroup/backup/moodle2/restore_choicegroup_activity_task.class.php
 mode change 100644 => 100755 mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php
 mode change 100644 => 100755 mod/choicegroup/classes/event/choice_removed.php
 mode change 100644 => 100755 mod/choicegroup/classes/event/choice_updated.php
 mode change 100644 => 100755 mod/choicegroup/classes/event/course_module_instance_list_viewed.php
 mode change 100644 => 100755 mod/choicegroup/classes/event/course_module_viewed.php
 mode change 100644 => 100755 mod/choicegroup/classes/event/report_viewed.php
 mode change 100644 => 100755 mod/choicegroup/db/access.php
 mode change 100644 => 100755 mod/choicegroup/db/install.xml
 mode change 100644 => 100755 mod/choicegroup/db/log.php
 mode change 100644 => 100755 mod/choicegroup/db/upgrade.php
 mode change 100644 => 100755 mod/choicegroup/index.php
 mode change 100644 => 100755 mod/choicegroup/javascript.js
 mode change 100644 => 100755 mod/choicegroup/lang/en/choicegroup.php
 mode change 100644 => 100755 mod/choicegroup/lang/es/choicegroup.php
 mode change 100644 => 100755 mod/choicegroup/lang/et/choicegroup.php
 mode change 100644 => 100755 mod/choicegroup/lang/fi/choicegroup.php
 mode change 100644 => 100755 mod/choicegroup/lang/fr/choicegroup.php
 mode change 100644 => 100755 mod/choicegroup/lang/it/choicegroup.php
 mode change 100644 => 100755 mod/choicegroup/lang/sv/choicegroup.php
 mode change 100644 => 100755 mod/choicegroup/lib.php
 mode change 100644 => 100755 mod/choicegroup/mod_form.php
 mode change 100644 => 100755 mod/choicegroup/pix/column.png
 mode change 100644 => 100755 mod/choicegroup/pix/icon.gif
 mode change 100644 => 100755 mod/choicegroup/pix/icon.svg
 mode change 100644 => 100755 mod/choicegroup/pix/row.png
 mode change 100644 => 100755 mod/choicegroup/renderer.php
 mode change 100644 => 100755 mod/choicegroup/report.php
 mode change 100644 => 100755 mod/choicegroup/settings.php
 mode change 100644 => 100755 mod/choicegroup/styles.css
 mode change 100644 => 100755 mod/choicegroup/version.php
 mode change 100644 => 100755 mod/choicegroup/view.php
 mode change 100644 => 100755 mod/choicegroup/yui/form/form.js

diff --git a/mod/choicegroup/README.md b/mod/choicegroup/README.md
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php b/mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php
old mode 100644
new mode 100755
index 2c1911e..32ae38c
--- a/mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php
+++ b/mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php
@@ -1,5 +1,4 @@
 <?php
-
 // This file is part of Moodle - http://moodle.org/
 //
 // Moodle is free software: you can redistribute it and/or modify
diff --git a/mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php b/mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php b/mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/backup/moodle2/restore_choicegroup_activity_task.class.php b/mod/choicegroup/backup/moodle2/restore_choicegroup_activity_task.class.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php b/mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/classes/event/choice_removed.php b/mod/choicegroup/classes/event/choice_removed.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/classes/event/choice_updated.php b/mod/choicegroup/classes/event/choice_updated.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/classes/event/course_module_instance_list_viewed.php b/mod/choicegroup/classes/event/course_module_instance_list_viewed.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/classes/event/course_module_viewed.php b/mod/choicegroup/classes/event/course_module_viewed.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/classes/event/report_viewed.php b/mod/choicegroup/classes/event/report_viewed.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/db/access.php b/mod/choicegroup/db/access.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/db/install.xml b/mod/choicegroup/db/install.xml
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/db/log.php b/mod/choicegroup/db/log.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/db/upgrade.php b/mod/choicegroup/db/upgrade.php
old mode 100644
new mode 100755
index b0a2467..b9f74e8
--- a/mod/choicegroup/db/upgrade.php
+++ b/mod/choicegroup/db/upgrade.php
@@ -28,26 +28,25 @@ function xmldb_choicegroup_upgrade($oldversion) {
 
         if ($oldversion < 2012042500) {
 
-            /// remove the no longer needed choicegroup_answers DB table
+            // Remove the no longer needed choicegroup_answers DB table.
             $choicegroup_answers = new xmldb_table('choicegroup_answers');
             $dbman->drop_table($choicegroup_answers);
 
-            /// change the choicegroup_options.text (text) field as choicegroup_options.groupid (int)
-            $choicegroup_options =  new xmldb_table('choicegroup_options');
-            $field_text =           new xmldb_field('text', XMLDB_TYPE_TEXT, 'small', null, null, null, null, 'choicegroupid');
-            $field_groupid =        new xmldb_field('groupid', XMLDB_TYPE_INTEGER, '10', null, null, null, '0', 'choicegroupid');
+            // Change the choicegroup_options.text (text) field as choicegroup_options.groupid (int).
+            $choicegroup_options = new xmldb_table('choicegroup_options');
+            $field_text = new xmldb_field('text', XMLDB_TYPE_TEXT, 'small', null, null, null, null, 'choicegroupid');
+            $field_groupid = new xmldb_field('groupid', XMLDB_TYPE_INTEGER, '10', null, null, null, '0', 'choicegroupid');
 
             $dbman->rename_field($choicegroup_options, $field_text, 'groupid');
             $dbman->change_field_type($choicegroup_options, $field_groupid);
 
         }
-        // Define table choicegroup to be created
+        // Define table choicegroup to be created.
         $table = new xmldb_table('choicegroup');
 
-        // Adding fields to table choicegroup
-        $newField = $table->add_field('multipleenrollmentspossible', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0');
-        $dbman->add_field($table, $newField); 
-
+        // Adding fields to table choicegroup.
+        $newfield = $table->add_field('multipleenrollmentspossible', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0');
+        $dbman->add_field($table, $newfield);
 
         upgrade_mod_savepoint(true, 2013070900, 'choicegroup');
     }
@@ -55,17 +54,24 @@ function xmldb_choicegroup_upgrade($oldversion) {
     if ($oldversion < 2015022301) {
         $table = new xmldb_table('choicegroup');
 
-        // Adding field to table choicegroup
-        $newField = $table->add_field('sortgroupsby', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');
+        // Adding field to table choicegroup.
+        $newfield = $table->add_field('sortgroupsby', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');
 
-        if (!$dbman->field_exists($table, $newField)) {
-            $dbman->add_field($table, $newField);
+        if (!$dbman->field_exists($table, $newfield)) {
+            $dbman->add_field($table, $newfield);
         }
 
         upgrade_mod_savepoint(true, 2015022301, 'choicegroup');
     }
-
+    // Lihi 14.12.2015 - a field to save if students are allowed to create their own groups.
+    if ($oldversion < 2015122801) {
+        $table = new xmldb_table('choicegroup');
+        // Adding field to table choicegroup.
+        $newfield = $table->add_field('allowcreategroup', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0');
+        if (!$dbman->field_exists($table, $newfield)) {
+            $dbman->add_field($table, $newfield);
+        }
+        upgrade_mod_savepoint(true, 2015122801, 'choicegroup');
+    }
     return true;
 }
-
-
diff --git a/mod/choicegroup/index.php b/mod/choicegroup/index.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/javascript.js b/mod/choicegroup/javascript.js
old mode 100644
new mode 100755
index 9b5cf35..e5532c5
--- a/mod/choicegroup/javascript.js
+++ b/mod/choicegroup/javascript.js
@@ -66,10 +66,6 @@ var NDY = YUI().use("node", function(Y) {
 
     };
     Y.on("click", choicegroup_descriptiondisplay_click, "a.choicegroup-descriptiondisplay");
-    Y.delegate('click', function () {
-        Y.one(".modchoicegroupsumbit").hide();
-    }, Y.config.doc, "table.choicegroups input[id^='choiceid_'][type='radio'][checked]", this);
-    Y.delegate('click', function () {
-        Y.one(".modchoicegroupsumbit").show();
-    }, Y.config.doc, "table.choicegroups input[id^='choiceid_'][type='radio']:not([checked])", this);
+    Y.delegate('click', function() { Y.one("table.choicegroups~input[type='submit'][class='button']").hide(); },  Y.config.doc, "table.choicegroups input[id^='choiceid_'][type='radio'][checked]", this);
+    Y.delegate('click', function() { Y.one("table.choicegroups~input[type='submit'][class='button']").show(); },  Y.config.doc, "table.choicegroups input[id^='choiceid_'][type='radio']:not([checked])", this);
 });
diff --git a/mod/choicegroup/lang/en/choicegroup.php b/mod/choicegroup/lang/en/choicegroup.php
old mode 100644
new mode 100755
index 38df724..23d8b33
--- a/mod/choicegroup/lang/en/choicegroup.php
+++ b/mod/choicegroup/lang/en/choicegroup.php
@@ -150,5 +150,8 @@ $string['expand_all_groupings'] = 'Expand All Groupings';
 $string['collapse_all_groupings'] = 'Collapse All Groupings';
 $string['double_click_grouping_legend'] = 'Double click on a grouping to expand/collapse individually.';
 $string['double_click_group_legend'] = 'Double click on a group to add it.';
-
-
+$string['new_group'] = 'new group';
+$string['grouplimitation'] = 'group size limit';
+$string['groupno'] = 'Group {no}';
+$string['allowcreategroup'] = 'Allow students to create groups';
+$string['newgroup'] = 'Create a new group';
\ No newline at end of file
diff --git a/mod/choicegroup/lang/es/choicegroup.php b/mod/choicegroup/lang/es/choicegroup.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/lang/et/choicegroup.php b/mod/choicegroup/lang/et/choicegroup.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/lang/fi/choicegroup.php b/mod/choicegroup/lang/fi/choicegroup.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/lang/fr/choicegroup.php b/mod/choicegroup/lang/fr/choicegroup.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/lang/it/choicegroup.php b/mod/choicegroup/lang/it/choicegroup.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/lang/sv/choicegroup.php b/mod/choicegroup/lang/sv/choicegroup.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/lib.php b/mod/choicegroup/lib.php
old mode 100644
new mode 100755
index 6324d9a..7e1a12b
--- a/mod/choicegroup/lib.php
+++ b/mod/choicegroup/lib.php
@@ -188,29 +188,29 @@ function choicegroup_add_instance($choicegroup) {
         $choicegroup->timeclose = 0;
     }
 
-    //insert answers
+    // Insert answers.
     $choicegroup->id = $DB->insert_record("choicegroup", $choicegroup);
-    
-    // deserialize the selected groups
-    
-    $groupIDs = explode(';', $choicegroup->serializedselectedgroups);
-    $groupIDs = array_diff( $groupIDs, array( '' ) );
-    
-    foreach ($groupIDs as $groupID) {
-        $groupID = trim($groupID);
-        if (isset($groupID) && $groupID != '') {
-            $option = new stdClass();
-            $option->groupid = $groupID;
-            $option->choicegroupid = $choicegroup->id;
-            $property = 'group_' . $groupID . '_limit';
-            if (isset($choicegroup->$property)) {
-            	$option->maxanswers = $choicegroup->$property;
-            }
-            $option->timemodified = time();
+    foreach ($choicegroup->option as $key => $value) {
+        $option = new stdClass();
+        $groupoption = new stdClass();
+        $value = trim($value);
+        $groupoption->name = $value;
+        $groupoption->courseid = $choicegroup->course;
+        $created = time();
+        $groupoption->timecreated = $created;
+        $groupoption->timemodified = $created;
+        $option->choicegroupid = $choicegroup->id;
+        if (isset($choicegroup->limit[$key])) {
+            $option->maxanswers = $choicegroup->limit[$key];
+        }
+        $option->timemodified = $created;
+        if (isset($value) && $value <> '') {
+            $groupid = $DB->insert_record("groups", $groupoption);
+            $option->groupid = $groupid;
             $DB->insert_record("choicegroup_options", $option);
-        }	
+        }
     }
-    
+    cache_helper::invalidate_by_definition('core', 'groupdata', array(), array($choicegroup->course));
     return $choicegroup->id;
 }
 
@@ -229,7 +229,6 @@ function choicegroup_update_instance($choicegroup) {
     $choicegroup->id = $choicegroup->instance;
     $choicegroup->timemodified = time();
 
-
     if (empty($choicegroup->timerestrict)) {
         $choicegroup->timeopen = 0;
         $choicegroup->timeclose = 0;
@@ -238,51 +237,37 @@ function choicegroup_update_instance($choicegroup) {
     if (empty($choicegroup->multipleenrollmentspossible)) {
         $choicegroup->multipleenrollmentspossible = 0;
     }
-    
-    
-    // deserialize the selected groups
-    
-    $groupIDs = explode(';', $choicegroup->serializedselectedgroups);
-    $groupIDs = array_diff( $groupIDs, array( '' ) );
-
-    // prepare pre-existing selected groups from database
-    
-    if (!($preExistingGroups = $DB->get_records("choicegroup_options", array("choicegroupid" => $choicegroup->id), "id"))) {
-    	return false;
-    }
 
-    // walk through form-selected groups
-    foreach ($groupIDs as $groupID) {
-    	$groupID = trim($groupID);
-    	if (isset($groupID) && $groupID != '') {
-    		$option = new stdClass();
-    		$option->groupid = $groupID;
-    		$option->choicegroupid = $choicegroup->id;
-    		$property = 'group_' . $groupID . '_limit';
-    		if (isset($choicegroup->$property)) {
-    			$option->maxanswers = $choicegroup->$property;
-    		}
-    		$option->timemodified = time();
-    		// Find out if this selection already exists
-    		foreach ($preExistingGroups as $key => $preExistingGroup) {
-    			if ($option->groupid == $preExistingGroup->groupid) {
-    				// match found, so instead of creating a new record we should merely update a pre-existing record
-    				$option->id = $preExistingGroup->id;
-    				$DB->update_record("choicegroup_options", $option);
-    				// remove the element from the array to not deal with it later
-    				unset($preExistingGroups[$key]);
-    				continue 2; // continue the big loop
-    			}
-    		}
-    		$DB->insert_record("choicegroup_options", $option);	
-    	}
-    	 
-    }
-    // remove all remaining pre-existing groups which did not appear in the form (and are thus assumed to have been deleted)
-    foreach ($preExistingGroups as $preExistingGroup) {
-    	$DB->delete_records("choicegroup_options", array("id"=>$preExistingGroup->id));
+    foreach ($choicegroup->option as $key => $value) {
+        $value = trim($value);
+        $option = new stdClass();
+        $groupoption = new stdClass();
+        $groupoption->name = $value;
+        $groupoption->courseid = $choicegroup->course;
+        $created = time();
+        $groupoption->timecreated = $created;
+        $groupoption->timemodified = $created;
+        $option->choicegroupid = $choicegroup->id;
+        if (isset($choicegroup->limit[$key])) {
+            $option->maxanswers = $choicegroup->limit[$key];
+        }
+        $option->timemodified = $created;
+        if (isset($choicegroup->optionid[$key]) && !empty($choicegroup->optionid[$key]) && $choicegroup->optionid[$key] != 0) {
+            $option->id = $choicegroup->optionid[$key];
+            if (isset($value) && $value <> '') {
+                $DB->update_record("choicegroup_options", $option);
+            } else { // Empty old option - needs to be deleted.
+                    $DB->delete_records("choicegroup_options", array("id" => $option->id));
+            }
+        } else {
+            if (isset($value) && $value <> '') {
+                $groupid = $DB->insert_record("groups", $groupoption);
+                $option->groupid = $groupid;
+                $DB->insert_record("choicegroup_options", $option);
+            }
+        }
     }
-
+    cache_helper::invalidate_by_definition('core', 'groupdata', array(), array($choicegroup->course));
     return $DB->update_record('choicegroup', $choicegroup);
 
 }
@@ -297,7 +282,7 @@ function choicegroup_update_instance($choicegroup) {
  */
 function choicegroup_prepare_options($choicegroup, $user, $coursemodule, $allresponses) {
 
-    $cdisplay = array('options'=>array());
+    $cdisplay = array('options '=> array());
 
     $cdisplay['limitanswers'] = true;
     $context = context_module::instance($coursemodule->id);
@@ -331,7 +316,7 @@ function choicegroup_prepare_options($choicegroup, $user, $coursemodule, $allres
         }
     }
 
-    $cdisplay['hascapability'] = is_enrolled($context, NULL, 'mod/choicegroup:choose'); //only enrolled users are allowed to make a choicegroup
+    $cdisplay['hascapability'] = is_enrolled($context, NULL, 'mod/choicegroup:choose'); //Only enrolled users are allowed to make a choicegroup.
 
     if ($choicegroup->allowupdate && is_array($answers)) {
         $cdisplay['allowupdate'] = true;
@@ -367,19 +352,14 @@ function choicegroup_user_submit_response($formanswer, $choicegroup, $userid, $c
     $selectedgroup = $DB->get_record('groups', array('id' => $selected_option->groupid), 'id,name', MUST_EXIST);
 
     $countanswers=0;
-    groups_add_member($selected_option->groupid, $userid);
-    $groupmember_added = true;    
-    if ($choicegroup->limitanswers) {
-        $groupmember = $DB->get_record('groups_members', array('groupid' => $selected_option->groupid, 'userid'=>$userid));
-        $select_count = 'groupid='.$selected_option->groupid.' and id<='.$groupmember->id;
-        $countanswers = $DB->count_records_select('groups_members', $select_count);
+    if($choicegroup->limitanswers) {
+        $groupmembers = $DB->get_records('groups_members', array('groupid' => $selected_option->groupid));
+        $countanswers = count($groupmembers);
         $maxans = $choicegroup->maxanswers[$formanswer];
-        if ($countanswers > $maxans) {    
-           groups_remove_member($selected_option->groupid, $userid);
-           $groupmember_added = false;
-      }
     }
-    if ($groupmember_added) {
+
+    if (!($choicegroup->limitanswers && ($countanswers >= $maxans) )) {
+        groups_add_member($selected_option->groupid, $userid);
         if ($current) {
             if (!($choicegroup->multipleenrollmentspossible == 1)) {
                 if ($selected_option->groupid != $current->id) {
@@ -471,9 +451,6 @@ function prepare_choicegroup_show_results($choicegroup, $course, $cm, $allrespon
 
         if (array_key_exists($groupid, $allresponses)) {
             $display->options[$optionid]->user = $allresponses[$groupid];
-            foreach ($display->options[$optionid]->user as $user){
-                $user->grpsmemberid = array_search(array($groupid, $user->id), $choicegroup->grpmemberid);
-            }
             $totaluser += count($allresponses[$groupid]);
         }
     }
@@ -610,14 +587,14 @@ function prepare_choicegroup_show_results($choicegroup, $course, $cm, $allrespon
             }
             echo "</tr>";
 
-            /// Print "Select all" etc.
-            if ($viewresponses and has_capability('mod/choicegroup:deleteresponses',$context)) {
+            // Print "Select all" etc.
+            if ($viewresponses and has_capability('mod/choicegroup:deleteresponses', $context)) {
                 echo '<tr><td></td><td>';
                 echo '<a href="javascript:select_all_in(\'DIV\',null,\'tablecontainer\');">'.get_string('selectall').'</a> / ';
                 echo '<a href="javascript:deselect_all_in(\'DIV\',null,\'tablecontainer\');">'.get_string('deselectall').'</a> ';
                 echo '&nbsp;&nbsp;';
                 echo html_writer::label(get_string('withselected', 'choicegroup'), 'menuaction');
-                echo html_writer::select(array('delete' => get_string('delete')), 'action', '', array(''=>get_string('withselectedusers')), array('id'=>'menuaction'));
+                echo html_writer::select(array('delete' => get_string('delete')), 'action', '', array('' => get_string('withselectedusers')), array('id' => 'menuaction'));
                 $PAGE->requires->js_init_call('M.util.init_select_autosubmit', array('attemptsform', 'menuaction', ''));
                 echo '<noscript id="noscriptmenuaction" style="display:inline">';
                 echo '<div>';
@@ -636,23 +613,23 @@ function prepare_choicegroup_show_results($choicegroup, $course, $cm, $allrespon
 
 /**
  * @global object
- * @param array $grpsmemberids
+ * @param array $userids
  * @param object $choicegroup Choice main table row
  * @param object $cm Course-module object
  * @param object $course Course object
  * @return bool
  */
-function choicegroup_delete_responses($grpsmemberids, $choicegroup, $cm, $course) {
+function choicegroup_delete_responses($userids, $choicegroup, $cm, $course) {
     global $CFG, $DB, $context;
     require_once($CFG->libdir.'/completionlib.php');
 
-    if(!is_array($grpsmemberids) || empty($grpsmemberids)) {
+    if(!is_array($userids) || empty($userids)) {
         return false;
     }
 
-    foreach($grpsmemberids as $num => $grpsmemberid) {
-        if(empty($grpsmemberid)) {
-            unset($grpsmemberids[$num]);
+    foreach($userids as $num => $userid) {
+        if(empty($userid)) {
+            unset($userids[$num]);
         }
     }
 
@@ -662,23 +639,21 @@ function choicegroup_delete_responses($grpsmemberids, $choicegroup, $cm, $course
         'objectid' => $choicegroup->id
     );
 
-    foreach($grpsmemberids as $grpsmemberid) {
-        $groupsmember = $DB->get_record('groups_members', array('id'=>$grpsmemberid), '*', MUST_EXIST);
-        $userid = $groupsmember->userid;
-        $groupid = $groupsmember->groupid;
-        $currentgroup = $DB->get_record('groups', array('id' => $groupid), 'id,name', MUST_EXIST);
-        if (groups_is_member($groupid, $userid)) {
-            groups_remove_member($groupid, $userid);
-            $event = \mod_choicegroup\event\choice_removed::create($eventparams);
-            $event->add_record_snapshot('course_modules', $cm);
-            $event->add_record_snapshot('course', $course);
-            $event->add_record_snapshot('choicegroup', $choicegroup);
-            $event->trigger();
-        }
-        // Update completion state
-        $current = choicegroup_get_user_answer($choicegroup, $userid, false, true);
-        if ($current === false && $completion->is_enabled($cm) && $choicegroup->completionsubmit) {
-            $completion->update_state($cm, COMPLETION_INCOMPLETE, $userid);
+    foreach($userids as $userid) {
+        if ($current = choicegroup_get_user_answer($choicegroup, $userid)) {
+            $currentgroup = $DB->get_record('groups', array('id' => $current->id), 'id,name', MUST_EXIST);
+            if (groups_is_member($current->id, $userid)) {
+                groups_remove_member($current->id, $userid);
+                $event = \mod_choicegroup\event\choice_removed::create($eventparams);
+                $event->add_record_snapshot('course_modules', $cm);
+                $event->add_record_snapshot('course', $course);
+                $event->add_record_snapshot('choicegroup', $choicegroup);
+                $event->trigger();
+            }
+            // Update completion state
+            if ($completion->is_enabled($cm) && $choicegroup->completionsubmit) {
+                $completion->update_state($cm, COMPLETION_INCOMPLETE, $userid);
+            }
         }
     }
     return true;
@@ -777,33 +752,21 @@ function choicegroup_get_choicegroup($choicegroupid) {
     if ($choicegroup = $DB->get_record("choicegroup", array("id" => $choicegroupid))) {
         $sortcolumn = choicegroup_get_sort_column($choicegroup);
 
+        $sql = "SELECT grp_o.id, grp_o.groupid, grp_o.maxanswers FROM {groups} grp
+            INNER JOIN {choicegroup_options} grp_o on grp.id = grp_o.groupid
+            WHERE grp_o.choicegroupid = :choicegroupid
+            ORDER BY $sortcolumn ASC";
+
         $params = array(
             'choicegroupid' => $choicegroupid
         );
+        $options = $DB->get_records_sql($sql, $params);
 
-        $grpfilter = '';
-        if (($groupid = optional_param('group', 0, PARAM_INT)) != 0) {
-            $params['groupid'] = $groupid;
-            $grpfilter = "AND grp_o.groupid = :groupid";
-        }
-
-        $sql = "SELECT grp_m.id grpmemberid, grp_m.userid, grp_o.id, grp_o.groupid, grp_o.maxanswers
-                 FROM {groups} grp
-                 INNER JOIN {choicegroup_options} grp_o on grp.id = grp_o.groupid
-                 LEFT JOIN {groups_members} grp_m on grp_m.groupid = grp_o.groupid
-                 WHERE grp_o.choicegroupid = :choicegroupid $grpfilter
-                 ORDER BY $sortcolumn ASC";
-
-        $rs = $DB->get_recordset_sql($sql, $params);
-
-        foreach ($rs as $option) {
+        foreach ($options as $option) {
             $choicegroup->option[$option->id] = $option->groupid;
-            $choicegroup->grpmemberid[$option->grpmemberid] = array($option->groupid, $option->userid);
             $choicegroup->maxanswers[$option->id] = $option->maxanswers;
         }
 
-        $rs->close();
-
         return $choicegroup;
     }
     return false;
@@ -858,7 +821,7 @@ function choicegroup_reset_course_form_definition(&$mform) {
  * @return array
  */
 function choicegroup_reset_course_form_defaults($course) {
-    return array('reset_choicegroup'=>1);
+    return array('reset_choicegroup' => 1);
 }
 
 /**
@@ -877,7 +840,7 @@ function choicegroup_get_response_data($choicegroup, $cm) {
     if (count($allresponses)) {
         return $allresponses;
     }
- 
+
     // First get all the users who have access here.
     // To start with we assume they are all "unanswered" then move them later.
     $ctx = \context_module::instance($cm->id);
@@ -890,45 +853,19 @@ function choicegroup_get_response_data($choicegroup, $cm) {
     }
 
     $allresponses[0] = $users;
+    foreach ($allresponses[0] as $user) {
+        $currentanswers = choicegroup_get_user_answer($choicegroup, $user, true);
+        if ($currentanswers != false) {
+            foreach ($currentanswers as $current) {
+                $allresponses[$current->id][$user->id] = clone $allresponses[0][$user->id];
+                $allresponses[$current->id][$user->id]->timemodified = $current->timeuseradded;
+            }
 
-    $responses = choicegroup_get_responses($choicegroup, $ctx);
-    foreach ($responses as $response){
-        if (isset($users[$response->userid])) {
-            $allresponses[$response->groupid][$response->userid] = clone $users[$response->userid];
-            $allresponses[$response->groupid][$response->userid]->timemodified = $response->timeadded;
-
-            unset($allresponses[0][$response->userid]);
+            // Remove from unanswered column.
+            unset($allresponses[0][$user->id]);
         }
     }
-   return $allresponses;
-}
-
-/* Return an array with the options selected of users of the $choicegroup 
- * 
- * @param object $choicegroup choicegroup record
- * @param object $cm course module object
- * @return array of selected options by all users 
-*/
-function choicegroup_get_responses($choicegroup, $cm){
-
-    global $DB;
-
-    if (is_numeric($choicegroup)) {
-        $choicegroupid = $choicegroup;
-    } else {
-        $choicegroupid = $choicegroup->id;
-    }
-
-    $params1 = array('choicegroupid'=>$choicegroupid);
-    list($esql, $params2) = get_enrolled_sql($cm, 'mod/choicegroup:choose', 0);
-    $params = array_merge($params1, $params2);
-
-    $sql = 'SELECT gm.* FROM {user} u JOIN ('.$esql.') je ON je.id = u.id
-        JOIN {groups_members} gm ON gm.userid = u.id AND groupid IN (
-        SELECT groupid FROM {choicegroup_options} WHERE choicegroupid=:choicegroupid)
-        WHERE u.deleted = 0 ORDER BY u.lastname ASC,u.firstname ASC';
-
-    return $DB->get_records_sql($sql, $params);
+    return $allresponses;
 }
 
 /**
@@ -1028,11 +965,11 @@ function choicegroup_get_completion_state($course, $cm, $userid, $type) {
     $choicegroup = $DB->get_record('choicegroup', array('id'=>$cm->instance), '*', MUST_EXIST);
 
     // If completion option is enabled, evaluate it and return true/false
-    if($choicegroup->completionsubmit) {
+    if ($choicegroup->completionsubmit) {
         $useranswer = choicegroup_get_user_answer($choicegroup, $userid);
         return $useranswer !== false;
     } else {
-        // Completion option is not enabled so just return $type
+        // Completion option is not enabled so just return $type.
         return $type;
     }
 }
@@ -1045,7 +982,7 @@ function choicegroup_get_completion_state($course, $cm, $userid, $type) {
  * @param stdClass $currentcontext Current context of block
  */
 function choicegroup_page_type_list($pagetype, $parentcontext, $currentcontext) {
-    $module_pagetype = array('mod-choicegroup-*'=>get_string('page-mod-choicegroup-x', 'choice'));
+    $module_pagetype = array('mod-choicegroup-*' => get_string('page-mod-choicegroup-x', 'choice'));
     return $module_pagetype;
 }
 
@@ -1056,3 +993,32 @@ function choicegroup_get_sort_options() {
         CHOICEGROUP_SORTGROUPS_NAME => get_string('name', 'choicegroup')
     );
 }
+
+function choicegroup_insert_group($course, $choicegroupid, $choicegroupname) {
+    global $DB;
+    $selectparams['courseid'] = $course;
+
+    $groupsincourse = $DB->get_recordset_select('groups', 'courseid = ? AND name like "%' .$choicegroupname .'%" ', $selectparams, "id desc limit 1", 'name');
+
+    $lastgroup = '0';
+    $groupnamelen = strlen($choicegroupname);
+
+    foreach ($groupsincourse as $group) {
+        $lastgroup = substr($group->name, $groupnamelen, 2);
+    }
+    $nextgroup = $lastgroup + 1;
+    if (strlen ($nextgroup) == 1)
+        $nextgroup = '0' .$nextgroup;
+
+    $nextgroup = $choicegroupname.$nextgroup;
+
+    $now = time();
+    $params = array("timecreated" => $now, "timemodified" => $now, "courseid" => $course, "descriptionformat" => '1',
+        "picture" => '0', "hidepicture" => '0', "name" => $nextgroup);
+
+    $groupid = $DB->insert_record_raw('groups', $params);
+
+    $cgparams = array("choicegroupid" => $choicegroupid, "groupid" => $groupid, "maxanswers" => '2', "timemodified" => $now);
+    $DB->insert_record_raw('choicegroup_options', $cgparams);
+    cache_helper::invalidate_by_definition('core', 'groupdata', array(), array($course));
+}
diff --git a/mod/choicegroup/mod_form.php b/mod/choicegroup/mod_form.php
old mode 100644
new mode 100755
index 378e0ae..f9fb2ff
--- a/mod/choicegroup/mod_form.php
+++ b/mod/choicegroup/mod_form.php
@@ -26,19 +26,22 @@
 
 defined('MOODLE_INTERNAL') || die();
 
-require_once ($CFG->dirroot.'/course/moodleform_mod.php');
+require_once($CFG->dirroot.'/course/moodleform_mod.php');
+$PAGE->requires->jquery();
+$PAGE->requires->js(new moodle_url($CFG->wwwroot . '/mod/choicegroup/js/applylimit.js'));
+
 
 class mod_choicegroup_mod_form extends moodleform_mod {
 
-	function definition() {
-		global $CFG, $CHOICEGROUP_SHOWRESULTS, $CHOICEGROUP_PUBLISH, $CHOICEGROUP_DISPLAY, $DB, $COURSE, $PAGE;
+    function definition() {
+        global $CFG, $CHOICEGROUP_SHOWRESULTS, $CHOICEGROUP_PUBLISH, $CHOICEGROUP_DISPLAY, $DB, $COURSE, $PAGE;
 
-		$mform    =& $this->_form;
+        $mform    =& $this->_form;
 
 		//-------------------------------------------------------------------------------
 		$mform->addElement('header', 'general', get_string('general', 'form'));
 
-		$mform->addElement('text', 'name', get_string('choicegroupname', 'choicegroup'), array('size'=>'64'));
+		$mform->addElement('text', 'name', get_string('choicegroupname', 'choicegroup'), array('placeholder'=>'שם זה יהווה בסיס לשם הקבוצות אשר יווצרו על ידי הסטודנטים','size' => '64'));
 		if (!empty($CFG->formatstringstriptags)) {
 			$mform->setType('name', PARAM_TEXT);
 		} else {
@@ -62,15 +65,11 @@ class mod_choicegroup_mod_form extends moodleform_mod {
 		$db_groups = $DB->get_records('groups', array('courseid' => $COURSE->id));
 		foreach ($db_groups as $group) {
 			$groups[$group->id] = new stdClass();
-			$groups[$group->id]->name = format_string($group->name);
+			$groups[$group->id]->name = $group->name;
 			$groups[$group->id]->mentioned = false;
 			$groups[$group->id]->id = $group->id;
 		}
 
-		if (count($db_groups) < 2) {
-			print_error('pleasesetgroups', 'choicegroup', new moodle_url('/course/view.php?id='.$COURSE->id));
-		}
-
 		$db_groupings = $DB->get_records('groupings', array('courseid' => $COURSE->id));
         $groupings = array();
         if ($db_groupings) {
@@ -106,94 +105,52 @@ class mod_choicegroup_mod_form extends moodleform_mod {
 		$mform->addElement('selectyesno', 'allowupdate', get_string("allowupdate", "choicegroup"));
 
 		$mform->addElement('selectyesno', 'showunanswered', get_string("showunanswered", "choicegroup"));
-
-		$menuoptions = array();
-		$menuoptions[0] = get_string('disable');
-		$menuoptions[1] = get_string('enable');
-		$mform->addElement('select', 'limitanswers', get_string('limitanswers', 'choicegroup'), $menuoptions);
-		$mform->addHelpButton('limitanswers', 'limitanswers', 'choicegroup');
-
-		$mform->addElement('text', 'generallimitation', get_string('generallimitation', 'choicegroup'), array('size' => '6'));
-		$mform->setType('generallimitation', PARAM_INT);
-		$mform->disabledIf('generallimitation', 'limitanswers', 'neq', 1);
-		$mform->addRule('generallimitation', get_string('error'), 'numeric', 'extraruledata', 'client', false, false);
-		$mform->setDefault('generallimitation', 0);
-		$mform->addElement('button', 'setlimit', get_string('applytoallgroups', 'choicegroup'));
-		$mform->disabledIf('setlimit', 'limitanswers', 'neq', 1);
-
+		
+		$mform->addElement('selectyesno', 'allowcreategroup', get_string("allowcreategroup", "choicegroup"));
+        $mform->setDefault('allowcreategroup', 1);
+
+        $menuoptions = array();
+        $menuoptions[0] = get_string('disable');
+        $menuoptions[1] = get_string('enable');
+        $mform->addElement('select', 'limitanswers', get_string('limitanswers', 'choicegroup'), $menuoptions);
+        $mform->addHelpButton('limitanswers', 'limitanswers', 'choicegroup');
+
+        $mform->addElement('text', 'generallimitation', get_string('generallimitation', 'choicegroup'), array('size' => '6'));
+        $mform->setType('generallimitation', PARAM_INT);
+        $mform->disabledIf('generallimitation', 'limitanswers', 'neq', 1);
+        $mform->addRule('generallimitation', get_string('error'), 'numeric', 'extraruledata', 'client', false, false);
+        $mform->setDefault('generallimitation', 0);
+        $mform->addElement('button', 'setlimit', get_string('applytoallgroups', 'choicegroup'));
+        $mform->disabledIf('setlimit', 'limitanswers', 'neq', 1);
 
 		// -------------------------
 		// Generate the groups section of the form
 		// -------------------------
 
-
-		$mform->addElement('header', 'groups', get_string('groupsheader', 'choicegroup'));
-		$mform->addElement('html', '<fieldset class="clearfix">
-				<div class="fcontainer clearfix">
-				<div id="fitem_id_option_0" class="fitem fitem_fselect ">
-				<div class="fitemtitle"><label for="id_option_0">'.get_string('groupsheader', 'choicegroup').'</label><span class="helptooltip"><a href="'. $CFG->wwwroot .'/help.php?component=choicegroup&amp;identifier=choicegroupoptions&amp;lang='.current_language().'" title="'.get_string('choicegroupoptions_help', 'choicegroup').'" aria-haspopup="true" target="_blank"><img src="'.$CFG->wwwroot.'/theme/image.php?theme='.$PAGE->theme->name.'&component=core&image=help" alt="'.get_string('choicegroupoptions_help', 'choicegroup').'" class="iconhelp"></a></span></div><div class="felement fselect">
-                <div class="tablecontainer">
-				<table><tr><th>'.get_string('available_groups', 'choicegroup').'</th><th>&nbsp;</th><th>'.get_string('selected_groups', 'choicegroup').'</th><th>&nbsp;</th></tr><tr><td style="vertical-align: top">');
-
-		$mform->addElement('html','<select id="availablegroups" name="availableGroups" multiple size=10 style="width:200px">');
-		foreach ($groupings as $groupingID => $grouping) {
-			// find all linked groups to this grouping
-			if (isset($grouping->linkedGroupsIDs) && count($grouping->linkedGroupsIDs) > 1) { // grouping has more than 2 items, thus we should display it (otherwise it would be clearer to display only that single group alone)
-				$mform->addElement('html', '<option value="'.$groupingID.'" style="font-weight: bold" class="grouping">'.get_string('char_bullet_expanded', 'choicegroup').$grouping->name.'</option>');
-				foreach ($grouping->linkedGroupsIDs as $linkedGroupID) {
-					if (isset($groups[$linkedGroupID])) {
-						$mform->addElement('html', '<option value="'.$linkedGroupID.'" class="group nested">&nbsp;&nbsp;&nbsp;&nbsp;'.$groups[$linkedGroupID]->name.'</option>');
-						$groups[$linkedGroupID]->mentioned = true;
-					}
-				}
-			}
-		}
-		foreach ($groups as $group) {
-			if ($group->mentioned === false) {
-				$mform->addElement('html', '<option value="'.$group->id.'" class="group toplevel">'.format_string($group->name).'</option>');
-			}
-		}
-		$mform->addElement('html','</select><br><button name="expandButton" type="button" disabled id="expandButton">'.get_string('expand_all_groupings', 'choicegroup').'</button><button name="collapseButton" type="button" disabled id="collapseButton">'.get_string('collapse_all_groupings', 'choicegroup').'</button><br>'.get_string('double_click_grouping_legend', 'choicegroup').'<br>'.get_string('double_click_group_legend', 'choicegroup'));
-
-
-
-
-
-
-		$mform->addElement('html','
-				</td><td><button id="addGroupButton" name="add" type="button" disabled>'.get_string('add', 'choicegroup').'</button><div><button name="remove" type="button" disabled id="removeGroupButton">'.get_string('del', 'choicegroup').'</button></div></td>');
-		$mform->addElement('html','<td style="vertical-align: top"><select id="id_selectedGroups" name="selectedGroups" multiple size=10 style="width:200px"></select></td>');
-
-		$mform->addElement('html','<td><div><div id="fitem_id_limit_0" class="fitem fitem_ftext" style="display:none"><div class=""><label for="id_limit_0" id="label_for_limit_ui">'.get_string('set_limit_for_group', 'choicegroup').'</label></div><div class="ftext">
-				<input class="mod-choicegroup-limit-input" type="text" value="0" id="ui_limit_input" disabled="disabled"></div></div></div></td></tr></table></div>
-				</div></div>
-
-				</div>
-				</fieldset>');
-
-		$mform->setExpanded('groups');
-
-		foreach ($groups as $group) {
-			$mform->addElement('hidden', 'group_' . $group->id . '_limit', '', array('id' => 'group_' . $group->id . '_limit', 'class' => 'limit_input_node'));
-			$mform->setType('group_' . $group->id . '_limit', PARAM_RAW);
-		}
-
-
-		$serializedselectedgroupsValue = '';
-		if (isset($this->_instance) && $this->_instance != '') {
-			// this is presumably edit mode, try to fill in the data for javascript
-			$cg = choicegroup_get_choicegroup($this->_instance);
-			foreach ($cg->option as $optionID => $groupID) {
-				$serializedselectedgroupsValue .= ';' . $groupID;
-				$mform->setDefault('group_' . $groupID . '_limit', $cg->maxanswers[$optionID]);
-			}
-
-		}
-
-
-		$mform->addElement('hidden', 'serializedselectedgroups', $serializedselectedgroupsValue, array('id' => 'serializedselectedgroups'));
-		$mform->setType('serializedselectedgroups', PARAM_RAW);
-
+        $mform->addElement('header', 'groups', get_string('groupsheader', 'choicegroup'));
+        $repeatarray = array();
+        $repeatarray[] = $mform->createElement('text', 'option', get_string('groupno', 'choicegroup'));
+        $repeatarray[] = $mform->createElement('text', 'limit', get_string('set_limit_for_group', 'choicegroup'));
+        $repeatarray[] = $mform->createElement('hidden', 'optionid', 0);
+        $repeatarray[] = $mform->createElement('hidden', 'groupid', 0);
+
+        if ($this->_instance){
+            $repeatno = $DB->count_records('choicegroup_options', array('choicegroupid' => $this->_instance));
+        } else {
+            $repeatno = 5;
+        }
+		
+        $repeateloptions = array();
+        $repeateloptions['limit']['default'] = 2;
+        $repeateloptions['limit']['disabledif'] = array('limitanswers', 'eq', 0);
+        $repeateloptions['limit']['rule'] = 'numeric';
+        $repeateloptions['limit']['type'] = PARAM_INT;
+
+        $mform->setType('option', PARAM_CLEANHTML);
+        $mform->setType('optionid', PARAM_INT);
+        $mform->setType('groupid', PARAM_INT);
+		
+        $this->repeat_elements($repeatarray, $repeatno,$repeateloptions, 'option_repeats', 'option_add_fields', 3, 'add {no} groups', true);
         switch (get_config('choicegroup', 'sortgroupsby')) {
             case CHOICEGROUP_SORTGROUPS_CREATEDATE:
                 $systemdefault = array(CHOICEGROUP_SORTGROUPS_SYSTEMDEFAULT => get_string('systemdefault_date', 'choicegroup'));
@@ -211,26 +168,45 @@ class mod_choicegroup_mod_form extends moodleform_mod {
 		// Go on the with the remainder of the form
 		// -------------------------
 
+        $mform->addElement('header', 'timerestricthdr', get_string('timerestrict', 'choicegroup'));
+        $mform->addElement('checkbox', 'timerestrict', get_string('timerestrict', 'choicegroup'));
 
-		//-------------------------------------------------------------------------------
-		$mform->addElement('header', 'timerestricthdr', get_string('timerestrict', 'choicegroup'));
-		$mform->addElement('checkbox', 'timerestrict', get_string('timerestrict', 'choicegroup'));
-
-		$mform->addElement('date_time_selector', 'timeopen', get_string("choicegroupopen", "choicegroup"));
-		$mform->disabledIf('timeopen', 'timerestrict');
+        $mform->addElement('date_time_selector', 'timeopen', get_string("choicegroupopen", "choicegroup"));
+        $mform->disabledIf('timeopen', 'timerestrict');
 
-		$mform->addElement('date_time_selector', 'timeclose', get_string("choicegroupclose", "choicegroup"));
-		$mform->disabledIf('timeclose', 'timerestrict');
+        $mform->addElement('date_time_selector', 'timeclose', get_string("choicegroupclose", "choicegroup"));
+        $mform->disabledIf('timeclose', 'timerestrict');
 
-		//-------------------------------------------------------------------------------
-		$this->standard_coursemodule_elements();
-		//-------------------------------------------------------------------------------
-		$this->add_action_buttons();
+        //-------------------------------------------------------------------------------
+        $this->standard_coursemodule_elements();
+        //-------------------------------------------------------------------------------
+        $this->add_action_buttons();
 }
 
 function data_preprocessing(&$default_values){
 	global $DB;
-	$this->js_call();
+	if (!empty($this->_instance)) {
+				$i = 0;
+				
+				$sql = "SELECT c.id, c.groupid, c.maxanswers, g.name
+                 		FROM {choicegroup_options} c
+                 		JOIN {groups} g 
+							ON c.groupid = g.id
+                 		WHERE c.choicegroupid = :choicegroupid";
+				
+				$params = array(
+						'choicegroupid' => $this->_instance
+				);
+				
+				$groups = $DB->get_records_sql($sql, $params);
+				foreach ($groups as $group) {
+					$default_values['optionid['.$i.']'] = $group->id;
+					$default_values['option['.$i.']'] = $group->name;
+					$default_values['limit['.$i.']'] = $group->maxanswers;
+					$default_values['groupid['.$i.']'] = $group->groupid;
+					$i+=1;
+				}
+			}
 
 	if (empty($default_values['timeopen'])) {
 		$default_values['timerestrict'] = 0;
@@ -240,32 +216,12 @@ function data_preprocessing(&$default_values){
 
 	}
 
-	function validation($data, $files) {
-		$errors = parent::validation($data, $files);
-
-		$groupIDs = explode(';', $data['serializedselectedgroups']);
-		$groupIDs = array_diff( $groupIDs, array( '' ) );
-
-		if (array_key_exists('multipleenrollmentspossible', $data) && $data['multipleenrollmentspossible'] === '1') {
-			if (count($groupIDs) < 1) {
-				$errors['serializedselectedgroups'] = get_string('fillinatleastoneoption', 'choicegroup');
-			}
-		} else {
-			if (count($groupIDs) < 2) {
-				$errors['serializedselectedgroups'] = get_string('fillinatleasttwooptions', 'choicegroup');
-			}
-		}
-
-
-		return $errors;
-	}
-
 	function get_data() {
 		$data = parent::get_data();
 		if (!$data) {
 			return false;
 		}
-		// Set up completion section even if checkbox is not ticked
+		// Set up completion section even if checkbox is not ticked.
 		if (empty($data->completionsection)) {
 			$data->completionsection=0;
 		}
@@ -290,6 +246,4 @@ function data_preprocessing(&$default_values){
 			$PAGE->requires->string_for_js($string, 'choicegroup');
 		}
 	}
-
 }
-
diff --git a/mod/choicegroup/pix/column.png b/mod/choicegroup/pix/column.png
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/pix/icon.gif b/mod/choicegroup/pix/icon.gif
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/pix/icon.svg b/mod/choicegroup/pix/icon.svg
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/pix/row.png b/mod/choicegroup/pix/row.png
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/renderer.php b/mod/choicegroup/renderer.php
old mode 100644
new mode 100755
index c623d32..7f81e8e
--- a/mod/choicegroup/renderer.php
+++ b/mod/choicegroup/renderer.php
@@ -32,59 +32,51 @@ define ('CHOICEGROUP_DISPLAY_VERTICAL_LAYOUT', 1);
 class mod_choicegroup_renderer extends plugin_renderer_base {
 
     /**
-     * @param      $options
-     * @param      $coursemoduleid
+     * Returns HTML to display choicegroups of option
+     * @param object $options
+     * @param int  $coursemoduleid
      * @param bool $vertical
-     * @param bool $publish
-     * @param bool $limitanswers
-     * @param bool $showresults
-     * @param bool $current
-     * @param bool $choicegroupopen
-     * @param bool $disabled
-     * @param bool $multipleenrollmentspossible
-     *
      * @return string
      */
-    public function display_options($options, $coursemoduleid, $vertical = true, $publish = false, $limitanswers = false, $showresults = false, $current = false, $choicegroupopen = false, $disabled = false, $multipleenrollmentspossible = false) {
+    public function display_options($options, $coursemoduleid, $vertical = true, $publish = false, $limitanswers = false, $showresults = false, $current = false, $choicegroupopen = false, $disabled = false, $multipleenrollmentspossible = false, $allowcreategroup=true) {
         global $DB, $PAGE, $choicegroup_groups, $choicegroup_users;
 
         $PAGE->requires->js('/mod/choicegroup/javascript.js');
 
         $target = new moodle_url('/mod/choicegroup/view.php');
-        $attributes = array('method'=>'POST', 'action'=>$target, 'class'=> 'tableform');
+        $attributes = array('method' => 'POST', 'action' => $target, 'class' => 'tableform');
 
         $html = html_writer::start_tag('form', $attributes);
-        $html .= html_writer::start_tag('div', array('class'=>'tablecontainer'));
-        $html .= html_writer::start_tag('table', array('class'=>'choicegroups' ));
+        $html .= html_writer::start_tag('div', array('class' => 'tablecontainer'));
+        $html .= html_writer::start_tag('table', array('class' => 'choicegroups' ));
 
         $html .= html_writer::start_tag('tr');
-        $html .= html_writer::tag('th', get_string('choice', 'choicegroup'), array('class'=>'width10'));
+        $html .= html_writer::tag('th', get_string('choice', 'choicegroup'));
 
-        $group = get_string('group').' ';
+        $group = get_string('group');
         $group .= html_writer::tag('a', get_string('showdescription', 'choicegroup'), array('class' => 'choicegroup-descriptiondisplay choicegroup-descriptionshow', 'href' => '#'));
         $group .= html_writer::tag('a', get_string('hidedescription', 'choicegroup'), array('class' => 'choicegroup-descriptiondisplay choicegroup-descriptionhide hidden', 'href' => '#'));
-        $html .= html_writer::tag('th', $group, array('class'=>'width40'));
+        $html .= html_writer::tag('th', $group);
 
         if ( $showresults == CHOICEGROUP_SHOWRESULTS_ALWAYS or
         ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER and $current) or
         ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and !$choicegroupopen)) {
             if ($limitanswers) {
-                $html .= html_writer::tag('th', get_string('members/max', 'choicegroup'), array('class'=>'width10'));
-            }
-            else {
-                $html .= html_writer::tag('th', get_string('members/', 'choicegroup'), array('class'=>'width10'));
+                $html .= html_writer::tag('th', get_string('members/max', 'choicegroup'));
+            } else {
+                $html .= html_writer::tag('th', get_string('members/', 'choicegroup'));
             }
             if ($publish == CHOICEGROUP_PUBLISH_NAMES) {
-                $membersdisplay_html = html_writer::tag('a', get_string('show'), array('class' => 'choicegroup-memberdisplay choicegroup-membershow', 'href' => '#'));
-                $membersdisplay_html .= html_writer::tag('a', get_string('hide'), array('class' => 'choicegroup-memberdisplay choicegroup-memberhide hidden', 'href' => '#'));
-                $html .= html_writer::tag('th', get_string('groupmembers', 'choicegroup') .' '. $membersdisplay_html, array('class'=>'width40'));
+                $membersdisplay_html = html_writer::tag('a', get_string('hide'), array('class' => 'choicegroup-memberdisplay choicegroup-membershow', 'href' => '#'));
+                $membersdisplay_html .= html_writer::tag('a', get_string('show'), array('class' => 'choicegroup-memberdisplay choicegroup-memberhide hidden', 'href' => '#'));
+                $html .= html_writer::tag('th', get_string('groupmembers', 'choicegroup') . $membersdisplay_html);
             }
         }
         $html .= html_writer::end_tag('tr');
 
         $availableoption = count($options['options']);
         if ($multipleenrollmentspossible == 1) {
-            $i=0;
+            $i = 0;
             $answer_to_groupid_mappings = '';
         }
         $initiallyHideSubmitButton = false;
@@ -102,8 +94,8 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
                 $html .= html_writer::tag('tr', $cell);
                 break;
             }
-            $html .= html_writer::start_tag('tr', array('class'=>'option'));
-            $html .= html_writer::start_tag('td', array('class'=>'center'));
+            $html .= html_writer::start_tag('tr', array('class' => 'option'));
+            $html .= html_writer::start_tag('td', array());
 
             if ($multipleenrollmentspossible == 1) {
                 $option->attributes->name = 'answer_'.$i;
@@ -118,39 +110,38 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
                 }
             }
 
-            $labeltext = html_writer::tag('label', format_string($group->name), array('for' => 'choiceid_' . $option->attributes->value));
+            $labeltext = html_writer::tag('label', $group->name, array('for' => 'choiceid_' . $option->attributes->value));
             $group_members = $DB->get_records('groups_members', array('groupid' => $group->id));
             $group_members_names = array();
             foreach ($group_members as $group_member) {
                 $group_user = (isset($choicegroup_users[$group_member->userid])) ? ($choicegroup_users[$group_member->userid]) : ($DB->get_record('user', array('id' => $group_member->userid)));
-                $group_members_names[] = $group_user->lastname . ', ' . $group_user->firstname;
+                $group_members_names[] = $group_user->lastname .' ' .$group_user->firstname . ', ';
             }
             sort($group_members_names);
             if (!empty($option->attributes->disabled) || ($limitanswers && sizeof($group_members) >= $option->maxanswers) && empty($option->attributes->checked)) {
                 $labeltext .= ' ' . html_writer::tag('em', get_string('full', 'choicegroup'));
-                $option->attributes->disabled=true;
+                $option->attributes->disabled = true;
                 $availableoption--;
             }
-            $labeltext .= html_writer::tag('div', format_text($group->description), array('class' => 'choicegroups-descriptions hidden'));
+            $labeltext .= html_writer::tag('div', $group->description, array('class' => 'choicegroups-descriptions hidden'));
             if ($disabled) {
-                $option->attributes->disabled=true;
+                $option->attributes->disabled = true;
             }
             $attributes = (array) $option->attributes;
             $attributes['id'] = 'choiceid_' . $option->attributes->value;
             $html .= html_writer::empty_tag('input', $attributes);
             $html .= html_writer::end_tag('td');
-            $html .= html_writer::tag('td', $labeltext);
-
+            $html .= html_writer::tag('td', $labeltext, array('for' => $option->attributes->name));
 
             if ( $showresults == CHOICEGROUP_SHOWRESULTS_ALWAYS or
             ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER and $current) or
             ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and !$choicegroupopen)) {
 
                 $maxanswers = ($limitanswers) ? (' / '.$option->maxanswers) : ('');
-                $html .= html_writer::tag('td', sizeof($group_members_names).$maxanswers, array('class' => 'center'));
+                $html .= html_writer::tag('td', sizeof($group_members_names).$maxanswers);
                 if ($publish == CHOICEGROUP_PUBLISH_NAMES) {
-                    $group_members_html = html_writer::tag('div', implode('<br />', $group_members_names), array('class' => 'choicegroups-membersnames hidden', 'id' => 'choicegroup_'.$option->attributes->value));
-                    $html .= html_writer::tag('td', $group_members_html, array('class' => 'center'));
+                    $group_members_html = html_writer::tag('div', implode('<br />', $group_members_names), array('class' => 'choicegroups-membersnames', 'id' => 'choicegroup_'.$option->attributes->value));
+                    $html .= html_writer::tag('td', $group_members_html);
                 }
             }
             $html .= html_writer::end_tag('tr');
@@ -160,27 +151,33 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
         if ($multipleenrollmentspossible == 1) {
             $html .= '<input type="hidden" name="number_of_groups" value="'.$i.'">' . $answer_to_groupid_mappings;
         }
-        $html .= html_writer::tag('div', '', array('class'=>'clearfloat'));
-        $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'sesskey', 'value'=>sesskey()));
-        $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'id', 'value'=>$coursemoduleid));
+        $html .= html_writer::tag('div', '', array('class' => 'clearfloat'));
+        $html .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'sesskey', 'value' => sesskey()));
+        $html .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'id', 'value' => $coursemoduleid));
 
         if (!empty($options['hascapability']) && ($options['hascapability'])) {
             if ($availableoption < 1) {
-               $html .= html_writer::tag('p', get_string('choicegroupfull', 'choicegroup'));
+                $html .= html_writer::tag('td', get_string('choicegroupfull', 'choicegroup'));
             } else {
                 if (!$disabled) {
-                    $html .= html_writer::empty_tag('input', array('type'=>'submit', 'value'=>get_string('savemychoicegroup','choicegroup'), 'class'=>'button modchoicegroupsumbit', 'style' => $initiallyHideSubmitButton?'display: none':''));
+                    $html .= html_writer::empty_tag('input', array('type' => 'submit', 'value' => get_string('savemychoicegroup', 'choicegroup'), 'class' => 'button', 'style' => $initiallyHideSubmitButton ? 'display: none' : ''));
                 }
             }
 
-            if (!empty($options['allowupdate']) && ($options['allowupdate']) && !($multipleenrollmentspossible == 1) && !$disabled) {
-                $url = new moodle_url('view.php', array('id'=>$coursemoduleid, 'action'=>'delchoicegroup', 'sesskey'=>sesskey()));
-                $html .= ' ' . html_writer::link($url, get_string('removemychoicegroup','choicegroup'));
+            if (!empty($options['allowupdate']) && ($options['allowupdate']) && !($multipleenrollmentspossible == 1)) {
+                $url = new moodle_url('view.php', array('id' => $coursemoduleid, 'action' => 'delchoicegroup', 'sesskey' => sesskey()));
+                $html .= ' ' . html_writer::link($url, get_string('removemychoicegroup', 'choicegroup'), array('class' => 'button blue'));
             }
-        } elseif (!isloggedin() || isguestuser()) { // Only display message if user is not logged in or is a guest user.
-            $html .= ' '.html_writer::tag('p', get_string('havetologin', 'choicegroup'));
+        } else {
+            $html .= html_writer::tag('td', get_string('havetologin', 'choicegroup'));
+        }
+
+        if ($allowcreategroup) {
+            $ngurl = new moodle_url('view.php', array('id' => $coursemoduleid, 'action' => 'newgroup', 'sesskey' => sesskey()));
+            $html .= '</br>' . html_writer::link($ngurl, get_string('newgroup', 'choicegroup'));
         }
 
+        $html .= html_writer::end_tag('table');
         $html .= html_writer::end_tag('form');
 
         return $html;
@@ -193,15 +190,15 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
      * @return string
      */
     public function display_result($choicegroups, $forcepublish = false) {
-        if (empty($forcepublish)) { //allow the publish setting to be overridden
+        if (empty($forcepublish)) { // Allow the publish setting to be overridden.
             $forcepublish = $choicegroups->publish;
         }
 
         $displaylayout = ($choicegroups) ? ($choicegroups->display) : (CHOICEGROUP_DISPLAY_HORIZONTAL);
 
-        if ($forcepublish) {  //CHOICEGROUP_PUBLISH_NAMES
+        if ($forcepublish) {  // CHOICEGROUP_PUBLISH_NAMES.
             return $this->display_publish_name_vertical($choicegroups);
-        } else { //CHOICEGROUP_PUBLISH_ANONYMOUS';
+        } else { // CHOICEGROUP_PUBLISH_ANONYMOUS'.
             if ($displaylayout == CHOICEGROUP_DISPLAY_HORIZONTAL_LAYOUT) {
                 return $this->display_publish_anonymous_horizontal($choicegroups);
             }
@@ -221,25 +218,25 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
         global $context;
 
         if (!has_capability('mod/choicegroup:downloadresponses', $context)) {
-            return; // only the (editing)teacher can see the diagram
+            return; // Only the (editing)teacher can see the diagram.
         }
         if (!$choicegroups) {
-            return; // no answers yet, so don't bother
+            return; // No answers yet, so don't bother.
         }
 
-        $html ='';
-        $html .= html_writer::tag('h2',format_string(get_string("responses", "choicegroup")), array('class'=>'main'));
+        $html = '';
+        $html .= html_writer::tag('h2', format_string(get_string("responses", "choicegroup")), array('class' => 'main'));
 
-        $attributes = array('method'=>'POST');
+        $attributes = array('method' => 'POST');
         $attributes['action'] = new moodle_url($PAGE->url);
         $attributes['id'] = 'attemptsform';
         $attributes['class'] = 'tableform';
 
         if ($choicegroups->viewresponsecapability) {
             $html .= html_writer::start_tag('form', $attributes);
-            $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'id', 'value'=> $choicegroups->coursemoduleid));
-            $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'sesskey', 'value'=> sesskey()));
-            $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'mode', 'value'=>'overview'));
+            $html .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'id', 'value' => $choicegroups->coursemoduleid));
+            $html .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'sesskey', 'value' => sesskey()));
+            $html .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'mode', 'value' => 'overview'));
         }
 
         $table = new html_table();
@@ -256,16 +253,16 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
         foreach ($choicegroups->options as $optionid => $options) {
             $coldata = '';
             if ($choicegroups->showunanswered && $optionid == 0) {
-                $coldata .= html_writer::tag('div', format_string(get_string('notanswered', 'choicegroup')), array('class'=>'option'));
+                $coldata .= html_writer::tag('div', format_string(get_string('notanswered', 'choicegroup')), array('class' => 'option'));
             } else if ($optionid > 0) {
-                $coldata .= html_writer::tag('div', format_string(choicegroup_get_option_text($choicegroups, $choicegroups->options[$optionid]->groupid)), array('class'=>'option'));
+                $coldata .= html_writer::tag('div', format_string(choicegroup_get_option_text($choicegroups, $choicegroups->options[$optionid]->groupid)), array('class' => 'option'));
             }
             $numberofuser = 0;
             if (!empty($options->user) && count($options->user) > 0) {
                 $numberofuser = count($options->user);
             }
 
-            $coldata .= html_writer::tag('div', ' ('.$numberofuser. ')', array('class'=>'numberofuser', 'title' => get_string('numberofuser', 'choicegroup')));
+            $coldata .= html_writer::tag('div', ' ('.$numberofuser. ')', array('class' => 'numberofuser', 'title' => get_string('numberofuser', 'choicegroup')));
             $columns[] = $coldata;
         }
 
@@ -279,22 +276,22 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
                 if (!empty($options->user)) {
                     foreach ($options->user as $user) {
                         $data = '';
-                        if (empty($user->imagealt)){
+                        if (empty($user->imagealt)) {
                             $user->imagealt = '';
                         }
 
                         if ($choicegroups->viewresponsecapability && $choicegroups->deleterepsonsecapability  && $optionid > 0) {
-                            $attemptaction = html_writer::checkbox('grpsmemberid[]', $user->grpsmemberid,'');
-                            $data .= html_writer::tag('div', $attemptaction, array('class'=>'attemptaction'));
+                            $attemptaction = html_writer::checkbox('userid[]', $user->id, '');
+                            $data .= html_writer::tag('div', $attemptaction, array('class' => 'attemptaction'));
                         }
-                        $userimage = $this->output->user_picture($user, array('courseid'=>$choicegroups->courseid));
-                        $data .= html_writer::tag('div', $userimage, array('class'=>'image'));
-
-                        $userlink = new moodle_url('/user/view.php', array('id'=>$user->id,'course'=>$choicegroups->courseid));
-                        $name = html_writer::tag('a', fullname($user, $choicegroups->fullnamecapability), array('href'=>$userlink, 'class'=>'username'));
-                        $data .= html_writer::tag('div', $name, array('class'=>'fullname'));
-                        $data .= html_writer::tag('div','', array('class'=>'clearfloat'));
-                        $coldata .= html_writer::tag('div', $data, array('class'=>'user'));
+                    //    $userimage = $this->output->user_picture($user, array('courseid' => $choicegroups->courseid));
+                    //    $data .= html_writer::tag('div', $userimage, array('class' => 'image'));
+
+                        $userlink = new moodle_url('/user/view.php', array('id' => $user->id, 'course' => $choicegroups->courseid));
+                        $name = html_writer::tag('a', fullname($user, $choicegroups->fullnamecapability), array('href' => $userlink, 'class' => 'username'));
+                        $data .= html_writer::tag('div', $name, array('class' => 'fullname'));
+                        $data .= html_writer::tag('div', '', array('class' => 'clearfloat'));
+                        $coldata .= html_writer::tag('div', $data, array('class' => 'user'));
                     }
                 }
             }
@@ -307,28 +304,28 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
         foreach ($columns as $d) {
             $table->colclasses[] = 'data';
         }
-        $html .= html_writer::tag('div', html_writer::table($table), array('class'=>'response tablecontainer'));
+        $html .= html_writer::tag('div', html_writer::table($table), array('class' => 'response tablecontainer'));
 
         $actiondata = '';
         if ($choicegroups->viewresponsecapability && $choicegroups->deleterepsonsecapability) {
             $selecturl = new moodle_url('#');
 
-            $selectallactions = new component_action('click',"checkall");
+            $selectallactions = new component_action('click', "checkall");
             $selectall = new action_link($selecturl, get_string('selectall'), $selectallactions);
             $actiondata .= $this->output->render($selectall) . ' / ';
 
-            $deselectallactions = new component_action('click',"checknone");
+            $deselectallactions = new component_action('click', "checknone");
             $deselectall = new action_link($selecturl, get_string('deselectall'), $deselectallactions);
             $actiondata .= $this->output->render($deselectall);
 
-            $actiondata .= html_writer::tag('label', ' ' . get_string('withselected', 'choice') . ' ', array('for'=>'menuaction'));
+            $actiondata .= html_writer::tag('label', ' ' . get_string('withselected', 'choice') . ' ', array('for' => 'menuaction'));
 
-            $actionurl = new moodle_url($PAGE->url, array('sesskey'=>sesskey(), 'action'=>'delete_confirmation()'));
-            $select = new single_select($actionurl, 'action', array('delete'=>get_string('delete')), null, array(''=>get_string('chooseaction', 'choicegroup')), 'attemptsform');
+            $actionurl = new moodle_url($PAGE->url, array('sesskey' => sesskey(), 'action' => 'delete_confirmation()'));
+            $select = new single_select($actionurl, 'action', array('delete' => get_string('delete')), null, array('' => get_string('chooseaction', 'choicegroup')), 'attemptsform');
 
             $actiondata .= $this->output->render($select);
         }
-        $html .= html_writer::tag('div', $actiondata, array('class'=>'responseaction'));
+        $html .= html_writer::tag('div', $actiondata, array('class' => 'responseaction'));
 
         if ($choicegroups->viewresponsecapability) {
             $html .= html_writer::end_tag('form');
@@ -347,7 +344,7 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
         global $context, $DB, $CHOICEGROUP_COLUMN_WIDTH;
 
         if (!has_capability('mod/choicegroup:downloadresponses', $context)) {
-            return; // only the (editing)teacher can see the diagram
+            return; // Only the (editing)teacher can see the diagram.
         }
 
         $table = new html_table();
@@ -370,33 +367,33 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
             $width = 0;
             $percentageamount = 0;
             $columndata = '';
-            if($choicegroups->numberofuser > 0) {
-               $width = ($CHOICEGROUP_COLUMN_WIDTH * ((float)$numberofuser / (float)$choicegroups->numberofuser));
-               $percentageamount = ((float)$numberofuser/(float)$choicegroups->numberofuser)*100.0;
+            if ($choicegroups->numberofuser > 0) {
+                $width = ($CHOICEGROUP_COLUMN_WIDTH * ((float)$numberofuser / (float)$choicegroups->numberofuser));
+                $percentageamount = ((float)$numberofuser / (float)$choicegroups->numberofuser) * 100.0;
             }
-            $displaydiagram = html_writer::tag('img','', array('style'=>'height:50px; width:'.$width.'px', 'alt'=>'', 'src'=>$this->output->pix_url('row', 'choicegroup')));
+            $displaydiagram = html_writer::tag('img', '', array('style' => 'height:50px; width:'.$width.'px', 'alt' => '', 'src' => $this->output->pix_url('row', 'choicegroup')));
 
-            $skiplink = html_writer::tag('a', get_string('skipresultgraph', 'choicegroup'), array('href'=>'#skipresultgraph'. $optionid, 'class'=>'skip-block'));
-            $skiphandler = html_writer::tag('span', '', array('class'=>'skip-block-to', 'id'=>'skipresultgraph'.$optionid));
+            $skiplink = html_writer::tag('a', get_string('skipresultgraph', 'choicegroup'), array('href' => '#skipresultgraph'. $optionid, 'class' => 'skip-block'));
+            $skiphandler = html_writer::tag('span', '', array('class' => 'skip-block-to', 'id' => 'skipresultgraph'.$optionid));
 
             $graphcell->text = $skiplink . $displaydiagram . $skiphandler;
-            $graphcell->attributes = array('class'=>'graph horizontal');
+            $graphcell->attributes = array('class' => 'graph horizontal');
 
             $datacell = new html_table_cell();
             if ($choicegroups->showunanswered && $optionid == 0) {
-                $columndata .= html_writer::tag('div', format_string(get_string('notanswered', 'choicegroup')), array('class'=>'option'));
+                $columndata .= html_writer::tag('div', format_string(get_string('notanswered', 'choicegroup')), array('class' => 'option'));
             } else if ($optionid > 0) {
-                $columndata .= html_writer::tag('div', format_string(choicegroup_get_option_text($choicegroups, $choicegroups->options[$optionid]->groupid)), array('class'=>'option'));
+                $columndata .= html_writer::tag('div', format_string(choicegroup_get_option_text($choicegroups, $choicegroups->options[$optionid]->groupid)), array('class' => 'option'));
             }
-            $columndata .= html_writer::tag('div', ' ('.$numberofuser.')', array('title'=> get_string('numberofuser', 'choicegroup'), 'class'=>'numberofuser'));
+            $columndata .= html_writer::tag('div', ' ('.$numberofuser.')', array('title' => get_string('numberofuser', 'choicegroup'), 'class' => 'numberofuser'));
 
-            if($choicegroups->numberofuser > 0) {
-               $percentageamount = ((float)$numberofuser/(float)$choicegroups->numberofuser)*100.0;
+            if ($choicegroups->numberofuser > 0) {
+               $percentageamount = ((float)$numberofuser / (float)$choicegroups->numberofuser) * 100.0;
             }
-            $columndata .= html_writer::tag('div', format_float($percentageamount,1). '%', array('class'=>'percentage'));
+            $columndata .= html_writer::tag('div', format_float($percentageamount, 1). '%', array('class' => 'percentage'));
 
             $datacell->text = $columndata;
-            $datacell->attributes = array('class'=>'header');
+            $datacell->attributes = array('class' => 'header');
 
             $row = new html_table_row();
             $row->cells = array($datacell, $graphcell);
@@ -406,12 +403,11 @@ class mod_choicegroup_renderer extends plugin_renderer_base {
         $table->data = $rows;
 
         $html = '';
-        $header = html_writer::tag('h2',format_string(get_string("responses", "choicegroup")));
-        $html .= html_writer::tag('div', $header, array('class'=>'responseheader'));
+        $header = html_writer::tag('h2', format_string(get_string("responses", "choicegroup")));
+        $html .= html_writer::tag('div', $header, array('class' => 'responseheader'));
         $html .= html_writer::table($table);
 
         return $html;
     }
 
 }
-
diff --git a/mod/choicegroup/report.php b/mod/choicegroup/report.php
old mode 100644
new mode 100755
index d671f98..b3abd70
--- a/mod/choicegroup/report.php
+++ b/mod/choicegroup/report.php
@@ -32,7 +32,7 @@ $id         = required_param('id', PARAM_INT);   //moduleid
 $format     = optional_param('format', CHOICEGROUP_PUBLISH_NAMES, PARAM_INT);
 $download   = optional_param('download', '', PARAM_ALPHA);
 $action     = optional_param('action', '', PARAM_ALPHA);
-$grpsmemberids = optional_param_array('grpsmemberid', array(), PARAM_INT); //get array of responses to delete.
+$userids = optional_param_array('userid', array(), PARAM_INT); //get array of responses to delete.
 
 $url = new moodle_url('/mod/choicegroup/report.php', array('id'=>$id));
 if ($format !== CHOICEGROUP_PUBLISH_NAMES) {
@@ -44,6 +44,7 @@ if ($download !== '') {
 if ($action !== '') {
     $url->param('action', $action);
 }
+$PAGE->set_pagelayout('report');
 $PAGE->set_url($url);
 
 if (! $cm = get_coursemodule_from_id('choicegroup', $id)) {
@@ -79,7 +80,7 @@ $event->add_record_snapshot('choicegroup', $choicegroup);
 $event->trigger();
 
 if (data_submitted() && $action == 'delete' && has_capability('mod/choicegroup:deleteresponses',$context) && confirm_sesskey()) {
-    choicegroup_delete_responses($grpsmemberids, $choicegroup, $cm, $course); //delete responses.
+    choicegroup_delete_responses($userids, $choicegroup, $cm, $course); //delete responses.
     redirect("report.php?id=$cm->id");
 }
 
diff --git a/mod/choicegroup/settings.php b/mod/choicegroup/settings.php
old mode 100644
new mode 100755
diff --git a/mod/choicegroup/styles.css b/mod/choicegroup/styles.css
old mode 100644
new mode 100755
index baf56bb..ba816d8
--- a/mod/choicegroup/styles.css
+++ b/mod/choicegroup/styles.css
@@ -65,9 +65,6 @@
     margin-right: auto;
     text-align: left;
 }
-.path-mod-choicegroup.dir-rtl div.tablecontainer {
-    text-align: right;
-}
 .path-mod-choicegroup div.border {
     border: 1px #ccc solid;
 }
diff --git a/mod/choicegroup/version.php b/mod/choicegroup/version.php
old mode 100644
new mode 100755
index 5d4ed20..3389458
--- a/mod/choicegroup/version.php
+++ b/mod/choicegroup/version.php
@@ -26,10 +26,10 @@
 
 defined('MOODLE_INTERNAL') || die();
 
-$plugin->version  = 2017092100;
+$plugin->version  = 2015122801;
 $plugin->requires  = 2014050800; // Moodle 2.7
 $plugin->maturity  = MATURITY_STABLE;
-$plugin->release = '1.9.7 for Moodle 2.7-3.3 (Build: 2017092100)';
+$plugin->release = '1.9 for Moodle 2.7-3.0 (Build: 2015121000)';
 
 $plugin->component = 'mod_choicegroup';
 $plugin->cron = 0;
diff --git a/mod/choicegroup/view.php b/mod/choicegroup/view.php
old mode 100644
new mode 100755
index 4972d4d..356509e
--- a/mod/choicegroup/view.php
+++ b/mod/choicegroup/view.php
@@ -68,7 +68,7 @@ $eventparams = array(
 );
 
 $current = choicegroup_get_user_answer($choicegroup, $USER);
-if ($action == 'delchoicegroup' and confirm_sesskey() and is_enrolled($context, NULL, 'mod/choicegroup:choose') and $choicegroup->allowupdate and !($choicegroup->timeclose and (time() > $choicegroup->timeclose))) {
+if ($action == 'delchoicegroup' and confirm_sesskey() and is_enrolled($context, NULL, 'mod/choicegroup:choose') and $choicegroup->allowupdate) {
     // user wants to delete his own choice:
     if ($current !== false) {
         if (groups_is_member($current->id, $USER->id)) {
@@ -89,6 +89,11 @@ if ($action == 'delchoicegroup' and confirm_sesskey() and is_enrolled($context,
     }
 }
 
+if ($action == 'newgroup') {
+    choicegroup_insert_group($course->id,$choicegroup->id,$choicegroup->name);
+    redirect("view.php?id=$cm->id");
+}
+
 $PAGE->set_title(format_string($choicegroup->name));
 $PAGE->set_heading($course->fullname);
 
@@ -213,10 +218,12 @@ $renderer = $PAGE->get_renderer('mod_choicegroup');
 if ( (!$current or $choicegroup->allowupdate) and $choicegroupopen and is_enrolled($context, NULL, 'mod/choicegroup:choose')) {
 // They haven't made their choicegroup yet or updates allowed and choicegroup is open
 
-    echo $renderer->display_options($options, $cm->id, $choicegroup->display, $choicegroup->publish, $choicegroup->limitanswers, $choicegroup->showresults, $current, $choicegroupopen, false, $choicegroup->multipleenrollmentspossible);
+    echo $renderer->display_options($options, $cm->id, $choicegroup->display, $choicegroup->publish, $choicegroup->limitanswers,
+        $choicegroup->showresults, $current, $choicegroupopen, false, $choicegroup->multipleenrollmentspossible, $choicegroup->allowcreategroup);
 } else {
     // form can not be updated
-    echo $renderer->display_options($options, $cm->id, $choicegroup->display, $choicegroup->publish, $choicegroup->limitanswers, $choicegroup->showresults, $current, $choicegroupopen, true, $choicegroup->multipleenrollmentspossible);
+    echo $renderer->display_options($options, $cm->id, $choicegroup->display, $choicegroup->publish, $choicegroup->limitanswers,
+        $choicegroup->showresults, $current, $choicegroupopen, true, $choicegroup->multipleenrollmentspossible);
 }
 $choicegroupformshown = true;
 
@@ -249,7 +256,7 @@ if ( $choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_ALWAYS or
     ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and !$choicegroupopen)) {
 }
 else if ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_NOT) {
-    echo $OUTPUT->box(get_string('neverresultsviewable', 'choicegroup'));
+  //  echo $OUTPUT->box(get_string('neverresultsviewable', 'choicegroup'));  // hanna 4/5/16
 }
 else if ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER && !$current) {
     echo $OUTPUT->box(get_string('afterresultsviewable', 'choicegroup'));
diff --git a/mod/choicegroup/yui/form/form.js b/mod/choicegroup/yui/form/form.js
old mode 100644
new mode 100755
index 5a1fb36..714b36f
--- a/mod/choicegroup/yui/form/form.js
+++ b/mod/choicegroup/yui/form/form.js
@@ -7,29 +7,21 @@
  */
 
 YUI.add('moodle-mod_choicegroup-form', function(Y) {
-	var CSS = {
-	},
-	SELECTORS = {
-			AVAILABLE_GRPS_SELECT: '#availablegroups',
-			AVAILABLE_GRPS_SELECT_OPTIONS: "select[id='availablegroups'] option",
-			SELECTED_GRPS_SELECT: '#id_selectedGroups',
-			ADD_GRP_BTN: '#addGroupButton',
-			DEL_GRP_BTN: '#removeGroupButton',
-			FORM: '#mform1',
-			LIMIT_UI_INPUT: '#ui_limit_input',
-			LIMIT_UI_DIV: '#fitem_id_limit_0',
-			LIMIT_UI_LABEL: '#label_for_limit_ui',
-			APPLY_LIMIT_TO_ALL_GRPS_BTN: '#id_setlimit',
-			ENABLE_DISABLE_LIMITING_SELECT: '#id_limitanswers',
-			EXPAND_ALL_GRPNGS_BTN: '#expandButton',
-			COLLAPSE_ALL_GRPNGS_BTN: '#collapseButton',
-			SERIALIZED_SELECTED_GRPS_LIST: '#serializedselectedgroups',
-			GLOBAL_LIMIT_INPUT: '#id_generallimitation',
-			HIDDEN_LIMIT_INPUTS: 'input.limit_input_node',
-	};
-	Y.namespace('Moodle.mod_choicegroup.form');
-	Y.Moodle.mod_choicegroup.form = {
-			init: function() {
+    var CSS = {
+    },
+    SELECTORS = {
+        FORM: '#mform1',
+        LIMIT_UI_INPUT: '#ui_limit_input',
+        LIMIT_UI_DIV: '#fitem_id_limit_0',
+        LIMIT_UI_LABEL: '#label_for_limit_ui',
+        APPLY_LIMIT_TO_ALL_GRPS_BTN: '#id_setlimit',
+        ENABLE_DISABLE_LIMITING_SELECT: '#id_limitanswers',
+        GLOBAL_LIMIT_INPUT: '#id_generallimitation',
+        HIDDEN_LIMIT_INPUTS: 'input.limit_input_node',
+    };
+    Y.namespace('Moodle.mod_choicegroup.form');
+    Y.Moodle.mod_choicegroup.form = {
+        init: function() {
 
 				// -------------------------------
 				// Global Variables
@@ -37,81 +29,27 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
 
                 var CHAR_LIMITUI_PAR_LEFT = M.util.get_string('char_limitui_parenthesis_start', 'choicegroup');
                 var CHAR_LIMITUI_PAR_RIGHT = M.util.get_string('char_limitui_parenthesis_end', 'choicegroup');
-                var CHAR_SELECT_BULLET_COLLAPSED = M.util.get_string('char_bullet_collapsed', 'choicegroup');
-                var CHAR_SELECT_BULLET_EXPANDED = M.util.get_string('char_bullet_expanded', 'choicegroup');
-
-
-				var availableGroupsNode = Y.one(SELECTORS.AVAILABLE_GRPS_SELECT);
-				var addGroupButtonNode = Y.one(SELECTORS.ADD_GRP_BTN);
-				var selectedGroupsNode = Y.one(SELECTORS.SELECTED_GRPS_SELECT);
-				var removeGroupButtonNode = Y.one(SELECTORS.DEL_GRP_BTN);
-				var formNode = Y.one(SELECTORS.FORM);
+        		var formNode = Y.one(SELECTORS.FORM);
 				var uiInputLimitNode = Y.one(SELECTORS.LIMIT_UI_INPUT);
 				var applyLimitToAllGroupsButtonNode = Y.one(SELECTORS.APPLY_LIMIT_TO_ALL_GRPS_BTN);
 				var limitAnswersSelectNode = Y.one(SELECTORS.ENABLE_DISABLE_LIMITING_SELECT);
 				var limitInputUIDIVNode = Y.one(SELECTORS.LIMIT_UI_DIV);
-				var expandButtonNode = Y.one(SELECTORS.EXPAND_ALL_GRPNGS_BTN);
-				var collapseButtonNode = Y.one(SELECTORS.COLLAPSE_ALL_GRPNGS_BTN);
-				var serializedSelectedGroupsListNode = Y.one(SELECTORS.SERIALIZED_SELECTED_GRPS_LIST);
-
 				var groupingsNodesContainer = new Array();
 
 				// --------------------------------
 				// Global Functions
 				// --------------------------------
 
-
 				function removeElementFromArray(ar, from, to) {
-					  var rest = ar.slice((to || from) + 1 || ar.length);
-					  ar.length = from < 0 ? ar.length + from : from;
-					  return ar.push.apply(ar, rest);
-				}
+                  var rest = ar.slice((to || from) + 1 || ar.length);
+                  ar.length = from < 0 ? ar.length + from : from;
+                  return ar.push.apply(ar, rest);
+                }
 
 				function getInputLimitNodeOfSelectedGroupNode(n) {
 					return Y.one('#group_' + n.get('value') + '_limit');
 				}
 
-				function cleanSelectedGroupsList() {
-					var optionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option");
-					optionsNodes.each(function(optNode) {
-						if (optNode.get('parentNode') != null) {
-						optNode.setContent(optNode.getContent().replace(/&nbsp;/gi,''));
-						optionsNodes.each(function(opt2Node){
-							if ((opt2Node != optNode) && (opt2Node.get('value') == optNode.get('value'))) {
-								opt2Node.remove();
-							}
-						});
-					}
-					});
-				}
-
-				function addOptionNodeToSelectedGroupsList(optNode) {
-					if (optNode.hasClass('grouping') == true) {
-						// check if option is collapsed
-						if (((typeof groupingsNodesContainer[optNode.get('value')]) == 'undefined') || ( groupingsNodesContainer[optNode.get('value')].length == 0)) {
-							// it is expanded, take nodes from UI
-							// This is a grouping, so instead of adding this item we actually need to add everything underneath it
-							var sib = optNode.next(); // sib means sibling, as in, the next element in the DOM tree
-							while (sib && sib.hasClass('nested') && sib.hasClass('group')) {
-								// add sib
-								selectedGroupsNode.append(sib.cloneNode(true));
-								// go to next node
-								sib = sib.next();
-							}
-						} else {
-							// yes it IS collapsed, need to take the nodes from the container rather than from the UI
-							groupingsNodesContainer[optNode.get('value')].forEach(function (underlyingGroupNode) {
-								selectedGroupsNode.append(underlyingGroupNode.cloneNode(true));
-							});
-						}
-					} else {
-						selectedGroupsNode.append(optNode.cloneNode(true));
-					}
-                    if (limitAnswersSelectNode.get('value') == '1') {
-                        updateLimitUIOfAllSelectedGroups();
-                    }
-				}
-
 				function updateGroupLimit(e) {
 					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
 					// get value of input box
@@ -122,61 +60,7 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
 					});
 				}
 
-				function collapseGrouping(groupingNode) {
-					// Change the text of this <option> so that it is marked as collapsed:
-					groupingNode.set('text', CHAR_SELECT_BULLET_COLLAPSED + groupingNode.get('text').substring(1));
-					var sib = groupingNode.next(); // sib means sibling, as in, the next element in the DOM tree
-					while (sib && sib.hasClass('nested') && sib.hasClass('group')) {
-						// save this node somewhere first
-						if (typeof groupingsNodesContainer[groupingNode.get('value')] == 'undefined') {
-							groupingsNodesContainer[groupingNode.get('value')] = new Array();
-						}
-						groupingsNodesContainer[groupingNode.get('value')].push(sib.cloneNode(true));
-						// save the next node before removing the current one
-						var nextSibling = sib.next();
-						sib.remove();
-						// go to next node
-						sib = nextSibling;
-					}
-				}
-
-				function expandGrouping(groupingNode) {
-					// Change the text of this <option> so that it is marked as collapsed:
-					groupingNode.set('text', CHAR_SELECT_BULLET_EXPANDED + groupingNode.get('text').substring(1));
-					var nextOpt = groupingNode.next();
-					if (typeof groupingsNodesContainer[groupingNode.get('value')] != 'undefined') {
-						groupingsNodesContainer[groupingNode.get('value')].forEach(function(underlyingGroupNode) {
-							if (typeof nextOpt != 'undefined') {
-								availableGroupsNode.insertBefore(underlyingGroupNode, nextOpt);
-							} else {
-								availableGroupsNode.appendChild(underlyingGroupNode);
-							}
-						});
-						groupingsNodesContainer[groupingNode.get('value')] = new Array();
-					}
-
-
-				}
-
-				function collapseAllGroupings() {
-					var availableOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option");
-					availableOptionsNodes.each(function(optNode) {
-						if (optNode.hasClass('grouping') == true) {
-							collapseGrouping(optNode);
-						}
-					});
-				}
-
-				function expandAllGroupings() {
-					var availableOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option");
-					availableOptionsNodes.each(function(optNode) {
-						if (optNode.hasClass('grouping') == true) {
-							expandGrouping(optNode);
-						}
-					});
-				}
-
-                function getGroupNameWithoutLimitText(groupNode) {
+				function getGroupNameWithoutLimitText(groupNode) {
                     var indexOfLimitUIText = groupNode.get('text').indexOf(' ' + CHAR_LIMITUI_PAR_LEFT);
                     if (indexOfLimitUIText !== -1) {
                         return groupNode.get('text').substring(0, indexOfLimitUIText);
@@ -211,8 +95,8 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
                 }
 
                 getTextWidth = function(text, font) {
-                	// Thanks for http://stackoverflow.com/a/21015393/3430277
-                    // re-use canvas object for better performance
+                	// Thanks for http://stackoverflow.com/a/21015393/3430277.
+                    // re-use canvas object for better performance.
                     var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
                     var context = canvas.getContext("2d");
                     context.font = font;
@@ -221,8 +105,8 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
                 };
 
                 function wasFirstCharacterClicked(e, n) {
-                	// Thanks for http://stackoverflow.com/a/21015393/3430277
-                	// e is the event, n is the node to check
+                	// Thanks for http://stackoverflow.com/a/21015393/3430277.
+                	// e is the event, n is the node to check.
 					var style = window.getComputedStyle(n.getDOMNode(), null).getPropertyValue('font');
 					if ((e.pageX - e.currentTarget.getX()) <= getTextWidth(n.get('text').charAt(0),style)) {
 						return true;
@@ -230,24 +114,6 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
 					return false;
                 }
 
-				// --------------------------------
-				// this code happens on form load
-				// --------------------------------
-				if (serializedSelectedGroupsListNode.get('value') != '') {
-					var selectedGroups = serializedSelectedGroupsListNode.get('value').split(';');
-					selectedGroups = selectedGroups.filter(function(n) {return n != '';});
-					var availableOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option");
-					availableOptionsNodes.each(function(optNode) {
-						selectedGroups.forEach(function (selectedGroup) {
-							if (selectedGroup == optNode.get('value')) {
-								addOptionNodeToSelectedGroupsList(optNode);
-							}
-						});
-					});
-					cleanSelectedGroupsList();
-				}
-
-
 				// Collapse all groupings on load
 				collapseAllGroupings();
 				expandButtonNode.set('disabled', false);
@@ -256,38 +122,11 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
                     updateLimitUIOfAllSelectedGroups();
                 }
 
-				// -------------------------------
-				// -------------------------------
-
-
-
-
-
-
-				// ---------------------------------
-				// Setup UI Bindings (on load)
-				// ---------------------------------
-
-
-				Y.one('#expandButton').on('click', function(e) {
-					expandAllGroupings();
-					expandButtonNode.set('disabled', true);
-					collapseButtonNode.set('disabled', false);
-
-				});
-				Y.one('#collapseButton').on('click', function(e) {
-					collapseAllGroupings();
-					collapseButtonNode.set('disabled', true);
-					expandButtonNode.set('disabled', false);
-
-				});
-
-
-				// On click fill in the limit in every field
+				// On click fill in the limit in every field.
 				applyLimitToAllGroupsButtonNode.on('click', function (e) {
-					// Get the value string
+					// Get the value string.
 					var generalLimitValue = Y.one(SELECTORS.GLOBAL_LIMIT_INPUT).get('value');
-					// Make sure we've got an integer value
+					// Make sure we've got an integer value.
 					generalLimitValue = parseInt(generalLimitValue);
 					if (!isNaN(generalLimitValue)) {
 						var limitInputNodes = Y.all(SELECTORS.HIDDEN_LIMIT_INPUTS);
@@ -298,116 +137,18 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
                     updateLimitUIOfAllSelectedGroups();
 				});
 
-
-
-
 				formNode.on('submit', function(e) {
 					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option");
-					if (selectedOptionsNodes.size() < 2) {
-						alert(M.util.get_string('pleasesetgroups', 'choicegroup'));
-				        e.preventDefault();
-				        e.stopPropagation();
-					}
 					var serializedSelection = '';
 					selectedOptionsNodes.each(function(optNode) { serializedSelection += ';' + optNode.get('value'); });
 					serializedSelectedGroupsListNode.set('value', serializedSelection);
 
 				});
 
-
-				availableGroupsNode.on('click', function(e) {
-					var selectedOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option:checked");
-					if (selectedOptionsNodes.size() >= 2) {
-						var allGroupings = true;
-						selectedOptionsNodes.each(function(optNode){
-							if (optNode.hasClass('grouping') == false) {
-								allGroupings = false;
-							}
-						});
-						if (allGroupings) {
-							addGroupButtonNode.setContent(M.util.get_string('add_groupings', 'choicegroup'));
-						} else {
-							addGroupButtonNode.setContent(M.util.get_string('add_groups', 'choicegroup'));
-						}
-						addGroupButtonNode.set('disabled', false);
-
-					} else if (selectedOptionsNodes.size() >= 1) {
-						var firstNode = selectedOptionsNodes.item(0);
-						if (firstNode.hasClass('grouping')) {
-							addGroupButtonNode.setContent(M.util.get_string('add_grouping', 'choicegroup'));
-							if (wasFirstCharacterClicked(e, firstNode)) {
-								expandOrCollapseGrouping(firstNode);
-							}
-
-						} else {
-							addGroupButtonNode.setContent(M.util.get_string('add_group', 'choicegroup'));
-						}
-						addGroupButtonNode.set('disabled', false);
-
-					} else {
-						addGroupButtonNode.set('disabled', true);
-						addGroupButtonNode.setContent(M.util.get_string('add', 'choicegroup'));
-					}
-
-				});
-				Y.delegate('dblclick', function(e) {
-					if (e.currentTarget.hasClass('grouping') == true) {
-						expandOrCollapseGrouping(e.currentTarget);
-					} else {
-						addOptionNodeToSelectedGroupsList(e.currentTarget);
-						cleanSelectedGroupsList();
-					}
-
-
-				},  Y.config.doc, SELECTORS.AVAILABLE_GRPS_SELECT_OPTIONS, this);
-
-				selectedGroupsNode.on('click', function(e) {
-					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
-					if (selectedOptionsNodes.size() >= 2) {
-						removeGroupButtonNode.setContent(M.util.get_string('del_groups', 'choicegroup'));
-						removeGroupButtonNode.set('disabled', false);
-						uiInputLimitNode.set('disabled', true);
-						//uiInputLimitNode.set('value', 'multiple values');
-						limitInputUIDIVNode.hide();
-
-					} else if (selectedOptionsNodes.size() >= 1) {
-						removeGroupButtonNode.setContent(M.util.get_string('del_group', 'choicegroup'));
-						removeGroupButtonNode.set('disabled', false);
-						uiInputLimitNode.set('disabled', false);
-						uiInputLimitNode.set('value', getInputLimitNodeOfSelectedGroupNode(selectedOptionsNodes.item(0)).get('value'));
-						Y.one(SELECTORS.LIMIT_UI_LABEL).set('text', M.util.get_string('set_limit_for_group', 'choicegroup') + getGroupNameWithoutLimitText(selectedOptionsNodes.item(0)) + ":");
-						if (limitAnswersSelectNode.get('value') == '1') { // limiting is enabled, show limit box
-							limitInputUIDIVNode.show();
-						}
-
-
-					} else {
-						removeGroupButtonNode.set('disabled', true);
-						removeGroupButtonNode.setContent(M.util.get_string('del', 'choicegroup'));
-						uiInputLimitNode.set('disabled', true);
-						limitInputUIDIVNode.hide();
-					}
-
-				});
-
 				uiInputLimitNode.on('change', function(e) { updateGroupLimit(e); });
 				uiInputLimitNode.on('blur', function(e) { updateGroupLimit(e); });
 
-
-				addGroupButtonNode.on('click', function(e) {
-					var selectedOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option:checked");
-					selectedOptionsNodes.each(function(optNode) { addOptionNodeToSelectedGroupsList(optNode); });
-					cleanSelectedGroupsList();
-				});
-				removeGroupButtonNode.on('click', function(e) {
-					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
-					selectedOptionsNodes.each(function(optNode) {
-							optNode.remove();
-
-					});
-				});
-
-				limitAnswersSelectNode.on('change', function(e) {
+                limitAnswersSelectNode.on('change', function(e) {
 					if (limitAnswersSelectNode.get('value') == '1') { // limiting is enabled, show limit box
 						var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
 						if (selectedOptionsNodes.size() == 1) {
@@ -415,7 +156,7 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
 						}
                         updateLimitUIOfAllSelectedGroups();
 
-					} else { // limiting is disabled
+					} else { // Limiting is disabled.
 						limitInputUIDIVNode.hide();
                         clearLimitUIFromAllSelectedGroups();
 					}
@@ -424,7 +165,5 @@ YUI.add('moodle-mod_choicegroup-form', function(Y) {
 
 
 			},
-
-
 	};
 }, '@VERSION@', {requires: ['node', 'event'] });
-- 
1.8.3.1

