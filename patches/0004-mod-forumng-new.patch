From 78290f4930931cb9969ee51bccc49daf72e635f1 Mon Sep 17 00:00:00 2001
From: root <root@moodle.levinsky.ac.il>
Date: Sun, 16 Jul 2017 23:49:13 +0300
Subject: [PATCH 04/95] mod/forumng (new)

---
 mod/forumng/.sams                                  |    6 +
 mod/forumng/DevelopersGuide.doc                    |  Bin 0 -> 32768 bytes
 mod/forumng/README                                 |   51 +
 mod/forumng/action.php                             |   70 +
 mod/forumng/advancedsearch.php                     |  316 ++
 mod/forumng/advancedsearchlib.php                  |  407 ++
 mod/forumng/alert.php                              |  139 +
 mod/forumng/alert_form.php                         |  102 +
 mod/forumng/amd/build/featurebtns.min.js           |  Bin 0 -> 1228 bytes
 mod/forumng/amd/src/featurebtns.js                 |  116 +
 mod/forumng/atomlib.php                            |  194 +
 mod/forumng/attachments.php                        |   68 +
 .../moodle2/backup_forumng_activity_task.class.php |   82 +
 .../backup/moodle2/backup_forumng_settingslib.php  |   29 +
 .../backup/moodle2/backup_forumng_stepslib.php     |  267 +
 .../restore_forumng_activity_task.class.php        |  172 +
 .../backup/moodle2/restore_forumng_stepslib.php    |  556 ++
 mod/forumng/build.xml                              |   42 +
 .../event/course_module_instance_list_viewed.php   |   39 +
 mod/forumng/classes/event/course_module_viewed.php |   60 +
 mod/forumng/classes/event/discussion_created.php   |  110 +
 mod/forumng/classes/event/discussion_deleted.php   |  110 +
 mod/forumng/classes/event/discussion_locked.php    |  119 +
 mod/forumng/classes/event/discussion_merged.php    |  117 +
 .../classes/event/discussion_permdeleted.php       |  110 +
 mod/forumng/classes/event/discussion_undeleted.php |  110 +
 mod/forumng/classes/event/discussion_unlocked.php  |  118 +
 mod/forumng/classes/event/discussion_viewed.php    |  110 +
 mod/forumng/classes/event/mail_sent.php            |  146 +
 mod/forumng/classes/event/post_created.php         |  110 +
 mod/forumng/classes/event/post_deleted.php         |  109 +
 mod/forumng/classes/event/post_reported.php        |  109 +
 mod/forumng/classes/event/post_split.php           |  109 +
 mod/forumng/classes/event/post_undeleted.php       |  109 +
 mod/forumng/classes/event/post_updated.php         |  106 +
 mod/forumng/classes/event/post_updated_failed.php  |  107 +
 mod/forumng/classes/event/save_failed.php          |  105 +
 mod/forumng/classes/event/subscription_created.php |  119 +
 mod/forumng/classes/event/subscription_deleted.php |  119 +
 mod/forumng/classes/plugininfo/forumngfeature.php  |   32 +
 mod/forumng/classes/plugininfo/forumngtype.php     |   32 +
 mod/forumng/classes/task/daily_housekeeping.php    |   45 +
 mod/forumng/classes/task/email_digest.php          |   50 +
 mod/forumng/classes/task/email_normal.php          |   50 +
 mod/forumng/confirmloggedin.php                    |   60 +
 mod/forumng/convert.php                            |   96 +
 mod/forumng/db/access.php                          |  369 ++
 mod/forumng/db/install.xml                         |  202 +
 mod/forumng/db/log.php                             |   64 +
 mod/forumng/db/services.php                        |   45 +
 mod/forumng/db/subplugins.php                      |   30 +
 mod/forumng/db/tag.php                             |   44 +
 mod/forumng/db/tasks.php                           |   56 +
 mod/forumng/db/upgrade.php                         |  381 ++
 mod/forumng/deletedraft.php                        |   79 +
 mod/forumng/deletepost.php                         |  263 +
 mod/forumng/deletepost_form.php                    |   81 +
 mod/forumng/dev/makebig.php                        |  466 ++
 mod/forumng/discuss.php                            |  119 +
 mod/forumng/editpost.php                           |  796 +++
 mod/forumng/editpost_form.php                      |  346 ++
 mod/forumng/expandpost.php                         |   57 +
 mod/forumng/externallib.php                        |  109 +
 mod/forumng/feature/copy/copy.php                  |   77 +
 mod/forumng/feature/copy/copyall.php               |  102 +
 mod/forumng/feature/copy/forumngfeature_copy.php   |   68 +
 .../feature/copy/forumngfeature_copy_form.php      |   48 +
 .../feature/copy/lang/en/forumngfeature_copy.php   |   36 +
 .../feature/copy/lang/es/forumngfeature_copy.php   |   36 +
 .../feature/copy/lang/fr/forumngfeature_copy.php   |   32 +
 .../feature/copy/lang/he/forumngfeature_copy.php   |   35 +
 mod/forumng/feature/copy/paste.php                 |   66 +
 mod/forumng/feature/copy/tests/behat/basic.feature |   97 +
 .../feature/copy/tests/behat/multicopy.feature     |   95 +
 mod/forumng/feature/copy/version.php               |   27 +
 mod/forumng/feature/delete/delete.php              |  271 +
 .../feature/delete/deletediscussion_form.php       |   93 +
 .../feature/delete/forumngfeature_delete.php       |   62 +
 .../delete/lang/en/forumngfeature_delete.php       |   63 +
 .../delete/lang/es/forumngfeature_delete.php       |   29 +
 .../delete/lang/fr/forumngfeature_delete.php       |   29 +
 .../delete/lang/he/forumngfeature_delete.php       |   29 +
 .../feature/delete/tests/behat/basic.feature       |  135 +
 mod/forumng/feature/delete/version.php             |   26 +
 .../classes/event/deleteddiscussions_viewed.php    |  107 +
 .../classes/event/deletedposts_viewed.php          |  107 +
 .../feature/deletedposts/deletedpostslist.php      |  253 +
 mod/forumng/feature/deletedposts/deletepost.php    |   69 +
 mod/forumng/feature/deletedposts/discuss.php       |   38 +
 .../deletedposts/forumngfeature_deletedposts.php   |   41 +
 .../deletedposts/forumngtype_deletedposts.php      |  151 +
 .../deletedposts/internaldoc/deletedposts.txt      |   32 +
 .../internaldoc/testcase.viewdeleted.txt           |  186 +
 .../lang/en/forumngfeature_deletedposts.php        |   37 +
 .../lang/es/forumngfeature_deletedposts.php        |   35 +
 .../lang/fr/forumngfeature_deletedposts.php        |   35 +
 .../lang/he/forumngfeature_deletedposts.php        |   35 +
 mod/forumng/feature/deletedposts/list.php          |  108 +
 mod/forumng/feature/deletedposts/locallib.php      |  156 +
 .../feature/deletedposts/tests/behat/basic.feature |  159 +
 mod/forumng/feature/deletedposts/version.php       |   26 +
 .../feature/edittags/classes/event/tags_edited.php |  106 +
 mod/forumng/feature/edittags/db/access.php         |   40 +
 mod/forumng/feature/edittags/edittags.php          |  125 +
 mod/forumng/feature/edittags/edittags_form.php     |   53 +
 .../feature/edittags/forumngfeature_edittags.php   |  148 +
 .../edittags/lang/en/forumngfeature_edittags.php   |   36 +
 mod/forumng/feature/edittags/managetags.php        |  140 +
 mod/forumng/feature/edittags/managetags_form.php   |   66 +
 mod/forumng/feature/edittags/version.php           |   26 +
 mod/forumng/feature/export/export.php              |   83 +
 mod/forumng/feature/export/exportall.php           |   81 +
 .../feature/export/forumngfeature_export.php       |   73 +
 .../export/lang/en/forumngfeature_export.php       |   26 +
 .../export/lang/es/forumngfeature_export.php       |   26 +
 .../export/lang/fr/forumngfeature_export.php       |   26 +
 .../export/lang/he/forumngfeature_export.php       |   25 +
 mod/forumng/feature/export/portfoliolib.php        |  437 ++
 .../feature/export/tests/behat/basic.feature       |  123 +
 mod/forumng/feature/export/version.php             |   27 +
 mod/forumng/feature/flagdiscussion/flag.php        |   54 +
 .../forumngfeature_flagdiscussion.php              |   63 +
 .../internaldoc/testcase.flagdiscussion.txt        |  108 +
 .../lang/en/forumngfeature_flagdiscussion.php      |   26 +
 .../flagdiscussion/tests/behat/basic.feature       |   69 +
 mod/forumng/feature/flagdiscussion/version.php     |   26 +
 mod/forumng/feature/forumngfeature.php             |  115 +
 mod/forumng/feature/forumngfeature_discussion.php  |  115 +
 .../feature/forumngfeature_discussion_list.php     |  108 +
 .../feature/forumngfeature_discussion_selector.php |  342 ++
 .../feature/forumngfeature_post_selector.php       |  253 +
 .../forward/classes/event/discussion_forwarded.php |  110 +
 .../feature/forward/classes/post_selector.php      |  147 +
 .../feature/forward/forumngfeature_forward.php     |   40 +
 mod/forumng/feature/forward/forward.php            |   27 +
 mod/forumng/feature/forward/forward_form.php       |  105 +
 .../forward/lang/en/forumngfeature_forward.php     |   34 +
 .../forward/lang/es/forumngfeature_forward.php     |   33 +
 .../forward/lang/fr/forumngfeature_forward.php     |   33 +
 .../forward/lang/he/forumngfeature_forward.php     |   33 +
 .../feature/forward/tests/forumng_forward_test.php |  104 +
 mod/forumng/feature/forward/version.php            |   26 +
 mod/forumng/feature/lock/forumngfeature_lock.php   |   70 +
 .../lock/internaldoc/testcase.multiplelock.txt     |  282 +
 .../feature/lock/lang/en/forumngfeature_lock.php   |   32 +
 .../feature/lock/lang/es/forumngfeature_lock.php   |   30 +
 .../feature/lock/lang/fr/forumngfeature_lock.php   |   32 +
 .../feature/lock/lang/he/forumngfeature_lock.php   |   30 +
 mod/forumng/feature/lock/lockall.php               |   92 +
 mod/forumng/feature/lock/tests/behat/basic.feature |   69 +
 mod/forumng/feature/lock/unlock.php                |   66 +
 mod/forumng/feature/lock/version.php               |   26 +
 mod/forumng/feature/manualmark/change.php          |   50 +
 .../manualmark/forumngfeature_manualmark.php       |   62 +
 .../lang/en/forumngfeature_manualmark.php          |   36 +
 .../lang/es/forumngfeature_manualmark.php          |   33 +
 .../lang/fr/forumngfeature_manualmark.php          |   33 +
 .../lang/he/forumngfeature_manualmark.php          |   33 +
 .../feature/manualmark/tests/behat/basic.feature   |   71 +
 mod/forumng/feature/manualmark/version.php         |   26 +
 .../markallread/forumngfeature_markallread.php     |   48 +
 .../lang/en/forumngfeature_markallread.php         |   25 +
 .../lang/es/forumngfeature_markallread.php         |   25 +
 .../lang/fr/forumngfeature_markallread.php         |   25 +
 .../lang/he/forumngfeature_markallread.php         |   25 +
 .../feature/markallread/tests/behat/basic.feature  |   95 +
 mod/forumng/feature/markallread/version.php        |   26 +
 .../forumngfeature_markdiscussionread.php          |   47 +
 .../lang/en/forumngfeature_markdiscussionread.php  |   25 +
 .../lang/es/forumngfeature_markdiscussionread.php  |   25 +
 .../lang/fr/forumngfeature_markdiscussionread.php  |   25 +
 .../lang/he/forumngfeature_markdiscussionread.php  |   25 +
 .../markdiscussionread/tests/behat/basic.feature   |   90 +
 mod/forumng/feature/markdiscussionread/version.php |   26 +
 mod/forumng/feature/merge/forumngfeature_merge.php |   60 +
 .../feature/merge/lang/en/forumngfeature_merge.php |   37 +
 .../feature/merge/lang/es/forumngfeature_merge.php |   37 +
 .../feature/merge/lang/fr/forumngfeature_merge.php |   35 +
 .../feature/merge/lang/he/forumngfeature_merge.php |   37 +
 mod/forumng/feature/merge/merge.php                |  108 +
 mod/forumng/feature/merge/merge_form.php           |   47 +
 mod/forumng/feature/merge/version.php              |   25 +
 mod/forumng/feature/move/forumngfeature_move.php   |  111 +
 mod/forumng/feature/move/group_form.php            |  131 +
 .../move/internaldoc/testcase.multiplemove.txt     |  126 +
 .../feature/move/lang/en/forumngfeature_move.php   |   34 +
 .../feature/move/lang/es/forumngfeature_move.php   |   26 +
 .../feature/move/lang/fr/forumngfeature_move.php   |   26 +
 .../feature/move/lang/he/forumngfeature_move.php   |   26 +
 mod/forumng/feature/move/lib.php                   |  213 +
 mod/forumng/feature/move/move.php                  |  102 +
 mod/forumng/feature/move/moveall.php               |   74 +
 mod/forumng/feature/move/movealltogroups.php       |  214 +
 mod/forumng/feature/move/tests/behat/basic.feature |  184 +
 .../feature/move/tests/behat/permissions.feature   |   50 +
 mod/forumng/feature/move/version.php               |   25 +
 .../feature/options/forumngfeature_options.php     |   35 +
 .../options/lang/en/forumngfeature_options.php     |   24 +
 .../options/lang/es/forumngfeature_options.php     |   24 +
 .../options/lang/fr/forumngfeature_options.php     |   24 +
 .../options/lang/he/forumngfeature_options.php     |   24 +
 mod/forumng/feature/options/version.php            |   25 +
 mod/forumng/feature/print/forumngfeature_print.php |   39 +
 .../feature/print/lang/en/forumngfeature_print.php |   28 +
 .../feature/print/lang/es/forumngfeature_print.php |   28 +
 .../feature/print/lang/fr/forumngfeature_print.php |   28 +
 .../feature/print/lang/he/forumngfeature_print.php |   28 +
 mod/forumng/feature/print/print.php                |   78 +
 mod/forumng/feature/print/version.php              |   25 +
 .../feature/sticky/forumngfeature_sticky.php       |   66 +
 .../feature/sticky/internaldoc/testcase.sticky.txt |  280 +
 .../sticky/lang/en/forumngfeature_sticky.php       |   26 +
 .../sticky/lang/es/forumngfeature_sticky.php       |   26 +
 .../sticky/lang/fr/forumngfeature_sticky.php       |   26 +
 .../sticky/lang/he/forumngfeature_sticky.php       |   26 +
 mod/forumng/feature/sticky/sticky.php              |   85 +
 .../feature/sticky/tests/behat/basic.feature       |  352 ++
 mod/forumng/feature/sticky/version.php             |   25 +
 .../feature/usage/classes/event/usage_viewed.php   |  107 +
 mod/forumng/feature/usage/db/access.php            |   51 +
 mod/forumng/feature/usage/forumngfeature_usage.php |   44 +
 .../feature/usage/internaldoc/testcase.usage.txt   |  372 ++
 .../feature/usage/lang/en/forumngfeature_usage.php |   86 +
 mod/forumng/feature/usage/locallib.php             |  105 +
 mod/forumng/feature/usage/renderer.php             |  221 +
 mod/forumng/feature/usage/styles.css               |   69 +
 .../feature/usage/tests/behat/basic.feature        |  222 +
 mod/forumng/feature/usage/tests/usage_test.php     |  110 +
 mod/forumng/feature/usage/usage.php                |  474 ++
 mod/forumng/feature/usage/usage_ajax.php           |   40 +
 mod/forumng/feature/usage/version.php              |   26 +
 .../feature/usage/yui/usagegraph/usagegraph.js     |   12 +
 .../feature/usage/yui/usageloader/usageloader.js   |   62 +
 .../classes/event/participation_viewed.php         |  117 +
 mod/forumng/feature/userposts/db/access.php        |   34 +
 .../feature/userposts/forumngfeature_userposts.php |   68 +
 .../feature/userposts/internaldoc/grading.txt      |   46 +
 .../userposts/internaldoc/testcase.grading.txt     |  139 +
 .../internaldoc/testcase.participation.txt         |  171 +
 .../userposts/internaldoc/testcase.rating.txt      |  147 +
 .../userposts/internaldoc/testcase.userposts.txt   |   80 +
 .../userposts/internaldoc/testcase.userratings.txt |  149 +
 .../feature/userposts/internaldoc/userposts.txt    |   37 +
 .../userposts/lang/en/forumngfeature_userposts.php |   64 +
 .../userposts/lang/es/forumngfeature_userposts.php |   39 +
 .../userposts/lang/fr/forumngfeature_userposts.php |   39 +
 .../userposts/lang/he/forumngfeature_userposts.php |   37 +
 mod/forumng/feature/userposts/list.php             |  532 ++
 mod/forumng/feature/userposts/locallib.php         |  300 +
 mod/forumng/feature/userposts/savegrades.php       |   73 +
 .../feature/userposts/tests/behat/user.feature     |  371 ++
 .../tests/behat/userparticipation.feature          |  142 +
 mod/forumng/feature/userposts/user.php             |  330 ++
 mod/forumng/feature/userposts/version.php          |   25 +
 mod/forumng/feed.php                               |  212 +
 mod/forumng/flag.xcf                               |  Bin 0 -> 288834 bytes
 mod/forumng/flagpost.php                           |   76 +
 mod/forumng/form.js                                |  101 +
 mod/forumng/history.php                            |   73 +
 mod/forumng/index.php                              |  229 +
 mod/forumng/internaldoc/autolock.txt               |   31 +
 mod/forumng/internaldoc/testcase.autolock.txt      |  190 +
 mod/forumng/internaldoc/testcase.export.txt        |  130 +
 .../internaldoc/testcase.masterforumngrestore.txt  |  162 +
 mod/forumng/internaldoc/testcase.moderation.txt    |  682 +++
 mod/forumng/internaldoc/testcase.oualerts.txt      |  115 +
 .../internaldoc/testcase.standardrating.txt        |  198 +
 mod/forumng/internaldoc/testcase.tags.txt          |  393 ++
 mod/forumng/internaldoc/testcase.txt               | 1366 +++++
 mod/forumng/internaldoc/testcase.users.csv         |    4 +
 mod/forumng/lang/en/forumng.php                    |  952 ++++
 mod/forumng/lang/es/forumng.php                    |  795 +++
 mod/forumng/lang/fr/forumng.php                    |  636 +++
 mod/forumng/lang/he/forumng.php                    |  534 ++
 mod/forumng/lib.php                                |  799 +++
 mod/forumng/locallib.php                           |   28 +
 mod/forumng/markread.php                           |  104 +
 mod/forumng/mod_form.php                           |  557 ++
 mod/forumng/mod_forumng.php                        | 5780 ++++++++++++++++++++
 mod/forumng/mod_forumng_cron.php                   |  969 ++++
 mod/forumng/mod_forumng_digest_list.php            |   78 +
 mod/forumng/mod_forumng_discussion.php             | 2676 +++++++++
 mod/forumng/mod_forumng_discussion_list.php        |  134 +
 mod/forumng/mod_forumng_draft.php                  |  402 ++
 mod/forumng/mod_forumng_file_exception.php         |   32 +
 mod/forumng/mod_forumng_mail_list.php              |  382 ++
 mod/forumng/mod_forumng_post.php                   | 2658 +++++++++
 mod/forumng/mod_forumng_utils.php                  |  606 ++
 mod/forumng/module.js                              | 2550 +++++++++
 mod/forumng/pix/circle-n-n.png                     |  Bin 0 -> 128 bytes
 mod/forumng/pix/circle-n-y.png                     |  Bin 0 -> 128 bytes
 mod/forumng/pix/circle-y-n.png                     |  Bin 0 -> 148 bytes
 mod/forumng/pix/circle-y-y.png                     |  Bin 0 -> 148 bytes
 mod/forumng/pix/clear.gif                          |  Bin 0 -> 179 bytes
 mod/forumng/pix/exclamation_mark.gif               |  Bin 0 -> 56 bytes
 mod/forumng/pix/flag.off.png                       |  Bin 0 -> 352 bytes
 mod/forumng/pix/flag.on.png                        |  Bin 0 -> 429 bytes
 mod/forumng/pix/icon.gif                           |  Bin 0 -> 612 bytes
 mod/forumng/pix/sortorder-down.gif                 |  Bin 0 -> 68 bytes
 mod/forumng/pix/sortorder-up.gif                   |  Bin 0 -> 72 bytes
 mod/forumng/pix/star-n-n.png                       |  Bin 0 -> 277 bytes
 mod/forumng/pix/star-n-y.png                       |  Bin 0 -> 284 bytes
 mod/forumng/pix/star-y-n.png                       |  Bin 0 -> 439 bytes
 mod/forumng/pix/star-y-y.png                       |  Bin 0 -> 300 bytes
 mod/forumng/pix/sticky.png                         |  Bin 0 -> 650 bytes
 mod/forumng/pix/timeout.png                        |  Bin 0 -> 300 bytes
 mod/forumng/pluginfile.php                         |   56 +
 mod/forumng/preferences.php                        |   91 +
 mod/forumng/preferences_form.php                   |   74 +
 mod/forumng/rate.php                               |   76 +
 mod/forumng/rebuildsearchindex.php                 |   43 +
 mod/forumng/renderer.php                           | 2061 +++++++
 mod/forumng/search.php                             |   95 +
 mod/forumng/settings.php                           |  125 +
 mod/forumng/settingslib.php                        |   58 +
 mod/forumng/splitpost.php                          |   95 +
 mod/forumng/splitpost_form.php                     |   52 +
 mod/forumng/styles.css                             | 1104 ++++
 mod/forumng/subscribe.php                          |  409 ++
 mod/forumng/subscribers.php                        |  264 +
 mod/forumng/tests/behat/basic.feature              |  444 ++
 mod/forumng/tests/behat/behat_mod_forumng.php      |  239 +
 mod/forumng/tests/behat/coreratings.feature        |   95 +
 mod/forumng/tests/behat/tags.feature               |  496 ++
 mod/forumng/tests/behat/usernameprotection.feature |   70 +
 mod/forumng/tests/forumlistapi_test.php            |  162 +
 mod/forumng/tests/forumng_cron_test.php            |  196 +
 mod/forumng/tests/forumng_discussion_test.php      |  758 +++
 mod/forumng/tests/forumng_post_test.php            |  652 +++
 mod/forumng/tests/forumng_test.php                 |  610 +++
 mod/forumng/tests/forumng_test_lib.php             |  157 +
 mod/forumng/tests/generator/lib.php                |  235 +
 mod/forumng/tests/generator_test.php               |  149 +
 mod/forumng/tests/rating_test.php                  |  257 +
 mod/forumng/type/clone/forumngtype_clone.php       |   34 +
 .../type/clone/lang/en/forumngtype_clone.php       |   24 +
 .../type/clone/lang/fr/forumngtype_clone.php       |   24 +
 mod/forumng/type/clone/tests/behat/basic.feature   |   71 +
 mod/forumng/type/clone/version.php                 |   26 +
 mod/forumng/type/forumngtype.php                   |  209 +
 mod/forumng/type/general/forumngtype_general.php   |  336 ++
 .../type/general/lang/en/forumngtype_general.php   |   24 +
 .../type/general/lang/fr/forumngtype_general.php   |   24 +
 mod/forumng/type/general/version.php               |   26 +
 .../type/studyadvice/forumngtype_studyadvice.php   |   60 +
 .../lang/en/forumngtype_studyadvice.php            |   24 +
 .../lang/fr/forumngtype_studyadvice.php            |   24 +
 .../type/studyadvice/tests/behat/basic.feature     |   58 +
 mod/forumng/type/studyadvice/version.php           |   26 +
 mod/forumng/version.php                            |   31 +
 mod/forumng/view.php                               |  101 +
 mod/forumng/viewmode.php                           |   36 +
 .../moodle-mod_forumng-savecheck-debug.js          |  Bin 0 -> 2705 bytes
 .../moodle-mod_forumng-savecheck-min.js            |  Bin 0 -> 1040 bytes
 .../moodle-mod_forumng-savecheck.js                |  Bin 0 -> 2705 bytes
 mod/forumng/yui/src/savecheck/build.json           |   10 +
 mod/forumng/yui/src/savecheck/js/savecheck.js      |   62 +
 mod/forumng/yui/src/savecheck/meta/savecheck.json  |   10 +
 358 files changed, 60002 insertions(+)
 create mode 100644 mod/forumng/.sams
 create mode 100644 mod/forumng/DevelopersGuide.doc
 create mode 100644 mod/forumng/README
 create mode 100644 mod/forumng/action.php
 create mode 100644 mod/forumng/advancedsearch.php
 create mode 100644 mod/forumng/advancedsearchlib.php
 create mode 100644 mod/forumng/alert.php
 create mode 100644 mod/forumng/alert_form.php
 create mode 100644 mod/forumng/amd/build/featurebtns.min.js
 create mode 100644 mod/forumng/amd/src/featurebtns.js
 create mode 100644 mod/forumng/atomlib.php
 create mode 100644 mod/forumng/attachments.php
 create mode 100644 mod/forumng/backup/moodle2/backup_forumng_activity_task.class.php
 create mode 100644 mod/forumng/backup/moodle2/backup_forumng_settingslib.php
 create mode 100644 mod/forumng/backup/moodle2/backup_forumng_stepslib.php
 create mode 100644 mod/forumng/backup/moodle2/restore_forumng_activity_task.class.php
 create mode 100644 mod/forumng/backup/moodle2/restore_forumng_stepslib.php
 create mode 100644 mod/forumng/build.xml
 create mode 100644 mod/forumng/classes/event/course_module_instance_list_viewed.php
 create mode 100644 mod/forumng/classes/event/course_module_viewed.php
 create mode 100644 mod/forumng/classes/event/discussion_created.php
 create mode 100644 mod/forumng/classes/event/discussion_deleted.php
 create mode 100644 mod/forumng/classes/event/discussion_locked.php
 create mode 100644 mod/forumng/classes/event/discussion_merged.php
 create mode 100644 mod/forumng/classes/event/discussion_permdeleted.php
 create mode 100644 mod/forumng/classes/event/discussion_undeleted.php
 create mode 100644 mod/forumng/classes/event/discussion_unlocked.php
 create mode 100644 mod/forumng/classes/event/discussion_viewed.php
 create mode 100644 mod/forumng/classes/event/mail_sent.php
 create mode 100644 mod/forumng/classes/event/post_created.php
 create mode 100644 mod/forumng/classes/event/post_deleted.php
 create mode 100644 mod/forumng/classes/event/post_reported.php
 create mode 100644 mod/forumng/classes/event/post_split.php
 create mode 100644 mod/forumng/classes/event/post_undeleted.php
 create mode 100644 mod/forumng/classes/event/post_updated.php
 create mode 100644 mod/forumng/classes/event/post_updated_failed.php
 create mode 100644 mod/forumng/classes/event/save_failed.php
 create mode 100644 mod/forumng/classes/event/subscription_created.php
 create mode 100644 mod/forumng/classes/event/subscription_deleted.php
 create mode 100644 mod/forumng/classes/plugininfo/forumngfeature.php
 create mode 100644 mod/forumng/classes/plugininfo/forumngtype.php
 create mode 100644 mod/forumng/classes/task/daily_housekeeping.php
 create mode 100644 mod/forumng/classes/task/email_digest.php
 create mode 100644 mod/forumng/classes/task/email_normal.php
 create mode 100644 mod/forumng/confirmloggedin.php
 create mode 100644 mod/forumng/convert.php
 create mode 100644 mod/forumng/db/access.php
 create mode 100644 mod/forumng/db/install.xml
 create mode 100644 mod/forumng/db/log.php
 create mode 100644 mod/forumng/db/services.php
 create mode 100644 mod/forumng/db/subplugins.php
 create mode 100644 mod/forumng/db/tag.php
 create mode 100644 mod/forumng/db/tasks.php
 create mode 100644 mod/forumng/db/upgrade.php
 create mode 100644 mod/forumng/deletedraft.php
 create mode 100644 mod/forumng/deletepost.php
 create mode 100644 mod/forumng/deletepost_form.php
 create mode 100644 mod/forumng/dev/makebig.php
 create mode 100644 mod/forumng/discuss.php
 create mode 100644 mod/forumng/editpost.php
 create mode 100644 mod/forumng/editpost_form.php
 create mode 100644 mod/forumng/expandpost.php
 create mode 100644 mod/forumng/externallib.php
 create mode 100644 mod/forumng/feature/copy/copy.php
 create mode 100644 mod/forumng/feature/copy/copyall.php
 create mode 100644 mod/forumng/feature/copy/forumngfeature_copy.php
 create mode 100644 mod/forumng/feature/copy/forumngfeature_copy_form.php
 create mode 100644 mod/forumng/feature/copy/lang/en/forumngfeature_copy.php
 create mode 100644 mod/forumng/feature/copy/lang/es/forumngfeature_copy.php
 create mode 100644 mod/forumng/feature/copy/lang/fr/forumngfeature_copy.php
 create mode 100644 mod/forumng/feature/copy/lang/he/forumngfeature_copy.php
 create mode 100644 mod/forumng/feature/copy/paste.php
 create mode 100644 mod/forumng/feature/copy/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/copy/tests/behat/multicopy.feature
 create mode 100644 mod/forumng/feature/copy/version.php
 create mode 100644 mod/forumng/feature/delete/delete.php
 create mode 100644 mod/forumng/feature/delete/deletediscussion_form.php
 create mode 100644 mod/forumng/feature/delete/forumngfeature_delete.php
 create mode 100644 mod/forumng/feature/delete/lang/en/forumngfeature_delete.php
 create mode 100644 mod/forumng/feature/delete/lang/es/forumngfeature_delete.php
 create mode 100644 mod/forumng/feature/delete/lang/fr/forumngfeature_delete.php
 create mode 100644 mod/forumng/feature/delete/lang/he/forumngfeature_delete.php
 create mode 100644 mod/forumng/feature/delete/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/delete/version.php
 create mode 100644 mod/forumng/feature/deletedposts/classes/event/deleteddiscussions_viewed.php
 create mode 100644 mod/forumng/feature/deletedposts/classes/event/deletedposts_viewed.php
 create mode 100644 mod/forumng/feature/deletedposts/deletedpostslist.php
 create mode 100644 mod/forumng/feature/deletedposts/deletepost.php
 create mode 100644 mod/forumng/feature/deletedposts/discuss.php
 create mode 100644 mod/forumng/feature/deletedposts/forumngfeature_deletedposts.php
 create mode 100644 mod/forumng/feature/deletedposts/forumngtype_deletedposts.php
 create mode 100644 mod/forumng/feature/deletedposts/internaldoc/deletedposts.txt
 create mode 100644 mod/forumng/feature/deletedposts/internaldoc/testcase.viewdeleted.txt
 create mode 100644 mod/forumng/feature/deletedposts/lang/en/forumngfeature_deletedposts.php
 create mode 100644 mod/forumng/feature/deletedposts/lang/es/forumngfeature_deletedposts.php
 create mode 100644 mod/forumng/feature/deletedposts/lang/fr/forumngfeature_deletedposts.php
 create mode 100644 mod/forumng/feature/deletedposts/lang/he/forumngfeature_deletedposts.php
 create mode 100644 mod/forumng/feature/deletedposts/list.php
 create mode 100644 mod/forumng/feature/deletedposts/locallib.php
 create mode 100644 mod/forumng/feature/deletedposts/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/deletedposts/version.php
 create mode 100644 mod/forumng/feature/edittags/classes/event/tags_edited.php
 create mode 100644 mod/forumng/feature/edittags/db/access.php
 create mode 100644 mod/forumng/feature/edittags/edittags.php
 create mode 100644 mod/forumng/feature/edittags/edittags_form.php
 create mode 100644 mod/forumng/feature/edittags/forumngfeature_edittags.php
 create mode 100644 mod/forumng/feature/edittags/lang/en/forumngfeature_edittags.php
 create mode 100644 mod/forumng/feature/edittags/managetags.php
 create mode 100644 mod/forumng/feature/edittags/managetags_form.php
 create mode 100644 mod/forumng/feature/edittags/version.php
 create mode 100644 mod/forumng/feature/export/export.php
 create mode 100644 mod/forumng/feature/export/exportall.php
 create mode 100644 mod/forumng/feature/export/forumngfeature_export.php
 create mode 100644 mod/forumng/feature/export/lang/en/forumngfeature_export.php
 create mode 100644 mod/forumng/feature/export/lang/es/forumngfeature_export.php
 create mode 100644 mod/forumng/feature/export/lang/fr/forumngfeature_export.php
 create mode 100644 mod/forumng/feature/export/lang/he/forumngfeature_export.php
 create mode 100644 mod/forumng/feature/export/portfoliolib.php
 create mode 100644 mod/forumng/feature/export/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/export/version.php
 create mode 100644 mod/forumng/feature/flagdiscussion/flag.php
 create mode 100644 mod/forumng/feature/flagdiscussion/forumngfeature_flagdiscussion.php
 create mode 100644 mod/forumng/feature/flagdiscussion/internaldoc/testcase.flagdiscussion.txt
 create mode 100644 mod/forumng/feature/flagdiscussion/lang/en/forumngfeature_flagdiscussion.php
 create mode 100644 mod/forumng/feature/flagdiscussion/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/flagdiscussion/version.php
 create mode 100644 mod/forumng/feature/forumngfeature.php
 create mode 100644 mod/forumng/feature/forumngfeature_discussion.php
 create mode 100644 mod/forumng/feature/forumngfeature_discussion_list.php
 create mode 100644 mod/forumng/feature/forumngfeature_discussion_selector.php
 create mode 100644 mod/forumng/feature/forumngfeature_post_selector.php
 create mode 100644 mod/forumng/feature/forward/classes/event/discussion_forwarded.php
 create mode 100644 mod/forumng/feature/forward/classes/post_selector.php
 create mode 100644 mod/forumng/feature/forward/forumngfeature_forward.php
 create mode 100644 mod/forumng/feature/forward/forward.php
 create mode 100644 mod/forumng/feature/forward/forward_form.php
 create mode 100644 mod/forumng/feature/forward/lang/en/forumngfeature_forward.php
 create mode 100644 mod/forumng/feature/forward/lang/es/forumngfeature_forward.php
 create mode 100644 mod/forumng/feature/forward/lang/fr/forumngfeature_forward.php
 create mode 100644 mod/forumng/feature/forward/lang/he/forumngfeature_forward.php
 create mode 100644 mod/forumng/feature/forward/tests/forumng_forward_test.php
 create mode 100644 mod/forumng/feature/forward/version.php
 create mode 100644 mod/forumng/feature/lock/forumngfeature_lock.php
 create mode 100644 mod/forumng/feature/lock/internaldoc/testcase.multiplelock.txt
 create mode 100644 mod/forumng/feature/lock/lang/en/forumngfeature_lock.php
 create mode 100644 mod/forumng/feature/lock/lang/es/forumngfeature_lock.php
 create mode 100644 mod/forumng/feature/lock/lang/fr/forumngfeature_lock.php
 create mode 100644 mod/forumng/feature/lock/lang/he/forumngfeature_lock.php
 create mode 100644 mod/forumng/feature/lock/lockall.php
 create mode 100644 mod/forumng/feature/lock/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/lock/unlock.php
 create mode 100644 mod/forumng/feature/lock/version.php
 create mode 100644 mod/forumng/feature/manualmark/change.php
 create mode 100644 mod/forumng/feature/manualmark/forumngfeature_manualmark.php
 create mode 100644 mod/forumng/feature/manualmark/lang/en/forumngfeature_manualmark.php
 create mode 100644 mod/forumng/feature/manualmark/lang/es/forumngfeature_manualmark.php
 create mode 100644 mod/forumng/feature/manualmark/lang/fr/forumngfeature_manualmark.php
 create mode 100644 mod/forumng/feature/manualmark/lang/he/forumngfeature_manualmark.php
 create mode 100644 mod/forumng/feature/manualmark/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/manualmark/version.php
 create mode 100644 mod/forumng/feature/markallread/forumngfeature_markallread.php
 create mode 100644 mod/forumng/feature/markallread/lang/en/forumngfeature_markallread.php
 create mode 100644 mod/forumng/feature/markallread/lang/es/forumngfeature_markallread.php
 create mode 100644 mod/forumng/feature/markallread/lang/fr/forumngfeature_markallread.php
 create mode 100644 mod/forumng/feature/markallread/lang/he/forumngfeature_markallread.php
 create mode 100644 mod/forumng/feature/markallread/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/markallread/version.php
 create mode 100644 mod/forumng/feature/markdiscussionread/forumngfeature_markdiscussionread.php
 create mode 100644 mod/forumng/feature/markdiscussionread/lang/en/forumngfeature_markdiscussionread.php
 create mode 100644 mod/forumng/feature/markdiscussionread/lang/es/forumngfeature_markdiscussionread.php
 create mode 100644 mod/forumng/feature/markdiscussionread/lang/fr/forumngfeature_markdiscussionread.php
 create mode 100644 mod/forumng/feature/markdiscussionread/lang/he/forumngfeature_markdiscussionread.php
 create mode 100644 mod/forumng/feature/markdiscussionread/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/markdiscussionread/version.php
 create mode 100644 mod/forumng/feature/merge/forumngfeature_merge.php
 create mode 100644 mod/forumng/feature/merge/lang/en/forumngfeature_merge.php
 create mode 100644 mod/forumng/feature/merge/lang/es/forumngfeature_merge.php
 create mode 100644 mod/forumng/feature/merge/lang/fr/forumngfeature_merge.php
 create mode 100644 mod/forumng/feature/merge/lang/he/forumngfeature_merge.php
 create mode 100644 mod/forumng/feature/merge/merge.php
 create mode 100644 mod/forumng/feature/merge/merge_form.php
 create mode 100644 mod/forumng/feature/merge/version.php
 create mode 100644 mod/forumng/feature/move/forumngfeature_move.php
 create mode 100644 mod/forumng/feature/move/group_form.php
 create mode 100644 mod/forumng/feature/move/internaldoc/testcase.multiplemove.txt
 create mode 100644 mod/forumng/feature/move/lang/en/forumngfeature_move.php
 create mode 100644 mod/forumng/feature/move/lang/es/forumngfeature_move.php
 create mode 100644 mod/forumng/feature/move/lang/fr/forumngfeature_move.php
 create mode 100644 mod/forumng/feature/move/lang/he/forumngfeature_move.php
 create mode 100644 mod/forumng/feature/move/lib.php
 create mode 100644 mod/forumng/feature/move/move.php
 create mode 100644 mod/forumng/feature/move/moveall.php
 create mode 100644 mod/forumng/feature/move/movealltogroups.php
 create mode 100644 mod/forumng/feature/move/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/move/tests/behat/permissions.feature
 create mode 100644 mod/forumng/feature/move/version.php
 create mode 100644 mod/forumng/feature/options/forumngfeature_options.php
 create mode 100644 mod/forumng/feature/options/lang/en/forumngfeature_options.php
 create mode 100644 mod/forumng/feature/options/lang/es/forumngfeature_options.php
 create mode 100644 mod/forumng/feature/options/lang/fr/forumngfeature_options.php
 create mode 100644 mod/forumng/feature/options/lang/he/forumngfeature_options.php
 create mode 100644 mod/forumng/feature/options/version.php
 create mode 100644 mod/forumng/feature/print/forumngfeature_print.php
 create mode 100644 mod/forumng/feature/print/lang/en/forumngfeature_print.php
 create mode 100644 mod/forumng/feature/print/lang/es/forumngfeature_print.php
 create mode 100644 mod/forumng/feature/print/lang/fr/forumngfeature_print.php
 create mode 100644 mod/forumng/feature/print/lang/he/forumngfeature_print.php
 create mode 100644 mod/forumng/feature/print/print.php
 create mode 100644 mod/forumng/feature/print/version.php
 create mode 100644 mod/forumng/feature/sticky/forumngfeature_sticky.php
 create mode 100644 mod/forumng/feature/sticky/internaldoc/testcase.sticky.txt
 create mode 100644 mod/forumng/feature/sticky/lang/en/forumngfeature_sticky.php
 create mode 100644 mod/forumng/feature/sticky/lang/es/forumngfeature_sticky.php
 create mode 100644 mod/forumng/feature/sticky/lang/fr/forumngfeature_sticky.php
 create mode 100644 mod/forumng/feature/sticky/lang/he/forumngfeature_sticky.php
 create mode 100644 mod/forumng/feature/sticky/sticky.php
 create mode 100644 mod/forumng/feature/sticky/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/sticky/version.php
 create mode 100644 mod/forumng/feature/usage/classes/event/usage_viewed.php
 create mode 100644 mod/forumng/feature/usage/db/access.php
 create mode 100644 mod/forumng/feature/usage/forumngfeature_usage.php
 create mode 100644 mod/forumng/feature/usage/internaldoc/testcase.usage.txt
 create mode 100644 mod/forumng/feature/usage/lang/en/forumngfeature_usage.php
 create mode 100644 mod/forumng/feature/usage/locallib.php
 create mode 100644 mod/forumng/feature/usage/renderer.php
 create mode 100644 mod/forumng/feature/usage/styles.css
 create mode 100644 mod/forumng/feature/usage/tests/behat/basic.feature
 create mode 100644 mod/forumng/feature/usage/tests/usage_test.php
 create mode 100644 mod/forumng/feature/usage/usage.php
 create mode 100644 mod/forumng/feature/usage/usage_ajax.php
 create mode 100644 mod/forumng/feature/usage/version.php
 create mode 100644 mod/forumng/feature/usage/yui/usagegraph/usagegraph.js
 create mode 100644 mod/forumng/feature/usage/yui/usageloader/usageloader.js
 create mode 100644 mod/forumng/feature/userposts/classes/event/participation_viewed.php
 create mode 100644 mod/forumng/feature/userposts/db/access.php
 create mode 100644 mod/forumng/feature/userposts/forumngfeature_userposts.php
 create mode 100644 mod/forumng/feature/userposts/internaldoc/grading.txt
 create mode 100644 mod/forumng/feature/userposts/internaldoc/testcase.grading.txt
 create mode 100644 mod/forumng/feature/userposts/internaldoc/testcase.participation.txt
 create mode 100644 mod/forumng/feature/userposts/internaldoc/testcase.rating.txt
 create mode 100644 mod/forumng/feature/userposts/internaldoc/testcase.userposts.txt
 create mode 100644 mod/forumng/feature/userposts/internaldoc/testcase.userratings.txt
 create mode 100644 mod/forumng/feature/userposts/internaldoc/userposts.txt
 create mode 100644 mod/forumng/feature/userposts/lang/en/forumngfeature_userposts.php
 create mode 100644 mod/forumng/feature/userposts/lang/es/forumngfeature_userposts.php
 create mode 100644 mod/forumng/feature/userposts/lang/fr/forumngfeature_userposts.php
 create mode 100644 mod/forumng/feature/userposts/lang/he/forumngfeature_userposts.php
 create mode 100644 mod/forumng/feature/userposts/list.php
 create mode 100644 mod/forumng/feature/userposts/locallib.php
 create mode 100644 mod/forumng/feature/userposts/savegrades.php
 create mode 100644 mod/forumng/feature/userposts/tests/behat/user.feature
 create mode 100644 mod/forumng/feature/userposts/tests/behat/userparticipation.feature
 create mode 100644 mod/forumng/feature/userposts/user.php
 create mode 100644 mod/forumng/feature/userposts/version.php
 create mode 100644 mod/forumng/feed.php
 create mode 100644 mod/forumng/flag.xcf
 create mode 100644 mod/forumng/flagpost.php
 create mode 100644 mod/forumng/form.js
 create mode 100644 mod/forumng/history.php
 create mode 100644 mod/forumng/index.php
 create mode 100644 mod/forumng/internaldoc/autolock.txt
 create mode 100644 mod/forumng/internaldoc/testcase.autolock.txt
 create mode 100644 mod/forumng/internaldoc/testcase.export.txt
 create mode 100644 mod/forumng/internaldoc/testcase.masterforumngrestore.txt
 create mode 100644 mod/forumng/internaldoc/testcase.moderation.txt
 create mode 100644 mod/forumng/internaldoc/testcase.oualerts.txt
 create mode 100644 mod/forumng/internaldoc/testcase.standardrating.txt
 create mode 100644 mod/forumng/internaldoc/testcase.tags.txt
 create mode 100644 mod/forumng/internaldoc/testcase.txt
 create mode 100644 mod/forumng/internaldoc/testcase.users.csv
 create mode 100644 mod/forumng/lang/en/forumng.php
 create mode 100644 mod/forumng/lang/es/forumng.php
 create mode 100644 mod/forumng/lang/fr/forumng.php
 create mode 100644 mod/forumng/lang/he/forumng.php
 create mode 100644 mod/forumng/lib.php
 create mode 100644 mod/forumng/locallib.php
 create mode 100644 mod/forumng/markread.php
 create mode 100644 mod/forumng/mod_form.php
 create mode 100644 mod/forumng/mod_forumng.php
 create mode 100644 mod/forumng/mod_forumng_cron.php
 create mode 100644 mod/forumng/mod_forumng_digest_list.php
 create mode 100644 mod/forumng/mod_forumng_discussion.php
 create mode 100644 mod/forumng/mod_forumng_discussion_list.php
 create mode 100644 mod/forumng/mod_forumng_draft.php
 create mode 100644 mod/forumng/mod_forumng_file_exception.php
 create mode 100644 mod/forumng/mod_forumng_mail_list.php
 create mode 100644 mod/forumng/mod_forumng_post.php
 create mode 100644 mod/forumng/mod_forumng_utils.php
 create mode 100644 mod/forumng/module.js
 create mode 100644 mod/forumng/pix/circle-n-n.png
 create mode 100644 mod/forumng/pix/circle-n-y.png
 create mode 100644 mod/forumng/pix/circle-y-n.png
 create mode 100644 mod/forumng/pix/circle-y-y.png
 create mode 100644 mod/forumng/pix/clear.gif
 create mode 100644 mod/forumng/pix/exclamation_mark.gif
 create mode 100644 mod/forumng/pix/flag.off.png
 create mode 100644 mod/forumng/pix/flag.on.png
 create mode 100644 mod/forumng/pix/icon.gif
 create mode 100644 mod/forumng/pix/sortorder-down.gif
 create mode 100644 mod/forumng/pix/sortorder-up.gif
 create mode 100644 mod/forumng/pix/star-n-n.png
 create mode 100644 mod/forumng/pix/star-n-y.png
 create mode 100644 mod/forumng/pix/star-y-n.png
 create mode 100644 mod/forumng/pix/star-y-y.png
 create mode 100644 mod/forumng/pix/sticky.png
 create mode 100644 mod/forumng/pix/timeout.png
 create mode 100644 mod/forumng/pluginfile.php
 create mode 100644 mod/forumng/preferences.php
 create mode 100644 mod/forumng/preferences_form.php
 create mode 100644 mod/forumng/rate.php
 create mode 100644 mod/forumng/rebuildsearchindex.php
 create mode 100644 mod/forumng/renderer.php
 create mode 100644 mod/forumng/search.php
 create mode 100644 mod/forumng/settings.php
 create mode 100644 mod/forumng/settingslib.php
 create mode 100644 mod/forumng/splitpost.php
 create mode 100644 mod/forumng/splitpost_form.php
 create mode 100644 mod/forumng/styles.css
 create mode 100644 mod/forumng/subscribe.php
 create mode 100644 mod/forumng/subscribers.php
 create mode 100644 mod/forumng/tests/behat/basic.feature
 create mode 100644 mod/forumng/tests/behat/behat_mod_forumng.php
 create mode 100644 mod/forumng/tests/behat/coreratings.feature
 create mode 100644 mod/forumng/tests/behat/tags.feature
 create mode 100644 mod/forumng/tests/behat/usernameprotection.feature
 create mode 100644 mod/forumng/tests/forumlistapi_test.php
 create mode 100644 mod/forumng/tests/forumng_cron_test.php
 create mode 100644 mod/forumng/tests/forumng_discussion_test.php
 create mode 100644 mod/forumng/tests/forumng_post_test.php
 create mode 100644 mod/forumng/tests/forumng_test.php
 create mode 100644 mod/forumng/tests/forumng_test_lib.php
 create mode 100644 mod/forumng/tests/generator/lib.php
 create mode 100644 mod/forumng/tests/generator_test.php
 create mode 100644 mod/forumng/tests/rating_test.php
 create mode 100644 mod/forumng/type/clone/forumngtype_clone.php
 create mode 100644 mod/forumng/type/clone/lang/en/forumngtype_clone.php
 create mode 100644 mod/forumng/type/clone/lang/fr/forumngtype_clone.php
 create mode 100644 mod/forumng/type/clone/tests/behat/basic.feature
 create mode 100644 mod/forumng/type/clone/version.php
 create mode 100644 mod/forumng/type/forumngtype.php
 create mode 100644 mod/forumng/type/general/forumngtype_general.php
 create mode 100644 mod/forumng/type/general/lang/en/forumngtype_general.php
 create mode 100644 mod/forumng/type/general/lang/fr/forumngtype_general.php
 create mode 100644 mod/forumng/type/general/version.php
 create mode 100644 mod/forumng/type/studyadvice/forumngtype_studyadvice.php
 create mode 100644 mod/forumng/type/studyadvice/lang/en/forumngtype_studyadvice.php
 create mode 100644 mod/forumng/type/studyadvice/lang/fr/forumngtype_studyadvice.php
 create mode 100644 mod/forumng/type/studyadvice/tests/behat/basic.feature
 create mode 100644 mod/forumng/type/studyadvice/version.php
 create mode 100644 mod/forumng/version.php
 create mode 100644 mod/forumng/view.php
 create mode 100644 mod/forumng/viewmode.php
 create mode 100644 mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck-debug.js
 create mode 100644 mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck-min.js
 create mode 100644 mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck.js
 create mode 100644 mod/forumng/yui/src/savecheck/build.json
 create mode 100644 mod/forumng/yui/src/savecheck/js/savecheck.js
 create mode 100644 mod/forumng/yui/src/savecheck/meta/savecheck.json

diff --git a/mod/forumng/.sams b/mod/forumng/.sams
new file mode 100644
index 0000000..27eddd8
--- /dev/null
+++ b/mod/forumng/.sams
@@ -0,0 +1,6 @@
+<Files feed.php>
+DISABLE_SAMS
+</Files>
+<Files pluginfile.php>
+DISABLE_SAMS
+</Files>
\ No newline at end of file
diff --git a/mod/forumng/DevelopersGuide.doc b/mod/forumng/DevelopersGuide.doc
new file mode 100644
index 0000000000000000000000000000000000000000..5c8e0e6f181b8869d5f1871a1daf11e6a72caeff
GIT binary patch
literal 32768
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
D#Q-n{

literal 0
HcmV?d00001

diff --git a/mod/forumng/README b/mod/forumng/README
new file mode 100644
index 0000000..537fe73
--- /dev/null
+++ b/mod/forumng/README
@@ -0,0 +1,51 @@
+ForumNG
+=======
+
+Copyright 2011 The Open University
+
+
+This is an alternative forum that you can install into standard Moodle.
+
+It does not replace the standard forum, and operates alongside it.
+You can copy forums from the standard forum into ForumNG format if you like
+(...and if it works; this hasn't been tested lately).
+
+Support:
+
+We cannot offer direct support. Please do not contact me directly. If you
+need assistance, try the forum forum on moodle.org. (Remember to make clear
+that you are using ForumNG and not the standard forum.)
+
+Bug reports:
+
+Please report bugs to the Moodle tracker using the 'contributed code' project
+and 'Module: ForumNG' component. Under Version, please select your Moodle
+version e.g. 2.1, 2.2.
+
+Status:
+
+Beta quality code. We intend to switch this project to include live quality
+code at some point after our mid-October update.
+
+Please note that this code is tested on OU systems but we rely on the
+community for testing on other systems.
+
+Requires:
+
+Moodle 2.1+
+Postgres / MySQL
+
+Install:
+
+Place the contents of this source tree into your Moodle installation so that
+within your Moodle root, this file is mod/forumng/README. Then visit the
+Moodle notifications page to install.
+
+If you want the forums to be searchable, you also need to install the
+local_ousearch plugin. (It is best to do this before using ForumNG much,
+otherwise it takes ages to install as it builds indexes for everything.)
+When you install the ousearch plugin, a search box will automatically appear.
+
+Documentation:
+
+None.
diff --git a/mod/forumng/action.php b/mod/forumng/action.php
new file mode 100644
index 0000000..7ff3241
--- /dev/null
+++ b/mod/forumng/action.php
@@ -0,0 +1,70 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This script handles actions from the single 'action form' form that is used
+ * to handle some discussion actions (currently: ratings and flags).
+ *
+ * There is a single form because it is desirable to edit all ratings at once,
+ * which means the form needs to encompass the whole page, and it is not
+ * possible to nest forms inside each other.
+ *
+ * This form is used only for non-Javascript support. The supported actions
+ * (ratings and flags) have their own scripts; this script decodes its
+ * parameters and than requires the relevant script to use that.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+
+/**
+ * Checks whether a POST key matches a given action. If it matches, parameters
+ * are extracted from the string and hacked into the POST parameters that will
+ * be passed to the real script.
+ * @param string $key POST parameter key
+ * @param string $prefix Desired key name prefix
+ */
+function match_action($key, $prefix) {
+    if (strpos($key, $prefix) !== 0) {
+        return false;
+    }
+
+    $params = substr($key, strlen($prefix));
+    $matches = array();
+    while (preg_match('~^_([a-z]+)_([^_]+)(.*)$~', $params, $matches)) {
+        $_POST[$matches[1]] = $matches[2];
+        $params = $matches[3];
+    }
+    return true;
+}
+
+// Loop through all POST parameters looking for a valid action.
+foreach ($_POST as $key => $value) {
+    if (match_action($key, 'action_flag')) {
+        require_once('flagpost.php');
+        exit;
+    }
+    if (match_action($key, 'action_rate')) {
+        require_once('rate.php');
+        exit;
+    }
+}
+
+// If no actions were found, print error.
+print_error('unknownuseraction');
diff --git a/mod/forumng/advancedsearch.php b/mod/forumng/advancedsearch.php
new file mode 100644
index 0000000..419048b
--- /dev/null
+++ b/mod/forumng/advancedsearch.php
@@ -0,0 +1,316 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Search that lets you do full-text and/or author and date conditions.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once($CFG->libdir . '/formslib.php');
+require_once('mod_forumng.php');
+require_once('advancedsearchlib.php');
+
+class advancedsearch_form extends moodleform {
+    public function definition() {
+        global $CFG;
+        $mform =& $this->_form;
+
+        $mform->addElement('header', 'heading', get_string('advancedsearch', 'forumng'));
+
+        $mform->addElement('hidden', 'course', $this->_customdata['course']);
+        $mform->setType('course', PARAM_INT);
+        $mform->addElement('hidden', 'id', $this->_customdata['id']);
+        $mform->setType('id', PARAM_INT);
+        if (isset($this->_customdata['cloneid'])) {
+            $mform->addElement('hidden', 'clone', $this->_customdata['cloneid']);
+            $mform->setType('clone', PARAM_INT);
+        }
+
+        // Words to be searched.
+        $mform->addElement('text', 'query', get_string('words', 'forumng'), 'size="40"');
+        $mform->setType('query', PARAM_TEXT);
+
+        // Author name or OUCU to be filtered.
+        $mform->addElement('text', 'author', get_string('authorname', 'forumng'), 'size="40"');
+        $mform->setType('author', PARAM_TEXT);
+
+        // Posted as moderator.
+        $mform->addElement('checkbox', 'asmoderator', get_string('postedasmoderator', 'forumng'));
+
+        // Date range_from to be filtered
+        $mform->addElement('date_time_selector', 'datefrom',
+                get_string('daterangefrom', 'forumng'),
+                array('optional' => true, 'startyear' => 2011, 'step' => 1,
+                'defaulttime' => $this->_customdata['datefrom']));
+
+        // Date range_to to be filtered
+        $mform->addElement('date_time_selector', 'dateto',
+                get_string('daterangeto', 'forumng'),
+                array('optional'=>true, 'startyear' => 2011, 'step' => 1,
+                'defaulttime' => $this->_customdata['dateto']));
+
+        // Add help buttons
+        $mform->addHelpButton('query', 'words', 'forumng');
+        $mform->addHelpButton('author', 'authorname', 'forumng');
+        $mform->addHelpButton('asmoderator', 'postedasmoderator', 'forumng');
+        $mform->addHelpButton('datefrom', 'daterangefrom', 'forumng');
+
+        // Add "Search all forums"/"Search this forum" and "Cancel" buttons
+        if ($this->_customdata['course']) {
+            $this->add_action_buttons(true, get_string('searchallforums', 'forumng'));
+        } else {
+            $this->add_action_buttons(true, get_string('searchthisforum', 'forumng'));
+        }
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        $datefrom = $data['datefrom'];
+        $dateto = $data['dateto'];
+        if (isset($data['asmoderator'])) {
+            $asmoderator = $data['asmoderator'];
+        } else {
+            $asmoderator = 0;
+        }
+        if ($datefrom > time()) {
+            $errors['datefrom'] = get_string('inappropriatedateortime', 'forumng');
+        }
+        if (($datefrom > $dateto) && $dateto) {
+            $errors['dateto'] = get_string('daterangemismatch', 'forumng');
+        }
+        if ((($data['query'] == '') && ($data['author'] == '') && !$datefrom && !$dateto) && (!$asmoderator)) {
+            $errors['query'] = get_string('nosearchcriteria', 'forumng');
+        }
+        return $errors;
+    }
+}
+/*////////////////////////////////////////////////////////////////////////////*/
+
+$url = new Moodle_url('/mod/forumng/advancedsearch.php');
+$courseid = optional_param('course', 0,  PARAM_INT);
+if ($courseid) {
+    $url->param('course', $courseid);
+    $cmid = 0;
+} else {
+    $cmid = required_param('id', PARAM_INT);
+    $url->param('id', $cmid);
+}
+$query = trim(optional_param('query', '', PARAM_RAW));
+if ($query !== '') {
+    $url->param('query', $query);
+}
+$author = trim(optional_param('author', '', PARAM_RAW));
+if ($author !== '') {
+    $url->param('author', $author);
+}
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    // clone is used to mark shared forums
+    $url->param('clone', $cloneid);
+}
+
+$asmoderator = optional_param('asmoderator', 0, PARAM_INT);
+$url->param('asmoderator', $asmoderator);
+
+$datefrom = optional_param_array('datefrom', 0, PARAM_INT);
+if (!empty($datefrom)) {
+    foreach ($datefrom as $key => $value) {
+        $url->param('datefrom[' . $key . ']', $value);
+    }
+}
+$dateto = optional_param_array('dateto', 0, PARAM_INT);
+if (!empty($dateto)) {
+    foreach ($dateto as $key => $value) {
+        $url->param('dateto[' . $key . ']', $value);
+    }
+}
+// The below are necessary to fool the form into thinking it was submitted again
+// when further requests are made for multiple pages / changing group. This is
+// kind of a horrible way to make the page but it means we can use get_data
+// instead of manually interpreting date dropdowns (incorrectly).
+$submitbutton = optional_param('submitbutton', '', PARAM_RAW);
+if ($submitbutton) {
+    $url->param('submitbutton', $submitbutton);
+}
+$sesskey = optional_param('sesskey', '', PARAM_RAW);
+if ($sesskey) {
+    $url->param('sesskey', $sesskey);
+}
+$form = optional_param('_qf__advancedsearch_form', 0, PARAM_INT);
+if ($form) {
+    $url->param('_qf__advancedsearch_form', $form);
+}
+
+
+// Search in a single forum
+if ($cmid) {
+    $forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+    $cm = $forum->get_course_module();
+    $course = $forum->get_course();
+    $forum->require_view(mod_forumng::NO_GROUPS, 0, true);
+    mod_forumng::search_installed();
+    $allforums = false;
+}
+if ($courseid) {
+    $course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+    require_login($course);
+    $coursecontext = context_course::instance($courseid);
+    mod_forumng::search_installed();
+    $allforums = true;
+}
+
+// Set up page
+$PAGE->set_url($url);
+$PAGE->set_heading($course->fullname);
+if ($allforums) {
+    $PAGE->set_context($coursecontext);
+    $PAGE->set_title($course->shortname . ': ' . get_string('searchallforums', 'forumng'));
+} else {
+    $PAGE->set_context($forum->get_context());
+    $PAGE->set_cm($cm, $course);
+    $PAGE->set_title($course->shortname . ': ' . format_string($forum->get_name()));
+}
+$PAGE->set_pagelayout('base');
+$PAGE->navbar->add(get_string('advancedsearch', 'forumng'));
+
+// Set up the form.
+$now = date('Y-m-d');
+$defaultdatefrom = empty($datefrom) ? date_parse($now . ' 0:0') : $datefrom;
+$defaultdateto = empty($dateto) ? date_parse($now . ' 23:59') : $dateto;
+if ($allforums) {
+    $editform = new advancedsearch_form('advancedsearch.php',
+            array('course'=> $courseid, 'id'=> $cmid, 'datefrom' => $defaultdatefrom,
+            'dateto' => $defaultdateto), 'get');
+} else {
+    $editform = new advancedsearch_form('advancedsearch.php',
+            array('course'=> $courseid, 'id'=> $cmid, 'cloneid' => $cloneid,
+            'datefrom' => $defaultdatefrom, 'dateto' => $defaultdateto), 'get');
+}
+$inputdata = new stdClass;
+$inputdata->query = $query;
+$inputdata->author = $author;
+$editform->set_data($inputdata);
+
+if ($editform->is_cancelled()) {
+    if (isset($forum) ) {
+        $returnurl = $forum->get_url(mod_forumng::PARAM_PLAIN);
+    } else {
+        $returnurl = $CFG->wwwroot . '/course/view.php?id=' . $course->id;
+    }
+    redirect($returnurl, '', 0);
+}
+
+// Process form data.
+$data = $editform->get_data();
+
+// Display header
+$out = mod_forumng_utils::get_renderer();
+print $out->header();
+
+$searchtitle = forumng_get_search_results_title($query, $data ? $data->author : '',
+        $data ? $data->datefrom : 0, $data ? $data->dateto : 0);
+
+if (!$allforums) {
+    // Display group selector if required
+    groups_print_activity_menu($cm, $url);
+    $groupid = mod_forumng::get_activity_group($cm, true);
+    $forum->require_view($groupid, 0, true);
+    print '<br/><br/>';
+}
+$editform->display();
+
+if ($data) {
+    // Searching for free text with or without filtering author and date range.
+    if ($query) {
+        $result = new local_ousearch_search($query);
+        if ($allforums) {
+            // Search all forums.
+            // NOTE: I think this code branch is no longer used as we removed
+            // the 'all forums' facility to the resources_search block, but
+            // perhaps it may be used in standard Moodle installs somehow.
+            $result->set_plugin('mod/forumng');
+            $result->set_course_id($courseid);
+            $result->set_visible_modules_in_course($COURSE);
+
+            // Restrict them to the groups they belong to.
+            if (!isset($USER->groupmember[$courseid])) {
+                $result->set_group_ids(array());
+            } else {
+                $result->set_group_ids($USER->groupmember[$courseid]);
+            }
+            // Add exceptions where they can see other groups.
+            $result->set_group_exceptions(local_ousearch_search::get_group_exceptions($courseid));
+
+            $result->set_user_id($USER->id);
+        } else {
+            // Search this forum.
+            $result->set_coursemodule($forum->get_course_module(true));
+            if ($groupid && $groupid!=mod_forumng::NO_GROUPS) {
+                $result->set_group_id($groupid);
+            }
+        }
+        // Pass necessary data to filter function using ugly global.
+        global $forumngfilteroptions;
+        $forumngfilteroptions = (object)array('author' => trim($data->author),
+                'datefrom' => $data->datefrom, 'dateto' => $data->dateto,
+                'asmoderator' => !empty($data->asmoderator));
+        $result->set_filter('forumng_exclude_words_filter');
+        print $result->display_results($url, $searchtitle);
+    } else {
+        // Searching without free text using author and/or date range.
+        $page = optional_param('page', 0, PARAM_INT);
+        $prevpage = $page-FORUMNG_SEARCH_RESULTSPERPAGE;
+        $prevrange = ($page-FORUMNG_SEARCH_RESULTSPERPAGE+1) . ' - ' . $page;
+
+        // Get result from database query.
+        if ($allforums) {
+            $results = forumng_get_results_for_all_forums($course, trim($data->author),
+                    $data->datefrom, $data->dateto, $page, !empty($data->asmoderator));
+        } else {
+            $results = forumng_get_results_for_this_forum($forum, $groupid, trim($data->author),
+                    $data->datefrom, $data->dateto, $page, !empty($data->asmoderator));
+        }
+        $nextpage = $page + FORUMNG_SEARCH_RESULTSPERPAGE;
+
+        $linknext = null;
+        $linkprev = null;
+
+        if ($results->success) {
+            if (($page-FORUMNG_SEARCH_RESULTSPERPAGE+1)>0) {
+                $url->param('page', $prevpage);
+                $linkprev = $url->out(false);
+            }
+            if ($results->numberofentries == FORUMNG_SEARCH_RESULTSPERPAGE) {
+                $url->param('page', $nextpage);
+                $linknext = $url->out(false);
+            }
+        }
+        if ($results->done ===1) {
+            if (($page-FORUMNG_SEARCH_RESULTSPERPAGE+1)>0) {
+                $url->param('page', $prevpage);
+                $linkprev = $url->out(false);
+            }
+        }
+        print local_ousearch_search::format_results($results, $searchtitle, $page+1, $linkprev,
+                        $prevrange, $linknext, $results->searchtime);
+    }
+}
+
+print $out->footer();
diff --git a/mod/forumng/advancedsearchlib.php b/mod/forumng/advancedsearchlib.php
new file mode 100644
index 0000000..caa6962
--- /dev/null
+++ b/mod/forumng/advancedsearchlib.php
@@ -0,0 +1,407 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Advanced Search library functions.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+define('FORUMNG_SEARCH_RESULTSPERPAGE', 10); // Number of results to display per page
+
+/**
+ * Filter search result.
+ * @param object $result
+ * @return boolean
+ */
+function forumng_exclude_words_filter($result) {
+    global $forumngfilteroptions;
+    $author = $forumngfilteroptions->author;
+    $daterangefrom = $forumngfilteroptions->datefrom;
+    $daterangeto = $forumngfilteroptions->dateto;
+    if (!isset($forumngfilteroptions->asmoderator)) {
+        $forumngfilteroptions->asmoderator = false;
+    }
+
+    // Filter the output based on the input string for "Author name" field.
+    if (!forumng_find_this_user($result->intref1, $author)) {
+        return false;
+    }
+
+    // Filter the output based on the input value for 'Posted as Moderator' field.
+    if (!forumng_check_asmoderator($result->intref1, $forumngfilteroptions->asmoderator)) {
+        return false;
+    }
+
+    // Filter the output based on input date for "Date range from" field.
+    if ($daterangefrom && $daterangefrom > $result->timemodified) {
+        return false;
+    }
+
+    // Filter the output based on input date for "Date range to" field.
+    if ($daterangeto && $daterangeto < $result->timemodified) {
+        return false;
+    }
+    return true;
+}
+
+/**
+ * Get search results.
+ * @param object $forum
+ * @param int $groupid
+ * @param string $author
+ * @param int $daterangefrom
+ * @param int $daterangeto
+ * @param int $page
+ * @param int $resultsperpage (FORUMNG_SEARCH_RESULTSPERPAGE used as constant)
+ * @return object
+ */
+function forumng_get_results_for_this_forum($forum, $groupid, $author=null, $daterangefrom=0,
+        $daterangeto=0, $page, $asmoderator = false, $resultsperpage=FORUMNG_SEARCH_RESULTSPERPAGE) {
+
+    $before = microtime(true);
+
+    global $CFG, $DB, $USER;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+    $forumngid = $forum->get_id();
+    $context = $forum->get_context();
+    $params = array();
+
+    $where = "WHERE d.forumngid = ?";
+    $params[] = $forumngid;
+
+    // Exclude deleted discussion/post.
+    $where .= " AND d.deleted = 0 AND p.deleted = 0 AND p.oldversion = 0 ";
+
+    if ($author) {
+        list($morewhere, $moreparams) = forumng_get_author_sql($author);
+        $where .= $morewhere;
+        $params = array_merge($params, $moreparams);
+    }
+    if ($daterangefrom && !is_array($daterangefrom)) {
+        $where .= " AND p.modified>=?";
+        $params[] = $daterangefrom;
+    }
+    if ($daterangeto && !is_array($daterangeto)) {
+        $where .= " AND p.modified<=?";
+        $params[] = $daterangeto;
+    }
+    if ($groupid) {
+        $where .= " AND (d.groupid = ? OR d.groupid IS NULL)";
+        $params[] = $groupid;
+    }
+    if (!empty($author)) {
+        if (($forum->get_can_post_anon() == true ) && ($forum->can_post_anonymously() == false)) {
+            $where .= " AND p.asmoderator != ? ";
+            $params[] = mod_forumng::ASMODERATOR_ANON;
+        }
+    }
+    if ($asmoderator) {
+        $where .= " AND p.asmoderator > ? ";
+        $params[] = mod_forumng::ASMODERATOR_NO;
+    }
+
+    $sql = "SELECT p.modified, p.id, p.discussionid, p.userid, p.parentpostid,
+            p.subject AS title, p.message AS summary, u.username, u.firstname,
+            u.lastname, p2.subject
+            FROM {forumng_posts} p
+            INNER JOIN {forumng_discussions} d ON d.id = p.discussionid
+            INNER JOIN {user} u ON p.userid = u.id
+            INNER JOIN {forumng_posts} p2 ON p2.id = d.postid
+            $where
+            ORDER BY p.modified DESC, p.id ASC";
+
+    $results = new stdClass;
+    $results->success = 1;
+    $results->numberofentries = 0;
+    $results->done = 0;
+    $posts = $DB->get_records_sql($sql, $params, $page, $resultsperpage);
+    $groupposts = array();
+    foreach ($posts as $post) {
+        if (!$post->title) {
+            // Add Re: if the post doesn't have a subject.
+            $post->title = get_string('re', 'forumng', $post->subject);
+        }
+        $post->title = s(strip_tags($post->title));
+        $post->summary = s(strip_tags(shorten_text($post->summary, 250)));
+        $post->url = $CFG->wwwroot ."/mod/forumng/discuss.php?d=$post->discussionid" .
+                $forum->get_clone_param(mod_forumng::PARAM_PLAIN) . "#p$post->id";
+    }
+    $results->results = $groupposts ? $groupposts : $posts;
+    $results->searchtime = microtime(true) - $before;
+    $results->numberofentries = count($results->results);
+
+    if (count($results->results) < $resultsperpage) {
+        $results->done = 1;
+    } else if (!$extrapost = $DB->get_records_sql($sql, $params, $page+$resultsperpage, 1)) {
+        $results->done = 1;
+    }
+    return $results;
+}
+
+/**
+ * Get search results.
+ * @param object $course
+ * @param string $author
+ * @param int $daterangefrom
+ * @param int $daterangeto
+ * @param int $page
+ * @param int $resultsperpage (FORUMNG_SEARCH_RESULTSPERPAGE used as constant)
+ * @return object
+ */
+function forumng_get_results_for_all_forums($course, $author=null, $daterangefrom=0,
+        $daterangeto=0, $page, $asmoderator = false, $resultsperpage=FORUMNG_SEARCH_RESULTSPERPAGE) {
+
+    $before = microtime(true);
+
+    global $CFG, $DB, $USER;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+    // Get all forums
+    $modinfo = get_fast_modinfo($course);
+    $visibleforums = array();
+    $accessallgroups = array();
+    foreach ($modinfo->cms as $cmid => $cm) {
+        if ($cm->modname === 'forumng' && $cm->uservisible) {
+            $visibleforums[$cm->instance] = $cm->groupmode;
+
+            // Check access all groups for this forum, if they have it, add to list
+            $forum = mod_forumng::get_from_id($cm->instance, mod_forumng::CLONE_DIRECT);
+            if ($forum->get_group_mode() == SEPARATEGROUPS) {
+                if (has_capability('moodle/site:accessallgroups', $forum->get_context())) {
+                    $accessallgroups[] = $cm->instance;
+                }
+            }
+        }
+    }
+    $forumngids = array_keys($visibleforums);
+    $separategroupsforumngids = array_keys($visibleforums, SEPARATEGROUPS);
+
+    $params = array();
+
+    list ($inforumngids, $moreparams) = mod_forumng_utils::get_in_array_sql(
+            'd.forumngid' , $forumngids);
+    $where = "WHERE $inforumngids";
+    $params = array_merge($params, $moreparams);
+
+    list ($inseparategroups, $moreparams) = mod_forumng_utils::get_in_array_sql(
+            'd.forumngid', $separategroupsforumngids);
+    $where .= " AND ((NOT ($inseparategroups))";
+    $params = array_merge($params, $moreparams);
+
+    list ($inaccessallgroups, $moreparams) = mod_forumng_utils::get_in_array_sql(
+            'd.forumngid', $accessallgroups);
+    $where .= " OR $inaccessallgroups";
+    $params = array_merge($params, $moreparams);
+
+    $where .= " OR gm.id IS NOT NULL";
+    $where .= " OR d.groupid IS NULL)";
+
+    // Note: Even if you have capability to view the deleted or timed posts,
+    // we don't show them for consistency with the full-text search.
+    $currenttime = time();
+    $where .= " AND (? >= d.timestart OR d.timestart = 0)";
+    $params[] = $currenttime;
+    $where .= " AND (? < d.timeend OR d.timeend = 0)";
+    $params[] = $currenttime;
+
+    // Exclude older post versions.
+    $where .= " AND p.oldversion = 0 ";
+    $where .= " AND d.deleted = 0 AND p.deleted = 0 ";
+
+    if (!empty($author)) {
+        $coursecontext = context_course::instance($course->id);
+        $seeanon = has_capability('mod/forumng:postanon', $coursecontext);
+        if ($asmoderator) {
+            if ($seeanon) {
+                $where .= " AND p.asmoderator > ? ";
+                $params[] = mod_forumng::ASMODERATOR_NO;
+            } else {
+                $where .= " AND p.asmoderator = ? ";
+                $params[] = mod_forumng::ASMODERATOR_IDENTIFY;
+            }
+        } else if (!$seeanon) {
+            $where .= " AND p.asmoderator != ? ";
+            $params[] = mod_forumng::ASMODERATOR_ANON;
+        }
+    }
+
+    if ($author) {
+        list($morewhere, $moreparams) = forumng_get_author_sql($author);
+        $where .= $morewhere;
+        $params = array_merge($params, $moreparams);
+    }
+    if ($daterangefrom && !is_array($daterangefrom)) {
+        $where .= " AND p.modified>=?";
+        $params[] = $daterangefrom;
+    }
+    if ($daterangeto && !is_array($daterangeto)) {
+        $where .= " AND p.modified<=?";
+        $params[] = $daterangeto;
+    }
+
+    $sql = "SELECT p.modified, p.id, p.discussionid, gm.id AS useringroup,
+            p.userid, p.parentpostid, p.subject AS title, p.message AS summary, u.username,
+            u.firstname, u.lastname, d.forumngid, d.groupid, p2.subject AS discussionsubject
+            FROM {forumng_posts} p
+            INNER JOIN {forumng_discussions} d ON d.id = p.discussionid
+            INNER JOIN {forumng_posts} p2 ON p2.id = d.postid
+            INNER JOIN {user} u ON p.userid = u.id
+            LEFT JOIN {groups_members} gm ON gm.groupid = d.groupid AND gm.userid = $USER->id
+            $where
+            ORDER BY p.modified DESC, p.id ASC";
+
+    $results = new stdClass;
+    $results->success = 1;
+    $results->numberofentries = 0;
+    $results->done = 0;
+    $posts = $DB->get_records_sql($sql, $params, $page, $resultsperpage);
+    foreach ($posts as $post) {
+        if (!$post->title) {
+            // Ideally we would get the parent post that has a subject, but
+            // this could involve a while loop that might make numeroous
+            // queries, so instead, let's just use the discussion subject
+            $post->title = get_string('re', 'forumng', $post->discussionsubject);
+        }
+        $post->title = s(strip_tags($post->title));
+        $post->summary = s(strip_tags(shorten_text($post->summary, 250)));
+        $post->url = $CFG->wwwroot . "/mod/forumng/discuss.php?d=$post->discussionid" .
+                $forum->get_clone_param(mod_forumng::PARAM_PLAIN) . "#p$post->id";
+    }
+    $results->results = $posts;
+    $results->searchtime = microtime(true) - $before;
+    $results->numberofentries = count($results->results);
+    if (count($results->results) < $resultsperpage) {
+        $results->done = 1;
+    } else if (!$extrapost = $DB->get_records_sql($sql, $params, $page+$resultsperpage, 1)) {
+        $results->done = 1;
+    }
+    return $results;
+}
+
+/**
+ * Find this user.
+ * @param int $postid
+ * @param string $author
+ * @return boolean
+ */
+function forumng_find_this_user($postid, $author=null) {
+    global $CFG, $DB;
+    require_once($CFG->libdir . '/dmllib.php');
+    if (!$author) {
+        return true;
+    }
+    $where = "WHERE p.id = ? AND p.asmoderator != ?";
+    $params = array($postid, mod_forumng::ASMODERATOR_ANON);
+    list($morewhere, $moreparams) = forumng_get_author_sql($author);
+    $where .= $morewhere;
+    $params = array_merge($params, $moreparams);
+    $sql = "SELECT p.id, u.username, u.firstname, u.lastname
+            FROM {forumng_posts} p
+            INNER JOIN {user} u ON p.userid = u.id
+            $where";
+    return $DB->record_exists_sql($sql, $params);
+}
+
+/**
+ * Find user if a moderator.
+ * @param int $postid
+ * @param boolean $asmoderator
+ * @return boolean
+ */
+function forumng_check_asmoderator($postid, $asmoderator = false) {
+    global $CFG, $DB;
+    if (!$asmoderator) {
+        return true;
+    }
+    $where = "WHERE p.id = ? AND p.asmoderator > ?";
+    $params = array($postid, mod_forumng::ASMODERATOR_NO);
+    $sql = "SELECT p.id
+    FROM {forumng_posts} p
+    $where";
+    return $DB->record_exists_sql($sql, $params);
+}
+
+/**
+ * Get author sql
+ * @param string $author
+ * @param string $t
+ * @return array with two elements containing the where sql string and the params array
+ */
+function forumng_get_author_sql($author, $t='u') {
+    $where = " AND ";
+    $params = array();
+    $author = trim($author);
+    $pos = strpos($author, ' ');
+    if ($pos) {
+        $fname = trim(substr($author, 0, $pos));
+        $lname = trim(substr($author, ($pos+1)));
+        // Searching for complete first name and last name fully or partially ignoring case.
+        // Finds "Mahmoud Kassaei" by typing "Mahmoud k", "Mahmoud kas", "Mahmoud Kassaei", etc.
+        $where .= " (UPPER($t.firstname) LIKE UPPER(?) AND UPPER($t.lastname) LIKE UPPER(?))";
+        $params[] = $fname;
+        $params[] = $lname;
+    } else {
+        // Searching for user name fully ignoring case
+        // Finds "mk4359",  "Mk4359""MK4359", etc.
+        $where .= "((UPPER($t.username)=UPPER(?)) ";
+        $params[] = $author;
+
+        // Search for first name only.
+        // Finds "Mah",  "Mahmo", "mahmoud", etc.
+        $where .= " OR (UPPER($t.firstname) LIKE UPPER(?)) ";
+        $params[] = $author . '%';
+
+        // Search for surname only.
+        // Finds "Kass",  "kassa", "Kassaei", etc.
+        $where .= " OR (UPPER($t.lastname) LIKE UPPER(?))) ";
+        $params[] = $author . '%';
+    }
+    return array($where, $params);
+}
+
+/**
+ * Get search results title
+ * @param string $query
+ * @param string $author
+ * @param int $daterangefrom
+ * @param int $daterangeto
+ * @return string
+ */
+function forumng_get_search_results_title($query='', $author='',
+        $daterangefrom=0, $daterangeto=0) {
+    // Set the search results title
+    if ($query) {
+        if (!($author || $daterangefrom || $daterangeto)) {
+            return get_string('searchresultsfor', 'local_ousearch', $query);
+        }
+    }
+    $searchoptions = $query ? $query . ' (' : ' (';
+    $searchoptions .= $author ? get_string('author', 'forumng', $author): '';
+    $searchoptions .= ($author && ($daterangefrom || $daterangeto)) ? ', ' : '';
+    $searchoptions .= $daterangefrom ? get_string('from', 'forumng',
+            userdate($daterangefrom)) : '';
+    $searchoptions .= ($daterangefrom && $daterangeto) ? ', ' : '';
+    $searchoptions .= $daterangeto ? get_string('to', 'forumng', userdate($daterangeto)) : '';
+    $searchoptions .= ' )';
+    if ($query) {
+        return get_string('searchresultsfor', 'local_ousearch', $searchoptions);
+    }
+    return get_string('searchresults', 'forumng', $searchoptions);
+}
diff --git a/mod/forumng/alert.php b/mod/forumng/alert.php
new file mode 100644
index 0000000..133e4b5
--- /dev/null
+++ b/mod/forumng/alert.php
@@ -0,0 +1,139 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Script to send alert for inappropriate posts, or show form for it.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+$postid = required_param('p', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$pageparams = array('p'=>$postid);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$post = mod_forumng_post::get_from_id($postid, $cloneid);
+$discussion = $post->get_discussion();
+$d = $discussion->get_id();
+$forum = $post->get_forum();
+$forumngid = $forum->get_id();
+$course = $forum->get_course();
+
+
+// Check permission
+$post->require_view();
+
+if (!$post->can_alert($whynot)) {
+    print_error($whynot, 'forumng');
+}
+
+// Set up page
+$pagename = get_string('alert_pagename', 'forumng');
+$url = new moodle_url('/mod/forumng/alert.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+// Create the alert form
+require_once('alert_form.php');
+$customdata = (object)array(
+        'forumname' => $forum->get_name(),
+        'discussionid' => $d,
+        'postid' => $postid,
+        'cloneid' => $cloneid,
+        'email' => $USER->email,
+        'username' => $USER->username,
+        'ip' => getremoteaddr(),
+        'fullname' => fullname($USER, true),
+        'coursename' => $course->shortname,
+        'url' => $CFG->wwwroot . '/mod/forumng/discuss.php?' .
+                $discussion->get_link_params(mod_forumng::PARAM_PLAIN) . '#p'.$postid
+);
+
+$mform = new mod_forumng_alert_form('alert.php', $customdata);
+
+// If cancelled, return to the post
+if ($mform->is_cancelled()) {
+    redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) .
+            '#p' . $postid);
+}
+
+// If the alert form has been submitted successfully, send the email.
+if ($fromform = $mform->get_data()) {
+
+    $alltext = get_string('alert_emailpreface', 'forumng', $customdata)."\n\n";
+
+    // Print the reasons for reporting
+    $alltext .= get_string('alert_reasons', 'forumng', $customdata)."\n";
+    if (!empty($fromform->alert_condition1)) {
+        $alltext .= '* '.get_string('alert_condition1', 'forumng')."\n";
+    }
+    if (!empty($fromform->alert_condition2)) {
+        $alltext .= '* '.get_string('alert_condition2', 'forumng')."\n";
+    }
+    if (!empty($fromform->alert_condition3)) {
+        $alltext .= '* '.get_string('alert_condition3', 'forumng')."\n";
+    }
+    if (!empty($fromform->alert_condition4)) {
+        $alltext .= '* '.get_string('alert_condition4', 'forumng')."\n";
+    }
+    if (!empty($fromform->alert_condition5)) {
+        $alltext .= '* '.get_string('alert_condition5', 'forumng')."\n";
+    }
+    if (!empty($fromform->alert_condition6)) {
+        $alltext .= '* '.get_string('alert_condition6', 'forumng')."\n";
+    }
+    if (!empty($fromform->alert_conditionmore)) {
+        $alltext .= "\n".$fromform->alert_conditionmore."\n";
+    }
+
+    $recipients = $forum->get_reportingemails();
+
+    foreach ($recipients as $forumemail) {
+        // Send out email.
+        $fakeuser = (object)array(
+            'email' => $forumemail,
+            'mailformat' => 1,
+            'id' => -1
+             );
+        $from = $USER;
+        $subject = get_string('alert_emailsubject', 'forumng', $customdata);
+        $alltext .= get_string('alert_emailappendix', 'forumng' );
+
+        if (!email_to_user($fakeuser, $from, $subject, $alltext)) {
+            print_error('error_sendalert', 'forumng', $url, $fakeuser->email);
+        }
+    }
+    // Log it after senting out
+    $post->log('report post');
+
+    print $out->header();
+
+    print $out->box(get_string('alert_feedback', 'forumng'));
+    print $out->continue_button('discuss.php?' .
+            $discussion->get_link_params(mod_forumng::PARAM_HTML) . '#p' . $postid);
+
+} else {
+    // Show the alert form.
+    print $out->header();
+    print $mform->display();
+}
+
+print $out->footer();
diff --git a/mod/forumng/alert_form.php b/mod/forumng/alert_form.php
new file mode 100644
index 0000000..9411d83
--- /dev/null
+++ b/mod/forumng/alert_form.php
@@ -0,0 +1,102 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Form for user to report inappropriate posts.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_alert_form extends moodleform {
+
+    public function definition() {
+
+        global $CFG, $USER;
+        $mform = $this->_form;
+
+        // Add all the check boxes
+        $mform->addElement('static', 'alert_intro', '',
+            get_string('alert_info', 'forumng'));
+
+        $checkboxarray = array();
+
+        $checkboxarray[] =& $mform->createElement('checkbox', 'alert_condition1',
+            '', get_string('alert_condition1', 'forumng'));
+
+        $checkboxarray[] =& $mform->createElement('checkbox', 'alert_condition2',
+            '', get_string('alert_condition2', 'forumng'));
+
+        $checkboxarray[] =& $mform->createElement('checkbox', 'alert_condition3',
+            '', get_string('alert_condition3', 'forumng'));
+
+        $checkboxarray[] =& $mform->createElement('checkbox', 'alert_condition4',
+            '', get_string('alert_condition4', 'forumng'));
+
+        $checkboxarray[] =& $mform->createElement('checkbox', 'alert_condition5',
+            '', get_string('alert_condition5', 'forumng'));
+
+        $checkboxarray[] =& $mform->createElement('checkbox', 'alert_condition6',
+            '', get_string('alert_condition6', 'forumng'));
+
+        $mform->addGroup($checkboxarray, get_string('alert_reasons', 'forumng'),
+                get_string('alert_reasons', 'forumng'), '<br />', false);
+
+        // Plain text field.
+        $mform->addElement('textarea', 'alert_conditionmore',
+                get_string('alert_conditionmore', 'forumng'), array('cols'=>50,
+                    'rows'=> 15));
+
+        $mform->setType('alert_conditionmore', PARAM_RAW);
+
+        $mform->addElement('static', '', '',
+            get_string('alert_reporterinfo', 'forumng'));
+
+        $mform->addElement('static', '', '',
+            get_string('alert_reporterdetail', 'forumng', $this->_customdata));
+
+        // Add submit and cancel buttons.
+        $this->add_action_buttons(true, get_string('alert_submit', 'forumng'));
+
+        // Add postid as hidden field.
+        $mform->addElement('hidden', 'p', $this->_customdata->postid);
+        $mform->setType('p', PARAM_INT);
+        $mform->addElement('hidden', 'clone', $this->_customdata->cloneid);
+        $mform->setType('clone', PARAM_INT);
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        // Error if all fields are empty.
+        if (empty($data['alert_condition1']) && empty($data['alert_condition2']) &&
+                empty($data['alert_condition3']) && empty($data['alert_condition4']) &&
+                empty($data['alert_condition5']) && empty($data['alert_condition6']) &&
+                empty($data['alert_conditionmore'])) {
+            $errors['alert_intro'] = get_string('invalidalert', 'forumng');
+        }
+
+        if (empty($data['alert_condition1']) && empty($data['alert_condition2']) &&
+                empty($data['alert_condition3']) && empty($data['alert_condition4']) &&
+                empty($data['alert_condition5']) && empty($data['alert_condition6']) &&
+                !empty($data['alert_conditionmore'])) {
+            $errors['alert_intro'] = get_string('invalidalertcheckbox', 'forumng');
+        }
+
+        return $errors;
+    }
+}
diff --git a/mod/forumng/amd/build/featurebtns.min.js b/mod/forumng/amd/build/featurebtns.min.js
new file mode 100644
index 0000000000000000000000000000000000000000..e0ba603ba63d92ee782b750031597bfe92c7bfb4
GIT binary patch
literal 1228
zcmah|%aYnK5d0N0TLn_BR?A+J6h`EdLoPYxND)f5WUQ<$IhG7XDE>WT@!llt$(A&a
zo}O-{3u85z!_QxxZnwZ7cddT*p@ju2I-3XMERiguyR~eSTnxrciJh?~d~=zp^jD+w
z<Q#a2%7i2vW0l*`G~*kiLP_ZK<A+bfq2l#9jZk)u<JbjS?aglum%eoOCO!XrTVQg2
zpT+X|rNj5qZ3x}dJ-c+g25JhDAK+>+cuDan2|N_8?P|MvDzpq8;+Yht^&y!h%B&N7
ztS8n5!V3&JlznoR0_9rfB{|cOv14h4Oyo2L>#T->5Q^vC6HvxCmD~ay4#}G<c8H}6
zQH>Ek)AT+x1a{=q<HQK1(smU}`rb6RNjI<<08Mq}b=-L&0N6@oe5Jz@g<<T<llksd
zZzm9(tAc5kee30kGhn%^8=TmN3Diz4kEFtWL0Ksz-;~;t6-`U7FzP~^q`N}M`FOFX
zX|FaTM$?}6yprAvEY%AxPC1+QyGUvsN~Z)MGDu|9s(=SLCERQYW>aIEE+k>wXaT;<
zYJ*v8S#@~ioI?^!sPKRESUip}{JHOeAA~R)rSI_>)p09~ei_mSLU|)wWFu~VJ&)u3
z5Jy&ytSuK9EsLOAVtQZvSBkg$j$M;D*g>jTrMFUEnf&$2Nl2~aO{>=k<BKk2S0OBR
zGSk5;4Bh>LhS{Gi(_dd(<_@Z8kbik20z^=M3GCjCvD#gMMnfUgwAJWSn<$jbADEb?
AuK)l5

literal 0
HcmV?d00001

diff --git a/mod/forumng/amd/src/featurebtns.js b/mod/forumng/amd/src/featurebtns.js
new file mode 100644
index 0000000..73c7a44
--- /dev/null
+++ b/mod/forumng/amd/src/featurebtns.js
@@ -0,0 +1,116 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/*
+ * JavaScript to support forum + discussion feature buttons.
+ *
+ * @package mod_forumng
+ * @copyright 2016 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/**
+ * @module mod_forumng/featurebtns
+ */
+define(['jquery', 'core/str'], function($, strings) {
+    /**
+     * Are feature buttons currently hidden by user?
+     *
+     * @type {boolean}
+     */
+    var mobileIsHidden  = true;
+    /**
+     * @alias module:mod_forumng/featurebtns
+     */
+    var t = {
+        /**
+         * Hide most feature buttons on mobile device.
+         *
+         * @public
+         */
+        initMobileHide : function() {
+            var w = $(window);
+            if (w.width() < 768) {
+                t.mobileHide();
+            }
+            $(window).on('resize', function() {
+                if (w.width() < 768 && mobileIsHidden) {
+                    t.mobileHide();
+                } else if (w.width() > 768 && mobileIsHidden) {
+                    t.mobileShow();
+                }
+            });
+        },
+
+        /**
+         * Hides feature buttons not needed on mobile.
+         * Creates a button to show them again.
+         *
+         * @private
+         */
+        mobileHide : function() {
+            if (!mobileIsHidden) {
+                /* User has already chosen to show buttons, keep on */
+                return;
+            }
+            var tohide = false;
+            $('#forumng-features:first > div form:not(.fng-mobile-on)').each(function(index, e) {
+                /* Loop so we can ignore features already disabled in CSS */
+                var el = $(e);
+                if (el.css('display') !== 'none') {
+                    el.css('display', 'none');
+                    tohide = true;
+                }
+            });
+            if (tohide) {
+                // Create button that will show the feature buttons again.
+                if ($('#forumng-features:first div.mobileshow').length) {
+                    $('#forumng-features:first > div.mobileshow').css('display', '');
+                } else {
+                    var lstring = '';
+                    var allstrings = strings.get_strings([
+                        {key: 'tooltip_show_features', component: 'mod_forumng'}
+                    ]);
+                    // Wait for promise to end.
+                    var promise = $.when(allstrings);
+                    // How we deal with promise objects is by adding callbacks.
+                    promise.done(function(langstrings) {
+                        lstring = langstrings[0];
+                    });
+                    var html = '<div class="mobileshow"><form method="get" action="#" class="fng-mobile-on">' +
+                        '<input type="submit" value="..."' + ' title="' + lstring + '"></form></div>';
+                    // Add button after last shown on mobile button (use parents, some child-divs).
+                    $('#forumng-features:first > div form.fng-mobile-on').last().parents('div[class^=forumngfeature_]').after(html);
+                    $('#forumng-features:first div.mobileshow form input:first').on('click', function(e) {
+                        e.preventDefault();
+                        t.mobileShow();
+                        mobileIsHidden = false;
+                    });
+                }
+            }
+        },
+        /**
+         * Shows all feature buttons.
+         * Creates a button to show them again.
+         *
+         * @private
+         */
+        mobileShow : function() {
+            $('#forumng-features:first > div:not(.fng-mobile-on) form').css('display', '');
+            $('#forumng-features:first > div.mobileshow').css('display', 'none');
+        }
+    };
+    return t;
+});
diff --git a/mod/forumng/atomlib.php b/mod/forumng/atomlib.php
new file mode 100644
index 0000000..478c0d4
--- /dev/null
+++ b/mod/forumng/atomlib.php
@@ -0,0 +1,194 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Library for Atom feeds, sort of like the system RSS library. (Originally
+ * by Matt Clarkson from Catalyst.)
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+function atom_standard_header($uniqueid, $link, $updated, $title = null, $description = null) {
+
+    global $CFG, $USER;
+
+    $status = true;
+    $result = "";
+
+    if (!$site = get_site()) {
+        $status = false;
+    }
+
+    if ($status) {
+
+        // Calculate title, link and description.
+        if (empty($title)) {
+            $title = format_string($site->fullname);
+        }
+
+        // XML headers.
+        $result .= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
+        $result .= "<feed xmlns=\"http://www.w3.org/2005/Atom\">\n";
+
+        // Open the channel
+        // write channel info.
+        $result .= atom_full_tag('id', 1, false, htmlspecialchars($uniqueid));
+        $result .= atom_full_tag('updated', 1, false, date_format_rfc3339($updated));
+        $result .= atom_full_tag('title', 1, false, htmlspecialchars(html_to_text($title)));
+        $result .= atom_full_tag('link', 1, false, null, array('href'=>$link, 'rel'=>'self'));
+        if (!empty($description)) {
+            $result .= atom_full_tag('subtitle', 1, false, $description);
+        }
+        $result .= atom_full_tag('generator', 1, false, 'Moodle');
+        $today = getdate();
+        $result .= atom_full_tag('rights', 1, false, '&#169; '. $today['year'] .' '.
+                format_string($site->fullname));
+
+        // Write image info.
+        $out = mod_forumng_utils::get_renderer();
+        $atompix = $out->pix_url('/i/rsssitelogo');
+
+        // Write the info.
+        $result .= atom_full_tag('logo', 1, false, $atompix);
+
+    }
+
+    if (!$status) {
+        return false;
+    } else {
+        return $result;
+    }
+}
+
+
+function atom_add_items($items) {
+
+    global $CFG;
+
+    $result = '';
+    $xhtmlattr = array('type'       => 'xhtml');
+
+    if (!empty($items)) {
+        foreach ($items as $item) {
+            $result .= atom_start_tag('entry', 1, true);
+            $result .= atom_full_tag('title', 2, false,
+                    htmlspecialchars(html_to_text($item->title)));
+            $result .= atom_full_tag('link', 2, false, null,
+                    array('href' => $item->link, 'rel'=>'alternate'));
+            $result .= atom_full_tag('updated', 2, false, date_format_rfc3339($item->pubdate));
+            // Include the author if exists.
+            if (isset($item->author)) {
+                $result .= atom_start_tag('author', 2, true);
+                $result .= atom_full_tag('name', 3, false, $item->author);
+                $result .= atom_end_tag('author', 2, true);
+            }
+            $result .= atom_full_tag('content', 2, false,
+                    '<div xmlns="http://www.w3.org/1999/xhtml">'.clean_text($item->description,
+                    FORMAT_HTML).'</div>', $xhtmlattr);
+            $result .= atom_full_tag('id', 2, false, htmlspecialchars($item->link));
+            if (isset($item->tags)) {
+                $tagdata = array();
+                if (isset($item->tagscheme)) {
+                    $tagdata['scheme'] = $item->tagscheme;
+                }
+                foreach ($item->tags as $tag) {
+                    $tagdata['term'] = $tag;
+                    $result .= atom_full_tag('category', 2, true, false, $tagdata);
+                }
+            }
+            $result .= atom_end_tag('entry', 1, true);
+
+        }
+    } else {
+        $result = false;
+    }
+    return $result;
+}
+
+
+// This function return all the common footers for every rss feed in the site.
+function atom_standard_footer($title = null, $link = null, $description = null) {
+
+    global $CFG, $USER;
+
+    $status = true;
+    $result = '';
+
+    // Close the rss tag.
+    $result .= '</feed>';
+
+    return $result;
+}
+
+
+
+// Return the xml start tag.
+function atom_start_tag($tag, $level=0, $endline=false, $attributes=null) {
+    if ($endline) {
+        $endchar = "\n";
+    } else {
+        $endchar = "";
+    }
+    $attrstring = '';
+    if (!empty($attributes) && is_array($attributes)) {
+        foreach ($attributes as $key => $value) {
+            $attrstring .= " ".$key."=\"".htmlspecialchars($value)."\"";
+        }
+    }
+    return str_repeat(" ", $level*2)."<".$tag.$attrstring.">".$endchar;
+}
+
+// Return the xml end tag.
+function atom_end_tag($tag, $level=0, $endline=true) {
+    if ($endline) {
+        $endchar = "\n";
+    } else {
+        $endchar = "";
+    }
+    return str_repeat(" ", $level*2)."</".$tag.">".$endchar;
+}
+
+
+// Return the start tag, the contents and the end tag.
+function atom_full_tag($tag, $level=0, $endline=true, $content, $attributes=null) {
+    global $CFG;
+    $st = atom_start_tag($tag, $level, $endline, $attributes);
+    if ($content === false) {
+        $st = preg_replace('~>$~', ' />', $st);
+        return $st;
+    }
+    $co = "";
+    $co = preg_replace("/\r\n|\r/", "\n", $content);
+    $et = atom_end_tag($tag, 0, true);
+
+    return $st.$co.$et;
+}
+
+
+function date_format_rfc3339($timestamp=0) {
+
+    $date = date('Y-m-d\TH:i:s', $timestamp);
+
+    $matches = array();
+
+    if (preg_match('/^([\-+])(\d{2})(\d{2})$/', date('O', $timestamp), $matches)) {
+        $date .= $matches[1].$matches[2].':'.$matches[3];
+    } else {
+        $date .= 'Z';
+    }
+    return $date;
+}
diff --git a/mod/forumng/attachments.php b/mod/forumng/attachments.php
new file mode 100644
index 0000000..9d3d568
--- /dev/null
+++ b/mod/forumng/attachments.php
@@ -0,0 +1,68 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * AJAX script used to get file manager draft IDs when making a new reply in
+ * the JavaScript mode.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Get parameters, load objects, and check security
+$pageparams = array();
+$cmid = required_param('id', PARAM_INT);
+$pageparams['id'] = $cmid;
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$forum->require_view(mod_forumng::NO_GROUPS);
+
+// Work out some standard variables
+$filecontext = $forum->get_context(true); // All files stored in real forum, if this is clone
+$fileoptions = array('subdirs'=>false, 'maxbytes'=>$forum->get_max_bytes());
+
+// Set up file area
+$draftitemid = 0; // We don't accept this form, so it's always a new one
+$messagedraftitemid = 0;
+
+// New reply
+file_prepare_draft_area($draftitemid, $filecontext->id, 'mod_forumng', 'attachment',
+        null, $fileoptions);
+file_prepare_draft_area($messagedraftitemid, $filecontext->id, 'mod_forumng', 'message',
+        0, $fileoptions);
+
+// Get the files and count
+$options = file_get_drafarea_files($draftitemid, '/');
+$usercontext = context_user::instance($USER->id);
+$fs = get_file_storage();
+$files = $fs->get_area_files($usercontext->id, 'user', 'draft', $options->itemid, 'id', false);
+$filecount = count($files);
+$options->filecount = $filecount;
+
+$messageoptions = file_get_drafarea_files($messagedraftitemid, '/');
+$messageoptions->filecount = 0;
+
+$combined = (object)array('options' => $options, 'messageoptions' => $messageoptions);
+
+// Print for output
+print json_encode($combined);
diff --git a/mod/forumng/backup/moodle2/backup_forumng_activity_task.class.php b/mod/forumng/backup/moodle2/backup_forumng_activity_task.class.php
new file mode 100644
index 0000000..a49765e
--- /dev/null
+++ b/mod/forumng/backup/moodle2/backup_forumng_activity_task.class.php
@@ -0,0 +1,82 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum backup task.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+// Because it exists (must).
+require_once($CFG->dirroot . '/mod/forumng/backup/moodle2/backup_forumng_stepslib.php');
+
+// Because it exists (optional).
+require_once($CFG->dirroot . '/mod/forumng/backup/moodle2/backup_forumng_settingslib.php');
+
+/**
+ * forumng backup task that provides all the settings and steps to perform one
+ * complete backup of the activity.
+ */
+class backup_forumng_activity_task extends backup_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have.
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity.
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Forum only has one structure step.
+        $this->add_step(new backup_forumng_activity_structure_step('forumng structure',
+                'forumng.xml'));
+    }
+
+    /**
+     * Code the transformations to perform in the activity in
+     * order to get transportable (encoded) links.
+     */
+    static public function encode_content_links($content) {
+        global $CFG;
+
+        $base = preg_quote($CFG->wwwroot, "/");
+
+        // Link to the list of forumngs.
+        $search = "/(".$base."\/mod\/forumng\/index.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@FORUMNGINDEX*$2@$', $content);
+
+        // Link to forumng view by moduleid.
+        $search = "/(".$base."\/mod\/forumng\/view.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@FORUMNGVIEWBYID*$2@$', $content);
+
+        // Link to forumng discussion with relative syntax.
+        $search = "/(".$base."\/mod\/forumng\/discuss.php\?d\=)([0-9]+)\#p([0-9]+)/";
+        $content = preg_replace($search, '$@FORUMNGDISCUSSIONVIEWINSIDE*$2*$3@$', $content);
+
+        // Link to forumng discussion by discussionid.
+        $search = "/(".$base."\/mod\/forumng\/discuss.php\?d\=)([0-9]+)/";
+        $content = preg_replace($search, '$@FORUMNGDISCUSSIONVIEW*$2@$', $content);
+
+        return $content;
+    }
+}
diff --git a/mod/forumng/backup/moodle2/backup_forumng_settingslib.php b/mod/forumng/backup/moodle2/backup_forumng_settingslib.php
new file mode 100644
index 0000000..1389c53
--- /dev/null
+++ b/mod/forumng/backup/moodle2/backup_forumng_settingslib.php
@@ -0,0 +1,29 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum backup settings (currently none).
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+// This activity has not particular settings but the inherited from the generic
+// backup_activity_task so here there isn't any class definition, like the ones
+// existing in /backup/moodle2/backup_settingslib.php (activities section).
diff --git a/mod/forumng/backup/moodle2/backup_forumng_stepslib.php b/mod/forumng/backup/moodle2/backup_forumng_stepslib.php
new file mode 100644
index 0000000..c08bf0b
--- /dev/null
+++ b/mod/forumng/backup/moodle2/backup_forumng_stepslib.php
@@ -0,0 +1,267 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum backup structure step.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/**
+ * Define all the backup steps that will be used by the backup_forumng_activity_task.
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Define the complete forumng structure for backup, with file and id annotations.
+ */
+class backup_forumng_activity_structure_step extends backup_activity_structure_step {
+
+    protected function define_structure() {
+
+        // To know if we are including userinfo.
+        $userinfo = $this->get_setting_value('userinfo');
+
+        // Define each element separated.
+
+        $forumng = new backup_nested_element('forumng', array('id'), array(
+            'name', 'intro', 'introformat', 'introduction', 'introductionformat', 'type',
+            'ratingscale', 'ratingfrom', 'ratinguntil',
+            'ratingthreshold', 'grading', 'attachmentmaxbytes',
+            'reportingemail', 'subscription', 'feedtype', 'feeditems',
+            'maxpostsperiod', 'maxpostsblock', 'postingfrom', 'postinguntil',
+            'typedata', 'magicnumber', 'completiondiscussions', 'completionreplies',
+            'completionposts', 'removeafter', 'removeto', 'shared', 'originalcmid',
+            'gradingscale', 'canpostanon', 'enabletags', 'enableratings'));
+
+        $discussions = new backup_nested_element('discussions');
+
+        $discussion = new backup_nested_element('discussion', array('id'), array(
+            'groupid', 'timestart', 'timeend', 'deleted', 'locked', 'sticky'));
+
+        $posts = new backup_nested_element('posts');
+
+        $post = new backup_nested_element('post', array('id'), array(
+            'parentpostid', 'userid', 'created', 'modified', 'deleted', 'deleteuserid',
+            'important', 'mailstate', 'oldversion', 'edituserid',
+            'subject', 'message', 'messageformat', 'attachments', 'asmoderator'));
+
+        $newratings = new backup_nested_element('newratings');
+
+        $newrating = new backup_nested_element('newrating', array('id'), array(
+            'component', 'ratingarea', 'scaleid', 'value', 'userid', 'timecreated', 'timemodified'));
+
+        $ratings = new backup_nested_element('ratings');
+
+        $rating = new backup_nested_element('rating', array('id'), array(
+            'userid', 'time', 'rating'));
+
+        $subscriptions = new backup_nested_element('subscriptions');
+
+        $subscription = new backup_nested_element('subscription', array('id'), array(
+            'userid', 'subscribed', 'discussionid', 'clonecmid', 'groupid'));
+
+        $readdiscussions = new backup_nested_element('readdiscussions');
+
+        $read = new backup_nested_element('read', array('id'), array(
+            'userid', 'time'));
+
+        $readposts = new backup_nested_element('readposts');
+
+        $readp = new backup_nested_element('readpost', array('id'), array(
+                'userid', 'time'));
+
+        $drafts = new backup_nested_element('drafts');
+
+        $draft = new backup_nested_element('draft', array('id'), array(
+            'userid', 'groupid', 'parentpostid',
+            'subject', 'message', 'messageformat', 'attachments', 'saved', 'options', 'asmoderator'));
+
+        $flags = new backup_nested_element('flags');
+
+        $flag = new backup_nested_element('flag', array('id'), array(
+            'userid', 'flagged'));
+
+        $flagsd = new backup_nested_element('flagsd');
+
+        $flagd = new backup_nested_element('flagd', array('id'), array(
+            'userid', 'flagged'));
+
+        $tags = new backup_nested_element('tags');
+
+        $tag = new backup_nested_element('tag', array('id'), array('name', 'rawname'));
+
+        $forumtaginstances = new backup_nested_element('forumtaginstances');
+
+        $forumtaginstance = new backup_nested_element('forumtaginstance', array('id'), array(
+            'name', 'rawname', 'tagid', 'itemtype', 'tiuserid', 'ordering', 'component'));
+
+        $forumgrouptaginstances = new backup_nested_element('forumgrouptaginstances');
+
+        $forumgrouptaginstance = new backup_nested_element('forumgrouptaginstance', array('id'), array(
+                'name', 'rawname', 'tagid', 'itemtype', 'itemid', 'tiuserid', 'ordering', 'component'));
+
+        // Build the tree.
+        $forumng->add_child($discussions);
+        $discussions->add_child($discussion);
+
+        $forumng->add_child($subscriptions);
+        $subscriptions->add_child($subscription);
+
+        $forumng->add_child($drafts);
+        $drafts->add_child($draft);
+
+        $discussion->add_child($posts);
+        $posts->add_child($post);
+
+        $discussion->add_child($readdiscussions);
+        $readdiscussions->add_child($read);
+
+        $discussion->add_child($flagsd);
+        $flagsd->add_child($flagd);
+
+        $post->add_child($newratings);
+        $newratings->add_child($newrating);
+
+        $post->add_child($ratings);
+        $ratings->add_child($rating);
+
+        $post->add_child($flags);
+        $flags->add_child($flag);
+
+        $post->add_child($readposts);
+        $readposts->add_child($readp);
+
+        $discussion->add_child($tags);
+        $tags->add_child($tag);
+
+        $forumng->add_child($forumtaginstances);
+        $forumtaginstances->add_child($forumtaginstance);
+
+        $forumng->add_child($forumgrouptaginstances);
+        $forumgrouptaginstances->add_child($forumgrouptaginstance);
+
+        // Define sources.
+        $forumng->set_source_table('forumng', array('id' => backup::VAR_ACTIVITYID));
+
+        // All these source definitions only happen if we are including user info.
+        if ($userinfo) {
+            $discussion->set_source_table('forumng_discussions',
+                    array('forumngid' => backup::VAR_PARENTID));
+
+            $subscription->set_source_table('forumng_subscriptions',
+                    array('forumngid' => backup::VAR_PARENTID));
+
+            $draft->set_source_table('forumng_drafts',
+                    array('forumngid' => backup::VAR_PARENTID));
+
+            // Need posts ordered by id so parents are always before childs on restore.
+            $post->set_source_sql("SELECT * FROM {forumng_posts} WHERE discussionid = ?" .
+                    "ORDER BY id", array(backup::VAR_PARENTID));
+
+            $read->set_source_table('forumng_read', array('discussionid' => backup::VAR_PARENTID));
+
+            $readp->set_source_table('forumng_read_posts', array('postid' => backup::VAR_PARENTID));
+
+            $newrating->set_source_table('rating', array(
+                    'contextid' => backup::VAR_CONTEXTID,
+                    'itemid' => backup::VAR_PARENTID,
+                    'component' => backup_helper::is_sqlparam('mod_forumng'),
+                    'ratingarea' => backup_helper::is_sqlparam('post')));
+            $newrating->set_source_alias('rating', 'value');
+
+            $rating->set_source_table('forumng_ratings', array('postid' => backup::VAR_PARENTID));
+
+            $flag->set_source_table('forumng_flags', array('postid' => backup::VAR_PARENTID));
+
+            $flagd->set_source_table('forumng_flags', array('discussionid' => backup::VAR_PARENTID));
+
+            $tag->set_source_sql('SELECT t.id, t.name, t.rawname
+                                    FROM {tag} t
+                                    JOIN {tag_instance} ti ON ti.tagid = t.id
+                                   WHERE ti.itemtype = ?
+                                     AND ti.component = ?
+                                     AND ti.itemid = ?', array(
+                                                        backup_helper::is_sqlparam('forumng_discussions'),
+                                                        backup_helper::is_sqlparam('mod_forumng'),
+                                                        backup::VAR_PARENTID));
+        }
+
+        $forumtaginstance->set_source_sql('SELECT t.name, t.rawname, ti.*
+                FROM {tag} t
+                JOIN {tag_instance} ti ON ti.tagid = t.id
+                WHERE ti.contextid = ?
+                AND ti.itemid = ?
+                AND ti.itemtype = ?
+                AND ti.component = ?', array(
+                        backup::VAR_CONTEXTID,
+                        backup::VAR_PARENTID,
+                        backup_helper::is_sqlparam('forumng'),
+                        backup_helper::is_sqlparam('mod_forumng')));
+
+        $forumgrouptaginstance->set_source_sql('SELECT t.name, t.rawname, ti.*
+                FROM {tag} t
+                JOIN {tag_instance} ti ON ti.tagid = t.id
+               WHERE ti.contextid = ?
+                AND ti.itemtype = ?
+                AND ti.component = ?', array(
+                      backup::VAR_CONTEXTID,
+                      backup_helper::is_sqlparam('groups'),
+                      backup_helper::is_sqlparam('mod_forumng')));
+
+        // Define id annotations.
+        $forumng->annotate_ids('course_modules', 'originalcmid');
+        $forumng->annotate_ids('scale', 'ratingscale');
+
+        $discussion->annotate_ids('group', 'groupid');
+
+        $post->annotate_ids('user', 'userid');
+        $post->annotate_ids('user', 'deleteuserid');
+        $post->annotate_ids('user', 'edituserid');
+
+        $newrating->annotate_ids('user', 'userid');
+        $newrating->annotate_ids('scale', 'scaleid');
+
+        $rating->annotate_ids('user', 'userid');
+
+        $subscription->annotate_ids('user', 'userid');
+        $subscription->annotate_ids('group', 'groupid');
+        $subscription->annotate_ids('course_modules', 'clonecmid');
+
+        $read->annotate_ids('user', 'userid');
+        $readp->annotate_ids('user', 'userid');
+
+        $draft->annotate_ids('user', 'userid');
+        $draft->annotate_ids('group', 'groupid');
+
+        $flag->annotate_ids('user', 'userid');
+
+        $forumgrouptaginstance->annotate_ids('group', 'itemid');
+
+        // Define file annotations.
+        $forumng->annotate_files('mod_forumng', 'intro', null); // This file area hasn't itemid.
+        $forumng->annotate_files('mod_forumng', 'introduction', null); // This file area hasn't itemid.
+        $post->annotate_files('mod_forumng', 'message', 'id');
+        $post->annotate_files('mod_forumng', 'attachment', 'id');
+        $draft->annotate_files('mod_forumng', 'draft', 'id');
+
+        // Return the root element (forumng), wrapped into standard activity structure.
+        return $this->prepare_activity_structure($forumng);
+    }
+}
diff --git a/mod/forumng/backup/moodle2/restore_forumng_activity_task.class.php b/mod/forumng/backup/moodle2/restore_forumng_activity_task.class.php
new file mode 100644
index 0000000..fa92b4c
--- /dev/null
+++ b/mod/forumng/backup/moodle2/restore_forumng_activity_task.class.php
@@ -0,0 +1,172 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum restore task.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+// Because it exists (must).
+require_once($CFG->dirroot . '/mod/forumng/backup/moodle2/restore_forumng_stepslib.php');
+
+/**
+ * forumng restore task that provides all the settings and steps to perform one
+ * complete restore of the activity.
+ */
+class restore_forumng_activity_task extends restore_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have.
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity.
+    }
+
+    /**
+     * Define (add) particular steps this activity can have.
+     */
+    protected function define_my_steps() {
+        // Choice only has one structure step.
+        $this->add_step(new restore_forumng_activity_structure_step('forumng_structure',
+                'forumng.xml'));
+    }
+
+    /**
+     * Define the contents in the activity that must be
+     * processed by the link decoder.
+     */
+    static public function define_decode_contents() {
+        $contents = array();
+
+        $contents[] = new restore_decode_content('forumng', array('intro'));
+        $contents[] = new restore_decode_content('forumng', array('introduction'));
+        $contents[] = new restore_decode_content('forumng_posts', array('message'));
+
+        return $contents;
+    }
+
+    /**
+     * Define the decoding rules for links belonging
+     * to the activity to be executed by the link decoder.
+     */
+    static public function define_decode_rules() {
+        $rules = array();
+
+        // List of forumngs in course.
+        $rules[] = new restore_decode_rule('FORUMNGINDEX',
+                '/mod/forumng/index.php?id=$1', 'course');
+        // Forum by cm->id.
+        $rules[] = new restore_decode_rule('FORUMNGVIEWBYID',
+                '/mod/forumng/view.php?id=$1', 'course_module');
+        // Link to forumng discussion.
+        $rules[] = new restore_decode_rule('FORUMNGDISCUSSIONVIEW',
+                '/mod/forumng/discuss.php?d=$1', 'forumng_discussion');
+        // Link to discussion with anchor post.
+        $rules[] = new restore_decode_rule('FORUMNGDISCUSSIONVIEWINSIDE',
+                '/mod/forumng/discuss.php?d=$1#p$2', array('forumng_discussion', 'forumng_post'));
+
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * forumng logs. It must return one array
+     * of {@link restore_log_rule} objects.
+     */
+    static public function define_restore_log_rules() {
+        $rules = array();
+
+        $rules[] = new restore_log_rule('forumng', 'add',
+                'view.php?id={course_module}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'update',
+                'view.php?id={course_module}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'view',
+                'view.php?id={course_module}', '{forumng}');
+        /*
+        TODO Figure out all the things it can possibly put in log and work out transformation for all/most
+        $rules[] = new restore_log_rule('forumng', 'view forumng',
+        'view.php?id={course_module}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'mark read',
+                'view.php?f={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'start tracking',
+        'view.php?f={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'stop tracking',
+        'view.php?f={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'subscribe',
+        'view.php?f={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'unsubscribe',
+        'view.php?f={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'subscriber',
+        'subscribers.php?id={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'subscribers',
+        'subscribers.php?id={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'view subscribers',
+        'subscribers.php?id={forumng}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'add discussion',
+        'discuss.php?d={forumng_discussion}', '{forumng_discussion}');
+        $rules[] = new restore_log_rule('forumng', 'view discussion',
+        'discuss.php?d={forumng_discussion}', '{forumng_discussion}');
+        $rules[] = new restore_log_rule('forumng', 'move discussion',
+        'discuss.php?d={forumng_discussion}', '{forumng_discussion}');
+        $rules[] = new restore_log_rule('forumng', 'delete discussi',
+                'view.php?id={course_module}', '{forumng}', null, 'delete discussion');
+        $rules[] = new restore_log_rule('forumng', 'delete discussion',
+                'view.php?id={course_module}', '{forumng}');
+        $rules[] = new restore_log_rule('forumng', 'add post',
+                'discuss.php?d={forumng_discussion}&parent={forumng_post}', '{forumng_post}');
+        $rules[] = new restore_log_rule('forumng', 'update post',
+                'discuss.php?d={forumng_discussion}&parent={forumng_post}', '{forumng_post}');
+        $rules[] = new restore_log_rule('forumng', 'prune post',
+                'discuss.php?d={forumng_discussion}', '{forumng_post}');
+        $rules[] = new restore_log_rule('forumng', 'delete post',
+                'discuss.php?d={forumng_discussion}', '[post]');
+        */
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * course logs. It must return one array
+     * of {@link restore_log_rule} objects.
+     *
+     * Note this rules are applied when restoring course logs
+     * by the restore final task, but are defined here at
+     * activity level. All them are rules not linked to any module instance (cmid = 0).
+     */
+    static public function define_restore_log_rules_for_course() {
+        $rules = array();
+        /*
+        TODO Sort this out too
+        $rules[] = new restore_log_rule('forumng', 'view forumngs', 'index.php?id={course}', null);
+        $rules[] = new restore_log_rule('forumng',
+                'subscribeall', 'index.php?id={course}', '{course}');
+        $rules[] = new restore_log_rule('forumng',
+                'unsubscribeall', 'index.php?id={course}', '{course}');
+        $rules[] = new restore_log_rule('forumng',
+                'user report', 'user.php?course={course}&id={user}&mode=[mode]', '{user}');
+        $rules[] = new restore_log_rule('forumng',
+                'search', 'search.php?id={course}&search=[searchenc]', '[search]');
+        */
+        return $rules;
+    }
+}
diff --git a/mod/forumng/backup/moodle2/restore_forumng_stepslib.php b/mod/forumng/backup/moodle2/restore_forumng_stepslib.php
new file mode 100644
index 0000000..77c83da
--- /dev/null
+++ b/mod/forumng/backup/moodle2/restore_forumng_stepslib.php
@@ -0,0 +1,556 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum restore step.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Structure step to restore one forumng activity.
+ */
+class restore_forumng_activity_structure_step extends restore_activity_structure_step {
+
+    /**
+     * ID of forum processed in this step.
+     * @var int
+     */
+    private $forumngid, $shared, $type, $moveintrofiles;
+    private $grouptags = array();
+
+    protected function define_structure() {
+        $paths = array();
+        $userinfo = $this->get_setting_value('userinfo');
+
+        $paths[] = new restore_path_element('forumng', '/activity/forumng');
+        if ($userinfo) {
+            $paths[] = new restore_path_element('forumng_discussion',
+                    '/activity/forumng/discussions/discussion');
+            $paths[] = new restore_path_element('forumng_post',
+                    '/activity/forumng/discussions/discussion/posts/post');
+            $paths[] = new restore_path_element('rating',
+                    '/activity/forumng/discussions/discussion/posts/post/newratings/newrating');
+            $paths[] = new restore_path_element('forumng_rating',
+                    '/activity/forumng/discussions/discussion/posts/post/ratings/rating');
+            $paths[] = new restore_path_element('forumng_flag',
+                    '/activity/forumng/discussions/discussion/posts/post/flags/flag');
+            $paths[] = new restore_path_element('forumng_subscription',
+                    '/activity/forumng/subscriptions/subscription');
+            $paths[] = new restore_path_element('forumng_read',
+                    '/activity/forumng/discussions/discussion/readdiscussions/read');
+            $paths[] = new restore_path_element('forumng_readpost',
+                    '/activity/forumng/discussions/discussion/posts/post/readposts/readpost');
+            $paths[] = new restore_path_element('forumng_draft',
+                    '/activity/forumng/drafts/draft');
+            $paths[] = new restore_path_element('forumng_flagd',
+                    '/activity/forumng/discussions/discussion/flagsd/flagd');
+            $paths[] = new restore_path_element('forumng_tag',
+                    '/activity/forumng/discussions/discussion/tags/tag');
+        }
+
+        $paths[] = new restore_path_element('forumng_forumtaginstance',
+                '/activity/forumng/forumtaginstances/forumtaginstance');
+        $paths[] = new restore_path_element('forumng_forumgrouptaginstance',
+                '/activity/forumng/forumgrouptaginstances/forumgrouptaginstance');
+
+        // Return the paths wrapped into standard activity structure.
+        return $this->prepare_activity_structure($paths);
+    }
+
+    protected function process_forumng($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+        $data->course = $this->get_courseid();
+
+        // If we are restoring an old backup, introduction will not be present, and
+        // what was previously in intro needs to be moved to introduction. Will also need to handle files.
+        if (!isset($data->introduction)) {
+            $data->introduction = $data->intro;
+            $data->introductionformat = $data->introformat;
+            $data->intro = '';
+            $data->introformat = FORMAT_HTML;
+            $this->moveintrofiles = true;
+        }
+
+        $data->postingfrom = $this->apply_date_offset($data->postingfrom);
+        $data->postinguntil = $this->apply_date_offset($data->postinguntil);
+        $data->ratingfrom = $this->apply_date_offset($data->ratingfrom);
+        $data->ratinguntil = $this->apply_date_offset($data->ratinguntil);
+
+        if ($data->ratingscale < 0) { // Scale found, get mapping.
+            $data->ratingscale = -($this->get_mappingid_or_null('scale', abs($data->ratingscale)));
+        }
+
+        $newitemid = $DB->insert_record('forumng', $data);
+        $this->apply_activity_instance($newitemid);
+        $this->forumngid = $newitemid;
+        $this->shared = $data->shared;
+        $this->type = $data->type;
+    }
+
+    protected function process_forumng_discussion($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+        $data->course = $this->get_courseid();
+        $data->forumngid = $this->get_new_parentid('forumng');
+
+        $data->timestart = $this->apply_date_offset($data->timestart);
+        $data->timeend = $this->apply_date_offset($data->timeend);
+        $data->groupid = $this->get_mappingid_or_null('group', $data->groupid);
+
+        // Field postid is handled in process_forumng_post.
+        // Field lastpostid is handled in after_execute.
+
+        $newitemid = $DB->insert_record('forumng_discussions', $data);
+        $this->set_mapping('forumng_discussion', $oldid, $newitemid);
+    }
+
+    private function get_mappingid_or_null($type, $oldid) {
+        if ($oldid === null) {
+            return null;
+        }
+        return $this->get_mappingid($type, $oldid);
+    }
+
+    protected function process_forumng_post($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->discussionid = $this->get_new_parentid('forumng_discussion');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+        $data->deleteuserid = $this->get_mappingid_or_null('user', $data->deleteuserid);
+        $data->edituserid = $this->get_mappingid_or_null('user', $data->edituserid);
+
+        // If post has parent, map it (it has been already restored).
+        if (!empty($data->parentpostid)) {
+            $data->parentpostid = $this->get_mappingid('forumng_post', $data->parentpostid);
+        }
+
+        $newitemid = $DB->insert_record('forumng_posts', $data);
+        $this->set_mapping('forumng_post', $oldid, $newitemid, true);
+
+        // If !post->parent, it's the 1st post. Set it in discussion.
+        if (empty($data->parentpostid)) {
+            $DB->set_field('forumng_discussions', 'postid', $newitemid,
+                array('id' => $data->discussionid));
+        }
+    }
+
+    protected function process_forumng_draft($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->forumngid = $this->get_new_parentid('forumng');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+        $data->groupid = $this->get_mappingid_or_null('group', $data->groupid);
+
+        // If post has parent, map it (it has been already restored).
+        if (!empty($data->parentpostid)) {
+            $data->parentpostid = $this->get_mappingid_or_null('forumng_post',
+            $data->parentpostid);
+        }
+
+        $newitemid = $DB->insert_record('forumng_drafts', $data);
+        $this->set_mapping('forumng_draft', $oldid, $newitemid, true);
+    }
+
+    protected function process_forumng_rating($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        $data->postid = $this->get_new_parentid('forumng_post');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+
+        $DB->insert_record('forumng_ratings', $data);
+    }
+
+    protected function process_forumng_flagd($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $data->discussionid  = $this->get_new_parentid('forumng_discussion');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+        $data->postid = 0;
+
+        $DB->insert_record('forumng_flags', $data);
+    }
+
+    protected function process_forumng_flag($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        $data->postid = $this->get_new_parentid('forumng_post');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+        $data->discussionid = 0;
+
+        $DB->insert_record('forumng_flags', $data);
+    }
+
+    protected function process_forumng_subscription($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        $data->forumngid = $this->get_new_parentid('forumng');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+        $data->discussionid = $this->get_mappingid_or_null('forumng_discussion',
+                $data->discussionid);
+        $data->clonecmid = $this->get_mappingid_or_null('course_modules', $data->clonecmid);
+        $data->groupid = $this->get_mappingid_or_null('group', $data->groupid);
+
+        $DB->insert_record('forumng_subscriptions', $data);
+    }
+
+    protected function process_forumng_read($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        $data->discussionid = $this->get_new_parentid('forumng_discussion');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+
+        $DB->insert_record('forumng_read', $data);
+    }
+
+    protected function process_forumng_readpost($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        $data->postid = $this->get_new_parentid('forumng_post');
+        $data->userid = $this->get_mappingid_or_null('user', $data->userid);
+
+        $DB->insert_record('forumng_read_posts', $data);
+    }
+
+    protected function process_forumng_tag($data) {
+        global $CFG;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        if (empty($CFG->usetags) || !core_tag_tag::is_enabled('mod_forumng', 'forumng_discussions')) {
+            // Tags disabled in server, nothing to process.
+            return;
+        }
+
+        $tag = $data->rawname;
+        $itemid = $this->get_new_parentid('forumng_discussion');
+        $forumid = $this->get_new_parentid('forumng');
+
+        $cm = get_coursemodule_from_instance('forumng', $forumid);
+        core_tag_tag::add_item_tag('mod_forumng', 'forumng_discussions', $itemid, context_module::instance($cm->id), $tag);
+    }
+
+    protected function process_forumng_forumtaginstance($data) {
+        global $CFG;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        if (empty($CFG->usetags) || !core_tag_tag::is_enabled('mod_forumng', 'forumng')) {
+            // Tags disabled in server, nothing to process.
+            return;
+        }
+
+        $tag = $data->rawname;
+        $forumid = $this->get_new_parentid('forumng');
+
+        $cm = get_coursemodule_from_instance('forumng', $forumid);
+        core_tag_tag::add_item_tag('mod_forumng', 'forumng', $forumid, context_module::instance($cm->id), $tag);
+    }
+
+    protected function process_forumng_forumgrouptaginstance($data) {
+        global $CFG;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        if (empty($CFG->usetags)) { // Tags disabled in server, nothing to process.
+            return;
+        }
+
+        $tag = $data->rawname;
+
+        $groupid = $this->get_mappingid_or_null('group', $data->itemid);
+
+        if (isset($this->grouptags[$groupid])) {
+            $this->grouptags[$groupid][] = $tag;
+        } else {
+            $this->grouptags[$groupid] = array($tag);
+        }
+    }
+
+    protected function after_execute() {
+        global $DB, $CFG;
+
+        // Add forumng related files, no need to match by
+        // itemname (just internally handled context).
+        $this->add_related_files('mod_forumng', 'intro', null);
+        if (!$this->moveintrofiles) {
+            $this->add_related_files('mod_forumng', 'introduction', null);
+        }
+
+        // Add post related files, matching by itemname = 'forumng_post'.
+        $this->add_related_files('mod_forumng', 'message', 'forumng_post');
+        $this->add_related_files('mod_forumng', 'attachment', 'forumng_post');
+        $this->add_related_files('mod_forumng', 'draft', 'forumng_draft');
+
+        if ($this->moveintrofiles) {
+            $DB->execute("
+                    UPDATE {files}
+                       SET filearea = 'introduction'
+                     WHERE component = 'mod_forumng'
+                       AND filearea = 'intro'
+                       AND contextid = ?
+                    ", array($this->task->get_contextid()));
+        }
+
+        // Now fix the lastpostid for each discussion.
+        // TODO Does this work on MySQL? No idea.
+        $DB->execute("
+UPDATE {forumng_discussions} SET lastpostid=(
+    SELECT
+        MAX(id)
+    FROM
+        {forumng_posts} fp
+    WHERE
+        fp.discussionid = {forumng_discussions}.id
+        AND fp.oldversion=0
+        AND fp.deleted=0
+) WHERE forumngid = ?", array($this->forumngid));
+
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+        // Create search index if user data restored.
+        if ($this->get_setting_value('userinfo') && mod_forumng::search_installed()) {
+            mod_forumng::search_update_all(false, $this->get_courseid(), $this->task->get_moduleid(),
+                    $this->get_task()->get_progress());
+        }
+
+        // See what $this->task->get_moduleid() contains, then check master|clone.
+        // If we have the module id we can use that to get the cm.
+        if ($cmid = $this->task->get_moduleid()) {
+            // Check to see whether forum is shared or a clone.
+            if ($this->shared) {
+                // Master.
+                // Get the ID number - probably from the course_modules table using $this->task->get_moduleid() in a query.
+                $cm = $DB->get_record('course_modules', array('id' => $cmid), '*', MUST_EXIST);
+                $idnumber = $cm->idnumber;
+                // Check for any other forumng module instances using the same ID number - .
+                // if any then add _1 to end (if already has _number at end then increment that number e.g. _2).
+                $newidnumber = $this->get_new_idnumber($idnumber);
+                // Set new idnumber.
+                $cm->idnumber = $newidnumber;
+                $DB->update_record('course_modules', $cm);
+            } else if ($this->type === 'clone') {
+                // Clone.
+                $cm = $DB->get_record('course_modules', array('id' => $cmid), '*', MUST_EXIST);
+                $forumng = $DB->get_record('forumng', array('id' => $cm->instance), '*', MUST_EXIST);
+                // If clone get original cmid ID number, if exists and has AUTO_ prefix,
+                // If exists and has AUTO_ prefix.
+                if (!empty($forumng->originalcmid)) {
+                    $originalcm = $DB->get_record_sql('select * from {course_modules} where module =
+                            (select id from {modules} where name = ?) and id = ?', array('forumng', $forumng->originalcmid));
+                    $strippedidnumber = $originalcm->idnumber;
+                    // If exists and has AUTO_ prefix.
+                    $idnumber = $this->strip_auto_from_idnumber($originalcm->idnumber);
+                    if ($idnumber != $originalcm->idnumber) {
+                        $strippedidnumber = $idnumber;
+                        // We have an AUTO_ prefix.
+                        // Do we have a valid suffix.
+                        $suffix = $this->get_possible_suffix($originalcm->idnumber, '_');
+                        if ($suffix != 0) {
+                            // We have a valid suffix.
+                            // Remove the suffix from the idnumber by getting the last '_' .
+                            $strippedidnumber = $this->remove_suffix($idnumber, '_');
+                        }
+                        // Place auto back in.
+                        $strippedidnumber = 'AUTO_'.$strippedidnumber;
+                        // Get cmid for all forumng module instances (joining to forumng table to ensure we get only master forums)
+                        // that have matching idnumber (regardless of their _number suffix).
+                        $cms = $DB->get_records_sql('select cm.id as cmid, cm.idnumber from {course_modules} cm
+                                inner join {forumng} f on cm.instance = f.id where cm.idnumber like ?
+                                and f.shared = ?
+                                and cm.module = (select id from {modules} where name = ?)
+                                order by cmid desc', array($strippedidnumber.'%', 1, 'forumng'));
+                        // Set originalcmid field.
+                        $forumng->originalcmid = $this->get_cmid_for_forumng_idnumbers($strippedidnumber, $cms);
+                        if ($forumng->originalcmid) {
+                            $DB->update_record('forumng', $forumng);
+                        }
+                    }
+                }
+            }
+        }
+        if (!empty($this->grouptags)) {
+            foreach ($this->grouptags as $groupid => $tags) {
+                mod_forumng::set_group_tags($this->forumngid, $groupid, $tags);
+            }
+        }
+    }
+
+    protected function get_new_idnumber($idnumber) {
+        global $DB;
+
+        // Check for any other forumng module instances using the same ID number.
+        $cms = $DB->get_records_sql('select * from {course_modules} where module =
+                (select id from {modules} where name = ?) and idnumber = ?', array('forumng', $idnumber));
+
+        if (!empty($cms) && (count($cms) == 1)) {
+            return $idnumber;
+        }
+        // If any then add _1 to end (if already has _number at end then increment that number e.g. _2).
+        // Check new ID number doesn't exist and repeat as needed.
+
+        // Do we have a valid suffix.
+        $strippedidnumber = 0;
+        $suffix = $this->get_possible_suffix($idnumber, '_');
+        if ($suffix != 0) {
+            // We have a valid suffix.
+            // Remove the suffix from the idnumber by getting the last '_' .
+            $idnum = $this->remove_suffix($idnumber, '_');
+            $strippedidnumber = $idnum;
+        } else {
+            $idnum = $idnumber;
+        }
+
+        $cms = $DB->get_records_sql('select * from {course_modules} where module =
+                (select id from {modules} where name = ?) and idnumber like ?
+                 order by id desc', array('forumng', $idnum.'%'));
+
+        $newidnumber = 0;
+
+        if (!empty($cms) && (count($cms) > 1)) {
+            // Current record is the new record, so get next record  which should contain the highest increment of the idnumber.
+            $cm = next($cms);
+            // Do we have a valid suffix.
+            $suffix = $this->get_possible_suffix($cm->idnumber, '_');
+            if ($suffix != 0) {
+                $strippedidnumber = $this->remove_suffix($cm->idnumber, '_');
+            }
+
+            if ($strippedidnumber === $idnum) {
+                // Increment suffix by 1 prior to adding to make a new idnumber.
+                $suffix++;
+                // Create the new idnumber.
+                $newidnumber = $strippedidnumber.'_'.$suffix;
+            } else {
+                $newidnumber = $idnum.'_1';
+            }
+
+        } else {
+            $newidnumber = $idnumber;
+        }
+        return $newidnumber;
+    }
+
+    protected function get_cmid_for_forumng_idnumbers($strippedidnumber, $cms) {
+        $cmid = 0;
+        if (!empty($cms) && (count($cms) > 0)) {
+            // We are in a search for the cmid.
+            reset($cms);
+            // Get top record which should contain the highest increment of the idnumber.
+            foreach ($cms as $cm) {
+                // Strip suffix from cm idnumber.
+                $idnum = $this->remove_suffix($cm->idnumber, '_');
+                if ($idnum === $strippedidnumber) {
+                    return $cm->cmid;
+                }
+            }
+        }
+        return $cmid;
+    }
+
+    protected function remove_suffix($str, $suffixexp) {
+        $id = '';
+        if (strrchr ($str, $suffixexp)) {
+            $chunks = explode($suffixexp, $str);
+            $suffix = array_pop($chunks);
+            $id = implode('_', $chunks);
+        } else {
+            $id = $str;
+        }
+        return $id;
+    }
+
+    protected function strip_auto_from_idnumber($cmidnumber) {
+        $id = '';
+        $pos = strrpos($cmidnumber, 'AUTO_');
+        if ($pos !== false) {
+            // Strip out the AUTO.
+            $pos = 5;
+            $id = substr($cmidnumber, $pos);
+        } else {
+            $id = $cmidnumber;
+        }
+        return $id;
+    }
+
+    protected function get_possible_suffix($str, $suffixexp) {
+        $suffix = substr(strrchr($str, $suffixexp), 1);
+        if (is_numeric($suffix)) {
+            $suffix = $suffix + 0; // Force conversion to relevant numeric type.
+        }
+        if (is_int($suffix)) {
+            return $suffix;
+        } else {
+            return 0;
+        }
+    }
+
+    protected function process_rating($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        // Cannot use ratings API, cause, it's missing the ability to specify times (modified/created).
+        $data->contextid = $this->task->get_contextid();
+        $data->itemid = $this->get_new_parentid('forumng_post');
+        if ($data->scaleid < 0) {// Scale found, get mapping.
+            $data->scaleid = -($this->get_mappingid('scale', abs($data->scaleid)));
+        }
+        $data->rating = $data->value;
+        $data->userid = $this->get_mappingid('user', $data->userid);
+        $data->timecreated = $this->apply_date_offset($data->timecreated);
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+
+        // Make sure that we have both component and ratingarea set. These were added in 2.1.
+        // Prior to that all ratings were for entries so we know what to set them too.
+        if (empty($data->component)) {
+            $data->component = 'mod_forumng';
+        }
+        if (empty($data->ratingarea)) {
+            $data->ratingarea = 'post';
+        }
+
+        $newitemid = $DB->insert_record('rating', $data);
+    }
+}
diff --git a/mod/forumng/build.xml b/mod/forumng/build.xml
new file mode 100644
index 0000000..8700e75
--- /dev/null
+++ b/mod/forumng/build.xml
@@ -0,0 +1,42 @@
+<project name="forumng-stable" basedir="." default="zip">
+    <description>
+        Builds the contrib version of ForummNG stable.
+    </description>
+
+    <!-- Target for zip file -->
+    <property name="zipfolder" value="${user.home}/Desktop"/>
+
+    <!-- File base name -->
+    <property name="basename" value="forumng"/>
+
+    <target name="zip">
+        <echo message="Update stable branch BEFORE running this script!"/>
+
+        <!-- Get the version number from file -->
+        <loadfile property="versionfile" srcFile="version.php">
+          <filterchain>
+              <containsregex
+                  pattern="^.*Stable R([^']+)';.*$"
+                  replace="\1"/>
+              <striplinebreaks/>
+           </filterchain>
+        </loadfile>
+        <fail unless="versionfile" message="Unable to find version number (did you run this on HEAD by accident?)" />
+
+        <!-- Work out full filename -->
+        <property name="target" value="${zipfolder}/${basename}.${versionfile}.zip"/>
+
+        <!-- Build zip file of all files (except this build script and Ant
+             default excludes, such as source control files) -->
+        <delete file="${target}" />
+        <zip destfile="${target}" level="9">
+            <fileset dir="..">
+                <include name="forumng/**"/>
+                <exclude name="forumng/build.xml" />
+            </fileset>
+        </zip>
+
+        <echo message="Now upload this to..."/>
+    </target>
+
+</project>
diff --git a/mod/forumng/classes/event/course_module_instance_list_viewed.php b/mod/forumng/classes/event/course_module_instance_list_viewed.php
new file mode 100644
index 0000000..1e6dec4
--- /dev/null
+++ b/mod/forumng/classes/event/course_module_instance_list_viewed.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng instance list viewed event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng instance list viewed event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class course_module_instance_list_viewed extends \core\event\course_module_instance_list_viewed {
+    // No need for any code here as everything is handled by the parent class.
+}
diff --git a/mod/forumng/classes/event/course_module_viewed.php b/mod/forumng/classes/event/course_module_viewed.php
new file mode 100644
index 0000000..b6fcbb7
--- /dev/null
+++ b/mod/forumng/classes/event/course_module_viewed.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng course module viewed event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng course module viewed event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class course_module_viewed extends \core\event\course_module_viewed {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng';
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'view', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_created.php b/mod/forumng/classes/event/discussion_created.php
new file mode 100644
index 0000000..caa9fed
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_created.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng create discussion event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng add discussion event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_created extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' added a new discussion to the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussioncreated', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'add discussion', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_deleted.php b/mod/forumng/classes/event/discussion_deleted.php
new file mode 100644
index 0000000..a6f59c6
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_deleted.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng delete discussion event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng delete discussion event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_deleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' deleted discussion $this->objectid in the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussiondeleted', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'delete discussion', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_locked.php b/mod/forumng/classes/event/discussion_locked.php
new file mode 100644
index 0000000..9e556e0
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_locked.php
@@ -0,0 +1,119 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng discussion locked event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng discussion locked event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_locked extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        if (!isset($this->other['auto'])) {
+            return "The user with id '$this->userid' locked discussion $this->objectid in the forum
+                with the course module id '$this->contextinstanceid'";
+        } else {
+            return "The discussion $this->objectid was automatically locked in the forum
+                with the course module id '$this->contextinstanceid'";
+        }
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussionlocked', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $action = 'lock discussion';
+        if (isset($this->other['auto'])) {
+            $action = 'auto lock discussion';
+        }
+        return array($this->courseid, 'forumng', $action, $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_merged.php b/mod/forumng/classes/event/discussion_merged.php
new file mode 100644
index 0000000..2b62014
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_merged.php
@@ -0,0 +1,117 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng merge discussion event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng merge discussion event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_merged extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        // Note this event is called by the original discussion, which is then deleted.
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' merged discussion $this->objectid into {$this->other['newid']}
+            in the forum with the course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussionmerged', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        // Update discussion url to use new id.
+        $url = str_replace('?d=' . $this->objectid, '?d=' . $this->other['newid'], $this->other['logurl']);
+        return new \moodle_url('\\mod\\forumng\\' . $url);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'merge discussion', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if (!isset($this->other['newid'])) {
+            throw new \coding_exception('The \'newid\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_permdeleted.php b/mod/forumng/classes/event/discussion_permdeleted.php
new file mode 100644
index 0000000..f7897e54
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_permdeleted.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng delete discussion from DB event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng delete discussion from DB event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_permdeleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' removed (full delete) discussion $this->objectid in the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussionpermdeleted', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'permdelete discussion', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_undeleted.php b/mod/forumng/classes/event/discussion_undeleted.php
new file mode 100644
index 0000000..5edcba5
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_undeleted.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng un-delete discussion event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng un-delete discussion event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_undeleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' un-deleted discussion $this->objectid in the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussionundeleted', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'undelete discussion', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_unlocked.php b/mod/forumng/classes/event/discussion_unlocked.php
new file mode 100644
index 0000000..4f77a52
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_unlocked.php
@@ -0,0 +1,118 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng discussion unlocked event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng discussion unlocked event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_unlocked extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        if (isset($this->other['auto'])) {
+            return "The user with id '$this->userid' unlocked an auto-locked discussion
+                $this->objectid in the forum with the course module id '$this->contextinstanceid'";
+        }
+        return "The user with id '$this->userid' unlocked discussion $this->objectid in the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussionunlocked', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $action = 'unlock discussion';
+        if (isset($this->other['auto'])) {
+            $action = 'unlock auto locked discussion';
+        }
+        return array($this->courseid, 'forumng', $action, $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/discussion_viewed.php b/mod/forumng/classes/event/discussion_viewed.php
new file mode 100644
index 0000000..3d77909
--- /dev/null
+++ b/mod/forumng/classes/event/discussion_viewed.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng view discussion event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng view discussion event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_viewed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' viewed a discussion on the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussionviewed', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'view discussion', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/mail_sent.php b/mod/forumng/classes/event/mail_sent.php
new file mode 100644
index 0000000..3a0c312
--- /dev/null
+++ b/mod/forumng/classes/event/mail_sent.php
@@ -0,0 +1,146 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng mail sent ok event.
+ * Uses: mail subscription, mail digest, individual user mail (default).
+ * Set other['type'] to: 'sub' or 'digest'
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng mail sent event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mail_sent extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        if (isset($this->other['type'])) {
+            // Subscription or digest.
+            $name = $this->other['type'] == 'digest' ? 'digest' : 'subscription';
+            return "The $name mails sent OK. {$this->other['count']}.";
+        } else {
+            // Individual mail.
+            return "Forumng email with subject '{$this->other['subject']}' sent to user '$this->relateduserid'
+                username:({$this->other['username']})";
+        }
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:mailsent', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        switch ($this->contextlevel) {
+            case CONTEXT_SYSTEM:
+                return new \moodle_url('\admin\cron.php');
+                break;
+            case CONTEXT_MODULE:
+                return new \moodle_url('\\mod\\forumng\\view.php?id=' . $this->contextinstanceid);
+               break;
+            case CONTEXT_COURSE:
+                return new \moodle_url('\\mod\\forumng\\index.php?id=' . $this->contextinstanceid);
+                break;
+        }
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        global $SITE;
+        if (isset($this->other['type'])) {
+            // Subscription or digest.
+            $name = $this->other['type'] == 'digest' ? 'digest' : 'mail';
+            $file = $this->contextlevel == CONTEXT_COURSE ? 'index' : 'view';
+            return array($this->courseid, 'forumng', $name . ' ok', $file .'.php?id=' . $this->contextinstanceid,
+                $this->other['count'], $this->contextinstanceid);
+        } else {
+            // Individual mail.
+            return array($SITE->id, 'library', $name . ' ok', 'cron',
+                'emailsent ' . $this->relateduserid . ' (' . $this->other['username'] . '): ' .
+                    $this->other['subject']);
+        }
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['type'])) {
+            throw new \coding_exception('The \'type\' value must be set in other.');
+        }
+        if (!empty($this->other['type'])) {
+            if (!isset($this->other['count'])) {
+                throw new \coding_exception('The \'count\' value must be set in other.');
+            }
+        } else {
+            if (!isset($this->relateduserid)) {
+                throw new \coding_exception('The \'relateduserid\' must be set.');
+            }
+            if (!isset($this->other['username'])) {
+                throw new \coding_exception('The \'username\' must be set in other.');
+            }
+            if (!isset($this->other['subject'])) {
+                throw new \coding_exception('The \'subject\' must be set in other.');
+            }
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/post_created.php b/mod/forumng/classes/event/post_created.php
new file mode 100644
index 0000000..eb1dcef
--- /dev/null
+++ b/mod/forumng/classes/event/post_created.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng create post event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng add post event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class post_created extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_posts';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' added a new post $this->objectid to the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:postcreated', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'add reply', $this->other['logurl'],
+                $this->other['parent'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['parent'])) {
+            throw new \coding_exception('The \'parent\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/post_deleted.php b/mod/forumng/classes/event/post_deleted.php
new file mode 100644
index 0000000..94be31a
--- /dev/null
+++ b/mod/forumng/classes/event/post_deleted.php
@@ -0,0 +1,109 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng delete post event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng delete post event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class post_deleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_posts';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' deleted post $this->objectid from discussion
+         {$this->other['discussid']} in the forum with the course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:postdeleted', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'delete post', $this->other['logurl'],
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+        if (!isset($this->other['discussid'])) {
+            throw new \coding_exception('The \'discussid\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/post_reported.php b/mod/forumng/classes/event/post_reported.php
new file mode 100644
index 0000000..77bf07b
--- /dev/null
+++ b/mod/forumng/classes/event/post_reported.php
@@ -0,0 +1,109 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng report post event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng report post event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class post_reported extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_posts';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' reported post $this->objectid in discussion
+            {$this->other['discussid']} in the forum with the course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:postreported', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'report post', $this->other['logurl'],
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+        if (!isset($this->other['discussid'])) {
+            throw new \coding_exception('The \'discussid\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/post_split.php b/mod/forumng/classes/event/post_split.php
new file mode 100644
index 0000000..5bd15b6
--- /dev/null
+++ b/mod/forumng/classes/event/post_split.php
@@ -0,0 +1,109 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng split post event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng split post event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class post_split extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'forumng_posts';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' split discussion {$this->other['discussid']} at
+            post $this->objectid in the forum with the course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:postsplit', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'split post', $this->other['logurl'],
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+        if (!isset($this->other['discussid'])) {
+            throw new \coding_exception('The \'discussid\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/post_undeleted.php b/mod/forumng/classes/event/post_undeleted.php
new file mode 100644
index 0000000..b547cdf
--- /dev/null
+++ b/mod/forumng/classes/event/post_undeleted.php
@@ -0,0 +1,109 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng undelete post event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng undelete post event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class post_undeleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'forumng_posts';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' undeleted post $this->objectid from discussion
+         {$this->other['discussid']} in the forum with the course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:postundeleted', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'undelete post', $this->other['logurl'],
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+        if (!isset($this->other['discussid'])) {
+            throw new \coding_exception('The \'discussid\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/post_updated.php b/mod/forumng/classes/event/post_updated.php
new file mode 100644
index 0000000..bfc40e1
--- /dev/null
+++ b/mod/forumng/classes/event/post_updated.php
@@ -0,0 +1,106 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng edit post event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng edit post event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class post_updated extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_posts';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' edited post $this->objectid in the forum with the
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:postupdated', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'edit post', $this->other['logurl'],
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/post_updated_failed.php b/mod/forumng/classes/event/post_updated_failed.php
new file mode 100644
index 0000000..93e0b0c
--- /dev/null
+++ b/mod/forumng/classes/event/post_updated_failed.php
@@ -0,0 +1,107 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng post edit error event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng post edit error event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class post_updated_failed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' had error when editing post." . $this->other['info'];
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return 'Error';
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url($this->other['url']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'error editpost', 'editpost.php',
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+        if (!isset($this->other['url'])) {
+            throw new \coding_exception('The \'url\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/save_failed.php b/mod/forumng/classes/event/save_failed.php
new file mode 100644
index 0000000..ec46833
--- /dev/null
+++ b/mod/forumng/classes/event/save_failed.php
@@ -0,0 +1,105 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @package    mod_forumng
+ * @copyright  2015 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng post saving failed event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2015 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class save_failed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $string = 'Forumng post create/update failed due to session error.';
+        if (!empty($this->other['pid'])) {
+            $string .= " Post id '{$this->other['pid']}'.";
+        }
+        return $string;
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:savefailed', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url($this->other['page']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        global $SITE;
+        $url = str_replace('/mod/forumng/', '', $this->other['page']);
+        return array($SITE->id, 'forumng', 'error editpost', $this->other['page'], 'session error',
+                $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['page'])) {
+            throw new \coding_exception('The \'page\' value must be set in other.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/subscription_created.php b/mod/forumng/classes/event/subscription_created.php
new file mode 100644
index 0000000..5843c67
--- /dev/null
+++ b/mod/forumng/classes/event/subscription_created.php
@@ -0,0 +1,119 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng subscribe event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng subscribe event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class subscription_created extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $type = 'Whole forum';
+        if ($group = strpos($this->other['info'], 'group')) {
+            $type = 'Group' . substr($this->other['info'], $group + 5);
+        } else if ($discuss = strpos($this->other['info'], 'discussion')) {
+            $type = 'Discussion' . substr($this->other['info'], $discuss + 10);
+        }
+        return "The user with id '$this->userid' subscribed the user with id '$this->relateduserid' to the forum with the " .
+            "course module id '$this->contextinstanceid'. Subscribed to: $type.";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:subscriptioncreated', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'subscribe', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->relateduserid)) {
+            throw new \coding_exception('The \'relateduserid\' must be set.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/event/subscription_deleted.php b/mod/forumng/classes/event/subscription_deleted.php
new file mode 100644
index 0000000..4b7ddd1
--- /dev/null
+++ b/mod/forumng/classes/event/subscription_deleted.php
@@ -0,0 +1,119 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng unsubscribe event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_forumng\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng unsubscribe event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class subscription_deleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $type = 'Whole forum';
+        if ($group = strpos($this->other['info'], 'group')) {
+            $type = 'Group' . substr($this->other['info'], $group + 5);
+        } else if ($discuss = strpos($this->other['info'], 'discussion')) {
+            $type = 'Discussion' . substr($this->other['info'], $discuss + 10);
+        }
+        return "The user with id '$this->userid' removed subscription for user with id '$this->relateduserid' to the forum with the " .
+            "course module id '$this->contextinstanceid'. Removed subscription to: $type.";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:subscriptiondeleted', 'mod_forumng');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'unsubscribe', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->relateduserid)) {
+            throw new \coding_exception('The \'relateduserid\' must be set.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/classes/plugininfo/forumngfeature.php b/mod/forumng/classes/plugininfo/forumngfeature.php
new file mode 100644
index 0000000..b69bdbc
--- /dev/null
+++ b/mod/forumng/classes/plugininfo/forumngfeature.php
@@ -0,0 +1,32 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Subplugin info class.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_forumng\plugininfo;
+
+use core\plugininfo\base;
+
+defined('MOODLE_INTERNAL') || die();
+
+
+class forumngfeature extends base {
+}
diff --git a/mod/forumng/classes/plugininfo/forumngtype.php b/mod/forumng/classes/plugininfo/forumngtype.php
new file mode 100644
index 0000000..0db8733
--- /dev/null
+++ b/mod/forumng/classes/plugininfo/forumngtype.php
@@ -0,0 +1,32 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Subplugin info class.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_forumng\plugininfo;
+
+use core\plugininfo\base;
+
+defined('MOODLE_INTERNAL') || die();
+
+
+class forumngtype extends base {
+}
diff --git a/mod/forumng/classes/task/daily_housekeeping.php b/mod/forumng/classes/task/daily_housekeeping.php
new file mode 100644
index 0000000..873ac21
--- /dev/null
+++ b/mod/forumng/classes/task/daily_housekeeping.php
@@ -0,0 +1,45 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * A scheduled task for Forumng.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_forumng\task;
+
+class daily_housekeeping extends \core\task\scheduled_task {
+
+    /**
+     * Get a descriptive name for this task (shown to admins).
+     *
+     * @return string
+     */
+    public function get_name() {
+        return get_string('forumngcrontaskdaily', 'mod_forumng');
+    }
+
+    /**
+     * Run forumng cron daily housekeeping.
+     */
+    public function execute() {
+        global $CFG;
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng_cron.php');
+        \mod_forumng_cron::daily_housekeeping();
+    }
+}
diff --git a/mod/forumng/classes/task/email_digest.php b/mod/forumng/classes/task/email_digest.php
new file mode 100644
index 0000000..db0b161
--- /dev/null
+++ b/mod/forumng/classes/task/email_digest.php
@@ -0,0 +1,50 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * A scheduled task for Forumng.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_forumng\task;
+
+class email_digest extends \core\task\scheduled_task {
+
+    /**
+     * Get a descriptive name for this task (shown to admins).
+     *
+     * @return string
+     */
+    public function get_name() {
+        return get_string('forumngcrontaskdigest', 'mod_forumng');
+    }
+
+    /**
+     * Run forumng cron send forum emails digest.
+     */
+    public function execute() {
+        global $CFG;
+        // Duplicate of check in email_to_user.
+        if (!empty($CFG->noemailever)) {
+            mtrace("Not sending forum email digest because all mail is disabled.");
+            return;
+        }
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng_cron.php');
+        \mod_forumng_cron::email_digest();
+    }
+}
diff --git a/mod/forumng/classes/task/email_normal.php b/mod/forumng/classes/task/email_normal.php
new file mode 100644
index 0000000..0bd3add
--- /dev/null
+++ b/mod/forumng/classes/task/email_normal.php
@@ -0,0 +1,50 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * A scheduled task for Forumng cron.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_forumng\task;
+
+class email_normal extends \core\task\scheduled_task {
+
+    /**
+     * Get a descriptive name for this task (shown to admins).
+     *
+     * @return string
+     */
+    public function get_name() {
+        return get_string('forumngcrontaskemails', 'mod_forumng');
+    }
+
+    /**
+     * Run forumng cron send forum emails normally.
+     */
+    public function execute() {
+        global $CFG;
+        // Duplicate of check in email_to_user.
+        if (!empty($CFG->noemailever)) {
+            mtrace("Not sending forum emails because all mail is disabled.");
+            return;
+        }
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng_cron.php');
+        \mod_forumng_cron::email_normal();
+    }
+}
diff --git a/mod/forumng/confirmloggedin.php b/mod/forumng/confirmloggedin.php
new file mode 100644
index 0000000..3c7e910
--- /dev/null
+++ b/mod/forumng/confirmloggedin.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This script is called through AJAX. It confirms that a user is still
+ * logged in and has a valid session before saving a post
+ *
+ * @package    mod
+ * @subpackage forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+define('AJAX_SCRIPT', true);
+require_once(dirname(__FILE__) . '/../../config.php');
+
+header('Content-Type: text/plain');
+
+try {
+    // Test session - These functions throw exceptions so trap and exit if they fail.
+    // This saves 404 errors and sends a smaller page.
+    $contextid = required_param('contextid', PARAM_INT);
+    list($context, $course, $cm) = get_context_info_array($contextid);
+    $PAGE->set_url('/mod/forumng/confirmloggedin.php');
+    $PAGE->set_context($context);
+    require_login($course, false, $cm);
+    require_sesskey();
+} catch (moodle_exception $e) {
+    $pid = 0;
+    $url = '/mod/forumng/editpost.php';
+    if (!empty($_SERVER['HTTP_REFERER'])) {
+        $url = new moodle_url($_SERVER['HTTP_REFERER']);
+        $rpid = $url->get_param('p');
+        if (!empty($rpid)) {
+            $pid = $rpid;
+        }
+        $url = $url->out_as_local_url();
+    }
+    $params = array(
+            'context' => context_system::instance(),
+            'other' => array('page' => $url, 'pid' => $pid)
+    );
+    $event = \mod_forumng\event\save_failed::create($params);
+    $event->trigger();
+    exit;
+}
+
+echo 'ok';
diff --git a/mod/forumng/convert.php b/mod/forumng/convert.php
new file mode 100644
index 0000000..5ea7f0a
--- /dev/null
+++ b/mod/forumng/convert.php
@@ -0,0 +1,96 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Script to convert one or more standard forums to ForumNG, or else to offer
+ * the UI for this.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+require_once($CFG->libdir.'/formslib.php');
+
+class mod_forumng_convert_form extends moodleform {
+
+    public function definition() {
+
+        global $CFG, $USER;
+        $mform = $this->_form;
+        $course = $this->_customdata;
+
+        // Query for supported forums.
+        $forums = mod_forumng_utils::get_convertible_forums($course);
+
+        $forumoptions = array();
+        foreach ($forums as $forum) {
+            $forumoptions[$forum->id] = $forum->name;
+        }
+
+        $mform->addElement('static', '', '', get_string('convert_info', 'forumng'));
+
+        $select = $mform->addElement('select', 'forums', get_string('modulenameplural', 'forum'),
+            $forumoptions);
+        $select->setMultiple(true);
+
+        $mform->addElement('checkbox', 'nodata', '', get_string('convert_nodata', 'forumng'));
+
+        $mform->addElement('static', '', '', get_string('convert_warning', 'forumng'));
+        $mform->addElement('checkbox', 'hide', '', get_string('convert_hide', 'forumng'));
+
+        $this->add_action_buttons(true, get_string('convert_title', 'forumng'));
+
+        $mform->addElement('hidden', 'course', $this->_customdata->id);
+        $mform->setType('course', PARAM_INT);
+    }
+}
+
+$courseid = required_param('course', PARAM_INT);
+$course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+require_login($course);
+$pagename = get_string('convert_title', 'forumng');
+$PAGE->set_url(new moodle_url('/mod/forumng/convert.php'), array('course' => $courseid));
+$PAGE->set_title($pagename);
+$PAGE->navbar->add($pagename);
+require_capability('moodle/course:manageactivities',
+    context_course::instance($courseid));
+
+$mform = new mod_forumng_convert_form('convert.php', $course);
+if ($mform->is_cancelled()) {
+    redirect($CFG->wwwroot . '/course/view.php?id=' . $courseid);
+}
+echo $OUTPUT->header();
+if ($fromform = $mform->get_data()) {
+    echo $OUTPUT->heading($pagename);
+    if (empty($fromform->forums) || count($fromform->forums) == 0) {
+        print '<p>' . get_string('convert_noneselected', 'forumng') . '</p>';
+        echo $OUTPUT->continue_button($CFG->wwwroot . '/mod/forumng/convert.php?course=' . $course->id);
+    } else {
+        foreach ($fromform->forums as $forumid) {
+            mod_forumng::create_from_old_forum($course, $forumid, true,
+                optional_param('hide', 0, PARAM_INT) ? true : false,
+                optional_param('nodata', 0, PARAM_INT) ? true : false);
+        }
+        echo $OUTPUT->continue_button($CFG->wwwroot . '/course/view.php?id=' . $course->id);
+    }
+} else {
+    $mform->display();
+}
+
+// Display footer.
+echo $OUTPUT->footer($course);
diff --git a/mod/forumng/db/access.php b/mod/forumng/db/access.php
new file mode 100644
index 0000000..811c401
--- /dev/null
+++ b/mod/forumng/db/access.php
@@ -0,0 +1,369 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum capabilities.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$capabilities = array(
+
+    'mod/forumng:view' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'guest' => CAP_ALLOW,
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    // Ability to add new forumng to a course.
+    'mod/forumng:addinstance' => array(
+        'riskbitmask' => RISK_XSS,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        ),
+        'clonepermissionsfrom' => 'moodle/course:manageactivities'
+    ),
+
+    'mod/forumng:viewdiscussion' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'guest' => CAP_ALLOW,
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:viewallposts' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:startdiscussion' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:replypost' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:viewrating' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:viewanyrating' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:viewallratings' => array(
+
+        'riskbitmask' => RISK_PERSONAL,
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        ),
+    ),
+
+    'mod/forumng:rate' => array(
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:createattachment' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:deleteanypost' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:splitdiscussions' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:movediscussions' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:editanypost' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:viewsubscribers' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:managesubscriptions' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:ignorepostlimits' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:setimportant' => array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:mailnow' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:managediscussions' => array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:viewreadinfo' => array(
+
+        'riskbitmask' => 0,
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:forwardposts' => array(
+
+        'riskbitmask' => RISK_SPAM,
+            'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:copydiscussion' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:grade'  => array(
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:postasmoderator' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:postanon' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/forumng:addtag' => array(
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    )
+
+);
diff --git a/mod/forumng/db/install.xml b/mod/forumng/db/install.xml
new file mode 100644
index 0000000..2829eaa
--- /dev/null
+++ b/mod/forumng/db/install.xml
@@ -0,0 +1,202 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="mod/forumng/db" VERSION="20160802" COMMENT="ForumNG is a reimplemented variant of the original Moodle forum system. It provides asynchronous discussion facilities."
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="../../../lib/xmldb/xmldb.xsd"
+>
+  <TABLES>
+    <TABLE NAME="forumng" COMMENT="Standard module table. Holds information about a forum instance.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Moodle course ID"/>
+        <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="Name of activity."/>
+        <FIELD NAME="intro" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Description which appear on the course page, if that option is tured on."/>
+        <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Text format for intro field"/>
+        <FIELD NAME="introduction" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Introductory text that displays on the forum view page. This text is optional; if set to null, there is no such text."/>
+        <FIELD NAME="introductionformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Text format for introduction field"/>
+        <FIELD NAME="type" TYPE="char" LENGTH="255" NOTNULL="true" DEFAULT="general" SEQUENCE="false" COMMENT="Forum type that will be used to display this forum. May be NULL for default type."/>
+        <FIELD NAME="ratingscale" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="0 to disable ratings. Positive integer to use numeric 0..N scale. Negative number to select a scale by (negative) scale ID."/>
+        <FIELD NAME="ratingfrom" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Time (in seconds since epoch). Users can only rate posts that are created on or after this time. 0 if no limit."/>
+        <FIELD NAME="ratinguntil" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Time (in seconds since epoch). Users can only rate posts that were created before this time. 0 if no limit."/>
+        <FIELD NAME="ratingthreshold" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Required number of ratings. If a post receives fewer than this number of ratings, the average rating is not displayed or included in grades."/>
+        <FIELD NAME="grading" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="0 = no grade 1 = average rating 2 = count of ratings 3 = max of ratings 4 = min of ratings 5 = sum of ratings"/>
+        <FIELD NAME="attachmentmaxbytes" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Maximum size of forum attachments in bytes."/>
+        <FIELD NAME="reportingemail" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="Email address for reporting unacceptable post"/>
+        <FIELD NAME="subscription" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false" COMMENT="Controls whether users can subscribe to this forum via email. 0 = subscription not permitted 1 = subscription permitted 2 = initially subscribed, can unsubscribe 3 = force subscribe"/>
+        <FIELD NAME="feedtype" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Whether RSS/Atom feeds are permitted. 0 = no feed, 1 = discussions feed, 2 = all-posts feed."/>
+        <FIELD NAME="feeditems" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Number of articles included in RSS feed. 0 = site default."/>
+        <FIELD NAME="maxpostsperiod" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Time in seconds over which the maximum post counts are evaluated. (For example, if this is set to 1 day, and max posts is set to 10, then it will not let you post more than 10 posts in any 24-hour period.) 0 = no post restrictions."/>
+        <FIELD NAME="maxpostsblock" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="After you make this many posts in the time period, you cannot post any more. 0 = not set."/>
+        <FIELD NAME="postingfrom" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If nonzero, then users cannot make posts or replies to the forum until the specified date."/>
+        <FIELD NAME="postinguntil" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If non-zero, users cannot make posts or replies to the forum after the specified date."/>
+        <FIELD NAME="typedata" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Stores arbitrary extra settings related to the forum type, if any; otherwise null. Data is stored as a serialized php object."/>
+        <FIELD NAME="magicnumber" TYPE="int" LENGTH="16" NOTNULL="true" SEQUENCE="false" COMMENT="A random number generated when the forum is created. This is used (along with user ID, group ID) to create hashes that allow remote access to the RSS/Atom feeds for the forum, providing limited access security for the feeds."/>
+        <FIELD NAME="completiondiscussions" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Nonzero if a certain number of posts are required to mark this forum completed for a user."/>
+        <FIELD NAME="completionreplies" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Nonzero if a certain number of replies are required to mark this forum complete for a user."/>
+        <FIELD NAME="completionposts" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Nonzero if a certain number of posts or replies (total) are required to mark this forum complete for a user."/>
+        <FIELD NAME="removeafter" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Remove old discussions after certain period. 1 for one month, 2 for two months...12 for one year, 13 for two years and 14 for three years."/>
+        <FIELD NAME="removeto" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="This field stores the mod instance id of the target forum. Null means delete old discussions permanently."/>
+        <FIELD NAME="shared" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If the forum is available for sharing on other courses, this flag will be set to 1."/>
+        <FIELD NAME="originalcmid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="If this forum is a reference to (clone of) a shared forum, this field is non-null and points to the original forum. (When this is set, other settings in this table are ignored.)"/>
+        <FIELD NAME="gradingscale" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="grading scale"/>
+        <FIELD NAME="canpostanon" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="This flag is set to 1 if the user can post anonymously as a moderator , 0 if not."/>
+        <FIELD NAME="enabletags" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="field to indicate whether tags can be added to forumng discussions"/>
+        <FIELD NAME="enableratings" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="enable ratings"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="course" TYPE="foreign" FIELDS="course" REFTABLE="course" REFFIELDS="id"/>
+        <KEY NAME="originalcmid" TYPE="foreign" FIELDS="originalcmid" REFTABLE="course_modules" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="forumng_discussions" COMMENT="Represents a single discussion (thread) in a forum.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="forumngid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Forum that contains this discussion"/>
+        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="ID of group this discussion is in. NULL = any group"/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="ID within the forumng_posts table of the first post in this discussion. May be null, but only temporarily during discussion creation. (Note: This field may not point to a deleted post. If deleting the first post, you need to delete the whole discussion instead.)"/>
+        <FIELD NAME="lastpostid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="ID of the most-recently updated post in this discussion. May be null, but only temporarily during discussion creation. (Note: This field may not point to a deleted post. If deleting a post that is referenced by this field, this field must be changed.)"/>
+        <FIELD NAME="timestart" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If non-zero, this discussion does not appear until the given time."/>
+        <FIELD NAME="timeend" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If non-zero, the discussion disappears after the given time."/>
+        <FIELD NAME="deleted" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Set to the date at which the discussion was 'deleted'. Discussions can still be undeleted. A process in cron will 'really' delete discussions after a certain date."/>
+        <FIELD NAME="locked" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If set to 1, nobody can post to this discussion any more. The post pointed to by lastpostid is the post that was added while locking the thread."/>
+        <FIELD NAME="sticky" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If set to 1, this discussion appears in a special area at the top of the forum thread list."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="forumngid" TYPE="foreign" FIELDS="forumngid" REFTABLE="forumng" REFFIELDS="id"/>
+        <KEY NAME="groupid" TYPE="foreign" FIELDS="groupid" REFTABLE="groups" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="forumng_posts" COMMENT="Holds actual forum post data">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="discussionid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Discussion that contains this post."/>
+        <FIELD NAME="parentpostid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="ID of parent post within the same discussion; null if no parent (first post)."/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="User ID - must be a valid ID (not 0 or NULL)."/>
+        <FIELD NAME="created" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time originally created (seconds since epoch). This time remains the same if the post is edited."/>
+        <FIELD NAME="modified" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time modified (seconds since epoch). Initially same as creation time. Changes if post is edited."/>
+        <FIELD NAME="deleted" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Normally 0. If this post was deleted, this field stores the time at which it was deleted. Posts may be 'really' removed from the database later by cron."/>
+        <FIELD NAME="deleteuserid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="If the post has been deleted, this field stores the ID of the user who deleted it. Null if the post has not been deleted."/>
+        <FIELD NAME="important" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If important is equal to 1, highlight the post. Default value is 0."/>
+        <FIELD NAME="mailstate" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="0 = post has not been mailed yet. 1 = post has not been mailed, is set to 'mail now'. 2 = post has been mailed. 3 = post has been mailed and included in any digests."/>
+        <FIELD NAME="oldversion" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="0 for all current posts. When a post is edited, a copy of the previous version is added to this table. The copy has this field set to 1, and the parentpostid field set to the ID of the real post. These extra copies may be deleted periodically via cron."/>
+        <FIELD NAME="edituserid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="If the post has been edited, this field stores the ID of the user who made this edit. (For posts with oldversion set to 0, this field will correspond to the user who made that previous edit.) Null if the post has not been edited."/>
+        <FIELD NAME="subject" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="Contains the message subject. May be null if there is no change in subject (the system will automatically generate 'Re: whatever' in the appropriate language when necessary)."/>
+        <FIELD NAME="message" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Actual text of message in format specified by format field."/>
+        <FIELD NAME="messageformat" TYPE="int" LENGTH="1" NOTNULL="true" SEQUENCE="false" COMMENT="Format of text in the 'message' field, e.g. FORMAT_HTML."/>
+        <FIELD NAME="attachments" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="This flag is set to 1 if there are attachments, 0 if not. Information (count, names, sizes) about the attachments in the post must be obtained by accessing the filesystem folder related to this post ID."/>
+        <FIELD NAME="asmoderator" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="This flag is set to 1 if the user is a moderator, 0 if not."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="discussionid" TYPE="foreign" FIELDS="discussionid" REFTABLE="forumng_discussions" REFFIELDS="id"/>
+        <KEY NAME="parentpostid" TYPE="foreign" FIELDS="parentpostid" REFTABLE="forumng_posts" REFFIELDS="id"/>
+        <KEY NAME="userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="created" UNIQUE="false" FIELDS="created" COMMENT="Index on creation date. Used when building remote feeds."/>
+        <INDEX NAME="mailstate" UNIQUE="false" FIELDS="mailstate"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="forumng_ratings" COMMENT="Stores post ratings.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of user who rated post"/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of post that was rated."/>
+        <FIELD NAME="time" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time at which rating was given (or last updated)."/>
+        <FIELD NAME="rating" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false" COMMENT="Actual rating. The meaning of this value depends on the scale used."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+        <KEY NAME="postid" TYPE="foreign" FIELDS="postid" REFTABLE="forumng_posts" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="forumng_subscriptions" COMMENT="Stores list of users who are subscribed to a forum by email. Note that this list is not used if 'force subscription' or 'prevent subscription' options are selected.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of user who will receive forum email."/>
+        <FIELD NAME="forumngid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of forum that subscription relates to."/>
+        <FIELD NAME="subscribed" TYPE="int" LENGTH="1" NOTNULL="true" SEQUENCE="false" COMMENT="This field is usually 1. It indicates that the user has chosen to subscribe to the forum. In the case of initial-subscription forums it may be 0, indicating that the user has chosen to unsubscribe. (If the user has not changed the default state, there would be no row for them in this table.)"/>
+        <FIELD NAME="discussionid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="User has subscribed to this discussion if not NULL."/>
+        <FIELD NAME="clonecmid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Used only for shared forums. This records the clone forum that you subscribed from. It is used in order to correctly determine your course when sending out emails. Note this field is not strictly necessary because you could use the forumngid field instead, but that makes the email queries even more complicated, so I added this field instead. (For non-clone forums it is always null.)"/>
+        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="The group you subscribe to."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+        <KEY NAME="forumngid" TYPE="foreign" FIELDS="forumngid" REFTABLE="forumng" REFFIELDS="id"/>
+        <KEY NAME="clonecmid" TYPE="foreign" FIELDS="clonecmid" REFTABLE="course_modules" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="forumng_read" COMMENT="Tracks information about who has read each discussion, and when. Note that information here is only retained for recent discussions; older discussions are assumed to be read.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of user who's read the discussion"/>
+        <FIELD NAME="discussionid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of discussion the user has read."/>
+        <FIELD NAME="time" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time at which they read the discussion."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+        <KEY NAME="discussionid" TYPE="foreign" FIELDS="discussionid" REFTABLE="forumng_discussions" REFFIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="userid-discussionid" UNIQUE="true" FIELDS="userid, discussionid"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="forumng_read_posts" COMMENT="Store posts that are read">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="User"/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Post id"/>
+        <FIELD NAME="time" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+        <KEY NAME="postid" TYPE="foreign" FIELDS="postid" REFTABLE="forumng_posts" REFFIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="userid-postid" UNIQUE="true" FIELDS="userid, postid" COMMENT="Unique user/post"/>
+        <INDEX NAME="time" UNIQUE="false" FIELDS="time" COMMENT="Index time as we delete records older than certain time"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="forumng_drafts" COMMENT="Draft messages that have not yet been posted.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="User who wrote this draft post."/>
+        <FIELD NAME="forumngid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Forum where the draft might be posted."/>
+        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="When creating a new discussion in a group-mode forum, this field should be set to indicate the group for the discussion. (null = 'all groups', or for use in a non-grouped forum). This field is not set when replying to an existing discussion, even if it is in a group."/>
+        <FIELD NAME="parentpostid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="If this draft is of a reply (rather than a new discussion), then this contains the id of the post it's replying to. New discussions are null."/>
+        <FIELD NAME="subject" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="Message subject. Should be null if this reply does not change the subject."/>
+        <FIELD NAME="message" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Text of message (required, but may be empty string)."/>
+        <FIELD NAME="messageformat" TYPE="int" LENGTH="1" NOTNULL="true" SEQUENCE="false" COMMENT="Identifier for Moodle format (e.g. HTML) used for message content."/>
+        <FIELD NAME="attachments" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Set to 1 if this draft contains any attachments, 0 otherwise. Attachment files themselves can be determined based on contents of the relevant folder."/>
+        <FIELD NAME="saved" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time last saved in seconds since epoch. (Note: Unlike the created/modified times in forumng_posts, the 'saved' time is used for both states here.)"/>
+        <FIELD NAME="options" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="This field may be set to contain serialised/encoded values of additional form fields, depending on the state of the form when the draft was created."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+        <KEY NAME="forumngid" TYPE="foreign" FIELDS="forumngid" REFTABLE="forumng" REFFIELDS="id"/>
+        <KEY NAME="parentpostid" TYPE="foreign" FIELDS="parentpostid" REFTABLE="forumng_posts" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="forumng_flags" COMMENT="Users can flag individual posts that are of interest. These are listed directly on the forum discussion list page.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="User who has flagged the post."/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of post that has been flagged."/>
+        <FIELD NAME="flagged" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time (seconds since epoch) that the post was flagged."/>
+        <FIELD NAME="discussionid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="discussion id for flagging discussions"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+        <KEY NAME="postid" TYPE="foreign" FIELDS="postid" REFTABLE="forumng_posts" REFFIELDS="id"/>
+        <KEY NAME="discussionid" TYPE="foreign" FIELDS="discussionid" REFTABLE="forumng_discussions" REFFIELDS="id" COMMENT="discussion id to forumng_discussion"/>
+      </KEYS>
+    </TABLE>
+  </TABLES>
+</XMLDB>
diff --git a/mod/forumng/db/log.php b/mod/forumng/db/log.php
new file mode 100644
index 0000000..0c1dbe6
--- /dev/null
+++ b/mod/forumng/db/log.php
@@ -0,0 +1,64 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Definition of log events
+ *
+ *
+ * @package    mod_forumng
+ * @copyright  2012 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $DB;
+
+$logs = array(
+    array('module' => 'forumng', 'action' => 'add', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'add discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'add reply', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'delete discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'delete post', 'mtable' => 'forumng_posts', 'field' => 'subject'),
+    array('module' => 'forumng', 'action' => 'digest ok', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'edit post', 'mtable' => 'forumng_posts', 'field' => 'subject'),
+    array('module' => 'forumng', 'action' => 'error editpost', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'extdashadd', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'extdashremove', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'forward discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'listdeleteddiscussions', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'listdeletedposts', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'lock discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'mail ok', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'mail error', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'merge discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'permdelete discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'report post', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'split post', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'subscribe', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'unsubscribe', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'update', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'undelete discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'undelete post', 'mtable' => 'forumng_posts', 'field' => 'subject'),
+    array('module' => 'forumng', 'action' => 'unlock discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'view', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'view all', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'view discussion', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'view usageinfo', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'view user participation', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'view participation list', 'mtable' => 'forumng', 'field' => 'name'),
+    array('module' => 'forumng', 'action' => 'edit set tags', 'mtable' => 'forumng', 'field' => 'name')
+);
diff --git a/mod/forumng/db/services.php b/mod/forumng/db/services.php
new file mode 100644
index 0000000..aabdde7
--- /dev/null
+++ b/mod/forumng/db/services.php
@@ -0,0 +1,45 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Forum services declarations.
+ * 
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$services = array(
+        'Forum list service' => array(
+                'shortname' => 'forumlist',
+                'functions' => array ('mod_forumng_get_forum_list'),
+                'requiredcapability' => '',
+                'restrictedusers' => 0,
+                'enabled' => 1
+        )
+);
+
+$functions = array(
+        'mod_forumng_get_forum_list' => array(
+                'classname'   => 'mod_forumng_external',
+                'methodname'  => 'get_forum_list',
+                'classpath'   => 'mod/forumng/externallib.php',
+                'description' => 'Lists forums for user on course',
+                'type'        => 'read'
+        ),
+);
diff --git a/mod/forumng/db/subplugins.php b/mod/forumng/db/subplugins.php
new file mode 100644
index 0000000..f5f3845
--- /dev/null
+++ b/mod/forumng/db/subplugins.php
@@ -0,0 +1,30 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum subplugins.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$subplugins = array(
+    'forumngfeature' => 'mod/forumng/feature',
+    'forumngtype' => 'mod/forumng/type'
+);
diff --git a/mod/forumng/db/tag.php b/mod/forumng/db/tag.php
new file mode 100644
index 0000000..dff8fb0
--- /dev/null
+++ b/mod/forumng/db/tag.php
@@ -0,0 +1,44 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Define tags.
+ *
+ * @package mod_forumng
+ * @copyright 2016 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$tagareas = array(
+    array(
+        'itemtype' => 'forumng_discussions',
+        'component' => 'mod_forumng',
+        'collection' => 'forumng_discussions',
+        'searchable' => false,
+    ),
+    array(
+        'itemtype' => 'forumng',
+        'component' => 'mod_forumng',
+        'collection' => 'forumng_set',
+        'searchable' => false,
+    ),
+    array(
+        'itemtype' => 'groups',
+        'component' => 'mod_forumng',
+        'collection' => 'forumng_group_set',
+        'searchable' => false,
+    ),
+);
diff --git a/mod/forumng/db/tasks.php b/mod/forumng/db/tasks.php
new file mode 100644
index 0000000..179fdfa
--- /dev/null
+++ b/mod/forumng/db/tasks.php
@@ -0,0 +1,56 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Definition of Forum scheduled tasks.
+ *
+ * @package mod_forumng
+ * @category task
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$tasks = array(
+    array(
+        'classname' => 'mod_forumng\task\email_normal',
+        'blocking' => 0,
+        'minute' => '*/10',
+        'hour' => '*',
+        'day' => '*',
+        'month' => '*',
+        'dayofweek' => '*'
+    ),
+    array(
+        'classname' => 'mod_forumng\task\daily_housekeeping',
+        'blocking' => 0,
+        'minute' => '0',
+        'hour' => '1',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'
+    ),
+    array(
+        'classname' => 'mod_forumng\task\email_digest',
+        'blocking' => 0,
+        'minute' => '0',
+        'hour' => '17',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'
+    )
+);
diff --git a/mod/forumng/db/upgrade.php b/mod/forumng/db/upgrade.php
new file mode 100644
index 0000000..4618256
--- /dev/null
+++ b/mod/forumng/db/upgrade.php
@@ -0,0 +1,381 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum database upgrade script.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+function xmldb_forumng_upgrade($oldversion=0) {
+    global $CFG, $THEME, $DB;
+
+    $dbman = $DB->get_manager();
+
+    if ($oldversion < 2012070900) {
+        // Changed format of modinfo cache, so need to rebuild all courses.
+        rebuild_course_cache(0, true);
+        upgrade_mod_savepoint(true, 2012070900, 'forumng');
+    }
+
+    if ($oldversion < 2012102601) {
+        // Define field gradingscale to be added to forumng.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('gradingscale', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'grading');
+
+        // Launch add field gradingscale.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Changed format of modinfo cache, so need to rebuild all courses.
+        rebuild_course_cache(0, true);
+
+        // ForumNG savepoint reached.
+        upgrade_mod_savepoint(true, 2012102601, 'forumng');
+    }
+
+    if ($oldversion < 2013082000) {
+        // Fix posts that have been orphaned after incorrect clean up in cron.
+        // This is processed in a recordset with update per row as 1 big update is too slow.
+
+        // Find affected posts info, put into recordset.
+        $sql = 'SELECT p.id, d.postid
+                FROM {forumng_posts} p
+                JOIN {forumng_discussions} d on d.id = p.discussionid
+                WHERE p.parentpostid IS NOT NULL
+                AND NOT EXISTS (SELECT id FROM {forumng_posts} WHERE id = p.parentpostid)';
+        $rs = $DB->get_records_sql($sql);
+        if ($rs) {
+            $pbar = new progress_bar('mod_forumng_fixposts', 500, true);
+            $cur = 1;
+            $total = count($rs);
+            // Update each row, making parent post id the discussion root post.
+            foreach ($rs as $record) {
+                $update = new stdClass();
+                $update->id = $record->id;
+                $update->parentpostid = $record->postid;
+                $DB->update_record('forumng_posts', $update);
+                $pbar->update($cur, $total, 'Repair ForumNG orphaned posts');
+                $cur++;
+            }
+        }
+        // ForumNG savepoint reached.
+        upgrade_mod_savepoint(true, 2013082000, 'forumng');
+    }
+
+    if ($oldversion < 2013100801) {
+        // Define field canpostanon to be added to forumng.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('canpostanon', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'gradingscale');
+
+        // Launch add field canpostanon.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Define field asmoderator to be added to forumng_posts.
+        $table = new xmldb_table('forumng_posts');
+        $field = new xmldb_field('asmoderator', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'attachments');
+
+        // Launch add field asmoderator.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Changed format of modinfo cache, so need to rebuild all courses.
+        rebuild_course_cache(0, true);
+
+        // ForumNG savepoint reached.
+        upgrade_mod_savepoint(true, 2013100801, 'forumng');
+    }
+
+    if ($oldversion < 2014031200) {
+        global $DB;
+        set_time_limit(0);
+        // Fix issue with read table having duplicate entries.
+        $select = "SELECT " . $DB->sql_concat('r.userid', "'|'", 'r.discussionid') . ", r.userid, r.discussionid
+                     FROM {forumng_read} r
+                 GROUP BY " . $DB->sql_concat('r.userid', "'|'", 'r.discussionid') . ", r.userid, r.discussionid
+                   HAVING COUNT(1) > 1";
+        $duplicates = $DB->get_records_sql($select);
+        if ($duplicates) {
+            $pbar = new progress_bar('mod_forumng_fixread', 500, true);
+            $cur = 1;
+            $total = count($duplicates);
+            foreach ($duplicates as $duplicate) {
+                // Find other records with user and discussion - keep latest time or lowest id.
+                $select = "id IN(
+                        SELECT DISTINCT r1.id FROM {forumng_read} r1
+                          JOIN {forumng_read} r2 ON r2.discussionid = r1.discussionid
+                           AND r2.userid = r1.userid AND r2.id != r1.id
+                           AND (r2.time > r1.time OR (r2.time = r1.time AND r2.id > r1.id))
+                         WHERE r1.userid = ? AND r1.discussionid = ?
+                        )";
+                $result = $DB->delete_records_select('forumng_read', $select,
+                        array($duplicate->userid, $duplicate->discussionid));
+                $pbar->update($cur, $total, 'Remove duplicate ForumNG read rows');
+                $cur++;
+            }
+        }
+
+        // Drop then add index as don't seem to be able to update...
+
+        // Define index userid-discussionid (not unique) to be dropped form forumng_read.
+        $table = new xmldb_table('forumng_read');
+        $index = new xmldb_index('userid-discussionid', XMLDB_INDEX_NOTUNIQUE, array('userid', 'discussionid'));
+
+        // Conditionally launch drop index userid-discussionid.
+        if ($dbman->index_exists($table, $index)) {
+            $dbman->drop_index($table, $index);
+        }
+
+        // Define index userid-discussionid (unique) to be added to forumng_read.
+        $table = new xmldb_table('forumng_read');
+        $index = new xmldb_index('userid-discussionid', XMLDB_INDEX_UNIQUE, array('userid', 'discussionid'));
+
+        // Conditionally launch add index userid-discussionid.
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2014031200, 'forumng');
+
+    }
+
+    if ($oldversion < 2014072800) {
+
+        // Define field discussionid to be added to forumng_flags.
+        $table = new xmldb_table('forumng_flags');
+        $field = new xmldb_field('discussionid', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'flagged');
+
+        // Conditionally launch add field discussionid.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Define key discussionid (foreign) to be added to forumng_flags.
+        $key = new xmldb_key('discussionid', XMLDB_KEY_FOREIGN, array('discussionid'), 'forumng_discussion', array('id'));
+
+        // Launch add key discussionid.
+        $dbman->add_key($table, $key);
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2014072800, 'forumng');
+    }
+
+    if ($oldversion < 2014102400) {
+
+        // Define field tags to be added to forumng.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('tags', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'canpostanon');
+
+        // Conditionally launch add field tags.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2014102400, 'forumng');
+    }
+
+    if ($oldversion < 2014102800) {
+        // Define field enableratings to be added to forumng.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('enableratings', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'canpostanon');
+
+        // Launch add field enableratings.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Foreach existing 'Forumng ratings (obsolete)'
+        // Set the enableratings field to FORUMNG_RATING_OBSOLETE=1 for everything that has a rating.
+        $DB->set_field_select('forumng', 'enableratings', 1, 'ratingscale != 0');
+
+        // ForumNG savepoint reached.
+        upgrade_mod_savepoint(true, 2014102800, 'forumng');
+    }
+
+    if ($oldversion < 2015012700) {
+
+        // Define table forumng_read_posts to be created.
+        $table = new xmldb_table('forumng_read_posts');
+
+        // Adding fields to table forumng_read_posts.
+        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+        $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+        $table->add_field('postid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+        $table->add_field('time', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+
+        // Adding keys to table forumng_read_posts.
+        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+        $table->add_key('userid', XMLDB_KEY_FOREIGN, array('userid'), 'user', array('id'));
+        $table->add_key('postid', XMLDB_KEY_FOREIGN, array('postid'), 'forumng_posts', array('id'));
+
+        // Adding indexes to table forumng_read_posts.
+        $table->add_index('userid-postid', XMLDB_INDEX_UNIQUE, array('userid', 'postid'));
+        $table->add_index('time', XMLDB_INDEX_NOTUNIQUE, array('time'));
+
+        // Conditionally launch create table for forumng_read_posts.
+        if (!$dbman->table_exists($table)) {
+            $dbman->create_table($table);
+        }
+        set_time_limit(0);
+        $oldtime = strtotime('730 days ago');
+
+        $DB->delete_records_select('forumng_read', 'time < ?', array($oldtime));
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2015012700, 'forumng');
+    }
+
+    if ($oldversion < 2015060502) {
+
+        // Define key discussionid (foreign) to be dropped form forumng_flags.
+        $table = new xmldb_table('forumng_flags');
+        $key = new xmldb_key('discussionid', XMLDB_KEY_FOREIGN, array('discussionid'), 'forumng_discussion', array('id'));
+
+        // Launch drop key discussionid.
+        $dbman->drop_key($table, $key);
+
+        // Define key discussionid (foreign) to be added to forumng_flags.
+        $table = new xmldb_table('forumng_flags');
+        $key = new xmldb_key('discussionid', XMLDB_KEY_FOREIGN, array('discussionid'), 'forumng_discussions', array('id'));
+
+        // Launch add key discussionid.
+        $dbman->add_key($table, $key);
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2015060502, 'forumng');
+    }
+
+    if ($oldversion < 2016080100) {
+
+        // Rename field tags on table forumng to enabletags (core now uses a tags field in modules).
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('tags', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'canpostanon');
+
+        // Launch rename field enabletags.
+        $dbman->rename_field($table, $field, 'enabletags');
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2016080100, 'forumng');
+    }
+
+    if ($oldversion < 2017042100) {
+
+        // First, replace any nulls with default.
+        // There is historic data where it is null in some of our systems.
+        $DB->set_field_select('forumng', 'introformat', 0, 'introformat IS NULL');
+
+        // Changing nullability of field introformat on table forumng to not null.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('introformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, '0', 'intro');
+
+        // Launch change of nullability for field introformat.
+        $dbman->change_field_notnull($table, $field);
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2017042100, 'forumng');
+    }
+
+    if ($oldversion < 2017042101) {
+
+        // Rename field intro on table forumng to introduction.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('intro', XMLDB_TYPE_TEXT, null, null, null, null, null, 'name');
+
+        // Launch rename field intro.
+        $dbman->rename_field($table, $field, 'introduction');
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2017042101, 'forumng');
+    }
+
+    if ($oldversion < 2017042102) {
+
+        // Move corresponding files.
+        $DB->execute("
+                UPDATE {files}
+                   SET filearea = 'introduction'
+                 WHERE component = 'mod_forumng'
+                   AND filearea = 'intro'");
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2017042102, 'forumng');
+    }
+
+    if ($oldversion < 2017042103) {
+
+        // Rename field introformat on table forumng to introductionformat.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('introformat', XMLDB_TYPE_TEXT, null, null, null, null, null, 'intro');
+
+        // Launch rename field introformat.
+        $dbman->rename_field($table, $field, 'introductionformat');
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2017042103, 'forumng');
+    }
+
+    if ($oldversion < 2017042104) {
+
+        // Define field intro to be added to forumng.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('intro', XMLDB_TYPE_TEXT, null, null, null, null, null, 'name');
+
+        // Conditionally launch add field intro.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2017042104, 'forumng');
+    }
+
+    if ($oldversion < 2017042105) {
+
+        // Define field introformat to be added to forumng.
+        $table = new xmldb_table('forumng');
+        $field = new xmldb_field('introformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, 1, 'intro');
+
+        // Conditionally launch add field introformat.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2017042105, 'forumng');
+    }
+
+    if ($oldversion < 2017042106) {
+
+        // Set a sensible default for the introformat. Moodle standard practice is
+        // to declare the un-sensible default 0 in the DB schema.
+        $DB->set_field('forumng', 'introformat', FORMAT_HTML);
+
+        // Forumng savepoint reached.
+        upgrade_mod_savepoint(true, 2017042106, 'forumng');
+    }
+
+    return true;
+}
diff --git a/mod/forumng/deletedraft.php b/mod/forumng/deletedraft.php
new file mode 100644
index 0000000..8366628
--- /dev/null
+++ b/mod/forumng/deletedraft.php
@@ -0,0 +1,79 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Delete a draft post, after confirmation.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+$draftid = required_param('draft', PARAM_INT);
+$pageparams = array('draft' => $draftid);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+// Load draft and forum
+$draft = mod_forumng_draft::get_from_id($draftid);
+$forum = mod_forumng::get_from_id($draft->get_forumng_id(), $cloneid);
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+$pagename = get_string('deletedraft', 'forumng');
+$out = $forum->init_page(new moodle_url('/mod/forumng/deletedraft.php', $pageparams), $pagename);
+
+// Check it belongs to current user
+if ($USER->id != $draft->get_user_id()) {
+    print_error('draft_mismatch', 'forumng');
+}
+
+// If they are actually deleting it, go ahead
+if ($_SERVER['REQUEST_METHOD'] == 'POST') {
+    $draft->delete($forum->get_context(true));
+    redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
+}
+
+// Confirm page. Work out navigation for header
+print $out->header();
+
+print $out->confirm(get_string('confirmdeletedraft', 'forumng'),
+        new single_button(new moodle_url('/mod/forumng/deletedraft.php',
+            array('draft'=>$draftid, 'clone'=>$cloneid)),
+            get_string('delete'), 'post'),
+        new single_button(new moodle_url('/mod/forumng/view.php',
+            array('id'=>$forum->get_course_module_id(), 'clone'=>$cloneid)),
+            get_string('cancel'), 'get'));
+
+print '<div class="forumng-post">';
+print '<div class="forumng-1"></div>';
+print '<div class="forumng-2"></div>';
+print '<div class="forumng-pic">';
+print $out->user_picture($USER, array('courseid'=>$course->id));
+print '</div>';
+if ($subject = $draft->get_subject()) {
+    print '<h3 class="forumng-subject">' . format_string($subject) . '</h3>';
+}
+print '<div class="forumng-postmain">';
+print $draft->get_formatted_message($forum);
+print '</div>';
+print '</div>';
+
+print $out->footer();
diff --git a/mod/forumng/deletepost.php b/mod/forumng/deletepost.php
new file mode 100644
index 0000000..b1b83d7
--- /dev/null
+++ b/mod/forumng/deletepost.php
@@ -0,0 +1,263 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Delete or undelete a post (AJAX or standard).
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Get AJAX parameter which might affect error handling
+$ajax = optional_param('ajax', 0, PARAM_INT);
+
+// Post ID
+$postid = required_param('p', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+// Delete or undelete
+$delete = optional_param('delete', 1, PARAM_INT);
+
+// Email author
+$email = optional_param('email', 0, PARAM_INT);
+
+// Were the posts expanded?
+$expand = optional_param('expand', 0, PARAM_INT);
+$expandparam = $expand ? '&expand=1' : '';
+
+$pageparams = array('p'=>$postid);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+if ($delete != 1) {
+    $pageparams['delete'] = $delete;
+}
+if ($ajax) {
+    $pageparams['ajax'] = $ajax;
+}
+if ($expand) {
+    $pageparams['expand'] = $expand;
+}
+
+$post = mod_forumng_post::get_from_id($postid, $cloneid);
+
+// Get convenience variables
+$discussion = $post->get_discussion();
+$forum = $post->get_forum();
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+// Set up page
+$pagename = get_string($delete ? 'deletepost' : 'undeletepost', 'forumng',
+    $post->get_effective_subject(true));
+$url = new moodle_url('/mod/forumng/deletepost.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+// Do all access security checks
+$post->require_view();
+if ($delete) {
+    if (!$post->can_delete($whynot)) {
+        print_error($whynot, 'forumng');
+    }
+} else {
+    if (!$post->can_undelete($whynot)) {
+        print_error($whynot, 'forumng');
+    }
+}
+
+// Is this the actual delete?
+if ($_SERVER['REQUEST_METHOD'] == 'POST' && $email != 1) {
+    // Delete or undelete the post
+    if ($delete) {
+        $post->delete();
+    } else {
+        $post->undelete();
+    }
+
+    // Redirect back
+    if ($ajax) {
+        mod_forumng_post::print_for_ajax_and_exit($postid, $cloneid);
+    }
+
+    // Only include post id if user can see deleted posts
+    $postid = '';
+    if (!$delete || has_capability('mod/forumng:editanypost', $forum->get_context())) {
+        $postid = '#p' . $post->get_id();
+    }
+
+    redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) . $expandparam . $postid);
+}
+
+if ($email) {
+    require_once('deletepost_form.php');
+
+    $urlparams = array('p' => $postid, 'delete' => $delete, 'email' => $email);
+    if ($cloneid) {
+        $urlparams['clone'] = $cloneid;
+    }
+
+    $url = new moodle_url("{$CFG->wwwroot}/mod/forumng/deletepost.php", $urlparams);
+    $mform = new mod_forumng_deletepost_form($url);
+
+    if ($mform->is_cancelled()) {
+        // Form is cancelled, redirect back to the discussion.
+        redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) . $expandparam);
+
+    } else if ($submitted = $mform->get_data()) {
+        // Store copy of the post for the author.
+        $messagepost = $post->display(true, array(mod_forumng_post::OPTION_NO_COMMANDS => true,
+                mod_forumng_post::OPTION_SINGLE_POST => true));
+
+        // Delete the post
+        $post->delete();
+
+        // Set up the email.
+        $messagetext = $submitted->message['text'];
+        $copyself = (isset($submitted->copyself))? true : false;
+        $includepost = (isset($submitted->includepost))? true : false;
+        $user = $post->get_user();
+        $from = $SITE->fullname;
+        $subject = get_string('deletedforumpost', 'forumng');
+        $message = html_to_text($messagetext);
+
+        // Always enable HTML version
+        $messagehtml = $out->deletion_email(text_to_html($messagetext));
+
+        // Include the copy of the post in the email to the author.
+        if ($includepost) {
+            $messagehtml .= $messagepost;
+            $message .=  $post->display(false, array(mod_forumng_post::OPTION_NO_COMMANDS => true,
+                mod_forumng_post::OPTION_SINGLE_POST => true));
+        }
+
+        // Send an email to the author of the post.
+        if (!email_to_user($user, $from, $subject, $message, $messagehtml)) {
+            print_error(get_string('emailerror', 'forumng'));
+        }
+
+        // Prepare for copies.
+        $emails = array();
+        $subject = strtoupper(get_string('copy')) . ' - ' . $subject;
+        if ($copyself) {
+            // Send an email copy to the current user, with prefered format.
+            if (!email_to_user($USER, $from, $subject, $message, $messagehtml)) {
+                print_error(get_string('emailerror', 'forumng'));
+            }
+        }
+
+        // Addition of 'Email address of other recipients'.
+        if (!empty($submitted->emailadd)) {
+            $emails = preg_split('~[; ]+~', $submitted->emailadd);
+        }
+
+        // If there are any recipients listed send them an HTML copy.
+        if (!empty($emails[0])) {
+            foreach ($emails as $email) {
+                $fakeuser = (object)array(
+                        'email' => $email,
+                        'mailformat' => 1,
+                        'id' => -1
+                );
+                if (!email_to_user($fakeuser, $from, $subject, '', $messagehtml)) {
+                    print_error(get_string('emailerror', 'forumng'));
+                }
+            }
+        }
+
+        // redirect back to the discussion.
+        redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) . $expandparam);
+    }
+}
+
+// Confirm page. Work out navigation for header
+print $out->header();
+
+// Include forum JS
+$forum->print_js($cm->id, true);
+
+if ($email) {
+    // prepare the object for the get_string
+    $emailmessage = new stdClass;
+    $emailmessage->subject = $post->get_effective_subject(true);
+    $emailmessage->firstname = $USER->firstname;
+    $emailmessage->lastname = $USER->lastname;
+    $emailmessage->course = $COURSE->fullname;
+    $emailmessage->forum = $post->get_forum()->get_name();
+    $emailmessage->deleteurl = $CFG->wwwroot . '/mod/forumng/discuss.php?' .
+            $discussion->get_link_params(mod_forumng::PARAM_PLAIN);
+    $formdata = new stdClass;
+
+    // Use the plain
+    $messagetext = get_string('emailcontentplain', 'forumng', $emailmessage);
+
+    $formdata->message['text'] = $messagetext;
+    $formdata->expand = $expand;
+
+    $mform->set_data($formdata);
+    $mform->display();
+    // output the html for use when JS is enabled
+    echo $out->delete_form_html(get_string('emailcontenthtml', 'forumng', $emailmessage));
+} else {
+    // Show confirm option
+    if ($delete) {
+        $confirmstring = get_string('confirmdelete', 'forumng');
+        if ($post->is_root_post()) {
+            $confirmstring .= ' ' . get_string('confirmdelete_nodiscussion', 'forumng');
+        }
+
+        $deletebutton = new single_button(new moodle_url('/mod/forumng/deletepost.php',
+                        array('p'=>$post->get_id(), 'delete'=>$delete,
+                        'clone'=>$cloneid, 'expand'=>$expand)),
+                        $delete ? get_string('delete') : get_string('undelete', 'forumng'),
+                        'post');
+        $cancelbutton = new single_button(new moodle_url('/mod/forumng/discuss.php',
+                        array('d'=>$discussion->get_id(), 'clone'=>$cloneid, 'expand'=>$expand)),
+                        get_string('cancel'), 'get');
+        if ($USER->id == $post->get_user()->id) {
+            print $out->confirm($confirmstring, $deletebutton, $cancelbutton);
+        } else {
+            print $out->confirm_three_button($confirmstring,
+                    new single_button(new moodle_url('/mod/forumng/deletepost.php',
+                        array('p'=>$post->get_id(), 'delete'=>$delete,
+                        'clone'=>$cloneid, 'email' => 1, 'expand'=>$expand)),
+                        $delete ? get_string('deleteemailpostbutton', 'forumng') :
+                        get_string('undelete', 'forumng'), 'post'),
+                    $deletebutton,
+                    $cancelbutton);
+        }
+    } else {
+        $confirmstring = get_string('confirmundelete', 'forumng');
+        print $out->confirm($confirmstring,
+                new single_button(new moodle_url('/mod/forumng/deletepost.php',
+                    array('p'=>$post->get_id(), 'delete'=>$delete,
+                    'clone'=>$cloneid, 'expand'=>$expand)),
+                    $delete ? get_string('delete') : get_string('undelete', 'forumng'), 'post'),
+                new single_button(new moodle_url('/mod/forumng/discuss.php',
+                    array('d'=>$discussion->get_id(), 'clone'=>$cloneid, 'expand'=>$expand)),
+                    get_string('cancel'), 'get'));
+    }
+
+}
+
+// Print post
+print $post->display(true, array(mod_forumng_post::OPTION_NO_COMMANDS => true,
+        mod_forumng_post::OPTION_SINGLE_POST => true));
+
+// Display footer
+print $out->footer();
diff --git a/mod/forumng/deletepost_form.php b/mod/forumng/deletepost_form.php
new file mode 100644
index 0000000..a0e2984
--- /dev/null
+++ b/mod/forumng/deletepost_form.php
@@ -0,0 +1,81 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Form for sending an email to the author of a post when deleting
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_deletepost_form extends moodleform {
+
+    public function definition() {
+        $mform =& $this->_form;
+
+        $expand = $this->_customdata['expand'];
+
+        // Header.
+        $mform->addElement('header', 'general', get_string('deleteandemail', 'forumng'));
+
+        // Message box.
+        $mform->addElement('editor', 'message',
+                get_string('emailmessage', 'forumng'), array('size'=>'64', 'id' => 'id_forumng_delete_msg'));
+        $mform->setType('message', PARAM_RAW);
+        $mform->addRule('message', null, 'required', null, 'client');
+
+        // Send a copy to self.
+        $mform->addElement('checkbox', 'copyself', get_string('copytoself', 'forumng'));
+
+        // Adding optional text field 'Email address of other recipients'.
+        $mform->addElement('text', 'emailadd', get_string('extra_emails', 'forumng'),
+                array('size' => '48'));
+        $mform->addHelpButton('emailadd', 'extra_emails', 'forumng');
+        $mform->setType('emailadd', PARAM_RAW);
+
+        // Include a copy of the post.
+        $mform->addElement('checkbox', 'includepost', get_string('includepost', 'forumng'));
+
+        // Keep the expand status.
+        $mform->addElement('hidden', 'expand', $expand);
+        $mform->setType('expand', PARAM_INT);
+
+        // add some buttons
+        $this->add_action_buttons(true, get_string('sendanddelete', 'forumng'));
+
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        if (!empty($data['emailadd'])) {
+            $emails = preg_split('~[; ]+~', $data['emailadd']);
+            if (count($emails) < 1) {
+                $errors['emailadd'] = get_string('invalidemails', 'forumng');
+            } else {
+                foreach ($emails as $email) {
+                    if (!validate_email($email)) {
+                        $errors['emailadd'] = get_string('invalidemails', 'forumng');
+                        break;
+                    }
+                }
+            }
+        }
+        return $errors;
+    }
+
+}
diff --git a/mod/forumng/dev/makebig.php b/mod/forumng/dev/makebig.php
new file mode 100644
index 0000000..03a6033
--- /dev/null
+++ b/mod/forumng/dev/makebig.php
@@ -0,0 +1,466 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Developer test tool to construct a big forum. Maybe doesn't work.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Note: As a development test tool, this script is English-only.
+require_once('../../../config.php');
+require_once($CFG->libdir.'/formslib.php');
+require_once($CFG->dirroot.'/mod/forumng/lib.php');
+require_once($CFG->dirroot.'/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot.'/mod/forumng/mod_forumng_exception.php');
+require_login();
+require_capability('moodle/site:config', context_system::instance());
+if (!debugging('', DEBUG_DEVELOPER)) {
+    throw new moodle_exception('Available only in debug mode');
+}
+
+/**
+ * Returns random numbers with some kind of nice distribution that is mainly
+ * low then tails off, but ends up averaging at the mean. The number is never
+ * less than 1.
+ * @param int $mean Mean value
+ * @return int Random number
+ */
+function my_random($mean) {
+    $mean-=0.5; // Because we add 1, but also do floor. Note that I tested this
+                // function over a fair number of runs; it appears to get
+                // the correct mean.
+    return floor((mt_rand(0, 1000)/1000) * (mt_rand(0, 1000)/1000) * 4.0 * $mean)+1;
+}
+
+/**
+ * Returns true if a percentage chance comes off.
+ * @param float $percent Percentage value. May be floating-point.
+ * @return bool True if the chance hits.
+ */
+function my_random_percentage($percent) {
+    $value = 100.0 * mt_rand() / (mt_getrandmax()+1);
+    return ($value < $percent);
+}
+
+function get_post_text() {
+    // 660 is the current mean number of bytes for a forum post text on Learn.
+    $length = my_random(660);
+    $text = '';
+    for ($i=0; $i < $length; $i++) {
+        $text .= '0';
+        if (my_random_percentage(20)) {
+            $text .= ' ';
+        }
+    }
+    return $text;
+}
+
+function make_post($discussion, &$allposts, &$userids, $ratingpercent) {
+    // Make reply
+    static $index = 0;
+    $index++;
+    $replyto = $allposts[rand(0, count($allposts)-1)];
+    $newpostid = $replyto->reply(
+        my_random_percentage(25) ? 'Reply '.$index : null,
+        get_post_text(), FORMAT_HTML,
+        array(), false, $userids[mt_rand(0, count($userids)-1)], false);
+    $newpost = mod_forumng_post::get_from_id($newpostid, mod_forumng::CLONE_DIRECT);
+    $allposts[] = $newpost;
+
+    // Add ratings
+    for ($i=0; $i<count($userids); $i++) {
+        if (my_random_percentage($ratingpercent)) {
+            $newpost->rate(2, $userids[$i]);
+        }
+    }
+}
+
+function make_discussion($forum, $posts, $readusers, &$userids, $ratingpercent) {
+    set_time_limit(200);
+
+    // Make discussion
+    static $index = 0;
+    $index++;
+    list($discussionid, $postid) = $forum->create_discussion(null,
+        'Discussion '.$index, get_post_text(), FORMAT_HTML, array(), false,
+        0, 0, false, false, $userids[mt_rand(0, count($userids)-1)], false);
+    $discussion = mod_forumng_discussion::get_from_id($discussionid, mod_forumng::CLONE_DIRECT);
+
+    // Make posts
+    $count = my_random($posts)-1;
+    $allposts = array($discussion->get_root_post());
+    for ($i=0; $i < $count; $i++) {
+        make_post($discussion, $allposts, $userids, $ratingpercent);
+    }
+
+    // Mark the discussion read if requested
+    if ($readusers > 0) {
+        $now = time();
+        for ($i = 0; $i < $readusers; $i++) {
+            $discussion->mark_read($now, $userids[$i]);
+        }
+    }
+
+    // Progress
+    print '.';
+}
+
+function make_forumng($courseid, $starttime, $discussions, $posts,
+    $readpercent, $readusers, &$userids, $subscribepercent, $ratingpercent) {
+    global $DB;
+    $section = $DB->get_record('course_sections', array('course' => $courseid, 'section' => 0),
+            '*', MUST_EXIST);
+
+    $transaction = $DB->start_delegated_transaction();
+
+    // Create course modules record
+    $mod = new stdClass;
+    $mod->course = $courseid;
+    $mod->module = $DB->get_field('modules', 'id', array('name' => 'forumng'));
+    $mod->section = $section->section; // was $section->id; logical but incorrect!
+    $mod->added = $starttime;
+    $mod->visible = 1;
+
+    // course_modules and course_sections each contain a reference
+    // to each other, so we have to update one of them twice.
+    // Note: This is unbelievable!!! $mod->section MUST BE section number (not id)
+    //       Adds course_module with section number, add_mod_to_section uses
+    //       section number (& course id) to get section id, which is returned
+    //       course module record then updated to replace section number by id!!!
+    if (! $mod->coursemodule = add_course_module($mod) ) {
+        throw new Exception("Could not add a new course module");
+    }
+
+    if (!$sectionid = course_add_cm_to_section($mod->course, $mod->coursemodule, $mod->section)) {
+        throw new Exception("Could not add the new course module to that section");
+    }
+
+    // Create forum object
+    $forumng = new stdClass;
+    static $index = 0;
+    $index++;
+    $forumng->name = 'Perf test '.date('Ymd H:j', $starttime).' '.$index;
+    $forumng->course = $courseid;
+    $forumng->section = $section;
+    $forumng->cmidnumber = $mod->coursemodule;
+
+    if (!($forumng->id = forumng_add_instance($forumng))) {
+        throw new dml_exception('Failed to add forum');
+    }
+
+    // Mark cm object as owning it
+    $updatemod = new stdClass;
+    $updatemod->id = $mod->coursemodule;
+    $updatemod->instance = $forumng->id;
+    $updatemod->section = $sectionid;
+    $DB->update_record('course_modules', $updatemod);
+
+    // Make it be random users included in the forum
+    shuffle($userids);
+
+    // OK, forum is created. Let's make discussions
+    $forum = mod_forumng::get_from_id($forumng->id, mod_forumng::CLONE_DIRECT);
+    $count = my_random($discussions);
+    for ($i=0; $i < $count; $i++) {
+        make_discussion($forum, $posts,
+            my_random_percentage($readpercent) ? $readusers : 0, $userids,
+            $ratingpercent);
+    }
+
+    // Add subscribe users
+    set_time_limit(200);
+    for ($i=0; $i < $readusers; $i++) {
+        if (my_random_percentage($subscribepercent)) {
+            $forum->subscribe($userids[$i]);
+        }
+    }
+
+    $transaction->allow_commit();
+}
+
+function wipe_forumng($cm) {
+    global $DB;
+    $transaction = $DB->start_delegated_transaction();
+
+    // Tell forum to delete itself
+    if (!forumng_delete_instance($cm->instance)) {
+        throw new Exception("Could not delete forum instance {$cm->instance}");
+    }
+
+    // Delete course_module entry
+    $DB->delete_records('course_modules', array('id' => $cm->id));
+
+    // Update section
+    if (!delete_mod_from_section($cm->id, $cm->section)) {
+        throw new Exception("Could not delete module {$cm->id} from section {$cm->section}");
+    }
+
+    $transaction->allow_commit();
+}
+
+function make_forums($courseid, $count, $discussions, $posts,
+    $readpercent, $readusers, $subscribepercent, $ratingpercent) {
+    global $DB;
+
+    // Require course to exist
+    $DB->get_record('course', array('id'=>$courseid), '*', MUST_EXIST);
+
+    // Get all course users
+    $context = context_course::instance($courseid);
+    $rs = $DB->get_recordset_sql("
+SELECT
+    DISTINCT userid
+FROM
+    {role_assignments}
+WHERE
+    contextid = ?", array($context->id));
+    $userids = array();
+    foreach ($rs as $record) {
+        $userids[] = $record->userid;
+    }
+    $rs->close();
+    if ($readusers > count($userids)) {
+        throw new moodle_exception('error_makebig', 'forumng', '', (object)array(
+                'users' => count($userids), 'readusers' => $readusers));
+    }
+
+    // Create forums
+    print "<h3>Making $count forums</h3><pre>";
+    $time = time();
+    for ($i=0; $i < $count; $i++) {
+        make_forumng($courseid, $time, $discussions, $posts,
+            $readpercent, $readusers, $userids, $subscribepercent,
+            $ratingpercent);
+        print 'X';
+        if (($i+1)%20==0) {
+            print " (".($i+1).")\n";
+        }
+        flush();
+    }
+    print "</pre>";
+
+    rebuild_course_cache($courseid);
+}
+
+function wipe_forums($courseid) {
+    global $DB;
+
+    // Get list of course-module IDs
+    $forumngid = $DB->get_field('modules', 'id', array('name' => 'forumng'));
+    $cms = $DB->get_records_sql("
+SELECT
+    id, course, instance, section
+FROM
+    {course_modules} cm
+WHERE
+    cm.module = ? AND cm.course = ?", array($forumngid, $courseid));
+
+    $count = count($cms);
+    print "<h3>Wiping $count forums</h3><pre>";
+    $time = time();
+    $i = 0;
+    foreach ($cms as $cm) {
+        wipe_forumng($cm);
+        print '.';
+        if (($i+1)%20==0) {
+            print " (".($i+1).")\n";
+        }
+        flush();
+        $i++;
+    }
+    print "</pre>";
+
+    rebuild_course_cache($courseid);
+}
+
+function make_student($courseid, $username) {
+    global $DB;
+
+    // Create user record
+    $user = new StdClass;
+    $user->username = $username;
+    $user->lastname = $username;
+    $user->email = $username . '@somewhere';
+    $user->emailstop = 1;
+    $user->firstname = 'Ms';
+    $user->auth = 'manual';
+    $user->password = md5('apple');
+    $user->id = $DB->insert_record('user', $user);
+
+    // Assign to course
+    $context = context_course::instance($courseid);
+    static $roleid;
+    if (!$roleid) {
+        $roleid = $DB->get_field('role', 'id', array('shortname' => 'student'));
+    }
+    if (!role_assign($roleid, $user->id, 0, $context->id)) {
+        throw new Exception('Failed to assign role');
+    }
+}
+
+function make_students($courseid, $count) {
+    global $DB;
+    print "<h3>Making $count students</h3><pre>";
+    $time = time();
+    $transaction = $DB->start_delegated_transaction();
+    for ($i=0; $i < $count; $i++) {
+        make_student($courseid, $time.'_'.$i);
+        print '.';
+        if (($i+1)%20==0) {
+            print " (".($i+1).")\n";
+        }
+        flush();
+    }
+    $transaction->allow_commit();
+    print "</pre>";
+
+}
+
+class make_big_form extends moodleform {
+    public function definition() {
+        global $CFG;
+
+        $mform =& $this->_form;
+
+        $mform->addElement('header', 'h1', 'Test course');
+
+        $mform->addElement('text', 'course', 'Course ID');
+        $mform->setType('course', PARAM_INT);
+
+        $mform->addElement('header', 'h1', 'Create forums');
+
+        $mform->addElement('text', 'forums', 'Number of forums');
+        $mform->setType('forums', PARAM_INT);
+        $mform->setDefault('forums', 10);
+
+        $mform->addElement('text', 'readusers', 'Number of users reading each forum');
+        $mform->setType('readusers', PARAM_INT);
+        $mform->setDefault('readusers', 1000);
+
+        $mform->addElement('text', 'discussions', 'Number of discussions per forum (avg)');
+        $mform->setType('discussions', PARAM_FLOAT);
+        $mform->setDefault('discussions', 100);
+
+        $mform->addElement('text', 'posts', 'Number of posts per discussion (avg)');
+        $mform->setType('posts', PARAM_FLOAT);
+        $mform->setDefault('posts', 10);
+
+        $mform->addElement('text', 'readpercent',
+                '% of recent discussions (that include read data)');
+        $mform->setType('readpercent', PARAM_FLOAT);
+        $mform->setDefault('readpercent', 10);
+
+        $mform->addElement('text', 'subscribepercent', '% of users who subscribe');
+        $mform->setType('subscribepercent', PARAM_FLOAT);
+        $mform->setDefault('subscribepercent', 50);
+
+        $mform->addElement('text', 'ratingpercent', '% chance of each user rating each post');
+        $mform->setType('ratingpercent', PARAM_FLOAT);
+        $mform->setDefault('ratingpercent', 0.1);
+
+        $mform->addElement('submit', 'submitcreate', 'Create forums');
+
+        $mform->addElement('header', 'h2', 'Wipe all forums');
+
+        $mform->addElement('text', 'confirm', 'Are you sure? (Type yes)');
+        $mform->setType('text', PARAM_ALPHA);
+
+        $mform->addElement('submit', 'submitwipe', 'Wipe forums');
+
+        $mform->addElement('header', 'h2', 'Create course students');
+
+        $mform->addElement('text', 'students', 'Number of students to create');
+        $mform->setType('students', PARAM_INT);
+        $mform->setDefault('students', 100);
+
+        $mform->addElement('submit', 'submitstudents', 'Make new students');
+    }
+}
+$mform = new make_big_form();
+
+$PAGE->set_heading('Make big forums');
+$PAGE->set_title('Make big forums');
+echo $OUTPUT->header();
+
+// Standard moodleform if statement.
+if ($mform->is_cancelled()) {
+
+    // Don't think this will ever happen, but do nothing.
+
+} else if ($fromform = $mform->get_data()) {
+
+    if (isset($fromform->submitcreate)) {
+        make_forums($fromform->course, $fromform->forums,
+            $fromform->discussions, $fromform->posts, $fromform->readpercent,
+            $fromform->readusers, $fromform->subscribepercent,
+            $fromform->ratingpercent);
+            // TODO Ratings aren't done yet!!
+    } else if (isset($fromform->submitwipe)) {
+        if (required_param('confirm', PARAM_ALPHA) != 'yes') {
+            throw new moodle_exception('You didn\'t type yes to confirm the wipe.');
+        }
+        wipe_forums($fromform->course);
+    } else if (isset($fromform->submitstudents)) {
+        make_students($fromform->course, $fromform->students);
+    }
+}
+
+print '<h3>Current counts</h3><ul>';
+print '<li>Forums: <strong>' . $DB->count_records('forumng') . '</strong></li>';
+print '<li>Discussions: <strong>' . $DB->count_records('forumng_discussions') . '</strong></li>';
+print '<li>Posts: <strong>' . $DB->count_records('forumng_posts') . '</strong></li>';
+print '<li>User/discussion read data: <strong>' .
+        $DB->count_records('forumng_read') . '</strong></li>';
+print '<li>User/forum subscriptions: <strong>' .
+        $DB->count_records('forumng_subscriptions') . '</strong></li>';
+print '<li>User/post ratings: <strong>' .
+        $DB->count_records('forumng_ratings') . '</strong></li>';
+print '</ul>';
+
+function show_maximum_per($label, $of, $per, $url) {
+    global $CFG, $DB;
+
+    $results = $DB->get_records_sql("
+SELECT $per AS field, COUNT(1) AS count
+FROM {" . $of . "}
+GROUP BY $per
+ORDER BY 2 DESC", 0, 1);
+    $result = $results ? reset($results)
+            : (object)array('field'=>0, 'count'=>0);
+
+    $displayurl = str_replace('$$', $result->field, $url);
+
+    print "<li>$label: <strong>$result->count</strong>
+            (<a href='$CFG->wwwroot$displayurl'>id=$result->field</a>)</li>";
+}
+
+print '<h3>Maximums</h3><ul>';
+show_maximum_per('Forums per course', 'forumng', 'course', '/course/view.php?id=$$');
+show_maximum_per('Discussions per forum', 'forumng_discussions', 'forumngid',
+        '/mod/forumng/view.php?id=$$');
+show_maximum_per('Subscriptions per forum', 'forumng_subscriptions',
+        'forumngid', '/mod/forumng/view.php?id=$$');
+show_maximum_per('Posts per discussion', 'forumng_posts', 'discussionid',
+        '/mod/forumng/discuss.php?id=$$');
+print '</ul>';
+
+
+$mform->display();
+
+print_footer();
diff --git a/mod/forumng/discuss.php b/mod/forumng/discuss.php
new file mode 100644
index 0000000..231724c
--- /dev/null
+++ b/mod/forumng/discuss.php
@@ -0,0 +1,119 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Show discussion page.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Require discussion parameter here. Other parameters may be required in forum
+// type.
+$discussionid = required_param('d', PARAM_INT);
+$pageparams = array('d' => $discussionid);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone' ]= $cloneid;
+}
+
+// Construct discussion variable (will check id is valid)
+// Retrieve new copy of discussion from database, but store it in cache
+// for further use.
+$discussion = mod_forumng_discussion::get_from_id($discussionid, $cloneid,
+        0, false, true);
+$forum = $discussion->get_forum();
+$course = $forum->get_course();
+
+$cm = $forum->get_course_module();
+$context = $forum->get_context();
+
+$draftid = optional_param('draft', 0, PARAM_INT);
+if ($draftid) {
+    $pageparams['draft'] = $draftid;
+    $draft = mod_forumng_draft::get_from_id($draftid);
+    if (!$draft->is_reply() ||
+        $draft->get_discussion_id() != $discussionid) {
+        print_error('draft_mismatch', 'forumng', $forum->get_url(mod_forumng::PARAM_HTML));
+    }
+    $root = $discussion->get_root_post();
+    $inreplyto = $root->find_child($draft->get_parent_post_id(), false);
+    if (!$inreplyto || !$inreplyto->can_reply($whynot) || !$discussion->can_view()) {
+        if (!$whynot) {
+            $whynot = 'reply_missing';
+        }
+        print_error('draft_cannotreply', 'forumng', $forum->get_url(mod_forumng::PARAM_HTML),
+            get_string($whynot, 'forumng'));
+    }
+    $inreplyto->force_expand();
+}
+
+// Check that discussion can be viewed [Handles all other permissions]
+$discussion->require_view();
+
+// Atom header meta tag
+$feedtype = $forum->get_effective_feed_option();
+if ($feedtype == mod_forumng::FEEDTYPE_ALL_POSTS) {
+    $atomurl = $discussion->get_feed_url(mod_forumng::FEEDFORMAT_ATOM);
+    $meta = '<link rel="alternate" type="application/atom+xml" ' .
+      'title="Atom feed" href="' . htmlspecialchars($atomurl) . '" />';
+} else {
+    $meta = '';
+}
+
+// Display header
+$url = new moodle_url('/mod/forumng/discuss.php', $pageparams);
+$pagename = shorten_text(s($discussion->get_subject()));
+if (!defined('BEHAT_SITE_RUNNING')) {
+    $PAGE->set_pagelayout('base');
+}
+$out = $forum->init_page($url, $pagename);
+print $out->header();
+
+// Include forum JS
+$forum->print_js($cm->id, true);
+
+// If replying with a draft, we stick some JSON stuff in the page so that the draft
+// can be retrieved.
+if ($draftid) {
+    print $draft->prepare_edit_js($forum);
+}
+
+// Print main div
+print '<div id="forumng-main" class="forumng-discuss forumng-nojs' .
+    ($discussion->is_deleted() ? ' forumng-deleted-discussion' : '' ) . '">';
+print $out->render_switch_link($forum);
+print $OUTPUT->skip_link_target();
+
+// Get forum type to display main part of page
+$type = $forum->get_type();
+$type->print_discussion_page($discussion);
+
+print '</div>';
+
+if ($bad = $PAGE->devicetypeinuse == 'legacy') {
+    print '<div class="forumng-bad-browser">'.
+        get_string('badbrowser', 'forumng', $bad) . '</div>';
+}
+
+// Log request
+$discussion->log('view discussion');
+
+// Display footer
+print $out->footer();
diff --git a/mod/forumng/editpost.php b/mod/forumng/editpost.php
new file mode 100644
index 0000000..f144b6f
--- /dev/null
+++ b/mod/forumng/editpost.php
@@ -0,0 +1,796 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Script for editing a post or discussion. Has many variants such as new
+ * post, new discussion, reply, edit post, save draft post, continue existing
+ * draft post.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Annoyingly it is necessary to define AJAX_SCRIPT before config.php runs
+// (Moodle generally assumes you will use different scripts for AJAX but we
+// want to use the same one)
+if (isset($_REQUEST['ajax'])) {
+    define('AJAX_SCRIPT', true);
+}
+require_once('../../config.php');
+require_once('mod_forumng.php');
+require_once($CFG->dirroot . '/tag/lib.php');
+
+$pageparams = array();
+
+// Get AJAX parameter
+$ajax = optional_param('ajax', 0, PARAM_INT);
+if ($ajax) {
+    $pageparams['ajax'] = $ajax;
+}
+$iframe = optional_param('iframe', 0, PARAM_INT);
+if ($iframe) {
+    $pageparams['iframe'] = $iframe;
+}
+
+function finish($postid, $cloneid, $url, $fromform, $ajaxdata='', $iframeredirect=false) {
+    global $ajax, $iframe;
+    if ($ajax) {
+        if ($ajaxdata) {
+            // Print AJAX data if specified
+            header('Content-Type: text/plain');
+            print $ajaxdata;
+            exit;
+        } else {
+            // Default otherwise is to print post
+            mod_forumng_post::print_for_ajax_and_exit($postid, $cloneid,
+                array(mod_forumng_post::OPTION_DISCUSSION_SUBJECT => true));
+        }
+    }
+    if ($iframe) {
+        if ($iframeredirect) {
+            // Still redirect, even though it's in an iframe.
+            redirect($url . '&iframe=1');
+        } else {
+            // Do not redirect, just output new post.
+            mod_forumng_post::print_for_iframe_and_exit($postid, $cloneid,
+                array(mod_forumng_post::OPTION_DISCUSSION_SUBJECT => true));
+        }
+    }
+
+    redirect($url);
+}
+
+function send_edit_email($formdata, $post) {
+    global $USER, $SITE;
+
+    // Set up the email.
+    $user = $post->get_user();
+    $from = $SITE->fullname;
+    $subject = get_string('editedforumpost', 'forumng');
+    $messagetext = $formdata->emailmessage['text'];
+
+    // Send an email to the author of the post, using prefered format.
+    if (!email_to_user($user, $from, $subject, html_to_text($messagetext), $messagetext)) {
+        print_error(get_string('emailerror', 'forumng'));
+    }
+
+    // Prepare for copies.
+    $emails = array();
+    $subject = strtoupper(get_string('copy')) . ' - '. $subject;
+    if (!empty($formdata->emailself)) {
+        // Send an email copy to the current user, using prefered format.
+        if (!email_to_user($USER, $from, $subject, html_to_text($messagetext), $messagetext)) {
+            print_error(get_string('emailerror', 'forumng'));
+        }
+    }
+
+    // Addition of 'Email address of other recipients'.
+    if (!empty($formdata->emailadd)) {
+        $emails = preg_split('~[; ]+~', $formdata->emailadd);
+    }
+
+    // If there are any recipients listed send them a HTML copy.
+    if (!empty($emails[0])) {
+        foreach ($emails as $email) {
+            $fakeuser = (object)array(
+                    'email' => $email,
+                    'mailformat' => 1,
+                    'id' => -1
+            );
+            if (!email_to_user($fakeuser, $from, $subject, '', $messagetext)) {
+                print_error(get_string('emailerror', 'forumng'));
+            }
+        }
+    }
+}
+
+try {
+    // Get type of action/request and check security
+    $isdiscussion = false;
+    $isroot = false;
+    $ispost = false;
+    $edit = false;
+    $islock = false;
+    $cloneid = optional_param('clone', 0, PARAM_INT);
+    if ($cloneid) {
+        $pageparams['clone'] = $cloneid;
+    }
+
+    // Were all posts expanded?
+    $expand = optional_param('expand', 0, PARAM_INT);
+    $expandparam = $expand ? '&expand=1' : '';
+
+    // See if this is a draft post
+    $draft = null;
+    $replytoid = 0;
+    $cmid = 0;
+    $groupid = 0;
+    $forum = null;
+    $post = null;
+    $tags = null;
+    $forumtags = null;
+    if ($draftid = optional_param('draft', 0, PARAM_INT)) {
+        $pageparams['draft'] = $draftid;
+        $draft = mod_forumng_draft::get_from_id($draftid);
+
+        // Draft post must be for current user!
+        if ($draft->get_user_id() != $USER->id) {
+            print_error('draft_mismatch', 'forumng');
+        }
+        if ($draft->is_reply()) {
+            $replytoid = $draft->get_parent_post_id();
+        } else {
+            $forum = mod_forumng::get_from_id($draft->get_forumng_id(),
+                optional_param('clone', 0, PARAM_INT));
+            $groupid = $draft->get_group_id();
+        }
+    }
+
+    if ($forum || ($cmid = optional_param('id', 0, PARAM_INT))) {
+        // For new discussions, id (forum cmid) and groupid are required (groupid
+        // may be mod_forumng::ALL_GROUPS if required)
+        if ($forum) {
+            // Came from draft post
+            $cmid = $forum->get_course_module_id();
+        } else {
+            $pageparams['id'] = $cmid;
+            $forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+        }
+        if ($forum->get_group_mode()) {
+            if (!$draft) {
+                $groupid = required_param('group', PARAM_INT);
+                $pageparams['group'] = $groupid;
+            }
+            if ($groupid == 0) {
+                $groupid = mod_forumng::ALL_GROUPS;
+            }
+        } else {
+            $groupid = mod_forumng::NO_GROUPS;
+        }
+
+        $post = null;
+
+        // Handles all access security checks
+        $forum->require_start_discussion($groupid);
+
+        $isdiscussion = true;
+        $isroot = true;
+        $ispost = true;
+        if ($draftid) {
+            $params = array('draft'=>$draftid, 'group'=>$groupid);
+        } else {
+            $params = array('id'=>$cmid, 'group'=>$groupid);
+        }
+        $pagename = get_string('addanewdiscussion', 'forumng');
+        $forumtags = array();
+        foreach ($forum->get_tags_used($groupid, true) as $tag) {
+            $forumtags[core_tag_tag::make_display_name($tag, false)] = core_tag_tag::make_display_name($tag, true);
+        }
+
+    } else if ($replytoid ||
+        ($replytoid = optional_param('replyto', 0, PARAM_INT))) {
+        if ($replytoid) {
+            $pageparams['replyto'] = $replytoid;
+        }
+        // For replies, replyto= (post id of one we're replying to) is required
+        $replyto = mod_forumng_post::get_from_id($replytoid, $cloneid);
+        $discussion = $replyto->get_discussion();
+        $forum = $replyto->get_forum();
+
+        // Handles all access security checks
+        $replyto->require_reply();
+
+        $ispost = true;
+        if ($draftid) {
+            $params = array('draft'=>$draftid);
+        } else {
+            $params = array('replyto'=>$replytoid);
+        }
+        $pagename = get_string('replytopost', 'forumng',
+            $replyto->get_effective_subject(true));
+    } else if ($lock = optional_param('lock', 0, PARAM_INT)) {
+        $pageparams['lock'] = $lock;
+        // For locks, d= discussion id of discussion we're locking
+        $discussionid = required_param('d', PARAM_INT);
+        $discussion = mod_forumng_discussion::get_from_id($discussionid, $cloneid);
+        $replyto = $discussion->get_root_post();
+        $forum = $discussion->get_forum();
+        $discussion->require_edit();
+        if ($discussion->is_locked()) {
+            print_error('edit_locked', 'forumng');
+        }
+
+        $ispost = true;
+        $islock = true;
+        $params = array('d'=>$discussionid, 'lock'=>1);
+        $pagename = get_string('lockdiscussion', 'forumngfeature_lock',
+            $replyto->get_effective_subject(false));
+    } else if ($discussionid = optional_param('d', 0, PARAM_INT)) {
+        $pageparams['d'] = $discussionid;
+        // To edit discussion settings only (not the standard post settings
+        // such as subject, which everyone can edit), use d (discussion id)
+        $discussion = mod_forumng_discussion::get_from_id($discussionid, $cloneid);
+        $post = $discussion->get_root_post();
+        $forum = $discussion->get_forum();
+        $discussion->require_edit();
+
+        $isdiscussion = true;
+        $edit = true;
+        $params = array('d'=>$discussionid);
+        $pagename = get_string('editdiscussionoptions', 'forumng',
+            $post->get_effective_subject(false));
+        $tags = $discussion->get_tags(true);
+        $forumtags = array();
+        foreach ($forum->get_tags_used($discussion->get_group_id(), true) as $tag) {
+            $forumtags[core_tag_tag::make_display_name($tag, false)] = core_tag_tag::make_display_name($tag, true);
+        }
+    } else {
+        // To edit existing posts, p (forum post id) is required
+        $postid = required_param('p', PARAM_INT);
+        $pageparams['p'] = $postid;
+        $post = mod_forumng_post::get_from_id($postid, $cloneid);
+        $discussion = $post->get_discussion();
+        $forum = $post->get_forum();
+
+        // Handles all access security checks
+        $post->require_edit();
+
+        $isroot = $post->is_root_post();
+        $ispost = true;
+        $edit = true;
+        $params = array('p'=>$postid);
+        $pagename = get_string('editpost', 'forumng',
+            $post->get_effective_subject(true));
+    }
+
+    // Get other useful variables (convenience)
+    $course = $forum->get_course();
+    $cm = $forum->get_course_module();
+    $filecontext = $forum->get_context(true); // All files stored in real forum, if this is clone
+    $fileoptions = array('subdirs'=>false, 'maxbytes'=>$forum->get_max_bytes());
+
+    // Set up basic page things (needed for form)
+    $PAGE->set_context($forum->get_context());
+    $PAGE->set_cm($cm, $course);
+    $PAGE->set_url(new moodle_url('/mod/forumng/editpost.php', $pageparams));
+    if (defined('BEHAT_SITE_RUNNING')) {
+        if ($iframe){
+            $PAGE->set_pagelayout('embedded');
+        }
+    } else {
+        $PAGE->set_pagelayout($iframe ? 'embedded' : 'base');
+    }
+    if ($iframe) {
+        $PAGE->add_body_class('forumng-iframe');
+    }
+
+    // See if this is a save action or a form view
+    require_once('editpost_form.php');
+    if ($cloneid) {
+        // Clone parameter is required for all actions
+        $params['clone'] = $cloneid;
+    }
+    // Iframe parameter always available.
+    if ($iframe) {
+        $params['iframe'] = 1;
+    }
+    // Expand parameter always available
+    $params['expand'] = $expand;
+    $mform = new mod_forumng_editpost_form('editpost.php',
+        array('params'=>$params, 'isdiscussion'=>$isdiscussion,
+            'forum'=>$forum, 'edit'=>$edit, 'ispost'=>$ispost, 'islock'=>$islock,
+            'post'=>isset($post) ? $post : null, 'isroot'=>$isroot,
+            'iframe' => $iframe ? true : false,
+            'timelimit' => $ispost && $edit && !$post->can_ignore_edit_time_limit()
+                ? $post->get_edit_time_limit() : 0,
+            'draft' => $draft, 'tags' => $tags, 'forumtags' => $forumtags));
+
+    if (is_object($post)) {
+        // Not a new discussion/post so we are editing a pre-existing post.
+        $formdata = new stdClass();
+        // Use the html message.
+        $discussion = $post->get_discussion();
+        // Prepare the object for the get_string.
+        $emailmessage = new stdClass();
+        $emailmessage->subject = $post->get_effective_subject(true);
+        $emailmessage->editinguser = fullname($USER);
+        $emailmessage->course = $COURSE->fullname;
+        $emailmessage->forum = $forum->get_name();
+        $emailmessage->editurl = $CFG->wwwroot . '/mod/forumng/discuss.php?'
+                . $discussion->get_link_params(mod_forumng::PARAM_PLAIN)
+                . '#p' . $post->get_id();
+        // Use the html text.
+        $formdata->emailmessage['text'] = get_string('emaileditedcontenthtml', 'forumng', $emailmessage);
+        $mform->set_data($formdata);
+    }
+
+    if ($mform->is_cancelled()) {
+        if ($iframe) {
+            // If we got to cancel in an iframe do js sucess code so iframe closes.
+            finish(0, $cloneid, '', null, null, false);
+        }
+        if ($edit) {
+            redirect('discuss.php?' .
+                    $post->get_discussion()->get_link_params(mod_forumng::PARAM_PLAIN) .
+                    $expandparam);
+        } else if ($islock || $replytoid) {
+            redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) .
+                    $expandparam);
+        } else {
+            redirect('view.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+        }
+    } else if ($fromform = $mform->get_data()) {
+        // Set up values which might not be defined
+        if ($ispost) {
+            // Blank subject counts as null
+            if (trim($fromform->subject)==='') {
+                $fromform->subject = null;
+            }
+
+            if (!isset($fromform->mailnow)) {
+                $fromform->mailnow = false;
+            }
+
+            if (!isset($fromform->setimportant)) {
+                $fromform->setimportant = false;
+            }
+        }
+        if ($isdiscussion) {
+            if (!isset($fromform->timestart)) {
+                $fromform->timestart = 0;
+            }
+            if (!isset($fromform->timeend)) {
+                $fromform->timeend = 0;
+            }
+            if (!isset($fromform->sticky)) {
+                $fromform->sticky = false;
+            }
+            if (!isset($fromform->tags)) {
+                $fromform->tags = null;
+            }
+            // The form time is midnight, but because we want it to be
+            // inclusive, set it to 23:59:59 on that day.
+            if ($fromform->timeend) {
+                $fromform->timeend = strtotime('23:59:59', $fromform->timeend);
+            }
+        }
+        if (!isset($fromform->asmoderator)) {
+            $fromform->asmoderator = 0;
+        }
+        $hasattachments = false;
+        if (isset($fromform->attachments)) {
+            $usercontext = context_user::instance($USER->id);
+            $fs = get_file_storage();
+            $hasattachments = count($fs->get_area_files($usercontext->id, 'user', 'draft',
+                    $fromform->attachments, 'id'));
+        }
+
+        $savedraft = isset($fromform->savedraft);
+        if ($savedraft) {
+            $options = new stdClass;
+            if (isset($fromform->timestart)) {
+                $options->timestart = $fromform->timestart;
+            }
+            if (isset($fromform->timeend)) {
+                $options->timeend = $fromform->timeend;
+            }
+            if (isset($fromform->sticky)) {
+                $options->sticky = $fromform->sticky;
+            }
+            if (isset($fromform->asmoderator)) {
+                $options->asmoderator = $fromform->asmoderator;
+            }
+            if (isset($fromform->mailnow)) {
+                $options->mailnow = $fromform->mailnow;
+            }
+            if (isset($fromform->setimportant)) {
+                $options->setimportant = $fromform->setimportant;
+            }
+            $date = get_string('draftexists', 'forumng',
+                mod_forumng_utils::display_date(time()));
+            if ($draft) {
+                // This is an update of the existing draft
+                $transaction = $DB->start_delegated_transaction();
+
+                // Save any changes to files
+                if (isset($fromform->attachments)) {
+                    file_save_draft_area_files($fromform->attachments, $filecontext->id, 'mod_forumng',
+                            'draft', $draft->get_id(), $fileoptions);
+                }
+                if (!empty($fromform->message['itemid'])) {
+                    $fromform->message['text'] = file_save_draft_area_files($fromform->message['itemid'],
+                            $filecontext->id, 'mod_forumng', 'draftmessage',
+                            $draft->get_id(), $fileoptions, $fromform->message['text']);
+                }
+
+                // Update the draft itself
+                $draft->update(
+                    $fromform->subject, $fromform->message['text'], $fromform->message['format'],
+                    $hasattachments,
+                    $isdiscussion && $fromform->group ? $fromform->group : null, $options);
+
+                // Redirect to edit it again
+                $transaction->allow_commit();
+                finish(0, $cloneid, 'editpost.php?draft=' . $draft->get_id() .
+                        $forum->get_clone_param(mod_forumng::PARAM_PLAIN) .
+                        $expandparam, $fromform, $draft->get_id() . ':' . $date, true);
+            } else {
+                // This is a new draft
+                $transaction = $DB->start_delegated_transaction();
+
+                // Save the draft
+                $newdraftid = mod_forumng_draft::save_new(
+                    $forum,
+                    $isdiscussion ? $groupid : null,
+                    $replytoid ? $replytoid : null,
+                    $fromform->subject,
+                    $fromform->message['text'], $fromform->message['format'],
+                    $hasattachments, $options);
+
+                // Save any attachments
+                if (isset($fromform->attachments)) {
+                    file_save_draft_area_files($fromform->attachments, $filecontext->id, 'mod_forumng',
+                            'draft', $newdraftid, $fileoptions);
+                }
+                if (!empty($fromform->message['itemid'])) {
+                    $newtext = file_save_draft_area_files($fromform->message['itemid'],
+                            $filecontext->id, 'mod_forumng', 'draftmessage', $newdraftid, $fileoptions,
+                            $fromform->message['text']);
+                    if ($newtext !== $fromform->message['text']) {
+                        mod_forumng_draft::update_message_for_files($newdraftid, $newtext);
+                    }
+                }
+
+                // Redirect to edit it again
+                $transaction->allow_commit();
+                finish(0, $cloneid, 'editpost.php?draft=' . $newdraftid .
+                        $forum->get_clone_param(mod_forumng::PARAM_PLAIN) .
+                        $expandparam, $fromform, $newdraftid . ':' . $date, true);
+            }
+        } else if (!$edit) {
+            // Check the random number is unique in session
+            $random = optional_param('random', 0, PARAM_INT);
+            if ($random) {
+                if (!isset($SESSION->forumng_createdrandoms)) {
+                    $SESSION->forumng_createdrandoms = array();
+                }
+                $now = time();
+                foreach ($SESSION->forumng_createdrandoms as $r => $then) {
+                    // Since this is meant to stop you clicking twice quickly,
+                    // expire anything older than 1 minute
+                    if ($then < $now - 60) {
+                        unset($SESSION->forumng_createdrandoms[$r]);
+                    }
+                }
+                if (isset($SESSION->forumng_createdrandoms[$random])) {
+                    print_error('error_duplicate', 'forumng',
+                            $forum->get_url(mod_forumng::PARAM_PLAIN));
+                }
+                $SESSION->forumng_createdrandoms[$random] = $now;
+            }
+
+            // Creating new
+            if ($isdiscussion) {
+                $transaction = $DB->start_delegated_transaction();
+                // Create new discussion
+                list($discussionid, $postid) =
+                    $forum->create_discussion($groupid,
+                            $fromform->subject, $fromform->message['text'],
+                            $fromform->message['format'], $hasattachments, !empty($fromform->mailnow),
+                            $fromform->timestart, $fromform->timeend, false, $fromform->sticky,
+                            0, true, $fromform->asmoderator, $fromform->tags);
+
+                // Save attachments
+                if (isset($fromform->attachments)) {
+                    file_save_draft_area_files($fromform->attachments, $filecontext->id, 'mod_forumng',
+                            'attachment', $postid, $fileoptions);
+                }
+                $newtext = file_save_draft_area_files($fromform->message['itemid'],
+                        $filecontext->id, 'mod_forumng', 'message', $postid, $fileoptions,
+                        $fromform->message['text']);
+                if ($newtext !== $fromform->message['text']) {
+                    mod_forumng_post::update_message_for_files($postid, $newtext);
+                }
+
+                // If there's a draft, delete it
+                if ($draft) {
+                    $draft->delete($filecontext);
+                }
+
+                // Redirect to view discussion
+                $transaction->allow_commit();
+                finish($postid, $cloneid, 'discuss.php?d=' . $discussionid .
+                        $forum->get_clone_param(mod_forumng::PARAM_PLAIN) .
+                        $expandparam, $fromform);
+            } else if ($islock) {
+                // Create a new lock post
+                $transaction = $DB->start_delegated_transaction();
+                $postid = $discussion->lock($fromform->subject, $fromform->message['text'],
+                        $fromform->message['format'], $hasattachments, !empty($fromform->mailnow),
+                        0, true, $fromform->asmoderator);
+
+                // Save attachments
+                if (isset($fromform->attachments)) {
+                    file_save_draft_area_files($fromform->attachments, $filecontext->id, 'mod_forumng',
+                            'attachment', $postid, $fileoptions);
+                }
+                $newtext = file_save_draft_area_files($fromform->message['itemid'],
+                        $filecontext->id, 'mod_forumng', 'message', $postid, $fileoptions,
+                        $fromform->message['text']);
+                if ($newtext !== $fromform->message['text']) {
+                    mod_forumng_post::update_message_for_files($postid, $newtext);
+                }
+
+                // Redirect to view discussion
+                $transaction->allow_commit();
+                finish($postid, $cloneid, 'discuss.php?' .
+                        $replyto->get_discussion()->get_link_params(mod_forumng::PARAM_PLAIN) .
+                        $expandparam, $fromform);
+            } else {
+                // Create a new reply
+                $transaction = $DB->start_delegated_transaction();
+
+                $postid = $replyto->reply($fromform->subject, $fromform->message['text'],
+                        $fromform->message['format'], $hasattachments, !empty($fromform->setimportant),
+                        !empty($fromform->mailnow), 0, true, $fromform->asmoderator);
+
+                // Save attachments
+                if (isset($fromform->attachments)) {
+                    file_save_draft_area_files($fromform->attachments, $filecontext->id, 'mod_forumng',
+                            'attachment', $postid, $fileoptions);
+                }
+                if (!empty($fromform->message['itemid'])) {
+                    $newtext = file_save_draft_area_files($fromform->message['itemid'],
+                            $filecontext->id, 'mod_forumng', 'message', $postid, $fileoptions,
+                            $fromform->message['text']);
+                    if ($newtext !== $fromform->message['text']) {
+                        mod_forumng_post::update_message_for_files($postid, $newtext);
+                    }
+                }
+
+                // If there's a draft, get rid of it
+                if ($draft) {
+                    $draft->delete($filecontext);
+                }
+
+                // Redirect to view discussion
+                $transaction->allow_commit();
+                finish($postid, $cloneid, 'discuss.php?' .
+                        $replyto->get_discussion()->get_link_params(mod_forumng::PARAM_PLAIN) .
+                        $expandparam . '#p' . $postid, $fromform);
+            }
+        } else {
+            // Editing
+
+            // Group changes together
+            $transaction = $DB->start_delegated_transaction();
+
+            // 1. Edit post if applicable
+            if ($ispost) {
+                $gotsubject = $post->edit_start($fromform->subject, $hasattachments,
+                        !empty($fromform->setimportant), !empty($fromform->mailnow),
+                        0, true, $fromform->asmoderator);
+
+                if (isset($fromform->attachments)) {
+                    file_save_draft_area_files($fromform->attachments, $filecontext->id, 'mod_forumng',
+                            'attachment', $post->get_id(), $fileoptions);
+                }
+                // itemid is not present when using text-only editor
+                if (!empty($fromform->message['itemid'])) {
+                    $fromform->message['text'] = file_save_draft_area_files($fromform->message['itemid'],
+                            $filecontext->id, 'mod_forumng', 'message', $postid, $fileoptions,
+                            $fromform->message['text']);
+                }
+
+                $post->edit_finish($fromform->message['text'], $fromform->message['format'],
+                        $gotsubject);
+
+                if (!empty($fromform->emailauthor)) {
+                    send_edit_email($fromform, $post);
+                }
+            }
+
+            // 2. Edit discussion settings if applicable
+            if ($isdiscussion) {
+                $discussion = $post->get_discussion();
+                $groupid = isset($fromform->group) ? $fromform->group
+                    : $discussion->get_group_id();
+                $discussion->edit_settings($groupid, $fromform->timestart,
+                    $fromform->timeend, $discussion->is_locked(),
+                    !empty($fromform->sticky), $fromform->tags);
+            }
+
+            // Redirect to view discussion
+            $transaction->allow_commit();
+            finish($post->get_id(), $cloneid, 'discuss.php?' .
+                $post->get_discussion()->get_link_params(mod_forumng::PARAM_PLAIN) .
+                $expandparam . '#p' . $post->get_id(),
+                $fromform);
+        }
+
+    } else {
+        if ($ajax) {
+            // If this is an AJAX request we can't go printing the form, this
+            // must be an error
+            header('Content-Type: text/plain', true, 500);
+            print 'Form redisplay attempt';
+            exit;
+        }
+        $navigation = array();
+
+        // Include link to discussion except when creating new discussion
+        if (!$isdiscussion || $edit) {
+            $PAGE->navbar->add(shorten_text(s($discussion->get_subject())),
+                    $discussion->get_url(mod_forumng::PARAM_HTML));
+        }
+        $PAGE->navbar->add($pagename);
+
+        $buttontext = '';
+
+        $PAGE->set_heading($course->fullname);
+        $PAGE->set_title(format_string($forum->get_name()) . ': ' . $pagename);
+        $PAGE->set_button($buttontext);
+
+        $out = mod_forumng_utils::get_renderer();
+        print $out->header();
+
+        print $out->skip_link_target();
+
+        // If replying, print original post here
+        if (!$isdiscussion && !$edit && !$islock && !$iframe) {
+            print '<div class="forumng-replyto">' .
+                $replyto->display(true,
+                    array(mod_forumng_post::OPTION_NO_COMMANDS=>true,
+                        // Hack, otherwise it requires whole-discussion info
+                        // Should really have a OPTION_SINGLE_POST which would
+                        // have the same effect and be more logical/reusable
+                        mod_forumng_post::OPTION_FIRST_UNREAD=>false)) .
+                '</div>';
+        }
+
+        // If draft has been saved, print that here
+        if ($draft) {
+            print '<div class="forumng-draftexists">'.
+                get_string('draftexists', 'forumng',
+                    mod_forumng_utils::display_date($draft->get_saved())) . '</div>';
+        }
+
+        // Set up initial data
+        $initialvalues = new stdClass;
+        if ($edit) {
+            // Work out initial values for all form fields
+            if ($isdiscussion) {
+                $initialvalues->timestart = $discussion->get_time_start();
+                $initialvalues->timeend = $discussion->get_time_end();
+                $initialvalues->sticky = $discussion->is_sticky() ? 1 : 0;
+                $initialvalues->groupid = $discussion->get_group_id();
+                $groupid = $discussion->get_group_id();
+            }
+            $initialvalues->subject = $post->get_subject();
+            $initialvalues->message = array('text'=>$post->get_raw_message(),
+                    'format'=>$post->get_format());
+            $initialvalues->setimportant = $post->is_important();
+
+            $draftitemid = file_get_submitted_draft_itemid('attachments');
+            file_prepare_draft_area($draftitemid, $filecontext->id, 'mod_forumng',
+                    'attachment', $post->get_id(), $fileoptions);
+            $initialvalues->attachments = $draftitemid;
+            $initialvalues->asmoderator = $post->get_asmoderator();
+
+            $messagedraftitemid = file_get_submitted_draft_itemid('message');
+            $initialvalues->message['text'] = file_prepare_draft_area($messagedraftitemid,
+                    $filecontext->id, 'mod_forumng', 'message', $post->get_id(), $fileoptions,
+                    $initialvalues->message['text']);
+            $initialvalues->message['itemid'] = $messagedraftitemid;
+        }
+        if ($draft) {
+            $initialvalues->subject = $draft->get_subject();
+            $initialvalues->message = array('text'=>$draft->get_raw_message(),
+                    'format'=>$draft->get_format());
+            if ($isdiscussion) {
+                $initialvalues->groupid = $draft->get_group_id();
+            }
+            if ($options = $draft->get_options()) {
+                if (isset($options->timestart)) {
+                    $initialvalues->timestart = $options->timestart;
+                }
+                if (isset($options->timeend)) {
+                    $initialvalues->timeend = $options->timeend;
+                }
+                if (isset($options->sticky)) {
+                    $initialvalues->sticky = $options->sticky;
+                }
+                if (isset($options->mailnow)) {
+                    $initialvalues->mailnow = $options->mailnow;
+                }
+                if (isset($options->setimportant)) {
+                    $initialvalues->setimportant = $options->setimportant;
+                }
+            }
+            $draftitemid = file_get_submitted_draft_itemid('attachments');
+            file_prepare_draft_area($draftitemid, $filecontext->id, 'mod_forumng',
+                    'draft', $draft->get_id(), $fileoptions);
+            $initialvalues->attachments = $draftitemid;
+
+            $messagedraftitemid = file_get_submitted_draft_itemid('message');
+            $initialvalues->message = file_prepare_draft_area($messagedraftitemid, $filecontext->id,
+                    'mod_forumng', 'draftmessage', $draft->get_id(), $fileoptions,
+                    $initialvalues->message);
+            $initialvalues->message['itemid'] = $messagedraftitemid;
+        }
+        if ($edit || $draft) {
+            $mform->set_data($initialvalues);
+        } else {
+            $draftitemid = file_get_submitted_draft_itemid('attachments');
+            file_prepare_draft_area($draftitemid, $filecontext->id, 'mod_forumng',
+                    'attachment', null, $fileoptions);
+            $initialvalues->attachments = $draftitemid;
+
+            $messagedraftitemid = file_get_submitted_draft_itemid('message');
+            file_prepare_draft_area($messagedraftitemid, $filecontext->id,
+                    'mod_forumng', 'message', 0, $fileoptions);
+            $initialvalues->message = array('text' => '', 'format' => editors_get_preferred_format(),
+                    'itemid'=> $messagedraftitemid);
+
+            $mform->set_data($initialvalues);
+        }
+
+        // Require JavaScript (form.js).
+        $forum->print_form_js();
+
+        // Print form
+        $mform->display();
+
+        // In iframe mode, inform parent that iframe has loaded.
+        if ($iframe) {
+            $PAGE->requires->js_init_code('window.parent.iframe_has_loaded(window);', true);
+        }
+
+        $PAGE->requires->strings_for_js(array('savefailtitle', 'savefailnetwork', 'numberofdiscussions'), 'forumng');
+        $PAGE->requires->yui_module('moodle-mod_forumng-savecheck', 'M.mod_forumng.savecheck.init',
+                array($forum->get_context()->id));
+
+        // Display footer
+        print $out->footer();
+    }
+} catch (Exception $e) {
+    // Add special entry to log
+    mod_forumng_utils::log_exception($e);
+
+    // Let default exception handler cope with it
+    throw $e;
+}
diff --git a/mod/forumng/editpost_form.php b/mod/forumng/editpost_form.php
new file mode 100644
index 0000000..7d0bf0f
--- /dev/null
+++ b/mod/forumng/editpost_form.php
@@ -0,0 +1,346 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Form for editing a post or discussion.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_editpost_form extends moodleform {
+
+    public function definition() {
+        global $CFG, $USER;
+        $mform = $this->_form;
+        $params = $this->_customdata['params'];
+        $forum = $this->_customdata['forum'];
+        $edit = $this->_customdata['edit'];
+        $isdiscussion = $this->_customdata['isdiscussion'];
+        $isroot = $this->_customdata['isroot'];
+        $ispost = $this->_customdata['ispost'];
+        $islock = $this->_customdata['islock'];
+        $post = $this->_customdata['post'];
+        $timelimit = isset($this->_customdata['timelimit'])
+            ? $this->_customdata['timelimit'] : 0;
+        $draft = isset($this->_customdata['draft'])
+            ? $this->_customdata['draft'] : null;
+        $tags = isset($this->_customdata['tags'])
+            ? $this->_customdata['tags'] : null;
+        $tagoptions = isset($this->_customdata['forumtags'])
+                ? $this->_customdata['forumtags'] : null;
+        // Keeps track of whether we add a group selector box.
+        $groupselector = false;
+
+        if ($ispost) {
+
+            if ($edit && $timelimit) {
+                // Note: We display a safer version of the time limit (30 seconds
+                // sooner), to allow leeway for server to save it.
+                $mform->addElement('static', '', '',
+                    html_writer::tag('div',
+                        get_string('editlimited', 'forumng', userdate($timelimit-30,
+                            get_string('strftimetime', 'langconfig'))),
+                        array('id' => 'id_editlimit')));
+                $mform->addElement('hidden', 'timelimit', $timelimit);
+                $mform->setType('timelimit', PARAM_INT);
+            }
+
+            $quotaleft = $forum->get_remaining_post_quota();
+            if (!$edit && $quotaleft != mod_forumng::QUOTA_DOES_NOT_APPLY && $quotaleft <= 2) {
+                $a = (object)array(
+                    'posts' => $quotaleft,
+                    'period' => $forum->get_max_posts_period(true, true));
+
+                $text = '';
+                $script = '';
+                $text = ($quotaleft <= 2 ? get_string(
+                    $quotaleft == 1 ? 'quotaleft_singular' : 'quotaleft_plural',
+                    'forumng', $a) : '');
+                $mform->addElement('static', '', '',
+                    '<div id="id_postlimit">' . $text . $script . '</div>');
+            }
+
+            $mform->addElement('text', 'subject',
+                $isroot ? get_string('subject', 'forumng')
+                : get_string('optionalsubject', 'forumng'),
+                array('id'=>'id_subject'));
+            $mform->setType('subject', PARAM_TEXT);
+            $mform->addRule('subject', get_string('maximumchars', '', 255),
+                'maxlength', 255, 'client');
+            if ($isroot) {
+                $mform->addRule('subject', get_string('required'),
+                    'required', null, 'client');
+                $mform->addRule('subject', get_string('required'),
+                    'regex', '/\S+/', 'client');
+            }
+            if ($islock) {
+                $mform->setDefault('subject',
+                    get_string('locksubject', 'forumngfeature_lock'));
+            }
+
+            $editorattributes = array('id' => 'id_message',
+                    'cols' => 50, 'rows' => !empty($params['iframe']) ? 15 : 30);
+            $editoroptions = array(
+                'maxfiles' => EDITOR_UNLIMITED_FILES,
+                'context' => $forum->get_context(true),
+                'maxbytes' => $forum->get_max_bytes()
+            );
+            $mform->addElement('editor', 'message', get_string('message', 'forumng'),
+                    $editorattributes, $editoroptions);
+            $mform->setType('message', PARAM_RAW);
+            $mform->addRule('message', get_string('required'),
+                    'required', null, 'client');
+
+            // If you can create attachments...
+            if ($forum->can_create_attachments()) {
+                $mform->addElement('filemanager', 'attachments',
+                        get_string('attachments', 'forumng'), null,
+                        array('subdirs' => false, 'maxbytes' => $forum->get_max_bytes()));
+            }
+
+            // If you can mail now, we show this option.
+            $attachmentlist = '';
+            if ($forum->can_set_important() && !$isdiscussion && !$isroot && !$islock) {
+                $mform->addElement('checkbox', 'setimportant',
+                        get_string('setimportant', 'forumng'));
+            }
+            // Only add moderator element to post edit form if op1 or op2 available.
+            if ($forum->can_post_anonymously() || $forum->can_indicate_moderator()) {
+                $options=array();
+                $options[mod_forumng::ASMODERATOR_NO] = get_string('asmoderator_post', 'forumng');
+                if ($forum->can_indicate_moderator()) {
+                    $options[mod_forumng::ASMODERATOR_IDENTIFY] = get_string('asmoderator_self', 'forumng');
+                }
+                if ($forum->can_post_anonymously()) {
+                    $options[mod_forumng::ASMODERATOR_ANON] = get_string('asmoderator_anon', 'forumng');
+                }
+                $mform->addElement('select', 'asmoderator', get_string('asmoderator', 'forumng'), $options);
+                $mform->addHelpButton('asmoderator', 'asmoderator', 'forumng');
+                $mform->setDefault('asmoderator', 0);
+                $mform->setType('asmoderator', PARAM_INT);
+            } else {
+                $mform->addElement('hidden', 'asmoderator', 0);
+                $mform->setType('asmoderator', PARAM_INT);
+            }
+
+            if ($edit && ($post->get_user()->id != $USER->id)) {
+                // Email author.
+                $mform->addElement('header', 'id_emailauthor', get_string('emailauthor', 'forumng'));
+                $mform->addElement('checkbox', 'emailauthor',
+                        get_string('emailauthor', 'forumng'));
+                $mform->addHelpButton('emailauthor', 'emailauthor', 'forumng');
+
+                // Message box.
+                $mform->addElement('editor', 'emailmessage', get_string('emailmessage', 'forumng'),
+                        array('size' => '64', 'id' => 'id_forumng_edit_msg'));
+                $mform->setType('emailmessage', PARAM_RAW);
+
+                $mform->addElement('checkbox', 'emailself', get_string('copytoself', 'forumng'));
+                $mform->disabledIf('emailself', 'emailauthor', 'notchecked');
+
+                // Adding optional text field 'Email address of other recipients'.
+                $mform->addElement('text', 'emailadd', get_string('extra_emails', 'forumng'),
+                        array('size' => '48'));
+                $mform->addHelpButton('emailadd', 'extra_emails', 'forumng');
+                $mform->setType('emailadd', PARAM_RAW);
+                $mform->disabledIf('emailadd', 'emailauthor', 'notchecked');
+            }
+        }
+
+        // Additional options apply only to discussion.
+        if ($isdiscussion && $forum->can_manage_discussions()) {
+
+            // Restrict to specific time period (only if you are allowed to
+            // see hidden posts, otherwise stupid to let people hide it and
+            // then not see).
+            if ($forum->can_view_hidden()) {
+                $mform->addElement('header', 'id_displayperiod',
+                    get_string('displayperiod', 'forumng'));
+
+                $mform->addElement('date_selector', 'timestart',
+                    get_string('timestart', 'forumng'), array('optional'=>true));
+                $mform->addHelpButton('timestart', 'displayperiod', 'forumng');
+
+                $mform->addElement('date_selector', 'timeend',
+                    get_string('timeend', 'forumng'), array('optional'=>true));
+            }
+        }
+
+        // Discussion options...
+        if ($isdiscussion && ($forum->can_manage_discussions() || $forum->can_tag_discussion())) {
+            $mform->addElement('header', 'id_stickyoptions',
+                get_string('discussionoptions', 'forumng'));
+
+            // Sticky discussion.
+            if ($forum->can_manage_discussions()) {
+                $options = array();
+                $options[0] = get_string('sticky_no', 'forumng');
+                $options[1] = get_string('sticky_yes', 'forumng');
+                $mform->addElement('select', 'sticky',
+                        get_string('sticky', 'forumng'), $options);
+                $mform->addHelpButton('sticky', 'sticky', 'forumng');
+            }
+
+            // Tag discussion.
+            if ($forum->can_tag_discussion()) {
+                $tagselect = $mform->addElement('autocomplete', 'tags', get_string('discussiontags', 'forumng'),
+                        $tagoptions, array('tags' => true, 'placeholder' => get_string('entertags', 'tag')));
+                $tagselect->setMultiple(true);
+                $mform->setType('tags', PARAM_TAGLIST);
+                $mform->setDefault('tags', $tags);
+                $mform->addHelpButton('tags', 'discussiontags', 'forumng');
+            }
+        }
+
+        // Group.
+        if ($isdiscussion && $forum->can_manage_discussions()) {
+            if ($forum->get_group_mode()) {
+                // Group ID comes from the post (if provided) or the params.
+                if ($post) {
+                    $groupid = $post->get_discussion()->get_group_id();
+                } else {
+                    $groupid = $params['group'];
+                }
+
+                // Display as static or dropdown.
+                if (has_capability('moodle/site:accessallgroups',
+                    $forum->get_context())) {
+                    // Users with 'access all groups' can move discussions, so
+                    // show dropdown with all groups.
+                    $cm = $forum->get_course_module();
+                    $groups = groups_get_all_groups(
+                        $cm->course,
+                        has_capability('moodle/site:accessallgroups',
+                            $forum->get_context()) ? 0 : $USER->id,
+                        $cm->groupingid);
+                    $options = array();
+                    $options[mod_forumng::ALL_GROUPS] = get_string('allparticipants');
+                    foreach ($groups as $group) {
+                        $options[$group->id] = format_string($group->name);
+                    }
+                    $mform->addElement('select', 'group', get_string('group'),
+                        $options);
+                    $mform->setDefault('group', $groupid);
+                    $groupselector = true;
+                } else {
+                    // Users without 'access all groups' only see the current
+                    // group of the discussion.
+                    if ($groupid == mod_forumng::ALL_GROUPS) {
+                        $groupname = get_string('allparticipants');
+                    } else {
+                        $group = groups_get_group($groupid);
+                        $groupname = format_string($group->name);
+                    }
+                    $mform->addElement('static', 'groupinfo',
+                        get_string('group'), $groupname);
+                }
+            }
+
+            // Note: Lock/unlock is not available here. When locking a
+            // discussion you are prompted to give a reason (=new post).
+            // This is available from the discussion page. Unlocking is
+            // available from a link in the special 'discussion is locked'
+            // message that appears at the top of the discussion page.
+        }
+
+        // Post / save changes button.
+        if ($edit) {
+            $submitlabel = get_string('savechanges');
+        } else if ($islock) {
+            $submitlabel = get_string('lockdiscussionbutton', 'forumngfeature_lock');
+        } else if ($isdiscussion) {
+            $submitlabel = get_string('postdiscussion', 'forumng');
+        } else {
+            $submitlabel = get_string('postreply', 'forumng');
+        }
+
+        $buttonarray = array();
+        $buttonarray[] = &$mform->createElement('submit', 'submitbutton',
+            $submitlabel, array('id' => 'id_submitbutton'));
+        $buttonarray[] = &$mform->createElement('cancel', '', '',
+            array('id' => 'id_cancel'));
+        if (!$edit && !$islock) {
+            // Can't save draft while editing.
+            $buttonarray[] = &$mform->createElement('submit', 'savedraft',
+                get_string('savedraft', 'forumng'),
+                array('id'=>'id_savedraft'));
+        }
+        $mform->addGroup($buttonarray, 'buttonar', '', array(' '), false);
+        $mform->closeHeaderBefore('buttonar');
+
+        // Hidden fields.
+        foreach ($params as $param => $value) {
+            // If there's a group selector, don't duplicate the group param.
+            if ($param == 'group' && $groupselector) {
+                continue;
+            }
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+        // Prevent multiple submits.
+        $mform->addElement('hidden', 'random', rand());
+        $mform->setType('random', PARAM_INT);
+    }
+
+    public function validation($data, $files) {
+        global $USER;
+        $errors = parent::validation($data, $files);
+        if (isset($data['timeend'])
+            && ($data['timeend']!=0) && ($data['timestart']!=0)
+            && ($data['timeend'] < $data['timestart'])) {
+            $errors['timeend'] = get_string('timestartenderror', 'forumng');
+        }
+        if (!empty($data['emailadd'])) {
+            $emails = preg_split('~[; ]+~', $data['emailadd']);
+            if (count($emails) < 1) {
+                $errors['emailadd'] = get_string('invalidemails', 'forumng');
+            } else {
+                foreach ($emails as $email) {
+                    if (!validate_email($email)) {
+                        $errors['emailadd'] = get_string('invalidemails', 'forumng');
+                        break;
+                    }
+                }
+            }
+        }
+        if (!empty($data['subject'])) {
+            // Sometimes broken browsers/password managers autocomplete the
+            // subject field with the student's OUCU or PI. We do not allow
+            // them to submit the post in this case.
+            $subject = core_text::strtolower($data['subject']);
+            if ($subject === core_text::strtolower($USER->username) ||
+                    $subject === core_text::strtolower($USER->idnumber)) {
+                if ($this->_customdata['isroot']) {
+                    $errors['subject'] = get_string('error_identityinsubject_discussion', 'forumng');
+                } else {
+                    $errors['subject'] = get_string('error_identityinsubject_reply', 'forumng');
+                }
+            }
+        }
+        return $errors;
+    }
+
+    /**
+     * Obtains HTML for form; needed so that this can be printed for AJAX version.
+     * @return string HTML for form
+     */
+    public function get_html() {
+        return $this->_form->toHtml();
+    }
+}
diff --git a/mod/forumng/expandpost.php b/mod/forumng/expandpost.php
new file mode 100644
index 0000000..d139187
--- /dev/null
+++ b/mod/forumng/expandpost.php
@@ -0,0 +1,57 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * AJAX script that returns content of a single post.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Post ID
+$postid = required_param('p', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$raw = optional_param('raw', 0, PARAM_INT);
+$pageparams = array('p' => $postid);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+if ($raw) {
+    $pageparams['raw'] = $raw;
+}
+
+try {
+    // Get post
+    $post = mod_forumng_post::get_from_id($postid, $cloneid, true, true);
+
+    // Do all access security checks
+    $post->require_view();
+    $post->get_discussion()->init_page(new moodle_url('/mod/forumng/expandpost.php', $pageparams),
+            '');
+
+    // Display post
+    if ($raw) {
+        print $post->prepare_edit_json();
+    } else {
+        mod_forumng_post::print_for_ajax_and_exit($post);
+    }
+} catch (coding_exception $e) {
+    header('Content-Type: text/plain', true, 500);
+    print $e->getMessage();
+}
diff --git a/mod/forumng/externallib.php b/mod/forumng/externallib.php
new file mode 100644
index 0000000..9c32457
--- /dev/null
+++ b/mod/forumng/externallib.php
@@ -0,0 +1,109 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(__DIR__ .  '/mod_forumng.php');
+require_once($CFG->libdir . '/externallib.php');
+
+/**
+ * Forum services implementation.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_external extends external_api {
+    /**
+     * Gets function parameter metadata.
+     *
+     * @return external_function_parameters Parameter info
+     */
+    public static function get_forum_list_parameters() {
+        return new external_function_parameters(array(
+                'shortname' => new external_value(PARAM_RAW, 'Website shortname'),
+                'oucu' => new external_value(PARAM_RAW, 'OU computer username')
+                ));
+    }
+
+    /**
+     * Returns description of method result values.
+     *
+     * @return external_description Description of result
+     */
+    public static function get_forum_list_returns() {
+        return new external_multiple_structure(
+                 new external_single_structure(array(
+                'name' => new external_value(PARAM_RAW),
+                'unread' => new external_value(PARAM_RAW)
+                )));
+    }
+
+    /**
+     * Get forum list for a user on a course.
+     *
+     * @param string $courseshortname Website shortname.
+     * @param string $oucu Username.
+     * @return array Forum details objects.
+     */
+    public static function get_forum_list($courseshortname, $oucu) {
+        global $DB;
+
+        // Validate the parameters.
+        $params = self::validate_parameters(self::get_forum_list_parameters(),
+                array('shortname' => $courseshortname, 'oucu' => $oucu));
+
+        // Get course object from the shortname.
+        $course = $DB->get_record('course', array('shortname' => $courseshortname));
+        if ($course === false) {
+            throw new moodle_exception(get_string('cannotfindcourse', 'error'));
+        }
+
+        $forumlist = array();
+
+        // Get the user's id from the supplied username (oucu).
+        $userid = $DB->get_field('user', 'id', array('username'=> $oucu));
+        if ($userid === false) {
+            throw new moodle_exception(get_string('cannotfinduser', 'error', $oucu));
+        }
+
+        // Get forums for the given course and user.
+        $forums = mod_forumng::get_course_forums($course, $userid, mod_forumng::UNREAD_BINARY);
+        $modinfo = get_fast_modinfo($course, $userid);
+        // Loop through the forum instances, they are correctly ordered by sections.
+        foreach ($modinfo->get_instances_of('forumng') as $cm) {
+            // Only include this forum if it is visible to the user.
+            if ($cm->uservisible) {
+                $forum = $forums[$cm->instance];
+                if ($forum->is_clone()) {
+                    $forum->init_unread_from_original(mod_forumng::UNREAD_BINARY, $userid);
+                }
+                $forumdetails = new stdClass();
+                $forumdetails->name = $forum->get_name();
+                if ($forum->has_unread_discussions()) {
+                    $forumdetails->unread = 'y';
+                } else {
+                    $forumdetails->unread = 'n';
+                }
+
+                $forumlist[] = $forumdetails;
+                unset($forumdetails);
+            }
+        }
+
+        return $forumlist;
+    }
+}
diff --git a/mod/forumng/feature/copy/copy.php b/mod/forumng/feature/copy/copy.php
new file mode 100644
index 0000000..f6c5f15
--- /dev/null
+++ b/mod/forumng/feature/copy/copy.php
@@ -0,0 +1,77 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Copy script. Copies forum reference into session, after confirm form.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$d = required_param('d', PARAM_INT);
+$pageparams = array('d' => $d);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+$forum = $discussion->get_forum();
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+
+// Require that you can see this discussion (etc) and copy them
+$discussion->require_view();
+require_capability('mod/forumng:copydiscussion',
+    $discussion->get_forum()->get_context());
+
+$pagename = get_string('copy_title', 'forumngfeature_copy');
+$pageurl = new moodle_url('/mod/forumng/feature/copy/copy.php', $pageparams);
+$out = $discussion->init_page($pageurl, $pagename);
+
+// Create form
+require_once('forumngfeature_copy_form.php');
+$mform = new forumngfeature_copy_form('copy.php', array('d'=>$d, 'clone'=>$cloneid));
+
+if ($mform->is_cancelled()) {
+    redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+} else if (($fromform = $mform->get_data(false)) ||
+    get_user_preferences('forumng_hidecopyhelp', 0)) {
+    // Remember in session that the discussion is being copied
+    $SESSION->forumng_copyfrom = $d;
+    $SESSION->forumng_copyfromclone = $cloneid;
+    $SESSION->forumng_copyfromforum = $forum->get_id();
+    if ($forum->get_group_mode() != NOGROUPS) {
+        $SESSION->forumng_copyfromgroup = $discussion->get_group_id();
+    } else {
+        $SESSION->forumng_copyfromgroup = mod_forumng::NO_GROUPS;
+    }
+
+    if (!empty($fromform->hidelater)) {
+        set_user_preference('forumng_hidecopyhelp', 1);
+    }
+    // Redirect back to view page
+    redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
+}
+
+print $out->header();
+
+// Print form
+$mform->display();
+print $out->footer();
diff --git a/mod/forumng/feature/copy/copyall.php b/mod/forumng/feature/copy/copyall.php
new file mode 100644
index 0000000..b4a5ce2
--- /dev/null
+++ b/mod/forumng/feature/copy/copyall.php
@@ -0,0 +1,102 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Copy single or multiple discussions.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once(dirname(__FILE__) . '/../forumngfeature_discussion_selector.php');
+require_once($CFG->dirroot . '/mod/forumng/feature/copy/forumngfeature_copy_form.php');
+
+class copy_discussion_selector extends forumngfeature_discussion_selector {
+    public function get_button_name() {
+        return get_string('copy_discussion', 'forumngfeature_copy');
+    }
+
+    public function get_form($forum, $all, $selected = array()) {
+        if (get_user_preferences('forumng_hidecopyhelp', 0)) {
+            return null;
+        } else {
+            foreach ($selected as $discussionid) {
+                $params['selectd' . $discussionid] = $discussionid;
+            }
+            $params['id'] = $forum->get_course_module_id();
+            $params['clone'] = optional_param('clone', 0, PARAM_INT);
+            $params['postselectform'] = true;
+            return new forumngfeature_copy_form('copyall.php', $params);
+        }
+    }
+
+    public function get_page_name() {
+        return get_string('copyall_title', 'forumngfeature_copy');
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $SESSION;
+
+        $forum = $discussion;
+        $clone  = optional_param('clone', 0, PARAM_INT);
+        $groupid = null;
+        // Make sure that only non-deleted and non-locked discussions are selected
+        // just in case "All discussion shown" is chose.
+        $selectd = array();
+        foreach ($selected as $discussionid) {
+            $discussion = mod_forumng_discussion::get_from_id($discussionid, $clone);
+            if (!$discussion->is_deleted() && !$discussion->is_locked()) {
+                $selectd[] = $discussionid;
+                $dgrpid = $discussion->get_group_id();
+                if ($groupid == null) {
+                    $groupid = $dgrpid == null ? mod_forumng::NO_GROUPS : $dgrpid;
+                } else if ($dgrpid != $groupid) {
+                    // Multiple groups - set to all participants.
+                    $groupid = mod_forumng::NO_GROUPS;
+                }
+            }
+        }
+        if (!empty($selectd)) {
+            // Remember in session that the discussions are being copied.
+            $SESSION->forumng_copyfrom = $selectd;
+            $SESSION->forumng_copyfromclone = $clone;
+            $SESSION->forumng_copyfromforum = $forum->get_id();
+            if ($forum->get_group_mode() != NOGROUPS) {
+                $SESSION->forumng_copyfromgroup = $groupid;
+            } else {
+                $SESSION->forumng_copyfromgroup = mod_forumng::NO_GROUPS;
+            }
+        }
+        if (!empty($formdata->hidelater)) {
+            set_user_preference('forumng_hidecopyhelp', 1);
+        }
+        // Redirect back to forum view page.
+        redirect('../../view.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+    }
+
+    public function only_discussion_types() {
+        return array('forumng-discussion-short');
+    }
+
+    public function exclude_discussion_types() {
+        return array('forumng-deleted', 'forumng-locked');
+    }
+
+}
+
+forumngfeature_discussion_selector::go(new copy_discussion_selector());
diff --git a/mod/forumng/feature/copy/forumngfeature_copy.php b/mod/forumng/feature/copy/forumngfeature_copy.php
new file mode 100644
index 0000000..3fed655
--- /dev/null
+++ b/mod/forumng/feature/copy/forumngfeature_copy.php
@@ -0,0 +1,68 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Copy.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_copy extends forumngfeature_discussion {
+    public function get_order() {
+        global $PAGE;
+        if ($PAGE->pagetype == 'mod-forumng-view') {
+            return 320;
+        } else {
+            return 360;
+        }
+    }
+
+    public function should_display($discussion) {
+        global $SESSION;
+        if (is_a($discussion, 'mod_forumng_discussion')) {
+            return has_capability('mod/forumng:copydiscussion',
+                $discussion->get_forum()->get_context()) && (!isset($SESSION->forumng_copyfrom) ||
+                $SESSION->forumng_copyfrom != $discussion->get_id());
+        } else if (is_a($discussion, 'mod_forumng')) {
+            return has_capability('mod/forumng:copydiscussion',
+                $discussion->get_context()) && (!isset($SESSION->forumng_copyfrom));
+        }
+    }
+
+    public function display($discussion) {
+        if (is_a($discussion, 'mod_forumng_discussion')) {
+            return parent::get_button($discussion,
+                get_string('copy_discussion', 'forumngfeature_copy'), 'feature/copy/copy.php');
+        } else if (is_a($discussion, 'mod_forumng')) {
+            $params['exclude'] = 'forumng-deleted,forumng-locked';
+            $excludedget = array_merge($params, $_GET);
+            return forumngfeature_discussion_list::get_button(
+                    $discussion,
+                    get_string('copy_discussion', 'forumngfeature_copy'),
+                    'feature/copy/copyall.php',
+                    false,
+                    $excludedget,
+                    '',
+                    'forumng-dselectorbutton');
+        }
+    }
+
+    public function supports_discussion_list() {
+        return true;
+    }
+
+}
diff --git a/mod/forumng/feature/copy/forumngfeature_copy_form.php b/mod/forumng/feature/copy/forumngfeature_copy_form.php
new file mode 100644
index 0000000..875add4
--- /dev/null
+++ b/mod/forumng/feature/copy/forumngfeature_copy_form.php
@@ -0,0 +1,48 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Copy form with warning.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once($CFG->libdir.'/formslib.php');
+
+class forumngfeature_copy_form extends moodleform {
+
+    public function definition() {
+
+        global $CFG;
+        $mform =& $this->_form;
+
+        $mform->addElement('static', 'whatever', '',
+            get_string('copy_info', 'forumngfeature_copy').'<br />');
+
+        $mform->addElement('checkbox', 'hidelater',
+            '', get_string('hidelater', 'forumng'));
+
+        $this->add_action_buttons(true, get_string('copy_begin', 'forumngfeature_copy'));
+
+        // Hidden fields
+        foreach ($this->_customdata as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+    }
+}
diff --git a/mod/forumng/feature/copy/lang/en/forumngfeature_copy.php b/mod/forumng/feature/copy/lang/en/forumngfeature_copy.php
new file mode 100644
index 0000000..d260540
--- /dev/null
+++ b/mod/forumng/feature/copy/lang/en/forumngfeature_copy.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['copy_discussion'] = 'Copy';
+$string['copy_info'] = 'To copy the discussion(s) into another forum:<ol>
+<li>Click <strong>Begin copy</strong> to confirm this form.</li>
+<li>Go to the forum that you want to copy it/them into. (This may be the same forum,
+perhaps in a different group; a different forum on the same course; or a
+forum on a different course.)</li>
+<li>Click <strong>Paste discussion</strong> to finish the copy, or
+the <strong>Cancel</strong> button alongside if you change your mind.</li>
+</ol>';
+$string['copy_begin'] = 'Begin copy';
+$string['copy_title'] = 'Copy discussion';
+$string['copyall_title'] = 'Copy discussion(s)';
+$string['pluginname'] = 'Copy discussion';
diff --git a/mod/forumng/feature/copy/lang/es/forumngfeature_copy.php b/mod/forumng/feature/copy/lang/es/forumngfeature_copy.php
new file mode 100644
index 0000000..1fd4cf0
--- /dev/null
+++ b/mod/forumng/feature/copy/lang/es/forumngfeature_copy.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['copy_discussion'] = 'Copiar';
+$string['copy_info'] =
+'Para copiar este tema en otro foro:<ol>
+<li>Pulsa <strong>Comenzar la copia</strong> para comenzar el proceso.</li>
+<li>Abre el foro donde quieras copiar el tema. (Puede ser el mismo foro,
+quizá en un grupo diferente; un foro diferente en el mismo curso; o un
+foro en un curso diferente.)</li>
+<li>Pulsa en <strong>Pegar tema</strong> para finalizar la copia, o
+el botón de <strong>Cancelar</strong> si has cambiado de idea.</li>
+</ol>';
+$string['copy_begin'] = 'Comenzar la copia';
+$string['copy_title'] = 'Copiar tema';
+$string['pluginname'] = 'Copiar tema';
diff --git a/mod/forumng/feature/copy/lang/fr/forumngfeature_copy.php b/mod/forumng/feature/copy/lang/fr/forumngfeature_copy.php
new file mode 100644
index 0000000..0bbe73e
--- /dev/null
+++ b/mod/forumng/feature/copy/lang/fr/forumngfeature_copy.php
@@ -0,0 +1,32 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['copy_discussion'] = 'Copier';
+$string['copy_info'] = 'Pour copier cette discussion vers un autre forum :<ol>
+<li>Cliquer sur <strong>Commencer la copie</strong> pour activer le porcessus.</li>
+<li>Aller vers le forum de destination. Cela peut être dans le mêmme forum (mais pour un groupe différent), dans un autre forum du même cours, ou un autre forum d\'un autre cours.</li>
+<li>Cliquer sur <strong>Copier la discussion</strong> pour finir la copie, ou <strong>Annuler</strong> pour annuler le processus..</li>
+</ol>';
+$string['copy_begin'] = 'Commencer la copie';
+$string['copy_title'] = 'Copier la discussion';
+$string['pluginname'] = 'Copie de discussion';
diff --git a/mod/forumng/feature/copy/lang/he/forumngfeature_copy.php b/mod/forumng/feature/copy/lang/he/forumngfeature_copy.php
new file mode 100644
index 0000000..3d24006
--- /dev/null
+++ b/mod/forumng/feature/copy/lang/he/forumngfeature_copy.php
@@ -0,0 +1,35 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['copy_discussion'] = 'העתקה';
+$string['copy_info'] = 'To copy this discussion into another forum:<ol>
+<li>Click <strong>Begin copy</strong> to confirm this form.</li>
+<li>Go to the forum that you want to copy it into. (This may be the same forum,
+perhaps in a different group; a different forum on the same course; or a
+forum on a different course.)</li>
+<li>Click <strong>Paste discussion</strong> to finish the copy, or
+the <strong>Cancel</strong> button alongside if you change your mind.</li>
+</ol>';
+$string['copy_begin'] = 'תחילת העתקה';
+$string['copy_title'] = 'העתקת דיון';
+$string['pluginname'] = 'העתקת דיון';
diff --git a/mod/forumng/feature/copy/paste.php b/mod/forumng/feature/copy/paste.php
new file mode 100644
index 0000000..27c6482
--- /dev/null
+++ b/mod/forumng/feature/copy/paste.php
@@ -0,0 +1,66 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Script used to paste discussion(s) into new forum.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// Scripts for paste the discussion(s) or cancel the paste.
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$cmid = required_param('cmid', PARAM_INT);
+$groupid = optional_param('group', mod_forumng::NO_GROUPS, PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+$targetforum = mod_forumng::get_from_cmid($cmid, $cloneid);
+if (optional_param('cancel', '', PARAM_RAW)) {
+    unset($SESSION->forumng_copyfrom);
+    redirect($targetforum->get_url(mod_forumng::PARAM_PLAIN));
+}
+// If the paste action has already been done or cancelled in a different window/tab.
+if (!isset($SESSION->forumng_copyfrom)) {
+    redirect($targetforum->get_url(mod_forumng::PARAM_PLAIN));
+}
+
+// Security check to see if can start a new discussion in the target forum.
+$targetforum->require_start_discussion($groupid);
+
+$oldcloneid = $SESSION->forumng_copyfromclone;
+$olddiscussions = $SESSION->forumng_copyfrom;
+if (is_array($olddiscussions)) {
+    $olddiscussionid = $olddiscussions[0];
+    $olddiscussion = mod_forumng_discussion::get_from_id($olddiscussionid, $oldcloneid);
+    // Check permission to copy the discussion.
+    require_capability('mod/forumng:copydiscussion', $olddiscussion->get_forum()->get_context());
+    // Copy the selected discussion(s).
+    foreach ($olddiscussions as $olddiscussionid) {
+        $olddiscussion = mod_forumng_discussion::get_from_id($olddiscussionid, $oldcloneid);
+        $olddiscussion->copy($targetforum, $groupid);
+    }
+} else {
+    $olddiscussionid = $olddiscussions;
+    $olddiscussion = mod_forumng_discussion::get_from_id($olddiscussionid, $oldcloneid);
+    // Check permission to copy the discussion.
+    require_capability('mod/forumng:copydiscussion', $olddiscussion->get_forum()->get_context());
+    $olddiscussion->copy($targetforum, $groupid);
+}
+unset($SESSION->forumng_copyfrom);
+redirect($targetforum->get_url(mod_forumng::PARAM_PLAIN));
diff --git a/mod/forumng/feature/copy/tests/behat/basic.feature b/mod/forumng/feature/copy/tests/behat/basic.feature
new file mode 100644
index 0000000..44f6f29
--- /dev/null
+++ b/mod/forumng/feature/copy/tests/behat/basic.feature
@@ -0,0 +1,97 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_copy
+Feature: Copy discussions to another forum
+  In order to make a copy of a discussion
+  As a teacher
+  I need to copy and paste discussions between forums
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+      | Course 2 | C2        | 0        |
+    And the following "groups" exist:
+      | name    | course | idnumber |
+      | Group 1 | C1     | G1       |
+      | Group 2 | C1     | G2       |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test group forum |
+      | groupmode | Visible groups |
+    And I am on site homepage
+    And I follow "Course 2"
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test course forum |
+    And I log out
+
+  Scenario: Copy discussion to another group on same forum
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    And I set the field "Visible groups" to "Group 1"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | To be copied |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | def |
+    When I press "Copy"
+    Then I should see "Copy discussion"
+    Given I press "Cancel"
+    Then I should see "abc"
+    Given I press "Copy"
+    When I press "Begin copy"
+    Then "Paste discussion" "button" should not exist
+    And "Cancel paste" "button" should exist
+    And I should see "To be copied"
+    Given I press "Cancel paste"
+    Then "Cancel paste" "button" should not exist
+    Given I follow "To be copied"
+    When I press "Copy"
+    And I press "Begin copy"
+    And I set the field "Visible groups" to "Group 2"
+    And I press "Go"
+    Then I should not see "To be copied"
+    And "Cancel" "button" should exist
+    Given I press "Paste discussion"
+    Then I should see "To be copied"
+    Given I follow "To be copied"
+    Then I should see "abc"
+    And I should see "def"
+    And I edit post "1" with the following data:
+      | Subject | To be copied again |
+    Given I press "Copy"
+    And I press "Begin copy"
+    And I follow "Test group forum"
+    And I set the field "Visible groups" to "Group 1"
+    And I press "Go"
+    When I press "Paste discussion"
+    Then I should see "To be copied again"
+
+  Scenario: Copy discussion from group to another course forum
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    And I set the field "Visible groups" to "Group 1"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | To be copied |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | def |
+    When I press "Copy"
+    And I press "Begin copy"
+    And I am on site homepage
+    And I follow "Course 2"
+    And I follow "Test course forum"
+    Then "Paste discussion" "button" should exist
+    Given I press "Paste discussion"
+    Then I should see "To be copied"
+    Given I follow "To be copied"
+    Then I should see "abc"
+    And I should see "def"
+    And I should see "Test course forum"
diff --git a/mod/forumng/feature/copy/tests/behat/multicopy.feature b/mod/forumng/feature/copy/tests/behat/multicopy.feature
new file mode 100644
index 0000000..bc1da81
--- /dev/null
+++ b/mod/forumng/feature/copy/tests/behat/multicopy.feature
@@ -0,0 +1,95 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_copy
+Feature: Copy discussions from main forum page
+  In order to copy discussions
+  As a teacher
+  I use the copy feature
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+      | Course 2 | C2        | 0        |
+    And the following "groups" exist:
+      | name    | course | idnumber |
+      | Group 1 | C1     | G1       |
+      | Group 2 | C1     | G2       |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test group forum |
+      | groupmode | Visible groups |
+    And I follow "Test group forum"
+    And I set the field "Visible groups" to "Group 1"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | To be copied 1 |
+      | Message | message 1 |
+    And I reply to post "1" with the following data:
+      | Message | re message 1 |
+    And I follow "Test group forum"
+    And I set the field "Visible groups" to "Group 1"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | To be copied 2 |
+      | Message | message 2 |
+    And I reply to post "1" with the following data:
+      | Message | re message 2 |
+    And I am on site homepage
+    And I follow "Course 2"
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test course forum |
+    And I log out
+
+  Scenario: Copy discussions to another group on same forum
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    And I set the field "Visible groups" to "Group 1"
+    When I press "Go"
+    Then I should see "To be copied 1"
+    And I should see "To be copied 2"
+    And I press "Copy"
+    And I press "All discussions shown"
+    When I press "Begin copy"
+    Then "Paste discussions" "button" should not exist
+    And I should see "Test group forum"
+    When I press "Cancel paste"
+    Then "Cancel paste" "button" should not exist
+    And I press "Copy"
+    And I press "All discussions shown"
+    When I press "Begin copy"
+    And I set the field "Visible groups" to "Group 2"
+    When I press "Go"
+    Then I should not see "To be copied 1"
+    And I should not see "To be copied 2"
+    And "Cancel" "button" should exist
+    When I press "Paste discussions"
+    Then I should see "To be copied 1"
+    And I should see "To be copied 2"
+    When I follow "To be copied 1"
+    Then I should see "message 1"
+    And I should see "re message 1"
+
+  Scenario: Copy discussions from group to another course forum
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    And I set the field "Visible groups" to "Group 1"
+    When I press "Go"
+    And I press "Copy"
+    And I press "All discussions shown"
+    And I press "Begin copy"
+    And I am on site homepage
+    And I follow "Course 2"
+    And I follow "Test course forum"
+    Then "Paste discussions" "button" should exist
+    And I press "Paste discussions"
+    Then I should see "To be copied 1"
+    Then I should see "To be copied 2"
+    And I follow "To be copied 1"
+    Then I should see "message 1"
+    Then I should see "re message 1"
\ No newline at end of file
diff --git a/mod/forumng/feature/copy/version.php b/mod/forumng/feature/copy/version.php
new file mode 100644
index 0000000..3aeb39c
--- /dev/null
+++ b/mod/forumng/feature/copy/version.php
@@ -0,0 +1,27 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage copy
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngfeature_copy';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/delete/delete.php b/mod/forumng/feature/delete/delete.php
new file mode 100644
index 0000000..35448cd
--- /dev/null
+++ b/mod/forumng/feature/delete/delete.php
@@ -0,0 +1,271 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Deletes a discussion after confirm.
+ * @package forumngfeature
+ * @subpackage delete
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$d = required_param('d', PARAM_INT);
+$pageparams = array('d' => $d);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+$delete = required_param('delete', PARAM_INT);
+$pageparams['delete'] = $delete;
+
+$email = optional_param('email', 0, PARAM_INT);
+$pageparams['email'] = $email;
+
+$expand = optional_param('expand', 0, PARAM_INT);
+$expandparam = $expand ? '&expand=1' : '';
+
+$notdeleted = optional_param('notdeleted', 0, PARAM_INT);
+
+$discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+$forum = $discussion->get_forum();
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+
+// Let discussion author delete if allowed, otherwise check permission for change.
+if ($USER->id != $discussion->get_poster()->id || $discussion->get_root_post()->has_children() ||
+        !$discussion->get_root_post()->can_edit($whynot)) {
+    $discussion->require_edit();
+}
+
+// Set up page.
+$pagename = get_string(
+        $delete ? 'deletediscussion' : 'undeletediscussion', 'forumngfeature_delete');
+$url = new moodle_url('/mod/forumng/feature/delete/delete.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+if ($email) {
+    require_once('deletediscussion_form.php');
+
+    $urlparams = array('d' => $d, 'delete' => $delete, 'email' => $email);
+    if ($cloneid) {
+        $urlparams['clone'] = $cloneid;
+    }
+
+    $contributors = false;
+    if (count(get_contributor_ids($discussion)) > 1) {
+        $contributors = true;
+    }
+    $urlparams['contributors'] = $contributors;
+
+    $mform = new mod_forumng_deletediscussion_form($url, $urlparams);
+
+    if ($mform->is_cancelled()) {
+        // Form is cancelled, redirect back to the discussion.
+        redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) . $expandparam);
+    } else if ($submitted = $mform->get_data()) {
+        // Delete the discussion.
+        $discussion->delete();
+
+        // Set up the email.
+        $messagetext = $submitted->message['text'];
+        $copyself = (isset($submitted->copyself))? true : false;
+        $post = $discussion->get_root_post();
+        $user = $post->get_user();
+        $from = $SITE->fullname;
+        $subject = get_string('deletedforumpost', 'forumng');
+        $notifymessagetext = '';
+        $notifycontributors = (isset($submitted->notifycontributors))? true : false;
+        if (isset($submitted->notifymessage['text'])) {
+            $notifymessagetext = $submitted->notifymessage['text'];
+        }
+
+        // Always enable HTML version.
+        $messagehtml = $out->deletion_email(text_to_html($messagetext));
+        $notifymessagehtml = $out->deletion_email(text_to_html($notifymessagetext));
+
+        // Send an email to the author of the discussion post, using prefered format.
+        if (!email_to_user($user, $from, $subject, html_to_text($messagetext), $messagehtml)) {
+            print_error(get_string('emailerror', 'forumng'));
+        }
+
+        // Get copy email addresses.
+        $contribemails = $emails = $selfmail = $contributorsemails = array();
+        // Prepare for copies.
+        $subject = strtoupper(get_string('copy')) . ' - ' . $subject;
+        if ($copyself) {
+            // Send an email copy to the current user, with prefered format.
+            if (!email_to_user($USER, $from, $subject, html_to_text($messagetext), $messagehtml)) {
+                print_error(get_string('emailerror', 'forumng'));
+            }
+            $selfmail[] = $USER->email;
+        }
+        // Addition of 'Email address of other recipients'.
+        if (!empty($submitted->emailadd)) {
+            $emails = preg_split('~[; ]+~', $submitted->emailadd);
+        }
+
+        // If there are any contributors notify them (if sent delete copy email won't).
+        if ($notifycontributors) {
+            $contribemails = array_merge($emails, $selfmail);
+            $contribemails = array_merge($contribemails, array($user->email));
+            $contributorsemails = get_posts_discussion_email_details($discussion, $contribemails);
+        }
+        // Send copy HTML emails.
+        if (!empty($emails)) {
+            foreach ($emails as $email) {
+                $fakeuser = (object)array(
+                        'email' => $email,
+                        'mailformat' => 1,
+                        'id' => -1
+                );
+                if (!email_to_user($fakeuser, $from, $subject, '', $messagehtml)) {
+                    print_error(get_string('emailerror', 'forumng'));
+                }
+            }
+        }
+        // Send contributor emails, using prefered format.
+        if (!empty($contributorsemails)) {
+            $subject = get_string('deletedforumpost', 'forumng');
+            foreach ($contributorsemails as $contrib) {
+                if (isset($contrib['email'])) {
+                    $fakeuser = (object)array(
+                        'email' => $contrib['email'],
+                        'mailformat' => $contrib['mailformat'],
+                        'id' => -1
+                    );
+                    if (!email_to_user($fakeuser, $from, $subject, html_to_text($notifymessagetext), $notifymessagehtml)) {
+                        print_error(get_string('emailerror', 'forumng'));
+                    }
+                }
+            }
+        }
+
+        // Redirect back to the forum view.
+        redirect('../../view.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN) . $expandparam);
+    }
+}
+
+// Is this the actual delete?
+if ($_SERVER['REQUEST_METHOD'] == 'POST') {
+    if (!$email) {
+        if ($delete) {
+            $discussion->delete();
+            redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
+        } else {
+            $discussion->undelete();
+            redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+        }
+    }
+}
+
+// Confirm page. Work out navigation for header.
+print $out->header();
+
+if ($email) {
+    // Prepare the object for the get_string.
+    $emailmessage = new stdClass();
+    $emailmessage->subject = $discussion->get_subject();
+    $emailmessage->firstname = $USER->firstname;
+    $emailmessage->lastname = $USER->lastname;
+    $emailmessage->course = $COURSE->fullname;
+    $emailmessage->forum = $forum->get_name();
+
+    $formdata = new stdClass();
+    // Use the plain.
+    $formdata->message['text'] = get_string('emailcontenthtml', 'forumngfeature_delete', $emailmessage);
+    $formdata->notifymessage['text'] = get_string('notifycontributorsemailcontenthtml', 'forumngfeature_delete', $emailmessage);
+    $formdata->expand = $expand;
+    $mform->set_data($formdata);
+    $mform->display();
+
+} else {
+    // Need to test for child posts and user id against creator id.
+    $childposts = $discussion->get_root_post()->has_children();
+    $creator = $discussion->get_poster();
+    if (!$childposts && $creator->id == $USER->id) {
+        $notdeleted = true;// Force no email option when not applicable.
+    }
+
+    // Show confirm options.
+    if ($delete && !$notdeleted) {
+        // Show confirm or email option.
+        $confirmstring = get_string($delete ? 'confirmdeletediscussion'
+                : 'confirmundeletediscussion', 'forumngfeature_delete');
+        $deletebutton = new single_button(new moodle_url('/mod/forumng/feature/delete/delete.php',
+                array('d' => $discussion->get_id(), 'delete' => $delete, 'clone' => $cloneid)),
+                $delete ? get_string('delete') : get_string('undelete', 'forumng'), 'post');
+        $deleteandemailbutton = new single_button(new moodle_url('/mod/forumng/feature/delete/delete.php',
+                array('d' => $discussion->get_id(), 'delete' => $delete, 'clone' => $cloneid, 'email' => 1)),
+                get_string('deleteandemail', 'forumngfeature_delete'), 'post');
+        $cancelbutton = new single_button(new moodle_url('/mod/forumng/discuss.php',
+                array('d' => $discussion->get_id(), 'clone' => $cloneid)),
+                get_string('cancel'), 'get');
+        print $out->confirm_three_button($confirmstring, $deleteandemailbutton, $deletebutton, $cancelbutton);
+    } else {
+        // No email option.
+        $confirmstring = get_string($delete ? 'confirmdeletediscussion'
+                : 'confirmundeletediscussion', 'forumngfeature_delete');
+        print $out->confirm($confirmstring,
+                new single_button(new moodle_url('/mod/forumng/feature/delete/delete.php',
+                        array('d' => $discussion->get_id(), 'delete' => $delete, 'clone' => $cloneid)),
+                        $delete ? get_string('delete') : get_string('undelete', 'forumng'), 'post'),
+                new single_button(new moodle_url('/mod/forumng/discuss.php',
+                        array('d' => $discussion->get_id(), 'clone' => $cloneid)),
+                        get_string('cancel'), 'get'));
+    }
+}
+// Display footer.
+print $out->footer();
+
+function get_contributor_ids($discussion) {
+    $post = $discussion->get_root_post();
+    $userids = array();
+    // Get associative array of user ids.
+    $post->list_all_user_ids($userids, true);
+    // Remove duplicate user ids.
+    $userids = array_keys($userids);
+    array_unique($userids);
+    return $userids;
+}
+
+/**
+ * Gets emails for all contributors to discussion (where post not deleted)
+ * If email is already in list to notify then ignore
+ * @param object $discussion
+ * @param array $emails
+ * @return array
+ */
+function get_posts_discussion_email_details($discussion, $emails) {
+    global $CFG;
+    require_once($CFG->dirroot.'/user/lib.php');
+    $contribemails = array();
+    $userids = get_contributor_ids($discussion);
+    // Get contributor details.
+    $users = user_get_users_by_id($userids);
+    foreach ($users as $user) {
+        if (!in_array($user->email, $emails)) {
+            $details = array();
+            $details['email'] = $user->email;
+            $details['mailformat'] = $user->mailformat;
+            $details['username'] = $user->username;
+            $contribemails[] = $details;
+        }
+    }
+    return $contribemails;
+}
diff --git a/mod/forumng/feature/delete/deletediscussion_form.php b/mod/forumng/feature/delete/deletediscussion_form.php
new file mode 100644
index 0000000..f1af02c
--- /dev/null
+++ b/mod/forumng/feature/delete/deletediscussion_form.php
@@ -0,0 +1,93 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Form for sending an email to the author of a discussion and contributors when deleting
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_deletediscussion_form extends moodleform {
+
+    public function definition() {
+        $mform =& $this->_form;
+
+        // Header.
+        $mform->addElement('header', 'general', get_string('deleteandemail', 'forumng'));
+
+        // Message box.
+        $mform->addElement('editor', 'message',
+                get_string('emailmessage', 'forumng'), array('size' => '64', 'id' => 'id_forumng_delete_msg'));
+        $mform->setType('message', PARAM_RAW);
+        $mform->addRule('message', null, 'required', null, 'client');
+
+        // Send a copy to self.
+        $mform->addElement('checkbox', 'copyself', get_string('copytoself', 'forumng'));
+
+        // Adding optional text field 'Email address of other recipients'.
+        $mform->addElement('text', 'emailadd', get_string('extra_emails', 'forumng'),
+                array('size' => '48'));
+        $mform->addHelpButton('emailadd', 'extra_emails', 'forumng');
+        $mform->setType('emailadd', PARAM_RAW);
+
+        $contributors = $this->_customdata['contributors'];
+
+        if ($contributors) {
+            // Notify other contributors checkbox.
+            $mform->addElement('checkbox', 'notifycontributors', get_string('notifycontributors', 'forumngfeature_delete'));
+            $mform->addHelpButton('notifycontributors', 'notifycontributors', 'forumngfeature_delete');
+
+            // Notify contributors message box.
+            $mform->addElement('editor', 'notifymessage',
+                    get_string('emailmessage', 'forumng'), array('size' => '64', 'id' => 'id_forumng_delete_notify_msg'));
+            $mform->setType('notifymessage', PARAM_RAW);
+        }
+        // Hidden fields.
+        foreach ($this->_customdata as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+
+        // Add some buttons.
+        $this->add_action_buttons(true, get_string('sendanddelete', 'forumng'));
+
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        if (!empty($data['emailadd'])) {
+            $emails = preg_split('~[; ]+~', $data['emailadd']);
+            if (count($emails) < 1) {
+                $errors['emailadd'] = get_string('invalidemails', 'forumng');
+            } else {
+                foreach ($emails as $email) {
+                    if (!validate_email($email)) {
+                        $errors['emailadd'] = get_string('invalidemails', 'forumng');
+                        break;
+                    }
+                }
+            }
+        }
+        if (!empty($data['notifycontributors']) && empty($data['notifymessage']['text'])) {
+            $errors['notifymessage'] = get_string('required');
+        }
+        return $errors;
+    }
+
+}
diff --git a/mod/forumng/feature/delete/forumngfeature_delete.php b/mod/forumng/feature/delete/forumngfeature_delete.php
new file mode 100644
index 0000000..85a6926
--- /dev/null
+++ b/mod/forumng/feature/delete/forumngfeature_delete.php
@@ -0,0 +1,62 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Delete.
+ * @package forumngfeature
+ * @subpackage delete
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_delete extends forumngfeature_discussion {
+    public function get_order() {
+        return 400;
+    }
+
+    public function should_display($discussion) {
+        global $USER;
+        // Display even if deleted.
+        // Display to those without capability if:
+        // First post author, no replies + they can edit first post.
+        if ($discussion->can_manage()) {
+            return true;
+        }
+        $root = $discussion->get_root_post();
+        $childposts = $root->has_children();
+        $creator = $discussion->get_poster();
+        if ($creator->id == $USER->id && !$childposts && $root->can_edit($whynot)) {
+            return true;
+        }
+        return false;
+    }
+
+    public function display($discussion) {
+        global $USER;
+
+        $childposts = $discussion->get_root_post()->has_children();
+        $creator = $discussion->get_poster();
+        $deleted = $discussion->is_deleted();
+        $extrahtml = '';
+        if (!$deleted && ($childposts || $creator->id != $USER->id)) {
+            $extrahtml = '<div class="forumng_deldiscussion"></div>';
+        }
+        return parent::get_button($discussion,
+            $discussion->is_deleted() ? get_string('undelete', 'forumng')
+                : get_string('delete'),
+            'feature/delete/delete.php', false,
+            array('delete' => ($discussion->is_deleted() ? 0 : 1)), $extrahtml);
+    }
+}
diff --git a/mod/forumng/feature/delete/lang/en/forumngfeature_delete.php b/mod/forumng/feature/delete/lang/en/forumngfeature_delete.php
new file mode 100644
index 0000000..79ae2ad
--- /dev/null
+++ b/mod/forumng/feature/delete/lang/en/forumngfeature_delete.php
@@ -0,0 +1,63 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage delete
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['deletediscussion'] = 'Delete discussion';
+$string['undeletediscussion'] = 'Undelete discussion';
+$string['confirmdeletediscussion'] = 'Are you sure you want to delete this discussion?';
+$string['confirmundeletediscussion'] = 'Are you sure you want to undelete this discussion?';
+$string['pluginname'] = 'Delete/undelete discussion';
+$string['deleteandemail'] = 'Delete and email';
+$string['emailcontentplain'] = 'This is a notification to advise you that a discussion you have
+started with the following details has been deleted by \'{$a->firstname} {$a->lastname}\':
+
+Subject: {$a->subject}
+Forum: {$a->forum}
+Module: {$a->course}';
+
+
+$string['emailcontenthtml'] = 'This is a notification to advise you that a discussion you have
+started  with the following details has been deleted by \'{$a->firstname} {$a->lastname}\':<br />
+<br />
+Subject: {$a->subject}<br />
+Forum: {$a->forum}<br />
+Module: {$a->course}<br/>
+<br/>';
+
+$string['notifycontributors'] = 'Notify other contributors';
+$string['notifycontributors_help'] = 'Notify contributors who have posted or replied to posts';
+$string['notifycontributorsemailcontentplain'] = 'This is a notification to advise you that a discussion you have contributed to
+with the following details has been deleted by \'{$a->firstname} {$a->lastname}\':
+
+Subject: {$a->subject}
+Forum: {$a->forum}
+Module: {$a->course}';
+
+
+$string['notifycontributorsemailcontenthtml'] = 'This is a notification to advise you that  a discussion you have contributed to
+with the following details has been deleted by \'{$a->firstname} {$a->lastname}\':<br />
+<br />
+Subject: {$a->subject}<br />
+Forum: {$a->forum}<br />
+Module: {$a->course}<br/>
+<br/>';
diff --git a/mod/forumng/feature/delete/lang/es/forumngfeature_delete.php b/mod/forumng/feature/delete/lang/es/forumngfeature_delete.php
new file mode 100644
index 0000000..e47cc0f
--- /dev/null
+++ b/mod/forumng/feature/delete/lang/es/forumngfeature_delete.php
@@ -0,0 +1,29 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage delete
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['deletediscussion'] = 'Eliminar tema';
+$string['undeletediscussion'] = 'Restaurar tema';
+$string['confirmdeletediscussion'] = '¿Estás seguro de querer eliminar este tema?';
+$string['confirmundeletediscussion'] = '¿Estás seguro de querer restaurar este tema?';
+$string['pluginname'] = 'Eliminar/Restaurar tema';
diff --git a/mod/forumng/feature/delete/lang/fr/forumngfeature_delete.php b/mod/forumng/feature/delete/lang/fr/forumngfeature_delete.php
new file mode 100644
index 0000000..4566bd0
--- /dev/null
+++ b/mod/forumng/feature/delete/lang/fr/forumngfeature_delete.php
@@ -0,0 +1,29 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage delete
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['deletediscussion'] = 'Supprimer la discussion';
+$string['undeletediscussion'] = 'Restaurer la discussion';
+$string['confirmdeletediscussion'] = 'Etes-vous sûr de vouloir supprimer cette discussion ?';
+$string['confirmundeletediscussion'] = 'Etes-vous sûr de vouloir restaurer cette discussion ?';
+$string['pluginname'] = 'Suppression/Restauration de discussion';
diff --git a/mod/forumng/feature/delete/lang/he/forumngfeature_delete.php b/mod/forumng/feature/delete/lang/he/forumngfeature_delete.php
new file mode 100644
index 0000000..49943eb
--- /dev/null
+++ b/mod/forumng/feature/delete/lang/he/forumngfeature_delete.php
@@ -0,0 +1,29 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage delete
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['deletediscussion'] = 'מחיקת דיון';
+$string['undeletediscussion'] = 'שחזור דיון אשר נמחק';
+$string['confirmdeletediscussion'] = 'האם אתם בטוחים שאתם מעוניינים למחוק דיון זה?';
+$string['confirmundeletediscussion'] = 'האם אתם בטוחים שאתם מעוניינים לשחזר דיון זה?';
+$string['pluginname'] = 'מחיקת/שחזור דיון';
diff --git a/mod/forumng/feature/delete/tests/behat/basic.feature b/mod/forumng/feature/delete/tests/behat/basic.feature
new file mode 100644
index 0000000..1f8f63b
--- /dev/null
+++ b/mod/forumng/feature/delete/tests/behat/basic.feature
@@ -0,0 +1,135 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature
+Feature: Delete discussions
+  In order to delete discussions
+  As a user
+  I need to have access to the delete feature
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum name |
+      | Forum introduction | Test forum description |
+    And I log out
+
+  Scenario: Access forum as student
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    When I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    Then "Delete" "button" should exist
+    Given I reply to post "1" with the following data:
+      | Message | def |
+    Then "Delete" "button" should not exist in the "#forumng-features" "css_element"
+    Given I follow "Test forum name"
+    When I add a discussion with the following data:
+      | Subject | Discussion 1a |
+      | Message | abcdef |
+    Given I press "Delete"
+    When I press "Cancel"
+    Then I should see "abcdef"
+    Given I press "Delete"
+    When I press "Delete"
+    Then I should not see "Discussion 1a"
+    Given I log out
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1a"
+    When I press "Undelete"
+    And I press "Cancel"
+    Then I should see "abcdef"
+    Given I press "Undelete"
+    And I press "Undelete"
+    Then "Delete" "button" should exist
+    Given I press "Delete"
+    When I press "Delete and email"
+    Then I should see "Delete and email author"
+    And I should not see "Notify other contributors"
+    And I press "Cancel"
+    And I should see "abcdef"
+    Given I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Message | ghi |
+    When I press "Delete"
+    And I press "Delete and email"
+    Then I should see "Notify other contributors"
+
+  @javascript
+  Scenario: Javascript tests
+    Given I log in as "admin"
+    Given I navigate to "Site policies" node in "Site administration > Security"
+    And I set the field "Maximum time to edit posts" to "1 minutes"
+    And I press "Save changes"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    When I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I log out
+    Given I log in as "student2"
+    And I follow "Course 1"
+    Given I follow "Test forum name"
+    When I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | abc |
+    Then "Delete" "button" should exist
+    Given I follow "Test forum name"
+    When I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Message | reply |
+    Then "Delete" "button" should not exist
+    Given I log out
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    Given I follow "Test forum name"
+    And I follow "Discussion 2"
+    Given I change window size to "large"
+    When I press "Delete"
+    And I click on "Delete" "button" in the ".forumng-confirmdialog .forumng-buttons" "css_element"
+    Then I should see "Delete and email author"
+    And I should not see "Notify other contributors"
+    Given I press "Cancel"
+    When I press "Delete"
+    And I click on "Cancel" "button" in the ".forumng-confirmdialog .forumng-buttons" "css_element"
+    Then ".forumng-confirmdialog" "css_element" should not exist
+    Given I follow "Test forum name"
+    And I follow "Discussion 1"
+    When I click on "Delete" "button" in the "#forumng-features" "css_element"
+    Then "Delete" "button" should exist in the ".forumng-confirmdialog .forumng-buttons" "css_element"
+    And "Delete and email" "button" should exist in the ".forumng-confirmdialog .forumng-buttons" "css_element"
+    And I should see "Delete discussion" in the ".forumng-confirmdialog" "css_element"
+    Given I click on "Delete and email" "button" in the ".forumng-confirmdialog .forumng-buttons" "css_element"
+    Then I should see "Delete and email author"
+    And I should see "Notify other contributors"
+    And I press "Cancel"
+    Given I change window size to "medium"
+    Given I log out
+    And I log in as "student2"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    # Test editing timeout: arbitrary 30 secs as set to 1 min but other steps undertaken take time.
+    And I wait "30" seconds
+    And I follow "Discussion 2"
+    Then "Delete" "button" should not exist
diff --git a/mod/forumng/feature/delete/version.php b/mod/forumng/feature/delete/version.php
new file mode 100644
index 0000000..ebbf74c
--- /dev/null
+++ b/mod/forumng/feature/delete/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage delete
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2013041400;
+$plugin->component = 'forumngfeature_delete';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/deletedposts/classes/event/deleteddiscussions_viewed.php b/mod/forumng/feature/deletedposts/classes/event/deleteddiscussions_viewed.php
new file mode 100644
index 0000000..8adbe54
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/classes/event/deleteddiscussions_viewed.php
@@ -0,0 +1,107 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The forumngfeature_deletedposts view event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace forumngfeature_deletedposts\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The forumngfeature_deletedposts view discussions event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class deleteddiscussions_viewed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+        $this->data['objecttable'] = 'forumng';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' viewed deleted discussion information on the forum with
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:vieweddiscuss', 'forumngfeature_deletedposts');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url($this->other['url']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $url = str_replace('/mod/forumng/feature/deletedposts/', '', $this->other['url']);
+        return array($this->courseid, 'forumng', 'listdeleteddiscussions', $url,
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['url'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/deletedposts/classes/event/deletedposts_viewed.php b/mod/forumng/feature/deletedposts/classes/event/deletedposts_viewed.php
new file mode 100644
index 0000000..0742603
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/classes/event/deletedposts_viewed.php
@@ -0,0 +1,107 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The forumngfeature_deletedposts view event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace forumngfeature_deletedposts\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The forumngfeature_deletedposts view posts event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class deletedposts_viewed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+        $this->data['objecttable'] = 'forumng';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' viewed deleted post information on the forum with
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:viewed', 'forumngfeature_deletedposts');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url($this->other['url']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $url = str_replace('/mod/forumng/feature/deletedposts/', '', $this->other['url']);
+        return array($this->courseid, 'forumng', 'listdeletedposts', $url,
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['url'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/deletedposts/deletedpostslist.php b/mod/forumng/feature/deletedposts/deletedpostslist.php
new file mode 100644
index 0000000..a5b9c94
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/deletedpostslist.php
@@ -0,0 +1,253 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Deletedposts.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/deletedposts/forumngtype_deletedposts.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/deletedposts/locallib.php');
+
+$id = required_param('id', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+$params = array('id' => $id);
+if ($cloneid !== mod_forumng::CLONE_DIRECT) {
+    $params['clone'] = $cloneid;
+}
+$groupid = optional_param('group', 0, PARAM_INT);
+$user = optional_param('user', 0, PARAM_INT);   // Use $user for display purpses not for lower drop down.
+$deleteuser = optional_param('deleteuser', 0, PARAM_INT);
+
+$pageurl = new moodle_url('/mod/forumng/feature/deletedposts/deletedpostslist.php', $params);
+
+// Construct forum variable (will check id is valid).
+$forum = mod_forumng::get_from_cmid($id, $cloneid);
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+// If this is a clone, redirect to original.
+if ($forum->is_clone()) {
+    $forum->redirect_to_original();
+}
+
+// Check that forum can be viewed [Handles all other permissions].
+if (empty($groupid)) {
+    $groupid = mod_forumng::get_activity_group($cm, true);
+}
+$forum->require_view($groupid, 0, true);
+
+if (!$forum->can_manage_discussions()) {
+    print_error('error_cannotmanagediscussion', 'forumng');
+}
+
+// Check that USER can edit posts.
+global $USER;
+
+if (!has_capability('mod/forumng:editanypost', $forum->get_context(), $USER->id)) {
+    print_error('edit_nopermission', 'forumng');
+}
+
+// Get update button, if allowed for current user.
+$strforum = get_string('modulename', 'forum');
+
+$buttontext = $forum->display_search_form();
+
+// Display header. Because this pagelib class doesn't actually have a
+// $buttontext parameter, there has to be a really evil hack.
+$out = $forum->init_page($pageurl, get_string('deletedposts', 'forumngfeature_deletedposts'));
+print $out->header();
+$forum->print_js($cm->id);
+
+// Print ForumNG deleted tabs.
+$gid = 0;
+if (! empty($groupid) && $groupid > 0) {
+    $gid = $groupid;
+}
+
+forumng_feature_deleted_print_tabs('deletedpostslist', $params);
+
+print $out->container_start('forumng-main');
+
+// Get forum type to display main part of page.
+$posts = get_forumng_deleted_discussion_posts($forum, $gid);
+
+if ($posts) {
+    $post = reset($posts);
+}
+
+// Need to filtered posts array.
+$filteredposts = get_filteredposts($posts, $deleteuser, $user);
+if (empty($filteredposts) && $user > 0) {
+    // Invalid user choice set so reset to 0.
+    $user = 0;
+    $filteredposts = get_filteredposts($posts, $deleteuser);
+}
+
+// Get deleted user and creator.
+$yourname = fullname($USER);
+
+// Create the deleted posts creator array.
+$users = array();
+$cname = '';
+if ($user) {
+    $creator = $DB->get_record('user', array('id' => $user), '*', MUST_EXIST);
+    $cname = fullname($creator);
+    $users[$user] = $cname;
+}
+
+// Create the deleted posts deleter array.
+$deleteusers = array($USER->id => $yourname);
+$dname = '';
+if ($deleteuser) {
+    $deleter = $DB->get_record('user', array('id' => $deleteuser), '*', MUST_EXIST);
+    $dname = fullname($deleter);
+    $deleteusers[$deleteuser] = $dname;
+}
+
+$deleteusers[0] = get_string('anyone', 'forumngfeature_deletedposts');
+$users[0] = get_string('all', 'forumngfeature_deletedposts');
+foreach ($posts as $postid => $post) {
+    $deleteduser = $post->get_delete_user();
+    $deleteusers[$deleteduser->id] = fullname($deleteduser);
+    if ($deleteuser == 0 || $deleteduser->id == $deleteuser) {
+        $creatoruser = $post->get_user();
+        $users[$creatoruser->id] = fullname($creatoruser);
+    }
+}
+
+$params = array_merge($forum->get_link_params_array(mod_forumng::PARAM_PLAIN), $params);
+
+$gparams = $params;
+$gparams['user'] = $user;
+$gparams['deleteuser'] = $deleteuser;
+$urlroot = new moodle_url('/mod/forumng/feature/deletedposts/deletedpostslist.php?',  $gparams);
+
+// Display group selector if required.
+groups_print_activity_menu($cm, $urlroot);
+$params['group'] = $gid;
+
+// Set up params for user and deleteuser selectors.
+$dparams = $params;
+$cparams = $params;
+$dparams['user'] = $user;
+$cparams['deleteuser'] = $deleteuser;
+
+$userurl = new moodle_url('/mod/forumng/feature/deletedposts/deletedpostslist.php?',  $cparams);
+$deleteurl = new moodle_url('/mod/forumng/feature/deletedposts/deletedpostslist.php?',  $dparams);
+
+// Display deleted by selector.
+$select = new single_select($deleteurl, 'deleteuser', $deleteusers, $deleteuser, null, 'selectdeleteuser');
+$select->label = get_string('deletedby', 'forumngfeature_deletedposts');
+$output = $OUTPUT->render($select);
+$outl = '<div class="individualselector">'.$output.'</div>';
+echo $outl;
+// Display created by selector.
+$select = new single_select($userurl, 'user', $users, $user, null, 'selectuser');
+$select->label = get_string('createdby', 'forumngfeature_deletedposts');
+$output = $OUTPUT->render($select);
+$outl = '<div class="individualselector">'.$output.'</div>';
+echo $outl;
+
+// Remember userid for future reference.
+$creatorid = $user;
+
+// Set pagename.
+if ($filteredposts) {
+    $post = reset($filteredposts);
+    $user = $post->get_user();
+} else {
+    // If we get here no deleted posts have been found for user and deleteduser.
+    if (!$user) {
+        $cname = get_string('anyone', 'forumngfeature_deletedposts');
+    }
+    if (!$deleteuser) {
+        $dname = get_string('anyone', 'forumngfeature_deletedposts');
+    }
+
+    $deleteddata = new stdClass();
+    $deleteddata->cusername = $cname;
+    $deleteddata->dusername = $dname;
+
+    $info = html_writer::start_div('forumng-deleted-posts-info');
+    $info .= get_string('nodeletedpostsfound', 'forumngfeature_deletedposts', $deleteddata);
+    $info .= html_writer::end_div();
+
+    echo $info;
+}
+
+$out = mod_forumng_utils::get_renderer();
+$options = array(
+        mod_forumng_post::OPTION_NO_COMMANDS => true,
+        mod_forumng_post::OPTION_FIRST_UNREAD => false,
+        mod_forumng_post::OPTION_UNREAD_NOT_HIGHLIGHTED => true,
+        mod_forumng_post::OPTION_EXPANDED => true,
+        mod_forumng_post::OPTION_COMMAND_UNDELETE => true,
+        mod_forumng_post::OPTION_SINGLE_POST => true,
+        mod_forumng_post::OPTION_VIEW_DELETED_INFO => true);
+
+$rootpostoptions  = array(
+        mod_forumng_post::OPTION_NO_COMMANDS => true,
+        mod_forumng_post::OPTION_FIRST_UNREAD => false,
+        mod_forumng_post::OPTION_UNREAD_NOT_HIGHLIGHTED => true,
+        mod_forumng_post::OPTION_EXPANDED => true,
+        mod_forumng_post::OPTION_VIEW_DELETED_INFO => true);
+
+$prevdiscussionid = 0;
+
+foreach ($filteredposts as $postid => $post) {
+    if (!$post->is_root_post()) {
+        $discussion = $post->get_discussion();
+        $discussionid = $discussion->get_id();
+        if ($discussionid != $prevdiscussionid) {
+            // What we need to do is to get the discussion post.
+            $rootpost = $discussion->get_root_post();
+            print $rootpost->display(true, $rootpostoptions);
+            $prevdiscussionid = $discussionid;
+        }
+    } else {
+        print get_string('newdiscussion', 'forumng');
+    }
+
+    echo '<div class="forumng-replies forumng-feature-deletedposts">';
+    print $post->display(true, $options);
+    echo '</div>'; // To deal with replies.
+}
+
+print $out->container_end();
+
+echo '</div>'; // To deal with the tabs.
+
+// Log request.
+$params = array(
+    'context' => $forum->get_context(),
+    'objectid' => $forum->get_id(),
+    'other' => array('url' => $pageurl->out_as_local_url())
+);
+
+$event = \forumngfeature_deletedposts\event\deletedposts_viewed::create($params);
+$event->add_record_snapshot('course_modules', $forum->get_course_module());
+$event->add_record_snapshot('course', $forum->get_course());
+$event->trigger();
+
+// Display footer.
+print $out->footer($course);
diff --git a/mod/forumng/feature/deletedposts/deletepost.php b/mod/forumng/feature/deletedposts/deletepost.php
new file mode 100644
index 0000000..d117361
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/deletepost.php
@@ -0,0 +1,69 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Deletedposts.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/deletedposts/locallib.php');
+
+// Redirect to deletepostlist.php.
+$postid = required_param('p', PARAM_INT);
+$pageparams = array('p' => $postid);
+$pageparams['p'] = $postid;
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone' ]= $cloneid;
+}
+
+$post = mod_forumng_post::get_from_id($postid, $cloneid);
+
+// Get convenience variables.
+$discussion = $post->get_discussion();
+$forum = $post->get_forum();
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+$pageparams['id'] =  $cm->id;
+$delete = optional_param('delete', 0, PARAM_INT);
+$groupid = optional_param('group', 0, PARAM_INT);
+$pageparams['group'] = $groupid;
+
+// Set up page.
+$pagename = get_string($delete ? 'deletepost' : 'undeletepost', 'forumng',
+        $post->get_effective_subject(true));
+$url = new moodle_url('/mod/forumng/feature/deletedposts/deletepost.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+// Do all access security checks.
+$post->require_view();
+$whynot = '';
+if (!$post->can_undelete($whynot)) {
+    print_error($whynot, 'forumng');
+} else {
+    // Undelete the post.
+    $post->undelete();
+}
+
+$pageurl = new moodle_url('/mod/forumng/feature/deletedposts/deletedpostslist.php', $pageparams);
+
+redirect($pageurl);
diff --git a/mod/forumng/feature/deletedposts/discuss.php b/mod/forumng/feature/deletedposts/discuss.php
new file mode 100644
index 0000000..e3bdf2b
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/discuss.php
@@ -0,0 +1,38 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Deletedposts.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+
+// Redirect to discuss.php.
+
+$discussionid = required_param('d', PARAM_INT);
+$pageparams = array('d' => $discussionid);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone' ]= $cloneid;
+}
+
+$pageurl = new moodle_url('/mod/forumng/discuss.php', $pageparams);
+
+redirect($pageurl);
diff --git a/mod/forumng/feature/deletedposts/forumngfeature_deletedposts.php b/mod/forumng/feature/deletedposts/forumngfeature_deletedposts.php
new file mode 100644
index 0000000..b535203
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/forumngfeature_deletedposts.php
@@ -0,0 +1,41 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Deletedposts.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_deletedposts extends forumngfeature_discussion_list {
+    public function get_order() {
+        return 400;
+    }
+
+    public function should_display($forum) {
+        $candisplay = parent::should_display($forum)
+        && !($forum->is_shared() || $forum->is_clone());
+        return $candisplay;
+    }
+
+    public function display($forum) {
+        $name = get_string('viewdeleted',  'forumngfeature_deletedposts');
+        $script = 'feature/deletedposts/list.php';
+        return parent::get_button($forum, $name, $script);
+    }
+
+}
diff --git a/mod/forumng/feature/deletedposts/forumngtype_deletedposts.php b/mod/forumng/feature/deletedposts/forumngtype_deletedposts.php
new file mode 100644
index 0000000..4dddcd1
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/forumngtype_deletedposts.php
@@ -0,0 +1,151 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Deletedposts.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once($CFG->dirroot . '/mod/forumng/feature/deletedposts/forumngfeature_deletedposts.php');
+
+/**
+ * Displays the view page (usually showing a list of discussions).
+ * @param mod_forumng $forum Forum
+ * @param int $groupid Group ID
+ */
+function print_view_page($forum, $groupid) {
+    global $PAGE;
+    $out = mod_forumng_utils::get_renderer();
+    $forumngid = $forum->get_id();
+    $baseurl = 'list.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN);
+
+    $sortorder = optional_param('sort', '' , PARAM_ALPHA);
+    if (!$sortorder) {
+        $sortlink = optional_param('sortlink', '' , PARAM_ALPHA);
+        if ($sortlink) {
+            $sortorder = $sortlink;
+        } else {
+            $sortorder = 'd';
+        }
+    }
+
+    $page = optional_param('page', 0, PARAM_INT);
+    if (!$page) {
+        $page = 1;
+    }
+
+    $baseurl .= '&page='.$page;
+
+    $sortchar = substr($sortorder, 0, 1);
+    if (strlen($sortorder) == 2) {
+        $sortreverse = (substr($sortorder, 1, 1) == 'r') ? true : false;
+    } else {
+        $sortreverse = false;
+    }
+
+    $baseurl .= '&sort='.$sortchar;
+    $baseurl .= ($sortreverse) ? 'r':'';
+
+    $sort = mod_forumng::get_sort_code($sortchar);
+
+    $list = $forum->get_discussion_list($groupid, $forum->can_view_hidden(),
+            $page, $sort, $sortreverse);
+
+    $normal = $list->get_normal_discussions();
+
+    $fg = new forumngtype_general();
+    // Remove discussions from list if the forumtype thinks we can't see them or they are not deleted.
+    foreach ($normal as $key => $value) {
+        if (! $fg->can_view_discussion($value) || !$value->is_deleted()) {
+            unset($normal[$key]);
+        }
+    }
+
+    $pagecount = get_page_count(count($normal), $page);
+    // Intro.
+    print $out->render_introduction($forum);
+
+    print display_paging_bar($baseurl, $pagecount, $page);
+
+    if (count($normal) > 0) {
+        print $out->render_discussion_list_start(
+               $forum, $groupid, $baseurl, $sort, $sortreverse);
+        foreach ($normal as $discussion) {
+            if ($discussion->is_deleted()) {
+                print $out->render_discussion_list_item($discussion, $groupid,
+                        $discussion == end($normal));
+            }
+        }
+        print $out->render_discussion_list_end($forum, $groupid);
+    } else {
+        print '<p class="forumng-nodiscussions">' .
+                get_string('nodeleteddiscussions', 'forumngfeature_deletedposts') . '</p>';
+    }
+
+    print display_paging_bar($baseurl, $pagecount, $page);
+
+}
+
+/**
+ * Displays a Moodle standard paging bar for this result.
+ * @param string $baseurl Base URL (may include page= if you like)
+ * @return string HTML code for paging bar
+ */
+function display_paging_bar($baseurl, $pagecount, $page) {
+    // Don't do anything if no pages.
+    if ($pagecount < 2) {
+        return '';
+    }
+
+    // Remove page= if included and append &.
+    $baseurl = preg_replace('~&page=[0-9]+~', '', $baseurl) . '&';
+    $out = mod_forumng_utils::get_renderer();
+    $result = $out->render(new paging_bar($pagecount,
+            $page-1, 1, htmlspecialchars($baseurl)));
+    // This is really damn annoying but discussionlist pages start from 1
+    // not 0, so need to change the params.
+    $result = preg_replace_callback('~(&amp;page=)([0-9]+)~',
+            'munge_page_number', $result);
+
+    return $result;
+}
+
+function munge_page_number($matches) {
+    // Always add &page= to the paging bar url no matter if it is the first page.
+    return $matches[1] . ($matches[2]+1);
+}
+
+function get_page_count($count, &$page) {
+    global $CFG;
+    // Check page index makes sense.
+    $pagecount = ceil($count / $CFG->forumng_discussionsperpage);
+    if ($pagecount < 1) {
+        $pagecount = 1;
+    }
+    if (($page > $pagecount || $page < 1) ) {
+        if ($ignoreinvalidpage) {
+            $page = 1;
+        } else {
+            throw new coding_exception("Invalid page \$page, expecting 1.. ".$pagecount);
+        }
+    }
+
+    return $pagecount;
+
+}
diff --git a/mod/forumng/feature/deletedposts/internaldoc/deletedposts.txt b/mod/forumng/feature/deletedposts/internaldoc/deletedposts.txt
new file mode 100644
index 0000000..f944c59
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/internaldoc/deletedposts.txt
@@ -0,0 +1,32 @@
+== OU ForumNG View Deleted Posts Feature ==
+
+=== Description ===
+
+Display deleted discussions/posts within forumNG.
+
+Participation is defined as:
+
+* discussions deleted
+* posts deleted
+
+=== Capability requirements ===
+
+A user will be considered as participating in a forum if they have the capability to delete a discussion and delete to a post within
+the context of the current forum instance and are not considered an adminstrator
+by standard Moodle legacy roles and capabilities.
+
+A user who has the capability '''mod/forumng:managediscussions''' and has access to the current forum
+can view all deleted discussions and posts, subject to the groupmode settings and their membership of those groups.
+(A user who has the capability '''moodle/site:accessallgroups''' will be able to see all groups regardless of
+personal membership).
+
+=== Deleted page display ===
+
+From the fourum page the button to access the View deleted screens is 'View deleted' which takes you to the deleted discussions
+list screen.
+If you have the ability to '''mod/forumng:managediscussions''' you will be presented with a Group dropdown if the forum has been
+set up for groups, and 2 tabs are also displayed. The 'Deleted discusions' tabs is inactive and the 'Deleted posts' tab will take
+you to the 'Deleted posts' page. The page will also show deleted discussions for that forum.
+
+To view deleted posts click on the tab link 'Deleted posts'. This will take you to a screen containing
+deleted posts and any discussion start posts for that forum. Posts can be undeleted from this page by click the 'Undelete' button
diff --git a/mod/forumng/feature/deletedposts/internaldoc/testcase.viewdeleted.txt b/mod/forumng/feature/deletedposts/internaldoc/testcase.viewdeleted.txt
new file mode 100644
index 0000000..57cca2a
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/internaldoc/testcase.viewdeleted.txt
@@ -0,0 +1,186 @@
+This script describes steps to test the view deleted discussions
+and posts facility from an user perspective. It is intended to
+cover most of the UI and features.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script follow on from each other and aren't independent.
+
+Initial setup
+=============
+
+This test case requires:
+
+- a course which has at least two groups defined (G1 and G2).
+- four test student users (U.S1and U.S1a who are in group G1, and U.S2 and U.S2a, in group G2).
+- one editing teacher (U.ET)
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+The completion system must be enabled for (a) the site, and (b) the test
+course.
+
+CRE Creating forums and data
+============================
+
+CRE01 / admin
+  In your test course, create a forum called CRE01
+  Edit forum settings so that:
+
+  Under 'Common module' settings
+  Choose 'Seperate groups' from Group mode
+  Leave 'Grouping' set to 'None'
+  Leave 'Visible' to 'Show'
+
+  Click on Save and display submit button
+
+CRE02 / admin
+  Go into the forum you have just created and start a seperate discussion (GD1 and GD2) for each group
+  For each discussion create a post
+
+CRE03 / U.S1 [change]
+  Go to forum CRE01 (you should be in group G1).
+  Reply to start discussion post created by admin user
+
+CRE04 / U.S1a [change]
+  Go to forum CRE01 (you should be in group G1).
+  Reply to post created by U.S1 user
+
+CRE05 / U.S2 [change]
+  Go to forum CRE01 (you should be in group G2).
+  Reply to start discussion post created by admin user
+
+CRE05 / U.S2a [change]
+  Go to forum CRE01 (you should be in group G2).
+  Reply to post created by U.S2 user
+
+CRE06 / U.ET [change]
+  Go to forum CRE01.
+  Click against 'View deleted'
+
+VDD Viewing Deleted Discussions
+===============================
+
+VDD01
+  This should bring up the deleted discussions list page.
+  The page should have 2 tabs on it 'Deleted discussions'
+  and 'Deleted posts' tabs. The tabs should default to
+  the 'Deleted discussions' tab, and since no discussions
+  have yet been deleted a 'There are no deleted discussions for
+  this forum' message should be displayed.
+
+VDD02
+  Go to forum CRE01.
+  Go to discussion GD1.
+  Delete discussion GD1.
+  Go to forum CRE01 check that GD1 has been deleted.
+  Click against  'View deleted'.
+  GD1 should be shown has deleted.
+
+VDD03
+  Click on the GD1 discussion link.
+  This should take you back to discussion GD1.
+  Click against 'Undelete' and confirm the undelete.
+  This should take you back to discussion GD1.
+  Go to forum CRE01.
+  Click against 'View deleted'
+  This should be the same as VDD01 above.
+
+
+VDP Viewing Deleted Posts
+=========================
+
+VDP01 / U.ET
+  Go to forum CRE01.
+  Click against 'View deleted'
+
+
+VDP02
+  Click on the 'Deleted posts' tab. This should bring up
+  the deleted posts list page.
+
+  The page should have 2 tabs on it 'Deleted discussions'
+  and 'Deleted posts' tabs. The tabs should default to
+  the 'Deleted posts' tab, and since no posts have yet
+  been deleted a No deleted posts found that were created
+  by Anybody and that were deleted by Anybody' message
+  should be displayed.
+
+  The page should also have 2 dropdowns, 'View deleted
+  posts deleted by' and 'View deleted posts created by'.
+  The first dropdown should contain:
+  Yourname (default)
+  Anyone
+  Followed by a list of each user that has deleted a post (should reflect group filter value).
+  The Second dropdown should contain:
+  All
+  Followed by a list of users that have created a deleted post (should reflect group filter value).
+
+VDP03
+  Go to forum CRE01.
+  Go to discussion GD1
+  Expand U.S1a post and Delete and confirm delete.
+  Go to forum CRE01.
+  Click against 'View deleted'
+  Choose the 'Deleted posts' tab.
+
+VDP04
+  This should bring up page containing the root discussion post and the
+  expanded deleted post slightly indented in.
+  Check the dropdowns to see whether they match as expected has in VDP02
+
+VDP05
+  Undelete post.
+  There should be a confirmation dialogue, select 'Undelete post'.
+  This should return you to the VDP04 discussion page with the post undeleted.
+
+VDP06
+  Go to forum CRE01.
+  Click against 'View deleted'
+  Follow the instruction as per VDP02
+  Check the dropdowns to see whether they match as expected has in VDP02
+
+VDP07 / U.S2 [change]
+   Go to forum CRE01.
+   Go to discussion GD2.
+   Expand U.S2 post and Delete and confirm delete.
+
+VDP08 / U.ET [change]
+  Go to forum CRE01.
+  Click against 'View deleted'
+  Follow the instruction as per VDP02.
+  Check the dropdowns to see whether they match as expected has in VDP02.
+
+VDP09
+  Change the Seperate Groups dropdown to GD1
+  This should produce the message No deleted posts found that were created
+  by Anybody and that were deleted by Anybody' message.
+
+VDP10
+  Change the Seperate Groups dropdown to GD2
+  This should show the deleted post
+  Undelete post and confirm.
+  This should return you to the GD2 discussion page with the post undeleted.
+
+VDDP Viewing Deleted Posts within Deleted Discussions
+=====================================================
+
+This should not be possible. To test
+
+VDDP01
+  Follow steps VDP01 - VPDP04 above.
+
+VDDP02
+  Go to forum CRE01.
+  Click against 'View deleted'
+
+
+VDDP03
+  Follow steps VDD01 - VDD02 above.
+
+VDDP04
+  Click on the 'Deleted posts' tab. This should bring up
+  the deleted posts list page.
+  No posts should be shown.
diff --git a/mod/forumng/feature/deletedposts/lang/en/forumngfeature_deletedposts.php b/mod/forumng/feature/deletedposts/lang/en/forumngfeature_deletedposts.php
new file mode 100644
index 0000000..07f179d
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/lang/en/forumngfeature_deletedposts.php
@@ -0,0 +1,37 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['pluginname'] = 'Delete/undelete posts';
+$string['viewdeleted'] = 'View deleted';
+$string['deletedposts'] = 'Deleted posts';
+$string['deleteddiscussions'] = 'Deleted discussions';
+$string['viewdeletedposts'] = 'View deleted posts';
+$string['deletedby'] = 'View deleted posts deleted by ';
+$string['createdby'] = 'View deleted posts created by ';
+$string['nodeletedpostsfound'] = 'No deleted posts found that were created by {$a->cusername} and that were deleted by {$a->dusername}';
+$string['nodeleteddiscussions'] = 'There are no deleted discussions for this forum';
+$string['anyone'] = 'Anyone';
+$string['all'] = 'All';
+$string['event:vieweddiscuss'] = 'View deleted discussions';
+$string['event:viewed'] = 'View deleted posts';
diff --git a/mod/forumng/feature/deletedposts/lang/es/forumngfeature_deletedposts.php b/mod/forumng/feature/deletedposts/lang/es/forumngfeature_deletedposts.php
new file mode 100644
index 0000000..76a7bb7
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/lang/es/forumngfeature_deletedposts.php
@@ -0,0 +1,35 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['pluginname'] = 'Eliminar/restaurar entradas';
+$string['viewdeleted'] = 'Ver eliminados';
+$string['deletedposts'] = 'Entradas eliminadas';
+$string['deleteddiscussions'] = 'Temas eliminados';
+$string['viewdeletedposts'] = 'Ver entradas eliminadas';
+$string['deletedby'] = 'Ver entradas eliminadas por ';
+$string['createdby'] = 'Ver entradas eliminadas creadas por ';
+$string['nodeletedpostsfound'] = 'No hay entradas eliminadas creadas por {$a->cusername} y que hayan sido eliminadas por {$a->dusername}';
+$string['nodeleteddiscussions'] = 'No hay entradas eliminadas en este foro';
+$string['anyone'] = 'cualquiera';
+$string['all'] = 'todo';
diff --git a/mod/forumng/feature/deletedposts/lang/fr/forumngfeature_deletedposts.php b/mod/forumng/feature/deletedposts/lang/fr/forumngfeature_deletedposts.php
new file mode 100644
index 0000000..c884ad4
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/lang/fr/forumngfeature_deletedposts.php
@@ -0,0 +1,35 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['pluginname'] = 'Effacer/restaurer des messages';
+$string['viewdeleted'] = 'Voir effacés';
+$string['deletedposts'] = 'Messages effacés';
+$string['deleteddiscussions'] = 'Fils de discussion effacés';
+$string['viewdeletedposts'] = 'Voir les messages effacés';
+$string['deletedby'] = 'Voir les messages effacés par ';
+$string['createdby'] = 'Voir les messages effacés créés par ';
+$string['nodeletedpostsfound'] = 'Aucun message créé par {$a->cusername} et effacé par {$a->dusername} n\'a été trouvé';
+$string['nodeleteddiscussions'] = 'Il n\'y a aucun fil de discussion effacé pour ce forum';
+$string['anyone'] = 'Anyone';
+$string['all'] = 'Tous';
diff --git a/mod/forumng/feature/deletedposts/lang/he/forumngfeature_deletedposts.php b/mod/forumng/feature/deletedposts/lang/he/forumngfeature_deletedposts.php
new file mode 100644
index 0000000..bd43538
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/lang/he/forumngfeature_deletedposts.php
@@ -0,0 +1,35 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['pluginname'] = 'מחיקה/שחזור פרסומים';
+$string['viewdeleted'] = 'צפיה בדיונים מחוקים';
+$string['deletedposts'] = 'תגובות מחוקות';
+$string['deleteddiscussions'] = 'דיונים מחוקים';
+$string['viewdeletedposts'] = 'צפיה בתגובות מחוקות';
+$string['deletedby'] = 'צפיה בתגובות מחוקות אשר נמחקו על־ידי ';
+$string['createdby'] = 'צפיה בתגובות מחוקות אשר נוצרו על־ידי ';
+$string['nodeletedpostsfound'] = 'לא קיימים פרסומים מחוקים אשר נוצרו על ידי {$a->cusername} ואשר נמחקו על ידי {$a->dusername}';
+$string['nodeleteddiscussions'] = 'לא קיימים דיונים אשר נמחקו בקבוצת דיון  זו';
+$string['anyone'] = 'כל אחד';
+$string['all'] = 'כולם';
diff --git a/mod/forumng/feature/deletedposts/list.php b/mod/forumng/feature/deletedposts/list.php
new file mode 100644
index 0000000..b91407c
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/list.php
@@ -0,0 +1,108 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This page (list.php) lists the users with in alphabetical order of their
+ * last-name with number of discussions and replies. If there are any
+ * discussions and/or replies a link is printed for displaying all the posts
+ * from that a given user depending on chosen group
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/deletedposts/forumngtype_deletedposts.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/deletedposts/locallib.php');
+
+$id = required_param('id', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+$params = array('id' => $id);
+if ($cloneid !== mod_forumng::CLONE_DIRECT) {
+    $params['clone'] = $cloneid;
+}
+$pageurl = new moodle_url('/mod/forumng/feature/deletedposts/list.php', $params);
+
+// Construct forum variable (will check id is valid).
+$forum = mod_forumng::get_from_cmid($id, $cloneid);
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+// If this is a clone, redirect to original.
+if ($forum->is_clone()) {
+    $forum->redirect_to_original();
+}
+
+// Check that forum can be viewed [Handles all other permissions].
+$groupid = optional_param('group', 0, PARAM_INT);
+if (empty($groupid)) {
+    $groupid = mod_forumng::get_activity_group($cm, true);
+}
+$forum->require_view($groupid, 0, true);
+
+if (!$forum->can_manage_discussions()) {
+    print_error('error_cannotmanagediscussion', 'forumng');
+}
+
+// Get update button, if allowed for current user.
+$strforum = get_string("modulename", "forum");
+
+$buttontext = $forum->display_search_form();
+
+// Display header. Because this pagelib class doesn't actually have a
+// $buttontext parameter, there has to be a really evil hack.
+$out = $forum->init_page($pageurl, get_string('deleteddiscussions', 'forumngfeature_deletedposts'));
+print $out->header();
+$forum->print_js($cm->id);
+
+// Print ForumNG deleted tabs.
+$gid = 0;
+if (! empty($groupid) && $groupid > 0) {
+    $gid = $groupid;
+}
+
+$params['group'] = $gid;
+
+forumng_feature_deleted_print_tabs('list', $params);
+print $out->container_start('forumng-main');
+
+// Display group selector if required.
+groups_print_activity_menu($cm, $CFG->wwwroot . '/mod/forumng/feature/deletedposts/list.php?' .
+        $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+
+// Get forum type to display main part of page.
+print_view_page($forum, $groupid);
+
+print $out->container_end();
+// To deal with showing tabs.
+print '</div>';
+
+// Log request.
+$params = array(
+    'context' => $forum->get_context(),
+    'objectid' => $forum->get_id(),
+    'other' => array('url' => $pageurl->out_as_local_url())
+);
+
+$event = \forumngfeature_deletedposts\event\deleteddiscussions_viewed::create($params);
+$event->add_record_snapshot('course_modules', $forum->get_course_module());
+$event->add_record_snapshot('course', $forum->get_course());
+$event->trigger();
+
+// Display footer.
+print $out->footer($course);
diff --git a/mod/forumng/feature/deletedposts/locallib.php b/mod/forumng/feature/deletedposts/locallib.php
new file mode 100644
index 0000000..4068dd9
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/locallib.php
@@ -0,0 +1,156 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Local library file for forumng.  These are non-standard functions that are used
+ * only by forumng.
+ *
+ * @package forumngfeature
+ * @subpackage deletedposts
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/** Make sure this isn't being directly accessed */
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ *
+ * @param string $selected is the selected tab
+ * @param  array $params url parameters to be encoded
+ */
+function forumng_feature_deleted_print_tabs($selected, $params) {
+    global $CFG;
+
+    $tabrow = array();
+
+    $listurl = new moodle_url('/mod/forumng/feature/deletedposts/list.php', $params);
+    $deletedpostslisturl = new moodle_url('/mod/forumng/feature/deletedposts/deletedpostslist.php', $params);
+
+    $tabrow[] = new tabobject('list',
+            $listurl->out() , get_string('deleteddiscussions', 'forumngfeature_deletedposts'));
+
+    $tabrow[] = new tabobject('deletedpostslist',
+            $deletedpostslisturl->out(), get_string('deletedposts', 'forumngfeature_deletedposts'));
+
+    $tabs = array();
+    $tabs[] = $tabrow;
+    print_tabs($tabs, $selected, array(''), array(''));
+
+    print '<div id="forumng_belowtabs">';
+}
+
+function get_deleted_posts_for_forumng($forumngid, $groupid = 0, $deleteuserid = 0, $creatorid = 0) {
+    global $DB, $CFG, $USER;
+
+    $where = ' fp.deleted != 0';
+    $whereparams = array();
+
+    if (! empty($groupid)) {
+        $where .=  ' AND fd.groupid = ?';
+        $whereparams[] = $groupid;
+    }
+
+    if (! empty($deleteuserid)) {
+        $where .=  ' AND fp.deleteuserid = ?';
+        $whereparams[] = $deleteuserid;
+    }
+
+    if (! empty($creatorid)) {
+        $where .=  ' AND fp.userid = ?';
+        $whereparams[] = $creatorid;
+    }
+
+    $where .= ' AND fd.deleted = ?';
+    $whereparams[] = 0;
+
+    $where .= ' AND fd.forumngid = ?';
+    $whereparams[] = $forumngid;
+
+    $orderby = 'fd.id, fp.id';
+
+    // See line 827 of mod_forumng_post.php.
+    $result = mod_forumng_post::query_posts($where, $whereparams, $orderby, false, false, false, 0, true);
+    return $result;
+}
+
+function get_forumng_deleted_discussion_posts($forum, $groupid = 0, $deleteuserid = 0, $creatorid = 0) {
+    $forumngid = $forum->get_id();
+    // Get deleted posts for this forum by discussion.
+    $rows = get_deleted_posts_for_forumng($forumngid, $groupid, $deleteuserid, $creatorid);
+    $prevdiscussionid = 0;
+    $discussioncount = 0;
+    $deletedpostscount = 0;
+    $result = array();
+    foreach ($rows as $rec) {
+        $discussionfields = mod_forumng_utils::extract_subobject($rec, 'fd_');
+        if ($discussionfields->id != $prevdiscussionid) {
+            $discussion = new mod_forumng_discussion($forum, $discussionfields, false, -1);
+            $prevdiscussionid = $discussionfields->id;
+        }
+        $result[$rec->id] = new mod_forumng_post($discussion, $rec);
+    }
+
+    return $result;
+}
+
+/**
+ * Filters an arreay of forumng posts by deleted and/or created the posts.
+ * @param array $posts array of forumng posts to filtered
+ * @param int $deleteuser id of user who deleted the posts
+ * @param int $creatorid id of user who created the posts
+ * @return array of posts filtered by who deleted and created the posts
+ */
+function get_filteredposts($posts, $deleteuser = 0, $creatorid = 0) {
+    $filteredposts = array();
+    $filtered = false;
+
+    foreach ($posts as $postid => $post) {
+        if ($deleteuser > 0) {
+            $deleteduser = $post->get_delete_user();
+            if ($deleteduser->id == $deleteuser ) {
+                // Check to see whether creator filter set or not.
+                if ($creatorid > 0) {
+                    $creatoruser = $post->get_user();
+                    if ($creatoruser->id == $creatorid) {
+                        // Add to filteredpost array.
+                        $filteredposts[] = $post;
+                    }
+                } else {
+                    // Creator not set, add to filteredpost array.
+                    $filteredposts[] = $post;
+                }
+            }
+            $filtered = true;
+        } else {
+            // Check to see whether creator filter set or not.
+            if ($creatorid > 0) {
+                $creatoruser = $post->get_user();
+                if ($creatoruser->id == $creatorid) {
+                    // Add to filteredpost array.
+                    $filteredposts[] = $post;
+                }
+                $filtered = true;
+            }
+        }
+    }
+
+    if (! $filtered) {
+        $filteredposts = $posts;
+    }
+
+    return $filteredposts;
+}
diff --git a/mod/forumng/feature/deletedposts/tests/behat/basic.feature b/mod/forumng/feature/deletedposts/tests/behat/basic.feature
new file mode 100644
index 0000000..bd371fd
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/tests/behat/basic.feature
@@ -0,0 +1,159 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_deletedposts
+Feature: View deleted discussions and posts
+  In order to view deleted discussions and posts
+  As a teacher
+  I need to access the deletedposts feature pages
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+    And the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And the following "groups" exist:
+      | name    | course | idnumber |
+      | Group 1 | C1     | G1       |
+      | Group 2 | C1     | G2       |
+    And the following "group members" exist:
+      | user | group |
+      | student1 | G1 |
+      | student2 | G2 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test group forum |
+      | groupmode | Separate groups |
+    And I log out
+
+  @javascript
+  Scenario: View deleted discussions
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    When I add a discussion with the following data:
+      | Subject | G1 deleted |
+      | Message | abc |
+    And I follow "Test group forum"
+    And I add a discussion with the following data:
+      | Subject | G1 not deleted |
+      | Message | 123 |
+    And I follow "Test group forum"
+    Then "View deleted" "button" should not exist
+    And I log out
+    Given I log in as "student2"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    When I add a discussion with the following data:
+      | Subject | G2 deleted |
+      | Message | def |
+    And I follow "Test group forum"
+    And I add a discussion with the following data:
+      | Subject | G2 not deleted |
+      | Message | 456 |
+    And I follow "Test group forum"
+    Then "View deleted" "button" should not exist
+    And I log out
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    When I press "View deleted"
+    Then I should see "There are no deleted discussions for this forum"
+    # Delete the 2 'deleted' discussions and check they show.
+    Given I follow "Test group forum"
+    And I follow "G1 deleted"
+    Given I change window size to "large"
+    And I press "Delete"
+    And I click on "Delete" "button" in the ".forumng-confirmdialog .forumng-buttons" "css_element"
+    And I press "Send and delete"
+    Then ".forumng-deleted" "css_element" should exist
+    Given I follow "G2 deleted"
+    And I press "Delete"
+    And I click on "Delete" "button" in the ".forumng-confirmdialog .forumng-buttons" "css_element"
+    And I press "Send and delete"
+    Given I change window size to "medium"
+    Then "//tbody/tr[contains(@class, 'forumng-deleted')][2]" "xpath_element" should exist
+    Given I press "View deleted"
+    Then I should see "G1 deleted"
+    And I should see "G2 deleted"
+    Given I set the field "Separate groups" to "Group 1"
+    Then I should see "G1 deleted"
+    And I should not see "G2 deleted"
+    Given I follow "Deleted posts"
+    Then I should see "No deleted posts found that were created by Anyone and that were deleted by Anyone"
+
+  Scenario: View deleted posts
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    When I add a discussion with the following data:
+      | Subject | G1 discussion |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | REPLY1 |
+    And I expand post "2"
+    When I follow "Delete"
+    And I press "Delete"
+    Then I should see "This post was deleted by"
+    And I log out
+    Given I log in as "student2"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    When I add a discussion with the following data:
+      | Subject | G2 discussion |
+      | Message | 123 |
+    And I reply to post "1" with the following data:
+      | Message | REPLY2 |
+    And I expand post "2"
+    When I follow "Delete"
+    And I press "Delete"
+    Then I should see "This post was deleted by"
+    And I log out
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test group forum"
+    When I press "View deleted"
+    Then I should see "There are no deleted discussions for this forum"
+    Given I follow "Deleted posts"
+    Then I should see "G1 discussion"
+    And I should see "G2 discussion"
+    And I should see "Student 1"
+    And I should see "Student 2"
+    And I should see "REPLY1"
+    And I should see "REPLY2"
+    And the "View deleted posts deleted by" select box should contain "Student 1"
+    And the "View deleted posts deleted by" select box should contain "Student 2"
+    And the "View deleted posts created by" select box should contain "Student 1"
+    And the "View deleted posts created by" select box should contain "Student 2"
+    And the "View deleted posts created by" select box should not contain "Admin User"
+  # Check group and user views.
+    Given I set the field "View deleted posts deleted by" to "Student 1"
+    When I click on "/descendant::input[@value='Go'][2]" "xpath_element"
+    Then I should see "REPLY1"
+    And I should not see "REPLY2"
+    Given I set the field "View deleted posts deleted by" to "Anyone"
+    When I click on "/descendant::input[@value='Go'][2]" "xpath_element"
+    Then I should see "REPLY1"
+    And I should see "REPLY2"
+    Given I set the field "View deleted posts created by" to "Student 2"
+    When I click on "/descendant::input[@value='Go'][3]" "xpath_element"
+    Then I should see "REPLY2"
+    And I should not see "REPLY1"
+    Given I set the field "Separate groups" to "Group 2"
+    When I press "Go"
+    Then I should see "G2 discussion"
+    And I should see "REPLY2"
+    And I should not see "REPLY1"
diff --git a/mod/forumng/feature/deletedposts/version.php b/mod/forumng/feature/deletedposts/version.php
new file mode 100644
index 0000000..cdeda18
--- /dev/null
+++ b/mod/forumng/feature/deletedposts/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage deleteposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2014080800;
+$plugin->component = 'forumngfeature_deletedposts';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/edittags/classes/event/tags_edited.php b/mod/forumng/feature/edittags/classes/event/tags_edited.php
new file mode 100644
index 0000000..45d3621
--- /dev/null
+++ b/mod/forumng/feature/edittags/classes/event/tags_edited.php
@@ -0,0 +1,106 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The forumngfeature_userposts view event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace forumngfeature_edittags\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The forumngfeature_userposts view event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class tags_edited extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+        $this->data['objecttable'] = 'forumng';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' updated forumng with course module id '$this->contextinstanceid'
+                set tags for: Activity level, Group {$this->other['groupid']}";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:editedtags', 'forumngfeature_edittags');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/forumng/feature/edittags/' . $this->other['url']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $url = str_replace('/mod/forumng/feature/edittags/', '', $this->other['url']);
+        return array($this->courseid, 'forumng', 'edit set tags', $url, $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['url'])) {
+            throw new \coding_exception('The \'url\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/edittags/db/access.php b/mod/forumng/feature/edittags/db/access.php
new file mode 100644
index 0000000..50f15a2
--- /dev/null
+++ b/mod/forumng/feature/edittags/db/access.php
@@ -0,0 +1,40 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Capabilities.
+ * @package forumngfeature
+ * @subpackage edittags
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$capabilities = array(
+    'forumngfeature/edittags:managesettags' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW
+       )
+    ),
+    'forumngfeature/edittags:editsettags' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    )
+);
diff --git a/mod/forumng/feature/edittags/edittags.php b/mod/forumng/feature/edittags/edittags.php
new file mode 100644
index 0000000..1a83087
--- /dev/null
+++ b/mod/forumng/feature/edittags/edittags.php
@@ -0,0 +1,125 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Capabilities.
+ * @package forumngfeature
+ * @subpackage edittags
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$d = required_param('d', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+$pageparams = array('d' => $d);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+$forum = $discussion->get_forum();
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+
+$context = $forum->get_context();
+
+// Check forum access (using forum group, if required).
+$groupid = $discussion->get_group_id();
+if (empty($groupid)) {
+    $groupid = mod_forumng::NO_GROUPS;
+}
+
+// Check access.
+$forum->require_view($groupid);
+if (!$forum->can_tag_discussion()) {
+    // Get out of here.
+    print_error('nopermissiontoshow');
+}
+
+$user = $discussion->get_poster();
+if ($USER->id != $user->id) {
+    if (!$discussion->can_manage()) {
+        // Get out of here.
+        print_error('nopermissiontoshow');
+    }
+}
+
+require_once('edittags_form.php');
+
+if ($groupid == mod_forumng::NO_GROUPS || $groupid == mod_forumng::ALL_GROUPS) {
+    $groupid = 0;
+}
+
+$urlparams = array('d' => $d);
+
+if ($cloneid) {
+    $urlparams['clone'] = $cloneid;
+}
+
+$tags = $discussion->get_tags(true);
+
+$forumtags = array();
+foreach ($forum->get_tags_used($groupid, true) as $tag) {
+    $forumtags[$tag->name] = core_tag_tag::make_display_name($tag);
+}
+
+$customdata = array(
+        'options' => array(),
+        'cmid' => $cm->id,
+        'group' => $groupid,
+        'tags' => $tags,
+        'forumtags' => $forumtags,
+        'params' => $urlparams
+);
+
+// Set up page.
+$pagename = get_string('editdiscussiontags', 'forumngfeature_edittags');
+$url = new moodle_url('/mod/forumng/feature/edittags/edittags.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+$mform = new mod_forumng_edittags_form($url, $customdata);
+
+if ($mform->is_cancelled()) {
+    // Form is cancelled, redirect back to the discussion.
+    redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+} else if ($fromform = $mform->get_data()) {
+    if (!isset($fromform->tags)) {
+        $fromform->tags = null;
+    } else if (empty($fromform->tags)) {
+        $fromform->tags = array();
+    }
+    $discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+    $discussion->edit_settings(mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+            mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+            $fromform->tags);
+    redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+} else {
+    $navigation = array();
+    print $out->header();
+    // Require JavaScript (form.js).
+    $forum->print_form_js();
+    $mform->display();
+
+    $PAGE->requires->strings_for_js(array('numberofdiscussions'), 'forumng');
+
+    // Display footer.
+    print $out->footer();
+
+}
diff --git a/mod/forumng/feature/edittags/edittags_form.php b/mod/forumng/feature/edittags/edittags_form.php
new file mode 100644
index 0000000..5797173
--- /dev/null
+++ b/mod/forumng/feature/edittags/edittags_form.php
@@ -0,0 +1,53 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form for email forwarding.
+ * @package forumngfeature
+ * @subpackage edittags
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once($CFG->libdir . '/formslib.php');
+
+class mod_forumng_edittags_form extends moodleform {
+
+    public function definition() {
+        $mform =& $this->_form;
+
+        // Header.
+        $mform->addElement('header', '', get_string('editdiscussiontags', 'forumngfeature_edittags'));
+        $tags = $this->_customdata['tags'];
+
+        // Tag discussion.
+        $tagselect = $mform->addElement('autocomplete', 'tags', get_string('discussiontags', 'forumng'),
+                $this->_customdata['forumtags'], array('tags' => true, 'placeholder' => get_string('entertags', 'tag')));
+        $tagselect->setMultiple(true);
+        $mform->setType('tags', PARAM_TAGLIST);
+        $mform->setDefault('tags', $tags);
+        $mform->addHelpButton('tags', 'discussiontags', 'forumng');
+
+        // Hidden fields.
+        foreach ($this->_customdata['params'] as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+
+        // Add some buttons.
+        $this->add_action_buttons();
+    }
+
+}
diff --git a/mod/forumng/feature/edittags/forumngfeature_edittags.php b/mod/forumng/feature/edittags/forumngfeature_edittags.php
new file mode 100644
index 0000000..9468e64
--- /dev/null
+++ b/mod/forumng/feature/edittags/forumngfeature_edittags.php
@@ -0,0 +1,148 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum feature: flag discussions.
+ *
+ * @package forumngfeature_edittags
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../forumngfeature_discussion_list.php');
+
+/**
+ * This feature lists posts from a user. It appears at the bottom of the
+ * discussion list page.
+ */
+class forumngfeature_edittags extends forumngfeature_discussion {
+
+    public function should_display($discussion) {
+        global $USER;
+
+        if (is_a($discussion, 'mod_forumng_discussion')) {
+            return true;
+        }
+
+        // This is a forum.
+        if (!$discussion->get_tags_enabled()) {
+            return false;
+        } else {
+            // Need to check for capabilities.
+            if (has_capability('forumngfeature/edittags:managesettags', $discussion->get_context())) {
+                return true;
+            } else {
+                $cm = $discussion->get_course_module();
+                if ($discussion->get_group_mode()) {
+                    $allowedgroups = groups_get_activity_allowed_groups($cm);
+                    if (!empty($allowedgroups) &&
+                            has_capability('forumngfeature/edittags:editsettags', $discussion->get_context())) {
+                        return true;
+                    }
+                }
+            }
+        }
+        return false;
+    }
+
+    public function display($discussion) {
+        global $USER;
+        if (is_a($discussion, 'mod_forumng')) {
+            $script = 'feature/edittags/managetags.php';
+            $name = get_string('settags', 'forumngfeature_edittags');
+            return forumngfeature_discussion_list::get_button($discussion, $name, $script, false, array());
+        } else {
+            // It is a discussion so need slightly different set up.
+            $script = 'feature/edittags/edittags.php';
+            $name = get_string('edittags', 'forumngfeature_edittags');
+            $tagout = '';
+            $tags = $discussion->get_tags();
+            if ($tags) {
+                $tagout = html_writer::start_tag('div', array('class' => 'forum-feature-edittags'));
+                $tagout .= html_writer::start_tag('strong');
+                $tagout .= html_writer::tag('span', get_string('discussiontags', 'forumng') . ': ');
+                $tagout .= html_writer::end_tag('strong');
+                $i = 1;
+                foreach ($tags as $key => $value) {
+                    if (count($tags) != $i) {
+                        $tagout .= $value . ', ';
+                    } else {
+                        $tagout .= $value . ' ';
+                    }
+                    $i++;
+                }
+                if ($this->can_edit_tags($discussion)) {
+                    $tagout .= parent::get_button($discussion, $name, $script, false, array('d' => $discussion->get_id()));
+                }
+                $tagout .= html_writer::end_tag('div');
+            } else {
+                if ($this->can_edit_tags($discussion)) {
+                    $tagout = html_writer::start_tag('div', array('class' => 'forum-feature-edittags'));
+                    $tagout .= html_writer::start_tag('strong');
+                    $tagout .= html_writer::tag('span', get_string('nodiscussionset', 'forumngfeature_edittags'));
+                    $tagout .= html_writer::end_tag('strong');
+                    $tagout .= parent::get_button($discussion, $name, $script, false, array('d' => $discussion->get_id()));
+                    $tagout .= html_writer::end_tag('div');
+                }
+            }
+            return $tagout;
+        }
+    }
+
+    public function supports_discussion_list() {
+        return true;
+    }
+
+    /**
+     * Controls the order in which features are displayed. The lowest order
+     * number is displayed first. If two items have the same order, the
+     * tiebreak is the alphabetical order of their class names. Default
+     * behaviour is to return order 500.
+     * @return int Ordering index
+     */
+    public function get_order() {
+        global $PAGE;
+        if ($PAGE->pagetype == 'mod-forumng-discuss') {
+            return 9999999;
+        } else {
+            return parent::get_order();
+        }
+    }
+
+    /**
+     * Checks to see whether user can tag discussions
+     * @param object $discussion
+     * @return boolean
+     */
+    public function can_edit_tags($discussion) {
+        global $USER;
+        // Discussion, get forum details.
+        $cm = $discussion->get_course_module();
+        $forum = $discussion->get_forum();
+
+        if (!$forum->can_tag_discussion()) {
+            return false;
+        }
+        // Check to see whether user created the discussion.
+        $user = $discussion->get_poster();
+        if ($USER->id == $user->id) {
+            return true;
+        } else {
+            return parent::should_display($discussion);
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/edittags/lang/en/forumngfeature_edittags.php b/mod/forumng/feature/edittags/lang/en/forumngfeature_edittags.php
new file mode 100644
index 0000000..af73fb5
--- /dev/null
+++ b/mod/forumng/feature/edittags/lang/en/forumngfeature_edittags.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage edittags
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = ' Add \'Set\' discussion tags at group level';
+$string['editsettags'] = 'Edit \'Set\' discussion tags';
+$string['settags'] = 'Edit Set tags';
+$string['edittags'] = 'Edit tags';
+$string['nodiscussionset'] = 'No discussion tags set ';
+$string['forumtags'] = 'forum';
+$string['event:editedtags'] = 'Set tags added or edited';
+$string['gettagsgrouplabel'] = 'Set tags for {$a}';
+$string['editdiscussiontags'] = 'Edit discussion tags';
+$string['edittags:editsettags'] = 'Edit \'Set\' discussion tags';
+$string['edittags:managesettags'] = 'Manage \'Set\' discussion tags';
+$string['setgrptags'] = 'Set discussion tags';
+$string['setgrptags_help'] = 'Enter group wide \'Set\' tags for use in discussions by entering tags separated by commas';
diff --git a/mod/forumng/feature/edittags/managetags.php b/mod/forumng/feature/edittags/managetags.php
new file mode 100644
index 0000000..90af82f
--- /dev/null
+++ b/mod/forumng/feature/edittags/managetags.php
@@ -0,0 +1,140 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Capabilities.
+ * @package forumngfeature
+ * @subpackage edittags
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$cmid = required_param('id', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+$context = $forum->get_context(true);
+
+// Get group id for forum.
+$groupid = mod_forumng::get_activity_group($cm, true);
+
+$fid = $forum->get_id();
+
+// Check access.
+$forum->require_view($groupid);
+
+$managesettags = has_capability('forumngfeature/edittags:managesettags', $forum->get_context());
+$editsettags = has_capability('forumngfeature/edittags:editsettags', $forum->get_context());
+
+$groupmode = groups_get_activity_groupmode($cm, $course);
+
+$groupsaccessto = array();
+if ($managesettags || $editsettags) {
+    if ($groupmode) {
+        $groupsaccessto = groups_get_activity_allowed_groups($cm);
+        if (!$managesettags && empty($groupsaccessto)) {
+            // Nothing to show - shouldn't get button anyway so error.
+            print_error('nopermissiontoshow');
+        }
+    }
+} else {
+    // Get out of here.
+    print_error('nopermissiontoshow');
+}
+
+require_once('managetags_form.php');
+
+$urlparams = array('id' => $cmid);
+
+if ($cloneid) {
+    $urlparams['clone'] = $cloneid;
+}
+
+$groups = array();
+$managedtags = array();
+if ($managesettags) {
+    $groupdetails = new stdClass();
+    $groupdetails->id = 0;
+    $groupdetails->name = get_string('forumtags', 'forumngfeature_edittags');
+    $groups[] = $groupdetails;
+    // Get forum set tags.
+    $tags = $forum->get_set_tags($fid);
+    $managedtags[] = $tags;
+}
+
+foreach ($groupsaccessto as $group) {
+    $tags = $forum->get_set_tags($fid, $group->id, true);
+    $managedtags[] = $tags;
+    $groups[] = $group;
+}
+
+$customdata = array(
+        'options' => array(),
+        'id' => $cmid,
+        'groups' => $groups,
+        'tags' => $managedtags,
+        'fid' => $fid,
+        'params' => $urlparams
+);
+
+// Set up page.
+$pagename = get_string('editsettags', 'forumngfeature_edittags');
+$url = new moodle_url('/mod/forumng/feature/edittags/managetags.php', $urlparams);
+$out = $forum->init_page($url, $pagename);
+
+$mform = new mod_forumng_managetags_form($url, $customdata);
+
+if ($mform->is_cancelled()) {
+    // Form is cancelled, redirect back to the discussion.
+    redirect('../../view.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+} else if ($fromform = $mform->get_data()) {
+    foreach ($groups as $group) {
+        $settagsindex = 'settags_' . $group->id;
+        if (isset($fromform->$settagsindex)) {
+            if ($group->id) {
+                mod_forumng::set_group_tags($forum->get_id(), $group->id, $fromform->$settagsindex);
+            } else {
+                core_tag_tag::set_item_tags('mod_forumng', 'forumng', $fid, $context, $fromform->$settagsindex);
+            }
+        }
+    }
+    redirect('../../view.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+} else {
+    $navigation = array();
+    print $out->header();
+    $mform->display();
+
+    // Log request.
+    $params = array(
+            'context' => $forum->get_context(),
+            'objectid' => $forum->get_id(),
+            'other' => array('url' => 'managetags.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN), 'groupid' => $groupid)
+    );
+
+    $event = \forumngfeature_edittags\event\tags_edited::create($params);
+    $event->add_record_snapshot('course_modules', $forum->get_course_module());
+    $event->add_record_snapshot('course', $forum->get_course());
+    $event->trigger();
+
+    // Display footer.
+    print $out->footer();
+
+}
diff --git a/mod/forumng/feature/edittags/managetags_form.php b/mod/forumng/feature/edittags/managetags_form.php
new file mode 100644
index 0000000..3890e39
--- /dev/null
+++ b/mod/forumng/feature/edittags/managetags_form.php
@@ -0,0 +1,66 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form for email forwarding.
+ * @package forumngfeature
+ * @subpackage edittags
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once($CFG->libdir . '/formslib.php');
+
+class mod_forumng_managetags_form extends moodleform {
+
+    public function definition() {
+        $mform =& $this->_form;
+        $tags = $this->_customdata['tags'];
+        $groups = $this->_customdata['groups'];
+        // Add tagging to discussions.
+        $mform->addElement('header', '', get_string('editsettags', 'forumngfeature_edittags'));
+
+        $i = 0;
+        foreach ($groups as $group) {
+            if ($group->id === 0) {
+                $options = array('itemtype' => 'forumng', 'component' => 'mod_forumng');
+            } else {
+                $options = array('itemtype' => 'groups', 'component' => 'mod_forumng');
+            }
+            // Add 'Set' forumng wide and group named tags to discussion tagging dropdowns.
+            $mform->addElement('tags', 'settags_' . $group->id, get_string('gettagsgrouplabel',
+                    'forumngfeature_edittags', $group->name), $options);
+            $mform->setType('settags_' . $group->id, PARAM_TAGLIST);
+            $mform->setDefault('settags_' . $group->id, $tags[$i]);
+            if ($group->id == 0) {
+                $mform->addHelpButton('settags_' . $group->id, 'settags', 'forumng');
+            } else {
+                $mform->addHelpButton('settags_' . $group->id, 'setgrptags', 'forumngfeature_edittags');
+            }
+
+            $i++;
+        }
+        // Hidden fields.
+        foreach ($this->_customdata['params'] as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+
+        // Add some buttons.
+        $this->add_action_buttons();
+
+    }
+
+}
diff --git a/mod/forumng/feature/edittags/version.php b/mod/forumng/feature/edittags/version.php
new file mode 100644
index 0000000..eca3f8b
--- /dev/null
+++ b/mod/forumng/feature/edittags/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature_flagdiscussion
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$plugin->version  = 2014120100;
+$plugin->component = 'forumngfeature_edittags';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/export/export.php b/mod/forumng/feature/export/export.php
new file mode 100644
index 0000000..82dba38
--- /dev/null
+++ b/mod/forumng/feature/export/export.php
@@ -0,0 +1,83 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Export to portfolio script. This uses the post selector infrastructure to
+ * handle the situation when posts are being selected.
+ * @package forumngfeature
+ * @subpackage export
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../forumngfeature_post_selector.php');
+
+class export_post_selector extends forumngfeature_post_selector {
+    public function get_button_name() {
+        return get_string('export', 'forumngfeature_export');
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $COURSE, $USER, $CFG;
+
+        if (!$CFG->enableportfolios) {
+            return '';
+        }
+
+        /*
+         * It is necessary to encode the array of selected discussion posts as text in order to
+         * pass the data in the button callback options because it gets filtered as PARAM_ALPHA
+         */
+        if (is_array($selected) && !empty($selected)) {
+            $seltext = implode('x', $selected);
+            $letters = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j');
+            $posts = '';
+            $selarray = str_split($seltext);
+            foreach ($selarray as $char) {
+                $posts .= ($char == 'x')? $char:$letters[$char];
+            }
+        } else {
+            $posts = '';
+        }
+
+        // get the id of the forum
+        $forumobj = $discussion->get_forum();
+        $forumngid = $forumobj->get_id();
+
+        require_once($CFG->libdir . '/portfoliolib.php');
+
+        // check if the forum is shared and pass the cloneid in the callback options
+        $linkparams = $discussion->get_link_params_array();
+        if (array_key_exists('clone', $linkparams)) {
+            $cloneid = $linkparams['clone'];
+        } else {
+            $cloneid = 0;
+        }
+
+        $button = new portfolio_add_button();
+        $button->set_callback_options('forumng_all_portfolio_caller',
+                array('forumngid' => $forumngid,
+                'cloneid' => $cloneid,
+                'posts' => $posts,
+                'discussionid' => $discussion->get_id()),
+                'mod_forumng');
+        $button->set_formats(PORTFOLIO_FORMAT_PLAINHTML);
+
+        // redirect to the export page
+        redirect($button->to_html(PORTFOLIO_ADD_FAKE_URL));
+    }
+}
+
+forumngfeature_post_selector::go(new export_post_selector());
diff --git a/mod/forumng/feature/export/exportall.php b/mod/forumng/feature/export/exportall.php
new file mode 100644
index 0000000..70e17cc
--- /dev/null
+++ b/mod/forumng/feature/export/exportall.php
@@ -0,0 +1,81 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Export to portfolio script. This uses the discussion selector infrastructure to
+ * handle the situation when discussions are being selected.
+ * @package forumngfeature
+ * @subpackage export
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__) . '/../forumngfeature_discussion_selector.php');
+
+class export_discussion_selector extends forumngfeature_discussion_selector {
+    public function get_button_name() {
+        return get_string('export', 'forumngfeature_export');
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $COURSE, $USER, $CFG;
+
+        if (!$CFG->enableportfolios) {
+            return '';
+        }
+
+        /*
+         * It is necessary to encode the array of selected discussion posts as text in order to
+         * pass the data in the button callback options because it gets filtered as PARAM_ALPHA
+         */
+        if (is_array($selected) && !empty($selected)) {
+            $seltext = implode('x', $selected);
+            $letters = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j');
+            $posts = '';
+            $selarray = str_split($seltext);
+            foreach ($selarray as $char) {
+                $posts .= ($char == 'x')? $char:$letters[$char];
+            }
+        } else {
+            $posts = '';
+        }
+
+        // Get the id of the forum.
+        $forumngid = $discussion->get_id();
+
+        require_once($CFG->libdir . '/portfoliolib.php');
+
+        // Check if the forum is shared and pass the cloneid in the callback options.
+        $linkparams = $discussion->get_link_params_array();
+        if (array_key_exists('clone', $linkparams)) {
+            $cloneid = $linkparams['clone'];
+        } else {
+            $cloneid = 0;
+        }
+
+        $button = new portfolio_add_button();
+        $button->set_callback_options('forumng_discussions_portfolio_caller',
+                array('forumngid' => $forumngid,
+                'cloneid' => $cloneid,
+                'discussionids' => $posts),
+                'mod_forumng');
+        $button->set_formats(PORTFOLIO_FORMAT_PLAINHTML);
+
+        // Redirect to the export page.
+        redirect($button->to_html(PORTFOLIO_ADD_FAKE_URL));
+    }
+}
+
+forumngfeature_discussion_selector::go(new export_discussion_selector());
diff --git a/mod/forumng/feature/export/forumngfeature_export.php b/mod/forumng/feature/export/forumngfeature_export.php
new file mode 100644
index 0000000..3ecfbc5
--- /dev/null
+++ b/mod/forumng/feature/export/forumngfeature_export.php
@@ -0,0 +1,73 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: forward posts by email.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_export extends forumngfeature_discussion {
+    public function get_order() {
+        global $PAGE;
+        if ($PAGE->pagetype == 'mod-forumng-view') {
+            return 300;
+        } else {
+            return 1000;
+        }
+    }
+
+    public function display($discussion) {
+        if (is_a($discussion, 'mod_forumng_discussion')) {
+            return parent::get_button($discussion,
+                    get_string('export', 'forumngfeature_export'),
+                    'feature/export/export.php',
+                    false, array(), '', false, true);
+        } else {
+            return forumngfeature_discussion_list::get_button($discussion,
+                    get_string('export', 'forumngfeature_export'), 'feature/export/exportall.php',
+                    false, $_GET, '', 'forumng-dselectorbutton', '', '');
+        }
+    }
+
+    // Always display the Export button
+    public function should_display($discussion) {
+        global $CFG;
+
+        // Check are portfolios enabled.
+        if (!$CFG->enableportfolios) {
+            return false;
+        }
+
+        // Check at there's at least one enabled and visible portfolio plugin.
+        require_once($CFG->libdir . '/portfoliolib.php');
+        $instances = portfolio_instances();
+        if (empty($instances)) {
+            return false;
+        }
+
+        if (is_a($discussion, 'mod_forumng')) {
+            return $discussion->can_view_discussions();
+        }
+
+        return true;
+    }
+
+    public function supports_discussion_list() {
+        return true;
+    }
+}
diff --git a/mod/forumng/feature/export/lang/en/forumngfeature_export.php b/mod/forumng/feature/export/lang/en/forumngfeature_export.php
new file mode 100644
index 0000000..7637a04
--- /dev/null
+++ b/mod/forumng/feature/export/lang/en/forumngfeature_export.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['export'] = 'Export';
+$string['pluginname'] = 'Export posts';
+$string['exportallnodisc'] = 'No discussions selected for export';
diff --git a/mod/forumng/feature/export/lang/es/forumngfeature_export.php b/mod/forumng/feature/export/lang/es/forumngfeature_export.php
new file mode 100644
index 0000000..6add98b
--- /dev/null
+++ b/mod/forumng/feature/export/lang/es/forumngfeature_export.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['export'] = 'Exportar';
+$string['pluginname'] = 'Exportar entradas';
+$string['exportallnodisc'] = 'No se han seleccionado temas para exportar';
diff --git a/mod/forumng/feature/export/lang/fr/forumngfeature_export.php b/mod/forumng/feature/export/lang/fr/forumngfeature_export.php
new file mode 100644
index 0000000..5891b27
--- /dev/null
+++ b/mod/forumng/feature/export/lang/fr/forumngfeature_export.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['export'] = 'Exporter';
+$string['pluginname'] = 'Exportation des messages';
+$string['exportallnodisc'] = 'Aucun fil de discussion sélectionné pour l\'export';
diff --git a/mod/forumng/feature/export/lang/he/forumngfeature_export.php b/mod/forumng/feature/export/lang/he/forumngfeature_export.php
new file mode 100644
index 0000000..9ab01e5
--- /dev/null
+++ b/mod/forumng/feature/export/lang/he/forumngfeature_export.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['export'] = 'יצוא';
+$string['pluginname'] = 'יצוא פרסומים';
diff --git a/mod/forumng/feature/export/portfoliolib.php b/mod/forumng/feature/export/portfoliolib.php
new file mode 100644
index 0000000..f8c8e41
--- /dev/null
+++ b/mod/forumng/feature/export/portfoliolib.php
@@ -0,0 +1,437 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Local library file for forumng.  These are non-standard functions that are used
+ * only by the forumng export feature.
+ *
+ * @package    mod
+ * @subpackage forumng
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or late
+ **/
+
+// Make sure this isn't being directly accessed.
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng_cron.php');
+require_once($CFG->libdir . '/portfolio/caller.php');
+
+abstract class forumng_portfolio_caller_base extends portfolio_module_caller_base {
+    protected $modcontext;
+    protected $files = array();
+
+    // Attachments: array of arrays of stored_file, keyed on versionid
+    protected $attachments = array();
+
+    protected function load_base_data($forumngid) {
+        global $DB, $COURSE;
+
+        $this->forumng = $DB->get_record(
+                'forumng', array('id' => $forumngid), '*', MUST_EXIST);
+
+        if (!empty($COURSE->id) && $COURSE->id == $this->forumng->course) {
+            $course = $COURSE;
+        } else {
+            $course = $DB->get_record(
+                    'course', array('id' => $this->forumng->course), '*', MUST_EXIST);
+        }
+
+        $modinfo = get_fast_modinfo($course);
+        $instances = $modinfo->get_instances_of('forumng');
+        if (!array_key_exists($this->forumng->id, $instances)) {
+            throw new portfolio_caller_exception('error_export', 'forumng');
+        }
+        $this->cm = $instances[$this->forumng->id];
+        $this->modcontext = context_module::instance($this->cm->id);
+    }
+
+    /**
+     * Adds all the files from the given pageversions.
+     * @param array $pageversions
+     */
+    protected function add_files() {
+
+        $fs = get_file_storage();
+
+         /*
+         * decoding the array from letters to numbers, see export.php
+         */
+        if ($this->posts !== '') {
+            $selected = $this->decode_string_to_array();
+        } else {
+            $discussion = mod_forumng_discussion::get_from_id($this->discussionid, $this->cloneid);
+            $rootpost = $discussion->get_root_post();
+            $allposts = array();
+            $rootpost->build_linear_children($allposts);
+            $selected = array();
+            $forum = $discussion->get_forum();
+            foreach ($allposts as $post) {
+                if (!$post->get_deleted() || has_capability('mod/forumng:viewallposts', $forum->get_context())) {
+                    $selected[] = $post->get_id();
+                }
+            }
+        }
+
+        foreach ($selected as $post) {
+            $attach = $fs->get_area_files($this->modcontext->id, 'mod_forumng', 'attachment',
+                        $post, "sortorder, itemid, filepath, filename", false);
+            $this->attachments[$post] = $attach;
+            $embed  = $fs->get_area_files($this->modcontext->id, 'mod_forumng', 'message',
+                    $post, "sortorder, itemid, filepath, filename", false);
+            $this->files = array_merge($this->files, $attach, $embed);
+        }
+
+        $this->set_file_and_format_data($this->files);
+
+        if (empty($this->multifiles) && !empty($this->singlefile)) {
+            $this->multifiles = array($this->singlefile); // copy_files workaround
+        }
+        // If there are files, change to rich/plain
+        if (!empty($this->multifiles)) {
+            $this->add_format(PORTFOLIO_FORMAT_RICHHTML);
+        } else {
+            $this->add_format(PORTFOLIO_FORMAT_PLAINHTML);
+        }
+    }
+
+    /**
+     * @param array $files Array of file items to copy
+     * @return void
+     */
+    protected function copy_files($files) {
+        if (empty($files)) {
+            return;
+        }
+        foreach ($files as $f) {
+            $this->get('exporter')->copy_existing_file($f);
+        }
+    }
+
+    public function get_navigation() {
+        global $CFG;
+
+        $discussion = mod_forumng_discussion::get_from_id($this->discussionid, $this->cloneid);
+        $navlinks[] = array(
+            'name' => $discussion->get_subject(),
+            'link' => $CFG->wwwroot . '/mod/forumng/discuss.php?d='. $discussion->get_id(),
+            'type' => 'title'
+        );
+        return array($navlinks, $this->cm);
+    }
+
+    public function expected_time() {
+        return $this->expected_time_file();
+    }
+
+    public function check_permissions() {
+        $context = context_module::instance($this->cm->id);
+        return (has_capability('mod/forumng:view', $context));
+    }
+
+    public static function display_name() {
+        return get_string('modulename', 'forumng');
+    }
+
+    public function heading_summary() {
+        $discussion = mod_forumng_discussion::get_from_id($this->discussionid, $this->cloneid);
+        return get_string('exportingcontentfrom', 'portfolio', strtolower(get_string('discussion', 'forumng')).
+                ': '.$discussion->get_subject());
+    }
+
+    public static function base_supported_formats() {
+        return array(PORTFOLIO_FORMAT_RICHHTML, PORTFOLIO_FORMAT_PLAINHTML);
+    }
+
+    /**
+     * @param string $name Name to be used in filename
+     * @return string Safe version of name (replaces unknown characters with _)
+     */
+    protected function make_filename_safe($name) {
+        return preg_replace('~[^A-Za-z0-9 _!,.-]~u', '_', $name);
+    }
+
+    protected function decode_string_to_array() {
+        $numbers = array('a' => '0', 'b' => '1', 'c' => '2', 'd' => '3', 'e' => '4',
+                'f' => '5', 'g' => '6', 'h' => '7', 'i' => '8', 'j' => '9');
+        $selarray = '';
+        $array = str_split($this->posts);
+        foreach ($array as $char) {
+            $selarray .= ($char == 'x')? $char:$numbers[$char];
+        }
+
+        return explode('x', $selarray);
+    }
+}
+
+/**
+ * Portfolio class for exporting the contents of an entire discussion.
+ */
+class forumng_all_portfolio_caller extends forumng_portfolio_caller_base {
+    protected $forumngid;
+    protected $cloneid;
+    protected $posts;
+    protected $discussionid;
+    protected $filenames = array();
+    protected $content = '';
+
+    public static function expected_callbackargs() {
+        return array(
+            'forumngid' => true,
+            'cloneid' => true,
+            'posts' => true,
+            'discussionid' => true);
+    }
+
+    public function load_data() {
+        global $DB, $COURSE;
+
+        // Load base data
+        $this->load_base_data($this->forumngid);
+
+        // Get all files used in the discussion or selected posts.
+        $this->add_files();
+    }
+
+    public function get_return_url() {
+        $url = new moodle_url('/mod/forumng/discuss.php',
+                array('d' => $this->discussionid, 'clone' => $this->cloneid));
+        return $url->out(false);
+    }
+
+    public function prepare_package() {
+        global $CFG;
+        $plugin = $this->get('exporter')->get('instance')->get('plugin');
+        /*
+         * decoding the array from letters to numbers, see export.php
+         */
+        if ($this->posts !== '') {
+            $selected = $this->decode_string_to_array();
+        } else {
+            $selected = false;
+        }
+
+        // Set up the start of the XHTML file.
+        $allhtml = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ' .
+                '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">' .
+                html_writer::start_tag('html', array('xmlns' => 'http://www.w3.org/1999/xhtml'));
+        $allhtml .= html_writer::tag('head',
+                html_writer::empty_tag('meta',
+                    array('http-equiv' => 'Content-Type', 'content' => 'text/html; charset=utf-8')) .
+                html_writer::tag('title', get_string('export', 'forumngfeature_export')));
+        $allhtml .= html_writer::start_tag('body') . "\n";
+        $poststext = '';
+        $postshtml = '';
+
+        // we need a discussion object
+        $discussion = mod_forumng_discussion::get_from_id($this->discussionid, $this->cloneid);
+        $discussion->build_selected_posts_email($selected, $poststext, $postshtml,
+                array(mod_forumng_post::OPTION_EXPORT => true));
+        $allhtml .= $postshtml;
+        if ($plugin == 'rtf' && isset($this->discussionids)) {
+            // Support discussions e.g. all into one file.
+            if ($this->discussionid != $this->discussionids[0]) {
+                // Make this text just body if not first discussion.
+                $allhtml = $postshtml;
+            }
+            if ($this->discussionid == $this->discussionids[count($this->discussionids) - 1]) {
+                // Finish the file if last discussion (might be first and last if only 1).
+                $allhtml .= html_writer::end_tag('body') . html_writer::end_tag('html');
+            }
+        } else {
+            // Finish the file.
+            $allhtml .= html_writer::end_tag('body') . html_writer::end_tag('html');
+        }
+
+        // Remove embedded img and attachment paths.
+        $portfolioformat = $this->get('exporter')->get('format');
+        foreach ($this->files as $file) {
+            $filename = $file->get_filename();
+            $urlencfilename = rawurlencode($filename);
+            $portfoliofiledir = $portfolioformat->get_file_directory();
+
+            if ($plugin == 'download') {
+                // non-encoded embedded image filenames.
+                $pattern = '/src="[^"]*'.preg_quote($filename).'\"/';
+                $replace = 'src="'.$portfoliofiledir.$filename.'"';
+                $allhtml = preg_replace($pattern, $replace, $allhtml);
+
+                // urlencoded embedded image filenames.
+                $pattern = '/src="[^"]*'.preg_quote($urlencfilename).'\"/';
+                $replace = 'src="'.$portfoliofiledir.$urlencfilename.'"';
+                $allhtml = preg_replace($pattern, $replace, $allhtml);
+
+                // non-encoded attached filenames.
+                $pattern = '/href="[^"]*'.preg_quote($filename).'\"/';
+                $replace = 'href="'.$portfoliofiledir.$filename.'"';
+                $allhtml = preg_replace($pattern, $replace, $allhtml);
+
+                // urlencoded attached filenames.
+                $pattern = '/href="[^"]*'.preg_quote($urlencfilename).'\"/';
+                $replace = 'href="'.$portfoliofiledir.$urlencfilename.'"';
+                $allhtml = preg_replace($pattern, $replace, $allhtml);
+            }
+
+            if ($plugin == 'rtf') {
+                $pattern = '/src="[^"]*'.$filename.'\"/';
+                $replace = 'src="'.$portfoliofiledir.$filename.'"';
+                $allhtml = preg_replace($pattern, $replace, $allhtml);
+
+                $pattern = '/src=\"http:\/\/.*?'.preg_quote($filename).'.*?\"/';
+                $replace = 'src="'.$portfoliofiledir.$filename.'"';
+                $allhtml = preg_replace($pattern, $replace, $allhtml);
+
+                $pattern = '/src=\"http:\/\/.*?'.preg_quote($urlencfilename).'.*?\"/';
+                $replace = 'src="'.$portfoliofiledir.$filename.'"';
+                $allhtml = preg_replace($pattern, $replace, $allhtml);
+            }
+        }
+
+        $content = $allhtml;
+        if ($plugin == 'rtf' && isset($this->discussionids)) {
+            // Different functionality if multiple discussions.
+            if ($this->discussionid != $this->discussionids[count($this->discussionids) - 1]) {
+                $this->content .= $content;
+                return;
+            } else {
+                $content = $this->content . $content;
+                $forum = mod_forumng::get_from_cmid($this->cm->id, $this->cloneid);
+                $name = $this->make_filename_safe($forum->get_name()) . '.html';
+            }
+        } else {
+            $name = $this->make_filename_safe($discussion->get_subject(true));
+            if (in_array($name, $this->filenames)) {
+                // Make unique filename.
+                for ($a = 1; $a < 100; $a++) {
+                    if (!in_array("$name$a", $this->filenames)) {
+                        $name = "$name$a";
+                        break;
+                    }
+                }
+            }
+            $this->filenames[] = $name;
+            $name .= '.html';
+        }
+
+        $manifest = ($this->exporter->get('format') instanceof PORTFOLIO_FORMAT_RICH);
+
+        $this->copy_files($this->multifiles);
+        $this->get('exporter')->write_new_file($content, $name, $manifest);
+    }
+
+    public function get_sha1() {
+        $filesha = '';
+        if (!empty($this->multifiles)) {
+            $filesha = $this->get_sha1_file();
+        }
+        $bigstring = $filesha;
+
+        return sha1($bigstring);
+    }
+}
+
+/**
+ * Portfolio class for exporting the contents of multiple discussions.
+ */
+class forumng_discussions_portfolio_caller extends forumng_all_portfolio_caller {
+    protected $discussionids;
+
+    public static function expected_callbackargs() {
+        return array(
+                'forumngid' => true,
+                'cloneid' => true,
+                'discussionids' => true);
+    }
+
+    public function heading_summary() {
+        $forum = mod_forumng::get_from_cmid($this->cm->id, $this->cloneid);
+        return get_string('exportingcontentfrom', 'portfolio', strtolower(get_string('forum', 'forumng')).
+                ': ' . $forum->get_name());
+    }
+
+    public function load_data() {
+        global $DB, $COURSE;
+
+        // Load base data
+        $this->load_base_data($this->forumngid);
+
+        // Get all files used in the discussions.
+        if ($this->discussionids == '') {
+            // Fallback in case nothing sent - get every discussion in forum!
+            $this->discussionids = array();
+            $groupid = mod_forumng::get_activity_group($this->cm, true);
+            if ($groupid == -1) {
+                $groupid = null;
+            }
+            $discussions = $DB->get_records('forumng_discussions',
+                    array('forumngid' => $this->cm->instance, 'groupid' => $groupid), '', 'id, postid');
+            foreach ($discussions as $discussionrec) {
+                if (!$discussionrec->postid) {
+                    continue;
+                }
+                $discussion = mod_forumng_discussion::get_from_id($discussionrec->id, $this->cloneid);
+                if ($discussion->can_view()) {
+                    $this->discussionids[] = $discussion->get_id();
+                }
+            }
+        } else {
+            $this->posts = $this->discussionids;// Set so decode works.
+            $this->discussionids = $this->decode_string_to_array();
+            $this->posts = '';
+        }
+        if (empty($this->discussionids)) {
+            throw new moodle_exception('exportallnodisc', 'forumngfeature_export', $this->get_return_url());
+        }
+        foreach ($this->discussionids as $discussionid) {
+            $this->discussionid = $discussionid;
+            $this->add_files();
+        }
+    }
+
+    public function get_return_url() {
+       $url = new moodle_url('/mod/forumng/view.php',
+                array('id' => $this->cm->id, 'clone' => $this->cloneid));
+       return $url->out(false);
+    }
+
+    public function prepare_package() {
+        $baseurl = $this->get_return_url();
+        $this->content = '';
+        foreach ($this->discussionids as $discussionid) {
+            $this->discussionid = $discussionid;
+            parent::prepare_package();
+        }
+    }
+
+    public function get_sha1() {
+        $filesha = '';
+        if (!empty($this->multifiles)) {
+            $filesha = $this->get_sha1_file();
+        }
+        $bigstring = $filesha;
+
+        return sha1($bigstring);
+    }
+
+    public static function base_supported_formats() {
+        return array(PORTFOLIO_FORMAT_RICHHTML);
+    }
+
+    public function get_navigation() {
+        return array(array(), $this->cm);
+    }
+}
diff --git a/mod/forumng/feature/export/tests/behat/basic.feature b/mod/forumng/feature/export/tests/behat/basic.feature
new file mode 100644
index 0000000..70a0f54
--- /dev/null
+++ b/mod/forumng/feature/export/tests/behat/basic.feature
@@ -0,0 +1,123 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_export
+Feature: Export discussions using portfolio
+  In order to make an export of a discussion
+  As a teacher
+  I need to use the export feature
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+    And the following "groups" exist:
+      | name    | course | idnumber |
+      | Group 1 | C1     | G1       |
+      | Group 2 | C1     | G2       |
+    And the following "users" exist:
+      | username | firstname | lastname | email            |
+      | student1 | Student   | 1        | student1@asd.com |
+    And the following "course enrolments" exist:
+      | user     | course | role    |
+      | student1 | C1     | student |
+    And the following "activities" exist:
+      | activity | name        | introduction           | course | idnumber |
+      | forumng  | Test forum  | Test forum description | C1     | forumng1 |
+
+  Scenario: Button not active without portfolio enabled
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    When I follow "Test forum"
+    Then "div.forumngfeature_export" "css_element" should not exist
+
+  Scenario: Button active when portfolio enabled
+    Given the following config values are set as admin:
+      | enableportfolios | 1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I navigate to "Manage portfolios" node in "Site administration > Plugins > Portfolios"
+    And I set the field with xpath "//form[@id='applytodownload']/select" to "Enabled and visible"
+    And I click on "form#applytodownload input[type='submit']" "css_element"
+    And I press "Save"
+    And I am on site homepage
+    And I follow "Course 1"
+    When I follow "Test forum"
+    Then "div.forumngfeature_export" "css_element" should exist
+
+  Scenario: Button not active when cannot view discussions
+    Given the following config values are set as admin:
+      | enableportfolios | 1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I navigate to "Manage portfolios" node in "Site administration > Plugins > Portfolios"
+    And I set the field with xpath "//form[@id='applytodownload']/select" to "Enabled and visible"
+    And I click on "form#applytodownload input[type='submit']" "css_element"
+    And I press "Save"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I navigate to "Permissions" node in "Course administration > Users"
+    And I override the system permissions of "Student" role with:
+      | mod/forumng:viewdiscussion | Prevent |
+    And I log out
+    And I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    When I follow "Test forum"
+    Then "div.forumngfeature_export" "css_element" should not exist
+
+  Scenario: Try and get as far as we can exporting discussions
+    Given the following config values are set as admin:
+      | enableportfolios | 1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I navigate to "Manage portfolios" node in "Site administration > Plugins > Portfolios"
+    And I set the field with xpath "//form[@id='applytodownload']/select" to "Enabled and visible"
+    And I click on "form#applytodownload input[type='submit']" "css_element"
+    And I press "Save"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | Ms1 |
+      | Message | abc |
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | Ms2 |
+      | Message | abc |
+    And I follow "Test forum"
+    When I press "Export"
+    Then I should see "Do you want to include all discussions listed on this page, or only selected discussions"
+    Given I press "All discussions shown"
+    When I follow "Return to where you were"
+    Then I should see "Ms1"
+    Given I press "Export"
+    When I press "Selected discussions"
+    Then I should see "Tick the box beside each discussion you want to include"
+    Given I set the field "Select discussion" to "1"
+    When I press "Confirm selection"
+    Then I should see "Downloading"
+
+  Scenario: Try and get as far as we can exporting a discussion
+    Given the following config values are set as admin:
+      | enableportfolios | 1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I navigate to "Manage portfolios" node in "Site administration > Plugins > Portfolios"
+    And I set the field with xpath "//form[@id='applytodownload']/select" to "Enabled and visible"
+    And I click on "form#applytodownload input[type='submit']" "css_element"
+    And I press "Save"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | Ms1 |
+      | Message | abc |
+    When I press "Export"
+    Then I should see "Do you want to include the entire discussion, or only selected posts"
+    Given I press "Discussion"
+    When I follow "Return to where you were"
+    Then I should see "abc"
+    Given I press "Export"
+    And I press "Selected posts"
+    And I set the field "Select post" to "1"
+    When I press "Confirm selection"
+    Then I should see "Downloading"
diff --git a/mod/forumng/feature/export/version.php b/mod/forumng/feature/export/version.php
new file mode 100644
index 0000000..0c4bf9c
--- /dev/null
+++ b/mod/forumng/feature/export/version.php
@@ -0,0 +1,27 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$plugin->version  = 2013012400;
+$plugin->component = 'forumngfeature_export';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/flagdiscussion/flag.php b/mod/forumng/feature/flagdiscussion/flag.php
new file mode 100644
index 0000000..8d64ca6
--- /dev/null
+++ b/mod/forumng/feature/flagdiscussion/flag.php
@@ -0,0 +1,54 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package forumngfeature_flagdiscussion
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+global $CFG, $USER;
+
+$d = required_param('d', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+// 1 = set flag, 0 = clear it.
+$flag = required_param('flag', PARAM_INT);
+$back = optional_param('back', '', PARAM_ALPHA);
+
+$discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+$forum = $discussion->get_forum();
+
+// Require that you can see this discussion (etc) and flag them.
+$discussion->require_view();
+if (!$discussion->can_flag()) {
+    print_error('flaggingnotallowed', 'forumngfeature_flag');
+}
+
+$discussion->set_flagged($flag, $USER->id);
+
+// Need to redirect back to correct page.
+// If successful it should redirect back to the either to the discussion page (default)
+// or forum main page (if 'back' param sent).
+if (empty($back)) {
+    redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+} else {
+    // Redirect back to view page.
+    redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
+}
diff --git a/mod/forumng/feature/flagdiscussion/forumngfeature_flagdiscussion.php b/mod/forumng/feature/flagdiscussion/forumngfeature_flagdiscussion.php
new file mode 100644
index 0000000..2471cae7
--- /dev/null
+++ b/mod/forumng/feature/flagdiscussion/forumngfeature_flagdiscussion.php
@@ -0,0 +1,63 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum feature: flag discussions.
+ *
+ * @package forumngfeature_flagdiscussion
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../forumngfeature_discussion.php');
+
+/**
+ * This feature lists posts from a user. It appears at the bottom of the
+ * discussion list page.
+ */
+class forumngfeature_flagdiscussion extends forumngfeature_discussion {
+
+    public function get_order() {
+        return 400;
+    }
+
+    public function should_display($discussion) {
+        return $discussion->can_flag();
+    }
+
+    public function display($discussion) {
+        $button = false;
+        $script = 'feature/flagdiscussion/flag.php';
+        if ($discussion->is_flagged()) {
+            $flag = 0;
+            $name = get_string('removeflag', 'forumngfeature_flagdiscussion');
+            $button = true;
+        } else {
+            if (!$discussion->is_deleted()) {
+                $flag = 1;
+                $name = get_string('flagdiscussion', 'forumngfeature_flagdiscussion');
+                $button = true;
+            }
+        }
+
+        if ($button) {
+            $html = parent::get_button($discussion, $name, $script, false,
+                    array('d' => $discussion->get_id(), 'flag' => $flag), '', false, false, 'fng-mobile-on');
+            return html_writer::div($html, "forumng_flagdis fngflg$flag");
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/flagdiscussion/internaldoc/testcase.flagdiscussion.txt b/mod/forumng/feature/flagdiscussion/internaldoc/testcase.flagdiscussion.txt
new file mode 100644
index 0000000..1a75fba
--- /dev/null
+++ b/mod/forumng/feature/flagdiscussion/internaldoc/testcase.flagdiscussion.txt
@@ -0,0 +1,108 @@
+This script describes steps to test the view flagged discussions facility from an user perspective.
+It is intended to cover most of the UI and features.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script follow on from each other and aren't independent.
+
+Initial setup
+=============
+
+This test case requires:
+
+- a test course, with following users enrolled:
+- one test student user (U.S)
+- one editing teacher (U.ET)
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+CRE Creating forums and data
+============================
+
+CRE01 / admin
+  In your test course, create a forum called CRE01.
+  Leave forum settings as default.
+  Click on 'Save and display' submit button.
+
+CRE02 / admin
+  Go into the forum you have just created and create 2 separate discussions - D1 and D2.
+  The post message can have any text.
+
+CRE03 / U.S [change]
+  Go to forum CRE01.
+  Reply to D1 discussion post created by admin user.
+
+TFD Test Flagging Discussions
+=============================
+
+TFD01 / U.ET [change]
+  Go to forum CRE01.
+  Enter discussion D1.
+  Select the 'Flag Discussion' button.
+  - Verify that 'Flag Discussion' button has changed to 'Remove flag'.
+
+TFD02 / U.ET
+  Return to the forum CRE01 main page.
+  - Below the discussion list, a list of flagged discussions should appear.
+  - The discussion you flagged should be listed (discussion name, started by (admin),
+    and date of last post and name of poster (U.S). It should have a flag icon next to it.
+  Select the discussion name D1 in the list of Flagged discussions.
+  - You should be taken to the correct discussion.
+
+TFD03 / U.ET
+  Select the 'Remove flag' button.
+  - Check that 'Remove flag' button has changed to 'Flag discussion'.
+
+TFD04 / U.ET
+  Return to the forum CRE01 main page.
+  - Verify that the the list of flagged discussions has gone.
+  Select discussion D1.
+
+TFD05 / U.ET
+  Select the 'Delete discussion' button and confirm.
+  Return to forum CRE01 main page.
+  - Verify discussion D1 has been deleted (discussion name D1 is struck through and greyed out).
+  Go to discussion D1.
+  - Verify the 'Flag discussion' button is not showing.
+  Select the 'Undelete' button and confirm.
+  - Verify that 'Flag discussion' button is showing.
+
+TFD06 / U.ET
+  Select the 'Flag Discussion' button.
+  Select the 'Delete discussion' button and confirm.
+  Return to forum CRE01 main page.
+  - Verify discussion D1 has been deleted (discussion name D1 is struck through and greyed out).
+  - Below the discussion list, a list of flagged discussions should appear.
+  - The discussion you flagged D1 should be listed (discussion name D1 greyed out and struck through,
+    started by (admin), and date of last post and name of poster (U.S). It should have a flag icon next to it.
+  Go to discussion D1.
+  - Verify that 'Remove flag' button is showing.
+  Select the 'Remove flag' button.
+  Return to forum CRE01 main page.
+  - Verify that there is no list of flagged discussions.
+
+TFD07 / U.ET
+  Enter discussion D2.
+  Select the 'Flag Discussion' button.
+  Return to forum CRE01 main page.
+  - Below the discussion list, a list of flagged discussions should appear.
+  - The discussion you flagged D2 should be listed. It should have a flag icon next to it.
+  Select the flag icon against discussion D2.
+  - Verify the flagged discussion list is removed.
+  Enter discussion D2.
+  Select the 'Flag Discussion' button.
+
+TFD08 / U.S [change]
+  Go to forum CRE01.
+  - Verify that there is no list of flagged discussions.
+
+TFU Test flag discussions usage
+===============================
+
+TFU01 / U.ET [change]
+  Go to forum CRE01.
+  Select the 'Show usage' button.
+  - Verify the 'Most flagged discussions' section is shown.
+  - Verify discussion D2, with count of 1 is listed under 'Most flagged discussions' (as flagged in step TFD08).
diff --git a/mod/forumng/feature/flagdiscussion/lang/en/forumngfeature_flagdiscussion.php b/mod/forumng/feature/flagdiscussion/lang/en/forumngfeature_flagdiscussion.php
new file mode 100644
index 0000000..a42d108
--- /dev/null
+++ b/mod/forumng/feature/flagdiscussion/lang/en/forumngfeature_flagdiscussion.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature_flagdiscussion
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['flagdiscussion'] = 'Flag discussion';
+$string['removeflag'] = 'Remove flag';
+$string['pluginname'] = 'Flag discussion';
+$string['flaggingnotallowed'] = 'You not allowed to flag discussions';
diff --git a/mod/forumng/feature/flagdiscussion/tests/behat/basic.feature b/mod/forumng/feature/flagdiscussion/tests/behat/basic.feature
new file mode 100644
index 0000000..c222c9a
--- /dev/null
+++ b/mod/forumng/feature/flagdiscussion/tests/behat/basic.feature
@@ -0,0 +1,69 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_flagdiscussion
+Feature: View flagged discussions
+  In order to flag a discussion
+  As a student
+  I need to flag discussions
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+    And the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum |
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D1 |
+      | Message | abc |
+    And I press "Flag discussion"
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D2 |
+      | Message | 123 |
+    And I press "Delete"
+    And I press "Delete"
+    And I log out
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D3 |
+      | Message | 456 |
+    And I log out
+
+  Scenario: View flagged discussions
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    And I follow "D1"
+    When I press "Flag discussion"
+    Then "Remove flag" "button" should exist
+    Given I follow "Test forum"
+    When I follow "D3"
+    Then "Flag discussion" "button" should exist
+    # Check flagged display.
+    Given I follow "Test forum"
+    Then I should see "1 flagged discussions"
+    And "form.forumng-flag" "css_element" should exist
+    Given I click on "form.forumng-flag input[type=image]" "css_element"
+    Then I should not see "1 flagged discussions"
+    And "form.forumng-flag" "css_element" should not exist
+    And I log out
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    Then I should see "1 flagged discussions"
+    Given I follow "D2"
+    Then "Flag discussion" "button" should not exist
diff --git a/mod/forumng/feature/flagdiscussion/version.php b/mod/forumng/feature/flagdiscussion/version.php
new file mode 100644
index 0000000..19e0f23
--- /dev/null
+++ b/mod/forumng/feature/flagdiscussion/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature_flagdiscussion
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$plugin->version  = 2014072800;
+$plugin->component = 'forumngfeature_flagdiscussion';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/forumngfeature.php b/mod/forumng/feature/forumngfeature.php
new file mode 100644
index 0000000..707f818
--- /dev/null
+++ b/mod/forumng/feature/forumngfeature.php
@@ -0,0 +1,115 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once(dirname(__FILE__).'/forumngfeature_discussion.php');
+require_once(dirname(__FILE__).'/forumngfeature_discussion_list.php');
+
+/**
+ * Base class for 'forum features' which are facilities that appear at the bottom of
+ * a discussion or discussion list page.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class forumngfeature {
+    /**
+     * Obtains the ID of this forum type. Default implementation cuts
+     * '_forumngfeature' off the class name and returns that.
+     * @return string ID
+     */
+    public function get_id() {
+        return str_replace('forumngfeature_', '', get_class($this));
+    }
+
+    /**
+     * Controls the order in which features are displayed. The lowest order
+     * number is displayed first. If two items have the same order, the
+     * tiebreak is the alphabetical order of their class names. Default
+     * behaviour is to return order 500.
+     * @return int Ordering index
+     */
+    public function get_order() {
+        return 500;
+    }
+
+    /**
+     * Compare function that orders features.
+     * @param forumngfeature $a One feature
+     * @param forumngfeature $b Another feature
+     * @return int 1, -1, or 0 as per usual compare functions
+     */
+    private static function compare($a, $b) {
+        $ordera = $a->get_order();
+        $orderb = $b->get_order();
+        if ($ordera > $orderb) {
+            return 1;
+        }
+        if ($ordera < $orderb) {
+            return -1;
+        }
+        $classa = get_class($a);
+        $classb = get_class($b);
+        if ($classa > $classb) {
+            return 1;
+        }
+        if ($classb < $classa) {
+            return -1;
+        }
+        return 0;
+    }
+
+    /**
+     * Creates a new object of the given named type.
+     * @param $feature Feature name (may be null for default)
+     * @return forumngfeature Feature
+     * @throws mod_forumng_exception If the name isn't valid
+     */
+    public static function get_new($feature) {
+        // Get type name
+        if (!preg_match('~^[a-z][a-z0-9_]*$~', $feature)) {
+            throw new coding_exception("Invalid forum feature name: $feature");
+        }
+        $classname = 'forumngfeature_' . $feature;
+
+        // Require library
+        global $CFG;
+        require_once(dirname(__FILE__) . "/$feature/$classname.php");
+
+        // Create and return type object
+        return new $classname;
+    }
+
+    /**
+     * Returns a new object of each available type.
+     * @return array Array of forumngfeature objects
+     */
+    public static function get_all() {
+        global $CFG;
+        // Get directory listing (excluding simpletest, CVS, etc)
+        $list = core_component::get_plugin_list('forumngfeature');
+
+        // Create array and put one of each object in it
+        $results = array();
+        foreach ($list as $name => $location) {
+            $results[] = self::get_new(str_replace('forumngfeature_', '', $name));
+        }
+
+        // Sort features into order and return
+        usort($results, array('forumngfeature', 'compare'));
+        return $results;
+    }
+}
diff --git a/mod/forumng/feature/forumngfeature_discussion.php b/mod/forumng/feature/forumngfeature_discussion.php
new file mode 100644
index 0000000..5e7d3c5
--- /dev/null
+++ b/mod/forumng/feature/forumngfeature_discussion.php
@@ -0,0 +1,115 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion  features appear at the bottom of a discussion page.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class forumngfeature_discussion extends forumngfeature {
+    /**
+     * Checks whether this feature should be displayed for the current user
+     * in current disscussion.
+     * By default, this checks the discussions's can_manage function and that
+     * the discussion isn't deleted.
+     * @param mod_forumng_discussion $discussion
+     * @return bool True if this should display
+     */
+    public function should_display($discussion) {
+        return $discussion->can_manage() && !$discussion->is_deleted();
+    }
+
+    /**
+     * Can this discussion feature also show on discussion list page?
+     * Whether it should or not is check in should_display()
+     * Defaults to false.
+     * @return bool true if feature supports discussion list as well
+     */
+    public function supports_discussion_list() {
+        return false;
+    }
+
+    /**
+     * @param mod_forumng_discussion $discussion
+     * @return string HTML code for button
+     */
+    public abstract function display($discussion);
+
+    /**
+     * Convenience function for subclasses. Returns HTML code suitable to
+     * use for a button in this area.
+     * @param mod_forumng_discussion $discussion
+     * @param string $name Text of button
+     * @param string $script Name/path of .php script (relative to mod/forumng)
+     * @param bool $post If true, makes the button send a POST request
+     * @param array $options If included, passes these options as well as 'd'
+     * @param string $extrahtml If specified, adds this HTML at end of (just
+     *   inside) the form
+     * @param bool $highlight If true, adds a highlight class to the form
+     * @param bool $selector If true, adds a selector class to the form (indicating that the
+     *   JavaScript post selector should be used)
+     * @param string $extraclass Add extra css class to form
+     * @return string HTML code for button
+     */
+    protected static function get_button($discussion, $name, $script,
+        $post = false, $options = array(), $extrahtml = '', $highlight = false, $selector = false, $extraclass = '') {
+        $method = $post ? 'post' : 'get';
+        $optionshtml = '';
+        $options['d'] = $discussion->get_id();
+        if ($discussion->get_forum()->is_shared()) {
+            $options['clone'] = $discussion->get_forum()->get_course_module_id();
+        }
+        if ($post) {
+            $options['sesskey'] = sesskey();
+        }
+        foreach ($options as $key => $value) {
+            $optionshtml .= '<input type="hidden" name="' . $key .
+                '" value="' . $value . '" />';
+        }
+
+        $class = '';
+        if ($highlight) {
+            $class = 'forumng-highlight';
+        }
+        if ($selector) {
+            $class .= ' forumng-selectorbutton';
+        }
+        $class .= $extraclass;
+        if ($class !== '') {
+            $class = ' class="' . trim($class) . '"';
+        }
+        return "<form method='$method' action='$script' $class><div>" .
+            "$optionshtml<input type='submit' value='$name' />" .
+            "$extrahtml</div></form>";
+    }
+
+    /**
+     * Returns a new object of each available type.
+     * @return array Array of forumngfeature_discussion objects
+     */
+    public static function get_all() {
+        $all = forumngfeature::get_all();
+        $results = array();
+        foreach ($all as $feature) {
+            if (is_a($feature, 'forumngfeature_discussion')) {
+                $results[] = $feature;
+            }
+        }
+        return $results;
+    }
+}
diff --git a/mod/forumng/feature/forumngfeature_discussion_list.php b/mod/forumng/feature/forumngfeature_discussion_list.php
new file mode 100644
index 0000000..31e87ca
--- /dev/null
+++ b/mod/forumng/feature/forumngfeature_discussion_list.php
@@ -0,0 +1,108 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion list features appear at the bottom of a forum main page.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class forumngfeature_discussion_list extends forumngfeature {
+    /**
+     * Checks whether this feature should be displayed for the given user
+     * in current forum.
+     * By default, this checks the discussions's can_manage function and that
+     * the discussion isn't deleted.
+     * @param mod_forumng $forum Forum object
+     * @param int $groupid Group id
+     * @return bool True if this should display
+     */
+    public function should_display($forum) {
+        return $forum->can_manage_discussions();
+    }
+
+    /**
+     * @param mod_forumng $forum
+     * @param int $groupid
+     * @return string HTML code for button
+     */
+    public abstract function display($forum);
+
+    /**
+     * Convenience function for subclasses. Returns HTML code suitable to
+     * use for a button in this area.
+     * @param mod_forumng_discussion $discussion
+     * @param string $name Text of button
+     * @param string $script Name/path of .php script (relative to mod/forumng)
+     * @param bool $post If true, makes the button send a POST request
+     * @param array $options If included, passes these options as well as 'd'
+     * (Must send $_GET for discussion selector buttons)
+     * @param string $afterhtml If specified, adds this HTML at end of (just
+     *   inside) the form
+     * @param string $class Adds a class to the form (set to 'forumng-dselectorbutton'
+     *  to activate discussion selector)
+     * @param string $beforehtml If specified, adds this HTML at start of (just
+     *   inside) the form
+     * @param string $buttonclass If set, adds additional css class to the button
+     * @return string HTML code for button
+     */
+    public static function get_button($forum, $name, $script,
+            $post=false, $options=array(), $afterhtml='', $class='',
+            $beforehtml='', $buttonclass='') {
+        $method = $post ? 'post' : 'get';
+        $optionshtml = '';
+        $options['id'] = $forum->get_course_module_id(true);
+        if ($forum->is_shared()) {
+            $options['clone'] = $forum->get_course_module_id();
+        }
+
+        if ($post) {
+            $options['sesskey'] = sesskey();
+        }
+        foreach ($options as $key => $value) {
+            $optionshtml .= '<input type="hidden" name="' . $key .
+                '" value="' . $value . '" />';
+        }
+        if ($class) {
+            $class = " class='$class'";
+        }
+        if ($buttonclass) {
+            $buttonclass = " class='$buttonclass'";
+        }
+        return "<form $class method='$method' action='$script'><div>" .
+                $beforehtml .
+                "$optionshtml<input type='submit' value='$name'$buttonclass/>" .
+                "$afterhtml</div></form>";
+    }
+
+    /**
+     * Returns a new object of each available type.
+     * @return array Array of forumngfeature_discussion objects
+     */
+    public static function get_all() {
+        $all = forumngfeature::get_all();
+        $results = array();
+        foreach ($all as $feature) {
+            if (is_a($feature, 'forumngfeature_discussion_list') ||
+                    (is_a($feature, 'forumngfeature_discussion')
+                            && $feature->supports_discussion_list())) {
+                $results[] = $feature;
+            }
+        }
+        return $results;
+    }
+}
diff --git a/mod/forumng/feature/forumngfeature_discussion_selector.php b/mod/forumng/feature/forumngfeature_discussion_selector.php
new file mode 100644
index 0000000..b326a54
--- /dev/null
+++ b/mod/forumng/feature/forumngfeature_discussion_selector.php
@@ -0,0 +1,342 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This uses the discussion selector infrastructure to
+ * handle the situation when discussions are being selected.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot . '/mod/forumng/feature/forumngfeature_post_selector.php');
+
+/**
+ * A class that deals with the various HTTP requests involved in selecting
+ * specific discussions (or a whole page of discussions) for processing, either in JavaScript
+ * or non-JavaScript modes. Goes with matching JavaScript code in module.js.
+ *
+ * Example usage, in a file such as forward.php:
+ *
+ * // start of file
+ * require_once('../forumngfeature_discussion_selector.php');
+ *
+ * class forward_post_selector extends forumngfeature_discussion_selector() {
+ *   // class implements the base class methods below
+ * }
+ *
+ * forumngfeature_discussion_selector::go(new forward_post_selector());
+ * // end of file
+ */
+abstract class forumngfeature_discussion_selector extends forumngfeature_post_selector {
+
+    /**
+     * For overriding in subclass. If this feature requires a particular
+     * capability, require it here. The system will already have checked view
+     * permission for the discussion.
+     * @param object $context Moodle context object for forum
+     * @param mod_forumng $forum Forum object
+     */
+    public function require_capability($context, $forum) {
+        // Default makes no extra checks.
+    }
+
+    /**
+     * Return array of discussion types (e.g. deleted) that will have selectors
+     * Use this to limit options available for selection
+     * You must also have an "include" => string added to your discussion list button ouput options
+     * @return array
+     */
+    public function only_discussion_types() {
+        return array();
+    }
+
+    /**
+     * Return array of discussion types (e.g. deleted) that will not have selectors
+     * Use this to limit options available for selection
+     * You must also have an "exclude" => string added to your discussion list button ouput options
+     * @return array
+     */
+    public function exclude_discussion_types() {
+        return array();
+    }
+
+    /**
+     * This function handles all aspects of page processing and then calls
+     * methods in $selector at the appropriate moments.
+     * @param post_selector $selector Object that extends this base class
+     */
+    static public function go($selector) {
+        global $PAGE, $FULLME, $SESSION;
+        $id = required_param('id', PARAM_INT);
+        $cloneid = optional_param('clone', 0, PARAM_INT);
+        $fromselect = optional_param('fromselect', 0, PARAM_INT);
+        $all = optional_param('all', '', PARAM_RAW);
+        $select = optional_param('select', '', PARAM_RAW);
+        $isform = optional_param('postselectform', 0, PARAM_INT);
+        $PAGE->set_url($FULLME);
+
+        // Get basic objects.
+        $forum = mod_forumng::get_from_cmid($id, $cloneid);
+        $forumngid = $forum->get_id();
+        $params = array_merge($_REQUEST, $forum->get_link_params_array());
+        if (optional_param('cancel', '', PARAM_RAW)) {
+            // CALL TYPE 6.
+            redirect('../../view.php?' .
+                    $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+        }
+        $cm = $forum->get_course_module();
+        $course = $forum->get_course();
+        $groupid = mod_forumng::get_activity_group($cm, true);
+
+        // Page name and permissions.
+        $pagename = $selector->get_page_name();
+        $buttonname = $selector->get_button_name();
+        $forum->require_view($groupid);
+        $selector->require_capability($forum->get_context(), $forum);
+
+        if (!($fromselect || $isform || $all)) {
+            // Either an initial request (non-JS) to display the 'dialog' box,
+            // or a request to show the list of posts with checkboxes for selection.
+            // Both types share same navigation.
+            $out = $forum->init_page(new moodle_url('/mod/forumng/view.php', $forum->get_link_params_array()));
+            print $out->header();
+            if (!$select) {
+                // Show initial dialog.
+                print $out->box_start();
+                print html_writer::tag('h2', $buttonname);
+                print html_writer::start_tag('form',
+                        array('action' => $_SERVER['PHP_SELF'], 'method'=>'get', 'id' => 'discsel'));
+                print html_writer::start_tag('div');
+                foreach ($params as $param => $paramval) {
+                    print html_writer::empty_tag('input', array('name' => $param,
+                            'type' => 'hidden', 'value' => $paramval));
+                }
+                print html_writer::tag('p', get_string('selectordiscall', 'forumng'));
+                print html_writer::start_tag('div', array('class' => 'forumng-buttons'));
+                print html_writer::empty_tag('input', array('name' => 'all',
+                        'type' => 'submit', 'value' => get_string('selectoralldisc', 'forumng')));
+                print html_writer::empty_tag('input', array('name' => 'select',
+                        'type' => 'submit', 'value' => get_string('selectorselecteddisc', 'forumng')));
+                print html_writer::empty_tag('input', array('name' => 'cancel',
+                        'type' => 'submit', 'value' => get_string('cancel')));
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('form');
+                print $out->box_end();
+            } else {
+                // Show list of posts to select.
+                print html_writer::start_tag('div', array('class' => 'forumng-selectintro'));
+                print html_writer::tag('p', get_string('selectdiscintro', 'forumng'));
+                print html_writer::end_tag('div');
+                print html_writer::start_tag('form',
+                        array('action' => $_SERVER['PHP_SELF'], 'method'=>'post', 'id' => 'discsel'));
+                print html_writer::start_tag('div');
+                print $forum->get_link_params(mod_forumng::PARAM_FORM);
+                print html_writer::empty_tag('input', array('type' => 'hidden',
+                        'name' => 'fromselect', 'value' => '1'));
+                foreach ($params as $param => $paramval) {
+                    print html_writer::empty_tag('input', array('name' => $param,
+                            'type' => 'hidden', 'value' => $paramval));
+                }
+                // Now show discussions, allow for override at type level if following is no good.
+                if (method_exists($forum->get_type(), 'print_select_page')) {
+                    print $forum->get_type()->print_select_page($forum, $groupid);
+                } else {
+                    // Use default processing, get view and hack in selectors.
+                    ob_start();
+                    $forum->get_type()->print_view_page($forum, $groupid);
+                    $discussionhtml = ob_get_contents();
+                    ob_end_clean();
+                    // Try and hack into the discussion list - must be xhtml...
+                    $doc = new DOMDocument('1.0', 'utf-8');
+                    @$doc->loadHTML($discussionhtml);
+                    $docnew = new DOMDocument('1.0', 'utf-8');
+                    $xpath = new DOMXPath($doc);
+                    $lists = $xpath->query("//table[contains(concat(' ',normalize-space(@class),' '),' forumng-discussionlist ')]");
+                    // Remove all links.
+                    foreach ($lists as $list) {
+                        $links = $xpath->query("//a|//form", $list);
+                        foreach ($links as $node) {
+                            if ($node->nodeName == 'a') {
+                                // Disable links.
+                                $node->removeAttribute('href');
+                            } else {
+                                // Remove any forms.
+                                $node->parentNode->removeChild($node);
+                            }
+                        }
+                        // Add in discussion select.
+                        $rows = $xpath->query("//table[@class='generaltable forumng-discussionlist']
+                                //tr[not(@class) or @class!='forumng-divider']", $list);
+                        for ($a = 0, $len = $rows->length; $a < $len; $a++) {
+                            // Add in select options for each row, checking types.
+                            $row = $rows->item($a);
+                            if ($a == 0) {
+                                $newcell = $doc->createElement('th', get_string('selectorselectdisc', 'mod_forumng'));
+                                $newcell->setAttribute('class', 'header');
+                                $newcell->setAttribute('scope', 'col');
+                                $row->appendChild($newcell);
+                            } else {
+                                $id = $row->getAttribute('id');
+                                if (strpos($id, 'discrow') === false) {
+                                    continue;
+                                }
+                                // Get discussion id from row id as added by renderer.
+                                $id = str_replace('discrow_', '', $id);
+                                // Check if we include checkbox or not.
+                                $classar = explode(' ', $row->getAttribute('class'));
+                                $includematches = array_intersect($selector->only_discussion_types(), $classar);
+                                $excludematches = array_intersect($selector->exclude_discussion_types(), $classar);
+                                if ((count($selector->only_discussion_types()) == 0 || count($includematches) > 0)
+                                        && count($excludematches) == 0) {
+                                    // OK to include, add checkbox and label.
+                                    $select = $doc->createElement('input');
+                                    $select->setAttribute('type', 'checkbox');
+                                    $select->setAttribute('name', "selectd$id");
+                                    $select->setAttribute('id', "selectd$id");
+                                    $label = $doc->createElement('label', get_string('selectorselectdisc', 'mod_forumng'));
+                                    $label->setAttribute('for', "selectd$id");
+                                    $label->setAttribute('class', 'accesshide');
+                                    $newcell = $doc->createElement('td');
+                                    $newcell->setAttribute('class', 'dselect');
+                                    $newcell->appendChild($select);
+                                    $newcell->appendChild($label);
+                                    $row->appendChild($newcell);
+                                } else {
+                                    $newcell = $doc->createElement('td', '&nbsp;');
+                                    $row->appendChild($newcell);
+                                }
+                            }
+                        }
+                        // Keep only discussion list by moving to new xml doc.
+                        $newnode = $docnew->importNode($list, true);
+                        $docnew->appendChild($newnode);
+                    }
+                    print $docnew->saveHTML();
+                }
+
+                print html_writer::start_tag('div', array('class' => 'forumng-selectoutro'));
+                print html_writer::empty_tag('input', array('type' => 'submit',
+                        'value' => get_string('confirmselection', 'forumng')));
+                print html_writer::empty_tag('input', array('type' => 'submit',
+                        'name' => 'cancel', 'value' => get_string('cancel')));
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('form');
+            }
+
+            // Display footer.
+            print $out->footer();
+        } else {
+
+            // Call types 3, 4, and 5 use the form (and may include list of postids).
+            $postids = array();
+            $selectedids = array();
+            foreach ($_POST as $field => $value) {
+                $matches = array();
+                if (!is_array($value) && (string)$value !== '0' &&
+                    preg_match('~^selectd([0-9]+)$~', $field, $matches)) {
+                    $selectedids[] = ($matches[1]);
+                }
+            }
+
+            if (!empty($selectedids)) {
+                // Check access.
+                foreach ($selectedids as $id) {
+                    $discuss = mod_forumng_discussion::get_from_id($id, $cloneid);
+                    if ($discuss->can_view()) {
+                        $postids[] = $id;
+                    }
+                }
+            } else {
+                if (!$all) {
+                    // No slections made.
+                    redirect('../../view.php?' .
+                            $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+                }
+                // Work out discussion list for this page (e.g. selected All).
+                $sortorder = optional_param('sort', 'd' , PARAM_ALPHA);
+                if (isset($SESSION->forumng_discussionlist[$forumngid]->sort)) {
+                    $sortorder = $SESSION->forumng_discussionlist[$forumngid]->sort;
+                }
+                $page = optional_param('page', 1, PARAM_INT);
+                if (isset($SESSION->forumng_discussionlist[$forumngid]->page)) {
+                    $page = $SESSION->forumng_discussionlist[$forumngid]->page;
+                }
+                $sortchar = substr($sortorder, 0, 1);
+                if (strlen($sortorder) == 2) {
+                    $sortreverse = (substr($sortorder, 1, 1) == 'r') ? true : false;
+                } else {
+                    $sortreverse = false;
+                }
+                $sort = mod_forumng::get_sort_code($sortchar);
+
+                $list = $forum->get_discussion_list($groupid, $forum->can_view_hidden(),
+                        $page, $sort, $sortreverse);
+                $discussionsarr = array_merge($list->get_sticky_discussions(), $list->get_normal_discussions());
+                // Double check ID is valid and user can view.
+                for ($a = 0; $a < count($discussionsarr); $a++) {
+                    if ($discussionsarr[$a]->can_view()) {
+                        $postids[] = $discussionsarr[$a]->get_id();
+                    }
+                }
+            }
+
+            $out = $forum->init_page(new moodle_url('/mod/forumng/view.php', $forum->get_link_params_array()), $pagename);
+
+            // Get form to use.
+            $mform = $selector->get_form($forum, $all, $postids);
+            if (!$mform) {
+                // Some options do not need a confirmation form; in that case,
+                // just apply the action immediately.
+                $selector->apply($forum, $all, $postids, null);
+                exit;
+            }
+
+            // Check cancel.
+            if ($mform->is_cancelled()) {
+                redirect('../../view.php?' .
+                        $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+            }
+
+            if ($fromform = $mform->get_data()) {
+                // User submitted form to confirm process, which should now be
+                // applied by selector.
+                $selector->apply($forum, $all, $postids, $fromform);
+                exit;
+            } else {
+                print $out->header();
+                // User requested form either via JavaScript or the other way, and
+                // either with all messages or the whole discussion.
+
+                // Print form.
+                print $mform->display();
+
+                // Print optional content that goes after form.
+                print $selector->get_content_after_form($forum, $all,
+                    $postids, $fromform);
+
+                    // Display footer.
+                print $out->footer();
+            }
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/forumngfeature_post_selector.php b/mod/forumng/feature/forumngfeature_post_selector.php
new file mode 100644
index 0000000..2962044
--- /dev/null
+++ b/mod/forumng/feature/forumngfeature_post_selector.php
@@ -0,0 +1,253 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once(dirname(__FILE__) . '/../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng_cron.php');
+/**
+ * A class that deals with the various HTTP requests involved in selecting
+ * specific posts (or a whole discussion) for processing, either in JavaScript
+ * or non-JavaScript modes. Goes with matching JavaScript code in forumng.js.
+ *
+ * Example usage, in a file such as forward.php:
+ *
+ * // start of file
+ * require_once('../post_selector.php');
+ *
+ * class forward_post_selector extends post_selector() {
+ *   // class implements the base class methods below
+ * }
+ *
+ * post_selector::go(new forward_post_selector());
+ * // end of file
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class forumngfeature_post_selector {
+    /**
+     * For overriding in subclass. If this feature requires a particular
+     * capability, require it here. The system will already have checked view
+     * permission for the discussion.
+     * @param object $context Moodle context object for forum
+     * @param mod_forumng_discussion $discussion Discussion object
+     */
+    public function require_capability($context, $discussion) {
+        // Default makes no extra checks
+    }
+
+    /**
+     * @return string Name of page for display in title etc (default is the
+     *   same as button name)
+     */
+    public function get_page_name() {
+        return $this->get_button_name();
+    }
+
+    /**
+     * @return string Text of button used to activate this feature
+     */
+    public abstract function get_button_name();
+
+    /**
+     * For overriding in subclass. If there is a form, return the form object.
+     * If there is no form, return null.
+     *
+     * NOTE: The form MUST contain a hidden field called 'postselectform' which
+     * MUST always be set to 1.
+     *
+     * @param mod_forumng_discussion $discussion Discussion object
+     * @param bool $all True if whole discussion is selected
+     * @param array $selected Array of selected post IDs (if not $all)
+     * @return object Form object or null if none
+     */
+    public function get_form($discussion, $all, $selected = array()) {
+        return null;
+    }
+
+    /**
+     * For overriding in subclass. Called when posts have been selected. If
+     * there is a form then this is called only once the form has also been
+     * submitted. If there is no form then this is called as soon as posts have
+     * been selected (immediately after get_form). This function must been defined
+     * in your own class on what you want to do after you have selected the posts/discussion
+     * @param mod_forumng_discussion $discussion
+     * @param bool $all
+     * @param array $selected Array of post IDs (if not $all)
+     * @param object $formdata Data from form (if any; null if no form)
+     */
+    public abstract function apply($discussion, $all, $selected, $formdata);
+
+    /**
+     * When displaying the form, extra content (such as an example of the
+     * selected messages) can be displayed after it by overriding this function.
+     * Default returns blank.
+     * @param mod_forumng_discussion $discussion
+     * @param bool $all
+     * @param array $selected Array of post IDs (if not $all)
+     * @param object $formdata Data from form (if any; null if no form)
+     * @return string HTML content to display after form
+     */
+    public function get_content_after_form($discussion, $all, $selected, $formdata) {
+        return '';
+    }
+
+    /**
+     * This function handles all aspects of page processing and then calls
+     * methods in $selector at the appropriate moments.
+     * @param post_selector $selector Object that extends this base class
+     * @param string $rawurl Raw 'name' part of url e.g. '/mod/forumng/feature/frog/frog.php'
+     */
+    public static function go($selector) {
+        global $PAGE, $FULLME;
+        $d = required_param('d', PARAM_INT);
+        $cloneid = optional_param('clone', 0, PARAM_INT);
+        $PAGE->set_url($FULLME);
+
+        $fromselect = optional_param('fromselect', 0, PARAM_INT);
+        $all = optional_param('all', '', PARAM_RAW);
+        $select = optional_param('select', '', PARAM_RAW);
+
+        // Get basic objects
+        $discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+        if (optional_param('cancel', '', PARAM_RAW)) {
+            // CALL TYPE 6
+            redirect('../../discuss.php?' .
+                    $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+        }
+        $forum = $discussion->get_forum();
+        $cm = $forum->get_course_module();
+        $course = $forum->get_course();
+        $isform = optional_param('postselectform', 0, PARAM_INT);
+
+        // Page name and permissions
+        $pagename = $selector->get_page_name();
+        $buttonname = $selector->get_button_name();
+        $discussion->require_view();
+        $selector->require_capability($forum->get_context(), $discussion);
+
+        if (!($fromselect || $isform || $all)) {
+            // Either an initial request (non-JS) to display the 'dialog' box,
+            // or a request to show the list of posts with checkboxes for
+            // selection
+
+            // Both types share same navigation
+            $out = $discussion->init_page($discussion->get_moodle_url(), $pagename);
+            print $out->header();
+            if (!$select) {
+                // Show initial dialog
+                print $out->box_start();
+                print html_writer::tag('h2', $buttonname);
+                print html_writer::start_tag('form',
+                        array('action' => $_SERVER['PHP_SELF'], 'method'=>'get'));
+                print html_writer::start_tag('div');
+                print $discussion->get_link_params(mod_forumng::PARAM_FORM);
+                print html_writer::tag('p', get_string('selectorall', 'forumng'));
+                print html_writer::start_tag('div', array('class' => 'forumng-buttons'));
+                print html_writer::empty_tag('input', array('name' => 'all',
+                        'type' => 'submit', 'value' => get_string('discussion', 'forumng')));
+                print html_writer::empty_tag('input', array('name' => 'select',
+                        'type' => 'submit', 'value' => get_string('selectedposts', 'forumng')));
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('form');
+                print $out->box_end();
+            } else {
+                // Show list of posts to select
+                print html_writer::start_tag('div', array('class' => 'forumng-selectintro'));
+                print html_writer::tag('p', get_string('selectintro', 'forumng'));
+                print html_writer::end_tag('div');
+                print html_writer::start_tag('form',
+                        array('action' => $_SERVER['PHP_SELF'], 'method'=>'post'));
+                print html_writer::start_tag('div');
+                print $discussion->get_link_params(mod_forumng::PARAM_FORM);
+                print html_writer::empty_tag('input', array('type' => 'hidden',
+                        'name' => 'fromselect', 'value' => '1'));
+
+                print $out->render_discussion($discussion, array(
+                        mod_forumng_post::OPTION_NO_COMMANDS => true,
+                        mod_forumng_post::OPTION_CHILDREN_EXPANDED => true,
+                        mod_forumng_post::OPTION_SELECTABLE => true));
+
+                print html_writer::start_tag('div', array('class' => 'forumng-selectoutro'));
+                print html_writer::empty_tag('input', array('type' => 'submit',
+                        'value' => get_string('confirmselection', 'forumng')));
+                print html_writer::empty_tag('input', array('type' => 'submit',
+                        'name' => 'cancel', 'value' => get_string('cancel')));
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('div');
+                print html_writer::end_tag('form');
+            }
+
+            // Display footer
+            print $out->footer();
+        } else {
+            // Call types 3, 4, and 5 use the form (and may include list of postids)
+            if ($all) {
+                $postids = false;
+            } else {
+                $postids = array();
+                foreach ($_POST as $field => $value) {
+                    $matches = array();
+                    if (!is_array($value) && (string)$value !== '0' &&
+                        preg_match('~^selectp([0-9]+)$~', $field, $matches)) {
+                        $postids[] = $matches[1];
+                    }
+                }
+            }
+
+            $out = $discussion->init_page($discussion->get_moodle_url(), $pagename);
+
+            // Get form to use
+            $mform = $selector->get_form($discussion, $all, $postids);
+            if (!$mform) {
+                // Some options do not need a confirmation form; in that case,
+                // just apply the action immediately.
+                $selector->apply($discussion, $all, $postids, null);
+                exit;
+            }
+
+            // Check cancel
+            if ($mform->is_cancelled()) {
+                redirect('../../discuss.php?' .
+                        $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+            }
+
+            if ($fromform = $mform->get_data()) {
+                // User submitted form to confirm process, which should now be
+                // applied by selector.
+                $selector->apply($discussion, $all, $postids, $fromform);
+                exit;
+            } else {
+                print $out->header();
+                // User requested form either via JavaScript or the other way, and
+                // either with all messages or the whole discussion.
+
+                // Print form
+                print $mform->display();
+
+                // Print optional content that goes after form
+                print $selector->get_content_after_form($discussion, $all,
+                    $postids, $fromform);
+
+                    // Display footer
+                print $out->footer();
+            }
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/forward/classes/event/discussion_forwarded.php b/mod/forumng/feature/forward/classes/event/discussion_forwarded.php
new file mode 100644
index 0000000..6cbd180
--- /dev/null
+++ b/mod/forumng/feature/forward/classes/event/discussion_forwarded.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng forward discussion event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace forumngfeature_forward\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng forward discussion event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class discussion_forwarded extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'forumng_discussions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' forwarded a discussion on the forum with the
+            course module id '$this->contextinstanceid' to email {$this->other['info']}";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:discussionforwarded', 'forumngfeature_forward');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\forumng\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'forumng', 'forward discussion', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/forward/classes/post_selector.php b/mod/forumng/feature/forward/classes/post_selector.php
new file mode 100644
index 0000000..e0aa323
--- /dev/null
+++ b/mod/forumng/feature/forward/classes/post_selector.php
@@ -0,0 +1,147 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Email forwarding script. This uses the post selector infrastructure to
+ * handle the situation when posts are being selected.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace forumngfeature_forward;
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/forumng/feature/forward/forward_form.php');
+require_once($CFG->dirroot . '/mod/forumng/feature/forumngfeature_post_selector.php');
+
+class post_selector extends \forumngfeature_post_selector {
+
+    // Prevent printout for unit tests etc.
+    public $printout = true;
+
+    public function get_button_name() {
+        return get_string('forward', 'forumngfeature_forward');
+    }
+
+    public function require_capability($context, $discussion) {
+        require_capability('mod/forumng:forwardposts', $context);
+    }
+
+    public function get_form($discussion, $all, $selected = array()) {
+        $customdata = (object)array(
+            'subject' => $discussion->get_subject(),
+            'discussionid' => $discussion->get_id(),
+            'cloneid' => $discussion->get_forum()->get_course_module_id(),
+            'postids' => $selected,
+            'onlyselected' => !$all);
+        return new \mod_forumng_forward_form('forward.php', $customdata);
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $COURSE, $USER, $CFG;
+
+        // Begin with standard text.
+        $a = (object)array('name' => fullname($USER, true));
+
+        $allhtml = "<body id='forumng-email'>\n";
+
+        $preface = get_string('forward_preface', 'forumngfeature_forward', $a);
+        $allhtml .= $preface;
+        $alltext = format_text_email($preface, FORMAT_HTML);
+
+        // Include intro if specified.
+        if (!preg_match('~^(<br[^>]*>|<p>|</p>|\s)*$~', $formdata->message['text'])) {
+            $alltext .= "\n" . \mod_forumng_cron::EMAIL_DIVIDER . "\n";
+            $allhtml .= '<hr size="1" noshade="noshade" />';
+
+            // Add intro.
+            $message = trusttext_strip($formdata->message['text']);
+            $allhtml .= format_text($message, $formdata->message['format']);
+            $alltext .= format_text_email($message, $formdata->message['format']);
+        }
+
+        // Get list of all post ids in discussion order.
+        $alltext .= "\n" . \mod_forumng_cron::EMAIL_DIVIDER . "\n";
+        $allhtml .= '<hr size="1" noshade="noshade" />';
+        $poststext = '';
+        $postshtml = '';
+        $discussion->build_selected_posts_email(
+            $selected, $poststext, $postshtml);
+        $alltext .= $poststext;
+        $allhtml .= $postshtml . '</body>';
+
+        $emails = preg_split('~[; ]+~', $formdata->email);
+        $subject = $formdata->subject;
+        foreach ($emails as $email) {
+            $fakeuser = (object)array(
+                'email' => $email,
+                'mailformat' => 1,
+                'id' => -1
+            );
+
+            $from = $USER;
+            $from->maildisplay = 999; // Nasty hack required for OU moodle.
+
+            if (!email_to_user($fakeuser, $from, $subject, $alltext, $allhtml)) {
+                print_error('error_forwardemail', 'forumng',
+                        $discussion->get_moodle_url(), $formdata->email);
+            }
+        }
+
+        // Log that it was sent.
+        $params = array(
+            'context' => $discussion->get_forum()->get_context(),
+            'objectid' => $discussion->get_id(),
+            'other' => array('logurl' => $discussion->get_log_url(), 'info' => $formdata->email)
+        );
+
+        $event = \forumngfeature_forward\event\discussion_forwarded::create($params);
+        $event->add_record_snapshot('course_modules', $discussion->get_course_module());
+        $event->add_record_snapshot('course', $discussion->get_course());
+        $event->trigger();
+
+        if (!empty($formdata->ccme)) {
+            if (!email_to_user($USER, $from, $subject, $alltext, $allhtml)) {
+                print_error('error_forwardemail', 'forumng',
+                        $discussion->get_moodle_url(), $USER->email);
+            }
+        }
+        if ($this->printout) {
+            $out = $discussion->init_page($discussion->get_moodle_url(), $this->get_page_name());
+            print $out->header();
+
+            print $out->box(get_string('forward_done', 'forumngfeature_forward'));
+            print $out->continue_button(new \moodle_url('/mod/forumng/discuss.php',
+                    $discussion->get_link_params_array()));
+            print $out->footer();
+        }
+    }
+
+    public function get_content_after_form($discussion, $all, $selected, $formdata) {
+        // Print selected messages if they have any (rather than whole discussion).
+        if (!$all) {
+            // Display selected messages below form.
+            $allhtml = '';
+            $alltext = '';
+            $discussion->build_selected_posts_email(
+                $selected, $alltext, $allhtml);
+            print '<div class="forumng-showemail">' . $allhtml . '</div>';
+        }
+    }
+}
diff --git a/mod/forumng/feature/forward/forumngfeature_forward.php b/mod/forumng/feature/forward/forumngfeature_forward.php
new file mode 100644
index 0000000..c5bd470
--- /dev/null
+++ b/mod/forumng/feature/forward/forumngfeature_forward.php
@@ -0,0 +1,40 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: forward posts by email.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_forward extends forumngfeature_discussion {
+    public function get_order() {
+        return 1100;
+    }
+
+    public function should_display($discussion) {
+        return has_capability('mod/forumng:forwardposts',
+            $discussion->get_forum()->get_context());
+    }
+
+    public function display($discussion) {
+        return parent::get_button($discussion,
+                get_string('forward', 'forumngfeature_forward'),
+                'feature/forward/forward.php',
+                false, array(), '', false, true);
+    }
+}
diff --git a/mod/forumng/feature/forward/forward.php b/mod/forumng/feature/forward/forward.php
new file mode 100644
index 0000000..ee6fde7
--- /dev/null
+++ b/mod/forumng/feature/forward/forward.php
@@ -0,0 +1,27 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Email forwarding script. This uses the post selector infrastructure to
+ * handle the situation when posts are being selected.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../forumngfeature_post_selector.php');
+
+forumngfeature_post_selector::go(new forumngfeature_forward\post_selector());
diff --git a/mod/forumng/feature/forward/forward_form.php b/mod/forumng/feature/forward/forward_form.php
new file mode 100644
index 0000000..4afbd6d
--- /dev/null
+++ b/mod/forumng/feature/forward/forward_form.php
@@ -0,0 +1,105 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form for email forwarding.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once($CFG->libdir.'/formslib.php');
+
+class mod_forumng_forward_form extends moodleform {
+
+    public function definition() {
+
+        global $CFG, $USER;
+        $mform = $this->_form;
+
+        // Informational paragraph
+        $a = (object)array(
+            'email' => $USER->email,
+            'fullname' => fullname($USER, true));
+        $mform->addElement('static', '', '',
+            get_string('forward_info_' .
+                ($this->_customdata->onlyselected ? 'selected' : 'all'),
+                'forumngfeature_forward', $a));
+
+        // Email address
+        $mform->addElement('text', 'email', get_string('forward_email', 'forumngfeature_forward'),
+            array('size'=>48));
+        $mform->setType('email', PARAM_RAW);
+        $mform->addHelpButton('email', 'forward_email', 'forumngfeature_forward');
+        $mform->addRule('email', get_string('required'), 'required', null,
+            'client');
+
+        // CC me
+        $mform->addElement('checkbox', 'ccme',
+                get_string('forward_ccme', 'forumngfeature_forward'));
+
+        // Email subject
+        $mform->addElement('text', 'subject', get_string('subject', 'forumng'),
+            array('size'=>48));
+        $mform->setType('subject', PARAM_TEXT);
+        $mform->addRule('subject', get_string('maximumchars', '', 255),
+                'maxlength', 255, 'client');
+        $mform->addRule('subject', get_string('required'), 'required', null, 'client');
+        $mform->setDefault('subject', $this->_customdata->subject);
+
+        // Email message
+        $mform->addElement('editor', 'message',
+            get_string('forward_intro', 'forumngfeature_forward'), array('cols'=>50, 'rows'=> 15));
+        $mform->setType('message', PARAM_RAW);
+
+        // Hidden fields
+        if ($this->_customdata->postids) {
+            foreach ($this->_customdata->postids as $postid) {
+                $mform->addElement('hidden', 'selectp' . $postid, 1);
+                $mform->setType('selectp' . $postid, PARAM_INT);
+            }
+        } else {
+            $mform->addElement('hidden', 'all', 1);
+            $mform->setType('all', PARAM_INT);
+        }
+        $mform->addElement('hidden', 'd', $this->_customdata->discussionid);
+        $mform->setType('d', PARAM_INT);
+        $mform->addElement('hidden', 'clone', $this->_customdata->cloneid);
+        $mform->setType('clone', PARAM_INT);
+        $mform->addElement('hidden', 'postselectform', 1);
+        $mform->setType('postselectform', PARAM_INT);
+
+        $this->add_action_buttons(true, get_string('forward', 'forumngfeature_forward'));
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        if (isset($data['email'])) {
+            $emails = preg_split('~[; ]+~', $data['email']);
+            if (count($emails) < 1) {
+                $errors['email'] = get_string('invalidemails', 'forumng');
+            } else {
+                foreach ($emails as $email) {
+                    if (!validate_email($email)) {
+                        $errors['email'] = get_string('invalidemails', 'forumng');
+                        break;
+                    }
+                }
+            }
+        }
+        return $errors;
+    }
+}
diff --git a/mod/forumng/feature/forward/lang/en/forumngfeature_forward.php b/mod/forumng/feature/forward/lang/en/forumngfeature_forward.php
new file mode 100644
index 0000000..c2de8a2
--- /dev/null
+++ b/mod/forumng/feature/forward/lang/en/forumngfeature_forward.php
@@ -0,0 +1,34 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['forward'] = 'Forward by email';
+$string['forward_intro'] = 'Optional introduction';
+$string['forward_email'] = 'Email address of recipient';
+$string['forward_ccme'] = 'Copy to your own email';
+$string['forward_preface'] = '<p>These forum posts were sent to you on behalf of {$a->name}.</p>';
+$string['forward_done'] = 'The email has been sent.';
+$string['forward_info_selected'] = 'The selected posts (shown below this form) will be emailed to the address or addresses you enter here. The email will be sent under your name <strong>{$a->fullname}</strong> from your email address <strong>{$a->email}</strong>.';
+$string['forward_info_all'] = 'This discussion will be emailed to the address or addresses you enter here. The email will be sent under your name <strong>{$a->fullname}</strong> from your email address <strong>{$a->email}</strong>.';
+$string['forward_email_help'] = 'Enter one or more email address(es) separated by spaces or semicolons.';
+$string['pluginname'] = 'Forward posts by email';
+$string['event:discussionforwarded'] = 'Forward discussion';
diff --git a/mod/forumng/feature/forward/lang/es/forumngfeature_forward.php b/mod/forumng/feature/forward/lang/es/forumngfeature_forward.php
new file mode 100644
index 0000000..2c54201
--- /dev/null
+++ b/mod/forumng/feature/forward/lang/es/forumngfeature_forward.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['forward'] = 'Enviar por correo';
+$string['forward_intro'] = 'Texto introductorio opcional';
+$string['forward_email'] = 'Dirección de correo del destinatario';
+$string['forward_ccme'] = 'Enviar una copia a tu correo';
+$string['forward_preface'] = '<p>Estas entradas te fueron enviadas por orden de {$a->name}.</p>';
+$string['forward_done'] = 'Se ha enviado el correo.';
+$string['forward_info_selected'] = 'Las entradas seleccionadas (que se muestran bajo este formulario) serán enviadas a la dirección o direcciones que introduzcas aquí. El correo será enviado con tu nombre <strong>{$a->fullname}</strong> desde tu dirección de correo <strong>{$a->email}</strong>.';
+$string['forward_info_all'] = 'Este tema será enviado a la dirección o direcciones que introduzcas aquí. El correo será enviado con tu nombre <strong>{$a->fullname}</strong> desde tu dirección de correo <strong>{$a->email}</strong>.';
+$string['forward_email_help'] = 'Introduce una o más direcciones de correo separadas por espacio o punto y coma.';
+$string['pluginname'] = 'Enviar entradas por correo';
diff --git a/mod/forumng/feature/forward/lang/fr/forumngfeature_forward.php b/mod/forumng/feature/forward/lang/fr/forumngfeature_forward.php
new file mode 100644
index 0000000..ec8f6f6
--- /dev/null
+++ b/mod/forumng/feature/forward/lang/fr/forumngfeature_forward.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['forward'] = 'Transférer par courriel';
+$string['forward_intro'] = 'Introduction optionnelle';
+$string['forward_email'] = 'Adresse du destinataire';
+$string['forward_ccme'] = 'Recevoir une copie';
+$string['forward_preface'] = '<p>Ces messages du forum vous ont été envoyés par {$a->name}.</p>';
+$string['forward_done'] = 'Le courriel a bien été envoyé.';
+$string['forward_info_selected'] = 'Les messages sélectionnés (voir en bas du formulaire) seront envoyés à l\'adresse ou aux adresses indiquées. Le courriel sera envoyé sous votre nom <strong>{$a->fullname}</strong> depuis votre adresse de courriel <strong>{$a->email}</strong>.';
+$string['forward_info_all'] = 'Cette discussion sera envoyée à l\'adresse ou aux adresses indiquées. Le courriel sera envoyé sous votre nom <strong>{$a->fullname}</strong> depuis votre adresse de courriel <strong>{$a->email}</strong>.';
+$string['forward_email_help'] = 'Entrez une ou plusieurs adresses de courriel séparées par des espaces ou des points-virgules.';
+$string['pluginname'] = 'Transfert par courriel';
diff --git a/mod/forumng/feature/forward/lang/he/forumngfeature_forward.php b/mod/forumng/feature/forward/lang/he/forumngfeature_forward.php
new file mode 100644
index 0000000..535c33d
--- /dev/null
+++ b/mod/forumng/feature/forward/lang/he/forumngfeature_forward.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['forward'] = 'העברה לנמען בדואר';
+$string['forward_intro'] = 'תאור (הקדמה)';
+$string['forward_email'] = 'כתובות הדואר של הנמענים';
+$string['forward_ccme'] = 'העתק לדואר שלך';
+$string['forward_preface'] = '<p>פרסומי קבוצת-הדיון המצורפים נשלחו אליך על ידי: {$a->name}.</p>';
+$string['forward_done'] = 'הדואר נשלח.';
+$string['forward_info_selected'] = 'The selected posts (shown below this form) will be emailed to the address or addresses you enter here. The email will be sent under your name <strong>{$a->fullname}</strong> from your email address <strong>{$a->email}</strong>.';
+$string['forward_info_all'] = 'This discussion will be emailed to the address or addresses you enter here. The email will be sent under your name <strong>{$a->fullname}</strong> from your email address <strong>{$a->email}</strong>.';
+$string['forward_email_help'] = 'הזינו כתובת דואר אחת או יותר, מופרדות בתו רווח או נקודה-פסיק.';
+$string['pluginname'] = 'העברת פרסומים לנמעניי דואר';
diff --git a/mod/forumng/feature/forward/tests/forumng_forward_test.php b/mod/forumng/feature/forward/tests/forumng_forward_test.php
new file mode 100644
index 0000000..1a5c69e
--- /dev/null
+++ b/mod/forumng/feature/forward/tests/forumng_forward_test.php
@@ -0,0 +1,104 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG forward feature tests.
+ *
+ * @package mod_forumng
+ * @copyright 2015 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/tests/forumng_test_lib.php');
+
+class mod_forumng_forward_testcase  extends forumng_test_lib {
+
+    protected $helper;
+
+    public function setUp() {
+        $helper = new stdClass();
+
+        // Catch all messages.
+        $helper->mailsink = $this->redirectEmails();
+
+        $messages = $helper->mailsink->get_messages();
+        $this->assertEquals(0, count($messages));
+
+        $this->helper = $helper;
+    }
+
+    public function tearDown() {
+        $this->helper->mailsink->clear();
+        $this->helper->mailsink->close();
+    }
+
+    /**
+     * Tests email sending.
+     */
+    public function test_forward() {
+        global $USER;
+        $this->resetAfterTest();
+        $this->setAdminUser();
+
+        $course = $this->get_new_course();
+        $forum = $this->get_new_forumng($course->id);
+        $discussion = $this->get_new_discussion($forum, array('userid' => $USER->id));
+
+        $postids = array($discussion->get_root_post()->get_id());
+
+        $forward = new \forumngfeature_forward\post_selector();
+        $forward->printout = false;
+
+        $formdata = (object) array(
+                'email' => 'example@example.com',
+                'message' => array(
+                        'text' => 'test',
+                        'format' => FORMAT_HTML
+                ),
+                'subject' => 'unit test'
+        );
+
+        $forward->apply($discussion, true, $postids, $formdata);
+
+        // Now check the results in the message sink.
+        $messages = $this->helper->mailsink->get_messages();
+
+        // There should be the expected number of messages.
+        $this->assertEquals(1, count($messages));
+
+        $formdata = (object) array(
+                'email' => 'example@example.com;example2@example.com',
+                'message' => array(
+                        'text' => 'test',
+                        'format' => FORMAT_HTML
+                ),
+                'ccme' => true,
+                'subject' => 'unit test'
+        );
+
+        $forward->apply($discussion, true, $postids, $formdata);
+
+        // Now check the results in the message sink.
+        $messages = $this->helper->mailsink->get_messages();
+
+        // There should be the expected number of messages.
+        $this->assertEquals(4, count($messages));
+
+    }
+}
diff --git a/mod/forumng/feature/forward/version.php b/mod/forumng/feature/forward/version.php
new file mode 100644
index 0000000..6dd11d5
--- /dev/null
+++ b/mod/forumng/feature/forward/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage forward
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$plugin->version  = 2014080800;
+$plugin->component = 'forumngfeature_forward';
diff --git a/mod/forumng/feature/lock/forumngfeature_lock.php b/mod/forumng/feature/lock/forumngfeature_lock.php
new file mode 100644
index 0000000..e34a74a
--- /dev/null
+++ b/mod/forumng/feature/lock/forumngfeature_lock.php
@@ -0,0 +1,70 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Lock discussion.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_lock extends forumngfeature_discussion {
+    public function get_order() {
+        global $PAGE;
+        if ($PAGE->pagetype == 'mod-forumng-view') {
+            return 500;
+        } else {
+            return 200;
+        }
+    }
+
+    public function display($discussion) {
+        global $PAGE;
+        if ($PAGE->pagetype == 'mod-forumng-discuss') {
+            if (!$discussion->is_locked()) {
+                $button = parent::get_button($discussion,
+                        get_string('lock', 'forumngfeature_lock'), 'editpost.php', false,
+                        array('lock' => 1));
+            } else {
+                $button = parent::get_button($discussion,
+                        get_string('unlock', 'forumngfeature_lock'),
+                        'feature/lock/unlock.php');
+            }
+        } else {
+            // Main page lock button.
+            $params['exclude'] = 'forumng-deleted,forumng-locked';
+            $lock_get = array_merge($params, $_GET);
+            $button = forumngfeature_discussion_list::get_button(
+                    $discussion, get_string('lockdis', 'forumngfeature_lock'),
+                    'feature/lock/lockall.php', false, $lock_get, '', 'forumng-dselectorbutton');
+        }
+        return $button;
+    }
+
+    public function supports_discussion_list() {
+        return true;
+    }
+
+    public function should_display($discussion) {
+        if (is_a($discussion, 'mod_forumng_discussion')) {
+            return parent::should_display($discussion);
+        }
+        if (is_a($discussion, 'mod_forumng')) {
+            return $discussion->can_manage_discussions(0);
+        }
+        return true;
+    }
+}
diff --git a/mod/forumng/feature/lock/internaldoc/testcase.multiplelock.txt b/mod/forumng/feature/lock/internaldoc/testcase.multiplelock.txt
new file mode 100644
index 0000000..1df7628
--- /dev/null
+++ b/mod/forumng/feature/lock/internaldoc/testcase.multiplelock.txt
@@ -0,0 +1,282 @@
+This file contains a sequence of test cases for the ForumNG Lock feature.
+
+Initial setup
+=============
+
+See testcase.txt for a description of the format of these tests.
+Since this test deals only with the forum view page user interface,
+only these instructions will be required.
+One forum is required. Three discussions will need to be setup.
+
+Some parts of the interface have different behaviour in 'fancy' (AJAX/JavaScript) mode,
+so we will test those parts first with Javascript disabled and then enabled in the browser
+
+One text file will be required to insert as an attachment.
+
+
+Browser Configuration 1
+=======================
+
+Configure the browser to disable Javascript.
+
+CRE Creating ForumNG
+====================
+
+CRE01 / admin
+  In any course week, from the add activity dropdown, choose 'ForumNG'.
+  Leave all settings as default except name 'F.LD'. Save form and return to the course.
+
+
+BSN Basic usage (non-JS)
+========================
+
+BSN01 / admin
+   Go to the course and click into F.LD to enter the first ForumNG.
+-  Verify that there is a 'Start a new discussion' button, with text beneath,
+   'There are no discussions in this forum yet.'
+-  Verify that next there are seven buttons, the existing 'Mark all posts read', 'Change' and
+   'Export', 'Make sticky', 'Make normal', with the preexisting 'View posts by user'
+   followed by the new 'Lock' button.
+
+BSN02 / admin
+   Click the 'Start a new discussion' button.
+-  You should be taken to a new page with a form for starting a discussion.
+   Type 'Discussion1' in subject and a message and hit the 'Post discussion' button.
+-  Verify that you are taken to the new discussion page and your message is shown.
+   Return to forum view page.
+
+BSN03 / admin
+   Repeat the 'Start a new discussion' process a further two times,
+   enter Discussion(No) as subject and any text for each discussion.
+
+Return to the forumng view page.
+
+
+DEL Delete Discussions
+=======================
+
+DEL01 / admin
+   Open discussion 3 and click delete to delete it.
+-  Click to confirm you are sure you want to delete this discussion.
+-  Confirm Discussion3 is now dimmed and struck through.
+
+
+BLD Basic lock discussions usage   (non-JS).
+===========================================
+
+BLD01 / admin
+   Click F.LD to enter the first ForumNG.
+-  Confirm that the forum view page shows all three discussions, and that they can be ordered by the
+   column headings.
+
+BLD02 / admin
+   Click 'Lock'.
+-  Confirm that the Lock page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and three buttons beneath:
+   'All discussions shown', 'Selected discussions' and 'Cancel'.
+
+BLD03 / admin
+   Click 'All discussions shown'.
+   Confirm that a 'Lock discussion(s)' form is displayed on the page, that the Subject has a default
+   entry, "This discussion is now closed"
+   Confirm that there are two file addition areas, the second labelled Attachments.
+   Confirm that there is a 'Mail soon' check box, with help.
+   Finally, confirm two buttons 'Lock discussion' and 'Cancel'.
+
+BLD04 / admin
+   Enter a message regarding locking all discussions.
+   Click 'Lock discussion'.
+   Confirm that you are returned to the forum view page.
+-  Verify that all non deleted discussions are now displaying the 'Lock' icon.
+
+BLD05 / admin
+   Enter discussion 1.
+   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed' and the message entered regarding locking all discussions.
+   Verify that there is an 'Unlock' button on the left.
+   Click F.LD to return to the forum view page.
+
+BLD06 / admin
+   Click to Enter discussion 2.
+   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed' and the same message entered regarding locking all discussions.
+   Verify that there is an 'Unlock' button on the left.
+   Click F.LD to return to the forum view page.
+
+BLD07 / admin
+  Enter both discussions and click the 'Unlock' button to unlock them, and to confirm unlock.
+  Return to the forum view page.
+
+BLD08 / admin
+-  Confirm that the forum view page shows all three discussions, and that none are now locked.
+
+BLD09 / admin
+   Click 'Lock'.
+-  Confirm that the Lock page opens with the text 'Do you want to include all discussions
+   listed on this page, or only selected discussions?' and two buttons beneath:
+   'All discussions shown' and 'Selected discussions'.
+
+BLD10 / admin
+   Click 'Selected discussions'.
+-  Confirm that you are returned to the forum lock view page with the text at the top
+   'Tick the box beside each discussion you want to include. When you're done, scroll to the bottom
+   and click "Confirm selection".
+-  Confirm that there is a column "Select discussion" on the right which contains check boxes
+   against each discussion which is not deleted.
+-  Confirm that below the discussions there are 'Confirm selection' and 'Cancel' buttons.
+
+BLD11 / admin
+   Click check the box for Discussion1.
+   Click 'Confirm selection' button.
+-  Confirm that the 'Lock discussion(s)' page opens.
+
+BLD12 / admin
+-   Confirm that a 'Lock discussion(s)' form is displayed as before, the Subject has a default entry,
+   "This discussion is now closed".
+-   Confirm that there are two file addition areas, the second labelled Attachments.
+-   Confirm two further areas, Display period and Discussion options
+-   Confirm three buttons 'Lock discussion', 'Cancel', and 'Save as draft'.
+
+BLD13 / admin
+   Enter a message regarding locking discussion.
+   Click the 'Lock discussion' button.
+-  Confirm that you are returned to the forum view page.
+-  Verify that only Discussion1 is displaying the 'Lock' icon.
+
+BLD14 / admin
+   Enter discussion 1.
+-   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed' and the message entered regarding locking all discussions.
+-  Confirm that the attached file link appears to the right of the posted message text.
+   Scroll to the bottom of the posts.
+-   Verify that there is an 'Unlock' button on the left.
+   Click the 'Unlock' button, once to unlock the discussion, and once to confirm unlock.
+   Click F.LD to be returned to the forum view page.
+
+
+Browser Configuration 2
+=======================
+
+Re-configure the browser to enable Javascript, and refresh the forumng view page.
+
+BJD Basic usage Lock discussions   (JS Enabled)
+===============================================
+
+BJD01 / admin
+-  Confim that the forum view page shows all three discussions, and that none are currently 'Locked'.
+   but that discussions 3 is shown 'deleted'.
+
+BJD02 / admin
+   Click 'Lock'.
+-  Confirm that the Lock page POPUP opens over the current page with the text
+   'Do you want to include all discussions listed on this page, or only selected discussions?'
+    with three buttons beneath:
+   'All discussions shown' and 'Selected discussions' and 'Cancel'.
+
+BJD03 / admin
+   Click 'All discussions shown'.
+-  Confirm that a 'Lock discussion(s)' form is displayed on the page, that the Subject has a default
+   entry, "This discussion is now closed".
+-  Confirm that there is a box labelled Attachments split into three rows, with links 'Add', 'Files'
+   and a large area below. Except in IE8, this area may have a caption 'You can drag and drop files
+   here to add them'.
+-  Confirm that there are two further areas below, Display period and Discussion options
+-  Confirm three buttons 'Lock discussion', 'Cancel', and 'Save as draft'.
+
+BJD04 / admin
+   Enter the message 'Regarding locking all discussions, with added attachment provided' .
+   Upload the text file into the attachment area, either by browsing for the file or drag and drop.
+   Click button 'Lock discussion'.
+-  Confirm that you are returned to the forum view page.
+-  Verify that all non deleted discussions are now displaying the 'Lock' icon.
+
+BJD05 / admin
+   Enter discussion 1.
+   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed' and the message entered 'Regarding locking all discussions,
+   with added attachment provided'.
+-   Verify that the post contains the text file attachment provided as a link to the right of the post.
+   Scroll to the bottom of the posts.
+   Verify that there is an 'Unlock' button on the left.
+   Click F.LD
+-  Confirm that you are returned to the forum view page.
+
+BJD06 / admin
+   Enter discussion 2.
+-  Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed' and the message entered 'Regarding locking all discussions,
+   with added attachment provided'.
+-  Verify that the post contains the same text file attachment provided as a link to the right of the post.
+   Scroll to the bottom of the posts.
+-  Verify that there is an 'Unlock' button on the left.
+   Click F.LD to return to the forum view page.
+-   Confirm that you are returned to the forum view page.
+
+BJD07 / admin
+  Enter both discussions and click the 'Unlock' button once to unlock, and once to confirm unlock.
+  Click F.LD to return to the forum view page.
+
+BJD08 / admin
+-  Confirm that the forum view page shows all three discussions,and that discussion 3 is shown as
+   'deleted' and greyed out.
+
+BJD09 / admin
+   Click 'Lock'.
+-  Confirm that the Lock Popup opens over the forum view page with the text
+   'Do you want to include all discussions listed on this page, or only selected discussions?'
+    and three buttons beneath:
+   'All discussions shown', 'Selected discussions' and 'Cancel'.
+
+BJD10 / admin
+   Click 'Selected discussions'
+-  Confirm that you are returned to the forum lock view page with the text at the top
+   'Tick the box beside each discussion you want to include. When you're done, scroll to the bottom
+   and click "Confirm selection".
+-  Confirm that there two buttons beneath this 'Select all' which is enabled and 'Deselect all', which
+   is disabled.
+-   Confirm that there is a now check box against each discussion title which is not deleted.
+-   Confirm that below the discussions there are 'Confirm selection' and 'Cancel' buttons and
+   that 'Confirm selection' is disabled.
+
+BJD11 / admin
+   Click the 'Select all' button.
+-  Confirm that the two check boxes are now ticked and that the  'Confirm selection'
+   button is now enabled.
+
+BJD12 / admin
+   Click the 'Deselect all' button.
+-  Confirm that the two check boxes are now unticked and that the  'Confirm selection'
+   button is now disabled.
+
+BJD13 / admin
+   Click the check box against Discussions2.
+-  Confirm that both the 'Select all' and 'Deselect all' buttons are now enabled.
+-  Confirm that the 'Confirm selection' button is now enabled.
+   Click 'Confirm selection' button.
+   Confirm that the 'Lock discussion(s)' page opens.
+
+BJD14 / admin
+   Confirm that the 'Lock discussions' form is displayed, that the Subject has a default entry,
+   "This discussion is now closed" as previously.
+
+BJD15 / admin
+   Enter the message 'Regarding locking selected discussions, with added attachment provided'.
+   Upload the text file into the attachment area, either by browsing for the file or drag and drop.
+   Click button 'Lock discussion'.
+-  Confirm that you are returned to the forum view page.
+-  Verify that only Discussions2 displays the 'Lock' icon.
+
+BJD16 / admin
+   Enter discussion 2.
+-  Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed' and the message entered 'Regarding locking all discussions,
+   with added attachment provided', and that the uploaded files link is displayed to the
+   right of the text.
+   Scroll to the bottom of the posts.
+-   Verify that there is an 'Unlock' button on the left.
+   Click F.LD
+-   Confirm that you are returned to the forum view page.
+
+
+Test complete.
+==============
diff --git a/mod/forumng/feature/lock/lang/en/forumngfeature_lock.php b/mod/forumng/feature/lock/lang/en/forumngfeature_lock.php
new file mode 100644
index 0000000..26d13bb
--- /dev/null
+++ b/mod/forumng/feature/lock/lang/en/forumngfeature_lock.php
@@ -0,0 +1,32 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['lock'] = 'Lock';
+$string['unlock'] = 'Unlock';
+$string['lockdiscussion'] = 'Lock discussion: {$a}';
+$string['lockdiscussionbutton'] = 'Lock discussion';
+$string['locksubject'] = 'This discussion is now closed';
+$string['confirmunlock'] = 'Are you sure you want to unlock this discussion?';
+$string['pluginname'] = 'Lock/unlock discussion';
+$string['lockdiscussiontitle'] = 'Lock discussion(s)';
+$string['lockdis'] = 'Lock discussions';
diff --git a/mod/forumng/feature/lock/lang/es/forumngfeature_lock.php b/mod/forumng/feature/lock/lang/es/forumngfeature_lock.php
new file mode 100644
index 0000000..ead1615
--- /dev/null
+++ b/mod/forumng/feature/lock/lang/es/forumngfeature_lock.php
@@ -0,0 +1,30 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['lock'] = 'Bloquear';
+$string['unlock'] = 'Desbloquear';
+$string['lockdiscussion'] = 'Bloquear tema: {$a}';
+$string['lockdiscussionbutton'] = 'Bloquear tema';
+$string['locksubject'] = 'El tema está cerrado';
+$string['confirmunlock'] = '¿Estas seguro de que quieres desbloquear este tema??';
+$string['pluginname'] = 'Bloquear/Desbloquear tema';
diff --git a/mod/forumng/feature/lock/lang/fr/forumngfeature_lock.php b/mod/forumng/feature/lock/lang/fr/forumngfeature_lock.php
new file mode 100644
index 0000000..2b5c1b3
--- /dev/null
+++ b/mod/forumng/feature/lock/lang/fr/forumngfeature_lock.php
@@ -0,0 +1,32 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['lock'] = 'Bloquer';
+$string['unlock'] = 'Débloquer';
+$string['lockdiscussion'] = 'Bloquer la discussion : {$a}';
+$string['lockdiscussionbutton'] = 'Bloquer la discussion';
+$string['locksubject'] = 'La discussion est maintenant bloquée';
+$string['confirmunlock'] = 'Etes-vous sûr de vouloir débloquer la discussion ?';
+$string['pluginname'] = 'Blocage/Déblocage des discussions';
+$string['lockdiscussiontitle'] = 'Blocage de discussion(s)';
+$string['lockdis'] = 'Bloquer les discussions';
diff --git a/mod/forumng/feature/lock/lang/he/forumngfeature_lock.php b/mod/forumng/feature/lock/lang/he/forumngfeature_lock.php
new file mode 100644
index 0000000..62f4dd1
--- /dev/null
+++ b/mod/forumng/feature/lock/lang/he/forumngfeature_lock.php
@@ -0,0 +1,30 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['lock'] = 'נעילה';
+$string['unlock'] = 'ביטול נעילה';
+$string['lockdiscussion'] = 'נעילת דיון: {$a}';
+$string['lockdiscussionbutton'] = 'נעילת דיון';
+$string['locksubject'] = 'הדיון סגור';
+$string['confirmunlock'] = 'האם אתם בטוחים שאתם מעוניינים לבטל את נעילת הדיון?';
+$string['pluginname'] = 'נעילת/פתיחת דיון';
diff --git a/mod/forumng/feature/lock/lockall.php b/mod/forumng/feature/lock/lockall.php
new file mode 100644
index 0000000..eed14bc
--- /dev/null
+++ b/mod/forumng/feature/lock/lockall.php
@@ -0,0 +1,92 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Multipole lock script. This uses the discussion selector infrastructure to
+ * handle the situation when discussions are being selected.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__) . '/../forumngfeature_discussion_selector.php');
+require_once($CFG->dirroot . '/mod/forumng/editpost_form.php');
+
+class lockall_on_selector extends forumngfeature_discussion_selector {
+    public function get_button_name() {
+        return get_string('lock', 'forumngfeature_lock');
+    }
+
+    public function get_form($discussion, $all, $selected = array()) {
+        global $CFG, $PAGE;
+        foreach ($selected as $postid) {
+            $params['selectd'.$postid] = $postid;
+        }
+        $params['id'] = $discussion->get_course_module_id();
+        $params['group'] = mod_forumng::get_activity_group($discussion->get_course_module());
+        $params['clone'] = optional_param('clone', 0, PARAM_INT);
+        $params['fromselect'] = true;
+        $customdata = array('params' => $params, 'isdiscussion' => false, 'edit' => false,
+                'ispost' => true, 'islock' => true, 'post' => null,
+                'isroot' => true, 'forum' => $discussion);
+
+        return new mod_forumng_editpost_form('lockall.php', $customdata);
+    }
+
+    public function get_page_name() {
+        return get_string('lockdiscussiontitle', 'forumngfeature_lock');
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $CFG;
+        $filecontext = $discussion->get_context();
+        $forum = $discussion;
+        if (!isset($formdata->mailnow)) {
+            $formdata->mailnow = false;
+        }
+        foreach ($selected as $postid) {
+            // Call the lock for selected discussions.
+            $discussion = mod_forumng_discussion::get_from_id($postid, $formdata->clone);
+            if (!$discussion->is_deleted() && !$discussion->is_locked()) {
+                $newpostid = $discussion->lock($formdata->subject, $formdata->message['text'],
+                        $formdata->message['format'], $formdata->attachments, $formdata->mailnow,
+                        '', '', $formdata->asmoderator);
+                // Save attachments.
+                file_save_draft_area_files($formdata->attachments, $filecontext->id, 'mod_forumng',
+                        'attachment', $newpostid, null);
+                $newtext = file_save_draft_area_files($formdata->message['itemid'],
+                        $filecontext->id, 'mod_forumng', 'message', $newpostid, null,
+                        $formdata->message['text']);
+                if ($newtext !== $formdata->message['text']) {
+                    mod_forumng_post::update_message_for_files($newpostid, $newtext);
+                }
+            }
+        }
+        // Redirect to the Main page.
+        redirect('../../view.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+    }
+
+    public function only_discussion_types() {
+        return array('forumng-discussion-short');
+    }
+
+    public function exclude_discussion_types() {
+        return array('forumng-deleted', 'forumng-locked');
+    }
+}
+
+// Outside the class.
+forumngfeature_discussion_selector::go(new lockall_on_selector());
diff --git a/mod/forumng/feature/lock/tests/behat/basic.feature b/mod/forumng/feature/lock/tests/behat/basic.feature
new file mode 100644
index 0000000..190df81
--- /dev/null
+++ b/mod/forumng/feature/lock/tests/behat/basic.feature
@@ -0,0 +1,69 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_lock
+Feature: Lock multiple discussions
+  In order to lock discussions
+  As a teacher
+  I need to lock multiple discussions using the discussion selector
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+    And the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum |
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D1 |
+      | Message | abc |
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D2 |
+      | Message | 123 |
+    And I press "Delete"
+    And I press "Delete"
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D3 |
+      | Message | def |
+    And I log out
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    Then "Lock discussions" "button" should not exist
+    Given I add a discussion with the following data:
+      | Subject | D4 |
+      | Message | 456 |
+    And I log out
+
+  Scenario: View flagged discussions
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    When I press "Lock discussions"
+    And I press "Cancel"
+    Then "Lock discussions" "button" should exist
+    Given I press "Lock discussions"
+    And I press "Selected discussions"
+    And I set the field "Select discussion" to "1"
+    When I press "Confirm selection"
+    Then "Lock discussion" "button" should exist
+    Given I set the field "Message" to "now locked"
+    When I press "Lock discussion"
+    Then "Lock discussions" "button" should exist
+    And ".forumng-locked" "css_element" should exist
+    Given I press "Lock discussions"
+    And I press "All discussions shown"
+    And I set the field "Message" to "now locked"
+    When I press "Lock discussion"
+    Then ".forumng-locked.forumng-deleted" "css_element" should not exist
diff --git a/mod/forumng/feature/lock/unlock.php b/mod/forumng/feature/lock/unlock.php
new file mode 100644
index 0000000..b017b5b
--- /dev/null
+++ b/mod/forumng/feature/lock/unlock.php
@@ -0,0 +1,66 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Unlocks a discussion.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$d = required_param('d', PARAM_INT);
+$pageparams = array('d' => $d);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+$forum = $discussion->get_forum();
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+
+// Check permission for change
+$discussion->require_edit();
+
+// Is this the actual unlock?
+if ($_SERVER['REQUEST_METHOD'] == 'POST') {
+    $discussion->unlock();
+    redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+}
+
+// Confirm page. Work out navigation for header
+$pagename = get_string('unlock', 'forumngfeature_lock');
+$pageurl = new moodle_url('/mod/forumng/feature/lock/unlock.php', $pageparams);
+$out = $discussion->init_page($pageurl, $pagename);
+print $out->header();
+
+// Show confirm option
+$confirmstring = get_string('confirmunlock', 'forumngfeature_lock');
+print $out->confirm($confirmstring,
+        new single_button(new moodle_url('/mod/forumng/feature/lock/unlock.php',
+            array('d'=>$discussion->get_id(), 'clone'=>$cloneid)),
+            get_string('unlock', 'forumngfeature_lock'), 'post'),
+        new single_button(new moodle_url('/mod/forumng/discuss.php',
+            array('d'=>$discussion->get_id(), 'clone'=>$cloneid)),
+            get_string('cancel'), 'get'));
+
+// Display footer
+print $out->footer();
diff --git a/mod/forumng/feature/lock/version.php b/mod/forumng/feature/lock/version.php
new file mode 100644
index 0000000..899afd5
--- /dev/null
+++ b/mod/forumng/feature/lock/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage lock
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2013070101;
+$plugin->component = 'forumngfeature_lock';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/manualmark/change.php b/mod/forumng/feature/manualmark/change.php
new file mode 100644
index 0000000..827a518
--- /dev/null
+++ b/mod/forumng/feature/manualmark/change.php
@@ -0,0 +1,50 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Script called when you change the value of manual-mark option.
+ * @package forumngfeature
+ * @subpackage manualmark
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once('../../mod_forumng.php');
+
+// This script toggles the user's 'automatically mark read' preference.
+
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$did = optional_param('d', 0, PARAM_INT);
+
+if ($did) {
+    $dis = mod_forumng_discussion::get_from_id($did, $cloneid);
+    $forum = $dis->get_forum();
+} else {
+    $id = required_param('id', PARAM_INT);
+    $forum = mod_forumng::get_from_cmid($id, $cloneid);
+}
+
+$groupid = mod_forumng::get_activity_group($forum->get_course_module(), false);
+$forum->require_view($groupid);
+
+$manualmark = !mod_forumng::mark_read_automatically();
+if ($manualmark) {
+    unset_user_preference('forumng_manualmark');
+} else {
+    set_user_preference('forumng_manualmark', 1);
+}
+
+redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
diff --git a/mod/forumng/feature/manualmark/forumngfeature_manualmark.php b/mod/forumng/feature/manualmark/forumngfeature_manualmark.php
new file mode 100644
index 0000000..671f88a
--- /dev/null
+++ b/mod/forumng/feature/manualmark/forumngfeature_manualmark.php
@@ -0,0 +1,62 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum feature: toggle manual mark read.
+ * @package forumngfeature
+ * @subpackage manualmark
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__).'/../forumngfeature_discussion_list.php');
+
+/**
+ * This feature lets users toggle between automatically and manually
+ * marking discussions read. It appears at bottom of the
+ * discussion list.
+ */
+class forumngfeature_manualmark extends forumngfeature_discussion_list {
+    public function get_order() {
+        return 200;
+    }
+
+    public function should_display($forum) {
+        // So long as you can view discussions, and you are not a guest,
+        // you can mark them read.
+        return $forum->can_mark_read();
+    }
+
+    public function display($forum) {
+        $out = mod_forumng_utils::get_renderer();
+
+        // Work out current status
+        $manualmark = !mod_forumng::mark_read_automatically();
+        $current = get_string(
+                $manualmark ? 'manualmark_manual' : 'manualmark_auto',
+                'forumngfeature_manualmark');
+
+        // Make a help button
+        $change = get_string('manualmark_change', 'forumngfeature_manualmark');
+        $helpbutton = $out->help_icon('manualmark_change', 'forumngfeature_manualmark');
+
+        // Get the button form
+        $params = $forum->get_link_params_array();
+        return parent::get_button($forum, $change,
+                'feature/manualmark/change.php', true, $params, $helpbutton,
+                'forumng-manualmark', $current . '&nbsp;',
+                'forumng-button-to-link');
+    }
+}
diff --git a/mod/forumng/feature/manualmark/lang/en/forumngfeature_manualmark.php b/mod/forumng/feature/manualmark/lang/en/forumngfeature_manualmark.php
new file mode 100644
index 0000000..02e0232
--- /dev/null
+++ b/mod/forumng/feature/manualmark/lang/en/forumngfeature_manualmark.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage manualmark
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['manualmark_auto'] = 'Automatically mark as read';
+$string['manualmark_manual'] = 'Manually mark as read';
+$string['manualmark_auto_long'] = 'Your posts are automatically marked as read';
+$string['manualmark_manual_long'] = 'Your posts are manually marked as read';
+$string['manualmark_change'] = 'Change';
+
+$string['manualmark_change_help'] = '&lsquo;Automatically mark as read&rsquo; marks every post in a discussion as read after you view that discussion page.
+
+&lsquo;Manually mark as read&rsquo; leaves posts marked as unread until you click &lsquo;Mark discussion read&rsquo; or
+ &lsquo;Mark post read&rsquo;.
+
+This option applies to all forums on this system.';
+$string['pluginname'] = 'Option to manually mark discussions and posts read';
diff --git a/mod/forumng/feature/manualmark/lang/es/forumngfeature_manualmark.php b/mod/forumng/feature/manualmark/lang/es/forumngfeature_manualmark.php
new file mode 100644
index 0000000..0dfae5c
--- /dev/null
+++ b/mod/forumng/feature/manualmark/lang/es/forumngfeature_manualmark.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage manualmark
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['manualmark_auto'] = 'Marcar automáticamente los temas como leídos';
+$string['manualmark_manual'] = 'Marcar los temas como leídos de forma manual';
+$string['manualmark_change'] = 'Cambiar';
+
+$string['manualmark_change_help'] = '&lsquo;Marcar automáticamente los temas como leídos&rsquo; marca todas las entradas de un tema como leídas al leer cualquier entrada de ese tema.
+
+&lsquo;Marcar los temas como leídos de forma manual&rsquo; deja los posts como no leídos hasta que pulses en el botón &lsquo;Marcar tema como leído&rsquo;.
+
+Esta opción se aplica a todos los foros del sistema.';
+$string['pluginname'] = 'Option to manually mark discussions read';
diff --git a/mod/forumng/feature/manualmark/lang/fr/forumngfeature_manualmark.php b/mod/forumng/feature/manualmark/lang/fr/forumngfeature_manualmark.php
new file mode 100644
index 0000000..18fdca3
--- /dev/null
+++ b/mod/forumng/feature/manualmark/lang/fr/forumngfeature_manualmark.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage manualmark
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['manualmark_auto'] = 'Marquer automatiquement les discussions comme lues';
+$string['manualmark_manual'] = 'Marquer manuellement les discussions comme lues';
+$string['manualmark_change'] = 'Changer';
+
+$string['manualmark_change_help'] = '&lsquo;Marquer automatiquement les discussions comme lues&rsquo; marque toutes les messages de la discussion comme lus lorsque vous afficher le message dans la discussion.
+
+&lsquo;Marquer manuellement les discussions comme lues&rsquo; laisse les messages comme non lu jusqu\'à ce que vous cliquiez sur &lsquo;Marquer la discussion comme lue&rsquo;.
+
+Cette option s\'applique à tous les forums sur le système.';
+$string['pluginname'] = 'Option de marquage de lecture de discussions';
diff --git a/mod/forumng/feature/manualmark/lang/he/forumngfeature_manualmark.php b/mod/forumng/feature/manualmark/lang/he/forumngfeature_manualmark.php
new file mode 100644
index 0000000..dcbbebe
--- /dev/null
+++ b/mod/forumng/feature/manualmark/lang/he/forumngfeature_manualmark.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage manualmark
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['manualmark_auto'] = 'סימון אוטומטי של הודעות אשר נקראו';
+$string['manualmark_manual'] = 'סימון ידני של הודעות אשר נקראו';
+$string['manualmark_change'] = 'עדכון';
+
+$string['manualmark_change_help'] = '&lsquo;Automatically marking discussions read&rsquo; marks all posts in a discussion as read when you view any post in that discussion.
+
+&lsquo;Manually marking discussions read&rsquo; leaves posts marked as unread until you click &lsquo;Mark discussion read&rsquo;.
+
+This option applies to all forums on the system.';
+$string['pluginname'] = 'סימון הודעות אשר נקראו';
diff --git a/mod/forumng/feature/manualmark/tests/behat/basic.feature b/mod/forumng/feature/manualmark/tests/behat/basic.feature
new file mode 100644
index 0000000..69bc55f
--- /dev/null
+++ b/mod/forumng/feature/manualmark/tests/behat/basic.feature
@@ -0,0 +1,71 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_manualmark
+Feature: Make discussions sticky
+  In order to mark discussions read
+  As a student
+  I need to be able to use both features that make discussions marked as read
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+      | teacher1 | Teacher | 1 | teacher1@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | teacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And the following "activities" exist:
+      | activity | name                    | introduction                   | course | idnumber |
+      | forumng  | Test forum name marking | Test forum marking description | C1     | forumng1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I follow "Course 1"
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | Discussion 1 |
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | Discussion 2 |
+    And I follow "Test forum name marking"
+    And I log out
+
+  # JS required for 'Discussion 2' links
+  @javascript
+  Scenario: Testing the 'Mark as read' options
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    Then I should see "(Unread posts)"
+    And I follow "Test forum name marking"
+    Then I should see "Test forum marking description"
+
+    # Check existing discussions default un-read state
+    And "Discussion 2" "table_row" should appear before "Discussion 1" "table_row"
+    And ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should exist in the "Discussion 2" "table_row"
+    And ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should exist in the "Discussion 1" "table_row"
+
+    # Default state of discussion marking
+    And I should see "Automatically mark as read"
+    And "Change" "link" should exist
+
+    # Change state of discussion marking
+    Given I click on "Change" "link"
+    Then I should see "Manually mark as read"
+
+    # Change order of discussions
+    And I follow "Discussion 2"
+    Then "Mark discussion read" "button" should exist
+    And "Mark discussions not read" "button" should not exist
+    When I press "Mark discussion read"
+    And I follow "Test forum name marking"
+    # Check discussions read state
+    Then ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should not exist in the "Discussion 2" "table_row"
+    And ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should exist in the "Discussion 1" "table_row"
diff --git a/mod/forumng/feature/manualmark/version.php b/mod/forumng/feature/manualmark/version.php
new file mode 100644
index 0000000..6cb537d
--- /dev/null
+++ b/mod/forumng/feature/manualmark/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage manualmark
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version = 2015012700;
+$plugin->component = 'forumngfeature_manualmark';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/markallread/forumngfeature_markallread.php b/mod/forumng/feature/markallread/forumngfeature_markallread.php
new file mode 100644
index 0000000..f169c79
--- /dev/null
+++ b/mod/forumng/feature/markallread/forumngfeature_markallread.php
@@ -0,0 +1,48 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum feature: mark all discussions read.
+ * @package forumngfeature
+ * @subpackage markallread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__).'/../forumngfeature_discussion_list.php');
+
+/**
+ * This feature lists posts from a user. It appears at the bottom of the
+ * discussion list page.
+ */
+class forumngfeature_markallread  extends forumngfeature_discussion_list {
+    public function get_order() {
+        return 100;
+    }
+
+    public function should_display($forum) {
+        return $forum->can_mark_read();
+    }
+
+    public function display($forum) {
+        $params = $forum->get_link_params_array();
+        if ($forum->get_group_mode()) {
+            $params['group'] = mod_forumng::get_activity_group(
+                    $forum->get_course_module());
+        }
+        return parent::get_button($forum, get_string('markallread', 'forumngfeature_markallread'),
+                'markread.php', true, $params, '', 'fng-mobile-on');
+    }
+}
diff --git a/mod/forumng/feature/markallread/lang/en/forumngfeature_markallread.php b/mod/forumng/feature/markallread/lang/en/forumngfeature_markallread.php
new file mode 100644
index 0000000..13239d6
--- /dev/null
+++ b/mod/forumng/feature/markallread/lang/en/forumngfeature_markallread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markallread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markallread'] = 'Mark all posts read';
+$string['pluginname'] = 'Mark all posts read';
diff --git a/mod/forumng/feature/markallread/lang/es/forumngfeature_markallread.php b/mod/forumng/feature/markallread/lang/es/forumngfeature_markallread.php
new file mode 100644
index 0000000..f631094
--- /dev/null
+++ b/mod/forumng/feature/markallread/lang/es/forumngfeature_markallread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markallread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markallread'] = 'Marcar todo como leído';
+$string['pluginname'] = 'Marcar todo como leído';
diff --git a/mod/forumng/feature/markallread/lang/fr/forumngfeature_markallread.php b/mod/forumng/feature/markallread/lang/fr/forumngfeature_markallread.php
new file mode 100644
index 0000000..607b258
--- /dev/null
+++ b/mod/forumng/feature/markallread/lang/fr/forumngfeature_markallread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markallread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markallread'] = 'Marquer tous les messages comme lus';
+$string['pluginname'] = 'Marquage des messages comme lus';
diff --git a/mod/forumng/feature/markallread/lang/he/forumngfeature_markallread.php b/mod/forumng/feature/markallread/lang/he/forumngfeature_markallread.php
new file mode 100644
index 0000000..de921b8
--- /dev/null
+++ b/mod/forumng/feature/markallread/lang/he/forumngfeature_markallread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markallread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markallread'] = 'סמנו את כל הפרסומים כ"נקראו"';
+$string['pluginname'] = 'סמנו את כל הפרסומים כ"נקראו"';
diff --git a/mod/forumng/feature/markallread/tests/behat/basic.feature b/mod/forumng/feature/markallread/tests/behat/basic.feature
new file mode 100644
index 0000000..384e677
--- /dev/null
+++ b/mod/forumng/feature/markallread/tests/behat/basic.feature
@@ -0,0 +1,95 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_markallread
+Feature: Mark all discussions as read
+  In order to mark all discussions as read
+  As a student
+  I need to use the forumng feature that marks all discussions as read
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+      | teacher1 | Teacher | 1 | teacher1@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | teacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And the following "activities" exist:
+      | activity | name                    | introduction                   | course | idnumber |
+      | forumng  | Test forum name marking | Test forum marking description | C1     | forumng1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I follow "Course 1"
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | Discussion 1 |
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | Discussion 2 |
+    And I follow "Test forum name marking"
+    And I log out
+
+  # JS required for 'Discussion 2' links
+  @javascript
+  Scenario: Testing the 'Mark as read' option
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    Then I should see "(Unread posts)"
+    Given I follow "Test forum name marking"
+    Then I should see "Test forum marking description"
+
+    # Check discussions default un-read state marked with unread classes
+    And "Discussion 2" "table_row" should appear before "Discussion 1" "table_row"
+    And ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should exist in the "Discussion 2" "table_row"
+    And ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should exist in the "Discussion 1" "table_row"
+
+    # The facility we're testing should be available
+    And "Mark all posts read" "button" should exist
+    # Default state of discussion marking
+    And I should see "Automatically mark as read"
+    And "Change" "link" should exist
+
+    # Toggle state of discussion marking
+    Given I click on "Change" "link"
+    Then I should see "Manually mark as read"
+
+    # Check read state of both discussions
+    # The discussions should have an 'unread background' class
+    And I follow "Discussion 2"
+    And ".forumng-unread.forumng-p1" "css_element" should exist
+    And "Mark post read" "link" should exist
+    And "Mark discussion read" "button" should exist
+    Given I follow "Test forum name marking"
+    And I follow "Discussion 1"
+    And ".forumng-unread.forumng-p1" "css_element" should exist
+    And "Mark post read" "link" should exist
+    And "Mark discussion read" "button" should exist
+    Given I follow "Test forum name marking"
+
+    # Change read state for all discussions
+    When I press "Mark all posts read"
+    # Confirm discussions read state changes in the table list
+    Then ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should not exist in the "Discussion 2" "table_row"
+    And ".forumng-discussion-unread .forumng-unreadcount .iconsmall" "css_element" should not exist in the "Discussion 1" "table_row"
+
+    # Confirm discussions read marking state
+    # The discussions should not have an unread background class or marking button
+    And I follow "Discussion 2"
+    And ".forumng-unread.forumng-p1" "css_element" should not exist
+    And "Mark post read" "link" should not exist
+    And "Mark discussion read" "button" should not exist
+    Given I follow "Test forum name marking"
+    And I follow "Discussion 1"
+    And ".forumng-unread.forumng-p1" "css_element" should not exist
+    And "Mark post read" "link" should not exist
+    And "Mark discussion read" "button" should not exist
+    And I log out
diff --git a/mod/forumng/feature/markallread/version.php b/mod/forumng/feature/markallread/version.php
new file mode 100644
index 0000000..28eeda0
--- /dev/null
+++ b/mod/forumng/feature/markallread/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage markallread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngfeature_markallread';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/markdiscussionread/forumngfeature_markdiscussionread.php b/mod/forumng/feature/markdiscussionread/forumngfeature_markdiscussionread.php
new file mode 100644
index 0000000..baa3a07
--- /dev/null
+++ b/mod/forumng/feature/markdiscussionread/forumngfeature_markdiscussionread.php
@@ -0,0 +1,47 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: mark read (when in manual mark mode).
+ * @package forumngfeature
+ * @subpackage markdiscussionread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__).'/../forumngfeature_discussion_list.php');
+
+/**
+ * This feature lists posts from a user. It appears at the bottom of the
+ * discussion list page.
+ */
+class forumngfeature_markdiscussionread  extends forumngfeature_discussion {
+    public function get_order() {
+        return 90;
+    }
+
+    public function should_display($discussion) {
+        return !mod_forumng::mark_read_automatically() &&
+                $discussion->get_forum()->can_mark_read() &&
+                $discussion->get_num_unread_posts();
+    }
+
+    public function display($discussion) {
+        $params = $discussion->get_link_params_array();
+        return parent::get_button($discussion,
+                get_string('markdiscussionread', 'forumngfeature_markdiscussionread'),
+                'markread.php', true, $params, '', false, false, 'fng-mobile-on');
+    }
+}
diff --git a/mod/forumng/feature/markdiscussionread/lang/en/forumngfeature_markdiscussionread.php b/mod/forumng/feature/markdiscussionread/lang/en/forumngfeature_markdiscussionread.php
new file mode 100644
index 0000000..043824e
--- /dev/null
+++ b/mod/forumng/feature/markdiscussionread/lang/en/forumngfeature_markdiscussionread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markdiscussionread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markdiscussionread'] = 'Mark discussion read';
+$string['pluginname'] = 'Mark discussion read';
diff --git a/mod/forumng/feature/markdiscussionread/lang/es/forumngfeature_markdiscussionread.php b/mod/forumng/feature/markdiscussionread/lang/es/forumngfeature_markdiscussionread.php
new file mode 100644
index 0000000..7dbb08d
--- /dev/null
+++ b/mod/forumng/feature/markdiscussionread/lang/es/forumngfeature_markdiscussionread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markdiscussionread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markdiscussionread'] = 'Marcar tema como leído';
+$string['pluginname'] = 'Marcar tema como leído';
diff --git a/mod/forumng/feature/markdiscussionread/lang/fr/forumngfeature_markdiscussionread.php b/mod/forumng/feature/markdiscussionread/lang/fr/forumngfeature_markdiscussionread.php
new file mode 100644
index 0000000..6c63d82
--- /dev/null
+++ b/mod/forumng/feature/markdiscussionread/lang/fr/forumngfeature_markdiscussionread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markdiscussionread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markdiscussionread'] = 'Marquer les discussions comme lues';
+$string['pluginname'] = 'Marquage des discussions comme lues';
diff --git a/mod/forumng/feature/markdiscussionread/lang/he/forumngfeature_markdiscussionread.php b/mod/forumng/feature/markdiscussionread/lang/he/forumngfeature_markdiscussionread.php
new file mode 100644
index 0000000..5047a3b
--- /dev/null
+++ b/mod/forumng/feature/markdiscussionread/lang/he/forumngfeature_markdiscussionread.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage markdiscussionread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['markdiscussionread'] = 'סמנו דיון כ"נקרא"';
+$string['pluginname'] = 'סמנו דיון כ"נקרא"';
diff --git a/mod/forumng/feature/markdiscussionread/tests/behat/basic.feature b/mod/forumng/feature/markdiscussionread/tests/behat/basic.feature
new file mode 100644
index 0000000..b2157cd
--- /dev/null
+++ b/mod/forumng/feature/markdiscussionread/tests/behat/basic.feature
@@ -0,0 +1,90 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_markdiscussionread
+Feature: Mark discussions read automatically
+  In order to mark discussions read automatically
+  As a student
+  I need to be able to use the feature that marks discussions as read
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+      | teacher1 | Teacher | 1 | teacher1@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | teacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And the following "activities" exist:
+      | activity | name                    | introduction                   | course | idnumber |
+      | forumng  | Test forum name marking | Test forum marking description | C1     | forumng1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I follow "Course 1"
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | Discussion 1 |
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | Discussion 2 |
+    And I follow "Test forum name marking"
+    And I log out
+
+  # JS required for 'Discussion' links
+  @javascript
+  Scenario: Testing the 'Mark as read' automatically option
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    Then I should see "(Unread posts)"
+    Given I follow "Test forum name marking"
+    Then I should see "Test forum marking description"
+
+    # Check existing discussions default marked un-read state
+    And "Discussion 2" "table_row" should appear before "Discussion 1" "table_row"
+    And ".iconsmall" "css_element" should exist in the "Discussion 2" "table_row"
+    And ".iconsmall" "css_element" should exist in the "Discussion 1" "table_row"
+
+    # Default state of discussion marking
+    And I should see "Automatically mark as read"
+    And "Change" "link" should exist
+
+    # Read and automatically mark discussion
+    And I follow "Discussion 2"
+    # The discussion should have an unread background colourisation
+    And ".forumng-post.forumng-full.forumng-unread.forumng-p1" "css_element" should exist
+    And "Mark discussion read" "button" should not exist
+    Given I follow "Test forum name marking"
+    # Check discussions marked read states
+    Then ".iconsmall" "css_element" should not exist in the "Discussion 2" "table_row"
+    And ".iconsmall" "css_element" should exist in the "Discussion 1" "table_row"
+    And I follow "Discussion 2"
+    # The discussion should not have an unread background colourisation
+    And ".forumng-post.forumng-full.forumng-unread.forumng-p1" "css_element" should not exist
+    Given I follow "Test forum name marking"
+
+    # Toggle state of discussion marking
+    Given I click on "Change" "link"
+    Then I should see "Manually mark as read"
+
+    # Read and manually mark discussion
+    And I follow "Discussion 1"
+    # The discussion should have an unread background colourisation
+    And ".forumng-post.forumng-full.forumng-unread.forumng-p1" "css_element" should exist
+    And "Mark discussion read" "button" should exist
+    When I press "Mark discussion read"
+    Given I follow "Test forum name marking"
+    Then ".iconsmall" "css_element" should not exist in the "Discussion 2" "table_row"
+    And ".iconsmall" "css_element" should not exist in the "Discussion 1" "table_row"
+    And I follow "Discussion 1"
+    # The discussion should not have an unread background colourisation
+    And ".forumng-post.forumng-full.forumng-unread.forumng-p1" "css_element" should not exist
+    And "Mark discussion read" "button" should not exist
+    And I log out
diff --git a/mod/forumng/feature/markdiscussionread/version.php b/mod/forumng/feature/markdiscussionread/version.php
new file mode 100644
index 0000000..f71bba5
--- /dev/null
+++ b/mod/forumng/feature/markdiscussionread/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage markdiscussionread
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngfeature_markdiscussionread';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/merge/forumngfeature_merge.php b/mod/forumng/feature/merge/forumngfeature_merge.php
new file mode 100644
index 0000000..5586896
--- /dev/null
+++ b/mod/forumng/feature/merge/forumngfeature_merge.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: merge discussion.
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_merge extends forumngfeature_discussion {
+    public function get_order() {
+        return 350;
+    }
+
+    public function should_display($discussion) {
+        global $SESSION;
+        return has_capability('mod/forumng:splitdiscussions',
+            $discussion->get_forum()->get_context())
+            && $discussion->can_write_to_group()
+            && !$discussion->is_deleted()
+            && !$discussion->is_locked();
+    }
+
+    public function display($discussion) {
+        global $SESSION;
+        if (isset($SESSION->forumng_mergefrom)) {
+            if ($SESSION->forumng_mergefrom->discussionid == $discussion->get_id() ||
+                    $SESSION->forumng_mergefrom->forumid != $discussion->get_forum()->get_id()) {
+                return parent::get_button($discussion,
+                        get_string('cancelmerge', 'forumngfeature_merge'),
+                        'feature/merge/merge.php', true, array('stage'=>2, 'cancel'=>1),
+                        ' ' . get_string('cannotmergehere', 'forumngfeature_merge'), true);
+
+            } else {
+                return parent::get_button($discussion,
+                    get_string('mergehere', 'forumngfeature_merge'), 'feature/merge/merge.php',
+                    true, array('stage'=>2),
+                    '<input type="submit" name="cancel" value="' .
+                        get_string('cancel') . '" />', true);
+            }
+        } else {
+            return parent::get_button($discussion,
+                get_string('merge', 'forumngfeature_merge'), 'feature/merge/merge.php');
+        }
+    }
+}
diff --git a/mod/forumng/feature/merge/lang/en/forumngfeature_merge.php b/mod/forumng/feature/merge/lang/en/forumngfeature_merge.php
new file mode 100644
index 0000000..0d2b7f0
--- /dev/null
+++ b/mod/forumng/feature/merge/lang/en/forumngfeature_merge.php
@@ -0,0 +1,37 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['merge'] = 'Merge';
+$string['beginmerge'] = 'Begin merge';
+$string['mergeinfo'] = 'To merge this discussion into another:<ol>
+<li>Click <strong>Begin merge</strong> to confirm this form.</li>
+<li>Go to the discussion that you want to merge it into. (This must be in the
+same forum.)</li>
+<li>Click <strong>Merge here</strong> to finish the merge, or
+the <strong>Cancel</strong> button alongside if you change your mind.</li>
+</ol>';
+$string['mergehere'] = 'Merge here';
+$string['cancelmerge'] = 'Cancel merge';
+$string['cannotmergehere'] = '(Cannot merge here.)';
+$string['error_wrongforum'] = 'Cannot merge into different forum';
+$string['pluginname'] = 'Merge discussions';
diff --git a/mod/forumng/feature/merge/lang/es/forumngfeature_merge.php b/mod/forumng/feature/merge/lang/es/forumngfeature_merge.php
new file mode 100644
index 0000000..13f2280
--- /dev/null
+++ b/mod/forumng/feature/merge/lang/es/forumngfeature_merge.php
@@ -0,0 +1,37 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['merge'] = 'Combinar';
+$string['beginmerge'] = 'Comenzar la combinación de temas';
+$string['mergeinfo'] = 'Para combinar este tema con otro:<ol>
+<li>Pulsa <strong>Comenzar la combinación de temas</strong> para comenzar el proceso.</li>
+<li>Busca la discusión con la que quieras combinar este tema. (Debe estar en el
+mismo foro.)</li>
+<li>Pulsa <strong>Combinar aquí</strong> para terminar el proceso, o
+el botón <strong>Cancelar</strong> si has cambiado de idea.</li>
+</ol>';
+$string['mergehere'] = 'Combinar aquí';
+$string['cancelmerge'] = 'Cancelar merge';
+$string['cannotmergehere'] = '(No es posible combinar aquí.)';
+$string['error_wrongforum'] = 'No es posible combinar en un foro diferente al original';
+$string['pluginname'] = 'Combinar temas';
diff --git a/mod/forumng/feature/merge/lang/fr/forumngfeature_merge.php b/mod/forumng/feature/merge/lang/fr/forumngfeature_merge.php
new file mode 100644
index 0000000..39f13ae
--- /dev/null
+++ b/mod/forumng/feature/merge/lang/fr/forumngfeature_merge.php
@@ -0,0 +1,35 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['merge'] = 'Fusionner';
+$string['beginmerge'] = 'Commencer la fusion';
+$string['mergeinfo'] = 'Pour fusionner cette discussion à une autre :<ol>
+<li>Cliquer sur <strong>Commencer la fusion</strong> pour activer le processus.</li>
+<li>Aller vers la discussion avec laquelle vous souhaitez faire la fusion (elle doit être dans le même forum).</li>
+<li>Cliquer sur <strong>Fusionner ici</strong> pour finir la fusion.</li>
+</ol>';
+$string['mergehere'] = 'Fusionner ici';
+$string['cancelmerge'] = 'Annuler';
+$string['cannotmergehere'] = '(Fusion ici impossible.)';
+$string['error_wrongforum'] = 'Impossible de fusionner dans un forum différent';
+$string['pluginname'] = 'Fusion des discussions';
diff --git a/mod/forumng/feature/merge/lang/he/forumngfeature_merge.php b/mod/forumng/feature/merge/lang/he/forumngfeature_merge.php
new file mode 100644
index 0000000..7415320
--- /dev/null
+++ b/mod/forumng/feature/merge/lang/he/forumngfeature_merge.php
@@ -0,0 +1,37 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['merge'] = 'איחוד';
+$string['beginmerge'] = 'תחילת איחוד';
+$string['mergeinfo'] = 'To merge this discussion into another:<ol>
+<li>Click <strong>Begin merge</strong> to confirm this form.</li>
+<li>Go to the discussion that you want to merge it into. (This must be in the
+same forum.)</li>
+<li>Click <strong>Merge here</strong> to finish the merge, or
+the <strong>Cancel</strong> button alongside if you change your mind.</li>
+</ol>';
+$string['mergehere'] = 'אחדו דיונים בנקודה זו';
+$string['cancelmerge'] = 'ביטול איחוד';
+$string['cannotmergehere'] = '(לא ניתן לאחד בנקודה זו.)';
+$string['error_wrongforum'] = 'לא ניתן לאחד דיון אל פורום אחר';
+$string['pluginname'] = 'איחוד דיונים';
diff --git a/mod/forumng/feature/merge/merge.php b/mod/forumng/feature/merge/merge.php
new file mode 100644
index 0000000..ba97cd9
--- /dev/null
+++ b/mod/forumng/feature/merge/merge.php
@@ -0,0 +1,108 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Either start the merge process, or finish it (depending on 'stage' param).
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$d = required_param('d', PARAM_INT);
+$pageparams = array('d'=>$d);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+$stage = optional_param('stage', 1, PARAM_INT);
+if ($stage != 1) {
+    $pageparams['stage'] = $stage;
+}
+
+$discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+$forum = $discussion->get_forum();
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+
+// Set up page
+$pagename = get_string('merge', 'forumngfeature_merge');
+$url = new moodle_url('/mod/forumng/feature/merge/merge.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+// Require that you can see this discussion (etc) and merge them
+$discussion->require_view();
+if (!$discussion->can_split($whynot)) {
+    print_error($whynot, 'forumng');
+}
+
+if ($stage == 2) {
+    if (!confirm_sesskey()) {
+        print_error('invalidsesskey');
+    }
+
+    if (!isset($_POST['cancel'])) {
+        // Get source discussion and check permissions
+        $sourcediscussion = mod_forumng_discussion::get_from_id(
+                $SESSION->forumng_mergefrom->discussionid,
+                $SESSION->forumng_mergefrom->cloneid);
+        $sourcediscussion->require_view();
+        if (!$sourcediscussion->can_split($whynot)) {
+            print_error($whynot, 'forumng');
+        }
+        if ($sourcediscussion->get_forum()->get_id() != $discussion->get_forum()->get_id()) {
+            print_error('error_wrongforum', 'forumngfeature_merge');
+        }
+
+        // Do actual merge
+        $sourcediscussion->merge_into($discussion);
+    }
+
+    unset($SESSION->forumng_mergefrom);
+    redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+}
+
+// Create form
+require_once('merge_form.php');
+$mform = new mod_forumng_merge_form('merge.php', array('d'=>$d, 'clone'=>$cloneid));
+
+if ($mform->is_cancelled()) {
+    redirect('../../discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+} else if (($fromform = $mform->get_data(false)) ||
+    get_user_preferences('forumng_hidemergehelp', 0)) {
+    // Remember in session that the discussion is being merged
+    $SESSION->forumng_mergefrom = new stdClass;
+    $SESSION->forumng_mergefrom->discussionid = $d;
+    $SESSION->forumng_mergefrom->forumid = $forum->get_id();
+    $SESSION->forumng_mergefrom->cloneid = $cloneid;
+
+    if (!empty($fromform->hidelater)) {
+        set_user_preference('forumng_hidemergehelp', 1);
+    }
+
+    // Redirect back to view page
+    redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
+}
+
+// Work out navigation for header
+print $out->header();
+
+// Print form
+$mform->display();
+
+print $out->footer();
diff --git a/mod/forumng/feature/merge/merge_form.php b/mod/forumng/feature/merge/merge_form.php
new file mode 100644
index 0000000..99e3150
--- /dev/null
+++ b/mod/forumng/feature/merge/merge_form.php
@@ -0,0 +1,47 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form with information/warning about how to merge.
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once($CFG->libdir.'/formslib.php');
+
+class mod_forumng_merge_form extends moodleform {
+
+    public function definition() {
+
+        global $CFG;
+        $mform =& $this->_form;
+
+        $mform->addElement('static', 'whatever', '',
+            get_string('mergeinfo', 'forumngfeature_merge').'<br />');
+
+        $mform->addElement('checkbox', 'hidelater',
+            '', get_string('hidelater', 'forumng'));
+
+        $this->add_action_buttons(true, get_string('beginmerge', 'forumngfeature_merge'));
+
+        // Hidden fields
+        foreach ($this->_customdata as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+    }
+}
diff --git a/mod/forumng/feature/merge/version.php b/mod/forumng/feature/merge/version.php
new file mode 100644
index 0000000..013187f
--- /dev/null
+++ b/mod/forumng/feature/merge/version.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage merge
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngfeature_merge';
diff --git a/mod/forumng/feature/move/forumngfeature_move.php b/mod/forumng/feature/move/forumngfeature_move.php
new file mode 100644
index 0000000..3c734cc
--- /dev/null
+++ b/mod/forumng/feature/move/forumngfeature_move.php
@@ -0,0 +1,111 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: move to another forum.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_move extends forumngfeature_discussion {
+    public function get_order() {
+        global $PAGE;
+        if ($PAGE->pagetype == 'mod-forumng-view') {
+            return 300;
+        } else {
+            return 1000;
+        }
+    }
+
+    public function should_display($discussion) {
+        if (is_a($discussion, 'mod_forumng_discussion')) {
+            // Check they are allowed to move discussions, discussion not deleted.
+            if (!has_capability('mod/forumng:movediscussions',
+                $discussion->get_forum()->get_context())
+                || $discussion->is_deleted()
+                || !$discussion->can_write_to_group()) {
+                    return false;
+            }
+        } else {
+            // Test to see if a forum.
+            if (is_a($discussion, 'mod_forumng')) {
+                // Check they are allowed to move discussions.
+                if (!has_capability('mod/forumng:movediscussions',
+                        $discussion->get_context())) {
+                    return false;
+                }
+            }
+        }
+
+        // Otherwise always 'display' it (may display blank if there aren't
+        // any target forums, though).
+        return true;
+    }
+
+    public function display($discussion) {
+        require_once(dirname(__FILE__) . '/lib.php');
+        if (is_a($discussion, 'mod_forumng_discussion')) {
+            // Obtain list of other forums in this course where the user has the
+            // 'move discussion' feature.
+            $course = $discussion->get_forum()->get_course();
+            $modinfo = get_fast_modinfo($course);
+            $results = array();
+            foreach ($modinfo->instances['forumng'] as $other) {
+                // Don't let user move discussion to its current forum.
+                if ($other->instance == $discussion->get_forum()->get_id() ||
+                    $other->id == $discussion->get_forum()->get_course_module_id()) {
+                    continue;
+                }
+                $othercontext = context_module::instance($other->id);
+                if (has_capability('mod/forumng:movediscussions', $othercontext) && $other->uservisible) {
+                    $results[$other->id] = $other->name;
+                }
+            }
+            if (count($results) == 0) {
+                return '';
+            }
+
+            // Make list alphabetical.
+            uasort($results, 'sort_ignore_case');
+
+            // Build select using the list.
+            $out = mod_forumng_utils::get_renderer();
+            $select = html_writer::select($results, 'target', '',
+                array('' => get_string('movethisdiscussionto', 'forumngfeature_move')));
+            return '<form method="post" action="feature/move/move.php"><div>' .
+                $discussion->get_link_params(mod_forumng::PARAM_FORM) .
+                $select . '<input class="forumng-zero-disable" ' .
+                'type="submit" value="' .get_string('move') . '" /></div></form>';
+        } else {
+            // Display button.
+            $params['exclude'] = 'forumng-deleted';
+            $excludedget = array_merge($params, $_GET);
+
+            if (is_a($discussion, 'mod_forumng')) {
+                return forumngfeature_discussion_list::get_button($discussion,
+                    get_string('move', 'forumngfeature_move'), 'feature/move/moveall.php',
+                    false, $excludedget, '', 'forumng-dselectorbutton', '', '');
+            }
+        }
+
+    }
+
+    public function supports_discussion_list() {
+        return true;
+    }
+
+}
\ No newline at end of file
diff --git a/mod/forumng/feature/move/group_form.php b/mod/forumng/feature/move/group_form.php
new file mode 100644
index 0000000..4376f1f
--- /dev/null
+++ b/mod/forumng/feature/move/group_form.php
@@ -0,0 +1,131 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form to select a target group when moving to a group forum and it doesn't
+ * already have a valid group.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once($CFG->libdir.'/formslib.php');
+
+class mod_forumng_group_form extends moodleform {
+
+    public function definition() {
+
+        global $CFG, $USER;
+        $mform = $this->_form;
+        $forum = $this->_customdata->targetforum;
+
+        // Informational paragraph.
+        $mform->addElement('static', '', '',
+            get_string('move_group_info', 'forumngfeature_move', $forum->get_name()));
+
+        // Get list of allowed groups.
+        $groups = $this->_customdata->groups;
+        $mform->addElement('select', 'group', get_string('group'), $groups);
+        reset($groups);
+        $mform->setDefault('group', key($groups));
+
+        // Hidden fields.
+        $mform->addElement('hidden', 'd', $this->_customdata->discussionid);
+        $mform->setType('d', PARAM_INT);
+        $mform->addElement('hidden', 'clone', $this->_customdata->cloneid);
+        $mform->setType('clone', PARAM_INT);
+        $mform->addElement('hidden', 'target', $forum->get_course_module_id());
+        $mform->setType('target', PARAM_INT);
+        $this->add_action_buttons(true, get_string('move'));
+
+    }
+}
+
+
+class mod_forumng_moveall_form extends moodleform {
+
+    public function definition() {
+        global $CFG, $USER;
+
+        $mform = $this->_form;
+        $params = $this->_customdata['params'];
+
+        // Get current forum.
+        $forum = $this->_customdata['forum'];
+        // Get array of forums excluding current forum.
+        $forums = get_other_course_forums($forum);
+
+        $mform->addElement('select', 'forum', get_string('movediscussionsto', 'forumngfeature_move'), $forums);
+
+        // Hidden fields.
+        foreach ($params as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+
+        $this->add_action_buttons(true, get_string('movediscussions', 'forumngfeature_move'));
+
+    }
+}
+
+class mod_forumng_moveall_groups_form extends moodleform {
+
+    public function definition() {
+        global $CFG, $USER;
+        $mform = $this->_form;
+
+        $pageparams = $this->_customdata['params'];
+        $target = $this->_customdata['params']['target'];
+        $forumngid = $this->_customdata['params']['id'];
+        $cloneid = $this->_customdata['params']['clone'];
+        $multigroups = $this->_customdata['params']['multigroups'];
+        $targetgroupmode = $this->_customdata['params']['targetgroupmode'];
+
+        $targetforum = $this->_customdata['targetforum'];
+
+        $pageparams = $this->_customdata['params'];
+        foreach ($pageparams as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+
+        $selectedids = array();
+        foreach ($pageparams as $field => $value) {
+            $matches = array();
+            if (!is_array($value) && (string)$value !== '0' &&
+                    preg_match('~^selectd([0-9]+)$~', $field, $matches)) {
+                $selectedids[] = ($matches[1]);
+            }
+        }
+
+        // Get list of allowed groups.
+        $options = array();
+        // Check to see whether target forum uses group mode.
+        if ($targetgroupmode) {
+            $options = get_allowed_groups($targetforum, false);
+        }
+        // Informational paragraph.
+        $mform->addElement('static', '', '',
+                get_string('move_discussions_group_info', 'forumngfeature_move', $targetforum->get_name()));
+        // Get group from user.
+        $mform->addElement('select', 'chosengroup', get_string('group'), $options);
+        reset($options);
+        $mform->setDefault('group', key($options));
+        $this->add_action_buttons(true, get_string('movediscussions', 'forumngfeature_move'));
+
+    }
+
+}
diff --git a/mod/forumng/feature/move/internaldoc/testcase.multiplemove.txt b/mod/forumng/feature/move/internaldoc/testcase.multiplemove.txt
new file mode 100644
index 0000000..22c5b4d
--- /dev/null
+++ b/mod/forumng/feature/move/internaldoc/testcase.multiplemove.txt
@@ -0,0 +1,126 @@
+This file contains a sequence of test cases for the ForumNG move and multiple move feature.
+
+Initial setup
+=============
+
+See testcase.txt for a description of the format of these tests and the initial
+site and ForumNG setup. Only one forum is required.
+
+Create 2 groups GR1 and GR2
+
+Create a forum FR1 under Week 1, leave Group mode set to 'No groups'
+Create 4 discussions called D1, D2, D3 and D4
+
+Create a forum GFR1 under week 2, set Group mode to 'Separate groups'
+Choose GR1
+Create 2 discussions called GR1 D1, and GR1 D2 for GR1
+
+Create a forum GFR2 under week 3, set Group mode to 'Separate groups'
+Choose GR2
+Create 2 discussions called GR2 D1, and GR2 D2 for GR2
+
+Create a forum GFR3 under week 4, set Group mode to 'Visible Groups'
+Create group GR3 and add to grouping for forum GFR3
+Create 2 discussions called GR3 D1, and GR3 D2 for GR3
+
+Create a forum GFR4 under week 5, set Group mode to 'Visible Groups'
+Create group GR4 and add to grouping for forum GFR4
+Add GR2 to grouping for forum GFR4
+
+Create a a forum GFR5 under week 6, set Group mode to 'Separate groups'
+Choose GR1
+Create 1 discussions called GT1
+Choose GR2
+Create 1 discussions called GT2
+Choose GR3
+Create 1 discussions called GT3
+Choose GR4
+Create 1 discussions called GT4
+
+MTD Move Multiple Discussions
+=============================
+
+MTD 01/ admin
+  Return to forum FR1
+  Click on 'Move' button
+  When prompted choose D1
+  Choose to move to forum GFR1 under group GR1
+  Check to make sure that it has been put into GR1
+
+MTD 02/ admin
+  Return to forum FR1
+  Click on  D2 discussion
+  Choose to move discussion to forum GFR2
+  When prompted choose to move to group GR2
+  Check to make sure that it has been put into GR2
+  This replaces MOD03 and MOD04 in testcase.txt
+
+MTD 03/ admin
+  Return to forum FR1
+  Click on  D3 discussion
+  Choose to move discussion to forum GFR3
+  Check to make sure that it has been put into GR3
+  This replaces MOD03 and MOD04 in testcase.txt
+
+MTD 04/ admin
+  Goto to forum GFR1
+  Choose to view discussions for GR1
+  Click on 'Move' button
+  When prompted choose G1 D2
+  Choose to move to forum GFR2
+  Check to make sure that it has been put into GR1
+
+MTD 05/ admin
+  Goto to forum GFR2
+  Choose to view discussions for GR2
+  Click on 'Move' button
+  When prompted choose G2 D2
+  Choose to move to forum GFR3
+  Check to make sure that it has been put into GR3
+
+MTD 06/ admin
+  Goto to forum GFR3
+  Choose to view discussions for GR3
+  Click on 'Move' button
+  When prompted choose G3 D2
+  Choose to move to forum GFR1 under group GR3
+  Check to make sure that it has been put into GR3
+
+MTD 07/ admin
+  Goto to forum GFR1
+  Choose to view discussions for GR1
+  Click on 'Move' button
+  When prompted choose G1 D1
+  Choose to move to forum FR1
+  Check to see that you see the following warning.
+  'You have moved discussions to a non-group forum. All discussions will be allocated to all participants
+  and group details will be lost'
+  Check to make sure that it has been put into FR1
+
+MTD 08/ admin
+  Goto Forum FR1
+  Choose to move all discussions to forum FGR1
+  Choose to move to forum GFR1 under group GR1
+  Check to make sure that it has been put into GR1
+
+MTD 09/ admin
+  Goto to forum GFR1
+  Choose to view discussions for GR1
+  Click on 'Move' button
+  When prompted choose all discussions excluding D1
+  Choose to move to forum FR1
+  Check to see that you see the following warning.
+  'You have moved discussions to a non-group forum. All discussions will be allocated to all participants
+  and group details will be lost'
+  Check to make sure that it has been put into FR1
+
+MTD 10/ admin
+  Goto forum GFR5
+  Choose to move all discussions to forum GFR4
+  Check to see that you see the following warning.
+  'You appear to have moved discussions to a forum that has groups for which some but not all of your moved discussions belong,
+   any discussions that do not have matching groups within that forum will be allocated to all participants and will need to be
+   allocated to groups manually.'
+  Check to make sure that discission GT2 is allocated to G2
+  Check to make sure that discission GT4 is allocated to G4
+  Check to make sure that discissions GT1 and GT3 are allocated to 'all participants'
diff --git a/mod/forumng/feature/move/lang/en/forumngfeature_move.php b/mod/forumng/feature/move/lang/en/forumngfeature_move.php
new file mode 100644
index 0000000..8bc07de
--- /dev/null
+++ b/mod/forumng/feature/move/lang/en/forumngfeature_move.php
@@ -0,0 +1,34 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['movethisdiscussionto'] = 'Move this discussion to ...';
+$string['move_group_info'] = 'You are moving this discussion to the forum <strong>{$a}</strong>. That forum uses groups. Please select the group you would like to move the message into.';
+$string['move_discussions_group_info'] = 'You are moving discussions to the forum <strong>{$a}</strong>. That forum uses groups. Please select the group you would like to move the messages into.';
+$string['pluginname'] = 'Move discussion';
+$string['move'] = 'Move';
+$string['movealltitle'] = 'Move discussion(s)';
+$string['movediscussionsto'] = 'Move discussions to';
+$string['movediscussions'] = 'Move discussions';
+$string['group_info'] = 'You appear to have moved discussions to a forum that has groups for which some but not all of your moved discussions belong,
+                         any discussions that do not have matching groups within that forum will be allocated to all participants and will need to be allocated to groups manually.';
+$string['nogroup_info'] = 'You have moved discussions to a non-group forum. All discussions will be allocated to all participants and group details will be lost';
diff --git a/mod/forumng/feature/move/lang/es/forumngfeature_move.php b/mod/forumng/feature/move/lang/es/forumngfeature_move.php
new file mode 100644
index 0000000..6f83b31
--- /dev/null
+++ b/mod/forumng/feature/move/lang/es/forumngfeature_move.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['movethisdiscussionto'] = 'Mover este tema a...';
+$string['move_group_info'] = 'Estás moviendo este tema al foro <strong>{$a}</strong>. Dicho foro utiliza grupos. Por favor, selecciona a qué grupo te gustaría mover el mensaje.';
+$string['pluginname'] = 'Mover tema';
diff --git a/mod/forumng/feature/move/lang/fr/forumngfeature_move.php b/mod/forumng/feature/move/lang/fr/forumngfeature_move.php
new file mode 100644
index 0000000..965867a
--- /dev/null
+++ b/mod/forumng/feature/move/lang/fr/forumngfeature_move.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['movethisdiscussionto'] = 'Déplacer cette discussion vers...';
+$string['move_group_info'] = 'Vous êtes en train de déplacer cette discussion vers le forum <strong>{$a}</strong>. Ce forum utilise les groupes. Merci de sélectionnez le groupe dans lequel vous souhaitez y déplacer le message.';
+$string['pluginname'] = 'Déplacement de discussions';
diff --git a/mod/forumng/feature/move/lang/he/forumngfeature_move.php b/mod/forumng/feature/move/lang/he/forumngfeature_move.php
new file mode 100644
index 0000000..b138fac
--- /dev/null
+++ b/mod/forumng/feature/move/lang/he/forumngfeature_move.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['movethisdiscussionto'] = 'העברת דיון זה ל...';
+$string['move_group_info'] = 'You are moving this discussion to the forum <strong>{$a}</strong>. That forum uses groups. Please select the group you would like to move the message into.';
+$string['pluginname'] = 'העברת דיון';
diff --git a/mod/forumng/feature/move/lib.php b/mod/forumng/feature/move/lib.php
new file mode 100644
index 0000000..4c1a50e
--- /dev/null
+++ b/mod/forumng/feature/move/lib.php
@@ -0,0 +1,213 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Local library file for forumng.  These are non-standard functions that are used
+ * only by the forumng move feature.
+ *
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or late
+ **/
+
+// Make sure this isn't being directly accessed.
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot . '/mod/forumng/feature/move/group_form.php');
+
+function permission_to_move($discussion, $targetforum) {
+    if (is_a($discussion, 'mod_forumng_discussion')) {
+        // Check permission for move.
+        $discussion->require_view();
+        $forum = $discussion->get_forum();
+    } else {
+        $forum = $discussion;
+    }
+    $aag = check_move_permissions($forum, $targetforum);
+    return $aag;
+}
+
+function check_move_permissions($forum, $targetforum) {
+    // Check permission for move.
+    require_capability('mod/forumng:movediscussions',
+            $forum->get_context());
+    require_capability('mod/forumng:movediscussions',
+            $targetforum->get_context());
+    $aag = has_capability('moodle/site:accessallgroups',
+            $targetforum->get_context());
+    return $aag;
+}
+
+function get_target_group($discussion, $targetforum, $aag = true) {
+    // Work out target group for move.
+    $targetgroup = $discussion->get_group_id();
+    if ( $targetforum->get_group_mode() == 0) {
+        // Target forum doesn't have groups.
+        $targetgroup = null;
+    } else {
+        if (!$targetgroup && $aag && $discussion->get_forum()->get_group_mode() != 0) {
+            $targetgroup = null;
+        } else if ($targetgroup &&
+            ($targetforum->get_grouping() != $discussion->get_forum()->get_grouping())) {
+            // Target forum has groups :( Need to decide a group.
+            // Had source group, but grouping has changed.
+            // See if old group belongs to new grouping.
+            $allowedgroups = groups_get_all_groups(
+                $targetforum->get_course_id(), 0, $targetforum->get_grouping(), 'g.id');
+            if (count($allowedgroups) == 1) {
+                $targetgroup = key($allowedgroups);
+            } else {
+                if (!array_key_exists($targetgroup, $allowedgroups)) {
+                    // Old group not in new grouping, so don't know where to put it.
+                    $targetgroup = null;
+                }
+            }
+        } else {
+            // Check to see whether a single or multigroup forum.
+            $groupids = get_allowed_groupids($targetforum, $aag);
+            if (count($groupids) == 1) {
+                $targetgroup = key($groupids);
+            } else {
+                if (!array_key_exists($targetgroup, $groupids)) {
+                    $targetgroup = null;
+                }
+            }
+
+        }
+
+    }
+    return $targetgroup;
+}
+
+function get_allowed_groups($targetforum, $aag) {
+    global $USER;
+
+    // We don't actually have a target group, get the list of allowed
+    // groups and see if there is only one option - if so we will use it.
+    // Work out list of allowed groups for current user.
+    $cm = $targetforum->get_course_module();
+    $groups = array();
+
+    // Need to get groups allowed for that activity - if any at all.
+    $groups = groups_get_activity_allowed_groups($cm, $USER->id);
+
+    $options = array();
+    if ($groups) {
+        foreach ($groups as $group) {
+            $options[$group->id] = format_string($group->name);
+        }
+    } else {
+        if ($aag) {
+            $options[0] = get_string('allparticipants');
+        }
+    }
+    return $options;
+}
+
+function get_allowed_groupids($targetforum, $aag) {
+    global $USER;
+
+    // We don't actually have a target group, get the list of allowed
+    // groups and see if there is only one option - if so we will use it.
+    // Work out list of allowed groups for current user.
+    $cm = $targetforum->get_course_module();
+    $groups = array();
+
+    // Need to get groups allowed for that activity - if any at all.
+    $groups = groups_get_activity_allowed_groups($cm, $USER->id);
+
+    $options = array();
+    if ($groups) {
+        foreach ($groups as $group) {
+            $options[$group->id] = $group->id;
+        }
+    } else {
+        if ($aag) {
+            $options[0] = 0;
+        }
+    }
+    return $options;
+}
+
+function get_forum_discussions_groups($selectedids, $forum, $cloneid) {
+    $groups = array();
+
+    foreach ($selectedids as $d) {
+        // We have the discussions and forum cmid, check to see whether it has groups.
+        $discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+        // Work out target group.
+        $group = get_target_group($discussion, $forum, true);
+        $groups[] = $group;
+    }
+
+    $groups = array_unique($groups);
+    return $groups;
+
+}
+
+function get_target_groups($selectedids, $targetforum, $cloneid) {
+    $targetgroups = get_forum_discussions_groups($selectedids, $targetforum, $cloneid);
+
+    if (count($targetgroups) == 1) {
+        // We have one usable target group.
+        if (empty($targetgroups[0])) {
+            $targetgroups[0] = 0;
+        }
+    } else {
+        if (count($targetgroups) == 0) {
+            $targetgroups[0] = 0;
+        }
+    }
+
+    return $targetgroups;
+}
+
+function sort_ignore_case($a, $b) {
+    $alower = core_text::strtolower($a);
+    $blower = core_text::strtolower($b);
+    if ($alower == $blower) {
+        return 0;
+    }
+    return ($alower < $blower) ? -1 : 1;
+}
+
+function get_other_course_forums($currentforum) {
+    $course = $currentforum->get_course();
+    $modinfo = get_fast_modinfo($course);
+    $results = array();
+    foreach ($modinfo->instances['forumng'] as $other) {
+        // Don't let user move discussion to its current forum.
+        if ($other->instance == $currentforum->get_id() ||
+                $other->id == $currentforum->get_course_module_id()) {
+            continue;
+        }
+        $othercontext = context_module::instance($other->id);
+        if (has_capability('mod/forumng:movediscussions', $othercontext) && $other->uservisible) {
+            $results[$other->id] = $other->name;
+        }
+    }
+    if (count($results) == 0) {
+        return '';
+    }
+
+    // Make list alphabetical.
+    uasort($results, 'sort_ignore_case');
+
+    return $results;
+}
diff --git a/mod/forumng/feature/move/move.php b/mod/forumng/feature/move/move.php
new file mode 100644
index 0000000..eebd1f8
--- /dev/null
+++ b/mod/forumng/feature/move/move.php
@@ -0,0 +1,102 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Move to target forum, or display group form if needed.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once(dirname(__FILE__) . '/lib.php');
+
+$d = required_param('d', PARAM_INT);
+$target = required_param('target', PARAM_INT);
+$pageparams = array('d' => $d, 'target' => $target);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+if (!$target) {
+    print_error('move_notselected', 'forumng');
+}
+
+$discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+
+// Get target forum.
+$targetforum = mod_forumng::get_from_cmid($target, mod_forumng::CLONE_DIRECT);
+
+// If it is a clone, find the original.
+$targetforum = $targetforum->get_real_forum();
+
+$targetcmid = $targetforum->get_course_module_id();
+
+// Check permission for move.
+$aag = permission_to_move($discussion, $targetforum);
+
+// Work out target group for move.
+$targetgroup = get_target_group($discussion, $targetforum, $aag);
+$groupmode = $targetforum->get_group_mode();
+$options = array();
+if ($groupmode && !$targetgroup) {
+    $options = get_allowed_groups($targetforum, $aag);
+    // If there's only one then we'll use it.
+    if (count($options) == 1) {
+        reset($options);
+        $targetgroup = key($options);
+    } else if (count($options) == 0) {
+        print_error('move_nogroups', 'forumng');
+    }
+}
+
+if ((!$targetgroup) && ($groupmode > 0)) {
+    // User needs to choose one from form.
+    $targetgroup = get_target_group_from_user($targetforum, $cloneid, $d,  $pageparams, $discussion, $options);
+}
+
+// Perform move.
+$discussion->move($targetforum, $targetgroup);
+
+// Get discussion id.
+$id = $discussion->get_id();
+
+// Redirect to new forum.
+redirect($targetforum->get_url(mod_forumng::PARAM_PLAIN));
+
+function get_target_group_from_user($targetforum, $cloneid, $d,  $pageparams, $discussion, $options) {
+    // User needs to choose one from form.
+    require_once(dirname(__FILE__) . '/group_form.php');
+    $mform = new mod_forumng_group_form('move.php', (object)array(
+            'targetforum' => $targetforum, 'discussionid' => $d,
+            'cloneid' => $cloneid, 'groups' => $options));
+    if ($mform->is_cancelled()) {
+        redirect('../../discuss.php?' .
+                $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+    }
+    if (($fromform = $mform->get_data()) && array_key_exists($fromform->group, $options)) {
+        return $fromform->group;
+    } else {
+        $pagename = get_string('move');
+        $pageurl = new moodle_url('/mod/forumng/feature/move/move.php', $pageparams);
+        $out = $discussion->init_page($pageurl, $pagename);
+        print $out->header();
+        $mform->display();
+        print $out->footer();
+        exit;
+    }
+}
diff --git a/mod/forumng/feature/move/moveall.php b/mod/forumng/feature/move/moveall.php
new file mode 100644
index 0000000..4a5f20e
--- /dev/null
+++ b/mod/forumng/feature/move/moveall.php
@@ -0,0 +1,74 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Move single or multiple discussions to target forum, or display group form if needed.
+ * @package forumngfeature
+ * @subpackage export
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once(dirname(__FILE__) . '/lib.php');
+require_once(dirname(__FILE__) . '/../forumngfeature_discussion_selector.php');
+
+class move_discussion_selector extends forumngfeature_discussion_selector {
+    public function get_button_name() {
+        return get_string('move', 'forumngfeature_move');
+    }
+
+    public function get_form($forum, $all, $selected = array()) {
+        global $CFG, $PAGE;
+
+        foreach ($selected as $discussionid) {
+            $params['selectd'.$discussionid] = $discussionid;
+        }
+        $params['id'] = $forum->get_course_module_id();
+        $params['clone'] = optional_param('clone', 0, PARAM_INT);
+
+        $group = mod_forumng::get_activity_group($forum->get_course_module());
+        if (empty($group)) {
+            $group = 0;
+        }
+
+        $params['group'] = $group;
+        $params['multigroups'] = optional_param('multigroups', 0, PARAM_INT);
+
+        $customdata = array('params' => $params, 'forum' => $forum);
+
+        return new mod_forumng_moveall_form('movealltogroups.php', $customdata);
+    }
+
+    public function get_page_name() {
+        return get_string('movealltitle', 'forumngfeature_move');
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+
+    }
+
+    public function only_discussion_types() {
+        return array('forumng-discussion-short');
+    }
+
+    public function exclude_discussion_types() {
+        return array('forumng-deleted');
+    }
+
+}
+
+forumngfeature_discussion_selector::go(new move_discussion_selector());
diff --git a/mod/forumng/feature/move/movealltogroups.php b/mod/forumng/feature/move/movealltogroups.php
new file mode 100644
index 0000000..97756e9
--- /dev/null
+++ b/mod/forumng/feature/move/movealltogroups.php
@@ -0,0 +1,214 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Move single or multiple discussions to target forum, or display group form if needed.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once(dirname(__FILE__) . '/lib.php');
+
+$cancel = optional_param('cancel', '', PARAM_TEXT);
+$id = required_param('id', PARAM_INT);
+$clone  = optional_param('clone', 0, PARAM_INT);
+$multigroups = optional_param('multigroups', 0, PARAM_INT);
+$directmove = optional_param('directmove', 0, PARAM_INT);
+
+// Get the forum the discussions are being moved from.
+$forum = mod_forumng::get_from_cmid($id, $clone);
+
+// Check for cancel and if cancelled redirect back to forum view page.
+if (!empty($cancel)) {
+    redirect('../../view.php?' .
+            $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+}
+$targetgroup = optional_param('group', 0, PARAM_INT);
+$target = optional_param('forum', 0, PARAM_INT);
+if ($target == 0) {
+    $target = required_param('target', PARAM_INT);
+}
+$targetforum = mod_forumng::get_from_cmid($target, mod_forumng::CLONE_DIRECT);
+
+// Sets up chosen target group.
+$chosentargetgroup = optional_param('chosengroup', 0, PARAM_INT);
+if (!$targetgroup) {
+    $targetgroup = $chosentargetgroup;
+}
+
+if (!$targetgroup) {
+    $cm = $forum->get_course_module();
+    $targetgroup = mod_forumng::get_activity_group($cm, false);
+}
+
+// Security check against user and their capabilities.
+$forum->require_view($targetgroup);
+check_move_permissions($forum, $targetforum);
+
+// If it is a clone, find the original.
+$targetforum = $targetforum->get_real_forum();
+$targetgroupmode = $targetforum->get_group_mode();
+
+// Get selected ids.
+$selectedids = array();
+foreach ($_POST as $field => $value) {
+    $matches = array();
+    if (!is_array($value) && (string)$value !== '0' && preg_match('~^selectd([0-9]+)$~', $field, $matches)) {
+        $selectedids[] = ($matches[1]);
+    }
+}
+
+if ($targetgroupmode != 0) {
+    $targetgroups = get_target_groups($selectedids, $targetforum, mod_forumng::CLONE_DIRECT);
+    if (count($targetgroups) == 1) {
+        // We have one usable target group.
+        if (!empty($targetgroups[0])) {
+            $targetgroup = $targetgroups[0];
+            $chosentargetgroup = $targetgroup;
+        } else {
+            $targetgroups[0] = 0;
+        }
+    } else {
+        if (count($targetgroups) == 0) {
+            $targetgroups[0] = 0;
+        } else {
+            $multigroups = 1;
+        }
+    }
+}
+
+$targetgroupdiff = 1;
+$groupsfound = true;
+$options = array();
+if ($targetgroupmode) {
+    $options = get_allowed_groupids($targetforum, false);
+    // Need to find the difference between original groups and options.
+    // See http://www.php.net/manual/en/function.array-diff.php .
+    $result = array_diff($targetgroups, $options);
+    $targetgroupdiff = count($result);
+    $optionsnum = count($options);
+    // Check to see whether we have some matching groups.
+    $optionsdiff = count(array_diff($options, $targetgroups));
+    if ($optionsnum === $optionsdiff) {
+        // No groups found.
+        $groupsfound = false;
+    }
+}
+
+if (!$chosentargetgroup && $targetgroup > 0 && !$groupsfound) {
+    // Target group set from source forum, but not in target - ensure choice given.
+    $targetgroup = 0;
+}
+
+if (($targetgroup > 0) || ($targetgroupmode == 0) || ($targetgroupdiff == 0) || $groupsfound) {
+    // We have a targetgroup or target group mode is nogroups.
+    $targetgroupfound = true;
+    foreach ($selectedids as $d) {
+        // We have the discussions and targetforum cmid, check to see whether it has groups.
+        $discussion = mod_forumng_discussion::get_from_id($d, $clone);
+        if (!$discussion->is_deleted()) {
+            // Check permission for move.
+            $aag = permission_to_move($discussion, $targetforum);
+            // Check to see whether we have the discussion.
+            // Work out target group for move.
+            $discussiongroupid = $discussion->get_group_id();
+            if (!$chosentargetgroup) {
+                $targetgroup = 0;
+                if (in_array ($discussiongroupid, $options, true)) {
+                    $targetgroup = $discussiongroupid;
+                } else {
+                    if ($targetgroupmode > 0) {
+                        // We have no target group so try to work one out if need be.
+                        // Work out target group for move.
+                        $targetgroup = get_target_group($discussion, $targetforum, true);
+                    }
+                }
+                if ($targetgroupmode == 0) {
+                    $targetgroup = 0;
+                }
+                if ($targetgroup == null) {
+                    // Target group not found.
+                    $targetgroupfound = false;
+                }
+                if ($targetgroup < 1) {
+                    // Target forum has no groups so set target group to null.
+                    $targetgroup = null;
+                }
+            }
+            // Perform move.
+            $discussion->move($targetforum, $targetgroup);
+        }
+    }
+
+    if (!$targetgroupfound && !($targetgroupmode == 0 && $forum->get_group_mode() == 0)) {
+        global $OUTPUT, $PAGE;
+        $pagelink = new moodle_url($targetforum->get_url(mod_forumng::PARAM_PLAIN));
+        $PAGE->set_url($pagelink);
+        echo $OUTPUT->header();
+        if ($targetgroupmode == 0) {
+            // No groups found in target forum.
+            // Get source forum group mode for use below.
+            $sourcegroupmode = $forum->get_group_mode();
+            if ($sourcegroupmode != 0) {
+                // Groups found in source forum.
+                echo $OUTPUT->notification(get_string('nogroup_info', 'forumngfeature_move'));
+            }
+        } else {
+            echo $OUTPUT->notification(get_string('group_info', 'forumngfeature_move'));
+        }
+        echo $OUTPUT->continue_button($pagelink);
+        echo $OUTPUT->footer();
+        exit;
+    } else {
+        // Redirect to new forum.
+        redirect($targetforum->get_url(mod_forumng::PARAM_PLAIN));
+    }
+
+} else {
+
+    foreach ($selectedids as $discussionid) {
+        $params['selectd'.$discussionid] = $discussionid;
+    }
+
+    // Get the id of the forum.
+    $params['target'] = $target;
+    $params['clone'] = $clone;
+    $params['id'] = $forum->get_course_module_id();
+    $params['multigroups'] = $multigroups;
+    $params['targetgroupmode'] = $targetgroupmode;
+
+    $pagename = get_string('move');
+    $pageurl = new moodle_url('/mod/forumng/feature/move/movealltogroups.php', $params);
+    $out = $forum->init_page($pageurl, $pagename);
+
+    $customdata = array('params' => $params, 'targetforum' => $targetforum);
+
+    require_once(dirname(__FILE__) . '/group_form.php');
+    $mform = new mod_forumng_moveall_groups_form('movealltogroups.php', $customdata);
+
+    if ($mform->is_cancelled()) {
+        redirect('../../view.php?' .
+                $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+    } else {
+        echo $out->header();
+        $mform->display();
+        echo $out->footer();
+        exit;
+    }
+}
diff --git a/mod/forumng/feature/move/tests/behat/basic.feature b/mod/forumng/feature/move/tests/behat/basic.feature
new file mode 100644
index 0000000..42060c8
--- /dev/null
+++ b/mod/forumng/feature/move/tests/behat/basic.feature
@@ -0,0 +1,184 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature @forumngfeature_move
+Feature: Move discussions
+  In order to move discussions
+  As a user
+  I use the move feature
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "groups" exist:
+      | name | course | idnumber |
+      | group1 | C1 | g1 |
+      | group2 | C1 | g2 |
+      | group3 | C1 | g3 |
+      | group4 | C1 | g4 |
+    And the following "groupings" exist:
+      | name | course | idnumber |
+      | G1   | C1     | GI1      |
+      | G2   | C1     | GI2      |
+      | G3   | C1     | GI3      |
+    And the following "grouping groups" exist:
+      | grouping | group |
+      | GI1       | g1 |
+      | GI1       | g2 |
+      | GI2       | g3 |
+      | GI2       | g4 |
+      | GI3       | g1 |
+      | GI3       | g3 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | No groups |
+      | Forum introduction | No group forum |
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | No groups 2 |
+      | Forum introduction | Empty no group forum |
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | G1 grouping |
+      | Forum introduction | G1 grouping forum |
+      | Group mode | Separate groups |
+      | Grouping | G1 |
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | G2 grouping |
+      | Forum introduction | G2 grouping forum |
+      | Group mode | Separate groups |
+      | Grouping | G2 |
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | G3 grouping |
+      | Forum introduction | G3 grouping forum |
+      | Group mode | Separate groups |
+      | Grouping | G3 |
+    And I follow "No groups"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I follow "Course 1"
+    And I follow "G1 grouping"
+    And I set the field "Separate groups" to "group1"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | abc |
+    And I follow "G1 grouping"
+    And I set the field "Separate groups" to "group2"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | Discussion 3 |
+      | Message | abc |
+    And I follow "Course 1"
+    And I follow "G2 grouping"
+    And I set the field "Separate groups" to "group3"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | Discussion 4 |
+      | Message | abc |
+    And I follow "G2 grouping"
+    And I set the field "Separate groups" to "group4"
+    And I press "Go"
+    And I add a discussion with the following data:
+      | Subject | Discussion 5 |
+      | Message | abc |
+    And I log out
+
+  Scenario: Move discussion from in discussion option.
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "No groups"
+    And I follow "Discussion 1"
+    And I set the field "target" to "No groups 2"
+    When I press "Move"
+    Then I should see "Empty no group forum"
+    And I should see "Discussion 1"
+    Given I follow "Discussion 1"
+    And I set the field "target" to "G3 grouping"
+    When I press "Move"
+    And I set the field "group" to "group1"
+    And I press "Move"
+    Then I should see "Discussion 1"
+    And I should see "G3 grouping forum"
+    Given I set the field "Separate groups" to "group1"
+    When I press "Go"
+    Then I should see "Discussion 1"
+    Given I follow "Discussion 1"
+    And I set the field "target" to "G1 grouping"
+    When I press "Move"
+    Then I should see "Discussion 1"
+    And I should see "G1 grouping forum"
+    Given I set the field "Separate groups" to "group1"
+    When I press "Go"
+    Then I should see "Discussion 1"
+    Given I follow "Discussion 1"
+    And I set the field "target" to "G2 grouping"
+    When I press "Move"
+    And I set the field "group" to "group3"
+    And I press "Move"
+    Then I should see "Discussion 1"
+    And I should see "G2 grouping forum"
+    Given I set the field "Separate groups" to "group3"
+    When I press "Go"
+    Then I should see "Discussion 1"
+
+  Scenario: Move discussions from main forum page.
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "No groups"
+    When I press "Move"
+    And I press "All discussions shown"
+    And I set the field "id_forum" to "No groups 2"
+    And I press "Move discussions"
+    Then I should see "Empty no group forum"
+    And I should see "Discussion 1"
+    Given I press "Move"
+    And I press "All discussions shown"
+    And I set the field "id_forum" to "G3 grouping"
+    And I press "Move discussions"
+    And I set the field "chosengroup" to "group1"
+    When I press "Move"
+    Then I should see "Discussion 1"
+    And I should see "G3 grouping forum"
+    Given I set the field "Separate groups" to "group1"
+    When I press "Go"
+    Then I should see "Discussion 1"
+    Given I set the field "Separate groups" to "All participants"
+    And I press "Go"
+    When I press "Move"
+    And I press "All discussions shown"
+    And I set the field "id_forum" to "G1 grouping"
+    And I press "Move discussions"
+    Then I should see "Discussion 1"
+    And I should see "G1 grouping forum"
+    Given I set the field "Separate groups" to "group1"
+    When I press "Go"
+    Then I should see "Discussion 1"
+    Given I press "Move"
+    And I press "All discussions shown"
+    And I set the field "id_forum" to "G2 grouping"
+    And I press "Move discussions"
+    And I set the field "chosengroup" to "group3"
+    And I press "Move discussions"
+    Then I should see "Discussion 1"
+    And I should see "Discussion 2"
+    And I should see "G2 grouping forum"
+    Given I set the field "Separate groups" to "group3"
+    When I press "Go"
+    Then I should see "Discussion 4"
+    And I set the field "Separate groups" to "All participants"
+    And I press "Go"
+    When I press "Move"
+    And I press "All discussions shown"
+    And I set the field "id_forum" to "G3 grouping"
+    And I press "Move discussions"
+    Then I should see "You appear to have moved discussions to a forum that has groups for which some"
+    Given I press "Continue"
+    And I should see "G3 grouping forum"
+    And I should see "Discussion 5"
+    When I set the field "Separate groups" to "group1"
+    And I press "Go"
+    Then I should see "Discussion 5"
+    And I should not see "Discussion 1"
diff --git a/mod/forumng/feature/move/tests/behat/permissions.feature b/mod/forumng/feature/move/tests/behat/permissions.feature
new file mode 100644
index 0000000..be80b89
--- /dev/null
+++ b/mod/forumng/feature/move/tests/behat/permissions.feature
@@ -0,0 +1,50 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature @forumngfeature_move
+Feature: Move discussions permissions
+  In order to move discussions
+  As a user
+  I must have the right permissions on the target form
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+    And the following "users" exist:
+      | username | firstname | lastname | email      |
+      | teacher1 | teacher   | 1        | t1@asd.com |
+    And the following "course enrolments" exist:
+      | user     | course | role    |
+      | teacher1 | C1     | teacher |
+    And the following "activities" exist:
+      | activity | name    | introduction           | course | idnumber | visible |
+      | forumng  | forum1  | Test forum description | C1     | forumng1 | 1       |
+      | forumng  | forum2  | Test forum description | C1     | forumng2 | 1       |
+      | forumng  | forum3  | Test forum description | C1     | forumng3 | 1       |
+      | forumng  | forum4  | Test forum description | C1     | forumng4 | 0       |
+    And the following "permission overrides" exist:
+      | capability                         | permission | role    | contextlevel    | reference |
+      | mod/forumng:movediscussions        | Prevent    | teacher | Activity module | forumng3  |
+      | moodle/course:viewhiddenactivities | Prevent    | teacher | Activity module | forumng4  |
+    And I log in as "teacher1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "forum1"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc          |
+
+  Scenario: Move discussion from in discussion page.
+    Then the "menutarget" select box should not contain "forum1"
+    And the "menutarget" select box should not contain "forum3"
+    And the "menutarget" select box should not contain "forum4"
+    And the "menutarget" select box should contain "forum2"
+
+  Scenario: Move discussion from main page.
+    Given I follow "forum1"
+    When I press "Move"
+    And I press "All discussions shown"
+    Then the "forum" select box should not contain "forum1"
+    And the "forum" select box should not contain "forum3"
+    And the "forum" select box should not contain "forum4"
+    # Note bug in behat stops checking select box with single value contains the value.
+    Given I press "Move discussions"
+    Then I should see "Discussion 1"
diff --git a/mod/forumng/feature/move/version.php b/mod/forumng/feature/move/version.php
new file mode 100644
index 0000000..b640ef2
--- /dev/null
+++ b/mod/forumng/feature/move/version.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage move
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2014012800;
+$plugin->component = 'forumngfeature_move';
diff --git a/mod/forumng/feature/options/forumngfeature_options.php b/mod/forumng/feature/options/forumngfeature_options.php
new file mode 100644
index 0000000..3acef30
--- /dev/null
+++ b/mod/forumng/feature/options/forumngfeature_options.php
@@ -0,0 +1,35 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: Show options form. (Note: Actual form is just a variant
+ * of forum core editpost.php.)
+ * @package forumngfeature
+ * @subpackage options
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_options extends forumngfeature_discussion {
+    public function get_order() {
+        return 100;
+    }
+
+    public function display($discussion) {
+        return parent::get_button($discussion,
+            get_string('discussionoptions', 'forumng'), 'editpost.php', false, array(), '', false,
+                false, 'fng-mobile-on');
+    }
+}
diff --git a/mod/forumng/feature/options/lang/en/forumngfeature_options.php b/mod/forumng/feature/options/lang/en/forumngfeature_options.php
new file mode 100644
index 0000000..e829a8b
--- /dev/null
+++ b/mod/forumng/feature/options/lang/en/forumngfeature_options.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage options
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Discussion options';
diff --git a/mod/forumng/feature/options/lang/es/forumngfeature_options.php b/mod/forumng/feature/options/lang/es/forumngfeature_options.php
new file mode 100644
index 0000000..a6f0bc1
--- /dev/null
+++ b/mod/forumng/feature/options/lang/es/forumngfeature_options.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage options
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Opciones del tema';
diff --git a/mod/forumng/feature/options/lang/fr/forumngfeature_options.php b/mod/forumng/feature/options/lang/fr/forumngfeature_options.php
new file mode 100644
index 0000000..d7e5723
--- /dev/null
+++ b/mod/forumng/feature/options/lang/fr/forumngfeature_options.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage options
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Options des discussions';
diff --git a/mod/forumng/feature/options/lang/he/forumngfeature_options.php b/mod/forumng/feature/options/lang/he/forumngfeature_options.php
new file mode 100644
index 0000000..da8dafd
--- /dev/null
+++ b/mod/forumng/feature/options/lang/he/forumngfeature_options.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage options
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'אפשרויות';
diff --git a/mod/forumng/feature/options/version.php b/mod/forumng/feature/options/version.php
new file mode 100644
index 0000000..03782d4
--- /dev/null
+++ b/mod/forumng/feature/options/version.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage options
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngfeature_options';
diff --git a/mod/forumng/feature/print/forumngfeature_print.php b/mod/forumng/feature/print/forumngfeature_print.php
new file mode 100644
index 0000000..c64eb55
--- /dev/null
+++ b/mod/forumng/feature/print/forumngfeature_print.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Discussion feature: print discussion / selected posts.
+ * @package forumngfeature
+ * @subpackage print
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngfeature_print extends forumngfeature_discussion {
+    public function get_order() {
+        return 1200;
+    }
+
+    public function should_display($discussion) {
+        return true;
+    }
+
+    public function display($discussion) {
+        return parent::get_button($discussion,
+                get_string('print', 'forumngfeature_print'),
+                'feature/print/print.php',
+                false, array(), '', false, true);
+    }
+}
diff --git a/mod/forumng/feature/print/lang/en/forumngfeature_print.php b/mod/forumng/feature/print/lang/en/forumngfeature_print.php
new file mode 100644
index 0000000..d2f4117
--- /dev/null
+++ b/mod/forumng/feature/print/lang/en/forumngfeature_print.php
@@ -0,0 +1,28 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage print
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['print'] = 'Print';
+$string['print_pagename'] = 'Printable version';
+$string['printedat'] = 'Formatted for printing at {$a}';
+$string['back'] = 'When printing finishes, <a href=\'{$a}\'>return to the discussion</a>. (This box will not appear on the printout.)';
+$string['pluginname'] = 'Print posts';
diff --git a/mod/forumng/feature/print/lang/es/forumngfeature_print.php b/mod/forumng/feature/print/lang/es/forumngfeature_print.php
new file mode 100644
index 0000000..aaac75b
--- /dev/null
+++ b/mod/forumng/feature/print/lang/es/forumngfeature_print.php
@@ -0,0 +1,28 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage print
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['print'] = 'Imprimir';
+$string['print_pagename'] = 'Versión imprimible';
+$string['printedat'] = 'Formateado para impresión el {$a}';
+$string['back'] = 'Cuando termine la impresión, <a href=\'{$a}\'>volver al tema</a>. (Este mensaje no aparecerá en la página impresa.)';
+$string['pluginname'] = 'Impresión de temas';
diff --git a/mod/forumng/feature/print/lang/fr/forumngfeature_print.php b/mod/forumng/feature/print/lang/fr/forumngfeature_print.php
new file mode 100644
index 0000000..ac4da07
--- /dev/null
+++ b/mod/forumng/feature/print/lang/fr/forumngfeature_print.php
@@ -0,0 +1,28 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage print
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['print'] = 'Imprimer';
+$string['print_pagename'] = 'Version imprimable';
+$string['printedat'] = 'Formaté pour l\'impression à {$a}';
+$string['back'] = 'A la fin de l\'impression, <a href=\'{$a}\'>retournez à la discussion</a>. (Cette zone n\'apparaît pas à l\'impression.)';
+$string['pluginname'] = 'Impression des messages';
diff --git a/mod/forumng/feature/print/lang/he/forumngfeature_print.php b/mod/forumng/feature/print/lang/he/forumngfeature_print.php
new file mode 100644
index 0000000..07c581c
--- /dev/null
+++ b/mod/forumng/feature/print/lang/he/forumngfeature_print.php
@@ -0,0 +1,28 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage print
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['print'] = 'הדפסה';
+$string['print_pagename'] = 'גרסת הדפסה';
+$string['printedat'] = 'Formatted for printing at {$a}';
+$string['back'] = 'When printing finishes, <a href=\'{$a}\'>return to the discussion</a>. (This box will not appear on the printout.)';
+$string['pluginname'] = 'הדפסת פרסומים';
diff --git a/mod/forumng/feature/print/print.php b/mod/forumng/feature/print/print.php
new file mode 100644
index 0000000..9ea220f
--- /dev/null
+++ b/mod/forumng/feature/print/print.php
@@ -0,0 +1,78 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Script for generating the printable version of the discussion or selected posts.
+ * This uses the post selector infrastructure to handle the situation when posts
+ * are being selected.
+ * @package forumngfeature
+ * @subpackage print
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../forumngfeature_post_selector.php');
+
+class print_post_selector extends forumngfeature_post_selector {
+    public function get_button_name() {
+        return get_string('print', 'forumngfeature_print');
+    }
+    public function get_page_name() {
+        return get_string('print_pagename', 'forumngfeature_print');
+    }
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $COURSE, $USER, $CFG, $PAGE;
+        $d = $discussion->get_id();
+        $forum = $discussion->get_forum();
+        $PAGE->set_pagelayout('embedded');
+        $out = mod_forumng_utils::get_renderer();
+
+        print $out->header();
+        $backlink = new moodle_url('/mod/forumng/discuss.php',
+                $discussion->get_link_params_array());
+        print html_writer::start_tag('div', array('class' => 'forumng-printable-header'));
+        print html_writer::tag('div',
+                link_arrow_left($discussion->get_subject(), $backlink),
+                array('class' => 'forumng-printable-backlink'));
+        print html_writer::tag('div',
+                get_string('printedat', 'forumngfeature_print', userdate(time())),
+                array('class' => 'forumng-printable-date'));
+        print html_writer::tag('div', '', array('class' => 'clearer'));
+        print "\n";
+        print $out->box(get_string('back', 'forumngfeature_print', $backlink->out()),
+                'generalbox forumng-donotprint');
+
+        print html_writer::start_tag('div', array('class' => 'forumng-showprintable'));
+        if ($all) {
+            print $out->render_discussion($discussion, array(
+                mod_forumng_post::OPTION_NO_COMMANDS => true,
+                mod_forumng_post::OPTION_CHILDREN_EXPANDED => true,
+                mod_forumng_post::OPTION_PRINTABLE_VERSION => true));
+        } else {
+            $allhtml = '';
+            $alltext = '';
+            $discussion->build_selected_posts_email($selected, $alltext, $allhtml,
+                    array(mod_forumng_post::OPTION_PRINTABLE_VERSION));
+            print $allhtml;
+        }
+
+        print html_writer::end_tag('div');
+        $forum->print_js(0, false);
+        print $out->footer();
+    }
+}
+
+forumngfeature_post_selector::go(new print_post_selector());
diff --git a/mod/forumng/feature/print/version.php b/mod/forumng/feature/print/version.php
new file mode 100644
index 0000000..366144a
--- /dev/null
+++ b/mod/forumng/feature/print/version.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngfeature
+ * @subpackage print
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngfeature_print';
diff --git a/mod/forumng/feature/sticky/forumngfeature_sticky.php b/mod/forumng/feature/sticky/forumngfeature_sticky.php
new file mode 100644
index 0000000..4e64bf3
--- /dev/null
+++ b/mod/forumng/feature/sticky/forumngfeature_sticky.php
@@ -0,0 +1,66 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum feature: toggle sticky.
+ * @package forumngfeature
+ * @subpackage sticky
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__).'/../forumngfeature_discussion_list.php');
+
+/**
+ * This feature lets users toggle between automatically and manually
+ * marking discussions read. It appears at bottom of the
+ * discussion list.
+ */
+class forumngfeature_sticky extends forumngfeature_discussion_list {
+    public function get_order() {
+            return 350;
+    }
+
+    public function display($forum) {
+        $params = array();
+        $params['sticky'] = 100;
+        $params['normal'] = 0;
+        $params['exclude'] = 'forumng-deleted,forumng-sticky';
+        $sticky_get = array_merge($params, $_GET);
+        $stickyonbutton = parent::get_button(
+                $forum,
+                get_string('sticky_on', 'forumngfeature_sticky'),
+                'feature/sticky/sticky.php',
+                false,
+                $sticky_get,
+                '',
+                'forumng-dselectorbutton');
+        unset($params);
+        $params['sticky'] = 0;
+        $params['normal'] = 200;
+        $params['include'] = 'forumng-sticky';
+        $params['exclude'] = 'forumng-deleted';
+        $normal_get = array_merge($params, $_GET);
+        $stickyoffbutton = parent::get_button(
+                $forum,
+                get_string('sticky_off', 'forumngfeature_sticky'),
+                'feature/sticky/sticky.php',
+                false,
+                $normal_get,
+                '',
+                'forumng-dselectorbutton');
+        return $stickyonbutton . $stickyoffbutton;
+    }
+}
diff --git a/mod/forumng/feature/sticky/internaldoc/testcase.sticky.txt b/mod/forumng/feature/sticky/internaldoc/testcase.sticky.txt
new file mode 100644
index 0000000..11b2420
--- /dev/null
+++ b/mod/forumng/feature/sticky/internaldoc/testcase.sticky.txt
@@ -0,0 +1,280 @@
+This file contains a sequence of test cases for the ForumNG Sticky feature.
+
+Initial setup
+=============
+
+See testcase.txt for a description of the format of these tests.
+Since this test deals only with the forum view page user interface, only these instructions
+will be required.
+Only one forum is required. Six discussions will need to be setup, as follows:
+
+Discussion1 - a discussion containing one text post replies.
+Discussion2 - a discussion containing two text post replies.
+Discussion3 - a discussion containing three or more reply posts.
+Discussion4 - a discussion containing four or more posts.
+Discussion5 - a discussion containing five or more posts.
+Discussion6 - a discussion containing six or more posts.
+
+Some parts of the interface have different behaviour in 'fancy' (AJAX/JavaScript)
+mode, so we will test those parts with first with Javascript disabled and then enabled in the browser
+
+
+Browser Configuration 1
+=======================
+
+Configure the browser to disable Javascript.
+
+
+CRE Creating ForumNG
+====================
+
+CRE01 / admin
+  In any course week, from the add activity dropdown, choose 'ForumNG'.
+  Leave all settings as default except name 'F.ST'. Save form and return to the course.
+
+BSN Basic usage (non-JS)
+========================
+
+BSN01 / admin
+   Go to the course and click into F.ST.
+-  Verify that there is a 'Start a new discussion' button, with text beneath,
+   'There are no discussions in this forum yet.'
+-  Verify that next there are six buttons, the existing 'Mark all posts read', 'Change' and
+   'Export' buttons, followed by two new buttons 'Make sticky' and 'Make normal',
+   with the preexisting 'View posts by user' last.
+
+BSN02 / admin
+   Click the 'Start a new discussion' button.
+-  You should be taken to a new page with a form for starting a discussion.
+   Type 'Discussion1' in subject and a message and hit the 'Post discussion' button.
+-  Verify that you are taken to the new discussion page and your message is shown.
+
+
+BSN03 / admin
+   Click 'Reply' enter any subject and text, click 'Post reply' for post.
+-  You should have one discussion and a reply appearing.
+
+   Repeat the 'Start a new discussion' and 'Reply' process a further five times,
+   enter Discussion(No) as subject and any text for each discussion, and enter any subject and text
+   for each post reply
+Note: Only the post quantities are required for later testing.
+
+Return to the forumng view page.
+
+DEL Delete Discussions
+=======================
+
+DEL01 / admin
+   Open discussion 3 and click delete to delete it.
+-  Click to confirm you are sure you want to delete this discussion.
+-  Confirm Discussion3 is now dimmed and struck through.
+
+DEL02 / admin
+   Open discussion 4 and click delete to delete it.
+-  Click to confirm you are sure you want to delete this discussion.
+-  Confirm Discussion4 is now dimmed and struck through.
+
+
+BSD Basic usage (non-JS) sticky discussions
+===========================================
+
+BSD01 / admin
+-  Confim that the forum view page shows all six discussions, and that they can be ordered by the
+   column headings.
+
+BSD02 / admin
+   Click 'Make sticky'.
+-  Confirm that the Make sticky page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and two buttons beneath:
+   'All discussions shown' and 'Selected discussions'.
+
+BSD03 / admin
+   Click 'All discussions shown'.
+   Confirm that you are returned to the forum view page.
+-  Verify that all non deleted discussions are now displaying the 'Sticky' icon.
+
+BSD04 / admin
+   Click 'Make sticky'.
+-  Confirm that the Make sticky page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and two buttons beneath:
+   'All discussions shown' and 'Selected discussions'.
+   Click 'Selected discussions'.
+
+BSD05 / admin
+   Confirm that you are returned to the forum sticky view page with the text at the top
+   'Tick the box beside each discussion you want to include. When you�re done, scroll to the bottom
+   and click �Confirm selection�.' and that there is an empty column 'Select discussion'
+   on the right which is empty.
+   And that there are 'Confirm selection' and 'Cancel' buttons below.
+-  Verify that usable discussions are already sticky so no check boxes are displayed.
+   Click 'Cancel'.
+
+   Confirm that you are returned to the forum view page.
+
+BSD06 / admin
+   Click 'Make normal'.
+-  Confirm that the Make normal page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and two buttons beneath:
+   'All discussions shown' and 'Selected discussions'.
+   Click 'Selected discussions'.
+
+BSD07 / admin
+   Confirm that you are returned to the forum sticky view page with the text at the top
+   'Tick the box beside each discussion you want to include. When you�re done, scroll to the bottom
+   and click �Confirm selection�.'
+-  Verify that there is a column 'Select discussion' added on the right which now has check boxes
+   against each non deleted discussion.
+
+BSD08 / admin
+   Click the check boxes for discussions 5 + 6.
+   Click 'Confirm selection'
+   Confirm that you are returned to the forum view page.
+-  Verify that the two discussions 5 + 6 are no longer sticky ie. their sticky icon has been removed.
+-  Verify that clicking any header reorders the discussions, and that discussions 1 + 2 are still
+   above discussions 5 + 6.
+
+BSD09 / admin
+   Click 'Make normal'.
+-  Confirm that the Make normal page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and two buttons beneath:
+   'All discussions shown' and 'Selected discussions'.
+   Click 'Selected discussions'.
+
+BSD10 / admin
+   Confirm that you are returned to the forum sticky view page with the text at the top with
+   �Confirm selection� and 'Cancel' buttons below.
+-  Verify that there is a column 'Select discussion' added on the right which now has check boxes
+   against each currently sticky discussion. (ie only D1 + D2)
+   Click the check box against Discussion2.
+   Click 'Confirm selection'.
+
+   Confirm that you are returned to the forum view page.
+
+BSD11 / admin
+   Click 'Make normal'.
+-  Confirm that the Make normal page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and two buttons beneath:
+   'All discussions shown' and 'Selected discussions'.
+   Click 'All discussions shown'.
+
+BSD12 / admin
+-  Verify that you are returned to the forum view page, and that there are now no
+   'Sticky' discussions.
+
+
+Browser Configuration 2
+=======================
+
+Configure the browser to enable Javascript, and refresh the forumng view page.
+
+BJD Basic usage (JS Enabled) sticky discussions
+===============================================
+
+BJD01 / admin
+-  Confim that the forum view page shows all six discussions, and that none are currently 'Sticky'.
+
+BJD02 / admin
+   Click 'Make sticky'.
+-  Confirm that the 'Make sticky' dialogue opens over the current page with the phrase
+   'Do you want to include all discussions listed on this page, or only selected discussions?'
+   and three buttons beneath: 'All discussions shown', 'Selected discussions' and 'Cancel'.
+
+BJD03 / admin
+   Click 'All discussions shown'.
+-  Verify that the page refreshes and that all non deleted discussions are now displaying
+   the green and white arrow 'Sticky' icon.
+
+BJD04 / admin
+   Click 'Make sticky'.
+-  Confirm that the Make sticky dialogue opens with the text and buttons beneath:
+   'All discussions shown' and 'Selected discussions'.
+   Click 'Selected discussions'.
+
+BJD05 / admin
+   Confirm that you are returned to the forum sticky view page with the text at the top
+   'Tick the box beside each discussion you want to include. When you�re done, scroll to the bottom
+   and click 'Confirm selection' and that beneath this are two buttons
+   'Select all' and 'Deselect all'.
+
+   And that there are 'Confirm selection' and 'Cancel' buttons below the discussions.
+-  Verify that usable discussions are already sticky so no check boxes are displayed,
+   and that the 'Confirm selection' button is disabled.
+   Click 'Cancel'.
+
+   Confirm that you are returned to the forum view page.
+
+BJD06 / admin
+   Click 'Make normal'.
+-  Confirm that the Make normal dialogue opens over the forum view page with the text
+   'Do you want to include all discussions listed on this page, or only selected discussions?'
+    and three buttons beneath: 'All discussions shown', 'Selected discussions' and 'Cancel'.
+   Click 'All discussions shown'.
+
+BJD07 / admin
+   Confirm that the forum view page refreshes automatically.
+-  Verify that there are now no 'Sticky' icons against any discussions.
+
+BJD08 / admin
+   Click 'Make sticky'.
+-  Confirm that the Make sticky dialogue opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and three buttons beneath:
+   'All discussions shown', 'Selected discussions' and 'Cancel'.
+   Click 'Selected discussions'.
+
+BJD09 / admin
+   Confirm that you are returned to the forum sticky view page with the text at the top
+   'Tick the box beside each discussion you want to include. When you�re done, scroll to the bottom
+   and click 'Confirm selection'
+   Confirm that beneath this are two buttons 'Select all' and 'Deselect all'.
+   Confirm that a check box is placed before each discussion title.
+   Confirm that there are 'Confirm selection' and 'Cancel' buttons below the discussions.
+
+BJD10 / admin
+   Click 'Select all'.
+-  Verify that all usable discussions check boxes are now ticked.
+   Click 'Deselect all'.
+-  Verify that all usable discussions check boxes are now unticked.
+   Click the check boxes against discussions 2 + 5
+   Click 'Confirm selection'.
+
+BJD11 / admin
+   Click 'Make normal'.
+-  Confirm that the Make normal dialogue opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and three buttons beneath:
+   'All discussions shown', 'Selected discussions' and 'Cancel'.
+   Click 'Selected discussions'.
+
+BJD12 / admin
+-  Confirm that the Make normal page opens with the text 'Tick the box beside each discussion
+   you want to include. When you�re done, scroll to the bottom and click �Confirm selection�,
+   and that there are two buttons beneath:  'Select all' and 'Deselect all'.
+-  Verify that only the two 'Sticky' discussions 2 + 5 have check boxes placed against them.
+   Click 'Select all'.
+-  Verify that the two discussions 2 + 5 check boxes have become ticked.
+   Click 'Deselect all'.
+-  Verify that the two discussions 2 + 5 check boxes have become unticked.
+   Click 'Select all'.
+   Click 'Confirm selection'.
+
+BJD13 / admin
+   Confirm that you are returned to the forum view page, and that there are now no
+   'Sticky' discussions.
+
+BJD14 / admin
+   Click 'Make normal'.
+-  Confirm that the Make normal dialogue opens with the text and three buttons beneath:
+   'All discussions shown', 'Selected discussions' and 'Cancel'.
+   Click 'Select discussions'.
+
+BJD15 / admin
+-  Confirm that the Make normal page opens with the text 'Tick the box beside each discussion
+   you want to include. When you�re done, scroll to the bottom and click �Confirm selection�,
+   and that there are two buttons beneath: 'Select all' and 'Deselect all'.
+-  Verify that there are no 'Sticky' discussions and that clicking neither of the two buttons
+   has any effect, as all discussions are currently normal.
+-  Verify the 'Confirm selection' button is disabled.
+   Click 'Cancel'.
+   Confirm that you are returned to the forum view page.
+
+Test complete.
+==============
diff --git a/mod/forumng/feature/sticky/lang/en/forumngfeature_sticky.php b/mod/forumng/feature/sticky/lang/en/forumngfeature_sticky.php
new file mode 100644
index 0000000..1258428
--- /dev/null
+++ b/mod/forumng/feature/sticky/lang/en/forumngfeature_sticky.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage sticky
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['sticky_on'] = 'Make discussions sticky';
+$string['sticky_off'] = 'Make discussions not sticky';
+$string['pluginname'] = 'Option to manually mark discussions sticky';
diff --git a/mod/forumng/feature/sticky/lang/es/forumngfeature_sticky.php b/mod/forumng/feature/sticky/lang/es/forumngfeature_sticky.php
new file mode 100644
index 0000000..9db11dc
--- /dev/null
+++ b/mod/forumng/feature/sticky/lang/es/forumngfeature_sticky.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage sticky
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['sticky_on'] = 'Convertir los temas en tipo post-it';
+$string['sticky_off'] = 'Eliminar la opción de post-it de los temas';
+$string['pluginname'] = 'Complemento para marcar de forma manual los temas como tipo post-it';
diff --git a/mod/forumng/feature/sticky/lang/fr/forumngfeature_sticky.php b/mod/forumng/feature/sticky/lang/fr/forumngfeature_sticky.php
new file mode 100644
index 0000000..fcf0b9d
--- /dev/null
+++ b/mod/forumng/feature/sticky/lang/fr/forumngfeature_sticky.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage sticky
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['sticky_on'] = 'Mettre en tête';
+$string['sticky_off'] = 'Retirer de la tête';
+$string['pluginname'] = 'Option pour mettre manuellement une discussion en tête de liste';
diff --git a/mod/forumng/feature/sticky/lang/he/forumngfeature_sticky.php b/mod/forumng/feature/sticky/lang/he/forumngfeature_sticky.php
new file mode 100644
index 0000000..79ce1fa
--- /dev/null
+++ b/mod/forumng/feature/sticky/lang/he/forumngfeature_sticky.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage sticky
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['sticky_on'] = 'קביעת דיון כ"דביק"';
+$string['sticky_off'] = 'קביעת דיון כרגיל';
+$string['pluginname'] = 'קביעת דיון כ"דביק"';
diff --git a/mod/forumng/feature/sticky/sticky.php b/mod/forumng/feature/sticky/sticky.php
new file mode 100644
index 0000000..9032318
--- /dev/null
+++ b/mod/forumng/feature/sticky/sticky.php
@@ -0,0 +1,85 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Mark as sticky scripts. This uses the discussion selector infrastructure to
+ * handle the situation when discussions are being selected for marking.
+ * @package forumngfeature
+ * @subpackage sticky
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__) . '/../forumngfeature_discussion_selector.php');
+
+class sticky_on_selector extends forumngfeature_discussion_selector {
+
+    public function get_button_name() {
+        return get_string('sticky_on', 'forumngfeature_sticky');
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $DB, $CFG;
+        if ($discussion->can_manage_discussions()) {
+            foreach ($selected as $postid) {
+                $DB->set_field('forumng_discussions', 'sticky', 1,
+                        array('id' => $postid, 'deleted' => 0));
+            }
+            // Redirect to the view page.
+            redirect($discussion->get_url(mod_forumng::PARAM_PLAIN));
+        }
+    }
+
+    public function only_discussion_types() {
+        return array('forumng-discussion-short');
+    }
+
+    public function exclude_discussion_types() {
+        return array('forumng-sticky', 'forumng-deleted');
+    }
+}
+
+class sticky_off_selector extends forumngfeature_discussion_selector {
+    public function get_button_name() {
+        return get_string('sticky_off', 'forumngfeature_sticky');
+    }
+
+    public function apply($discussion, $all, $selected, $formdata) {
+        global $DB, $CFG;
+        if ($discussion->can_manage_discussions()) {
+            foreach ($selected as $postid) {
+                $DB->set_field('forumng_discussions', 'sticky', 0,
+                        array('id' => $postid, 'deleted' => 0));
+            }
+            // Redirect to the view page.
+            redirect($discussion->get_url(mod_forumng::PARAM_PLAIN));
+        }
+    }
+
+    public function only_discussion_types() {
+        return array('forumng-sticky');
+    }
+
+    public function exclude_discussion_types() {
+        return array('forumng-deleted');
+    }
+}
+
+if ($buttonselection = optional_param('sticky', '', PARAM_INT)) {
+    forumngfeature_discussion_selector::go(new sticky_on_selector());
+}
+if ($buttonselection = optional_param('normal', '', PARAM_INT)) {
+    forumngfeature_discussion_selector::go(new sticky_off_selector());
+}
diff --git a/mod/forumng/feature/sticky/tests/behat/basic.feature b/mod/forumng/feature/sticky/tests/behat/basic.feature
new file mode 100644
index 0000000..b3a85a9
--- /dev/null
+++ b/mod/forumng/feature/sticky/tests/behat/basic.feature
@@ -0,0 +1,352 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_sticky
+Feature: Make discussions sticky
+  In order to make discussions sticky
+  As a teacher
+  I need to be able to use both features that make discussions stick to the top
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+      | teacher1 | Teacher | 1 | teacher1@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | teacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And the following "activities" exist:
+      | activity | name                   | introduction                  | course | idnumber |
+      | forumng  | Test forum name sticky | Test forum sticky description | C1     | forumng1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I follow "Course 1"
+    And I follow "Test forum name sticky"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | Discussion 1 |
+    And I follow "Test forum name sticky"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | Discussion 2 |
+    And I follow "Test forum name sticky"
+    And I add a discussion with the following data:
+      | Subject | Discussion 3 |
+      | Message | Discussion 3 |
+    And I follow "Test forum name sticky"
+    And I add a discussion with the following data:
+      | Subject | Discussion 4 |
+      | Message | Discussion 4 |
+    And I log out
+
+  Scenario: Testing the 'Make discussion sticky' options
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name sticky"
+    Then I should see "Test forum sticky description"
+
+    # Check order of existing discussions
+    And "Discussion 4" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 2" "table_row"
+    And "Discussion 2" "table_row" should appear before "Discussion 1" "table_row"
+
+    # Check for non existence of any icons
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 2" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 1" "table_row"
+
+    # Check for availability of sticky buttons for Admin 
+    Then "Make discussions sticky" "button" should exist
+    Then "Make discussions not sticky" "button" should exist
+
+    # Delete discussion
+    And I follow "Discussion 4"
+    When I press "Delete"
+    And I press "Delete"
+    # Confirm discussion deleted
+    And ".forumng-deleted" "css_element" should exist in the "Discussion 4" "table_row"
+
+    # Lock dscussion
+    And I follow "Discussion 2"
+    When I press "Lock"
+    Given I set the field "Message" to "Now locked for sticky test"
+    # Needed for flow
+    And I wait "1" seconds
+    When I press "Lock discussion"
+    And I wait "1" seconds
+    Then I should see "This discussion is now closed"
+    And I should see "Now locked for sticky test"
+    And "Unlock" "button" should exist
+    # Check for availability of sticky for Admin
+    And "Discussion options" "button" should exist
+    And I follow "Test forum name sticky"
+    # Confirm discussion locked
+    And ".forumng-locked" "css_element" should exist in the "Discussion 2" "table_row"
+
+    # All discussions made sticky
+    Given I press "Make discussions sticky"
+    Given I press "All discussions shown"
+
+    # Check discussions sticky ordering
+    And "Discussion 2" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 1" "table_row"
+    And "Discussion 1" "table_row" should appear before "Discussion 4" "table_row"
+
+    # Check for sticky discussion marked locked
+    And ".forumng-sticky.forumng-locked" "css_element" should exist in the "Discussion 2" "table_row"
+    # Check for discussion marked deleted
+    And ".forumng-deleted" "css_element" should exist in the "Discussion 4" "table_row"
+
+    # Check for existence of icons
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 2" "table_row"
+    And ".forumng-sticky" "css_element" should exist in the "Discussion 2" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 3" "table_row"
+    And ".forumng-sticky" "css_element" should exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 1" "table_row"
+    And ".forumng-sticky" "css_element" should exist in the "Discussion 1" "table_row"
+    # Check for non-existence of icons
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And ".forumng-sticky" "css_element" should not exist in the "Discussion 4" "table_row"
+
+    # All discussions made not sticky
+    Given I press "Make discussions not sticky"
+    Given I press "All discussions shown"
+
+    # Check discussions ordering has changed
+    And "Discussion 2" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 1" "table_row"
+
+    # Check for discussion marked locked
+    And ".forumng-locked" "css_element" should exist in the "Discussion 2" "table_row"
+    # Check for discussion marked deleted
+    And ".forumng-deleted" "css_element" should exist in the "Discussion 4" "table_row"
+
+    # Check for existence of icons
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 2" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 1" "table_row"
+
+    # Multiple discussions made sticky
+    Given I press "Make discussions sticky"
+    Given I press "Selected discussions"
+    And I wait "1" seconds
+    And I set the field with xpath "//tr[contains(normalize-space(.), 'Discussion 3')]//input[@type='checkbox']" to "1"
+    And I set the field with xpath "//tr[contains(normalize-space(.), 'Discussion 1')]//input[@type='checkbox']" to "1"
+    And I press "Confirm selection"
+
+    # Check discussions order is changed
+    And "Discussion 3" "table_row" should appear before "Discussion 1" "table_row"
+    And "Discussion 1" "table_row" should appear before "Discussion 2" "table_row"
+    And "Discussion 2" "table_row" should appear before "Discussion 4" "table_row"
+    # Check for extant sticky icons
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 2" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 1" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+
+    # Discussion made not sticky
+    Given I press "Make discussions not sticky"
+    Given I press "Selected discussions"
+    # Need time to access checkboxes
+    And I wait "1" seconds
+    And I set the field with xpath "//tr[contains(normalize-space(.), 'Discussion 3')]//input[@type='checkbox']" to "1"
+    And I press "Confirm selection"
+    # Check discussions order (allowing for extra divider row)
+    And "Discussion 1" "table_row" should appear before "Discussion 2" "table_row"
+    And "Discussion 2" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 3" "table_row"
+
+    # Check for extant/non extant sticky icons
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 1" "table_row"
+    And ".forumng-sticky" "css_element" should exist in the "Discussion 1" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 2" "table_row"
+    And ".forumng-locked" "css_element" should exist in the "Discussion 2" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And ".forumng-deleted" "css_element" should exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 3" "table_row"
+    And I log out
+
+    # Test Student does not get option to make things multi-sticky
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name sticky"
+
+    # Check discussions states seen as student
+    And "Discussion 1" "table_row" should appear before "Discussion 2" "table_row"
+    And ".forumng-sticky" "css_element" should exist in the "Discussion 1" "table_row"
+    And "Discussion 2" "table_row" should appear before "Discussion 3" "table_row"
+    And ".forumng-locked" "css_element" should exist in the "Discussion 2" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 3" "table_row"
+
+    # Check for unavailability of sticky for Students
+    And "Make discussions sticky" "button" should not exist
+    And "Make discussions not sticky" "button" should not exist
+    And I log out
+
+  Scenario: Testing the 'Discussion options'
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name sticky"
+    Then I should see "Test forum sticky description"
+
+    # Check initial order of existing discussion threads
+    And "Discussion 4" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 2" "table_row"
+    And "Discussion 2" "table_row" should appear before "Discussion 1" "table_row"
+    # Check for non existence of sticky icons
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 2" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 1" "table_row"
+
+    # Check changes to order of discussion threads
+    And I follow "Discussion 1"
+    Given I press "Discussion options"
+    And I set the field "Sticky discussion" to "Discussion stays on top of list"
+    And I press "Save changes"
+    And I follow "Test forum name sticky"
+    # Check discussions order has changed (allowing for extra divider row)
+    And "Discussion 1" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 2" "table_row"
+    # Check for addition of changed discussion thread sticky icon
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 1" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 2" "table_row"
+    And I follow "Discussion 3"
+    Given I press "Discussion options"
+    And I set the field "Sticky discussion" to "Discussion stays on top of list"
+    And I press "Save changes"
+    And I follow "Test forum name sticky"
+
+    # Check discussions order has changed again (allowing for extra divider row)
+    And "Discussion 3" "table_row" should appear before "Discussion 1" "table_row"
+    And "Discussion 1" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 2" "table_row"
+    # Check for addition of changed discussion threads sticky icons
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 1" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 2" "table_row"
+
+    # Add discussion that is sticky
+    Given I add a discussion with the following data:
+      | Subject | Discussion 5 |
+      | Message | Discussion 5 |
+      | sticky | 1 |
+    And I follow "Test forum name sticky"
+    # Check new discussion made sticky is at the top
+    And "Discussion 5" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 1" "table_row"
+    And "Discussion 1" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 2" "table_row"
+    # Check discussion threads sticky icons includes new one
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 5" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 1" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 2" "table_row"
+
+    # Add discussion that is not sticky
+    Given I add a discussion with the following data:
+      | Subject | Discussion 6 |
+      | Message | Discussion 6 |
+    And I follow "Test forum name sticky"
+    # Check order & position of new non-sticky discussion thread (allowing for extra divider row)
+    And "Discussion 5" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 1" "table_row"
+    And "Discussion 1" "table_row" should appear before "Discussion 6" "table_row"
+    And "Discussion 6" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 2" "table_row"
+    # Check for discussion threads sticky icons
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 5" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 3" "table_row"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 1" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 6" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 4" "table_row"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 2" "table_row"
+
+    # Check sort on 'Discussion' reorders the discussion threads
+    Given I follow "Discussion"
+    Then "Discussion 1" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 5" "table_row"
+    And "Discussion 5" "table_row" should appear before "Discussion 2" "table_row"
+    And "Discussion 2" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 6" "table_row"
+
+    # Delete a sticky discussion
+    And I follow "Discussion 3"
+    When I press "Delete"
+    And I wait "1" seconds
+    And I press "Delete"
+    And ".forumng-deleted" "css_element" should exist in the "Discussion 3" "table_row"
+    # Delete a normal discussion
+    And I follow "Discussion 4"
+    When I press "Delete"
+    And I wait "1" seconds
+    And I press "Delete"
+
+    # Check 'delete' reorders the 'sticky' discussion threads
+    And "Discussion 1" "table_row" should appear before "Discussion 5" "table_row"
+    And "Discussion 5" "table_row" should appear before "Discussion 3" "table_row"
+    And "Discussion 3" "table_row" should appear before "Discussion 2" "table_row"
+    And "Discussion 2" "table_row" should appear before "Discussion 4" "table_row"
+    And "Discussion 4" "table_row" should appear before "Discussion 6" "table_row"
+    And ".forumng-deleted" "css_element" should exist in the "Discussion 3" "table_row"
+    And ".forumng-deleted" "css_element" should exist in the "Discussion 4" "table_row"
+
+    # Check cant manually 'make sticky' after deletions
+    # Check the sticky discussion
+    And I follow "Discussion 3"
+    And "Discussion options" "button" should not exist
+    And "Undelete" "button" should exist
+    And "Lock" "button" should not exist
+    And I follow "Test forum name sticky"
+    # Check the normal discussion
+    And I follow "Discussion 4"
+    And "Discussion options" "button" should not exist
+    And "Undelete" "button" should exist
+    And "Lock" "button" should not exist
+    And I follow "Test forum name sticky"
+
+    # Check manual 'Lock' after deletion
+    # Check the sticky discussion
+    And I follow "Discussion 1"
+    When I press "Lock"
+    Given I set the field "Message" to "Now locked for sticky test"
+    When I press "Lock discussion"
+    And I should see "This discussion is now closed" in the ".forumng-subject" "css_element"
+    And I should see "Now locked for sticky test" in the ".forumng-message" "css_element"
+
+    And "Unlock" "button" should exist
+    And "Discussion options" "button" should exist
+    And I follow "Test forum name sticky"
+    And ".forumng-sticky.forumng-locked" "css_element" should exist in the "Discussion 1" "table_row"
+    And I log out
+
+    # Test student does not see manual 'sticky' options
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name sticky"
+    # Check for unavailability of sticky for Students
+    And "Make discussions sticky" "button" should not exist
+    And "Make discussions not sticky" "button" should not exist
+    And I follow "Discussion 1"
+    # Check Students can not get to 'sticky' option
+    Then "Discussion options" "button" should not exist
+    Then "Delete" "button" should not exist
+    Then "Lock" "button" should not exist
+    And I log out
diff --git a/mod/forumng/feature/sticky/version.php b/mod/forumng/feature/sticky/version.php
new file mode 100644
index 0000000..f93ce20
--- /dev/null
+++ b/mod/forumng/feature/sticky/version.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ *
+ * @package forumngfeature_sticky
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2013052300;
+$plugin->component = 'forumngfeature_sticky';
diff --git a/mod/forumng/feature/usage/classes/event/usage_viewed.php b/mod/forumng/feature/usage/classes/event/usage_viewed.php
new file mode 100644
index 0000000..09948ab
--- /dev/null
+++ b/mod/forumng/feature/usage/classes/event/usage_viewed.php
@@ -0,0 +1,107 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The forumngfeature_usage view event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace forumngfeature_usage\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The forumngfeature_usage view event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class usage_viewed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+        $this->data['objecttable'] = 'forumng';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' viewed usage information on the forum with
+            course module id '$this->contextinstanceid'";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:viewed', 'forumngfeature_usage');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url($this->other['url']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $url = str_replace('/mod/forumng/feature/usage/', '', $this->other['url']);
+        return array($this->courseid, 'forumng', 'view usageinfo', $url,
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['url'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/usage/db/access.php b/mod/forumng/feature/usage/db/access.php
new file mode 100644
index 0000000..06a9260
--- /dev/null
+++ b/mod/forumng/feature/usage/db/access.php
@@ -0,0 +1,51 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Capabilities.
+ * @package forumngfeature_usage
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$capabilities = array(
+    'forumngfeature/usage:view' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+    'forumngfeature/usage:viewusage' => array(
+            'captype' => 'read',
+            'contextlevel' => CONTEXT_MODULE,
+            'archetypes' => array(
+                'teacher' => CAP_ALLOW,
+                'editingteacher' => CAP_ALLOW,
+                'manager' => CAP_ALLOW
+            )
+    ),
+    'forumngfeature/usage:viewflagged' => array(
+            'captype' => 'read',
+            'contextlevel' => CONTEXT_MODULE,
+            'archetypes' => array(
+                'teacher' => CAP_ALLOW,
+                'editingteacher' => CAP_ALLOW,
+                'manager' => CAP_ALLOW
+            )
+    )
+);
diff --git a/mod/forumng/feature/usage/forumngfeature_usage.php b/mod/forumng/feature/usage/forumngfeature_usage.php
new file mode 100644
index 0000000..3b85c4a
--- /dev/null
+++ b/mod/forumng/feature/usage/forumngfeature_usage.php
@@ -0,0 +1,44 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum feature: forum usage stats.
+ * @package forumngfeature_usage
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../forumngfeature_discussion_list.php');
+
+class forumngfeature_usage extends forumngfeature_discussion_list {
+    public function get_order() {
+        return 400;
+    }
+
+    public function should_display($forum) {
+        if (has_capability('forumngfeature/usage:view', $forum->get_context())) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public function display($forum) {
+        $name = get_string('button', 'forumngfeature_usage');
+        $script = 'feature/usage/usage.php';
+        return parent::get_button($forum, $name, $script);
+    }
+}
diff --git a/mod/forumng/feature/usage/internaldoc/testcase.usage.txt b/mod/forumng/feature/usage/internaldoc/testcase.usage.txt
new file mode 100644
index 0000000..9f85d06
--- /dev/null
+++ b/mod/forumng/feature/usage/internaldoc/testcase.usage.txt
@@ -0,0 +1,372 @@
+This script describes the steps to test the usage information display feature.
+It is intended to cover only this single feature. As this feature displays usage statistics
+for a forum a full independent test using a large 'real-world' data set is recommended to be carried out in
+addition to this specific functional test.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+Initial setup
+=============
+
+This test case requires:
+
+Student user (S1)
+Student user (S2) for testing most rated posts
+Student user (S3) for testing most rated posts
+Editing Teacher (ET1) for testing most rated posts
+Admin/Manager/Teacher user (Admin) - Must be able to create activities, have access all groups, create anonymous posts etc
+
+Test course with multiple (2+) groups, user S1 must be a member of at least 1 group.
+If testing with multiple (2+) groups, user S2 must be a member of a different group to user S1
+If testing with multiple (2+) groups, user S3 must be a member of the same group as user S2
+If testing with multiple (2+) groups, user ET1 must be a member of the same group as users S2 and S3
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging warnings.
+
+US - Usage creation
+===================
+
+US01 / Admin
+ Enter course to be used for testing
+ Turn on course editing and add a new forum[ng] activity into any course section
+ Create the activity with the following options changed from default:
+ Forum name: US01
+ Enable anonymous moderator posts: Checked
+ Group mode: Separate groups
+ Select 'Save and display'
+- Verify forum activity is showing with group 'All participants' currently selected.
+- Verify 'Show usage' button available.
+
+US02 / Admin
+ In forum US01 select a group forum to use for all tests (user S1 must be a member)
+ Ensure 'Manually marking discussions read' is shown - if not select 'change' link
+ Select 'Start a new discussion' button
+ Create a new discussion with title 'US02 - admin', any content, all other options as default
+ Select 'Post discussion'
+ Return to Forum discussion list.
+
+US03 / Admin
+ Repeat US02 - naming discussion 'US03 - admin moderator', for this step:
+ Set the Post as? option to 'Identify self as moderator'.
+
+US04 / Admin
+ Repeat US02 - naming discussion 'US04 - admin anon', for this step:
+ Set the Post as? option to 'Identify self as moderator (name hidden from students)'.
+
+US05 / Admin
+ Enter discussion 'US02 - admin'
+ Select 'Reply' against first post, leave subject as blank, enter any text for message
+ Select 'Post reply'.
+
+US06 / Admin
+ In forum US01 select a alternate group forum to use for this step only
+ Select 'Start a new discussion' button
+ Create a new discussion with title 'US06 - admin - Other group', any content, all other options as default
+ Select 'Post discussion'
+ Return to Forum discussion list and select original group forum.
+
+US06 / S1 (change)
+ Enter forum US01, select group forum used in these tests (if not already selected by default)
+- Verify 'Show usage' button is not shown
+ Ensure 'Manually marking discussions read' is shown - if not select 'change' link
+ Enter discussion 'US02 - admin'
+ Select 'Reply' against first post, set subject to 'New subject', enter any text for message
+ Select 'Post reply'.
+
+PDUS - Test Post/Discussion usage
+=================================
+
+PDUS01 / Admin (change)
+ Enter forum US01, select group forum used in these tests (if not already selected by default)
+ Select 'Show usage' button
+- Verify 'Usage' screen shown with selected group shown in group selector
+- Verify 'Contribution' and 'Usage' section headings showing
+- Verify 'Most posts' lists user S1 and user Admin with 1 post each
+- Verify 'Most discussions' lists user Admin with 2 discussions (Anonymous discussions are not counted)
+- Verify 'Post history - 5 posts' is displayed
+- Verify that a graph/chart is displayed showing post history over time (from course start date to today).
+
+PDUS02 / Admin
+ Select enable against From and To date selectors.
+ Select two dates spanning 5 days and encompassing days where posts were made e.g 1 Sep - 5 Sep.
+ Select 'Update post history'
+- Verify usage page shows with all other information other than post history as before
+- Verify correct number of posts is shown in post history title (posts made within date range)
+- Verify dates selected appear in To and From date selectors
+- Verify chart/graph shows 5 days on x axis and contains correct information for number of posts.
+
+PDUS03 / Admin
+ Select enable against From and To date selectors.
+ Select two dates the same and encompassing a day where posts were made e.g 1 Sep - 1 Sep.
+ Select 'Update post history'
+- Verify correct number of posts is shown in post history title (posts made on that day)
+- Verify table is shown instead of graph (graph cannot show a single date)
+ Update To date to a day prior to From date e.g. 1 Sep - 1 Aug.
+- Verify table is shown instead of graph with data for From day (single day).
+
+PDUS04 / Admin
+ Select 'All participants' from the group selector
+- Verify usage page updates and date selectors are reset
+- Verify discussion added to alternate group is included in data shown
+(3 discussion for Admin user, 6 posts total)
+
+SUS - Subscriber usage
+======================
+
+SUS01 / Admin
+ Return to US01 forum main discussion page
+ Select 'All participants' from the group selector drop-down
+ Select discussion 'US02 -admin'
+ Select 'Subscribe to discussion' button
+ Return to US01 forum main discussion page and select 'Show usage'
+- Verify under Subscribers, information is as follows:
+- Total subscribers 1
+- Discussion subscribers 1
+ Return to US01 forum main discussion page
+ Select 'Subscribe to whole forum'.
+
+SUS02 / S1 (change)
+ Enter forum US01, select group forum used in these tests (if not already selected by default)
+ Select 'Subscribe to this group's forum'.
+
+ SU03 / Admin (change)
+ Enter forum US01, select 'All participants' from the group selector drop-down
+ Select 'Show usage'
+- Verify under Subscribers, information is as follows:
+- Total subscribers 2
+- Whole forum subscribers 1
+- Group forum subscribers 1
+- Discussion subscribers 0
+
+MRD - Most read discussions
+===========================
+
+MRD01 / Admin
+ Enter forum US01, select group forum used in these tests
+ Select 'Mark all posts read' button
+- Verify number of unread posts in unread column is 0 for all discussions.
+
+MRD02 / S1 (change)
+ Enter forum US01, select group forum used in these tests (if not already selected by default)
+ Select discussion 'US02 - admin'
+ Select 'Mark discussion read'
+- Verify Unread column is 0 against discussion 'US02 - admin'.
+
+MRD03 / Admin (change)
+ Enter forum US01, select group forum used in these tests (if not already selected by default)
+ Select 'Show usage' button
+- Verify Most read discussions contains following information:
+- 'US02 - admin' discussion listed as 2 users read
+- US04 and US03 discussions listed as 1 user read
+- US04 anonymous discussion has Admin user name listed
+- US04 and US03 have text 'Moderator' following Admin user name.
+
+MFP - Most flagged posts
+========================
+
+MFP01 / Admin
+ Enter forum US01, select group forum used in these tests (if not already selected by default)
+ Select discussion 'US02 - admin'
+ Select the expand [+] icon against the two replies shown
+ Select the flag icon (under user details) for all three posts
+ Return to US01 forum discussion list page
+- Verify the three posts are now listed in the 'Flagged posts' section.
+
+MFP02 / Admin
+ Select 'Show usage' button
+- Verify under 'Most flagged posts' section the following is displayed:
+- 'New subject' post [S1 user details] (1 user flagged)
+- 'Re: US02 - admin' post [Admin user details] (1 user flagged)
+- 'US02 - admin' post [Admin user details] (1 user flagged).
+
+MRP - Most rated posts
+======================
+
+MRP01 / Admin
+ Enter forum US01 and select a group that users S2 and S3 are members of
+ Select 'Start a new discussion' button
+ Create a new discussion with title 'MRP01 - admin', any content
+ In 'Group' dropdown choose the goup that S2, S3 and ET are members of
+ All other options as default
+ Select 'Post discussion'
+ Return to Forum discussion list.
+
+MRP02 / Admin
+ Follow the link 'Administration > ForumNG administration > Edit settings'
+ In 'Ratings, Allow posts to be rated' choose 'Ratings (standard) from the dropdown
+ In 'Scale Type' dropdown choose' Scale'
+ Select 'Save and display'
+
+MRP03 / S1 (change)
+ Enter forum US01, select group forum used in these tests (if not already selected by default)
+ Select discussion 'US02 - admin'
+ Reply to discussion.
+ Select 'Post reply'
+
+MRP04 / admin (change)
+ Enter forum US01
+ Select discussion 'US02 - admin'
+ Select the post created by S1
+ Check that there is a 'Count of ratings' dropdown
+ Choose one of the options
+ Check that the 'Count of ratings' now shows a (n) link (where n is a numerioc value, probably 1)
+ Note: this not a test of whether ratings work - see testcase.standardrating.txt for that.
+ Return to Forum discussion list.
+
+MRP05 / admin
+ Select the group that user S1 belongs to from the 'Group' dropdown
+ Select 'Show usage'
+ Check that there is 'Most rated posts by, Filter ratings by' dropdown
+ Choose 'Count of Ratings'
+ Verify that under the heading 'Most rated posts by Count of ratings':
+  there is 1 post details shown that is the <post name link> <date time> S1 <user link>
+
+MRP06 / admin
+ Return to Forum discussion list.
+ Follow the link 'Administration > ForumNG administration > Edit settings'
+ In 'Ratings, Allow posts to be rated' choose 'Ratings (standard) from the dropdown
+ In 'Scale Type' dropdown choose' Point'
+ In 'Maximum points' text area enter the number 5
+ Select 'Save and display'
+
+MRP07 / S2 (change)
+ Enter forum US01
+ Select discussion 'MRP01 - admin'
+ Reply to discussion
+ Select 'Post reply'
+
+MRP08 / S3 (change)
+ Enter forum US01
+ Select discussion 'MRP01 - admin'
+ Reply to discussion
+ Select 'Post reply'
+
+MRP09 / ET (change)
+ Enter forum US01
+ Select discussion 'MRP01 - admin'
+ Select the expand [+] icon against the two replies shown
+ In each reply there will be a 'Ratings' dropdown
+ For the reply by S2 choose 2
+ For the reply by S3 choose 3
+
+MRP10 / ET
+ Reply to discussion
+ Select 'Post reply'
+
+MRP11 / admin (change)
+ Enter forum US01
+ Select discussion 'MRP01 - admin'
+ Select the expand [+] icon against the three replies shown
+ In each reply there will be a 'Ratings' dropdown
+ For the reply by S2 choose 3
+ For the reply by S3 choose 4
+ For the reply by ET choose 2
+ Return to Forum discussion list.
+
+MRP12 / admin
+ Select 'Show usage'
+ Verify that the 'Usage' page does contains a label  'Most rated posts by' and a dropdown
+ that contains 3 choices (excluding the word Choose ...'
+
+MRP13 / admin
+ Select ' Count of ratings' from the dropdown
+ Verify that a count of ratings are returned with the following details
+ 2 <post name link> <date time> S2 <user link>
+ 2 <post name link> <date time> S3 <user link>
+ 1 <post name link> <date time> ET <user link>
+
+MRP14 / admin
+ Select ' Sum of ratings' from the dropdown
+ Verify that a sum of ratings are returned with the following details
+ 7 <post name link> <date time> S3 <user link>
+ 5 <post name link> <date time> S2 <user link>
+ 2 <post name link> <date time> ET <user link>
+
+MRP15 / admin
+ Select ' average of ratings' from the dropdown
+ Verify that the average of ratings are returned with the following details
+ 3.5 <post name link> <date time> S3 <user link>
+ 2.5 <post name link> <date time> S2 <user link>
+ 2   <post name link> <date time> ET <user link>
+
+MRP16 / admin
+ Return to Forum discussion list.
+ Follow the link 'Administration > ForumNG administration > Edit settings'
+ In 'Ratings, Allow posts to be rated' choose 'Ratings (standard) from the dropdown
+ In 'Scale Type' dropdown choose' Point'
+ In 'Maximum points' text area enter the number 5
+ In 'Grade' dropdown choose 'Sum of ratings'
+ Select 'Save and display'
+
+MRP17 / admin
+ Return to Forum discussion list.
+ Select 'Show usage'
+ Verify that a sum of ratings are returned with the following details
+ 7 <post name link> <date time> S3 <user link>
+ 5 <post name link> <date time> S2 <user link>
+ 2 <post name link> <date time> ET <user link>
+
+MRP18 / admin
+ Follow the link 'Administration > ForumNG administration > Edit settings'
+ In 'Ratings, Allow posts to be rated' choose 'Ratings (standard) from the dropdown
+ In 'Scale Type' dropdown choose' Point'
+ In 'Maximum points' text area enter the number 5
+ In 'Grade' dropdown choose 'Count of ratings'
+ Select 'Save and display'
+
+MRP19 / admin
+ Return to Forum discussion list.
+ Select 'Show usage'
+ Verify that a count of ratings are returned with the following details
+ 2 <post name link> <date time> S2 <user link>
+ 2 <post name link> <date time> S3 <user link>
+ 1 <post name link> <date time> ET <user link>
+
+MRP20 / admin
+ Follow the link 'Administration > ForumNG administration > Edit settings'
+ In 'Ratings, Allow posts to be rated' choose 'Ratings (standard) from the dropdown
+ In 'Scale Type' dropdown choose' Point'
+ In 'Maximum points' text area enter the number 5
+ In 'Grade' dropdown choose 'Average of ratings'
+ Select 'Save and display'
+
+MRP21 / admin
+ Return to Forum discussion list.
+ Select 'Show usage'
+ Verify that the average of ratings are returned with the following details
+ 3.5 <post name link> <date time> S3 <user link>
+ 2.5 <post name link> <date time> S2 <user link>
+ 2   <post name link> <date time> ET <user link>
+
+MRP22 / admin
+ Follow the link 'Administration > ForumNG administration > Edit settings'
+ In 'Ratings, Allow posts to be rated' choose 'Ratings (standard) from the dropdown
+ In 'Scale Type' dropdown choose' Point'
+ In 'Maximum points' text area enter the number 5
+ In 'Grade' dropdown choose 'Maximium ratings'
+ Select 'Save and display'
+
+MRP23 / admin
+ Return to Forum discussion list.
+ Select 'Show usage'
+ Verify that the maximium ratings are returned with the following details
+ 4 <post name link> <date time> S3 <user link>
+ 3 <post name link> <date time> S2 <user link>
+ 2 <post name link> <date time> ET <user link>
+
+MRP24 / admin
+ Follow the link 'Administration > ForumNG administration > Edit settings'
+ In 'Ratings, Allow posts to be rated' choose 'Ratings (standard) from the dropdown
+ In 'Scale Type' dropdown choose' Point'
+ In 'Maximum points' text area enter the number 5
+ In 'Grade' dropdown choose 'Minimium ratings'
+ Select 'Save and display'
+
+MRP25 / admin
+ Return to Forum discussion list.
+ Select 'Show usage'
+ Verify that the minimium ratings are returned with the following details
+ 3 <post name link> <date time> S3 <user link>
+ 2 <post name link> <date time> S2 <user link>
+ 2 <post name link> <date time> ET <user link>
diff --git a/mod/forumng/feature/usage/lang/en/forumngfeature_usage.php b/mod/forumng/feature/usage/lang/en/forumngfeature_usage.php
new file mode 100644
index 0000000..813a409
--- /dev/null
+++ b/mod/forumng/feature/usage/lang/en/forumngfeature_usage.php
@@ -0,0 +1,86 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Language strings.
+ * @package forumngfeature_usage
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Forum statistics view';
+$string['usage:view'] = 'View forum usage statistics';
+$string['usage:viewusage'] = 'View the forum usage statistics information';
+$string['usage:viewflagged'] = 'View forum flagged posts';
+$string['event:viewed'] = 'View usage info';
+$string['button'] = 'Show usage';
+$string['title'] = 'Usage';
+$string['contribution'] = 'Contribution';
+$string['usage'] = 'Usage';
+$string['mostposts'] = 'Most posts';
+$string['mostposts_none'] = 'No replies made.';
+$string['mostposts_help'] = 'Users with most replies posted.';
+$string['mostdiscussions'] = 'Most discussions';
+$string['mostdiscussions_none'] = 'No discussions started.';
+$string['mostdiscussions_help'] = 'Users that started the most discussions';
+$string['usagechartpoststotal'] = 'Post history - {$a} posts';
+$string['usagechartpoststot'] = 'Post history';
+$string['usagechartpoststot_help'] = 'Historical view of discussions/posts created over time. Shows posts created each day and running total of posts created during the selected period.';
+$string['usagechartposts'] = 'Posts';
+$string['usagechartpostslabel'] = 'Posts per day';
+$string['usagechartday'] = 'Date';
+$string['usagecharttotal'] = 'Total';
+$string['usagecharttotallabel'] = 'Total posts';
+$string['usagechartdatesubmit'] = 'Update post history';
+$string['usagechartpoststable'] = 'Post history, number of posts per day and overall total';
+$string['usagesubscribers'] = 'Subscribers';
+$string['usagesubscribers_help'] = 'Table showing subscriber information.
+Each user can only have 1 subscription type per forum; for example, group forum subscription overrides all discussion subscriptions.';
+$string['usagesubscribertabletype'] = 'Subscriber type';
+$string['usagesubscribertabletotal'] = 'Number';
+$string['usagesubscribertable_all'] = 'Total subscribers';
+$string['usagesubscribertable_whole'] = 'Whole forum subscribers';
+$string['usagesubscribertable_group'] = 'Group forum subscribers';
+$string['usagesubscribertable_discuss'] = 'Discussion subscribers';
+$string['mostreaders'] = 'Most read discussions';
+$string['mostreaders_none'] = 'No discussions marked as read.';
+$string['mostreaders_help'] = 'Discussions by number of users that have marked them as read. The list only counts people who have viewed this discussion in a web browser. Some people might follow the forum by email subscription or via Atom or RSS feeds, which will not count for this list. When people use the \'manually mark discussions read\' option, they are not counted toward this list until they mark the discussion read. Conversely, it is possible to count toward this list by clicking one of the \'Mark read\' buttons without actually viewing the discussion.';
+$string['mostflagged'] = 'Most flagged posts';
+$string['mostflagged_none'] = 'No posts flagged.';
+$string['mostflagged_help'] = 'Posts by number of users that have them currently \'flagged\'.';
+$string['mostflaggeddiscussions'] = 'Most flagged discussions';
+$string['mostflaggeddiscussions_none'] = 'No discussions flagged.';
+$string['mostflaggeddiscussions_help'] = 'Discussions by number of users that have them currently \'flagged\'.';
+$string['noscript'] = 'Show all information not currently loaded.';
+$string['mostratedposts'] = 'Most rated posts by';
+$string['mostratedposts_none'] = 'No posts rated.';
+$string['mostratedposts_help'] = 'total ratings for posts by the grading method chosen for the forum';
+$string['forumngratingsfilter'] = 'Filter ratings by';
+$string['forumngratingsfilter_help'] = 'Select an option to sort forum post ratings by.';
+$string['forumng_ratings_grading_average'] = 'Most rated posts by - Average of ratings';
+$string['forumng_ratings_grading_count'] = 'Most rated posts by - Count of ratings';
+$string['forumng_ratings_grading_max'] = 'Most rated posts by - Maximum rating';
+$string['forumng_ratings_grading_min'] = 'Most rated posts by  - Minimum rating';
+$string['forumng_ratings_grading_sum'] = 'Most rated posts by - Sum of ratings';
+$string['forumng_ratings_grading_average_none'] = 'No posts rated';
+$string['forumng_ratings_grading_count_none'] = 'No posts rated';
+$string['forumng_ratings_grading_max_none'] = 'No posts rated';
+$string['forumng_ratings_grading_min_none'] = 'No posts rated';
+$string['forumng_ratings_grading_sum_none'] = 'No posts rated';
+$string['forumng_ratings_grading_average_help'] = 'Shows most rated posts by the highest average of ratings per post';
+$string['forumng_ratings_grading_count_help'] = 'Shows most rated posts by the total number of ratings per post';
+$string['forumng_ratings_grading_max_help'] = 'Shows most rated posts by their highest maximum rating';
+$string['forumng_ratings_grading_min_help'] = 'Shows most rated posts by  their highest minimum rating';
+$string['forumng_ratings_grading_sum_help'] = 'Shows most rated posts by the total sum of ratings per post';
diff --git a/mod/forumng/feature/usage/locallib.php b/mod/forumng/feature/usage/locallib.php
new file mode 100644
index 0000000..dc5fd1f
--- /dev/null
+++ b/mod/forumng/feature/usage/locallib.php
@@ -0,0 +1,105 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Library for usage feature inc forms.
+ * @package forumngfeature_usage
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir . '/formslib.php');
+
+function forumngfeature_usage_show_mostreaders($params, $forum = null) {
+    global $DB, $PAGE;
+    $cloneid = empty($params['clone']) ? 0 : $params['clone'];
+    if ($forum == null) {
+        if (empty($params['id'])) {
+            throw new moodle_exception('Missing forum id param');
+        }
+        $forum = mod_forumng::get_from_cmid($params['id'], $cloneid);
+    }
+    $groupwhere = '';
+    $groupwhere2 = '';
+    $groupparams = array();
+    $groupid = 0;
+    if (!empty($params['group']) && $params['group'] != mod_forumng::NO_GROUPS &&
+            $params['group'] != mod_forumng::ALL_GROUPS) {
+        $groupwhere = 'AND (fd.groupid = :groupid1 OR fd.groupid IS NULL)';
+        $groupwhere2 = 'AND (fd.groupid = :groupid2 OR fd.groupid IS NULL)';
+        $groupid = $params['group'];
+        $groupparams = array('groupid1' => $groupid, 'groupid2' => $groupid);
+    }
+    if (has_capability('mod/forumng:viewreadinfo', $forum->get_context())) {
+        if (!$PAGE->has_set_url()) {
+            // Set context when called via ajax.
+            $PAGE->set_context($forum->get_context());
+        }
+        $renderer = $PAGE->get_renderer('forumngfeature_usage');
+        // Only include enrolled users.
+        list($sql, $params) = get_enrolled_sql($forum->get_context(), '', $groupid, true);
+        // View discussions read.
+        $readers = $DB->get_recordset_sql($sql = "
+                SELECT COUNT(fr.userid) AS count, fr.discussionid
+                  FROM (
+                       SELECT fd.id AS discussionid, fr.userid
+                         FROM {forumng_discussions} fd
+                         JOIN {forumng_read} fr ON fr.discussionid = fd.id
+                        WHERE fd.forumngid = :forumid1 AND fd.deleted = 0
+                              $groupwhere
+                    UNION ALL
+                       SELECT fd.id AS discussionid, frp.userid
+                         FROM {forumng_discussions} fd
+                         JOIN {forumng_posts} fp ON fp.discussionid = fd.id
+                         JOIN {forumng_read_posts} frp ON frp.postid = fp.id
+                        WHERE fd.forumngid = :forumid2 AND fp.deleted = 0
+                              AND fp.oldversion = 0 AND fd.deleted = 0
+                              $groupwhere2
+                       ) fr
+                 WHERE fr.userid IN ($sql)
+              GROUP BY fr.discussionid
+              ORDER BY count desc, fr.discussionid desc", array_merge(
+                        array('forumid1' => $forum->get_id(), 'forumid2' => $forum->get_id()),
+                        $groupparams, $params), 0, 5);
+        $readerlist = array();
+        foreach ($readers as $discuss) {
+            $discussion = mod_forumng_discussion::get_from_id($discuss->discussionid, $cloneid);
+            list($content, $user) = $renderer->render_usage_discussion_info($forum, $discussion);
+            $readerlist[] = $renderer->render_usage_list_item($forum, $discuss->count, $user, $content);
+        }
+        return $renderer->render_usage_list($readerlist, 'mostreaders', false);
+    }
+}
+
+class forumngfeature_usage_usagechartdate extends moodleform {
+    public function definition() {
+        global $COURSE;
+        $mform =& $this->_form;
+        $options = array(
+                'startyear' => userdate($COURSE->startdate, '%Y'),
+                'optional' => true,
+                'stopyear' => date('Y'));
+        $mform->addElement('date_selector', 'usagedatefrom', get_string('from'), $options);
+        $mform->addElement('date_selector', 'usagedateto', get_string('to'), $options);
+        foreach ($this->_customdata['params'] as $param => $val) {
+            $mform->addElement('hidden', $param, $val);
+            $mform->setType($param, PARAM_INT);
+        }
+        $this->add_action_buttons(false, get_string('usagechartdatesubmit', 'forumngfeature_usage'));
+    }
+}
diff --git a/mod/forumng/feature/usage/renderer.php b/mod/forumng/feature/usage/renderer.php
new file mode 100644
index 0000000..d9eaa4b
--- /dev/null
+++ b/mod/forumng/feature/usage/renderer.php
@@ -0,0 +1,221 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * ForumNG usage sub-plugin renderer class
+ * @see core_renderer Core renderer (you can call methods in this)
+ * @package    mod
+ * @subpackage forumngfeature_usage
+ * @copyright  2013 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+class forumngfeature_usage_renderer extends plugin_renderer_base {
+    /**
+     * Create a usage list item, detailing a total, user image and some info
+     * @param mod_forumng $forum
+     * @param int $total
+     * @param object $user
+     * @param string $info
+     * @return string
+     */
+    public function render_usage_list_item($forum, $total, $user, $info) {
+        global $OUTPUT;
+        if (is_null($user)) {
+            $userimage = html_writer::empty_tag('img',
+                    array('src' => $this->pix_url('u/f2'), 'alt' => ''));
+        } else {
+            $userimage = $OUTPUT->user_picture($user);
+            if ($forum->is_shared()) {
+                // Strip course id if shared forum.
+                $userimage = str_replace('&amp;course=' . $forum->get_course()->id, '', $userimage);
+            }
+        }
+        $toreturn = html_writer::div($total, 'forumng_usage_list_tot') .
+            html_writer::div($userimage, 'forumng_usage_list_pic') .
+            html_writer::div($info, 'forumng_usage_list_info');
+        return $toreturn;
+    }
+
+    /**
+     * Output array of list_items
+     * @param array $content
+     * @param string $stringname - name of string to use for title and no content
+     * @param bool $heading - include a heading with help?
+     * @return string
+     */
+    public function render_usage_list($content, $stringname, $heading = true) {
+        $toreturn = '';
+        if ($heading) {
+            $toreturn .= $this->render_usage_list_heading($stringname);
+        }
+        if (!empty($content)) {
+            $toreturn .= html_writer::alist($content, array('class' => 'forumng_usage_list'), 'ol');
+        } else {
+            $toreturn .= html_writer::tag('p', get_string($stringname . '_none', 'forumngfeature_usage'));
+        }
+        return $toreturn;
+    }
+
+    public function render_usage_list_heading($stringname) {
+        global $OUTPUT;
+        $help = $this->help_icon($stringname, 'forumngfeature_usage');
+        $toreturn = $OUTPUT->heading(get_string($stringname, 'forumngfeature_usage') . '' . $help,
+                4, 'forumng_usage_listhead');
+        return $toreturn;
+    }
+
+    /**
+     * Create output for discussion information (Title, date, user)
+     * Returns content and user object (discussion poster, null if anon)
+     * @param object $forum
+     * @param object $discussion
+     * @return array content html, discussion poster user object
+     */
+    public function render_usage_discussion_info($forum, $discussion) {
+        $user = $discussion->get_poster();
+        $discusslink = html_writer::link($discussion->get_moodle_url(),
+                format_string($discussion->get_subject()));
+        $content = html_writer::div($discusslink);
+        $content .= html_writer::div(mod_forumng_utils::display_date($discussion->get_time_modified()));
+        $content .= html_writer::start_div('fng_userlink');
+        if ($discussion->get_poster_anon() == mod_forumng::ASMODERATOR_ANON &&
+                !$forum->can_post_anonymously()) {
+            // Hide user details if anon post and user does not have permission to see.
+            $user = null;
+        } else {
+            $content .= $forum->display_user_link($user) . ' ';
+        }
+        if ($discussion->get_poster_anon() != mod_forumng::ASMODERATOR_NO) {
+            $content .= get_string('moderator', 'mod_forumng');
+        }
+        $content .= html_writer::end_div();
+        return array($content, $user);
+    }
+
+    /**
+     * Create output for post information (Title, date, user)
+     * Returns content and user object (discussion poster, null if anon)
+     * @param object $forum
+     * @param object $discussion
+     * @param object $post
+     * @return array content html, poster user object
+     */
+    public function render_usage_post_info($forum, $discussion, mod_forumng_post $post) {
+        $user = $post->get_user();
+        $link = html_writer::link($post->get_url(),
+                format_string($post->get_effective_subject()));
+        $content = html_writer::div($link);
+        $content .= html_writer::div(mod_forumng_utils::display_date($post->get_created()));
+        $content .= html_writer::start_div('fng_userlink');
+        if ($post->get_asmoderator() == mod_forumng::ASMODERATOR_ANON &&
+                !$forum->can_post_anonymously()) {
+            // Hide user details if anon post and user does not have permission to see.
+            $user = null;
+        } else {
+            $content .= $forum->display_user_link($user) . ' ';
+        }
+        if ($post->get_asmoderator() != mod_forumng::ASMODERATOR_NO) {
+            $content .= get_string('moderator', 'mod_forumng');
+        }
+        $content .= html_writer::end_div();
+        return array($content, $user);
+    }
+
+    /**
+     * Renders a dynamic loading (ajax) div container - with alternative for non-js.
+     * Calls yui/usageloader.
+     * Name of loading area must match a forumngfeature_usage_show... function in locallib
+     * @param string $name Unique name used to identify area and load content using related function
+     * @param object $forum Used for non-ajax call to function to save query
+     * @param array $params key value parameters to send, must include cmid, cloneid and groupid
+     */
+    public function render_usage_dynamicarea($name, $forum, $params) {
+        global $PAGE;
+        $content = '';
+        if (optional_param('showdynamic', 0, PARAM_BOOL)) {
+            // Non ajax - load and display now.
+            $funcname = 'forumngfeature_usage_show_' . $name;
+            if (function_exists($funcname)) {
+                $content .= $funcname($params, $forum);
+            }
+        } else {
+            $params['sesskey'] = sesskey();
+            $params['name'] = $name;
+            $params = http_build_query($params, '', '&');
+            // Noscript text + loader yui etc.
+            $url = $PAGE->url;
+            $url->param('showdynamic', true);
+            $noscript = html_writer::link($url, get_string('noscript', 'forumngfeature_usage'));
+            $content = html_writer::start_div('forumngusage_loader forumngusageshow' . $name);
+            $content .= html_writer::div($noscript, 'forumngusage_loader_noscript');
+            $PAGE->requires->yui_module('moodle-forumngfeature_usage-usageloader',
+                    'M.mod_forumng.forumngfeature_usage_loader.init', array($name, $params));
+            $content .= html_writer::end_div();
+        }
+        return $content;
+    }
+
+    /**
+     * Display the usage ratings
+     * @param array $ratinglist list of forum post details to be displayed
+     * @param object $forum
+     * @param string $gradingstr is the string name to be got from the language file
+     * @param string $gradingtype is the numeric value of the forum or chosen grading type
+     * @return string
+     */
+    public function render_usage_ratings($ratinglist, $forum, $gradingstr = '', $gradingtype = 0) {
+
+        // Print out ratings usage.
+        $usageoutput = html_writer::start_div('forumng_usage_ratings');
+        $grading = $forum->get_grading();
+        $usageoutput .= $this->render_usage_list_heading($gradingstr);
+        if (($grading == mod_forumng::GRADING_NONE) || ($grading == mod_forumng::GRADING_MANUAL)) {
+            $usageoutput .= $this->render_ratings_filter($forum, $gradingtype);
+        }
+        $usageoutput .= $this->render_usage_list($ratinglist, $gradingstr, false);
+        $usageoutput .= html_writer::end_div();
+        return $usageoutput;
+    }
+
+    /**
+     * Display rating filter as a link or dropdown
+     * @param mod_forumng $forum
+     * @papam int $selectedid for choosing default value from dropdown
+     * @return string for printing out
+     */
+    public function render_ratings_filter($forum, $selectedid = 0) {
+
+        // Display dropdown.
+        $options = array();
+        $options[mod_forumng::GRADING_AVERAGE] = get_string('grading_average', 'forumng');
+        $options[mod_forumng::GRADING_COUNT] = get_string('grading_count', 'forumng');
+        $options[mod_forumng::GRADING_SUM] = get_string('grading_sum', 'forumng');
+
+        $usageurl = new moodle_url('/mod/forumng/feature/usage/usage.php?',
+                $forum->get_link_params_array(mod_forumng::PARAM_PLAIN));
+        $select = new single_select($usageurl, 'ratings', $options, $selectedid, false);
+        $select->label = get_string('forumngratingsfilter', 'forumngfeature_usage');
+        $select->set_help_icon('forumngratingsfilter', 'forumngfeature_usage');
+        $output = $this->render($select);
+        $out = '<div class="forumng_ratings_filter">' . $output . '</div>';
+
+        return $out;
+    }
+
+}
diff --git a/mod/forumng/feature/usage/styles.css b/mod/forumng/feature/usage/styles.css
new file mode 100644
index 0000000..dd25d7e
--- /dev/null
+++ b/mod/forumng/feature/usage/styles.css
@@ -0,0 +1,69 @@
+.forumng_usage_sectitle {
+    text-align: center;
+}
+.forumng_usage_contrib_cont {
+    float: left;
+    margin-right: 1em;
+    margin-bottom: 1em;
+}
+ol.forumng_usage_list {
+    list-style: none;
+    margin-left: 0;
+}
+ol.forumng_usage_list li {
+    clear: left;
+}
+.forumng_usage_list .forumng_usage_list_tot {
+    float: left;
+    min-width: 2em;
+    text-align: center;
+    margin-top: .75em;
+}
+.forumng_usage_list .forumng_usage_list_pic {
+    float: left;
+    margin-left: .5em;
+}
+.forumng_usage_list .forumng_usage_list_info {
+    float: left;
+    margin-left: .5em;
+}
+.forumng_usage_list .forumng_usage_list_info .fng_userlink {
+    margin-top: .75em;
+}
+.forumng_usage_chart {
+    margin: 10px;
+    width: 90%;
+    height: 400px;
+}
+.forumng_usage_usagechart .skip {
+    top: -10000px;
+}
+.forumng_usage_usagechart .skip:focus {
+    position: relative;
+    left: 0;
+    top: 0;
+}
+.forumng_usage_subscribers {
+    margin-top: 1em;
+}
+.forumng_usage_subscribers table {
+    margin-top: .5em;
+}
+.forumng_usage_readers .forumng_usage_list .forumng_usage_list_info .fng_userlink,
+.forumng_usage_flagged .forumng_usage_list .forumng_usage_list_info .fng_userlink,
+.forumng_usage_ratings .forumng_usage_list .forumng_usage_list_info .fng_userlink {
+    margin-top: 0;
+    margin-bottom: .5em;
+}
+.forumng_usage_flagged, .forumng_usage_readers, .forumng_usage_ratings {
+    float: left;
+    margin-right: 1em;
+}
+.jsenabled .forumngusage_loader_noscript {
+    display: none;
+}
+.forumngusage_loader .ajaxworking {
+    width: 20px;
+    height: 20px;
+    background: url([[pix:i/ajaxloader]]) no-repeat;
+}
diff --git a/mod/forumng/feature/usage/tests/behat/basic.feature b/mod/forumng/feature/usage/tests/behat/basic.feature
new file mode 100644
index 0000000..e6b9783
--- /dev/null
+++ b/mod/forumng/feature/usage/tests/behat/basic.feature
@@ -0,0 +1,222 @@
+@mod @mod_forumng @ou @ou_vle @forumngfeature_usage
+Feature: Show discussion readers
+  In order view all readers of discussions
+  As an administrator
+  I need to use the forumng feature that shows readers
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+      | student3 | Student | 3 | student2@asd.com |
+      | teacher1 | Teacher | 1 | teacher1@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | teacher |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+      | student3 | C1 | student |
+    And the following "activities" exist:
+      | activity | name                    | introduction                   | course | idnumber |
+      | forumng  | Test forum name marking | Test forum marking description | C1     | forumng1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I follow "Course 1"
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | Discussion 1 |
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | Discussion 2 |
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 3 |
+      | Message | Discussion 3 |
+    And I follow "Test forum name marking"
+    And I log out
+
+  # JS required or fails to find forumng_usage_list elements on the page
+  @javascript
+  Scenario: Testing the 'show readers' option
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    Given I follow "Test forum name marking"
+    Then I should see "Test forum marking description"
+    And I add a discussion with the following data:
+      | Subject | Discussion 4 |
+      | Message | Discussion 4 by Student 1 |
+    And I follow "Test forum name marking"
+
+    # Discussions default to the un-read state
+    # Read and automatically mark discussion
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Message | REPLY-D1-S1 |
+    And I wait "1" seconds
+    And "Subscribe to discussion" "button" should exist
+    Given I press "Subscribe to discussion"
+    And I wait "1" seconds
+    And I press "Flag discussion"
+    Then I should see "Your email preferences"
+    Given I follow "Test forum name marking"
+    And I log out
+
+    Given I log in as "student2"
+    And I am on site homepage
+    And I follow "Course 1"
+    Given I follow "Test forum name marking"
+     # Read and automatically mark discussion
+    And I follow "Discussion 2"
+    And I reply to post "1" with the following data:
+      | Message | REPLY-D2-S2 |
+    And I wait "1" seconds
+    And I press "Flag discussion"
+    Given I follow "Test forum name marking"
+    And I follow "Discussion 3"
+    And I reply to post "1" with the following data:
+      | Message | REPLY-D3-S2 |
+    And I wait "1" seconds
+    And I press "Flag discussion"
+    Given I follow "Test forum name marking"
+    And I log out
+
+    Given I log in as "student3"
+    And I am on site homepage
+    And I follow "Course 1"
+    Given I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 5 |
+      | Message | Discussion 5 by Student 3 |
+    And I follow "Test forum name marking"
+    And I add a discussion with the following data:
+      | Subject | Discussion 6 |
+      | Message | Discussion 6 by Student 3 |
+    And I follow "Test forum name marking"
+    # Read and automatically mark both discussions
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Message | REPLY-D2-S3 |
+    And I wait "1" seconds
+    And I click on ".forumng-p2 .forumng-flagpost a" "css_element"
+    And I wait "1" seconds
+    And "Subscribe to discussion" "button" should exist
+    Given I press "Subscribe to discussion"
+    Then I should see "Your email preferences"
+
+    Given I follow "Test forum name marking"
+    And I follow "Discussion 2"
+    And I reply to post "1" with the following data:
+      | Message | REPLY-D2-S3 |
+    And I wait "1" seconds
+    And I press "Flag discussion"
+    Given I follow "Test forum name marking"
+    And I follow "Discussion 4"
+    And I reply to post "1" with the following data:
+      | Message | REPLY-D4-S3 |
+    And I wait "1" seconds
+    And I press "Flag discussion"
+    Given I follow "Test forum name marking"
+    And I log out
+
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    Given I follow "Test forum name marking"
+
+    # Check the Show usage page
+    And "Show usage" "button" should exist
+    And I press "Show usage"
+    And I should see "Usage" in the "h2" "css_element"
+    And I should see "Contribution" in the ".forumng_usage_sectitle" "css_element"
+    And I should see "Most posts" in the ".forumng_usage_listhead" "css_element"
+    And I should see "Most discussions"
+
+    # Check the MOST POSTS counts
+    And I should see "3" in the ".forumng_usage_contrib .forumng_usage_contrib_cont:nth-child(1) .forumng_usage_list li:nth-child(1) .forumng_usage_list_tot" "css_element"
+    And I should see "2" in the ".forumng_usage_contrib .forumng_usage_contrib_cont:nth-child(1) .forumng_usage_list li:nth-child(2) .forumng_usage_list_tot" "css_element"
+    And I should see "1" in the ".forumng_usage_contrib .forumng_usage_contrib_cont:nth-child(1) .forumng_usage_list li:nth-child(3) .forumng_usage_list_tot" "css_element"
+    # Check the MOST POSTS
+    And I should see "Student 3" in the "div.forumng_usage_contrib_cont:nth-child(1) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 2" in the "div.forumng_usage_contrib_cont:nth-child(1) > ol:nth-child(2) > li:nth-child(2) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 1" in the "div.forumng_usage_contrib_cont:nth-child(1) > ol:nth-child(2) > li:nth-child(3) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+
+    # Check the MOST DISCUSSIONS counts
+    And I should see "3" in the ".forumng_usage_contrib .forumng_usage_contrib_cont:nth-child(2) .forumng_usage_list:nth-child(2) li:nth-child(1) .forumng_usage_list_tot" "css_element"
+    And I should see "2" in the ".forumng_usage_contrib .forumng_usage_contrib_cont:nth-child(2) .forumng_usage_list:nth-child(2) li:nth-child(2) .forumng_usage_list_tot" "css_element"
+    And I should see "1" in the ".forumng_usage_contrib .forumng_usage_contrib_cont:nth-child(2) .forumng_usage_list:nth-child(2) li:nth-child(3) .forumng_usage_list_tot" "css_element"
+    # Check the MOST DISCUSSION
+    And I should see "Admin User" in the "div.forumng_usage_contrib_cont:nth-child(2) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 3" in the "div.forumng_usage_contrib_cont:nth-child(2) > ol:nth-child(2) > li:nth-child(2) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 1" in the "div.forumng_usage_contrib_cont:nth-child(2) > ol:nth-child(2) > li:nth-child(3) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+
+    And I should see "Post history - 12 posts" in the ".forumng_usage_usagechart" "css_element"
+    And "Update post history" "button" should exist
+    And ".forumng_usage_chart" "css_element" should exist
+    And ".forumng_usage_subscribers" "css_element" should exist
+    And I should see "Subscribers" in the ".forumng_usage_subscribers h4" "css_element"
+    And I should see "Subscriber type"
+    And I should see "Number"
+    And I should see "Total subscribers"
+    And I should see "2" in the "table.generaltable:nth-child(2) > tbody:nth-child(2) > tr:nth-child(1) > td:nth-child(2)" "css_element"
+
+    And I should see "Whole forum subscribers"
+    And I should see "Group forum subscribers"
+    And I should see "Discussion subscribers"
+    And I should see "2" in the "tr.lastrow:nth-child(4) > td:nth-child(2)" "css_element"
+
+    And I should see "Most read discussions"
+    And I should see "2" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(1) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 4" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(1) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 1" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(1) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+
+    And I should see "2" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(2) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 2" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(2) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Admin User" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(2) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+
+    And I should see "2" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(3) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 1" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(3) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Admin User" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(3) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+
+    And I should see "1" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(4) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 6" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(4) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 3" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(4) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+    And I should see "1" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(5) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 5" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(5) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 3" in the "ol.forumng_usage_list:nth-child(1) > li:nth-child(5) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+    And I should see "Most flagged posts"
+    And I should see "1" in the "div.forumng_usage_flagged:nth-child(5) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(1)" "css_element"
+    And I should see "Re: Discussion 1" in the "div.forumng_usage_flagged:nth-child(5) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 1" in the "div.forumng_usage_flagged:nth-child(5) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+
+    And I should see "Most flagged discussions"
+    And I should see "2" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 2" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Admin User" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(1) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+    And I should see "1" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(2) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 4" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(2) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Student 1" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(2) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+    And I should see "1" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(3) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 3" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(3) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Admin User" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(3) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+    And I should see "1" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(4) > div:nth-child(1)" "css_element"
+    And I should see "Discussion 1" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(4) > div:nth-child(3) > div:nth-child(1) > a:nth-child(1)" "css_element"
+    And I should see "Admin User" in the "div.forumng_usage_flagged:nth-child(6) > ol:nth-child(2) > li:nth-child(4) > div:nth-child(3) > div:nth-child(3) > a:nth-child(1)" "css_element"
+
+    And ".forumng_usage_readers" "css_element" should exist
+    And ".forumngusageshowmostreaders" "css_element" should exist
+    And ".forumng_usage_list_tot" "css_element" should exist
+    And ".forumng_usage_list_pic" "css_element" should exist
+    And ".forumng_usage_list_info" "css_element" should exist
+    And ".forumng_usage_flagged" "css_element" should exist
+    And I should not see "No posts flagged"
+    And I should not see "No discussions flagged"
+    And I log out
diff --git a/mod/forumng/feature/usage/tests/usage_test.php b/mod/forumng/feature/usage/tests/usage_test.php
new file mode 100644
index 0000000..11883ef
--- /dev/null
+++ b/mod/forumng/feature/usage/tests/usage_test.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Unit test for feature.
+ *
+ * @package forumngfeature_usage
+ * @copyright 2016 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/tests/forumng_test_lib.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+/**
+ * Unit test.
+ */
+class forumngfeature_usage_usage_testcase extends forumng_test_lib {
+
+    /**
+     * Tests that discussions can be marked as read.
+     * (unread count etc tested in test_get_course_forums())
+     */
+    public function test_most_readers() {
+        global $USER, $CFG;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $user1 = $this->get_new_user('student', $course->id);
+        $user2 = $this->get_new_user('student', $course->id);
+        $user3 = $this->get_new_user('student', $course->id);
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+
+        // The users are in both the groups except user 3 is not in group 1.
+        $this->get_new_group_member($group1->id, $user1->id);
+        $this->get_new_group_member($group2->id, $user1->id);
+        $this->get_new_group_member($group1->id, $user2->id);
+        $this->get_new_group_member($group2->id, $user2->id);
+        $this->get_new_group_member($group2->id, $user3->id);
+
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS));
+        list($d1, $postid) = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(),
+                'userid' => $USER->id, 'groupid' => $group1->id));
+        list($d2, $postid) = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(),
+                'userid' => $USER->id, 'groupid' => $group1->id));
+        list($d3, $postid) = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(),
+                'userid' => $USER->id, 'groupid' => $group2->id));
+        list($d4, $postid) = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(),
+                'userid' => $USER->id, 'groupid' => $group1->id));
+
+        $discussions = $forum1->get_discussion_list()->get_normal_discussions();
+
+        // Discussion 1 has been read 3 times (but one is from somebody not in the group)...
+        $discussions[$d1]->mark_read(0, $user1->id);
+        $discussions[$d1]->mark_read(0, $user2->id);
+        $discussions[$d1]->mark_read(0, $user3->id);
+        // Discussion 2 has been read twice but one is not enrolled.
+        $discussions[$d2]->mark_read(0, $user1->id);
+        $discussions[$d2]->mark_read(0, $USER->id);
+        // Discussion 3 has been read twice but once by marking a single post not whole discussion.
+        $discussions[$d3]->get_root_post()->mark_read(0, $user2->id);
+        $discussions[$d3]->mark_read(0, $user3->id);
+
+        require_once($CFG->dirroot . '/mod/forumng/feature/usage/locallib.php');
+
+        // Get results for all groups.
+        $params = array('id' => $forum1->get_course_module_id());
+        $result = forumngfeature_usage_show_mostreaders($params);
+        $this->assertRegExp('~forumng_usage_list_tot">3<.*?discussion 1.*?' .
+                'forumng_usage_list_tot">2<.*?discussion 3.*?' .
+                'forumng_usage_list_tot">1<.*?discussion 2~s', $result);
+        $this->assertNotContains('discussion 4', $result);
+
+        // Try for group 1.
+        $params['group'] = $group1->id;
+        $result = forumngfeature_usage_show_mostreaders($params);
+        $this->assertRegExp('~forumng_usage_list_tot">2<.*?discussion 1.*?' .
+                'forumng_usage_list_tot">1<.*?discussion 2~s', $result);
+        $this->assertNotContains('discussion 3', $result);
+        $this->assertNotContains('discussion 4', $result);
+
+        // Try for group 2.
+        $params['group'] = $group2->id;
+        $result = forumngfeature_usage_show_mostreaders($params);
+        $this->assertRegExp('~forumng_usage_list_tot">2<.*?discussion 3~s', $result);
+        $this->assertNotContains('discussion 1', $result);
+        $this->assertNotContains('discussion 2', $result);
+        $this->assertNotContains('discussion 4', $result);
+    }
+
+}
diff --git a/mod/forumng/feature/usage/usage.php b/mod/forumng/feature/usage/usage.php
new file mode 100644
index 0000000..b8d6b79
--- /dev/null
+++ b/mod/forumng/feature/usage/usage.php
@@ -0,0 +1,474 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This page give usage stats for the current forum (group).
+ * Access to the whole page is controlled by capability.
+ * Each item displayed may also check capabilities for display.
+ * @package forumngfeature_usage
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/usage/locallib.php');
+
+$cmid = required_param('id', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$ratings = optional_param('ratings', 0, PARAM_INT);
+$pageparams = array('id' => $cmid);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+$context = $forum->get_context();
+
+$groupid = mod_forumng::get_activity_group($cm, true);
+if ($groupid != mod_forumng::NO_GROUPS && $groupid != mod_forumng::ALL_GROUPS) {
+    $pageparams['group'] = $groupid;
+    $groupwhere = 'AND (fd.groupid = ? OR fd.groupid IS NULL)';
+    $groupparams = array($groupid);
+} else {
+    $groupwhere = '';
+    $groupparams = array();
+}
+
+$ajaxparams = $pageparams;
+
+// Check access.
+$forum->require_view($groupid);
+require_capability('forumngfeature/usage:view', $forum->get_context());
+
+// Print page header.
+$thisurl = new moodle_url('/mod/forumng/feature/usage/usage.php', $pageparams);
+$mainrenderer = $forum->init_page($thisurl, get_string('title', 'forumngfeature_usage'));
+$renderer = $PAGE->get_renderer('forumngfeature_usage');
+echo $OUTPUT->header();
+// Display group selector if required.
+$thisurl->remove_params('group');// Remove group param so not included in group selector.
+groups_print_activity_menu($cm, $thisurl);
+echo $OUTPUT->heading(get_string('title', 'forumngfeature_usage'));
+// Contribution.
+echo html_writer::start_div('forumng_usage_section');
+echo $OUTPUT->heading(get_string('contribution', 'forumngfeature_usage'), 3, 'forumng_usage_sectitle');
+// Get all user posts, discussions count (as used in participation screen).
+$posts = $forum->get_all_user_post_counts($groupid, true);
+$contribcount = 5;
+// Sort by replies/discussions.
+$mostposts = $mostdiscussions = $posts;
+uasort($mostposts, function($a, $b) {
+    return  $a->replies < $b->replies ? 1 : -1;
+});
+uasort($mostdiscussions, function($a, $b) {
+    return  $a->discussions < $b->discussions ? 1 : -1;
+});
+$postkeys = array_keys($mostposts);
+$discusskeys = array_keys($mostdiscussions);
+echo html_writer::start_div('forumng_usage_contrib');
+// Start posts/replies.
+echo html_writer::start_div('forumng_usage_contrib_cont');
+$toplist = array();
+$totaltoshow = $contribcount > count($posts) ? count($posts) : $contribcount;
+$userfields = user_picture::fields();
+for ($a = 0; $a < $totaltoshow; $a++) {
+    // Create list of most posts.
+    if ($mostposts[$postkeys[$a]]->replies > 0) {
+        if ($user = $DB->get_record('user', array('id' => $postkeys[$a]), $userfields)) {
+            $toplist[] = $renderer->render_usage_list_item($forum,
+                    $mostposts[$postkeys[$a]]->replies, $user,
+                    html_writer::div($forum->display_user_link($user), 'fng_userlink'));
+        }
+    }
+}
+echo $renderer->render_usage_list($toplist, 'mostposts');
+echo html_writer::end_div();
+// End posts.
+echo html_writer::start_div('forumng_usage_contrib_cont');
+$toplist = array();
+$totaltoshow = $contribcount > count($posts) ? count($posts) : $contribcount;
+for ($a = 0; $a < $totaltoshow; $a++) {
+    if ($mostdiscussions[$discusskeys[$a]]->discussions > 0) {
+        // Add to list of most new discussions.
+        if ($user = $DB->get_record('user', array('id' => $discusskeys[$a]), $userfields)) {
+                $toplist[] = $renderer->render_usage_list_item($forum,
+                        $mostdiscussions[$discusskeys[$a]]->discussions, $user,
+                        html_writer::div($forum->display_user_link($user), 'fng_userlink'));
+        }
+    }
+}
+echo $renderer->render_usage_list($toplist, 'mostdiscussions');
+echo html_writer::end_div();
+echo html_writer::end_div();
+echo html_writer::end_div();
+echo html_writer::div('', 'clearer');
+flush();// In case any lengthy stats flush, so something is showing.
+// End contribution stats, now show usage.
+$usageoutput = '';
+if (has_capability('forumngfeature/usage:viewusage', $forum->get_context())) {
+    // Show post history.
+    $dateform = new forumngfeature_usage_usagechartdate(null, array('params' => $pageparams));
+    $starttime = 0;
+    $endtime = time();
+    if ($formdata = $dateform->get_data()) {
+        if (!empty($formdata->usagedatefrom)) {
+            $starttime = $formdata->usagedatefrom;
+        }
+        if (!empty($formdata->usagedateto)) {
+            if (!empty($formdata->usagedatefrom) && $formdata->usagedatefrom > $formdata->usagedateto) {
+                // Ensure date is after from date.
+                $formdata->usagedateto = $formdata->usagedatefrom;
+            }
+            // Set end time to next day from that selected -1 second (end of same day).
+            $endtime = strtotime('tomorrow', $formdata->usagedateto) - 1;
+            $dateform->set_data($formdata);
+        }
+    }
+    // Get all valid posts - note includes anonymous posts.
+    $allposts = $DB->get_recordset_sql("
+        SELECT fp.created FROM {forumng_posts} fp
+    INNER JOIN {forumng_discussions} fd ON fd.id = fp.discussionid
+         WHERE fd.forumngid = ?
+           AND fp.deleted = 0
+           AND fd.deleted = 0
+           AND fp.oldversion = 0
+           AND (fp.created >= ? AND fp.created <= ?)
+        $groupwhere
+      ORDER BY fp.created asc", array_merge(array($forum->get_id(), $starttime, $endtime), $groupparams));
+    $days = array();
+    if ($starttime == 0) {
+        $starttime = $COURSE->startdate;// Earliest start time.
+    }
+    $startdate = new DateTime(gmdate('m/d/yy', $starttime));
+    if (!isset($allposts->current()->created) || $allposts->current()->created > $starttime) {
+        // Setup the start date so even if not a post in it (or no posts), it will display.
+        $days[ltrim(userdate($starttime, get_string('strftimedate', 'langconfig')))] = 0;
+    }
+    foreach ($allposts as $post) {
+        $date = ltrim(userdate($post->created, get_string('strftimedate', 'langconfig')));
+        if (!isset($days[$date])) {
+            $days[$date] = 1;
+        } else {
+            $days[$date]++;
+        }
+    }
+    $endday = ltrim(userdate($endtime, get_string('strftimedate', 'langconfig')));
+    $enddate = new DateTime(gmdate('m/d/yy', $endtime));
+    if (!isset($days[$endday])) {
+        // Make graph go up to end time if no posts that day.
+        $days[$endday] = 0;
+    }
+    $allposts->close();
+    // Setup YUI chart data. Gets passed to js.
+    $data = array();
+    $postcount = 0;
+    $datelabel = get_string('usagechartday', 'forumngfeature_usage');
+    $postslabel = get_string('usagechartposts', 'forumngfeature_usage');
+    $totallabel = get_string('usagecharttotal', 'forumngfeature_usage');
+    foreach ($days as $day => $count) {
+        $postcount += $count;
+        $data[] = (object) array(
+                $datelabel => $day,
+                $postslabel => $count,
+                $totallabel => $postcount
+                );
+    }
+    $axes = (object) array(
+            $datelabel => (object) array(
+                    'type' => 'time',
+                    'keys' => array($datelabel),
+                    'labelFormat' => get_string('strftimedate', 'langconfig'),
+                    'position' => 'bottom',
+                    ),
+            $postslabel => (object) array(
+                    'position' => 'left',
+                    'keys' => array($postslabel),
+                    'type' => 'numeric',
+                    'title' => get_string('usagechartpostslabel', 'forumngfeature_usage'),
+                    'minimum' => 0
+                    ),
+            $totallabel => (object) array(
+                    'position' => 'right',
+                    'keys' => array($totallabel),
+                    'type' => 'numeric',
+                    'title' => get_string('usagecharttotallabel', 'forumngfeature_usage'),
+                    'minimum' => 0
+                    )
+
+            );
+    $options = (object) array(
+            'render' => '#usagechart',
+            'categoryKey' => $datelabel,
+            'categoryType' => 'time',
+            'styles' => (object) array('axes' => (object) array($datelabel => (object) array('label' => (object) array('rotation' => -90)))),
+            'type' => 'combo',
+            'seriesCollection' => array(
+                    (object) array(
+                            'type' => 'column',
+                            'yKey' => $postslabel,
+                            )
+                    )
+            );
+    // There are 11 day labels shown by default on chart - if less available update axis.
+    $interval = $startdate->diff($enddate);
+    $totaldays = $interval->days + 1;// Add 1 to day diff as we always show start and end days.
+    if ($totaldays < 11) {
+        // Show axis labels for each day.
+        $options->styles->axes->$datelabel->majorUnit = new stdClass();
+        $options->styles->axes->$datelabel->majorUnit->count = $totaldays;
+    }
+    if (count($data) > 1) {
+        // Chart only works if more than 1 record.
+        $PAGE->requires->yui_module('moodle-forumngfeature_usage-usagegraph',
+                'M.mod_forumng.forumngfeature_usage_chart.output', array($data, $axes, $options));
+    }
+
+    $usageoutput .= html_writer::start_div('forumng_usage_usagechart');
+    $help = $OUTPUT->help_icon('usagechartpoststot', 'forumngfeature_usage');
+    $usageoutput .= $OUTPUT->heading(get_string('usagechartpoststotal', 'forumngfeature_usage',
+            $postcount) . $help, 4);
+    $usageoutput .= $dateform->render();
+    // Accessible table of chart.
+    $charttable = new html_table();
+    $charttable->head = array($datelabel, $postslabel, $totallabel);
+    $charttable->data = $data;
+    $charttable->summary = get_string('usagechartpoststable', 'forumngfeature_usage');
+    if (count($data) > 1) {
+        // Show table hidden for screenreaders (also keyboard focus toggled by css).
+        $usageoutput .= get_accesshide(html_writer::table($charttable), 'div', 'skip', 'tabindex = 0');
+        $usageoutput .= html_writer::div('', 'forumng_usage_chart', array('id' => 'usagechart'));
+    } else {
+        // Show table instead of chart.
+        $usageoutput .= html_writer::table($charttable);
+    }
+    $usageoutput .= html_writer::end_div();
+}
+if ($forum->can_view_subscribers()) {
+    // View subscriber info.
+    $subs = $forum->get_subscribers($groupid);
+    $discussioncount = 0;
+    $groupcount = 0;
+    $wholecount = 0;
+    foreach ($subs as $subscriber) {
+        if (!empty($subscriber->wholeforum)) {
+            $wholecount++;
+        }
+        if (!empty($subscriber->discussionids)) {
+            $discussioncount += count($subscriber->discussionids);
+        }
+        if (!empty($subscriber->groupids)) {
+            $groupcount += count($subscriber->groupids);
+        }
+    }
+    $usageoutput .= html_writer::start_div('forumng_usage_subscribers');
+    $help = $OUTPUT->help_icon('usagesubscribers', 'forumngfeature_usage');
+    $usageoutput .= $OUTPUT->heading(get_string('usagesubscribers', 'forumngfeature_usage') . $help, 4);
+    $subtable = new html_table();
+    $subtable->summary = get_string('usagesubscribers', 'forumngfeature_usage');
+    $subtable->head = array(get_string('usagesubscribertabletype', 'forumngfeature_usage'),
+            get_string('usagesubscribertabletotal', 'forumngfeature_usage'));
+    $subtable->data = array(
+            array(get_string('usagesubscribertable_all', 'forumngfeature_usage'), count($subs)),
+            array(get_string('usagesubscribertable_whole', 'forumngfeature_usage'), $wholecount),
+            array(get_string('usagesubscribertable_group', 'forumngfeature_usage'), $groupcount),
+            array(get_string('usagesubscribertable_discuss', 'forumngfeature_usage'), $discussioncount));
+    $usageoutput .= html_writer::table($subtable);
+    $usageoutput .= html_writer::end_div();
+}
+if (has_capability('mod/forumng:viewreadinfo', $forum->get_context())) {
+    $usageoutput .= html_writer::start_div('forumng_usage_readers');
+    $usageoutput .= $renderer->render_usage_list_heading('mostreaders');
+    $usageoutput .= $renderer->render_usage_dynamicarea('mostreaders', $forum, $ajaxparams);
+    $usageoutput .= html_writer::end_div();
+}
+if (has_capability('forumngfeature/usage:viewflagged', $forum->get_context())) {
+    // View posts that have been flagged.
+    $flagged = $DB->get_recordset_sql("
+            SELECT COUNT(ff.id) AS count, fp.id
+              FROM {forumng_flags} ff
+        INNER JOIN {forumng_posts} fp ON fp.id = ff.postid
+        INNER JOIN {forumng_discussions} fd ON fd.id = fp.discussionid
+             WHERE fd.forumngid = ?
+               AND fd.deleted = 0
+               AND fp.deleted = 0
+               AND fp.oldversion = 0
+            $groupwhere
+          GROUP BY fp.id
+          ORDER BY count desc, fp.id desc", array_merge(array($forum->get_id()), $groupparams), 0, 5);
+    $flaggedlist = array();
+    foreach ($flagged as $apost) {
+        $post = mod_forumng_post::get_from_id($apost->id, $cloneid, true, true);
+        list($content, $user) = $renderer->render_usage_post_info($forum, $post->get_discussion(), $post);
+        $flaggedlist[] = $renderer->render_usage_list_item($forum, $apost->count, $user, $content);
+    }
+    $usageoutput .= html_writer::start_div('forumng_usage_flagged');
+    $usageoutput .= $renderer->render_usage_list($flaggedlist, 'mostflagged');
+    $usageoutput .= html_writer::end_div();
+    // View discussions that have been flagged.
+    $flagged = $DB->get_recordset_sql("
+            SELECT COUNT(ff.id) AS count, fd.id
+            FROM {forumng_flags} ff
+            INNER JOIN {forumng_discussions} fd ON fd.id = ff.discussionid
+            WHERE fd.forumngid = ?
+            AND fd.deleted = 0
+            $groupwhere
+            GROUP BY fd.id
+            ORDER BY count desc, fd.id desc", array_merge(array($forum->get_id()), $groupparams), 0, 5);
+    $flaggedlist = array();
+    foreach ($flagged as $adiscuss) {
+        $discuss = mod_forumng_discussion::get_from_id($adiscuss->id, $cloneid, 0, true);
+        list($content, $user) = $renderer->render_usage_discussion_info($forum, $discuss);
+        $flaggedlist[] = $renderer->render_usage_list_item($forum, $adiscuss->count, $user, $content);
+    }
+    $usageoutput .= html_writer::start_div('forumng_usage_flagged');
+    $usageoutput .= $renderer->render_usage_list($flaggedlist, 'mostflaggeddiscussions');
+    $usageoutput .= html_writer::end_div();
+}
+
+// Show ratings.
+if (has_capability('mod/forumng:viewanyrating', $forum->get_context())) {
+    $gradingstr = '';
+    $ratingtype = $forum->get_enableratings();
+    if ($ratingtype && $forum->get_rating_scale() != 0) {
+        // Get grading type from forum.
+        $gradingtype = $forum->get_grading();
+        $counttype = '';
+        if (($gradingtype == mod_forumng::GRADING_NONE) || ($gradingtype == mod_forumng::GRADING_MANUAL)) {
+            // If ratings (grading type) not set get default display grading type depending upon rating scale type.
+            if (!$ratings) {
+                $scaletype = $forum->get_rating_scale();
+                if ($scaletype > 0) {
+                    $gradingtype = mod_forumng::GRADING_AVERAGE;
+                } else if ($scaletype < 0) {
+                    $gradingtype = mod_forumng::GRADING_COUNT;
+                }
+            }
+        }
+
+        if ($ratings) {
+            $gradingtype = $ratings;
+        }
+
+        $orderby = ' rawgrade DESC';
+        // Build up sql.
+        switch ($gradingtype) {
+            case mod_forumng::GRADING_AVERAGE:
+                // Grading: Average of ratings.
+                $counttype = ' AVG(r.rating) AS rawgrade';
+                $gradingstr = 'forumng_ratings_grading_average';
+                break;
+
+            case mod_forumng::GRADING_COUNT:
+                // Grading: Count of ratings.
+                $counttype = ' COUNT(r.rating) AS rawgrade';
+                $gradingstr = 'forumng_ratings_grading_count';
+                break;
+
+            case mod_forumng::GRADING_MAX:
+                // Grading: Max rating.
+                $counttype = ' MAX(r.rating) AS rawgrade';
+                $gradingstr = 'forumng_ratings_grading_max';
+                break;
+
+            case mod_forumng::GRADING_MIN:
+                // Grading: Min rating.
+                $counttype = ' MIN(r.rating) AS rawgrade';
+                $gradingstr = 'forumng_ratings_grading_min';
+                break;
+
+            case mod_forumng::GRADING_SUM:
+                // Grading: Sum of ratings.
+                $counttype = ' SUM(r.rating) as rawgrade';
+                $gradingstr = 'forumng_ratings_grading_sum';
+                break;
+        }
+
+        $ratingslist = array();
+        $conditionsparams = array($forum->get_id());
+        $conditions = '  fd.forumngid = ?';
+        $havingparams = array();
+        if ($ratingtype == mod_forumng::FORUMNG_STANDARD_RATING ) {
+            // Moodle ratings.
+            $postid = ' r.itemid AS postid ';
+            $from = ' {rating} r ';
+            $postjoin = 'INNER JOIN {forumng_posts} fp ON r.itemid = fp.id';
+            $conditions .= ' AND r.component = \'mod_forumng\'';
+            $conditions .= ' AND r.contextid = ?';
+            $conditionsparams[] = $forum->get_context()->id;
+            $groupby = ' GROUP BY r.itemid ';
+            $having = '';
+        } else {
+            // Old forumng ratings (obsolete).
+            $postid = ' r.postid AS postid ';
+            $from = ' {forumng_ratings} r';
+            $postjoin = 'INNER JOIN {forumng_posts} fp ON r.postid = fp.id';
+            $having = 'HAVING COUNT(r.rating) >= ?';
+            $havingparams[] = $forum->get_rating_threshold();
+            $groupby = ' GROUP BY r.postid';
+        }
+
+        $conditionsparams = array_merge($conditionsparams, $groupparams, $havingparams);
+
+        $ratingsl = $DB->get_recordset_sql("SELECT $counttype, $postid
+                FROM $from
+                $postjoin
+                INNER JOIN  {forumng_discussions} fd ON fp.discussionid = fd.id
+                INNER JOIN  {forumng} f ON f.id = fd.forumngid
+                WHERE $conditions
+                AND fd.deleted = 0
+                AND fp.deleted = 0
+                AND fp.oldversion = 0
+                $groupwhere
+                $groupby
+                $having
+                ORDER BY rawgrade DESC
+                ", $conditionsparams, 0, 5);
+
+        // Get the ratings.
+        foreach ($ratingsl as $apost) {
+            if ($gradingtype == mod_forumng::GRADING_AVERAGE) {
+                $apost->rawgrade = round($apost->rawgrade, 2);
+            }
+            $post = mod_forumng_post::get_from_id($apost->postid, $cloneid, true, true);
+            list($content, $user) = $renderer->render_usage_post_info($forum, $post->get_discussion(), $post);
+            $ratingslist[] = $renderer->render_usage_list_item($forum, $apost->rawgrade, $user, $content);
+        }
+
+        // Print out ratings usage.
+        $usageoutput .= $renderer->render_usage_ratings($ratingslist, $forum, $gradingstr, $gradingtype);
+    }
+}
+
+if (!empty($usageoutput)) {
+    echo html_writer::start_div('forumng_usage_section');
+    echo $OUTPUT->heading(get_string('usage', 'forumngfeature_usage'), 4, 'forumng_usage_sectitle');
+    echo $usageoutput;
+    echo html_writer::start_div('clearer') . html_writer::end_div();
+    echo html_writer::end_div();
+}
+echo $OUTPUT->footer();
+// Log usage view.
+$params = array(
+    'context' => $forum->get_context(),
+    'objectid' => $forum->get_id(),
+    'other' => array('url' => $thisurl->out_as_local_url())
+);
+
+$event = \forumngfeature_usage\event\usage_viewed::create($params);
+$event->add_record_snapshot('course_modules', $forum->get_course_module());
+$event->add_record_snapshot('course', $forum->get_course());
+$event->trigger();
diff --git a/mod/forumng/feature/usage/usage_ajax.php b/mod/forumng/feature/usage/usage_ajax.php
new file mode 100644
index 0000000..1014c1c
--- /dev/null
+++ b/mod/forumng/feature/usage/usage_ajax.php
@@ -0,0 +1,40 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Called via ajax when updating a usage element dynamically.
+ * cmid (id param) must be sent.
+ *
+ * @package    mod
+ * @subpackage forumng
+ * @copyright  2014 The open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+define('AJAX_SCRIPT', true);
+header('Content-Type: application/json');
+require_once(dirname(__FILE__) . '/../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/feature/usage/locallib.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+require_sesskey();
+$type = required_param('name', PARAM_TEXT);
+
+$func = "forumngfeature_usage_show_$type";
+
+if (function_exists($func)) {
+    echo json_encode(array('content' => $func($_GET)));
+}
diff --git a/mod/forumng/feature/usage/version.php b/mod/forumng/feature/usage/version.php
new file mode 100644
index 0000000..7f02cbd
--- /dev/null
+++ b/mod/forumng/feature/usage/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ *
+ * @package forumngfeature_usage
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2014102800;
+$plugin->component = 'forumngfeature_usage';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/feature/usage/yui/usagegraph/usagegraph.js b/mod/forumng/feature/usage/yui/usagegraph/usagegraph.js
new file mode 100644
index 0000000..f786696
--- /dev/null
+++ b/mod/forumng/feature/usage/yui/usagegraph/usagegraph.js
@@ -0,0 +1,12 @@
+YUI.add('moodle-forumngfeature_usage-usagegraph', function(Y) {
+    M.mod_forumng = M.mod_forumng || {};
+    M.mod_forumng.forumngfeature_usage_chart = M.mod_forumng.forumngfeature_usage_chart || {
+        // Output a YUI chart - you must supply data and options inc render.
+        output : function(dataarray, axesarray, options) {
+                options.dataProvider = dataarray;
+                options.axes = axesarray;
+                new Y.Chart(options);
+            },
+        };
+    }, '@VERSION@', {requires: ['node', 'charts']}
+);
diff --git a/mod/forumng/feature/usage/yui/usageloader/usageloader.js b/mod/forumng/feature/usage/yui/usageloader/usageloader.js
new file mode 100644
index 0000000..135721f
--- /dev/null
+++ b/mod/forumng/feature/usage/yui/usageloader/usageloader.js
@@ -0,0 +1,62 @@
+YUI.add('moodle-forumngfeature_usage-usageloader', function(Y) {
+    M.mod_forumng = M.mod_forumng || {};
+    M.mod_forumng.forumngfeature_usage_loader = M.mod_forumng.forumngfeature_usage_loader || {
+        // Dynamically load data into a div.
+        init : function(name, params) {
+                var container = Y.one('.forumngusageshow' + name);
+                if (container) {
+                    var cfg = {
+                            method: 'GET',
+                            on: {
+                                start: function() {
+                                    // Add an ajax 'spinner'.
+                                    container.append('<div class="ajaxworking" />');
+                                },
+                                success: function(transactionid, o) {
+                                    if (o.responseText) {
+                                        // Process the JSON data returned from the server.
+                                        try {
+                                            var response = Y.JSON.parse(o.responseText);
+                                            if (response.error) {
+                                                usageloader_killspinner(true);
+                                                return;
+                                            }
+                                            if (response.content) {
+                                                usageloader_killspinner(false);
+                                                container.set('innerHTML', response.content);
+                                            }
+                                        } catch (e) {
+                                            usageloader_killspinner(true);
+                                            return;
+                                        }
+                                    } else {
+                                        usageloader_killspinner(true);
+                                        return;
+                                    }
+                                },
+                                failure: function() {
+                                    usageloader_killspinner(true);
+                                }
+                            },
+                            data: params
+                    };
+                    var uri = M.cfg.wwwroot + '/mod/forumng/feature/usage/usage_ajax.php';
+                    Y.io(uri, cfg);
+                    var usageloader_killspinner = function(failed) {
+                        var spinner = container.one('.ajaxworking');
+                        if (spinner) {
+                            spinner.remove(true);
+                        }
+                        if (failed) {
+                            // Show noajax load link.
+                            var noscript = container.one('.forumngusage_loader_noscript');
+                            if (noscript) {
+                                noscript.setStyle('display', 'block');
+                            }
+                        }
+                    };
+                }
+            },
+        };
+    }, '@VERSION@', {requires: ['node', 'io', 'json-parse']}
+);
diff --git a/mod/forumng/feature/userposts/classes/event/participation_viewed.php b/mod/forumng/feature/userposts/classes/event/participation_viewed.php
new file mode 100644
index 0000000..898c2c5
--- /dev/null
+++ b/mod/forumng/feature/userposts/classes/event/participation_viewed.php
@@ -0,0 +1,117 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The forumngfeature_userposts view event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace forumngfeature_userposts\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The forumngfeature_userposts view event class.
+ *
+ * @package    mod_forumng
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class participation_viewed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+        $this->data['objecttable'] = 'forumng';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        if (!empty($this->relateduserid)) {
+            return "The user with id '$this->userid' viewed participation information for user with id
+                '$this->relateduserid' on the forum with course module id '$this->contextinstanceid'";
+        } else {
+            return "The user with id '$this->userid' viewed participation information for the forum with
+                course module id '$this->contextinstanceid'";
+        }
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:viewed', 'forumngfeature_userposts');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/forumng/feature/userposts/' . $this->other['url']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $url = str_replace('/mod/forumng/feature/userposts/', '', $this->other['url']);
+        if (!empty($this->relateduserid)) {
+            $action = 'View user participation';
+        } else {
+            $action = 'View participation list';
+        }
+        return array($this->courseid, 'forumng', $action, $url,
+                $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['url'])) {
+            throw new \coding_exception('The \'url\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/forumng/feature/userposts/db/access.php b/mod/forumng/feature/userposts/db/access.php
new file mode 100644
index 0000000..acfbeb1
--- /dev/null
+++ b/mod/forumng/feature/userposts/db/access.php
@@ -0,0 +1,34 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Capabilities.
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$capabilities = array(
+    'forumngfeature/userposts:view' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    )
+);
diff --git a/mod/forumng/feature/userposts/forumngfeature_userposts.php b/mod/forumng/feature/userposts/forumngfeature_userposts.php
new file mode 100644
index 0000000..251488b
--- /dev/null
+++ b/mod/forumng/feature/userposts/forumngfeature_userposts.php
@@ -0,0 +1,68 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum feature: show all posts organised by user.
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../forumngfeature_discussion_list.php');
+
+/**
+ * This feature lists posts from a user. It appears at the bottom of the
+ * discussion list page.
+ */
+class forumngfeature_userposts extends forumngfeature_discussion_list {
+    public function get_order() {
+        return 100;
+    }
+
+    public function should_display($forum) {
+        global $USER;
+        if (!($forum->is_shared() || $forum->is_clone() || isguestuser($USER->id)) &&
+            (has_capability('mod/forumng:startdiscussion', $forum->get_context())
+            || has_capability('mod/forumng:replypost', $forum->get_context())
+            || has_capability('forumngfeature/userposts:view', $forum->get_context()))) {
+            if ($forum->get_group_mode() == VISIBLEGROUPS &&
+                    !has_capability('forumngfeature/userposts:view', $forum->get_context())) {
+                // In visible group mode, check student is in group - if not they can't see button.
+                $groupid = $forum->get_activity_group($forum->get_course_module());
+                if ($groupid != null && !$forum->can_access_group($groupid, true)) {
+                    return false;
+                }
+            }
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public function display($forum) {
+        if (has_capability('forumngfeature/userposts:view', $forum->get_context())) {
+            $name = get_string('viewpostsbyuser', 'forumngfeature_userposts');
+            $script = 'feature/userposts/list.php';
+            return parent::get_button($forum, $name, $script, false, array(), '', 'fng-mobile-on');
+        } else {
+            $name = get_string('viewownposts', 'forumngfeature_userposts');
+            $script = 'feature/userposts/user.php';
+            return parent::get_button($forum, $name, $script, false,
+                    array('user' => mod_forumng_utils::get_real_userid(), 'fng-mobile-on'));
+        }
+    }
+}
diff --git a/mod/forumng/feature/userposts/internaldoc/grading.txt b/mod/forumng/feature/userposts/internaldoc/grading.txt
new file mode 100644
index 0000000..059a95d
--- /dev/null
+++ b/mod/forumng/feature/userposts/internaldoc/grading.txt
@@ -0,0 +1,46 @@
+== OU ForumNG Grading Feature ==
+
+=== Description ===
+
+Display user participation within forumNG.
+
+Participation is defined as:
+
+* discussions created
+* posts replied to
+
+=== Capability requirements ===
+
+A user will be considered as participating in a forum if they have the capability to create a discussion and reply to a post within
+the context of the current forum instance and are not considered an adminstrator
+by standard Moodle legacy roles and capabilities.
+
+A user who has the capability '''mod/forumng:grade''' and has access to the current forum
+can view all user participation, subject to the groupmode settings and their membership of those groups.
+(A user who has the capability '''moodle/site:accessallgroups''' will be able to see all groups regardless of
+personal membership).
+
+=== Grading page display ===
+
+From the foum page the button to access the grading screens is 'view posts by user' which takes you to the user list screen.
+If you have the ability to '''mod/forumng:grade''' you will be presented with a Grade dropdown for each user when
+manual grading is selected. This screen will allow you to grade each user in these cases, otherwise it will display grade value.
+
+To view an individual user's participation click on the link 'Show all posts by <name>'. This will take you to a screen containing
+that user's posts including replies and any discussion start posts if they started a discussion.
+If you have the ability to '''mod/forumng:grade''' you will see a Grade dropdown for that user.
+
+=== Grading ===
+
+A user with the capability ''mod/forumng:grade'' in relation to the current forum has the ability to add grade values.
+This can either be done as a bulk action on the '''View posts by user''' page or as a single update on the more detailed
+single user page.
+
+Grading will only be available if it has been set for the particular forum instance
+in the '''ForumNG administration''' '''Edit settings''' screen.
+
+To grade on the main 'User posts' list screen - you can change one or more grade dropdowns,
+then you must click the 'Save grades' button.
+
+To grade an individual named user's posts - you need to goto to the bottom of the page, choose a grade from the dropdown box,
+then you must click the 'Save grades' button.
diff --git a/mod/forumng/feature/userposts/internaldoc/testcase.grading.txt b/mod/forumng/feature/userposts/internaldoc/testcase.grading.txt
new file mode 100644
index 0000000..64a475a
--- /dev/null
+++ b/mod/forumng/feature/userposts/internaldoc/testcase.grading.txt
@@ -0,0 +1,139 @@
+This script describes steps to test the participation facility from a user
+perspective. It is intended to cover most of the UI and features.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script follow on from each other and aren't independent.
+
+Initial setup
+=============
+
+This test case requires:
+
+- a course which has at least two groups defined (G1 and G2).
+- two test student users (U.S1, who is in group G1, and U.S2, in group G2).
+- one editing teacher (U.ET)
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+The completion system must be enabled for (a) the site, and (b) the test
+course.
+
+CRE Creating forums and data
+============================
+
+CRE01 / admin
+  In your test course, create a forum called CRE01
+  Edit forum settings so that:
+  Under 'Grade' settings
+  Choose 'Teacher grades student' from Grade dropdown
+  Set 'Grading scale' to 100
+
+  Under 'Common module' settings
+  Choose 'Seperate groups' from Group mode
+  Leave 'Grouping' set to 'None'
+  Leave 'Visible' to 'Show'
+
+  Click on Save and display submit button
+
+CRE02 / admin
+  Go into the forum you have just created and start a seperate discussion for each group
+  For each discussion create a post
+
+CRE03 / U.S1 [change]
+  Go to forum CRE01 (you should be in group G1).
+  Reply to start discussion post created by admin user
+
+CRE04 / U.S2 [change]
+  Go to forum CRE01 (you should be in group G2).
+  Reply to start discussion post created by admin user
+
+CRE04 / U.ET [change]
+  Go to forum CRE01.
+  Click against 'View posts by user'
+
+GRD Grading
+===========
+
+GRD01 / U.ET
+ This should bring up a screen entitled User posts
+ It should show the student user
+ The number of Discussions started by that user
+ The number of Replies to posts
+ Grades per user, this is a dropdown that anybody with 'mod/forumng:grade' can be used to grade a user
+ - currently the only people that can grade a user are admin, teacher, editing teacher, and manager.
+ Check the grade dropdown to see that it contains a 'No grade' option and grades between 0/100 - 100/100
+ Note: 100 should be the value you set the scale at when you edited the forum settings
+ Choose 77 as a grade/score
+ Note: All users if you can grade them will have grade dropdown box even if they have not yet taken part in the forum
+ which will be set to a score of 'No grade'.
+ Click on Save Grades which will save the grades.
+ Click on the link that says 'Show all posts by <name>'
+
+GRD02 / U.ET
+ This takes you to a screen showing all posts by that user (including replies and discussions stated)
+ At the end of the posts is a section entitled 'User grade'
+ The Grade dropdown should be showing a grade of 77/100, which is the grade you set for that user on the previous screen
+ Change the grade to 95/100
+ Click on the Save changes button
+
+ This takes you back to the 'User posts' screen
+ Check to see that the Grade dropdown is showing 95/100 as the score against that user
+
+GRD03 / U.ET
+ Select 'Download table data as'
+ This should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package)
+ The same data as in the web view should be shown, except hyperlinks to 'Show all posts by...' are removed
+ User grade 95 / 100 should shown as 95 // 100 to prevent Excel formatting as date
+
+GRD04 / U.ET
+ Click against Course administration on the left hand side
+ Click on the Grades icon/link in the now opened Course administration menu
+ This should bring up Grader report which shows all student participants
+ Student 1 should have a score of 95 for them under the forum heading whilst student 2 will have a score of 0
+ Check that the average scores shown for the forum and course are correct
+
+RGRD Retest with ratings grading type
+================================
+
+RGRD01 / admin[change]
+ Edit forum CRE01 settings so that:
+Under 'Grade' settings
+ Choose 'Average of ratings' from Grade dropdown
+- This should gray out and make the 'Grading scale' dropdown non-active
+ Select 'Allow posts to be rated' checkbox
+ Select 'Scale' 100
+ Select 'Save and display' button.
+
+RGRD02 / U.ET [change]
+ Go to forum CRE01.
+ Click against 'View posts by user'
+
+RGRD03 / U.ET
+ This should bring up a screen entitled User posts
+ It should show the student user
+ The number of Discussions started by that user
+ The number of Replies to posts
+ Under Grade only grading information should be shown, not a dropdown to update the grades.
+
+RGD Retest with grading disabled
+================================
+
+ RGD01 / admin[change]
+ Edit forum CRE01 settings so that:
+Under 'Grade' settings
+Choose 'No Grades' from Grade dropdown
+- This should gray out and make the 'Grading scale' dropdown non-active
+
+ RGD02 / U.ET [change]
+ Go to forum CRE01.
+ Click against 'View posts by user'
+
+ RGD03 / U.ET
+ This should bring up a screen entitled User posts
+ It should show the student user
+ The number of Discussions started by that user
+ The number of Replies to posts
+ No grading information should be shown.
diff --git a/mod/forumng/feature/userposts/internaldoc/testcase.participation.txt b/mod/forumng/feature/userposts/internaldoc/testcase.participation.txt
new file mode 100644
index 0000000..e09d821
--- /dev/null
+++ b/mod/forumng/feature/userposts/internaldoc/testcase.participation.txt
@@ -0,0 +1,171 @@
+Testing the downloadable output
+This script describes steps to test the user participation download facility from a tutor and
+student user perspective. It is intended to cover only this single feature.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script can be used independently so long as there is an
+existing setup, such as after completing textcase.grading.txt. This script is also
+a follow on from testcase.grading and if you are testing testcase.grading
+then this script is a necessary part of that testing process and isn't independent.
+
+In order to test this feature accurately there needs to be historical data covering an extended time period.
+
+Initial setup
+=============
+
+This test case requires:
+
+An existing setup, such as after completing textcase.grading.txt.
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging warnings.
+
+ERE Existing forums and data
+============================
+
+ERE01 / U.ET [change]
+  Go to forum CRE01.
+  Click against 'Participation by user'.
+
+UPD Userposts download
+======================
+
+UPD01 / U.ET
+   This should bring up a screen entitled 'User participation'.
+   It should show the student user.
+   The number of Discussions started by that user.
+   The number of Replies to posts.
+   Grades per user.
+-  Verify that the page has 2 time filter dropdowns and a button entitled 'Update'.
+-  Verify that the page has a 'Download table data as' dropdown and a 'Download' button.
+
+UPD02 / U.ET
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'User', 'Discussion', 'Replies' and 'Action' (Except hyperlinks titles are removed).
+   Close the file.
+
+UPD03 / U.ET
+   Enable time filter dates.
+   Check both Enable checkboxes.
+   Set 'From' date to today's date assuming that U.S2 has carried out some action today,
+   otherwise set the 'From' date to date you know that U.S2 carried out some actions on.
+   Leave the 'To' date set to today's date.
+   Click the 'Update' button.
+-  Verify that the data on the web page reflects those dates.
+
+UPD04 / U.ET
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'User', 'Discussion', 'Replies' and 'Action' (Except hyperlinks titles are removed).
+   Close the file.
+   Click any link that says 'Show all posts by <name>'.
+
+UPD05 / U.ET
+ -  Verify that the page has 2 time filter dropdowns and a button entitled 'Update'.
+ -  Verify that the time filter 'Enable' checkboxes are checked,
+    and the 'From' and 'To' dates are the same has the dates from the previous page.
+
+UPD06 / U.ET
+ -  Verify that the page has a 'Download table data as' form, with the single option
+   'Comma separated values text file' and 'Download' button, above the first user post.
+
+UPD07 / U.ET
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'In reply to', 'Post date', 'Post subject' and 'Post message' (Except hyperlinks titles are removed).
+   Close the file.
+
+UPD08 / U.ET
+   Disable time filter dates.
+   Uncheck both Enable checkboxes.
+   Click the 'Update' button.
+-  Verify that the data on the web page reflects all dates.
+
+UPD09 / U.ET
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'In reply to', 'Post date', 'Post subject' and 'Post message' (Except hyperlinks titles are removed).
+   Close the file.
+
+UPD10 / U.ET
+  Click on the 'Replies' column link.
+  Verify that it shows posters with the fewest number of posts first.
+
+UPD11 / U.ET
+  Click on the 'Replies' column link again.
+  Verify that it shows posters with the most number of posts first.
+
+UPD12 / U.ET
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'User', 'Discussion', 'Replies' and 'Action' (Except hyperlinks titles are removed).
+   Close the file.
+
+UPD13 / U.ET
+   Enable time filter dates.
+   Check both Enable checkboxes.
+   Set 'From' date to today's date assuming that U.S2 has carried out some action today,
+   otherwise set the 'From' date to date you know that U.S2 carried out some actions on.
+   Leave the 'To' date set to today's date.
+   Click the 'Update' button.
+-  Verify that the data on the web page reflects those dates.
+   This should reflect the user order of the 'Replies' column.
+
+UPD14 / U.ET
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'User', 'Discussion', 'Replies' and 'Action' (Except hyperlinks titles are removed).
+   Close the file.
+
+SUPD Download as student
+========================
+
+SUPD01 / U.S2 [change]
+   Go to forum CRE01 (you should be in group G2 - if continuing testing from textcase.grading.txt).
+   Click against 'My participation'.
+
+SUPD02 / U.S2
+   This opens a screen showing all posts by <name> (including replies and discussions started).
+
+SUPD03 / U.S2
+   Verify that the page has 2 time filter dropdowns and a button entitled 'Update'.
+
+SUPD04 / U.S2
+-  Verify that the page has a 'Download table data as' form, with the single option.
+   'Comma separated values text file' and 'Download' button, above the first user post.
+
+SUPD05 / U.S2
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'In reply to', 'Post date', 'Post subject' and 'Post message' (Except hyperlinks titles are removed).
+   Close the file.
+
+SUPD06 / U.S2
+   Enable time filter dates.
+   Check both Enable checkboxes.
+   Set 'From' date to today's date assuming that U.S2 has carried out some action today,
+   otherwise set the 'From' date to date you know that U.S2 carried out some actions on.
+   Leave the 'To' set to today's date.
+   Click the 'Update' button.
+-  Verify that the data on the web page reflects those dates.
+
+SUPD07 / U.S2
+   Click the 'Download' button.
+   In IE this should result in a file save dialogue - save the file and then open in Excel (or another spreadsheet package).
+-  Verify that the same data as in the web view is shown in four columns,
+   'In reply to', 'Post subject' and 'Post message' (Except hyperlinks titles are removed).
+   Close the file.
+
+Test complete
+=============
+
+To accurately test the date filter functionality it is necessary to test against historical data
diff --git a/mod/forumng/feature/userposts/internaldoc/testcase.rating.txt b/mod/forumng/feature/userposts/internaldoc/testcase.rating.txt
new file mode 100644
index 0000000..81a5fae
--- /dev/null
+++ b/mod/forumng/feature/userposts/internaldoc/testcase.rating.txt
@@ -0,0 +1,147 @@
+This script describes steps to test the userposts facility from a user
+perspective. It is intended to cover mainly the use of the 'Posts rated by others@ display option.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script follow on from each other and aren't independent.
+
+Initial setup
+=============
+
+This test case requires:
+
+- a course
+- one test course enrolled student user (U.S1).
+- one editing teacher with manager role on course (U.ET)
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+
+CRE Creating forums and data
+============================
+
+CRE01 / admin
+  In your test course, create a forum called CRE01
+  Edit forum settings so that:
+  Under 'Ratings' settings
+  Choose 'Ratings (standard)' from 'Allow posts to be rated' dropdown
+  Set 'Type' to 'Point'
+  Set 'Maximum points' to 10
+  Click on 'Save and display' submit button
+
+CRE02 / admin
+  Go into the forum you have just created and start 3 separate discussions (Disc1, Disc2 and Disc3) with message
+
+
+UP Userposts
+============
+
+UP01 / U.S1 [change]
+  Go to forum CRE01.
+  Reply to start discussion post Disc1 created by admin user
+
+UP02 / U.S1
+  Go to forum CRE01.
+  Reply to start discussion post Disc2 created by admin user
+
+
+RP Rate posts
+=============
+
+RP01 / U.ET [change]
+  Go to forum CRE01.
+  Follow Disc1 discussion
+  Expand all posts
+  Rate reply by student (S1) by means of the 'Rate...' select drop down menu (choose value = 9)
+  It should now show the Average of ratings for that post is equal to 9.
+
+
+VP View posts
+=============
+
+  VP01 / U.ET
+  Go to forum CRE01.
+  Click 'Participation by user'
+  Follow 'Show all posts by S1.." link
+  You should see 'From' and 'To' dates set to today's date
+  You should see 'Posts rated by others' is unchecked
+  You should see 2 post replies by S1 (one only rated with a value of 9)
+
+  Tick 'Posts rated by others' checkbox and click 'Update'
+  Now only the post reply to Disc1 with the rating (9) should be displayed
+  You should see also see 'From' and 'To' dates unchanged at today's date
+
+  Enable the date selectors and change both the 'From' and 'To' dates to dates in the past
+  e.g. 1 January 2015 to 10 February 2015 and click 'Update'
+  You should see 'Posts rated by others' is still checked
+  You should see "No posts by S1"
+  You should now not see any posts
+
+  Uncheck 'Posts rated by others' checkbox and click 'Update'
+  The dates should remain the same
+  You should not see any posts
+
+
+RD Rating disabled / enabled
+============================
+
+  RD01 / U.ET
+  Go to forum CRE01.
+  Follow 'Edit settings' link for ForumNG
+  Choose 'No ratings' from 'Allow posts to be rated' dropdown
+  Click 'Save and display'
+  Click 'Participation by user'
+  Follow 'Show all posts by S1.." link
+  Confirm the 'Posts rated by others' label and checkbox is not visible
+  You should see both replies from S1.
+  No tabs ('User posts', 'Posts user rated', 'My posts', 'Posts I rated') should be visible
+
+  RD02 / U.ET
+  Follow 'Edit settings' link for ForumNG
+  Edit forum settings so that:
+  Under 'Ratings' settings
+  Choose 'Ratings (standard)' from 'Allow posts to be rated' dropdown
+  Set 'Maximum points' to 10
+  Click on 'Save and display' submit button
+  Click 'Participation by user'
+  Follow 'Show all posts by S1.." link
+  Confirm the 'Posts rated by others' label and checkbox is visible
+  You should see both replies from S1.
+  You should see 'User posts' tab (current) and 'Posts user rated' tab
+
+  Click on 'Posts user rated' tab
+  You should see 'From' and 'To' dates set to today's date
+  You should see 'Posts rated from' and 'Posts rated to' dates set to today's date
+  You should see "No posts rated by S1"
+
+
+  RT Rating tabs specific
+  =======================
+
+  RT01 / admin [change]
+  Follow ForumNG administration / Permissions
+  Choose 'Student' from the 'Advanced role override' dropdown
+  Type 'forumng:rate' into filter text box
+  Select the 'Allow' radio button
+  Press 'Save changes'
+
+  RT02 / U.S1 [change]
+  Go to forum CRE01.
+  Go to Disc3
+  Rate the Admin user post at '5' by means of the drop down box
+  Go back to the forum CRE01
+  Click the 'My participation' button
+  You should see the 'My posts' tab (selected) and the 'Posts I rated' tab
+  You should see 'From' and 'To' dates set to today's date
+  You should see 'Posts rated by others' is unchecked
+  You should see 2 post replies by S1 (one only rated with a value of 9)
+
+  Click on 'Posts I rated' tab
+  You should see 'From' and 'To' dates set to today's date
+  You should see 'Posts rated from' and 'Posts rated to' dates set to today's date
+  You should see 1 post by Admin user with a rating of 5
+  Click on 'Download' button
+  You should see a csv file created.
+  Open the csv file and it should show the post date, subject and message matching the webpage.
diff --git a/mod/forumng/feature/userposts/internaldoc/testcase.userposts.txt b/mod/forumng/feature/userposts/internaldoc/testcase.userposts.txt
new file mode 100644
index 0000000..dd0d0a8
--- /dev/null
+++ b/mod/forumng/feature/userposts/internaldoc/testcase.userposts.txt
@@ -0,0 +1,80 @@
+This script describes steps to test the participation facility from a user
+perspective. It is intended to cover most of the UI and features.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script follow on from each other and aren't independent.
+
+Initial setup
+=============
+
+This test case requires:
+
+- a course which has at least two groups defined (G1 and G2).
+- two test student users (U.S1, who is in group G1, and U.S2, in group G2).
+- one editing teacher (U.ET)
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+The completion system must be enabled for (a) the site, and (b) the test
+course.
+
+CRE Creating forums and data
+============================
+
+CRE01 / admin
+  In your test course, create a forum called CRE01
+  Edit forum settings so that:
+  Under 'Grade' settings
+  Choose 'Teacher grades student' from Grade dropdown
+  Set 'Grading scale' to 100
+
+  Under 'Common module' settings
+  Choose 'Seperate groups' from Group mode
+  Leave 'Grouping' set to 'None'
+  Leave 'Visible' to 'Show'
+
+  Click on Save and display submit button
+
+CRE02 / admin
+  Go into the forum you have just created and start a seperate discussion for each group
+  For each discussion create a post
+
+CRE03 / U.S1 [change]
+  Go to forum CRE01 (you should be in group G1).
+  Reply to start discussion post created by admin user
+
+CRE04 / U.S2 [change]
+  Go to forum CRE01 (you should be in group G2).
+  Reply to start discussion post created by admin user
+
+CRE04 / U.ET [change]
+  Go to forum CRE01.
+  Click against 'Participation by user', formerly labled 'View posts by user'.
+
+UP Userposts
+===========
+
+UP01 / U.ET
+ This should bring up a screen entitled User posts
+ It should show the student user
+ The number of Discussions started by that user
+ The number of Replies to posts
+ Grades per user,
+ Click on the link that says 'Show all posts by <name>'
+
+UPD02 / U.ET
+ This takes you to a screen showing all posts by that user (including replies and discussions stated)
+
+SUP Retest with student userposts
+=================================
+
+SUP01 / U.S2 [change]
+  Go to forum CRE01 (you should be in group G2).
+  Click against 'My participation', formerly 'View own posts'.
+
+SUP02 / U.S2
+============
+ This takes you to a screen showing all posts by U.S2 (including replies and discussions stated)
diff --git a/mod/forumng/feature/userposts/internaldoc/testcase.userratings.txt b/mod/forumng/feature/userposts/internaldoc/testcase.userratings.txt
new file mode 100644
index 0000000..d3fc1ae
--- /dev/null
+++ b/mod/forumng/feature/userposts/internaldoc/testcase.userratings.txt
@@ -0,0 +1,149 @@
+This script describes steps to test the Show user ratings facility in the participation by user screen facility from a user
+perspective. It is intended to cover most of the UI and features.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script follow on from each other and aren't independent.
+
+Initial setup
+=============
+
+This test case requires:
+
+- a course.
+- two test student users (U.S1 and U.S2, both enrolled in the course).
+- one editing teacher (U.ET)
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+The completion system must be enabled for (a) the site, and (b) the test
+course.
+
+CRE Creating forums and data
+============================
+
+CRE01 / admin
+  In your test course, create a forum called CRE01
+  Edit forum settings so that:
+  Under 'Ratings' settings
+  Choose 'Ratings (standard)' from Allow posts to be rated dropdown
+  Set 'Maximum points' to 10
+
+  Under 'Common module' settings
+  Leave 'Visible' to 'Show'
+
+  Click on Save and display submit button
+
+CRE02 / admin
+  Go into the forum you have just created and start 2 seperate discussions
+  For each discussion create a post
+
+CRE03 / U.S1 [change]
+  Go to forum CRE01
+  Reply to start discussion 1 post created by admin user
+  Reply to start discussion 2 post created by admin user
+
+CRE04 / U.S2 [change]
+  Go to forum CRE01
+  Reply to start discussion 2 post created by admin user
+
+CRE04 / U.ET [change]
+  Go to forum CRE01.
+  Click against 'Participation by user'
+  You should see the number of Discussions started and the number of Replies for both users (U.S1 and U.S2) as well as
+  a value of 0.0 for both users for Average rating
+
+
+UR Userpost ratings
+===================
+
+UR01 / U.ET
+  Go to forum CRE01
+  Go to the first discussion
+  Rate the reply by U.S1 with a value of 9
+  Return to the forum
+  Go to the second discussion
+  Rate the reply by U.S1 with a value of 6
+  Return to the forum
+  Click against 'Participation by user'
+
+  You should now see an average rating value for U.S1 of 7.5
+
+
+UD Downloading ratings and Date selector
+========================================
+
+UD01 / U.ET
+  Click against 'Download'.
+  You should be able to open the downloaded file using excel
+  The file should contain corresponding values to the screen.
+  Close the file
+
+  Check both the enable checkboxes for 'From' and 'To'
+  Click against 'Update'
+  The detail should not change
+
+  Change the 'From' and 'To' dates to cover a period exclusively from last week
+  Click against 'Update'
+  You should see values of 0 Discussions and 0 Replies and no Average rating displayed at all for both users
+  Click against 'Download'.
+  The file should contain corresponding values to the screen.
+  Close the file
+
+
+US Sorting
+========================================
+
+US01 / U.ET
+  Uncheck both the enable checkboxes for 'From' and 'To'
+  Click against 'Update'
+  Check Clicking on column headings 'User', 'Replies' and 'Average rating' reverses the display order
+
+
+ UM Module settings
+========================================
+
+UM01 / U.ET
+  Follow the 'Edit settings' link in the forum administration menu
+  Edit forum settings so that:
+  Under 'Grade' settings
+  Choose 'Count of ratings' from Grade dropdown
+  Click on Save and display submit button
+  Click against 'Participation by user'
+  You should see that U.S1 has a grade of 2.0 and U.S2 has a grade of 0.0
+  Confirm sorting by all except Discussions works.
+  Confirm 'Download' reflects the view.
+  Check both the enable checkboxes for 'From' and 'To'
+  Change the 'From' and 'To' dates to cover a period exclusively from last week
+  Click against 'Update'
+  All values displayed should be either 0 or null
+  Confirm 'Download' reflects the view.
+
+  Follow the 'Edit settings' link in the forum administration menu
+  Edit forum settings so that:
+  Under 'Ratings' settings
+  Choose 'No ratings' from Allow posts to be rated dropdown
+  Under 'Grade' settings'
+  Choose 'Teacher grades students' from Grade dropdown
+  Choose 'Point' from Grading scale / Type dropdown
+  Type in '5' into the 'Maximum points' field
+  Click on Save and display submit button
+  Click against 'Participation by user'
+  Assign a grade to US01 using the Grade dropdown
+  Click on Save grades submit button
+  Reload the page and you should still see the grade you assigned.
+
+  Follow the 'Edit settings' link in the forum administration menu
+  Edit forum settings so that:
+  Under 'Ratings' settings
+  Choose 'Ratings (standard)' from Allow posts to be rated dropdown
+  Choose 'Point' from Scale / Type dropdown
+  Type in '10' into the 'Maximum points' field
+  Click on Save and display submit button
+  Click against 'Participation by user'
+  You should see the following values for U.S1:
+  Grade 3/5 and Average rating 7.5
+  You should see the following values for U.S2:
+  Grade 'No grade' and Average rating 0.0
diff --git a/mod/forumng/feature/userposts/internaldoc/userposts.txt b/mod/forumng/feature/userposts/internaldoc/userposts.txt
new file mode 100644
index 0000000..967763b
--- /dev/null
+++ b/mod/forumng/feature/userposts/internaldoc/userposts.txt
@@ -0,0 +1,37 @@
+== OU ForumNG Userposts Feature ==
+
+=== Description ===
+
+Display user participation within forumNG.
+
+Participation is defined as:
+
+* discussions created
+* posts replied to
+
+=== Capability requirements ===
+
+A user will be considered as participating in a forum if they have the capability to create a discussion and reply to a post within
+the context of the current forum instance and are not considered an adminstrator
+by standard Moodle legacy roles and capabilities.
+
+A user who  has access to the current forum can view all user participation, subject to the groupmode settings and their membership
+of those groups. (A user who has the capability '''moodle/site:accessallgroups''' will be able to see all groups regardless of
+personal membership).
+
+=== Userposts page display ===
+
+For Admin and non-students
+
+From the foum page the button to access the grading screens is 'Participation by user', formerly labled 'View posts by user'
+which takes you to the user list screen.
+
+To view an individual user's participation click on the link 'Show all posts by <name>'. This will take you to a screen containing
+that user's posts including replies and any discussion start posts if they started a discussion.
+
+
+For Students
+
+From the foum page the button to access the grading screens is  'My participation', formerly 'View own posts'
+which takes you to the user screen containing that user's posts including replies
+and any discussion start posts if they started a discussion.
diff --git a/mod/forumng/feature/userposts/lang/en/forumngfeature_userposts.php b/mod/forumng/feature/userposts/lang/en/forumngfeature_userposts.php
new file mode 100644
index 0000000..d26280f
--- /dev/null
+++ b/mod/forumng/feature/userposts/lang/en/forumngfeature_userposts.php
@@ -0,0 +1,64 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['event:viewed'] = 'View participation';
+$string['viewpostsbyuser'] = 'Participation by user';
+$string['userposts'] = 'User participation';
+$string['showallpostsby'] = 'Show all posts by {$a}';
+$string['allpostsby'] = 'All posts by: {$a}';
+$string['notforsharedforum'] = 'Not supported for shared forums';
+$string['replyin'] = 'Reply in discussion: {$a}';
+$string['userposts:view'] = 'View list of posts by user';
+$string['pluginname'] = 'View posts by user';
+$string['action'] = 'Action';
+$string['viewownposts'] = 'My participation';
+$string['nopostsby'] = 'No posts by {$a}';
+$string['nopostsratedby'] = 'No posts rated by {$a}';
+
+// User participation.
+$string['savegrades'] = 'Save grades';
+$string['usergrade'] = 'User grade';
+$string['gradesupdated'] = 'Grades updated';
+$string['avgrating'] = 'Average rating';
+$string['totrating'] = 'Total ratings';
+
+$string['start'] = 'From';
+$string['end'] = 'To';
+$string['displayperiod'] = 'Contribution selector From date - To date.';
+$string['displayperiod_help'] = '<p>The default selects all entries.</p>
+<p>You can select \'From\' a date until today\'s entries.</p>
+<p>You can select all entries between a \'From\' date and a \'To\' date.</p>
+<p>Or you can select from the first entry \'To\' a date</p>';
+$string['timestartenderror'] = 'Selection end date cannot be earlier than the start date';
+$string['timefilter_submit'] = 'Update';
+$string['ratedposts'] = 'Posts rated by others';
+$string['ratedposts_help'] = 'Show only posts that have been rated by others';
+$string['ratedstart'] = 'Post rated from';
+$string['ratedend'] = 'Post rated to';
+$string['ratedtimestartenderror'] = 'Post rated end date cannot be earlier than the start date';
+$string['userpoststitle'] = 'User posts';
+$string['postsuserratedtitle'] = 'Posts user rated';
+$string['mypoststitle'] = 'My posts';
+$string['postsiratedtitle'] = 'Posts I rated';
+$string['posttitle'] = 'Post';
+$string['ratingtitle'] = 'Rating';
diff --git a/mod/forumng/feature/userposts/lang/es/forumngfeature_userposts.php b/mod/forumng/feature/userposts/lang/es/forumngfeature_userposts.php
new file mode 100644
index 0000000..e0325bc
--- /dev/null
+++ b/mod/forumng/feature/userposts/lang/es/forumngfeature_userposts.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['viewpostsbyuser'] = 'Participación por usuario';
+$string['userposts'] = 'Participación del usuario';
+$string['showallpostsby'] = 'Ver todas las entradas de {$a}';
+$string['allpostsby'] = 'Todas las entradas de: {$a}';
+$string['notforsharedforum'] = 'No soportado para foros compartidos';
+$string['replyin'] = 'Respuesta en tema: {$a}';
+$string['userposts:view'] = 'Ver lista de entradas por usuario';
+$string['pluginname'] = 'Ver entradas por usuario';
+$string['action'] = 'Acción';
+$string['viewownposts'] = 'Mis entradas';
+$string['nopostsby'] = 'No hay entradas de {$a}';
+
+// User participation.
+$string['savegrades'] = 'Guardar calificaciones';
+$string['usergrade'] = 'Calificación del usuario';
+$string['gradesupdated'] = 'Calificaciones actualizadas';
diff --git a/mod/forumng/feature/userposts/lang/fr/forumngfeature_userposts.php b/mod/forumng/feature/userposts/lang/fr/forumngfeature_userposts.php
new file mode 100644
index 0000000..add3aa7
--- /dev/null
+++ b/mod/forumng/feature/userposts/lang/fr/forumngfeature_userposts.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['viewpostsbyuser'] = 'Afficher les messages par utilisateur';
+$string['userposts'] = 'Messages de l\'utilisateur';
+$string['showallpostsby'] = 'Afficher tous les messages de {$a}';
+$string['allpostsby'] = 'Tous les message de : {$a}';
+$string['notforsharedforum'] = 'Non pris en charge pour les forums partagés';
+$string['replyin'] = 'Réponse à la discussion : {$a}';
+$string['userposts:view'] = 'Afficher la liste des messages de l\'utilisateur';
+$string['pluginname'] = 'Affichage des messages par utilisateur';
+$string['action'] = 'Action';
+$string['viewownposts'] = 'Mes messages';
+$string['nopostsby'] = 'Aucun message de {$a}';
+
+// User participation.
+$string['savegrades'] = 'Enregistrer les évaluations';
+$string['usergrade'] = 'Evaluation de l\'utilisateur';
+$string['gradesupdated'] = 'Evaluations mises à jour';
diff --git a/mod/forumng/feature/userposts/lang/he/forumngfeature_userposts.php b/mod/forumng/feature/userposts/lang/he/forumngfeature_userposts.php
new file mode 100644
index 0000000..8b940d1
--- /dev/null
+++ b/mod/forumng/feature/userposts/lang/he/forumngfeature_userposts.php
@@ -0,0 +1,37 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['viewpostsbyuser'] = 'צפיה בפרסומים לפי משתמש';
+$string['userposts'] = 'פרסומי משתמש';
+$string['showallpostsby'] = 'צפיה בכל הפרסומים של {$a}';
+$string['allpostsby'] = 'כל הפרסומים של: {$a}';
+$string['notforsharedforum'] = 'לא זמין לפורומים משותפים';
+$string['replyin'] = 'תגובה בדיון: {$a}';
+$string['userposts:view'] = 'צפיה ברשימת פרסומים של משתמש';
+$string['pluginname'] = 'צפיה בפרסומי משתמש';
+$string['action'] = 'פעולה';
+
+// User participation.
+$string['savegrades'] = 'שמירת ציונים';
+$string['usergrade'] = 'ציוני משתמש';
+$string['gradesupdated'] = 'הציונים עודכנו';
diff --git a/mod/forumng/feature/userposts/list.php b/mod/forumng/feature/userposts/list.php
new file mode 100644
index 0000000..1c047a2
--- /dev/null
+++ b/mod/forumng/feature/userposts/list.php
@@ -0,0 +1,532 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This page (list.php) lists the users with in alphabetical order of their
+ * last-name with number of discussions and replies. If there are any
+ * discussions and/or replies a link is printed for displaying all the posts
+ * from that a given user depending on chosen group
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/userposts/locallib.php');
+require_once($CFG->dirroot . '/lib/gradelib.php');
+require_once($CFG->libdir . '/tablelib.php');
+
+global $OUTPUT;
+
+$cmid = required_param('id', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$page = optional_param('page', 0, PARAM_INT);
+$download   = optional_param('download', '', PARAM_TEXT);
+$pageparams = array('id' => $cmid, 'page' => $page);
+$perpage = 100;
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+$context = $forum->get_context();
+if ($forum->is_shared() || $forum->is_clone()) {
+    throw new moodle_exception('notforsharedforum', 'forumngfeature_userposts');
+}
+
+// Check forum access (using forum group, if required).
+$groupid = mod_forumng::get_activity_group($cm, true);
+if ($groupid != mod_forumng::NO_GROUPS && $groupid != mod_forumng::ALL_GROUPS) {
+    $pageparams['group'] = $groupid;
+}
+
+// Check access.
+$forum->require_view($groupid);
+require_capability('forumngfeature/userposts:view', $forum->get_context());
+$viewgrade = has_capability('mod/forumng:grade', $context) && $forum->get_grading() != mod_forumng::GRADING_NONE;
+$cangrade = $forum->can_grade();
+
+// Print page header.
+$thisurl = new moodle_url('/mod/forumng/feature/userposts/list.php', $pageparams);
+$out = $forum->init_page($thisurl, get_string('userposts', 'forumngfeature_userposts'));
+
+// Setup the table layout.
+$userstr = get_string('user');
+$discussions = get_string('discussions', 'forumng');
+$replies = get_string('replies', 'forumng');
+$action = get_string('action', 'forumngfeature_userposts');
+if (empty($download)) {
+    $action = "<span class='accesshide'>$action</span>";
+}
+$grade = '';
+if ($viewgrade) {
+    $grade = get_string('grade', 'forumng');
+}
+
+$timeparts = getdate($course->startdate);
+// Create time filter options form.
+$customdata = array(
+        'options' => array(),
+        'cmid' => $cmid,
+        'group' => $groupid,
+        'download' => $download,
+        'startyear' => $timeparts['year'],
+        'params' => array()
+);
+$timefilter = new forumng_participation_table_form(null, $customdata);
+
+$start = $end = 0;
+// If data has been received from this form.
+if ($submitted = $timefilter->get_data()) {
+    if ($submitted->start) {
+        $start = strtotime('00:00:00', $submitted->start);
+    }
+    if ($submitted->end) {
+        $end = strtotime('23:59:59', $submitted->end);
+    }
+} else if (!$timefilter->is_submitted()) {
+    // Recieved via post back.
+    if ($start = optional_param('start', null, PARAM_INT)) {
+        $start = strtotime('00:00:00', $start);
+    }
+    if ($end = optional_param('end', null, PARAM_INT)) {
+        $end = strtotime('23:59:59', $end);
+    }
+}
+
+// Add collected start and end UNIX formated dates to moodle url.
+$thisurl->param('start', $start);
+$thisurl->param('end', $end);
+
+$sort = '';
+$ptable = new flexible_table('mod-forumng-participation');
+$ptable->set_attribute('class', 'flexible generaltable');
+$ptable->set_attribute('width', '100%');
+$c5value = 'c5';
+$newheader = '';
+if ((has_capability('mod/forumng:viewanyrating', $context)) &&
+        ($forum->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING)) {
+    if ($forum->get_grading() == mod_forumng::GRADING_MANUAL) {
+        if ($forum->get_rating_scale() > 0) {
+            $newheader = get_string('avgrating', 'forumngfeature_userposts');
+        } else if ($forum->get_rating_scale() < 0) {
+            $newheader = get_string('totrating', 'forumngfeature_userposts');;
+        }
+    } else if ($forum->get_grading() == mod_forumng::GRADING_NONE) {
+        if ($forum->get_rating_scale() > 0) {
+            $grade = get_string('avgrating', 'forumngfeature_userposts');
+            $c5value = 'ratingcol';
+        } else if ($forum->get_rating_scale() < 0) {
+            $grade = get_string('totrating', 'forumngfeature_userposts');
+            $c5value = 'ratingcol';
+        }
+    }
+}
+if ($newheader == '') {
+    $columnsarray = array('c1', 'numdiscussions', 'numposts', 'c4', $c5value);
+    $headersarray = array($userstr, $discussions, $replies, $action, $grade);
+} else {
+    $columnsarray = array('c1', 'numdiscussions', 'numposts', 'c4', $c5value, 'ratingcol');
+    $headersarray = array($userstr, $discussions, $replies, $action, $grade, $newheader);
+}
+$ptable->define_columns($columnsarray);
+$ptable->define_headers($headersarray);
+$ptable->define_baseurl($thisurl);
+$ptable->sortable(true);
+$ptable->maxsortkeys = 1;
+$ptable->no_sorting('c4');
+$ptable->no_sorting('c5');
+$ptable->setup();
+$sort = flexible_table::get_sort_for_table('mod-forumng-participation');
+
+if (empty($sort)) {
+    $sort = 'c1 ASC';
+}
+
+// Need to check whether sort refers to column 'c1' and if it does get correct sql sort statement.
+$orderbyuser = stristr($sort, 'c1');
+
+$filename = "$course->shortname-".format_string($forum->get_name(), true);
+if ($groupid != -1 && !empty($download)) {
+    $groupname = $DB->get_field('groups', 'name', array('id' => $groupid));
+    $filename .= '-'.format_string($groupname, true);
+}
+$ptable->is_downloading($download, $filename, get_string('userposts', 'forumngfeature_userposts'));
+
+if (!$ptable->is_downloading()) {
+    $offset = $page * $perpage;
+} else {
+    // Always export all users.
+    $offset = 0;
+    $perpage = 0;
+}
+
+// Get users posts parameters.
+$params["fd_forumngid1"] = $forum->get_id();
+list($userwhere1, $userparams1) = get_all_user_post_counts_sql($groupid, false, $start, $end, '1');
+$params = array_merge($params, $userparams1);
+
+$params["fd_forumngid2"] = $forum->get_id();
+list($userwhere2, $userparams2) = get_all_user_post_counts_sql($groupid, false, $start, $end, '2');
+$params = array_merge($params, $userparams2);
+
+$params["fd_forumngid3"] = $forum->get_id();
+list($userwhere3, $userparams3) = get_all_user_post_counts_sql($groupid, false, $start, $end, '3');
+$params = array_merge($params, $userparams3);
+
+list($esql, $esqlparams) = get_enrolled_sql($context, '', $groupid > 0 ? $groupid : 0, false);
+$params = array_merge($params, $esqlparams);
+
+$userfields = user_picture::fields('u', array('username'));
+if ($newheader == 'Average rating' || $grade == 'Average rating' ) {
+    $sqlfunction = 'AVG';
+} else {
+    $sqlfunction = 'COUNT';
+}
+
+$sql = "SELECT $userfields, COALESCE(ta.numposts, 0) AS numposts, COALESCE(td.numdiscussions, 0) AS numdiscussions,
+        COALESCE(tr.ratingval, 0) AS ratingcol
+          FROM {user} u
+     LEFT JOIN (
+          SELECT fp.userid, COUNT(fp.userid) AS numposts
+            FROM {forumng_posts} fp
+      INNER JOIN {forumng_discussions} fd ON
+                 fd.id = fp.discussionid
+                 AND fd.postid <> fp.id
+           WHERE
+                 $userwhere1
+        GROUP BY (fp.userid)) ta
+            ON u.id = ta.userid
+
+     LEFT JOIN (
+          SELECT fp.userid, COUNT(fp.userid) AS numdiscussions
+            FROM {forumng_posts} fp
+      INNER JOIN {forumng_discussions} fd ON
+                 fd.postid = fp.id
+           WHERE
+                 $userwhere2
+        GROUP BY (fp.userid)) td
+            ON u.id = td.userid
+
+      LEFT JOIN (
+          SELECT fp.userid, $sqlfunction(ra.rating) AS ratingval
+            FROM {rating} ra
+       INNER JOIN {forumng_posts} fp ON
+                  fp.id = ra.itemid
+        LEFT JOIN {forumng_discussions} fd ON
+                  fd.id = fp.discussionid
+            WHERE  $userwhere3 AND ra.component = 'mod_forumng' AND ra.ratingarea = 'post' AND contextid = {$context->id}
+         GROUP BY (fp.userid)) tr
+             ON u.id = tr.userid
+
+          WHERE u.id IN ($esql)";
+
+if (!$orderbyuser) {
+    $sql = "$sql ORDER BY $sort";
+} else {
+    list($usort, $sortparams) = users_order_by_sql('u');
+    // Need to check on sort order.
+    $sortorder = stristr($sort, 'ASC');
+    if (!$sortorder) {
+        // Sort order defaults to ASC.
+        $sortorder = 'DESC';
+    }
+    // Split usort into it relevant parts and add in sortorder.
+    $usersort = str_replace(',', ' '.$sortorder.',', $usort);
+    $usersort .= ' ' . $sortorder;
+    $sql = "$sql ORDER BY $usersort";
+}
+
+// Need to do the sql.
+global $DB;
+$users = $DB->get_records_sql($sql, $params, $offset, $perpage);
+
+if (!$ptable->is_downloading()) {
+    // We may have more users as limited to $perpage, so work out how many.
+    list($esql, $params) = get_enrolled_sql($context, '', $groupid > 0 ? $groupid : 0);
+    $sql = "SELECT count(1) as count
+              FROM {user} u
+              JOIN ($esql) je ON je.id = u.id
+             WHERE u.deleted = 0";
+    $total = $DB->count_records_sql($sql, $params);
+    $ptable->pagesize($perpage, $total);
+}
+
+if (empty($download)) {
+    print $out->header();
+
+    // Display group selector if required.
+    groups_print_activity_menu($cm, $CFG->wwwroot . '/mod/forumng/feature/userposts/list.php?' .
+            $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+
+    print '<div class="clearer"></div>';
+
+    // Get all users.
+    if (!$users) {
+        // No users, print info and stop.
+        print_string('nothingtodisplay', 'forumng');
+
+        // Display link to the discussion.
+        print link_arrow_left($forum->get_name(), '../../view.php?id=' . $cmid);
+
+        // Display footer.
+        print $out->footer();
+        return;
+    }
+}
+
+// Is grading enabled and available for the current user?
+$grades = array();
+if ($viewgrade) {
+    $grades = grade_get_grades($course->id, 'mod', 'forumng',
+            $forum->get_id(), array_keys($users));
+    $maxgrade = $forum->get_grading() == mod_forumng::GRADING_MANUAL ?
+            $forum->get_grading_scale() : $forum->get_rating_scale();
+    $scaleopts = make_grades_menu($maxgrade);
+}
+
+$data = array();
+foreach ($users as $id => $u) {
+    $row = array();
+    $picture = $OUTPUT->user_picture($u, array('courseid' => $course->id));
+    $username = fullname($u);
+    $userurl = new moodle_url('/user/view.php?',
+            array('id' => $id, 'course' => $course->id));
+    $userdetails = html_writer::link($userurl, $username);
+
+    $username .= $CFG->forumng_showusername ? ' (' . $u->username . ')' : '';
+    $showallpostsby = null;
+    // Number of discussions.
+    if (!isset($u->numdiscussions)) {
+        $u->numdiscussions = 0;
+    }
+    // Number of replies/posts.
+    if (!isset($u->numposts)) {
+        $u->numposts = 0;
+    }
+
+    $span = '';
+    $postspan = '';
+    if (($u->numdiscussions || $u->numposts) && empty($download)) {
+        $showallpostsby = get_string('showallpostsby', 'forumngfeature_userposts', $username);
+
+        // Build url and the params.
+        $url = $CFG->wwwroot .
+                "/mod/forumng/feature/userposts/user.php?" .
+                $forum->get_link_params(mod_forumng::PARAM_HTML) .
+                '&amp;user=' . $id;
+        if ($start) {
+            $url .= '&amp;start=' . $start;
+        }
+        if ($end) {
+            $url .= '&amp;end=' . $end;
+        }
+        if ($groupid != mod_forumng::NO_GROUPS) {
+            $url .= '&amp;group=' . (int)$groupid;
+        }
+        $showallpostsby = "<a href='$url'>$showallpostsby</a>";
+        // Has posts and in web view, so make row 'active'.
+        $span = html_writer::start_tag('div', array('class' => 'active'));
+        $postspan = html_writer::end_tag('div');
+    }
+
+    $rows[0] = '';
+    if (empty($download)) {
+        $row[0] = $span . $picture . '&nbsp;' . $userdetails . $postspan;
+    } else {
+        $row[0] = $span . $username . $postspan;
+    }
+    $row[1] = $span . $u->numdiscussions . $postspan;
+    $row[2] = $span . $u->numposts . $postspan;
+    $row[3] = $showallpostsby;
+
+    // Grades for all users regardless of whether they have participated or not.
+    $gradeitem = '';
+
+    if ($grades) {
+        $user = new stdClass();
+        $attributes = array();
+        if (!isset($grades->items[0]->grades[$id]->grade)) {
+            $user->grade = -1;
+        } else {
+            $user->grade = $grades->items[0]->grades[$id]->grade;
+            $user->grade = abs($user->grade);
+        }
+        if (empty($download) && $cangrade) {
+            $menu = html_writer::select($scaleopts,
+                    'menu[' . $id . ']', $user->grade,
+                    array(-1 => get_string('nograde')), $attributes);
+            $gradeitem  = html_writer::tag('div', $menu, array('id' => 'gradeuser' . $id . ''));
+        } else {
+            if ($user->grade != -1 && isset($scaleopts[$user->grade])) {
+                $gradeitem = $scaleopts[$user->grade];
+                // Only whole numbers in scaleopts so check if dec point and manually add info.
+                if (floor($user->grade) != $user->grade &&
+                        !empty($grades->items[0]->grades[$id]->str_long_grade)) {
+                    $gradeitem = $grades->items[0]->grades[$id]->str_long_grade;
+                }
+                if (!empty($download)) {
+                    $gradeitem = str_replace('/', '//', $gradeitem);// Fix in excel.
+                }
+            } else {
+                $gradeitem = get_string('nograde');
+            }
+        }
+    }
+
+    $row[4] = $span . $gradeitem . $postspan;
+
+    if (($forum->get_enableratings() != mod_forumng::FORUMNG_NO_RATING) || (($forum->get_grading() != mod_forumng::GRADING_NONE) &&
+            ($forum->get_grading() != mod_forumng::GRADING_MANUAL))) {
+        $numberparamvalue = 1;
+        if ($newheader == get_string('totrating', 'forumngfeature_userposts') ||
+                $grade == get_string('totrating', 'forumngfeature_userposts')) {
+            $numberparamvalue = 0;
+        }
+        if ($newheader == '') {
+            if ($u->numdiscussions > 0 || $u->numposts > 0) {
+                $row[4] = $span . number_format($u->ratingcol, $numberparamvalue) . $postspan;
+            } else {
+                $row[4] = $span . ' ' . $postspan;
+            }
+        } else {
+            if ($u->numdiscussions > 0 || $u->numposts > 0) {
+                $row[5] = $span . number_format($u->ratingcol, $numberparamvalue) . $postspan;
+            } else {
+                $row[5] = $span . ' ' . $postspan;
+            }
+        }
+    }
+    $data[] = $row;
+}
+
+if (empty($download)) {
+    // Display heading.
+    print $out->heading(get_string('userposts', 'forumngfeature_userposts'));
+
+    if ($start || $end) {
+        $timefilter->set_data(array('start' => $start, 'end' => $end));
+    }
+    // Display time filter options form.
+    $timefilter->display();
+    echo $ptable->download_buttons();
+    // Print out participation form.
+    if ($cangrade) {
+        print forumngfeature_userposts_grade_form_header($cmid, $groupid);
+    }
+}
+$ptable->downloadable = false;
+
+foreach ($data as $record) {
+    $ptable->add_data($record);
+}
+$ptable->finish_output();
+
+// Print out grade form footer.
+if ($cangrade && empty($download)) {
+    print forumngfeature_userposts_grade_form_footer();
+}
+if (empty($download)) {
+    // Display link to the discussion.
+    $url = '../../view.php?id=' . $cmid;
+    print link_arrow_left($forum->get_name(), $url);
+
+    // Display footer.
+    print $out->footer();
+
+    $params = array(
+            'context' => $forum->get_context(),
+            'objectid' => $forum->get_id(),
+            'other' => array('url' => 'list.php?' . $thisurl->get_query_string(false))
+    );
+
+    $event = \forumngfeature_userposts\event\participation_viewed::create($params);
+    $event->add_record_snapshot('course_modules', $forum->get_course_module());
+    $event->add_record_snapshot('course', $forum->get_course());
+    $event->trigger();
+}
+/**
+ * Creates save grades form tag and relevant hidden id tags.
+ * @param int $cmid course module id.
+ * @param int $groupid group id.
+ * @return string
+ */
+function forumngfeature_userposts_grade_form_header($cmid, $groupid) {
+    global $USER;
+    $formattrs = array();
+    $formattrs['action'] = new moodle_url('/mod/forumng/feature/userposts/savegrades.php');
+    $formattrs['id'] = 'savegrades';
+    $formattrs['method'] = 'post';
+    $formattrs['class'] = 'savegradeform';
+    $output = html_writer::start_tag('form', $formattrs);
+    $output .= html_writer::start_tag('div');
+    $output .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'id',
+            'value' => $cmid));
+    $output .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'group',
+            'value' => $groupid));
+    $output .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'sesskey',
+            'value' => $USER->sesskey));
+    $output .= html_writer::end_tag('div');
+    return $output;
+}
+
+/**
+ * Creates save grades form end tag and submit button.
+ * @return string
+ */
+function forumngfeature_userposts_grade_form_footer() {
+    $savegrades = html_writer::empty_tag('input', array('type' => 'submit',
+            'name' => 'savegrades', 'value' => get_string('savegrades', 'forumngfeature_userposts')));
+    $output = html_writer::tag('div', $savegrades, array('class' => 'savegradesbutton'));
+    $output .= html_writer::end_tag('form');
+    return $output;
+}
+
+
+function get_all_user_post_counts_sql($groupid, $ignoreanon = false, $start = null, $end = null, $suffix = '') {
+    // Get users posts parameters.
+    $getusersparams = array();
+
+    $getuserswhere = 'fd.forumngid = :fd_forumngid'.$suffix.'
+    AND fd.deleted = 0
+    AND fp.deleted = 0
+    AND fp.oldversion = 0';
+
+    if ($groupid != mod_forumng::NO_GROUPS && $groupid != mod_forumng::ALL_GROUPS) {
+        $getuserswhere .= ' AND (fd.groupid = :fd_groupid'.$suffix.'OR fd.groupid IS NULL)';
+        $getusersparams['fd_groupid'.$suffix] = $groupid;
+    }
+
+    if ($ignoreanon) {
+        $getuserswhere .= ' AND fp.asmoderator != :fp_moderator'.$suffix;
+        $getusersparams['fp_moderator'.$suffix] = mod_forumng::ASMODERATOR_ANON;
+    }
+
+    if (!empty($start)) {
+        $getuserswhere .= ' AND fp.created >= :fp_start'.$suffix;
+        $getusersparams['fp_start'.$suffix] = $start;
+    }
+
+    if (!empty($end)) {
+        $getuserswhere .= ' AND fp.created <= :fp_end'.$suffix;
+        $getusersparams['fp_end'.$suffix] = $end;
+    }
+
+    return array($getuserswhere, $getusersparams);
+}
diff --git a/mod/forumng/feature/userposts/locallib.php b/mod/forumng/feature/userposts/locallib.php
new file mode 100644
index 0000000..345298c
--- /dev/null
+++ b/mod/forumng/feature/userposts/locallib.php
@@ -0,0 +1,300 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Local library file for forumng.  These are non-standard functions that are used
+ * only by forumng.
+ *
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/** Make sure this isn't being directly accessed */
+defined('MOODLE_INTERNAL') || die();
+
+// Include the files that are required by this module.
+require_once($CFG->dirroot . '/mod/forumng/lib.php');
+require_once($CFG->libdir . '/formslib.php');
+
+/**
+ * Grades users from the list.php or user.php page.
+ *
+ * @param array $newgrades mixed optional array/object of grade(s);
+ * @param object $cm course module object
+ * @param mod_forumng $forumng Forum
+ */
+function forumngfeature_userposts_update_grades($newgrades, $cm, mod_forumng $forumng) {
+    global $CFG, $SESSION;
+
+    require_once($CFG->libdir.'/gradelib.php');
+    $grades = grade_get_grades($forumng->get_course_id(), 'mod',
+            'forumng', $forumng->get_id(), array_keys($newgrades));
+
+    foreach ($grades->items[0]->grades as $key => $grade) {
+        if (array_key_exists($key, $newgrades)) {
+            if ($newgrades[$key] != $grade->grade) {
+                if ($newgrades[$key] == -1) {
+                    // No grade.
+                    $grade->rawgrade = null;
+                } else {
+                    $grade->rawgrade = $newgrades[$key];
+                }
+                $grade->userid = $key;
+                $forumng->cmidnumber = $cm->id;
+                forumngfeature_userposts_grade_item_update($forumng, $grade);
+            }
+        }
+    }
+
+    // Add a message to display to the page.
+    if (!isset($SESSION->forumnggradesupdated)) {
+        $SESSION->forumnggradesupdated = get_string('gradesupdated', 'forumngfeature_userposts');
+    }
+}
+
+/**
+ * Update grade item for given forumng.
+ *
+ * @param mod_forumng $forumng Forum with extra cmidnumber.
+ * @param mixed optional array/object of grade(s); 'reset' means reset grades in gradebook
+ * @return int 0 if ok, error code otherwise
+ */
+function forumngfeature_userposts_grade_item_update(mod_forumng $forumng, $grades = null) {
+    global $CFG;
+    require_once($CFG->libdir.'/gradelib.php');
+
+    $params = array('itemname' => $forumng->get_name());
+
+    $gradingscale = $forumng->get_grading_scale();
+    if ($gradingscale > 0) {
+        $params['gradetype'] = GRADE_TYPE_VALUE;
+        $params['grademax']  = $gradingscale;
+        $params['grademin']  = 0;
+    } else if ($gradingscale < 0) {
+        $params['gradetype'] = GRADE_TYPE_SCALE;
+        $params['scaleid']   = -$gradingscale;
+    } else {
+        $params['gradetype'] = GRADE_TYPE_NONE;
+    }
+
+    if ($grades  === 'reset') {
+        $params['reset'] = true;
+        $grades = null;
+    }
+
+    return grade_update('mod/forumng', $forumng->get_course_id(), 'mod',
+            'forumng', $forumng->get_id(), 0, $grades, $params);
+}
+
+/**
+ * Render single user's grading form.
+ *
+ * @param int $cmid course module id
+ * @param mod_forumng $forumng Forum
+ * @param object $user object
+ * @param int $groupid id of group to which user belongs
+ */
+function forumngfeature_userposts_display_user_grade($cmid, mod_forumng $forumng, $user, $groupid) {
+    global $CFG;
+
+    require_once($CFG->libdir.'/gradelib.php');
+    $grades = grade_get_grades($forumng->get_course_id(), 'mod', 'forumng', $forumng->get_id(), $user->id);
+
+    if ($grades) {
+        if (!isset($grades->items[0]->grades[$user->id]->grade)) {
+            $user->grade = -1;
+        } else {
+            $user->grade = abs($grades->items[0]->grades[$user->id]->grade);
+        }
+        $grademenu = make_grades_menu($forumng->get_grading_scale());
+        $grademenu[-1] = get_string('nograde');
+
+        $formparams = array();
+        $formparams['id'] = $cmid;
+        $formparams['user'] = $user->id;
+        $formparams['group'] = $groupid;
+        $formaction = new moodle_url('/mod/forumng/feature/userposts/savegrades.php', $formparams);
+        $mform = new MoodleQuickForm('savegrade', 'post', $formaction,
+                '', array('class' => 'savegrade'));
+
+        $mform->addElement('header', 'usergrade', get_string('usergrade', 'forumngfeature_userposts'));
+
+        $mform->addElement('select', 'grade', get_string('grade'),  $grademenu);
+        $mform->setDefault('grade', $user->grade);
+
+        $mform->addElement('submit', 'savechanges', get_string('savechanges'));
+
+        $mform->display();
+    }
+}
+
+
+class forumng_participation_table_form extends moodleform {
+
+    // Code below taken from OU Blog class oublog_participation_timefilter_form.
+    public function definition() {
+        global $CFG;
+
+        $mform =& $this->_form;
+        $cdata = $this->_customdata;
+        /*
+        * We Expect custom data to have following format:
+        * 'options' => array used for select drop down
+        * 'default' => default/selected option
+        * 'cmid' => blog course module id
+        * 'params' => key(name)/value array to make into hidden inputs (value must be integer)
+        */
+        if (!empty($cdata['params']) && is_array($cdata['params'])) {
+            foreach ($cdata['params'] as $param => $value) {
+                $mform->addElement('hidden', $param, $value);
+                $mform->setType($param, PARAM_INT);
+            }
+        }
+        // Data selectors, with optional enabling checkboxes.
+        $mform->addElement('date_selector', 'start',
+                get_string('start', 'forumngfeature_userposts'),
+                        array('startyear' => $cdata['startyear'], 'stopyear' => gmdate("Y"), 'optional' => true));
+        $mform->addHelpButton('start', 'displayperiod', 'forumngfeature_userposts');
+
+        $mform->addElement('date_selector', 'end',
+                get_string('end', 'forumngfeature_userposts'), array('startyear' => $cdata['startyear'], 'stopyear' => gmdate("Y"),
+                        'optional' => true));
+        if (isset($cdata['ratings']) && ($cdata['ratings'] == true)) {
+            $mform->addElement('checkbox', 'ratedposts', get_string('ratedposts', 'forumngfeature_userposts'));
+            $mform->addHelpButton('ratedposts', 'ratedposts', 'forumngfeature_userposts');
+            $mform->setDefault('ratedposts', 0);
+        }
+
+        if (isset($cdata['type'])) {
+            $mform->addElement('hidden', 'type', $cdata['type']);
+            $mform->setType('type', PARAM_ALPHA);
+        }
+        if (isset($cdata['cmid'])) {
+            $mform->addElement('hidden', 'id', $cdata['cmid']);
+            $mform->setType('id', PARAM_INT);
+        }
+        if (isset($cdata['user'])) {
+            $mform->addElement('hidden', 'user', $cdata['user']);
+            $mform->setType('user', PARAM_INT);
+        }
+        if (isset($cdata['group'])) {
+            $mform->addElement('hidden', 'group', $cdata['group']);
+            $mform->setType('group', PARAM_INT);
+        }
+
+        $mform->addElement('hidden', 'tab', 0);
+        $mform->setType('tab', PARAM_INT);
+
+        $this->add_action_buttons(false, get_string('timefilter_submit', 'forumngfeature_userposts'));
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        if (!empty($data['start']) and !empty($data['end'])) {
+            if ($data['start'] > $data['end']) {
+                $errors['start'] = get_string('timestartenderror', 'forumngfeature_userposts');
+            }
+        }
+        return $errors;
+    }
+
+}
+
+class forumng_rated_participation_table_form extends moodleform {
+
+    // Code below taken from OU Blog class oublog_participation_timefilter_form.
+    public function definition() {
+        global $CFG;
+
+        $mform =& $this->_form;
+        $cdata = $this->_customdata;
+        /*
+         * We Expect custom data to have following format:
+        * 'options' => array used for select drop down
+        * 'default' => default/selected option
+        * 'cmid' => blog course module id
+        * 'params' => key(name)/value array to make into hidden inputs (value must be integer)
+        */
+        if (!empty($cdata['params']) && is_array($cdata['params'])) {
+            foreach ($cdata['params'] as $param => $value) {
+                $mform->addElement('hidden', $param, $value);
+                $mform->setType($param, PARAM_INT);
+            }
+        }
+        $mform->addElement('header', 'postheader', get_string('posttitle', 'forumngfeature_userposts'));
+        $mform->setExpanded('postheader');
+        // Data selectors, with optional enabling checkboxes.
+        $mform->addElement('date_selector', 'start',
+                get_string('start', 'forumngfeature_userposts'),
+                array('startyear' => $cdata['startyear'], 'stopyear' => gmdate("Y"), 'optional' => true));
+        $mform->addHelpButton('start', 'displayperiod', 'forumngfeature_userposts');
+
+        $mform->addElement('date_selector', 'end',
+                get_string('end', 'forumngfeature_userposts'), array('startyear' => $cdata['startyear'], 'stopyear' => gmdate("Y"),
+                        'optional' => true));
+
+        $mform->addElement('header', 'ratingheader', get_string('ratingtitle', 'forumngfeature_userposts'));
+        $mform->setExpanded('ratingheader');
+        $mform->addElement('date_selector', 'ratedstart',
+                get_string('ratedstart', 'forumngfeature_userposts'),
+                array('ratedstartyear' => $cdata['startyear'], 'ratedstopyear' => gmdate("Y"), 'optional' => true));
+        $mform->addHelpButton('ratedstart', 'displayperiod', 'forumngfeature_userposts');
+
+        $mform->addElement('date_selector', 'ratedend',
+                get_string('ratedend', 'forumngfeature_userposts'),
+                array('ratedstartyear' => $cdata['startyear'], 'ratedstopyear' => gmdate("Y"),
+                        'optional' => true));
+
+        if (isset($cdata['type'])) {
+            $mform->addElement('hidden', 'type', $cdata['type']);
+            $mform->setType('type', PARAM_ALPHA);
+        }
+        if (isset($cdata['cmid'])) {
+            $mform->addElement('hidden', 'id', $cdata['cmid']);
+            $mform->setType('id', PARAM_INT);
+        }
+        if (isset($cdata['user'])) {
+            $mform->addElement('hidden', 'user', $cdata['user']);
+            $mform->setType('user', PARAM_INT);
+        }
+        if (isset($cdata['group'])) {
+            $mform->addElement('hidden', 'group', $cdata['group']);
+            $mform->setType('group', PARAM_INT);
+        }
+        $mform->addElement('hidden', 'tab', 1);
+        $mform->setType('tab', PARAM_INT);
+
+        $this->add_action_buttons(false, get_string('timefilter_submit', 'forumngfeature_userposts'));
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        if (!empty($data['start']) and !empty($data['end'])) {
+            if ($data['start'] > $data['end']) {
+                $errors['start'] = get_string('timestartenderror', 'forumngfeature_userposts');
+            }
+        }
+        if (!empty($data['ratedstart']) and !empty($data['ratedend'])) {
+            if ($data['ratedstart'] > $data['ratedend']) {
+                $errors['ratedstart'] = get_string('ratedtimestartenderror', 'forumngfeature_userposts');
+            }
+        }
+        return $errors;
+    }
+
+}
diff --git a/mod/forumng/feature/userposts/savegrades.php b/mod/forumng/feature/userposts/savegrades.php
new file mode 100644
index 0000000..7842323
--- /dev/null
+++ b/mod/forumng/feature/userposts/savegrades.php
@@ -0,0 +1,73 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Page for saving grades for all or one user participation
+ *
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/lib.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot. '/mod/forumng/feature/userposts/locallib.php');
+
+$id = required_param('id', PARAM_INT); // Course Module ID.
+$groupid = optional_param('group', 0, PARAM_INT);
+$userid = optional_param('user', 0, PARAM_INT);
+
+$params = array();
+$params['id'] = $id;
+$params['group'] = $groupid;
+
+$url = new moodle_url('/mod/forumng/feature/userposts/savegrades.php');
+
+$forum = mod_forumng::get_from_cmid($id, mod_forumng::CLONE_DIRECT);
+
+if (!$cm = $forum->get_course_module()) {
+    print_error('invalidcoursemodule');
+}
+
+$PAGE->set_cm($cm);
+
+$course = $forum->get_course();
+$context = context_module::instance($cm->id);
+require_course_login($course, true, $cm);
+
+// Grading capability check.
+if (!$forum->can_grade()) {
+    print_error('nopermissiontoshow');
+}
+
+$mode = '';
+if (!empty($_POST['menu'])) {
+    $mode = 'bulk';
+    $gradeinfo = $_POST['menu'];
+} else if ($userid && !empty($_POST['grade'])) {
+    $gradeinfo[$userid] = $_POST['grade'];
+}
+// Update grades.
+if (!empty($gradeinfo)) {
+    forumngfeature_userposts_update_grades($gradeinfo, $cm, $forum);
+}
+
+// Rebuild course cache.
+rebuild_course_cache($course->id, true);
+// Redirect.
+redirect('list.php?id=' . $id . '&group=' . $groupid);
diff --git a/mod/forumng/feature/userposts/tests/behat/user.feature b/mod/forumng/feature/userposts/tests/behat/user.feature
new file mode 100644
index 0000000..9279cdc
--- /dev/null
+++ b/mod/forumng/feature/userposts/tests/behat/user.feature
@@ -0,0 +1,371 @@
+@mod @mod_forumng @ou @ou_vle @forumng_feature_userposts @javascript
+Feature: Add forumng activity and test userposts filtering
+  In order to easily evaluate user posts
+  As a teacher
+  I need to view posts filtered by rated and date posted
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+      | teacher1 | Teacher | 1 | teacher1@asd.com |
+      | teacher2 | Teacher | 2 | teacher2@asd.com |
+    When the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+    Then the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+      | teacher1 | C1 | teacher |
+      | teacher2 | C1 | teacher |
+    And the following "permission overrides" exist:
+      | capability       | permission | role    | contextlevel | reference |
+      | mod/forumng:rate | Allow      | student | Course       | C1        |
+
+
+  Scenario: Check rating tab rated from and rated to filter
+    Given I log in as "admin"
+    When I am on site homepage
+    Then I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name                  | Test forum name        |
+      | Forum introduction          | Test forum description |
+      | Allow posts to be rated     | Ratings (standard)     |
+      | ratingscale[modgrade_type]  | point                  |
+      | ratingscale[modgrade_point] | 10                     |
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc          |
+    And I log out
+    And I log in as "student1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I set the following fields to these values:
+      | rating | 10 |
+    And I log out
+    And I amend the forumng rated posts to new rated date:
+     | student1 |  Discussion 1 | 2014-12-02 |
+    And I log in as "student1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 1 reply by student1                |
+      | Message                   | This is reply text by student1 (Discussion 1) |
+    And I follow "C1"
+    And I follow "Test forum name"
+    And I press "My participation"
+    And I follow "Posts I rated"
+    And I set the following fields to these values:
+      | ratedstart[enabled]  | 1       |
+      | ratedend[enabled]    | 1       |
+      | ratedstart[month]    | January |
+    And I press "Update"
+    And I should see "No posts rated by Student 1"
+    And I should not see "Discussion 1"
+    And "//select[@name='rating']/option[@selected='selected'][normalize-space(text())='10']" "xpath_element" should not exist
+    And I set the following fields to these values:
+      | ratedstart[enabled] | 1    |
+      | ratedend[enabled]   | 1    |
+      | ratedstart[year]    | 2013 |
+    And I press "Update"
+    And I should see "Discussion 1"
+    And "//select[@name='rating']/option[@selected='selected'][normalize-space(text())='10']" "xpath_element" should exist
+    And I log out
+
+    # Check all ratings options not visible when 'No ratings' enabled in Forum
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I navigate to "Edit settings" node in "ForumNG administration"
+    And I set the field "id_enableratings" to "No ratings"
+    And I press "Save and display"
+    And I press "Participation by user"
+    And I follow "Show all posts by Student 1"
+    And I should not see "Rating"
+    And I should not see "User posts"
+    And I should not see "Posts user rated"
+
+
+  Scenario: Check rating filtering tabs (create posts by a user and rate by another user)
+    Given I log in as "admin"
+    When I am on site homepage
+    Then I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name                  | Test forum name        |
+      | Forum introduction          | Test forum description |
+      | Allow posts to be rated     | Ratings (standard)     |
+      | ratingscale[modgrade_type]  | point                  |
+      | ratingscale[modgrade_point] | 10                     |
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc          |
+    And I follow "ForumNG"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | abcdefg      |
+      | sticky  | 1            |
+    And I log out
+
+    And I log in as "student1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 1 reply by student1                |
+      | Message                   | This is reply text by student1 (Discussion 1) |
+    And I follow "Test forum name"
+    And I follow "Discussion 2"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 2 reply by student1                |
+      | Message                   | This is reply text by student1 (Discussion 2) |
+    And I log out
+
+    And I log in as "student2"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 1 reply by student2   |
+      | Message | This is reply text by student2 (Discussion 1)      |
+    And I am on homepage
+    And I log out
+
+    And I log in as "student1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 2"
+    And I set the following fields to these values:
+      | rating | 10 |
+    And I follow "C1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I set the following fields to these values:
+      | rating | 9 |
+    And I log out
+
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I press "Participation by user"
+    And I follow "Show all posts by Student 1"
+    And I set the following fields to these values:
+      | rating | 7 |
+
+    # Results.
+
+    And I should see "User posts"
+    And I should see "Discussion 1 reply by student1"
+    And I should see "Discussion 2 reply by student1"
+    And I set the following fields to these values:
+      | ratedposts | 1 |
+    And I press "Update"
+    And I should see "Discussion 1 reply by student1"
+    And I should not see "Discussion 2 reply by student1"
+    And I follow "Posts user rated"
+    And I should see "Discussion 1"
+    And I should see "abc"
+    And I should see "Discussion 2"
+    And I should see "abcdefg"
+    And "//span[@class='ratingaggregate'][normalize-space(text())='9']" "xpath_element" should exist
+    And "//span[@class='ratingaggregate'][normalize-space(text())='10']" "xpath_element" should exist
+    And I log out
+
+    And I log in as "student1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I press "My participation"
+    And I should see "My posts"
+    And I should see "Discussion 1 reply by student1"
+    And I should see "Discussion 2 reply by student1"
+    And I set the following fields to these values:
+      | ratedposts | 1 |
+    And I press "Update"
+    And I should see "Discussion 1 reply by student1"
+    And I should not see "Discussion 2 reply by student1"
+    And "//span[@class='ratingaggregate'][normalize-space(text())='7']" "xpath_element" should exist
+    And I follow "Posts I rated"
+    And I should see "Discussion 1"
+    And I should see "abc"
+    And I should see "Discussion 2"
+    And I should see "abcdefg"
+    And "//select[@name='rating']/option[@selected='selected'][normalize-space(text())='9']" "xpath_element" should exist
+    And "//select[@name='rating']/option[@selected='selected'][normalize-space(text())='10']" "xpath_element" should exist
+
+
+  Scenario: Add forumng replies and check display by user post
+    Given I log in as "admin"
+    And I am on site homepage
+    When I follow "Course 1"
+    Then I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name                  | Test forum name        |
+      | Forum introduction          | Test forum description |
+      | Allow posts to be rated     | Ratings (standard)     |
+      | ratingscale[modgrade_type]  | point                  |
+      | ratingscale[modgrade_point] | 10                     |
+
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I follow "ForumNG"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | abcdefg |
+      | sticky | 1 |
+
+    And I follow "ForumNG"
+    And I add a discussion with the following data:
+      | Subject | Discussion 3 |
+      | Message | abcdefghijk |
+    And I follow "ForumNG"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 1 reply by admin  |
+      | Message                   | HELLO                        |
+    And I log out
+
+    And I log in as "student1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 1 reply by student1                |
+      | Message                   | This is reply text by student1 (Discussion 1) |
+
+    # View all posts for student1
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I press "My participation"
+    And I should see "Posts rated by others"
+    And I should see "Discussion 1 reply by student1"
+    And I should see "This is reply text by student1 (Discussion 1)"
+    And I should see "Average of ratings"
+
+    # Now view rated posts only for student1
+    And I set the following fields to these values:
+      | ratedposts | 1 |
+    And I press "Update"
+    And I should not see "This is reply text by student1 (Discussion 1)"
+    And I should not see "Average of ratings"
+    And I should see "No posts by Student 1"
+    And I log out
+
+    And I log in as "student2"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 1 reply by student2   |
+      | Message | This is reply text by student2 (Discussion 1)      |
+    And I log out
+
+    And I log in as "teacher1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I press "Participation by user"
+    And I follow "Show all posts by Student 2"
+    And I set the following fields to these values:
+      | rating | 10 |
+    And I log out
+
+    And I log in as "student2"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 1 reply 2 by student2                |
+      | Message                   | This is reply text 2 by student2 (Discussion 1) |
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion 2"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Discussion 2 reply by student2                 |
+      | Message                   | This is reply text by student2 (Discussion 2)  |
+
+    # View posts for student2
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "ForumNG"
+    And I press "My participation"
+    And I should see "This is reply text by student2 (Discussion 1)"
+    And I should see "This is reply text by student2 (Discussion 2)"
+    And I should see "This is reply text 2 by student2 (Discussion 1)"
+
+    And I set the following fields to these values:
+      | ratedposts | 1 |
+    And I press "Update"
+    And I should see "This is reply text by student2 (Discussion 1)"
+    And I should not see "This is reply text by student2 (Discussion 2)"
+    And I should not see "This is reply text 2 by student2 (Discussion 1)"
+
+    # Now check the date filter
+
+    And I amend the forumng posts to new created date:
+      |  Discussion 1 reply by student2     | 2014-12-02 |
+      |  Discussion 1 reply 2 by student2   | 2015-01-03 |
+      |  Discussion 2 reply by student2     | 2015-02-04 |
+    And I press "Update"
+    And I should see "This is reply text by student2 (Discussion 1)"
+    And I should not see "This is reply text by student2 (Discussion 2)"
+    And I should not see "This is reply text 2 by student2 (Discussion 1)"
+
+    And I set the following fields to these values:
+      | start[enabled] | 1 |
+      | end[enabled]   | 1 |
+    And I press "Update"
+    And I should see "No posts by Student 2"
+    And I should not see "This is reply text by student2 (Discussion 1)"
+    And I should not see "This is reply text by student2 (Discussion 2)"
+    And I should not see "This is reply text 2 by student2 (Discussion 1)"
+
+    And I set the following fields to these values:
+      | start[day]   | 1       |
+      | start[month] | January |
+      | start[year]  | 2015    |
+    And I press "Update"
+    And I should not see "This is reply text by student2 (Discussion 1)"
+    And I should not see "This is reply text by student2 (Discussion 2)"
+    And I should not see "This is reply text 2 by student2 (Discussion 1)"
+    And I should see "No posts by Student 2"
+
+    And I set the following fields to these values:
+      | end[enabled]   | 0 |
+    And I press "Update"
+    And I should not see "This is reply text by student2 (Discussion 1)"
+    And I should not see "This is reply text by student2 (Discussion 2)"
+    And I should not see "This is reply text 2 by student2 (Discussion 1)"
+    And I should see "No posts by Student 2"
+
+    And I set the following fields to these values:
+      | start[enabled] | 0 |
+      | end[enabled]   | 1 |
+    And I press "Update"
+    And I should see "This is reply text by student2 (Discussion 1)"
+    And I should not see "This is reply text by student2 (Discussion 2)"
+    And I should not see "This is reply text 2 by student2 (Discussion 1)"
+
+    And I set the following fields to these values:
+      | ratedposts | 0 |
+    And I press "Update"
+    And I should see "This is reply text by student2 (Discussion 1)"
+    And I should see "This is reply text by student2 (Discussion 2)"
+    And I should see "This is reply text 2 by student2 (Discussion 1)"
+
+    And I log out
diff --git a/mod/forumng/feature/userposts/tests/behat/userparticipation.feature b/mod/forumng/feature/userposts/tests/behat/userparticipation.feature
new file mode 100644
index 0000000..d87ea9c
--- /dev/null
+++ b/mod/forumng/feature/userposts/tests/behat/userparticipation.feature
@@ -0,0 +1,142 @@
+@mod @mod_forumng @ou @ou_vle @forumng_userparticipation
+Feature: Add forumng activity and test basic ratings functionality
+  In order to effectively teach
+  As a teacher
+  I need to easily view students forum post ratings
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email            |
+      | teacher1 | Teacher   | 1        | teacher1@asd.com |
+      | student1 | Student   | 1        | student1@asd.com |
+      | student2 | Student   | 2        | student2@asd.com |
+    When the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    Then the following "course enrolments" exist:
+      | user     | course | role    |
+      | teacher1 | C1     | teacher |
+      | student1 | C1     | student |
+      | student2 | C1     | student |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name                  | Test forum name        |
+      | Forum introduction          | Test forum description |
+      | Allow posts to be rated     | 2                      |
+      | ratingscale[modgrade_type]  | Point                  |
+      | ratingscale[modgrade_point] | 10                     |
+      | Grade                       | No grade               |
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Admin1 |
+      | Message | Test   |
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Admin2 |
+      | Message                   | Test2  |
+    And I follow "C1"
+    And I log out
+
+  Scenario: Access forum as a student, create a discussion and reply to a post and then rate as a teacher
+
+    Given I log in as "student1"
+    When I follow "Course 1"
+    Then I follow "Test forum name"
+    And I follow "Admin1"
+    And I reply to post "2" with the following data:
+      | Change subject (optional) | Student 1 |
+      | Message                   | Test3   |
+    And I should see "Test3"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Disc2   |
+      | Message | Test2   |
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Admin1"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Student 1                     |
+      | Message                   | Reply by Student 1   |
+    And I log out
+
+    And I log in as "teacher1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I press "Participation by user"
+    And I should see "0.0" in the "//div/table//tr[@id='mod-forumng-participation_r0']/td[@class='cell c4']/div[text()]" "xpath_element"
+    And I follow "Show all posts by Student 1"
+    And I set the following fields to these values:
+      | rating | 3 |
+    And I press "Rate"
+    And I follow "User participation"
+    And I should see "3.0" in the "//div/table//tr[@id='mod-forumng-participation_r0']/td[@class='cell c4']/div[text()]" "xpath_element"
+    And I follow "C1"
+    And I log out
+
+    And I log in as "student1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And "My participation" "button" should exist
+    And "Participation by user" "button" should not exist
+
+    And I follow "Disc2"
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Student 1                       |
+      | Message                   | Reply to Disc2 by Student 1   |
+    And I should see "Reply to Disc2 by Student 1"
+    And I log out
+
+    And I log in as "teacher1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Disc2"
+    And I set the following fields to these values:
+      | rating | 4 |
+    And I press "Rate"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I press "Participation by user"
+    And I should see "3.5" in the "//div/table//tr[@id='mod-forumng-participation_r0']/td[@class='cell c4']/div[text()]" "xpath_element"
+
+    # Now change a post created date
+    And I amend the forumng posts to new created date:
+      |  Disc2     | 2014-12-02 |
+    And I press "Update"
+    And I set the following fields to these values:
+      | start[enabled] | 1 |
+      | end[enabled]   | 1 |
+    And I press "Update"
+    And I should see "3.0" in the "//div/table//tr[@id='mod-forumng-participation_r0']/td[@class='cell c4']/div[text()]" "xpath_element"
+
+    And I set the following fields to these values:
+      | start[day]   | 1        |
+      | start[month] | January  |
+      | start[year]  | 2014     |
+      | end[day]     | 25       |
+      | end[month]   | December |
+      | end[year]    | 2014     |
+    And I press "Update"
+    And I should see "4.0" in the "//div/table//tr[@id='mod-forumng-participation_r0']/td[@class='cell c4']/div[text()]" "xpath_element"
+    And I log out
+
+    # View with different grade setting
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Edit settings"
+    And I set the following fields to these values:
+     | Grade | Teacher grades students |
+    And I press "Save and display"
+    And I log out
+
+    And I log in as "teacher1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I press "Participation by user"
+    And I should see "Grade"
+    And I should see "3.5" in the "//div/table//tr[@id='mod-forumng-participation_r0']/td[@class='cell c5']/div[text()]" "xpath_element"
+    And I log out
\ No newline at end of file
diff --git a/mod/forumng/feature/userposts/user.php b/mod/forumng/feature/userposts/user.php
new file mode 100644
index 0000000..b6a4956
--- /dev/null
+++ b/mod/forumng/feature/userposts/user.php
@@ -0,0 +1,330 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This page (user.php) displays the all the posts for a chosen user
+ * in chronological order (modified date). It is also indicates whether
+ * a post is a new discussion or a reply. If it is a reply then a link
+ * link is printed for displaying the original post.
+ * It can also produce a csv format output file.
+ * @package forumngfeature
+ * @subpackage userposts
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot . '/mod/forumng/feature/userposts/locallib.php');
+require_once($CFG->dirroot.'/mod/forumng/locallib.php');
+require_once($CFG->libdir . '/tablelib.php');
+
+$cmid = required_param('id', PARAM_INT);
+$userid = required_param('user', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$download = optional_param('download', '', PARAM_TEXT);
+$tab = optional_param('tab', 0, PARAM_INT);
+
+$student = false;
+$groupid = -1;
+
+$pageparams = array('id' => $cmid, 'user' => $userid);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+$forumngid = $forum->get_id();
+$context = $forum->get_context();
+if ($forum->is_shared() || $forum->is_clone()) {
+    throw new invalid_parameter_exception("Not supported for shared forums.");
+}
+
+global $USER;
+if (has_capability('forumngfeature/userposts:view', $context)) {
+    $student = false;
+} else {
+    if ($USER->id == $userid) {
+        $student = true;
+    } else {
+        // Throw user access no permissions error.
+        throw new moodle_exception('error_nopermission', 'forumng');
+    }
+}
+
+if ($student) {
+    // We need to get active group from forum.
+    $groupid = mod_forumng::get_activity_group($cm, true);
+} else {
+    // Check group mode and get group id.
+    if ($forum->get_group_mode()) {
+        $groupid    = optional_param('group', 0, PARAM_INT);
+    }
+    // Check access.
+    $forum->require_view($groupid);
+    require_capability('forumngfeature/userposts:view', $context);
+    // Check group mode and set up group id.
+    if ($forum->get_group_mode()) {
+        $pageparams['group'] = $groupid;
+        if (!$groupid) {
+            $groupid = mod_forumng::ALL_GROUPS;
+        }
+    } else {
+        $groupid = mod_forumng::NO_GROUPS;
+    }
+}
+
+$user = $DB->get_record('user', array('id' => $userid), '*', MUST_EXIST);
+$pagename = fullname($user, has_capability('moodle/site:viewfullnames', $context));
+$pagename .= $CFG->forumng_showusername ? ' (' . $user->username . ')' : '';
+$start = null;
+$end = null;
+$ratedstart = null;
+$ratedend = null;
+$rated = false;
+$prevpage = '';
+$prevurl = '';
+$pageparams['group'] = $groupid;
+$pageparams['start'] = $start;
+$pageparams['end'] = $end;
+$pageparams['ratedstart'] = $ratedstart;
+$pageparams['ratedend'] = $ratedend;
+$pageparams['rated'] = $rated;
+$pageparams['tab'] = $tab;
+$pageurl = new moodle_url('/mod/forumng/feature/userposts/user.php', $pageparams);
+$out = '';
+
+if (!$student) {
+    $prevpage = get_string('userposts', 'forumngfeature_userposts');
+    $prevurl = new moodle_url('/mod/forumng/feature/userposts/list.php',
+        $forum->get_link_params_array());
+    $out = $forum->init_page($pageurl, $pagename, array($prevpage => $prevurl));
+    $tabtitle1 = get_string('userpoststitle', 'forumngfeature_userposts');
+    $tabtitle2 = get_string('postsuserratedtitle', 'forumngfeature_userposts');
+} else {
+    $out = $forum->init_page($pageurl, $pagename);
+    $tabtitle1 = get_string('mypoststitle', 'forumngfeature_userposts');
+    $tabtitle2 = get_string('postsiratedtitle', 'forumngfeature_userposts');
+}
+
+$timeparts = getdate($course->startdate);
+// Create time filter options form.
+$customdata = array(
+        'options' => array(),
+        'cmid' => $cmid,
+        'user' => $userid,
+        'group' => $groupid,
+        'download' => $download,
+        'startyear' => $timeparts['year'],
+        'tab' => $tab,
+        'params' => array()
+);
+if ($forum->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+    $customdata['ratings'] = true;
+} else {
+    $customdata['ratings'] = false;
+}
+if ($tab == 0) {
+    $timefilter = new forumng_participation_table_form(null, $customdata);
+} else {
+    $timefilter = new forumng_rated_participation_table_form(null, $customdata);
+}
+
+$start = $end = 0;
+// If data has been received from this form.
+if ($submitted = $timefilter->get_data()) {
+    if ($submitted->start) {
+        $start = strtotime('00:00:00', $submitted->start);
+    }
+    if ($submitted->end) {
+        $end = strtotime('23:59:59', $submitted->end);
+    }
+    if (!empty($submitted->ratedstart)) {
+        $ratedstart = strtotime('00:00:00', $submitted->ratedstart);
+    }
+    if (!empty($submitted->ratedend)) {
+        $ratedend = strtotime('23:59:59', $submitted->ratedend);
+    }
+    if (!empty($submitted->ratedposts)) {
+        $rated = true;
+    } else {
+        $rated = false;
+    }
+} else if (!$timefilter->is_submitted()) {
+    // Recieved via post back.
+    if ($start = optional_param('start', null, PARAM_INT)) {
+        $start = strtotime('00:00:00', $start);
+    }
+    if ($end = optional_param('end', null, PARAM_INT)) {
+        $end = strtotime('23:59:59', $end);
+    }
+    if ($ratedstart = optional_param('ratedstart', null, PARAM_INT)) {
+        $ratedstart = strtotime('00:00:00', $ratedstart);
+    }
+    if ($ratedend = optional_param('ratedend', null, PARAM_INT)) {
+        $ratedend = strtotime('23:59:59', $ratedend);
+    }
+    $rated = optional_param('rated', false, PARAM_BOOL);
+}
+if ($tab == 0) {
+    $posts = $forum->get_all_posts_by_user($userid, $groupid, 'fp.id', $start, $end, $rated);
+} else {
+    $posts = $forum->get_rated_posts_by_user($forum, $userid, $groupid, 'fp.id', $ratedstart, $ratedend, $start, $end);
+}
+
+// Add collected start and end UNIX formated dates to moodle url.
+$pageurl->param('start', $start);
+$pageurl->param('end', $end);
+$pageurl->param('rated', $rated);
+$pageurl->param('ratedstart', $ratedstart);
+$pageurl->param('ratedend', $ratedend);
+
+$table = new flexible_table('mod-forumng-participation');
+$table->set_attribute('class', 'flexible generaltable');
+$table->set_attribute('width', '100%');
+$table->define_columns(array('c1', 'c2', 'c3'));
+$table->define_headers(array('In reply to', 'Post date', 'Post subject', 'Post message'));
+$table->define_baseurl($pageurl);
+$filename = "$course->shortname-" . format_string($forum->get_name(), true) . "-" . $USER->username;
+$table->is_downloading($download, $filename, get_string('userposts', 'forumngfeature_userposts'));
+
+if (empty($download)) {
+    print $out->header();
+    if (($forum->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) &&
+    (has_capability('mod/forumng:rate', $context))) {
+        $taburl = clone $pageurl;
+        $taburl->remove_params('tab');
+        $tabs = array(
+                new tabobject('tab0', $taburl . '&amp;tab=0', $tabtitle1),
+                new tabobject('tab1', $taburl . '&amp;tab=1', $tabtitle2)
+        );
+        print $out->tabtree($tabs, "tab$tab");
+    }
+    // Display time filter options form.
+    if ($start || $end || $ratedstart || $ratedend) {
+        $timefilter->set_data(array('start' => $start, 'end' => $end, 'ratedstart' => $ratedstart, 'ratedend' => $ratedend ));
+    }
+
+    if (!empty($submitted->ratedposts)) {
+        $timefilter->set_data(array('ratedposts' => $submitted->ratedposts));
+    }
+
+    $timefilter->display();
+    // Display the download button only if we have posts to download.
+    if ($posts) {
+        print $table->download_buttons();
+    }
+}
+
+$data = array();
+foreach ($posts as $postid => $post) {
+    $deleted = $post->get_deleted();
+    $discussion = $post->get_discussion();
+    $discussiondeleted = $discussion->is_deleted();
+
+    // Don't display if post or discussion is deleted and user is a student.
+    if (! (($deleted || $discussiondeleted) && $student)) {
+        if (empty($download)) {
+            print "<div class='forumng-userpostheading'>";
+            // Get URL to post.
+            print '<a href="' . s($post->get_url()) . '">';
+        }
+        // If this post is a reply, then print a link to the discussion.
+        if (!$post->is_root_post()) {
+            if (empty($download)) {
+                print get_string('replyin', 'forumngfeature_userposts',
+                    $discussion->get_subject());
+            } else {
+                $row[0] = $discussion->get_subject();
+            }
+        } else {
+            if (empty($download)) {
+                print get_string('newdiscussion', 'forumng');
+            } else {
+                $row[0] = '';
+            }
+        }
+        if (empty($download)) {
+            print "</a></div>";
+        }
+        // Display this post.
+        $options = array(
+            mod_forumng_post::OPTION_NO_COMMANDS => true,
+            mod_forumng_post::OPTION_FIRST_UNREAD => false,
+            mod_forumng_post::OPTION_UNREAD_NOT_HIGHLIGHTED => true,
+            mod_forumng_post::OPTION_PARTICIPATION => true);
+        if (empty($download)) {
+            print $post->display(true, $options);
+        } else {
+            $row[1] = userdate($post->get_created(), get_string('strftimedatetime', 'langconfig'));
+            $row[2] = $post->get_subject();
+            $row[3] = $post->get_formatted_message();
+            $data[] = $row;
+        }
+    }
+}
+
+if (!$posts) {
+    // Should only occur if student because list.php won't let us get here if no posts available.
+    $username = fullname($user);
+    if (empty($download)) {
+        if ($tab == 1) { // Ratings tabe message.
+            print '<p class="forumng-nopostsby">' .
+                get_string('nopostsratedby', 'forumngfeature_userposts', $username) . '</p>';
+        } else {
+            print '<p class="forumng-nopostsby">' .
+                    get_string('nopostsby', 'forumngfeature_userposts', $username) . '</p>';
+        }
+    }
+}
+
+if ($forum->can_grade() && empty($download)) {
+    forumngfeature_userposts_display_user_grade( $cm->id, $forum, $user, $groupid);
+}
+
+if (!$student && empty($download)) {
+    // Display link to the discussion.
+    print link_arrow_left($prevpage, 'list.php?id=' . $cmid);
+} else if (empty($download)) {
+    // Display link to the forum view.
+    $url = '../../view.php?id=' . $cmid;
+    print link_arrow_left($forum->get_name(), $url);
+}
+if (!empty($download)) {
+    $table->downloadable = false;
+    $table->setup($download);
+    foreach ($data as $row) {
+        $table->add_data($row);
+    }
+    $table->finish_output();
+}
+if (empty($download)) {
+    // Display footer.
+    print $out->footer();
+}
+$params = array(
+        'context' => $forum->get_context(),
+        'objectid' => $forum->get_id(),
+        'relateduserid' => $user->id,
+        'other' => array('url' => 'user.php?' . $pageurl->get_query_string(false))
+);
+
+$event = \forumngfeature_userposts\event\participation_viewed::create($params);
+$event->add_record_snapshot('course_modules', $forum->get_course_module());
+$event->add_record_snapshot('course', $forum->get_course());
+$event->trigger();
diff --git a/mod/forumng/feature/userposts/version.php b/mod/forumng/feature/userposts/version.php
new file mode 100644
index 0000000..ae9a7be
--- /dev/null
+++ b/mod/forumng/feature/userposts/version.php
@@ -0,0 +1,25 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ *
+ * @package forumngfeature_userposts
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2015051201;
+$plugin->component = 'forumngfeature_userposts';
diff --git a/mod/forumng/feed.php b/mod/forumng/feed.php
new file mode 100644
index 0000000..2cd234b
--- /dev/null
+++ b/mod/forumng/feed.php
@@ -0,0 +1,212 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Serve Atom/RSS feed.
+ *
+ * @package mod_forumng
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+require_once($CFG->libdir . '/rsslib.php');
+require_once('atomlib.php');
+
+// Parameters identify desired forum and group
+$d = optional_param('d', 0, PARAM_INT);
+if (!$d) {
+    $cmid = required_param('id', PARAM_INT);
+    $groupid = optional_param('group', 'unspecified', PARAM_INT);
+}
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+// User identification
+$userid = required_param('user', PARAM_INT);
+$key = required_param('key', PARAM_ALPHANUM);
+
+// Get user entry and set hack flag necessary for it to work with the OU's SSO system
+$user = $DB->get_record('user', array('id' => $userid), '*', MUST_EXIST);
+$user->samspretendlogin = true;
+
+// Get Moodle to log them in
+$user = complete_user_login($user);
+if (!$user) {
+    throw new moodle_exception('', 'forumng');
+}
+
+// Feed format
+$format = required_param('format', PARAM_ALPHA);
+$rss = $format == 'rss';
+
+// Load forum
+if ($d) {
+    $discussion = mod_forumng_discussion::get_from_id($d, $cloneid);
+    $forum = $discussion->get_forum();
+    $groupid = $discussion->get_group_id();
+    $url = $discussion->get_url(mod_forumng::PARAM_PLAIN);
+} else {
+    $forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+    $url = $forum->get_url(mod_forumng::PARAM_PLAIN);
+    if ($groupid == 'unspecified') {
+        $groupid = $forum->get_group_mode() == SEPARATEGROUPS
+            ? mod_forumng::ALL_GROUPS : mod_forumng::NO_GROUPS;
+    } else {
+        $url .= '&group=' . $groupid;
+    }
+}
+
+// Check it allows feeds
+$feedtype = $forum->get_effective_feed_option();
+switch ($feedtype) {
+    case mod_forumng::FEEDTYPE_DISCUSSIONS:
+        if (!$d) {
+            break;
+        }
+        // Fall through
+    case mod_forumng::FEEDTYPE_NONE:
+        print_error('feed_notavailable', 'forumng');
+}
+
+// Check that the key is valid
+$correctkey = $forum->get_feed_key($groupid, $userid);
+if ($correctkey != $key) {
+    print_error('feed_nopermission', 'forumng');
+}
+
+// Get most recent posts or discussions
+if ($feedtype == mod_forumng::FEEDTYPE_DISCUSSIONS) {
+    $discussions = $forum->get_feed_discussions($groupid, $userid);
+    $latest = count($discussions)
+        ? reset($discussions)->get_time_modified() : time();
+} else {
+    $posts = $d ? $discussion->get_feed_posts($userid)
+        : $forum->get_feed_posts($groupid, $userid);
+    $latest = count($posts)
+        ? reset($posts)->get_created() : time();
+}
+
+$since = isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])
+    ? $_SERVER['HTTP_IF_MODIFIED_SINCE'] : false;
+if ($since && strtotime($since) >= $latest) {
+    header('HTTP/1.0 304 Not Modified');
+    exit;
+}
+header('Last-Modified: ' .gmdate('D, d M Y H:i:s', $latest) . ' GMT');
+
+// This variable is used by the MathML filter so that we can make it do
+// different things with RSS feed output (basically it turns off everything
+// clever and uses an image).
+global $ou_feed_output;
+$ou_feed_output = true;
+
+// Check they still have permission to the forum.
+// Note that making these checks is a bit expensive so we might have
+// a performance concern, will deal with that later if needed. This is done
+// after the last-modified check so we can skip it if possible.
+if ($d) {
+    $discussion->require_view($userid);
+} else {
+    $forum->require_view($groupid, $userid);
+}
+
+// Unless the feed is of discussion titles only, you can't view it except
+// if you can view the content of discussions
+if ($feedtype != mod_forumng::FEEDTYPE_DISCUSSIONS &&
+    !$forum->can_view_discussions($userid)) {
+    print_error('feed_nopermission', 'forumng');
+}
+
+// Place data into standard format for atomlib/rsslib
+if ($d) {
+    $feedname = format_string($forum->get_name()) . ': ' .
+        format_string($discussion->get_subject());
+    $feedsummary = '';
+} else {
+    $feedname = format_string($forum->get_name());
+    $feedsummary = $forum->get_introduction();
+}
+
+$feeddata = array();
+if (isset($discussions)) {
+    foreach ($discussions as $discussion) {
+        $data = new stdClass;
+
+        $data->title = format_string($discussion->get_subject());
+        $data->description = '';
+        $data->author = $forum->display_user_name(
+            $discussion->get_poster());
+        $data->link = $discussion->get_url();
+        $data->pubdate = $discussion->get_time_modified();
+
+        $feeddata[] = $data;
+    }
+} else {
+    foreach ($posts as $post) {
+        $data = new stdClass;
+
+        // Title is post subject, if any...
+        $data->title = format_string($post->get_subject());
+        if ($data->title === null) {
+            $data->title = '';
+        }
+        // ...plus discussion subject (but not for discussion feed)
+        if (!$d) {
+            $data->title =
+                format_string($post->get_discussion()->get_subject()) .
+                ': ' . $data->title;
+        }
+
+        // Remaining details straightforward
+        $data->description = $post->get_formatted_message();
+        if ($post->get_asmoderator() == mod_forumng::ASMODERATOR_NO ||
+                $forum->can_post_anonymously()) {
+            $data->author = $forum->display_user_name($post->get_user());
+        } else {
+            $data->author = get_string('moderator', 'forumng');
+        }
+        $data->link = $post->get_url();
+        $data->pubdate = $post->get_modified();
+
+        $feeddata[] = $data;
+    }
+}
+
+// Now output all posts
+if ($rss) {
+    header('Content-type: application/rss+xml');
+    echo rss_standard_header($feedname, $url, $feedsummary);
+    echo rss_add_items($feeddata);
+    echo rss_standard_footer();
+} else {
+    header('Content-type: application/atom+xml');
+    $updated = count($feeddata)==0 ? time() : reset($feeddata)->pubdate;
+
+    if (trim($feedsummary) === '') {
+        $feedsummary = '';
+    } else {
+        // A valid atom feed requires plain text in the subtitle tag, or html if
+        // the subtitle tag contains the attribute type="html". This html option
+        // is not available in the atomlib, so lets convert html to text here.
+        $feedsummary = strip_tags($feedsummary);
+    }
+
+    echo atom_standard_header($FULLME , $FULLME, $updated, $feedname, $feedsummary);
+    echo atom_add_items($feeddata);
+    echo atom_standard_footer();
+}
diff --git a/mod/forumng/flag.xcf b/mod/forumng/flag.xcf
new file mode 100644
index 0000000000000000000000000000000000000000..3f299bb2dc830c9292d3a719a3f13c93abcf3639
GIT binary patch
literal 288834
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
T@~8h!<ZqS&{5O)n(F*(z{JTh2

literal 0
HcmV?d00001

diff --git a/mod/forumng/flagpost.php b/mod/forumng/flagpost.php
new file mode 100644
index 0000000..b4c0277
--- /dev/null
+++ b/mod/forumng/flagpost.php
@@ -0,0 +1,76 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Flags/unflags a post (AJAX or non-JS).
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Post ID
+$postid = required_param('p', PARAM_INT);
+$cloneid = optional_param('clone', mod_forumng::CLONE_DIRECT, PARAM_INT);
+
+// 1 = set flag, 0 = clear it
+$flag = required_param('flag', PARAM_INT);
+
+// If the ajax flag is set, this only changes the flag and does not redirect
+$ajax = optional_param('ajax', 0, PARAM_INT);
+
+// Optional back parameter
+$back = optional_param('back', 'discuss', PARAM_ALPHA);
+
+// Optional time-read parameter (this is used to preserve unread state when
+// redirecting back to the discussion
+$timeread = optional_param('timeread', 0, PARAM_INT);
+
+try {
+    // Get post
+    $post = mod_forumng_post::get_from_id($postid, $cloneid, true, true);
+
+    // Do all access security checks
+    $post->require_view();
+    if (!$post->can_flag()) {
+        print_error('error_nopermission', 'forumng');
+    }
+
+    // Change the flag
+    $post->set_flagged($flag);
+
+    // If it's ajax, that's done
+    if ($ajax) {
+        print 'ok';
+        exit;
+    }
+
+    // Redirect
+    if ($back == 'view') {
+        redirect($post->get_forum()->get_url(mod_forumng::PARAM_PLAIN));
+    } else {
+        redirect('discuss.php?' .
+            $post->get_discussion()->get_link_params(mod_forumng::PARAM_PLAIN) .
+            ($timeread ? '&timeread=' . $timeread : '') .
+            '#p' . $post->get_id());
+    }
+
+} catch (coding_exception $e) {
+    header('Content-Type: text/plain', true, 500);
+    print $e->getMessage();
+}
diff --git a/mod/forumng/form.js b/mod/forumng/form.js
new file mode 100644
index 0000000..7e15f72
--- /dev/null
+++ b/mod/forumng/form.js
@@ -0,0 +1,101 @@
+M.mod_forumng_form = {
+    Y : null,
+    finterval: null,
+    /**
+     * Main init function called from HTML.
+     *
+     * @param Y YUI object
+     */
+    init : function(Y) {
+        this.Y = Y;
+        Y.on("domready", this.dom_init, this);
+        if (!String.prototype.trim) {
+            String.prototype.trim = function() {
+                return this.replace(/^\s+/, '') . replace(/\s+$/, '');
+            };
+        }
+    },
+
+    /**
+     * Main initialisation done on DOM ready.
+     */
+    dom_init : function() {
+        var t = this;
+
+        // Function to get Unix time.
+        var get_unix_time = function() {
+            return Math.round((new Date()).getTime() / 1000);
+        };
+
+        // Check if there's a time limit.
+        var timelimitfield = t.Y.one('input[name=timelimit]');
+        var timelimit = 0;
+        if (timelimitfield) {
+            timelimit = Number(timelimitfield.get('value'));
+            timelimitinfo = t.Y.one('#id_editlimit');
+
+            // Set timers to change the info text at specific points.
+            var now = get_unix_time();
+            var delay = (timelimit - now) - 90;
+            setTimeout(function() {
+                // Text goes bold 90 seconds before timeout.
+                timelimitinfo.setHTML('<strong>' + timelimitinfo.getHTML() + '</strong>');
+            }, delay < 0 ? 0 : delay * 1000);
+            delay += 60;
+            setTimeout(function() {
+                // Use different text 30 seconds before timeout (when buttons
+                // are disabled).
+                timelimitinfo.setHTML('<strong>' + M.str.forumng.edit_timeout + '</strong>');
+                timelimitinfo.addClass('forumng-timeoutover');
+            }, delay < 0 ? 0 : delay * 1000);
+        }
+
+        // Periodic processing to enable/disable the submit button.
+        t.finterval = setInterval(function()
+        {
+            // Collect data for disabling buttons.
+            var submit = t.Y.one('#id_submitbutton');
+            var savedraft = t.Y.one('#id_savedraft');
+            var textarea = t.Y.one('#id_message');
+            if (textarea) {
+                var sourcetext = textarea.get('value');
+                if (textarea.getStyle('display') == 'none' && window.tinyMCE &&
+                        tinyMCE.activeEditor) {
+                    sourcetext = tinyMCE.activeEditor.getBody().innerHTML;
+                }
+
+                // Get rid of tags and nbsp as literal or entity, then trim.
+                var mungevalue = sourcetext.replace(/<.*?>/g, '').replace(
+                    /&(nbsp|#160|#xa0);/g, '') . replace(
+                        new RegExp(String.fromCharCode(160), 'g'), ' ') .
+                    replace(/\s+/, ' ') . trim();
+
+                // Allow an image even if no text.
+                if (sourcetext.indexOf('<img ') != -1) {
+                    mungevalue = 'gotimage';
+                }
+
+                // We will disable the button if there is no text.
+                var disable = mungevalue === '';
+
+                // When editing discussion first post, subject must also be not blank.
+                if (!disable && t.Y.one('#fitem_id_subject.required')) {
+                    if (t.Y.one('#id_subject').get('value').trim() === '') {
+                        disable = true;
+                    }
+                }
+
+                // When the editing time limit has expired, you cannot save.
+                if (timelimit && get_unix_time() > timelimit-30) {
+                    disable = true;
+                }
+
+                // Disable saving and also drafts.
+                submit.set('disabled', disable);
+                if (savedraft) {
+                    savedraft.set('disabled', disable);
+                }
+            }
+        }, 250);
+    }
+};
diff --git a/mod/forumng/history.php b/mod/forumng/history.php
new file mode 100644
index 0000000..6fb858a
--- /dev/null
+++ b/mod/forumng/history.php
@@ -0,0 +1,73 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Displays history of a single post.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Post ID
+$postid = required_param('p', PARAM_INT);
+$pageparams = array('p'=>$postid);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+// Get post
+$post = mod_forumng_post::get_from_id($postid, $cloneid, true);
+
+// Get convenience variables
+$discussion = $post->get_discussion();
+$forum = $post->get_forum();
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+// Init page
+$pagename = get_string('historypage', 'forumng', $post->get_effective_subject(true));
+$url = new moodle_url('/mod/forumng/history.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+// Do all access security checks
+$post->require_view();
+if (!$post->can_view_history($whynot)) {
+    print_error($whynot, 'forumng');
+}
+
+// Work out navigation for header
+print $out->header();
+
+// Print current post
+print '<h2>'. get_string('currentpost', 'forumng') . '</h2>';
+print $post->display(true, array(mod_forumng_post::OPTION_NO_COMMANDS=>true,
+        mod_forumng_post::OPTION_EXPANDED=>true));
+
+print '<h2>'. get_string('olderversions', 'forumng') . '</h2>';
+$oldversions = $post->get_old_versions();
+foreach ($oldversions as $oldpost) {
+    print $oldpost->display(true,
+        array(mod_forumng_post::OPTION_NO_COMMANDS=>true,
+            mod_forumng_post::OPTION_EXPANDED=>true,
+            mod_forumng_post::OPTION_FIRST_UNREAD=>true));
+}
+
+// Display footer
+print $out->footer();
diff --git a/mod/forumng/index.php b/mod/forumng/index.php
new file mode 100644
index 0000000..bd5e42d
--- /dev/null
+++ b/mod/forumng/index.php
@@ -0,0 +1,229 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Shows list of all forums on a course.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Require ID parameter for course
+$id = required_param('id', PARAM_INT);
+$pageparams = array('id' => $id);
+$course = $DB->get_record('course', array('id' => $id), '*', MUST_EXIST);
+
+require_login($course);
+
+// No additional parameters required for course view (hmm)
+
+// Get some strings
+$strforums = get_string('forums', 'forumng');
+$strforum = get_string('forum', 'forumng');
+$strdescription = get_string('description');
+$strsubscribed = get_string('subscribed', 'forumng');
+$strdiscussionsunread = get_string('discussionsunread', 'forumng');
+$strsubscribe = get_string('subscribeshort', 'forumng');
+$strunsubscribe = get_string('unsubscribeshort', 'forumng');
+$stryes = get_string('yes');
+$strno = get_string('no');
+$strpartial = get_string('partialsubscribed', 'forumng');
+$strfeeds = get_string('feeds', 'forumng');
+$strweek = get_string('week');
+$strsection = get_string('section');
+
+$coursecontext = context_course::instance($id);
+$canmaybesubscribe = (!isguestuser()
+    && has_capability('moodle/course:view', $coursecontext));
+
+// TODO Add search form to button
+$buttontext = '';
+
+// Display header
+$PAGE->set_url(new moodle_url('/mod/forumng/index.php', $pageparams));
+$PAGE->set_context($coursecontext);
+$PAGE->set_heading($course->fullname);
+$PAGE->navbar->add($strforums);
+
+$out = mod_forumng_utils::get_renderer();
+print $out->header();
+
+// Decide what kind of course format it is
+$useweeks = $course->format == 'weeks' || $course->format == 'weekscss';
+$usesections = $course->format == 'topics';
+
+// Set up table to include all forums
+$table = new html_table();
+$table->head  = array ($strforum, $strdescription, $strdiscussionsunread);
+$table->align = array ('left', 'left', 'center');
+if ($useweeks || $usesections) {
+    array_unshift($table->head, $useweeks ? $strweek : $strsection);
+    array_unshift($table->align, 'left');
+}
+if ($canmaybesubscribe) {
+    $table->head[] = $strsubscribed;
+    $table->align[] = 'center';
+}
+
+if ($showrss = (($canmaybesubscribe || $course->id == SITEID) &&
+    !empty($CFG->enablerssfeeds) && !empty($CFG->forumng_enablerssfeeds))) {
+    $table->head[] = $strfeeds;
+    $table->align[] = 'center';
+}
+
+// Construct forums array
+$forums = mod_forumng::get_course_forums($course, 0, mod_forumng::UNREAD_DISCUSSIONS,
+    array(), true);
+
+// Display all forums
+$currentsection = 0;
+$cansubscribesomething = false;
+$canunsubscribesomething = false;
+foreach ($forums as $forum) {
+    $cm = $forum->get_course_module();
+
+    // Skip forum if it's not visible or you can't read discussions there
+    if (!$cm->uservisible ||
+        !has_capability('mod/forumng:viewdiscussion', $forum->get_context())) {
+        continue;
+    }
+
+    $row = array();
+
+    // Get section number
+    if ($cm->sectionnum != $currentsection) {
+        $printsection = $cm->sectionnum;
+        // Between each section add a horizontal gap (copied this code,
+        // can't say I like it)
+        if ($currentsection) {
+            $learningtable->data[] = 'hr';
+        }
+        $currentsection = $cm->sectionnum;
+    } else {
+        $printsection = '';
+    }
+    if ($useweeks || $usesections) {
+        $row[] = $printsection;
+    }
+
+    if ($cm->visible) {
+        $style = '';
+    } else {
+        $style = 'class="dimmed"';
+    }
+
+    // Get name and intro
+    $row[] =   "<a href='view.php?id={$cm->id}' $style>" .
+        format_string($forum->get_name()) . '</a>';
+    $activity = (object) array('intro' => $forum->get_introduction(),
+            'introformat' => FORMAT_HTML);
+    $row[] = format_module_intro('forumng', $activity, $forum->get_course_module_id(true));
+
+    // Get discussion count
+    $discussions = $forum->get_num_discussions();
+    $unread = $forum->get_num_unread_discussions();
+    $row[] = "$discussions ($unread)";
+
+    $subscriptioninfo = $forum->get_subscription_info();
+    $subscribed = $subscriptioninfo->wholeforum || count($subscriptioninfo->discussionids) > 0 ||
+        count($subscriptioninfo->groupids) > 0;
+    if ($subscriptioninfo->wholeforum) {
+        // Subscribed to the entire forum.
+        $strtemp = $stryes;
+    } else if (count($subscriptioninfo->discussionids) == 0 &&
+            count($subscriptioninfo->groupids) == 0) {
+        $strtemp = $strno;
+    } else {
+        // Treat partial subscribe the same as subscribe on the index page
+        // but display 'Partial' instead of 'Yes'.
+        $strtemp = $strpartial;
+    }
+
+    // If you have option to subscribe, show subscribed and possibly
+    // subscribe/unsubscribe button
+    if ($canmaybesubscribe) {
+        $subscribetext = "<div class='forumng-subscribecell'>";
+        $subscribetext .= $strtemp;
+        $option = $forum->get_effective_subscription_option();
+        if ($forum->can_change_subscription()) {
+            if ($subscribed) {
+                // Here print unsubscribe button for full subscribed or partial subscribed forum.
+                $canunsubscribesomething = true;
+                $submitbutton = "<input type='submit' name='submitunsubscribe'
+                        value='$strunsubscribe'/>";
+            } else {
+                $cansubscribesomething = true;
+                $submitbutton = "<input type='submit' name='submitsubscribe'
+                        value='$strsubscribe'/>";
+            }
+            $subscribetext .= "&nbsp;" .
+                    "<form method='post' action='subscribe.php'><div>" .
+                    $forum->get_link_params(mod_forumng::PARAM_FORM) .
+                    "<input type='hidden' name='back' value='index' />" .
+                    $submitbutton . "</div></form>";
+        }
+        $subscribetext .= '</div>';
+        $row[] = $subscribetext;
+    }
+
+    // If this forum has RSS/Atom feeds, show link
+    if ($showrss) {
+        if ($type = $forum->get_effective_feed_option()) {
+            // Get group (may end up being none)
+            $groupid = mod_forumng::get_activity_group(
+                $forum->get_course_module(), false);
+
+            $row[] = $forum->display_feed_links($groupid);
+        } else {
+            $row[] = '&nbsp;';
+        }
+    }
+
+    $table->data[] = $row;
+}
+
+print html_writer::table($table);
+
+// 'Subscribe all' links
+if ($canmaybesubscribe) {
+    print '<div class="forumng-allsubscribe">';
+
+    $subscribedisabled = $cansubscribesomething ? '' : 'disabled="disabled"';
+    $unsubscribedisabled = $canunsubscribesomething ? '' : 'disabled="disabled"';
+
+    print "<form method='post' action='subscribe.php'><div>" .
+    "<input type='hidden' name='course' value='{$course->id}' />" .
+    "<input type='hidden' name='back' value='index' />" .
+    "<input type='submit' name='submitsubscribe' value='" .
+    get_string('allsubscribe', 'forumng') . "' $subscribedisabled/>" .
+    "<input type='submit' name='submitunsubscribe' value='" .
+    get_string('allunsubscribe', 'forumng') . "' $unsubscribedisabled/>" .
+    "</div></form> ";
+
+    print '</div>';
+}
+
+$params = array(
+        'context' => $coursecontext
+);
+$event = \mod_forumng\event\course_module_instance_list_viewed::create($params);
+$event->add_record_snapshot('course', $course);
+$event->trigger();
+
+print $out->footer();
diff --git a/mod/forumng/internaldoc/autolock.txt b/mod/forumng/internaldoc/autolock.txt
new file mode 100644
index 0000000..24f67b8
--- /dev/null
+++ b/mod/forumng/internaldoc/autolock.txt
@@ -0,0 +1,31 @@
+
+== OU ForumNG Auto Locking Feature ==
+
+=== Description ===
+
+This enhancement will allow discussions within a forum to be automatically locked (made read-only) after a specified amount of time,
+reducing the need for moderators to do this manually.
+
+
+=== Capability requirements ===
+
+The user needs the capability to access the ForumNG 'Edit settings' screen
+
+A user who has the capability ''mod/forumng:managediscussions'' and has access to the current forum
+can access the ForumNG 'Edit settings' screen
+
+=== Setting up auto locking ===
+
+Under 'ForumNG administration'
+Choose 'Edit Settings'
+Under 'Manage old discussions after'
+Set dropdown to the required time period
+Under 'Action or move discussions to'
+Set dropdown to 'Automatically lock'
+Save settings
+
+=== Note ===
+
+Each day that cron is run it will automatically re-lock any forum which has been unlocked after it was automatically locked.
+If you wish to keep forum discussion open beyond the locking time period revisit the forums 'Edit settings' page and change the time
+period of when automatic locking comes into force.
diff --git a/mod/forumng/internaldoc/testcase.autolock.txt b/mod/forumng/internaldoc/testcase.autolock.txt
new file mode 100644
index 0000000..41cd468
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.autolock.txt
@@ -0,0 +1,190 @@
+This file contains a sequence of test cases for the auto locking ForumNG feature.
+
+
+Each section has a unique (within this test case) three letter code and the
+steps are numbered so that the location where a failure occurs can be reported.
+
+Steps are shown in the following format:
+
+XXX01 / U.S1 [change]
+  Do something
+  - Check something
+
+The unique step number is followed by the user that you should be logged
+in as for that step. If the user changes from the previous step, the word
+[Change] will be noted.
+
+Some steps don't have specific items to check. In that case, the check
+'passes' if there are no errors or warnings while completing the task.
+
+When told to create a discussion or reply, you may wish to use the code number
+for that step inside the text of the discussion/reply. Occasionally, later
+steps might refer to the reply UNR03 or whatever.
+
+If you wish to fully test the feature you will need to have access to the relevant database.
+
+When asked to run cron from the browser the relevant url will be similar to
+http://oucu.testserver.open.ac.uk/ou-moodle2-directory/admin/cron.php
+
+Initial setup
+=============
+
+Please set up a standard test course as follows.
+
+Course short name
+-----------------
+
+FORUMTEST
+
+
+CRE Creating ForumNG
+====================
+
+CRE01 / admin
+  In any course week, from the add activity dropdown, choose 'ForumNG'. Leave
+  all settings as default except name 'F.WC' (whole course) and group setting
+  'No groups'. Save form and return to course.
+
+
+CRE02 / admin
+  Create 2 discussions within the forum
+
+CRE02 / admin
+  Post to each discussion
+  Reply to each post
+
+CRE03 / admin
+  Under 'ForumNG administration'
+  Choose 'Edit Settings'
+  Under 'Manage old discussions after'
+  Set dropdown to the required time period
+  Under 'Action or move discussions to'
+  Set dropdown to 'Automatically lock'
+  Save and display this should return you to the forum
+
+CRE04 / admin
+  Note: To continue to test you will need to have access to the relevant database
+  For test purposes the required time period should be set
+  Check to see if the removeto _forumng table field as been set to -1
+  Check to see if the removeafter _forumng table field as been set to 2592000+ (1 month)
+  Change the removeafter _forumng table field to 300 (5 minutes) and save
+  Find the name _config_plugin field which matches 'housekeepinglastrun' and the plugin field that matches 'forumng'
+  If the relevant value field is set for today's date in the format of 'yyyy-mm-dd' change the date to an earlier date in the same
+  format and save
+
+CRE05 / admin
+  Under 'Site administration' on the left hand side of any page
+  Click on 'Plugins'
+  Choose 'Activity modules'
+  Click on ForumNG
+  In the ForumNG admin page
+  Set 'Start hour of archiving' dropdown to 0 if not already set to 0  (default 0)
+  Set 'Stop hour of archiving' dropdown to 23 if not already set to 23 (default 5)
+  Save changes
+
+TAL Testing auto-locking
+========================
+
+TAL01 / admin
+  Wait 5 minutes and run cron from the web browser
+  The relevant url is /admin/cron.php
+  A message similar to below should be displayed within the cron output
+
+Beginning processing 2 discussion archiving/deleting requests
+
+ 0 discussions have been archived and 0 discussions have been deleted permanently and 2 discussions have been automatically locked
+... used 63 dbqueries
+... used 0.33172106742859 seconds
+done.
+
+TAL02 / admin
+  Return to the forumng set up above
+  Both discussions should have a locked symbol against them
+  Open both discussions to check that they are locked
+  There should be the following messages at the top of the posts
+
+"This discussion is now closed
+
+This discussion has been closed automatically as the maximum time permitted to be open has passed."
+
+TAL03 / admin
+  Expand the posts to check that you can not reply
+
+TAL04 / admin
+  Unlock the discussions
+  Check that you can reply, etc.
+
+NOTE : Each day that cron is now run it will automatically re-lock any forum that is set to be automatically locked.
+If you wish to keep forum discussion open beyond the locking time period revisit the forums 'Edit settings' page and change the time
+period of when automatic locking comes into force.
+
+TAL05 / admin
+  Under 'ForumNG administration'
+  Choose 'Edit Settings'
+  Under 'Manage old discussions after'
+  Set dropdown to one month time period
+  Under 'Action or move discussions to'
+  Set dropdown to 'Automatically lock'
+  Save and display this should return you to the forum
+
+TAL06 / admin
+  Find the name _config_plugin field which matches 'housekeepinglastrun' and the plugin field that matches 'forumng'
+  If the relevant value field is set for today's date in the format of 'yyyy-mm-dd' change the date to an earlier date in the same
+  format and save
+  Rerun cron and check that the discussions are not locked
+
+ TAL07 / admin
+  Amend the _forumng table
+  Check to see if the removeafter _forumng table field as been set to 2592000+ (1 month)
+  Change the removeafter _forumng table field to 300 (5 minutes) and save
+  Find the 'name' _config_plugin field which matches 'housekeepinglastrun' and the plugin field that matches 'forumng'
+  If the relevant value field is set for today's date in the format of 'yyyy-mm-dd' change the date to an earlier date in the same
+  format and save
+
+TAL08 / admin
+  Go to the discussion pages and manually lock the discussions.
+  You will be invited to lock the discussion with a post message.
+  Enter a relevant message such as 'Manually locked' and lock the discussion.
+  Once locked a top post will appear with the following title 'This discussion is now closed'
+  and your locked message
+
+TAL09 / admin
+  Wait 5 minutes and run cron from the web browser
+  A message similar to below should be displayed within the cron output
+
+Beginning processing 2 discussion archiving/deleting requests
+
+ 0 discussions have been archived and 0 discussions have been deleted permanently and 0 discussions have been automatically locked
+... used 63 dbqueries
+... used 0.33172106742859 seconds
+done.
+
+TAL10 / admin
+  Go to the formng page
+  Check that the discussions are still manually locked
+
+TAL11 / admin
+  Unlock both discussions
+  Delete both discussions
+
+TAL12 / admin
+  Amend the _forumng table
+  Change the removeafter _forumng table field to 300 (5 minutes) and save
+  Find the 'name' _config_plugin field which matches 'housekeepinglastrun' and the plugin field that matches 'forumng'
+  If the relevant value field is set for today's date in the format of 'yyyy-mm-dd' change the date to an earlier date in the same
+  format and save
+
+TAL13 / admin
+  Wait 5 minutes and run cron from the web browser
+  A message similar to below should be displayed within the cron output
+
+Beginning processing 2 discussion archiving/deleting requests
+
+ 0 discussions have been archived and 0 discussions have been deleted permanently and 0 discussions have been automatically locked
+... used 63 dbqueries
+... used 0.33172106742859 seconds
+done.
+
+TAL14 / admin
+  Check to see that both discussions do not have a locked icon marker against them, and that they are still marked as deleted
+  with their discussion names greyed out and struck through
diff --git a/mod/forumng/internaldoc/testcase.export.txt b/mod/forumng/internaldoc/testcase.export.txt
new file mode 100644
index 0000000..46ec80c
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.export.txt
@@ -0,0 +1,130 @@
+This file contains a sequence of test cases for the ForumNG Export feature.
+
+Initial setup
+=============
+
+See testcase.txt for a description of the format of these tests and the initial
+site and ForumNG setup. Only one forum is required. Two discussion will need to
+be setup, as follows:
+
+D1 - a discussion containing two or more posts and they contain only text.
+D2 - a discussion containing two posts. One post has an embedded image and the
+other post has an attachement.
+
+
+ETD Discussion - Text posts only
+================================
+
+ETD01
+  Open discussion D1 and scroll to the end of the list of posts. You will see
+  an Export button.
+
+ETD02
+  Press the Export button. A popup appears asking what you want to export, choose
+  Discussion. A page is shown asking you to select your export type.
+
+ETD03
+  Choose 'File download' in the drop-down box and click 'Next'. If this is the
+  first export from this discussion you will be taken straight to the save file
+  dialogue box, otherwise you will see the page that lists previous exports and
+  asks you to confirm you want to export, choose Continue to be taken to the save
+  file dialogue box.
+
+ETD04
+  Confirm that the file you have downloaded is a HTML file and when opened in
+  a browser you will see all the posts in the discussion.
+
+** PASSED 2012-01-25
+
+
+ETS Selected - Text posts only
+==============================
+
+ETS01
+  Open discussion D1 and scroll to the end of the list of posts. You will see
+  an Export button.
+
+ETS02
+  Press the Export button. A popup appears asking what you want to export, choose
+  Selected posts. Select one of the two posts in D1 and then click on
+  Confirm selection at the bottom of the list of posts. A page is shown asking
+  you to select your export type.
+
+ETS03
+  Choose 'File download' in the drop-down box and click 'Next'. If this is the
+  first export from this discussion you will be taken straight to the save file
+  dialogue box, otherwise you will see the page that lists previous exports and
+  asks you to confirm you want to export, choose Continue to be taken to the save
+  file dialogue box.
+
+ETS04
+  Confirm that the file you have downloaded is a HTML file and when opened in
+  a browser you will see the posts you selected.
+
+** PASSED 2012-01-25
+
+
+EAD Discussion - Embedded image
+===============================
+
+EAD01
+  Open discussion D2 and scroll to the end of the list of posts. You will see
+  an Export button.
+
+EAD02
+  Press the Export button. A popup appears asking what you want to export, choose
+  Discussion. A page is shown asking you to select your export type.
+
+EAD03
+  Choose 'File download' in the drop-down box and click 'Next'. If this is the
+  first export from this discussion you will be taken straight to the save file
+  dialogue box, otherwise you will see the page that lists previous exports and
+  asks you to confirm you want to export, choose Continue to be taken to the save
+  file dialogue box.
+
+EAD04
+  Confirm that the file you have downloaded is a zip file and that it contains a
+  HTML file along with the embedded images and attachements that are in the posts
+  of this discussion.
+
+EAD05
+  Extract the contents of the downloaded zip file to a temporary location and open
+  the HTML file in your browser. You should see all the posts in the discussion
+  and the embedded image should be visible. If you click the link to the attached
+  file it will open up.
+
+** PASSED 2012-01-25
+
+
+EAS Selected - Embedded image
+=============================
+
+EAS01
+  Open discussion D2 and scroll to the end of the list of posts. You will see
+  an Export button.
+
+EAS02
+  Press the Export button. A popup appears asking what you want to export, choose
+  Selected posts. Select one of the two posts in D2 and then click on
+  Confirm selection at the bottom of the list of posts. A page is shown asking
+  you to select your export type.
+
+EAS03
+  Choose 'File download' in the drop-down box and click 'Next'. If this is the
+  first export from this discussion you will be taken straight to the save file
+  dialogue box, otherwise you will see the page that lists previous exports and
+  asks you to confirm you want to export, choose Continue to be taken to the save
+  file dialogue box.
+
+EAS04
+  Confirm that the file you have downloaded is a zip file and that it contains a
+  HTML file along with the embedded images or attachements that are in the posts
+  you selected.
+
+EAD05
+  Extract the contents of the downloaded zip file to a temporary location and open
+  the HTML file in your browser. You should see all the posts you selected and the
+  embedded image should be visible. If you click the link to the attached file it
+  will open up.
+
+** PASSED 2012-01-25
diff --git a/mod/forumng/internaldoc/testcase.masterforumngrestore.txt b/mod/forumng/internaldoc/testcase.masterforumngrestore.txt
new file mode 100644
index 0000000..f4396a7
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.masterforumngrestore.txt
@@ -0,0 +1,162 @@
+This file contains a sequence of test cases for the auto locking ForumNG feature.
+
+
+Each section has a unique (within this test case) three letter code and the
+steps are numbered so that the location where a failure occurs can be reported.
+
+Steps are shown in the following format:
+
+XXX01 / U.S1 [change]
+  Do something
+  - Check something
+
+The unique step number is followed by the user that you should be logged
+in as for that step. If the user changes from the previous step, the word
+[Change] will be noted.
+
+Some steps don't have specific items to check. In that case, the check
+'passes' if there are no errors or warnings while completing the task.
+
+When told to create a discussion or reply, you may wish to use the code number
+for that step inside the text of the discussion/reply. Occasionally, later
+steps might refer to the reply UNR03 or whatever.
+
+
+Initial setup
+=============
+
+Site Administration > Plugins > Activity modules > ForumNG
+
+check 'Show ID numbers'
+check 'Enable advanced features'
+click 'Save changes'
+
+Please set up a standard test course as follows.
+
+Course short name
+-----------------
+Create course (OU Website)
+Create Module website
+Set Module code to CR100
+Set Pres code to 13K
+Under Unapproved modules
+click against 'Allow modules that are not yet approved in CIRCE'
+click against 'Add to vl_v_crs_version_pres (developers only)'
+Create website
+
+CRE Creating ForumNG for Course CR100
+===================================
+
+CRE01 / admin
+ In course week 1, from the add activity dropdown, choose 'ForumNG'.
+
+ Create a forumNG MST1 (title and description)
+ Check against Forum sharing 'Allow forum to be shared'
+ Set 'Group mode' to 'No groups'
+ Enter an ID number MST1
+ Click against 'Save and display'
+
+Note : Equally the MST1 forumNG ID number can be set by
+ Navigation > course code > Reports > ID Numbers
+ to set an ID number for the forum
+
+CRE02 / admin
+ Open Forum MST1
+ Add discussion D1 (subject)
+ In Message type 'D1
+ Post Discussion
+
+CRE03 / admin
+ Add discussion D2 (subject)
+ In Message type 'D2
+ Post Discussion
+
+CRE04 / admin
+ In course week 2, from the add activity dropdown, choose 'ForumNG'.
+ Create forumNG Clone 1 (title and description)
+ Under 'Forum Sharing'
+ Tick check box against 'Clone existing forum'
+ Enter 'MST1' in the text field next to the check box.
+ Save and Display
+
+CRE05 / admin
+ This should display the D1 and D2 discussions.
+ Return to main course page
+
+CRE06 / admin
+ In course week 2, from the add activity dropdown, choose 'ForumNG'.
+
+ Create a forumNG MST2 (title and description)
+ Check against Forum sharing 'Allow forum to be shared'
+ Set 'Group mode' to 'No groups'
+ Enter an ID number AUTO_MST2
+ Click against 'Save and display'
+
+CRE07 / admin
+ Open Forum MST2
+ Add discussion D3 (subject)
+ In Message type D3
+ Post Discussion
+
+CRE08 / admin
+ Add discussion D4 (subject)
+ In Message type D4
+ Post Discussion
+
+CRE09 / admin
+ In course week 3, from the add activity dropdown, choose 'ForumNG'.
+ Create forumNG Clone 2 (title and description)
+ Under 'Forum Sharing'
+ Tick check box against 'Clone existing forum'
+ Enter 'AUTO_MST2' in the text field next to the check box.
+ Save and Display
+
+CRE10 / admin
+ This should display the D3 and D4 discussions.
+
+Testing Improved ForumNG Master/clone Restoring
+===============================================
+
+TST01 / admin
+ Return to main course page
+ Under 'Course Administration'
+ Click against 'Backup'
+ Perform the backup
+
+TST02 / admin
+ Once the course has been backed up
+ Return to main course page
+ Under 'Course Administration'
+ Click against 'Restore'
+ Choose the backup file in the 'Course backup area' by clicking on the 'Restore' link by the file's name
+ Restore has a new course choosing a category to place the course in.
+ When prompted to enter a shortname type in 'CR200-13K'
+ Perform restore.
+
+TST03 / admin
+ Click against MST1 in week 1
+ This should contain discussions D1 and D2
+ Check MST 1 does not have any clones, and carries an id of MST1_1
+
+TST04 / admin
+ Click against MST1 in week 2
+ Check that MST1 Clone points to MST1 on course CR100 - and we can alter/add discussions.
+
+TST05 / admin
+ Click against MST2 in week 2
+ Check MST2 points to MST2 clone on this course CR200 and carries an id of AUTO_MST2_1
+ Click against the link on
+ 'This forum is shared under the name AUTO_MST2_1 for use in other courses. It is included in the following: CR200-13K(_n).'
+ or click against MST2 in week 3
+
+TST06 / admin
+ Check MST2 Clone points to MST2 on this course CR200
+ Add a discussion D6
+ Click on the original forum link which should take you to MST2 in week 2
+ Check that MST2 in week 2 has D6 added to it.
+
+TST07 / admin
+Repeat TST01 through TST06
+Backup course CR200-13K and restore as CR300-13K
+Check all suffix have been incremented to _2
+Check we can add discussions to all forums as per the tests above and that the discussions should appear in their correct forums.
diff --git a/mod/forumng/internaldoc/testcase.moderation.txt b/mod/forumng/internaldoc/testcase.moderation.txt
new file mode 100644
index 0000000..7b76a15
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.moderation.txt
@@ -0,0 +1,682 @@
+This script describes steps to test the moderator facility from the moderator and student user
+perspective. It is intended to cover most of the UI and features.
+
+NOTE: In this test case, the word 'forum' always refers to the OU ForumNG.
+
+The test steps in this script follow on from each other and aren't independent.
+
+
+Initial setup
+=============
+
+See testcase.txt for a description of the format of these tests.
+This test deals with the forum user interface, only these instructions will be required.
+
+Only two fora are required. A number of discussions will need to be setup, as follows:
+
+Moderator not enabled discussion, a discussion containing post replies.
+Moderator enabled discussion containing post replies.
+
+Users and groups
+----------------
+
+U.S1 - student 1. Ensure the user profile 'Email digest type' is set to
+'Complete (daily email with full posts)'.
+U.ET - editing teacher, not in a group.
+Ensure that the email account for each user is accessible during testing.
+
+The test script also refers to the user 'Admin' (the Admin user).
+Ensure that each user has a Profile Picture too.
+
+
+CRE Creating ForumNG
+====================
+
+CRE01 / Admin
+   In course week one, from the add activity dropdown, choose 'ForumNG'.
+   Leave all settings as default except name and introduction,
+   as name enter 'F.AMNE', and introduction enter,
+   'Anonymous Moderation not enabled. No anonymous moderator posts, but Moderators should be flagged.'.
+-  Confirm that the General form contains a check box 'Enable anonymous moderator posts', with help.
+   Click 'Save and display' and return to the new course forum.
+-  Confirm creation of new empty forum with the introduction as entered above.
+
+Return to course main page.
+
+CRE02 / Admin
+   In course week one, from the add activity dropdown, choose 'ForumNG'.
+   Leave all settings as default except name and introduction
+   as name  enter 'F.AME' and as introduction enter,
+   'Anonymous Moderation is enabled. Moderators may post anonymously, but should be flagged.'.
+-  Confirm that the General form contains a check box 'Enable anonymous moderator posts', with help.
+   Click the check box to 'Enable anonymous moderator posts'.
+   Click 'Save and display' and return to the new course forum.
+-  Confirm creation of new empty forum with the introduction as entered above.
+
+Return to course main page.
+
+BUN Basic usage
+===============
+
+BUN01 / U.ET
+   Enter the course and click to enter forum 'F.AMNE'.
+-  Verify that there is a 'Start a new discussion' button, with text beneath,
+   'There are no discussions in this forum yet.'
+
+BUN02 / U.ET
+   Click the 'Start a new discussion' button.
+-  You should be taken to a new page with a form for starting a discussion.
+-  Confirm that 'Post as', is available as the last option on this page, and that
+   the drop down options are 'Standard Post', and 'Identify self as moderator'.
+
+BUN03 / U.ET
+   Type 'F.AMNE Teacher UET discussion 1 BUN03' in subject and add the message
+   'BUN03 This is the first standard post by Teacher UET.',
+   hit the 'Post discussion' button.
+-  Verify that you are taken to the new discussion page and your message is shown.
+
+BUN04 / U.ET
+   Click the 'Reply' link beneath the first message.
+   Enter 'Moderating Teacher, standard post BUN04' as subject and the message text
+   'BUN04 Teacher added as a standard post with one other choice.',
+   hit the 'Post reply' button.
+-  Verify that you are returned to the discussion page showing your reply.
+   You should have one discussion post and your reply post appearing, each with a standard
+   user description block to the left of the post.
+
+BUN05 / U.ET
+   Click the 'Reply' link beneath your original message.
+   Enter 'Teacher identifing self as moderator post BUN05' as subject and the message text
+   'BUN05 Teacher added a reply post as moderator with one other choice.'
+   In the 'Post as' selector choose the second option, 'Identify self as moderator',
+   hit the 'Post reply' button.
+-  You should have one discussion and two replys appearing.
+-  Verify that the second reply BUN05 identifying the U.ET teacher as moderator has the addition
+   of 'Moderator' to the user description block to the left of the post.
+
+Return to the forumng view page.
+
+BUN06 / U.ET
+-  Confirm that the main page discussion list shows that the discussion entry under 'Started by'
+   has a User image icon and that the teacher name is visible.
+-  Confirm that the 'Last post' entry is dated and that the U.ET teacher name is visible,
+   as is the text flag 'Moderator'.
+
+BUN07 / U.ET
+   Click the 'Start a new discussion' button.
+-  You should be taken to a new page with a form for starting a discussion.
+
+BUN08 / U.ET
+   Enter 'F.AMNE Teacher UET discussion 2 BUN08' in subject and the message
+   'BUN08 This is the second discussion posted by Teacher UET, identifing self as moderator post.
+   Teacher added this post as moderator with one other choice.'
+   In the 'Post as' selector choose the second option, 'Identify self as moderator'
+   and hit the 'Post discussion' button.
+-  Verify that you are taken to the new discussion page and your message is shown.
+-  Verify the addition of 'Moderator' to the user description block to the left of the post.
+
+BUN09 / U.ET
+   Click the 'Reply' link beneath this message.
+   Enter 'Moderating Teacher, standard post BUN09' as subject and the message text
+   'BUN09 Teacher added as a standard post with one other choice.',
+   hit the 'Post reply' button.
+-  Verify that you are returned to the discussion page showing your reply.
+   You should have one discussion and your reply appearing.
+
+BUN10 / U.ET
+   Click the 'Reply' link beneath this second message BUN09.
+   Enter 'Teacher identifing self as moderator post BUN10' as subject and the message text
+   'BUN10 Teacher added a reply post as moderator with one other choice.'
+   In the 'Post as' selector choose the second option, 'Identify self as moderator',
+   hit the 'Post reply' button.
+-  You should have one discussion post and two post replies appearing.
+-  Verify that this second reply identifying the teacher as moderator has the addition of 'Moderator'
+   to the user description block to the left of the post.
+
+Return to the forumng view page.
+
+BUN11 / U.ET
+-  Confirm that the main page discussion list shows that each discussions entry under 'Started by'
+   has a image icon and that the user name is visible, and that 'discussion 2 BUN08'
+   also has 'Moderator' after the username.
+-  Confirm that the 'Teacher UET discussion 2 BUN08' discussion's 'Last post' entry is dated and that
+   both user name and the 'Moderator' flag are visible.
+
+BUN12 / US.1 [Change]
+   Go to the course and click to enter into 'F.AMNE'.
+-  Verify that there is a 'Start discussion' button and two discussions started by teacher uet.
+-  Confirm that the main page discussion list shows that each discussions entry under 'Started by'
+   has an image icon and that the user name is visible.
+-  Confirm that 'discussion 2 BUN08' also has 'Moderator' after the user name.
+-  Confirm that the 'Last post' entries are dated and that the user name is also visible as is
+   the 'Moderator' flag.
+
+BUN13 / US.1
+   Click the 'Start a new discussion' button.
+-  You should be taken to a new page with a form for starting a discussion.
+-  Confirm that 'Attachments' is the last option on this page.
+-  Confirm that there is no 'Post as' selector available to students.
+
+BUN14 / US.1
+   Type 'Student non moderator discussion 1 BUN14' in subject and a message text
+   'BUN14 Student added as standard post with no other options.', and then
+   hit the 'Post discussion' button.
+-  Verify that you are taken to the new discussion page and your message is shown,
+   with a standard user description block to the left of the post.
+
+Return to forum main page.
+
+BUN15 / US.1
+   Click to enter discussion 'F.AMNE Teacher UET discussion 1 BUN03'.
+-  Confirm that only the third post 'Teacher identifing self as moderator post BUN05'
+   is identified as being from a moderator in the user details block to the left of the post.
+
+BUN16 / US.1
+   Click reply beneath this single moderator post.
+-  Confirm that the post entry form does not offer the student the 'Post as' option selector.
+   Enter the post subject as 'Student 1 reply to moderator post BUN16'.
+   Enter the message as 'BUN16 Student added as standard post with no other choices.',
+   hit the 'Post reply' button.
+-  Verify that you are returned to the discussion page showing your reply in the correct location.
+
+Return to forum main page.
+
+BUN17 / US.1
+-  Confirm that the main page discussion list shows that each discussions entry under 'Started by'
+   has a image icon and that the user name is visible.
+-  Confirm that 'discussion 2 BUN08' also has 'Moderator' after the user name.
+-  Confirm that the 'Last post' entries are dated and that the user name is also visible.
+-  Verify that the 'Last post' entry against 'discussion 1 BUN03' is the student user name.
+-  Verify that the 'Last post' entry against 'discussion 2 BUN08' is the uet user flagged as 'Moderator'.
+
+BUN18 / US.1
+   Click the 'Subscribe' button to ensure that test student user recieves the
+   Email digest complete with full posts.
+
+Return to course main page.
+
+BUM Basic usage anonymous moderated
+===================================
+
+BUM01 / U.ET [Change]
+   Enter the course and click into forum 'F.AME'.
+-  Confirm that the introduction is 'Anonymous Moderation is enabled. Moderators may post anonymously,
+   but should be flagged.'
+-  Verify that there is a 'Start a new discussion' button, with text beneath,
+   'There are no discussions in this forum yet.'
+
+BUM02 / U.ET
+   Click the 'Start a new discussion' button.
+-  You should be taken to a new page with a form for starting a discussion.
+-  Confirm that 'Post as', is available as the last option on this page, and that
+   the drop down options are 'Standard Post', 'Identify self as moderator' and
+   'Post anonymously as moderator'.
+
+BUM03 / U.ET
+   Type 'F.AME Teacher UET anonymous moderator discussion 1 BUM03' in subject and a message
+   'BUM03 This is the first moderator post by Teacher UET.'
+   In the 'Post as' selector choose the second option, 'Identify self as moderator' and
+   hit the 'Post discussion' button.
+-  Verify that you are taken to the new discussion page and your message is shown.
+-  Verify that the user description block to the left of the post contains the text 'Moderator'
+   beneath the teacher name.
+
+BUM04 / U.ET
+   Click the 'Reply' link beneath this first moderator discussion post.
+   Enter 'Moderating Teacher, standard post BUM04' as subject and the message text
+   'Teacher added as a standard post but with two other choices BUM04.',
+   hit the 'Post reply' button.
+-  Verify that you are returned to the discussion page showing your reply.
+   You should have one discussion post and one reply post appearing.
+-  Verify that the user description block to the left of the post second does not contain 'Moderator'
+   beneath the uet teacher name.
+
+BUM05 / U.ET
+   Click the 'Reply' link beneath your original post.
+   Enter 'Anonymous Teacher moderator posting 1 BUM05' as subject and the message text
+   'Teacher added a reply post as anonymous moderator but had two other choices BUM05.'
+   In the 'Post as' selector choose the third option, 'Post anonymously as moderator' and
+   hit the 'Post reply' button.
+-  You should have one discussion post and two post replies appearing.
+-  Verify that the last post begins with the line 'This is an anoymous post created by moderator uet username.'
+-  Verify that this second reply identifying the poster as an anonymous moderator has
+   only the user image icon, the text 'Moderator' and the date in the user description block
+   to the left of this post.
+
+Return to the forumng view page.
+
+BUM06 / U.ET
+-  Confirm that the forum view discussion list shows that the discussion entry under 'Started by'
+   has a user image and that the teacher name is visible with the text 'Moderator' beneath.
+-  Confirm that the 'Last post' entry is dated and that the teacher name is also visible and
+   has the text 'Moderator' underneath.
+
+BUM07 / U.ET
+   Click the 'Start a new discussion' button.
+-  You should be taken to a new page with a form for starting a discussion.
+
+BUM08 / U.ET
+   Enter 'F.AME Teacher UET anonymous moderator discussion 2 BUM08' in subject and a message
+   'BUM08 This is the second discussion posted by Teacher UET, as an anonymous moderator.
+   The teacher added this post as moderator with two other choices.'
+   In the 'Post as' selector choose the third option, 'Post anonymously as moderator'
+   and hit the 'Post discussion' button.
+-  Verify that you are taken to the new discussion page and your message is shown.
+-  Verify the post begins with the line 'This is an anonymous post created by moderator uet username.'
+-  Verify that the post has the only the image icon, the text 'Moderator' and the date
+   in the user description block to the left of the post.
+
+BUM09 / U.ET
+   Click the 'Reply' link beneath this message post.
+   Enter 'Moderating Teacher, standard post BUM09' as subject and the message text
+   'BUM09 Teacher added as a standard post with two other choices.', and
+   hit the 'Post reply' button.
+-  Verify that you are returned to the discussion page showing your reply.
+   You should have one discussion post and your reply post appearing.
+-  Verify that the post has the image icon, the teacher name and the date
+   in the user description block to the left of the post.
+
+BUM10 / U.ET
+   Click the 'Reply' link beneath this second message post.
+   Enter 'Teacher identifing self as moderator post BUM10' as subject and the message text
+   'BUM10 Teacher added a reply post as moderator with two other choices.'
+   In the 'Post as' selector choose the second option, 'Identify self as moderator', and
+   hit the 'Post reply' button.
+-  You should have one discussion post and two post replies appearing.
+-  Verify that the second reply identifying the teacher as moderator has the addition of 'Moderator'
+   to the user description block to the left of the post.
+
+BUM11 / U.ET
+   Click the 'Reply' link beneath the original message.
+   Enter 'Teacher, standard post BUN11.' as subject and the message text
+   'Teacher added as a standard post with two other choices BUN11.',
+   hit the 'Post reply' button.
+-  Verify that you are returned to the discussion page showing your reply in the correct location.
+   You should have one discussion post and your three teacher reply posts appearing.
+
+BUM12 / U.ET
+   Click the 'Reply' link beneath this last message.
+   Enter 'Anonymous teacher as moderator post BUM12' as subject and the message text
+   'Teacher added a reply post as an anonymous moderator with two other choices BUM12.'
+   In the 'Post as' selector choose the third option, 'Post anonymously as moderator', and
+   hit the 'Post reply' button.
+-  Verify the post begins with the line 'This is an anoymous post created by moderator uet username.'
+-  Verify that the post has only the image icon, the text 'Moderator' and the date
+   in the user description to the left of the post.
+
+BUM13 / U.ET
+   Click 'Expand all posts'.
+   Click the 'Edit' link beneath the second message, 'Moderating Teacher, standard post BUM09'.
+   Add this text to the message. 'This message was edited by the teacher as part of test BUM13.'
+   hit the 'Save changes' button.
+-  Verify that the user description block to the left of the post, has been extended to include
+   'Edited by the author on' and the date, with a (History) link beneath.
+
+BUM14 / U.ET
+   Click the 'Edit' link beneath the original message, 'F.AME Teacher UET anonymous moderator discussion 2 BUM08'.
+   Add this text 'This message was edited by the teacher as part of test BUM14.' to the message,
+   hit the 'Save changes' button.
+-  Verify that the user description block to the left of the post, has been extended to include
+   'Edited by the author on' and the date, with a (History) link beneath.
+
+Return to the forumng view page.
+
+BUM15 / U.ET
+-  Confirm that the forum view page discussion list shows that each discussions entry under 'Started by'
+   has an image icon and that the user name is visible and that it is followed by 'Moderator'.
+-  Confirm that the 'Last post' entry is dated and that the user name is also visible, and that
+   it is also followed by the text 'Moderator' .
+
+Return to the course main page.
+
+BUM16 / US.1 [Change]
+   Go to the course and click into forum 'F.AME'
+-  Verify that the introduction is 'Anonymous Moderation is enabled. Moderators may post anonymously,
+   but should be flagged.'
+-  Verify that there is a 'Start discussion' button.
+-  Confirm that there are two entries in the discussion list.
+-  Confirm that in 'discussion 1 BUM03' 'Started by' has the uet teacher user image and user name
+   with the text 'Moderator' beneath it.
+-  Confirm that in 'discussion 2 BUM08' 'Started by' is a placeholder image and the text 'Moderator'.
+-  Verify that the 'Last post' entry against both discussions is just dated and the text 'Moderator'.
+
+BUM17 / US.1
+   Click to enter discussion 'F.AME Teacher UET anonymous moderator discussion 1 BUM03'.
+-  Confirm that the second post 'Moderating Teacher, standard post BUM04' is not identified as being
+   from a moderator in the user description block to the left of the post.
+
+BUM18 / US.1
+   Click 'Reply' beneath the last moderator post, 'Anonymous Teacher moderator posting 1 BUM05'.
+-  Confirm that the post entry form does not offer the student the 'Post as' option selector.
+   Enter the post subject as 'Student 1 reply to moderator post BUM18'.
+   Enter the message as 'Student added as standard post with no other choices BUM18.',
+   hit the 'Post reply' button.
+-  Verify that you are returned to the discussion page showing your reply in the correct location.
+
+Return to forum view page.
+
+BUM19 / US.1
+-  Confirm that where the user name is visible, that user name is followed by 'Moderator',
+   and that the user picture is visible.
+-  Confirm that where the user name is not visible, that an image placeholder is followed by 'Moderator'.
+-  Confirm that the 'Last post' entries are dated.
+-  Verify that the 'Last post' entry against 'discussion 1 BUM03' is the student user name.
+-  Verify that the 'Last post' entry against 'discussion 2 BUM08' is just 'Moderator'.
+
+Return to course main page.
+
+BLD Basic lock discussions usage.
+=================================
+
+BLD01 / U.ET [Change]
+   Click 'F.AME' to enter the second forum.
+-  Confim that the forum view page shows all discussions, and that none are showing the padlock icon.
+
+BLD02 / U.ET
+   Click 'Lock discussions'.
+-  Confirm that the Lock page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and three buttons beneath:
+   'All discussions shown', 'Selected discussions' and 'Cancel'.
+
+BLD03 / U.ET
+   Click 'Selected discussions'.
+   You should be returned to the forum view page, with both discussions selectable by check box.
+   Click the check box by 'F.AME Teacher UET anonymous moderator discussion 1 BUM03'.
+   Click 'Confirm selection'.
+
+BLD04 / U.ET
+   Confirm that a 'Lock discussion(s)' form is displayed on the page, that the Subject has a default
+   entry, "This discussion is now closed"
+-  Confirm that there are two file addition areas, the second labeled Attachments.
+-  Confirm that there is a 'Mail soon' check box, with help.
+-  Confirm that 'Post as', is available as the last option on this page, and that
+   the drop down options are 'Standard Post', 'Identify self as moderator' and
+   'Post anonymously as moderator'.
+   Finally, confirm two buttons 'Lock discussion' and 'Cancel'.
+
+BLD05 / U.ET
+   Add to the subject entered ' identifing self as a moderator BLD05'.
+   Enter a message 'BLD05 regarding locking this discussion identify self as moderator'.
+   From the 'Post as' selector choose the second option 'Identify self as moderator'.
+   Click 'Lock discussion'.
+   Confirm that you are returned to the forum view page.
+-  Verify that the discussion 'F.AME Teacher UET anonymous moderator discussion 1 BUM03' is now
+   displaying the 'Lock' icon and that the 'Last post' entry against the discussion has changed
+   to U.ET user plus 'Moderator'.
+
+BLD06 / U.ET
+   Enter 'F.AME Teacher UET anonymous moderator discussion 1 BUM03'.
+   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed identifing self as a moderator BLD05' and the message entered
+   'BLD05 regarding locking this discussion identify self as moderator'.
+-  Verify that the user info block is visible to the left of the post,
+   and that it has the text 'Moderator' under the username.
+-  Verify that there is an 'Unlock' button on the right of the 'Discussion options' button
+   at the bottom of the screen, below the last post.
+
+Return to the forum view page.
+
+BLD07 / U.ET
+   Click 'Lock discussions'.
+-  Confirm that the Lock page opens with the text 'Do you want to include all
+   discussions listed on this page, or only selected discussions?' and three buttons beneath:
+   'All discussions shown', 'Selected discussions' and 'Cancel'.
+
+BLD08 / U.ET
+   Click 'All discussions shown'.
+   Confirm that a 'Lock discussion(s)' form is displayed on the page, that the subject has a default
+   entry, "This discussion is now closed"
+-  Confirm that there is a file addition area labeled 'Attachments'.
+-  Confirm that there is a 'Mail soon' check box, with help.
+-  Confirm that 'Post as', is available as the last option on this page, and that
+   the drop down options are 'Standard Post', and 'Identify self as moderator' and
+   'Post anonymously as moderator'.
+   Finally, confirm two buttons 'Lock discussion' and 'Cancel'.
+
+BLD09 / U.ET
+   Add to the subject entered ' anonymously by a moderator BLD09'.
+   Enter the message 'BLD09 regarding locking this discussion anonymously by a moderator.'.
+   From the 'Post as' selector choose the third option 'Post anonymously as moderator'.
+   Click 'Lock discussion'.
+   Confirm that you are returned to the forum view page.
+-  Verify that all discussions are now displaying the 'Lock' icon and that the 'Last post' against
+   'F.AME Teacher UET anonymous moderator discussion 2 BUN08' is now U.ET user name plus 'Moderator'.
+
+BLD10 / U.ET
+   Enter 'F.AME Teacher UET discussion 2 BUN08'.
+   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed' and the message entered
+   'BLD09 regarding locking all discussions anonymously by a moderator.'
+-  Verify that the user description block is visible to the left of the post.
+
+Return to course main page
+
+BLD11 / US.1 [change]
+   Click to enter forum 'F.AME'
+-  Verify that for 'discussion 1 BUM03', 'Started by' shows the U.ET user image and user name, with
+   the text 'Moderator' beneath and that 'Last post' shows the date and the U.ET user name, followed by 'Moderator'.
+-  Verify that 'discussion 2 BUM08', 'Started by' shows the image placeholder the text 'Moderator'
+   and that 'Last post' shows just the date and 'Moderator'.
+
+BLD12 / US.1
+   Enter 'F.AME Teacher UET anonymous moderator discussion 1 BUM03'.
+   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed identifing self as a moderator BLD05' and the message entered
+   'BLD05 regarding locking this discussion identify self as moderator'.
+-  Verify that the user description block is visible to the left of the post,
+   and that it has an image icon, the username, the text 'Moderator' and the date .
+
+Return to the forum view page.
+
+BLD13 / US.1
+   Enter 'F.AME Teacher UET anonymous moderator discussion 2 BUM08'.
+   Verify that the top discussion post is high-lighted and contains the title,
+   'This discussion is now closed anonymously by a moderator BLD09' and the message entered
+   'BLD09 regarding locking this discussion anonymously by a moderator'.
+-  Verify that the user description block is visible to the left of the post,
+   and that it has only the text 'Moderator' and the date.
+
+BLD14 / US.1
+   Confirm the the third post BUM09 has the text 'Edited by the author on' and a date,
+   visible beneath the user description block to the left of the post.
+
+Return to course main page
+
+Search forums
+=============
+
+SUM01 / US.1
+   Enter the forum 'F.AME'.
+   Click the arrow beside 'Search this forum'.
+-  Confirm that the 'Advanced search' page opens with the form containing search options.
+   Click in to 'Author name' search box and enter 'uet'.
+   Click 'Search this forum'.
+-  Verify that each result either contains 'uet' within the title, or
+   has the search word emboldened in the post text.
+-  Confirm that only the post 'F.AME Teacher UET anonymous moderator discussion 1 BUM03'
+   contains anonymous in the title.
+   Click the link to open this post.
+-  Verify that the user data box to the left of this post contains the user image and user name,
+   as well as the 'Moderator' text.
+[Note this test shows that the student user is not able to identify 'Anonymous' posters by searching
+for known usernames.]
+
+Return to course main page.
+
+SUM02 / UET  [change]
+   Enter forum 'F.AME''.
+   Click the arrow beside 'Search this forum'.
+-  Confirm that the 'Advanced search' page opens with the form containing search options.
+   Click in to 'Author name' search box and enter 'uet'.
+   Click 'Search this forum'.
+-  Verify that each result either contains 'uet' within the title, or
+   has the search word emboldened in the post text.
+-  Confirm that there are multiple posts which contain anonymous in the title.
+   Click the link to open the post 'F.AME Teacher UET anonymous moderator discussion 2 BUM08'.
+-  Verify that the user data box to the left of this post contains the user image and the 'Moderator' text.
+   but not the user name.
+-  Verify that the post contains the message 'This is an anoymous post created by moderator 'uet' username'
+   above the post title 'F.AME Teacher UET anonymous moderator discussion 2 BUM08'.
+[Note this test shows that the uet teacher user is able to identify 'Anonymous' posters by
+searching for usernames.]
+
+The next set of tests are to test the new 'Posted as moderator' search check box.
+Please note that since UET may have added other discussions within forum 'F.AME' this may also show up in the results.
+
+Return to course main page.
+
+SUM03 / UET
+   Enter forum 'F.AME''.
+   Create a discussion called 'Standard post'.
+   In the message enter the following text 'Standard post. test words are reply and edit'.
+   In the 'Post as?' drop down box select 'Standard post'.
+   Post discussion.
+
+SUM04 / UET
+   Enter forum 'F.AME''.
+   Create a discussion called 'Identify as moderator'.
+   In the message enter the following text 'Not hidden from students. test words are reply and edit'.
+   In the 'Post as?' drop down box select 'Identify as moderator'.
+   Post discussion.
+
+SUM05 / UET
+   Enter forum 'F.AME''.
+   Create a discussion called 'Identify as moderator but hide from students'.
+   In the message enter the following text 'Identify as moderator but hide from students. test words are reply and edit'.
+   In the 'Post as?' drop down box select 'Identify as moderator but hide from students'.
+   Post discussion.
+
+SUM06 / US.1 [change]
+   Enter the forum 'F.AME'.
+   Click the arrow beside 'Search this forum'.
+-  Confirm that the 'Advanced search' page opens with the form containing search options.
+   Click in to 'Search for' search box and enter 'reply'.
+   Click 'Search this forum'.
+   Verify that three recently created discussions are shown and the word 'reply' is emboldened in the post text.
+   Click against each of the discussion titles and verify that all,
+      but the 'Identify as moderator but hide from students' shows UET as the author.
+   The 'Identify as moderator but hide from students' discussion does not name the author but just says 'Moderator'.
+
+SUM07 / US.1
+   Enter the forum 'F.AME'.
+   Click the arrow beside 'Search this forum'.
+-  Confirm that the 'Advanced search' page opens with the form containing search options.
+   Click in to 'Search for' search box and enter 'reply'.
+   Check the 'Posted as Moderator' check box.
+   Click 'Search this forum'.
+   Verify that just the two discussions that UET posted as Moderator are shown.
+
+SUM08 / US.1
+   Enter the forum 'F.AME'.
+   Click the arrow beside 'Search this forum'.
+-  Confirm that the 'Advanced search' page opens with the form containing search options.
+   Check the 'Posted as Moderator' check box.
+   Click 'Search this forum'.
+   Verify that just the two discussions that UET posted as Moderator are shown.
+
+SUM09 / US.1
+   Enter the forum 'F.AME'.
+   Click the arrow beside 'Search this forum'.
+   Confirm that the 'Advanced search' page opens with the form containing search options.
+   Click in to 'author' search box and enter 'UET'.
+   Click 'Search this forum'.
+   Verify that just the two discussions entitled : 'Standard post' and 'Identify as moderator' are shown.
+   Verify the discussion entitled 'Identify as moderator but hide from students' is not shown.
+
+SUM10 / US.1
+   Enter the forum 'F.AME'.
+   Click the arrow beside 'Search this forum'.
+   Confirm that the 'Advanced search' page opens with the form containing search options.
+   Click in to 'author' search box and enter 'UET'.
+   Check the 'Posted as Moderator' check box.
+   Click 'Search this forum'.
+   Verify that just the discussion entitled : 'Identify as moderator' is shown.
+   Verify the discussions entitled 'Standard post' and 'Identify as moderator but hide from students' are not shown.
+
+EML Email
+=========
+NOTE: Before starting this section, check that both users (U.S1, U.ET)
+have email addresses set up that go to an email address that you can read.
+The text 'allowemail' must be added to the image alt field of the user's profile.
+When testing within the OU, note that developer servers will only send email
+to OU (@open.ac.uk) addresses.
+
+NOTE: This script uses the phrase 'trigger email sending' to indicate that you
+should make sure the system sends out emails at that point. You can manually
+trigger email sending by visiting the URL admin/cron.php in a browser when
+logged in as admin. It will probably be useful to use multiple browsers for
+this test (one to do the email sending, the other for everything else).
+
+NOTE: Running cron.php also runs periodic tasks for all other modules, not
+just ForumNG. Consequently, cron might be broken even if there is nothing wrong with ForumNG.
+You may also use the URL local/cronadmin/selectivecron.php?module=forumng
+which will only run over the forumng.
+
+EML01 / U.ET [change]
+   Trigger email sending [see above].
+-  Verify that you receive a digest email copy of F.AMNE and F.AME.
+   In the digest email, check the copy of 'Teacher UET anonymous moderator discussion 1',
+   against the view which the teacher sees in the browser.
+   It should be similar but in plain text format.
+-  Verify that the email does not include the
+   'Moderating Teacher, standard post' and 'Student 1 reply to teacher post'
+-  Verify that in email, the post 'Anonymous Teacher moderator posting 1' does not include
+   the moderator name.
+-  Verify that in email, the post 'Anonymous Teacher moderator posting 1' does not include
+   the message above the post 'This is an anonymous post created by moderator uet username}'
+-  Verify that the email 'From' address reflects who the poster is, except where the post is by an
+   anonymous moderator, in which case the senders name and email address should be,
+   'Moderator' <noreply@active.vle.server>. Where active.vle.server depends upon the VLE instance.
+
+EML02 / U.ET
+   In the digest email, check the copy of 'Teacher UET anonymous moderator discussion 2',
+   against the view which the teacher sees in the browser..
+-  Verify that the email version of the first post 'Teacher UET anonymous moderator discussion 2'
+   does not include the message above the post.
+   'This is an anonymous post created by moderator uet username'
+-  Verify that in email, the post 'Teacher UET anonymous moderator discussion 2' does not include
+   the moderator name, or the detail of the editing and the history link.
+
+EML03 / U.ET
+   In the digest email, check the copy of 'Anonymous teacher as moderator post',
+   against the view which the teacher sees in the browser, which is the last post.
+-  Verify that the email version of the last post 'Anonymous teacher as moderator post'
+   does not include the message above the post.
+   'This is an anonymous post created by moderator {teacher name}'.
+-  Verify that in email, the post 'Anonymous teacher as moderator post' does not include
+   the moderator name.
+
+
+Export discussion
+=================
+
+EXP01 / U.ET
+   Open forum 'F.AME Teacher UET anonymous discussion 2'.
+   Scroll to the end of the list of posts. You will see a row of buttons starting with
+   'Discussion options'.
+
+EXP02 / U.ET
+   Click the Export button. A popup appears asking what you want to export, choose
+   Discussion. A page is shown asking you to select your export type.
+
+EXP03 / U.ET
+  Choose 'File download' in the drop-down box and click 'Next'. If this is the
+  first export from this discussion you will be taken straight to the save file
+  dialogue box, otherwise you will see the page that lists previous exports and
+  asks you to confirm you want to export, choose Continue to be taken to the save
+  file dialogue box.
+
+EXP04 / U.ET
+-  Confirm that the file you have downloaded is a HTML file and when opened in
+   a browser you will see all the visible posts in the discussion.
+   Compare the exported HTML against the view which the teacher sees in the browser.
+
+EXP05 / U.ET
+-  Verify that the HTML version of the first post 'Teacher UET anonymous moderator discussion 2'
+   does not include the message above the post,
+   'This is an anonymous post created by moderator uet username'
+-  Verify that in HTML output, the post 'Teacher UET anonymous moderator discussion 2' does not include
+   the moderator name, or the editing history link.
+
+Test complete.
+==============
diff --git a/mod/forumng/internaldoc/testcase.oualerts.txt b/mod/forumng/internaldoc/testcase.oualerts.txt
new file mode 100644
index 0000000..745538a
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.oualerts.txt
@@ -0,0 +1,115 @@
+This file contains a sequence of test cases for the OU Alert ForumNG feature.
+
+Each section has a unique (within this test case) three letter code and the
+steps are numbered so that the location where a failure occurs can be reported.
+
+Steps are shown in the following format:
+
+XXX01 / U.S1 [change]
+  Do something
+  - Check something
+
+The unique step number is followed by the user that you should be logged
+in as for that step. If the user changes from the previous step, the word
+[Change] will be noted.
+
+Some steps don't have specific items to check. In that case, the check
+'passes' if there are no errors or warnings while completing the task.
+
+When told to create a discussion or reply, you may wish to use the code number
+for that step inside the text of the discussion/reply. Occasionally, later
+steps might refer to the reply UNR03 or whatever.
+
+Initial setup
+=============
+
+See testcase.txt for a description of the format of these tests and the initial
+site and ForumNG setup.
+
+Please set up a standard test course as follows.
+
+Course short name
+-----------------
+
+FORUMTEST
+
+CRE Creating ForumNG
+====================
+
+CRE01 / admin
+  In any course week, from the add activity dropdown, choose 'ForumNG'.
+  Call the Forum F1
+
+  In the edit settings form for the forum in the 'Email for reporting offensive posts' text field
+  enter 2 valid e-mail address separated by a semi-colon ';'
+  i.e. firstnamne.surname@open.ac.uk;initial.initial.surname@open.ac.uk
+
+  and make sure that group setting is set to  'No groups'. Save forum and return to course.
+
+CRE02 / admin
+  You need 2 users 'admin' and a student enrolled on the course and each one needs to be logged on in separate browser sessions.
+
+CRE03 / admin
+  Create a discussion called D1 containing one post.
+  Check to see that it has an 'Alert' button at the bottom of the post.
+
+CRE04 / student [Change]
+  Add a reply to the original post.
+
+CRE05 / admin [Change]
+  Reply to the CRE04 student post.
+
+TST Testing OU Alert feature for forumNG
+========================================
+
+TST01 / admin
+  Reply to the CRE05 admin post and under 'Post as?' dropdown 'identify self as moderator'.
+  Click on 'Post reply' button.
+  Check to see that the 'Alert' is not shown for that post.
+
+TST02 / student [Change]
+  Click against the Alert button of the CRE05 post.
+  When the report form comes up tick check box against a 'reason for the alert'.
+  Enter some text in the 'other information' text box.
+  Click against 'Send alert' button.
+
+TST03 / you [Change]
+  Check to see that the person(s) nominated to receive alert e-mails has received them.
+  Check for Item Title and ItemURL in the email, i.e.
+
+    Item Title: Re: discussion name
+    ItemURL: https://ouco.vled.open.ac.uk/ou-moodle2/mod/forumng/discuss.php?d=nnn#pnnnn
+
+  Click against the ItemURL:  https://ouco.vled.open.ac.uk/ou-moodle2/mod/forumng/discuss.php?d=nnn#pnnnn link.
+  Make sure that this take you to the post.
+
+TST04 / admin [Change]
+  Go to forum F1.
+  Under the heading on the left hand side block 'Administration'
+  Open up 'ForumNG Administration' if not already open.
+  Click against 'Manage reported post alerts'.
+  This should bring up a series of stats about the alert.
+  Module, Item, Item ID, Course,           Status,          Item Date,            Resolved Alerts, Unresolved Alerts
+  F1      post   nnnn     <course code>    'Need Action'    Day DD MM YYYY time       0                   1
+
+  To see how to use the OU Alert reporting tool check out the spec for it in the oualerts internaldoc directory.
+
+TST05 / admin
+  Go to the forum F1 settings and remove the email addresses from the 'Email for reporting offensive posts' text field.
+  Go to forum F1 and open discussion D1.
+  Check to see that the 'Alert' button in each post no longer shows.
+
+Optional Tests
+==============
+
+OT01 / admin
+Create a clone of forum F1 in another course and repeat tests above
+checking to see that everything is against the new F1 forum in the new course.
+
+The functionality of the previous forumNG Alert system has been changed to allow for alerts to be sent to multiple people.
+There is no test script for testing it as was. To test the changes:
+
+OT02 / admin
+  Disable OU Alerts.
+  Follow through the Creation Routine above calling the forum F2 instead of F1.
+  Follow through the tests TST01, TST02, TST03 and TST05
diff --git a/mod/forumng/internaldoc/testcase.standardrating.txt b/mod/forumng/internaldoc/testcase.standardrating.txt
new file mode 100644
index 0000000..a4009a2
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.standardrating.txt
@@ -0,0 +1,198 @@
+This file contains a sequence of test cases for the ForumNG Export feature.
+
+Initial setup
+=============
+
+See testcase.txt for a description of the format of these tests and the initial
+site and ForumNG setup.
+
+
+RDP Creating ForumNG
+====================
+
+RDP01a / Admin
+   In course week one, from the add activity selector, choose 'ForumNG'.
+   Leave settings at defaults except for the following:
+   As Forum name enter 'F.RDP', and introduction enter, 'Test rating of discussion posts'.
+   Ensure 'Ratings'-'Allow posts to be rated' set to 'Ratings (standard)'.
+   Ensure 'Ratings'-'Scale'-'Type' set to 'Point'.
+   Ensure 'Ratings'-'Scale'-'Maximum points' set to 10.
+   Ensure 'Grade'-'Grade' set to 'Average of ratings'
+   Select 'Save and display' and return to the new course forum.
+-- Confirm creation of new empty forum with the introduction as entered above.
+
+RDP01b / Admin
+   Select the 'Start a new discussion' button.
+-- You should be taken to a new page with form 'Start a new discussion'.
+   Enter subject as 'F.RDP Admin discussion 1 RDP01' and add the message
+   'F.RDP-RDP01 This is the first standard post by Admin for testing standard ratings.',
+   Select the 'Post discussion' button.
+-- Verify that you are taken to the new discussion page and your message is shown.
+
+Return to course main page.
+
+
+RPU Basic usage
+===============
+
+RPU01 / U.ET [change]
+   Enter the course and enter forum 'F.RDP (unread posts)'.
+   Enter discussion 'F.RDP Admin discussion 1 RDP01'.
+-- You should be taken to the discussion page with an Admin post starting the discussion.
+-- Verify that above the 'Reply, Edit & Permalink' buttons there is a label and rating selector,
+   'Average of ratings: [Rate...]'.
+-- Verify that the 'Rate' selector has the options 0 - 10.
+
+RPU02 / U.ET
+   Click the 'Reply' link beneath the first message.
+   Enter 'Teacher, standard post RPU02' as subject and the message text
+   'RPU02 Teacher added as a standard post.'.
+   Click the 'Post reply' button.
+-- You should have one discussion post and your reply post appearing underneath.
+-- Confirm that the U.ET teacher post shows the 'Average of ratings' label with link
+   to 'All submitted ratings' report, but does not show the rating selector dropdown.
+Note, you cannot rate your own posts with the 'Rating (standard)' system.
+
+RPU03 / U.S1 [change]
+   Enter the course and enter forum 'F.RDP'.
+   Click to enter the unread discussion 'F.RDP Admin discussion 1 RDU01'.
+   Click the 'Reply' link beneath the teacher post 'Teacher, standard post RPU02'.
+   Enter 'Student 1 post RPU03' as subject and the message text
+   'Student 1 post RPU03 message text'
+   Click the 'Post reply' button.
+
+RPU04 / U.S1
+   Click the 'Reply' link beneath the admin post 'F.RDP Admin discussion 1 RDU01'.
+   Enter 'Student 1 post RPU04' as subject and the message text
+   'Student 1 post RPU04 message text'
+   Click the 'Post reply' button.
+
+RPU05 / U.ET [change]
+   Enter discussion 'F.RDP Admin discussion 1 RDU01'.
+   Select 'Expand all posts'.
+   Confirm that the U.ET teacher post shows the 'Average of ratings' label with link
+   to 'All submitted ratings' report, but does not show the rating selector dropdown.
+Note: Cannot rate your own post
+-- Verify that the other three posts have above the 'Reply, Edit & Permalink' buttons
+   and 'Average of ratings: [Rate...]' label and rating selector.
+-- Verify that the 'Rate' selectors have the options 0 - 10.
+
+RPU06 / U.ET
+   In the 'Student 1 post RPU03' post select Rate as 2. [auto update occurs]
+-- Confirm that the widget updates and now displays a count before the rating selector
+   'Average of ratings: 2 (1) [2]'.
+   In the 'Student 1 post RPU04' post select Rate as 3.
+-- Confirm that the widget updates and now displays a count before the rating selector
+   'Average of ratings: 3 (1) [3]'.
+
+Return to course main page.
+
+RPU07 / U.ET
+   Select 'Grades' from the 'Administration' menu to open the 'Grader report'
+-- Confirm that the report resembles the following:
+Note: It may be necessary to click the 'Full view' button, to see Course total.
+
+[Grader report       ] (Selector)
+
+Grader report
+-------------
+
+All participants: 1/1
+                        First name :AllABCDEFGHIJKLMNOPQRSTUVWXYZ
+                        Surname :AllABCDEFGHIJKLMNOPQRSTUVWXYZ
+
+                                                Test course name
+Surname  First name                     Email address    ForumNG F.RDP  Agg Course Total
+avatar   Userone  Usernameone   Grades  us1@open.ac.uk           2.50             25.00
+
+                                        Overall average          2.50             25.00
+
+RMG Rating and Manual grading
+=============================
+
+RMG01 / admin [change]
+   Enter the course and enter forum 'F.RDP'.
+   Select the 'Participation by user' button.
+-- Verify the 'Grade' column reflects the current state of user 'Grades',
+   ie. the teacher and second student have no grades, US.1 has '2.50/10'.
+   Select link to 'Show all posts by U.S1'
+-- Verify the 'Average of ratings' label and rating selector are show against all posts.
+   Select 'ForumNG administration > Edit settings' from the 'Administration' block.
+   Set 'Grade' field to 'Teacher grades students' and 'Grading scale' to 'Type':'Point', 'Maximum':'10'.
+   Select 'Save and display'.
+   Select the 'Participation by user' button.
+-- Verify all users listed have 'No grade' option selected in the 'Grade' column.
+   Update the grade for user S1 to 5 / 10 and select 'Save grades'.
+-- Verify user S1 has a grade of 5 / 10 shown.
+   Select 'Website administration > Grades' from the 'Administration' menu to open the 'Grader report'.
+-- Confirm that user S1 has a grade of 5 for forum F.RDP.
+
+RMG02 / admin
+   Enter the course and enter forum 'F.RDP'.
+   Enter discussion 'F.RDP Admin discussion 1 RDP01'.
+   Select 'Expand all posts', if needed, to display collapsed posts.
+   In the 'Student 1 post RPU03' post select Rate as 2. [auto update occurs]
+-- Confirm that the widget updates and now displays a count before the rating selector
+   'Average of ratings: 2 (2) [2]'.
+   Return to forum 'F.RDP' main page.
+   Select the 'Participation by user' button.
+-- Verify user S1 has a grade of 5 / 10 shown.
+   Select 'Website administration > Grades' from the 'Administration' menu to open the 'Grader report'.
+-- Confirm that user S1 has a grade of 5 for forum F.RDP.
+
+RMG03 / admin
+   Enter the course and enter forum 'F.RDP'.
+   Select 'ForumNG administration > Edit settings' from the 'Administration' block.
+   Set 'Grade' field to 'No grade'.
+   Select 'Save and display'.
+   Enter discussion 'F.RDP Admin discussion 1 RDP01'.
+   Select 'Expand all posts', if needed, to display collapsed posts.
+   In the 'Student 1 post RPU03' post select Rate as 4. [auto update occurs]
+-- Confirm that the widget updates and now displays a count before the rating selector
+   'Average of ratings: 3 (2) [4]'.
+   Return to forum 'F.RDP' main page.
+   Select 'ForumNG administration > Edit settings' from the 'Administration' block.
+   Set 'Allow posts to be rated' field to 'No ratings'.
+   Select 'Save and display'.
+   Enter discussion 'F.RDP Admin discussion 1 RDP01'.
+   Select 'Expand all posts', if needed, to display collapsed posts.
+-- Verify no ratings information is displayed against any of the posts shown.
+
+RMD Rating Move discussion
+==========================
+
+RMD01 / admin
+   Select 'ForumNG administration > Edit settings' from the 'Administration' block.
+   Set 'Allow posts to be rated' field to 'Ratings (standard)'.
+   Set 'Ratings'-'Scale'-'Type' to 'Point'.
+   Set 'Ratings'-'Scale'-'Maximum points' to 10.
+   Set 'Grade' to 'Average of ratings'
+   Select 'Save and display' button.
+   Select the 'Start a new discussion' button.
+-- You should be taken to a new page with form 'Start a new discussion'.
+   Enter subject as 'F.RDP Admin discussion 2 RMD01' and add the message
+   'F.RDP-RMD01 This post by Admin for testing standard ratings will be moved.'.
+   Select the 'Post discussion' button.
+-- Verify that you are taken to the new discussion page and your message is shown.
+
+RMD02 / U.ET [change]
+   Enter the course and enter forum 'F.RDP'.
+   Enter discussion 'F.RDP Admin discussion 2 RMD01'.
+   In the discussion initial post select Rate as 2. [auto update occurs]
+-- Confirm that the widget updates and now displays a count before the rating selector
+   'Average of ratings: 2 (1) [2]'.
+
+RMD03 / admin [change]
+   Enter the course and turn editing on.
+   Select the 'Duplicate' icon against forum 'F.RDP'.
+   Follow the duplicate process to create an empty duplicate of 'F.RDP',
+   edit the settings of the new forum to rename to 'F.RDP2'.
+   Return to the course and enter forum 'F.RDP'.
+   Select 'Move' button and then 'Selected discussions'.
+   Select discussion 'F.RDP Admin discussion 2 RMD01' checkbox.
+   Select 'Confirm selection'.
+   Select 'F.RDP2' in the 'Move discussion to' dropdown and then select 'Move discussions'.
+-- Verify discussion 'F.RDP Admin discussion 2 RMD01' has been moved to forum 'F.RDP2'.
+   Enter discussion 'F.RDP Admin discussion 2 RMD01'.
+-- Verify discussion initial post has 'Average of ratings: 2' displayed.
+End test.
diff --git a/mod/forumng/internaldoc/testcase.tags.txt b/mod/forumng/internaldoc/testcase.tags.txt
new file mode 100644
index 0000000..7d270ae
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.tags.txt
@@ -0,0 +1,393 @@
+This file contains a sequence of test cases for the ForumNG Tag feature.
+
+Initial setup
+=============
+
+- two test student users U.S1 and U.S2.
+- one test 'editing' teacher U.ET
+
+CRE Creating ForumNG
+====================
+
+CRE01 / admin
+  In any course week, from the add activity dropdown, choose 'ForumNG'.
+  Enable discussion tagging (check box).
+
+CRE02 / U.S1
+  Create discussion D1.
+  Set tags to 'adam, john, fred'.
+  Add post 'discussion post 1' and some text.
+  Create discussion 1A do not set/add tags.
+  Add post 'discussion post 1A' and some text.
+
+CRE03 / U.S2 (change)
+  Create discussion 2
+  Set tags to 'adam, jim'
+  Add post 'discussion post 2' and some text
+  Create discussion 2A add tags 'adam, jim, john, ted'
+  Add post 'discussion post 2A' and some text
+
+TTD Test discussions
+====================
+
+TTD01 / U.S2
+  Return to forum view page.
+  Check that 'Discussion 1' is shown as 'unread' in bold and the tags 'adam, john, fred' are shown in a smaller normal font.
+  Check that there is a drop down entitled 'View discussions with tag'
+   and the drop down shows a list of tags in alphabetical order with the correct number (sum) of tags for each tag.
+   If you have created the disccussions/tags as outlined above then the following should be in the dropdown list
+   adam (3)
+   fred (1)
+   jim  (2)
+   john (2)
+   ted  (1)
+
+TTD02 /U.S2
+  Choose one of the above.
+  Check that the correct number (n) of discussions are shown and that each discussion is tagged
+  with the tag chosen from the dropdown.
+  Check that the dropdown has been replaced with the wording 'Viewing discussions with tag <tagname>'
+  followed by a link with the word 'Show all'
+  Click on the 'Show all' link
+  Check that the full list of (4) discussions are shown and the dropdown box is again shown
+
+TTD03 / admin (change)
+  Goto discussion 1 and click on the button 'Discussion options'
+  In the 'discussion tags' field and click 'x' on the 'fred' tag to remove it
+  Save changes
+  Return to the forum
+  Check that 'discussion 1' no longer has the 'fred' tag
+  Check that the dropdown list no longer lists 'fred (1)'
+
+TTD04 / admin
+  Goto discussion 2 and click on the button 'Discussion options'
+  In the 'discussion tags' field and click 'x' on the 'jim' tag to remove it
+  Save changes
+  Return to the forum
+  Check that 'discussion 2' no longer has the 'jim' tag
+  Check that the dropdown list lists 'jim (1)'
+  Choose 'jim (1)' from the dropdown.
+  Check that only 'discussion 2A' with the 'jim' tag is shown
+  Click on the 'Show all' link next to the 'Viewing discussions with tag <tagname>' label
+  Check that it returns you to the forum discussion list.
+  If you have followed the test as outlined above then the following should be in the dropdown list
+   adam (3)
+   jim  (1)
+   john (2)
+   ted  (1)
+
+TTD05 / U.S1 (change)
+  Goto discussion 2
+  Check that 'discussion 2' no longer has the 'jim' tag
+  Check that there is no button entitled 'Edit tags'
+
+TTD06 / U.S1
+  Goto discussion 1
+  Check that there is a button entitled 'Edit tags'
+  Click on the 'Edit tags' button
+  Check that 'adam' 'john' and 'fred' tags shown above the 'Discussion tags' field
+  Enter 'ted' in the 'Discussion tags' field to add it to the tags
+  Click on 'Save changes' button
+  Check that you have returned to discussion 1
+  Check that 'Discussion tags: adam, fred, john, ted' is shown below the discussion
+
+TJD Testing Javascript Auto-Complete Tagging Dropdown
+=====================================================
+
+TJD01 / admin (change)
+  Create discussion 3
+  Set tags to 'vulcan, borg, gorn'  // They must be new tags that have not been used in a discussion before
+  Add post 'discussion post 3' and some text
+  Save changes
+  Return to the forum
+
+TJD02 / admin
+  Create discussion 3A
+  Click the down arrow in the 'Discssuon tags' field
+  Check that a javascript dropdown/box appears containing the following
+   adam
+   borg
+   gorn
+   jim
+   john
+   ted
+   vulcan
+  Select the 'borg' from the dropdown box
+  Check that it has added the 'borg' tag and removed from the dropdown box
+  Ensure the dropdown box is not visible (click the arrow to close it if it is)
+  Type 'vul' in the 'Discussion tags' field
+  Check that the dropdown has appeared with 'vulcan' visible
+  Select the 'vulcan' from the javascript box
+  Check that it has added it to the text area and removed from the dropdown box
+  Type 'tim' in the 'Discussion tags' field to manually add it to the tags
+  Add post 'discussion post 3A' and some text
+  Save changes
+  Return to the forum
+  Check that discussion 3A has tags 'borg, tim, vulcan' listed
+
+TJD03 / admin
+  Goto discussion 3 and click on the button 'Discussion options'
+  In the 'discussion tags' field click 'x' next to 'gorn' to remove it
+  Save changes
+  Return to the forum
+  Check that 'discussion 3' no longer has the 'gorn' tag
+
+TJD04 / admin
+  Goto discussion 3A and click on the button 'Discussion options'
+   Click the arrow in the 'Discussion tags' field
+   Check that a javascript dropdown/box appears does not contain an entry for the 'gorn'
+   It should show
+   adam
+   jim
+   john
+   ted
+
+SFT Test Set Forum Tags
+=======================
+
+SFT01 / admin
+  Goto the forum you have created
+  In the admin panel on the left hand side of the webpage under 'Administration', 'ForumNG Adminstration'
+     click on 'Edit settings'
+  This should bring up the forum edit form.
+  Check that Enable discussion tagging checkbox is ticked as per instruction in CRE01.
+  In the 'Set tags for forum' field enter the following 'set 1, set 2, set 3,' making sure that the commas are correctly placed.
+  'Save and display'
+
+SFT02 / admin
+  Create a new discussion 'discussion 4'
+  Add a post to the discussion.
+  Click on the 'Discussion options' button.
+  This should bring up discussion options form.
+  Click in the arrow in the 'Discussion tags' field.
+  Check that a javascript dropdown/box appears which has the following entries in it.
+  Note: There maybe other entries as well, but we are just checking against the entries below.
+     set 1
+     set 2
+     set 3
+  Click on the entry for 'set 2' and 'Save changes'
+  Check that the 'Discussion tags' text area has 'set 2' above it.
+  Click in the arrow in the 'Discussion tags' field.
+  Check that a javascript dropdown/box appears which has the following entries in it.
+  Note: There maybe other entries as well, but we are just checking against the entries below.
+     set 1
+     set 3
+
+SFT03 / admin
+  Return to forum view page.
+  Check that 'discussion 4' is shown with the tag 'set 2' shown in a smaller normal font.
+  Check that there is a drop down entitled 'View discussions with tag'
+     and the drop down shows a list of tags in alphabetical order with the correct number (sum) of tags for each tag.
+  Check that there is a entry on the drop down list entitles 'set 2 (1)'
+  Check that there are no entries for
+     set 1
+     set 3
+
+SFT04 / admin
+  In the admin panel on the left hand side of the webpage under 'Administration', 'ForumNG Adminstration'
+     click on 'Edit settings'
+  This should bring up the forum edit form.
+  Check that Enable discussion tagging checkbox is ticked as per instruction in SFT01.
+  Check that the 'Set tags for forum' field has set tags as previously entered, i.e. 'set 1', 'set 2', 'set 3', shown.
+
+Test Group Set Forum Tags
+=========================
+
+TGS01 / admin
+  Create 2 groups G1 and G2
+  Assign U.S1 to group G1
+  Assign U.S2 to group G2
+  Assign U.ET to group G2
+  Edit Settings for the forum, setting group mode to 'Separate groups'
+  Save and display
+
+TGS02 / admin
+  Change 'separate groups' dropdown to show G1
+  Create a new discussion 'G1 D1'
+  Add post 'discussion post 'G1 D1' and some text
+  Create a new discussion 'G1 D2'
+  Add post 'discussion post 'G1 D2' and some text
+
+TGS03 / admin
+  Return to the forum view page
+  Change 'separate groups' dropdown to show G1
+  Click on the 'Edit set tags' button
+  Enter 'g1, g12, g13' into the 'Set tags for G1' field.
+  There should also be text boxes for 'Set tags for forum' and 'Set tags for G2'
+  Click on 'Save changes'
+
+TGS04 / admin
+  Return to the forum view page
+  Change 'separate groups' dropdown to show G1
+  Click on 'G1 D1' link
+  Click on 'Edit tags' button
+  Click in the arrow in the 'Discussion tags' field.
+  Check that a javascript dropdown/box appears which has the following entries in it.
+  Note: There maybe other entries as well, but we are just checking against the entries below.
+     g1
+     g12
+     g13
+  Click on the entry for 'g12'
+  Click on the 'Save changes' button
+  Check that 'G1 D1' has 'Tags: g12' showing under the discussion name.
+
+TGS05 / admin
+  Click on 'G1 D2' link
+  Click on 'Edit tags' button
+  Click in the arrow in the 'Discussion tags' field.
+  Check that a javascript dropdown/box appears which has the following entries in it.
+  Note: There maybe other entries as well, but we are just checking against the entries below.
+     g1
+     g12
+     g13
+  Click on the entry for 'g12'
+  Click on the entry for 'g1'
+  Click on the 'Save changes' button
+  Check that 'G1 D2' has 'Tags: g1, g12' showing under the discussion name.
+
+ TGS06 / admin
+  Change 'separate groups' dropdown to show G2
+  Create a new discussion 'G2 D1'
+  Add post 'discussion post 'G2 D1' and some text
+  Create a new discussion 'G2 D2'
+  Add post 'discussion post 'G2 D2' and some text
+
+TGS07 / admin
+  Return to the forum view page
+  Change 'separate groups' dropdown to show G2
+  Click on the 'Edit set tags' button
+  Enter 'g2, g22, g23' into the 'Set tags for G2' field.
+  There should also be text boxes for 'Set tags for forum' and 'Set tags for G1'
+  Click on 'Save changes'
+
+TGS08 / admin
+  Return to the forum view page
+  Change 'separate groups' dropdown to show G2
+  Click on 'G2 D1' link
+  Click on 'Edit tags' button
+  Click in the arrow in the 'Discussion tags' field.
+  Check that a javascript dropdown/box appears which has the following entries in it.
+  Note: There maybe other entries as well, but we are checking first against the entries below.
+     g2
+     g22
+     g23
+  Check that entries for 'g1, g12, g13' are not shown.
+  Click on the entry for 'g22'
+  Click on the 'Save changes' button
+  Check that 'G2 D1' has 'Tags: g22' showing under the discussion name.
+
+TGS09 / admin
+  Return to the forum view page
+  Change 'separate groups' dropdown to show 'All participants'
+  Click on 'G2 D1' link
+  Click on 'Edit tags' button
+  Check that 'g22' is showing above the 'Discussion tags' field
+  Click in the arrow in the 'Discussion tags' field.
+  Check that a javascript dropdown/box appears which has the following entries in it.
+     g2
+     g23
+  Check that entries for 'g1, g12, g13' are not shown.
+  Click on 'Cancel' button
+
+TGS10 / U.ET (change)
+  Return to the forum view page
+  Change 'separate groups' dropdown to show 'All participants'
+  Click on the 'Edit set tags' button
+  Check that 'Set tags for G1' field has the tags 'g1', 'g12', 'g13' above
+  Check that 'Set tags for G2' field has the tags 'g2', 'g22', 'g23' above
+  Check that 'Set tags for forum' field does not exist
+  Click in 'Set tags for G2' type 'g24' to add the 'g24' tag to the list.
+  Click on the 'Save changes' button
+
+TGS11 / admin (change)
+  Return to the forum view page
+  Click on ForumNG administration
+  Click on Permissions
+  Under Capability/Risks for 'Course' delete relevant role for U.ET (editing teacher)  from 'Access all groups'
+  Confirm the change of permissions
+
+TGS12 / U.ET (change)
+  Return to the forum view page
+  'Separate groups: G2' should be shown where the separate groups' dropdown was previously
+  Click on 'Edit set tags'
+  Check that 'Set tags for G2' field had the tags 'g2', 'g22', 'g23', 'g24' above
+  Check that 'Set tags for forum' field does not exist
+  Check that 'Set tags for G1' field does not exist
+  Click 'x' next to 'g24' in 'Set tags for G2' field to remove it form the list.
+  Click on the 'Save changes' button
+
+TGS13 / admin (change)
+  Return to the forum view page
+  Click on ForumNG administration
+  Click on Permissions
+  Under Capability/Risks for 'Course' add relevant role for U.ET (editing teacher) to 'Access all groups'
+  Confirm the change of permissions
+
+TGS14 / U.ET (change)
+  Return to the forum view page
+  Change 'separate groups' dropdown to show 'All participants'
+  Click on the 'Edit set tags' button
+  Check that 'Set tags for G1' field has the tags 'g1', 'g12', 'g13' above
+  Check that 'Set tags for G2' field has the tags 'g2', 'g22', 'g23' above
+  Check that 'Set tags for forum' field does not exist
+  Click on 'Cancel' button
+
+TGS15 / U.S1 (change)
+  Return to the forum view page
+  Check that link for discussion 1 'G1 D1' exists, but group 2 discussion details are not shown
+  Click on 'G1 D1'
+  Check that 'Edit tags' button does not exist
+
+TGS16 / U.S1
+  Return to the forum view page
+  Click on 'Start a new discussion" button
+  Create a discussion entitled (subject) 'G1 D3'
+  Add some text to the message
+  Add 'dog' tag under discussion tags
+  Click on 'Post discussion' button
+
+TGS17 / U.S1
+  Return to the forum view page
+  Click on 'G1 D3' discussion link
+  Click on 'Edit tags' button
+  Type 'd14' in the 'Discussion tags' field to add the tag to the list
+  Click on the 'Save changes' button
+
+TGS18 / U.S1
+  Return to the forum view page
+  Check that link for discussion 1 'G1 D3' exists, but group 2 discussion details are not shown
+  Check that 'G1 D3' has 'Tags: d14, dog' showing under the discussion name.
+
+Test Set Manage Tags
+====================
+
+TSM01 / admin (change)
+  Return to the forum view page.
+  Click on 'Edit Set tags' button
+  Check that 'Set tags for forum' field has the tags 'set 1', 'set 2', 'set 3' above
+  Check that 'Set tags for G1' field has the tags 'g1, g12, g13' above
+  Check that 'Set tags for G2' field has the tags 'g2, g22, g23' above
+  Click in 'Set tags for forum' field and add 'set 4' to the list
+  Click in 'Set tags for G1' field and type 'g14' to add it to the list
+  Click in 'Set tags for G2' field and type 'g24' to add it to the list
+  Click on the 'Save changes' button
+
+TSM02 / admin
+  Return to the forum view page
+  Click on 'G2 D1' link
+  Click on 'Edit tags' button
+  Check that 'g22' is showing above the 'Discussion tags' field
+  Click in the arrow in the 'Discussion tags' field.
+  Check that a javascript dropdown/box appears which has the following entries in it.
+     g2
+     g23
+     g24
+     set 1
+     set 2
+     set 3
+     set 4
+  Check that entries for 'g1, g12, g13' are not shown.
+  Click on the entry for 'g24'
+  Click on the entry for 'set 3'
+  Click on the 'Save changes' button.
+  Check that 'G2 D1' has 'Tags: g22, g24, set 3' showing under the discussion name.
diff --git a/mod/forumng/internaldoc/testcase.txt b/mod/forumng/internaldoc/testcase.txt
new file mode 100644
index 0000000..63330f8
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.txt
@@ -0,0 +1,1366 @@
+This file contains a sequence of test cases for most ForumNG features.
+
+Each single section is independent so that tests can be completed without the
+need to do all of them. The exception is the first section; you need to
+complete the first section in order to have the forums in place that other
+parts of the test require.
+
+Each section has a unique (within this test case) three letter code and the
+steps are numbered so that the location where a failure occurs can be reported.
+
+Steps are shown in the following format:
+
+XXX01 / U.S1 [change]
+  Do something
+  - Check something
+
+The unique step number is followed by the user that you should be logged
+in as for that step. If the user changes from the previous step, the word
+[Change] will be noted.
+
+Some steps don't have specific items to check. In that case, the check
+'passes' if there are no errors or warnings while completing the task.
+
+When told to create a discussion or reply, you may wish to use the code number
+for that step inside the text of the discussion/reply. Occasionally, later
+steps might refer to the reply UNR03 or whatever.
+
+
+Initial setup
+=============
+
+Please set up a standard test course as follows.
+
+Course short name
+-----------------
+
+FORUMTEST
+
+Users and groups
+----------------
+
+U.S1 - student in group 1
+U.S2 - student in group 2
+U.ET - editing teacher, not in a group
+
+The testcase.users.csv file can be used to create these users (for U.S1,
+U S1 is the visible name; the login is us1; the password is appleA1;).
+
+The test script also refers to the user 'admin' (the admin user).
+
+User settings
+-------------
+
+Edit the profile for U.S1 so that the 'AJAX and JavaScript' option in their
+profile is set to No.
+
+Ensure that the same option is set to Yes for the other users.
+
+Some parts of the forum have different behaviour in 'fancy' (AJAX/JavaScript)
+mode, so we will test those parts with both U.S1 (No option) and U.S2
+(Yes option).
+
+
+Site settings
+-------------
+
+Under Developer/Debugging, ensure that debug level is set to 'Developer'
+and to display messages.
+
+Under Advanced features, ensure that activity completion is enabled.
+
+
+CRE Creating ForumNG
+====================
+
+CRE01 / admin
+  In any course week, from the add activity dropdown, choose 'ForumNG'. Leave
+  all settings as default except name 'F.WC' (whole course) and group setting
+  'No groups'. Save form and return to course.
+
+CRE02 / admin
+  Create another ForumNG with name F.SG and group setting 'Separate groups'.
+
+CRE03 / admin
+  Create one with name F.VG and group setting 'Visible groups'.
+
+CRE04 / admin
+  Create one with name F.SH, group setting 'no groups', 'Shared' ticked,
+  and idnumber set to 'Frog'.
+  NOTE:
+  We will use the F.SH forum for most testing because there are lots of ways
+  in which the system can go wrong when using shared forums.
+
+** PASSED 2011-02-17
+
+
+BSN Basic usage (non-JS)
+========================
+
+BSN01 / U.S1 [change]
+  Go to the course and click into F.SH.
+  - Verify that there is a 'Start discussion' button.
+
+BSN02 / U.S1
+  Click the 'Start discussion' button.
+  - You should be taken to a new page with a form for starting a discussion.
+  Type in a subject and a message and hit the 'Post discussion' button.
+  - Verify that you are taken to the new discussion page and your message
+    is shown.
+
+BSN03 / U.S1
+  Click the 'Reply' link next to your message.
+  - You should be taken to a new page with a form for starting a discussion.
+    The original message that you are replying to should be shown at top.
+  - The form should contain an 'Attachments' option but should not contain
+    'Mail soon' or 'Mark posts as important' options.
+  Type in a message (no subject) and hit the 'Post reply' button.
+  - Verify that you are returned to the discussion page showing your reply.
+  - Verify that the browser URL now includes the post ID at the end, something
+    like #p12345. If the page is long enough, it will scroll down so the new
+    post is at / near the top.
+
+BSN04 / U.S1
+  The new post is in collapsed mode. To expand it, click the 'Expand all
+  posts' link next to the post.
+  - You should return to the discussion with all posts (= this one) expanded.
+  - Again the URL should still include the post ID so that it scrolls to the
+    post.
+
+BSN05 / U.S1
+  Click the 'Edit' link next to the reply.
+  You should be taken to an edit form which looks similar to the reply form.
+  - Verify that the form contains the text of your message.
+  - Verify that above the form, text appears warning that you must save your
+    changes before a particular time (the time you made the reply plus the
+    permitted editing time, default 30 minutes).
+  Type some text into the subject and change the message text, then hit
+  'Save changes'.
+  - Verify that the browser returns to the discussion page, again with the post
+    ID at end.
+  Expand the post again.
+  - Verify that the post now displays your subject and shows the changed text.
+
+BSN06 / U.S1
+  Click the 'Delete' link next to the reply. You should be taken to a new page
+  with Delete/Cancel confirm buttons.
+  - Verify that the page shows the message you are deleting.
+  Click the Cancel button.
+  - Verify that you are returned to the discussion and the message has not been
+    deleted.
+  Expand posts and click Delete again, and this time click the Delete button.
+  - Verify that you are returned to the discussion but the message is now no
+    longer available. (The URL should not have the post ID #p section.)
+
+** PASSED 2011-02-17
+
+
+BSJ Basic usage (JS)
+====================
+
+BSJ01 / U.S2 [change]
+  Go to the course, click into F.SH, click the 'Start discussion' button.
+  Type in a subject and a message and hit the 'Post discussion' button.
+  - Verify that you are taken to the new discussion page and your message
+    is shown.
+
+BSJ02 / U.S2
+  Click the 'Reply' link next to your message.
+  - A form should appear on the same page (without changing URL, i.e. the
+    URL should still be discuss.php) below the message.
+  Type in a message (no subject) and hit the 'Post reply' button.
+  - After a possible brief delay indicated by a spinny thingy, your reply
+    should appear on the discussion page, already expanded.
+
+BSJ03 / U.S2
+  Click the 'Edit' link next to the reply.
+  - A form should appear on the same page (discuss.php) below the message.
+  - Verify that the form contains the text of your message.
+  Type some text into the subject and change the message text, then hit
+  'Save changes'.
+  - Verify that the form disappears and the main post text updates to show
+    your new message and subject.
+
+BSJ04 / U.S2
+  Click the 'Edit' link next to the top message (the original discussion).
+  - A form should appear as before.
+  Edit the subject and click 'Save changes'.
+  - The message should update as before.
+  - In addition, the discussion subject (in breadcrumbs section) should also
+    update.
+
+BSJ05 / U.S2
+  Click the 'Delete' link next to the reply.
+  - The page should fade out.
+  - A highlight display of some kind (currently an orange box) should appear
+    around the message being deleted.
+  - A delete confirmation prompt should appear in the middle of the screen.
+  Click the Cancel button.
+  - Verify that the page fades back in and the orange box disappears, with no
+    change.
+  Click Delete again, and this time click the Delete button.
+  - Verify that the page fades back in but the message is now removed from it.
+
+BSJ06 / U.S2
+  NOTE: To make this task quicker, change the editing timeout from the default
+  30 minutes to a lower time such as 5 minutes. You can do this by, as admin,
+  searching for 'maxeditingtime' in the site administration settings.
+
+  Click Reply, type another reply, click Post reply.
+  - Reply should appear on page as before. Should have Edit and Delete links.
+  Wait until the editing time runs out (the system is designed to allow a
+  slight safety margin, so it might actually cut at 4 and a half rather than 5).
+  - Verify that the Edit and Delete links disappear.
+
+BSJ07 / U.S2
+  Click Reply, type another reply, click Post reply.
+  - This reply should have Edit and Delete links.
+  Click the Edit link. Change the text of the message, but do not submit the
+  form. Instead, wait until the editing time runs out.
+  - At the start of editing, the standard text should tell you what time
+    you have to save the message by.
+  - When there are about 90 seconds left, the message should go bold.
+  - When time runs out (~30 seconds), the message should go red and change to
+    warn you that time ran out, and the Save changes button should be greyed
+    out so that you can only cancel.
+
+** PASSED 2011-02-21
+
+EEP Edit and email
+==================
+
+NOTE: Before starting this section, check that both users (U.S2, U.ET)
+have email addresses set up that go to an email address that you can read.
+When testing within the OU, note that developer servers will only send email
+to OU (@open.ac.uk) addresses.
+
+EEP01 / admin [change]
+  Go to the course, click into F.SH, click the 'Start discussion' button.
+  Type in a subject and a message and hit the 'Post discussion' button.
+  - Verify that you are taken to the new discussion page and your message
+    is shown.
+
+EEP02 / U.S2 [change]
+  Click the 'Reply' link next to admins message.
+  - A form should appear on the same page (without changing URL, i.e. the
+    URL should still be discuss.php) below the message.
+  Type in a message (no subject) and hit the 'Post reply' button.
+  - After a possible brief delay indicated by a spinny thingy, your reply
+    should appear on the discussion page, already expanded.
+
+EEP03 / admin [change]
+  Click the 'Reply' link next to the post written above by U.S2.
+  - A form should appear on the same page (without changing URL, i.e. the
+    URL should still be discuss.php) below the message.
+  Type in a message (no subject) and hit the 'Post reply' button.
+  - After a possible brief delay indicated by a spinny thingy, your reply
+    should appear on the discussion page, already expanded.
+
+EEP04 / admin
+  Click the 'Edit' link next to the reply to your original message by U.S2 (middle post).
+  - A form should appear on the same page (discuss.php) below the message.
+  - Verify that the form contains the text of the message.
+    Type some text into the subject and change the message text.
+  - Verify that the form contains a label 'Email author' containing a checkbox entitled 'Email author'
+    an e-mail author message text field, a 'send copy to yourself' checkbox and a text box for adding
+    'Email addresses of other recipients'
+-  Verify that the message displayed in the form is:
+
+   'This is a notification to advise you that your forum post with the following details has been
+    edited by '{username}':'
+
+   Subject: DEP03 user two response
+   Forum: F.SH
+   Module: FORUMTEST
+
+  View the discussion
+
+  Click against the 'Email author' checkbox
+  Type some text into the email text field and change the email message text.
+  Click 'Send a copy to yourself'.
+-  Verify that there is a text entry field 'Email address of other recipients'.
+-  Enter multiple checkable user email addresses which you have access to.
+  Click 'Save changes'.
+
+EEP05 / admin
+-  Confirm that you are returned to the discussion.
+  - Verify that the form disappears and the main post text updates to show
+    your new message and subject.
+-  Confirm that user U.S2 has received an email 'Your post has been edited'.
+-  Confirm that user admin has received an email 'Copy - Your post has been edited'.
+-  Confirm that the other users have received an email 'Copy - Your post has been edited'.
+-  Verify that the above form message is reproduced in the emails.
+
+Retest BSJ01 - BSJ04 above
+
+
+GRP Basic group support
+=======================
+
+GRP01 / U.S2
+  Go to forum F.SG.
+  - Verify that it says 'Separate groups: G2' on the main screen, as text
+    and not a dropdown.
+  Click Start discussion and make a new discussion. Once posted, copy the URL
+  of the discussion (includes 'discuss.php') to clipboard, then return to main
+  page.
+  - Discussion that you just made should show on the list.
+  - The list should not include a 'Group' column.
+
+GRP02 / U.S1 [change]
+  Go to forum F.SG.
+  - Verify that it says 'Separate groups: G1', as text and not a dropdown
+  - Verify that the discussion just made by U.S2 is not visible on the list.
+  Paste into the browser the URL of the previous discussion and hit Return.
+  - Verify that an error displays and the user is not permitted to view the
+    discussion.
+  Return to forum main page, start discussion, and make a new discussion. Post
+  it and return to forum page.
+  - This discussion should now show on the list.
+
+GRP03 / U.ET [change]
+  Go to forum F.SG
+  - Verify that it has a dropdown 'Separate groups: [All participants]'.
+  - Verify that both discussions posted in previous steps are visible.
+  - Verify that 'Group' column displays the group of each discussion.
+  - Verify that there is no 'Start discussion' button.
+  Click on one of the discussions.
+  - Verify that it loads correctly.
+  Return to main page. Now choose group G1 from the dropdown.
+  - Verify that the page reloads.
+  - It should no longer shows the discussion created in group G2.
+  - There should be no 'Group' column.
+  - The 'Start discussion' button should appear.
+
+GRP04 / U.ET
+  Start a forum discussion. Post it. On the discussion page, click
+  'Discussion options'.
+  - 'Group' dropdown should show G1.
+  Change 'Group' to 'All participants' and click 'Save changes'. Then click back
+  to the main page.
+  - New discussion should appear.
+  Select 'All participants' group.
+  - New discussion should still be present and should be labelled as 'All
+    participants' in the Group column.
+  Select G2 group.
+  - New discussion should still be present.
+
+GRP05 / U.ET
+  Go to forum F.VG.
+  - Verify that group dropdown appears (same as in separate groups forum).
+  Change group to G1. Post a new discussion.
+
+GRP06 / U.S2 [change]
+  Go to F.VG.
+  - Verify that group dropdown appears.
+  - Verify that G2 is selected (note: it remembers setting, but after logout
+    and close browser, it should have G2 for this user).
+  - Verify that discussion does not appear.
+  Change group to G1.
+  - Verify that discussion now appears.
+  Click on discussion.
+  - Verify that it loads correctly.
+
+** PASSED 2011-02-21
+
+
+UNR Basic unread support
+========================
+
+UNR01 / U.S2
+  Go to F.SG. Click 'Mark all posts read'. Ensure that the setting reads
+  'Automatically mark as read'; if not, change it.
+
+UNR02 / U.ET [change]
+  Go to F.SG. Click 'Mark all posts read'. Ensure that the setting reads
+  'Automatically mark as read'; if not, change it.
+
+  Select group G2. Start a new discussion. Inside the discussion, add a reply.
+
+UNR03 / U.S2 [change]
+  Go to course page.
+  - Verify that an '(Unread posts)' note appears next to F.SG.
+  Go to F.SG
+  - Verify that the new discussion (UNR03) appears on the list.
+  - Verify that it shows 2 unread messages in the discussion, with a
+    'mark read' tick next to it.
+
+UNR04 / U.S2
+  Click into discussion.
+  - Verify that both messages display as unread (on standard theme this means
+    expanded with a blue background and bold date).
+  Click back to the forum main page.
+  - Verify that there are no unread messages any more.
+  Start a new discussion titled UNR04 and post it, then reply to it, then reply to the reply,
+  ensuring that the replies have a reasonable length (e.g. copy/paste this
+  step of the test case into each one) so that the page will scroll later.
+  Then return to the forum main page.
+  - Verify that the new discussion appears but does not show unread.
+  Return to the course page.
+  - Verify that F.SG does not show unread any more.
+
+UNR05 / U.ET [change]
+  Go to course page.
+  - Verify that the F.SG forum shows as unread.
+  Go into F.SG.
+  - Verify that the discussion (UNR04) appears and shows 3 unread posts.
+  Click the 'Change' link next to 'Automatically mark as read'
+  - Verify that it changed to 'Manually mark as read'.
+  Click on the number (3) to enter the discussion.
+  - Verify that you enter the discussion and it scrolls to top of first post,
+    with #firstunread in URL
+  - Verify that each post shows 'Next unread (previous)' links (first, last
+    posts are slightly different but you get the idea).
+  Click on the first 'Next unread' link
+  - Verify that focus moves to the 'Next unread' link in the next post, possibly
+    scrolling the screen.
+  Press Return key
+  - Verify that it 'clicks' Next again, i.e. proceeds to the final unread post.
+  Press Return again a few times
+  - Verify that it cycles through the 'previous unread' again until you get
+    back to the start
+
+UNR06 / U.ET
+  Go back to F.SG main page.
+  - Verify that discussion UNR04 still shows as having 3 unread posts.
+  Click into discussion UNR04 again.
+  - Verify that all 3 messages still show as unread and each has a 'Mark post read' button.
+  Select 'Mark post read' button on the last post.
+  - Verify that the blue background on the last post is removed
+    and it's 'Mark post read' button becomes disabled.
+  Refresh the current page.
+  - Verify the last post is no longer classed as being unread.
+  Go back to F.SG main page.
+  - Verify that UNR04 discussion shows as having 2 unread posts.
+  Return to the course page.
+  - Verify that F.SG shows as unread.
+
+UNR07 / U.ET
+  Go into F.SG main page.
+  - Verify that UNR04 discussion shows as having 2 unread posts.
+  Click into discussion UNR04 again.
+  - Verify that 2 messages still show as unread.
+  Click 'Show readers' button (bottom).
+  - Verify U.ET user is not listed (As long as F.SG is a group forum and U.ET is not in group).
+  Return to discussion.
+  Click 'Mark discussion read' button (bottom left).
+  - Verify that you are returned to main forum page and discussion now shows
+    as read (no unread messages).
+  Add a new reply to the last post (any message content).
+  Go back to F.SG main page.
+  - Verify that UNR04 discussion shows as having no unread posts.
+  Click the 'Change' link next to 'Manually mark as read'
+  - Verify that it changed to 'Automatically mark as read'.
+  - Verify UNR04 discussion shows as having no unread posts.
+  Click the 'Change' link next to 'Automatically mark as read'
+  - Verify that it changed to 'Manually mark as read'.
+  - Verify UNR04 discussion shows as having no unread posts.
+  Return to the course page.
+  - Verify that F.SG does not show as unread.
+
+UNR08 / U.S2
+  Go to course page.
+  - Verify that an '(Unread posts)' note appears next to F.SG.
+  Go to F.SG
+  - Verify that UNR04 discussion shows as having 1 unread post.
+  Click the 'Change' link next to 'Automatically mark as read'
+  - Verify that it changed to 'Manually mark as read'.
+  Enter discussion UNR04
+  Right-click 'Mark post read' and open in new tab
+  - Verify UNR04 loads in new tab, showing last post as read.
+  Close new tab and return to F.SG main page.
+  - Verify UNR04 discussion shows as having no unread posts.
+  Click the 'Change' link next to 'Manually mark as read'
+  - Verify that it changed to 'Automatically mark as read'.
+  - Verify UNR04 discussion shows as having 1 unread posts.
+
+UNR09 / U.ET
+  Go into F.SG main page.
+  Click into discussion UNR04 again.
+  Click 'Show readers' button (bottom).
+  - Verify U.S2 user is listed with time corresponding to marking post as read in UNR08.
+  Return to discussion.
+
+DRP Draft posts
+===============
+
+DRP01 / U.S1
+  Go to F.SH. Click 'Start discussion'. Enter some text into the subject and
+  message, but instead of posting the discussion, click 'Save as draft'.
+  - Verify that the same form reloads with the same content but a message above
+    it that says you've saved a draft, with current date.
+  Return to the main forum page.
+  - A section at the top of the page should show the new draft message you have
+    saved.
+  - It should say '(new discussion)' and show the date at which you saved it.
+  - Verify that the help icon next to heading works.
+  Click on the draft.
+  - You should be returned to the 'start discussion' form with the draft
+    content still present.
+  Click Cancel
+  - You should go back to main forum page with draft still there.
+  Click draft again. This time, click 'Post discussion'.
+  - Verify that you are taken to the posted discussion.
+  Return to main forum page.
+  - Verify that draft has gone.
+
+DRP02 / U.S1
+  Go into discussion (DRP01). Click Reply. Enter some text into the message,
+  but instead of posting the reply, click 'Save as draft'.
+  - Verify that form reloads with message above it that says draft is saved.
+  Return to main forum page.
+  - Verify that draft is present.
+  - Verify that it now has the discussion name in the discussion column, with
+    'Reply to U S1' in brackets, and time that draft was saved.
+  Click on draft.
+  - Verify that it appears including your text.
+  Cancel.
+  Go back to main page.
+  Click on draft again and this time, make a change to the text. Then click
+  'Save draft'.
+  - Form should reload.
+  Go back to main page.
+  - Draft should still be present.
+  Click on it and 'Post reply'.
+  - Taken to discussion page.
+  - Reply with latest text is now shown.
+
+DRP03 / U.S1
+  Go to F.SH main page. Start an new discussion. Type subject and message.
+  Click 'Save draft'. Go back to forum main page.
+  - New draft should be shown.
+  Click on Delete (X) icon next to draft.
+  - Delete confirm page should appear, with Delete / Cancel options.
+  - Content of draft post should be shown.
+  Click Cancel.
+  - Should be back on main page.
+  - Draft still present.
+  Click on Delete icon again. This time, choose Delete.
+  - Should get back to main page.
+  - Draft now gone.
+
+DRP04 / U.S2 [change]
+  Go to F.SH main page. Click on the discussion (DRP01). Click Reply next
+  to the last message in the discussion. Type some text, then click 'Save as
+  draft'.
+  - You should still be on the discussion page (discuss.php).
+  - Text should appear above form indicating the date of the draft saved.
+  Wait until the minute has changed, edit the text a bit, then click
+  'Save as draft' again.
+  - Same thing should happen and time should be updated to the new minute.
+  Go back to F.SH main page.
+  - Draft should be displayed with correct date and reply to (U S1).
+  Click on draft.
+  - Should go back to discussion page (URL discuss.php).
+  - Should automatically open a reply form for the post you replied to.
+  - Form should contain the text you saved.
+  Click cancel, then return to F.SH main page.
+  - Draft still there.
+  Click draft again and this time, when the form opens, 'Post reply'.
+  - Post should appear (just like if you make a reply normally).
+  Return to F.SH main page.
+  - Draft no longer there.
+
+** PASSED 2011-02-21
+
+
+ATT Attachments
+===============
+
+NOTE: In most cases when adding a file here you can use the 'Recent files'
+option to save time rather than uploading from the hard disk in all cases.
+You will need a few different files.
+
+NOTE: This script refers to 'download prompt' as what happens in your browser
+when a file is successfully downloaded. Depending on the file type, in some
+cases (e.g. .txt file) it might actually display the file in current window
+rather than offering a download prompt.
+
+NOTE: The instructions do not mention it explicitly but when adding a
+discussion or reply you need to type some text in the message field and (for
+discussions) the subject field.
+
+ATT01 / U.S1 [change]
+  Go to F.SH main page. Click 'Start discussion'. On the resulting form,
+  in the Attachments area, click 'Add' and upload a suitable file. Click
+  'Post discussion'.
+  - Discussion should appear.
+  - Attachment should be shown in top right of post.
+  Click on attachment.
+  - Browser should load the attachment.
+
+ATT02 / U.S1
+  Click Reply against the post. On the resulting form, add two attachments,
+  then click 'Post reply'. In the resulting discussion view, click 'Expand
+  all' to see your reply.
+  - Reply should show both attachments in top right of post.
+
+ATT03 / U.S1
+  Click Edit link against the reply you just made.
+  - Verify that the edit form shows the 2 attachments.
+  Delete one of the attachments (using the popup menu next to it). Then add
+  another (different) attachment. Save changes. Expand the discussion again.
+  - Verify that the post now displays the different attachments.
+
+ATT04 / U.S1
+  Go back to F.SH main page. Click 'Start discussion'. Add an attachment.
+  Click 'Save as draft'.
+  - Verify that the form reloads, but new page still shows the attachment.
+  Delete the attachment and add a different one. Click 'Save as draft' again.
+  - Form should still show the new attachment.
+  Click Post.
+  - Correct (new) attachment should display alongside post.
+
+ATT05 / U.S1
+  Go to F.SG (different forum) main page. You should be in group G1. Start
+  a new discussion, including an attachment. When the discussion is posted,
+  right-click on the attachment and copy the URL to clipboard.
+
+ATT06 / U.S2 [change]
+  Go to F.SG. You should be in group G2, so the discussion just created is
+  not visible. Paste the URL from clipboard and hit return.
+  - An error should be displayed; you should not be allowed to access the
+    file from the other group.
+
+ATT07 / U.S2
+  Go back to the F.SH forum. Click into the discussion (ATT04). Click reply.
+  In the form that appears, add an attachment, and post the reply.
+  - Reply should display with attachment shown.
+
+ATT08 / U.S2
+  Click Edit next to your new reply. Remove the attachment and add a different
+  one. Save changes.
+  - Reply should be updated with new attachment.
+
+ATT09 / U.S2
+  Click Reply again. Add an attachment. This time, click save as draft. Go
+  back to the F.SH main page.
+  - Draft should display.
+  Click on draft.
+  - Should return to discussion page with form open showing reply, including
+    the attachment.
+  Click post.
+  - Reply should be posted including attachment.
+
+ATT10 / U.ET [change]
+  Go to the discussion (ATT04). Against the reply (ATT07), click the History
+  link to see previous versions of the post.
+  - History page should display showing the old version of the post as well
+    as the current one.
+  - The old version should include the previous attachment file.
+  - Click the link to the previous attachment and check it offers download
+    prompt.
+
+** PASSED 2011-02-23
+
+
+FLG Flags
+=========
+
+FLG01 / U.ET
+  Go into F.SH. Start a discussion. Post a reply in the discussion.
+  You should see a greyed out 'Flag post' link and a 'flag' icon in the list of links at the bottom of the posts
+  Mouse over the flag link
+  - Title should popup 'Flag post'.
+  Click the link.
+  - The flag link should change to 'Remove flag' and the flag icon should change to the 'flagged' display.
+  Mouse over it again
+  - New title 'Remove flag'.
+  Click it again.
+  - the 'Flag post' link and a 'flag' icon should be greyed out
+  Mouse over it again.
+  - Title should be back to first one.
+  Click the 'Flag post' link against the reply.
+  - Reply should now be flagged.
+
+FLG02 / U.ET
+  Return to F.SH main page.
+  - Below the discussion list, a list of flagged posts should appear.
+  - The reply you flagged should be listed (title/summary, author U ET,
+    discussion name, and date posted). It should have a flag icon next to it.
+  Click the help icon next to the 'Flagged posts' title.
+  - Check it works.
+  Click the reply title/summary.
+  - You should be taken to the correct discussion, scrolled down (if possible)
+    so that the reply is at top of screen.
+
+FLG03 / U.ET
+  Return to F.SH main page. This time, click the discussion name where the
+  flagged post was.
+  - Discussion should load as normal (not jumping to flagged post).
+  - However, the flagged reply should be expanded (just because it is flagged;
+    flagged posts are always expanded).
+  Return to F.SH main page. Mouseover flag icon next to flagged post.
+  - Should show 'Remove flag' title.
+  Click flag icon.
+  - Page should reload; flagged message should be removed.
+
+FLG04 / U.S1 [change]
+  Go to F.SH and click into discussion FLG01. Click the 'Flag post' link of the top post.
+  - Page should reload, showing post as flagged, and with the top post at
+    top of screen (if possible).
+  Click the 'Flag post' link again.
+  - Page should reload once more, showing post not flagged, post at top.
+  Click 'Expand all posts'. Now click the reply 'Flag post' link.
+  - Page should reload with reply flagged. Reply should be already-expanded
+    this time.
+
+** PASSED 2011-02-23
+
+
+DSM Discussion page miscellaneous junk
+======================================
+
+DSM01 / U.S1
+  Go to F.WC (just for variety) and start a new discussion. Paste a reasonable
+  chunk of text (say, this test step) into the post and use subject 'DSM01'.
+  Post it. Reply to it with subject 'r1' and again paste a reasonable chunk of
+  text. Reply to it a second time using subject 'r2' and pasted text. Finally,
+  expand all posts and reply to r1, using subject r3 and again pasting the text.
+  Expand all posts again.
+  Scroll down so that r3 is at the top of the screen. Click on the 'Jump to:
+  parent' link in r3.
+  - Screen should jump to show r1 at top of screen.
+  Scroll so that r2 is near top of screen. Click 'Jump to: Parent'.
+  - Screen should jump to show DSM01 at top of screen.
+  Click the 'Permalink' link in r3.
+  - Page should reload, not expanded, with r3 at top.
+    NOTE: This behaviour (not expanded) is not ideal, but it makes more sense
+    when sharing the link with people using the normal JS version.
+  Copy the current URL into clipboard.
+
+DSM02 / U.S2 [change]
+  Go to F.WC. Click 'Mark all read'. Then paste URL from clipboard and hit
+  return.
+  - Discussion DSM01 should display.
+  - Post r3 should be expanded and at least some of it should appear on screen.
+  - Replies r1, r2 should be collapsed.
+
+DSM03 / U.S2
+  Click Expand next to r2.
+  - Post should appear.
+  Click 'Jump to: Parent' next to r2.
+  - Screen should scroll (fairly) smoothly to show DSM01 at top.
+  Scroll down as far as possible while still able to see the 'Parent' link in
+  r3. Click this link.
+  - r1 should expand, and screen should scroll so that it is at top.
+
+** PASSED 2011-02-23
+
+
+MOD Various moderator features
+==============================
+
+MOD01 / U.ET
+  Go to F.SH main page. Start a new discussion. In discussion, create a reply
+  with no subject and text r1 and an attachment. Reply to this reply with
+  subject MOD01-r2 and text r2. Click Split next to r2.
+  - The 'Split post' form should appear.
+  - It contains a subject field (initially filled in with 'MOD01-r2').
+  - Below is the part of the discussion that would be split (just r2).
+  Click Cancel.
+  - Should return to discussion.
+  Expand r1 this time and click split next to r1.
+  - This time the form should have a blank subject by default.
+  - It should show both r1 and r2 as being split.
+  Type a subject MOD01-r1 and click the Split button.
+  - Should go to viewing a new discussion that starts with message MOD01-r1
+    and contains the reply MOD01-r2 as well.
+  - Click attachment on MOD01-r1 and check it still works.
+  Return to forum main page. The discussion MOD01-r1 should be on top, but
+  MOD01 is still there; click on it.
+  - Discussion MOD01 should contain only the original message and not the two
+    replies.
+
+MOD02 / U.ET
+  Go to F.SH main page. Start a new discussion. On the discussion page, add
+  a reply, and include an attachment in the reply. Once done, click Merge
+  button at bottom of page.
+  - Merge warning should appear. Screen contains information about how to merge
+    and a 'Don't show again' button (there is no way to undo this so don't
+    click it).
+  Click Cancel.
+  - Should be back to discussion.
+  Click Merge again. This time, click 'Begin merge' button.
+  - Should be taken to forum main page.
+  Go to a different form F.WC. Go into a discussion in that forum.
+  - At the bottom of the discussion, the 'Cancel merge' button should be
+    offered (you cannot merge into a different forum).
+  Return to F.SH. Go into the discussion (MOD02).
+  - Again only 'Cancel merge' should be offered (you cannot merge into itself).
+  Click the Cancel option.
+  - You should be returned to discussion with the merge cancelled (no
+    highlighted buttons, only the normal merge button).
+  Click Merge and 'Begin merge' again. Go into the different discussion MOD01.
+  - This time options 'Merge here' and Cancel should appear.
+  Click Merge.
+  - Discussion should reload.
+  - The two messages from MOD02 should appear in the discussion.
+  - The message MOD02 should be a reply to the top-level discussion
+    post.
+  - The reply to MOD02 should still contain an attachment link (you will need
+    to expand it to see).
+  Click the attachment.
+  - Attachment download prompt should show.
+
+MOD03 / U.ET
+  In discussion MOD01, look at bottom of screen in the 'Move this discussion
+  to' dropdown.
+  - Should include 3 options for the other 3 forums on the course (F.VG, F.SG,
+    F.WC).
+  - Move button greyed out.
+  Select F.WC and click Move.
+  - You should be taken to the forum F.WC which now shows the discussion MOD01
+    on the list.
+  - Click on the discussion and check the attachment is still present and still
+    downloads
+
+MOD04 / U.ET
+  In discussion MOD01, use the move dropdown to select F.VG and click Move.
+  - You should get a prompt asking you which group you want to move it to.
+  - The prompt should let you choose from G1, G2, and 'All participants'.
+  Select G2 and click Move.
+  - You should be taken to forum F.VG showing the discussion MOD01 now
+    present in group G2.
+  Go into discussion MOD01. This time, select F.SG and click Move.
+  - There should be no group prompt.
+  - You should be taken to forum F.SG showing the discussion MOD01 still in
+    group G2.
+  Finally go into MOD01, select F.SH, and click Move.
+  - There should be no group prompt.
+  - You should be back in F.SH showing the discussion MOD01 (obviously it
+    doesn't have a group any more).
+
+MOD05 / U.ET
+  Click into discussion MOD01 again. This time, click the Copy button.
+  - Should show an information screen (like for merge).
+  Click Cancel.
+  - Should go back to discussion MOD01.
+  Click Copy again and this time click 'Begin copy'.
+  - Should return to forum main page for F.SH
+  - Next to 'Start discussion' is new buttton 'Paste discussion', Cancel.
+  Click Cancel.
+  - Page should reload without buttons.
+  Go back into MOD01 and copy it again. Go to F.SG and change to group G2.
+  - The two buttons should be visible again.
+  Click 'Paste discussion'.
+  - The page should reload with 'MOD01' discussion now visible in this group.
+  Click into MOD01, expand the last reply, and click the attachment.
+  - Download prompt should appear.
+  Go back to F.SH and click into the original MOD01 again. Click the attachment.
+  - Download prompt should appear.
+
+** PASSED 2011-02-23
+
+
+DEL Deleting and hiding discussions and posts
+=============================================
+
+NOTE: In this test, we will build up a list of URLs that students should not
+be able to access. Use a text editor such as Notepad to store the list so that
+you can test them all when indicated at the end.
+
+DEL01 / U.ET
+  Go to F.SH and start a new discussion. Then click the Delete button at
+  bottom of it.
+  - 'Are you sure?' prompt should appear.
+  Click Cancel.
+  - Should return to discussion.
+  Click Delete again and this time, click Delete.
+  - Should return to forum main page. Discussion (DEL01) is still visible but
+    is greyed out and has a line through.
+  Click on discussion (DEL01).
+  - Discussion displays. All posts show deleted (greyed out).
+  Click 'Undelete' button and then click 'Undelete' on the confirm form.
+  - Discussion should reload, posts are not greyed out any more.
+  Return to F.SH main page.
+  - Discussion should be shown as normal again (not greyed out, no line
+    through).
+  Go into discussion (DEL01) again and delete it once more. Copy the URL
+  and paste it into the list for later checking.
+
+DEL02 / U.ET
+  Return to F.SH and start a new discussion, but under 'Display period' in
+  the form, enable the 'Only show from' option, leaving it set to today's date.
+  Post the discussion.
+  - Should show discussion as normal.
+  Go to F.SH main page.
+  - Verify discussion still appears as normal.
+  Return to discussion, click 'Discussion options'.
+  - Options form should appear.
+  Change show from date to set it to a time in the future e.g. 2020. Save
+  changes.
+  - Should return to discussion.
+  Go to F.SH main page.
+  - Discussion should now show in grey (but not crossed out) with a clock icon
+    to the left. This is supposed to indicate that students cannot see the
+    discussion at present time.
+  Copy the URL of the discussion and paste it into the list for later checking.
+
+DEL03 / U.ET
+  Start another new discussion, this time setting the 'Only show until end'
+  to today's date (probably default). Save changes. Go to F.SH main
+  page.
+  - Verify normal discussion display.
+  Go back into discussion and change options to set the date to some time in
+  the past e.g. yesterday or 2010. Save and go back to F.SH main page.
+  - Verify clock icon and grey colouring.
+  Copy URL of discussion and paste it into list.
+
+DEL04 / U.S2 [change]
+  Go to F.SH.
+  - Verify that the list of recent discussions does not include DEL01, DEL02,
+    or DEL03.
+  One at a time, paste in the three discussion URLs from your text editor to
+  your browser.
+  - Verify that all three give an error and do not display the discussion.
+
+DEL05 / U.S2
+  Go to F.SH main page. Start another new discussion. Reply to it using text
+  r1. Reply to r1 using text r2. Then reply to the original discussion again
+  using text r3. Reply to original discussion again using text r4. Reply to
+  r4 using text r5.
+  Delete your replies r3 and r1.
+  - r3 should disappear entirely when deleted.
+  - r1 should not disappear (because there is a reply to it); the author
+    picture, author information, post date information, and content should
+    all disappear and be replaced by a box showing only the information
+    'Deleted by the author on (time).'
+
+DEL06 / U.ET [change]
+  Go into the discussion (DEL05).
+  - Verify that the deleted posts r1 and r3 are visible but with content
+    ('r1', 'r3') greyed out.
+  - Verify that they show user picture, post date.
+  - Verify that they contain information about who deleted them (U S2) and when.
+  Delete post r4.
+  - Verify that this also now shows information about who deleted it (U ET).
+
+DEL07 / U.S2 [change]
+  Go into the discussion (DEL05).
+  - Verify that the deleted post r4 now shows only the information 'deleted
+    by a moderator on (time)'.
+
+** PASSED 2011-02-24
+
+
+DEP Delete and email posts
+==========================
+
+DEP01 / Admin [Change]
+   Ensure the email addresses of the users U.S2 and U.ET are set to usable accounts
+   that are accessible by the tester, so that they can be checked during testing.
+
+DEP02 / U.ET [Change]
+   Go to F.SH and start a new discussion.
+   Enter the subject as 'DEP02 - testing delete and email post feature'.
+   Enter the message 'DEP02 The requirement is to show the post that is being deleted within the email
+   so the student can see what any comments are in reference to without having to access the discussion'.
+   Click Post discussion.
+-  Should return to discussion.
+
+DEP03 / U.S2
+   Go to F.SH and enter discussion 'DEP02 - testing delete and email post feature'.
+   Click 'reply' beneath the uet teacher post 'DEP02 - testing delete and email post feature'.
+   Enter the subject 'DEP03 user two response'.
+   Enter the message 'DEP03 This message may appear in the email following its deletion'.
+   Click Post reply.
+
+DEP04 / U.S2
+   Click 'reply' beneath the uet teacher post 'DEP02 - testing delete and email post feature'.
+   Enter the subject 'DEP04 user two response two'.
+   Enter the message 'DEP04 This message may also appear in an email following its deletion'.
+   Click Post reply.
+
+DEP04A / U.S2
+   Click 'reply' beneath the uet teacher post 'DEP02 - testing delete and email post feature'.
+   Enter the subject 'DEP04A user two response three'.
+   Enter the message 'DEP04A This message may also appear in an email following its deletion'.
+   Click Post reply.
+
+Return to the forum list.
+
+DEP05 / U.ET [Change]
+   Go to F.SH and enter discussion 'DEP02'
+   Click 'Delete' beneath the message 'DEP03 user two response'
+-  Confirm that the page refreshes with the 'Are you sure you want to delete this post?' box with
+   'Delete and email', 'Delete' and 'Cancel' buttons, above the selected post.
+   Click 'Delete and email'.
+-  Confirm that the page refreshes with the 'Delete and email author' form showing above the selected post.
+-  Verify that the message displayed in the form is:
+
+   'This is a notification to advise you that your forum post with the following details has been
+    deleted by 'uet {username}':'
+
+   Subject: DEP03 user two response
+   Forum: F.SH
+   Module: FORUMTEST
+
+   View the discussion
+
+-  Verify that there are two checkboxes beneath the message box,
+   'Send a copy to yourself' and 'Include post'.
+-  Verify that there is a text entry field 'Email address of other recipients'.
+-  Verify that the form also has a 'Send and delete' and 'Cancel' buttons, and that the selected
+   post is displayed beneath the form.
+   Click 'Send a copy to yourself'.
+   Click 'Send and delete'.
+
+DEP06 / U.ET
+-  Confirm that you are returned to the discussion.
+-  Confirm that the post 'DEP03 user two response' is now visible as deleted by uet {username}.
+-  Confirm that user2 has received an email 'Your post has been deleted'.
+-  Verify that the above message is reproduced in the email.
+
+DEP07 / U.ET
+   Click 'Expand all posts'.
+   Click 'Delete' beneath the message 'DEP04 user two response two'
+-  Confirm that the page refreshes with the 'Are you sure you want to delete this post?' box with
+   'Delete and email', 'Delete' and 'Cancel' buttons, above the selected post.
+   Click 'Delete and email'.
+-  Confirm that the page refreshes with the 'Delete and email author' form showing above the selected post.
+-  Verify that the message displayed in the form is similar to that in DEP05.
+-  Verify that there are two checkboxes beneath the message box,
+   'Send a copy to yourself' and 'Include post'.
+-  Verify that there is a text entry field 'Email address of other recipients'.
+-  Verify that the form also has a 'Send and delete' and 'Cancel' buttons, and that the selected
+   post is displayed beneath the form.
+   Click 'Send a copy to yourself'.
+   Click 'Include post'.
+   Click 'Send and delete'.
+
+DEP08 / U.ET
+-  Confirm that you are returned to the discussion.
+-  Confirm that the post 'DEP04 user two response two' is now visible as deleted by uet {username}.
+-  Confirm that user U.S2 has received an email 'Your post has been deleted'.
+-  Confirm that user U.ET has received an email 'Copy - Your post has been deleted'.
+-  Verify that the above form message is reproduced in the emails, followed by the deleted post.
+
+DEP08A / U.ET
+   Click 'Expand all posts'.
+   Click 'Delete' beneath the message 'DEP04A user two response three'
+-  Confirm that the page refreshes with the 'Are you sure you want to delete this post?' box with
+   'Delete and email', 'Delete' and 'Cancel' buttons, above the selected post.
+   Click 'Delete and email'.
+-  Confirm that the page refreshes with the 'Delete and email author' form showing above the selected post.
+-  Verify that the message displayed in the form is similar to that in DEP05.
+-  Verify that there are two checkboxes beneath the message box,
+   'Send a copy to yourself' and 'Include post'.
+-  Verify that there is a text entry field 'Email address of other recipients'.
+-  Verify that the form also has a 'Send and delete' and 'Cancel' buttons, and that the selected
+   post is displayed beneath the form.
+   Click 'Send a copy to yourself'.
+   Click 'Include post'.
+-  Enter multiple checkable user email addresses which you have access to.
+   Click 'Send and delete'.
+
+DEP08B / U.ET
+-  Confirm that you are returned to the discussion.
+-  Confirm that the post 'DEP04A user two response three' is now visible as deleted by uet {username}.
+-  Confirm that user U.S2 has received an email 'Your post has been deleted'.
+-  Confirm that user U.ET has received an email 'Copy - Your post has been deleted'.
+-  Confirm that the other users have received an email 'Copy - Your post has been deleted'.
+-  Verify that the above form message is reproduced in the emails, followed by the deleted post.
+
+DED Delete and email discussions
+================================
+
+DED01 / Admin
+   Ensure the email addresses of the users U.S2 and Admin are set to usable local accounts
+   that are accessible by the tester, so that they can be checked during testing.
+   Note that the email address for these users should be unique, though they can refer to the same mail account.
+
+DED02 / Admin
+   Create a forum called FR1.
+   Create a discussion called D1.
+   From within D1 discussion choose Delete button to delete the discussion.
+   -  Check that only Delete and Cancel buttons appear as options.
+   Select the Delete button.
+   -  Go to forum FR1 and check that the discussion D1 has been deleted (name is greyed out and struck through).
+   Select discussion D1.
+   Undelete the discussion by selecting 'Undelete' button.
+   -  Verify Undelete and Cancel buttons shown.
+   Select Undelete.
+   -  Check the discussion D1 is no longer deleted (name appears normally).
+
+DED03 / U.S2 [change]
+   Go to the forum FR1.
+   Select the discussion D1.
+   Reply to the initial post made by Admin.
+   Save post.
+
+DED04 / Admin [change]
+   Go to forum FR1.
+   Select the discussion D1.
+   Select 'Delete' button to delete the discussion.
+   -  Check that Delete, Delete and email and Cancel buttons appear on a pop up.
+   Choose the Delete and email button.
+   -  This should bring up the delete and email screen with form.
+   -  The top Message text area should display:
+    'This is a notification to advise you that a discussion you have
+    started with the following details has been deleted by {firstname} {lastname}:
+
+    Subject: {subject}
+    Forum: {forum}
+    Module: {course}'
+
+  Select checkbox marked 'Send a copy to yourself'.
+  In the text area marked 'Email address of other recipients' enter valid email address
+      (should not be same as U.S2's email address).
+  Select checkbox marked 'Notify other contributors'
+  - That notification message should display:
+   'This is a notification to advise you that a discussion you have contributed to
+   with the following details has been deleted by {firstname} {lastname}:
+
+   Subject: {subject}
+   Forum: {forum}
+   Module: {$course}'
+
+  Select the 'Send and delete' button.
+  - Check that the discussion has been deleted.
+  - Check that four emails have been sent/received:
+   An email to Admin informing them that a discussion that they started has been deleted.
+   A COPY email to Admin informing them that a discussion has been deleted.
+   Another COPY email to the email address entered into the area marked 'Email address of other recipients'.
+   An email to U.S2 informing them that a discussion they contributed to has been deleted.
+  Select discussion D1.
+  Undelete the discussion.
+
+DED05 / Admin
+  Go to forum FR1.
+  Select discussion D1.
+  Select the Delete button to delete the discussion.
+  - Check that Delete, Delete and email and Cancel buttons appear on the pop up.
+  Choose the Delete and email button.
+  - This should bring up the delete and email screen.
+  Select the 'Send and delete' button.
+  - Check that the discussion has been deleted.
+  - Check that one email has been sent/received:
+   An email to admin informing them that a discussion that they started has been deleted.
+  Click against the discussion.
+  Undelete the discussion.
+
+DE06 / U.S2 [change]
+  Go to forum FR1.
+  Create a discussion D2 with a single post.
+
+DED07 / Admin [change]
+  Go to forum FR1.
+  Select discussion D2.
+  Choose to delete the discussion.
+  - Check that Delete, Delete and email and Cancel buttons appear on the pop up.
+  Choose the Delete button.
+  - Verify Delete and Cancel buttons appear.
+  Select Delete button.
+  - Verify discussion D2 is shown as deleted.
+  Select discussion D2.
+  Select Undelete and undelete the discussion.
+
+DED08 / Admin
+  Re-test the above with JS switched off using the forum and discussions already created.
+  There is no need to recreate the forum or discussions or the posts.
+  Note Delete popup is replaced with a physical screen when JS is disabled.
+
+EML Email
+=========
+
+NOTE: This section specifies that you create new forums because that ensures
+there is no old subscription information hanging around, reducing the
+potential for confusion.
+
+NOTE: Before starting this section, check that both users (U.S2, U.ET)
+have email addresses set up that go to an email address that you can read.
+When testing within the OU, note that developer servers will only send email
+to OU (@open.ac.uk) addresses.
+
+NOTE: This script uses the phrase 'trigger email sending' to indicate that you
+should make sure the system sends out emails at that point. You can manually
+trigger email sending on test servers by visiting the URL admin/cron.php in a browser
+when logged in as admin. On acct/live servers the post emails
+are sent at the start of every hour automatically.
+It will probably be useful to use multiple browsers for
+this test (one to do the email ending, the other for everything else).
+
+NOTE: Running cron.php also runs periodic tasks for all other modules, not
+just ForumNG. Consequently, cron might be broken even if there is nothing
+wrong with ForumNG.
+
+EML01 / U.ET [change]
+  Create a new forum F.EWC set to 'no groups' mode. Go into the forum and
+  click the Subscribe button to subscribe to the whole forum.
+  - Verify that the text changes to indicate that you are subscribed to the
+    forum and show your email address.
+  - Verify 'Your email preferences (change):' and information on current email
+    preferences are shown under the subscription text.
+  Select 'change' link.
+  - Verify you are taken to the user profile edit page for U.ET.
+  Open the 'Preferences' section.
+  Set 'Email format' drop-down to 'Pretty HTML format'
+  Set 'Email digest type' to 'No digest (single email per forum post)'
+  Select 'Update profile'
+  Navigate back to forum F.EWC
+  - Verify 'No digest (single email per forum post), Pretty HTML format' is shown
+    in the subscription preferences information text.
+
+EML02 / U.ET
+  Ensure you are in forum F.EWC
+  Start new discussion EML01. In the form, click the 'Mail soon' box.
+  In that discussion, create a reply EML01-b; but in this reply, do not click
+  the 'Mail soon' box.
+  - Verify that no subscription information including mail preferences is shown at the
+    bottom of the discussion.
+  Trigger email sending [see above].
+  - Verify that you receive email copy of EML01 but not EML01-b.
+  Wait for the system editing timeout (5 mins). While waiting, go to your user profile and
+  change the setting about email type from HTML format to text format.
+  Then trigger email sending again.
+  - Verify that you now receive email copy of EML01-b in text format.
+  Change email type back to HTML format.
+
+EML03 / U.ET
+  Check the email copy of EML01.
+  - Verify that it is in HTML format.
+  - Verify that it contains whatever message you typed, along with
+    course shortname, forum name, and at the bottom, an unsubscribe link.
+  Check the email copy of EML01-b.
+  - It should be similar but in plain text format.
+  - Verify that it includes, at the bottom, the message that it was replying
+    to (i.e. the text of the original discussion post).
+
+EML04 / U.ET
+  Go to F.EWC and click the 'View subscribers' link.
+  - List of subscribers should be shown (containing only you).
+  In one of the emails, click the unsubscribe link.
+  - You should be taken to a page confirming that you're unsubscribed.
+  Go back to F.EWC and click the 'View subscribers' link again.
+  - Verify that there are now no subscribers.
+  Go back to F.EWC and use the button to subscribe again. View subscribers.
+  - Now you're on the list again.
+  Click the tickbox next to your name and click the unsubscribe button.
+  - No subscribers again.
+  Go back to F.EWC and click Subscribe then Unsubscribe; check the list.
+  - Still no subscribers.
+
+EML05 / U.ET
+  Go to F.EWC forum home page.
+  - Verify email preferences text is not shown under subscription option.
+  Start a new discussion 'EML04-a' (mail soon). In that discussion,
+  make a reply EML04-b (mail soon). Delete the reply.
+  Start a new discussion EML04-c (mail soon). Delete it.
+  Start a new discussion EML04-d (mail soon). Set it to not appear until the
+  future.
+  Subscribe to F.EWC again. Trigger email sending.
+  - Check that you receive EML04-a but not any of the others.
+    NOTE: It would be good to test EML04-d is actually emailed after the date
+    passes, but I couldn't think of an easy way to test that without actually
+    waiting for the next day; and for a full test (given the safety-net period),
+    it would have to be about a week probably.
+
+EML06 / U.ET
+  Unsubscribe from F.EWC.
+  Start a new discussion 'EML05-a' (mail soon).
+  Start a second new discussion 'EML05-b' (mail soon).
+  - Verify that no mail preference information is shown at the bottom of the discussion
+    under the subscribe button.
+  Inside EML05-b, click the button at the bottom to subscribe just to that discussion.
+  - Verify that the button changes to say you're subscribed to that discussion.
+   - Verify 'Your email preferences (change): No digest (single email per forum post),
+     Pretty HTML format' is shown in the subscription preferences information text.
+  - Trigger email sending.
+  - Check that you receive EML05-b but not EML05-a.
+  Return to F.EWC main page.
+  - Verify that text by subscribe button shows you as subscribed to 'some
+    discussions' and offers a 'subscribe all' / 'unsubscribe' choice.
+  View subscriber list.
+  - Check that it shows you with the note indicating that you are subscribed
+    to 1 discussion, where previously it showed 'whole forum'.
+  Return to F.EWC main page. Click unsubscribe.
+  - Verify that it now says you aren't subscribed at all.
+  Delete forum F.EWC.
+
+EML07 / U.ET
+  Create new forum F.ESG set to separate groups mode. Ensure you are in the
+  'all participants' view, then click subscribe button.
+  - It should say that you are subscribed to the forum.
+  Change to group G1. Start new discussion EML06-a (mail soon).
+  Change to group G2. Start new discussion EML06-b (mail soon).
+
+EML08 / U.S2 [change]
+  Go to new forum F.ESG. (You should be in group G2.) Click subscribe button.
+  - It should say you're subscribed to the group.
+  - Verify email preferences information is shown.
+  Trigger email sending.
+  - Verify that the discussion EML06-a and b are both sent to user U.ET's email,
+    but the discussion EML06-b is only sent to user U.S2's email.
+
+EML09 / U.ET [change]
+  In F.ESG, change to 'All participants' and view subscriber list.
+  - Both users should now be shown.
+  - For U.ET it should show 'All'.
+  - For U.S2 it should show the group 'G2'.
+  Change to looking at the group G2.
+  - Both users still shown.
+  Change to looking at G1.
+  - Only U.ET now shown.
+
+** PASSED 2011-02-24
+
+SAV - Post save checking
+========================
+
+SAV01 / U.ET
+  Use any existing form where U.ET can post to, or alternatively create a new course/forum for this test.
+  Acccess the test form, and select the 'Start a new discussion' button (selecting group if necessary)
+  Enter text 'Save check' into Subject field and any text into Message field.
+  Select to Sign out of SAMS from the OU top bar by opening link in a new tab.
+  (For non-SAMS sites such as ttdev open a new tab and access /login/logout.php instead)
+  Close the new (once signed-out) tab.
+  Select 'Post discussion' button.
+  - Verify a warning popup appears notifying that saving the post will fail due to network issues.
+  Select 'Ok' to close the popup.
+  - Verify 'Post discussion' and 'Save as draft' buttons become disabled.
+  Select the 'Cancel' button.
+  - Verify login takes place and you are redirected back to the forum 'Start discussion' page.
+  - If group forum, verify correct group is selected in Group drop-down.
+  Enter text 'Save check' into Subject field and any text into Message field.
+  Select 'Post discussion' button.
+  - Verfiy discussion created and you are redirected to discussion page.
+
+SAV02 / U.ET
+  Select the 'Reply' button against discussion start post.
+  Enter any text into the Message field.
+  Select to Sign out of SAMS from the OU top bar by opening link in a new tab.
+  (For non-SAMS sites such as ttdev open a new tab and access /login/logout.php instead)
+  Close the new (once signed-out) tab.
+  Select 'Save as draft' button.
+  - Verify a warning popup appears notifying that saving the post will fail due to network issues.
+  Select 'Ok' to close the popup.
+  - Verify 'Post discussion' and 'Save as draft' buttons become disabled.
+  Select 'Cancel' button.
+  - Verify new post is removed, to leave just discussion showing.
+
+
+AREAS THAT SHOULD BE TESTED BUT HAVE NOT BEEN
+=============================================
+
+* Backup/restore
+
+* Email digest
+
+* Atom/RSS feeds
+
+* Lock
+
+* Forward by email
+
+* Print
+
+* Show readers
+
+* Shared forums
+
+* Forced/initial subscribe
+
+* Automatic move/delete of old messages
+
+* Introdcution separate from description which can be shown on the module page
diff --git a/mod/forumng/internaldoc/testcase.users.csv b/mod/forumng/internaldoc/testcase.users.csv
new file mode 100644
index 0000000..321be3a
--- /dev/null
+++ b/mod/forumng/internaldoc/testcase.users.csv
@@ -0,0 +1,4 @@
+username,password,firstname,lastname,course1,role1,group1,email
+uet,passwordA1;,U,ET,FORUMTEST,editingteacher,,YOUR@email
+us1,passwordA1;,U,S1,FORUMTEST,student,G1,YOur@email
+us2,passwordA1;,U,S2,FORUMTEST,student,G2,yoUR@email
diff --git a/mod/forumng/lang/en/forumng.php b/mod/forumng/lang/en/forumng.php
new file mode 100644
index 0000000..1e7512a
--- /dev/null
+++ b/mod/forumng/lang/en/forumng.php
@@ -0,0 +1,952 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['event:discussioncreated'] = 'Add discussion';
+$string['event:discussiondeleted'] = 'Delete discussion';
+$string['event:discussionlocked'] = 'Lock discussion';
+$string['event:discussionmerged'] = 'Merge discussion';
+$string['event:discussionpermdeleted'] = 'Permanently delete discussion';
+$string['event:discussionundeleted'] = 'Undelete discussion';
+$string['event:discussionunlocked'] = 'Unlock discussion';
+$string['event:discussionviewed'] = 'View discussion';
+$string['event:mailsent'] = 'Mail sent ok';
+$string['event:postcreated'] = 'Add reply';
+$string['event:postdeleted'] = 'Delete post';
+$string['event:postundeleted'] = 'Undelete post';
+$string['event:postupdated'] = 'Edit post';
+$string['event:postreported'] = 'Report post';
+$string['event:postsplit'] = 'Split post';
+$string['event:savefailed'] = 'Session fail on post save';
+$string['event:subscriptioncreated'] = 'Subscription created';
+$string['event:subscriptiondeleted'] = 'Subscription removed';
+
+$string['replytouser'] = 'Use email address in reply';
+$string['configreplytouser'] = 'When a forum post is mailed out, should it contain the user\'s
+email address so that recipients can reply personally rather than via the forum? Even if set to
+\'Yes\' users can choose in their profile to keep their email address secret.';
+$string['disallowsubscribe'] = 'Subscriptions are not permitted';
+$string['forcesubscribe'] = 'Force everyone to be (and stay) subscribed';
+$string['subscription'] = 'Email subscription';
+$string['subscription_help'] = 'You can force everyone to be subscribed, or set them be subscribed
+initially; the difference is that in the latter case, they can choose to unsubscribe themselves.
+
+These options include all users (students and staff) who are enrolled on the course. Users who do
+not belong to the course (such as administrators) can still optionally subscribe.';
+$string['configtrackreadposts'] = 'Set to \'yes\' if you want to track read/unread for each user.';
+$string['forums'] = 'Forums';
+$string['digestmailheader'] = 'This is your daily digest of new posts from the {$a->sitename}
+forums. To change your forum email preferences, go to {$a->userprefs}.';
+$string['digestmailprefs'] = 'your user profile';
+$string['digestmailsubject'] = '{$a}: forum digest';
+$string['unsubscribe'] = 'Unsubscribe from this forum';
+$string['unsubscribeall'] = 'Unsubscribe from all forums';
+$string['postmailinfo'] = 'This is a copy of a message posted on the {$a} website.
+
+To add your reply via the website, click on this link:';
+
+$string['forumsubscription'] = 'Forum subscription';
+
+$string['discussionoptions'] = 'Discussion options';
+$string['forum'] = 'Forum';
+$string['subscribed'] = 'Subscribed';
+$string['subscribegroup'] = 'Subscribe to this group\'s forum';
+$string['subscribeshort'] = 'Subscribe to forum';
+$string['subscribelong'] = 'Subscribe to whole forum';
+$string['unsubscribegroup'] = 'Unsubscribe from this group\'s forum';
+$string['unsubscribegroup_partial'] = 'Unsubscribe from discussions in this group';
+$string['unsubscribeshort'] = 'Unsubscribe';
+$string['unsubscribelong'] = 'Unsubscribe from the forum';
+$string['subscribediscussion'] = 'Subscribe to discussion';
+$string['unsubscribediscussion'] = 'Unsubscribe from discussion';
+$string['subscribeddiscussionall'] = 'All';
+$string['subscribedthisgroup'] = 'This group';
+$string['numberofdiscussions'] = '{$a} discussions';
+$string['numberofdiscussion'] = '{$a} discussion';
+$string['discussions'] = 'Discussions';
+$string['posts'] = 'Posts';
+$string['subscribe'] = 'Subscribe to this forum';
+$string['allsubscribe'] = 'Subscribe to all forums';
+$string['allunsubscribe'] = 'Unsubscribe from all forums';
+$string['forumname'] = 'Forum name';
+$string['forumtype'] = 'Forum type';
+$string['forumtype_help'] = 'Different types of forum are available for specific purposes or
+teaching methods. The standard forum type is appropriate for all normal use.';
+$string['forumtype_link'] = 'mod/forumng/forumtypes';
+$string['forumintro'] = 'Forum introduction (shown above the list of discussions)';
+$string['forumdescription'] = 'Forum description (shown beside links to this forum, if the option below is on)';
+$string['ratingtime'] = 'Restrict ratings to posts with dates in this range:';
+$string['ratings'] = 'Ratings';
+$string['grading'] = 'Grade';
+$string['grading_help'] = 'If you select this option, a grade for this forum will be added to the
+course gradebook and calculated automatically. Leave this off for a non-assessed forum, or one you
+plan to assess manually.
+
+The different ways to calculate grading are fairly self-explanatory; in each case, the grade for
+each student is calculated based on all ratings for all posts they have made. Grades are limited to
+the scale; for example if the scale is 0-3, the grading method is set to &lsquo;count&rsquo; and
+the student&rsquo;s posts have received 17 ratings, their grade will be 3.';
+$string['nodiscussions'] = 'There are no discussions in this forum yet.';
+$string['startedby'] = 'Started by';
+$string['discussion'] = 'Discussion';
+$string['unread'] = 'Unread';
+$string['lastpost'] = 'Last post';
+$string['group'] = 'Group';
+$string['addanewdiscussion'] = 'Start a new discussion';
+$string['subject'] = 'Subject';
+$string['message'] = 'Message';
+$string['subscribestart'] = 'Send me email copies of posts to this forum';
+$string['subscribestop'] = 'I don\'t want email copies of posts to this forum';
+$string['mailnow'] = 'Mail soon';
+$string['displayperiod'] = 'Display period';
+$string['subscriptions'] = 'Subscriptions';
+$string['nosubscribers'] = 'There are no subscribers yet for this forum.';
+$string['subscribers'] = 'Subscribers';
+$string['numposts'] = '{$a} post(s)';
+$string['noguestsubscribe'] = 'Sorry, guests are not allowed to subscribe to receive forum postings
+by email.';
+
+$string['discussionsperpage'] = 'Discussions per page';
+$string['configdiscussionsperpage'] = 'Maximum number of discussions shown in a forum per page';
+$string['attachmentmaxbytes'] = 'Maximum attachment size';
+$string['attachmentmaxbytes_help'] = 'This is the maximum <i>total</i> size for all attachments on
+a single post.';
+$string['configattachmentmaxbytes'] = 'Default maximum size for all forum attachments on the site
+(subject to course limits and other local settings)';
+$string['readafterdays'] = 'Read after days';
+$string['configreadafterdays'] = 'After this number of days, posts are considered to have been read
+by all users.';
+$string['trackreadposts'] = 'Track unread posts';
+$string['teacher_grades_students'] = 'Teacher grades students';
+$string['grading_average'] = 'Average of ratings';
+$string['grading_count'] = 'Count of ratings';
+$string['grading_max'] = 'Maximum rating';
+$string['grading_min'] = 'Minimum rating';
+$string['grading_none'] = 'No grade';
+$string['grading_sum'] = 'Sum of ratings';
+$string['subscription_permitted'] = 'Everyone can choose to be subscribed';
+$string['subscription_forced'] = 'Force everyone to be subscribed';
+$string['enableratings'] = 'Allow posts to be rated';
+$string['enableratings_help'] = 'If enabled, forum posts can be given ratings using a numeric or
+defined Moodle scale. One or more people can rate the post and the displayed rating is the average
+(mean) of those ratings.
+
+If you use a numeric scale up to 5 (or fewer) then a nice &lsquo;star&rsquo; display is used.
+Otherwise it&rsquo;s a dropdown.
+
+The capabilities system controls who can rate posts and see ratings. By default, only teachers can
+rate posts, and students can only see ratings on their own posts.';
+$string['markdiscussionread'] = 'Mark all posts in this discussion read.';
+$string['forumng:addinstance'] = 'Add a new ForumNG';
+$string['forumng:createattachment'] = 'Create attachments';
+$string['forumng:deleteanypost'] = 'Delete any post';
+$string['forumng:editanypost'] = 'Edit any post';
+$string['forumng:managesubscriptions'] = 'Manage subscriptions';
+$string['forumng:movediscussions'] = 'Move discussions';
+$string['forumng:rate'] = 'Rate posts';
+$string['forumng:grade'] = 'Grade posts';
+$string['forumng:replypost'] = 'Reply to posts';
+$string['forumng:splitdiscussions'] = 'Split discussions';
+$string['forumng:startdiscussion'] = 'Start new discussions';
+$string['forumng:viewanyrating'] = 'View any ratings';
+$string['forumng:viewdiscussion'] = 'View discussions';
+$string['forumng:viewrating'] = 'View ratings of own posts';
+$string['forumng:viewsubscribers'] = 'View subscribers';
+$string['forumng:copydiscussion'] = 'Copy discussion';
+$string['forumng:forwardposts'] = 'Forward posts';
+$string['forumng:postasmoderator'] = 'Indentify self as moderator in post';
+$string['forumng:postanon'] = 'Post as anonymous moderator';
+$string['forumng:addtag'] = 'Allow user to set tags for a discussion';
+$string['pluginadministration'] = 'ForumNG administration';
+$string['modulename'] = 'ForumNG';
+$string['pluginname'] = 'ForumNG';
+$string['modulenameplural'] = 'ForumNGs';
+$string['forbidattachments'] = 'Attachments not permitted';
+$string['configenablerssfeeds'] = 'This switch will enable the possibility of RSS feeds for all
+forums.  You will still need to turn feeds on manually in the settings for each forum, or below.';
+$string['allowsubscribe'] = 'Allow people to subscribe';
+$string['initialsubscribe'] = 'Automatically subscribe everyone';
+$string['perforumoption'] = 'Configured separately for each forum';
+$string['configsubscription'] = 'Control email subscription options on all forums across the site.';
+$string['feedtype'] = 'Feed contents';
+$string['feedtype_help'] = 'If enabled, users can subscribe to the forum using an Atom or RSS feed
+reader. You can set the feed to include only top-level discussions and not replies, or to include
+all posts.';
+$string['configfeedtype'] = 'Select the information to include in all forum RSS feeds.';
+$string['feedtype_none'] = 'Feed disabled';
+$string['feedtype_discussions'] = 'Contains discussions only';
+$string['feedtype_all_posts'] = 'Contains all posts';
+$string['permanentdeletion'] = 'Wipe unused data after';
+$string['configpermanentdeletion'] = 'After this time period, deleted posts and old versions of
+edited posts are permanently wiped from the database.';
+$string['permanentdeletion_never'] = 'Never (do not wipe unused data)';
+$string['permanentdeletion_soon'] = 'Wipe as soon as possible';
+$string['usebcc'] = 'Send emails with BCC';
+$string['configusebcc'] = 'Leave this value at 0 to use Moodle default mail handling (safest). Set
+to a number (e.g. 50)  to group forum emails together using the BCC header so that Moodle only has
+to send a single email which your mail server delivers to many subscribers. This can improve
+performance of email in forum cron, but does not have some features of standard Moodle email such
+as charset options and bounce handling.';
+$string['donotmailafter'] = 'Do not mail after (hours)';
+$string['configdonotmailafter'] = 'To prevent causing a mail flood if the server cron does not run
+for a time, the forum will not send out emails for posts that are older than this many hours.';
+$string['re'] = 'Re: {$a}';
+$string['discussionsunread'] = 'Discussions (unread)';
+$string['feeds'] = 'Feeds';
+$string['atom'] = 'Atom';
+$string['subscribe_confirm'] = 'You have been subscribed.';
+$string['unsubscribe_confirm'] = 'You have been unsubscribed.';
+$string['subscribe_confirm_group'] = 'You have been subscribed to the group.';
+$string['unsubscribe_confirm_group'] = 'You have been unsubscribed from the group.';
+$string['subscribe_already'] = 'You are already subscribed.';
+$string['subscribe_already_group'] = 'You are already subscribed to this group.';
+$string['unsubscribe_already'] = 'You are already unsubscribed.';
+$string['unsubscribe_already_group'] = 'You are already unsubscribed from this group.';
+$string['subscription_initially_subscribed'] = 'Everyone is initially subscribed';
+$string['subscription_not_permitted'] = 'Subscription is not permitted';
+$string['feeditems'] = 'Recent items in feeds';
+$string['feeditems_help'] = 'The number of items included in the Atom/RSS feeds. If this is set
+low, then users who don&rsquo;t check the feed frequently might miss some messages.';
+$string['configfeeditems'] = 'Number of recent messages that are included in a feed.';
+$string['limitposts'] = 'Limit posts';
+$string['enablelimit'] = 'Limit user posting';
+$string['enablelimit_help'] = 'This option limits discussions and replies made by students
+(specifically, any users who do not have the <tt>mod/forumng:ignorethrottling</tt> capability).
+
+When a student is only permitted 3 more posts, a warning displays in the post form. After their
+limit runs out, the system displays the time at which they&rsquo;ll be able to post again.';
+$string['completiondiscussions'] = 'User must create discussions:';
+$string['completiondiscussionsgroup'] = 'Require discussions';
+$string['completiondiscussionsgroup_help'] = 'If ticked, the forum will be marked complete for a
+student once they have started the required number of new discussions (and met any other
+conditions).';
+$string['completionposts'] = 'User must post discussions or replies:';
+$string['completionpostsgroup'] = 'Require posts';
+$string['completionpostsgroup_help'] = 'If ticked, the forum will be marked complete for a student
+once they have created the required number of discussions/replies, counting each discussion or
+reply as one (and met any other conditions).';
+$string['completionreplies'] = 'User must post replies:';
+$string['completionrepliesgroup'] = 'Require replies';
+$string['completionrepliesgroup_help'] = 'If ticked, the forum will be marked complete for a
+student once they have made the required number of replies to existing discussions (and met any
+other conditions).';
+$string['ratingfrom'] = 'Rate only posts from';
+$string['ratinguntil'] = 'Rate only posts until';
+$string['postingfrom'] = 'Posting only allowed from';
+$string['postinguntil'] = 'Posting only allowed until';
+$string['postsper'] = 'posts per';
+$string['alt_discussion_deleted'] = 'Deleted discussion';
+$string['alt_discussion_timeout'] = 'Not currently visible to users (time limit)';
+$string['alt_discussion_sticky'] = 'This discussion always appears at top of list';
+$string['alt_discussion_locked'] = 'Discussion is read-only';
+$string['alt_discussion_moderator'] = 'Discussion is moderated';
+$string['subscribestate_partiallysubscribed'] = 'You receive messages from some discussions in
+this forum via email to {$a}.';
+$string['subscribestate_partiallysubscribed_thisgroup'] = 'You receive messages from some
+discussions in this group via email to {$a}.';
+$string['subscribestate_groups_partiallysubscribed'] = 'You receive messages from some groups in
+this forum via email to {$a}.';
+$string['subscribestate_subscribed'] = 'You receive messages from this forum via email to {$a}.';
+$string['subscribestate_subscribed_thisgroup'] = 'You receive messages from this group via email
+to {$a}.';
+$string['subscribestate_subscribed_notinallgroup'] = 'Click &lsquo;Unsubscribe&rsquo; to unsubscribe
+from the forum.';
+$string['subscribestate_unsubscribed'] = 'You do not currently receive messages from this forum by
+email. If you would like to, click &lsquo;Subscribe to forum&rsquo;.';
+$string['subscribestate_unsubscribed_thisgroup'] = 'You do not currently receive messages from this
+group by email. If you would like to, click &lsquo;Subscribe to this group&rsquo;.';
+$string['subscribestate_not_permitted'] = 'This forum does not allow email subscription.';
+$string['subscribestate_forced'] = '(This forum does not allow you to unsubscribe.)';
+$string['subscribestate_no_access'] = 'You do not have access to subscribe to this forum by
+email.';
+$string['subscribestate_discussionsubscribed'] = 'You receive messages from this discussion via
+email to {$a}.';
+$string['subscribestate_discussionunsubscribed'] = 'You do not currently receive messages from this
+discussion by email. If you would like to, click &lsquo;Subscribe to discussion&rsquo;.';
+$string['subscribestate_info'] = 'Your email preferences{$a}:';
+$string['subscribestate_info_link'] = 'change';
+$string['replytopost'] = 'Reply to post: {$a}';
+$string['editpost'] = 'Edit post: {$a}';
+$string['editdiscussionoptions'] = 'Edit discussion options: {$a}';
+$string['optionalsubject'] = 'Change subject (optional)';
+$string['attachmentnum'] = 'Attachment {$a}';
+$string['sticky'] = 'Sticky discussion?';
+$string['sticky_no'] = 'Discussion is sorted normally';
+$string['sticky_yes'] = 'Discussion stays on top of list';
+$string['timestart'] = 'Only show from';
+$string['timeend'] = 'Only show until end';
+$string['date_asc'] = 'oldest first';
+$string['date_desc'] = 'recent first';
+$string['numeric_asc'] = 'lowest first';
+$string['numeric_desc'] = 'highest first';
+$string['sorted'] = 'sorted {$a}';
+$string['text_asc'] = 'A-Z';
+$string['text_desc'] = 'Z-A';
+$string['sortby'] = 'Sort by {$a}';
+$string['rate'] = 'Rate';
+$string['expand'] = 'Expand<span class=\'accesshide\'> post {$a}</span>';
+$string['expand_text'] = 'Expand post';
+$string['postnum'] = 'Post {$a->num}';
+$string['postnumreply'] = 'Post {$a->num}{$a->info} in reply to {$a->parent}';
+$string['postinfo_short'] = 'summarised';
+$string['postinfo_unread'] = 'unread';
+$string['postinfo_deleted'] = 'deleted';
+$string['split'] = 'Split<span class=\'accesshide\'> post {$a}</span>';
+$string['reply'] = 'Reply<span class=\'accesshide\'> to post {$a}</span>';
+$string['directlink'] = 'Permalink<span class=\'accesshide\'> to post {$a}</span>';
+$string['directlinktitle'] = 'Direct link to this post';
+$string['edit'] = 'Edit<span class=\'accesshide\'> post {$a}</span>';
+$string['delete'] = 'Delete<span class=\'accesshide\'> post {$a}</span>';
+$string['undelete'] = 'Undelete<span class=\'accesshide\'> post {$a}</span>';
+$string['deletedpost'] = 'Deleted post.';
+$string['deletedbyauthor'] = 'This post was deleted by the author on {$a}.';
+$string['deletedbymoderator'] = 'This post was deleted by a moderator on {$a}.';
+$string['deletedbyuser'] = 'This post was deleted by {$a->user} on {$a->date}.';
+$string['expandall'] = 'Expand all posts';
+$string['deletepost'] = 'Delete post: {$a}';
+$string['undeletepost'] = 'Undelete post: {$a}';
+$string['confirmdelete'] = 'Are you sure you want to delete this post?';
+$string['confirmdeletediscuss'] = 'Delete discussion';
+$string['confirmdelete_notdiscussion'] = 'Deleting this post will not delete the discussion. If
+you want to delete the discussion, use the controls at bottom of the discussion page.';
+$string['confirmundelete'] = 'Are you sure you want to undelete this post?';
+$string['splitpost'] = 'Split post: {$a}';
+$string['splitpostbutton'] = 'Split post as new discussion';
+$string['splitinfo'] = 'Splitting this post will remove it, and all its replies, from the current
+discussion. A new discussion will be created (shown below).';
+$string['editbyself'] = 'Edited by the author on {$a}';
+$string['editbyother'] = 'Edited by {$a->name} on {$a->date}';
+$string['history'] = 'History';
+$string['historypage'] = 'History: {$a}';
+$string['currentpost'] = 'Current version of post';
+$string['olderversions'] = 'Older versions (most recent first)';
+$string['deleteemailpostbutton'] = 'Delete and email';
+$string['deleteandemail'] = 'Delete and email author';
+$string['emailmessage'] = 'Message';
+$string['emailcontentplain'] = 'This is a notification to advise you that your forum post with the
+ following details has been deleted by \'{$a->firstname} {$a->lastname}\':
+
+Subject: {$a->subject}
+Forum: {$a->forum}
+Module: {$a->course}
+
+To view the discussion visit {$a->deleteurl}';
+$string['emailcontenthtml'] = 'This is a notification to advise you that your forum post with the
+ following details has been deleted by \'{$a->firstname} {$a->lastname}\':<br />
+<br />
+Subject: {$a->subject}<br />
+Forum: {$a->forum}<br />
+Module: {$a->course}<br/>
+<br/>
+<a href="{$a->deleteurl}" title="view deleted post">View the discussion</a>';
+$string['copytoself'] = 'Send a copy to yourself';
+$string['includepost'] = 'Include post';
+$string['deletedforumpost'] = 'Your post has been deleted';
+$string['emailerror'] = 'There was an error sending the email';
+$string['sendanddelete'] = 'Send and delete';
+$string['deletepostbutton'] = 'Delete';
+$string['undeletepostbutton'] = 'Undelete post';
+$string['averagerating'] = 'Average rating: {$a->avg} (from {$a->num})';
+$string['yourrating'] = 'Your rating:';
+$string['ratingthreshold'] = 'Required ratings';
+$string['ratingthreshold_help'] = 'If you set this option to 3, then the rating for a post will
+not be shown until at least 3 people have rated it.
+
+This can help reduce the effect of a single rating on the average.';
+$string['saveallratings'] = 'Save all ratings';
+$string['js_nratings'] = '(# ratings)';
+$string['js_nratings1'] = '(1 rating)';
+$string['js_publicrating'] = 'Average rating: #.';
+$string['js_nopublicrating'] = 'Not yet rated.';
+$string['js_userrating'] = 'Your rating: #.';
+$string['js_nouserrating'] = 'Not rated by you.';
+$string['js_outof'] = '(Out of #.)';
+$string['js_clicktosetrating'] = 'Click to give this post # stars.';
+$string['js_clicktosetrating1'] = 'Click to give this post 1 star.';
+$string['js_clicktoclearrating'] = 'Click to remove your rating.';
+$string['undelete'] = 'Undelete';
+$string['exportword'] = 'Export to Word';
+$string['exportedtitle'] = 'Forum discussion &lsquo;{$a->subject}&rsquo; exported on {$a->date}';
+$string['set'] = 'Set';
+$string['showusername'] = 'Show usernames';
+$string['configshowusername'] = 'Include usernames in reports related to the
+forum, which may be seen by moderators [but not ordinary students]';
+$string['showidnumber'] = 'Show ID numbers';
+$string['configshowidnumber'] = 'Include ID numbers in reports related to the
+forum, which may be seen by moderators [but not ordinary students]';
+$string['hidelater'] = 'Don\'t show these instructions again';
+$string['existingattachments'] = 'Existing attachments';
+$string['deleteattachments'] = 'Delete existing attachments';
+$string['attachments'] = 'Attachments';
+$string['attachment'] = 'Attachment';
+$string['choosefile'] = '1. Choose file';
+$string['clicktoadd'] = '2. Add it';
+$string['readdata'] = 'Read data';
+$string['search_update_count'] = '{$a} forums to process.';
+$string['searchthisforum'] = 'Search this forum';
+$string['searchthisforumlink'] = 'Search this forum';
+$string['viewsubscribers'] = 'View subscribers';
+$string['inreplyto'] = 'In reply to';
+$string['forumng:view'] = 'View forum';
+$string['forumng:ignorepostlimits'] = 'Ignore post count limits';
+$string['forumng:mailnow'] = 'Mail posts before editing timeout';
+$string['forumng:setimportant'] = 'Mark posts as important';
+$string['forumng:managediscussions'] = 'Manage discussion options';
+$string['forumng:viewallposts'] = 'View hidden and deleted posts';
+$string['forumng:viewreadinfo'] = 'See who has read a post';
+$string['editlimited'] = 'Warning: You must save any changes to this post before {$a}. After that
+time you will no longer be allowed to edit the post.';
+$string['badbrowser'] = '<h3>Reduced forum features</h3>&nbsp;<p>You are using {$a}. If you\'d
+like a better experience when using these forums, please consider upgrading to a more recent
+version of <a href=\'http://www.microsoft.com/windows/internet-explorer/\'>Internet Explorer</a>
+or <a href=\'http://www.mozilla.com/firefox/\'>Firefox</a>.</p>';
+$string['nosubscribersgroup'] = 'Nobody in the group is subscribed to this forum yet.';
+$string['hasunreadposts'] = '(Unread posts)';
+$string['postdiscussion'] = 'Post discussion';
+$string['postreply'] = 'Post reply';
+$string['confirmbulkunsubscribe'] = 'Are you sure you want to unsubscribe the users in the list
+below? (This cannot be undone.)';
+$string['savedraft'] = 'Save as draft';
+$string['draftexists'] = 'A draft version of this post ({$a}) has been saved. If you don\'t finish
+the post now, you can retrieve the draft from the main page of this forum.';
+$string['draft_inreplyto'] = '(reply to {$a})';
+$string['draft_newdiscussion'] = '(new discussion)';
+$string['drafts'] = 'Unfinished drafts';
+$string['deletedraft'] = 'Delete draft post';
+$string['confirmdeletedraft'] = 'Are you sure you want to delete this draft post (shown below)?';
+$string['draft'] = 'Draft';
+$string['collapseall'] = 'Collapse all posts';
+$string['selectlabel'] = 'Select post {$a}';
+$string['selectintro'] = 'Tick the box beside each post you want to include. When you&rsquo;re done,
+scroll to the bottom and click &lsquo;Confirm selection&rsquo;.';
+$string['confirmselection'] = 'Confirm selection';
+$string['selectedposts'] = 'Selected posts';
+$string['selectorall'] = 'Do you want to include the entire discussion, or only selected posts?';
+$string['selectoralldisc'] = 'All discussions shown';
+$string['selectorselecteddisc'] = 'Selected discussions';
+$string['selectorselectdisc'] = 'Select discussion';
+$string['selectordiscall'] = 'Do you want to include all discussions listed on this page, or only selected discussions?';
+$string['selectdiscintro'] = 'Tick the box beside each discussion you want to include. When you&rsquo;re done,
+scroll to the bottom and click &lsquo;Confirm selection&rsquo;.';
+$string['setimportant'] = 'Mark posts as important';
+$string['important'] = 'Important post';
+$string['flaggeddiscussions'] = 'Flagged discussions';
+$string['flaggeddiscussionslink'] = '{$a} flagged discussions';
+$string['flaggedposts'] = 'Flagged posts';
+$string['flaggedpostslink'] = '{$a} flagged posts';
+$string['post'] = 'Post';
+$string['author'] = 'Author';
+$string['clearflag'] = 'Remove flag';
+$string['flagpost'] = 'Flag post';
+$string['setflag'] = 'Flag this post for future reference';
+$string['flagon'] = 'You have flagged this post';
+$string['flagoff'] = 'Not flagged';
+$string['postby'] = '(by {$a})';
+$string['quotaleft_plural'] = 'You may only make <strong>{$a->posts}</strong> more posts in the
+current {$a->period}.';
+$string['quotaleft_singular'] = 'You may only make <strong>{$a->posts}</strong> more post in the
+current {$a->period}.';
+$string['studyadvice_noyourquestions'] = 'You have not yet started any discussions in this study
+advice forum.';
+$string['studyadvice_noquestions'] = 'Nobody has started any discussions yet in this study advice
+forum.';
+$string['jumpto'] = 'Jump to:';
+$string['jumpnext'] = 'Next unread';
+$string['jumpprevious'] = 'Previous unread';
+$string['jumppreviousboth'] = 'previous';
+$string['skiptofirstunread'] = 'Skip to first unread post';
+$string['markpostread'] = 'Mark post read';
+$string['enableadvanced'] = 'Enable advanced features';
+$string['configenableadvanced'] = 'This option enables advanced forum features which may be
+unnecessarily complex for many installations. Currently, this just enables forum sharing, but we might add more later.';
+$string['shared'] = 'Allow forum to be shared';
+$string['shared_help'] = 'Tick this box, and set the ID number field below, to enable this forum
+to be shared.
+
+If you prefix the ID number with the prefix of AUTO_ it means that any clone forums will automatically look
+for the latest version of a master forum on restore.
+
+If the forum is backed up and restored if not unique it will add _1 to end
+(if already has _number at end then increment that number e.g. _2).
+
+This forum will become the original forum. You can then create one or more copies of this forum
+by choosing <strong>Use existing shared forum</strong>, and typing in the same ID number, when
+creating each copy.';
+$string['sharing'] = 'Forum sharing';
+$string['useshared'] = 'Clone existing forum';
+$string['useshared_help'] = 'If you want to create a clone of an existing forum, use this tickbox
+and type the ID number of the original forum (which must allow sharing).
+
+When this is selected, most other options on this form will be ignored because you are not really
+creating a new forum, only a link to an existing one. The exception is availability and (manual
+only) completion options.';
+$string['sharedinfo'] = 'This is a shared forum. The access settings here are not shared, and
+apply only to students who access the shared forum from this particular course. If you want to
+edit other settings for the forum, please <a href=\'{$a}\'>edit the original forum setttings</a>
+instead.';
+$string['sharedviewinfooriginal'] = '<strong>This forum is shared</strong> under the name
+<strong>{$a}</strong> for use in other courses.';
+$string['sharedviewinfonone'] = 'It is not currently included in any other course.';
+$string['sharedviewinfolist'] = 'It is included in the following: {$a}.';
+$string['sharedviewinfoclone'] = '<strong>This is a shared forum</strong>. The
+<a href=\'{$a->url}\'>original forum</a> is in {$a->shortname}.';
+
+$string['jumpparent'] = 'Parent';
+$string['savetoportfolio'] = 'Save to MyStuff';
+$string['savedposts_all'] = '{$a}';
+$string['savedposts_selected'] = '{$a} (selected posts)';
+$string['savedposts_one'] = '{$a->name}: {$a->subject}';
+$string['savedposts_all_tag'] = 'Forum discussion';
+$string['savedposts_selected_tag'] = 'Forum posts';
+$string['savedposts_one_tag'] = 'Forum post';
+$string['savedposts_original'] = 'Original source discussion';
+$string['savedtoportfolio'] = 'The selected information has been saved to MyStuff.';
+$string['offerconvert'] = 'If you want to create a new ForumNG that is a copy of an old-style
+forum, do not use this form. Instead, <a href=\'{$a}\'>convert your forum</a>.';
+$string['convert_title'] = 'Convert forums';
+$string['convert_info'] = 'The conversion process can work on one or more old-style forums; at
+the moment, only \'general\' forums are supported, not the other forum types. Use the Ctrl key
+to select multiple forums from the list if required.';
+$string['convert_warning'] = '<p>When you click Convert, the selected forums will be converted.
+This includes all posts and
+discussions, and may take some time. Forums will be unavailable during conversion.</p><ul>
+<li>Old forums being converted are hidden as soon as the conversion process for
+that forum begins. This ensures that no new messages are posted and
+\'missed out\' of the conversion.</li>
+<li>New forums being created are initially hidden, and revealed only once the
+conversion process for that forum is complete.</li>
+</ul>';
+$string['convert_hide'] = 'Leave created forums hidden';
+$string['convert_nodata'] = 'Do not include user data (posts, subscriptions, etc.)';
+$string['convert_process_init'] = 'Creating forum structure...';
+$string['convert_process_state_done'] = 'done.';
+$string['convert_process_show'] = 'Making forum visible...';
+$string['convert_process_subscriptions_normal'] = 'Converting normal subscriptions...';
+$string['convert_process_subscriptions_initial'] = 'Converting initial subscriptions...';
+$string['convert_process_discussions'] = 'Converting discussions...';
+$string['convert_process_dashboard'] = 'Converting dashboard favourites...';
+$string['convert_process_dashboard_done'] = 'done (OK {$a->yay}, failed {$a->nay}).';
+$string['convert_process_assignments'] = 'Updating role assignments...';
+$string['convert_process_overrides'] = 'Updating role overrides...';
+$string['convert_process_search'] = 'Regenerating search data...';
+$string['convert_process_update_subscriptions'] = 'Converting to group subscriptions...';
+$string['convert_process_complete'] = 'Conversion complete in {$a->seconds}s (view {$a->link}).';
+$string['convert_newforum'] = 'new forum';
+$string['convert_noneselected'] = 'No forums selected for conversion! Please select one or more
+forums.';
+$string['convert_noforums'] = 'There are no old forums on this course to convert.';
+$string['pastediscussion'] = 'Paste discussion';
+$string['pastediscussions'] = 'Paste discussions';
+$string['pastediscussion_cancel'] = 'Cancel paste';
+$string['switchto_simple_text'] = 'The standard view of this forum does not always work well with
+assistive technology. We also provide a simpler view, which still contains all features.';
+$string['switchto_standard_text'] = 'You are using the simple view of this forum, which should work
+better with assistive technology.';
+$string['switchto_simple_link'] = 'Switch to simple view.';
+$string['switchto_standard_link'] = 'Switch to standard view.';
+$string['displayversion'] = 'ForumNG version: <strong>{$a}</strong>';
+
+// OU only.
+$string['externaldashboardadd'] = 'Add forum to dashboard';
+$string['externaldashboardremove'] = 'Remove forum from dashboard';
+
+// New error strings.
+$string['error_fileexception'] = 'A file processing error occurred. This is likely to be caused by
+system problems. You may wish to try again later.';
+$string['error_subscribeparams'] = 'Parameters incorrect: requires either id or course or d.';
+$string['error_nopermission'] = 'You are not permitted to carry out this request.';
+$string['error_exception'] = 'A forum error occurred. Please try again later, or try something
+else.<div class=\'forumng-errormessage\'>Error message: {$a}</div>';
+$string['error_cannotchangesubscription'] = 'You are not permitted to subscribe to, or unsubscribe
+from, this forum.';
+$string['error_cannotchangediscussionsubscription'] = 'You are not permitted to subscribe to, or
+unsubscribe from, this discussion.';
+$string['error_cannotchangegroupsubscription'] = 'You are not permitted to subscribe to, or
+unsubscribe from your selected group.';
+$string['error_cannotsubscribetogroup'] = 'You are not permitted to subscribe to your selected
+group.';
+$string['error_cannotunsubscribefromgroup'] = 'You are not permitted to unsubscribe from your
+selected group.';
+$string['error_invalidsubscriptionrequest'] = 'Your subscription request is invalid.';
+$string['error_unknownsort'] = 'Unknown sort option.';
+$string['error_ratingthreshold'] = 'Rating threshold must be a positive number.';
+$string['error_duplicate'] = 'You have already created a post using the previous form. (This error
+sometimes occurs if you click the post button twice. In that case, your post has probably been
+saved.)';
+$string['edit_notcurrentpost'] = 'You cannot edit deleted posts or previous post versions.';
+$string['edit_timeout'] = 'You are no longer permitted to edit this post; the permitted editing
+time has run out.';
+$string['edit_notyours'] = 'You cannot edit somebody else\'s post.';
+$string['edit_nopermission'] = 'You don\'t have permission to edit this kind of post.';
+$string['edit_readonly'] = 'This forum is currently read-only so posts cannot be edited.';
+$string['edit_notdeleted'] = 'You cannot undelete a post that isn\'t deleted.';
+$string['edit_rootpost'] = 'This action cannot apply to a post that starts a discussion.';
+$string['edit_locked'] = 'This discussion is currently locked.';
+$string['edit_notlocked'] = 'This discussion is not currently locked.';
+$string['edit_wronggroup'] = 'You cannot make changes to posts outside your group.';
+$string['reply_notcurrentpost'] = 'You cannot reply to deleted posts or previous post versions.';
+$string['reply_nopermission'] = 'You don\'t have permission to reply here.';
+$string['reply_readonly'] = 'This forum is currently read-only so new replies cannot be added.';
+$string['reply_typelimit'] = 'Because of the type of this forum, you are not currently allowed to
+reply to this post.';
+$string['reply_wronggroup'] = 'You cannot reply to posts in this discussion because you are not in
+the right group.';
+$string['reply_postquota'] = 'You can\'t reply to posts at the moment because you have reached the
+posting limit.';
+$string['reply_missing'] = 'You cannot reply because the system can&rsquo;t find the post.';
+$string['startdiscussion_nopermission'] = 'You don\'t have permission to start a new discussion
+here.';
+$string['startdiscussion_groupaccess'] = 'You don\'t have permission to start a new discussion in
+this group.';
+$string['startdiscussion_postquota'] = 'You can\'t start a new discussion at the moment because you
+have reached the posting limit.';
+$string['error_markreadparams'] = 'Parameters incorrect: requires either id or d.';
+$string['error_cannotmarkread'] = 'You are not permitted to mark discussions as read in this
+forum.';
+$string['error_cannotviewdiscussion'] = 'You do not have permission to view this discussion.';
+$string['error_cannotmanagediscussion'] = 'You do not have permission to manage this discussion.';
+$string['error_draftnotfound'] = 'Unable to find draft message. The draft may have already been posted or deleted.';
+$string['jserr_load'] = 'There was an error obtaining the post.
+
+Reload this page and try again.';
+$string['jserr_save'] = 'There was an error saving the post.
+
+Copy the text into another program to make sure you don\'t lose it, then reload this page and try again.';
+$string['jserr_alter'] = 'There was an error altering the post.
+
+Reload this page and try again.';
+$string['jserr_attachments'] = 'There was an error loading the attachment editor.
+
+Reload this page and try again.';
+$string['rate_nopermission'] = 'You do not have permission to rate this post ({$a}).';
+$string['subscribers_nopermission'] = 'You do not have permission to view the subscriber list.';
+$string['feed_nopermission'] = 'You do not have permission to access this feed.';
+$string['feed_notavailable'] = 'This feed is not available.';
+$string['crondebugdesc'] = 'FOR TESTING PUPOSES ONLY -- Tick to include debugging output in the
+cron logs';
+$string['crondebug'] = 'Cron debug output';
+$string['unsubscribeselected'] = 'Unsubscribe selected users';
+$string['unsubscribe_nopermission'] = 'You do not have permission to unsubscribe other users.';
+$string['draft_noedit'] = 'The draft feature cannot be used when editing posts.';
+$string['draft_mismatch'] = 'Error accessing draft post (either it does not belong to you, or is
+not part of the required disussion).';
+$string['draft_cannotreply'] = '<p>It is not currently possible to add a reply for the post that
+your draft relates to. {$a}</p><p>You can use the X button beside this draft on the main forum
+page to see the full text of your draft (so you can copy and paste it somewhere else) and to
+delete it.</p>';
+$string['invalidemail'] = 'This email address is not valid. Please enter a single email address.';
+$string['invalidemails'] = 'This email address is not valid. Please enter one or more email
+addresses, separated by spaces or semicolons.';
+$string['error_forwardemail'] = 'There was an error sending email to <strong>{$a}</strong>. Email
+could not be sent.';
+$string['alert_link'] = 'Report post';
+$string['alert_linktitle'] = 'Report post as unacceptable';
+$string['reportunacceptable'] = 'Email for reporting offensive post';
+$string['reportingemail'] = 'Email for reporting offensive posts';
+$string['reportingemail_help'] = 'If this email address is supplied, then a Report link appears
+next to each post. Users can click the link to report offensive posts. The information will be sent to this address.
+
+If this email is left blank then the Report feature will not be shown (unless a site-level
+reporting  address has been supplied).
+
+More than one email address can be added so long as they are separated by a semi-colon';
+$string['configreportunacceptable'] = 'This email address is for reporting offensive post from
+ForumNG at site level. If this email is left blank, then the alert function will be switched off
+unless it have been turned on at the forum level.';
+$string['alert_info'] = "The 'Report' feature can send this post to a staff member who will
+investigate. <strong>Please use this feature only if you think the post breaks the
+rules</strong>.";
+$string['alert_reasons'] = 'Reasons for reporting post';
+$string['alert_condition1'] = 'It is abusive';
+$string['alert_condition2'] = 'It is harassment';
+$string['alert_condition3'] = 'It contains obscene content such as pornography';
+$string['alert_condition4'] = 'It is libellous or defamatory';
+$string['alert_condition5'] = 'It infringes copyright';
+$string['alert_condition6'] = 'It is against the rules for some other reason';
+$string['alert_conditionmore'] = 'Other information (optional)';
+$string['alert_reporterinfo'] = "<strong>Reporter's details</strong>:";
+$string['alert_reporterdetail'] = '{$a->fullname} ({$a->username}; {$a->email}; {$a->ip})';
+$string['invalidalert'] = 'You need to specify the reason for reporting this post.';
+$string['invalidalertcheckbox'] = 'You need to tick at least one of the boxes.';
+$string['alert_submit'] = "Send report";
+$string['error_sendalert'] = 'There was an error sending your report to {$a}.
+Report could not be sent.';
+$string['error_portfoliosave'] = 'An error occurred while saving this data to MyStuff.';
+$string['alert_pagename'] = 'Report a post as unacceptable';
+$string['alert_emailsubject'] = 'Alert F{$a->postid}: {$a->coursename} {$a->forumname}';
+$string['alert_emailpreface'] = 'A forum post has been reported by {$a->fullname} ({$a->username},
+{$a->email}) {$a->url}';
+$string['alert_feedback'] = 'Your report has been sent successfully. A member of staff will
+investigate this issue.';
+$string['alert_emailappendix'] = 'You are receiving this email because your email address has been
+used on the ForumNG for reporting unacceptable email.';
+$string['alert_note'] = 'Please note: This email has also been sent to {$a}';
+$string['alert_notcurrentpost'] = 'This post has already been deleted.';
+$string['alert_turnedoff'] = 'The alert function is not available.';
+$string['move_notselected'] = 'You must select a target forum from the dropdown before clicking
+the Move button.';
+$string['partialsubscribed'] = 'Partial';
+$string['move_nogroups'] = 'You do not have access to any groups in the selected target forum.';
+$string['beforestartdate'] = 'You can read any posts within this forum, but not submit your own
+posts. This forum opens for posting on {$a}.';
+$string['beforestartdatecapable'] = 'Students can read any posts within this forum, but not submit
+their own posts until {$a}. You have access to submit posts before this time.';
+$string['beforeenddate'] = 'This forum closes for new posts on {$a}.';
+$string['beforeenddatecapable'] = 'This forum closes for new student posts on {$a}.';
+$string['afterenddate'] = 'You can read any posts within this forum, but not submit your own posts.
+This forum closed for posting on {$a}.';
+$string['afterenddatecapable'] = 'Students can read any posts within this forum, but not submit
+their own posts since the forum closed on {$a}. You still have access to submit posts.';
+$string['removeolddiscussions'] = 'Manage old discussions';
+$string['removeolddiscussions_help'] = 'The system can automatically remove discussions if they
+have not had any new replies for a certain length of time.';
+$string['removeolddiscussionsafter'] = 'Manage old discussions after';
+$string['removeolddiscussionsdefault'] = 'Never remove';
+$string['withremoveddiscussions'] = 'Action or move discussions to';
+$string['automaticallylock'] = 'Automatically lock';
+$string['onemonth'] = '1 month';
+$string['withremoveddiscussions_help'] = 'You have three options for managing old discussions:
+<ul><li>Delete them permanently; unlike the standard delete feature, these cannot be undeleted.
+This option could be used to save space in the database.</li>
+<li>Automatically lock (make read-only) them</li>
+<li>Move them to another forum; for example, you might have an &lsquo;archive forum&rsquo;.
+You can select any forum on the same course.</li>
+</ul>';
+$string['deletepermanently'] = 'Delete permanently';
+$string['housekeepingstarthour'] = 'Start hour of archiving';
+$string['housekeepingstophour'] = 'Stop hour of archiving';
+$string['confighousekeepingstarthour'] = 'Archiving tasks, such as deleting old discussions, will
+begin from this hour each day.';
+$string['confighousekeepingstophour'] = 'Archiving tasks will stop on this hour.';
+$string['invalidforum'] = 'This forum no longer exists';
+$string['errorinvalidforum'] = 'The target forum for archiving old discussions no longer exists.
+Please choose a different forum.';
+$string['archive_errorgrouping'] = 'The forum that receives old discussions has a different group
+setting. Please update the forum and change the <strong>Remove old discussions</strong> options.';
+$string['archive_errortargetforum'] = 'The forum that used to receive old discussions no longer
+exists. Please update the forum and change the <strong>Remove old discussions</strong> options.';
+$string['error_notwhensharing'] = 'This option is not available when sharing the forum.';
+$string['error_sharingrequiresidnumber'] = 'When sharing the forum, you must enter an ID number
+which is unique across the entire system.';
+$string['error_sharingidnumbernotfound'] = 'When using a shared forum, you must enter an ID number
+that exactly matches one previously entered in a forum that is shared.';
+$string['error_sharinginuse'] = 'You cannot turn sharing off for this forum because there are
+already forums that share it. If necessary, delete these other forums first.';
+$string['error_nosharedforum'] = 'Forum <strong>{$a->name}</strong>: Could not restore as shared
+forum; ID number {$a->idnumber} not found. Restored forum is an independent forum.';
+$string['error_ratingrequired'] = 'Grading chosen to be based on ratings, but ratings not enabled';
+
+$string['advancedsearch'] = 'Advanced search';
+$string['words'] = 'Search for';
+$string['words_help'] = 'Type your search term here.
+
+To search for exact phrases use quote marks.
+
+To exclude a word insert a hyphen immediately before the word.
+
+Example: the search term <tt>picasso -sculpture &quot;early works&quot;</tt> will return results for &lsquo;picasso&rsquo; or the phrase &lsquo;early works&rsquo; but will exclude items containing &lsquo;sculpture&rsquo;.
+
+If you leave this box blank, then all posts that match the author and/or date criteria will be returned, regardless of their content.';
+$string['authorname'] = 'Author name';
+$string['authorname_help'] = 'You can type a first name (Jane), a surname (Brown), the whole name (jane brown), or the first part of any of these (Ja, bro, Jane B). Searches are not case sensitive.
+
+You can also type a username (jb001).
+
+If you leave this blank, posts from all authors will be included.';
+$string['daterangefrom'] = 'Date range from';
+$string['daterangefrom_help'] = 'Use the dates to restrict your search to only include posts
+within the given time range.
+
+If you don&rsquo;t specify dates, posts from any date will be included in the results.';
+$string['daterangeto'] = 'Date range to';
+$string['searchresults'] = 'Search results: <strong>{$a}</strong>';
+$string['searchtime'] = 'Search time: {$a} s';
+$string['nothingfound'] = ' Could not find any matching results. Try using different query.';
+$string['previousresults'] = 'Back to results {$a}';
+$string['nextresults'] = 'Find more results';
+$string['author'] = ' author: &lsquo;{$a}&rsquo;';
+$string['from'] = ' from: {$a}';
+$string['to'] = ' to: {$a}';
+$string['inappropriatedateortime'] = 'From date cannot be after present.';
+$string['daterangemismatch'] = 'To date is before From date.';
+$string['nosearchcriteria'] = 'No search criteria. Please use one or more of the criteria below.';
+$string['searchallforums'] = 'Search all forums';
+
+$string['replies'] = 'Replies';
+$string['newdiscussion'] = 'New discussion';
+$string['nothingtodisplay'] = '<h3>Nothing to display</h3>';
+$string['re'] = 'Re: {$a}';
+
+$string['error_feedlogin'] = 'Error completing user login';
+
+$string['error_makebig'] = 'The course only has {$a->users} users, but you\'ve asked for
+{$a->readusers} to read each discussion. Create some more users.';
+$string['error_system'] = 'A system error occurred: {$a}';
+
+
+
+$string['modulename_help'] = 'ForumNG is a replacement for standard Moodle forum with most of
+the same features plus additional ones and a more dynamic user interface.
+
+NG stands for \'Next Generation\'.';
+
+$string['mailnow_help'] = 'Send your post to email subscribers more quickly.
+
+Unless you choose this option, the system waits for some time before sending the post so that any edits you might make can be included in the email.';
+$string['displayperiod_help'] = 'You can hide this discussion from students until, or after, a
+certain date.
+
+While hidden, students do not see the discussion at all. For moderators, it shows on the
+discussion list in grey and with a clock icon.';
+
+$string['sticky_help'] = 'This option can make the discussion stay on top of the list, even
+after newer discussions are posted.
+
+Sticky discussions are displayed with an up-arrow icon on the discussion list. You can have more
+than one sticky discussion.';
+
+$string['errorfindinglastpost'] = 'Error recalculating last post (database inconsistent?)';
+
+$string['drafts_help'] = 'When you save a post as draft, it appears on this list. Click on the
+draft to resume working on it.
+
+If you want to delete the draft, click the delete icon next to it. There is a confirmation screen.
+
+In some cases it may not be possible to continue your draft (for example if it is in reply to a
+discussion which has since been deleted). In this situation, you can retrieve the contents of
+your draft by clicking the delete icon.';
+
+$string['flaggedposts_help'] = 'Flagged posts appear in this list. To jump to a flagged post,
+click on it.
+
+To remove the flag from a post, click on the flag icon (here or in the post).';
+
+$string['flaggeddiscussions_help'] = 'Flagged discussions appear in this list. To jump to a flagged discussion,
+click on it.
+
+To remove the flag from a discussion, click on the flag icon (here or the \'Remove flag\' button in the discussion).';
+
+$string['searchthisforum_help'] = 'Type your search term and press Enter or click the button.
+
+To search for exact phrases use quote marks.
+
+To exclude a word insert a hyphen immediately before the word.
+
+Example: the search term <tt>picasso -sculpture &quot;early works&quot;</tt> will return results for &lsquo;picasso&rsquo; or the phrase &lsquo;early works&rsquo; but will exclude items containing &lsquo;sculpture&rsquo;.
+
+To search by author or date use Advanced search. Access this directly by not entering a search term.';
+$string['searchthisforumlink_help'] = 'Type your search term and press Enter or click the button.
+
+To search for exact phrases use quote marks.
+
+To exclude a word insert a hyphen immediately before the word.
+
+Example: the search term <tt>picasso -sculpture &quot;early works&quot;</tt> will return results for &lsquo;picasso&rsquo; or the phrase &lsquo;early works&rsquo; but will exclude items containing &lsquo;sculpture&rsquo;.
+
+To search by author or date, click &lsquo;More options&rsquo;.';
+
+$string['notext'] = '(no text)';
+
+$string['grade'] = 'Grade';
+$string['gradingscale'] = 'Grading scale';
+
+$string['moderator'] = 'Moderator';
+$string['anonymousmoderator'] = 'Anonymous moderator';
+$string['canpostanon'] = 'Enable anonymous moderator posts';
+$string['canpostanon_help'] = 'Allows users that have postanon capability to make their post anonymous by hiding their name from students.';
+$string['asmoderator'] = 'Post as?';
+$string['asmoderator_post'] = 'Standard Post';
+$string['asmoderator_self'] = 'Identify self as moderator';
+$string['asmoderator_anon'] = 'Identify self as moderator (name hidden from students)';
+$string['asmoderator_help'] = 'This option will enable certain users to be able to identify themselves as a forum
+moderator or post as a moderator with their profile hidden from students.';
+$string['createdbymoderator'] = 'This is a post created by moderator {$a} with their name hidden from students.';
+
+$string['lockedtitle'] = 'This discussion is now closed';
+$string['autolockedmessage'] = 'This discussion has been closed automatically as the maximum time permitted to be open has passed.';
+$string['alert_intro'] = 'You can use the Alert link if you need to bring a post in this forum to the attention of a moderator.';
+$string['alert_intro'] = 'You can use the Report post link if you need to bring a post in this forum to the attention of a moderator.';
+
+$string['managepostalerts'] = 'Manage reported post alerts';
+
+$string['extra_emails'] = 'Email address of other recipients';
+$string['extra_emails_help'] = 'Enter one or more email address(es) separated by spaces or semicolons.';
+$string['skipstickydiscussions'] = 'Skip sticky discussions';
+$string['emailauthor'] = 'Email author';
+$string['emaileditedcontenthtml'] = 'This is a notification to advise you that your forum post with the
+following details has been edited by \'{$a->editinguser}\':<br />
+<br />
+Subject: {$a->subject}<br />
+Forum: {$a->forum}<br />
+Module: {$a->course}<br/>
+<br/>
+<a href="{$a->editurl}" title="view deleted post">View the discussion</a>';
+$string['emailauthor_help'] = 'Send an email to the post\'s author informing them that you have edited their post';
+$string['editedforumpost'] = 'Your post has been edited';
+
+$string['postedasmoderator'] = 'Posted as moderator';
+$string['postedasmoderator_help'] = 'Search for posts that have been identified as being created by a moderator';
+
+$string['savefailtitle'] = 'Post save failed';
+$string['savefailnetwork'] = '<p>Unfortunately, your changes cannot be saved at this time. This is due to a
+network error; the website is temporarily unavailable or you have been signed out. </p><p>Saving has been disabled
+on this page. In order to retain any changes you must copy the post content, access this page again and then paste in your changes.</p>';
+$string['tagging'] = 'Tagging';
+$string['enabletagging'] = 'Enable discussion tagging';
+$string['tagging_help'] = 'Enable tagging in discussions for this forum and also allow forum wide tags to be enabled';
+$string['discussiontags'] = 'Discussion tags';
+$string['discussiontags_help'] = 'To add tags to a discussion enter the tags separated by commas';
+$string['forumngdiscusstagfilter'] = 'View forum discussions by tag';
+$string['forumngdiscusstagfilter_help'] = 'Select a tag option to view/filter forum discussions by';
+$string['removefiltering'] = ' Viewing discussions with tag \'{$a}\'';
+$string['filterdiscussions'] = 'View discussions with tag';
+
+$string['tagarea_forumng_discussions'] = 'Forumng discussions';
+$string['tagcollection_forumng_discussions'] = 'Forumng discussions';
+$string['tagarea_forumng'] = 'Forumng activity';
+$string['tagcollection_forumng_set'] = 'Forumng activity';
+$string['tagarea_groups'] = 'Forumng activity groups';
+$string['tagcollection_forumng_group_set'] = 'Forumng activity group';
+
+$string['remove'] = 'Remove';
+$string['show_all'] = 'Show all';
+$string['settags'] = 'Set discussion tags';
+$string['settags_help'] = 'Enter forum wide \'Set\' tags for use in discussions by entering tags separated by commas';
+$string['settag_label'] = 'Set';
+$string['setforumtags'] = 'Set tags for forum';
+$string['noratings'] = 'No ratings';
+$string['forumngratingsobsolete'] = 'Forumng ratings (obsolete)';
+$string['standardratings'] = 'Ratings (standard)';
+$string['forumng:viewallratings'] = 'View all raw ratings given by individuals';
+$string['forumngcrontaskemails'] = 'Forumng email sending job';
+$string['forumngcrontaskdaily'] = 'Forumng daily maintenance job';
+$string['forumngcrontaskdigest'] = 'Forumng email digest job';
+
+$string['error_identityinsubject_discussion'] = 'You have set the subject line to your login details. (This may have been done automatically by your browser or password manager.) To continue, change the subject text.';
+$string['error_identityinsubject_reply'] = 'You have set the subject line to your login details. (This may have been done automatically by your browser or password manager.) To continue, delete or change the subject text.';
+
+$string['tooltip_show_features'] = 'Show other options';
+
+$string['emailafter'] = 'Email after delay';
+$string['configemailafter'] = 'Email post to subscribed users with a delay after post creation.';
+
diff --git a/mod/forumng/lang/es/forumng.php b/mod/forumng/lang/es/forumng.php
new file mode 100644
index 0000000..b0a3f4c
--- /dev/null
+++ b/mod/forumng/lang/es/forumng.php
@@ -0,0 +1,795 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['replytouser'] = 'Utilizar la dirección de correo en las respuestas';
+$string['configreplytouser'] = 'Cuando un tema del foro se envía por correo, ¿debe contener la dirección
+de correo del usuario para que los receptores puedan responderle directamente en vez de a
+través del foro? Incluso si se selecciona \'Sí\', los usuarios pueden elegir en su
+perfil mantener secreta su dirección de correo.';
+$string['disallowsubscribe'] = 'La suscripción no está permitida';
+$string['forcesubscribe'] = 'Forzar que todo el mundo esté (y permanezca) suscrito';
+$string['subscription'] = 'Suscripción';
+$string['subscription_help'] =
+'Puedes obligar a todo el mundo a estar suscrito, o hacer que estén suscritos
+inicialmente; la diferencia es que, en el segundo caso, los usuarios pueden cancelar la suscripción.
+
+Estas opciones incluyen a todos los usuarios (estudiantes y profesores) que están inscritos al curso. Los
+usuarios que no pertenecen al curso (como los administradores) pueden de todas formas suscribirse de forma manual.' ;
+$string['configtrackreadposts'] = 'Selecciona \'sí\' si quieres gestionar las entradas leídas/no leídas para cada usuario.';
+$string['forums'] = 'Forums';
+$string['digestmailheader'] = 'Este es el resumen diario de los nuevos temas del foro {$a->sitename}.
+Para cambiar tus preferencias de correo en este foro, puedes ir a {$a->userprefs}.';
+$string['digestmailprefs'] = 'tu perfil de usuario';
+$string['digestmailsubject'] = '{$a}: resumen del foro';
+$string['unsubscribe'] = 'Cancelar la suscripción de este foro';
+$string['unsubscribeall'] = 'Cancelar la suscripción de todos los foros';
+$string['postmailinfo'] =
+'Esta es una copia del mensaje publicado en la web de {$a}
+
+Para responder a través de la web, pulsa en este enlace:';
+$string['discussionoptions'] = 'Opciones del tema';
+$string['forum'] = 'Forum';
+$string['subscribed'] = 'Suscrito';
+$string['subscribegroup'] = 'Suscribirse a este grupo';
+$string['subscribeshort'] = 'Suscribirse';
+$string['subscribelong'] = 'Suscribirse a todo el foro';
+$string['unsubscribegroup'] = 'Cancelar la suscripción a este grupo';
+$string['unsubscribegroup_partial'] = 'Cancelar la suscripción a las discusiones de este grupo';
+$string['unsubscribeshort'] = 'Cancelar la suscripción';
+$string['unsubscribelong'] = 'Cancelar la suscripción a este foro';
+$string['subscribediscussion'] = 'Suscribirse a este tema';
+$string['unsubscribediscussion'] = 'Cancelar la suscripción a este tema';
+$string['subscribeddiscussionall'] = 'Todo';
+$string['subscribedthisgroup'] = 'Este grupo';
+$string['numberofdiscussions'] = '{$a} temas';
+$string['numberofdiscussion'] = '{$a} temas';
+$string['discussions'] = 'Temas';
+$string['posts'] = 'Temas';
+$string['subscribe'] = 'Suscribirse a este foro';
+$string['allsubscribe'] = 'Suscribirse a todos los foros';
+$string['allunsubscribe'] = 'Cancelar la suscripción a todos los foros';
+$string['forumname'] = 'Nombre del foro';
+$string['forumtype'] = 'Tipo del foro';
+$string['forumtype_help'] = 'Hay diferentes tipos de foro disponibles para propósitos específicos o diferentes
+métodos de enseñanza. El foro de tipo estándar es apropiado para un uso normal de los foros.';
+$string['forumtype_link'] = 'mod/forumng/forumtypes';
+$string['forumintro'] = 'Descripción del foro';
+$string['ratingtime'] = 'Restringir las valoraciones a entradas entre las fechas de este rango:';
+$string['ratings'] = 'Valoraciones';
+$string['grading'] = 'Calificación';
+$string['grading_help'] = 'Si seleccionas esta opción, se calculará de forma automática una calificación de este foro y
+se añadirá al libro de calificaciones del curso. Deja esto en blanco para foros que no se
+califiquen, o que se vayan a calificar manualmente.
+
+Las diferentes formas de calcular la calificación son autoexplicatorias; en cada caso, la calificación
+para cada estudiante se basa en todas las calificaciones de todos los post de ese estudiante. Las
+calificaciones están limitadas a la escala; por ejemplo, si la escala es 0-3, el método de calificación
+es &lsquo;número&rsquo; y las entradas del estudiante han recibido 17 valoraciones, su calificación será 3.';
+$string['nodiscussions'] = 'Todavía no hay entradas en este foro';
+$string['startedby'] = 'Creado por';
+$string['discussion'] = 'Tema';
+$string['unread'] = 'No leídos';
+$string['lastpost'] = 'Última entrada';
+$string['group'] = 'Grupo';
+$string['addanewdiscussion'] = 'Crear un nuevo tema';
+$string['subject'] = 'Asunto';
+$string['message'] = 'Mensaje';
+$string['subscribestart'] = 'Enviarme copias de las entradas de este foro al correo';
+$string['subscribestop'] = 'No quiero que se envíen a mi correo copias de las entradas de este foro';
+$string['mailnow'] = 'Enviar YA un correo electrónico';
+$string['displayperiod'] = 'Periodo de visualización';
+$string['subscriptions'] = 'Suscripciones';
+$string['nosubscribers'] = 'Todavía no hay suscriptores en este foro.';
+$string['subscribers'] = 'Suscriptores';
+$string['numposts'] = '{$a} tema(s)';
+$string['noguestsubscribe'] = 'Lo siento, no esta permitido que los invitados se suscriban para recibir
+las entradas de los foros por correo.';
+
+$string['discussionsperpage'] = 'Entradas por página';
+$string['configdiscussionsperpage'] = 'Máximo número de entradas que se muestran en una página del foro';
+$string['attachmentmaxbytes'] = 'Tamaño máximo de los anexos';
+$string['attachmentmaxbytes_help'] = 'Este es el máximo tamaño <i>total</i> para todos los anexos
+de una entrada';
+$string['configattachmentmaxbytes'] = 'Tamaño máximo por defecto para todos los anexos de los foros en el sitio web
+(sujeto a los límites del curso y otras opciones locales)';
+$string['readafterdays'] = 'Días para marcar como leído';
+$string['configreadafterdays'] = 'Transcurridos este número de días, se considera que las entradas han sido leídas
+por todos los usuarios.';
+$string['trackreadposts'] = 'Vigilar entradas no leídas';
+$string['teacher_grades_students'] = 'El profesor califica a los estudiantes';
+$string['grading_average'] = 'Media de valoraciones';
+$string['grading_count'] = 'Cuenta de valoraciones';
+$string['grading_max'] = 'Máxima valoración';
+$string['grading_min'] = 'Mínima valoración';
+$string['grading_none'] = 'Sin calificación';
+$string['grading_sum'] = 'Suma de valoraciones';
+$string['subscription_permitted'] = 'Cualquiera puede suscribirse';
+$string['subscription_forced'] = 'Obligar a que todo el mundo esté suscrito';
+$string['enableratings'] = 'Permitir valorar las entradas';
+$string['enableratings_help'] =  'Si se activa, las entradas pueden ser valoradas utilizando una escala numérica o
+definida por Moodle. Una o más personas pueden valorar la entrada y la valoración mostrada
+será la media aritmética de esas entradas.
+
+Si utilizas una escala numérica hasta 5 (o menos) entonces se visualiza utilizando &lsquo;estrellas&rsquo;.
+En cualquier otro caso será una lista desplegable.
+
+El sistema de permisos controla quien puede valorar entradas y ver valoraciones. Por defecto, sólo los
+profesores pueden valorar las entradas, y los estudiantes sólo pueden ver las valoraciones de sus propias entradas.';
+$string['markdiscussionread'] = 'Marcar como leídos todos los temas en esta discusión.';
+$string['forumng:addinstance'] = 'Añadir un nuevo ForumNG';
+$string['forumng:createattachment'] = 'Crear adjuntos';
+$string['forumng:deleteanypost'] = 'Borrar cualquier tema';
+$string['forumng:editanypost'] = 'Editar cualquier tema';
+$string['forumng:managesubscriptions'] = 'Gestionar suscripciones';
+$string['forumng:movediscussions'] = 'Mover temas';
+$string['forumng:rate'] = 'Valorar entradas';
+$string['forumng:grade'] = 'Calificar entradas';
+$string['forumng:replypost'] = 'Contestar a los temas';
+$string['forumng:splitdiscussions'] = 'Partir temas';
+$string['forumng:startdiscussion'] = 'Comenzar un nuevo tema';
+$string['forumng:viewanyrating'] = 'Ver todas las valoraciones';
+$string['forumng:viewdiscussion'] = 'Ver temas';
+$string['forumng:viewrating'] = 'Ver valoraciones de las entradas propias';
+$string['forumng:viewsubscribers'] = 'Ver suscriptores';
+$string['forumng:copydiscussion'] = 'Copiar tema';
+$string['forumng:forwardposts'] = 'Reenviar entradas';
+
+$string['pluginadministration'] = 'Administración de ForumNG';
+$string['modulename'] = 'ForumNG';
+$string['pluginname'] = 'ForumNG';
+$string['modulenameplural'] = 'ForumNGs';
+$string['forbidattachments'] = 'No se permiten anexos';
+$string['configenablerssfeeds'] =
+'Esta opción habilita la posibilidad de tener feeds RSS para todos
+los foros. Hay que habilitar de forma manual los feeds en las opciones de cada foro.';
+$string['allowsubscribe'] = 'Permitir la suscripción';
+$string['initialsubscribe'] = 'Suscribir automáticamente a todo el mundo';
+$string['perforumoption'] = 'Configuración en cada foro';
+$string['configsubscription'] = 'Controla las opciones de la suscripción por correo en todos los foros del sitio.';
+$string['feedtype']='Contenidos del feed';
+$string['feedtype_help']='Si está habilitado, los usuarios se pueden suscribir al foro utilizando un lector de
+feeds RSS o Atom. Se puede configurar para incluir sólo los temas principales y no las respuestas, o
+para incluir todas las entradas.';
+$string['configfeedtype']='Selecciona la información a incluir en los feed RSS de todos los foros.';
+$string['feedtype_none']='Feed deshabilitado';
+$string['feedtype_discussions']='Contiene sólo los temas principales';
+$string['feedtype_all_posts']='Contiene todas las entradas';
+$string['permanentdeletion']='Eliminación de datos obsoletos';
+$string['configpermanentdeletion']= 'Tras este periodo de tiempo, las entradas eliminadas y las versiones antiguas
+de las entradas editadas se eliminan permanentemente de la base de datos.';
+$string['permanentdeletion_never']='Nunca (no eliminar datos obsoletos)';
+$string['permanentdeletion_soon']='Eliminar lo antes posible';
+$string['usebcc']='Enviar correos con copia oculta';
+$string['configusebcc']= 'Deja este valor a cero para utilizar la gestión de correo por defecto
+de Moodle (más seguro). Selecciona un número (por ejemplo 50) para agrupar juntos los correos del foro
+utilizando copia oculta para que Moodle sólo tenga que enviar un correo que el servidor de correo repartirá
+entre los suscriptores. Esto puede mejorar el rendimiento del correo en el cron del foro, pero no tiene
+algunas utilidades de los correos estándar de Moodle como las de juego de caracteres o la gestión de
+correo devuelto.';
+$string['donotmailafter']='No enviar correo después de (horas)';
+$string['configdonotmailafter']= 'Para evitar causar una avalancha de correos si el cron del servidor no se ha
+ejecutado durante un tiempo, el foro no enviará correos de entradas que sean de más antigüedad que estas horas.';
+$string['re']='Re: {$a}'; // I made a new string because I like it better with {$a}
+$string['discussionsunread']='Temas (no leídos)';
+$string['feeds'] = 'Feeds';
+$string['atom'] = 'Atom';
+$string['subscribe_confirm'] = 'Te has suscrito.';
+$string['unsubscribe_confirm'] = 'Has cancelado la suscripción.';
+$string['subscribe_confirm_group'] = 'Has sido suscrito al grupo.';
+$string['unsubscribe_confirm_group'] = 'Tu suscripción al grupo ha sido cancelada.';
+$string['subscribe_already'] = 'Ya estás suscrito.';
+$string['subscribe_already_group'] = 'Ya estás suscrito a este grupo.';
+$string['unsubscribe_already'] = 'Tu suscripción ya estaba cancelada.';
+$string['unsubscribe_already_group'] = 'Tu suscripción a este grupo ya estaba cancelada.';
+$string['subscription_initially_subscribed'] = 'Todo el mundo está suscrito inicialmente';
+$string['subscription_not_permitted'] = 'No se permite la suscripción';
+$string['feeditems'] = 'Número de ítems en el feed';
+$string['feeditems_help'] = 'El número de ítems que se incluirán en el feed RSS/Atom. Si el número es muy
+bajo, los usuarios que no chequeen el feed frecuentemente pueden perder algunos mensajes.';
+$string['configfeeditems'] = 'Número de mensajes que se incluirán en el feed.';
+$string['limitposts'] = 'Limitar entradas';
+$string['enablelimit'] = 'Limitar creación de temas';
+$string['enablelimit_help'] =  'Esta opción limita los temas y entradas que pueden crear los estudiantes
+(más concreatemten, todos los usuarios que no tengan la capability <tt>mod/forumng:ignorethrottling</tt>).
+
+Cuando al estudiante sólo se le permiten tres entradas más, se muestra un aviso en el formulario de la entrada. Cuando ha
+sobrepasado el límite, el sistema muestra en qué momento podrá volver a crear una entrada.';
+$string['completiondiscussions'] = 'El usuario puede crear temas:';
+$string['completiondiscussionsgroup'] = 'Temas requeridos';
+$string['completiondiscussionsgroup_help'] = 'Si se marca esta opción, el foro aparecerá "completado" para un estudiante una
+vez que haya creado el número requerido requerido de temas (y cumpla con las
+condiciones adicionales que se hayan configurado).';
+$string['completionposts'] = 'El usuario debe crear temas o entradas:';
+$string['completionpostsgroup'] = 'Entradas requeridas';
+$string['completionpostsgroup_help'] = 'Si se selecciona, el foro se marcará como completado
+una vez que los estudiantes hayan creado el número requerido de temas/entradas, donde cada
+tema nuevo o cada entrada cuenta como una (siempre que cumpla las otras condiciones configuradas).';
+$string['completionreplies'] = 'El usuario debe crear respuestas:';
+$string['completionrepliesgroup'] = 'Respuestas requeridas';
+$string['completionrepliesgroup_help'] = 'Si se selecciona, el foro se marcará como completado por el estudiante
+una vez que haya enviado el número requerido de respuestas a temas existentes (siempre
+que cumpla las otras condiciones configuradas)';
+$string['ratingfrom'] = 'Valorar sólo las entradas desde';
+$string['ratinguntil'] = 'Valorar sólo las entradas hasta';
+$string['postingfrom'] = 'Creación de nuevas entradas habilitada desde';
+$string['postinguntil'] = 'Creación de nuevas entradas habilitada hasta';
+$string['postsper'] = 'entradas por';
+$string['alt_discussion_deleted'] = 'Tema borrado';
+$string['alt_discussion_timeout'] = 'No visible para los usuarios (límite de tiempo)';
+$string['alt_discussion_sticky'] = 'Este tema siempre aparecerá al principio de la lista';
+$string['alt_discussion_locked'] = 'El tema es de sólo lectura';
+$string['subscribestate_partiallysubscribed'] = 'Recibes mensajes de algunos temas de este foro en {$a}.';
+$string['subscribestate_partiallysubscribed_thisgroup'] = 'Recibes mensajes de algunos temas de este grupo en {$a}.';
+$string['subscribestate_groups_partiallysubscribed'] = 'Recibes mensajes de algunos grupos de este foro en {$a}.';
+$string['subscribestate_subscribed'] = 'Recibes mensajes de este foro en {$a}.';
+$string['subscribestate_subscribed_thisgroup'] = 'Recibes mensajes de este grupo en {$a}.';
+$string['subscribestate_subscribed_notinallgroup'] = 'Pulsa &lsquo;Cancelar suscripción&rsquo; para cancelar la suscripción al foro';
+$string['subscribestate_unsubscribed'] = 'Actualmente no recibes mensajes de este foro en el correo. Si quieres
+recibirlos, debes pulsar en &lsquo;Suscribirse a este foro&rsquo;.';
+$string['subscribestate_unsubscribed_thisgroup'] = 'Actualmente no recibes mensajes de este grupo en el correo. Si quieres
+recibirlos, debes pulsar en &lsquo;Suscribirse a este grupo&rsquo;.';
+$string['subscribestate_not_permitted'] = 'Este foro no permite la suscripción.';
+$string['subscribestate_forced'] = '(Este foro no permite cancelar la suscripción.)';
+$string['subscribestate_no_access'] = 'No tienes permisos para suscribirte a este foro.';
+$string['subscribestate_discussionsubscribed'] = 'Recibirás mensajes de este tema por correo en {$a}.';
+$string['subscribestate_discussionunsubscribed'] = 'Actualmente no recibes mensajes de este tema en el correo. Si quieres
+recibirlos, debes pulsar en &lsquo;Suscribirse a este tema&rsquo;.';
+$string['replytopost'] = 'Responder al tema: {$a}';
+$string['editpost'] = 'Editar tema: {$a}';
+$string['editdiscussionoptions'] = 'Editar opciones del tema: {$a}';
+$string['optionalsubject'] = 'Nuevo asunto (opcional)';
+$string['attachmentnum'] = 'Adjunto {$a}';
+$string['sticky'] = '¿Tema de tipo post-it?';
+$string['sticky_no'] = 'El tema se ordena de forma normal';
+$string['sticky_yes'] = 'El tema aparecerá siempre al principio de la lista';
+$string['timestart'] = 'Mostrar sólo desde';
+$string['timeend'] = 'Mostrar sólo hasta';
+$string['date_asc'] = 'antiguos primero';
+$string['date_desc'] = 'nuevos primero';
+$string['numeric_asc'] = 'más pequeño primero';
+$string['numeric_desc'] = 'más alto primero';
+$string['sorted'] = 'ordenado {$a}';
+$string['text_asc'] = 'A-Z';
+$string['text_desc'] = 'Z-A';
+$string['sortby'] = 'Ordenado por {$a}';
+$string['rate'] = 'Valorar';
+$string['expand'] = 'Expandir<span class=\'accesshide\'> entrada {$a}</span>';
+$string['postnum'] = 'Entrada {$a->num}';
+$string['postnumreply'] = 'Entrada {$a->num}{$a->info} en respuesta a {$a->parent}';
+$string['postinfo_short'] = 'resumido';
+$string['postinfo_unread'] = 'no leído';
+$string['postinfo_deleted'] = 'eliminado';
+$string['split'] = 'Dividir<span class=\'accesshide\'> entrada {$a}</span>';
+$string['reply'] = 'Responder<span class=\'accesshide\'> al tema {$a}</span>';
+$string['directlink'] = 'Permalink<span class=\'accesshide\'> al tema {$a}</span>';
+$string['directlinktitle'] = 'Enlace directo a esta entrada';
+$string['edit'] = 'Editar<span class=\'accesshide\'> entrada {$a}</span>';
+$string['delete'] = 'Borrar<span class=\'accesshide\'> entrada {$a}</span>';
+$string['undelete'] = 'Recuperar<span class=\'accesshide\'> entrada {$a}</span>';
+$string['deletedpost'] = 'Entrada eliminada.';
+$string['deletedbyauthor'] = 'Esta entrada fue eliminada por el autor el {$a}.';
+$string['deletedbymoderator'] = 'Esta entrada fue eliminada por un moderador el {$a}.';
+$string['deletedbyuser'] = 'Esta entrada fue eliminada por {$a->user} el {$a->date}.';
+$string['expandall'] = 'Expandir todas las entradas';
+$string['deletepost'] = 'Borrar entrada: {$a}';
+$string['undeletepost'] = 'Recuperar entrada: {$a}';
+$string['confirmdelete'] = '¿Estás seguro de querer borrar esta entrada?';
+$string['confirmdelete_notdiscussion'] = 'Borrar esta entrada no eliminará el tema. Si quieres eliminar el tema, utiliza los
+botones que hay debajo del tema';
+$string['confirmundelete'] = '¿Estás seguro de que quieres recuperar esta entrada?';
+$string['splitpost'] = 'Dividir entrada: {$a}';
+$string['splitpostbutton'] = 'Dividir entrada como nuevo tema';
+$string['splitinfo'] = 'Dividir esta entrada la eliminará, junto con todas sus respuestas, del tema actual. Se creará
+un nuevo tema (mostrado debajo).';
+$string['editbyself'] = 'Editado por el autor el {$a}';
+$string['editbyother'] = 'Editado por {$a->name} el {$a->date}';
+$string['history'] = 'Historial';
+$string['historypage'] = 'Historial: {$a}';
+$string['currentpost'] = 'Versión actual de la entrada';
+$string['olderversions'] = 'Versiones anteriores (más reciente primero)';
+$string['deleteemailpostbutton'] = 'Borrar y enviar correo';
+$string['deleteandemail'] = 'Borrar y enviar correo al autor';
+$string['emailmessage'] = 'Mensaje';
+$string['emailcontentplain'] = 'Este es un mensaje para avisarle de que la entrada del foro que se detalla a continuación '.
+'ha sido eliminada por \'{$a->firstname} {$a->lastname}\':
+
+Asunto: {$a->subject}
+Foro: {$a->forum}
+Módulo: {$a->course}
+
+Para ver esta discusión, puede visitar  {$a->deleteurl}';
+$string['emailcontenthtml'] = 'Este es un mensaje para avisarle de que la entrada del foro que se detalla a continuación '.
+'ha sido eliminada por \'{$a->firstname} {$a->lastname}\':<br />
+<br />
+Asunto: {$a->subject}<br />
+Foro: {$a->forum}<br />
+Módulo: {$a->course}<br />
+<br />
+<a href="{$a->deleteurl}" title="ver tema eliminad">Ver el tema</a>';
+$string['copytoself'] = 'Enviar una copia a tu correo';
+$string['deletedforumpost'] = 'Se ha borrado tu entrada';
+$string['emailerror'] = 'Ocurrió un error enviando el correo';
+$string['sendanddelete'] = 'Enviar y eliminar';
+$string['deletepostbutton'] = 'Eliminar';
+$string['undeletepostbutton'] = 'Restaurar entrada';
+$string['averagerating'] = 'Media de valoraciones: {$a->avg} (desde {$a->num})';
+$string['yourrating'] = 'Tu valoración:';
+$string['ratingthreshold'] = 'Valoraciones requeridas';
+$string['ratingthreshold_help'] = 'Si selecciona 3 en este campo, las valoraciones de la entrada
+no se mostrarán hasta que al menos 3 personas la hayan valorado.
+
+Esto puede ayudar a reducir el efecto de una sola valoración en la media.';
+$string['saveallratings'] = 'Guardar todas las valoraciones';
+$string['js_nratings'] = '(# valoraciones)';
+$string['js_nratings1'] = '(1 valoración)';
+$string['js_publicrating'] = 'Valoración media: #.';
+$string['js_nopublicrating'] = 'Sin valoraciones.';
+$string['js_userrating'] = 'Tu valoración: #.';
+$string['js_nouserrating'] = 'No ha sido valorado por ti.';
+$string['js_outof'] = '(de #.)';
+$string['js_clicktosetrating'] = 'Pulsa para dar a esta entrada # estrellas.';
+$string['js_clicktosetrating1'] = 'Pulsa para dar a esta entrada una estrella.';
+$string['js_clicktoclearrating'] = 'Pulsa para eliminar tu valoración.';
+$string['undelete'] = 'Restaurar';
+$string['exportword'] = 'Exportar a word';
+$string['exportedtitle'] = 'Tema &lsquo;{$a->subject}&rsquo; exportado el {$a->date}';
+$string['set'] = 'Set'; //¿Se utiliza?
+$string['showusername'] = 'Mostrar nombres de usuario';
+$string['configshowusername'] = 'Incluir los nombres de usuario en los informes relacionados con el foro,
+que son visibles para los moderadores [pero no para los estudiantes normales]';
+$string['showidnumber'] = 'Mostrar ID de usuarios';
+$string['configshowidnumber'] = 'Incluir los ID de usuario en los informes relacionados con el foro,
+que son visibles para los moderadores [pero no para los estudiantes normales]';
+$string['hidelater'] = 'No mostrar de nuevo este mensaje';
+$string['existingattachments'] = 'Adjuntos actuales';
+$string['deleteattachments'] = 'Eliminar adjuntos actuales';
+$string['attachments'] = 'Adjuntos';
+$string['attachment'] = 'Adjunto';
+$string['choosefile'] = '1. Elige el fichero';
+$string['clicktoadd'] = '2. Añádelo';
+$string['readdata'] = 'Leer datos';
+$string['search_update_count'] = '{$a} foros por procesar.';
+$string['searchthisforum'] = 'Buscar en este foro';
+$string['searchthisforumlink'] = 'Buscar en este foro';
+$string['viewsubscribers'] = 'Ver suscriptores';
+$string['inreplyto'] = 'En respuesta a';
+$string['forumng:view'] = 'Ver foro';
+$string['forumng:ignorepostlimits'] = 'Ignorar los límites de envío de entradas';
+$string['forumng:mailnow'] = 'Enviar manualmente notificaciones de entradas por correo';
+$string['forumng:setimportant'] = 'Marcar entradas como importantes';
+$string['forumng:managediscussions'] = 'Editar las opciones del tema';
+$string['forumng:viewallposts'] = 'Ver entradas ocultas y eliminadas';
+$string['forumng:viewreadinfo'] = 'Ver quien ha leído una entrada';
+$string['editlimited'] = 'Atención: debes guardar los cambios de esta entrada antes de {$a}. Después de
+ese momento ya no podrás editar la entrada.';
+$string['badbrowser'] = '<h3>Foro con características reducidas</h3>&nbsp;<p>Estás utilizando {$a}.
+Si quieres tener una mejor experiencia utilizando estos foros, por favor, actualiza a
+una versión más reciente de <a href=\'http://www.microsoft.com/windows/internet-explorer/\'>Internet Explorer</a>
+o <a href=\'http://www.mozilla.com/firefox/\'>Firefox</a>.</p>';
+$string['nosubscribersgroup'] = 'Todavía nadie del grupo está suscrito a este foro.';
+$string['hasunreadposts'] = '(Entradas sin leer)';
+$string['postdiscussion'] = 'Enviar tema';
+$string['postreply'] = 'Enviar respuesta';
+$string['confirmbulkunsubscribe'] = '¿Estás seguro de querer cancelar la suscripción de los usuarios de la lista?
+(esta acción no puede deshacerse.)';
+$string['savedraft'] = 'Guardar como borrador';
+$string['draftexists'] = 'Se ha guardado un borrador de esta entrada ({$a}). Si no quieres terminar
+de redactar la entrada ahora, puedes recuperar el borrador más adelante desde la página principal del foro';
+$string['draft_inreplyto'] = '(respuesta a {$a})';
+$string['draft_newdiscussion'] = '(nuevo tema)';
+$string['drafts'] = 'Borradores';
+$string['deletedraft'] = 'Eliminar borradores';
+$string['confirmdeletedraft'] = '¿Estás seguro de querer eliminar este borrador? (se muestra en la parte inferior)';
+$string['draft'] = 'Borrador';
+$string['collapseall'] = 'Plegar todas las entradas';
+$string['selectlabel'] = 'Seleccionar entrada {$a}';
+$string['selectintro'] = 'Marca el check que hay junto a cada entrada que desees incluir. Cuando hayas
+finalizado, avanza hasta el final y pulsa &lsquo;Confirmar selección&rsquo;.';
+$string['confirmselection'] = 'Confirmar selección';
+$string['selectedposts'] = 'Seleccionar entradas';
+$string['selectorall'] = '¿Quieres incluir todo el tema, o sólo las entradas seleccionadas?';
+$string['selectoralldisc'] = 'Todas las entradas que se muestran';
+$string['selectorselecteddisc'] = 'Seleccionar entrada';
+$string['selectorselectdisc'] = 'Entrada seleccionada';
+$string['selectordiscall'] = 'Quieres incluir todos los temas que se muestran en esta página, o sólo los temas seleccionados?';
+$string['selectdiscintro'] = 'Marca el check que hay junto a cada tema que desees incluir. Cuando hayas
+finalizado, avanza hasta el final y pulsa &lsquo;Confirmar selección&rsquo;.';
+$string['setimportant'] = 'Marcar entrada como "importante"';//used by moderators, highlight important posts
+$string['important'] = 'Entrada importante'; // alt text for important icon
+$string['flaggedposts'] = 'Entradas marcadas';
+$string['flaggedpostslink'] = '{$a} entradas marcadas';
+$string['post'] = 'Entrada';
+$string['author'] = 'Autor';
+$string['clearflag'] = 'Eliminar marca';
+$string['setflag'] = 'Marcar esta entrada para futura referencia';
+$string['flagon'] = 'Has marcado esta entrada';
+$string['flagoff'] = 'Sin marcar';
+$string['postby'] = '(por {$a})';
+$string['quotaleft_plural'] = 'Sólo puedes escribir <strong>{$a->posts}</strong> entradas más en la {$a->period} actual.';
+$string['quotaleft_singular'] = 'Sólo puedes escribir <strong>{$a->posts}</strong> entrada más en la {$a->period} actual.';
+$string['studyadvice_noyourquestions'] = 'Todavía no has creado ningún tema en este foro de ayudas de estudio';
+$string['studyadvice_noquestions'] = 'Nadie ha creado todavía ningún tema en este foro de ayudas de estudio';
+$string['jumpto'] = 'Ir a:';
+$string['jumpnext'] = 'Siguiente no leído';
+$string['jumpprevious'] = 'Anterior no leído';
+$string['jumppreviousboth'] = 'anteriores';
+$string['skiptofirstunread'] = 'Saltar a la primera entrada no leída';
+$string['enableadvanced'] = 'Habilitar opciones avanzadas';
+$string['configenableadvanced'] = 'Esta opción habilita características avanzadas del foro que pueden resultar inncesariamente complejos para
+la mayoría de las instalaciones. Actualmente sólo se habilita la compartición de foros, pero podrían añadirse
+otras características en el futuro.';
+$string['shared'] = 'Permitir que se comparta el foro';
+$string['shared_help'] = 'Marca esta opción e informa el número ID del campo inferior para
+habilitar la compartición de este foro.
+
+Este foro se convertirá en el foro original. Podrás crear una o más copias de este foro eligiendo
+<strong>Usar foro compartido existente</strong>, e indicando el el mismo número ID al crear cada copia.';
+$string['sharing'] = 'Compartición de foro';
+$string['useshared'] = 'Clonar un foro existente';
+$string['useshared_help'] = 'Si quieres crear un clon de un foro existente, marca esta opción e indica el número ID
+del foro original (el cual debe tener habilitada la compartición de foro).
+
+Cuando se selecciona esta opción, muchas otras opciones serán ignoradas ya que realmente no
+se está creando un foro sino un enlace a un foro existente. La excepción es la disponibilidad y
+(sólo manualmente) las opciones de finalización.';
+$string['sharedinfo'] = 'Este es un foro compartido. Las opciones de acceso no se comparten, y
+se aplican únicamente a los estudiantes que acceden a este foro desde este curso en particular. Si quieres
+editar otras opciones de este foro, por favor, <a href=\'{$a}\'>edita las opciones del foro original</a>.';
+$string['sharedviewinfooriginal'] = '<strong>Este foro está compartido</strong> bajo el nombre
+<strong>{$a}</strong> para su uso en otros cursos.';
+$string['sharedviewinfonone'] = 'No está incluido actualmente en ningún otro curso.';
+$string['sharedviewinfolist'] = 'Está incluido aquí: {$a}.';
+$string['sharedviewinfoclone'] = '<strong>Este es un foro compartido</strong>. El
+<a href=\'{$a->url}\'>foro original</a> está en {$a->shortname}.';
+$string['jumpparent'] = 'Padre';
+$string['savetoportfolio'] = 'Guardar en tu portafolio';
+$string['savedposts_all'] = '{$a}';
+$string['savedposts_selected'] = '{$a} (entradas seleccionadas)';
+$string['savedposts_one'] = '{$a->name}: {$a->subject}';
+$string['savedposts_all_tag'] = 'Tema del foro';
+$string['savedposts_selected_tag'] = 'Entradas del foro';
+$string['savedposts_one_tag'] = 'Entrada del foro';
+$string['savedposts_original'] = 'Tema original';
+$string['savedtoportfolio'] = 'La información seleccionada ha sido guardada en tu portafolio.';
+$string['offerconvert'] = 'Si quieres crear un nuevo ForumNG que sea una copia de un foro de estilo antiguo,
+no utilices este formulario. En vez de eso, <a href=\'{$a}\'>convierte el foro</a>.';
+$string['convert_title'] = 'Convertir foros';
+$string['convert_info'] = 'El proceso de conversión se puede ejecutar en uno o más foros de estilo antiguo;
+de momento sólo está soportado el foro de tipo \'general\'. Utiliza la tecla Ctrl
+para seleccionar más de un foro de la lista si lo necesitas.';
+$string['convert_warning'] = '<p>Cuando pulses Convertir, se convertirán los foros seleccionados.
+Esto incluye todas las entradas y temas, y puede llevar un tiempo. Los foros no estarán
+disponibles durante la conversión.</p><ul>
+<li>
+Los foros antiguos se ocultarán tan pronto como comience el proceso
+de conversión para ese foro. Esto asegura que no se crearán nuevas entradas, las
+cuales \'perderían\' la conversión.</li>
+<li>
+Los foros nuevos se crean inicialmente ocultos y sólo se muestran una vez
+se ha completado el proceso de conversión para ese foro. </li>
+</ul>';
+$string['convert_hide'] = 'Dejar ocultos los foros creados';
+$string['convert_nodata'] = 'No incluir datos del usuario (entradas, suscripciones, etc.)';
+$string['convert_process_init'] = 'Creando estructura del foro...';
+$string['convert_process_state_done'] = 'hecho.';
+$string['convert_process_show'] = 'Haciendo el foro visible...';
+$string['convert_process_subscriptions_normal'] = 'Convirtiendo suscripciones normales...';
+$string['convert_process_subscriptions_initial'] = 'Convirtiendo suscripciones iniciales...';
+$string['convert_process_discussions'] = 'Convirtiendo temas...';
+$string['convert_process_dashboard'] = 'Convirtiendo favoritos del tablón...';
+$string['convert_process_dashboard_done'] = 'hecho (OK {$a->yay}, error {$a->nay}).';
+$string['convert_process_assignments'] = 'Actualizando asignaciones de rol...';
+$string['convert_process_overrides'] = 'Actualizando role overrides...';
+$string['convert_process_search'] = 'Regenerando datos para búsquedas...';
+$string['convert_process_update_subscriptions'] = 'Convirtiendo a suscripciones de grupo...';
+$string['convert_process_complete'] = 'Conversión completada en {$a->seconds}s (ver {$a->link}).';
+$string['convert_newforum'] = 'nuevo foro';
+$string['convert_noneselected'] = '¡No se han seleccionado foros para convertir! Por favor, seleccione
+uno o más foros.';
+$string['convert_noforums'] = 'No hay foros antiguos en este curso para convertir.';
+$string['pastediscussion']='Pegar tema';
+$string['switchto_simple_text']= 'La vista estándar de este foro no siempre funciona bien con tecnología de asistencia. Se provee también
+una vista simple que contiene todas las características del foro.';
+$string['switchto_standard_text']= 'Estás utilizando la vista simple de este foro, que debería funcionar correctamente con tecnología de asistencia.';
+$string['switchto_simple_link']='Cambiar a vista sencilla.';
+$string['switchto_standard_link']='Cambiar a vista estándard.';
+$string['displayversion'] = 'Versión de ForumNG: <strong>{$a}</strong>';
+
+// OU only.
+$string['externaldashboardadd'] = 'Añadir foro al panel';
+$string['externaldashboardremove'] = 'Eliminar foro del panel';
+
+// New error strings.
+$string['error_fileexception'] = 'Ha ocurrido un error de proceso de ficheros. Seguramente estará causado por problemas en el sistema.
+Prueba a intentarlo más tarde.';
+$string['error_subscribeparams'] = 'Parámetros incorrectos: se requiere bien id o curso o d.';
+$string['error_nopermission'] = 'No estás autorizado a llevar a cabo esta petición.';
+$string['error_exception'] = 'Ocurrió un error en el foro. Por favor, inténtalo más tarde o prueba otra
+cosa.<div class=\'forumng-errormessage\'>Mensaje de error: {$a}</div>';
+$string['error_cannotchangesubscription'] = 'No estás autorizado a suscribirte, o cancelar tu suscripción, a este foro.';
+$string['error_cannotchangediscussionsubscription'] = 'No estás autorizado a suscribirte, o cancelar tu suscripción, a este tema.';
+$string['error_cannotchangegroupsubscription'] = 'No estás autorizado a suscribirte, o cancelar tu suscripción, a este grupo.';
+$string['error_cannotsubscribetogroup'] = 'No estás autorizado a suscribirte al grupo seleccionado.';
+$string['error_cannotunsubscribefromgroup'] = 'No estás autorizado a cancelar la suscripción al grupo seleccionado.';
+$string['error_invalidsubscriptionrequest'] = 'Tu petición de suscripción es inválida.';
+$string['error_unknownsort'] = 'Opción de ordenación desconocida.';
+$string['error_ratingthreshold'] = 'El umbral de valoraciones debe ser un número positivo.';
+$string['error_duplicate'] = 'Ya has creado una entrada utilizando el formulario anterior. (Este error
+ocurre en ocasiones al pulsar dos veces el botón. En ese caso seguramente tu entrada
+ha sido guardada.)';
+$string['edit_notcurrentpost'] = 'No puedes editar entradas eliminadas o versiones anteriores de una entrada.';
+$string['edit_timeout'] = 'Ya no puedes editar esta entrada; ha pasado el límite de tiempo en el que se permitía la edición.';
+$string['edit_notyours'] = 'No puedes editar las entradas de otro usuario.';
+$string['edit_nopermission'] = 'No tienes permisos para editar este tipo de entradas.';
+$string['edit_readonly'] = 'Este foro está en modo de sólo lectura, no se permite la edición de entradas.';
+$string['edit_notdeleted'] = 'No puedes restaurar una entrada que no haya sido borrada.';
+$string['edit_rootpost'] = 'Esta acción no es aplicable a la entrada inicial de un tema.';
+$string['edit_locked'] = 'El tema está cerrado.';
+$string['edit_notlocked'] = 'El tema no está cerrado actualmente.';
+$string['edit_wronggroup'] = 'No puedes realizar cambios en entradas que no sean de tu grupo.';
+$string['reply_notcurrentpost'] = 'No puedes responder a entradas eliminadas o versiones anteriores de las entradas.';
+$string['reply_nopermission'] = 'No tienes permisos para responder aquí.';
+$string['reply_readonly'] = 'Este foro está en modo de sólo lectura, no pueden añadirse nuevas respuestas.';
+$string['reply_typelimit'] = 'Debido al tipo de este foro, no tienes permitido en este momento responder a esta entrada.';
+$string['reply_wronggroup'] = 'No puedes responder a entradas en este tema porque no perteneces al grupo adecuado.';
+$string['reply_postquota'] = 'No puedes responder a entradas en este momento porque hay llegado a tu límite diario de redacción de entradas.';
+$string['reply_missing'] = 'No puedes responder porque el sistema no puede encontrar la entrada.';
+$string['startdiscussion_nopermission'] = 'No tienes permisos para crear un nuevo tema aquí.';
+$string['startdiscussion_groupaccess'] = 'No tienes permisos para crear un nuevo tema en este grupo.';
+$string['startdiscussion_postquota'] = 'No puedes crear un nuevo tema en este momento porque has llegado a tu límite de creación de entradas.';
+$string['error_markreadparams'] = 'Parámetros incorrectos: requiere bien id o d.';
+$string['error_cannotmarkread'] = 'No estás autorizado a marcar temas como leídos en este foro.';
+$string['error_cannotviewdiscussion'] = 'No tienes permisos para ver este tema.';
+$string['error_cannotmanagediscussion'] = 'No tienes permisos para gestionar este tema.';
+$string['error_draftnotfound'] = 'Imposible encontrar el borrador. Puede que el borrador haya sido publicado o eliminado.';
+$string['jserr_load'] = 'Ocurrió un error recuperando la entrada.
+
+Recarga la página y prueba de nuevo.';
+$string['jserr_save'] = 'Ocurrio un error al guardar la entrada.
+
+Copia el texto en otro programa para no perderlo, recarga la página y prueba de nuevo.';
+$string['jserr_alter'] = 'Ocurrió un error al modificar la entrada.
+
+Recarga la página y prueba de nuevo.';
+$string['jserr_attachments'] = 'Ocurrió un error al cargar el editor de adjuntos.
+
+Recarga la página y prueba de nuevo.';
+$string['rate_nopermission'] = 'No tienes permisos para valorar esta entrada ({$a}).';
+$string['subscribers_nopermission'] = 'No tienes permisos para ver la lista de suscriptores.';
+$string['feed_nopermission'] = 'No tienes permisos para acceder a este feed.';
+$string['feed_notavailable'] = 'Este feed no está disponible.';
+$string['crondebugdesc'] = 'SOLO PARA DEPURACIÓN -- Marca para incluir información de depuración en los logs del cron';
+$string['crondebug'] = 'Mensajes de depuración del programa cron';
+$string['unsubscribeselected'] = 'Cancelar la suscripción de los usuarios seleccionados';
+$string['unsubscribe_nopermission'] = 'No tienes permisos para cancelar la suscripción de otros usuarios.';
+$string['draft_noedit'] = 'La característica de borradores no puede utilizarse cuando se están editando entradas.';
+$string['draft_mismatch'] = 'Error al acceder al borrador (o bien no pertenece a tu usuario o no forma parte del tema solicitado).';
+$string['draft_cannotreply'] = '<p>No es posible en este momento añadir una respuesta al post al que se refiere tu borrador.
+{$a}</p><p>Puedes usar el botón de la X debajo de este borrador en la página principal del foro
+para ver el texto completo del borrador (así podrás copiarlo y pegarlo en otro lugar) y para
+eliminarlo definitivamente.';
+$string['invalidemail'] = 'La dirección de correo no es correcta. Por favor, introduce una única dirección de correo.';
+$string['invalidemails'] = 'La dirección de correo no es correcta. Por favor, introduce una o más direcciones
+separadas por espacios o punto y coma.';
+$string['error_forwardemail'] = 'Ocurrió un error enviando el correo a <strong>{$a}</strong>. El correo
+no se ha enviado.';
+$string['alert_link'] = 'Alerta';
+$string['alert_linktitle'] = 'Notificar entrada como inaceptable';
+$string['reportunacceptable'] = 'Correo para notificar entradas ofensivas';
+$string['reportingemail'] = 'Correo para notificar entradas ofensivas';
+$string['reportingemail_help'] = 'Si se proporciona esta dirección de correo, aparecerá un enlace de notificación
+junto a cada entrada. Los usuario pueden pulsar el enlace para notificar entradas ofensivas.
+La información se enviará a esta dirección de correo.
+
+Si se deja en blanco esta dirección de correo la opción de Notificación no se mostrará (a no ser
+que se haya proporcionado una dirección a nivel del sitio).';
+$string['configreportunacceptable'] = 'Esta dirección de correo se utiliza para notificar entradas ofensivas de ForumNG a nivel del sitio.
+Si este correo se deja en blanco, la función de notificación se desactivará a no ser que se active
+a nivel de cada foro individual.';
+$string['alert_info'] = 'La característica de \'Notificación\' puede enviar esta entrada a un administrador
+para que lo revise. <strong>Por favor, utiliza esta opción sólo si piensas que la entrada incumple las reglas del foro</strong>.';
+$string['alert_reasons'] = 'Motivos del aviso';
+$string['alert_condition1'] = 'Es abusivo';
+$string['alert_condition2'] = 'Es acoso';
+$string['alert_condition3'] = 'Tiene contenido obsceno o pornográfico';
+$string['alert_condition4'] = 'Es calumnioso o difamatorio';
+$string['alert_condition5'] = 'Infringe derechos de autor';
+$string['alert_condition6'] = 'Está en contra de las reglas de uso por cualquier otra razón';
+$string['alert_conditionmore'] = 'Otra información (opcional)';
+$string['alert_reporterinfo'] = '<strong>Detalles del notificador</strong>:';
+$string['alert_reporterdetail'] = '{$a->fullname} ({$a->username}; {$a->email}; {$a->ip})';
+$string['invalidalert'] = 'Es necesario que especifiques la razón por la que notificas esta entrada.';
+$string['invalidalertcheckbox'] = 'Debes marcar al menos una de las opciones.';
+$string['alert_submit'] = 'Enviar alerta';
+$string['error_sendalert'] = 'Ha ocurrido un error enviando el informe a {$a}.
+El informe no ha podido ser enviado.';
+$string['error_portfoliosave'] = 'Ocurrió un error al guardar los datos en tu portafolio.';
+$string['alert_pagename'] = 'Notificar una entrada como inaceptable';
+$string['alert_emailsubject'] = 'Notificación de foro{$a->postid}: {$a->coursename} {$a->forumname}';
+$string['alert_emailpreface'] = 'Una entrada del foro ha sido notificada por {$a->fullname} ({$a->username},
+{$a->email}) {$a->url}';
+$string['alert_feedback'] = 'Tu notificación se ha enviado correctamente. Un administrador revisará el caso.';
+$string['alert_emailappendix'] = 'Has recibido este correo porque tu dirección se ha utilizado en ForumNG para notificar
+contenido inaceptable.';
+$string['alert_note'] = 'Ten en cuenta que: Este correo ha sido enviado también a {$a}';
+$string['alert_notcurrentpost'] = 'Esta entrada ya ha sido eliminada.';
+$string['alert_turnedoff'] = 'La función de notificación no está disponible.';
+$string['move_notselected'] =
+'Debes seleccionar un foro destino de la lista desplegable antes de pulsar el botón "Mover".';
+$string['partialsubscribed'] = 'Parcial';
+$string['move_nogroups'] = 'No tienes acceso a ningún grupo en el foro seleccionado.';
+$string['beforestartdate'] = 'Puedes leer cualquier entrada en este foro, pero no crear nuevas entradas.
+La creación de nuevas entradas en este foro se habilitará el {$a}.';
+$string['beforestartdatecapable'] = 'Los estudiantes pueden leer cualquier entrada en este foro, pero no crear
+entradas nuevas hasta {$a}. Tú tienes acceso a crear entradas nuevas antes de esa fecha.';
+$string['beforeenddate'] = 'La creación de nuevas entradas en este foro se cerrará el {$a}.';
+$string['beforeenddatecapable'] = 'La creación de nuevas entradas de los estudiantes en este foro se cerrará el {$a}.';
+$string['afterenddate'] = 'Puedes leer cualquier entrada en este foro, pero no crear nuevas entradas.
+La creación de nuevas entradas en este foro se cerró el {$a}.';
+$string['afterenddatecapable'] = 'Los estudiantes pueden leer cualquier entrada en este foro, pero no han podido enviar
+entradas nuevas desde que se cerró el foro el {$a}. Tú todavía tienes acceso a crear nuevas entradas.';
+$string['removeolddiscussions'] = 'Eliminar temas antiguos';
+$string['removeolddiscussions_help'] = 'El sistema puede eliminar temas automáticamente si no han tenido respuestas
+durante un periodo determinado de tiempo.';
+$string['removeolddiscussionsafter'] = 'Eliminar temas antiguos después de';
+$string['removeolddiscussionsdefault'] = 'No eliminar nunca';
+$string['withremoveddiscussions'] = 'Mover tema a';
+$string['onemonth'] = '1 mes';
+$string['withremoveddiscussions_help'] = 'Existen dos opciones para gestionar los temas eliminados:
+<ul><li>Eliminarlos de forma permanente; al contrario que la utilidad estándar de borrado, los temas no podrán recuperarse.
+Esta opción puede utilizarse para ahorrar espacio en la base de datos.</li>
+<li>Moverlos a otro foro; por ejemplo, puedes tener un &lsquo;archivo del foro&rsquo;.
+Puedes seleccionar cualquier otro foro del mismo curso.</li></ul>';
+$string['deletepermanently'] = 'eliminar permanentemente';
+$string['housekeepingstarthour']='Hora de comienzo del archivado';
+$string['housekeepingstophour']='Hora de finalización del archivado';
+$string['confighousekeepingstarthour']= 'Las tareas de archivado, como por ejemplo el borrado de temas antiguos, comenzará
+cada día a esta hora.';
+$string['confighousekeepingstophour']='El archivado de tareas terminará a esta hora.';
+$string['invalidforum']='Este foro ya no existe';
+$string['errorinvalidforum'] = 'El foro donde se archivaban los temas antiguos ya no existe. Por favor, elige un foro diferente.';
+$string['archive_errorgrouping']= 'El foro que recibe los temas antiguos tiene una configuración de grupos diferente. Por favor,
+actualiza el foro y cambia las opciones de <strong>Eliminar temas antiguos</strong>.';
+$string['archive_errortargetforum']='El foro que se utilizaba para recibir los temas antiguos ya no existe. Por favor, actualiza
+el foro y cambia las opciones de <strong>Eliminar entradas antiguas</strong>.';
+$string['error_notwhensharing'] = 'Esta opción no está disponible en foros compartidos.';
+$string['error_sharingrequiresidnumber'] = 'Al compartir el foro debes introducir un número ID que sea único en todo el sistema';
+$string['error_sharingidnumbernotfound'] = 'Al utilizar un foro compartido, debes introducir un número ID exactamente igual al introducido
+previamente en el foro que está compartido';
+$string['error_sharinginuse'] = 'No puedes deshabilitar la compartición de este foro porque todavía existen foros compartidos con él.
+Si es necesario debes eliminar primero esos otros foros.';
+$string['error_nosharedforum'] = 'Foro <strong>{$a->name}</strong>: No se ha podido restaurar como foro
+compartido; No se ha encontrado el número ID {$a->idnumber}. El foro restaurado es un foro independiente.';
+$string['error_ratingrequired'] = 'Has elegido calificar por valoraciones, pero las valoraciones no están habilitadas';
+$string['advancedsearch'] = 'Búsqueda avanzada';
+$string['words'] = 'Buscar';
+$string['words_help'] =
+'Introduce aquí tu búsqueda.
+
+Para buscar frases exactas utiliza las comillas.
+
+Para excluir una palabra añade un guión precediendo a la palabra a excluir.
+
+Ejemplo: la búsqueda <tt>picasso -escultura &quot;primeros trabajos</tt> devolverá resultados para
+&lsquo;picasso&rsquo; o la frase &lsquo;primeros trabajos&rsquo; pero excluyendo ítems que contengan &lsquo;escultura&rsquo;.
+
+Si dejas esto en blanco, entonces se mostrarán todas las entradas que cumplan los criterios de
+autor y/o fecha, independientemente de su contenido.';
+$string['authorname'] = 'Nombre del autor';
+$string['authorname_help'] = 'Puedes introducir el nombre (Íñigo), un apellido (Montoya), el nombre completo (Íñigo Montoya),
+o el principio de cualquiera de estos (Íñ, Mon, Íñi M). Las búsquedas no distinguen mayúsculas y minúsculas.
+
+También puedes introducir el nombre de usuario (imon001).
+
+Si dejas este campo en blanco se incluirán entradas de cualquier autor.';
+$string['daterangefrom'] = 'Rango de fechas desde';
+$string['daterangefrom_help'] = 'Utiliza estas fechas para restringir la búsqueda e incluir sólo las entradas
+entre ese rango de fechas.
+
+Si no indicas ninguna fecha se incluirán entradas de cualquier fecha en los resultados.';
+$string['daterangeto'] = 'Rango de fechas hasta';
+$string['searchresults'] = 'Resultados de la búsqueda: <strong>{$a}</strong>';
+$string['searchtime'] = 'Hora de la búsqueda: {$a} s';
+$string['nothingfound'] = ' No se han encontrado resultados. Prueba utilizando otra consulta.';
+$string['previousresults'] = 'Volver a los resultados {$a}';
+$string['nextresults'] = 'Ver más resultados';
+$string['author'] = ' autor: \"{$a}\"';
+$string['from'] = ' de: {$a}';
+$string['to'] = ' a: {$a}';
+$string['inappropriatedateortime'] = 'La fecha "desde" no puede ser posterior a hoy.';
+$string['daterangemismatch'] = 'La fecha "hasta" es anterior a la fecha "desde".';
+$string['nosearchcriteria'] = 'No hay criterios de búsqueda. Por favor, utilice uno o más de los criterios de búsqueda
+que se muestran debajo.';
+$string['searchallforums'] = 'Buscar en todos los foros';
+
+$string['replies'] = 'Respuestas';
+$string['newdiscussion'] = 'Tema nuevo';
+$string['nothingtodisplay'] = '<h3>No hay nada que mostrar</h3>';
+$string['re'] = 'Re: {$a}';
+
+$string['error_feedlogin'] = 'Error al completar la identificación del usuario';
+
+$string['error_makebig'] = 'El curso sólo tiene {$a->users} usuarios, pero has solicitado que
+{$a->readusers} usuarios lean cada tema. Crea más usuarios.';
+$string['error_system'] = 'Ocurrió un error del sistema: {$a}';
+
+
+$string['modulename_help'] = 'ForumNG es un sustituto de los foros estándar de Moodle con prácticamente la misma funcionalidad
+más características adicionales y un interfaz más dinámico.
+
+NG viene de \'Next Generation\'.';
+$string['mailnow_help'] = 'Enviar inmediatamente las entradas a los suscriptores.
+
+A menos que selecciones esta opción, el sistema esperará un tiempo antes de enviar la entrada
+para que las ediciones que se hubieran realizado se incluyan también en el correo.';
+$string['displayperiod_help'] = 'Puedes ocultar este tema a los estudiantes desde, o hasta, una fecha determinada.
+
+Mientras está oculto los estudiantes no verán el tema. Para los moderadores se mostrará
+en la lista en color gris y con el icono de un reloj.';
+
+$string['sticky_help'] = 'Esta opción puede hacer que los temas aparezcan en la parte superior de la lista,
+incluso cuando se añadan posteriormente otros temas.
+
+Los temas de tipo post-it se muestran con una flecha hacia arriba en la lista de temas. Puedes
+tener más de un tema de tipo post-it';
+
+$string['errorfindinglastpost'] = 'Error al recalcular la última entrada (¿base de datos inconsistente?)';
+
+$string['drafts_help'] = 'Cuando guardas un borrador, aparece en esta lista. Pulsa sobre el
+borrador para continuar trabajando con él.
+
+Si quieres eliminar el borrador, pulsa el icono de eliminación que hay junto a él. Se mostrará una pantalla de confirmiacion.
+
+En algunos casos no será posible continuar trabajando con el borrador (por ejemplo, si era una
+respuesta a un tema que ha sido borrado). En esos casos puedes recuperar el contenido del borrador
+pulsando en el icono de eliminación.';
+
+$string['flaggedposts_help'] = 'Las entradas marcadas aparecen en esta lista. Para ver una entrada marcada,
+pulsa sobre ella.
+
+Para eliminar la marca de una entrada, pulsa en el icono de la bandera (aquí o en la entrada).';
+$string['searchthisforum_help'] = 'Introduce tu búsqueda y pulsa Enter o el botón asociado.
+
+Para buscar frases exactas utiliza las comillas.
+
+Para excluir una palabra añade un guión precediendo a la palabra a excluir.
+
+Ejemplo: la búsqueda <tt>picasso -escultura &quot;primeros trabajos</tt> devolverá resultados para
+&lsquo;picasso&rsquo; o la frase &lsquo;primeros trabajos&rsquo; pero excluyendo ítems que contengan &lsquo;escultura&rsquo;.
+
+Para buscar por autor o fecha, pulsa en &lsquo;Más opciones&rsquo;.';
+$string['searchthisforumlink_help'] = 'Introduce tu búsqueda y pulsa Enter o el botón asociado.
+
+Para buscar frases exactas utiliza las comillas.
+
+Para excluir una palabra añade un guión precediendo a la palabra a excluir.
+
+Ejemplo: la búsqueda <tt>picasso -escultura &quot;primeros trabajos</tt> devolverá resultados para
+&lsquo;picasso&rsquo; o la frase &lsquo;primeros trabajos&rsquo; pero excluyendo ítems que contengan &lsquo;escultura&rsquo;.
+
+Para buscar por autor o fecha, pulsa en &lsquo;Más opciones&rsquo;.';
+
+$string['notext'] = '(sin texto)';
+
+$string['grade'] = 'Calificación';
+$string['gradingscale'] = 'Escala de calificación';
diff --git a/mod/forumng/lang/fr/forumng.php b/mod/forumng/lang/fr/forumng.php
new file mode 100644
index 0000000..7ee725f
--- /dev/null
+++ b/mod/forumng/lang/fr/forumng.php
@@ -0,0 +1,636 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * Traduction par Pascal Maury et Luiggi Sansonetti
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['replytouser'] = 'Utiliser l\'adresse de l\'auteur dans le champ "Répondre à"';
+$string['configreplytouser'] = 'Lorsqu\'un message est envoyé par courriel, doit-il contenir l\'adresse de courriel de son auteur, afin que le destinataire puisse l\'atteindre personnellement. Même lorsque cette option est activée, les utilisateurs peuvent choisir dans leur profil de garder leur adresse secrète.';
+$string['disallowsubscribe'] = 'Les abonnements sont désactivés';
+$string['forcesubscribe'] = 'Forcer tout le monde à être (définitivement) abonné';
+$string['subscription'] = 'Mode d\'abonnement';
+$string['subscription_help'] = 'Vous pouvez abonner tout le monde de façon imposée, ou de les abonner par défaut, la différence est que dans ce dernier cas, les utilisateurs peuvent choisir de se désabonner.<br>Ces options incluent tous les participants aux cours (étudiants et enseignants). Les utilisateurs qui n\'appartiennent pas au cours (comme l\'administrateur) peuvent quand même s\'abonner.';
+$string['configtrackreadposts'] = 'Mettre sur \'Oui\' pour permettre à l\'utilisateur de suivre la lecture du message.';
+$string['forums'] = 'Forums';
+$string['digestmailheader'] = 'Ceci est votre résumé quotidien des nouveaux messages de forum de {$a->sitename}. Pour modifier vos préférences de notification, allez à {$a->userprefs}.';
+$string['digestmailprefs'] = 'Votre profil';
+$string['digestmailsubject'] = '{$a}: résumé du forum';
+$string['unsubscribe'] = 'Se désabonner de ce forum';
+$string['unsubscribeall'] = 'Se désabonner de tous les forums';
+$string['postmailinfo'] = 'Ceci est la copie du message de forum posté sur le site {$a}.<br>Pour ajouter une réponse au message depuis {$a}, cliquez sur le lien suivant :';
+$string['discussionoptions'] = 'Options de la discussion';
+$string['forum'] = 'Forum';
+$string['subscribed'] = 'Abonné';
+$string['subscribegroup'] = 'S\'abonner à ce groupe';
+$string['subscribeshort'] = 'S\'abonner';
+$string['subscribelong'] = 'S\'abonner à tout le forum';
+$string['unsubscribegroup'] = 'Se désabonner de ce groupe';
+$string['unsubscribegroup_partial'] = 'Se désabonner des discussions de ce groupe';
+$string['unsubscribeshort'] = 'Se désabonner';
+$string['unsubscribelong'] = 'Se désabonner du forum';
+$string['subscribediscussion'] = 'S\'abonner à ce fil de discussions';
+$string['unsubscribediscussion'] = 'Se désabonner de ce fil de discussions';
+$string['subscribeddiscussionall'] = 'Toutes les discussions';
+$string['subscribedthisgroup'] = 'Ce groupe';
+$string['numberofdiscussions'] = 'Discussions {$a} ';
+$string['numberofdiscussion'] = 'Discussion {$a}';
+$string['discussions'] = 'Discussions';
+$string['posts'] = 'Messages';
+$string['subscribe'] = 'S\'abonner à ce forum';
+$string['allsubscribe'] = 'S\'abonner à tous les forums';
+$string['allunsubscribe'] = 'Se désabonner de tous les forums';
+$string['forumname'] = 'Nom du forum';
+$string['forumtype'] = 'Type de forum';
+$string['forumtype_help'] = 'Différents types de forums sont disponibles à des fins spécifiques ou à des méthodes d\'enseignement. Le type de forum standard est approprié pour toutes les conditions normales d\'utilisation.';
+$string['forumtype_link'] = 'mod/forumng/forumtypes';
+$string['forumintro'] = 'Introduction au forum';
+$string['ratingtime'] = 'Restreindre l\'évaluation aux éléments dont les dates sont dans cet intervalle :';
+$string['ratings'] = 'évaluations';
+$string['grading'] = 'Type de combinaison';
+$string['grading_help'] = 'Si vous sélectionnez cette option, une note pour ce forum sera ajoutée au carnet de notes du cours et sera calculée automatiquement. Laissez vide pour un forum non-évalué, ou si vous prévoyez de l\'évaluer manuellement.<br>Les différentes manières de calculer sont assez explicites : dans chaque cas, la note pour chaque utilisateur est calculée sur la base de toutes les notes pour tous les messages qu\'il a posté dans le forum. Le classement est limités à l\'échelle, par exemple si l\'échelle est de 0-3, la méthode de classement est sur «compter» et le classement des messages de l\'utilisateur ayant reçu 17 votes sera de 3.';
+$string['nodiscussions'] = 'Il n\'y a pas encore de discussion dans ce forum.';
+$string['startedby'] = 'Lancé par';
+$string['discussion'] = 'Discussion';
+$string['unread'] = 'Non lu';
+$string['lastpost'] = 'Dernier message';
+$string['group'] = 'Groupe';
+$string['addanewdiscussion'] = 'Ajouter une discussion';
+$string['subject'] = 'Sujet';
+$string['message'] = 'Message';
+$string['subscribestart'] = 'M\'envoyer des copies par courriel des message de ce forum';
+$string['subscribestop'] = 'Je ne veux pas de copies par courriel des message de ce forum';
+$string['mailnow'] = 'Envoyer maintenant';
+$string['displayperiod'] = 'Période d\'affichage';
+$string['subscriptions'] = 'Abonnements';
+$string['nosubscribers'] = 'Il n\'y a pas encore d\'abonné à ce forum.';
+$string['subscribers'] = 'Abonnés';
+$string['numposts'] = '{$a} message(s)';
+$string['noguestsubscribe'] = 'Désolé, les visiteurs ne sont pas autorisés à s\'abonner pour recevoir les messages des forums par courriel.';
+$string['discussionsperpage'] = 'Discussions par page';
+$string['configdiscussionsperpage'] = 'Nombre maximal de discussions affichées sur une page';
+$string['attachmentmaxbytes'] = 'Taille maximale de l\'annexe';
+$string['attachmentmaxbytes_help'] = 'Il est possible de limiter la taille des annexes. Cette limite est fixée par la personne qui met en place le forum.';
+$string['configattachmentmaxbytes'] = 'Taille maximale des annexes des forums (cette taille dépend par ailleurs des limites définies au niveau du cours et d\'autres réglages locaux)';
+$string['readafterdays'] = 'Délai de lecture';
+$string['configreadafterdays'] = 'Après ce nombre de jours, les messages sont considérés comme étant lus par tous les usagers.';
+$string['trackreadposts'] = 'Activer le suivi des messages';
+$string['teacher_grades_students'] = 'Les enseignants évaluent les étudiants';
+$string['grading_average'] = 'Moyenne des évaluations';
+$string['grading_count'] = 'Nombre d\'évaluations';
+$string['grading_max'] = 'Evaluation maximale';
+$string['grading_min'] = 'Evaluation minimale';
+$string['grading_none'] = 'Pas d\'évaluation';
+$string['grading_sum'] = 'Somme des évaluations';
+$string['subscription_permitted'] = 'Abonnement facultatif';
+$string['subscription_forced'] = 'Abonnement imposé';
+$string['enableratings'] = 'Autoriser l\'évaluation des messages';
+$string['enableratings_help'] = 'Si l\'option est activée, les messages du forum peuvent être évalués en utilisant une échelle numérique par défaut ou définie. Une ou plusieurs personnes peuvent évaluer le message et l\'évaluation affichée est la moyenne de ces évaluations.<br>Si vous utilisez une échelle numérique jusqu\'à 5 (ou moins), une jolie «étoile» est affichée. Sinon, c\'est une liste déroulante.<br>Les rôles contrôlent qui peut évaluer et voir les évaluations. Par défaut, seuls les enseignants peuvent évaluer les messages, et les étudiants ne peuvent voir que les notes sur leurs propres messages.';
+$string['markdiscussionread'] = 'Marquer tous les messages de ce fil de discusisons comme lus.';
+$string['forumng:addinstance'] = 'Ajouter un nouveau ForumNG';
+$string['forumng:createattachment'] = 'Annexe';
+$string['forumng:deleteanypost'] = 'Supprimer chaque message';
+$string['forumng:editanypost'] = 'Editer chaque message';
+$string['forumng:managesubscriptions'] = 'Gérer les abonnements';
+$string['forumng:movediscussions'] = 'Déplacer les discussions';
+$string['forumng:rate'] = 'Evaluer les messages';
+$string['forumng:grade'] = 'Noter les messages';
+$string['forumng:replypost'] = 'Répondre aux messages';
+$string['forumng:splitdiscussions'] = 'Séparer la discussion';
+$string['forumng:startdiscussion'] = 'Démarrer une nouvelle discussion';
+$string['forumng:viewanyrating'] = 'Voir toutes les évaluations';
+$string['forumng:viewdiscussion'] = 'Voir les discussions';
+$string['forumng:viewrating'] = 'Voir les évaluations de ses propores messages';
+$string['forumng:viewsubscribers'] = 'Voir les abonnés';
+$string['forumng:copydiscussion'] = 'Copier la discussion';
+$string['forumng:forwardposts'] = 'Transférer le(s) message(s) par courriel';
+$string['pluginadministration'] = 'Administration ForumNG';
+$string['modulename'] = 'ForumNG';
+$string['pluginname'] = 'ForumNG';
+$string['modulenameplural'] = 'ForumsNG';
+$string['forbidattachments'] = 'Annexe impossible';
+$string['configenablerssfeeds'] = 'Cette option permet l\'activation des flux RSS pour tous les forums. Il est en outre nécessaire d\'activer manuellement les flux RSS dans les réglages de chaque forum.';
+$string['allowsubscribe'] = 'Abonnement facultatif';
+$string['initialsubscribe'] = 'Abonnement automatique';
+$string['perforumoption'] = 'A configurer séparément pour chaque forum';
+$string['configsubscription'] = 'Configuration des options de notification par courriel sur tous les forums du site.';
+$string['feedtype']='Flux RSS de cette activité';
+$string['feedtype_help']='Cette option vous permet d\'activer le flux RSS de ce forum.<br>Vous pouvez choisir entre deux types de flux RSS :<br>Discussions : le flux généré comprendra les nouvelles discussions du forum avec leur message initial.<br>Messages : le flux généré comprendra tous les nouveaux messages postés dans le forum..';
+$string['configfeedtype']='Sélectionner l\'information à inclure dans tous les flux RSS du forum.';
+$string['feedtype_none']='Flux RSS désactivé';
+$string['feedtype_discussions']='Discussions';
+$string['feedtype_all_posts']='Messages';
+$string['permanentdeletion']='Supprimer définitivement les données obsolètes';
+$string['configpermanentdeletion']='Après cette période, les messages supprimés et les anciennes versions de messages édités seront définitivement effacés de la base de données.';
+$string['permanentdeletion_never']='Jamais (ne pas supprimer les données obsolètes)';
+$string['permanentdeletion_soon']='Dès que possible';
+$string['usebcc']='Envoyer un courriel en copie invisible (\'Cci\')';
+$string['configusebcc']='Laisser cette valeur à 0 pour utiliser les réglages par défaut de la messagerie Moodle (plus sûr).<br>Indiquez un chiffre (par exemple 50) pour regrouper les messages du forum avec l\'option \'copie invisible\' (\'Cci\') pour que Moodle envoie un courriel unique depuis votre serveur de messagerie à de nombreux utilisateur.<br>Au lieu d\'envoyer 50 fois 1 message aux 50 personnes, cela envoie 1 message aux 50 personnes en copie invisible.';
+$string['donotmailafter']='Ne pas envoyer de courriel après (heure(s))';
+$string['configdonotmailafter']='Pour éviter l\'envoi d\'un nombre trop important de messages si le cron de maintenance n\'a pas été exécuté récemment, le forum n\'enverra pas les courriels correspondants aux messages plus vieux que ce nombre d\'heures.';
+$string['re']='Re: {$a}';
+$string['discussionsunread']='Discussions (non lus)';
+$string['feeds'] = 'Flux RSS';
+$string['atom'] = 'Atom';
+$string['subscribe_confirm'] = 'Vous avez été abonné.';
+$string['unsubscribe_confirm'] = 'Vous avez été désabonné.';
+$string['subscribe_confirm_group'] = 'Vous avez été abonné au groupe.';
+$string['unsubscribe_confirm_group'] = 'Vous avez été désabonné du groupe.';
+$string['subscribe_already'] = 'Vous êtes déjà abonné.';
+$string['subscribe_already_group'] = 'Vous êtes déjà abonné à ce groupe.';
+$string['unsubscribe_already'] = 'Vous êtes déjà désabonné.';
+$string['unsubscribe_already_group'] = 'Vous êtes déjà désabonné de ce groupe.';
+$string['subscription_initially_subscribed'] = 'Abonnement automatique';
+$string['subscription_not_permitted'] = 'Abonnement désactivé';
+$string['feeditems'] = 'Nombre d\'articles RSS récents';
+$string['feeditems_help'] = 'Nombre d\'articles inclus dans le flux Atom/RSS. Si ce paramètre est réglé trop bas, les utilisateurs qui ne vérifient pas souvent le flux pourraient manquer des messages.';
+$string['configfeeditems'] = 'Nombre de messages récents inclus dans un flux.';
+$string['limitposts'] = 'Nombre maximal de messages';
+$string['enablelimit'] = 'Nombre maximal de messages par utilisateur';
+$string['enablelimit_help'] = 'Ce réglage définit le nombre maximal de messages qu\'un participant peut poster durant une période donnée. Les utilisateurs ayant la capacité <tt>mod/forumng:ignorethrottling</tt> ne sont pas touchés par les limites de message.<br>Quand un utilisateur n\'est autorisé qu\'à  3 messages par exemple, un avertissement s\'affiche sous la forme d\'un message. Après la limite, le système affiche le moement auquel il sera en mesure de poster à nouveau un message dans le forum.';
+$string['completiondiscussions'] = 'L\'utilisateur doit créer une discussion :';
+$string['completiondiscussionsgroup'] = 'Nombre de discussions requises :';
+$string['completiondiscussionsgroup_help'] = 'Si l\'option est activée, le forum sera marqué complet pour un utilisateur une fois qu\'il a le nombre requis de nouvelles discussions (et a rempli une autre condition).';
+$string['completionposts'] = 'L\'utilisateur doit lancer des discussions ou poster des messages :';
+$string['completionpostsgroup'] = 'Nombre de discussions/messages requis';
+$string['completionpostsgroup_help'] = 'Si l\'option est activée, le forum sera marqué complet pour un utilisateur une fois qu\'il a le nombre requis de discussions et réponses, en comptant chaque discussion ou réponse pour 1 (et a rempli toutes les autres conditions).';
+$string['completionreplies'] = 'L\'utilisateur doit répondre à des messages :';
+$string['completionrepliesgroup'] = 'Nombre de réponses requises :';
+$string['completionrepliesgroup_help'] = 'Si l\'option est activée, le forum sera marqué complet pour un utilisateur une fois qu\'il a le nombre requis de réponses à des discussions existantes (et a rempli toutes les autres conditions).';
+$string['ratingfrom'] = 'Evaluer les éléments à partir du ';
+$string['ratinguntil'] = 'Evaluer les éléments jusqu\'au ';
+$string['postingfrom'] = 'Poster des messages à partir du ';
+$string['postinguntil'] = 'Poster des messages jusqu\'au ';
+$string['postsper'] = 'Messages sur';
+$string['alt_discussion_deleted'] = 'Discussion supprimée';
+$string['alt_discussion_timeout'] = 'Actuellement invisible pour les utilisateurs (limite de temps)';
+$string['alt_discussion_sticky'] = 'Cette discussion apparaît toujours en tête de liste';
+$string['alt_discussion_locked'] = 'Discussion en lecture seule';
+$string['subscribestate_partiallysubscribed'] = 'Vous recevez des messages provenant de certaines discussions de ce forum par courriel à {$a}.';
+$string['subscribestate_partiallysubscribed_thisgroup'] = 'Vous recevez des messages provenant de certaines discussions de ce groupe  par courriel à {$a}.';
+$string['subscribestate_groups_partiallysubscribed'] = 'Vous recevez des messages provenant de certains groupes de ce forum par courriel à {$a}.';
+$string['subscribestate_subscribed'] = 'Vous recevez des messages de ce forum par courriel à {$a}.';
+$string['subscribestate_subscribed_thisgroup'] = 'Vous recevez des messages de ce groupe par courriel à {$a}.';
+$string['subscribestate_subscribed_notinallgroup'] = 'Cliquer sur &lsquo;Désabonnement&rsquo; pour se désabonner de ce forum.';
+$string['subscribestate_unsubscribed'] = 'Vous ne recevez pas les messages de ce forum par courriel. Si vous le souhaitez, cliquez sur &lsquo;S\'abonner&rsquo;.';
+$string['subscribestate_unsubscribed_thisgroup'] = 'Vous ne recevez pas les messages de ce groupe par courriel. Si vous le souhaitez, cliquez sur &lsquo;S\'abonner&rsquo;';
+$string['subscribestate_not_permitted'] = 'Ce forum ne permet pas l\'abonnement par courriel.';
+$string['subscribestate_forced'] = '(Le désabonnement n\'est pas possible.)';
+$string['subscribestate_no_access'] = 'Vous n\'avez pas la possibilité de vous abonner par courriel à ce forum.';
+$string['subscribestate_discussionsubscribed'] = 'Vous recevez tous les messages de cette discussion par courriel à {$a}.';
+$string['subscribestate_discussionunsubscribed'] = 'Vous ne recevez pas les messages de cette discussion par courriel. Si vous le souhaitez, cliquez sur &lsquo;S\'abonner&rsquo;.';
+$string['replytopost'] = 'Répondre au message : {$a}';
+$string['editpost'] = 'Editer le message : {$a}';
+$string['editdiscussionoptions'] = 'Editer les options de la discussions : {$a}';
+$string['optionalsubject'] = 'Changer le sujet (facultatif)';
+$string['attachmentnum'] = 'Annexe {$a}';
+$string['sticky'] = 'Option de mise en avant de la discussion :';
+$string['sticky_no'] = 'La discussion est triée normalement';
+$string['sticky_yes'] = 'La discussion est palcée en tête de liste';
+$string['timestart'] = 'Afficher à partir de';
+$string['timeend'] = 'Afficher jusqu\'à (inclus)';
+$string['date_asc'] = 'les plus anciens';
+$string['date_desc'] = 'les plus récents';
+$string['numeric_asc'] = 'les plus nombreux';
+$string['numeric_desc'] = 'les moins nombreux';
+$string['sorted'] = 'trié par {$a}';
+$string['text_asc'] = 'A-Z';
+$string['text_desc'] = 'Z-A';
+$string['sortby'] = 'Trier par {$a}';
+$string['rate'] = 'Evaluation';
+$string['expand'] = 'Développer <span class=\'accesshide\'> le message {$a}</span>';
+$string['postnum'] = 'Message {$a->num}';
+$string['postnumreply'] = 'Message {$a->num}{$a->info} en réponse à {$a->parent}';
+$string['postinfo_short'] = 'Résumé';
+$string['postinfo_unread'] = 'Non lu';
+$string['postinfo_deleted'] = 'Effacé';
+$string['split'] = 'Séparer<span class=\'accesshide\'> le message {$a}</span>';
+$string['reply'] = 'Répondre<span class=\'accesshide\'> au message {$a}</span>';
+$string['directlink'] = 'Permalien<span class=\'accesshide\'> du message {$a}</span>';
+$string['directlinktitle'] = 'Lien direct vers ce message';
+$string['edit'] = 'Editer<span class=\'accesshide\'> le message {$a}</span>';
+$string['delete'] = 'Effacer<span class=\'accesshide\'> le message {$a}</span>';
+$string['undelete'] = 'Restaurer<span class=\'accesshide\'> le message {$a}</span>';
+$string['deletedpost'] = 'Message effacé.';
+$string['deletedbyauthor'] = 'Ce message a été supprimé par l\'auteur le {$a}.';
+$string['deletedbymoderator'] = 'Ce message a été supprimé par un modérateur le {$a}.';
+$string['deletedbyuser'] = 'Ce message a été supprimé par {$a->user} le {$a->date}.';
+$string['expandall'] = 'Développer tous les messages';
+$string['deletepost'] = 'Message effacé : {$a}';
+$string['undeletepost'] = 'Message restauré : {$a}';
+$string['confirmdelete'] = 'Etes-vous sûr de vouloir supprimer ce message ?';
+$string['confirmdelete_notdiscussion'] = 'La suppression de ce message ne supprimera pas la discussion. Si vous souhaitez supprimer la discussion, utilisez les commandes au bas de la page de discussion.';
+$string['confirmundelete'] = 'Etes-vous sûr de vouloir restaurer ce message ?';
+$string['splitpost'] = 'Séparer le message : {$a}';
+$string['splitpostbutton'] = 'Séparer le message';
+$string['splitinfo'] = 'Séparer ce message le supprimera, ainsi que toutes les réponses, de cette discussion. Une nouvelle discussion sera alors créée (comme illustré ci-dessous)';
+$string['editbyself'] = 'Modifié par l\'auteur le {$a}';
+$string['editbyother'] = 'Modifié par {$a->name} le {$a->date}';
+$string['history'] = 'Historique';
+$string['historypage'] = 'Historique : {$a}';
+$string['currentpost'] = 'Version actuelle du message';
+$string['olderversions'] = 'Anciennes versions (la plus récente en premier)';
+$string['deleteemailpostbutton'] = 'Supprimer et notifier';
+$string['deleteandemail'] = 'Supprimer et notifier l\'auteur par courriel';
+$string['emailmessage'] = 'Message';
+$string['emailcontentplain'] = 'Ceci est une notification pour vous informer que votre message sur le forum avec les détails suivants a été supprimé par \'{$a->firstname} {$a->lastname}\':
+
+Sujet : {$a->subject}
+Forum : {$a->forum}
+Espace de cours : {$a->course}
+
+Cliquez sur {$a->deleteurl} pour voir la discussion';
+$string['emailcontenthtml'] = 'Ceci est une notification pour vous informer que votre message sur le forum avec les détails suivants a été supprimé par \'{$a->firstname} {$a->lastname}\':<br />
+<br />
+Sujet : {$a->subject}<br />
+Forum : {$a->forum}<br />
+Espace de cours : {$a->course}<br/>
+<br/>
+<a href="{$a->deleteurl}" title="voir le message supprimé">Voir la discussion</a>';
+$string['copytoself'] = 'S\'envoyer une copie';
+$string['deletedforumpost'] = 'Votre message a été supprimé';
+$string['emailerror'] = 'Il y a eu une erreur lors de l\envoi du courriel';
+$string['sendanddelete'] = 'Envoyer et effacer';
+$string['deletepostbutton'] = 'Effacer';
+$string['undeletepostbutton'] = 'Restaurer le message';
+$string['averagerating'] = 'Moyenne des évaluations : {$a->avg} (de {$a->num})';
+$string['yourrating'] = 'Votre évaluation :';
+$string['ratingthreshold'] = 'Nombre d\'évaluations requises avant affichage de la note';
+$string['ratingthreshold_help'] = 'Si vous définissez cette option à 3, alors la note pour un message ne sera pas visible avant que 3 personnes n\'évaluent le message.<br>Cela peut aider à réduire l\'effet d\'une note unique sur la moyenne.';
+$string['saveallratings'] = 'Enregistrer toutes les évaluations';
+$string['js_nratings'] = '(# évaluations)';
+$string['js_nratings1'] = '(1 évaluation)';
+$string['js_publicrating'] = 'Moyenne des évaluations : #.';
+$string['js_nopublicrating'] = 'Pas encore évalué.';
+$string['js_userrating'] = 'Votre évaluation : #.';
+$string['js_nouserrating'] = 'Vous n\'avez pas encore évalué cet élément.';
+$string['js_outof'] = '(Hors de #)';
+$string['js_clicktosetrating'] = 'Cliquer pour attribuer # étoiles à ce message.';
+$string['js_clicktosetrating1'] = 'Cliquer pour attribuer 1 étoile à ce message.';
+$string['js_clicktoclearrating'] = 'Cliquer pour supprimer votre évaluation.';
+$string['undelete'] = 'Restaurer';
+$string['exportword'] = 'Exportation au format Word';
+$string['exportedtitle'] = 'Discussions &lsquo;{$a->subject}&rsquo; du forum exportée le {$a->date}';
+$string['set'] = 'Réglages';
+$string['showusername'] = 'Afficher les noms d\'utilisateurs';
+$string['configshowusername'] = 'Inclut les noms d\'utilisateur dans les rapports liés au forum (peut être vu par les modérateurs mais pas les étudiants)';
+$string['showidnumber'] = 'Afficher les numéros d\'identification';
+$string['configshowidnumber'] = 'Inclut les numéros d\'identification dans les rapports liés au forum (peut être vu par les modérateurs mais pas par les étudiants)';
+$string['hidelater'] = 'Ne plus montrer ces instructions';
+$string['existingattachments'] = 'Annexe(s) existante(s)';
+$string['deleteattachments'] = 'Supprimer l\'annexe existante';
+$string['attachments'] = 'Annexes';
+$string['attachment'] = 'Annexe';
+$string['choosefile'] = '1. Choisir le fichier';
+$string['clicktoadd'] = '2. Ajouter';
+$string['readdata'] = 'Lecture des données';
+$string['search_update_count'] = '{$a} forums à traiter.';
+$string['searchthisforum'] = 'Rechercher dans ce forum';
+$string['searchthisforumlink'] = 'Rechercher dans ce forum';
+$string['viewsubscribers'] = 'Voir les abonnés';
+$string['inreplyto'] = 'En réponse à';
+$string['forumng:view'] = 'Voir les forums';
+$string['forumng:ignorepostlimits'] = 'Ignorer la limitation du nombre de messages';
+$string['forumng:mailnow'] = 'Notifier par courriel avant la fin du délai d\'édition';
+$string['forumng:setimportant'] = 'Marquer les messages comme <strong>Important</strong>';
+$string['forumng:managediscussions'] = 'Gérer les options de la discussion';
+$string['forumng:viewallposts'] = 'Voir les messgaes cachés et effacés';
+$string['forumng:viewreadinfo'] = 'Voir qui a lu un message';
+$string['editlimited'] = 'Attention : enregistrez toutes les modifications apportées à ce message avant {$a}. Après, toute modification vous sera impossible.';
+$string['badbrowser'] = '<h3>Les fonctionnalités du forum sont réduites</h3>&nbsp;<p>Vous utilisez {$a}. Si vous souhaitez enrichir l\'expérience dans l\'utilisation des forums, vous devez mettre à jour votre version d\'<a href=\'http://www.microsoft.com/windows/internet-explorer/\'>Internet Explorer</a> ou <a href=\'http://www.mozilla.com/firefox/\'>de Firefox</a>.</p>';
+$string['nosubscribersgroup'] = 'Personne du groupe n\'est encore abonné à ce forum.';
+$string['hasunreadposts'] = '(Messages non lus)';
+$string['postdiscussion'] = 'Envoyer';
+$string['postreply'] = 'Envoyer une réponse';
+$string['confirmbulkunsubscribe'] = 'Etes-vous sûr de vouloir désinscrire les utilisateurs sélectionnés dans la liste ci-dessous (l\'opération ne peut être annulée.)';
+$string['savedraft'] = 'Enregistrer comme brouillon';
+$string['draftexists'] = 'Une version de ce brouillon a été sauvegardé le {$a}. Si vous ne terminez pas la rédaction de ce message maintenant, vous le retrouverez en tant que brouillon sur la page principale de ce forum.';
+$string['draft_inreplyto'] = '(en réponse à {$a})';
+$string['draft_newdiscussion'] = '(nouvelle discussion)';
+$string['drafts'] = 'Brouillons inachevés';
+$string['deletedraft'] = 'Supprimer le brouillon';
+$string['confirmdeletedraft'] = 'Etes-vous sûr de vouloir supprimer les brouillons de la liste ci-dessous ?';
+$string['draft'] = 'Brouillon';
+$string['collapseall'] = 'Réduire tous les messages';
+$string['selectlabel'] = 'Sélectionner le message {$a}';
+$string['selectintro'] = 'Cocher chaque message que vous souhaitez inclure dans la sélection. Lorsque que votre sélection est terminée, cliquer sur \'Confirmer la sélection\' en bas de la page.';
+$string['confirmselection'] = 'Confirmer la sélection';
+$string['selectedposts'] = 'Messages sélectionnés';
+$string['selectorall'] = 'Voulez-vous inclure la discussion complète ou seulement les messages sélectionnés ?';
+$string['selectoralldisc'] = 'Toutes les dicussions affichées';
+$string['selectorselecteddisc'] = 'Les discussions sélectionnées';
+$string['selectorselectdisc'] = 'Sélecionnez des discussions';
+$string['selectordiscall'] = 'Voulez-vous inclure toutes les discussions affichées sur cete page, ou en sélectionneer certaines?';
+$string['selectdiscintro'] = 'Cochez la case en face de chaque discussion que vous voulez inclure. Quand vous avez terminé, faites défiler jusqu\'au bas de la page et cliquez sur &lsquo;Confirmer la sélection&rsquo;.';
+$string['setimportant'] = 'Marquer ce message comme \'Important\'';//used by moderators, highlight important posts
+$string['important'] = 'Message important'; // alt text for important icon
+$string['flaggedposts'] = 'Messages marqués';
+$string['flaggedpostslink'] = '{$a} message(s) marqué(s) comme Important';
+$string['post'] = 'Message';
+$string['author'] = 'Auteur';
+$string['clearflag'] = 'Retirer le marqueur';
+$string['setflag'] = 'Marquer ce message pour une référence ultérieure';
+$string['flagon'] = 'Vous avez marqué ce message';
+$string['flagoff'] = 'Non marqué';
+$string['postby'] = '(par {$a})';
+$string['quotaleft_plural'] = 'Vous ne pouvez publier plus que <strong>{$a->posts}</strong> messages au cours de ces {$a->period}-ci.';
+$string['quotaleft_singular'] = 'Vous ne pouvez publier plus que <strong>{$a->posts}</strong> messages au cours de ce {$a->period}-ci.';
+$string['studyadvice_noyourquestions'] = 'Vous n\'avez pas encore commencé de discussion dans ce forum d\'apprentissage.';
+$string['studyadvice_noquestions'] = 'Personne n\'a commencé de discussion actuellement dans ce forum d\'apprentissage.';
+$string['jumpto'] = 'Aller à :';
+$string['jumpnext'] = 'Message non-lu suivant';
+$string['jumpprevious'] = 'Message non-lu précédent';
+$string['jumppreviousboth'] = 'Précédent';
+$string['skiptofirstunread'] = 'Passer au premier message non lu';
+$string['enableadvanced'] = 'Activer les fonctions avancées';
+$string['configenableadvanced'] = 'Cette option active les fonctionnalités avancées du forum qui peuvent être inutilement complexes pour l\'utilisation standard du forum.<br>Actuellement, il ne s\'agit que du partage de forum mais d\'autres fonctionnalités seront ajoutées par la suite.';
+$string['shared'] = 'Autoriser le partage de ce forum';
+$string['shared_help'] = 'Cochez cette case et définissez le numéro d\'identification dans le champ ci-dessous, afin de permettre le partage de ce forum.<br>Ce forum va devenir le forum d\'origine. Vous pouvez ensuite créer un ou plusieurs exemplaires de ce forum en choisissant <strong>Forum partagé existant</strong>, et en indiquant le même numéro d\'identification lors de la création de chaque copie.';
+$string['sharing'] = 'Partage de forum';
+$string['useshared'] = 'Utiliser un forum partagé existant';
+$string['useshared_help'] = 'Si vous voulez partager un forum existant, cochez cette case et indiquez le numéro d\'identification du forum d\'origine (qui doit autoriser le partage).<br>Lorsque cette option est activée, la plupart des autres options sur ce formulaire seront ignorées car vous n\'êtes pas vraiment dans la création d\'un nouveau forum, mais vous activez un lien vers un forum existant. La seule exception est la disponibilité et les options d\'achèvement (manuelle seulement).';
+$string['sharedinfo'] = 'Il s\'agit d\'un forum partagé. Les paramètres d\'accès ici présents ne sont pas partagés, et s\'appliquent exclusivement aux étudiants qui accèdent au forum partagé de ce cours. Si vous souhaitez éditer d\'autres paramètres pour le forum, merci <a href=\'{$a}\'> d\'éditer les paramètres du forum d\'origine.</a>.';
+$string['sharedviewinfooriginal'] = '<strong>Ce forum est partagé</strong> sous l\'identifiant <strong>{$a}</strong> pour une utilisation dans d\'autres cours.';
+$string['sharedviewinfonone'] = 'Il n\'est actuellement utilisé dans aucun autre cours.';
+$string['sharedviewinfolist'] = 'Il est utilisé dans le(s) cours suivant(s) : {$a}.';
+$string['sharedviewinfoclone'] = '<strong>Il s\'agit d\'un forum partagé</strong>. Le <a href=\'{$a->url}\'>forum d\'origine</a> se trouve dans le cours {$a->shortname}.';
+$string['jumpparent'] = 'Parent';
+$string['savetoportfolio'] = 'Sauvegarder dans "Mon dossier"';
+$string['savedposts_all'] = '{$a}';
+$string['savedposts_selected'] = '{$a} (messages sélectionnés)';
+$string['savedposts_one'] = '{$a->name}: {$a->subject}';
+$string['savedposts_all_tag'] = 'Discussion du forum';
+$string['savedposts_selected_tag'] = 'Messages du forum';
+$string['savedposts_one_tag'] = 'Message du forum';
+$string['savedposts_original'] = 'Source originale de la discussion';
+$string['savedtoportfolio'] = 'Les informations ont été sauvées dans "Mon dossier".';
+$string['offerconvert'] = 'Si vous voulez créer un nouveau ForumNG comme copie de l\'ancienne-version, veillez ne pas utiliser ce formulaire. Utilisez plutôt, <a href=\'{$a}\'>Convertir les forums.';
+$string['convert_title'] = 'Convertir les forums';
+$string['convert_info'] = 'La conversion peut fonctionner sur un ou plusieurs forums \'anciens\'; actuellement seuls les forums de type \'général\' sont supportés. Pour sélectionner plusieurs forums dans la liste, utiliser la touche Ctrl.';
+$string['convert_warning'] = '<p>Lorsque vous cliquez sur \'Convertir\', le forum sélectionné sera converti. <br>Tous les messages et discussions
+qu\'il contient seront traités, et cela peut prendre quelques minutes. Pendant la conversion les forums seront alors indisponibles.</p>
+<ul>
+<li>les anciens forums convertis seront cachés durant l\'exécution du processus de conversion. Cela vous garantit qu\'aucun nouveau message ne soit publié et \'exclus\' de la conversion</li>
+<li>les nouveaux forums en création restent cachés durant toute la durée de la conversion. Ils ne seront seulement révélés qu\'après la fin du processus.</li>
+</ul>';
+$string['convert_hide'] = 'Laisser les nouveaux forums créés invisibles';
+$string['convert_nodata'] = 'Ne pas inclure les données liées aux utilisateurs (messages, abonnements, etc.)';
+$string['convert_process_init'] = 'Création de la structure du forum...';
+$string['convert_process_state_done'] = 'Terminé.';
+$string['convert_process_show'] = 'Rendre le forum visible...';
+$string['convert_process_subscriptions_normal'] = 'Conversion des abonnements normaux...';
+$string['convert_process_subscriptions_initial'] = 'Conversion des abonnements initiaux...';
+$string['convert_process_discussions'] = 'Conversions des discussions...';
+$string['convert_process_dashboard'] = 'Conversion de vos préférences de tableaux de bord...';
+$string['convert_process_dashboard_done'] = 'Validé (OK {$a->yay}, Echec {$a->nay}).';
+$string['convert_process_assignments'] = 'Mise à jour de l\'attribution des rôles...';
+$string['convert_process_overrides'] = 'Mise à jour des dérogations des rôles...';
+$string['convert_process_search'] = 'Recalcul des données de recherche...';
+$string['convert_process_update_subscriptions'] = 'Conversion des abonnements de groupe...';
+$string['convert_process_complete'] = 'Conversion effectuée en {$a->seconds}s (voir {$a->link}).';
+$string['convert_newforum'] = 'Nouveau forum';
+$string['convert_noneselected'] = 'Aucun forum n\'est sélectionné pour la conversion ! Sélectionner un ou plusieurs forum(s).';
+$string['convert_noforums'] = 'Il n\'y aucun ancien forum attaché à ce cours à convertir.';
+$string['pastediscussion']='Coller la discussion';
+$string['switchto_simple_text']='La vue standard ne fonctionne pas toujours avec les outils d\'assistance technologique. Nous proposons aussi une vue simple qui permet l\'utilisation de toutes les fonctionnalités.';
+$string['switchto_standard_text']='Vous utilisez la vue simple pour ce forum, qui devrait mieux fonctionner avec la technologie d\'assistance.';
+$string['switchto_simple_link']='Basculer en vue simple.';
+$string['switchto_standard_link']='Basculer en vue standard.';
+$string['displayversion'] = 'Version de ForumNG : <strong>{$a}</strong>';
+// OU only
+$string['externaldashboardadd'] = 'Ajouter le forum au tableau de bord';
+$string['externaldashboardremove'] = 'Supprimer le forum du tableau de bord';
+// New error strings
+$string['error_fileexception'] = 'Une erreur de traitement de fichier s\'est produite. C\'est susceptible d\'être causé par un problème du système. Merci de réessayer plus tard.';
+$string['error_subscribeparams'] = 'Paramètre incorrect: nécessite un identifiant ou un cours associé.';
+$string['error_nopermission'] = 'Vous n\'êtes pas autorisé à effectuer cette demande.';
+$string['error_exception'] = 'Une erreur s\'est produite sur le forum. Veuillez réessayer plus tard ou effectuer une autre action.<div class=\'forumng-errormessage\'>Message d\'erreur : {$a}</div>';
+$string['error_cannotchangesubscription'] = 'Vous n\'êtes pas autorisé à vous abonner ou vous désabonner de ce forum.';
+$string['error_cannotchangediscussionsubscription'] = 'Vous n\'êtes pas autorisé à vous abonner ou vous désabonner à cette discussion.';
+$string['error_cannotchangegroupsubscription'] = 'Vous n\'êtes pas autorisé à vous abonner ou vous désabonner du groupe sélectionné.';
+$string['error_cannotsubscribetogroup'] = 'Vous n\'êtes pas autorisé à vous abonner au groupe sélectionné.';
+$string['error_cannotunsubscribefromgroup'] = 'Vous n\'êtes pas autorisé à vous désabonner du groupe sélectionné.';
+$string['error_invalidsubscriptionrequest'] = 'Votre demande d\'abonnement n\'est pas valide.';
+$string['error_unknownsort'] = 'Critère de tri inconnu.';
+$string['error_ratingthreshold'] = 'Le seuil doit être un nombre positif.';
+$string['error_duplicate'] = 'Vous avez déjà rédigé un message en utilisant le formulaire précédent. (Cette erreur apparaît parfois si vous cliquez deux fois sur le bouton d\'envoi du message. Dans ce cas, votre message est sauvegardé)';
+$string['edit_notcurrentpost'] = 'Vous ne pouvez pas éditer les messages supprimés ou les versions antérieures des messages.';
+$string['edit_timeout'] = 'Vous n\'êtes plus autorisé à éditer ce message; le temps requis pour l\'édition est épuisé.';
+$string['edit_notyours'] = 'Vous ne pouvez pas éditer le message d\'un autre utilisateur.';
+$string['edit_nopermission'] = 'Vous n\'êtes pas autorisé à éditer ce type de message.';
+$string['edit_readonly'] = 'Ce forum est en lecture seule, les messages ne peuvent être édités.';
+$string['edit_notdeleted'] = 'Vous ne pouvez pas restaurer un message qui n\'a pas été supprimé.';
+$string['edit_rootpost'] = 'Cette action ne peut pas s\'appliquer à un message qui débute une discussion.';
+$string['edit_locked'] = 'Cette discussion est actuellement verrouillée.';
+$string['edit_notlocked'] = 'Cette discussion n\'est pas verrouillée.';
+$string['edit_wronggroup'] = 'Vous ne pouvez pas effectuer de changements à vos messages en dehors de votre groupe.';
+$string['reply_notcurrentpost'] = 'Vous ne pouvez pas répondre aux messages supprimés ou aux versions antérieures de ce message.';
+$string['reply_nopermission'] = 'Vous ne disposez pas des droits nécessaires pour répondre.';
+$string['reply_readonly'] = 'Ce forum est en lecture seule, aucune réponses ne peuvent être ajoutées.';
+$string['reply_typelimit'] = 'En raison du format spécifique de ce forum, vous ne pouvez pas répondre à ce message.';
+$string['reply_wronggroup'] = 'Vous ne pouvez pas répondre aux messages de cette discussion, car vous n\'êtes pas dans le bon groupe.';
+$string['reply_postquota'] = 'Vous ne pouvez pas répondre actuellement aux messages car vous avez atteint la limite maximale d\'envoi.';
+$string['reply_missing'] = 'Vous ne pouvez pas répondre à ce message car il est introuvable.';
+$string['startdiscussion_nopermission'] = 'Vous n\'avez pas la possibilité de démarrer de nouvelle discussion ici.';
+$string['startdiscussion_groupaccess'] = 'Vous n\'avez pas la possibilité de démarrer de nouvelle discussion dans ce groupe.';
+$string['startdiscussion_postquota'] = 'Vous ne pouvez pas commencer de nouvelle discussion car vous avez atteint la limite d\envoi.';
+$string['error_markreadparams'] = 'Paramètre incorrect: nécessite un identifiant ou un cours.';
+$string['error_cannotmarkread'] = 'Vous n\'êtes pas autorisé marquer les discussions comme "lues" dans ce forum.';
+$string['error_cannotviewdiscussion'] = 'Vous n\'êtes pas autorisé a accéder à cette discussion.';
+$string['error_cannotmanagediscussion'] = 'Vous n\'avez pas la possibilité de gérer cette discussion.';
+$string['error_draftnotfound'] = 'Impossible de trouver le brouillon du message. Le brouillon est peut être déjà posté ou a été supprimé.';
+$string['jserr_load'] = 'Il y a eu une erreur lors du chargement de ce message.<br>Rechargez la page et essayez à nouveau.';
+$string['jserr_save'] = 'Il y a eu une erreur pendant la sauvegarde ce message.<br>Copiez le texte dans un autre programme afin de ne pas perdre son contenu, rechargez la page et essayez à nouveau.';
+$string['jserr_alter'] = 'Il y a eu une erreur endommageant le contenu de votre message. <br>Rechargez la page et essayez à nouveau.';
+$string['jserr_attachments'] = 'Il y avait une erreur de chargement de l\'annexe dans l\'éditeur.<br>Rechargez cette page et réessayez.';
+$string['rate_nopermission'] = 'Vous n\'avez pas la possibilité d\'évaluer ce message ({$a}).';
+$string['subscribers_nopermission'] = 'Vous n\'avez pas la possibilité de voir la liste des abonnés.';
+$string['feed_nopermission'] = 'Vous n\'avez pas la permission d\'accéder à ce fil.';
+$string['feed_notavailable'] = 'Ce fil n\'est pas disponible.';
+$string['crondebugdesc'] = 'Uniquement à des fins de test -- Cocher cette option pour inclure les données de débogage dans les rapports du cron';
+$string['crondebug'] = 'Données de débogage du cron';
+$string['unsubscribeselected'] = 'Désinscrire les utilisateurs sélectionnés';
+$string['unsubscribe_nopermission'] = 'Vous n\'avez pas l\'autorisation de désabonner les autres utilisateurs.';
+$string['draft_noedit'] = 'L\'option  "brouillon" ne peut être utilisée pendant l\'édition des messages.';
+$string['draft_mismatch'] = 'Une erreur s\'est produite pendant l\'accès au brouillon du message (il se peut que vous n\'en soyez pas l\'auteur, ou bien qu\'il ne fasse pas partie de la discussion en cours).';
+$string['draft_cannotreply'] = '<p>Il n\'est pas possible d\'ajouter une réponse pour le message faisant référence à. {$a}</p><p>Vous pouvez utiliser le bouton X à coté de ce brouillon sur la page principale du forum, pour voir le contenu complet de votre brouillon (vous pouvez alors le copier/coller à destination d\'un autre emplacement) et pouvoir le supprimer.</p>';
+$string['invalidemail'] = 'Cette adresse mail n\'est pas valide. Veuillez entrer une adresse mail unique.';
+$string['invalidemails'] = 'Cette adresse mail n\'est pas valide. Veuillez entrez une ou plusieurs adresses, séparées par des espaces ou des points-virgules.';
+$string['error_forwardemail'] = 'Il y a eu une erreur lors de l\'envoi du courriel à  <strong>{$a}</strong>. Le courriel n\'a pu être envoyé.';
+$string['alert_link'] = 'Signaler';
+$string['alert_linktitle'] = 'Marquer ce message comme inacceptable';
+$string['reportunacceptable'] = 'Courriel de contact pour le signalement de messages offensants';
+$string['reportingemail'] = 'Courriel de contact pour le signalement de messages offensants';
+$string['reportingemail_help'] = 'Si cette adresse mail est fournie, alors un lien "Signaler" apparaît à côté de chaque message. Les utilisateurs peuvent cliquer sur le lien pour rapporter des messages offensifs. Les informations seront envoyées à cette adresse.<br>Si cette adresse mail n\'est pas renseignée, la fonction de rapport ne sera pas disponible (à moins qu\'une adresse spécifique au niveau du site a été fournie).';
+$string['configreportunacceptable'] = 'Adresse mail pour le rapport des messages signalés comme offensants. Si aucune adresse e-mail n\'est renseignée, la fonction "Signaler" sera désactivée, à moins qu\'elle ne le soit au niveau d\'un forum.';
+$string['alert_info'] = 'La fonction "Signaler" permet d\'envoyer ce message au modérateur qui pourra juger de son contenu. <strong>Veuillez utiliser ce lien uniquement si vous pensez que le message enfreint les règles relatives à l\'utilisation du forum</strong>.';
+$string['alert_reasons'] = 'Raison du signalement';
+$string['alert_condition1'] = 'Contenu abusif';
+$string['alert_condition2'] = 'Contenu assimilé à du harcèlement moral';
+$string['alert_condition3'] = 'Contenu choquant (pornographie, ...)';
+$string['alert_condition4'] = 'Contenu calomnieux ou diffamatoire';
+$string['alert_condition5'] = 'Contenu en contradiction avec les droits d\'auteurs';
+$string['alert_condition6'] = 'Contenu sortant du cadre des règles du forum pour une autre raison';
+$string['alert_conditionmore'] = 'Informations complémentaires (facultatif)';
+$string['alert_reporterinfo'] = "<strong>Détails sur le rapporteur</strong>:";
+$string['alert_reporterdetail'] = '{$a->fullname} ({$a->username}; {$a->email}; {$a->ip})';
+$string['invalidalert'] = 'Vous devez préciser la raison pour laquelle vous avez signalé ce message.';
+$string['invalidalertcheckbox'] = 'Vous devez cocher au moins une case.';
+$string['alert_submit'] = "Envoyer le rapport";
+$string['error_sendalert'] = 'Une erreur s\'est produite lors de l\'envoi de votre rapport {$a}. Le rapport n\'a pas été envoyé.';
+$string['error_portfoliosave'] = 'Une erreur s\'est produite pendant la sauvegarde vers Mon dossier.';
+$string['alert_pagename'] = 'Signaler un message comme incorrect';
+$string['alert_emailsubject'] = 'Alerte F{$a->postid}: {$a->coursename} {$a->forumname}';
+$string['alert_emailpreface'] = 'Un message sur le forum a été signalé par {$a->fullname} ({$a->username},
+{$a->email}) {$a->url}';
+$string['alert_feedback'] = 'Votre rapport a été envoyé avec succès. Il va être traité par un membre de l\'équipe.';
+$string['alert_emailappendix'] = 'Vous recevez cette notification suite a une utilisation de votre adresse mail sur le forumNG pour signaler un courriel inadapté.';
+$string['alert_note'] = 'Note : Ce courriel a également été envoyé à {$a}';
+$string['alert_notcurrentpost'] = 'Ce message a déjà été supprimé.';
+$string['alert_turnedoff'] = 'La fonction "Signaler" n\'est pas disponible.';
+$string['move_notselected'] = 'Vous devez sélectionner un forum cible dans le menu déroulant, avant de cliquer sur le bouton \'déplacer\'.';
+$string['partialsubscribed'] = 'Partiel';
+$string['move_nogroups'] = 'Vous n\'avez pas accès à certains groupes dans le forum sélectionné.';
+$string['beforestartdate'] = 'Vous pouvez consulter les messages de ce forum, mais ne pouvez publier vos propres messages. L\'ouverture de ce forum aux publications est prévu le {$a}.';
+$string['beforestartdatecapable'] = 'Les étudiants peuvent consulter tous les messages de ce forum, mais ne pourront envoyer leur propres publications jusqu\'au : {$a}. Vous avez accès aux messages envoyés avant cette date.';
+$string['beforeenddate'] = 'Ce forum est fermé, pour recevoir les nouveaux messages sur {$a}.';
+$string['beforeenddatecapable'] = 'Ce forum ferme pour les nouveaux messages d\'utilisateur le {$a}.';
+$string['afterenddate'] = 'Vous pouvez lire tous les messages de ce forum, mais vous ne pouvez pas publier de messages. Ce forum est verrouillé depuis le {$a}.';
+$string['afterenddatecapable'] = 'Les étudiants peuvent lire tous les messages de ce forum mais ne peuvent plus publier de messages depuis la fermeture du forum le {$a}. Vous avez toujours accès aux messages publiés.';
+$string['removeolddiscussions'] = 'Nettoyer le forum';
+$string['removeolddiscussions_help'] = 'Le système peut supprimer automatiquement les discussions si elles n\'ont pas eu de nouvelles réponses pendant un certain laps de temps.';
+$string['removeolddiscussionsafter'] = 'Supprimer les discussions après (mois)';
+$string['removeolddiscussionsdefault'] = 'Ne jamais supprimer';
+$string['withremoveddiscussions'] = 'Déplacer les discussions vers';
+$string['automaticallylock'] = 'Verrouiller automatiquement';
+$string['onemonth'] = '1 mois';
+$string['withremoveddiscussions_help'] = 'Vous avez 2 options pour le traitement des discussions supprimées :
+<ul><li>Les supprimer définitivement (contrairement à la suppression standard, cette action ne permet pas de restauration).
+Cette option permet d\'économiser de l\'espace dans la base de données.</li>
+<li>Les déplacer vers un autre forum (par exemple un forum d\'archives.
+Vous pouvez sélectinoner n\'importe quel forum du même espace de cours.</li></ul>';
+$string['deletepermanently'] = 'Supprimer définitivement';
+$string['housekeepingstarthour']='Heure de début de l\'archivage';
+$string['housekeepingstophour']='Heure de fin d\'archivage';
+$string['confighousekeepingstarthour']='Les tâches d\'archivage, telle que la suppression des anciennes discussions, commencera chaque jour à l\'heure définie ici.';
+$string['confighousekeepingstophour']='La tâche d\'archivage s\'arrêtera à l\'heure définie ici.';
+$string['invalidforum']='Ce forum n\'existe plus';
+$string['errorinvalidforum'] = 'Le forum cible pour l\'archivage d\'anciennes discussions n\'existe plus. Veuillez choisir un autre forum.';
+$string['archive_errorgrouping']='Le forum où doivent être déplacées les discussions a un réglage de groupes différent. Merci de modifier les paramètres de l\'option <strong>Nettoyer le forum</strong>.';
+$string['archive_errortargetforum']='Le forum où doivent être déplacées les discussions n\'existe plus. Merci de modifier les paramètres de l\'option <strong>Nettoyer le forum</strong>.';
+$string['error_notwhensharing'] = 'Cette option n\'est pas disponible lorsque le forum est partagé.';
+$string['error_sharingrequiresidnumber'] = 'Lorsque vous partagez ce forum, vous devez entrer un numéro d\'identification unique pour tout le site.';
+$string['error_sharingidnumbernotfound'] = 'Lorsque vous utilisez un forum partagé, vous devez entrer un numéro d\'identification qui corresponde exactement à un numéro précédemment entré dans un forum partagé.';
+$string['error_sharinginuse'] = 'Vous ne pouvez pas désactiver le partage de ce forum car il y a déjà des forums qui le partagent. Si nécessaire, supprimer d\'abord ces autres forums.';
+$string['error_nosharedforum'] = 'Forum <strong>{$a->name}</strong> : impossible de le restaurer en tant que forum partagé ; numéro d\'identification {$a->idnumber} introuvable. Le forum a été restauré en tant que forum indépendant.';
+$string['advancedsearch'] = 'Recherche avancée';
+$string['words'] = 'Rechercher par mots';
+$string['words_help'] = 'Tapez le terme recherché ici.
+
+Utilisez les guillemets pour rechercher des expressions exactes.
+
+Pour exclure un mot, insérez un trait d\'union immédiatement avant celui-ci.
+
+Par exemple: la recherche <tt> picasso -sculpture "premières œuvres" </ tt> renverra des résultats pour le terme "Picasso" ou l\'expression "premières œuvres" mais exclura les éléments contenant le terme "sculpture".
+
+Si vous laissez cette zone vide, tous les messages qui correspondent à l\'auteur et/ou à des critères de date seront retournés, indépendamment de leur contenu.';
+$string['authorname'] = 'Nom de l\'auteur';
+$string['authorname_help'] = 'Vous pouvez taper un prénom (Michel), un nom de famille (Dupont), le nom complet (Michel Dupont), ou la première partie de l\'un de ces éléments (Mic, dup, Michel D). La recherches est insensible à la casse.
+
+Vous pouvez également taper un nom d\'utilisateur (dépend de votre système d\'authentification et de création de compte).
+
+Si vous laissez ce champ vide, les messages de tous les auteurs seront inclus.';
+$string['daterangefrom'] = 'Date à partir de';
+$string['daterangefrom_help'] = 'Utilisez les dates pour restreindre votre recherche pour inclure uniquement les messages dans la période donnée.
+
+Si vous ne spécifiez pas les dates, les messages de n\'importe quelle date seront inclus dans les résultats.';
+$string['daterangeto'] = 'Date jusqu\'à';
+$string['searchresults'] = 'Résultats de la recherche : <strong>{$a}</strong>';
+$string['searchtime'] = 'Rechercher par date : {$a} s';
+$string['nothingfound'] = 'Aucun résultat ne correspond à votre recherche. Veuillez tenter une autre requête.';
+$string['previousresults'] = 'Retour au résultats {$a}';
+$string['nextresults'] = 'Plus de résultats';
+$string['author'] = ' auteur : "{$a}"';
+$string['from'] = ' de : {$a}';
+$string['to'] = ' jusqu\'à : {$a}';
+$string['inappropriatedateortime'] = 'La <strong>ériode de fin</strong> est ultérieure à la date du jour. Veuillez vérifier et essayer à nouveau.';
+$string['daterangemismatch'] = 'Erreur de période : la <strong>Date à partir de</strong> est postérieure à la <strong>Date jusqu\'à</strong>.';
+$string['nosearchcriteria'] = 'Ce critère de recherche n\'est pas valide : veuillez utiliser un ou plusieurs des critères ci-dessous et réessayez.';
+$string['searchallforums'] = 'Rechercher dans tous les forums';
+$string['replies'] = 'Réponses';
+$string['newdiscussion'] = 'Nouvelle discussion';
+$string['nothingtodisplay'] = '<h3>Rien à afficher</h3>';
+$string['re'] = 'Re: {$a}';
+// pas sûr
+$string['error_feedlogin'] = 'Erreur chargement de l\'utilisateur';
+//
+$string['error_makebig'] = 'Le cours ne contient que {$a->users} utilisateurs et vous avez demandé à {$a->readusers} lecteurs de lire chaque discussion. Merci de créer ou d\'inscrire plus d\'utilisateurs.';
+$string['error_system'] = 'Une erreur système est survenue : {{$a}}';
+$string['modulename_help'] = 'ForumNG est un remplaçant du forum standard de Moodle avec la plupart des caractéristiques du forum standard, mais contenant également beaucoup d\'autres options et une autre interface utilisateur.
+
+NG signifie \'Nouvelle Génération\'.';
+$string['mailnow_help'] = 'Envoyer votre message par courriel aux abonnés plus rapidement.
+
+Sauf si vous choisissez cette option, le système attend pendant un certain temps avant d\'envoyer le message de telle sorte que toutes les modifications que vous pourriez faire peuvent être inclus dans le courriel.';
+$string['displayperiod_help'] = 'Vous pouvez masquer cette discussion aux étudiants jusqu\'à, ou à partir, d\'une
+certaine date.
+
+Les étudiants ne voient pas la discussion masquée. Pour les modérateurs, la liste de discussion est affichée en gris avec l\'icône de l\'horloge.';
+$string['sticky_help'] = 'Cette option permet de placer la discussion en tête de la liste, même si d\'autres discussions sont créées après.
+
+Les discussions mises en tête de liste sont affichées avec une icône de flèche pointant vers le haut. Il peut y avoir plusieurs discussions mises en tête de liste.';
+$string['errorfindinglastpost'] = 'Erreur de calcul pour le dernier message (incohérence de la base de données ?)';
+$string['drafts_help'] = 'Lorsque vous enregistrer un brouillon, il apparaît dans cette liste. Cliquez sur le brouillon pour reprendre le travail.
+
+Si vous souhaitez supprimer le brouillon, cliquez sur l\'icône de suppression. il y aura un message de confirmation.
+
+Dans certains cas, il peut ne pas être possible de continuer votre brouillon (par exemple si elle est en réponse à une discussion qui a depuis été supprimée). Dans cette situation, vous pouvez récupérer le contenu de votre brouillon en cliquant sur l\'icône de suppression.';
+$string['flaggedposts_help'] = 'Les messages marqués d\'un drapeau apparaissent dans cette liste. Pour accéder à un message marqué,
+cliquez dessus.
+
+Pour enlever le drapeau d\'un message, cliquez sur l\'icône du drapeau (ici ou dans le message).';
+
+$string['searchthisforum_help'] = 'Tapez le terme recherché ici.
+
+Utilisez les guillemets pour rechercher des expressions exactes.
+
+Pour exclure un mot, insérez un trait d\'union immédiatement avant celui-ci.
+
+Par exemple: la recherche <tt> picasso -sculpture "premières œuvres" </ tt> renverra des résultats pour le terme "Picasso" ou l\'expression "premières œuvres" mais exclura les éléments contenant le terme "sculpture".
+
+Si vous laissez cette zone vide, tous les messages qui correspondent à l\'auteur et/ou à des critères de date seront retournés, indépendamment de leur contenu.';
+$string['searchthisforumlink_help'] = 'Tapez le terme recherché ici.
+
+Utilisez les guillemets pour rechercher des expressions exactes.
+
+Pour exclure un mot, insérez un trait d\'union immédiatement avant celui-ci.
+
+Par exemple: la recherche <tt> picasso -sculpture "premières œuvres" </ tt> renverra des résultats pour le terme "Picasso" ou l\'expression "premières œuvres" mais exclura les éléments contenant le terme "sculpture".
+
+Si vous laissez cette zone vide, tous les messages qui correspondent à l\'auteur et/ou à des critères de date seront retournés, indépendamment de leur contenu.';
+
+$string['notext'] = '(pas de texte)';
+$string['grade'] = 'Note';
+$string['gradingscale'] = 'Echelle de notation';
+
+$string['lockedtitle'] = 'Cette discussion est maintenant fermée';
+$string['autolockedmessage'] = 'Cette discussion a été fermée automatiquement car le temps maximum d\'ouverture auorisé est écoulé.';
+$string['alert_intro'] = 'Vous pouvez utiliser le lien d\'alerte pour attirer l\'attention d\'un modérateur sur un message.';
diff --git a/mod/forumng/lang/he/forumng.php b/mod/forumng/lang/he/forumng.php
new file mode 100644
index 0000000..5774e8e
--- /dev/null
+++ b/mod/forumng/lang/he/forumng.php
@@ -0,0 +1,534 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Local language pack from http://moodlemagic.info/moodle
+ *
+ * @package    mod
+ * @subpackage forumng
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$string['addanewdiscussion'] = 'התחילו דיון חדש';
+$string['advancedsearch'] = 'חיפוש מתקדם';
+$string['afterenddate'] = 'לא ניתן לפרסם פרסומים חדשים בקבוצת־דיון זו,
+אלא רק לקרוא פרסומים שכבר קיימים. קבוצת־דיון זו חסומה לשליחת פרסומים {$a}.';
+$string['afterenddatecapable'] = 'המשתמשים יכולים לקרוא את כל הפרסומים שבתוך
+קבוצת־הדיון, אך לא לשלוח פרסומים חדשים,
+מרגע סגירת קבוצת־הדיון ב: {$a}.
+לעומת זאת,למנהל הקבוצת־דיון יש עדיין
+ גישה לשליחת פרסומים.';
+$string['alert_condition1'] = 'הערה פוגעת';
+$string['alert_condition2'] = 'הערה זו היא הטרדה';
+$string['alert_condition3'] = 'הערה זו מכילה תוכן מגונה כגון פורנוגרפיה';
+$string['alert_condition4'] = 'הערה זו היא השמצה או הוצאת־דיבה';
+$string['alert_condition5'] = 'הערה זו היא הפרת זכויות יוצרים';
+$string['alert_condition6'] = 'הערה זו הנוגדת את חוקי הכתיבה בקבוצת־דיון זו.';
+$string['alert_conditionmore'] = 'מידע אחר';
+$string['alert_emailappendix'] = 'אתם מקבלים הודעת דוא"ל זו, היות וכתובת
+הדוא"ל שלכם שמישה ב- ForumNG  ,
+לשם דיווח על דוא"ל שאינו מקובל/קביל.';
+$string['alert_emailpreface'] = 'פרסום בקבוצת־הדיון דווח על־ידי {$a->fullname} ({$a->username}, {$a->email}) {$a->url}';
+$string['alert_emailsubject'] = 'התראה מקבוצת־דיון - קוד פרסום: {$a->postid}: {$a->coursename} {$a->forumname}';
+$string['alert_feedback'] = 'הודעתכם (תלונתכם) נשלחה בהצלחה.
+אחד מחברי הצוות יחקור תלונה זו.';
+$string['alert_info'] = 'מנגנון "התראה", שולח את ההודעה המסוימת
+לאחד מחברי הצוות של הנהלת הפורום לשם חקירת
+תוכנה.
+אנא השתמשו במנגנון זה רק אם  לדעתכם
+הפרסום המסוים, הכן מפר את החוקים .';
+$string['alert_link'] = 'הערה פוגעת';
+$string['alert_linktitle'] = 'דווחו על פרסום זה כבלתי קביל';
+$string['alert_notcurrentpost'] = 'פרסום זה כבר נמחק';
+$string['alert_note'] = 'שימו לב: גם דוא"ל זה נשלח ל {$a}';
+$string['alert_pagename'] = 'דווחו על פרסום כבלתי קביל';
+$string['alert_reasons'] = 'סיבות להתראה';
+$string['alert_reporterdetail'] = '{$a->fullname} ({$a->username}; {$a->email}; {$a->ip})';
+$string['alert_reporterinfo'] = '<strong>פרטיי המדווח</strong>:';
+$string['alert_submit'] = 'שליחת התראה';
+$string['alert_turnedoff'] = 'מנגנון ההתראה אינו זמין לשימוש.';
+$string['allowsubscribe'] = 'משתמשים יכולים להרשם לקבוצות-דיון זו כמנויים';
+$string['allsubscribe'] = 'הירשמו לכל הקבוצות־הדיון';
+$string['allunsubscribe'] = 'ביטול הרשמה מכל קבוצות־הדיון';
+$string['alt_discussion_deleted'] = 'מחיקת דיון';
+$string['alt_discussion_locked'] = 'הדיון זמין לקריאה בלבד';
+$string['alt_discussion_sticky'] = 'דיון זה, תמיד מופיע בראש הרשימה.';
+$string['alt_discussion_timeout'] = 'דיון זה לא נראה כרגע למשתמשים (מגבלת זמן)';
+$string['archive_errorgrouping'] = 'לקבוצת־דיון המאפשרות הזנה של דיונים ישנים, קיימות הגדרות ניהול "קבוצות" מיוחדות. אנא עדכנו את קבוצת־הדיון ושנו את ההגדרה ל: "הסר דיונים ישנים".';
+$string['archive_errortargetforum'] = 'קבוצת־הדיון אשר שימשה לקבלת דיונים ישנים, אינה קיימת. אנא עדכנו את קבוצת־הדיון ושנו את ההגדרה ל: "הסר דיונים ישנים"';
+$string['atom'] = 'Atom';
+$string['attachment'] = 'קובץ מצורף';
+$string['attachmentmaxbytes'] = 'גודל מירבי של קובץ מצורף';
+$string['attachmentmaxbytes_help'] = 'זהו הגודל המירבי  האפשרי, של  צירוף מספר קבצים,לפרסום אחד בקבוצת־דיון.';
+$string['attachmentnum'] = 'קובץ מצורף';
+$string['attachments'] = 'קבצים מצורפים';
+$string['author'] = 'מחבר';
+$string['authorname'] = 'שם המחבר';
+$string['authorname_help'] = 'ניתן להקליד את השם הפרטי (ג\'יין), משפחה (בראון), שם מלא (ג\'יין בראון), או את החלק הראשון של כל אחד מאלה (גי,ברא, ג\'יין ב \').  ניתן גם להקליד שם משתמש (jb001). אם תשאירו משבצת זו ריקה, פירסומיי כל המחברים,  ייכללו בחיפוש.';
+$string['averagerating'] = 'ציון ממוצע: {$a->avg} (פרסומים: {$a->num})';
+$string['beforeenddate'] = 'קבוצת־דיון זו סגורה בפני פרסומים חדשים ב {$a}.';
+$string['beforeenddatecapable'] = 'קבוצת־דיון זו סגורה בפני פרסומים של תלמידים ב {$a}.';
+$string['beforestartdate'] = 'ניתן רק לקרוא פירסומים בקבוצת־דיון זו, אך לא ניתנת אפשרות שליחה/הגשה של פרסומים .';
+$string['beforestartdatecapable'] = 'תלמידים רשאים לצפות בפרסומים בקבוצת־דיון זו,אך לא לשלוח/להגיש עד שעה {$a}.';
+$string['choosefile'] = 'בחרו קובץ';
+$string['clearflag'] = 'הסרת דגל';
+$string['clicktoadd'] = 'הוסיפו זאת';
+$string['collapseall'] = 'כווצו את כל הפרסומים';
+$string['completiondiscussions'] = 'על המשתמש ליצור דיון בקבוצת־דיון:';
+$string['completiondiscussionsgroup'] = 'נחוץ דיון בקבוצת־דיון זו';
+$string['completionposts'] = 'על המשתמש ליצור דיון או להגיב לדיון המתנהל בקבוצת־דיון.';
+$string['completionpostsgroup'] = 'דרושים פרסומים';
+$string['completionreplies'] = 'על המשתמש לשלוח הודעות תגובה';
+$string['completionrepliesgroup'] = 'הודעות תגובה ,נדרשות.';
+$string['configattachmentmaxbytes'] = 'גודל ברירת המחדל המרבי עבור כל קבצים המצורפים  לקבוצות־דיון במערכת (בכפוף למגבלות הקורס ולהגדרות מקומיות אחרות)';
+$string['configdiscussionsperpage'] = 'מספר הדיונים המרבי ,אשר ניתן להציג בעמוד
+אחד בקבוצת־דיון.';
+$string['configdonotmailafter'] = 'לשם מניעת מבול של דואר, במצב בו השרת הפסיק את פעילותו לזמן מה, רכיב הפורום לא ישלח הודעות דוא"ל עבור פירסומים שפורסמו בזמן זה.';
+$string['configenableadvanced'] = 'אפשרות זו מאפשרת תכונות מתקדמות לרכיב הפורום, אשר עשויה להיות מורכבת שלא לצורך ,להתקנות רבות. נכון לעכשיו, פעולה זו רק מאפשרת שיתוף בקבוצת־דיון (פורום), אך יש אפשרות להוסיף תכונות נוספות בהמשך.';
+$string['configenablerssfeeds'] = 'דגל זה יפעיל את האפשרות של הזנות RSS לכל קבוצות־הדיון. עדיין תצטרכו להפעיל את ההזנות באופן ידני בהגדרות של כל קבוצת־דיון בנפרד.';
+$string['configfeeditems'] = 'מספר ההודעות האחרונות, אשר נכללו בהזנה אחת .';
+$string['configfeedtype'] = 'בחרו את המידע שברצונכם לכלול בתוך הזנות RSS  שבפורום.';
+$string['confighousekeepingstarthour'] = 'משימות איחסון בארכיון, כגון: מחיקת דיונים ישנים, יחלו משעה זו בכל יום.';
+$string['confighousekeepingstophour'] = 'משימות איחסון בארכיון, יפסיקו פעילותן בשעה זו.';
+$string['configpermanentdeletion'] = 'לאחר פרק זמן זה (פרק זמן שיקבע במערכת), פירסומים שנמחקו וגרסאות ישנות של פירסומים במצב עריכה,יוצאו לצמיתות ממסד הנתונים.';
+$string['configreadafterdays'] = 'לאחר מספר ימים (שיקבע מראש במערכת), הפרסומים ייחשבו כנקראו על ידי כל המשתמשים (בין אם הכן נקראו או לא).';
+$string['configreplytouser'] = 'כאשר פרסום בקבוצת־דיון נשלחת בדואר החוצה, האם עליה לכלול את כתובת הדוא"ל של המשתמש, כך שלמקבל התגובה תהיה את האפשרות להגיב באופן אישי ולא דרך הקבוצת־דיון? גם אם תסומן בהגדרות המלה - \'כן\' , עדיין יוכלו המשתמשים ,לבחור להסתיר את כתובת הדוא"ל בפרופיל שלהם.';
+$string['configreportunacceptable'] = 'מטרת כתובת דוא"ל זו היא לשם דיווח על פרסומים מעליבים בקבוצת־דיון.ברמת האתר, אם לא תמלאו את כתובת הדוא"ל  בפרופיל שלכם (כלומר משבצת הדוא"ל שלכם תשאר ריקה), אזי פונקציית ההתראה תשאר כבויה, אלא אם כן כבר הופעלה ברמת בפורום.';
+$string['configshowidnumber'] = 'מספריי זיהוי של משתמשים הנכללים בדוחות הקשורים לפורום , ואשר ניתנים לצפייה על ידי מנהליי הפורום [ולא על־ידי משתמשים רגילים].';
+$string['configshowusername'] = 'שמות משתמשים הנכללים בדוחות הקשורים לקבוצת־דיון , ואשר ניתנים לצפייה על ידי מנהליי קבוצת־דיון [ולא על־ידי משתמשים רגילים].';
+$string['configsubscription'] = 'שליטה על אפשרויות מנויים בדוא"ל בכל קבוצות־הדיון ברחבי המערכת.';
+$string['configtrackreadposts'] = 'בחרו \'כן\' , אם ברצונכם לעקוב אחר פירסום של כל משתמש ומשתמש  , שנקרא/לא נקרא.';
+$string['confirmbulkunsubscribe'] = 'האם אתם בטוחים שברצונכם לבטל את המנויים  שברשימה הבאה? (שימו לב: לא יהיה ניתן לבטל פעולה זו לאחר ביצועה)';
+$string['confirmdelete'] = 'האם אתם בטוחים שברצונכם למחוק פירסום/הודעה זאת?';
+$string['confirmdeletedraft'] = 'האם אתם בטוחים שברצונכם למחוק פירסום/הודעת טיוטה זאת? (המוצגת למטה)';
+$string['confirmdelete_notdiscussion'] = 'מחיקת הודעה/פירסום זה,לא תימחק את הדיון. אם ברצונכם למחוק את הדיון, עליכם להשתמש בפקדים שבתחתית הדיון.';
+$string['confirmselection'] = 'אישור הבחירה';
+$string['confirmundelete'] = 'האם אתם בטוחים שברצונכם לבטל הסרת/מחיקת פירסום זה?';
+$string['convert_hide'] = 'השאירו "קבוצות־דיון קיימות", במצב מוסתר.';
+$string['convert_info'] = 'תהליך ההמרה יכול לעבוד על אחד או יותר קבוצות־דיון מהגירסה הישנה, אך כרגע , רק קבוצת־דיון "רגילה/כללית", מקבלת תמיכה. אנא השתמשו במקש Ctrl על מנת לבחור לפי הצורך, מהמספר הרב של קבוצות־הדיון ,המופיעות ברשימה.';
+$string['convert_newforum'] = 'קבוצת־דיון חדשה';
+$string['convert_nodata'] = 'אין לכלול נתוני משתמש כגון תגובות, מנויים וכו\'';
+$string['convert_noforums'] = 'אין קבוצות־דיון ישנות להמרה, בקורס זה.';
+$string['convert_noneselected'] = 'לא נבחרו קבוצות־דיון להמרה! נא בחרו קבוצת־דיון אחת או מספר קבוצות־דיון.';
+$string['convert_process_assignments'] = 'עדכון הקצאות תפקידים...';
+$string['convert_process_complete'] = 'ההמרה הושלמה ב- {$a->seconds}ש\'
+(תצוגת {$a->link}).';
+$string['convert_process_dashboard'] = 'המרת מועדפים בלוח מחוונים...';
+$string['convert_process_dashboard_done'] = 'בוצע (בהצלחה {$a->yay}, שגיאה {$a->nay}).';
+$string['convert_process_discussions'] = 'המרת דיונים...';
+$string['convert_process_init'] = 'יצירת מבנה של קבוצת־דיון...';
+$string['convert_process_overrides'] = 'עדכון עקיפת תפקידים...';
+$string['convert_process_search'] = 'יצירה מחדש של  מאגר נתוני מנגנון החיפוש';
+$string['convert_process_show'] = 'עדכון מצב תצוגת קבוצת־הדיון ל:"גלוי"';
+$string['convert_process_state_done'] = 'בוצע';
+$string['convert_process_subscriptions_initial'] = 'המרת מנויים ראשוניים...';
+$string['convert_process_subscriptions_normal'] = 'המרת מנויים רגילים...';
+$string['convert_process_update_subscriptions'] = 'המרה  לקבוצות מנויים';
+$string['convert_title'] = 'המרת קבוצות־דיון';
+$string['crondebug'] = 'פלט איתור תקלות (Cron)';
+$string['currentpost'] = 'גרסה נוכחית של הפרסום';
+$string['daterangefrom'] = 'מתאריך:';
+$string['daterangeto'] = 'עד תאריך:';
+$string['date_asc'] = 'תצוגת הפרסום הוותיק ביותר,
+בראש הרשימה';
+$string['date_desc'] = 'תצוגת הפרסום העדכני ביותר,
+בראש הרשימה';
+$string['delete'] = 'מחיקה <span class=\'accesshide\'> פרסום {$a}</span>';
+$string['deleteattachments'] = 'מחיקת הקבצים המצורפים';
+$string['deletedbyauthor'] = 'הפרסום הנוכחי נמחק על־ידי המחבר
+ב {$a}.';
+$string['deletedbymoderator'] = 'פרסום זה נמחק על־ידי מנהל קבוצת־הדיון ב: {$a}.';
+$string['deletedbyuser'] = 'פרסום זה נמחק על־ידי המשתמש {$a->user} ב: {$a->date}.';
+$string['deletedpost'] = 'פרסום אשר נמחק.';
+$string['deletedraft'] = 'מחיקת טיוטת הפרסום';
+$string['deletepermanently'] = 'מחיקה לצמיתות';
+$string['deletepost'] = 'מחיקת פרסום : {$a}';
+$string['deletepostbutton'] = 'מחיקת פרסום';
+$string['digestmailprefs'] = 'פרופיל המשתמש שלך';
+$string['digestmailsubject'] = '{$a}: סיכום פעילות יומי בקבוצת־הדיון';
+$string['directlink'] = 'קישור קבוע <span class=\'accesshide\'> לפרסום: {$a}</span>';
+$string['directlinktitle'] = 'קישור ישיר לפרסום זה';
+$string['disallowsubscribe'] = 'לא ניתן להירשם כמנויים';
+$string['discussion'] = 'דיון';
+$string['discussionoptions'] = 'אפשרויות הדיון';
+$string['discussions'] = 'דיונים';
+$string['discussionsperpage'] = 'מספר הדיונים המרבי לעמוד אחד בקבוצת־הדיון';
+$string['discussionsunread'] = 'דיונים (שלא נצפו)';
+$string['displayperiod'] = 'תצוגת תקופה';
+$string['displayperiod_help'] = 'הנכם רשאים להסתיר דיון זה מתלמידים,עד או מתאריך  מסוים שיקבע בהגדרות קבוצת־הדיון. בזמן ההסתרה, התלמידים לא יוכלו לצפות בדיון.  מנהלים יוכלו לצפות בדיון כאשר הרשימה תוצג בצבע אפור ויופיע סמל של שעון.';
+$string['donotmailafter'] = 'לא לשלוח דוא"ל לאחר השעה';
+$string['draft'] = 'טיוטה';
+$string['draftexists'] = 'גרסת טיטה של הפרסום הזה ({$a}) נשמרה. אם לא סיימתם את עריכת הפרסום כעת, תוכלו לשחזר את הטיוטה מהעמוד הראשי של קבוצת־דיון זו.';
+$string['drafts'] = 'טיוטות שלא פורסמו';
+$string['drafts_help'] = 'בעת שמירת פרסום כטיוטה, הוא יופיע ברשימה זו. הקישו על הטיוטה להמשך פעילות בה. במידה ותרצו למחוק אותה,הקישו על הסמל "מחק",שנמצא לצידה. במקרים מסוימים ייתכן שלא יהיה ניתן להמשיך את הטיוטה (למשל אם היא טיוטת תגובה לדיון שבינתיים נמחק). במצב זה, ניתן לאחזר את תוכן הטיוטה על ידי הקשה על הסמל \'מחק\'.';
+$string['draft_cannotreply'] = '<p>אין כרגע אפשרות להוסיף תגובה לפרסום שהטיוטה מתייחסת אליו. {$a} </p><p>ניתן להשתמש בלחצן X שלצד טיוטה זו בעמוד הראשי בקבוצת הדיון, כדי לראות את
+הנוסח המלא שלה (כך שתוכלו להעתיק ולהדביק אותה במקום אחר) וכדי למחוק אותה.</p>';
+$string['draft_inreplyto'] = '( תגובה ל: {$a} )';
+$string['draft_newdiscussion'] = '(דיון חדש)';
+$string['draft_noedit'] = 'לא ניתן להשתמש ברכיב הטיוטה בעת עריכת פרסומים.';
+$string['edit'] = 'עריכה<span class=\'accesshide\'> פרסום {$a}</span>';
+$string['editbyother'] = 'נערך על־ידי  {$a->name} ב  {$a->date}';
+$string['editbyself'] = 'נערך על־ידי המחבר בתאריך {$a}';
+$string['editdiscussionoptions'] = 'עריכת אפשרויות הדיון ב: {$a}';
+$string['editlimited'] = 'אזהרה: עליכם לשמור שינויים בפרסום זה לפני {$a}.
+לאחר תאריך זה, לא יהיה ניתן לערוך עוד.';
+$string['editpost'] = 'עריכת פרסום: {$a}';
+$string['edit_locked'] = 'דיון זה נעול, ואינו זמין לעריכה.';
+$string['edit_nopermission'] = 'אינכם רשאים להוסיף פרסום מסוג זה לקבוצת־דיון';
+$string['edit_notcurrentpost'] = 'אינכם רשאים להוסיף לקבוצת-הדיון פרסומים שנמחקו או גרסאות קודמות של פרסומים.';
+$string['edit_notdeleted'] = 'אינכם רשאים לשחזר פרסום, אם הוא לא נמחק.';
+$string['edit_notlocked'] = 'דיון זה לא נעול כרגע.';
+$string['edit_notyours'] = 'אינכם רשאים לערוך פרסומים שאינם שייכים לכם.';
+$string['edit_readonly'] = 'לא ניתן לערוך פרסומים בקבוצת־דיון זו, היות והיא זמינה
+לצפייה בלבד.';
+$string['edit_rootpost'] = 'פעולה זו לא אפשרית עבור פרסום אשר מצוי בתחילת דיון';
+$string['edit_timeout'] = 'אינכם רשאים עוד לערוך פרסום זה. הזמן שהותר לעריכה, הסתיים.';
+$string['edit_wronggroup'] = 'אינכם יכולים לבצע שינויים בפרסומים אשר אינם שייכים לקבוצה שלכם.';
+$string['enableadvanced'] = 'הפעלת תכונות מתקדמות';
+$string['enablelimit'] = 'יש לתחום בזמן את יכולת המשתמש בשליחת פרסומים';
+$string['enableratings'] = 'ניתן לדירוג פרסומים';
+$string['errorfindinglastpost'] = 'שגיאה בחישוב מחדש של הפרסום הקודם (שגיאה במסד הנתונים)';
+$string['error_cannotchangediscussionsubscription'] = 'אינכם רשאים להירשם או לבטל הרשמה מדיון זה.';
+$string['error_cannotchangegroupsubscription'] = 'אינכם רשאים להירשם או לבטל הרשמה מהקבוצה שנבחרה על ידכם.';
+$string['error_cannotchangesubscription'] = 'אינכם רשאים להירשם או לבטל הרשמה, מקבוצת־דיון זו.';
+$string['error_cannotmanagediscussion'] = 'אינכם רשאים לנהל דיון זה.';
+$string['error_cannotmarkread'] = 'אינכם רשאים לסמן דיונים כ "נצפו",בקבוצת־דיון זו.';
+$string['error_cannotsubscribetogroup'] = 'אינכם רשאים להירשם לקבוצתכם שנבחרה.';
+$string['error_cannotunsubscribefromgroup'] = 'אינכם רשאים לבטל את הרשמתכם מהקבוצה שבחרתם.';
+$string['error_cannotviewdiscussion'] = 'אינכם רשאים לצפות בדיון זה.';
+$string['error_draftnotfound'] = 'לא ניתן למצוא הודעת טיוטה.  ייתכן שהטיוטה כבר פורסמה או נמחקה.';
+$string['error_duplicate'] = 'כבר יצרתם פרסום באמצעות הטופס הקודם.
+(לפעמים שגיאה זו מתרחשת כאשר אתם לוחצים פעמיים
+על כפתור "הודעה". במקרה כזה, הפרסום שלכם כנראה נשמר.)';
+$string['error_exception'] = 'התרחשה טעות בקבוצת הדיון.  נסו שוב מאוחר יותר,
+או נסו פעולה אחרת
+ <div class=\'קבוצת־דיון NG -הודעת שגיאה\'> הודעת שגיאה:
+ {$a} </div>';
+$string['error_feedlogin'] = 'שגיאה בהשלמת פרטי המשתמש, לכניסה(הרשמה) לקבוצת־דיון';
+$string['error_fileexception'] = 'התרחשה שגיאת עיבוד קובץ ,כנראה עקב בעיות במערכת. מומלץ לנסות שוב מאוחר יותר.';
+$string['error_forwardemail'] = 'חלה שגיאה במהלך שליחת דוא"ל ל :<strong>{$a}/strong>.
+  לא ניתן היה לשלוח דוא"ל.';
+$string['error_invalidsubscriptionrequest'] = 'בקשתכם להצטרפות כמנויים, אינה חוקית.';
+$string['error_nopermission'] = 'אין לכם הרשאות לבצע פעולה זו.';
+$string['error_notwhensharing'] = 'אפשרות זו אינה זמינה בעת שיתוף קבוצת־דיון.';
+$string['error_portfoliosave'] = 'חלה שגיאה בעת שמירת נתונים אלו ב-  MyStuff';
+$string['error_sendalert'] = 'חלה שגיאה במהלך שליחת הדוח שלכם, ולכן הוא לא נשלח.';
+$string['error_sharingidnumbernotfound'] = 'בעת שיתוף בקבוצת־דיון, עליכם להזין מספר זיהוי, אשר
+תואם לזה שהוכנס באותה פעילות, קודם לכן.';
+$string['error_sharinginuse'] = 'לא ניתן לסגור את השיתוף בקבוצת־דיון זו, היות וישנן כבר מספר קבוצות-דיון החולקות את הפעילות עם אותה קבוצת־דיון. במידת הצורך, יש למחוק קודם את כל הקבוצות-דיון האחרות .';
+$string['error_sharingrequiresidnumber'] = 'בעת שיתוף בקבוצת הדיון, עליכם להזין מספר זיהוי אשר עליו להיות ייחודי על פני המערכת כולה.';
+$string['error_system'] = 'התרחשה שגיאה במערכת {$a}';
+$string['error_unknownsort'] = 'אפשרות מיון לא ידועה';
+$string['existingattachments'] = 'קבצים מצורפים קיימים';
+$string['expand'] = 'תצוגת תוכן<span class=\'accesshide\'> פרסום {$a}</span>';
+$string['expandall'] = 'הרחבת כל הפרסומים';
+$string['exportedtitle'] = 'הדיון &lsquo;{$a->subject}&rsquo; יוצא ב: {$a->date}';
+$string['exportword'] = 'ייצוא למעבד התמלילים וורד Word';
+$string['externaldashboardadd'] = 'הוספת קבוצת־הדיון ללוח האישי';
+$string['externaldashboardremove'] = 'הסרת קבוצת־הדיון מהלוח האישי';
+$string['feeditems'] = 'פריטים שהוזנו לאחרונה';
+$string['feeds'] = 'הזנות';
+$string['feedtype'] = 'תוכן הזנה';
+$string['feedtype_all_posts'] = 'מכיל את כל הפרסומים';
+$string['feedtype_discussions'] = 'מכיל דיונים בלבד';
+$string['feedtype_help'] = 'במצב "פעיל", משתמשים יכולים להרשם לקבוצת־דיון באמצעות קורא הזנה RSS או Atom . באפשרותכם להגדיר את ההזנה כך שתכלול רק דיונים ברמת חשיבות עליונה ולא תגובות, או שתכלול את כל הפרסומים.';
+$string['feedtype_none'] = 'הזנה לא פעילה';
+$string['feed_nopermission'] = 'אין לכם הרשאת צפיה בהזנה זו.';
+$string['feed_notavailable'] = 'הזנה זו אינה זמינה.';
+$string['flaggedposts'] = 'פרסומים מסומנים (על־ידי דגלים)';
+$string['flaggedpostslink'] = '{$a} פרסומים מסומנים (על־ידי דגלים)';
+$string['flaggedposts_help'] = 'פרסומים מסומנים מופיעים ברשימה זו. על מנת לעבור לפרסום מסומן,עליכם להקיש עליו. על מנת להעביר דגל(סימון) מפרסום,יש להקיש על סמל הדגל (כאן או בתוך הפרסום).';
+$string['flagoff'] = 'לא סומן בדגל';
+$string['flagon'] = 'סימנתם פרסום זה.';
+$string['forbidattachments'] = 'לא ניתן לצרף קבצים.';
+$string['forcesubscribe'] = 'כל המשתמשים מחויבים להיות (ולהשאר) מנויים';
+$string['forum'] = 'קבוצת־דיון';
+$string['forumintro'] = 'הנחייה לתלמידים';
+$string['forumname'] = 'שם קבוצת־דיון';
+$string['forumng:copydiscussion'] = 'העתקת דיון';
+$string['forumng:createattachment'] = 'יצירת קבצים מצורפים';
+$string['forumng:deleteanypost'] = 'מחיקת פרסום';
+$string['forumng:editanypost'] = 'הוספת פרסום';
+$string['forumng:forwardposts'] = 'העברת פרסומים הלאה';
+$string['forumng:ignorepostlimits'] = 'התעלמו ממגבלות הספירה של הפרסום';
+$string['forumng:mailnow'] = 'שלחו פרסומים לפני עריכת מגבלת הזמן';
+$string['forumng:managediscussions'] = 'אפשרויות ניהול דיון';
+$string['forumng:managesubscriptions'] = 'ניהול מנויים';
+$string['forumng:movediscussions'] = 'העבירו דיונים';
+$string['forumng:rate'] = 'דרגו פרסומים';
+$string['forumng:replypost'] = 'הגיבו לפרסומים';
+$string['forumng:setimportant'] = 'סמנו פרסומים כחשובים';
+$string['forumng:splitdiscussions'] = 'פצלו דיונים';
+$string['forumng:startdiscussion'] = 'התחילו בדיונים חדשים';
+$string['forumng:view'] = 'תצוגת קבוצת־דיון';
+$string['forumng:viewallposts'] = 'תצוגת פרסומים מוסתרים וכאלו שנמחקו';
+$string['forumng:viewanyrating'] = 'תצוגת כל הדירוגים הקיימים';
+$string['forumng:viewdiscussion'] = 'תצוגת דיונים';
+$string['forumng:viewrating'] = 'תצוגת הדירוג של הפרסומים שלכם בקבוצת־הדיון';
+$string['forumng:viewreadinfo'] = 'תצוגת כל משתמש/מנוי שצפה בפרסום';
+$string['forumng:viewsubscribers'] = 'תצוגת מנויים';
+$string['forums'] = 'קבוצות־דיון';
+$string['forumtype'] = 'סוג קבוצת־דיון';
+$string['forumtype_help'] = 'ישנם סוגים שונים של קבוצות דיון, המתאימים למטרות ספציפיות או לשיטות הוראה מסוימות. סוג קבוצת-הדיון  הסטנדרטי (רגיל) , מתאים לכלל השימושים הרגילים.';
+$string['from'] = 'מ: {$a}';
+$string['grading'] = 'ציון';
+$string['grading_average'] = 'ממוצע של דירוגים';
+$string['grading_count'] = 'ספירת הדירוגים';
+$string['grading_max'] = 'מספר דירוגים מרבי';
+$string['grading_min'] = 'מספר דירוגים מינימלי';
+$string['grading_none'] = 'ללא ציון';
+$string['grading_sum'] = 'סכום הדירוגים';
+$string['group'] = 'קבוצה';
+$string['hasunreadposts'] = '(פרסומים שטרם נצפו)';
+$string['hidelater'] = 'אל תציגו הוראות אלו שוב';
+$string['history'] = 'הסטוריה';
+$string['historypage'] = 'הסטוריה: {$a}';
+$string['housekeepingstarthour'] = 'שעת התחלת פעילות הארכיון';
+$string['housekeepingstophour'] = 'שעת הפסקת פעילות הארכיון';
+$string['important'] = 'פרסום חשוב';
+$string['inappropriatedateortime'] = '<strong>טווח תאריכים</strong> חורג מהתאריך הנוכחי. אנא הזינו תאריך חדש!';
+$string['initialsubscribe'] = 'הפעלת מנוי באופן אוטומטי לכולם';
+$string['inreplyto'] = 'בתגובה ל';
+$string['invalidalert'] = 'יש לציין בפניי מנהלי קבוצת־הדיון ,את סיבת הדיווח על פרסום זה.';
+$string['invalidalertcheckbox'] = 'עליכם לסמן לפחות אחד מתיבות הסימון';
+$string['invalidemail'] = 'כתובת דוא"ל זו אינה חוקית. יש להזין כתובת דוא"ל אחת';
+$string['invalidemails'] = 'כתובת דוא"ל זו אינה חוקית. אנא הכניסו כתובת אחת או יותר, המופרדות על־ידי סימניי רווח או פסיק.';
+$string['invalidforum'] = 'קבוצת־דיון זו לא קיימת יותר';
+$string['jserr_alter'] = 'ארעה שגיאה במהלך עדכון הפרסום. רעננו עמוד זה ונסו שוב';
+$string['jserr_attachments'] = 'ארעה שגיאה בטעינת עורך הקובץ המצורף. רעננו עמוד זה ונסו שוב';
+$string['jserr_load'] = 'ארעה שגיאה בהשגת הפרסום. אנא רעננו עמוד זה ונסו שוב.';
+$string['jserr_save'] = 'ארעה שגיאה בעת שמירת הפרסום. אנא העתיקו את הכיתוב לתוכנית אחרת כדי לוודא שלא תאבדו אותו, ואז טענו/רעננו מחדש את העמוד ונסו שוב.';
+$string['js_clicktoclearrating'] = 'הקליקו כדי להסיר את  הדירוג שלכם';
+$string['js_clicktosetrating'] = 'הקליקו כדי לתת לפרסום זה # כוכבים.';
+$string['js_clicktosetrating1'] = 'הקליקו כדי לתת לפרסום זה כוכב אחד.';
+$string['js_nopublicrating'] = 'לא דורג עדיין';
+$string['js_nouserrating'] = 'לא דורג על ידך.';
+$string['js_nratings'] = '( דירוג # )';
+$string['js_nratings1'] = '( דירוג 1)';
+$string['js_outof'] = '(חריגה מ #.)';
+$string['js_publicrating'] = 'ממוצע דירוגים: #';
+$string['js_userrating'] = 'דירוג שלך: #';
+$string['jumpnext'] = 'הפרסום הבא שטרם נצפה';
+$string['jumpparent'] = 'אב';
+$string['jumpprevious'] = 'פרסום קודם שטרם נצפה';
+$string['jumppreviousboth'] = 'קודם';
+$string['jumpto'] = 'עבור ל:';
+$string['lastpost'] = 'פרסום קודם';
+$string['limitposts'] = 'הגבלת פרסומים';
+$string['mailnow'] = 'שליחת הודעה זו, באופן מיידי, באמצעות דוא"ל';
+$string['mailnow_help'] = 'אנא בחרו באפשרות זו אם אתם מעוניינים  בשליחת הפרסומים שלכם ,במהירות רבה יותר,לדוא"ל של המנויים . אלא אם כן, אתם מעוניינים לערוך פעם נוספת את הפרסום שלכם, ולשם כך יינתן זמן מה על־ידי המערכת.';
+$string['markdiscussionread'] = 'סמנו את כל הדיונים בפרסום זה כ: "נצפו"';
+$string['message'] = 'הודעה';
+$string['modulename'] = 'קבוצת־דיון (פורום NG)';
+$string['modulenameplural'] = 'קבוצות־דיון (פורום NG)';
+$string['modulename_help'] = 'קבוצת־דיון NG מהווה תחליף
+לקבוצת־דיון רגילה במודל עם רוב התכונות שלה, ועוד בנוסף ממשק משתמש דינמי . NG הוא קיצור של "הדור הבא".';
+$string['move_nogroups'] = 'אין לכם גישה לאף אחת מהקבוצות שבקבוצת־הדיון שנבחרה.';
+$string['move_notselected'] = 'עליכם לבחור קבוצת־דיון אליה מתוך רשימת־הבחירה של קבוצות־דיון זמינות, לפני שאתם מקליקים על הכפתור "העברה".';
+$string['newdiscussion'] = 'דיון חדש';
+$string['nextresults'] = 'מצאו תוצאות נוספות';
+$string['nodiscussions'] = 'טרם נמצאו דיונים בקבוצת־דיון זו.';
+$string['noguestsubscribe'] = 'סליחה, אורחים אינם רשאים להירשם לקבלת פרסומים דרך הדוא"ל.';
+$string['nosearchcriteria'] = 'אין קריטריון (אמת מידה) לחיפוש: בבקשה השתמשו באחד או יותר מהקריטריונים הנ"ל, ונסו שוב!';
+$string['nosubscribers'] = 'טרם נרשמו מנויים לקבוצת־דיון זו.';
+$string['nosubscribersgroup'] = 'טרם נרשמו משתמשים מהקבוצה, לקבוצת־דיון זו.';
+$string['nothingfound'] = 'לא נמצאו תוצאות התואמות לדרישתכם. אנא נסו להשתמש בשאילתה אחרת.';
+$string['nothingtodisplay'] = '<h3>אין דבר לתצוגה<h3>';
+$string['numberofdiscussion'] = '{$a}דיון';
+$string['numberofdiscussions'] = '{$a} דיונים';
+$string['numposts'] = '{$a}פרסום (ים)';
+$string['offerconvert'] = 'אם ברצונכם ליצור קבוצת־דיון NG חדשה שהיא העתק של קבוצת־הדיון הישנה, אל תשתמשו בטופס זה. במקום זאת,
+<a href=\'{$a}\'>המירו את קבוצת הדיון </a>.';
+$string['olderversions'] = 'גרסה ישנה';
+$string['onemonth'] = 'חודש 1';
+$string['optionalsubject'] = 'נושא חדש';
+$string['partialsubscribed'] = 'חלקי';
+$string['pastediscussion'] = 'הדביקו דיון';
+$string['perforumoption'] = 'הגדירו כל קבוצת־דיון בנפרד.';
+$string['pluginadministration'] = 'ניהול קבוצת־דיון NG';
+$string['pluginname'] = 'קבוצת־דיון NG';
+$string['post'] = 'פרסום';
+$string['postby'] = '(על־ידי {$a})';
+$string['postdiscussion'] = 'פרסום מסוג דיון';
+$string['postinfo_deleted'] = 'נמחק';
+$string['postinfo_short'] = 'סוכם';
+$string['postinfo_unread'] = 'טרם נצפה';
+$string['postingfrom'] = 'פרסום בלבד מותר מ';
+$string['postinguntil'] = 'פרסום בלבד מותר עד';
+$string['postmailinfo'] = 'זהו העתק של הודעה, אשר פורסמה באתר האינטרנט {$a}. כדי להוסיף את תגובתכם באמצעות אתר האינטרנט,אנא הקישו על הקישור הבא:';
+$string['postreply'] = 'שליחת תגובה';
+$string['posts'] = 'פרסומים';
+$string['previousresults'] = 'חזרה לתוצאות {$a}';
+$string['quotaleft_plural'] = 'הנכם רשאים ליצור
+<strong>{$a->posts}</strong> יותר פרסומים כרגע
+{$a->period}.';
+$string['quotaleft_singular'] = 'הנכם רשאים ליצור
+<strong>{$a->posts}</strong> יותר פרסומים כרגע
+{$a->period}.';
+$string['rate'] = 'דירוג';
+$string['rate_nopermission'] = 'אינכם רשאים לדרג פרסום זה ({$a}).';
+$string['ratingfrom'] = 'דרגו פרסומים רק  מ:';
+$string['ratings'] = 'דירוגים';
+$string['ratingthreshold'] = 'דרושים דירוגים';
+$string['ratingthreshold_help'] = 'במידה ותגדירו אפשרות זו בספרה 3, אזי דירוג הפרסום לא יוצג עד שלפחות 3 אנשים דירגו אותו. מהלך זה באפשרותו לצמצם את ההשפעה של דירוג אחד על הממוצע הכללי.';
+$string['ratingtime'] = 'הגבילו דירוגים לפרסומים בעלי תאריכים בטווח זה:';
+$string['ratinguntil'] = 'דרגו פרסומים עד :';
+$string['readafterdays'] = 'צפו אחר מספר ימים';
+$string['readdata'] = 'צפו בנתונים';
+$string['removeolddiscussions'] = 'הסירו דיונים ישנים';
+$string['removeolddiscussionsafter'] = 'הסירו דיונים ישנים לאחר:';
+$string['removeolddiscussionsdefault'] = 'אל תסירו אף פעם';
+$string['removeolddiscussions_help'] = 'המערכת רשאית להסיר באופן אוטומטי דיונים במידה ולא התקבלו תגובות חדשות לאורך זמן מסוים, שנקבע מראש במערכת.';
+$string['replies'] = 'תגובות';
+$string['replytopost'] = 'תגובה לפרסום: {$a}';
+$string['reply'] = 'תגובה';
+$string['replytouser'] = 'השתמשו בכתובת דוא"ל למטרת תגובה לפרסום';
+$string['reply_nopermission'] = 'אינכם רשאים להגיב כאן.';
+$string['reply_notcurrentpost'] = 'אינכם רשאים להגיב לפרסומים שנמחקו או לגרסאות קודמות של פרסומים.';
+$string['reply_postquota'] = 'אינכם רשאים להגיב לפרסומים ברגע זה היות והגעתם לגבול השליחה (למספר הפרסומים המרבי  שניתן לשלוח)';
+$string['reply_readonly'] = 'כרגע קבוצת־דיון זו היא לקריאה בלבד, כך שלא ניתן להוסיף תגובות חדשות.';
+$string['reply_typelimit'] = 'סוג קבוצת־דיון זו, אינו מאפשר לצרף תגובה לפרסום זה.';
+$string['reply_wronggroup'] = 'אינכם רשאים להגיב לפרסומים בדיון זה היות ואתם לא מופיעים בקבוצה המתאימה.';
+$string['reportingemail'] = 'כתובת דואר לשליחת דוא"ל לשם דיווח על פרסומים לא נאותים.';
+$string['reportingemail_help'] = 'בהנחה וכתובת דוא"ל זו סופקה למערכת על ידכם, אזי קישור "דווח" יופיע ליד כל פרסום. משתמשים יוכלו להקיש על הקישור כדי לדווח על פרסומים לא נאותים, ומידע זה יישלח לכתובת זו שסיפקתם. במידה ותשאירו את תיבת הדוא"ל ריקה, פעולת הדווח לא תוצג (אלא אם כן סופקה כתובת דוא"ל ברמת האתר). .';
+$string['reportunacceptable'] = 'שליחת דוא"ל לשם דיווח על פרסומים לא נאותים.';
+$string['saveallratings'] = 'שמירת כל הדירוגים';
+$string['savedposts_all'] = '{$a}';
+$string['savedposts_all_tag'] = 'דיון';
+$string['savedposts_one_tag'] = 'פרסום';
+$string['savedposts_original'] = 'מקור ראשוני של הדיון';
+$string['savedposts_selected'] = '{$a} (פרסומים שנבחרו)';
+$string['savedposts_selected_tag'] = 'פרסומים';
+$string['savedraft'] = 'שמירת טיוטה';
+$string['savedtoportfolio'] = 'המידע שנבחר,נשמר ב- MyStuff';
+$string['savetoportfolio'] = 'שמירה ב- MyStuff';
+$string['searchallforums'] = 'בחרו את כל קבוצות הדיון';
+$string['searchresults'] = 'תוצאות חיפוש:
+<strong>{$a}</strong>';
+$string['searchthisforum'] = 'חיפוש בקבוצת־דיון זו';
+$string['searchthisforumlink'] = 'חיפוש בקבוצת־דיון זו';
+$string['searchtime'] = 'חיפוש זמן: {$a} שניות';
+$string['search_update_count'] = '{$a} קבוצות-דיון בתהליך עיבוד';
+$string['selectedposts'] = 'פרסומים נבחרים (מסומנים)';
+$string['selectlabel'] = 'בחרו פרסום {$a}';
+$string['selectorall'] = 'האם אתם מעוניינים לכלול את הדיון כולו, או  את הפרסומים הנבחרים בלבד?';
+$string['set'] = 'עריכה';
+$string['setflag'] = 'סמנו הודעה/פרסום זה, לשימוש עתידי.';
+$string['setimportant'] = 'סמנו הודעה זו כ\'חשובה\'';
+$string['shared'] = 'אפשרו שיתוף של קבוצת־דיון';
+$string['sharedinfo'] = 'קבוצת־דיון זו היא שיתופית. הגדרות הגישה
+אליה אינן משותפות, והן חלות רק על
+התלמידים הניגשים לקבוצת־דיון משותפת
+ מקורס זה.  אם ברצונכם לערוך את ההגדרות באופן שונה, אנא <a href=\'{$a}\'>ערכו את הגדרות קבוצת־הדיון המקורית</a> במקום.';
+$string['sharedviewinfoclone'] = '<strong>זו היא קבוצת־דיון שיתופית</strong>. הפורום <a href=\'{$a->url}\'>המקורי</a> מצוי בקורס: {$a->shortname}.';
+$string['sharedviewinfolist'] = '<br/>קבוצת־דיון זו זמינה בקורסים הבאים: {$a}.';
+$string['sharedviewinfonone'] = 'זה אינו זמין באף קורס.';
+$string['sharedviewinfooriginal'] = '<strong>קבוצת־דיון זו מוגדרת כשיתופית</strong> תחת השם <strong>{$a}</strong> לשימוש בקורסים אחרים. ';
+$string['sharing'] = 'שיתוף קבוצת־דיון';
+$string['showidnumber'] = 'תצוגת מספרי זיהוי';
+$string['showusername'] = 'תצוגת שמות משתמשים';
+$string['skiptofirstunread'] = 'דלגו לפרסום הראשון שטרם נצפה';
+$string['sortby'] = 'מיון על־פי {$a}';
+$string['sorted'] = 'מוין  {$a}';
+$string['split'] = 'פיצול<span class=\'accesshide\'> פרסום {$a}</span>';
+$string['splitinfo'] = 'פיצול פרסום זה, יעביר אותו ואת כל התגובות שהופנו אליו, מהדיון הנוכחי. ייווצר דיון חדש  (ראה להלן).';
+$string['splitpost'] = 'פיצול פרסום: {$a}';
+$string['splitpostbutton'] = 'פיצול פרסום למצב של דיון חדש';
+$string['startdiscussion_groupaccess'] = 'אינכם רשאים להתחיל דיון חדש בקבוצה הנוכחית.';
+$string['startdiscussion_nopermission'] = 'אינכם רשאים להתחיל דיון חדש כאן.';
+$string['startdiscussion_postquota'] = 'אינכם רשאים להתחיל דיון חדש ברגע זה, היות והגעתם לגבול המרבי של שליחה .(למספר הפרסומים המרבי שניתן לשלוח)';
+$string['startedby'] = 'החל על־ידי';
+$string['sticky'] = 'דיון דביק?';
+$string['sticky_help'] = 'פעולה זו מאפשרת לדיון להמשיך להופיע בראש הרשימה, גם לאחר פרסומם של דיונים חדשים אחריו. דיונים דביקים מוצגים עם סמל החץ למעלה, ברשימת הדיון. הנכם רשאים לסמן, כדביק, יותר מדיון אחד.';
+$string['sticky_no'] = 'הדיון מוין באופן רגיל';
+$string['sticky_yes'] = 'הדיון נשאר בראש הרשימה';
+$string['studyadvice_noquestions'] = 'טרם החל דיון בקבוצת־דיון זו.';
+$string['studyadvice_noyourquestions'] = 'טרם החל דיון בקבוצת־דיון זו.';
+$string['subject'] = 'נושא';
+$string['subscribe'] = 'הירשמו כמנויים לקבוצת־דיון זו.';
+$string['subscribed'] = 'נרשמו כמנויים';
+$string['subscribeddiscussionall'] = 'כולם';
+$string['subscribediscussion'] = 'הירשמו לדיון';
+$string['subscribedthisgroup'] = 'קבוצה זו';
+$string['subscribegroup'] = 'הירשמו לקבוצה זו';
+$string['subscribelong'] = 'הירשמו לכל קבוצת־הדיון';
+$string['subscribers'] = 'מנויים';
+$string['subscribers_nopermission'] = 'אינכם רשאים לצפות ברשימת המנויים';
+$string['subscribeshort'] = 'להירשם כמנוי';
+$string['subscribestart'] = 'שלחו אלי דוא"ל המכיל פרסומים חדשים, מקבוצת־דיון זו.';
+$string['subscribestate_discussionsubscribed'] = 'פרסומים מדיון זה מתקבלים באמצעות דוא"ל ל:{$a}.';
+$string['subscribestate_discussionunsubscribed'] = 'אינכם מנויים לקבלת עדכונים בדוא"ל על פרסומים מדיונים בקבוצת־דיון זו. אם אתם מעוניינים להירשם כמנויים, הקליקו על &lsquo;הרשמה כמנויים&rsquo;.';
+$string['subscribestate_forced'] = '(קבוצת־דיון זו אינה מאפשרת ביטול מנוי )';
+$string['subscribestate_groups_partiallysubscribed'] = 'הנכם מנויים באמצעות דוא"ל לקבלת פרסומים מקבוצות שונות בקבוצת־דיון זו לכתובת: {$a}.';
+$string['subscribestate_not_permitted'] = 'קבוצת־דיון זו אינה מאפשרת הרשמה למנויים.';
+$string['subscribestate_no_access'] = 'אינכם רשאים להירשם כמנויים לפרסומים בדוא"ל עבור קבוצת־דיון זו.';
+$string['subscribestate_partiallysubscribed'] = 'מתקבלות הודעות בקבוצת־דיון זו, מכמה דיונים, באמצעות דוא"ל ל: {$a}.';
+$string['subscribestate_partiallysubscribed_thisgroup'] = 'הנכם מנויים לקבלת הודעות ממספר דיונים בקבוצה זו,  באמצעות דוא"ל ל: {$a}.';
+$string['subscribestate_subscribed'] = 'הנכם מנויים לקבלת הודעות מקבוצת־דיון זו, באמצעות דוא"ל ל: {$a}.';
+$string['subscribestate_subscribed_notinallgroup'] = 'הקליקו &lsquo;ביטול מנויי&rsquo; ל ביטול קבלת עדכונים מקבוצת־דיון זו.';
+$string['subscribestate_subscribed_thisgroup'] = 'הנכם מנויים לקבלת הודעות מקבוצה זו,  באמצעות דוא"ל ל: {$a}.';
+$string['subscribestate_unsubscribed'] = 'אינכם מנויים לקבלת עדכונים בדוא"ל מקבוצת־דיון זו. אם אתם מעוניינים להירשם כמנויים, הקליקו על  &lsquo;להירשם כמנוי&rsquo;.';
+$string['subscribestate_unsubscribed_thisgroup'] = 'אינכם מנויים לקבלת עדכונים בדוא"ל מקבוצה זו. אם אתם מעוניינים להירשם כמנויים, הקליקו על  &lsquo;הרשמה לקבוצה&rsquo;.';
+$string['subscribestop'] = 'אינני מעוניין בעותקי דוא"ל של פרסומים, מקבוצת־דיון זו.';
+$string['subscribe_already'] = 'הנכם רשומים כבר כמנויים.';
+$string['subscribe_already_group'] = 'הנכם רשומים כבר כמנויים לקבוצה זו.';
+$string['subscribe_confirm'] = 'נרשמתם כמנויים.';
+$string['subscribe_confirm_group'] = 'נרשמתם כמנויים לקבוצה.';
+$string['subscription'] = 'מנוי';
+$string['subscriptions'] = 'מנוים';
+$string['subscription_forced'] = 'אלצו את כולם להירשם כמנויים';
+$string['subscription_help'] = 'הנכם רשאים לאלץ את כל המשתמשים להיות מנויים, או להגדירם מראש כמנויים,אך  ההבדל הוא, שבשלב מאוחר יותר, תינתן להם האפשרות לבחור אם לבטל מנוי זה, או לא. יכולות אלו כוללות את כל המשתמשים (תלמידים וצוות) אשר משתתפים בקורס. משתמשים שאינם שייכים לקורס (כגון מנהלים) עדיין יכולים להירשם ,אם רצונם בכך.';
+$string['subscription_initially_subscribed'] = 'משתמשים רשומים כמנויים מלכתחילה';
+$string['subscription_not_permitted'] = 'אין אפשרות להירשם כמנויים';
+$string['subscription_permitted'] = 'ניתנת למשתמשים האפשרות לבחור אם להירשם כמנוי או לא.';
+$string['switchto_simple_text'] = 'תצוגה רגילה של קבוצת־דיון זו, אינה תמיד עובדת בצורה טובה עם טכנולוגיה מסייעת. לכן, מצורפת בנוסף, תצוגה
+פשוטה יותר, אשר מכילה את כל היכולות של קבוצת־הדיון.';
+$string['switchto_standard_text'] = 'הנכם משתמשים בתצוגה הרגילה של קבוצת־דיון זו, אשר
+ פועלת טוב יותר עם טכנולוגיה מסייעת';
+$string['text_asc'] = 'א-ת';
+$string['text_desc'] = 'ת-א';
+$string['timeend'] = 'תצוגה עד הסוף';
+$string['timestart'] = 'תצוגה רק מ-';
+$string['to'] = 'ל: {$a}';
+$string['trackreadposts'] = 'מעקב אחר פרסומים שטרם נצפו';
+$string['undelete'] = 'ביטול מחיקה';
+$string['undeletepost'] = 'ביטול מחיקת פרסום:  {$a}';
+$string['undeletepostbutton'] = 'ביטול מחיקת פרסום';
+$string['unread'] = 'טרם נצפה';
+$string['unsubscribe'] = 'ביטול הרשמה מקבוצת־דיון זו.';
+$string['unsubscribeall'] = 'ביטול הרשמה מכל קבוצות־הדיון';
+$string['unsubscribediscussion'] = 'ביטול הרשמה מדיון';
+$string['unsubscribegroup'] = 'ביטול הרשמה מקבוצה זו';
+$string['unsubscribegroup_partial'] = 'ביטול הרשמה מדיונים בקבוצה זו';
+$string['unsubscribelong'] = 'ביטול הרשמה מקבוצת־דיון';
+$string['unsubscribeselected'] = 'ביטול הרשמה של משתמשים מסוימים';
+$string['unsubscribeshort'] = 'ביטול הרשמה';
+$string['unsubscribe_already'] = 'אינכם רשומים יותר';
+$string['unsubscribe_already_group'] = 'אינכם רשומים יותר בקבוצה זו';
+$string['unsubscribe_confirm'] = 'בוטלה הרשמתכם';
+$string['unsubscribe_confirm_group'] = 'בוטלה הרשמתכם מהקבוצה';
+$string['unsubscribe_nopermission'] = 'אינכם רשאים לבטל את הרשמתם של משתמשים אחרים';
+$string['usebcc'] = 'שלחו דוא"ל עם נמענים נסתרים BCC';
+$string['useshared'] = 'קישור לקבוצת־דיון בעלת קוד הזיהוי:';
+$string['useshared_help'] = 'אם ברצונכם ליצור שכפול של קבוצת־דיון זו, השתמשו בתיבת סימון זו, והקישו את מספר הזיהוי של קבוצת־הדיון המקורית (אשר מחייבת אפשרות שיתוף).
+
+פעולה זו למעשה,אינה יוצרת קבוצת־דיון חדשה, אלא יוצרת קישור לקבוצת־דיון  קיימת. הייחודיות בכך  היא הזמינות  ואפשרויות מעקב ההתקדמות (מתבצעת ידנית בלבד).';
+$string['viewsubscribers'] = 'ניהול רשימת מנויים';
+$string['withremoveddiscussions'] = 'העברת דיונים ל:';
+$string['words'] = 'חיפוש';
+$string['yourrating'] = 'הדירוג לשלך:';
diff --git a/mod/forumng/lib.php b/mod/forumng/lib.php
new file mode 100644
index 0000000..f399db2
--- /dev/null
+++ b/mod/forumng/lib.php
@@ -0,0 +1,799 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Moodle API functions.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Add a forumng instance.
+ * @param stdClass $data the data to use to create the new forum.
+ * @param mod_forumng_mod_form $mform if this call came from a forum submit.
+ * @return int new forumng instance id
+ */
+function forumng_add_instance($forumng, $mform = null) {
+    global $DB;
+
+    // Avoid including forum libraries in large areas of Moodle code that
+    // require this lib.php; only include when functions are called.
+    require_once(dirname(__FILE__) . '/mod_forumng.php');
+
+    $useshared = !empty($forumng->usesharedgroup['useshared']);
+    if ($useshared) {
+        $idnumber = $forumng->usesharedgroup['originalcmidnumber'];
+        $originalcm = $DB->get_record('course_modules', array('idnumber' => $idnumber,
+                'module' => $DB->get_field('modules', 'id', array('name' => 'forumng'))), '*',
+                MUST_EXIST);
+        $originalforumng = $DB->get_record('forumng', array('id' => $originalcm->instance), '*',
+                MUST_EXIST);
+
+        // Create appropriate data for forumng table.
+        $forumng = (object)array(
+            'name' => $originalforumng->name,
+            'course' => $forumng->course,
+            'type' => 'clone',
+            'originalcmid' => $originalcm->id,
+            'coursemodule' => $forumng->coursemodule,
+            'introductioneditor' => array('text' => '', 'format' => FORMAT_HTML),
+        );
+    }
+
+    // Pick a random magic number.
+    $part1 = mt_rand(0, 99999999);
+    $part2 = mt_rand(0, 99999999);
+    while (strlen($part2) < 8) {
+        $part2 = '0' . $part2;
+    }
+    $forumng->magicnumber = $part1.$part2;
+
+    if ($mform) {
+        $forumng->introduction       = $forumng->introductioneditor['text'];
+        $forumng->introductionformat = $forumng->introductioneditor['format'];
+    }
+
+    $id = $DB->insert_record('forumng', $forumng);
+
+    // Handle post-creation actions (but only if a new forum actually was
+    // created, and not just a new reference to a shared one!).
+    if (!$useshared) {
+        $forum = mod_forumng::get_from_id($id, mod_forumng::CLONE_DIRECT, false);
+        $forum->created($forumng->cmidnumber);
+    }
+
+    // Handle any content in the introduction editor, including files.
+    // Some places that programmatically create forums will not have
+    // set this, which is fine, because in that case nothing need be done.
+    $context = context_module::instance($forumng->coursemodule);
+    if ($mform and !empty($forumng->introductioneditor['itemid'])) {
+        $draftitemid = $forumng->introductioneditor['itemid'];
+        $introduction = file_save_draft_area_files($draftitemid, $context->id,
+                'mod_forumng', 'introduction', 0, array('subdirs' => 1), $forumng->introduction);
+        if ($introduction != $forumng->introduction) {
+            $DB->set_field('forumng', 'introduction', $introduction, array('id' => $id));
+            $forumng->introduction = $introduction;
+        }
+    }
+
+    return $id;
+}
+
+function forumng_update_instance($forumng) {
+    global $DB, $CFG;
+    require_once(dirname(__FILE__).'/mod_forumng.php');
+    // Get the tag lib.php.
+    require_once($CFG->dirroot . '/tag/lib.php');
+
+    // Handle any content in the introduction editor, including files.
+    // Some places that programmatically update forums will not have
+    // set this, which is fine, because in that case nothing need be done.
+    if (!empty($forumng->introductioneditor)) {
+        $context = context_module::instance($forumng->coursemodule);
+        $forumng->introduction = $forumng->introductioneditor['text'];
+        $forumng->introductionformat = $forumng->introductioneditor['format'];
+        $draftitemid = $forumng->introductioneditor['itemid'];
+        if ($draftitemid) {
+            $forumng->introduction = file_save_draft_area_files($draftitemid, $context->id, 'mod_forumng', 'introduction',
+                    0, array('subdirs' => 1), $forumng->introduction);
+        }
+    }
+
+    $forumng->id = $forumng->instance;
+    $previous = $DB->get_record('forumng', array('id' => $forumng->id), '*', MUST_EXIST);
+    $DB->update_record('forumng', $forumng);
+
+    $forum = mod_forumng::get_from_id($forumng->id, mod_forumng::CLONE_DIRECT);
+    $forum->updated($previous);
+    if (isset($forumng->settags)) {
+        if (!isset($context)) {
+            $context = $forum->get_context(true);
+        }
+        core_tag_tag::set_item_tags('mod_forumng', 'forumng', $forumng->id, $context, $forumng->settags);
+    }
+
+    return true;
+}
+
+function forumng_delete_instance($id) {
+    global $DB, $OUTPUT;
+    require_once(dirname(__FILE__).'/mod_forumng.php');
+
+    $cm = get_coursemodule_from_instance('forumng', $id);
+    $forum = mod_forumng::get_from_id($id, mod_forumng::CLONE_DIRECT, true, $cm);
+    $forum->delete_all_data();
+    if (mod_forumng::search_installed()) {
+        $cm = $forum->get_course_module();
+        local_ousearch_document::delete_module_instance_data($cm);
+    }
+
+    if ($forum->is_shared()) {
+        // Find all the clone instances.
+        $clones = $forum->get_clone_details();
+        $transaction = $DB->start_delegated_transaction();
+        foreach ($clones as $clone) {
+            try {
+                course_delete_module($clone->context->instanceid);
+            } catch (moodle_exception $e) {
+                $OUTPUT->notification("Could not delete the Clone
+                        forumng (coursemoduleid) $clone->context->instanceid ", 'error');
+                return false;
+            }
+            rebuild_course_cache($clone->courseid, true);
+        }
+        $transaction->allow_commit();
+    }
+    return $DB->delete_records('forumng', array('id' => $id));
+}
+
+
+/**
+ * Obtains a search document given the ousearch parameters.
+ * @param object $document Object containing fields from the ousearch documents table
+ * @return mixed False if object can't be found, otherwise object containing the following
+ *   fields: ->content, ->title, ->url, ->activityname, ->activityurl,
+ *   and optionally ->extrastrings array and ->data
+ */
+function forumng_ousearch_get_document($document) {
+    require_once(dirname(__FILE__).'/mod_forumng.php');
+    return mod_forumng_post::search_get_page($document);
+}
+
+/**
+ * Update all documents for ousearch.
+ * @param bool $feedback If true, prints feedback as HTML list items
+ * @param int $courseid If specified, restricts to particular courseid
+ */
+function forumng_ousearch_update_all($feedback=false, $courseid=0) {
+    require_once(dirname(__FILE__).'/mod_forumng.php');
+    mod_forumng::search_update_all($feedback, $courseid);
+}
+
+/**
+ * Return the correct cm for clone forum.
+ * @param object $cm course module
+ * @param object $course course object
+ */
+function forumng_ousearch_add_visible_module($cm, $course) {
+    global $CFG, $FORUMNG_CLONE_MAP;
+    if (empty($FORUMNG_CLONE_MAP)) {
+        $FORUMNG_CLONE_MAP = array();
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+        $forums = mod_forumng::get_course_forums($course, 0,
+                mod_forumng::UNREAD_NONE, array(), true);
+
+        foreach ($forums as $id => $forum) {
+            if ($forum->is_shared()) {
+                $originalcmid = $forum->get_course_module_id(true);
+                $FORUMNG_CLONE_MAP[$originalcmid] = $forum->get_course_module();
+            }
+        }
+    }
+    if (array_key_exists($cm->id, $FORUMNG_CLONE_MAP)) {
+        return $FORUMNG_CLONE_MAP[$cm->id];
+    } else {
+        return $cm;
+    }
+}
+
+/**
+ * Returns all other caps used in module
+ */
+function forumng_get_extra_capabilities() {
+    return array('moodle/site:accessallgroups', 'moodle/site:viewfullnames',
+            'moodle/site:trustcontent', 'report/oualerts:managealerts',
+            'report/restrictuser:view', 'report/restrictuser:restrict',
+            'report/restrictuser:removerestrict');
+}
+
+/**
+ * Given a course_module object, this function returns any
+ * "extra" information that may be needed when printing
+ * this activity in a course listing.
+ * See get_array_of_activities() in course/lib.php
+ */
+function forumng_get_coursemodule_info($coursemodule) {
+    global $DB;
+
+    $forumng = $DB->get_record('forumng',
+            array('id' => $coursemodule->instance), 'id, name, type, intro, introformat');
+    if (!$forumng) {
+        return null;
+    }
+
+    $info = new cached_cm_info();
+    $info->customdata = (object)array('type' => $forumng->type);
+
+    if ($coursemodule->showdescription) {
+        // Convert intro to html. Do not filter cached version, filters run at display time.
+        $info->content = format_module_intro('forumng', $forumng, $coursemodule->id, false);
+    }
+
+    return $info;
+}
+
+/**
+ * File browsing support for forumng module.
+ * @param object $browser
+ * @param object $areas
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param int $itemid
+ * @param string $filepath
+ * @param string $filename
+ * @return file_info instance Representing an actual file or folder (null if not found
+ * or cannot access)
+ */
+function forumng_get_file_info($browser, $areas, $course, $cm, $context, $filearea,
+        $itemid, $filepath, $filename) {
+    global $CFG;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return null;
+    }
+    $fileareas = array('attachment', 'post');
+    if (!in_array($filearea, $fileareas)) {
+        return null;
+    }
+    try {
+        // This will not work for users who can only access the clone forum but cannot access
+        // the origin forumng. The ideal way is to pass in the real cloneid instead of using
+        // CLONE_DIRECT which means always get the origin forum.
+        // But we cannot get the cloneid in here without doing expensive querys such as get all
+        // the clone forums and check them one by one.
+        $post = mod_forumng_post::get_from_id($itemid, mod_forumng::CLONE_DIRECT);
+
+    } catch (coding_exception $e) {
+        return null;
+    }
+
+    $discussion = $post->get_discussion();
+    if (!$discussion->can_view()) {
+        return null;
+    }
+
+    $fs = get_file_storage();
+    $filepath = is_null($filepath) ? '/' : $filepath;
+    $filename = is_null($filename) ? '.' : $filename;
+    if (!($storedfile = $fs->get_file($context->id, 'mod_forumng', $filearea, $itemid,
+            $filepath, $filename))) {
+        return null;
+    }
+
+    $urlbase = $CFG->wwwroot . '/pluginfile.php';
+    return new file_info_stored($browser, $context, $storedfile, $urlbase, $filearea,
+            $itemid, true, true, false);
+}
+
+/**
+ * Create html fragment for display on myMoodle page, forums changed since
+ * user last visited
+ *
+ * @param $courses list of courses to output information from
+ * @param $htmlarray returned results appended html to display
+ */
+function forumng_print_overview($courses, &$htmlarray) {
+    global $USER, $CFG;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+    if (empty($courses) || !is_array($courses) || count($courses) == 0) {
+        return array();
+    }
+
+    $strnumunread = get_string('discussionsunread', 'forumng');
+    $strforum = get_string('modulename', 'forumng');
+
+    foreach ($courses as $course) {
+        $str = "";
+        $forums = array();
+        // Read tracking is for real users only.
+        if (mod_forumng::enabled_read_tracking() && !isguestuser() && isloggedin()) {
+            $forums = mod_forumng::get_course_forums($course,
+                    $USER->id, mod_forumng::UNREAD_DISCUSSIONS);
+            $modinfo = get_fast_modinfo($course);
+        }
+        if (!empty($forums)) {
+            foreach ($forums as $forum) {
+                // Only listing unread, not new & unread for performance.
+                if ($modinfo->get_cm($forum->get_course_module_id(true))->uservisible && $forum->has_unread_discussions()) {
+                    $str .= '<div class="overview forumng"><div class="name">' .
+                        $strforum . ':' . ' <a title="' . $strforum . '" href="' .
+                        $forum->get_url(mod_forumng::PARAM_HTML).'">' .
+                        $forum->get_name() . '</a></div>';
+                    $str .= '<div class="info">'.$forum->get_num_unread_discussions(). ' '.
+                            $strnumunread.'</div></div>';
+                }
+
+            }
+        }
+
+        if (!empty($str)) {
+            if (!array_key_exists($course->id, $htmlarray)) {
+                $htmlarray[$course->id] = array();
+            }
+            if (!array_key_exists('forumng', $htmlarray[$course->id])) {
+                $htmlarray[$course->id]['forumng'] = ''; // Initialize, avoid warnings.
+            }
+            $htmlarray[$course->id]['forumng'] .= $str;
+        }
+    }
+}
+
+/**
+ * Indicates API features that the forum supports.
+ *
+ * @param string $feature
+ * @return mixed True if yes (some features may use other values)
+ */
+function forumng_supports($feature) {
+    switch ($feature) {
+        case FEATURE_GROUPS:                  return true;
+        case FEATURE_IDNUMBER:                return true;
+        case FEATURE_GROUPINGS:               return true;
+        case FEATURE_MOD_INTRO:               return true;
+        case FEATURE_SHOW_DESCRIPTION:        return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
+        case FEATURE_COMPLETION_HAS_RULES:    return true;
+        case FEATURE_GRADE_HAS_GRADE:         return true;
+        case FEATURE_BACKUP_MOODLE2:          return true;
+        default: return null;
+    }
+}
+
+/**
+ * Obtains the automatic completion state for this forum based on any conditions
+ * in forum settings.
+ *
+ * @param object $course Course
+ * @param object $cm Course-module
+ * @param int $userid User ID
+ * @param bool $type Type of comparison (or/and; can be used as return value if no conditions)
+ * @return bool True if completed, false if not. (If no conditions, then return
+ *   value depends on comparison type)
+ */
+function forumng_get_completion_state($course, $cm, $userid, $type) {
+    // Use forum object to handle this request.
+    $forum = mod_forumng::get_from_cmid($cm->id, mod_forumng::CLONE_DIRECT);
+    return $forum->get_completion_state($userid, $type);
+}
+
+/**
+ * Used by course/user.php to display this module's user activity outline.
+ * @param object $course as this is a standard function this is required but not used here
+ * @param object $user Moodle user ob
+ * @param object $mod not used here
+ * @param object $forum Moodle forumng object
+ * @return object A standard object with 2 variables: info (number of posts for this user) and
+ * time (last modified)
+ */
+function forumng_user_outline($course, $user, $mod, $forum) {
+    require_once(dirname(__FILE__).'/mod_forumng.php');
+    if ($posts = mod_forumng::get_user_activityreport($forum->id, $user->id)) {
+        $result = new object();
+        $result->info = get_string("numposts", "forumng", $posts->postcount);
+        $result->time = $posts->lastpost;
+        return $result;
+    } else {
+        return null;
+    }
+}
+
+/**
+ * List of view style log actions
+ * @return array
+ */
+function forumng_get_view_actions() {
+    return array('view', 'view all', 'view discussion');
+}
+
+/**
+ * List of update style log actions
+ * @return array
+ */
+function forumng_get_post_actions() {
+    return array('update', 'add', 'add discussion', 'add reply', 'delete post', 'edit post',
+            'delete discussion', 'undelete post', 'undelete discussion', 'lock discussion');
+}
+
+
+function mod_forumng_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload) {
+    global $CFG, $USER;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+    if ($filearea == 'introduction') {
+        $filename = array_pop($args);
+        $filepath = $args ? '/'.implode('/', $args).'/' : '/';
+        $fs = get_file_storage();
+        $file = $fs->get_file($context->id, 'mod_forumng', $filearea, 0, $filepath, $filename);
+        if (!($file) || $file->is_directory()) {
+            send_file_not_found();
+        }
+        $lifetime = isset($CFG->filelifetime) ? $CFG->filelifetime : 86400;
+        send_stored_file($file, $lifetime, 0);
+    }
+
+    // Check remaining slash arguments, might have hash for image so the args may be 2 or 3.
+    if (count($args) != 2 && count($args) != 3) {
+        send_file_not_found();
+    }
+    list ($itemid, $filename) = $args;
+    $filename = urldecode($filename);
+
+    if ($filearea == 'attachment' || $filearea == 'message') {
+        // Get post object and check permissions.
+        $cloneid = optional_param('clone', 0, PARAM_INT);
+        $post = mod_forumng_post::get_from_id($itemid, $cloneid);
+        $requirelogin = true;
+        if (array_key_exists(2, $args) && $filearea == 'message') {
+            // Check server hash and receive hash.
+            $hash = $args[2];
+            $salt = context_course::instance($course->id)->id;
+            $serverhash = sha1($filename . $salt);
+            if ($serverhash == $hash) {
+                $requirelogin = false;
+            }
+        }
+        if ($requirelogin) {
+            $post->require_view();
+        }
+        if ($cloneid) {
+            // File is actually in other context.
+            $context = $post->get_forum()->get_context(true);
+        }
+    } else if ($filearea == 'draft' || $filearea == 'draftmessage') {
+        // Get draft object and check it's yours (note: I'm not sure whether it is possible to
+        // ever access draft attachments in this manner, as while editing, this access is not
+        // used; maybe from the X view, but I don't think it works there, however perhaps in
+        // future).
+        $draft = mod_forumng_draft::get_from_id($itemid);
+        if ($draft->get_user_id() !== $USER->id) {
+            send_file_not_found();
+        }
+    } else {
+        send_file_not_found();
+    }
+
+    // Get file object and send it.
+    $fs = get_file_storage();
+    $file = $fs->get_file($context->id, 'mod_forumng', $filearea, $itemid, '/', $filename);
+    if (!($file) || $file->is_directory()) {
+        send_file_not_found();
+    }
+    $lifetime = isset($CFG->filelifetime) ? $CFG->filelifetime : 86400;
+    send_stored_file($file, $lifetime, 0);
+}
+
+function mod_forumng_cm_info_view(cm_info $cm) {
+    global $CFG;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+    static $forums = null;
+    if ($forums === null) {
+        // Read tracking is for real users only.
+        if (mod_forumng::enabled_read_tracking() && !isguestuser() && isloggedin()) {
+            $forums = mod_forumng::get_course_forums(
+                    $cm->get_course(), 0, mod_forumng::UNREAD_BINARY);
+        } else {
+            $forums = array();
+        }
+    }
+
+    // If current forum is listed, check whether it's unread or not.
+    if (array_key_exists($cm->instance, $forums)) {
+        if ($forums[$cm->instance]->has_unread_discussions()) {
+            $cm->set_after_link('<span class="unread">' .
+                    get_string('hasunreadposts', 'forumng') . '</span>');
+        }
+    }
+}
+
+/**
+ * Sets the module uservisible to false if the user has not got the view capability
+ * @param cm_info $cm
+ */
+function mod_forumng_cm_info_dynamic(cm_info $cm) {
+    if (!has_capability('mod/forumng:view',
+            context_module::instance($cm->id))) {
+        $cm->set_user_visible(false);
+        $cm->set_available(false);
+    }
+}
+
+/**
+ * Return forums on course that have unread posts for current user
+ *
+ * @param stdClass $course
+ * @return array
+ */
+function forumng_get_ourecent_activity($course) {
+    global $CFG;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+    $forums = mod_forumng::get_course_forums($course, 0, mod_forumng::UNREAD_BINARY);
+    $return = array();
+    foreach ($forums as $forum) {
+        if ($forum->has_unread_discussions()) {
+            $data = new stdClass();
+            $data->cm = $forum->get_course_module();
+            $data->icon = '%%unread%%';
+            $return[$data->cm->id] = $data;
+        }
+    }
+    return $return;
+}
+
+/**
+ * Returns an array of recipients for OU alerts
+ * @param char $type
+ * @param int $id
+ * @returns array
+ */
+function forumng_oualerts_additional_recipients($type, $id) {
+    global $CFG;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng_discussion.php');
+
+    $recipents = array();
+    if ($type == 'post') {
+        $discussion = mod_forumng_discussion::get_from_post_id($id, mod_forumng::CLONE_DIRECT);
+        $forum = $discussion->get_forum();
+        $recipients = $forum->get_reportingemails();
+    }
+    return($recipients);
+}
+
+/**
+ * Return post subject or current discussion title
+ * @param char $item
+ * @param int $id
+ * @returns string
+ */
+function forumng_oualerts_custom_info($item, $id) {
+    global $CFG;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng_post.php');
+
+    $title = '';
+    if ($item == 'post') {
+        $post = mod_forumng_post::get_from_id($id, mod_forumng::CLONE_DIRECT);
+    }
+
+    if ($post) {
+        $title = $post->get_subject();
+        if ($title == null) {
+            // We need to get the last previous post that has a subject field.
+            $title = $post->get_effective_subject(true);
+        }
+    }
+    return $title;
+}
+
+/**
+ * Provides a link for managing OU alerts reports
+ * @param settings_navigation $settings
+ * @param navigation_node $node
+ */
+function forumng_extend_settings_navigation(settings_navigation $settings, navigation_node $node) {
+    global $PAGE, $CFG, $COURSE;
+    require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+    $forum = mod_forumng::get_from_cmid($PAGE->cm->id, mod_forumng::CLONE_DIRECT);
+    $context = $forum->get_context();
+    if ($forum->oualerts_enabled() && has_capability('report/oualerts:managealerts', $PAGE->cm->context)
+            && ((count($forum->get_reportingemails()) > 0)) ) {
+        $managelevelnode = $node->add(get_string('managepostalerts', 'forumng'),
+            new moodle_url( '/report/oualerts/manage.php',
+            array('coursename' => $COURSE->id, 'contextcourseid' => $COURSE->id, 'cmid' => $PAGE->cm->id)));
+    }
+}
+
+/**
+ * Return rating related permissions
+ *
+ * @param string $contextid the context id
+ * @param string $component the component to get rating permissions for
+ * @param string $ratingarea the rating area to get permissions for
+ * @return array an associative array of the user's rating permissions
+ */
+function forumng_rating_permissions($contextid, $component, $ratingarea) {
+    $context = context::instance_by_id($contextid, MUST_EXIST);
+    if ($component != 'mod_forumng' || $ratingarea != 'post') {
+        // We don't know about this component/ratingarea so just return null to get the
+        // default restrictive permissions.
+        return null;
+    }
+    return array(
+        'view' => has_capability('mod/forumng:viewrating', $context),
+        'viewany' => has_capability('mod/forumng:viewanyrating', $context),
+        'viewall' => has_capability('mod/forumng:viewallratings', $context),
+        'rate' => has_capability('mod/forumng:rate', $context)
+    );
+}
+
+/**
+ * Validates a submitted rating
+ * @param array $params submitted data
+ *            context => object the context in which the rated items exists [required]
+ *            component => The component for this module - should always be mod_forum [required]
+ *            ratingarea => object the context in which the rated items exists [required]
+ *            itemid => int the ID of the [FORUMNG-POST] object being rated [required]
+ *            scaleid => int the scale from which the user can select a rating. Used for bounds checking. [required]
+ *            rating => int the submitted rating
+ *            rateduserid => int the id of the user whose items have been rated. NOT the user who submitted the ratings.
+ *                           0 to update all. [required]
+ *            aggregation => int the aggregation method to apply when calculating grades ie RATING_AGGREGATE_AVERAGE [optional]
+ * @return boolean true if the rating is valid. Will throw rating_exception if not
+ */
+function forumng_rating_validate($params) {
+    global $DB, $USER;
+    // Check the component is mod_forum.
+    if ($params['component'] != 'mod_forumng') {
+        throw new rating_exception('invalidcomponent');
+    }
+
+    // Check the ratingarea is post (the only rating area in forumng).
+    if ($params['ratingarea'] != 'post') {
+        throw new rating_exception('invalidratingarea');
+    }
+
+    // Check the rateduserid is not the current user .. you can't rate your own posts.
+    if ($params['rateduserid'] == $USER->id) {
+        throw new rating_exception('nopermissiontorate');
+    }
+
+    $forumngsql = "SELECT fp.id, f.id as forumngid, f.ratingscale , f.course, fp.created,
+                          f.enableratings, f.ratingfrom, f.ratinguntil
+                     FROM {forumng} f
+                     JOIN {forumng_discussions} fd ON fd.forumngid = f.id
+                     JOIN {forumng_posts} fp ON fp.discussionid = fd.id
+                    WHERE fp.id = :itemid";
+    $forumngsqlparams = array('itemid' => $params['itemid']);
+    $info = $DB->get_record_sql($forumngsql, $forumngsqlparams);
+    if (!$info) {
+        // Item doesn't exist.
+        throw new rating_exception('invaliditemid');
+    }
+    if ($info->ratingscale != $params['scaleid']) {
+        // The scale being submitted doesnt match the one in the database.
+        throw new rating_exception('invalidscaleid');
+    }
+
+    // Check that the submitted rating is valid for the scale.
+
+    // Lower limit.
+    if ($params['rating'] < 0  && $params['rating'] != RATING_UNSET_RATING) {
+        throw new rating_exception('invalidnum');
+    }
+
+    // Upper limit.
+    if ($info->ratingscale < 0) {
+        // Its a custom scale.
+        $scalerecord = $DB->get_record('scale', array('id' => -$info->ratingscale));
+        if ($scalerecord) {
+            $scalearray = explode(',', $scalerecord->scale);
+            if ($params['rating'] > count($scalearray)) {
+                throw new rating_exception('invalidnum');
+            }
+        } else {
+            throw new rating_exception('invalidscaleid');
+        }
+    } else if ($params['rating'] > $info->ratingscale) {
+        // If its numeric and submitted rating is above maximum.
+        throw new rating_exception('invalidnum');
+    }
+
+    if (!$info->enableratings) {
+        // Item isnt approved.
+        throw new rating_exception('nopermissiontorate');
+    }
+
+    // Check the item we're rating was created in the assessable time window.
+    if (!empty($info->ratingfrom) && !empty($info->ratinguntil)) {
+        if ($info->created < $info->ratingfrom || $info->created > $info->ratinguntil) {
+            throw new rating_exception('notavailable');
+        }
+    }
+
+    $cm = get_coursemodule_from_instance('forumng', $info->forumngid, $info->course, false, MUST_EXIST);
+    $context = context_module::instance($cm->id, MUST_EXIST);
+
+    // If the supplied context doesnt match the item's context.
+    if ($context->id != $params['context']->id) {
+        throw new rating_exception('invalidcontext');
+    }
+
+    return true;
+}
+
+/**
+ * Can the current user see ratings for a given itemid?
+ *
+ * @param array $params submitted data
+ *            contextid => int contextid [required]
+ *            component => The component for this module - should always be mod_forumng [required]
+ *            ratingarea => object the context in which the rated items exists [required]
+ *            itemid => int the ID of the object being rated [required]
+ *            scaleid => int scale id [optional]
+ * @return bool
+ * @throws coding_exception
+ * @throws rating_exception
+ */
+function mod_forumng_rating_can_see_item_ratings($params) {
+    require_once(dirname(__FILE__) . '/mod_forumng.php');
+    require_once(dirname(__FILE__) . '/mod_forumng_post.php');
+
+    // Check the component is mod_forum.
+    if (!isset($params['component']) || $params['component'] != 'mod_forumng') {
+        throw new rating_exception('invalidcomponent');
+    }
+
+    // Check the ratingarea is post (the only rating area in forum).
+    if (!isset($params['ratingarea']) || $params['ratingarea'] != 'post') {
+        throw new rating_exception('invalidratingarea');
+    }
+
+    if (!isset($params['itemid'])) {
+        throw new rating_exception('invaliditemid');
+    }
+
+    $post = mod_forumng_post::get_from_id($params['itemid'], mod_forumng::CLONE_DIRECT);
+    if (!$post->get_discussion()->can_view()) {
+        return false;
+    }
+    $context = context::instance_by_id($params['contextid']);
+    if (!has_capability('mod/forumng:viewallratings', $context)) {
+        return false;
+    }
+    return true;
+}
+
+/**
+ * Update activity grades.
+ *
+ * @param stdClass $forumng database record
+ * @param int $userid specific user only, 0 means all
+ * @param bool $nullifnone - not used
+ */
+function forumng_update_grades($forumng, $userid = 0, $nullifnone = true) {
+    require_once(dirname(__FILE__) . '/mod_forumng.php');
+    $cm = get_coursemodule_from_instance('forumng', $forumng->id);
+    $forum = mod_forumng::get_from_id($forumng->id, mod_forumng::CLONE_DIRECT, true, $cm);
+    $forum->update_grades($userid, null);
+}
diff --git a/mod/forumng/locallib.php b/mod/forumng/locallib.php
new file mode 100644
index 0000000..f8185a8
--- /dev/null
+++ b/mod/forumng/locallib.php
@@ -0,0 +1,28 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+
+/**
+ * Local lib for ForumNG
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+@include_once($CFG->dirroot . '/mod/forumng/feature/export/portfoliolib.php');
diff --git a/mod/forumng/markread.php b/mod/forumng/markread.php
new file mode 100644
index 0000000..6b8706b
--- /dev/null
+++ b/mod/forumng/markread.php
@@ -0,0 +1,104 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Marks a discussion or forum read.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// This script handles requests to mark a discussion or forum read (without
+// actually reading it).
+
+// Can be called with id= (cmid) or d= (discussion id).
+$cmid = optional_param('id', 0, PARAM_INT);
+$discussionid = optional_param('d', 0, PARAM_INT);
+$postid = optional_param('p', 0, PARAM_INT);
+if ((!$cmid && !$discussionid && !$postid) || ($cmid && $discussionid && $postid)) {
+    print_error('error_markreadparams', 'forumng');
+}
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$ajax = optional_param('ajax', 0, PARAM_BOOL);
+
+// Permitted values 'view', 'discuss'
+$back = optional_param('back', '', PARAM_ALPHA);
+if (!preg_match('~^(discuss|view)$~', $back)) {
+    $back = 'view';
+}
+if (($back == 'discuss' && !$discussionid)) {
+    $back = 'view';
+}
+if ($postid) {
+    $back = 'discuss';
+}
+
+// Handle whole forum
+if ($cmid) {
+    $forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+    $groupid = optional_param('group', -1, PARAM_INT);
+    if ($groupid == 0) {
+        // Just the distinction between 0 and null
+        $groupid = mod_forumng::ALL_GROUPS;
+    } else if ($groupid == -1) {
+        $groupid = mod_forumng::NO_GROUPS;
+    }
+    $forum->require_view($groupid);
+    if (!$forum->can_mark_read()) {
+        print_error('error_cannotmarkread', 'forumng');
+    }
+    $forum->mark_read($groupid);
+}
+
+// Handle single discussion
+if ($discussionid) {
+    $discussion = mod_forumng_discussion::get_from_id($discussionid, $cloneid);
+    $forum = $discussion->get_forum();
+    $discussion->require_view();
+    if (!$discussion->get_forum()->can_mark_read()) {
+        print_error('error_cannotmarkread', 'forumng');
+    }
+    $discussion->mark_read();
+    $cmid = $discussion->get_forum()->get_course_module_id();
+}
+
+// Handle single post.
+if ($postid) {
+    $post = mod_forumng_post::get_from_id($postid, $cloneid);
+    $discussion = $post->get_discussion();
+    $forum = $discussion->get_forum();
+    $post->require_view();
+    if (!$forum->can_mark_read()) {
+        print_error('error_cannotmarkread', 'forumng');
+    }
+    $post->mark_read();
+}
+
+if ($ajax) {
+    echo 'ok';
+    exit;
+}
+
+// Redirect back
+if ($back == 'discuss') {
+    redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) . ($postid ? "#p$postid" : ''));
+} else {
+    redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
+}
diff --git a/mod/forumng/mod_form.php b/mod/forumng/mod_form.php
new file mode 100644
index 0000000..f126c3f
--- /dev/null
+++ b/mod/forumng/mod_form.php
@@ -0,0 +1,557 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/course/moodleform_mod.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+/**
+ * Form for editing module settings.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_mod_form extends moodleform_mod {
+
+    private $clone;
+
+    public function definition() {
+
+        global $CFG, $COURSE, $DB;
+        $mform = $this->_form;
+        $coursecontext = context_course::instance($COURSE->id);
+        $forumng = $this->_instance ? $DB->get_record('forumng', array('id' => $this->_instance)) : null;
+        $this->clone = $forumng ? $forumng->originalcmid : 0;
+
+        // If this is a clone, don't show the normal form.
+        if ($this->clone) {
+            $mform->addElement('hidden', 'name', $forumng->name);
+            if (!empty($CFG->formatstringstriptags)) {
+                $mform->setType('name', PARAM_TEXT);
+            } else {
+                $mform->setType('name', PARAM_NOTAGS);
+            }
+            $mform->addElement('static', 'sharedthing', '', get_string(
+                    'sharedinfo', 'forumng',
+                    $CFG->wwwroot . '/course/modedit.php?update=' .
+                    $this->clone . '&amp;return=1'));
+            $this->shared_definition_part($coursecontext);
+            return;
+        }
+
+        $mform->addElement('header', 'general', get_string('general', 'form'));
+
+        // Forum name.
+        $mform->addElement('text', 'name', get_string('forumname', 'forumng'),
+                array('size' => '64'));
+        if (!empty($CFG->formatstringstriptags)) {
+            $mform->setType('name', PARAM_TEXT);
+        } else {
+            $mform->setType('name', PARAM_NOTAGS);
+        }
+        $mform->addRule('name', null, 'required', null, 'client');
+        $mform->addRule('name', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');
+
+        // Forum types.
+        $types = forumngtype::get_all();
+        $options = array();
+        foreach ($types as $type) {
+            if ($type->is_user_selectable()) {
+                $options[$type->get_id()] = $type->get_name();
+            }
+        }
+        $mform->addElement('select', 'type', get_string('forumtype', 'forumng'), $options);
+        $mform->addHelpButton('type', 'forumtype', 'forumng');
+        $mform->setDefault('type', 'general');
+
+        $this->standard_intro_elements(get_string('forumdescription', 'forumng'));
+
+        $mform->addElement('editor', 'introductioneditor',
+                get_string('forumintro', 'forumng'), array('rows' => 15),
+                array('maxfiles' => EDITOR_UNLIMITED_FILES, 'noclean' => true, 'context' => $this->context, 'subdirs' => true));
+        $mform->setType('introductioneditor', PARAM_RAW); // No XSS prevention here, users must be trusted.
+
+        // Subscription option displays only if enabled at site level.
+        if ($CFG->forumng_subscription == -1) {
+            $options = mod_forumng::get_subscription_options();
+            $mform->addElement('select', 'subscription',
+                get_string('subscription', 'forumng'), $options);
+            $mform->setDefault('subscription', mod_forumng::SUBSCRIPTION_PERMITTED);
+            $mform->addHelpButton('subscription', 'subscription', 'forumng');
+        } else {
+            // Hidden element contains default value (not used anyhow).
+            $mform->addElement('hidden', 'subscription',
+                mod_forumng::SUBSCRIPTION_PERMITTED);
+            $mform->setType('subscription', PARAM_INT);
+        }
+
+        // Max size of attachments.
+        $choices = get_max_upload_sizes($CFG->maxbytes, $COURSE->maxbytes);
+        $choices[-1] = get_string('uploadnotallowed');
+        $mform->addElement('select', 'attachmentmaxbytes',
+            get_string('attachmentmaxbytes', 'forumng'), $choices);
+        $mform->addHelpButton('attachmentmaxbytes', 'attachmentmaxbytes', 'forumng');
+        $mform->setDefault('attachmentmaxbytes', $CFG->forumng_attachmentmaxbytes);
+
+        // Email address for reporting unacceptable post for this forum, default is blank.
+        $mform->addElement('text', 'reportingemail', get_string('reportingemail', 'forumng'),
+            array('size' => 64));
+        $mform->setType('reportingemail', PARAM_NOTAGS);
+        $mform->addRule('reportingemail',
+                get_string('maximumchars', '', 255), 'maxlength', 255, 'client');
+        $mform->addHelpButton('reportingemail', 'reportingemail', 'forumng');
+        $mform->addElement('checkbox', 'canpostanon', get_string('canpostanon', 'forumng'));
+        $mform->addHelpButton('canpostanon', 'canpostanon', 'forumng');
+        // Atom/RSS feed on/off/discussions-only.
+        if ($CFG->enablerssfeeds && !empty($CFG->forumng_enablerssfeeds)) {
+            if ($CFG->forumng_feedtype == -1 || $CFG->forumng_feeditems == -1) {
+                $mform->addElement('header', '', get_string('feeds', 'forumng'));
+            }
+
+            if ($CFG->forumng_feedtype == -1) {
+                $mform->addElement('select', 'feedtype',
+                    get_string('feedtype', 'forumng'), mod_forumng::get_feedtype_options());
+                $mform->setDefault('feedtype', mod_forumng::FEEDTYPE_ALL_POSTS);
+                $mform->addHelpButton('feedtype', 'feedtype', 'forumng');
+            }
+
+            // Atom/RSS feed item count.
+            if ($CFG->forumng_feeditems == -1) {
+                $mform->addElement('select', 'feeditems',
+                    get_string('feeditems', 'forumng'), mod_forumng::get_feeditems_options());
+                $mform->setDefault('feeditems', 20);
+                $mform->addHelpButton('feeditems', 'feeditems', 'forumng');
+            }
+        }
+
+        // Add tagging to discussions.
+        if ($CFG->usetags && core_tag_tag::is_enabled('mod_forumng', 'forumng')) {
+            $mform->addElement('header', '', get_string('tagging', 'forumng'));
+            // Enable tagging.
+            $mform->addElement('checkbox', 'enabletags', get_string('enabletagging', 'forumng'));
+            $mform->addHelpButton('enabletags', 'tagging', 'forumng');
+            // Add 'Set' forumng wide named tags to discussion tagging dropdowns.
+            $settags = null;
+            if ($forumng) {
+                $settags = mod_forumng::get_set_tags($this->_instance);
+                // Create 'Set' forumng wide tags.
+                $mform->addElement('tags', 'settags', get_string('setforumtags', 'forumng'),
+                        array('itemtype' => 'forumng', 'component' => 'mod_forumng'));
+                $mform->disabledIf('settags', 'enabletags', 'notchecked');
+                $mform->setType('settags', PARAM_TAGLIST);
+                $mform->setDefault('settags', $settags);
+                $mform->addHelpButton('settags', 'settags', 'forumng');
+            }
+        }
+
+        // Ratings header.
+        $mform->addElement('header', '', get_string('ratings', 'forumng'));
+
+        $options = array(mod_forumng::FORUMNG_NO_RATING => get_string('noratings', 'forumng'),
+                        mod_forumng::FORUMNG_RATING_OBSOLETE => get_string('forumngratingsobsolete', 'forumng'),
+                        mod_forumng::FORUMNG_STANDARD_RATING => get_string('standardratings', 'forumng'));
+        $mform->addElement('select', 'enableratings', get_string('enableratings', 'forumng'), $options);
+        $mform->addHelpButton('enableratings', 'enableratings', 'forumng');
+
+        // Scale.
+        $mform->addElement('modgrade', 'ratingscale', get_string('scale'), null, true);
+        $mform->disabledIf('ratingscale', 'enableratings', 'eq', 0);
+        $mform->setDefault('ratingscale', 5);
+
+        // From/until times.
+        $mform->addElement('date_time_selector', 'ratingfrom',
+                get_string('ratingfrom', 'forumng'), array('optional' => true));
+        $mform->disabledIf('ratingfrom', 'enableratings', 'eq', 0);
+
+        $mform->addElement('date_time_selector', 'ratinguntil',
+                get_string('ratinguntil', 'forumng'), array('optional' => true));
+        $mform->disabledIf('ratinguntil', 'enableratings', 'eq', 0);
+
+        $mform->addElement('text', 'ratingthreshold',
+            get_string('ratingthreshold', 'forumng'));
+        $mform->setType('ratingthreshold', PARAM_INT);
+        $mform->setDefault('ratingthreshold', 1);
+        $mform->addRule('ratingthreshold',
+            get_string('error_ratingthreshold', 'forumng'),
+            'regex', '/[1-9][0-9]*/', 'client');
+        $mform->addHelpButton('ratingthreshold', 'ratingthreshold', 'forumng');
+        $mform->disabledIf('ratingthreshold', 'enableratings', 'neq', mod_forumng::FORUMNG_RATING_OBSOLETE);
+
+        // Grading.
+        $mform->addElement('header', '', get_string('grading', 'forumng'));
+
+        $mform->addElement('select', 'grading', get_string('grade'),
+            mod_forumng::get_grading_options());
+        $mform->setDefault('grading', mod_forumng::GRADING_NONE);
+        $mform->addHelpButton('grading', 'grading', 'forumng');
+
+        $mform->addElement('modgrade', 'gradingscale', get_string('gradingscale', 'forumng'));
+        $mform->disabledIf('gradingscale', 'grading', 'ne', mod_forumng::GRADING_MANUAL);
+        $mform->setDefault('gradingscale', 5);
+
+        // Blocking header.
+        $mform->addElement('header', '', get_string('limitposts', 'forumng'));
+
+        // Post dates.
+        $mform->addElement('date_time_selector', 'postingfrom',
+                get_string('postingfrom', 'forumng'), array('optional' => true));
+        $mform->addElement('date_time_selector', 'postinguntil',
+                get_string('postinguntil', 'forumng'), array('optional' => true));
+
+        // User limits.
+        $limitgroup = array();
+        $limitgroup[] = $mform->createElement(
+            'checkbox', 'enablelimit', '');
+
+        $options = mod_forumng::get_max_posts_period_options();
+
+        $limitgroup[] = $mform->createElement('text', 'maxpostsblock',
+            '', array('size' => 3));
+        $limitgroup[] = $mform->createElement('static', 'staticthing', '',
+            ' ' . get_string('postsper', 'forumng') . ' ');
+        $limitgroup[] = $mform->createElement('select', 'maxpostsperiod',
+            '', $options);
+
+        $mform->addGroup($limitgroup, 'limitgroup',
+            get_string('enablelimit', 'forumng'));
+
+        $mform->disabledIf('limitgroup[maxpostsblock]', 'limitgroup[enablelimit]');
+        $mform->disabledIf('limitgroup[maxpostsperiod]', 'limitgroup[enablelimit]');
+
+        $mform->addHelpButton('limitgroup', 'enablelimit', 'forumng');
+
+        $mform->setType('limitgroup[maxpostsblock]', PARAM_INT);
+        $mform->setDefault('limitgroup[maxpostsblock]', '10');
+
+        // Remove old discussion.
+        $options = array();
+        $options[0] = get_string('removeolddiscussionsdefault', 'forumng');
+        for ($i = 1; $i <= 36; $i++) {
+            $options[$i * 2592000] = $i > 1 ? get_string('nummonths', 'moodle', $i) : get_string('onemonth', 'forumng');
+        }
+        $mform->addElement('header', '', get_string('removeolddiscussions', 'forumng'));
+        $mform->addElement('select', 'removeafter',
+                get_string('removeolddiscussionsafter', 'forumng'), $options);
+        $mform->addHelpButton('removeafter', 'removeolddiscussions', 'forumng');
+
+        $options = array();
+        $options[0] = get_string('deletepermanently', 'forumng');
+        $options[-1] = get_string('automaticallylock', 'forumng');
+        $modinfo = get_fast_modinfo($COURSE);
+        $targetforumngid = $this->_instance ? $this->_instance : 0;
+        // Add all instances to drop down if the user can access them and
+        // it's not the same as the current forum.
+        if (array_key_exists('forumng', $modinfo->instances)) {
+            foreach ($modinfo->instances['forumng'] as $info) {
+                if ($info->uservisible && $targetforumngid != $info->instance) {
+                    $options[$info->instance] = $info->name;
+                }
+            }
+        }
+        $mform->addElement('select', 'removeto',
+                get_string('withremoveddiscussions', 'forumng'), $options);
+        $mform->disabledIf('removeto', 'removeafter', 'eq', 0);
+        $mform->addHelpButton('removeto', 'withremoveddiscussions', 'forumng');
+
+        // Sharing options are advanced and for administrators only.
+        if ($CFG->forumng_enableadvanced && has_capability('mod/forumng:addinstance', context_system::instance())) {
+            $mform->addElement('header', '', get_string('sharing', 'forumng'));
+            $mform->addElement('advcheckbox', 'shared', get_string('shared', 'forumng'));
+            $mform->addHelpButton('shared', 'shared', 'forumng');
+
+            // Only when creating a forum, you can choose to make it a clone.
+            if (!$this->_instance) {
+                $sharegroup = array();
+                $sharegroup[] = $mform->createElement('checkbox', 'useshared', '');
+                $sharegroup[] = $mform->createElement('text', 'originalcmidnumber', '');
+                $mform->setType('usesharedgroup[originalcmidnumber]', PARAM_RAW);
+                $mform->addGroup($sharegroup, 'usesharedgroup',
+                        get_string('useshared', 'forumng'));
+                $mform->disabledIf('usesharedgroup[originalcmidnumber]',
+                        'usesharedgroup[useshared]', 'notchecked');
+                $mform->addHelpButton('usesharedgroup', 'useshared', 'forumng');
+            }
+        }
+
+        // Do definition that is shared with clone version of form.
+        $this->shared_definition_part($coursecontext);
+
+        if (count(mod_forumng_utils::get_convertible_forums($COURSE)) > 0 && !$this->_instance) {
+            $mform->addElement('static', '', '', '<div class="forumng-convertoffer">' .
+                get_string('offerconvert', 'forumng', $CFG->wwwroot .
+                '/mod/forumng/convert.php?course=' . $COURSE->id) . '</div>');
+        }
+    }
+
+    private function shared_definition_part($coursecontext) {
+        $this->standard_coursemodule_elements();
+        $this->add_action_buttons();
+    }
+
+    private function validate_emails($emails) {
+        // Loop through string looking for ';' as seperators.
+        $emailarray = explode(';' , $emails);
+        foreach ($emailarray as $email) {
+            if (!validate_email($email) ) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public function validation($data, $files) {
+        global $COURSE, $DB;
+        $errors = parent::validation($data, $files);
+
+        if (isset($data['limitgroup']['maxpostsblock']) &&
+            !preg_match('/^[0-9]{1,9}$/', $data['limitgroup']['maxpostsblock'])) {
+            $errors['limitgroup'] = get_string('err_numeric', 'form');
+        }
+        if (!empty($data['reportingemail']) && !$this->validate_emails($data['reportingemail'])) {
+            $errors['reportingemail'] = get_string('invalidemail', 'forumng');
+        }
+
+        // If old discussions are set to be moved to another forum...
+        $targetforumngid = isset($data['removeto']) ? $data['removeto'] : 0;
+        $removeafter = isset($data['removeafter']) ? $data['removeafter'] : 0;
+        if ($removeafter && $targetforumngid > 0) {
+            $modinfo = get_fast_modinfo($COURSE);
+            // Look for target forum.
+            if (!array_key_exists($targetforumngid, $modinfo->instances['forumng'])) {
+                $errors['removeto'] = get_string('errorinvalidforum', 'forumng');
+            }
+        }
+
+        // If sharing is turned on, check requirements.
+        if (!empty($data['shared'])) {
+            if (!empty($data['groupmode'])) {
+                $errors['groupmode'] = get_string('error_notwhensharing', 'forumng');
+            }
+            if (!empty($data['grading'])) {
+                $errors['grading'] = get_string('error_notwhensharing', 'forumng');
+            }
+            if (empty($data['cmidnumber'])) {
+                $errors['cmidnumber'] = get_string('error_sharingrequiresidnumber', 'forumng');
+            } else {
+                // Check it's unique.
+                $cmid = isset($data['coursemodule']) ? (int)$data['coursemodule'] : 0;
+                if ($DB->count_records_select('course_modules', "idnumber = ? AND id <> ?",
+                        array($data['cmidnumber'], $cmid))) {
+                    $errors['cmidnumber'] = get_string('error_sharingrequiresidnumber', 'forumng');
+                }
+            }
+        } else if (isset($data['shared'])) {
+            // They are trying to turn sharing off. You aren't allowed to do
+            // this if there are existing references.
+            $cmid = isset($data['coursemodule']) ? (int)$data['coursemodule'] : -1;
+            if ($DB->count_records('forumng', array('originalcmid' => $cmid))) {
+                $errors['shared'] = get_string('error_sharinginuse', 'forumng');
+            }
+        }
+
+        if (!empty($data['usesharedgroup']['useshared'])) {
+            if (empty($data['usesharedgroup']['originalcmidnumber'])) {
+                $errors['usesharedgroup'] = get_string('error_sharingidnumbernotfound', 'forumng');
+            } else {
+                // Check we can find it.
+                if (!mod_forumng::get_shared_cm_from_idnumber(
+                        $data['usesharedgroup']['originalcmidnumber'])) {
+                    $errors['usesharedgroup'] = get_string('error_sharingidnumbernotfound',
+                            'forumng');
+                }
+            }
+        }
+
+        // If grading is set to ratings and ratings not enabled.
+        if (!empty($data['grading'])) {
+            if (($data['grading'] > 0 && $data['grading'] < 6) && (empty($data['enableratings']))) {
+                // If grading between 1 and 5 (not = 6 and not = 0) and enableratings is empty (not checked).
+                $errors['enableratings'] = get_string('error_ratingrequired', 'forumng');
+            }
+        }
+
+        return $errors;
+    }
+
+    public function data_preprocessing(&$data) {
+        if (!empty($data['maxpostsperiod']) && !empty($data['maxpostsblock'])) {
+            $data['limitgroup[enablelimit]'] = 1;
+            $data['limitgroup[maxpostsperiod]'] = $data['maxpostsperiod'];
+            $data['limitgroup[maxpostsblock]'] = $data['maxpostsblock'];
+        } else {
+            $data['limitgroup[enablelimit]'] = 0;
+            $data['limitgroup[maxpostsperiod]'] = 60 * 60 * 24;
+            $data['limitgroup[maxpostsblock]'] = 10;
+        }
+
+        if ($this->current->instance) {
+            $draftitemid = file_get_submitted_draft_itemid('introductioneditor');
+            $data['introductioneditor']['format'] = $data['introductionformat'];
+            $data['introductioneditor']['text']   = file_prepare_draft_area($draftitemid, $this->context->id,
+                    'mod_forumng', 'introduction', 0, array('subdirs' => true), $data['introduction']);
+            $data['introductioneditor']['itemid'] = $draftitemid;
+        }
+
+        // Set up the completion checkboxes which aren't part of standard data.
+        // We also make the default value (if you turn on the checkbox) for those
+        // numbers to be 1, this will not apply unless checkbox is ticked.
+        $data['completiondiscussionsenabled'] = !empty($data['completiondiscussions']) ? 1 : 0;
+        if (empty($data['completiondiscussions'])) {
+            $data['completiondiscussions'] = 1;
+        }
+        $data['completionrepliesenabled'] = !empty($data['completionreplies']) ? 1 : 0;
+        if (empty($data['completionreplies'])) {
+            $data['completionreplies'] = 1;
+        }
+        $data['completionpostsenabled'] = !empty($data['completionposts']) ? 1 : 0;
+        if (empty($data['completionposts'])) {
+            $data['completionposts'] = 1;
+        }
+    }
+
+    public function add_completion_rules() {
+        $mform = $this->_form;
+
+        $group = array();
+        $group[] =& $mform->createElement('checkbox', 'completionpostsenabled', '',
+                get_string('completionposts', 'forumng'));
+        $group[] =& $mform->createElement('text', 'completionposts', '', array('size' => 3));
+        $mform->setType('completionposts', PARAM_INT);
+        $mform->addGroup($group, 'completionpostsgroup',
+                get_string('completionpostsgroup', 'forumng'), array(' '), false);
+        $mform->addHelpButton('completionpostsgroup', 'completionpostsgroup', 'forumng');
+        $mform->disabledIf('completionposts', 'completionpostsenabled', 'notchecked');
+
+        $group = array();
+        $group[] =& $mform->createElement('checkbox', 'completiondiscussionsenabled', '',
+                get_string('completiondiscussions', 'forumng'));
+        $group[] =& $mform->createElement('text', 'completiondiscussions', '', array('size' => 3));
+        $mform->setType('completiondiscussions', PARAM_INT);
+        $mform->addGroup($group, 'completiondiscussionsgroup',
+                get_string('completiondiscussionsgroup', 'forumng'), array(' '), false);
+        $mform->addHelpButton('completiondiscussionsgroup',
+                'completiondiscussionsgroup', 'forumng');
+        $mform->disabledIf('completiondiscussions', 'completiondiscussionsenabled', 'notchecked');
+
+        $group = array();
+        $group[] =& $mform->createElement('checkbox', 'completionrepliesenabled', '',
+                get_string('completionreplies', 'forumng'));
+        $group[] =& $mform->createElement('text', 'completionreplies', '', array('size' => 3));
+        $mform->setType('completionreplies', PARAM_INT);
+        $mform->addGroup($group, 'completionrepliesgroup',
+                get_string('completionrepliesgroup', 'forumng'), array(' '), false);
+        $mform->addHelpButton('completionrepliesgroup', 'completionrepliesgroup', 'forumng');
+        $mform->disabledIf('completionreplies', 'completionrepliesenabled', 'notchecked');
+
+        // Restriction for grade completion.
+        $mform->disabledIf('completionusegrade', 'grading', 'eq', 0);
+
+        return array('completiondiscussionsgroup',
+                'completionrepliesgroup', 'completionpostsgroup');
+    }
+
+    public function completion_rule_enabled($data) {
+        return (!empty($data['completiondiscussionsenabled']) &&
+                $data['completiondiscussions'] != 0) || (!empty($data['completionrepliesenabled']) &&
+                $data['completionreplies'] != 0) || (!empty($data['completionpostsenabled']) &&
+                $data['completionposts'] != 0);
+    }
+
+    public function get_data() {
+        $data = parent::get_data();
+        if (!$data) {
+            return false;
+        }
+
+        // Set the reportingemail to null if empty so that they are consistency.
+        if (empty($data->reportingemail)) {
+            $data->reportingemail = null;
+        }
+        // Set the canpostanon to 0 if empty so that they are consistency.
+        if (empty($data->canpostanon)) {
+            $data->canpostanon = 0;
+        }
+        // Set the tags to 0 if empty so that they are consistency.
+        if (empty($data->enabletags)) {
+            $data->enabletags = 0;
+        }
+        // Set the removeto to null if the default option 'Delete permanently' was select.
+        if (empty($data->removeto)) {
+            $data->removeto = null;
+        }
+        // Set the removeto to null if option 'Automatically lock' was selected and removeafter is empty.
+        if (($data->removeto == -1) && (empty($data->removeafter)) ) {
+            $data->removeto = null;
+        }
+        // Turn off ratings/limit if required.
+        if (empty($data->enableratings)) {
+            $data->ratingscale = 0;
+        }
+        if (empty($data->limitgroup['enablelimit'])) {
+            $data->maxpostsperiod = 0;
+            $data->maxpostsblock = 0;
+        } else {
+            $data->maxpostsperiod = $data->limitgroup['maxpostsperiod'];
+            $data->maxpostsblock = $data->limitgroup['maxpostsblock'];
+        }
+
+        // Turn off completion settings if the checkboxes aren't ticked.
+        $autocompletion = !empty($data->completion) &&
+                $data->completion == COMPLETION_TRACKING_AUTOMATIC;
+        if (empty($data->completiondiscussionsenabled) || !$autocompletion) {
+            $data->completiondiscussions = 0;
+        }
+        if (empty($data->completionrepliesenabled) || !$autocompletion) {
+            $data->completionreplies = 0;
+        }
+        if (empty($data->completionpostsenabled) || !$autocompletion) {
+            $data->completionposts = 0;
+        }
+
+        // Add in fake form data for clone forums, so core functions expecting it works OK.
+        if ($this->clone && !isset($data->introeditor)) {
+            // Add fake intro text - is ignored anyway for clones as master is shown.
+            $data->introeditor = array('itemid' => 0, 'text' => '', 'format' => FORMAT_MOODLE);
+        }
+
+        return $data;
+    }
+
+    public function definition_after_data() {
+        parent::definition_after_data();
+        global $COURSE;
+        $mform =& $this->_form;
+
+        if ($this->clone) {
+            $mform->removeElement('groupmode');
+            return;
+        }
+
+        $targetforumngid = $mform->getElementValue('removeto');
+        $targetforumngid = $targetforumngid[0];
+        $removeafter = $mform->getElementValue('removeafter');
+        $removeafter = $removeafter[0];
+        if ($removeafter && $targetforumngid > 0) {
+            $modinfo = get_fast_modinfo($COURSE);
+            if (!array_key_exists($targetforumngid, $modinfo->instances['forumng'])) {
+                $mform->getElement('removeto')->addOption(
+                    get_string('invalidforum', 'forumng'), $targetforumngid);
+            }
+        }
+    }
+}
diff --git a/mod/forumng/mod_forumng.php b/mod/forumng/mod_forumng.php
new file mode 100644
index 0000000..6cd7680
--- /dev/null
+++ b/mod/forumng/mod_forumng.php
@@ -0,0 +1,5780 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/mod_forumng_utils.php');
+require_once(dirname(__FILE__).'/mod_forumng_discussion.php');
+require_once(dirname(__FILE__).'/mod_forumng_discussion_list.php');
+require_once(dirname(__FILE__).'/mod_forumng_post.php');
+require_once(dirname(__FILE__).'/mod_forumng_draft.php');
+require_once(dirname(__FILE__).'/type/forumngtype.php');
+require_once(dirname(__FILE__).'/feature/forumngfeature.php');
+
+/**
+ * Represents a forum. This class contains:
+ * 1. A constructor and methods for handling information about a specific forum,
+ *    such as obtaining a list of discussions.
+ * 2. Static methods related to multiple forums across the course or site, or
+ *    to forums in general.
+ * @see mod_forumng_discussion_list
+ * @see mod_forumng_discussion
+ * @see mod_forumng_post
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng {
+
+    // Constants
+    /*//////////*/
+
+    /** Subscription: Nobody is allowed to subscribe to the forum. */
+    const SUBSCRIPTION_NOT_PERMITTED = 0;
+    /** Subscription: Anyone who can see the forum can choose to subscribe to it. */
+    const SUBSCRIPTION_PERMITTED = 1;
+    /** Subscription: Anybody who can see the forum can choose to subscribe to it,
+        and users with certain roles are automatically subscribed (but can
+        unsubscribe). */
+    const SUBSCRIPTION_INITIALLY_SUBSCRIBED = 2;
+    /** Subscription: Anyone who can see the forum can choose to subscribe to it.
+        and users with certain roles are forced to be subscribed (and cannot
+        unsubsribe). */
+    const SUBSCRIPTION_FORCED = 3;
+
+    /** NOT_SUBSCRIBED, PARTIALLY_SUBSCRIBED and FULLY_SUBSCRIBED are only used in
+        a none group mode or all group mode
+        FULLY_SUBSCRIBED_GROUPMODE (view a group page when fully subscribed),
+        THIS_GROUP_PARTIALLY_SUBSCRIBED(subscribed some discussions in this group),
+        THIS_GROUP_SUBSCRIBED, THIS_GROUP_NOT_SUBSCRIBED are only used in individual group mode.*/
+    const NOT_SUBSCRIBED = 0;
+    const PARTIALLY_SUBSCRIBED = 1;
+    const FULLY_SUBSCRIBED = 2;
+    const FULLY_SUBSCRIBED_GROUPMODE = 3;
+    const THIS_GROUP_PARTIALLY_SUBSCRIBED = 4;
+    const THIS_GROUP_SUBSCRIBED = 5;
+    const THIS_GROUP_NOT_SUBSCRIBED = 6;
+
+    /** Grading: No grade for this activity. */
+    const GRADING_NONE = 0;
+    /** Grading: Average of ratings. */
+    const GRADING_AVERAGE = 1;
+    /** Grading: Count of ratings. */
+    const GRADING_COUNT = 2;
+    /** Grading: Max rating. */
+    const GRADING_MAX = 3;
+    /** Grading: Min rating. */
+    const GRADING_MIN = 4;
+    /** Grading: Sum of ratings. */
+    const GRADING_SUM = 5;
+    /** Grading: Teacher grades students */
+    const GRADING_MANUAL = 6;
+
+    /** Feed type: No feeds provided. */
+    const FEEDTYPE_NONE = 0;
+    /** Feed type: Feed contains only the posts that start discussions. */
+    const FEEDTYPE_DISCUSSIONS = 1;
+    /** Feed type: Feed contains all forum posts. */
+    const FEEDTYPE_ALL_POSTS = 2;
+
+    /** Feed format: Atom */
+    const FEEDFORMAT_ATOM = 1;
+    /** Feed format: RSS */
+    const FEEDFORMAT_RSS = 2;
+
+    /** Mail state: Post not mailed yet. */
+    const MAILSTATE_NOT_MAILED = 0;
+    /** Mail state: Post not mailed (and is set to mail now). */
+    const MAILSTATE_NOW_NOT_MAILED = 4;
+    /** Mail state: Post already mailed. */
+    const MAILSTATE_MAILED = 1;
+    /** Mail state: Post sent in digests. */
+    const MAILSTATE_DIGESTED = 2;
+
+    /** Constant referring to posts from all groups. */
+    const ALL_GROUPS = null;
+
+    /**
+     * Special constant indicating that groups are not used (does not apply
+     * to posts).
+     */
+    const NO_GROUPS = -1;
+
+    /** Discussion sort: by date. */
+    const SORT_DATE = 0;
+    /** Discussion sort: by subject. */
+    const SORT_SUBJECT = 1;
+    /** Discussion sort: by author. */
+    const SORT_AUTHOR = 2;
+    /** Discussion sort: by replies. */
+    const SORT_POSTS = 3;
+    /** Discussion sort: by unread replies. */
+    const SORT_UNREAD = 4;
+    /** Discussion sort: by group. */
+    const SORT_GROUP = 5;
+
+    /** Obtain no unread info */
+    const UNREAD_NONE = 0;
+    /** Obtain binary (yes there are unread messages) unread info */
+    const UNREAD_BINARY = 1;
+    /** Obtain the count of unread discussions */
+    const UNREAD_DISCUSSIONS = 2;
+
+    /** Constant used if there is no post quota in effect */
+    const QUOTA_DOES_NOT_APPLY = -1;
+
+    /** Link constant: HTML link (&amp;) */
+    const PARAM_HTML = 1;
+    /** Link constant: standard link (&) */
+    const PARAM_PLAIN = 2;
+    /** Link constant: HTML form input fields */
+    const PARAM_FORM = 3;
+    /** Link bitfield: HTML link (&amp;) with 'guess' for clone */
+    const PARAM_UNKNOWNCLONE = 16;
+
+    /**
+     * Special parameter used when requesting a forum 'directly' from a course
+     * (so that we know it will either have no clone id, or the clone id will
+     * be the same as the cmid).
+     */
+    const CLONE_DIRECT = -1;
+    /**
+     * Special parameter used when requesting a forum in a situation where we
+     * do not know what is the appropriate clone to use. In that case the
+     * system will 'guess' based on the user's access permissions
+     */
+    const CLONE_GUESS = -2;
+
+    /** Discussion moderator post identity: standard post.*/
+    const ASMODERATOR_NO = 0;
+    /** Discussion moderator post identity: self as moderator.*/
+    const ASMODERATOR_IDENTIFY = 1;
+    /** Discussion moderator post identity: anonymously as moderator.*/
+    const ASMODERATOR_ANON = 2;
+
+    // Constants defining grading options.
+    const FORUMNG_NO_RATING = 0;// No grade (default).
+    const FORUMNG_RATING_OBSOLETE = 1;// Forumng ratings (obsolete).
+    const FORUMNG_STANDARD_RATING = 2;// Ratings (standard).
+
+    // Static methods
+    /*///////////////*/
+
+    /**
+     * Obtains list of available per-forum subscription type options.
+     * @return array Array from subscription constant (integer) => description
+     *   in current language
+     */
+    public static function get_subscription_options() {
+        return array(
+            self::SUBSCRIPTION_PERMITTED =>get_string('subscription_permitted', 'forumng'),
+            self::SUBSCRIPTION_FORCED =>get_string('subscription_forced', 'forumng'),
+            self::SUBSCRIPTION_INITIALLY_SUBSCRIBED =>
+                get_string('subscription_initially_subscribed', 'forumng'),
+            self::SUBSCRIPTION_NOT_PERMITTED =>
+                get_string('subscription_not_permitted', 'forumng'));
+    }
+
+    /**
+     * Obtains list of available per-forum feed type options.
+     * @return array Array from feedtype constant (integer) => description
+     *   in current language
+     */
+    public static function get_feedtype_options() {
+        return array(
+            self::FEEDTYPE_NONE=>get_string('feedtype_none', 'forumng'),
+            self::FEEDTYPE_DISCUSSIONS=>get_string('feedtype_discussions', 'forumng'),
+            self::FEEDTYPE_ALL_POSTS=>get_string('feedtype_all_posts', 'forumng')
+        );
+    }
+
+    /**
+     * Obtains list of available per-forum feed item count options.
+     * @return array Array from feed item value (integer) => description
+     *   in current language (probably just the same integer)
+     */
+    public static function get_feeditems_options() {
+        return array(
+            1=>1,
+            2=>2,
+            3=>3,
+            4=>4,
+            5=>5,
+            10=>10,
+            15=>15,
+            20=>20,
+            25=>25,
+            30=>30,
+            40=>40,
+            50=>50);
+    }
+
+    /**
+     * @param bool $midsentence True if the result is being used in the middle
+     *   of a sentence (then we use 'day' rather than '1 day')
+     * @return array Array of available post-period options (keys) to the text
+     *   versions of those options (values).
+     */
+    public static function get_max_posts_period_options($midsentence = false) {
+        $options = array();
+        $options[60*60*24] = ($midsentence ? '' : '1 ') . get_string('day');
+        $options[60*60*24*2] = '2 '.get_string('days');
+        $options[60*60*24*7] = '7 '.get_string('days');
+        $options[60*60*24*14] = '14 '.get_string('days');
+        return $options;
+    }
+
+    /**
+     * @param bool $text True if we want in text format not number
+     * @param bool $midsentence True if the result is being used in the middle
+     *   of a sentence (then we use 'day' rather than '1 day')
+     * @return mixed The number (seconds) or text description of the max-posts
+     *   period of the current foru (only valid if there is one)
+     */
+    public function get_max_posts_period($text = false, $midsentence = false) {
+        if ($text) {
+            $options = self::get_max_posts_period_options($midsentence);
+            return $options[$this->forumfields->maxpostsperiod];
+        } else {
+            return $this->forumfields->maxpostsperiod;
+        }
+    }
+
+    /**
+     * @return array Array of grading option => description
+     */
+    public static function get_grading_options() {
+        return array (
+            self::GRADING_NONE => get_string('grading_none', 'forumng'),
+            self::GRADING_MANUAL => get_string('teacher_grades_students', 'forumng'),
+            self::GRADING_AVERAGE => get_string('grading_average', 'forumng'),
+            self::GRADING_COUNT => get_string('grading_count', 'forumng'),
+            self::GRADING_MAX => get_string('grading_max', 'forumng'),
+            self::GRADING_MIN => get_string('grading_min', 'forumng'),
+            self::GRADING_SUM => get_string('grading_sum', 'forumng'));
+    }
+
+    /** @return bool True if read-tracking is enabled */
+    public static function enabled_read_tracking() {
+        global $CFG;
+        return $CFG->forumng_trackreadposts ? true : false;
+    }
+
+    /** @return int Number of days that read-tracking data is kept for */
+    public static function get_read_tracking_days() {
+        global $CFG;
+        return $CFG->forumng_readafterdays;
+    }
+
+    /** @return int The oldest time (seconds since epoch) for which
+     *     read-tracking data should be kept */
+    public static function get_read_tracking_deadline() {
+        return time()-self::get_read_tracking_days()*24*3600;
+    }
+
+    /**
+     * @return bool True if the current user has the option selected to
+     *   automatically mark discussions as read
+     */
+    public static function mark_read_automatically($userid = 0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return !get_user_preferences('forumng_manualmark', '0', $userid);
+    }
+
+    /**
+     * @param int $sort SORT_xx constant
+     * @return string 'Sort by xxx' text in current language
+     */
+    public static function get_sort_title($sort) {
+        return get_string('sortby', 'forumng', self::get_sort_field($sort));
+    }
+
+    /**
+     * @param int $sort SORT_xx constant
+     * @return string Title (in lower-case) of the field in current language
+     */
+    public static function get_sort_field($sort) {
+        switch ($sort) {
+            case self::SORT_DATE:
+                return get_string('lastpost', 'forumng');
+            case self::SORT_SUBJECT:
+                return get_string('discussion', 'forumng');
+            case self::SORT_AUTHOR:
+                return get_string('startedby', 'forumng');
+            case self::SORT_POSTS:
+                return get_string('posts', 'forumng');
+            case self::SORT_UNREAD:
+                return get_string('unread', 'forumng');
+            case self::SORT_GROUP:
+                return get_string('group', 'forumng');
+            default:
+                throw new coding_exception("Unknown sort constant: $sort");
+        }
+    }
+
+    /**
+     * @param int $sort SORT_xx constant
+     * @return string Letter used to identify this sort type
+     */
+    public static function get_sort_letter($sort) {
+        switch ($sort) {
+            case self::SORT_DATE: return 'd';
+            case self::SORT_SUBJECT: return 's';
+            case self::SORT_AUTHOR: return 'a';
+            case self::SORT_POSTS: return 'p';
+            case self::SORT_UNREAD: return 'u';
+            case self::SORT_GROUP: return 'g';
+            default:
+                throw new coding_exception("Unknown sort constant: $sort");
+        }
+    }
+
+    /**
+     * @param string $letter Letter used to identify sort type
+     * @return int SORT_xx constant
+     */
+    public static function get_sort_code($letter) {
+        switch ($letter) {
+            case 'd' : return self::SORT_DATE;
+            case 's' : return self::SORT_SUBJECT;
+            case 'a' : return self::SORT_AUTHOR;
+            case 'p' : return self::SORT_POSTS;
+            case 'u' : return self::SORT_UNREAD;
+            case 'g' : return self::SORT_GROUP;
+            default:
+                throw new coding_exception("Unknown sort letter: $letter");
+        }
+    }
+
+    /**
+     * Obtains currently selected group for an activity, in the format that
+     * forum methods want. (Which is slightly different to standard Moodle.)
+     * @param object $cm Course-module
+     * @param bool $update If true, updates group based on URL parameter
+     * @return int Group ID; ALL_GROUPS if all groups; NO_GROUPS if no groups used
+     */
+    public static function get_activity_group($cm, $update=false) {
+        $result = groups_get_activity_group($cm, $update);
+        if ($result === false) {
+            return self::NO_GROUPS;
+        } else if ($result === 0) {
+            return self::ALL_GROUPS;
+        } else {
+            return $result;
+        }
+    }
+
+    /**
+     * Obtains the forum type based on its 'info' object in modinfo (e.g. from
+     * $modinfo->instances['forumng'][1234]). Usually this comes from the
+     * custom data in the cm_info object.
+     *
+     * @param object $info Info object (either cm_info or something else)
+     * @return string Forum type
+     */
+    private static function get_type_from_modinfo_info(cm_info $info) {
+        if (isset($info->forumtype)) {
+            // Only set when using get_modinfo_special for shared activity modules.
+            return $info->forumtype;
+        }
+        return $info->customdata->type;
+    }
+
+    /** @return bool True if anonymous moderator posts enabled */
+    public function get_can_post_anon() {
+        return $this->forumfields->canpostanon;
+    }
+
+    // Object variables and accessors
+    /*///////////////////////////////*/
+
+    private $course, $cm, $context, $clonecourse, $clonecm, $clonecontext,
+            $forumfields, $type, $cache;
+
+    /** @return bool True if ratings are enabled */
+    public function has_ratings() {
+        return $this->forumfields->ratingscale!=0;
+    }
+
+    /**
+     * @param int $created Date that post was created; use 0 to obtain
+     *   a 'general' value supposing that posts are in range
+     * @return bool True if current user can rate a post in this forum
+     */
+    public function can_rate($created=0) {
+        return $this->has_ratings()
+            && ($created == 0 || $created > $this->forumfields->ratingfrom)
+            && ($created == 0 || $this->forumfields->ratinguntil==0
+                || $created<$this->forumfields->ratinguntil)
+            && has_capability('mod/forumng:rate', $this->get_context());
+    }
+
+    /**
+     * @return bool True if current user can grade a user
+     */
+    public function can_grade() {
+        return $this->get_grading() == self::GRADING_MANUAL
+            && has_capability('mod/forumng:grade', $this->get_context());
+    }
+
+    /** @return int ID of course that contains this forum */
+    public function get_course_id() {
+        return $this->forumfields->course;
+    }
+
+    /**
+     * Obtains course object. For non-shared forums this is
+     * straightforward. For shared forums this usually returns the course
+     * of the *clone* forum that is currently relevant, not directly of the
+     * original forum.
+     * @param bool $forcereal If set, always returns the course of the
+     *   original forum and not of any clone
+     * @return object Course object
+     */
+    public function get_course($forcereal = false) {
+        global $DB;
+        if ($this->is_shared() && !$forcereal) {
+            if (!$this->clonecourse) {
+                $cm = $this->get_course_module();
+                $this->clonecourse = $DB->get_record('course', array('id' => $cm->course));
+                if (!$this->clonecourse) {
+                    throw new coding_exception('Cannot find clone course ' .
+                            $cm->course);
+                }
+            }
+            return $this->clonecourse;
+        }
+        return $this->course;
+    }
+
+    /**
+     * Obtains course-module id. For non-shared forums this is
+     * straightforward. For shared forums this usually returns the id
+     * of the *clone* forum that is currently relevant, not directly of the
+     * original forum.
+     * @param bool $forcereal If set, always returns the id of the
+     *   original forum and not of any clone
+     * @return int ID of course-module instance
+     */
+    public function get_course_module_id($forcereal = false) {
+        return $this->get_course_module($forcereal)->id;
+    }
+
+    /**
+     * Obtains course-module instance. For non-shared forums this is
+     * straightforward. For shared forums this usually returns the course-module
+     * of the *clone* forum that is currently relevant, not directly of the
+     * original forum.
+     * @param bool $forcereal If set, always returns the course-module of the
+     *   original forum and not of any clone
+     * @return cm_info Course-module instance
+     */
+    public function get_course_module($forcereal = false) {
+        global $CFG, $SESSION;
+        if (empty($this->cm)) {
+            throw new coding_exception('Course-module not set for this forum');
+        }
+        if ($this->is_shared() && !$forcereal) {
+            if (!$this->clonecm) {
+                throw new coding_exception('Clone reference not defined');
+            }
+            return $this->clonecm;
+        }
+        return $this->cm;
+    }
+
+    /**
+     * Retrieves basic details for all the clones of this forum. (If any.)
+     * @return array Array of objects (each one has ->context, ->courseid,
+     *   ->courseshortname, ->forumname, and ->sectionid) for clones of this
+     *   forum
+     */
+    public function get_clone_details() {
+        global $DB;
+        $recs = $DB->get_records_sql("
+SELECT
+    x.*, c.id AS courseid, c.shortname AS courseshortname, f.name AS forumname,
+    f.id AS cloneforumngid, cm.section AS sectionid
+FROM
+    {forumng} f
+    INNER JOIN {course_modules} cm ON f.id = cm.instance
+    INNER JOIN {course} c ON cm.course = c.id
+    INNER JOIN {modules} m ON cm.module = m.id
+    INNER JOIN {context} x ON x.instanceid = cm.id
+WHERE
+    f.originalcmid = ?
+    AND m.name = 'forumng'
+    AND x.contextlevel = 70
+ORDER BY
+    c.shortname, f.name", array($this->cm->id));
+        $contexts = array();
+        foreach ($recs as $id => $rec) {
+            $context = (object)array('courseid' => $rec->courseid,
+                    'courseshortname' => $rec->courseshortname, 'forumname' => $rec->forumname,
+                    'cloneforumngid' => $rec->cloneforumngid, 'sectionid' => $rec->sectionid);
+            $context->context = mod_forumng_context_access::create_instance_from_record_public($rec);
+            $contexts[$id] = $context;
+        }
+        return $contexts;
+    }
+
+    /**
+     * Sets up the clone reference. The clone reference is used for shared
+     * forums only. If a forum is a shared forum, you can access it from several
+     * different course-module instances. The id of these instances is known as
+     * the 'clone id'. We store the clone course-module in the forum object
+     * so that when displaying links etc., these can retain the clone
+     * information.
+     * @param int $cloneid Clone id
+     * @param object $clonecourse Optional clone course object (improves
+     *   performance in cases where it needs to get the cm entry)
+     */
+    public function set_clone_reference($cloneid, $clonecourse=null) {
+        global $SESSION, $DB;
+        if ($cloneid == $this->cm->id || $cloneid == self::CLONE_DIRECT) {
+            $this->clonecm = $this->cm;
+            return;
+        }
+        if ($cloneid == self::CLONE_GUESS) {
+            // We had better cache guesses in session because this is
+            // time-consuming
+            if (!isset($SESSION->forumng_cache)) {
+                $SESSION->forumng_cache = new stdClass;
+            }
+            if (!isset($SESSION->forumng_cache->guesses)) {
+                $SESSION->forumng_cache->guesses = array();
+            }
+            if (isset($SESSION->forumng_cache->guesses[$this->get_id()])) {
+                return $SESSION->forumng_cache->guesses[$this->get_id()];
+            }
+            // Okay, no cached guess. First let's see if they can write to the
+            // original forum because if so let's just use that
+            if (has_capability('mod/forumng:replypost', $this->get_context(true))) {
+                $this->clonecm = $this->cm;
+                return;
+            }
+
+            // See if they can write to any context
+            $clones = $this->get_clone_details();
+            foreach ($clones as $clone) {
+                if (has_capability('mod/forumng:replypost', $clone->context)) {
+                    $this->clonecm = self::get_modinfo_cm(
+                            $clone->context->instanceid);
+                    break;
+                }
+            }
+
+            // No? Well see if they can read to one
+            if (!$this->clonecm) {
+                foreach ($clones as $clone) {
+                    if (has_capability('moodle/course:view', $clone->context)) {
+                        $this->clonecm = self::get_modinfo_cm($clone->context->instanceid);
+                        break;
+                    }
+                }
+            }
+
+            // Default, just use original
+            if (!$this->clonecm) {
+                $this->clonecm = $this->cm;
+            }
+
+            // Cache guess
+            $SESSION->forumng_cache->guesses[$this->get_id()] = $this->clonecm;
+            return;
+        } else {
+            // Get course-module record
+            $this->clonecm = self::get_modinfo_cm($cloneid);
+            // Security check that specifed cm is indeed a clone of this forum
+            if ($DB->get_field('forumng', 'originalcmid', array('id' =>
+                    $this->clonecm->instance)) != $this->cm->id) {
+                throw new coding_exception("Not a clone of this forum: $cloneid");
+            }
+        }
+    }
+
+    /**
+     * Gets a course-module object using get_fast_modinfo (so that it includes
+     * additional data not in the actual table).
+     * @param int $cmid ID of course-module
+     * @param object $course Optional $course object to improve performance
+     * @return cm_info Course-module object
+     * @throws mod_forumng_exception If the cm isn't found or not in that course
+     */
+    private static function get_modinfo_cm($cmid, $course=null) {
+        global $DB;
+        if (!$course) {
+            $course = $DB->get_record_sql("
+SELECT
+    c.*
+FROM
+    {course_modules} cm
+    INNER JOIN {course} c ON c.id = cm.course
+WHERE
+    cm.id = ?", array($cmid), MUST_EXIST);
+        }
+        $modinfo = get_fast_modinfo($course);
+        return $modinfo->get_cm($cmid);
+    }
+
+    /**
+     * Obtains context object. For non-shared forums this is
+     * straightforward. For shared forums this usually returns the context
+     * of the *clone* forum that is currently relevant, not directly of the
+     * original forum.
+     * @param bool $forcereal If set, always returns the context of the
+     *   original forum and not of any clone
+     * @return context Context object
+     */
+    public function get_context($forcereal = false) {
+        if ($this->is_shared() && !$forcereal) {
+            if (!$this->clonecontext) {
+                $this->clonecontext = context_module::instance($this->get_course_module_id());
+            }
+            return $this->clonecontext;
+        }
+        return $this->context;
+    }
+
+    /** @return int ID of this forum */
+    public function get_id() {
+        return $this->forumfields->id;
+    }
+
+    /** @return Name of forum */
+    public function get_name() {
+        return $this->forumfields->name;
+    }
+
+    /** @return reporting email of form */
+    public function get_reportingemail() {
+        return $this->forumfields->reportingemail;
+    }
+
+    /** @return array of reporting emails of forum */
+    public function get_reportingemails() {
+        global $CFG;
+        $recipients = $this->get_reportingemail();
+        if (!empty($recipients)) {
+            $recipients = explode(';', $recipients);
+        } else {
+            $recipients = array();
+        }
+        if (!empty($CFG->forumng_reportunacceptable)) {
+            // Check to see whether global forum report e-mail is already in recipients.
+            if (!in_array($recipients, $CFG->forumng_reportunacceptable)) {
+                // Add global recipient address to recipents array.
+                $recipients[] = $CFG->forumng_reportunacceptable;
+            }
+        }
+        return $recipients;
+    }
+
+    /** @return posting from of form */
+    public function get_postingfrom() {
+        return $this->forumfields->postingfrom;
+    }
+    /** @return posting until of form */
+    public function get_postinguntil() {
+        return $this->forumfields->postinguntil;
+    }
+
+    /**
+     * @param $abbreviated If true, cuts down the length
+     * @return string Introduction text
+     */
+    public function get_introduction() {
+        return $this->forumfields->introduction;
+    }
+
+    /**
+     * @return int FORMAT_xx constant for introduction format
+     */
+    public function get_introduction_format() {
+        return $this->forumfields->introductionformat;
+    }
+
+    /** @return int GRADING_xx constant */
+    public function get_grading() {
+        return $this->forumfields->grading;
+    }
+
+    /**
+     * @return int Scale used for ratings; 0 = disable,
+     *   positive integer = 0..N scale, negative integer = defined scale
+     */
+    public function get_grading_scale() {
+        return $this->forumfields->gradingscale;
+    }
+
+    /**
+     * @return int Scale used for ratings; 0 = disable,
+     *   positive integer = 0..N scale, negative integer = defined scale
+     */
+    public function get_rating_scale() {
+        return $this->forumfields->ratingscale;
+    }
+
+    /**
+     * @return array Array (in choose_from_menu format) of available rating
+     *   options as value=>text
+     */
+    public function get_rating_options() {
+        return mod_forumng_utils::make_grades_menu($this->forumfields->ratingscale);
+    }
+
+    /**
+     * @return int Number of ratings a post must have in order to 'count'
+     */
+    public function get_rating_threshold() {
+        return $this->forumfields->ratingthreshold;
+    }
+
+    /**
+     * @return bool True if this forum is shared (has the 'allow sharing' flag
+     *   set)
+     */
+    public function is_shared() {
+        return $this->forumfields->shared ? true : false;
+    }
+
+    /**
+     * @return bool True if this forum is a clone (has the 'original cmid'
+     *   value set)
+     */
+    public function is_clone() {
+        return $this->forumfields->originalcmid != null;
+    }
+
+    /**
+     * If this forum is a clone, obtains the real one; otherwise just returns
+     * this again.
+     * @return mod_forumng Forum object (same or different)
+     */
+    public function get_real_forum() {
+        if ($this->is_clone()) {
+            return self::get_from_cmid($this->forumfields->originalcmid, $this->cm->id);
+        } else {
+            return $this;
+        }
+    }
+    /**
+     * @return int Number of discussions containing unread posts
+     */
+    public function get_num_unread_discussions() {
+        if (!isset($this->forumfields->numunreaddiscussions)) {
+            throw new coding_exception('Unread discussion count not obtained');
+        }
+        return $this->forumfields->numunreaddiscussions;
+    }
+
+    /**
+     * @return int Number of discussions
+     */
+    public function get_num_discussions() {
+        if (!isset($this->forumfields->numdiscussions)) {
+            throw new coding_exception('Discussion count not obtained');
+        }
+        return $this->forumfields->numdiscussions;
+    }
+
+    /**
+     * @return bool True if any discussions have unread posts
+     */
+    public function has_unread_discussions() {
+        if (isset($this->forumfields->numunreaddiscussions)) {
+            return $this->forumfields->numunreaddiscussions > 0;
+        } else if (isset($this->forumfields->hasunreaddiscussions)) {
+            return $this->forumfields->hasunreaddiscussions > 0;
+        } else {
+            throw new coding_exception('Unread discussion flag not obtained');
+        }
+    }
+
+    /**
+     * @return int Max bytes for attachments or -1 if upload is prevented
+     */
+    public function get_max_bytes() {
+        if ($this->forumfields->attachmentmaxbytes) {
+            if ($this->forumfields->attachmentmaxbytes == -1) {
+                return -1;
+            } else {
+                return get_user_max_upload_file_size($this->get_context(),
+                        $this->forumfields->attachmentmaxbytes);
+            }
+        } else {
+            return get_user_max_upload_file_size($this->get_context(),
+                    $this->get_course()->maxbytes);
+        }
+    }
+
+    /**
+     * @return int Activity group mode; may be VISIBLEGROUPS, SEPARATEGROUPS, or 0
+     */
+    public function get_group_mode() {
+        if ($this->forumfields->shared) {
+            // Performance up: shared forums never have groups
+            return 0;
+        }
+        return groups_get_activity_groupmode($this->get_course_module(),
+            $this->get_course());
+    }
+
+    /**
+     * @return int Grouping in use for this activity; 0 for 'all groupings'
+     */
+    public function get_grouping() {
+        return $this->get_course_module()->groupingid;
+    }
+
+    /** @return bool True if either site level or forum level reporting email is not null */
+    public function has_reporting_email() {
+        global $CFG;
+        return $this->forumfields->reportingemail!= null ||
+                (!empty($CFG->forumng_reportunacceptable) &&
+                validate_email($CFG->forumng_reportunacceptable));
+    }
+
+    /**
+     * Use to obtain link parameters when linking to any page that has anything
+     * to do with forums.
+     * @return string e.g. 'id=1234'
+     */
+    public function get_link_params($type) {
+        if ($type == self::PARAM_FORM) {
+            $id = '<input type="hidden" name="id" value="' . $this->cm->id . '" />';
+        } else {
+            $id = 'id=' . $this->cm->id;
+        }
+        return $id . $this->get_clone_param($type);
+    }
+
+    /**
+     * Use to obtain link parameters as an array instead of as a string.
+     * @return array e.g. ('id'=>123)
+     */
+    public function get_link_params_array() {
+        $result = array('id' => $this->cm->id);
+        $this->add_clone_param_array($result);
+        return $result;
+    }
+
+    /**
+     * Adds the clone parameter to an array of parameters, if it is necessary.
+     * @param array $result Array that may have key 'clone' set
+     */
+    public function add_clone_param_array(&$result) {
+        if ($this->is_shared()) {
+            $result['clone'] = $this->get_course_module_id();
+        }
+    }
+
+    /**
+     * @param int $type PARAMS_xx constant
+     * @return string Full URL to this forum
+     */
+    public function get_url($type) {
+        global $CFG;
+        return $CFG->wwwroot . '/mod/forumng/view.php?' .
+                $this->get_link_params($type);
+    }
+
+    /**
+     * @param int $type Parameter type (whether you want it escaped or not)
+     * @return Either empty string or some variant of '&clone=N'
+     */
+    public function get_clone_param($type) {
+        if (!$this->is_shared()) {
+            return '';
+        }
+        if ($type & self::PARAM_UNKNOWNCLONE) {
+            $cloneid = -2; // Special 'guess' vale
+        } else {
+            $cloneid = $this->get_course_module_id();
+        }
+
+        if ($type == self::PARAM_FORM) {
+            return '<input type="hidden" name="clone" value="' .
+                    $cloneid . '" />';
+        }
+        if (($type & 0xf) == self::PARAM_HTML) {
+            $params = '&amp;';
+        } else {
+            $params = '&';
+        }
+        return $params . 'clone=' . $cloneid;
+    }
+
+    /** @return int forum ratings enabled */
+    public function get_enableratings() {
+        return $this->forumfields->enableratings;
+    }
+
+    /** @return int forum ratings from */
+    public function get_ratingfrom() {
+        return $this->forumfields->ratingfrom;
+    }
+
+    /** @return int forum ratings until */
+    public function get_ratinguntil() {
+        return $this->forumfields->ratinguntil;
+    }
+
+    // Factory methods
+    /*////////////////*/
+
+    /**
+     * Creates a forum object and all related data from a single forum ID.
+     * Note this is a forum ID and not a course-module ID.
+     * @param int $id ID of forum
+     * @param int $cloneid Clone identifier (0 if not a shared forum) or
+     *   CLONE_DIRECT constant
+     * @param bool $requirecm True if we require that the forum object
+     *   has a valid course-module and context; false if the forum has only
+     *   just been created so it doesn't have one yet
+     * @param object $passcm Optional $cm object. Can be used in cases where
+     *   get_fast_modinfo will fail (during course deletion).
+     * @return mod_forumng Forum object
+     */
+    public static function get_from_id($id, $cloneid, $requirecm=true, $passcm=null) {
+        global $COURSE, $DB;
+
+        // Note that I experimented with code that retrieved this information
+        // in a single query with some joins. It turned out to be fractionally
+        // slower when working on a single machine, and only fractionally faster
+        // when the database was on a separate machine, so we decided it wasn't
+        // worth the maintenance effort over single queries.
+
+        // Get forum data
+        $forumfields = $DB->get_record('forumng', array('id' => $id), '*', MUST_EXIST);
+
+        // Get course
+        $courseid = $forumfields->course;
+        if (!empty($COURSE->id) && $COURSE->id === $courseid) {
+            $course = $COURSE;
+        } else {
+            $course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+        }
+
+        // NOTE: We obtain $cm via get_fast_modinfo. Reasons to do it this way:
+        // * Modinfo has already been loaded since it comes from course table.
+        // * The PHP loop search could be slow if there are many activities,
+        //   but there would have to be quite a lot to make it slower than
+        //   2 additional database queries (note: I did not performance-test
+        //   this assumption).
+        // * Other parts of the page might require the full $cm info that is
+        //   only provided by get_fast_modinfo, so may as well call it now.
+        $cm = null;
+        if ($passcm) {
+            // Modinfo not available, use supplied object instead
+            $cm = $passcm;
+        } else if ($requirecm) {
+            $modinfo = get_fast_modinfo($course);
+            foreach ($modinfo->cms as $possiblecm) {
+                if ($possiblecm->instance==$id && $possiblecm->modname==='forumng') {
+                    $cm = $possiblecm;
+                    break;
+                }
+            }
+        }
+        if (!$cm && $requirecm) {
+            // Just in case this is because the forum has only just been
+            // created
+            $cm = get_coursemodule_from_instance('forumng', $id, $course->id);
+            if (!$cm) {
+                throw new coding_exception(
+                    "Couldn't find matching course-module entry for forum $id");
+            }
+        }
+
+        // Get context
+        $context = null;
+        if ($cm) {
+            $context = context_module::instance($cm->id);
+        }
+
+        // Construct forum
+        $result = new mod_forumng($course, $cm, $context, $forumfields);
+        if ($result->is_shared()) {
+            if (!$cloneid) {
+                throw new coding_exception(
+                    "Shared forum {$cm->id} requires a clone id");
+            }
+            // This is not available when forum was only just created, so
+            // don't call it
+            if ($cm) {
+                $result->set_clone_reference($cloneid);
+            }
+        }
+        return $result;
+    }
+
+    /**
+     * Creates a forum object and all related data from a single course-module
+     * ID. Intended to be used from pages that refer to a particular forum.
+     * @param int $cmid Course-module ID of forum
+     * @param int $cloneid Clone identifier (0 if not a shared forum) or
+     *   CLONE_DIRECT constant
+     * @return mod_forumng Forum object
+     */
+    public static function get_from_cmid($cmid, $cloneid) {
+        global $COURSE, $DB;
+
+        // Get modinfo for current course, because we usually already have it
+        $modinfo = get_fast_modinfo($COURSE);
+        if (array_key_exists($cmid, $modinfo->cms)) {
+            // It's in the current course, no need for another query
+            $courseid = $COURSE->id;
+        } else {
+            // Get courseid
+            $courseid = $DB->get_field('course_modules', 'course', array('id' => $cmid));
+        }
+
+        // Get course
+        if (!empty($COURSE->id) && $COURSE->id === $courseid) {
+            $course = $COURSE;
+        } else {
+            $course = $DB->get_record('course', array('id' => $courseid));
+        }
+
+        // Get course-module
+        $modinfo = get_fast_modinfo($course);
+        if (!array_key_exists($cmid, $modinfo->cms)) {
+            throw new coding_exception(
+                "Couldn't find forum with course-module ID $cmid");
+        }
+        $cm = $modinfo->cms[$cmid];
+
+        if ($cm->modname != 'forumng') {
+            throw new coding_exception(
+                "Course-module ID $cmid is not a forum");
+        }
+
+        // Get forum data
+        $forumfields = $DB->get_record('forumng', array('id' => $cm->instance));
+
+        // Get context
+        $context = context_module::instance($cm->id);
+
+        // Construct forum
+        $result = new mod_forumng($course, $cm, $context, $forumfields);
+        if ($result->is_shared()) {
+            if (!$cloneid) {
+                throw new coding_exception(
+                    "Shared forum $cmid requires a clone id");
+            }
+            $result->set_clone_reference($cloneid);
+        }
+        return $result;
+    }
+
+    // Object methods
+    /*///////////////*/
+
+    /**
+     * Construct the forum's in-memory representation.
+     * @param object $course Moodle course object. Optionally, can include only
+     *   the 'id' field. (Otherwise should include all fields.)
+     * @param object $cm Moodle course-module object. TODO Document required fields
+     * @param object $forumfields Moodle forumng table record. Should include all fields.
+     */
+    public function __construct($course, $cm, $context, $forumfields) {
+        $this->course = $course;
+        $this->cm = $cm;
+        $this->context = $context;
+        $this->forumfields = $forumfields;
+        $this->cache = new StdClass;
+    }
+
+    /**
+     * Called by add_instance when the forum has just been created.
+     * Note that $cm and $context are unavailable.
+     * @param string $idnumber ID-number from create form
+     */
+    public function created($idnumber) {
+        // Set up grade item if required
+        $this->update_grades(0, $idnumber);
+
+        // TODO Perform any initialisation required by forum type (single
+        // discussion = create discussion)
+    }
+
+    /**
+     * Called by update_instance when the forum has been updated.
+     * @param $previousfields Previous copy of forum record
+     */
+    public function updated($previousfields) {
+        global $DB;
+        // If rating scale or grading on/off changes, we need to update
+        // the grade information
+        $gradechanged = false;
+        if ($previousfields->grading != $this->forumfields->grading ||
+            $previousfields->ratingscale != $this->forumfields->ratingscale ||
+            $previousfields->gradingscale != $this->forumfields->gradingscale ||
+            $previousfields->name != $this->forumfields->name) {
+            $this->update_grades();
+        }
+
+        // TODO Call forum type for additional handling
+
+        // If name changes and this is a shared forum, we need to go change
+        // all the clones
+        if ($previousfields->name !== $this->forumfields->name &&
+            $this->is_shared()) {
+            // Get clones
+            $clones = $DB->get_records(
+                    'forumng', array('originalcmid' => $this->get_course_module_id()));
+            foreach ($clones as $clone) {
+                $DB->set_field('forumng', 'name', $this->forumfields->name,
+                        array('id' => $clone->id));
+                rebuild_course_cache($clone->course, true);
+            }
+        }
+        if (!$previousfields->shared && $this->is_shared()) {
+            // Start sharing.
+            $DB->set_field('forumng_subscriptions', 'clonecmid', $this->get_course_module_id(),
+                    array('forumngid' => $previousfields->id));
+        }
+        if ($previousfields->shared && !$this->is_shared()) {
+            // Stop sharing.
+            $DB->set_field('forumng_subscriptions', 'clonecmid', null,
+                    array('forumngid' => $previousfields->id));
+        }
+    }
+
+    /**
+     * Called by delete_instance. Deletes all the forum's data (but
+     * not the actual forum record, delete_instance handles that).
+     */
+    public function delete_all_data() {
+        global $DB, $CFG;
+        require_once($CFG->dirroot . '/tag/lib.php');
+
+        // Delete per-post data
+        $postquery = "
+SELECT
+    fp.id
+FROM
+    {forumng_discussions} fd
+    INNER JOIN {forumng_posts} fp on fp.discussionid = fd.id
+WHERE
+    fd.forumngid = ?";
+        $postparams = array($this->forumfields->id);
+        $DB->execute("DELETE FROM {forumng_ratings}
+            WHERE postid IN ($postquery)", $postparams);
+        $DB->execute("DELETE FROM {forumng_read_posts}
+                WHERE postid IN ($postquery)", $postparams);
+
+        // Delete per-discussion data
+        $discussionquery = "SELECT id FROM {forumng_discussions}
+            WHERE forumngid = ?";
+        $discussionparams = array($this->forumfields->id);
+        $DB->execute("DELETE FROM {forumng_read}
+            WHERE discussionid IN ($discussionquery)", $discussionparams);
+        $DB->execute("DELETE FROM {forumng_posts}
+            WHERE discussionid IN ($discussionquery)", $discussionparams);
+
+        // Delete standard rating data.
+        if ($this->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING &&
+                !$this->is_clone()) {
+            require_once($CFG->dirroot . '/rating/lib.php');
+            $delopt = new stdClass();
+            $delopt->contextid = $this->get_context(true)->id;
+            $delopt->component = 'mod_forumng';
+            $delopt->ratingarea = 'post';
+
+            $rm = new rating_manager();
+            $rm->delete_ratings($delopt);
+        }
+
+        // Delete per-forum data
+        if ($this->is_clone()) {
+            $DB->delete_records('forumng_subscriptions',
+                    array('clonecmid' => $this->get_course_module_id()));
+        } else {
+            $DB->delete_records('forumng_subscriptions',
+                    array('forumngid' => $this->forumfields->id));
+        }
+        $DB->delete_records('forumng_discussions', array('forumngid' => $this->forumfields->id));
+
+        // Delete tag instances.
+        core_tag_tag::delete_instances('mod_forumng', 'forumng', $this->context->id);
+        core_tag_tag::delete_instances('mod_forumng', 'groups', $this->context->id);
+    }
+
+    /**
+     * Records an action in the Moodle log for current user.
+     * @param string $action Action name - see datalib.php for suggested verbs
+     *   and this code for example usage
+     * @param string $replaceinfo Optional info text to replace default (which
+     *   is just the forum id again)
+     */
+    public function log($action, $replaceinfo = '') {
+        $info = $this->forumfields->id;
+        if ($replaceinfo !== '') {
+            $info = $replaceinfo;
+        }
+        $params = array(
+            'context' => $this->get_context(),
+            'objectid' => $this->forumfields->id,
+            'other' => array('info' => $info, 'logurl' => $this->get_log_url())
+        );
+        switch ($action) {
+            case 'subscribe':
+                $classname = 'subscription_created';
+                $params['relateduserid'] = substr($info, 0, strpos($info, ' '));
+                unset($params['objectid']);// Unset forum id as event for subscriptions table.
+                break;
+            case 'unsubscribe':
+                $classname = 'subscription_deleted';
+                $params['relateduserid'] = substr($info, 0, strpos($info, ' '));
+                unset($params['objectid']);// Unset forum id as event for subscriptions table.
+                break;
+            default:
+                $classname = 'course_module_viewed';
+                break;
+        }
+        $class = '\\mod_forumng\\event\\' . $classname;
+        $event = $class::create($params);
+        $event->add_record_snapshot('course_modules', $this->get_course_module());
+        $event->add_record_snapshot('course', $this->get_course());
+        $event->add_record_snapshot('forumng', $this->forumfields);
+        $event->trigger();
+    }
+
+    /**
+     * @return string URL of this discussion for log table, relative to the
+     *   module's URL
+     */
+    public function get_log_url() {
+        return 'view.php?' . $this->get_link_params(self::PARAM_PLAIN);
+    }
+
+    /**
+     * Retrieves a list of discussions.
+     * @param int $groupid Group ID or ALL_GROUPS
+     * @param bool $viewhidden True if user can view hidden discussions
+     * @param int $page Page to retrieve (1 = first page)
+     * @param int $sort Sort order (SORT_xx constant)
+     * @param bool $sortreverse Reverses the chosen sort
+     * @param int $userid User ID, 0 = default, -1 if unread count not required
+     * @param bool $ignoreinvalidpage true = default
+     * @param int $tagid tag id of tag to get discussions that contain that tag.
+     * @return mod_forumng_discussion_list
+     */
+    public function get_discussion_list(
+        $groupid=self::ALL_GROUPS, $viewhidden=false,
+        $page=1, $sort=self::SORT_DATE, $sortreverse=false, $userid=0, $ignoreinvalidpage=true, $tagid = null) {
+        global $CFG, $DB, $USER;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // Build list of SQL conditions
+        /*/////////////////////////////*/
+
+        // Correct forum.
+        $conditionparams = array();
+        $conditions = "fd.forumngid = ?";
+        $conditionparams[] = $this->forumfields->id;
+
+        // Group restriction
+        if ($groupid) {
+            $conditions .= " AND (fd.groupid = ? OR fd.groupid IS NULL)";
+            $conditionparams[] = $groupid;
+        }
+
+        // View hidden posts
+        if (!$viewhidden) {
+            $now = time();
+            $conditions .= " AND fd.deleted = 0";
+            $conditions .= " AND (fd.timestart = 0 OR fd.timestart <= ?)".
+              " AND (fd.timeend = 0 OR fd.timeend > ?)";
+            $conditionparams[] = $now;
+            $conditionparams[] = $now;
+        }
+
+        // Tag join sql if needed.
+        $tagjoin = '';
+        $hastag = false;
+        if (!empty($tagid)) {
+            $hastag = true;
+            $tagjoin = "LEFT JOIN {tag_instance} ti ON ti.itemid = fd.id AND ti.itemtype = 'forumng_discussions'
+                    AND ti.component = 'mod_forumng'";
+            $conditions .= "AND ti.tagid = ?";
+            $conditionparams[] = $tagid;
+        }
+
+        // Count all discussions
+        /*//////////////////////*/
+
+        if ($this->get_type()->has_unread_restriction()) {
+            list($restrictionsql, $restrictionparams) =
+                    $this->get_type()->get_unread_restriction_sql($this, $USER->id);
+        } else {
+            $restrictionsql = false;
+        }
+        if ($restrictionsql) {
+            $querypart =
+            $count = $DB->count_records_sql($sql = "
+SELECT
+    COUNT(1)
+FROM
+    {forumng_discussions} fd
+    INNER JOIN {forumng_posts} fpfirst ON fpfirst.id = fd.postid
+    INNER JOIN {forumng_posts} fplast ON fplast.id = fd.lastpostid
+    INNER JOIN {forumng} f ON f.id = fd.forumngid
+    INNER JOIN {course} c ON c.id = f.course
+    INNER JOIN {course_modules} cm ON cm.instance = f.id AND cm.course = f.course
+    INNER JOIN {modules} m ON m.id = cm.module
+    $tagjoin
+WHERE $conditions AND m.name = 'forumng' AND $restrictionsql",
+                array_merge($conditionparams, $restrictionparams));
+        } else {
+            $count = $DB->count_records_sql(
+                    "SELECT COUNT(1) FROM {forumng_discussions} fd $tagjoin WHERE " . $conditions,
+                    $conditionparams);
+        }
+
+        // Check page index makes sense
+        $pagecount = ceil($count / $CFG->forumng_discussionsperpage);
+        if ($pagecount < 1) {
+            $pagecount = 1;
+        }
+        if (($page > $pagecount || $page < 1) ) {
+            if ($ignoreinvalidpage) {
+                $page = 1;
+            } else {
+                throw new coding_exception("Invalid page $page, expecting 1..$pagecount");
+            }
+        }
+
+        // Special case for no results
+        if ($count == 0) {
+            return new mod_forumng_discussion_list($page, $pagecount, $count);
+        }
+
+        // Retrieve selected discussions
+        /*//////////////////////////////*/
+
+        // Ordering
+        $orderby = 'sticky DESC';
+        switch ($sort) {
+            case self::SORT_DATE:
+                $orderby .= ', timemodified DESC';
+                break;
+            case self::SORT_SUBJECT:
+                $orderby .= ', subject ASC';
+                break;
+            case self::SORT_AUTHOR:
+                // This logic is based on code in fullname().
+                $override = has_capability('moodle/site:viewfullnames',
+                    $this->get_context(), $userid);
+                $fullnamedisplay = $CFG->fullnamedisplay;
+                if ($CFG->fullnamedisplay == 'language') {
+                    // Controlled by lang pack - try and work out what it is doing.
+                    $fakeuser = new stdClass();
+                    $fakeuser->firstname = 'firstname';
+                    $fakeuser->lastname = 'lastname';
+                    $fullnamedisplay = get_string('fullnamedisplay', '', $fakeuser);
+                }
+                if ($fullnamedisplay == 'firstname lastname' ||
+                    ($override && $fullnamedisplay == 'firstname')) {
+                    $orderby .= ', fu_firstname ASC, fu_lastname ASC';
+                } else if ($fullnamedisplay == 'lastname firstname') {
+                    $orderby .= ', fu_lastname ASC, fu_firstname ASC';
+                } else if ($fullnamedisplay == 'firstname') {
+                    $orderby .= ', fu_firstname ASC';
+                }
+                if (!$override) {
+                    if (!empty($CFG->forcefirstname)) {
+                        $orderby = preg_replace('~, fu_firstname(ASC)?~', '', $orderby);
+                    }
+                    if (!empty($CFG->forcelastname)) {
+                        $orderby = preg_replace('~, fu_lastname(ASC)?~', '', $orderby);
+                    }
+                }
+                break;
+            case self::SORT_POSTS:
+                $orderby .= ', numposts DESC';
+                break;
+            case self::SORT_UNREAD:
+                $orderby .= ', numposts-numreadposts DESC';
+                break;
+            case self::SORT_GROUP:
+                $orderby .= ', groupname ASC';
+                break;
+            default:
+                throw new coding_exception("Unknown SORT_xx constant $sort");
+        }
+
+        // swap ASC/DESC according to $sortreverse
+        if ($sortreverse) {
+            $orderby = str_replace('DESC', 'ASX', $orderby);
+            $orderby = str_replace('ASC', 'DESC', $orderby);
+            $orderby = str_replace('ASX', 'ASC', $orderby);
+            $orderby = str_replace('sticky ASC', 'sticky DESC', $orderby);
+        }
+
+        // Ensure consistency by adding id ordering
+        $orderby .= ', id DESC';
+
+        // Limits
+        $limitfrom = ($page-1) * $CFG->forumng_discussionsperpage;
+        $limitnum = $CFG->forumng_discussionsperpage;
+
+        // Do query
+        $rs = mod_forumng_discussion::query_discussions($conditions, $conditionparams, $userid,
+            $orderby, $limitfrom, $limitnum, $this, false, $hastag);
+
+        $result = new mod_forumng_discussion_list($page, $pagecount, $count);
+        foreach ($rs as $rec) {
+            // Create a new discussion from the database details
+            $discussion = new mod_forumng_discussion($this, $rec, true,
+                mod_forumng_utils::get_real_userid($userid));
+
+            // Give the discussion a chance to invalidate discussion
+            // cache. This is so that if the user looks at a discussion
+            // list, and it shows a newer post, then they click into the
+            // discussion, they don't end up not seeing it!
+            $discussion->maybe_invalidate_cache();
+
+            // Add to results
+            $result->add_discussion($discussion);
+        }
+        $rs->close();
+        return $result;
+    }
+
+    /**
+     * Creates a new discussion in this forum.
+     * @param int $groupid Group ID for the discussion or null if it should show
+     *   to all groups
+     * @param string $subject Subject of message
+     * @param string $message Message content
+     * @param int $format Format of message content
+     * @param bool $attachments True if discussion contains attachments
+     * @param bool $mailnow True to mail ASAP, else false
+     * @param int $timestart Visibility time of discussion (seconds since epoch) or null
+     * @param int $timeend Time at which discussion disappears (seconds since epoch) or null
+     * @param bool $locked True if discussion should be locked
+     * @param bool $sticky True if discussion should be sticky
+     * @param int $userid User ID or 0 for current user
+     * @param bool $log True to log this
+     * @param int $asmoderator values are ASMODERATOR_NO, ASMODERATOR_IDENTIFY or ASMODERATOR_ANON
+     * @param array $tags array of tags to add to a discussion
+     * @return array Array with 2 elements ($discussionid, $postid)
+     */
+    public function create_discussion($groupid,
+            $subject, $message, $format, $attachments=false, $mailnow=false,
+            $timestart=0, $timeend=0, $locked=false, $sticky=false,
+            $userid=0, $log=true, $asmoderator = self::ASMODERATOR_NO, $tags = null) {
+        global $DB, $CFG;
+        require_once($CFG->dirroot . '/tag/lib.php');
+
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // Prepare discussion object
+        $discussionobj = new StdClass;
+        $discussionobj->forumngid = $this->forumfields->id;
+        $discussionobj->groupid =
+            ($groupid == self::ALL_GROUPS || $groupid==self::NO_GROUPS)
+            ? null : $groupid;
+        $discussionobj->postid = null; // Temporary until we create that first post
+        $discussionobj->lastpostid = null;
+        $discussionobj->timestart = $timestart;
+        $discussionobj->timeend = $timeend;
+        $discussionobj->deleted = 0;
+        $discussionobj->locked = $locked ? 1 : 0;
+        $discussionobj->sticky = $sticky ? 1 : 0;
+
+        // Create discussion
+        $transaction = $DB->start_delegated_transaction();
+        $discussionobj->id = $DB->insert_record('forumng_discussions', $discussionobj);
+        $newdiscussion = new mod_forumng_discussion($this, $discussionobj, false, -1);
+
+        // Create initial post.
+        $postid = $newdiscussion->create_root_post(
+            $subject, $message, $format, $attachments, $mailnow, $userid, $asmoderator);
+
+        // Update discussion so that it contains the post id
+        $changes = new StdClass;
+        $changes->id = $discussionobj->id;
+        $changes->postid = $postid;
+        $changes->lastpostid = $postid;
+        $DB->update_record('forumng_discussions', $changes);
+
+        $newdiscussion->log('add discussion');
+
+        if (self::search_installed()) {
+            mod_forumng_post::get_from_id($postid,
+                    $this->get_course_module_id())->search_update();
+        }
+
+        // If tags add to tag_instance records.
+        if ($tags != null) {
+            core_tag_tag::set_item_tags('mod_forumng', 'forumng_discussions', $discussionobj->id, $this->context, $tags);
+        }
+
+        $transaction->allow_commit();
+        return array($newdiscussion->get_id(), $postid);
+    }
+
+    /**
+     * @return string Hash of the settings of this forum which could possibly
+     *   affect cached discussion objects
+     */
+    public function get_settings_hash() {
+        return md5(
+            $this->forumfields->ratingscale .
+            $this->forumfields->ratingfrom .
+            $this->forumfields->ratinguntil .
+            $this->forumfields->ratingthreshold .
+            $this->forumfields->grading .
+            $this->forumfields->ratingthreshold .
+            $this->forumfields->typedata);
+    }
+
+    // Unread data
+    /*////////////*/
+
+    /**
+     * Marks all discussions in this forum as read.
+     * @param int $groupid Group user is looking at (will mark all discussions
+     *   in this group, plus all in the 'all/no groups' section; ALL_GROUPS
+     *   marks regardless of group; NO_GROUPS marks those without group)
+     * @param int $time Time to mark it read at (0 = now)
+     * @param int $userid User who's read the discussion (0=current)
+     */
+    public function mark_read($groupid, $time=0, $userid=0) {
+        global $DB;
+        if (!$userid) {
+            global $USER;
+            $userid = $USER->id;
+        }
+        if (!$time) {
+            $time = time();
+        }
+        $transaction = $DB->start_delegated_transaction();
+
+        $conditionparams = array();
+        $conditions = "fd.forumngid = ?";
+        $conditionparams[] = $this->forumfields->id;
+
+        // Group restriction
+        if ($groupid) {
+            if ($groupid == self::NO_GROUPS) {
+                $conditions .= " AND fd.groupid IS NULL";
+            } else {
+                // Separate group
+                $conditions .= " AND (fd.groupid = ? OR fd.groupid IS NULL)";
+                $conditionparams[] = $groupid;
+            }
+        }
+
+        $conditions .= " AND fplast.modified >= ?";
+        $conditionparams[] = self::get_read_tracking_deadline();
+        $rs = mod_forumng_discussion::query_discussions($conditions, $conditionparams, -1,
+                '', '', '', $this);
+        $discussions = array();
+        $discussionids = array();
+        $forumtype = $this->get_type();
+        foreach ($rs as $rec) {
+            // Create a new discussion from the database details
+            $discussion = new mod_forumng_discussion($this, $rec, true, -1);
+            // Let forum type check permission too
+            if ($forumtype->can_view_discussion($discussion, $userid)) {
+                // Check time limits / delete
+                if ($discussion->is_currently_visible() ||
+                        has_capability('mod/forumng:viewallposts',
+                        $this->get_context(), $userid)) {
+                    $discussions[$discussion->get_id()] = $discussion;
+                    $discussionids[] = $discussion->get_id();
+                }
+            }
+        }
+        $rs->close();
+
+        if (count($discussions) > 0) {
+            // Delete any existing records for those discussions
+            list($inorequals, $inparams) =
+                    mod_forumng_utils::get_in_array_sql('discussionid', $discussionids);
+            $DB->execute("DELETE FROM {forumng_read} WHERE userid = ? AND $inorequals",
+                    array_merge(array($userid), $inparams));
+
+            // Add new record for each discussion
+            foreach ($discussions as $discussion) {
+                $readrecord = new StdClass;
+                $readrecord->userid = $userid;
+                $readrecord->discussionid = $discussion->get_id();
+                $readrecord->time = $time;
+                $DB->insert_record('forumng_read', $readrecord);
+            }
+
+            // Delete any individual post records for discussions as now redundant.
+            $DB->execute("DELETE FROM {forumng_read_posts}
+                            WHERE postid IN(
+                                  SELECT id FROM {forumng_posts}
+                                   WHERE $inorequals)
+                              AND userid = ? AND time <= ?",
+                    array_merge($inparams, array($userid, $time)));
+        }
+
+        $transaction->allow_commit();
+    }
+
+    // Subscriptions
+    /*//////////////*/
+
+    /**
+     * Subscribes a user to this forum. (Assuming it permits manual subscribe/
+     * unsubscribe.)
+     * @param $userid User ID (default current)
+     * @param $groupid Group ID to unsubscribe to (default null = whole forum)
+     * @param $log True to log this
+     */
+    public function subscribe($userid=0, $groupid=null, $log=true) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        // For shared forums, we subscribe to a specific clone
+        if ($this->is_shared()) {
+            $clonecmid = $this->get_course_module_id();
+            $clonevalue = '=?';
+            $cloneparams = array($clonecmid);
+        } else {
+            $clonecmid = null;
+            $clonevalue = 'IS NULL';
+            $cloneparams = array();
+        }
+        $transaction = $DB->start_delegated_transaction();
+        // delete all the subscriptions to the discussions in the entire forum or
+        // the discussions in the specified group if any
+        if (!$groupid) {
+            // Delete all the subscriptions to the discussions/groups in the entire forum.
+            $DB->execute(
+                    "DELETE FROM {forumng_subscriptions} " .
+                    "WHERE userid = ? AND forumngid = ? AND clonecmid $clonevalue " .
+                    "AND subscribed = 1 AND (discussionid IS NOT NULL OR groupid IS NOT NULL)",
+                    array_merge(array($userid, $this->forumfields->id), $cloneparams));
+            $existing = $DB->get_record('forumng_subscriptions',
+                    array('userid' => $userid, 'forumngid' => $this->forumfields->id,
+                    'clonecmid' => $clonecmid), '*', IGNORE_MISSING);
+            if (!$existing) {
+                $subrecord = new StdClass;
+                $subrecord->userid = $userid;
+                $subrecord->forumngid = $this->forumfields->id;
+                $subrecord->subscribed = 1;
+                $subrecord->clonecmid = $clonecmid;
+                $DB->insert_record('forumng_subscriptions', $subrecord);
+            } else if (!$existing->subscribed) {
+                // See if this is initial-subscription and we are subscribed by
+                // default, if so just remove the record
+                if ($this->is_initially_subscribed($userid, true)) {
+                    $DB->delete_records('forumng_subscriptions', array('id' => $existing->id));
+                } else {
+                    $subchange = new StdClass;
+                    $subchange->id = $existing->id;
+                    $subchange->subscribed = 1;
+                    $DB->update_record('forumng_subscriptions', $subchange);
+                }
+            }
+        } else {
+            // Delete all the subscriptions to the discussions in the the specified group if any.
+            $discussionquery = "SELECT id FROM {forumng_discussions} " .
+                    "WHERE forumngid = ? AND groupid = ?";
+            $discussionparams = array($this->forumfields->id, $groupid);
+            // Share forum doesn't support group mode so we don't check clonecmid.
+            $DB->execute(
+                    "DELETE FROM {forumng_subscriptions} " .
+                    "WHERE userid = ? AND forumngid = ? AND subscribed = 1 " .
+                    "AND discussionid IS NOT NULL AND discussionid IN ($discussionquery)",
+                    array_merge(array($userid, $this->forumfields->id), $discussionparams));
+            // Do some housekeeping in case some invalid data deleting any group subscription
+            // if any (shouldn't have any records to be deleted ideally)
+            $DB->delete_records('forumng_subscriptions', array('userid' => $userid,
+                    'forumngid' => $this->forumfields->id, 'groupid' => $groupid));
+            $subrecord = new StdClass;
+            $subrecord->userid = $userid;
+            $subrecord->forumngid = $this->forumfields->id;
+            $subrecord->subscribed = 1;
+            $subrecord->groupid = $groupid;
+
+            $DB->insert_record('forumng_subscriptions', $subrecord);
+        }
+        $transaction->allow_commit();
+        if ($log) {
+            $this->log('subscribe', $userid . ' ' .
+                    ($groupid ? 'group ' . $groupid : 'all'));
+        }
+    }
+
+    /**
+     * Unsubscribes a user from this forum.
+     * @param $userid User ID (default current)
+     * @param $groupid Group ID to unsubscribe from (default null = whole forum)
+     * @param $log True to log this
+     */
+    public function unsubscribe($userid=0, $groupid=null, $log=true) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        // For shared forums, we subscribe to a specific clone
+        if ($this->is_shared()) {
+            $clonecmid = $this->get_course_module_id();
+            $clonevalue = '=?';
+            $cloneparams = array($clonecmid);
+        } else {
+            $clonecmid = null;
+            $clonevalue = 'IS NULL';
+            $cloneparams = array();
+        }
+        if (!$groupid) {
+            // Unsubscribe from the whole forum; deleting all the discussion/group subscriptions.
+            $DB->execute("DELETE FROM {forumng_subscriptions} " .
+                    "WHERE userid = ? AND forumngid = ? AND clonecmid $clonevalue AND " .
+                    "subscribed = 1 " . "AND (discussionid IS NOT NULL OR groupid IS NOT NULL)",
+                    array_merge(array($userid, $this->forumfields->id), $cloneparams));
+            if ($this->is_initially_subscribed($userid, true)) {
+                $existing = $DB->get_record('forumng_subscriptions',
+                    array('userid' => $userid, 'forumngid' => $this->forumfields->id,
+                    'clonecmid' => $clonecmid));
+                if (!$existing) {
+                    $subrecord = new StdClass;
+                    $subrecord->userid = $userid;
+                    $subrecord->forumngid = $this->forumfields->id;
+                    $subrecord->subscribed = 0;
+                    $subrecord->clonecmid = $clonecmid;
+
+                    $DB->insert_record('forumng_subscriptions', $subrecord);
+                } else if ($existing->subscribed) {
+                    $subchange = new StdClass;
+                    $subchange->id = $existing->id;
+                    $subchange->subscribed = 0;
+
+                    $DB->update_record('forumng_subscriptions', $subchange);
+                }
+            } else {
+                $DB->delete_records('forumng_subscriptions', array('userid' => $userid,
+                    'forumngid' => $this->forumfields->id, 'clonecmid' => $clonecmid));
+            }
+        } else {
+            // Unsubscribe from the specified group; remove all the subscritions
+            // to the discussions which belongs to the group if any.
+            $discussionquery = "SELECT id FROM {forumng_discussions}
+                WHERE forumngid = ? AND groupid = ?";
+            $discussionparams = array($this->forumfields->id, $groupid);
+            $DB->execute(
+                "DELETE FROM {forumng_subscriptions} " .
+                "WHERE userid = ? AND forumngid = ? AND subscribed = 1 " .
+                "AND discussionid IS NOT NULL AND discussionid IN ($discussionquery)",
+                array_merge(array($userid, $this->forumfields->id), $discussionparams));
+            $DB->delete_records('forumng_subscriptions', array('userid' => $userid,
+                    'forumngid' => $this->forumfields->id, 'groupid' => $groupid));
+        }
+        if ($log) {
+            $this->log('unsubscribe', $userid . ' ' .
+                    ($groupid ? 'group ' . $groupid : 'all'));
+        }
+    }
+
+    /**
+     * Determines whether a user can subscribe/unsubscribe to a forum.
+     * @param int $userid User ID, 0 for default
+     * @return bool True if user is allowed to change their subscription
+     */
+    public function can_change_subscription($userid=0) {
+        switch ($this->get_effective_subscription_option()) {
+            case self::SUBSCRIPTION_NOT_PERMITTED:
+                return false;
+
+            case self::SUBSCRIPTION_FORCED:
+                if ($this->is_forced_to_subscribe($userid)) {
+                    return false;
+                }
+
+                // Fall through
+            default:
+                return $this->can_be_subscribed($userid);
+        }
+    }
+
+    /**
+     * Checks whether a user can be subscribed to the forum, regardless of
+     * subscription option. Includes a variety of other checks. [These are
+     * supposed to be the same as checks done when building the list of people
+     * for email.]
+     * @param int $userid User ID or 0 for current
+     * @return bool True if user can be subscribed
+     */
+    private function can_be_subscribed($userid=0) {
+        global $USER, $CFG;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $cm = $this->get_course_module();
+        $course = $this->get_course();
+        $context = $this->get_context();
+
+        // Guests cannot subscribe
+        if (!isloggedin() || isguestuser($userid)) {
+            return false;
+        }
+
+        // Get from cache if possible
+        if (!isset($this->cache->can_be_subscribed)) {
+            $this->cache->can_be_subscribed = array();
+        }
+        if (array_key_exists($userid, $this->cache->can_be_subscribed)) {
+            return $this->cache->can_be_subscribed[$userid];
+        }
+
+        // This is not a loop, just so I can use break
+        do {
+            // Check user can see forum
+            if (!has_capability('mod/forumng:viewdiscussion', $context, $userid)) {
+                $result = false;
+                break;
+            }
+            // For current user, can take shortcut
+            if ($userid == $USER->id) {
+                if (empty($cm->uservisible)) {
+                    $uservisible = false;
+                } else {
+                    $uservisible = true;
+                }
+                if (!$uservisible) {
+                    $result = false;
+                    break;
+                }
+            } else {
+                $visible = $cm->visible;
+                $info = new \core_availability\info_module($cm);
+                $visible = $visible &&
+                    $info->is_available($crap, false, $userid);
+                if (!$visible && !has_capability(
+                    'moodle/site:viewhiddenactivities', $context, $userid)) {
+                    $result = false;
+                    break;
+                }
+            }
+            if ($this->get_group_mode() == SEPARATEGROUPS &&
+                    !has_capability('moodle/site:accessallgroups', $context, $userid)) {
+                // Limit it to people within groups in the grouping, if one is selected.
+                $groupobjs = groups_get_all_groups($course->id, $userid, $cm->groupingid, 'g.id');
+                if (!$groupobjs || count($groupobjs) == 0) {
+                    $result = false;
+                    break;
+                }
+            }
+            $result = true;
+            break;
+        } while (false);
+
+        $this->cache->can_be_subscribed[$userid] = $result;
+        return $result;
+    }
+
+    /**
+     * Determines whether a user is forced to subscribe.
+     * @param int $userid User ID or 0 for current
+     * @param bool $expectingquery True if expecting query (note this
+     *   value is ignored if you specify a non-current userid, then it will
+     *   always make queries)
+     * @return bool True if forced to subscribe
+     */
+    public function is_forced_to_subscribe($userid=0, $expectingquery=false) {
+
+        // Only for forced-subscription forums, duh
+        $subscriptionoption = $this->get_effective_subscription_option();
+        if ($subscriptionoption != self::SUBSCRIPTION_FORCED) {
+            return false;
+        }
+
+        return $this->is_in_auto_subscribe_list($userid, $expectingquery);
+    }
+
+    /**
+     * Determines whether a user is initially subscribed.
+     * @param int $userid User ID or 0 for current
+     * @param bool $expectingquery True if expecting query (note this
+     *   value is ignored if you specify a non-current userid, then it will
+     *   always make queries)
+     * @return bool True if initially subscribe
+     */
+    public function is_initially_subscribed($userid=0, $expectingquery=false) {
+
+        // Only for initial-subscription forums, duh
+        $subscriptionoption = $this->get_effective_subscription_option();
+        if ($subscriptionoption != self::SUBSCRIPTION_INITIALLY_SUBSCRIBED) {
+            return false;
+        }
+
+        return $this->is_in_auto_subscribe_list($userid, $expectingquery);
+    }
+
+    /**
+     * Determines whether a user is in the auto-subscribe list for this forum
+     * (applies in initial/forced subscription forums).
+     * @param int $userid User ID or 0 for current
+     * @param bool $expectingquery True if expecting query (note this
+     *   value is ignored if you specify a non-current userid, then it will
+     *   always make queries; also it always makes a query on the first request
+     *   in session)
+     * @return bool True if forced to subscribe
+     */
+    public function is_in_auto_subscribe_list($userid=0, $expectingquery=false) {
+        global $DB, $USER;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // Check standard subscription allowed.
+        if (!$this->can_be_subscribed($userid)) {
+            return false;
+        }
+
+        // Check user has role in subscribe roles.
+        if (!isset($USER->forumng_enrolcourses[$userid])) {
+            if (!isset($USER->forumng_enrolcourses)) {
+                $USER->forumng_enrolcourses = array();
+            }
+            if (isset($USER) && $userid == $USER->id) {
+                // Note: This always makes a query the first time in the session :(
+                $USER->forumng_enrolcourses[$userid] = enrol_get_my_courses('id');
+            } else {
+                $USER->forumng_enrolcourses[$userid] = enrol_get_users_courses($userid, true, 'id');
+            }
+        }
+        return array_key_exists($this->get_course_id(), $USER->forumng_enrolcourses[$userid]);
+    }
+
+    /**
+     * Return the subscription info of the user.
+     * @param int $userid User ID or 0 for current
+     * @param bool $expectingquery True if expecting query (note this
+     *   value is ignored if you specify a non-current userid, then it will
+     *   always make queries)
+     * @return object with three fields, $wholeforum, $discussionids (associated array
+     * with discussion id as the key and its group id as value and $groupids
+     * If $wholeforum = true and both $discussionids and $groupids is empty,
+     * subscribed to the whole forum;
+     * If $wholeforum = false and $discussionids isn't empty while the groupids is empty,
+     * subscribed to a list of discussions
+     * If $wholeforum = false and $discussionids is empty while the groupids is not empty,
+     * subscribed to a list of groups
+     * If $wholeforum = false and both $discussionids and groupids is not empty,
+     * subscribed to both a list of discussions and a list of groups
+     */
+    public function get_subscription_info($userid=0, $expectingquery=false) {
+        global $DB, $FORUMNG_CACHE;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        if (!isset($FORUMNG_CACHE)) {
+            $FORUMNG_CACHE = new stdClass;
+        }
+        if (!isset($FORUMNG_CACHE->subscriptioninfo)) {
+            $FORUMNG_CACHE->subscriptioninfo = array();
+        }
+        $key = $userid . ':' . $this->get_id();
+        if (array_key_exists($key, $FORUMNG_CACHE->subscriptioninfo)) {
+            return $FORUMNG_CACHE->subscriptioninfo[$key];
+        }
+
+        $user = (object)(array('wholeforum'=>false, 'discussionids'=>array(),
+                'groupids'=>array()));
+
+        // If subscription's banned, you ain't subscribed
+        $subscriptionoption = $this->get_effective_subscription_option();
+        if ($subscriptionoption == self::SUBSCRIPTION_NOT_PERMITTED) {
+            $FORUMNG_CACHE->subscriptioninfo[$userid] = $user;
+            return $user;
+        }
+
+        // Make extra checks that subscription is allowed
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        if (!$this->can_be_subscribed($userid)) {
+            $FORUMNG_CACHE->subscriptioninfo[$userid] = $user;
+            return $user;
+        }
+
+        // Forced subscription
+        if ($this->is_forced_to_subscribe($userid, $expectingquery)) {
+            $user->wholeforum = true;
+            $FORUMNG_CACHE->subscriptioninfo[$userid] = $user;
+            return $user;
+        }
+
+        if ($this->is_initially_subscribed($userid, $expectingquery)) {
+            $user->wholeforum = true;
+        }
+
+        // For shared forums, we subscribe to a specific clone
+        if ($this->is_shared()) {
+            $clonevalue = '=?';
+            $cloneparams = array($this->get_course_module_id());
+        } else {
+            $clonevalue = 'IS NULL';
+            $cloneparams = array();
+        }
+        $rs = $DB->get_recordset_sql($sql = "
+SELECT s.subscribed, s.discussionid, s.groupid, fd.groupid AS discussiongroupid,
+discussiongm.id AS discussiongroupmember, subscriptiongm.id AS subscriptiongroupmember
+FROM
+    {forumng_subscriptions} s
+    LEFT JOIN {forumng_discussions} fd ON fd.id = s.discussionid
+    LEFT JOIN {groups_members} discussiongm ON fd.groupid = discussiongm.groupid
+        AND s.userid = discussiongm.userid
+    LEFT JOIN {groups_members} subscriptiongm ON s.groupid = subscriptiongm.groupid
+        AND s.userid = subscriptiongm.userid
+WHERE
+    s.forumngid = ?
+    AND s.userid = ?
+    AND (fd.forumngid = ? OR s.discussionid IS NULL)
+    AND s.clonecmid $clonevalue",
+                array_merge(array($this->forumfields->id, $userid, $this->forumfields->id),
+                $cloneparams));
+
+        $context = $this->get_context();
+        $canviewdiscussion = has_capability('mod/forumng:viewdiscussion', $context, $userid);
+        $canaccessallgroups = has_capability('moodle/site:accessallgroups', $context, $userid);
+        foreach ($rs as $rec) {
+
+            if ($rec->subscribed) {
+                // Rewrite the whole block.
+                if ($rec->groupid) {
+                    // Subscrbied to a list of groups only
+                    // Only allow this row to count if the user has access to subscribe to group
+                    // 1. User must have mod/forumng:viewdiscussion
+                    // 2. One of the following must be true:
+                    //    a. Forum is set to visible groups (if forum is set for no groups,
+                    //       we will ignore this group subscription
+                    //    b. User belongs to the group (check the field)
+                    //    c. User has accessallgroups
+                    $groupok = $this->get_group_mode() == VISIBLEGROUPS ||
+                            $rec->subscriptiongroupmember || $canaccessallgroups;
+                    if ($canviewdiscussion && $groupok ) {
+                        $user->groupids[$rec->groupid] = $rec->groupid;
+                    }
+                } else if ($rec->discussionid) {
+                    // $groupok if disucssion belong to all groups or the user in the same group
+                    // as the discussion belongs to orthe forum is set to be visible groups
+                    $groupok = !$rec->discussiongroupid || $rec->discussiongroupmember ||
+                        $this->get_group_mode() == VISIBLEGROUPS || $canaccessallgroups;
+                    if ($canviewdiscussion && $groupok) {
+                        $user->discussionids[$rec->discussionid] = $rec->discussiongroupid;
+                    }
+                } else {
+                    // Subscribed to the whole forum, quit the loop as no more records should
+                    // match if the database data isn't messed up.
+                    // Only allow this row to count if the user has access to subscribe to
+                    // whole forum
+                    //     1. User must have mod/forumng:viewdiscussion
+                    //     2. One of the following must be true:
+                    //        a. Forum is set to no groups, or to visible groups
+                    //        b. User has accessallgroups
+                    $groupok = $this->get_group_mode() == VISIBLEGROUPS ||
+                        $this->get_group_mode() == NOGROUPS || $canaccessallgroups;
+                    if ($canviewdiscussion && $groupok) {
+                        $user->wholeforum = true;
+                        break;
+                    }
+                }
+            } else if ($subscriptionoption == self::SUBSCRIPTION_INITIALLY_SUBSCRIBED) {
+                // This is an 'unsubscribe' request. These are only allowed
+                // for initial-subscription, otherwise ignored
+                $user->wholeforum = false;
+            }
+        }
+        $rs->close();
+
+        // clear the discussions array if wholeforum is true
+        if ($user->wholeforum) {
+            $user->discussionids = array ();
+            $user->groupids = array ();
+        }
+
+        $FORUMNG_CACHE->subscriptioninfo[$userid] = $user;
+        return $user;
+    }
+
+    /**
+     * Obtains current forum subscription option, taking into account global
+     * setting as well as this forum.
+     * @return int SUBSCRIPTION_xx constant
+     */
+    public function get_effective_subscription_option() {
+        global $CFG;
+
+        // Global 'force' option overrides local option if set
+        $result = $CFG->forumng_subscription;
+        if ($result == -1) {
+            $result = $this->forumfields->subscription;
+        }
+        return $result;
+    }
+
+    /**
+     * Obtains current forum feed type option, taking into account global
+     * setting as well as this forum.
+     * @return int FEEDTYPE_xx constant
+     */
+    public function get_effective_feed_option() {
+        global $CFG;
+
+        // Global 'force' used if set
+        $result = $CFG->forumng_feedtype;
+
+        // Feeds can be disabled globally or for whole module
+        if (!($CFG->forumng_enablerssfeeds && $CFG->enablerssfeeds)) {
+            $result = self::FEEDTYPE_NONE;
+        }
+
+        // If none of the above applied, use the module's setting
+        if ($result == -1) {
+            $result = $this->forumfields->feedtype;
+        }
+
+        return $result;
+    }
+
+    /**
+     * Obtains the list of people who are forced to subscribe to the forum
+     * (if forced) or are by default subscribed (if initial).
+     *
+     * On a shared forum, this returns only the relevant list for the current
+     * clone of the forum.
+     * @param int $groupid If specified, restricts list to this group id
+     * @return array Array of partial user objects (with enough info to send
+     *   email and display them)
+     */
+    public function get_auto_subscribers($groupid = self::ALL_GROUPS) {
+        global $DB;
+        switch ($this->get_effective_subscription_option()) {
+            case self::SUBSCRIPTION_FORCED :
+            case self::SUBSCRIPTION_INITIALLY_SUBSCRIBED :
+                break;
+            default:
+                return array();
+        }
+
+        // Gets all users who are enrolled on the course and have viewdiscussions capability,
+        // limited to a group if specified.
+        list($enrolsql, $enrolparams) = get_enrolled_sql($this->get_context(),
+                'mod/forumng:viewdiscussion', $groupid >= 0 ? $groupid : 0, true);
+        $users =  $DB->get_records_sql("SELECT " .
+                mod_forumng_utils::select_username_fields('', true) .
+                " FROM {user} u WHERE u.id IN ($enrolsql)", $enrolparams);
+        $avail = new \core_availability\info_module($this->get_course_module());
+        $users = $avail->filter_user_list($users);
+        if ($groupid == self::ALL_GROUPS && $groups = $this->get_permitted_groups()) {
+            // Separate groups grouping enabled forum (+ group not specified) - must be in a group.
+            raise_memory_limit(MEMORY_EXTRA);
+            $groupmembers = get_users_by_capability($this->get_context(),
+                        'mod/forumng:viewdiscussion', 'u.id', '', '', '',
+                        $groups, '', 0, 0, true);
+            $newusers = array();
+            foreach ($users as $id => $ob) {
+                if (array_key_exists($id, $groupmembers)) {
+                    $newusers[$id] = $ob;
+                }
+            }
+            return $newusers;
+        }
+        return $users;
+    }
+
+    /**
+     * Obtains a list of group IDs that are permitted to use this forum.
+     * This is not the same as restriction.
+     * Group id's will be sent when a separate groups forum with grouping applied.
+     * @return mixed Either an array of IDs, or '' if all groups permitted
+     */
+    private function get_permitted_groups() {
+        $groups = '';
+        $groupmode = $this->get_group_mode();
+        $grouping = $this->get_grouping();
+        if ($groupmode == SEPARATEGROUPS) {
+            $groupobjs = groups_get_all_groups($this->get_course()->id, 0, $grouping, 'g.id');
+            $groups = array();
+            foreach ($groupobjs as $groupobj) {
+                $groups[] = $groupobj->id;
+            }
+        }
+        return $groups;
+    }
+
+    /**
+     * Obtains list of forum subscribers.
+     * @param int $groupid If specified, restricts list to this group id
+     * @return array Array of partial user objects (with enough info to send
+     *   email and display them); additionally, if the forum is in group mode,
+     *   this includes an ->accessallgroups boolean
+     */
+    public function get_subscribers($groupid= self::ALL_GROUPS) {
+        global $DB;
+
+        // Array that will contain result
+        $users = array();
+
+        // Get permitted groups
+        $groups = $this->get_permitted_groups();
+
+        $subscriptionoption = $this->get_effective_subscription_option();
+        switch ($subscriptionoption) {
+            case self::SUBSCRIPTION_NOT_PERMITTED:
+                return array();
+
+            case self::SUBSCRIPTION_FORCED:
+            case self::SUBSCRIPTION_INITIALLY_SUBSCRIBED:
+                $users = $this->get_auto_subscribers($groupid);
+                // Add $wholeforum = 1 and an empty array() for discussionid
+                // for people who initially subscribed.
+                foreach ($users as $user) {
+                    $user->wholeforum = true;
+                    $user->discussionids = array ();
+                    $user->groupids = array ();
+                }
+                break;
+
+            default:
+                // The other two cases (initial subscribe, and manual subscribe)
+                // fall through to the standard code below.
+        }
+
+        $context = $this->get_context();
+
+        // For shared forums, we only return the subscribers for the current
+        // clone
+        $clonecheck = "";
+        if ($this->is_shared()) {
+            $clonecheck = 'AND s.clonecmid = ' . $this->get_course_module_id();
+        }
+
+        // Obtain the list of users who have access all groups on the forum,
+        // unless it's in no-groups mode
+        $groupmode = $this->get_group_mode();
+        if ($groupmode) {
+            // Get a list of user who can access all groups.
+            $aagusers = get_users_by_capability($context, 'moodle/site:accessallgroups', 'u.id');
+            mod_forumng_utils::add_admin_users($aagusers);
+        }
+        // Get the list of subscribed users.
+        if ($groupid == self::ALL_GROUPS || $groupid == self::NO_GROUPS) {
+            $groupcheck = '';
+            $groupparams = array();
+        } else {
+            $groupcheck = "INNER JOIN {groups_members} gm ON gm.userid = u.id AND gm.groupid = ?";
+            $groupparams = array($groupid);
+        }
+
+        $rs = $DB->get_recordset_sql($sql = "
+SELECT
+    ".mod_forumng_utils::select_username_fields('u', true).",
+    s.subscribed, s.discussionid, s.groupid, fd.groupid AS discussiongroupid,
+    discussiongm.id AS discussiongroupmember, subscriptiongm.id AS subscriptiongroupmember
+FROM
+    {forumng_subscriptions} s
+    INNER JOIN {user} u ON u.id = s.userid
+    $groupcheck
+    LEFT JOIN {forumng_discussions} fd ON fd.id = s.discussionid
+    LEFT JOIN {groups_members} discussiongm ON fd.groupid = discussiongm.groupid
+        AND s.userid = discussiongm.userid
+    LEFT JOIN {groups_members} subscriptiongm ON s.groupid = subscriptiongm.groupid
+        AND s.userid = subscriptiongm.userid
+WHERE
+    s.forumngid = ?
+    AND (fd.forumngid = ? OR s.discussionid IS NULL)
+    $clonecheck", array_merge($groupparams,
+            array($this->forumfields->id, $this->forumfields->id)));
+
+        // Filter the result against the list of allowed users
+        $allowedusers = null;
+        foreach ($rs as $rec) {
+            // Subscribed to the whole forum when subscribed == 1 and disucssionid =='';
+            // *** Put the allowedusers checks in same part of code so not duplicated
+            if ($rec->subscribed) {
+                // This is a 'subscribe' request
+                if (!$allowedusers) {
+                    // Obtain the list of users who are allowed to see the forum.
+                    // As get_users_by_capability can be expensive, we only do this
+                    // once we know there actually are subscribers (and force rasing memory).
+                    raise_memory_limit(MEMORY_EXTRA);
+                    $allowedusers = get_users_by_capability($context,
+                        'mod/forumng:viewdiscussion', 'u.id', '', '', '',
+                        $groups, '', 0, 0, true);
+                    // Filter possible users by activity availability.
+                    $avail = new \core_availability\info_module($this->get_course_module());
+                    $allowedusers = $avail->filter_user_list($allowedusers);
+                    mod_forumng_utils::add_admin_users($allowedusers);
+                }
+                // Get reference to current user, or make new object if required
+                if (!array_key_exists($rec->u_id, $users)) {
+                    $user = mod_forumng_utils::extract_subobject($rec, 'u_');
+                    $user->wholeforum = false;
+                    $user->discussionids = array();
+                    $user->groupids = array();
+                    $newuser = true;
+                } else {
+                    $user = $users[$rec->u_id];
+                    $newuser = false;
+                }
+                $ok = false;
+                // Subscribed to a discussion.
+                if ($rec->discussionid) {
+                    $groupok = !$rec->discussiongroupid || $rec->discussiongroupmember ||
+                        $groupmode==VISIBLEGROUPS || array_key_exists($user->id, $aagusers);
+                    if (array_key_exists($user->id, $allowedusers) && $groupok) {
+                        $ok = true;
+                        $user->discussionids[$rec->discussionid] = $rec->discussiongroupid;
+                    }
+                    // Subscribed to a group.
+                } else if ($rec->groupid) {
+                    $groupok = $groupmode == VISIBLEGROUPS ||
+                        ($groupmode == SEPARATEGROUPS &&
+                        ($rec->subscriptiongroupmember || array_key_exists($user->id, $aagusers)));
+                    if (array_key_exists($user->id, $allowedusers) && $groupok) {
+                        $user->groupids[$rec->groupid] = $rec->groupid;
+                        $ok = true;
+                    }
+                    // Subscribed to the whole forum.
+                } else {
+                    // extra conditions for forum not separate groups or accessallgroups
+                    $groupok = $groupmode != SEPARATEGROUPS ||
+                            array_key_exists($user->id, $aagusers);
+                    if (array_key_exists($user->id, $allowedusers) && $groupok) {
+                        $user->wholeforum = true;
+                        $ok = true;
+                    }
+                }
+                // If this is a new user object, add it to the array provided the row was valid
+                if ($newuser && $ok) {
+                    $users[$user->id] = $user;
+                }
+            } else {
+                // This is an 'unsubscribe' request. These are only allowed
+                // for initial-subscription, otherwise ignored
+                if ($subscriptionoption == self::SUBSCRIPTION_INITIALLY_SUBSCRIBED
+                    && array_key_exists($user->id, $users)) {
+                    // set wholeforum = false for user (if they are in the array)
+                    $users[$rec->u_id]->unsubscribe = true;
+                    $users[$rec->u_id]->wholeforum = false;
+                }
+            }
+        }
+        $rs->close();
+        $allowedusers = null;
+
+        // 1. loop through array and clear the discussions/groupids array if wholeforum is true.
+        // 2. Find any user unsubscribed from initial subscribed forum. If the user has been
+        //    subscribed to discussions/groups, remove the $user->unsubscribe flag;
+        //    Otherwise remove the user from the list.
+        foreach ($users as $key => $user) {
+            if ($user->wholeforum) {
+                $user->discussionids = array ();
+                $user->groupids = array ();
+            }
+            // Remove discussionids for discussions that are already covered by group subscriptions
+            // TODO
+            if (count($user->discussionids) != 0 && count($user->groupids) != 0) {
+                foreach ($user->discussionids as $id => $dgroupid) {
+                    if (!$dgroupid || array_key_exists($dgroupid, $user->groupids)) {
+                        unset($user->discussionids[$id]);
+                    }
+                }
+            }
+            // If the user has unsubscribed from an initial subscription, then remove the entry
+            // from the results array unless there are s subscriptions to discussions or groups
+            if (!empty($user->unsubscribe)) {
+                // Remove the unsubscribe as the user is likely to
+                // subscribed to discussions or groups
+                unset($user->unsubscribe);
+                if (count($user->discussionids) == 0 && count($user->groupids) == 0) {
+                    unset($users[$key]);
+                }
+            }
+        }
+
+        // Add access-all-groups information if applicable
+        if ($groupmode) {
+            foreach ($users as $key => $user) {
+                $user->accessallgroups = array_key_exists($user->id, $aagusers);
+            }
+        }
+
+        return $users;
+    }
+
+    // Permissions
+    /*////////////*/
+
+    /**
+     * Makes security checks for viewing this forum. Will not return if user
+     * cannot view it.
+     * This function calls Moodle require_login, so should be a complete
+     * access check. It should be placed near the top of a page.
+     * Note that this function only works for the current user when used in
+     * interactive mode (ordinary web page view). It cannot be called in cron,
+     * web services, etc.
+     *
+     * @param int $groupid Group ID user is attempting to view (may also be
+     *   ALL_GROUPS or NO_GROUPS or null)
+     * @param int $userid User ID or 0 for current; only specify user ID when
+     *   there is no current user and normal login process is not required -
+     *   do NOT set this to the current user id, always user 0
+     * @param int $autologinasguest whether to get the require_login call to
+     *   automatically log user in as guest
+     */
+    public function require_view($groupid, $userid=0, $autologinasguest=false) {
+        global $CFG, $USER, $PAGE;
+
+        $cm = $this->get_course_module();
+        $course = $this->get_course();
+        $context = $this->get_context();
+        if (!$userid || (!empty($USER->id) && $userid == $USER->id)) {
+            // User must be logged in and able to access the activity. (This
+            // call sets up the global course and checks various other access
+            // restrictions that apply at course-module level, such as visibility.)
+            if (count((array)$course) == 1) {
+                require_login($course->id, $autologinasguest, $cm);
+            } else {
+                require_login($course, $autologinasguest, $cm);
+            }
+        } else {
+            // Since require_login is not being called, we need to set up $PAGE->context
+            // or it gives an annoying warning
+            $PAGE->set_context($context);
+
+            // This is a check for another user who is not logged in.  We need to check
+            // basic course enrolment and a couple of the 'hidden' flags
+            if (!is_enrolled($context, $userid, '', true)) {
+                require_capability('moodle/course:view', $context, $userid);
+            }
+
+            if (!$course->visible) {
+                require_capability('moodle/course:viewhiddencourses', $context, $userid);
+            }
+            if (!$cm->uservisible) {
+                require_capability('moodle/course:viewhiddenactivities', $context, $userid);
+            }
+        }
+
+        // Check they have the forumng view capability (this is there largely
+        // so that we can override it to prevent prisoners from accessing)
+        if (!$userid) {
+            global $USER;
+            $userid = $USER->id;
+        }
+        require_capability('mod/forumng:view', $context, $userid);
+
+        // Note: There is no other capability just to view the forum front page,
+        // so just check group access
+        if ($groupid!==self::NO_GROUPS && !$this->can_access_group($groupid, false, $userid)) {
+            // We already know they don't have this capability, but it's
+            // a logical one to use to give an error message.
+            require_capability('moodle/site:accessallgroups', $context, $userid);
+        }
+    }
+
+    /**
+     * Makes security checks for starting a discussion. Will not return if user
+     * is not allowed to.
+     * @param int $groupid Group ID (or ALL_GROUPS) where discussion is
+     *   to be started
+     */
+    public function require_start_discussion($groupid) {
+        // Require forum view
+        $this->require_view($groupid);
+
+        // Check if they are allowed to start discussion
+        $whynot = '';
+        if (!$this->can_start_discussion($groupid, $whynot)) {
+            print_error($whynot, 'forumng',
+                    $this->get_url(self::PARAM_HTML));
+        }
+    }
+
+    /**
+     * Checks whether user can access the given group.
+     * @param $groupid Group ID
+     * @param $write True if write access is required (this makes a difference
+     *   if group mode is visible, when you can see other groups, but not write
+     *   to them).
+     * @param $userid User ID (0 = current user)
+     * @return bool True if user can access group
+     */
+    public function can_access_group($groupid, $write=false, $userid=0) {
+        global $USER;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // Check groupmode.
+        $groupmode = groups_get_activity_groupmode($this->get_course_module());
+        if (!$groupmode) {
+            // No groups - you can only view 'all groups' mode
+            return $groupid === self::NO_GROUPS;
+        }
+
+        // In visible groups, everyone can see everything (but not write to it)
+        if ($groupmode==VISIBLEGROUPS && !$write) {
+            return true;
+        }
+
+        // If you have access all groups, you can see it
+        if (has_capability('moodle/site:accessallgroups', $this->get_context(), $userid)) {
+            return true;
+        }
+
+        // Check if you're trying to view 'all groups'
+        if ($groupid == self::ALL_GROUPS) {
+            return false;
+        }
+
+        // Trying to view a specific group, must be a member
+        if (isset($USER->groupmember) && (!$userid || $USER->id==$userid)
+            && array_key_exists($this->get_course()->id, $USER->groupmember)) {
+            // Current user, use cached value
+            return array_key_exists($groupid, $USER->groupmember[$this->get_course()->id]);
+        } else {
+            // Not current user, test in database
+            return groups_is_member($groupid, $userid);
+        }
+    }
+
+    /**
+     * @param $userid
+     * @return bool True if user can view discussions in this forum
+     */
+    public function can_view_discussions($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:viewdiscussion', $this->get_context(),
+            $userid);
+    }
+
+    /**
+     * @param $userid
+     * @return bool True if user can view a list of subscribers in this forum
+     */
+    public function can_view_subscribers($userid=0) {
+        if ($this->get_effective_subscription_option() ==
+            self::SUBSCRIPTION_NOT_PERMITTED) {
+                return false;
+        }
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:viewsubscribers', $this->get_context(),
+            $userid);
+    }
+
+    /**
+     * @return bool True if user should see unread data in this forum
+     */
+    public function can_mark_read($userid=0) {
+        global $CFG, $USER;
+        $user = mod_forumng_utils::get_user($userid);
+        return $this->can_view_discussions($userid)
+                && $CFG->forumng_trackreadposts && !isguestuser($user);
+    }
+
+    /**
+     * @return bool True if user can view hidden discussions in this forum
+     */
+    public function can_view_hidden($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:viewallposts', $this->get_context(),
+            $userid);
+    }
+
+    /**
+     * @param int $userid User ID to check for (0 = current)
+     * @return bool True if the forum is outside its 'posting from/until'
+     *   times and the current user does not have permission to bypass that
+     */
+    public function is_read_only($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $now = time();
+        return (($this->forumfields->postingfrom > $now) ||
+            ($this->forumfields->postinguntil &&
+                $this->forumfields->postinguntil <= $now)) &&
+            !has_capability('mod/forumng:ignorepostlimits', $this->get_context(), $userid);
+    }
+
+    /**
+     * Checks whether this forum has a post quota which applies to a specific
+     * user.
+     * @param int $userid User ID to check for (0 = current)
+     * @return bool True if post limit quota is enabled for this forum and user
+     */
+    public function has_post_quota($userid = 0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return ($this->forumfields->maxpostsblock &&
+            !has_capability('mod/forumng:ignorepostlimits', $this->get_context(), $userid))
+            ? true : false;
+    }
+
+    /**
+     * Counts number of remaining permitted posts in current time period.
+     * @param int $userid User ID to check for (0 = current)
+     * @return int How many more posts you can make; QUOTA_DOES_NOT_APPLY if
+     *   no limit
+     */
+    public function get_remaining_post_quota($userid = 0) {
+        // Check quota is turned on and applies to current user.
+        if (!$this->has_post_quota($userid)) {
+            return self::QUOTA_DOES_NOT_APPLY;
+        }
+
+        // Cache data for current user during request only
+        global $USER, $FORUMNG_POSTQUOTA, $DB;
+
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $usecache = $userid == $USER->id;
+        if ($usecache && $FORUMNG_POSTQUOTA &&
+            array_key_exists($this->forumfields->id, $FORUMNG_POSTQUOTA)) {
+            return $FORUMNG_POSTQUOTA[$this->forumfields->id];
+        }
+
+        // OK, quota applies. Need to check how many posts they made, to this
+        // forum, within the given timescale, which have not been deleted
+        $threshold = time() - $this->forumfields->maxpostsperiod;
+        $count = $DB->count_records_sql("
+SELECT
+    COUNT(1)
+FROM
+    {forumng_posts} fp
+    INNER JOIN {forumng_discussions} fd ON fp.discussionid = fd.id
+WHERE
+    fd.forumngid = ?
+    AND fp.userid = ?
+    AND fp.created > ?
+    AND fp.deleted = 0
+    AND fp.oldversion = 0", array($this->forumfields->id, $userid, $threshold));
+        $result = $this->forumfields->maxpostsblock - $count;
+        if ($result < 0) {
+            $result = 0;
+        }
+
+        if ($usecache) {
+            // Cache result
+            if (!$FORUMNG_POSTQUOTA) {
+                $FORUMNG_POSTQUOTA = array();
+            }
+            $FORUMNG_POSTQUOTA[$this->forumfields->id] = $result;
+        }
+
+        // Return result
+        return $result;
+    }
+
+    /**
+     * Checks if user is permitted to post new discussions to this forum.
+     * @param int $groupid Group ID user wants to post to
+     * @param string &$whynot Why user cannot post; will be set to '' or else
+     *   to a language string name
+     * @param int $userid User ID or 0 for current
+     * @return bool True if user can post
+     */
+    public function can_start_discussion($groupid, &$whynot, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $whynot = '';
+
+        // Dates
+        if ($this->is_read_only($userid)) {
+            return false;
+        }
+
+        // Capability
+        if (!has_capability('mod/forumng:startdiscussion',
+            $this->get_context(), $userid)) {
+            $whynot = 'startdiscussion_nopermission';
+            return false;
+        }
+
+        // Forum type
+        $type = $this->get_type();
+        if (!$type->can_post($this, $whynot)) {
+            return false;
+        }
+
+        // Group access
+        if (!$this->can_access_group($groupid, true, $userid)) {
+            $whynot = 'startdiscussion_groupaccess';
+            return false;
+        }
+
+        // Throttling
+        if ($this->get_remaining_post_quota($userid) == 0) {
+            $whynot = 'startdiscussion_postquota';
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * @param int $userid User ID or 0 for default
+     * @return bool True if user is allowed to set 'mail now' option
+     */
+    public function can_mail_now($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:mailnow', $this->get_context(), $userid);
+    }
+
+    /**
+     * @param int $userid User ID or 0 for current
+     * @return True if user can set posts as important
+     */
+    public function can_set_important($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:setimportant', $this->get_context(), $userid);
+    }
+
+    /**
+     * @param int $userid User ID or 0 for default
+     * @return bool True if user is allowed to set discussion options
+     */
+    public function can_manage_discussions($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:managediscussions',
+            $this->get_context(), $userid);
+    }
+
+    /**
+     * @param int $userid User ID, 0 for default
+     * @return bool True if user has capability
+     */
+    public function can_manage_subscriptions($userid=0) {
+        if ($this->get_effective_subscription_option() ==
+            self::SUBSCRIPTION_NOT_PERMITTED) {
+                return false;
+        }
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:managesubscriptions', $this->get_context(),
+            $userid);
+    }
+
+    /**
+     * @param int $userid User ID, 0 for default
+     * @return bool True if user has capability
+     */
+    public function can_create_attachments($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:createattachment', $this->get_context(),
+            $userid);
+    }
+
+    /**
+     * @param int $userid User ID or 0 for current
+     * @return True if user can set posts as moderator
+     */
+    public function can_indicate_moderator($userid = 0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return has_capability('mod/forumng:postasmoderator', $this->get_context(), $userid);
+    }
+
+    /**
+     * @param int $userid User ID or 0 for current
+     * @return True if user can set posts as anonymous
+     */
+    public function can_post_anonymously($userid = 0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        if ($this->get_can_post_anon() && has_capability('mod/forumng:postanon',
+                $this->get_context(), $userid)) {
+            return true;
+        } else {
+            return false;
+        }
+
+    }
+
+    // Forum type
+    /*///////////*/
+
+    /**
+     * Obtains a forum type object suitable for handling this forum.
+     * @return forumngtype Type object
+     */
+    public function get_type() {
+        if (!$this->type) {
+            $this->type = forumngtype::get_new($this->forumfields->type);
+        }
+
+        return $this->type;
+    }
+
+    // Grades
+    /*///////*/
+
+    /**
+     * Updates the current forum grade(s), creating grade items if required,
+     * or recalculating grades or deleting them.
+     * (Should be based on mod_forumng_update_grades.)
+     * @param int $userid User whose grades need updating, or 0 for all users
+     * @param string $idnumber May be specified during forum creation when
+     *   there isn't a course-module yet; otherwise leave blank to get from
+     *   course-module
+     */
+    public function update_grades($userid = 0, $idnumber=null) {
+        global $CFG, $DB;
+        require_once($CFG->libdir . '/gradelib.php');
+
+        $transaction = $DB->start_delegated_transaction();
+
+        // Calculate grades for requested user(s)
+        if ($this->get_grading() == self::GRADING_NONE ||
+                $this->get_grading() == self::GRADING_MANUAL) {
+            // Except don't bother if grading is not enabled or manual.
+            $grades = array();
+        } else {
+            $grades = $this->get_user_grades($userid);
+
+            // For specific user, add in 'null' item when updating grade - this
+            // allows it to 'clear' the grade if you are 'un-rating' a post
+            if (count($grades) == 0 && $userid) {
+                $grade = new object();
+                $grade->userid = $userid;
+                $grade->rawgrade = null;
+                $grades[$userid] = $grade;
+            }
+        }
+
+        // Update grade item and grades
+        $this->grade_item_update($grades, $idnumber);
+
+        $transaction->allow_commit();
+    }
+
+    /**
+     * Gets grades in this forum for all users or a specified user.
+     * @param int $userid Specific user or 0 = all
+     * @return array Grade objects as specified
+     */
+    private function get_user_grades($userid = 0) {
+        global $DB;
+
+        // Part of query that is common to all aggregation types
+        $forumngid = $this->get_id();
+        $baseselect = "SELECT fp.userid AS userid";
+
+        if (self::get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+            // Moodle standard rating.
+            $basemain = "
+                FROM {forumng_discussions} fd
+                INNER JOIN {forumng_posts} fp ON fp.discussionid = fd.id
+                INNER JOIN {rating} fr ON fr.itemid = fp.id
+                WHERE fd.forumngid = ?";
+        } else {
+            // ForumNg rating.
+            $basemain = "
+                FROM {forumng_discussions} fd
+                INNER JOIN {forumng_posts} fp ON fp.discussionid = fd.id
+                INNER JOIN {forumng_ratings} fr ON fr.postid = fp.id
+                WHERE fd.forumngid = ?";
+        }
+
+        $baseparams = array($forumngid);
+        if ($userid) {
+            $basemain .= " AND fp.userid = ?";
+            $baseparams[] = $userid;
+        }
+        $basemain .= " GROUP BY fp.userid";
+
+        $aggtype = $this->get_grading();
+        switch ($aggtype) {
+            case self::GRADING_COUNT :
+                $customselect = ", COUNT(fr.rating) AS rawgrade";
+                break;
+            case self::GRADING_MAX :
+                $customselect = ", MAX(fr.rating) AS rawgrade";
+                break;
+            case self::GRADING_MIN :
+                $customselect = ", MIN(fr.rating) AS rawgrade";
+                break;
+            case self::GRADING_SUM :
+                $customselect = ", SUM(fr.rating) AS rawgrade";
+                break;
+            default : // Avg.
+                $customselect = ", AVG(fr.rating) AS rawgrade";
+                break;
+        }
+
+        // Work out the max grade
+        $scale = $this->get_rating_scale();
+        if ($scale >= 0) {
+            // Numeric.
+            $max = $scale;
+        } else {
+            // Scale.
+            $scale = $DB->get_record('scale', array('id' => -$scale), '*', MUST_EXIST);
+            $scale = explode(',', $scale->scale);
+            $max = count($scale);
+        }
+
+        $sql = $baseselect . $customselect . $basemain;
+        $rs = $DB->get_recordset_sql($sql, $baseparams);
+        $results = array();
+        foreach ($rs as $result) {
+            // it could throw off the grading if count and sum returned a
+            // rawgrade higher than scale so to prevent it we review the
+            // results and ensure that rawgrade does not exceed the scale,
+            // if it does we set rawgrade = scale (i.e. full credit)
+            if ($result->rawgrade > $max) {
+                $result->rawgrade = $max;
+            }
+            $results[$result->userid] = $result;
+        }
+
+        return $results;
+    }
+
+    /**
+     * Updates the grade item and (if given) the associated grades.
+     * @param array $grades Array of grade objects which will be updated.
+     *   (Alternatively may be the string 'reset' to reset grades - this is
+     *   not currently used.)
+     * @param string $idnumber May be specified during forum creation when
+     *   there isn't a course-module yet; otherwise leave blank to get from
+     *   course-module
+     * @throws coding_exception
+     */
+    private function grade_item_update($grades = array(), $idnumber=null) {
+        global $DB;
+        if (is_null($idnumber)) {
+            $cm = $this->get_course_module();
+            // When $cm has been retrieved via get_fast_modinfo, it doesn't include
+            // the idnumber field :(
+            if (!property_exists($cm, 'idnumber')) {
+                $idnumber = $DB->get_field('course_modules',
+                        'idnumber', array('id' => $cm->id));
+            } else {
+                $idnumber = $cm->idnumber;
+            }
+        }
+        $params = array(
+            'itemname' => $this->get_name(),
+            'idnumber' => $idnumber);
+
+        if ($this->get_grading() == self::GRADING_MANUAL) {
+            $scale = $this->get_grading_scale();
+            $grades = null;
+        } else {
+            $scale = $this->get_rating_scale();
+        }
+        if (!$this->get_grading()) {
+            $params['gradetype'] = GRADE_TYPE_NONE;
+        } else if ($scale > 0) {
+            $params['gradetype'] = GRADE_TYPE_VALUE;
+            $params['grademax'] = $scale;
+            $params['grademin'] = 0;
+        } else if ($scale < 0) {
+            $params['gradetype'] = GRADE_TYPE_SCALE;
+            $params['scaleid'] = -$scale;
+        }
+
+        if ($grades  === 'reset') {
+            $params['reset'] = true;
+            $grades = null;
+        }
+
+        $ok = grade_update('mod/forumng', $this->forumfields->course,
+            'mod', 'forumng', $this->forumfields->id, 0, $grades, $params);
+        if ($ok != GRADE_UPDATE_OK) {
+            throw new coding_exception("Grade update failed");
+        }
+    }
+
+    // Bulk forum requests
+    /*////////////////////*/
+
+    /**
+     * Queries for all forums on a course, including additional data about unread
+     * posts etc.
+     * NOTE: If shared forums are in use, this will usually return the CLONE
+     * forum object, which doesn't hold any data about the actual forum;
+     * the exception is that unread data will be obtained from the real forum.
+     * If you would like to obtain the real forum instead, please make sure
+     * $realforums is set to true. This has a performance cost.
+     * @param object $course Moodle course object
+     * @param int $userid User ID, 0 = current user, -1 = no unread data is needed
+     * @param bool $unreadasbinary If true, unread data MAY BE binary (1/0)
+     *   instead of containing the full number; this improves performance but
+     *   only works on some databases
+     * @param array $specificids If array has no entries, returns all forums
+     *   on the course; if it has at least one entry, returns only those forums
+     *   with course-module ID listed in the array
+     * @param bool $realforums Set this to true to obtain real forums
+     *   if any are clones; has a performance cost if shared forums are used
+     * @return array Array of forum objects (keys are forum IDs; in the case of
+     *   shared forums, the id is of the clone not the forum, even if
+     *   $realforums is set)
+     */
+    public static function get_course_forums($course, $userid = 0,
+            $unread = self::UNREAD_DISCUSSIONS, $specificids = array(),
+            $realforums = false) {
+        global $USER, $DB;
+
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $result = array();
+        // Added $userid parameter to obtain modinfo for specific user rather than current user.
+        $modinfo = get_fast_modinfo($course, $userid);
+
+        // Obtains extra information needed only when acquiring unread data
+        $aagforums = array();
+        $viewhiddenforums = array();
+        $groups = array();
+        $contexts = array();
+        if ($unread != self::UNREAD_NONE) {
+            foreach ($modinfo->cms as $cmid => $cm) {
+                if (count($specificids) && !in_array($cmid, $specificids)) {
+                    continue;
+                }
+                if ($cm->modname == 'forumng') {
+                    $context = context_module::instance($cmid);
+                    $contexts[$cmid] = $context;
+                    if (has_capability(
+                            'moodle/site:accessallgroups', $context, $userid)) {
+                        $aagforums[] = $cm->instance;
+                    }
+                    if (has_capability(
+                            'mod/forumng:viewallposts', $context, $userid)) {
+                        $viewhiddenforums[] = $cm->instance;
+                    }
+                }
+            }
+            if ($userid == $USER->id && isset($USER->groupmember)) {
+                if (array_key_exists($course->id, $USER->groupmember)) {
+                    $groups = $USER->groupmember[$course->id];
+                } // Else do nothing - groups list should be empty
+            } else {
+                $rs = $DB->get_recordset_sql("
+SELECT
+    g.id
+FROM
+    {groups} g
+    INNER JOIN {groups_members} gm ON g.id = gm.groupid
+WHERE
+    g.courseid = ?
+    AND gm.userid = ?", array($course->id, $userid));
+                foreach ($rs as $rec) {
+                    $groups[] = $rec->id;
+                }
+                $rs->close();
+            }
+        }
+
+        $rows = self::query_forums($specificids, $course, $userid,
+            $unread, $groups, $aagforums, $viewhiddenforums);
+        foreach ($rows as $rec) {
+            // Check course-module exists
+            if (!array_key_exists($rec->cm_id, $modinfo->cms)) {
+                continue;
+            }
+            $cm = $modinfo->cms[$rec->cm_id];
+            if ($cm->modname != 'forumng') {
+                continue;
+            }
+
+            // Mess about with binary setting to ensure result is same, whatever
+            // the database
+            if ($unread == self::UNREAD_BINARY) {
+                // Set binary to 0/1 even if database returns 't'/'f'
+                if ($rec->f_hasunreaddiscussions === 'f') {
+                    $rec->f_hasunreaddiscussions = 0;
+                } else if ($rec->f_hasunreaddiscussions) {
+                    $rec->f_hasunreaddiscussions = 1;
+                } else {
+                    $rec->f_hasunreaddiscussions = 0;
+                }
+            }
+
+            // Get context if we didn't already get it.
+            if (!empty($contexts[$rec->cm_id])) {
+                $context = $contexts[$rec->cm_id];
+            } else {
+                $context = context_module::instance($rec->cm_id);
+            }
+
+            // Create a new forum object from the database details
+            $forumfields = mod_forumng_utils::extract_subobject($rec, 'f_');
+            $forum = new mod_forumng($course, $cm, $context, $forumfields);
+            $result[$forumfields->id] = $forum;
+            if ($forum->is_shared()) {
+                $forum->set_clone_reference(self::CLONE_DIRECT);
+            }
+
+            // For clone forums (only pointers to genuine shared forums)
+            if ($forum->is_clone()) {
+                // If we are retrieving the real forum, get it individually
+                if ($realforums) {
+                    $othercourse = $DB->get_record_sql("
+SELECT
+    c.*
+FROM
+    {course_modules} cm
+    INNER JOIN {course} c ON c.id = cm.course
+WHERE
+    cm.id = ?", array($forumfields->originalcmid), '*', MUST_EXIST);
+                    $extra = self::get_course_forums($othercourse, $userid,
+                        $unread, array($forumfields->originalcmid));
+                    if (count($extra) != 1) {
+                        throw new coding_exception(
+                            'Unable to find shared forum ' . $forumfields->originalcmid);
+                    }
+                    foreach ($extra as $extraforum) {
+                        $extraforum->set_clone_reference($cm->id);
+                        $result[$forumfields->id] = $extraforum;
+                    }
+                } else if ($unread != self::UNREAD_NONE) {
+                    // Even if not retrieving the real forum, we still use
+                    // its undead data when unread data is on
+                    $forum->init_unread_from_original($unread);
+                }
+            }
+        }
+        return $result;
+    }
+
+    private static function sort_mod_forumng_result($a, $b) {
+        return strcasecmp($a->f_name, $b->f_name);
+    }
+
+    /**
+     * Internal method. Queries for a number of forums, including additional
+     * data about unread posts etc. Returns the database result.
+     * @param array $cmids If specified, array of course-module IDs of desired
+     *   forums
+     * @param object $course If specified, course object
+     * @param int $userid User ID, 0 = current user
+     * @param int $unread Type of unread data to obtain (UNREAD_xx constant).
+     * @param array $groups Array of group IDs to which the given user belongs
+     *   (may be null if unread data not required)
+     * @param array $aagforums Array of forums in which the user has
+     *   'access all groups' (may be null if unread data not required)
+     * @param array $viewhiddenforums Array of forums in which the user has
+     *   'view hidden discussions' (may be null if unread data not required)
+     * @return array Array of row objects
+     */
+    private static function query_forums($cmids=array(), $course=null,
+            $userid, $unread, $groups, $aagforums, $viewhiddenforums) {
+        global $DB, $CFG, $USER;
+        if ((!count($cmids) && !$course)) {
+            throw new coding_exception("mod_forumng::query_forums requires course id or cmids");
+        }
+        if (count($cmids)) {
+            list($in, $conditionsparams) = mod_forumng_utils::get_in_array_sql('cm.id', $cmids);
+            $conditions = $in;
+        } else {
+            $conditions = "f.course = ?";
+            $conditionsparams = array($course->id);
+        }
+
+        $singleforum = count($cmids) == 1 ? reset($cmids) : false;
+        list($inviewhiddenforums, $inviewhiddenforumsparams) = mod_forumng_utils::get_in_array_sql(
+            'fd.forumngid', $viewhiddenforums);
+        list($cfdinviewhiddenforums, $inviewhiddenforumsparams) =
+                mod_forumng_utils::get_in_array_sql('cfd.forumngid', $viewhiddenforums);
+        list($cfdingroups, $ingroupsparams) =
+                mod_forumng_utils::get_in_array_sql('cfd.groupid', $groups);
+        list($cfdinaagforums, $inaagforumsparams) =
+                mod_forumng_utils::get_in_array_sql('cfd.forumngid', $aagforums);
+
+        // This array of additional results is used later if combining
+        // standard results with single-forum calls.
+        $plusresult = array();
+
+        // For read tracking, we get a count of total number of posts in
+        // forum, and total number of read posts in the forum (this
+        // is so we can display the number of UNread posts, but the query
+        // works that way around because it will return 0 if no read
+        // information is stored).
+        if ($unread!=self::UNREAD_NONE && self::enabled_read_tracking()) {
+            // Work out when unread status ends
+            $endtime = time() - $CFG->forumng_readafterdays*24*3600;
+            if (!$userid) {
+                $userid = $USER->id;
+            }
+
+            list($ingroups, $ingroupsparams) =
+                    mod_forumng_utils::get_in_array_sql('fd.groupid', $groups);
+            list($inaagforums, $inaagforumsparams) =
+                    mod_forumng_utils::get_in_array_sql('fd.forumngid', $aagforums);
+
+            $restrictionsql = '';
+            $restrictionparams = array();
+            if ($singleforum) {
+                // If it is for a single forum, get the restriction from the
+                // forum type
+                $forum = self::get_from_cmid($singleforum, self::CLONE_DIRECT);
+                $type = $forum->get_type();
+                if ($type->has_unread_restriction()) {
+                    list($value, $restrictionparams) = $type->get_unread_restriction_sql($forum);
+                    if ($value) {
+                        $restrictionsql = 'AND ' . $value;
+                    }
+                }
+            } else {
+                // When it is not for a single forum, we can only group together
+                // results for types that do not place restrictions on the
+                // unread count.
+                $modinfo = get_fast_modinfo($course);
+                $okayids = array();
+                if (array_key_exists('forumng', $modinfo->instances)) {
+                    foreach ($modinfo->instances['forumng'] as $info) {
+                        if (count($cmids) && !in_array($info->id, $cmids)) {
+                            continue;
+                        }
+                        $type = self::get_type_from_modinfo_info($info);
+                        if (forumngtype::get_new($type)->has_unread_restriction()) {
+                            // This one's a problem! Do it individually
+                            $problemresults = self::query_forums(
+                                array($info->id), null, $userid, $unread,
+                                $groups, $aagforums, $viewhiddenforums);
+                            foreach ($problemresults as $problemresult) {
+                                $plusresult[$problemresult->f_id] = $problemresult;
+                            }
+                        } else {
+                            $okayids[] = $info->id;
+                        }
+                    }
+                }
+
+                if (count($okayids) == 0) {
+                    // There are no 'normal' forums, so return result so far
+                    // after sorting it
+                    uasort($plusresult, 'mod_forumng::sort_mod_forumng_result');
+                    return $plusresult;
+                } else {
+                    // Fall through to normal calculation, but change conditions
+                    // to include only the 'normal' forums
+                    list($in, $inparams) = mod_forumng_utils::get_in_array_sql('cm.id', $okayids);
+                    $conditions .= " AND " . $in;
+                    $conditionsparams = array_merge($conditionsparams, $inparams);
+                }
+            }
+            $indreadpart = '';
+            $indreadparms = array();
+            $indreadwhere = '';
+            // Get individual posts unread if manual read marking (on unread discussions only).
+            if (!mod_forumng::mark_read_automatically($userid)) {
+                $indreadpart = "INNER JOIN {forumng_posts} fp ON fp.discussionid = discussions.id
+                                 LEFT JOIN {forumng_read_posts} frp ON frp.postid = fp.id AND frp.userid = ?";
+                $indreadwhere = "AND frp.id IS NULL
+                                 AND ((fp.edituserid IS NOT NULL AND fp.edituserid <> ?)
+                                       OR (fp.edituserid IS NULL AND fp.userid <> ?))
+                                 AND fp.deleted = ?
+                                 AND fp.oldversion = ?
+                                 AND fp.modified > ?
+                                 AND (discussions.time IS NULL OR fp.modified > discussions.time)";
+                $indreadparms = array($userid, $userid, $userid, 0, 0, $endtime);
+            }
+
+            // NOTE fpfirst is used only by forum types, not here
+            $now = time();
+            $sharedquerypart = "
+        FROM
+     (SELECT fd.id, fr.time, fd.forumngid
+        FROM {forumng_discussions} fd
+  INNER JOIN {forumng_posts} fplast ON fd.lastpostid = fplast.id
+  INNER JOIN {forumng_posts} fpfirst ON fd.postid = fpfirst.id
+   LEFT JOIN {forumng_read} fr ON fd.id = fr.discussionid AND fr.userid = ?
+  INNER JOIN {forumng} f1 ON f1.id = fd.forumngid
+  INNER JOIN {course_modules} cm2 ON cm2.instance = fd.forumngid
+             AND cm2.module = (SELECT id FROM {modules} WHERE name = 'forumng')
+       WHERE fplast.modified > ?
+         AND (f1.type != ? OR fpfirst.userid = ? OR ($inviewhiddenforums))
+         AND (
+             (fd.groupid IS NULL)
+             OR ($ingroups)
+             OR cm2.groupmode = " . VISIBLEGROUPS . "
+             OR ($inaagforums)
+         )
+         AND fd.deleted = 0
+         AND (
+             ((fd.timestart = 0 OR fd.timestart <= ?)
+             AND (fd.timeend = 0 OR fd.timeend > ? OR ($inviewhiddenforums)))
+         )
+         AND ((fplast.edituserid IS NOT NULL AND fplast.edituserid <> ?)
+          OR fplast.userid <> ?)
+         AND (fr.time IS NULL OR fplast.modified > fr.time)
+    $restrictionsql
+    ) discussions
+    $indreadpart
+       WHERE discussions.forumngid = f.id
+    $indreadwhere";
+            $sharedqueryparams = array_merge(array($userid, $endtime, 'studyadvice', $userid),
+                    $inviewhiddenforumsparams, $ingroupsparams, $inaagforumsparams, array($now, $now), $inviewhiddenforumsparams,
+                    array($userid, $userid), $restrictionparams, $indreadparms);
+
+            // Note: There is an unusual case in which this number can
+            // be inaccurate. It is to do with ignoring messages the user
+            // posted. We consider a discussion as 'not unread' if the last
+            // message is by current user. In actual fact, a discussion could
+            // contain unread messages if messages were posted by other users
+            // after this user viewed the forum last, but before they posted
+            // their reply. Since this should be an infrequent occurrence I
+            // believe this behaviour is acceptable.
+            if ($unread==self::UNREAD_BINARY) {
+                // Query to get 0/1 unread discussions count
+                $readtracking = self::select_exists("SELECT 1 $sharedquerypart") .
+                        "AS f_hasunreaddiscussions";
+                $readtrackingparams = $sharedqueryparams;
+            } else {
+                // Query to get full unread discussions count
+                $readtracking = "
+(SELECT
+    COUNT(DISTINCT discussions.id)
+$sharedquerypart
+) AS f_numunreaddiscussions";
+                $readtrackingparams = $sharedqueryparams;
+            }
+        } else {
+            $readtracking = "NULL AS numreadposts, NULL AS timeread";
+            $readtrackingparams = array();
+        }
+        $now = time();
+        $orderby = "LOWER(f.name)";
+
+        // Main query. This retrieves:
+        // - Full forum fields
+        // - Basic course-module and course data (not whole tables)
+        // - Discussion count
+        // - Unread data, if enabled
+        // - User subscription data
+        $result = $DB->get_records_sql($sql = "
+SELECT
+    " . mod_forumng_utils::select_mod_forumng_fields('f') . ",
+    " . mod_forumng_utils::select_course_module_fields('cm') . ",
+    " . mod_forumng_utils::select_course_fields('c') . ",
+    (SELECT COUNT(1)
+        FROM {forumng_discussions} cfd
+        JOIN {forumng_posts} cfp ON cfd.postid = cfp.id
+        WHERE cfd.forumngid = f.id AND cfd.deleted = 0
+        AND (
+            ((cfd.timestart = 0 OR cfd.timestart <= ?)
+            AND (cfd.timeend = 0 OR cfd.timeend > ?))
+            OR ($cfdinviewhiddenforums)
+        )
+        AND (f.type != ? OR cfp.userid = ? OR ($cfdinviewhiddenforums))
+        AND (
+             (cfd.groupid IS NULL)
+             OR ($cfdingroups)
+             OR cm.groupmode = " . VISIBLEGROUPS . "
+             OR ($cfdinaagforums)
+        )) AS f_numdiscussions,
+    $readtracking
+FROM
+    {forumng} f
+    INNER JOIN {course_modules} cm ON cm.instance = f.id
+        AND cm.module = (SELECT id from {modules} WHERE name = 'forumng')
+    INNER JOIN {course} c ON c.id = f.course
+WHERE
+    $conditions
+ORDER BY
+    $orderby", array_merge(array($now, $now), $inviewhiddenforumsparams,
+                array('studyadvice', $userid), $inviewhiddenforumsparams,
+                $ingroupsparams, $inaagforumsparams, $readtrackingparams,
+                $conditionsparams));
+        if (count($plusresult) > 0) {
+            foreach ($plusresult as $key => $value) {
+                $result[$key] = $value;
+            }
+            uasort($result, 'mod_forumng::sort_mod_forumng_result');
+        }
+        return $result;
+    }
+
+    // Search
+    /*///////*/
+
+    /** @return True if the OU search extension is available */
+    public static function search_installed() {
+        return @include_once(dirname(__FILE__) .
+            '/../../local/ousearch/searchlib.php');
+    }
+
+    /**
+     * Returns the SQL code for an 'exists' to be used in the select list,
+     * surrounded in brackets. This function is used because 'EXISTS' works
+     * differently in MS SQL.
+     * @param string $sql Subquery to be called within exists, e.g. 'SELECT 1'
+     * @return string Exists check SQL e.g. '(EXISTS (SELECT 1))'
+     */
+    public static function select_exists($sql) {
+        global $DB;
+        if ($DB->get_dbfamily() === 'mssql') {
+            return '(SELECT 1 WHERE EXISTS(' . $sql . '))';
+        } else {
+            return '(EXISTS (' . $sql . '))';
+        }
+    }
+
+    /**
+     * Update all documents for ousearch.
+     *
+     * If specified, the progress object should be ready to receive indeterminate
+     * progress calls.
+     *
+     * @param bool $feedback If true, prints feedback as HTML list items
+     * @param int $courseid If specified, restricts to particular courseid
+     * @param int $cmid If specified, restricts to particular cmid
+     * @param \core\progress\base $progress Set to a progress object or null
+     */
+    public static function search_update_all($feedback=false, $courseid=0, $cmid=0,
+            \core\progress\base $progress = null) {
+        global $DB;
+        raise_memory_limit(MEMORY_EXTRA);
+        // If cmid is specified, only retrieve that one
+        if ($cmid) {
+            $cmrestrict = "cm.id = ? AND";
+            $cmrestrictparams = array($cmid);
+        } else {
+            $cmrestrict = '';
+            $cmrestrictparams = array();
+        }
+        // Get module-instances that need updating
+        $cms = $DB->get_records_sql("
+SELECT
+    cm.id, cm.course, cm.instance, f.name
+FROM
+    {forumng} f
+    INNER JOIN {course_modules} cm ON cm.instance = f.id
+WHERE
+    $cmrestrict
+    cm.module = (SELECT id FROM {modules} m WHERE name = 'forumng')".
+                ($courseid ? " AND f.course = ?" : ''), array_merge($cmrestrictparams,
+                $courseid ? array($courseid) : array()));
+
+        // Print count
+        if ($feedback && !$cmid) {
+            print '<li>' . get_string('search_update_count', 'forumng',
+                '<strong>'.count($cms).'</strong>') . '</li>';
+        }
+
+        // This can take a while, so let's be sure to have a long time limit.
+        $timelimitbefore = 300;
+
+        // Loop around updating
+        foreach ($cms as $cm) {
+            $transaction = $DB->start_delegated_transaction();
+
+            // Wipe existing search data, if any
+            local_ousearch_document::delete_module_instance_data($cm);
+
+            // Get all discussions for this forum
+            $discussions = $DB->get_records('forumng_discussions',
+                array('forumngid' => $cm->instance), '', 'id, postid');
+            if ($feedback) {
+                print '<li><strong>' . $cm->name . '</strong> (' . count($discussions) . '):';
+            }
+
+            // Process each discussion
+            foreach ($discussions as $discussionrec) {
+                // Ignore discussion with no postid
+                // (This should not happen, where ther is a $discussionrec->id
+                // it also shopuld have a $discussionrec->postid. This if-statement
+                // fixes bug 10497 and would not have any side-effect.)
+                if (!$discussionrec->postid) {
+                    continue;
+                }
+                set_time_limit($timelimitbefore);
+                $discussion = mod_forumng_discussion::get_from_id($discussionrec->id,
+                    self::CLONE_DIRECT, -1);
+                $root = $discussion->get_root_post();
+                $root->search_update();
+                $root->search_update_children();
+                $root = null;
+                if ($feedback) {
+                    echo '. ';
+                    flush();
+                }
+                if ($progress) {
+                    $progress->progress(\core\progress\base::INDETERMINATE);
+                }
+            }
+
+            $transaction->allow_commit();
+
+            if ($feedback) {
+                print '</li>';
+            }
+        }
+    }
+
+    // UI
+    /*///*/
+
+    /**
+     * Returns HTML for search form, or blank if there is no search facility
+     * in this forum.
+     * @param string $querytext Text of query (not escaped)
+     * @return string HTML code for search form
+     */
+    public function display_search_form($querytext='') {
+        if (!self::search_installed()) {
+            return '';
+        }
+        $linkfields = $this->get_link_params(self::PARAM_FORM);
+        $out = mod_forumng_utils::get_renderer();
+        $help = $out->help_icon('searchthisforum', 'forumng');
+        return $out->render_search_form($querytext, $linkfields, $help, $this);
+    }
+
+    /**
+     * Displays the post button, if user is permitted to post.
+     * @param int $groupid Group ID being shown
+     * @return string HTML code for post button or empty string if none
+     */
+    public function display_post_button($groupid) {
+        $out = mod_forumng_utils::get_renderer();
+        if ($this->can_start_discussion($groupid, $whynot)) {
+            return $out->render_post_button($this, $groupid);
+        } else {
+            if ($whynot) {
+                return $out->cannot_start_discussion_error($whynot);
+            } else {
+                return '';
+            }
+        }
+    }
+
+    /**
+     * Displays discussion list features for this forum. Features are the
+     * plugins in the 'feature' subfolder - basically a row of buttons along
+     * the bottom.
+     * Will call JS AMD module for these buttons.
+     *
+     * @param int $groupid Group ID
+     * @return string HTML code for discussion list features
+     */
+    public function display_forumngfeature_discussion_lists($groupid) {
+        global $PAGE;
+        // Print discussion list feature buttons (userposts button)
+        $features = '';
+        foreach (forumngfeature_discussion_list::get_all() as $feature) {
+            if ($feature->should_display($this, $groupid)) {
+                $features .= html_writer::start_div('forumngfeature_' . $feature->get_id());
+                $features .= $feature->display($this, $groupid);
+                $features .= html_writer::end_div();
+            }
+        }
+        if ($features) {
+            $PAGE->requires->string_for_js('tooltip_show_features', 'mod_forumng');
+            $PAGE->requires->js_call_amd('mod_forumng/featurebtns', 'initMobileHide');
+            return '<div id="forumng-features">' . $features . '</div>';
+        } else {
+            return '';
+        }
+    }
+
+    /**
+     * Displays subscribe options for this forum.
+     * @param bool $expectquery True if we expect this to make a DB query
+     * @return string HTML code for subscribe information section
+     */
+    public function display_subscribe_options($expectquery = false) {
+        $out = mod_forumng_utils::get_renderer();
+
+        // Is user subscribed to this forum?
+        $text = '';
+        $subscribed = self::NOT_SUBSCRIBED;
+        $canchange = false;
+        $canview = false;
+        $type = $this->get_effective_subscription_option();
+        $cm = $this->get_course_module();
+        if ($type == self::SUBSCRIPTION_NOT_PERMITTED) {
+            // Subscription not allowed
+            $text = get_string('subscribestate_not_permitted', 'forumng');
+        } else if (!$this->can_be_subscribed()) {
+            // Current user not allowed to subscribe
+            $text = get_string('subscribestate_no_access', 'forumng');
+        } else {
+            global $USER;
+            $subscriptioninfo = $this->get_subscription_info(0, $expectquery);
+            if (!$this->get_group_mode()) {
+                if ($subscriptioninfo->wholeforum) {
+                    // Subscribed to the entire forum.
+                    $subscribed = self::FULLY_SUBSCRIBED;
+                    $text = get_string('subscribestate_subscribed', 'forumng',
+                        '<strong>' . $USER->email . '</strong>');
+                } else if (count($subscriptioninfo->discussionids) == 0) {
+                    // Not subscribed at all.
+                    $text = get_string('subscribestate_unsubscribed', 'forumng');
+                } else {
+                    // Subscribed to one or more discussions.
+                    $subscribed = self::PARTIALLY_SUBSCRIBED;
+                    $text = get_string('subscribestate_partiallysubscribed', 'forumng',
+                        '<strong>' . $USER->email . '</strong>');
+                }
+            } else {
+                $currentgroupid = $this->get_activity_group($cm, true);
+                if ($subscriptioninfo->wholeforum) {
+                    // Subscribed to the entire forum.
+                    if ($currentgroupid == self::ALL_GROUPS) {
+                        $text = get_string('subscribestate_subscribed', 'forumng',
+                        '<strong>' . $USER->email . '</strong>');
+                        $subscribed = self::FULLY_SUBSCRIBED;
+                    } else {
+                        $text = get_string('subscribestate_subscribed', 'forumng',
+                                '<strong>' . $USER->email . '</strong>') . ' ' .
+                                ($canchange ? get_string(
+                                    'subscribestate_subscribed_notinallgroup',
+                                    'forumng') : '');
+                        $subscribed = self::FULLY_SUBSCRIBED_GROUPMODE;
+                    }
+                } else if (count($subscriptioninfo->groupids) == 0) {
+                    if (count($subscriptioninfo->discussionids) == 0) {
+                        // Not subscribed at all.
+                        if ($currentgroupid == self::ALL_GROUPS) {
+                            // Return the default value NOT_SUBSCRIBED
+                            $text = get_string('subscribestate_unsubscribed', 'forumng');
+                        } else {
+                            $text = get_string('subscribestate_unsubscribed_thisgroup', 'forumng');
+                            $subscribed = self::THIS_GROUP_NOT_SUBSCRIBED;
+                        }
+                    } else {
+                        // Only subscribed to discussions;
+                        if ($currentgroupid == self::ALL_GROUPS) {
+                            $subscribed = self::PARTIALLY_SUBSCRIBED;
+                            $text = get_string('subscribestate_partiallysubscribed', 'forumng',
+                                '<strong>' . $USER->email . '</strong>');
+                        } else {
+                            // Set default that the discussions do not belong to the current group.
+                            $text = get_string('subscribestate_unsubscribed_thisgroup', 'forumng');
+                            $subscribed = self::THIS_GROUP_NOT_SUBSCRIBED;
+                            // Check if any of the discussions belongs to the current group.
+                            foreach ($subscriptioninfo->discussionids as
+                                    $discussionid => $groupid) {
+                                if ($groupid == $currentgroupid) {
+                                    $text = get_string(
+                                            'subscribestate_partiallysubscribed_thisgroup',
+                                            'forumng', '<strong>' . $USER->email . '</strong>');
+                                    $subscribed = self::THIS_GROUP_PARTIALLY_SUBSCRIBED;
+                                    break;
+                                }
+                            }
+                        }
+                    }
+
+                } else {
+                    // Subscribed to one or more groups as the groupids array are not empty.
+                    if ($currentgroupid == self::ALL_GROUPS) {
+                        $text = get_string('subscribestate_groups_partiallysubscribed', 'forumng',
+                            '<strong>' . $USER->email . '</strong>');
+                        // Treat this scenario the same as discussions partically subscribed since
+                        // they all give the same options which is
+                        // subscribe to the whole forum or unsubscribe from the whole forum.
+                        $subscribed = self::PARTIALLY_SUBSCRIBED;
+                    } else {
+                        // Check if have subscribed to the current group.
+                        $currentgroupsubscriptionstatus = false;
+                        // Check if any of the discussions belong to the current group.
+                        foreach ($subscriptioninfo->groupids as $id) {
+                            if ($id == $currentgroupid) {
+                                $text = get_string('subscribestate_subscribed_thisgroup',
+                                        'forumng', '<strong>' . $USER->email . '</strong>');
+                                $subscribed = self::THIS_GROUP_SUBSCRIBED;
+                                $currentgroupsubscriptionstatus = true;
+                                break;
+                            }
+                        }
+                        if (!$currentgroupsubscriptionstatus) {
+                            // Not subscribed to the current group.
+                            if (count($subscriptioninfo->discussionids) == 0) {
+                                $text = get_string('subscribestate_unsubscribed_thisgroup',
+                                        'forumng');
+                                $subscribed = self::THIS_GROUP_NOT_SUBSCRIBED;
+                            } else {
+                                // Check if any discussions subscribed belong to this group
+                                // Set default that the discussions do not belong
+                                // to the current group
+                                $text = get_string('subscribestate_unsubscribed_thisgroup',
+                                        'forumng');
+                                $subscribed = self::THIS_GROUP_NOT_SUBSCRIBED;
+                                // Check if any of the discussions belong to the current group.
+                                foreach ($subscriptioninfo->discussionids as
+                                        $discussionid => $groupid) {
+                                    if ($groupid == $currentgroupid) {
+                                        $text = get_string(
+                                                'subscribestate_partiallysubscribed_thisgroup',
+                                                'forumng',
+                                                '<strong>' . $USER->email . '</strong>');
+                                        $subscribed = self::THIS_GROUP_PARTIALLY_SUBSCRIBED;
+                                        break;
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+
+            // Display extra information if they are forced to subscribe
+            if ($this->is_forced_to_subscribe()) {
+                $text .= ' ' . get_string('subscribestate_forced', 'forumng');
+            } else {
+                $canchange = true;
+            }
+        }
+
+        return $out->render_subscribe_options($this, $text,
+            $subscribed, $canchange, $this->can_view_subscribers());
+    }
+
+    /**
+     * @param object $user User object
+     * @return string HTML that contains a link to the user's profile, with
+     *   their name as text
+     */
+    public function display_user_name($user) {
+        return fullname($user, has_capability(
+            'moodle/site:viewfullnames', $this->get_context()));
+    }
+
+    /**
+     * @param object $user User object
+     * @return string HTML that contains a link to the user's profile, with
+     *   their name as text
+     */
+    public function display_user_link($user) {
+        global $CFG;
+        if ($this->is_shared()) {
+            $coursepart = '';
+        } else {
+            $coursepart = '&amp;course=' . $this->get_course()->id;
+        }
+        return "<a href='{$CFG->wwwroot}/user/view.php?id={$user->id}" .
+            "$coursepart'>" . $this->display_user_name($user) . "</a>";
+    }
+
+    /**
+     * @param int $groupid Group ID
+     * @return string HTML links for RSS/Atom feeds to this discussion (if
+     *   enabled etc)
+     */
+    public function display_feed_links($groupid) {
+        global $CFG;
+
+        // Check they're allowed to see it
+        if ($this->get_effective_feed_option() == self::FEEDTYPE_NONE) {
+            return '';
+        }
+
+        // Icon (decoration only) and Atom link
+        $out = mod_forumng_utils::get_renderer();
+        return $out->render_feed_links($this->get_feed_url(self::FEEDFORMAT_ATOM, $groupid),
+                $this->get_feed_url(self::FEEDFORMAT_RSS, $groupid));
+    }
+
+    /**
+     * Displays warnings for the invalid forum archive setting.
+     * @return string HTML code for the warning message
+     */
+    public function display_archive_warning() {
+        $course = $this->get_course();
+        if (has_capability('moodle/course:manageactivities', $this->get_context())) {
+            if (!$this->forumfields->removeto == -1) {
+                if ($this->forumfields->removeafter && $this->forumfields->removeto) {
+                    $modinfo = get_fast_modinfo($course);
+                    $warningtext = '';
+                    if (!($this->can_archive_forum($modinfo, $warningtext))) {
+                        return '<div class="forumng-archivewarning">' . $warningtext . '</div>';
+                    }
+                }
+            }
+        }
+        return '';
+    }
+
+    public function display_sharing_info() {
+        global $CFG, $DB;
+        // If it's not shared, nothing to show
+        if (!$this->is_shared()) {
+            return '';
+        }
+        // Only show this to people who can edit and stuff
+        if (!has_capability('moodle/course:manageactivities', $this->get_context())) {
+            return '';
+        }
+        // OK, let's show!
+        $out = '<div class="forumng-shareinfo">';
+        if ($this->get_course_module_id() != $this->get_course_module_id(true)) {
+            // We are looking at a clone. Show link to original, if user can
+            // see it, otherwise text.
+            $a = (object)array(
+                'url' => $CFG->wwwroot . '/mod/forumng/view.php?id=' .
+                        $this->get_course_module_id(true),
+                'shortname' => s($this->get_course(true)->shortname)
+            );
+            $out .= get_string('sharedviewinfoclone', 'forumng', $a);
+        } else {
+            // We are looking at an original.
+            // I want to display the idnumber here - unfortuantely this requires
+            // an extra query because it is not included in get_fast_modinfo.
+            $idnumber = $DB->get_field('course_modules', 'idnumber', array('id' =>
+                $this->get_course_module_id(true)));
+            $out .= get_string('sharedviewinfooriginal', 'forumng', $idnumber);
+            $out .= ' ';
+
+            // Show links to each clone, if you
+            // can see them.
+            $clones = $this->get_clone_details();
+            if (count($clones) == 0) {
+                $out .= get_string('sharedviewinfonone', 'forumng');
+            } else {
+                $list = '';
+                foreach ($clones as $clone) {
+                    if ($list) {
+                        $list .= ', ';
+                    }
+
+                    // Make it a link if you have access
+                    if ($link = has_capability('moodle/course:view', $clone->context)) {
+                        $list .= '<a href="' . $CFG->wwwroot .
+                                '/mod/forumng/view.php?id=' .
+                                $clone->context->instanceid . '">';
+                    }
+                    $list .= s($clone->courseshortname);
+                    if ($link) {
+                        $list .= '</a>';
+                    }
+                }
+                $out .= get_string('sharedviewinfolist', 'forumng', $list);
+            }
+        }
+        $out .= '</div>';
+        return $out;
+    }
+
+    /**
+     * Sets up $PAGE object then prints the header for a page 'within' a forum. Returns the
+     * renderer object.
+     * @param moodle_url $url URL of page
+     * @param string $pagename Name of page (will be added to breadcrumbs)
+     * @param array $navigation If specified, adds extra elements before the
+     *   page name
+     * @return mod_forumng_renderer Renderer that can be used e.g. to print footer, other things
+     */
+    public function init_page(moodle_url $url, $pagename='', $navigation=array()) {
+        global $PAGE;
+        $PAGE->set_url($url);
+        $PAGE->set_context($this->get_context());
+        $course = $this->get_course();
+        $PAGE->set_heading($course->fullname);
+        $PAGE->set_title($course->shortname . ': ' . format_string($this->get_name()));
+        $PAGE->set_cm($this->get_course_module(), $course);
+        foreach ($navigation as $text => $url) {
+            $PAGE->navbar->add($text, $url);
+        }
+        if ($pagename) {
+            $PAGE->navbar->add($pagename);
+        }
+        $buttontext = $this->display_search_form();
+        $PAGE->set_button($buttontext);
+
+        return mod_forumng_utils::get_renderer();
+    }
+
+    /**
+     * Prints form JavaScript (much smaller than normal JS).
+     */
+    public function print_form_js() {
+        global $CFG, $PAGE;
+        $simple = get_user_preferences('forumng_simplemode', '');
+        if ($PAGE->devicetypeinuse == 'legacy' || $simple) {
+            return;
+        }
+        $module = array(
+            'name'      => 'mod_forumng_form',
+            'fullpath'  => '/mod/forumng/form.js',
+            'requires'  => array('base', 'node'),
+            'strings'   => array(array('edit_timeout', 'forumng'))
+        );
+        $PAGE->requires->js_init_call('M.mod_forumng_form.init',
+                array(), false, $module);
+    }
+
+    /**
+     * Prints out (immediately; must be after header) script tags and JS code
+     * for the forum's JavaScript library, and required YUI libraries.
+     * @param int $cmid If specified, passes this through to JS
+     */
+    public function print_js($cmid=0) {
+        global $CFG, $PAGE;
+        $simple = get_user_preferences('forumng_simplemode', '');
+        if ($PAGE->devicetypeinuse == 'legacy' || $simple) {
+            return;
+        }
+
+        // Prepare strings
+        $mainstrings = array(
+            'rate' => null,
+            'expand' => '#',
+            'jserr_load' => null,
+            'jserr_save' => null,
+            'jserr_alter' => null,
+            'jserr_attachments' => null,
+            'confirmdelete' => null,
+            'confirmundelete' => null,
+             'confirmdeletediscuss' => null,
+            'deleteemailpostbutton' => null,
+            'deletepostbutton' => null,
+            'undeletepostbutton' => null,
+            'js_nratings' => null,
+            'js_nratings1' => null,
+            'js_nopublicrating' => null,
+            'js_publicrating' => null,
+            'js_nouserrating' => null,
+            'js_userrating' => null,
+            'js_outof' => null,
+            'js_clicktosetrating' => null,
+            'js_clicktosetrating1' => null,
+            'js_clicktoclearrating' => null,
+            'selectlabel' => null,
+            'selectintro' => null,
+            'confirmselection' => null,
+            'selectedposts' => null,
+            'discussion' => null,
+            'selectorall' => null,
+            'selectoralldisc' => null,
+            'selectorselecteddisc' => null,
+            'selectordiscall' => null,
+            'selectdiscintro' => null,
+            'flagon' => null,
+            'flagoff' => null,
+            'clearflag' => null,
+            'setflag' => null,
+            'flagpost' => null);
+        if ($this->has_post_quota()) {
+            $mainstrings['quotaleft_plural'] = (object)array(
+                'posts'=>'#', 'period' => $this->get_max_posts_period(true, true));
+            $mainstrings['quotaleft_singular'] = (object)array(
+                'posts'=>'#', 'period' => $this->get_max_posts_period(true, true));
+        }
+        $stringlist = array();
+        foreach ($mainstrings as $string => $value) {
+            $stringlist[] = array($string, 'forumng', $value);
+        }
+        foreach (array('cancel', 'delete', 'add', 'selectall', 'deselectall') as $string) {
+            $stringlist[] = array($string, 'moodle');
+        }
+
+        // Use star ratings where the scale is between 2 and 5 (3 and 6 stars)
+        $out = mod_forumng_utils::get_renderer();
+        $scale = $this->get_rating_scale();
+        if ($scale > 1 && $scale < 6) {
+            $ratingstars = $scale;
+        } else {
+            $ratingstars = 0;
+        }
+        $starurls = array();
+        foreach (array('circle', 'star') as $base) {
+            foreach (array('y', 'n') as $user) {
+                foreach (array('y', 'n') as $public) {
+                    $key = "$base-$user-$public";
+                    $starurls[$key] = $out->pix_url($key, 'forumng')->out(false);
+                }
+            }
+        }
+
+        $module = array(
+            'name'      => 'mod_forumng',
+            'fullpath'  => '/mod/forumng/module.js',
+            'requires'  => array('base', 'node', 'node-event-simulate', 'dom', 'event', 'io',
+                'anim', 'json-parse'),
+            'strings'   => $stringlist
+        );
+        $PAGE->requires->js_init_call('M.mod_forumng.init',
+                array($cmid ? $cmid : 0,
+                    $this->is_shared() ? $this->get_course_module_id() : 0,
+                    $ratingstars, $this->get_remaining_post_quota(),
+                    $out->pix_url('i/ajaxloader')->out(false), $starurls),
+                false, $module);
+    }
+
+    // Feeds
+    // ////.
+
+    /**
+     * Key that allows access to this forum's Atom/RSS feeds
+     * @param int $groupid Group ID/constant
+     * @param int $userid User ID or 0 for current
+     * @return Value of required authentication key
+     */
+    public function get_feed_key($groupid, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        switch ($groupid) {
+            case self::ALL_GROUPS:
+                if ($this->get_group_mode()) {
+                    $group = 'all';
+                    break;
+                }
+                // Otherwise not in group mode, so actually fall through
+            case self::NO_GROUPS:
+                $group = 'none';
+                break;
+            default:
+                $group = $groupid;
+                break;
+        }
+        $text = $this->forumfields->magicnumber . $group . '_' . $userid;
+        return sha1($text);
+    }
+
+    /**
+     * @return int Number of items that should be included in Atom/RSS feeds
+     *   for this forum
+     */
+    public function get_effective_feed_items() {
+        global $CFG;
+
+        // Global 'force' used if set
+        $result = $CFG->forumng_feeditems;
+        if ($result == -1) {
+            // Otherwise use module setting
+            $result = $this->forumfields->feeditems;
+        }
+
+        return $result;
+    }
+
+    /**
+     * Gets URL for an Atom/RSS feed.
+     * @param int $feedformat FEEDFORMAT_xx constant
+     * @param int $groupid Group ID
+     * @param int $userid User ID or 0 for current
+     * @return string URL for feed
+     */
+    public function get_feed_url($feedformat, $groupid, $userid=0) {
+        global $CFG;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        return $CFG->wwwroot . '/mod/forumng/feed.php?' .
+            $this->get_link_params(self::PARAM_PLAIN) .
+            '&user=' . $userid . ($groupid == self::ALL_GROUPS
+                || $groupid == self::NO_GROUPS ? '' : '&group=' . $groupid) .
+            '&key=' . $this->get_feed_key($groupid, $userid) . '&format=' .
+            ($feedformat == self::FEEDFORMAT_RSS ? 'rss' : 'atom');
+    }
+
+    /**
+     * Obtains list of discussions to include in an Atom/RSS feed (the kind
+     * that lists discussions only and not full posts).
+     * @param int $groupid Group ID (may be ALL_GROUPS)
+     * @param int $userid User ID
+     * @return array Array of mod_forumng_discussion objects
+     */
+    public function get_feed_discussions($groupid, $userid=0) {
+        // Number of items to output
+        $items = $this->get_effective_feed_items();
+
+        // Get most recent N discussions from db
+        $rs = mod_forumng_discussion::query_discussions(
+            'fd.forumngid = ? AND fd.deleted = 0', array($this->get_id()), -1,
+            'timemodified DESC', 0, $items);
+        $result = array();
+        foreach ($rs as $rec) {
+            // Create a new discussion from the database details
+            $discussion = new mod_forumng_discussion($this, $rec, true, -1);
+            if ($this->get_type()->can_view_discussion($discussion, $userid)) {
+                $result[$discussion->get_id()] = $discussion;
+            }
+        }
+        $rs->close();
+        return $result;
+    }
+
+    /**
+     * Obtains list of posts to include in an Atom/RSS feed.
+     * @param int $groupid Group ID (may be ALL_GROUPS)
+     * @param int $userid User ID
+     * @param mod_forumng_discussion $discussion Discussion object (intended only
+     *   for calls via the mod_forumng_discussion method)
+     * @return array Array of mod_forumng_post objects
+     */
+    public function get_feed_posts($groupid, $userid, $discussion=null) {
+        // Don't let user view any posts in a discussion feed they can't see
+        // (I don't think they should be given a key in this case, but just
+        // to be sure).
+        if ($discussion &&
+            !$this->get_type()->can_view_discussion($discussion, $userid)) {
+            return array();
+        }
+
+        // Number of items to output
+        $items = $this->get_effective_feed_items();
+
+        // Get most recent N posts from db
+        $whereparams = array();
+        if ($discussion) {
+            $where = 'fd.id = ?';
+            $whereparams[] = $discussion->get_id();
+        } else {
+            $where = 'fd.forumngid = ?';
+            $whereparams[] = $this->get_id();
+            if ($this->get_group_mode() && $groupid!=self::ALL_GROUPS) {
+                $where .= ' AND fd.groupid = ?';
+                $whereparams[] = $groupid;
+            }
+        }
+
+        // Don't include deleted or old-version posts
+        $where .= ' AND fp.oldversion = 0 AND fp.deleted = 0 AND fd.deleted = 0';
+        // Or ones out of time
+        $now = time();
+        $where .= " AND (fd.timestart < ?)" .
+                " AND (fd.timeend = 0 OR fd.timeend > ?)";
+        $whereparams[] = $now;
+        $whereparams[] = $now;
+
+        $postrecs = mod_forumng_post::query_posts($where, $whereparams,
+            'GREATEST(fp.created, fd.timestart) DESC',
+            false, false, false, $userid, true, false, 0, $items);
+        if (count($postrecs) == 0) {
+            // No posts!
+            return array();
+        }
+
+        $result = array();
+        if ($discussion) {
+            foreach ($postrecs as $rec) {
+                $post = new mod_forumng_post($discussion, $rec, null);
+                $result[$rec->id] = $post;
+            }
+        } else {
+            // Based on these posts, get all mentioned discussions
+            $discussionids = array();
+            $discussionposts = array();
+            foreach ($postrecs as $rec) {
+                $discussionids[] = $rec->discussionid;
+                $discussionposts[$rec->discussionid][] = $rec->id;
+            }
+
+            list($discussionpart, $discussionpartparams) =
+                    mod_forumng_utils::get_in_array_sql('fd.id', $discussionids);
+            $rs = mod_forumng_discussion::query_discussions(
+                $discussionpart, $discussionpartparams, -1, 'id');
+
+            // Build the discussion and post objects
+            $posts = array();
+            foreach ($rs as $rec) {
+                $discussion = new mod_forumng_discussion($this, $rec, true, -1);
+                if ($discussion->can_view($userid)) {
+                    foreach ($discussionposts[$discussion->get_id()] as $postid) {
+                        $post = new mod_forumng_post($discussion,
+                            $postrecs[$postid], null);
+                        $posts[$postid] = $post;
+                    }
+                }
+            }
+            $rs->close();
+
+            // Put them back in order of the post records, and return
+            foreach ($postrecs as $rec) {
+                // Records might be excluded if user can't view discussion
+                if (array_key_exists($rec->id, $posts)) {
+                    $result[$rec->id] = $posts[$rec->id];
+                }
+            }
+        }
+        return $result;
+    }
+
+    /**
+     * Obtains all draft posts in this forum by the given or current user,
+     * in reverse date order.
+     * @param int $userid User whose drafts will be retrieved. If zero,
+     *   retrieves draft for current user
+     * @return array Array of mod_forumng_draft objects
+     */
+    public function get_drafts($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return mod_forumng_draft::query_drafts("fdr.forumngid = ? AND fdr.userid = ?",
+                array($this->get_id(), $userid));
+    }
+
+    /**
+     * Obtains all flagged post in this forum by the given or current user,
+     * in reverse data order (of when they were flagged).
+     * @param int $userid User whose flags will be retrieved; 0 = current
+     * @return array Array of mod_forumng_post objects
+     */
+    public function get_flagged_posts($userid=0) {
+        // Get all flagged posts. Note that we request the discussion row as
+        // well, this is necessary (a) so we can include its forumngid field in
+        // the query, and (b) because we will use that data to construct
+        // basic discussion objects (without having to do another query).
+        $records = mod_forumng_post::query_posts(
+                'fd.forumngid = ? AND ff.flagged IS NOT NULL AND fp.deleted = 0',
+                array($this->get_id()), 'ff.flagged DESC', false, true, false,
+                $userid, true, true);
+
+        // Construct post object for each one
+        $result = array();
+        foreach ($records as $record) {
+            // Get discussion details from record
+            $discussionfields = mod_forumng_utils::extract_subobject($record, 'fd_');
+            $discussion = new mod_forumng_discussion($this, $discussionfields, false, -1);
+
+            // Create post object
+            $post = new mod_forumng_post($discussion, $record);
+            $result[$record->id] = $post;
+        }
+
+        return $result;
+    }
+
+    /**
+     * Obtain all flagged discussions in the forum by the given or current user,
+     * The results should be ordered by the last post modified date (fplast.modified DESC)
+     * @param int $userid User whose flags will be retrieved; 0 = current
+     * @return array Array of mod_forumng_discussion objects
+     */
+    public function get_flagged_discussions($userid = 0) {
+        global $USER;
+
+        if ($userid != -1) {
+            if ($userid == 0) {
+                $userid = $USER->id;
+            }
+            $records = mod_forumng_discussion::query_discussions(
+                'fd.forumngid = ? AND ff.flagged IS NOT NULL AND ff.discussionid = fd.id AND ff.userid = ?',
+                 array($this->get_id(), $userid), $userid, 'x.flagged DESC', '', '', $this, true);
+        }
+
+        $result = array();
+        foreach ($records as $record) {
+            // Get discussion details from record and create discussionfields.
+            $discussion = new mod_forumng_discussion($this, $record, true, $userid);
+            $result[$record->id] = $discussion;
+        }
+        return $result;
+    }
+
+    /**
+     * @param bool $mustusecounter True if this function should return false
+     *   unless one or more of the three types of post counters are in use
+     * @return bool True if automatic completion is enabled for this forum
+     */
+    public function is_auto_completion_enabled($mustusecounter=false) {
+        // If this check is really checking that one of the actual counters
+        // is on, then do those first as they're simple field checks
+        if ($mustusecounter && !$this->forumfields->completionposts
+            && !$this->forumfields->completionreplies
+            && !$this->forumfields->completiondiscussions) {
+            return false;
+        }
+
+        $completion = new completion_info($this->get_course());
+        return ($completion->is_enabled($this->get_course_module()) ==
+                COMPLETION_TRACKING_AUTOMATIC);
+    }
+
+    /**
+     * @return int Number of posts required for this forum to be marked
+     *   complete, or 0 if posts are not required for completion/completion
+     *   is turned off.
+     */
+    public function get_completion_posts() {
+        return $this->is_auto_completion_enabled()
+            ? $this->forumfields->completionposts : 0;
+    }
+
+    /**
+     * @return int Number of posts required for this forum to be marked
+     *   complete, or 0 if posts are not required for completion/completion
+     *   is turned off.
+     */
+    public function get_completion_discussions() {
+        return $this->is_auto_completion_enabled()
+            ? $this->forumfields->completiondiscussions: 0;
+    }
+
+    /**
+     * @return int Number of posts required for this forum to be marked
+     *   complete, or 0 if posts are not required for completion/completion
+     *   is turned off.
+     */
+    public function get_completion_replies() {
+        return $this->is_auto_completion_enabled()
+            ? $this->forumfields->completionreplies : 0;
+    }
+
+    /**
+     * Used by lib.php forumng_get_completion_state.
+     * @param int $userid User ID
+     * @param bool $type Type of comparison (or/and; can be used as return
+     *   value if no conditions)
+     * @return bool True if completed, false if not (if no conditions, then
+     *   return value is $type)
+     */
+    public function get_completion_state($userid, $type) {
+        global $DB;
+        $result = $type; // Default return value
+
+        $forumngid = $this->get_id();
+        $postcountsql = "
+SELECT
+    COUNT(1)
+FROM
+    {forumng_posts} fp
+    INNER JOIN {forumng_discussions} fd ON fp.discussionid = fd.id
+WHERE
+    fp.userid = ? AND fd.forumngid = ? AND fp.deleted = 0 AND fd.deleted = 0";
+        $postcountparams = array($userid, $forumngid);
+
+        if ($this->forumfields->completiondiscussions) {
+            $value = $this->forumfields->completiondiscussions <=
+                    $DB->get_field_sql( $postcountsql . ' AND fp.parentpostid IS NULL',
+                    $postcountparams);
+            if ($type==COMPLETION_AND) {
+                $result = $result && $value;
+            } else {
+                $result = $result || $value;
+            }
+        }
+        if ($this->forumfields->completionreplies) {
+            $value = $this->forumfields->completionreplies <=
+                    $DB->get_field_sql( $postcountsql . ' AND fp.parentpostid IS NOT NULL',
+                            $postcountparams);
+            if ($type==COMPLETION_AND) {
+                $result = $result && $value;
+            } else {
+                $result = $result || $value;
+            }
+        }
+        if ($this->forumfields->completionposts) {
+            $value = $this->forumfields->completionposts <=
+                    $DB->get_field_sql($postcountsql, $postcountparams);
+            if ($type==COMPLETION_AND) {
+                $result = $result && $value;
+            } else {
+                $result = $result || $value;
+            }
+        }
+
+        return $result;
+    }
+
+    // Conversion
+    /*///////////*/
+
+    /**
+     * Creates a new ForumNG by copying data (including all messages etc) from
+     * an old forum. The old forum will be hidden.
+     *
+     * Behaviour is undefined if the old forum wasn't eligible for conversion
+     * (mod_forumng_utils::get_convertible_forums).
+     * @param object $course Moodle course object
+     * @param int $forumcmid Old forum to convert
+     * @param bool $progress If true, print progress to output
+     * @param bool $hide If true, newly-created forum is also hidden
+     * @param bool $nodata If true, no user data (posts, subscriptions, etc)
+     *   is copied; you only get a forum with same configuration
+     * @param bool $insection If true, remeber to create the new forumNG in the same section.
+     * @throws mod_forumng_exception If any error occurs
+     */
+    public static function create_from_old_forum($course, $forumcmid, $progress, $hide,
+            $nodata, $insection=true) {
+        global $CFG, $DB, $OUTPUT;
+
+        // Start the clock and a database transaction
+        $starttime = microtime(true);
+        $transaction = $DB->start_delegated_transaction();
+
+        // Note we do not use get_fast_modinfo because it doesn't contain the
+        // complete $cm object.
+        $cm = $DB->get_record('course_modules', array('id' => $forumcmid), '*', MUST_EXIST);
+        $forum = $DB->get_record('forum', array('id' => $cm->instance), '*', MUST_EXIST);
+        if ($progress) {
+            echo $OUTPUT->heading(s($forum->name), 3);
+            print '<ul><li>' . get_string('convert_process_init', 'forumng');
+            flush();
+        }
+
+        // Hide forum
+        $DB->update_record('course_modules', (object)array(
+            'id' => $cm->id, 'visible'=>0));
+
+        // Table for changed subscription constants
+        $subscriptiontranslate = array(0=>1, 1=>3, 2=>2, 3=>0);
+
+        // Get, convert, and create forum table data
+        $forumng = (object)array(
+            'course' => $course->id,
+            'name' => $forum->name,
+            'type' => 'general',
+            'intro' => $forum->intro,
+            'introformat' => $forum->introformat,
+            'introduction' => $forum->introduction,
+            'introductionformat' => $forum->introductionformat,
+            'ratingscale' => $forum->scale,
+            'ratingfrom' => $forum->assesstimestart,
+            'ratinguntil' => $forum->assesstimefinish,
+            'ratingthreshold' => 1,
+            'grading' => $forum->assessed,
+            'attachmentmaxbytes' => $forum->maxbytes,
+            'subscription' => $subscriptiontranslate[$forum->forcesubscribe],
+            'feedtype' => $forum->rsstype,
+            'feeditems' => $forum->rssarticles,
+            'maxpostsperiod' => $forum->blockperiod,
+            'maxpostsblock' => $forum->blockafter,
+            'postingfrom' => 0,
+            'postinguntil' => 0,
+            'typedata' => null);
+        require_once($CFG->dirroot . '/mod/forumng/lib.php');
+
+        // Note: The idnumber is required. We cannot copy it because then there
+        // would be a duplicate idnumber. Let's just leave blank, people will
+        // have to configure this manually.
+        $forumng->cmidnumber = '';
+        if (!($newforumngid = forumng_add_instance($forumng))) {
+            throw new coding_exception("Failed to add forumng instance");
+        }
+        $forumng->id = $newforumngid;
+
+        // Create and add course-modules entry
+        $newcm = new stdClass;
+        $newcm->course = $course->id;
+        $newcm->module = $DB->get_field('modules', 'id', array('name' => 'forumng'));
+        if (!$newcm->module) {
+            throw new coding_exception("Cannot find forumng module id");
+        }
+        $newcm->instance = $newforumngid;
+        $newcm->section = $cm->section;
+        $newcm->added = time();
+        $newcm->score = $cm->score;
+        $newcm->indent = $cm->indent;
+        $newcm->visible = 0; // Forums are always hidden until finished
+        $newcm->groupmode = $cm->groupmode;
+        $newcm->groupingid = $cm->groupingid;
+        $newcm->idnumber = $cm->idnumber;
+        $newcm->completion = $cm->completion;
+        $newcm->completiongradeitemnumber = $cm->completiongradeitemnumber;
+        $newcm->completionview = $cm->completionview;
+        $newcm->availability = $cm->availability;
+
+        // Add
+        $newcm->id = $DB->insert_record('course_modules', $newcm);
+
+        $oldcontext = context_module::instance($cm->id);
+        $newcontext = context_module::instance($newcm->id);
+
+        // Update section.
+        if ($insection) {
+            $section = $DB->get_record('course_sections', array('id' => $newcm->section),
+                    '*', MUST_EXIST);
+            $updatesection = (object)array(
+                    'id' => $section->id,
+                    'sequence' => str_replace(
+                        $cm->id, $cm->id . ',' . $newcm->id, $section->sequence));
+            if ($updatesection->sequence == $section->sequence) {
+                throw new coding_exception("Unable to update sequence");
+            }
+            $DB->update_record('course_sections', $updatesection);
+        }
+        // Construct forum object for new forum
+        $newforum = self::get_from_id($forumng->id, self::CLONE_DIRECT);
+
+        if ($progress) {
+            print ' ' . get_string('convert_process_state_done', 'forumng') . '</li>';
+        }
+
+        if (!$nodata) {
+            // Convert subscriptions
+            switch ($newforum->get_effective_subscription_option()) {
+                case self::SUBSCRIPTION_PERMITTED:
+                    if ($progress) {
+                        print '<li>' . get_string(
+                            'convert_process_subscriptions_normal', 'forumng');
+                        flush();
+                    }
+                    // Standard subscription - just copy subscriptions.
+                    $rs = $DB->get_recordset('forum_subscriptions',
+                            array('forum' => $forum->id));
+                    foreach ($rs as $rec) {
+                        $DB->insert_record('forumng_subscriptions', (object)array(
+                            'forumngid' => $forumng->id,
+                            'userid' => $rec->userid,
+                            'subscribed' => 1));
+                    }
+                    $rs->close();
+                    if ($progress) {
+                        print ' ' . get_string(
+                            'convert_process_state_done', 'forumng') . '</li>';
+                    }
+                    break;
+
+                case self::SUBSCRIPTION_INITIALLY_SUBSCRIBED:
+                    // Initial subscription is handled differently; the old forum
+                    // stores all the subscriptions in the database, while in this
+                    // forum we only store people who chose to unsubscribe
+                    if ($progress) {
+                        print '<li>' . get_string(
+                            'convert_process_subscriptions_initial', 'forumng');
+                        flush();
+                    }
+
+                    // Get list of those subscribed on old forum.
+                    $rs = $DB->get_recordset('forum_subscriptions',
+                            array('forum' => $forum->id));
+                    $subscribedbefore = array();
+                    foreach ($rs as $rec) {
+                        $subscribedbefore[$rec->userid] = true;
+                    }
+                    $rs->close();
+
+                    // Get list of those subscribed on new forum
+                    $new = $newforum->get_subscribers();
+
+                    // For anyone in the new list but not the old list, add an
+                    // unsubscribe
+                    foreach ($new as $user) {
+                        if (!array_key_exists($user->id , $subscribedbefore)) {
+                            $DB->insert_record('forumng_subscriptions', (object)array(
+                                'forumngid' => $forumng->id,
+                                'userid' => $user->id,
+                                'subscribed' => 0));
+                        }
+                    }
+
+                    if ($progress) {
+                        print ' ' . get_string(
+                            'convert_process_state_done', 'forumng') . '</li>';
+                    }
+                    break;
+            }
+
+            // Convert discussions
+            if ($progress) {
+                print '<li>' . get_string(
+                    'convert_process_discussions', 'forumng');
+                flush();
+            }
+            $rsd = $DB->get_recordset(
+                'forum_discussions', array('forum' => $forum->id));
+            $count = 0;
+            foreach ($rsd as $recd) {
+                // Convert discussion options
+                $newd = (object)array(
+                    'forumngid' => $forumng->id,
+                    'timestart' => $recd->timestart,
+                    'timeend' => $recd->timeend,
+                    'deleted' => 0,
+                    'locked' => 0,
+                    'sticky' => 0
+                );
+                if ($recd->groupid == -1 || !$newcm->groupmode) {
+                    $newd->groupid = null;
+                } else {
+                    $newd->groupid = $recd->groupid;
+                }
+
+                // Save discussion
+                $newd->id = $DB->insert_record('forumng_discussions', $newd);
+
+                // Convert posts
+                $lastposttime = -1;
+                $discussionupdate = (object)array('id' => $newd->id);
+                $postids = array(); // From old post id to new post id.
+                $parentposts = array(); // From new post id to old parent id.
+                $subjects = array(); // From new id to subject text (no slashes).
+                $rsp = $DB->get_recordset('forum_posts', array('discussion' => $recd->id));
+                foreach ($rsp as $recp) {
+                    // Convert post
+                    $newp = (object)array(
+                        'discussionid' => $newd->id,
+                        'userid' => $recp->userid,
+                        'created' => $recp->created,
+                        'modified' => $recp->modified,
+                        'deleted' => 0,
+                        'deleteuserid' => null,
+                        'mailstate' => self::MAILSTATE_DIGESTED,
+                        'oldversion' => 0,
+                        'edituserid' => null,
+                        'subject' => $recp->subject,
+                        'message' => $recp->message,
+                        'messageformat' => $recp->messageformat,
+                        'important' => 0);
+
+                    // Are there any attachments?
+                    $attachments = array();
+                    // Standard forum uses attachment field for filename
+                    if ($recp->attachment) {
+                        $attachments[] = $recp->attachment;
+                    }
+                    $newp->attachments = count($attachments) ? 1 : 0;
+
+                    // Add record
+                    $newp->id = $DB->insert_record('forumng_posts', $newp);
+
+                    // Remember details for later parent update
+                    $postids[$recp->id] = $newp->id;
+                    if ($recp->parent) {
+                        $parentposts[$newp->id] = $recp->parent;
+                    } else {
+                        $discussionupdate->postid = $newp->id;
+                    }
+                    if ($newp->created > $lastposttime) {
+                        $discussionupdate->lastpostid = $newp->id;
+                    }
+                    $subjects[$newp->id] = $recp->subject;
+
+                    // Copy attachments.
+                    $fo = get_file_storage();
+                    $filesok = 0;
+                    $filesfailed = 0;
+                    $oldattachs = $fo->get_area_files($oldcontext->id, 'mod_forum', 'attachment', $recp->id, 'itemid', false);
+                    foreach ($oldattachs as $attachment) {
+                        $filerecord = array(
+                                'component' => 'mod_forumng',
+                                'itemid' => $newp->id,
+                                'contextid' => $newcontext->id
+                        );
+                        $fo->create_file_from_storedfile($filerecord, $attachment);
+                    }
+                    $oldimgs = $fo->get_area_files($oldcontext->id, 'mod_forum', 'message', $recp->id, 'itemid', false);
+                    foreach ($oldimgs as $attachment) {
+                        $filerecord = array(
+                                'component' => 'mod_forumng',
+                                'itemid' => $newp->id,
+                                'contextid' => $newcontext->id
+                        );
+                        $fo->create_file_from_storedfile($filerecord, $attachment);
+                    }
+
+                    // Convert ratings.
+                    /*if ($forumng->ratingscale) {
+                        // TODO: Support grades -> ratings.
+                        $rsr = $DB->get_recordset('forum_ratings',
+                                array('post' => $recp->id));
+                        foreach ($rsr as $recr) {
+                            $DB->insert_record('forumng_ratings', (object)array(
+                                'postid' =>  $newp->id,
+                                'userid' => $recr->userid,
+                                'time' => $recr->time,
+                                'rating' => $recr->rating));
+                        }
+                        $rsr->close();
+                    }*/
+                }
+                $rsp->close();
+
+                // Update parent numbers
+                $newparentids = array();
+                foreach ($parentposts as $newid => $oldparentid) {
+                    if (!array_key_exists($oldparentid, $postids)) {
+                        throw new coding_exception(
+                            "Unknown parent post $oldparentid");
+                    }
+                    $newparentid = $postids[$oldparentid];
+                    $DB->update_record('forumng_posts', (object)array(
+                        'id' => $newid,
+                        'parentpostid' => $newparentid));
+                    $newparentids[$newid] = $newparentid;
+                }
+
+                // Update subjects
+                $removesubjects = array(); // Array of ints to cancel subjects
+                foreach ($newparentids as $newid => $newparentid) {
+                    $subject = $subjects[$newid];
+                    $parentsubject = $subjects[$newparentid];
+                    if ($subject &&
+                        ($subject == get_string('re', 'forum') . ' ' . $parentsubject
+                        || $subject == $parentsubject)) {
+                        $removesubjects[] = $newid;
+                    }
+                }
+                if (count($removesubjects)) {
+                    list($in, $inparams) = mod_forumng_utils::get_in_array_sql('id',
+                            $removesubjects);
+                    $DB->execute(
+                        "UPDATE {forumng_posts} SET subject = NULL WHERE $in", $inparams);
+                }
+
+                // Update first/last post numbers
+                $DB->update_record('forumng_discussions', $discussionupdate);
+
+                // Convert read data
+                $rsr = $DB->get_recordset_sql("
+SELECT
+    userid, MAX(lastread) AS lastread
+FROM
+    {forum_read}
+WHERE
+    discussionid = ?
+GROUP BY
+    userid", array($recd->id));
+                foreach ($rsr as $recr) {
+                    $DB->insert_record('forumng_read', (object)array(
+                        'discussionid' => $newd->id,
+                        'userid' => $recr->userid,
+                        'time' => $recr->lastread));
+                }
+                $rsr->close();
+
+                // Display dot for each discussion
+                if ($progress) {
+                    print '.';
+                    $count++;
+                    if ($count % 10 == 0) {
+                        print $count;
+                    }
+                    flush();
+                }
+            }
+            $rsd->close();
+            if ($progress) {
+                print ' ' . get_string(
+                    'convert_process_state_done', 'forumng') . '</li>';
+            }
+        }
+
+        // Show forum
+        if (!$hide && $cm->visible) {
+            if ($progress) {
+                print '<li>' . get_string('convert_process_show', 'forumng');
+                flush();
+            }
+            $updatecm = (object)array(
+                'id' => $newcm->id,
+                'visible' => 1);
+            $DB->update_record('course_modules', $updatecm);
+            if ($progress) {
+                print ' ' . get_string('convert_process_state_done', 'forumng') . '</li>';
+            }
+        }
+
+        // Transfer role assignments
+        $roles = $DB->get_records('role_assignments', array('contextid' => $oldcontext->id));
+        if ($roles) {
+            if ($progress) {
+                print '<li>' . get_string('convert_process_assignments', 'forumng');
+                flush();
+            }
+            foreach ($roles as $role) {
+                $newrole = $role;
+                $newrole->contextid = $newcontext->id;
+                $newrole->enrol = $newrole->enrol;
+                $DB->insert_record('role_assignments', $newrole);
+            }
+            if ($progress) {
+                print ' ' . get_string('convert_process_state_done', 'forumng') . '</li>';
+            }
+        }
+        // Transfer capabilities
+        $capabilities = array(
+            'moodle/course:viewhiddenactivities' => 'moodle/course:viewhiddenactivities',
+            'moodle/site:accessallgroups' => 'moodle/site:accessallgroups',
+            'moodle/site:trustcontent' => 'moodle/site:trustcontent',
+            'moodle/site:viewfullnames' => 'moodle/site:viewfullnames',
+
+            'mod/forum:viewdiscussion' => 'mod/forumng:viewdiscussion',
+            'mod/forum:startdiscussion' => 'mod/forumng:startdiscussion',
+            'mod/forum:replypost' => 'mod/forumng:replypost',
+            'mod/forum:viewrating' => 'mod/forumng:viewrating',
+            'mod/forum:viewanyrating' => 'mod/forumng:viewanyrating',
+            'mod/forum:rate' => 'mod/forumng:rate',
+            'mod/forum:createattachment' => 'mod/forumng:createattachment',
+            'mod/forum:deleteanypost' => 'mod/forumng:deleteanypost',
+            'mod/forum:splitdiscussions' => 'mod/forumng:splitdiscussions',
+            'mod/forum:movediscussions' => 'mod/forumng:movediscussions',
+            'mod/forum:editanypost' => 'mod/forumng:editanypost',
+            'mod/forum:viewsubscribers' => 'mod/forumng:viewsubscribers',
+            'mod/forum:managesubscriptions' => 'mod/forumng:managesubscriptions',
+            'mod/forum:viewhiddentimedposts' => 'mod/forumng:viewallposts'
+        );
+        $caps = $DB->get_records('role_capabilities', array('contextid' => $oldcontext->id));
+        if ($caps) {
+            if ($progress) {
+                print '<li>' . get_string('convert_process_overrides', 'forumng');
+                flush();
+            }
+            foreach ($caps as $cap) {
+                foreach ($capabilities as $key => $capability) {
+                    if ($cap->capability != $key) {
+                        continue;
+                    }
+                    $newcap = $cap;
+                    $newcap->contextid = $newcontext->id;
+                    $newcap->capability = $capability;
+                    $newcap->capability = $newcap->capability;
+                    $DB->insert_record('role_capabilities', $newcap);
+                }
+            }
+            if ($progress) {
+                print ' ' . get_string('convert_process_state_done', 'forumng') . '</li>';
+            }
+        }
+
+        // Do course cache
+        rebuild_course_cache($course->id, true);
+
+        // Update search data
+        if (self::search_installed()) {
+            if ($progress) {
+                print '<li>' . get_string('convert_process_search', 'forumng') . '</li>';
+                flush();
+            }
+            self::search_update_all($progress, $course->id, $newcm->id);
+        }
+
+        if ($progress) {
+            print '<li>' . get_string('convert_process_update_subscriptions', 'forumng');
+            flush();
+        }
+        self::group_subscription_update(false, $newcm->id);
+        if ($progress) {
+            print ' ' . get_string('convert_process_state_done', 'forumng') . '</li>';
+        }
+        $transaction->allow_commit();
+
+        if ($progress) {
+            $a = (object)array(
+                'seconds' => round(microtime(true) - $starttime, 1),
+                'link' => '<a href="view.php?id=' . $newcm->id . '">' .
+                    get_string('convert_newforum', 'forumng') . '</a>');
+            print '</ul><p>' . get_string('convert_process_complete', 'forumng',
+                $a) . '</p>';
+        }
+    }
+
+    /**
+     * Returns user activity report information.
+     * @param int $forumngid forumng id
+     * @param int $userid Moodle user id
+     * @return object or false
+     */
+    public static function get_user_activityreport($forumngid, $userid) {
+        global $DB;
+        return $DB->get_record_sql('
+SELECT
+    COUNT(p.id) AS postcount, MAX(p.modified) AS lastpost
+FROM
+    {forumng_discussions} d
+    INNER JOIN {forumng_posts} p ON p.discussionid = d.id
+WHERE
+    d.forumngid = ?
+    AND p.userid = ?
+    AND d.deleted = 0 AND p.deleted = 0 AND p.oldversion = 0', array($forumngid, $userid));
+    }
+
+    /**
+     * Gets all users within this forum who are supposed to be 'monitored'
+     * (that means users who are enrolled on the course).
+     * @param int $groupid Group ID or ALL_GROUPS/NO_GROUPS to get all users
+     */
+    public function get_monitored_users($groupid) {
+        return get_enrolled_users($this->get_context(), '', $groupid > 0 ? $groupid : 0,
+            "u.id, u.lastname, u.firstname, u.username");
+    }
+
+    /**
+     * Returns all posts in this forum by the given user within the given group.
+     * @param int $userid
+     * @param int $groupid
+     * @param string $order Sort order; the default is fp.id - note this is preferable
+     *   to fp.timecreated because it works correctly if there are two posts in
+     *   the same second
+     * @param bool $hasrating if true only returns posts which ahve been rated
+     * @return array Array of mod_forumng_post objects
+     */
+    public function get_all_posts_by_user($userid, $groupid, $order = 'fp.id', $start = null, $end = null, $hasrating = false) {
+        global $CFG, $USER;
+        $where = 'fd.forumngid = ? AND fp.userid = ? AND fp.oldversion = 0 AND fp.deleted = 0';
+        $whereparams = array($this->get_id(), $userid);
+        if ($groupid != self::NO_GROUPS && $groupid != self::ALL_GROUPS) {
+            $where .= ' AND (fd.groupid = ? OR fd.groupid IS NULL)';
+            $whereparams[] = $groupid;
+        }
+        if (!empty($start)) {
+            $where .= ' AND fp.created >= ?';
+            $whereparams[] = $start;
+        }
+
+        if (!empty($end)) {
+            $where .= ' AND fp.created <= ?';
+            $whereparams[] = $end;
+        }
+        if ($hasrating) {
+            $where .= ' AND '.self::select_exists("SELECT r.itemid FROM {rating} r WHERE r.itemid = fp.id AND r.ratingarea = 'post'
+                    AND r.contextid = ? AND r.userid <> ?");
+            $whereparams[] = $this->get_context(true)->id;
+            $whereparams[] = $userid;
+        }
+        $result = array();
+        $posts = mod_forumng_post::query_posts($where, $whereparams, $order, false, false, true,
+                0, true, true);
+        // Add standard ratings if enabled.
+        if ($this->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+            require_once($CFG->dirroot . '/rating/lib.php');
+            // If grading is 'No grading' or 'Teacher grades students'.
+            if ($this->get_grading() == mod_forumng::GRADING_NONE ||
+                $this->get_grading() == mod_forumng::GRADING_MANUAL) {
+                // Set the aggregation method.
+                if ($this->get_rating_scale() > 0) {
+                    $aggregate = RATING_AGGREGATE_AVERAGE;
+                } else {
+                    $aggregate = RATING_AGGREGATE_COUNT;
+                }
+            } else {
+                $aggregate = $this->get_grading();
+            }
+            $ratingoptions = new stdClass();
+            $ratingoptions->context = $this->get_context(true);
+            $ratingoptions->component = 'mod_forumng';
+            $ratingoptions->ratingarea = 'post';
+            $ratingoptions->items = $posts;
+            $ratingoptions->aggregate = $aggregate;
+            $ratingoptions->scaleid = $this->get_rating_scale();
+            $ratingoptions->userid = $USER->id;
+            $ratingoptions->assesstimestart = $this->get_ratingfrom();
+            $ratingoptions->assesstimefinish = $this->get_ratinguntil();
+
+            $rm = new rating_manager();
+            $posts = $rm->get_ratings($ratingoptions);
+        }
+        $discussions = array();
+        foreach ($posts as $fields) {
+            $discussionfields = mod_forumng_utils::extract_subobject($fields, 'fd_');
+            if (!isset($discussions[$discussionfields->id])) {
+                $discussions[$discussionfields->id] = new mod_forumng_discussion($this, $discussionfields, false, -1);
+            }
+
+            $result[$fields->id] = new mod_forumng_post($discussions[$discussionfields->id], $fields);
+        }
+        return $result;
+    }
+
+    /**
+     * Returns all posts in this forum by the given user within the given group.
+     * @param object $forum
+     * @param int $userid
+     * @param int $groupid
+     * @param int $ratedstart
+     * @param int $ratedend
+     * @param string $order Sort order; the default is fp.id - note this is preferable
+     *   to fp.timecreated because it works correctly if there are two posts in
+     *   the same second
+     * @param bool $hasrating if true only returns posts which ahve been rated
+     * @return array Array of mod_forumng_post objects
+     */
+    public function get_rated_posts_by_user(
+            $forum, $userid, $groupid, $order = 'fp.id', $ratedstart = null, $ratedend = null, $start = null, $end = null) {
+        global $CFG, $USER;
+        if ($forum->get_enableratings() != mod_forumng::FORUMNG_STANDARD_RATING) {
+            return array();
+        }
+        $where = 'fd.forumngid = ? AND fp.userid <> ? AND fp.oldversion = 0 AND fp.deleted = 0';
+        $whereparams = array($this->get_id(), $userid);
+        if ($groupid != self::NO_GROUPS && $groupid != self::ALL_GROUPS) {
+            $where .= ' AND (fd.groupid = ? OR fd.groupid IS NULL)';
+            $whereparams[] = $groupid;
+        }
+        if (!empty($start)) {
+            $where .= ' AND fp.created >= ?';
+            $whereparams[] = $start;
+        }
+
+        if (!empty($end)) {
+            $where .= ' AND fp.created <= ?';
+            $whereparams[] = $end;
+        }
+        $sqlselectstring = 'SELECT r.itemid FROM {rating} r WHERE r.itemid = fp.id AND r.ratingarea = \'post\'
+                AND r.contextid = ? AND r.userid = ?';
+        $extraparams = array();
+        if (!empty($ratedstart)) {
+            $sqlselectstring .= ' AND r.timemodified >= ?';
+            $extraparams[] = $ratedstart;
+        }
+        if (!empty($ratedend)) {
+            $sqlselectstring .= ' AND r.timemodified <= ?';
+            $extraparams[] = $ratedend;
+        }
+        $where .= ' AND '.self::select_exists($sqlselectstring);
+        $whereparams[] = $this->get_context(true)->id;
+        $whereparams[] = $userid;
+        $whereparams = array_merge($whereparams, $extraparams);
+
+        $result = array();
+        $posts = mod_forumng_post::query_posts($where, $whereparams, $order, false, false, true,
+                0, true, true);
+        // Add standard ratings if enabled.
+        if ($this->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+            require_once($CFG->dirroot . '/rating/lib.php');
+            // If grading is 'No grading' or 'Teacher grades students'.
+            if ($this->get_grading() == mod_forumng::GRADING_NONE ||
+            $this->get_grading() == mod_forumng::GRADING_MANUAL) {
+                // Set the aggregation method.
+                if ($this->get_rating_scale() > 0) {
+                    $aggregate = RATING_AGGREGATE_AVERAGE;
+                } else {
+                    $aggregate = RATING_AGGREGATE_COUNT;
+                }
+            } else {
+                $aggregate = $this->get_grading();
+            }
+            $ratingoptions = new stdClass();
+            $ratingoptions->context = $this->get_context(true);
+            $ratingoptions->component = 'mod_forumng';
+            $ratingoptions->ratingarea = 'post';
+            $ratingoptions->items = $posts;
+            $ratingoptions->aggregate = $aggregate;
+            $ratingoptions->scaleid = $this->get_rating_scale();
+            $ratingoptions->userid = $USER->id;
+            $ratingoptions->assesstimestart = $this->get_ratingfrom();
+            $ratingoptions->assesstimefinish = $this->get_ratinguntil();
+
+            $rm = new rating_manager();
+            $posts = $rm->get_ratings($ratingoptions);
+        }
+        $discussions = array();
+        foreach ($posts as $fields) {
+            $discussionfields = mod_forumng_utils::extract_subobject($fields, 'fd_');
+            if (!isset($discussions[$discussionfields->id])) {
+                $discussions[$discussionfields->id] = new mod_forumng_discussion($this, $discussionfields, false, -1);
+            }
+            $result[$fields->id] = new mod_forumng_post($discussions[$discussionfields->id], $fields);
+        }
+        return $result;
+    }
+
+    /**
+     * Gets all user post counts.
+     * @param int $groupid Group ID or NO_GROUPS/ALL_GROUPS
+     * @param bool $ignoreanon Ignore posts marked as anonymous
+     * @return array An associative array of $userid => (info object)
+     *   where info object has ->discussions and ->replies values
+     */
+    public function get_all_user_post_counts($groupid, $ignoreanon = false, $start = null, $end = null) {
+        global $DB;
+
+        if ($groupid != self::NO_GROUPS && $groupid != self::ALL_GROUPS) {
+            $groupwhere = 'AND (fd.groupid = ? OR fd.groupid IS NULL)';
+            $groupparams = array($groupid);
+        } else {
+            $groupwhere = '';
+            $groupparams = array();
+        }
+
+        $anonparams = array();
+        $anonwhere = '';
+        if ($ignoreanon) {
+            $anonwhere = 'AND fp.asmoderator != ?';
+            $anonparams[] = self::ASMODERATOR_ANON;
+        }
+
+        $timewhere = '';
+        $timeparams = array();
+
+        if (!empty($start)) {
+            $timewhere = 'AND fp.created >= ?';
+            $timeparams[] = $start;
+        }
+
+        if (!empty($end)) {
+            $timewhere .= 'AND fp.created <= ?';
+            $timeparams[] = $end;
+        }
+
+        $results = array();
+        foreach (array('discussions', 'replies') as $task) {
+            // This join will either extract posts which start a discussion, or those which don't
+            $joinon = $task === 'discussions' ? 'fd.postid = fp.id'
+                    : 'fd.id = fp.discussionid AND fd.postid <> fp.id';
+
+            // Get counts of items in that category
+            $rs = $DB->get_recordset_sql("
+    SELECT
+        fp.userid, COUNT(1) AS numposts
+    FROM
+        {forumng_posts} fp
+        INNER JOIN {forumng_discussions} fd ON $joinon
+    WHERE
+        fd.forumngid = ?
+        $groupwhere
+        $anonwhere
+        $timewhere
+        AND fd.deleted = 0
+        AND fp.deleted = 0
+        AND fp.oldversion = 0
+    GROUP BY
+        fp.userid", array_merge(array($this->get_id()), $groupparams, $anonparams, $timeparams));
+
+            // Store in results
+            foreach ($rs as $rec) {
+                if (!isset($results[$rec->userid])) {
+                    $results[$rec->userid] = (object)array('discussions'=>0, 'replies'=>0);
+                }
+                $results[$rec->userid]->{$task} = $rec->numposts;
+            }
+            $rs->close();
+        }
+
+        return $results;
+    }
+
+    /**
+     * Returns true if OK to archive the old discussions to the target forum.
+     * @param object $modinfo Moodle get_fast_modinfo data
+     * @param string $message Throwing warning if the forum cannot be archived
+     * @return bool True if settings are OK
+     */
+    public function can_archive_forum($modinfo, &$message) {
+        global $CFG;
+        $forumngid = $this->get_id();
+        $groupmode = $this->get_group_mode();
+        $groupingid = $this->get_grouping();
+        $targetforumngid = $this->forumfields->removeto;
+        if (isset($modinfo->instances['forumng'][$targetforumngid])) {
+            $targetcm = $modinfo->instances['forumng'][$targetforumngid];
+            $targetgroupmode = groups_get_activity_groupmode($targetcm, $this->get_course());
+            $targetgroupingid = $targetcm->groupingid;
+            if (!$targetgroupmode) {
+                return true;
+            } else {
+                if (($groupingid == $targetgroupingid) && $groupmode) {
+                    return true;
+                }
+                $message = get_string('archive_errorgrouping', 'forumng');
+                return false;
+            }
+        } else {
+            $message = get_string('archive_errortargetforum', 'forumng');
+            return false;
+        }
+    }
+
+    // Shared/clone forums
+    /*////////////////////*/
+
+    /**
+     * Redirects to the original forum that this is a clone of, setting
+     * session to indicate that user came from this forum. Does not return.
+     * @throws mod_forumng_exception If this is not a clone forum I
+     */
+    public function redirect_to_original() {
+        global $CFG, $SESSION;
+        $cmid = $this->forumfields->originalcmid;
+        if (!$cmid) {
+            throw new coding_exception('This forum is not a clone');
+        }
+        if (!isset($SESSION->forumng_sharedforumcm)) {
+            $SESSION->forumng_sharedforumcm = array();
+        }
+        $SESSION->forumng_sharedforumcm[$cmid] = $this->get_course_module();
+        redirect($CFG->wwwroot . '/mod/forumng/view.php?id=' . $cmid .
+                '&clone=' . $this->get_course_module()->id);
+    }
+
+    /**
+     * Gets unread data from original forum.
+     * @param int $unread UNREAD_xx constant
+     * @param int $userid User id.
+     * @throws mod_forumng_exception If this is not a clone forum
+     */
+    public function init_unread_from_original($unread, $userid = 0) {
+        global $DB;
+        $cmid = $this->forumfields->originalcmid;
+        if (!$cmid) {
+            throw new coding_exception('This forum is not a clone');
+        }
+        $viewhiddenforums = array();
+        if (has_capability('mod/forumng:viewallposts', context_module::instance($cmid), $userid)) {
+            $viewhiddenforums[] = $DB->get_field(
+                    'course_modules', 'instance', array('id' => $cmid));
+        }
+        $rows = self::query_forums(array($cmid), null, $userid, $unread,
+                array(), array(), $viewhiddenforums);
+        if (count($rows) != 1) {
+            throw new coding_exception('Unexpected data extracting base forum');
+        }
+        $row = reset($rows);
+        switch ($unread) {
+            case self::UNREAD_BINARY:
+                if (isset($row->f_hasunreaddiscussions)) {
+                    // Set binary to 0/1 even if database returns 't'/'f'.
+                    if ($row->f_hasunreaddiscussions === 'f') {
+                        $this->forumfields->hasunreaddiscussions = 0;
+                    } else if ($row->f_hasunreaddiscussions) {
+                        $this->forumfields->hasunreaddiscussions = 1;
+                    } else {
+                        $this->forumfields->hasunreaddiscussions = 0;
+                    }
+                } else {
+                    $this->forumfields->hasunreaddiscussions = $row->f_numunreaddiscussions ? 1 : 0;
+                }
+                break;
+            case self::UNREAD_DISCUSSIONS:
+                $this->forumfields->numunreaddiscussions = $row->f_numunreaddiscussions;
+                break;
+        }
+    }
+
+    /**
+     * Obtains the course-module for a shared forum, or false if there isn't
+     * one, based on the idnumber.
+     * @param string $idnumber ID number (text, no slashes)
+     * @return object Course-module object (raw from database) or false if not
+     *   found / not a forum / etc
+     */
+    public static function get_shared_cm_from_idnumber($idnumber) {
+        global $DB;
+        return $DB->get_record_sql("
+SELECT
+    cm.*
+FROM
+    {course_modules} cm
+    INNER JOIN {modules} m ON m.id = cm.module
+    INNER JOIN {forumng} f ON f.id = cm.instance
+WHERE
+    cm.idnumber = ?
+    AND m.name = 'forumng'
+    AND f.shared = 1", array($idnumber));
+    }
+
+    /**
+     * Update the forumng_subscription table to incorporate the group subscription feature.
+     * @param bool $moodleupdate If this is true, the function is running as part of the
+     *   moodle upgrade.php for Sep 2010 release. In this case, the database queries must
+     *   not be changed and other code must work the same way (avoid calls to functions
+     *   except Moodle standard ones)
+     */
+    public function group_subscription_update($moodleupdate=false, $cmid=0) {
+        global $DB;
+        $transaction = $DB->start_delegated_transaction();
+
+        if ($cmid) {
+            // Only update one forum.
+            $optionalquery = "AND cm.id = ?";
+            $optionalqueryparams = array($cmid);
+        } else {
+            $optionalquery = '';
+            $optionalqueryparams = array();
+        }
+        // Query get the distinct forums
+        $sqlcount = "
+SELECT
+    COUNT(DISTINCT cm.id) AS totalnumberforum
+FROM
+    {forumng_subscriptions} fs
+    INNER JOIN {course_modules} cm on fs.forumngid = cm.instance
+    INNER JOIN {modules} m on cm.module = m.id
+    INNER JOIN {course} c on c.id = cm.course
+WHERE
+    discussionid IS NULL AND m.name = 'forumng' $optionalquery
+    AND (CASE WHEN c.groupmodeforce=1 THEN c.groupmode ELSE cm.groupmode END ) = 1";
+
+        // Query lists all subscriptions to forums that have separate groups.
+        $sqlsub = "
+SELECT
+    cm.id AS cmid, fs.id AS subid, fs.userid, fs.forumngid, c.id AS courseid, cm.groupingid
+FROM
+    {forumng_subscriptions} fs
+    INNER JOIN {course_modules} cm on fs.forumngid = cm.instance
+    INNER JOIN {modules} m on cm.module = m.id
+    INNER JOIN {course} c on c.id = cm.course
+WHERE
+    discussionid IS NULL and m.name = 'forumng' $optionalquery
+    AND (CASE WHEN c.groupmodeforce = 1 THEN c.groupmode ELSE cm.groupmode END ) = 1
+ORDER BY cm.id, fs.id";
+
+        // Query lists all groups that the user belongs to from the above query.
+        $sqlgroup = "
+SELECT
+    subs.subid, g.id AS groupid
+FROM
+    ($sqlsub) subs
+    INNER JOIN {groups_members} gm ON gm.userid = subs.userid
+    INNER JOIN {groups} g ON gm.groupid = g.id AND g.courseid = subs.courseid
+    LEFT JOIN {groupings_groups} gg ON gg.groupid = g.id AND subs.groupingid = gg.groupingid
+WHERE
+    (subs.groupingid = 0 or gg.id IS NOT NULL)
+ORDER BY
+    subs.cmid, subs.subid";
+        $rs = $DB->get_recordset_sql($sqlgroup, $optionalqueryparams);
+        $results = array();
+        foreach ($rs as $rec) {
+            if (!array_key_exists($rec->subid, $results)) {
+                $results[$rec->subid] = array();
+            }
+            $results[$rec->subid][] = $rec->groupid;
+        }
+        $rs->close();
+        $rs = $DB->get_recordset_sql($sqlsub, $optionalqueryparams);
+        $lastcmid = 0;
+        $forumcount = 1;
+        $totalforumcount = 0;
+        $totalforumcount = $DB->count_records_sql($sqlcount, $optionalqueryparams);
+
+        foreach ($rs as $rec) {
+            if ($lastcmid != $rec->cmid) {
+                if ($moodleupdate) {
+                    print "Updating the subscriptions $forumcount/$totalforumcount
+                            (current cmid:$rec->cmid) <br />";
+                }
+                $context = context_module::instance($rec->cmid);
+                $aagusers = get_users_by_capability($context,
+                    'moodle/site:accessallgroups', 'u.id');
+                $aagusers = $aagusers ? $aagusers : array();
+                $lastcmid = $rec->cmid;
+                $forumcount++;
+            }
+            if (!array_key_exists($rec->userid, $aagusers)) {
+                // Delete the whole forum subscription.
+                $DB->delete_records('forumng_subscriptions', array('id' => $rec->subid));
+                // Check if the subid exists in the results array.
+                if (array_key_exists($rec->subid, $results)) {
+                    foreach ($results[$rec->subid] as $groupid) {
+                        $subrecord = new StdClass;
+                        $subrecord->userid = $rec->userid;
+                        $subrecord->forumngid = $rec->forumngid;
+                        $subrecord->subscribed = 1;
+                        $subrecord->groupid = $groupid;
+                        $DB->insert_record('forumng_subscriptions', $subrecord);
+                    }
+                }
+            }
+        }
+        $transaction->allow_commit();
+    }
+
+    /*
+    * Call to check if search plugin exists.  If so, includes
+    * the library suppport, otherwise return false.
+    *
+    * @return bool True if OU search extension is installed.
+    */
+    public function oualerts_enabled() {
+        global $CFG;
+
+        if (file_exists($CFG->dirroot.'/report/oualerts/locallib.php')) {
+            @include_once($CFG->dirroot.'/report/oualerts/locallib.php');
+            return oualerts_enabled();
+        }
+        return false;
+    }
+
+    /**
+     * Call to check that system and forumng have tags enabled.
+     *
+     * @return bool True if system use tags set and forum tags field is set.
+     */
+    public function get_tags_enabled() {
+        global $CFG;
+
+        if ($CFG->usetags && core_tag_tag::is_enabled('mod_forumng', 'forumng')) {
+            return $this->forumfields->enabletags;
+        } else {
+            return false;
+        }
+        return false;
+    }
+
+    /**
+     * Call to check that user has the capability to tag discussions
+     * and tagging has been set up for system and forumng.
+     *
+     * @return bool if user can tag discussions.
+     */
+    public function can_tag_discussion() {
+
+        if ($this->get_tags_enabled()) {
+            return has_capability('mod/forumng:addtag', $this->get_context());
+        } else {
+            return false;
+        }
+        return false;
+    }
+
+    /**
+     * Call to get tags used within a forum.
+     *
+     * @param int $groupid
+     * @param Bool $showemptyset show any set tags for this forum
+     * @return boolean|multitype:
+     */
+    public function get_tags_used($groupid = self::ALL_GROUPS, $showemptyset = false) {
+        global $DB, $USER, $CFG;
+        require_once($CFG->dirroot . '/tag/lib.php');
+
+        if (!$this->get_tags_enabled()) {
+            return array();
+        } else {
+            // Build list of SQL conditions.
+            /*/////////////////////////////*/
+
+            // Correct forum.
+            $conditionparams = array();
+            $conditions = "fd.forumngid = ?";
+            $conditionparams[] = $this->forumfields->id;
+
+            // Correct tags.
+            $conditions .= " AND ti.component = 'mod_forumng'";
+            $conditions .= " AND ti.itemtype = 'forumng_discussions'";
+            $conditions .= " AND ti.contextid = ?";
+            $conditionparams[] = $this->get_context()->id;
+
+            // Group restriction.
+            if ($groupid) {
+                $conditions .= " AND (fd.groupid = ? OR fd.groupid IS NULL)";
+                $conditionparams[] = $groupid;
+            }
+
+            // View hidden posts.
+            if (!$this->can_view_hidden()) {
+                $now = time();
+                $conditions .= " AND fd.deleted = 0";
+                $conditions .= " AND (fd.timestart = 0 OR fd.timestart <= ?)" .
+                        " AND (fd.timeend = 0 OR fd.timeend > ?)";
+                $conditionparams[] = $now;
+                $conditionparams[] = $now;
+            }
+
+            // Forumng type read restrictions.
+            $typejoin = '';
+            if ($this->get_type()->has_unread_restriction()) {
+                list($restrictionsql, $restrictionparams) =
+                    $this->get_type()->get_unread_restriction_sql($this, $USER->id);
+            } else {
+                $restrictionsql = false;
+            }
+            if ($restrictionsql) {
+                $typejoin = "
+                    INNER JOIN {forumng_posts} fpfirst ON fpfirst.id = fd.postid
+                    INNER JOIN {forumng_posts} fplast ON fplast.id = fd.lastpostid
+                    INNER JOIN {forumng} f ON f.id = fd.forumngid
+                    INNER JOIN {course} c ON c.id = f.course
+                    INNER JOIN {course_modules} cm ON cm.instance = f.id AND cm.course = f.course
+                    INNER JOIN {modules} m ON m.id = cm.module";
+                        $conditions .= " AND m.name = 'forumng' AND $restrictionsql";
+                        $conditionparams = array_merge($conditionparams, $restrictionparams);
+            }
+
+            $rs = $DB->get_records_sql("
+                    SELECT t.*, count(t.id) AS count
+                      FROM {tag} t
+                INNER JOIN {tag_instance} ti ON t.id = ti.tagid
+                INNER JOIN {forumng_discussions} fd ON fd.id = ti.itemid
+                           $typejoin
+                     WHERE $conditions
+                  GROUP BY t.name, t.id
+                  ORDER BY t.name", $conditionparams);
+
+            $settags = self::get_set_tags($this->forumfields->id, $groupid);
+
+            foreach ($rs as $tag) {
+                $tag->displayname = strtolower(core_tag_tag::make_display_name($tag));
+                $tag->rawname = strtolower($tag->rawname);
+                if (array_key_exists($tag->id, $settags)) {
+                    $tag->label = get_string('settag_label', 'forumng');
+                }
+            }
+
+            if ($showemptyset) {
+                $needsort = false;
+                // Need to check to see whether any 'set' tags are in tag result set.
+                foreach ($settags as $key => $value) {
+                    if (!array_key_exists($key, $rs)) {
+                        // Create a standard class object.
+                        $obj = new stdClass();
+                        $obj->id = $key;
+                        $obj->label = get_string('settag_label', 'forumng');
+                        $obj->name = strtolower($value);
+                        $obj->rawname = $value;
+                        $obj->tagtype = 'default';
+                        $obj->count = 0;
+                        $obj->displayname = $value;
+                        $rs[$key] = $obj;
+                        $needsort = true;
+                    }
+                }
+
+                // Sort on displayname.
+                if ($needsort) {
+                    usort($rs, function($a, $b){
+                        return strcmp($a->displayname, $b->displayname);
+                    });
+                }
+            }
+
+            return $rs;
+        }
+    }
+
+    /**
+     * Call to get forum wide 'set' tags.
+     *
+     * @param int $forumid used to get context id
+     * @param int $groupid used to specify group that we require set tags for
+     * @param boolean $grouponly used to specify whether we are returning set tags for a single specified group
+     * @return array set tags for that forum
+     */
+    public static function get_set_tags($forumid, $groupid = self::ALL_GROUPS, $grouponly = false) {
+        global $DB, $CFG;
+        require_once($CFG->dirroot . '/tag/lib.php');
+
+        $forum = self::get_from_id($forumid, self::CLONE_DIRECT);
+        $forumid = $forum->get_id();
+        $context = $forum->get_context(true);
+
+        if (($groupid == self::ALL_GROUPS) || ($groupid == self::NO_GROUPS)) {
+            $groupid = 0;
+        }
+
+        $conditionparams = array();
+        $conditions = '';
+
+        if (($grouponly) && ($groupid)) {
+            $conditions .= " (ti.component = ? AND ti.itemtype = ? AND ti.contextid = ? AND ti.itemid = ?)";
+            $conditionparams[] = 'mod_forumng';
+            $conditionparams[] = 'groups';
+            $conditionparams[] = $context->id;
+            $conditionparams[] = $groupid;
+        } else {
+            // Check to see whether tags have been set at forumng level.
+            $conditions = "(ti.component = ? AND ti.itemtype = ? AND ti.contextid = ? AND ti.itemid = ?)";
+            $conditionparams[] = 'mod_forumng';
+            $conditionparams[] = 'forumng';
+            $conditionparams[] = $context->id;
+            $conditionparams[] = $forumid;
+            if ($groupid) {
+                $conditions .= " OR (ti.component = ? AND ti.itemtype = ? AND ti.contextid = ? AND ti.itemid = ?)";
+                $conditionparams[] = 'mod_forumng';
+                $conditionparams[] = 'groups';
+                $conditionparams[] = $context->id;
+                $conditionparams[] = $groupid;
+            }
+        }
+
+        $rs = $DB->get_records_sql("
+            SELECT DISTINCT t.*
+              FROM {tag} t
+        INNER JOIN {tag_instance} ti
+                ON t.id = ti.tagid
+             WHERE $conditions
+          ORDER BY t.name", $conditionparams);
+
+        // Create tags associative array with tagid as key and tag name as value.
+        $tags = array();
+        foreach ($rs as $tag) {
+            $tags[$tag->id] = strtolower(core_tag_tag::make_display_name($tag, false));
+        }
+
+        return $tags;
+
+    }
+
+    /**
+     * Sets 'Set' tags for groups for the forum.
+     * Necessary to use this rather than core tag lib as that does not deal with context
+     * and as group item ids can be the same that is an issue
+     * Also can only have 1 unique group/tag/user record
+     * @param int $forumid forum table id
+     * @param int $groupid groups table id
+     * @param array $tags array of tag rawnames e.g. Fish, frog
+     */
+    public static function set_group_tags($forumid, $groupid, $tags) {
+        global $DB, $CFG, $USER;
+
+        $forum = self::get_from_id($forumid, self::CLONE_DIRECT);
+        $context = $forum->get_context(true);
+
+        $tagcollid = core_tag_area::get_collection('mod_forumng', 'groups');
+
+        $transaction = $DB->start_delegated_transaction();
+        // Get existing tags used.
+        $settags = array();
+        $taginstances = $DB->get_records_sql("
+                SELECT DISTINCT t.*, ti.id as instanceid
+                  FROM {tag} t
+            INNER JOIN {tag_instance} ti
+               ON t.id = ti.tagid
+                 WHERE ti.component = ? AND ti.itemtype = ? AND ti.contextid = ? AND ti.itemid = ?",
+                array('mod_forumng', 'groups', $context->id, $groupid));
+        // Delete instances any not in new tags (note tag records not deleted as cleaned in cron).
+        $tistodelete = array();
+        foreach ($taginstances as $tinstance) {
+            if (!in_array($tinstance->rawname, $tags)) {
+                $tistodelete[] = $tinstance->instanceid;
+            } else {
+                // Store existing tag instance used.
+                $settags[$tinstance->instanceid] = $tinstance->rawname;
+            }
+        }
+        if ($tistodelete) {
+            list($delsql, $delparams) = $DB->get_in_or_equal($tistodelete);
+            $DB->delete_records_select('tag_instance', "id $delsql", $delparams);
+        }
+        // Add/get new tag records.
+        $existingtags = core_tag_tag::get_by_name_bulk($tagcollid, $tags, '*');
+        // Normalize tags passed so can match to existing tags array.
+        $normaltags = core_tag_tag::normalize($tags);
+        // Add tag instances (where needed).
+        $ordering = 0;
+        foreach ($normaltags as $rawname => $name) {
+            if (in_array($rawname, $settags)) {
+                // Pre-existing instance, skip.
+                $ordering++;
+                continue;
+            }
+            if (!array_key_exists($name, $existingtags) || empty($existingtags[$name])) {
+                // Need to add tag, use core method.
+                core_tag_tag::add_item_tag('mod_forumng', 'groups', $groupid, $context, $rawname);
+            } else {
+                // Need to add tag instance only, cannot use core for this.
+                $tagid = $existingtags[$name]->id;
+                $tag_instance_object = new stdClass();
+                $tag_instance_object->tagid = $tagid;
+                $tag_instance_object->component = 'mod_forumng';
+                $tag_instance_object->itemid = $groupid;
+                $tag_instance_object->itemtype = 'groups';
+                $tag_instance_object->contextid = $context->id;
+                $tag_instance_object->ordering = $ordering;
+                $tag_instance_object->timecreated = time();
+                $tag_instance_object->timemodified = $tag_instance_object->timecreated;
+                $tag_instance_object->tiuserid = self::get_group_taginstance_userid($groupid, $tagid);
+
+                $DB->insert_record('tag_instance', $tag_instance_object);
+            }
+            $ordering++;
+        }
+        $DB->commit_delegated_transaction($transaction);
+    }
+
+    /**
+     * Check user can save a new group tag instance as these have a unique key
+     * If not, will use - admin user (0), guest user (1), other admin user (2+)
+     * @param int $groupid
+     * @param int $tagid
+     * @param int $start default -1 for current user.
+     * @return int user id
+     * @throws moodle_exception If out of users
+     */
+    private static function get_group_taginstance_userid($groupid, $tagid, $start = -1) {
+        global $DB, $USER;
+        $userid = $USER->id;
+        $nexttry = 0;
+        if ($start == 0) {
+            $userid = get_admin()->id;
+            $nexttry = 1;
+        } else if ($start == 1) {
+            $userid = guest_user()->id;
+            $nexttry = 2;
+        } else if ($start >= 2) {
+            $admins = get_admins();
+            if (count($admins) < $start) {
+                throw new moodle_exception('Cannot add tag instance - duplicate value, max possible reached.');
+            }
+            $keys = array_keys($admins);// Get keys (user id's).
+            $userid = $keys[($start - 1)];
+            $nexttry = $start;
+            $nexttry++;
+        }
+
+        if (!$DB->record_exists('tag_instance', array('itemtype' => 'groups', 'itemid' => $groupid,
+                'tiuserid' => $userid, 'tagid' => $tagid))) {
+            // No existing record, safe to proceed.
+            return $userid;
+        }
+        // Try and find another userid.
+        return self::get_group_taginstance_userid($groupid, $tagid, $nexttry);
+    }
+
+}
+
+/**
+ * This is a sketchy stub for $PAGE to stop it doing the init call, while allowing it to do
+ * require_js. Used in print_js.
+ *
+ * This approach is fragile and totally evil, but it is better to be fragile and evil than to
+ * duplicate the code (i.e. if this breaks there will most likely be a PHP warning, whereas
+ * duplicated code might go wrong silently as the PHP and JS become out of sync).
+ */
+class mod_forumng_filemanager_evilhack {
+    /**
+     * @var moodle_page
+     */
+    public $realpage;
+    public $requires;
+    public $extraarguments, $extraarguments2;
+    public $context, $course, $theme;
+
+    public function __construct() {
+        global $PAGE;
+        $this->realpage = $PAGE;
+        $this->context = $PAGE->context;
+        $this->course = $PAGE->course;
+        $this->theme = $PAGE->theme;
+        $PAGE = $this;
+        $this->requires = new mod_forumng_filemanager_evilhack_requires($this);
+    }
+
+    public function return_to_goodness() {
+        global $PAGE;
+        $PAGE = $this->realpage;
+    }
+}
+
+/**
+ * This is a sketchy stub for ->requires. Used in print_js.
+ */
+class mod_forumng_filemanager_evilhack_requires {
+    private $evilhack;
+
+    public function __construct($evilhack) {
+        $this->evilhack = $evilhack;
+    }
+
+    public function js_init_call($function, array $extraarguments = null,
+            $ondomready = false, array $module = null) {
+        if (!$module) {
+            if (!preg_match('~^M\.editor_tinymce\.~', $function)) {
+                throw new coding_exception('This needs changing, unsupported function');
+            }
+            $module = array('name'=>'editor_tinymce', 'fullpath'=>'/lib/editor/tinymce/module.js',
+                    'requires'=>array());
+        }
+        $this->js_module($module);
+        if ($this->evilhack->extraarguments) {
+            // Allows to store arguments for up to 2 function calls
+            $this->evilhack->extraarguments2 = $extraarguments;
+        } else {
+            $this->evilhack->extraarguments = $extraarguments;
+        }
+    }
+
+    public function find_module($component) {
+        return $this->evilhack->realpage->requires->find_module($component);
+    }
+
+    public function get_loaded_modules() {
+        return $this->evilhack->realpage->requires->get_loaded_modules();
+    }
+
+    public function js_module($module) {
+        $this->evilhack->realpage->requires->js_module($module);
+    }
+
+    public function js($url, $inhead=false) {
+        $this->evilhack->realpage->requires->js($url, $inhead);
+    }
+}
+
+/**
+ * Override of context just so that we can access the protected
+ * construct function (wtf).
+ */
+abstract class mod_forumng_context_access extends context {
+    /**
+     * Calls parent create_instance_from_record function.
+     * @param object $record DB record
+     * @return context Context object
+     */
+    public static function create_instance_from_record_public($record) {
+        return self::create_instance_from_record($record);
+    }
+}
diff --git a/mod/forumng/mod_forumng_cron.php b/mod/forumng/mod_forumng_cron.php
new file mode 100644
index 0000000..6391b59
--- /dev/null
+++ b/mod/forumng/mod_forumng_cron.php
@@ -0,0 +1,969 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once(dirname(__FILE__).'/mod_forumng.php');
+require_once(dirname(__FILE__).'/mod_forumng_mail_list.php');
+require_once(dirname(__FILE__).'/mod_forumng_digest_list.php');
+
+/**
+ * Utility class handling all cron tasks.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_cron {
+    const DEBUG_VIEW_EMAILS = false;
+
+    /** Divider used between sections of email */
+    const EMAIL_DIVIDER =
+      "---------------------------------------------------------------------\n";
+
+
+    public static function delete_old_posts() {
+        global $CFG, $DB;
+
+        // Check if deletion is turned off
+        if (empty($CFG->forumng_permanentdeletion)) {
+            return;
+        }
+
+        mtrace('Beginning forum deleted/edit message cleanup...');
+
+        // Work out how long ago things have to have been 'deleted' before we
+        // permanently delete them
+        $deletebefore = time() - $CFG->forumng_permanentdeletion;
+
+        // Handle all posts which were deleted (that long ago) or which are in
+        // discussions which were deleted (that long ago)
+        $mainparams = array();
+        $mainquery = "
+FROM
+    {forumng_posts} fp
+    INNER JOIN {forumng_discussions} fd ON fd.id = fp.discussionid
+    INNER JOIN {forumng} f ON fd.forumngid = f.id
+    INNER JOIN {course_modules} cm ON cm.instance = f.id AND cm.module =
+        (SELECT id FROM {modules} WHERE name='forumng')
+    INNER JOIN {context} x on x.instanceid=cm.id AND x.contextlevel=?
+WHERE
+    (fp.deleted<>0 AND fp.deleted<? AND
+    NOT EXISTS (SELECT id from {forumng_posts} where parentpostid = fp.id and deleted = 0))
+    OR (fp.oldversion<>0 AND fp.modified<?)
+    OR (fd.deleted<>0 AND fd.deleted<?)";
+        $idquery = "SELECT fp.id $mainquery ";
+        $mainparams[] = CONTEXT_MODULE;
+        $mainparams[] = $deletebefore;
+        $mainparams[] = $deletebefore;
+        $mainparams[] = $deletebefore;
+
+        $before = microtime(true);
+        mtrace('Message search: ', '');
+        $count = $DB->count_records_sql("SELECT COUNT(1) $mainquery", $mainparams);
+        mtrace(round(microtime(true)-$before, 1) .'s');
+        if ($count == 0) {
+            mtrace("No old deleted / edited messages to clean up.");
+        } else {
+            mtrace("Permanently deleting $count old deleted / edited messages.");
+        }
+
+        if ($count) {
+            $before = microtime(true);
+            mtrace('Database post deletion: ', '');
+            $transaction = $DB->start_delegated_transaction();
+
+            // Delete all ratings
+            $DB->execute("DELETE FROM {forumng_ratings} WHERE postid IN ($idquery)",
+                    $mainparams);
+
+            // Delete all read post records.
+            $DB->execute("DELETE FROM {forumng_read_posts} WHERE postid IN ($idquery)", $mainparams);
+
+            // Find all messages...
+            $rs = $DB->get_recordset_sql("
+SELECT
+    fp.id AS postid, x.id AS contextid, fp.attachments
+$mainquery", $mainparams);
+
+            // Delete all attachments - this is very very slow (at least 1 query
+            // per post being deleted), it could be done faster in the database
+            // but I thought it might be safer to use the API
+            $fs = get_file_storage();
+            foreach ($rs as $attachmentrecord) {
+                // Delete both attachments & message attachments
+                if ($attachmentrecord->attachments) {
+                    // Only if marked as existing
+                    $fs->delete_area_files($attachmentrecord->contextid,
+                            'mod_forumng', 'attachment', $attachmentrecord->postid);
+                }
+                // Always (there is no marker for this one)
+                $fs->delete_area_files($attachmentrecord->contextid,
+                        'mod_forumng', 'message', $attachmentrecord->postid);
+            }
+            $rs->close();
+
+            // Delete all posts
+            mod_forumng_utils::update_with_subquery_grrr_mysql(
+                    "DELETE FROM {forumng_posts} WHERE id %'IN'%",
+                    $idquery, $mainparams);
+
+            // Now delete all discussions
+            $DB->execute(
+                    "DELETE FROM {forumng_discussions} WHERE deleted<>0 AND deleted<?",
+                    array($deletebefore));
+
+            $transaction->allow_commit();
+            mtrace(round(microtime(true)-$before, 1) .'s');
+        }
+    }
+
+    /**
+     * @param string $text Text to output, or none if you only want to check
+     *   the value
+     * @param string $lf Set to '' if you don't want a linefeed
+     * @return bool True if debug output is enabled
+     */
+    public static function debug($text = '', $lf = "\n") {
+        static $checked = false, $debug;
+        if (!$checked) {
+            $debug = debugging('', DEBUG_DEVELOPER);
+        }
+        if (!$debug) {
+            return false;
+        }
+        if ($text) {
+            mtrace($text, $lf);
+        }
+        return true;
+    }
+
+    public static function email_normal() {
+        global $USER, $CFG, $PERF;
+
+        $exceptioncount = 0;
+
+        // Obtain information about all mails that are due for sending
+        mtrace('Email processing:');
+        $before = microtime(true);
+        if (!empty($PERF->dbqueries)) {
+            $beforequeries = $PERF->dbqueries;
+        }
+        mtrace('Initial query: ', '');
+        $list = new mod_forumng_mail_list(true);
+        mtrace(round(microtime(true)-$before, 1) .'s');
+
+        // Cumulative time spent actually sending emails
+        $mailtime = 0;
+        $totalemailcount = 0;
+
+        // Forum loop
+        while ($list->next_forum($forum, $cm, $context, $course)) {
+            self::debug("DEBUG: Forum " . $forum->get_name() .
+                    " on course {$course->shortname} " .
+                    "(cmid {$cm->id} contextid {$context->id})");
+
+            // We had problems with cron running out of memory when it sends
+            // a lot of emails. On the basis that the PHP garbage collector
+            // might have 'issues', perhaps it may help to call it manually.
+            gc_collect_cycles();
+
+            // Set up course details
+            // Note: This code is a bit sketchy; borrowed from cron_setup_user
+            $PAGE = new moodle_page();
+            $PAGE->set_course($course);
+
+            // Count posts and emails just for logging
+            $postcount = 0;
+            $emailcount = 0;
+
+            // Get subscribers to forum
+            try {
+                $subscribers = $forum->get_subscribers();
+                self::debug("DEBUG: Subscribers before filter " . count($subscribers), '');
+                self::email_filter_subscribers($course, $cm, $forum, $subscribers, false);
+                self::debug(", after " . count($subscribers));
+                if (count($subscribers)==0) {
+                    continue;
+                }
+            } catch (coding_exception $e) {
+                // If an error occurs while getting subscribers, continue
+                // to next forum
+                mtrace(' Exception while getting subscribers for forum ' .
+                        $forum->get_id());
+                mtrace($e->__toString());
+                continue;
+            }
+
+            while ($list->next_discussion($discussion)) {
+                self::debug("DEBUG: Discussion " . $discussion->get_subject() .
+                        ' (' . $discussion->get_id() . ')');
+
+                // Evaluate list of users based on this discussion (which holds
+                // group info). Organise list by language, timezone and email
+                // type.
+                $langusers = array();
+                foreach ($subscribers as $subscriber) {
+                    // Conditions for each subscriber to get this discussion
+                    if (self::subscriber_receives_discussion(
+                        $forum, $discussion, $subscriber)) {
+                        $oldlang = $USER->lang;
+                        $USER->lang = $subscriber->lang;
+                        $lang = current_language();
+                        $USER->lang = $oldlang;
+                        $langusers[$lang][$subscriber->timezone]
+                            [$subscriber->emailtype][$subscriber->id] =
+                            $subscriber;
+                    }
+                }
+                if (self::debug()) {
+                    $debugcount = 0;
+                    foreach ($langusers as $lang => $tzusers) {
+                        foreach ($tzusers as $timezone => $typeusers) {
+                            foreach ($typeusers as $emailtype => $users) {
+                                mtrace("DEBUG: Subscribers for lang [$lang] " .
+                                        "tz [$timezone] type [$emailtype]: " .
+                                        count($users));
+                                $debugcount += count($users);
+                            }
+                        }
+                    }
+                    mtrace("DEBUG: Total discussion subscribers: $debugcount");
+                }
+
+                while ($list->next_post($post, $inreplyto)) {
+                    if (self::debug()) {
+                        mtrace("DEBUG: Post " . $post->get_id(), '');
+                        $debugcount = $emailcount;
+                    }
+                    try {
+                        $from = $post->get_user();
+
+                        // These loops are intended so that we generate identical
+                        // emails once only, and can then send them in batches
+                        foreach ($langusers as $lang => $tzusers) {
+                            foreach ($tzusers as $timezone => $typeusers) {
+                                foreach ($typeusers as $emailtype => $users) {
+
+                                    // We get both plaintext and html versions.
+                                    // The html version will be blank if set to
+                                    // plain text mode.
+                                    $post->build_email($inreplyto, $subject,
+                                        $plaintext, $html, $emailtype & 1,
+                                        $emailtype & 2, $emailtype & 4, $lang,
+                                        $timezone);
+
+                                    if ($post->get_asmoderator() == mod_forumng::ASMODERATOR_ANON) {
+                                        $from->maildisplay = false;
+                                        $from->firstname = get_string('moderator', 'forumng');
+                                        $from->lastname = '';
+                                    }
+
+                                    $beforemail = microtime(true);
+                                    if ($CFG->forumng_usebcc) {
+                                        // Use BCC to send all emails at once
+                                        $emailcount += self::email_send_bcc(
+                                            $users, $from, $subject,
+                                            $html, $plaintext,
+                                            "post " . $post->get_id(),
+                                            $emailtype & 1, $emailtype & 4);
+                                    } else {
+                                        // Loop through subscribers, sending mail to
+                                        // each one
+                                        foreach ($users as $mailto) {
+                                            self::email_send($mailto, $from, $subject,
+                                                $plaintext, $html);
+                                            $emailcount++;
+                                        }
+                                    }
+                                    $mailtime += microtime(true) - $beforemail;
+                                }
+                            }
+                        }
+                        // Reset exception count; while some posts are
+                        // successful, we'll keep trying to send them out
+                        $exceptioncount = 0;
+                    } catch (Exception $e) {
+                        mtrace(' Exception while sending post ' . $post->get_id());
+                        mtrace($e->__toString());
+                        $exceptioncount++;
+
+                        if ($exceptioncount > 100) {
+                            throw new moodle_exception('error_system', 'forumng', '',
+                                'Too many post exceptions in a row, aborting');
+                        }
+                    }
+
+                    $postcount++;
+                    if (self::debug()) {
+                        mtrace(", sent " . ($emailcount - $debugcount) .
+                                " emails");
+                    }
+                }
+            }
+
+            // Trace and log information
+            $counts = "$postcount posts ($emailcount emails) to " .
+                count($subscribers) . " subscribers";
+            mtrace("Forum ".$forum->get_name() .
+                ": sent $counts");
+            $params = array('other' => array('type' => 'sub', 'count' => $counts),
+                'context' => $forum->get_context());
+            $event = \mod_forumng\event\mail_sent::create($params);
+            $event->trigger();
+            $totalemailcount += $emailcount;
+        }
+        $queryinfo = '';
+        if (!empty($PERF->dbqueries)) {
+            $queryinfo = ', ' . ($PERF->dbqueries - $beforequeries) .
+              ' queries';
+        }
+        $totalpostcount = $list->get_post_count_so_far();
+        $totaltime = microtime(true)-$before;
+        mtrace("Email processing ($totalpostcount new posts, $totalemailcount new emails) " .
+                "complete, total: " . round($totaltime, 1) . 's (mail sending ' .
+                round($mailtime, 1) . 's = ' . round(100.0 * $mailtime / $totaltime, 1) . '%)' .
+                $queryinfo);
+    }
+
+    /**
+     * Shared logic that works out whether a particular subscriber receives a
+     * discussion or not.
+     * @param mod_forumng $forum Forum
+     * @param mod_forumng_discussion $discussion Discussion
+     * @param object $subscriber Subscriber
+     */
+    private static function subscriber_receives_discussion($forum, $discussion, $subscriber) {
+        // Did they subscribe specifically to this discussion?
+        $explicitsubscribed = array_key_exists(
+                $discussion->get_id(), $subscriber->discussionids);
+
+        // Did they subscribe to the group this discussion belongs to
+        $explicitsubscribedtogroup = in_array($discussion->get_group_id(),
+                $subscriber->groupids);
+
+        $groupid = $discussion->get_group_id();
+        $visiblegroups = $forum->get_group_mode() == VISIBLEGROUPS;
+
+        // Conditions for each subscriber to get this discussion
+        $result =
+                // 1. Subscribed to whole forum, or specifically to
+                // this discussion, or specifically to this group
+                ($subscriber->wholeforum || $explicitsubscribed ||
+                    $explicitsubscribedtogroup) &&
+
+                // 2. The discussion has no group id, or they
+                // belong to the group, or they can access all groups,
+                // or it's visible-groups
+                (!$groupid || $subscriber->accessallgroups || $visiblegroups ||
+                    array_key_exists($groupid, $subscriber->groups)) &&
+
+                // 3. Forum type allows user to view discussion
+                $forum->get_type()->can_view_discussion(
+                    $discussion, $subscriber->id);
+
+        return $result;
+    }
+
+    public static function email_digest() {
+        global $CFG, $PERF;
+
+        // Build current digest.
+        mtrace("Beginning forum digest processing...");
+        if (!empty($PERF->dbqueries)) {
+            $beforequeries = $PERF->dbqueries;
+        }
+
+        $before = microtime(true);
+        mtrace('Initial query: ', '');
+        $list = new mod_forumng_digest_list(true);
+        mtrace(round(microtime(true)-$before, 1) .'s');
+
+        $userdigests = array();
+        $oldcourse = null;
+
+        // Forum loop.
+        while ($list->next_forum($forum, $cm, $context, $course)) {
+            self::debug("DEBUG: Forum " . $forum->get_name() .
+                    " on course {$course->shortname} " .
+                    "(cmid {$cm->id} contextid {$context->id})");
+
+            if (!$oldcourse || ($course->id != $oldcourse->id)) {
+                // Finish off and clear users.
+                if ($oldcourse) {
+                    self::digest_finish_course($oldcourse, $userdigests);
+                }
+                // Set up new course details.
+                // Note: This code is a bit sketchy; borrowed from cron_setup_user.
+                $PAGE = new moodle_page();
+                $PAGE->set_course($course);
+                $oldcourse = clone($course);
+            }
+
+            // Count posts just for logging.
+            $postcount = 0;
+
+            // Get subscribers to forum.
+            $subscribers = $forum->get_subscribers();
+            self::debug("DEBUG: Subscribers before filter " . count($subscribers), '');
+            self::email_filter_subscribers($course, $cm, $forum, $subscribers, true);
+            self::debug(", after " . count($subscribers));
+            if (count($subscribers)==0) {
+                continue;
+            }
+
+            while ($list->next_discussion($discussion)) {
+                self::debug("DEBUG: Discussion " . $discussion->get_subject() .
+                        ' (' . $discussion->get_id() . ')');
+
+                // Evaluate list of users based on this discussion (which holds
+                // group info). Organise list by language, timezone and email
+                // type.
+                $discussionusers = array();
+                foreach ($subscribers as $subscriber) {
+                    if (self::subscriber_receives_discussion(
+                        $forum, $discussion, $subscriber)) {
+                        $discussionusers[$subscriber->id] = $subscriber;
+                    }
+                }
+
+                while ($list->next_post($post, $inreplyto)) {
+                    // Loop through all digest users.
+                    foreach ($discussionusers as $user) {
+                        // Add to digest. (This will set up the user's
+                        // digest if they don't already have one).
+                        self::digest_add_post_for_user($user, $userdigests,
+                            $post, $inreplyto, $discussion, $forum, $cm,
+                            $course, $context);
+                    }
+
+                    $postcount++;
+                }
+            }
+        }
+
+        if ($oldcourse) {
+            self::digest_finish_course($oldcourse, $userdigests);
+        }
+
+        $queryinfo = '';
+        if (!empty($PERF->dbqueries)) {
+            $queryinfo = ', ' . ($PERF->dbqueries - $beforequeries) .
+              ' queries';
+        }
+        $totalpostcount = $list->get_post_count_so_far();
+        mtrace("Digest processing ($totalpostcount new digest posts) complete, total: "
+            . round(microtime(true)-$before, 1) . 's' . $queryinfo);
+    }
+
+    /**
+     * Called at end of processing a single forum. Updates the digest records
+     * to add footer information for each user who had messages from the forum.
+     * @param array $userdigests Array of userid => digest info
+     * @param mod_forumng $forum
+     * @param object $cm
+     */
+    private static function digest_end_forum(&$userdigests, $forum, $cm) {
+        global $CFG;
+
+        $canunsubscribe = mod_forumng::SUBSCRIPTION_FORCED
+            != $forum->get_effective_subscription_option();
+        foreach ($userdigests as $digest) {
+            // If there was a message from this forum...
+            if ($digest->forumngid === $forum->get_id()) {
+                $digest->html .= "\n<div class='forumng-email-unsubscribe'><small>";
+                $digest->text .= "\n";
+                if ($canunsubscribe) {
+                    $digest->html .=
+                        "<a href='$CFG->wwwroot/mod/forum/subscribe.php?" .
+                        $forum->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                        get_string("unsubscribe", "forumng") . "</a>";
+                    $digest->text .= get_string("unsubscribe", "forumng") .
+                        ": $CFG->wwwroot/mod/forum/subscribe.php" .
+                        $forum->get_link_params(mod_forumng::PARAM_PLAIN);
+                } else {
+                    $digest->html .= get_string("everyoneissubscribed", "forumng");
+                    $digest->text .= get_string("everyoneissubscribed", "forumng");
+                }
+                $digest->html .= '</small></div>';
+                $digest->text .= "\n\n";
+            }
+        }
+    }
+
+    /**
+     * Updates the in-memory digest records to add a new post to the given
+     * user's digests.
+     * @param object $user User object (must include special ->emailtype, etc)
+     * @param array $userdigests Array of user id => digest information object
+     * @param mod_forumng_post $post Post object
+     * @param mod_forumng_post $inreplyto Parent post
+     * @param mod_forumng_discussion $discussion Discus
+     * @param mod_forumng $forum
+     * @param object $cm
+     * @param object $course
+     * @param object $context
+     */
+    private static function digest_add_post_for_user(&$user, &$userdigests,
+        &$post, &$inreplyto, &$discussion, &$forum, &$cm, &$course, &$context) {
+        global $CFG;
+
+        // Set up digest for user if required
+        if (!array_key_exists($user->id, $userdigests)) {
+            $userdigests[$user->id] = new StdClass;
+            $userdigests[$user->id]->discussionid = -1; // So we do header next
+            $userdigests[$user->id]->user = $user;
+            $userdigests[$user->id]->forumngid = -1;
+
+            // Get header text
+            $headerdata = new object();
+            $headerdata->sitename = format_string($course->fullname, true);
+            $headerdata->userprefs = $CFG->wwwroot . '/user/edit.php?id=' .
+                $user->id . '&amp;course=' . $course->id;
+
+            $userdigests[$user->id]->text = get_string('digestmailheader',
+                'forumng', $headerdata) . "\n\n";
+
+            // Get header HTML
+            $html = "<body id='forumng-email'>\n";
+            $headerdata->userprefs = '<a target="_blank" href="' .
+                $headerdata->userprefs . '">' .
+                get_string('digestmailprefs', 'forumng') . '</a>';
+            $html .= '<div class="forumng-emailheader"><p>' .
+                get_string('digestmailheader', 'forumng', $headerdata).
+                '</p></div><hr size="1" noshade="noshade" />';
+            $userdigests[$user->id]->html = $html;
+
+            // Get email subject
+            $userdigests[$user->id]->subject = get_string('digestmailsubject',
+                'forumng', format_string($course->shortname, true));
+        }
+
+        // New forum?
+        if ($userdigests[$user->id]->forumngid != $forum->get_id()) {
+            $userdigests[$user->id]->forumngid = $forum->get_id();
+        }
+
+        // Is this a new discussion?
+        if ($userdigests[$user->id]->discussionid != $discussion->get_id()) {
+            $strforums = get_string('forums', 'forumng');
+
+            // Per-discussion header (text mode)
+            $text = "\n \n";
+            $text .= '=====================================================================';
+            $text .= "\n \n";
+            $text .= "$course->shortname -> $strforums -> " .
+                    format_string($forum->get_name(), true);
+            if ($discussion->get_subject(false) !== $forum->get_name()) {
+                $text  .= " -> " . format_string($discussion->get_subject(false), true);
+            }
+            $text .= "\n";
+
+            // HTML mode
+            $html = '<hr size="1" noshade="noshade" />';
+            $html .= "<div class='forumng-breadcrumbs'>" .
+                    "<a target='_blank' href='$CFG->wwwroot/course/view.php?" .
+                    "id=$course->id'>$course->shortname</a> -> " .
+                    "<a target='_blank' href='$CFG->wwwroot/mod/forumng/index.php?" .
+                    "id=$course->id'>$strforums</a> -> " .
+                    "<a target='_blank' href='$CFG->wwwroot/mod/forumng/view.php?" .
+                    $forum->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                    format_string($forum->get_name(), true)."</a>";
+            if ($discussion->get_subject(false) !== $forum->get_name()) {
+                $html .= " -> <a target='_blank' href='$CFG->wwwroot/mod/forumng/discuss.php?" .
+                        $discussion->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                        format_string($discussion->get_subject(false), true) . "</a>";
+            }
+            $html .= '</div>';
+
+            $userdigests[$user->id]->text .= $text;
+            $userdigests[$user->id]->html .= $html;
+            $userdigests[$user->id]->discussionid = $discussion->get_id();
+        }
+
+        // Get both plaintext and html versions (and subject).
+        // The html version will be blank if set to
+        // plain text mode.
+        $post->build_email($inreplyto, $subject,
+            $text, $html, $user->emailtype & 1,
+            $user->emailtype & 2, $user->emailtype & 4,
+            $user->lang, $user->timezone, true);
+        $userdigests[$user->id]->text .= $text;
+        $userdigests[$user->id]->html .= $html;
+    }
+
+    /**
+     * Actually sends out digest emails to all users (who got something to say)
+     * because we are moving on to process the next course.
+     */
+    private static function digest_finish_course(&$course, &$userdigests) {
+        global $CFG;
+
+        // Loop around all digests and send them out
+        foreach ($userdigests as $digest) {
+            self::email_send($digest->user, $CFG->noreplyaddress,
+                $digest->subject, $digest->text, $digest->html);
+        }
+
+        // Trace and log information
+        $counts = count($userdigests) . ' digests';
+        mtrace("Course ".$course->shortname . ": sent $counts");
+        $params = array('other' => array('type' => 'digest', 'count' => $counts),
+                'context' => context_course::instance($course->id));
+        $event = \mod_forumng\event\mail_sent::create($params);
+        $event->trigger();
+
+        // Clear users ready for new course
+        $userdigests = array();
+    }
+
+    /**
+     * Filters a list of subscribers to remove those who can't receive email
+     * etc., and adds extra information to each one.
+     * @param object $course Course
+     * @param object $cm Course-module
+     * @param array $subscribers List of subscribers
+     * @param bool $digest True if we want digest recipients (only) instead of
+     *   non-digest recipients
+     */
+    private static function email_filter_subscribers($course, $cm, $forum,
+            &$subscribers, $digest=false) {
+        foreach ($subscribers as $subscriber) {
+            // Exclude anyone who has mail disabled for various reasons,
+            // or is/is not on digest.
+            // Note that the mail checks here duplicate checks in
+            // email_to_user; this probably makes it slightly more
+            // efficient, but is really there because if bcc is enabled
+            // we don't go through email_to_user at all.
+            if ($subscriber->emailstop || $subscriber->deleted ||
+                $subscriber->auth=='nologin' ||
+                (($digest && !$subscriber->maildigest) ||
+                (!$digest && $subscriber->maildigest)) ||
+                over_bounce_threshold($subscriber)) {
+                unset($subscribers[$subscriber->id]);
+                continue;
+            }
+
+            // Add information about groups for this user.
+            $subscriber->groups = groups_get_all_groups(
+                $course->id, $subscriber->id, $cm->groupingid, 'g.id');
+            $subscriber->groups = $subscriber->groups
+                ? $subscriber->groups : array();
+
+            // Track whether users are allowed to view full names
+            $subscriber->viewfullnames = has_capability(
+                'moodle/site:viewfullnames', $forum->get_context(),
+                $subscriber->id);
+            $subscriber->canreply = has_capability(
+                'mod/forumng:replypost', $forum->get_context(),
+                $subscriber->id);
+            // Note I don't think the Reply capability is sufficient
+            // check here, could be restricted by forum type. Maybe it
+            // will do for now.
+
+            // Categorise subscriber by the type of email. There are
+            // eight types as determined by the two flags above, plus
+            // HTML vs standard email.
+            $subscriber->emailtype =
+                ($subscriber->viewfullnames ? 4 : 0) +
+                ($subscriber->canreply ? 2 : 0) +
+                ($subscriber->mailformat ? 1 : 0);
+        }
+    }
+
+    /**
+     * Sends an email. (Wrapper around email_to_user.)
+     * @param object $to User who receives email
+     * @param mixed $from User or string who sent email
+     * @param string $subject Subject line
+     * @param string $text Text of email
+     * @param string $html HTML of email or '' if plaintext only
+     */
+    private static function email_send($to, $from, $subject, $text, $html) {
+        global $CFG;
+        if (self::DEBUG_VIEW_EMAILS) {
+            print "<div style='margin:4px; border:1px solid blue; padding:4px;'>";
+            print "<h3>Email sent</h3>";
+            print "<ul><li>From: <strong>" . (is_object($from) ? $from->email : $from) .
+                "</strong></li>";
+            print "<li>To: <strong>$to->email</strong></li>";
+            print "<li>Subject: <strong>" . htmlspecialchars($subject) .
+                "</strong></li></ul>";
+            print $html;
+            print "<pre style='border-top: 1px solid blue; padding-top: 4px; margin-top:4px;'>";
+            print htmlspecialchars($text);
+            print "</pre></div>";
+            return;
+        }
+        email_to_user($to, $from, $subject, $text, $html, '', '',
+            $CFG->forumng_replytouser);
+    }
+
+    /**
+     * Sends an email to lots of people using BCC.
+     * @param array $targets List of target user objects (email, name fields
+     *   required)
+     * @param mixed $from User or string who sent email
+     * @param string $subject Subject of email
+     * @param string $html HTML version of email (blank if none)
+     * @param string $text Plain text version of email
+     * @param string $showerrortext If set, mtraces errors and includes this
+     *   extra string about where the error was.
+     * @param bool $ishtml If true, email is in HTML format
+     * @param bool $viewfullnames If true, these recipients have access to
+     *   see the full name
+     * @return int Number of emails sent
+     */
+    private static function email_send_bcc($targets, $from, $subject, $html, $text,
+        $showerrortext, $ishtml, $viewfullnames) {
+        if (self::DEBUG_VIEW_EMAILS) {
+            print "<div style='border:1px solid blue; padding:4px;'>";
+            print "<h3>Bulk email sent</h3>";
+            print "<ul><li>To: ";
+            $first = true;
+            foreach ($targets as $target) {
+                if ($first) {
+                    $first = false;
+                } else {
+                    print ', ';
+                }
+                print "<strong>$target->email</strong>";
+            }
+            print "</li><li>Subject: <strong>" . htmlspecialchars($subject) .
+                "</strong></li>";
+            print $html;
+            print "<pre style='border-top: 1px solid blue; padding-top: 4px;'>";
+            print htmlspecialchars($text);
+            print "</pre></div>";
+            return;
+        }
+
+        global $CFG;
+        $emailcount = 0;
+
+        // Trim subject length (not sure why but
+        // email_to_user does); note that I did it more
+        // aggressively due to use of textlib.
+        $mail->Subject = core_text::substr($subject, 0, 200);
+
+        // Loop through in batches of specified size
+        $copy = array();
+        foreach ($targets as $key => $target) {
+            $copy[$key] = $target;
+        }
+        while (count($copy)>0) {
+            $batch = array_splice($copy, 0,
+                $CFG->forumng_usebcc);
+
+            // Prepare email
+            $mail = get_mailer();
+
+            // From support user
+            static $supportuser;
+            if (!$supportuser) {
+                $supportuser = core_user::get_support_user();
+            }
+            $mail->Sender = $supportuser->email;
+
+            // Set the From details similar to email_to_user
+            if ($CFG->forumng_replytouser &&
+                $from->maildisplay) {
+                $mail->From     = $from->email;
+                $mail->FromName = fullname($from, $viewfullnames);
+            } else {
+                $mail->From     = $CFG->noreplyaddress;
+                $mail->FromName = fullname($from, $viewfullnames);
+            }
+
+            $mail->ToName = 'Test to name';
+
+            $mail->Subject = $subject;
+
+            if ($ishtml) {
+                $mail->IsHTML(true);
+                $mail->Encoding = 'quoted-printable';
+                $mail->Body    =  $html;
+                $mail->AltBody =  "\n$text\n";
+            } else {
+                $mail->IsHTML(false);
+                $mail->Body =  "\n$text\n";
+            }
+
+            foreach ($batch as $user) {
+                $mail->AddBCC($user->email);
+            }
+
+            $emailcount++;
+            if (!$mail->Send()) {
+                $users = '';
+                foreach ($batch as $user) {
+                    if ($users) {
+                        $users.=', ';
+                    }
+                    $users .= $user->id;
+                }
+                if ($showerrortext) {
+                    mtrace('Error sending email "'. $subject .
+                        '": "'. $mail->ErrorInfo . '" (' . $showerrortext .
+                        '). Users affected: ' . $users);
+                }
+            } else {
+                // Mail send successful; log all users
+                foreach ($batch as $user) {
+                    // Note this log entry is in the same format as the
+                    // main mail function
+                    $params = array('other' => array('username' => $user->username, 'subject' => $subject),
+                            'context' => context_system::instance(), 'relateduserid' => $user->id);
+                    $event = \mod_forumng\event\mail_sent::create($params);
+                    $event->trigger();
+                }
+            }
+        }
+        return $emailcount;
+    }
+
+    /**
+     * Checks whether current hour is between two specified hours.
+     * @param int $starthour Hour to start running at (inclusive) e.g. 23
+     * @param int $stophour Hour to stop running at (exclusive) e.g. 4
+     * @return boolean True if it should currently run
+     */
+    public static function is_between_hours($starthour, $stophour) {
+        $hour = (int)date('G');
+        if ($starthour < $stophour) {
+            // Hours are in numerical order e.g. 0-6
+            return ($hour >= $starthour && $hour < $stophour);
+        } else {
+            // Hours are not in numerical order e.g. 23-4
+            return ($hour >= $starthour || $hour < $stophour);
+        }
+    }
+
+    /**
+     * Do housekeeping only runs once per day.
+     */
+    public static function daily_housekeeping() {
+        global $CFG;
+
+        // Really-delete old posts if that option is enabled.
+        self::delete_old_posts();
+
+        // Either move or delete old discussions.
+        self::archive_old_discussions();
+
+        self::delete_old_read();
+    }
+
+    /**
+     * Delete read information that is about 2 years old
+     * (Not counting leap years etc)
+     */
+    public static function delete_old_read() {
+        global $CFG, $DB;
+        $oldtime = strtotime('730 days ago');
+
+        $DB->delete_records_select('forumng_read_posts', 'time < ?', array($oldtime));
+        $DB->delete_records_select('forumng_read', 'time < ?', array($oldtime));
+    }
+
+    /**
+     * Either delete or archive old discussions based on the forum setting
+     */
+    public static function archive_old_discussions() {
+        global $CFG, $DB;
+        $now = time();
+        $housekeepingquery = "
+FROM
+    {forumng_discussions} fd
+    INNER JOIN {forumng_posts} fp ON fd.lastpostid = fp.id
+    INNER JOIN {forumng} f ON fd.forumngid = f.id
+WHERE
+    f.removeafter<>0 AND fd.sticky<>1 AND fp.modified<? - f.removeafter
+";
+        $housekeepingparams = array($now);
+        $count = $DB->count_records_sql("SELECT COUNT(1) $housekeepingquery", $housekeepingparams);
+        if ($count) {
+            if (!PHPUNIT_TEST) {
+                mtrace("\nBeginning processing $count discussion archiving/deleting requests");
+            }
+            $housekeepingrs = $DB->get_recordset_sql("
+SELECT
+    fd.id AS discussionid, f.id AS forumngid, f.removeafter, f.removeto
+$housekeepingquery
+ORDER BY f.removeto", $housekeepingparams);
+
+            $targetforum = null;
+            $targetcourseid = null;
+            $cronlog = '';
+            $discussionmovecount = 0;
+            $discussiondeletecount = 0;
+            $discussionautolocked = 0;
+            foreach ($housekeepingrs as $rec) {
+                $discussion = mod_forumng_discussion::get_from_id($rec->discussionid,
+                        mod_forumng::CLONE_DIRECT);
+                if ($rec->removeto) {
+                    if ($rec->removeto == -1) {
+                        // Locked record or discussion deleted.
+                        if ($discussion->is_locked() || $discussion->is_auto_locked() || $discussion->is_deleted()) {
+                            continue;
+                        } else {
+                            $end = $discussion->get_time_end();
+                            $canautolock = true;
+                            // Check to see whether time now is beyond the end time.
+                            if ($end > $now) {
+                                $canautolock = false;
+                            }
+                            if ($canautolock) {
+                                // Lock record.
+                                $discussion->auto_lock();
+                                $discussionautolocked++;
+                            } else {
+                                continue;
+                            }
+                        }
+                    } else {
+                        // Moving to a different forum.
+                        $forum = $discussion->get_forum();
+                        $course = $forum->get_course();
+                        $modinfo = get_fast_modinfo($course);
+                        if ($forum->can_archive_forum($modinfo, $cronlog)) {
+                            // Do not get the target forum and course id again
+                            // if the target forum is the same.
+                            if (!$targetforum || $targetforum->get_id() != $rec->removeto) {
+                                $targetforum = mod_forumng::get_from_id($rec->removeto,
+                                        mod_forumng::CLONE_DIRECT);
+                                $targetforum = $targetforum->get_real_forum();
+                            }
+                            // Target discussion groupid must be the same as the original groupid.
+                            $targetgroupmode = $targetforum->get_group_mode();
+                            $targetgroupid = $targetgroupmode ? $discussion->get_group_id() : null;
+                            $discussion->move($targetforum, $targetgroupid);
+                            $discussionmovecount++;
+                        }
+                    }
+                } else {
+                    // Delete all discussions and relevant data permanently.
+                    $discussion->permanently_delete();
+                    $discussiondeletecount++;
+                }
+            }
+            $housekeepingrs->close();
+            if (!PHPUNIT_TEST) {
+                mtrace ("\n $discussionmovecount discussions have been archived and " .
+                    "$discussiondeletecount discussions have been deleted permanently and " .
+                    "$discussionautolocked discussions have been automatically locked");
+            }
+        }
+    }
+}
diff --git a/mod/forumng/mod_forumng_digest_list.php b/mod/forumng/mod_forumng_digest_list.php
new file mode 100644
index 0000000..1b6b7d6
--- /dev/null
+++ b/mod/forumng/mod_forumng_digest_list.php
@@ -0,0 +1,78 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once(dirname(__FILE__) . '/mod_forumng.php');
+
+/**
+ * Manages a list (based on a database recordset, so not all stored in memory)
+ * of posts which need to be included in digests sent to users.
+ *
+ * The list only includes posts which are due to be included in digests. The
+ * same caveats apply as to mod_forumng_mail_list.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_digest_list extends mod_forumng_mail_list {
+    /** Config flag used to prevent sending mails twice */
+    const PENDING_MARK_DIGESTED = 'pending_mark_digested';
+
+    public function __construct($tracetimes) {
+        parent::__construct($tracetimes);
+    }
+
+    protected function get_pending_flag_name() {
+        return self::PENDING_MARK_DIGESTED;
+    }
+
+    protected function get_target_mail_state() {
+        return mod_forumng::MAILSTATE_DIGESTED;
+    }
+
+    protected function get_safety_net($time) {
+        // The digest safety net is 24 hours earlier because digest posts may
+        // be delayed by 24 hours.
+        return parent::get_safety_net($time) - 24 * 3600;
+    }
+
+    protected function get_query_where($time) {
+        global $CFG;
+
+        // In case cron has not run for a while
+        $safetynet = $this->get_safety_net($time);
+
+        global $CFG;
+        $sql = "
+WHERE
+    -- Post must be waiting for digest
+    fp.mailstate = " . mod_forumng::MAILSTATE_MAILED . "
+
+    -- Don't mail out really old posts (unless they were previously hidden)
+    AND (fp.created > ? OR fd.timestart > ?)
+
+    -- Post and discussion must not have been deleted and we're only looking
+    -- at original posts not edited old ones
+    AND fp.deleted = 0
+    AND fd.deleted = 0
+    AND fp.oldversion = 0
+
+    -- Context limitation
+    AND x.contextlevel = 70";
+        $params = array($safetynet, $safetynet);
+        return array($sql, $params);
+    }
+}
diff --git a/mod/forumng/mod_forumng_discussion.php b/mod/forumng/mod_forumng_discussion.php
new file mode 100644
index 0000000..8dda7c4
--- /dev/null
+++ b/mod/forumng/mod_forumng_discussion.php
@@ -0,0 +1,2676 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Represents a forum discussion.
+ * @see mod_forumng_discussion_list
+ * @see forum
+ * @see mod_forumng_post
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_discussion {
+    /** Posts are cached for 10 minutes */
+    const CACHE_TIMEOUT = 600;
+
+    /** Max number of discussions to cache in session */
+    const CACHE_COUNT = 2;
+
+    /**
+     * Max size (total bytes of messages) before not caching discussion.
+     * I analysed our current discussions. At time of writing, there are 50 that
+     * are bigger than 200,000 bytes (ok characters but close enough) and
+     * 336,168 that are smaller, so I think this should generally be OK.
+     */
+    const CACHE_MAX_SIZE = 200000;
+
+    /** Used for edit_settings when not changing a value */
+    const NOCHANGE = -999;
+
+    /**
+     * Used in the numreadposts field to indicate that read information is not
+     * stored because a discussion is too old.
+     */
+    const PAST_SELL_BY = 1000000;
+
+    // Object variables and accessors
+    /*///////////////////////////////*/
+
+    private $forum, $discussionfields, $full, $rootpost, $timeretrieved,
+        $pretendtimeread, $foruserid;
+
+    private $postscache, $groupscache, $incache;
+
+    private $ismakingsearchchange;
+
+    private $totalsize = 0;
+
+    /** @return mod_forumng The forum that this discussion comes from */
+    public function get_forum() {
+        return $this->forum;
+    }
+
+    /** @return object Moodle course object */
+    public function get_course() {
+        return $this->forum->get_course();
+    }
+
+    /** @return object Moodle course-module object */
+    public function get_course_module() {
+        return $this->forum->get_course_module();
+    }
+
+    /** @return int ID of this discussion */
+    public function get_id() {
+        return $this->discussionfields->id;
+    }
+    /** @return int Group ID for this discussion or null if any group */
+    public function get_group_id() {
+        return $this->discussionfields->groupid;
+    }
+    /** @return int Group name for this discussion */
+    public function get_group_name() {
+        if (is_null($this->discussionfields->groupid)) {
+            return get_string('allparticipants');
+        } else {
+            return $this->discussionfields->groupname;
+        }
+    }
+    /**
+     * Obtains subject. Note this results in a DB query if the discussion
+     * was not fully loaded in the first place.
+     * @param bool $expectingquery True if code expects there to be a query;
+     *   this just avoids a debugging() call.
+     * @return string Subject or null if none
+     */
+    public function get_subject($expectingquery = false) {
+        global $DB;
+        if (!isset($this->discussionfields->subject)) {
+            if (!$expectingquery) {
+                debugging('This get method made a DB query; if this is expected,
+                    set the flag to say so', DEBUG_DEVELOPER);
+            }
+            $this->discussionfields->subject = $DB->get_field(
+              'forumng_posts', 'subject', array('id' => $this->discussionfields->postid));
+        }
+        return $this->discussionfields->subject;
+    }
+
+    /**
+     * For use only by mod_forumng_post when updating in-memory representation
+     * after an edit.
+     * @param string $subject New subject
+     */
+    public function hack_subject($subject) {
+        $this->discussionfields->subject = $subject;
+    }
+
+    /** @return bool True if discussion is 'sticky' */
+    public function is_sticky() {
+        return $this->discussionfields->sticky ? true : false;
+    }
+
+    /** @return bool True if discussion is locked */
+    public function is_locked() {
+        return $this->discussionfields->locked ? true : false;
+    }
+
+    /** @return bool True if discussion is auto locked */
+    public function is_auto_locked() {
+        if ($this->discussionfields->locked == 2) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * @return int Time this discussion becomes visible (seconds since epoch)
+     *  or null if no start time
+     */
+    public function get_time_start() {
+        return $this->discussionfields->timestart;
+    }
+
+    /**
+     * @return int Time this discussion stops being visible (seconds since
+     *  epoch) or null if no end time
+     */
+    public function get_time_end() {
+        return $this->discussionfields->timeend;
+    }
+
+    /**
+     * Obtains details of user who originally posted this discussion.
+     * @return object Moodle user object (selected fields)
+     */
+    public function get_poster() {
+        $this->check_full();
+        return $this->discussionfields->firstuser;
+    }
+
+    /**
+     * Obtains details of user who posted the last reply to this discussion.
+     * @return object Moodle user object (selected fields)
+     */
+    public function get_last_post_user() {
+        $this->check_full();
+        return $this->discussionfields->lastuser;
+    }
+
+    /**
+     * Obtains ID of last post
+     * @return int ID of last post
+     */
+    public function get_last_post_id() {
+        return $this->discussionfields->lastpostid;
+    }
+
+    /**
+     * If the discussion is locked, this function returns the explanatory post.
+     * Will retrieve discussion posts if not already obtained.
+     * @return mod_forumng_post Lock post or null if none
+     */
+    public function get_lock_post() {
+        if ($this->is_locked() && !$this->is_auto_locked() ) {
+            return $this->get_root_post()->find_child(
+                $this->discussionfields->lastpostid);
+        } else {
+            return null;
+        }
+
+    }
+
+    /**
+     * Checks that the discussion is fully loaded. There are two load states: full
+     * (includes all data retrieved when loading discussion list) and partial
+     * (includes only minimal data required when creating discussion). Note that
+     * full data state does not imply that the actual posts are in memory yet,
+     * post storage is tracked separately.
+     * @throws coding_exception If discussion is not loaded
+     */
+    private function check_full() {
+        if (!$this->full) {
+            throw new coding_exception('This function is not available unless
+              the discussion has been fully loaded.');
+        }
+    }
+
+    /**
+     * @return string URL of this discussion for log table, relative to the
+     *   module's URL
+     */
+    public function get_log_url() {
+        return 'discuss.php?' . $this->get_link_params(mod_forumng::PARAM_PLAIN);
+    }
+
+    /**
+     * @return mixed Number of unread posts as integer, possibly 0; or empty
+     *   string if unread data is no longer tracked for this post
+     */
+    public function get_num_unread_posts() {
+        if (!isset($this->discussionfields->numreadposts)) {
+            throw new coding_exception('Unread post count not obtained');
+        }
+        if ($this->discussionfields->numreadposts == self::PAST_SELL_BY) {
+            return '';
+        } else {
+            return $this->discussionfields->numposts
+                - $this->discussionfields->numreadposts;
+        }
+    }
+
+    /**
+     * @return int Number of discussions
+     */
+    public function get_num_posts() {
+        if (!isset($this->discussionfields->numposts)) {
+            throw new coding_exception('Post count not obtained');
+        }
+        return $this->discussionfields->numposts;
+    }
+
+    /**
+     * @return int Time of last post
+     */
+    public function get_time_modified() {
+        if (!isset($this->discussionfields->timemodified)) {
+            throw new coding_exception('Time modified not obtained');
+        }
+        return $this->discussionfields->timemodified;
+    }
+
+    /**
+     * @return moodle_url URL of discussion
+     */
+    public function get_moodle_url() {
+        return new moodle_url('/mod/forumng/discuss.php', $this->get_link_params_array());
+    }
+
+    /**
+     * @return string URL of this discussion
+     */
+    public function get_url($type = mod_forumng::PARAM_PLAIN) {
+        global $CFG;
+        return $CFG->wwwroot . '/mod/forumng/discuss.php?' .
+                $this->get_link_params($type);
+    }
+
+    /**
+     * Obtains details of user who posted the first post to this discussion.
+     * @return object Moodle user object (selected fields)
+     */
+    public function get_poster_anon() {
+        $this->check_full();
+        return is_null($this->discussionfields->firstasmoderator)
+                ? mod_forumng::ASMODERATOR_NO : $this->discussionfields->firstasmoderator;
+    }
+
+    /**
+     * Obtains details of user who posted the last post to this discussion.
+     * @return object Moodle user object (selected fields)
+     */
+    public function get_last_post_anon() {
+        $this->check_full();
+        return is_null($this->discussionfields->lastasmoderator)
+                ? mod_forumng::ASMODERATOR_NO : $this->discussionfields->lastasmoderator;
+    }
+
+    /*
+     * @return int boolean 0 or 1 flagged
+     */
+    public function get_flagged() {
+        return $this->discussionfields->flagged;
+    }
+
+    /**
+     * @return bool True if can flag
+     */
+    public function can_flag() {
+        // The guest user cannot flag.
+        if (isguestuser()) {
+            return false;
+        }
+        // Cannot flag for deleted discussion unless already flagged.
+        if ($this->is_deleted() && (!$this->is_flagged())) {
+            return false;
+        }
+        return true;
+    }
+
+    /** @return bool True if post is flagged by current user */
+    public function is_flagged() {
+        if (!property_exists($this->discussionfields, 'flagged')) {
+            throw new coding_exception('Flagged information not available here');
+        }
+        return $this->discussionfields->flagged ? true : false;
+    }
+
+    /**
+     * @param bool $flag True to set flag
+     * @param int $userid User ID or 0 for current
+     */
+    public function set_flagged($flag, $userid = 0) {
+        global $DB;
+
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        if ($flag) {
+            // Check there is not already a row.
+            if (!$DB->record_exists('forumng_flags',
+                    array('discussionid' => $this->get_id(), 'userid' => $userid))) {
+                // Insert new row.
+                $newflag = (object) array('discussionid' => $this->get_id(),
+                        'userid' => $userid, 'postid' => 0, 'flagged' => time());
+                $DB->insert_record('forumng_flags', $newflag);
+                $this->discussionfields->flagged = 1;
+            }
+        } else {
+            $DB->delete_records('forumng_flags',
+                    array('discussionid' => $this->get_id(), 'userid' => $userid));
+            $this->discussionfields->flagged = 0;
+        }
+
+    }
+
+    // Factory method
+    /*///////////////*/
+
+    /**
+     * Creates a forum discussion object, forum object, and all related data from a
+     * single forum discussion ID. Intended when entering a page which uses
+     * discussion ID as a parameter.
+     * @param int $id ID of forum discussion
+     * @param int $cloneid ID of clone (or 0 or mod_forumng::CLONE_DIRECT as relevant)
+     * @param int $userid User ID; 0 = current user, -1 = do not get unread data
+     * @param bool $usecache True if cache should be used (if available)
+     * @param bool $storecache True if newly-retrieved discussion should be
+     *   stored to cache
+     * @return mod_forumng_discussion Discussion object
+     */
+    public static function get_from_id($id, $cloneid, $userid=0,
+            $usecache=false, $storecache=false) {
+        if ($usecache) {
+            global $SESSION;
+            self::check_cache();
+            foreach ($SESSION->forumng_cache->discussions as $info) {
+                if ($info->userid==mod_forumng_utils::get_real_userid($userid) &&
+                        $info->id==$id && $info->cloneid==$cloneid) {
+                    $info->lastused = time();
+                    $result = self::create_from_cache($info);
+                    if ($result) {
+                        return $result;
+                    }
+                }
+            }
+        }
+        return self::get_base('fd.id=?', array($id), $userid, $storecache, $cloneid);
+    }
+
+    /**
+     * Creates a forum discussion object, forum object, and all related data from a
+     * forum post ID (the discussion related to that post). Intended when
+     * requesting a post if we want 'context' data too
+     * @param int $postid ID of forum post
+     * @param int $userid User ID; 0 = current user, -1 = do not get unread data
+     * @param bool $usecache True if cache should be used (if available)
+     * @param bool $storecache True if newly-retrieved discussion should be
+     *   stored to cache
+     * @return mod_forumng_discussion Discussion object
+     */
+    public static function get_from_post_id($postid, $cloneid, $userid=0,
+            $usecache=false, $storecache=false) {
+        if ($usecache) {
+            global $SESSION;
+            self::check_cache();
+            foreach ($SESSION->forumng_cache->discussions as $info) {
+                if ($info->userid!=mod_forumng_utils::get_real_userid($userid)) {
+                    continue;
+                }
+                // Check whether this discussion contains the desired
+                // post
+                if (in_array($postid, $info->posts)) {
+                    $info->lastused = time();
+                    $result = self::create_from_cache($info);
+                    if ($result) {
+                        return $result;
+                    }
+                }
+            }
+        }
+
+        return self::get_base("fd.id =
+            (SELECT discussionid FROM {forumng_posts} WHERE id = ?)", array($postid),
+            $userid, $storecache, $cloneid);
+    }
+
+    private static function get_base($where, $whereparams, $userid, $cache, $cloneid) {
+        // If user isn't logged in, don't get unread data
+        if (!isloggedin()) {
+            $userid = -1;
+        }
+        // Get discussion data (including read status)
+        $rs = self::query_discussions($where, $whereparams, $userid, 'id', 0, 1, null, true);
+        $discussionfields = false;
+        if (!$rs->valid()) {
+            throw new dml_exception('Unable to retrieve relevant discussion');
+        }
+        $discussionfields = $rs->current();
+        $rs->close();
+
+        // Get forum and construct discussion
+        $forum = mod_forumng::get_from_id($discussionfields->forumngid, $cloneid);
+        $result = new mod_forumng_discussion($forum, $discussionfields, true,
+            mod_forumng_utils::get_real_userid($userid));
+        if ($cache) {
+            $result->cache($userid);
+        }
+        return $result;
+    }
+
+    // Discussion caching
+    /*///////////////////*/
+
+    /**
+     * Caches the specified discussion in session.
+     * Replaces the least-recently-used, if the number exceeds the
+     * limit.
+     * @param mod_forumng_discussion $discussion
+     */
+    private function cache() {
+        global $SESSION;
+        self::check_cache();
+
+        if (!$this->full) {
+            // Only cache 'full' data
+            return;
+        }
+
+        if ($this->totalsize > self::CACHE_MAX_SIZE) {
+            // Don't cache huge discussions
+            return;
+        }
+
+        // Remove any existing data for this discussion id
+        $oldest = -1;
+        $oldesttime = 0;
+        foreach ($SESSION->forumng_cache->discussions as $key => $info) {
+            if ($info->id == $this->get_id()) {
+                unset($SESSION->forumng_cache->discussions[$key]);
+            } else {
+                if ($oldest==-1 || $info->lastused<$oldesttime) {
+                    $oldest = $key;
+                }
+            }
+        }
+
+        // If there are too many, discard oldest
+        if (count($SESSION->forumng_cache->discussions) > self::CACHE_COUNT) {
+            unset($SESSION->forumng_cache->discussions[$oldest]);
+        }
+
+        // Cache this data
+        $info = new stdClass;
+        $info->lastused = time();
+        $info->id = $this->get_id();
+        $info->timemodified = $this->get_time_modified();
+        $info->discussionfields = serialize($this->discussionfields);
+        $info->postscache = $this->postscache;
+        $info->groupscache = serialize($this->groupscache);
+        $info->userid = $this->get_unread_data_user_id();
+        $info->posts = array();
+        $info->settingshash = $this->get_forum()->get_settings_hash();
+        $info->cloneid = $this->get_forum()->get_course_module_id();
+
+        if ($this->rootpost) {
+            $this->rootpost->list_child_ids($info->posts);
+        }
+
+        $this->incache = $info;
+        $SESSION->forumng_cache->discussions[] = $info;
+    }
+
+    /**
+     * Removes any instances of this discussion from current user's cache.
+     * Used so that current user sees changes immediately (other users will
+     * still wait 10 minutes).
+     */
+    public function uncache() {
+        global $SESSION;
+        if (isset($SESSION->forumng_cache->discussions)) {
+            foreach ($SESSION->forumng_cache->discussions as $key => $info) {
+                if ($info->id == $this->get_id()) {
+                    unset($SESSION->forumng_cache->discussions[$key]);
+                }
+            }
+        }
+    }
+
+    /**
+     * Obtains a discussion from the cache.
+     * @param object $info Object from session cache
+     * @return mod_forumng_discussion New discussion object or null if there is a
+     *   problem and you should re-cache
+     */
+    private static function create_from_cache($info) {
+        $discussionfields = unserialize($info->discussionfields);
+        $forum = mod_forumng::get_from_id($discussionfields->forumngid, $info->cloneid);
+        if ($forum->get_settings_hash() != $info->settingshash) {
+            return null;
+        }
+
+        $result = new mod_forumng_discussion(
+            $forum, $discussionfields, true, $info->userid);
+
+        $result->groupscache = unserialize($info->groupscache);
+        $result->postscache = $info->postscache;
+        $result->incache = true;
+        return $result;
+    }
+
+    /**
+     * Checks whether the current discussion object is newer (contains
+     * newer posts) than an equivalent discussion stored in the cache.
+     * If so, removes the cached value.
+     */
+    public function maybe_invalidate_cache() {
+        global $SESSION;
+        self::check_cache();
+
+        foreach ($SESSION->forumng_cache->discussions as $key => $info) {
+            if ($info->id == $this->get_id()
+                && $info->timemodified != $this->get_time_modified()) {
+                unset($SESSION->forumng_cache->discussions[$key]);
+            }
+        }
+    }
+
+    /**
+     * Updates the discussion cache, discarding old data.
+     */
+    public static function check_cache() {
+        global $SESSION;
+
+        // Check cache variable exists
+        if (!isset($SESSION->forumng_cache)) {
+            $SESSION->forumng_cache = new stdClass;
+        }
+        if (!isset($SESSION->forumng_cache->discussions)) {
+            $SESSION->forumng_cache->discussions = array();
+        }
+
+        // Remove old cache data
+        foreach ($SESSION->forumng_cache->discussions as $key => $info) {
+            if (time() - $info->lastused > self::CACHE_TIMEOUT) {
+                unset($SESSION->forumng_cache->discussions[$key]);
+            }
+        }
+    }
+
+    // Object methods
+    /*///////////////*/
+
+    /**
+     * Initialises the discussion. Used internally by forum - don't call directly.
+     * @param mod_forumng $forum Forum object
+     * @param object $discussionfields Discussion fields from db table (plus
+     *   some extra fields provided by query in forum method)
+     * @param bool $full True if the parameter includes 'full' data via the
+     *   various joins, false if it's only the fields from the discussions table.
+     * @param int $foruserid The user ID that was used to obtain the discussion
+     *   data (may be -1 for no unread data)
+     */
+    public function __construct($forum, $discussionfields, $full, $foruserid) {
+        if ($full && !isset($discussionfields->firstuser)) {
+            // Extract the user details into Moodle user-like objects
+            $discussionfields->firstuser = mod_forumng_utils::extract_subobject($discussionfields,
+                    'fu_');
+            $discussionfields->lastuser = mod_forumng_utils::extract_subobject($discussionfields,
+                    'lu_');
+        }
+
+        $this->forum = $forum;
+        $this->discussionfields = $discussionfields;
+        $this->full = $full;
+        $this->foruserid = $foruserid;
+        $this->rootpost = null;
+        $this->timeretrieved = time();
+        $this->postscache = null;
+        $this->groupscache = null;
+        $this->ismakingsearchchange = false;
+    }
+
+    /**
+     * Fills discussion data (loaded from db) for given user.
+     * @param int $foruserid User ID or -1 if no unread data is required
+     * @param bool $usecache True to use cache if available
+     * @param bool $storecache True to sstore retrieved value in cache
+     */
+    public function fill($foruserid=0, $usecache=false, $storecache=false) {
+        if ($this->full && ($this->foruserid == $foruserid || $foruserid==-1)) {
+            return;
+        }
+        $new = self::get_from_id($this->discussionfields->id,
+                $this->get_forum()->get_course_module_id(), $foruserid, $usecache, $storecache);
+        foreach (get_class_vars('mod_forumng_discussion') as $field => $dontcare) {
+            $this->{$field} = $new->{$field};
+        }
+    }
+
+    /**
+     * Obtains the root post of the discussion. This actually requests all
+     * posts from the database; the first is returned, but others are
+     * accessible from methods in the first.
+     * If available, cached information is used unless
+     * you set $usecache to false. The cache is stored within the discussion
+     * object so will not persist beyond a request unless you make the
+     * discussion object persist too.
+     * @param bool $usecache True to use cache if available, false to
+     *    request fresh data
+     * @param int $userid User ID to get user-specific data (initially, post
+     *   flags) for; 0 = current
+     * @return mod_forumng_post Post object
+     */
+    public function get_root_post($usecache=true, $userid=0) {
+        global $CFG, $USER;
+        require_once($CFG->dirroot . '/rating/lib.php');
+        if (!$usecache || !$this->rootpost) {
+            if (!$usecache || !$this->postscache) {
+                $read = !mod_forumng::mark_read_automatically($userid);
+                // Retrieve most posts in the discussion - even deleted
+                // ones. These are necessary in case somebody deletes a post that has
+                // replies. They will display as 'deleted post'. We don't retrieve
+                // old versions of edited posts. Posts are retrieved in created order
+                // so that the order of replies remains constant when we build the tree.
+                $posts = mod_forumng_post::query_posts('fp.discussionid=? AND fp.oldversion=0',
+                        array($this->discussionfields->id), 'fp.created',
+                        $this->forum->has_ratings(), true, false, $userid, false, false, '', '', $read);
+                // Load standard ratings.
+                if ($this->get_forum()->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+                    // If grading is 'No grading' or 'Teacher grades students'.
+                    if ($this->get_forum()->get_grading() == mod_forumng::GRADING_NONE ||
+                                    $this->get_forum()->get_grading() == mod_forumng::GRADING_MANUAL ) {
+                        // Set the aggregation method.
+                        if ($this->get_forum()->get_rating_scale() > 0) {
+                            $aggregate = RATING_AGGREGATE_AVERAGE;
+                        } else {
+                            $aggregate = RATING_AGGREGATE_COUNT;
+                        }
+                    } else {
+                        $aggregate = $this->get_forum()->get_grading();
+                    }
+                    $ratingoptions = new stdClass();
+                    $ratingoptions->context = $this->get_forum()->get_context();
+                    $ratingoptions->component = 'mod_forumng';
+                    $ratingoptions->ratingarea = 'post';
+                    $ratingoptions->items = $posts;
+                    $ratingoptions->aggregate = $aggregate;
+                    $ratingoptions->scaleid = $this->get_forum()->get_rating_scale();
+                    $ratingoptions->userid = $USER->id;
+                    $ratingoptions->assesstimestart = $this->forum->get_ratingfrom();
+                    $ratingoptions->assesstimefinish = $this->forum->get_ratinguntil();
+                    $ratingoptions->returnurl = $this->get_moodle_url();
+
+                    $rm = new rating_manager();
+                    $posts = $rm->get_ratings($ratingoptions);
+                }
+                $this->postscache = serialize($posts);
+            } else {
+                $posts = unserialize($this->postscache);
+            }
+
+            // Add numbers to posts
+            $i = 1;
+            foreach ($posts as $post) {
+                $post->number = $i++;
+            }
+
+            // Obtain post relationships
+            $children = array();
+            foreach ($posts as $id => $fields) {
+                if (!array_key_exists($fields->parentpostid, $children)) {
+                    $children[$fields->parentpostid] = array();
+                }
+                $children[$fields->parentpostid][] = $id;
+            }
+
+            // Recursively build posts
+            $this->rootpost = $this->build_posts($posts, $children,
+                $this->discussionfields->postid, null);
+
+            // Update the 'next/previous' unread lists stored in posts
+            if ($this->get_unread_data_user_id() != -1) {
+                $linear = array();
+                $this->rootpost->build_linear_children($linear);
+                $nextunread = array();
+                $dump = '';
+                foreach ($linear as $index => $post) {
+                    $nextunread[$index] = null;
+                    if ($post->is_unread() &&
+                            (!$post->get_deleted() || $post->can_undelete($dump))) {
+                        for ($j = $index-1; $j>=0; $j--) {
+                            if ($nextunread[$j]) {
+                                break;
+                            }
+                            $nextunread[$j] = $post;
+                        }
+                    }
+                }
+                $previous = null;
+                foreach ($linear as $index => $post) {
+                    $post->set_unread_list($nextunread[$index], $previous);
+                    if ($post->is_unread() &&
+                            (!$post->get_deleted() || $post->can_undelete($dump))) {
+                        $previous = $post;
+                    }
+                }
+
+                // Update cached version to include this data
+                if ($this->incache) {
+                    $this->cache();
+                }
+            }
+        }
+
+        return $this->rootpost;
+    }
+
+    /**
+     * Internal method. Queries for a number of discussions, including additional
+     * data about unread posts etc. Returns the database result.
+     * @param string $conditions WHERE clause (may refer to aliases 'd' for discussion)
+     * @param array $conditionparams Parameters for conditions
+     * @param int $userid User ID, 0 = current user, -1 = no unread data is needed
+     * @param string $orderby ORDER BY clause
+     * @param int $limitfrom Limit on results
+     * @param int $limitnum Limit on results
+     * @param mod_forumng $typeforum If set, this forum is used to potentially restrict
+     *   the results based on forum type limits
+     * @param boolean $flags set to indicate that flagged discussions are to be returned
+     * @param boolean hastag set to indicate that tagged discussions are to be returned
+     * @return adodb_recordset Database query results
+     */
+    public static function query_discussions($conditions, $conditionparams, $userid, $orderby,
+        $limitfrom='', $limitnum='', $typeforum=null, $flags = false, $hastag = false) {
+        global $USER, $DB;
+
+        // For read tracking, we get a count of total number of posts in
+        // discussion, and total number of read posts in the discussion (this
+        // is so we can display the number of UNread posts, but the query
+        // works that way around because it will return 0 if no read
+        // information is stored).
+        if (mod_forumng::enabled_read_tracking() && $userid!=-1) {
+            if (!$userid) {
+                $userid = $USER->id;
+            }
+            $deadline = mod_forumng::get_read_tracking_deadline();
+            $readjoin1 = "";
+            $readwhere1 = "";
+            $readtrackingparams = array($deadline, $userid, $userid, $deadline);
+            $readtrackingjoinparams = array($userid);
+            if (!mod_forumng::mark_read_automatically($userid)) {
+                // Ind Mark read - check individual read_posts state.
+                $readjoin1 = "LEFT JOIN {forumng_read_posts} frp2 on frp2.postid = fp3.id AND frp2.userid = ?";
+                $readwhere1 = "OR frp2.id IS NOT NULL";
+                $readtrackingparams = array($deadline, $userid, $userid, $userid, $deadline);
+            }
+            // Get unread count only when last added post is newer than deadline.
+            // When PAST_SELL_BY, posts modified later than last will be unread but not picked up.
+            $readtracking = "
+                    , (CASE WHEN fplast.modified IS NOT NULL AND fplast.modified < ? THEN " .
+                                self::PAST_SELL_BY . " ELSE (SELECT COUNT(1)
+                        FROM {forumng_posts} fp3
+                  $readjoin1
+                       WHERE fp3.discussionid = fd.id AND fp3.oldversion = 0
+                         AND fp3.deleted = 0
+                         AND (fp3.modified < fr.time OR fp3.edituserid = ?
+                            $readwhere1
+                            OR (fp3.edituserid IS NULL AND fp3.userid = ?)
+                            OR fp3.modified < ?)) END) AS numreadposts,
+                   fr.time AS timeread";
+            // Join read info, get posts not authored by user: get latest modified post time.
+            $readtrackingjoin = "LEFT JOIN {forumng_read} fr ON fd.id = fr.discussionid AND fr.userid = ?";
+        } else {
+            $readtracking = ", 0 AS numreadposts, NULL AS timeread";
+            $readtrackingjoin = "";
+            $readtrackingparams = array();
+            $readtrackingjoinparams = array();
+        }
+
+        $order = ($orderby) ? 'ORDER BY ' . $orderby : '';
+
+        // Handle forum type restriction
+        $typejoin = '';
+        $typeparams = array();
+        $flagsjoin = '';
+        $flagsquery = '';
+        $flagparams = array();
+        if ($typeforum && $userid != -1) {
+            $type = $typeforum->get_type();
+            if ($type->has_unread_restriction()) {
+                list($restrictionsql, $restrictionparams) =
+                        $type->get_unread_restriction_sql($typeforum, $userid);
+            } else {
+                $restrictionsql = false;
+            }
+            if ($restrictionsql) {
+                $typejoin = "
+    INNER JOIN {forumng} f ON f.id = fd.forumngid
+    INNER JOIN {course} c ON c.id = f.course
+    INNER JOIN {course_modules} cm ON cm.instance = f.id AND cm.course = f.course
+    INNER JOIN {modules} m ON m.id = cm.module";
+                $conditions .= " AND m.name = 'forumng' AND $restrictionsql";
+                $conditionparams = array_merge($conditionparams, $restrictionparams);
+            }
+        }
+
+        if ($flags && $userid != -1) {
+            $flagsjoin = "LEFT JOIN {forumng_flags} ff ON ff.discussionid = fd.id AND ff.userid = ?";
+            $flagsquery = ', ff.flagged';
+            $flagparams = array($userid);
+        }
+
+        // Tag join sql if needed.
+        $tagjoin = '';
+        if ($hastag) {
+            $tagjoin = "LEFT JOIN {tag_instance} ti on ti.itemid = fd.id
+                            AND ti.itemtype = 'forumng_discussions'
+                            AND ti.component = 'mod_forumng'";
+        }
+
+        // Main query. This retrieves:
+        // * Basic discussion information.
+        // * Information about the discussion that is obtained from the first and
+        //   last post.
+        // * Information about the users responsible for first and last post.
+        $rs = $DB->get_recordset_sql("
+SELECT * FROM (SELECT
+    fd.*,
+    fpfirst.created AS timecreated,
+    fplast.modified AS timemodified,
+    fpfirst.subject AS subject,
+    fplast.subject AS lastsubject,
+    fplast.message AS lastmessage,
+    fpfirst.asmoderator AS firstasmoderator,
+    fplast.asmoderator AS lastasmoderator,
+    ".mod_forumng_utils::select_username_fields('fu').",
+    ".mod_forumng_utils::select_username_fields('lu').",
+    (SELECT COUNT(1)
+        FROM {forumng_posts} fp2
+        WHERE fp2.discussionid = fd.id AND fp2.deleted = 0 AND fp2.oldversion = 0)
+        AS numposts,
+    g.name AS groupname
+    $readtracking
+    $flagsquery
+FROM
+    {forumng_discussions} fd
+    INNER JOIN {forumng_posts} fpfirst ON fd.postid = fpfirst.id
+    INNER JOIN {user} fu ON fpfirst.userid = fu.id
+    INNER JOIN {forumng_posts} fplast ON fd.lastpostid = fplast.id
+    INNER JOIN {user} lu ON fplast.userid = lu.id
+    LEFT JOIN {groups} g ON g.id = fd.groupid
+    $readtrackingjoin
+    $typejoin
+    $flagsjoin
+    $tagjoin
+WHERE
+    $conditions) x $order
+",
+                array_merge($readtrackingparams, $readtrackingjoinparams, $flagparams, $conditionparams),
+                $limitfrom, $limitnum);
+        return $rs;
+    }
+
+    /**
+     * Constructs a post object and (recursively) all of its children from
+     * information retrieved from the database.
+     * @param $posts Array of post ID => fields from DB query
+     * @param $children Array of post ID => array of child IDs
+     * @param $id ID of post to construct
+     * @param $parent Parent post or NULL if none
+     * @return mod_forumng_post Newly-created post
+     * @throws mod_forumng_exception If ID is invalid
+     */
+    private function build_posts(&$posts, &$children, $id, $parent) {
+        if (!array_key_exists($id, $posts)) {
+            $msg = "No such post: $id (discussion " . $this->get_id() . '); ' .
+                'posts';
+            foreach ($posts as $id => $junk) {
+                $msg .= ' ' . $id;
+            }
+            $msg .= '; children';
+            foreach ($children as $id => $junk) {
+                $msg .= ' ' . $id;
+            }
+            throw new dml_exception($msg);
+        }
+        $post = new mod_forumng_post($this, $posts[$id], $parent);
+        $this->totalsize += strlen($posts[$id]->message);
+        $post->init_children();
+
+        if (array_key_exists($id, $children)) {
+            foreach ($children[$id] as $childid) {
+                $post->add_child(
+                    $this->build_posts($posts, $children, $childid, $post));
+            }
+        }
+        return $post;
+    }
+
+    /**
+     * Used by forum when creating a discussion. Do not call directly.
+     * @param string $subject Subject
+     * @param string $message Message
+     * @param int $format Moodle format used for message
+     * @param bool $attachments True if post contains attachments
+     * @param bool $mailnow If true, sends mail ASAP
+     * @param int $userid User ID (0 = current)
+     * @param int $asmoderator values are ASMODERATOR_NO, ASMODERATOR_IDENTIFY or ASMODERATOR_ANON
+     * @return int ID of newly-created post
+     */
+    public function create_root_post($subject, $message, $format,
+        $attachments=false, $mailnow=false, $userid=0, $asmoderator = mod_forumng::ASMODERATOR_NO) {
+        return $this->create_reply(null, $subject, $message, $format,
+            $attachments, false, $mailnow, $userid, $asmoderator);
+    }
+
+    /**
+     * Used by mod_forumng_post when creating a reply. Do not call directly.
+     * @param mod_forumng_post $parentpost Parent post object (NULL when creating root post)
+     * @param string $subject Subject
+     * @param string $message Message
+     * @param int $format Moodle format used for message
+     * @param bool $attachments True if post contains attachments
+     * @param bool $setimportant If true, highlight the post
+     * @param bool $mailnow If true, sends mail ASAP
+     * @param int $userid User ID (0 = current)
+     * @param int $asmoderator values are ASMODERATOR_NO, ASMODERATOR_IDENTIFY or ASMODERATOR_ANON
+     * @return int ID of newly-created post
+     */
+    public function create_reply($parentpost, $subject, $message, $format,
+        $attachments=false, $setimportant=false, $mailnow=false, $userid=0, $asmoderator = mod_forumng::ASMODERATOR_NO) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // Prepare post object
+        $postobj = new StdClass;
+        $postobj->discussionid = $this->discussionfields->id;
+        $postobj->parentpostid = $parentpost ? $parentpost->get_id() : null;
+        $postobj->userid = $userid;
+        $postobj->u_id = $userid;
+        $postobj->created = time();
+        $postobj->deleted = 0;
+        $postobj->mailstate = $mailnow
+            ? mod_forumng::MAILSTATE_NOW_NOT_MAILED
+            : mod_forumng::MAILSTATE_NOT_MAILED;
+        $postobj->important = $setimportant ? 1 : 0;
+        $postobj->oldversion = 0;
+        $postobj->edituserid = null;
+        $postobj->subject = strlen(trim($subject)) == 0 ? null : $subject;
+        $postobj->message = $message;
+        $postobj->messageformat = $format;
+        $postobj->attachments = $attachments ? 1 : 0;
+        $postobj->asmoderator = $asmoderator;
+        if ($parentpost == null && $this->get_time_start() && $this->get_time_start() > time()) {
+            // When $parentpost is null and get_time_start() has a value that $postobj->created is the value of get_time_start().
+            $postobj->created = $this->get_time_start();
+        }
+        $postobj->modified = $postobj->created;
+
+        $transaction = $DB->start_delegated_transaction();
+
+        // Create post
+        $postobj->id = $DB->insert_record('forumng_posts', $postobj);
+        $post = new mod_forumng_post($this, $postobj);
+
+        // For replies, update last post id
+        if ($parentpost) {
+            $discussionchange = new stdClass;
+            $discussionchange->id = $parentpost->get_discussion()->get_id();
+            $discussionchange->lastpostid = $postobj->id;
+            $DB->update_record('forumng_discussions', $discussionchange);
+        }
+
+        // Update search index (replies only)
+        if ($parentpost) {
+            $post->search_update();
+        }
+
+        // Update completion state
+        $post->update_completion(true);
+
+        // Outside the catch so we don't commit transaction if something
+        // fails
+        $transaction->allow_commit();
+
+        return $post->get_id();
+    }
+
+    /**
+     * Used when updating search data for posts. When this function returns
+     * true, updating search data will cause it to be deleted. After making
+     * the change which affects search, make this function return false again.
+     * @return bool True if search data is being changed and posts should
+     *   delete their search data
+     */
+    public function is_making_search_change() {
+        return $this->ismakingsearchchange;
+    }
+
+    /**
+     * Edits discussion settings. These parameters may be set to the NOCHANGE
+     * constant if not being altered.
+     * @param int $groupid Group ID
+     * @param int $timestart Seconds since epoch that this becomes visible,
+     *   null/0 if always
+     * @param int $timeend Seconds since epoch that this disappear, null/0 if
+     *   it doesn't
+     * @param bool $locked True if discussion should be locked
+     * @param bool $sticky True if discussion should be sticky
+     * @param array $tags
+     */
+    public function edit_settings($groupid, $timestart, $timeend, $locked, $sticky, array $tags = null) {
+        global $DB, $CFG;
+        require_once($CFG->dirroot . '/tag/lib.php');
+
+        // Apply defaults
+        if ($groupid === self::NOCHANGE) {
+            $groupid = $this->discussionfields->groupid;
+        }
+        if ($timestart === self::NOCHANGE) {
+            $timestart = $this->discussionfields->timestart;
+        }
+        if ($timeend === self::NOCHANGE) {
+            $timeend = $this->discussionfields->timeend;
+        }
+        if ($locked === self::NOCHANGE) {
+            $locked = $this->discussionfields->locked;
+        }
+        if ($sticky === self::NOCHANGE) {
+            $sticky = $this->discussionfields->sticky;
+        }
+
+        // Normalise entries to match db values
+        $timestart = $timestart ? $timestart : 0;
+        $timeend = $timeend ? $timeend : 0;
+        $sticky = $sticky ? 1 : 0;
+        if ($locked === true) {
+            $locked = 1;
+        }
+        if (!($locked == 1 || $locked == 2)) {
+            $locked = 0;
+        }
+        $groupid = $groupid ? $groupid : null;
+
+        // Start transaction in case there are multiple changes relating to
+        // search
+        $transaction = $DB->start_delegated_transaction();
+
+        $update = new StdClass;
+        if ($groupid != $this->discussionfields->groupid) {
+            $update->groupid = $groupid;
+
+            // When group changes, need to redo the search data; must remove it
+            // before changing group or it won't be able to find the old
+            // search documents any more (because it looks for them under the
+            // new group id).
+            $this->ismakingsearchchange = true;
+            $root = $this->get_root_post();
+            $root->search_update();
+            $root->search_update_children();
+            $this->ismakingsearchchange = false;
+        }
+        if ($timestart != $this->discussionfields->timestart) {
+            $update->timestart = $timestart;
+            $root = $this->get_root_post();
+            // When $timestart is not the same as $this->discussionfields->timestart
+            // and the discussion root post ($root) has no children.
+            if (!$root->has_children()) {
+                // Then the root post created and modified times are set to $timestart.
+                // Note will need to do this using DB function as no method to do this in classes.
+                if ($timestart == 0) {
+                    $timestart = time();
+                }
+                $revisedroot = new stdClass();
+                $revisedroot->created = $timestart;
+                $revisedroot->modified = $timestart;
+                $revisedroot->id = $root->get_id();
+                $DB->update_record('forumng_posts', $revisedroot);
+            }
+        }
+        if ($timeend != $this->discussionfields->timeend) {
+            $update->timeend = $timeend;
+        }
+        if ($locked != $this->discussionfields->locked) {
+            $update->locked = $locked;
+        }
+        if ($sticky != $this->discussionfields->sticky) {
+            $update->sticky = $sticky;
+        }
+        // Update tags if required.
+        if (!is_null($tags)) {
+            $context = $this->get_forum()->get_context(true);
+            core_tag_tag::set_item_tags('mod_forumng', 'forumng_discussions', $this->discussionfields->id,
+                    $context, $tags);
+        }
+        if (count((array)$update)==0) {
+            // No change
+            $transaction->allow_commit();
+            return;
+        }
+        $update->id = $this->discussionfields->id;
+        $DB->update_record('forumng_discussions', $update);
+
+        // Update in memory (needed for the next group bit)
+        $this->uncache();
+        foreach ($update as $key => $value) {
+            $this->discussionfields->{$key} = $value;
+        }
+
+        // Update group if required
+        if (isset($update->groupid)) {
+            // When group has changed, must add items to the new group
+            $root = $this->get_root_post();
+            $root->search_update();
+            $root->search_update_children();
+        }
+
+        // End transaction
+        $transaction->allow_commit();
+    }
+
+    /**
+     * Moves discussion to another forum. This will also move any attachments
+     * in the filesystem. You can also use this method to change group.
+     * (Note that once a discussion has been moved its data fields are no longer
+     * valid and the object should be discarded.)
+     * @param mod_forumng $targetforum Target forum for move
+     * @param int $targetforumngid New forum ID
+     * @param int $targetgroupid New group ID
+     */
+    public function move($targetforum, $targetgroupid) {
+        global $DB;
+
+        $update = new StdClass;
+        if ($targetforum->get_id() != $this->discussionfields->forumngid) {
+            $update->forumngid = $targetforum->get_id();
+        }
+        if ($targetgroupid != $this->discussionfields->groupid) {
+            $update->groupid = $targetgroupid;
+        }
+        if (count((array)$update) == 0) {
+            // No change
+            return;
+        }
+        // Delete search data for this discussion before moving.
+        $this->ismakingsearchchange = true;
+        $root = $this->get_root_post();
+        $root->search_update();
+        $root->search_update_children();
+        $this->ismakingsearchchange = false;
+
+        $update->id = $this->discussionfields->id;
+
+        $transaction = $DB->start_delegated_transaction();
+        $DB->update_record('forumng_discussions', $update);
+
+        $targetcloneid = $targetforum->is_shared() ? $targetforum->get_course_module_id() : 0;
+        $newdiscussion = self::get_from_id($this->get_id(), $targetcloneid, -1);
+
+        if ($targetforum->get_id() != $this->forum->get_id()) {
+            // Moving to different forum, we need to move attachments + ratings if any...
+
+            // Get old and new contexts
+            $fs = get_file_storage();
+            $filecontext = $this->get_forum()->get_context(true);
+            $newfilecontext = $targetforum->get_context(true);
+
+            // Get list of all affected post ids (includes edited, deleted)
+            // that have attachments
+            $postids = $DB->get_records('forumng_posts', array(
+                    'discussionid' => $this->get_id()), '', 'id');
+
+            // Loop through all posts copying attachments & deleting old one
+            foreach ($postids as $postid => $junk) {
+                // Move core ratings if enabled (Note move to new forum even if not enabled there).
+                if ($this->get_forum()->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+                    $DB->set_field_select('rating', 'contextid', $newfilecontext->id,
+                            "itemid = $postid AND contextid = {$filecontext->id} AND component
+                            = 'mod_forumng' AND ratingarea = 'post'");
+                }
+                foreach (array('attachment', 'message') as $filearea) {
+                    $oldfiles = $fs->get_area_files($filecontext->id, 'mod_forumng', $filearea,
+                            $postid, 'id', false);
+                    foreach ($oldfiles as $oldfile) {
+                        $filerecord = new stdClass();
+                        $filerecord->contextid = $newfilecontext->id;
+                        $fs->create_file_from_storedfile($filerecord, $oldfile);
+                        $oldfile->delete();
+                    }
+                }
+            }
+            if ($this->get_forum()->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+                $this->forum->update_grades();
+            }
+            if ($targetforum->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+                $targetforum->update_grades();
+            }
+
+            // Completion status may have changed in source and target forums
+            // Performance optimise: only do this if completion is enabled
+            if ($this->forum->is_auto_completion_enabled()) {
+                $this->update_completion(false);
+                $newdiscussion->update_completion(true);
+            }
+        }
+
+        // Update the search data after the move.
+        $newroot = $newdiscussion->get_root_post();
+        $newroot->search_update();
+        $newroot->search_update_children();
+
+        // Update the tags after the move.
+        if ($targetforum->get_id() != $this->forum->get_id()) {
+            // Update tags for moved discussions.
+            $oldcontext = $this->forum->get_context(true);
+            $newcontext = $targetforum->get_context(true);
+            $DB->set_field('tag_instance', 'contextid', $newcontext->id, array('itemid' => $this->get_id(), 'itemtype' => 'forumng_discussions'));
+        }
+
+        $this->uncache();
+        $transaction->allow_commit();
+    }
+    /**
+     * Copy the discussion and its posts to another forum and/or group.
+     * @param mod_forumng $targetforum Forum to copy the discussion to
+     * @param int $groupid If 'All participants' has been selected from the
+     * separate groups dropdown box, use default value 0
+     */
+    public function copy($targetforum, $groupid) {
+        global $SESSION, $DB;
+        $oldforum = $this->get_forum();
+        $oldforumngid = $oldforum->get_id();
+        $oldcourseid = $oldforum->get_course_id();
+        $targetforumngid = $targetforum->get_id();
+        $targetcourseid = $targetforum->get_course_id();
+        // Clone the old discussion.
+        $discussionobj = clone($this->discussionfields);
+        unset($discussionobj->id);
+
+        // Update the forumngid and gruopid to the target forumngid and selected groupid.
+        $discussionobj->forumngid = $targetforumngid;
+        unset($discussionobj->groupid);
+        if ($targetforum->get_group_mode() && $groupid) {
+            $discussionobj->groupid = $groupid;
+        }
+        $transaction = $DB->start_delegated_transaction();
+        $newdiscussionid =  $DB->insert_record('forumng_discussions', $discussionobj);
+        $rs = $DB->get_recordset('forumng_posts', array('discussionid' => $this->get_id()));
+        // $newids and $parentused are temp arrays used to
+        // $newids is a array of new postids using the indices of its old postids
+        // Update the parentid of the post records copied over
+        // $hasattachments is a temp array for record the posts which has attachments.
+        $newids = array();
+        $parentsused = array();
+        $hasattachments = array();
+        foreach ($rs as $postrec) {
+            $oldpostid = $postrec->id;
+            unset($postrec->id);
+            $postrec->discussionid = $newdiscussionid;
+            $postrec->mailstate = mod_forumng::MAILSTATE_DIGESTED;
+            $newpostid = $DB->insert_record('forumng_posts', $postrec);
+            $newids[$oldpostid] = $newpostid;
+            if ($postrec->parentpostid) {
+                $parentsused[$postrec->parentpostid] = true;
+            }
+            if ($postrec->attachments ==1) {
+                $hasattachments[$oldpostid] = $newpostid;
+            }
+        }
+        $rs->close();
+        // Duplicate core ratings if enabled and both forums in same course.
+        if ($oldforum->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING &&
+                $oldforum->get_course(true)->id == $targetforum->get_course(true)->id) {
+            list($in, $inparams) = $DB->get_in_or_equal(array_keys($newids));
+            if ($ratings = $DB->get_records_sql("SELECT * FROM {rating} WHERE itemid $in AND component
+                    = ? AND ratingarea = ? AND contextid = ?", array_merge($inparams,
+                            array('mod_forumng', 'post', $oldforum->get_context(true)->id)))) {
+                foreach ($ratings as $rating) {
+                    $newrate = new stdClass();
+                    $newrate->contextid = $targetforum->get_context(true)->id;
+                    $newrate->component = 'mod_forumng';
+                    $newrate->ratingarea = 'post';
+                    $newrate->itemid = $newids[$rating->itemid];
+                    $newrate->scaleid = $rating->scaleid;
+                    $newrate->userid = $rating->userid;
+                    $newrate->rating = $rating->rating;
+                    $newrate->timecreated = $rating->timecreated;
+                    $newrate->timemodified = time();
+                    $DB->insert_record('rating', $newrate);
+                }
+                $targetforum->update_grades();
+            }
+        }
+        // Update the postid and lastpostid in the discussion table no matter if they
+        // are null or not
+        $newpostid = $newids[$discussionobj->postid];
+        $newlastpostid = $newids[$discussionobj->lastpostid];
+        $DB->execute("UPDATE {forumng_discussions} SET postid = ?, lastpostid = ? WHERE id = ?",
+                array($newpostid, $newlastpostid, $newdiscussionid));
+        foreach ($parentsused as $key => $value) {
+            $newparentpostid = $newids[$key];
+            // Update the parentpostids which have just been copied over.
+            $DB->execute("UPDATE {forumng_posts} SET parentpostid = ? " .
+                    "WHERE parentpostid = ? AND discussionid = ?",
+                    array($newparentpostid, $key, $newdiscussionid));
+        }
+        // Copy attachments
+        $fs = get_file_storage();
+        $oldfilecontext = $oldforum->get_context(true);
+        $newfilecontext = $targetforum->get_context(true);
+        foreach ($hasattachments as $oldpostid => $newpostid) {
+            foreach (array('attachment', 'message') as $filearea) {
+                $oldfiles = $fs->get_area_files($oldfilecontext->id, 'mod_forumng', $filearea,
+                        $oldpostid, 'id', false);
+                foreach ($oldfiles as $oldfile) {
+                    $filerecord = new stdClass();
+                    $filerecord->contextid = $newfilecontext->id;
+                    $filerecord->itemid = $newpostid;
+                    $fs->create_file_from_storedfile($filerecord, $oldfile);
+                }
+            }
+        }
+        // Update the search data after the copy
+        $newdiscussion = self::get_from_id($newdiscussionid,
+                $this->get_forum()->get_course_module_id(), -1);
+        $root = $newdiscussion->get_root_post();
+        $root->search_update();
+        $root->search_update_children();
+        $transaction->allow_commit();
+        // Update any discussion tags.
+        $tagslist = $this->get_tags();
+        if ($tagslist) {
+            $tags = array();
+            foreach ($tagslist as $key => $value) {
+                array_push($tags, $value);
+            }
+            $newdiscussion->edit_settings(self::NOCHANGE, self::NOCHANGE, self::NOCHANGE, self::NOCHANGE, self::NOCHANGE, $tags);
+        }
+    }
+
+    /**
+     * Clones this discussion but changes the post IDs, for internal use
+     * only (in split).
+     * @param int $postid First post in discussion
+     * @param int $lastpostid Last post in discussion
+     * @return int New discussion ID
+     */
+    public function clone_for_split($postid, $lastpostid) {
+        global $DB;
+        // Create new discussion
+        $discussionobj = clone($this->discussionfields);
+        unset($discussionobj->id);
+        $discussionobj->postid = $postid;
+        $discussionobj->lastpostid = $lastpostid;
+        return $DB->insert_record('forumng_discussions', $discussionobj);
+    }
+
+    /**
+     * Deletes this discussion.
+     * @param bool $log True to log action
+     */
+    public function delete($log=true) {
+        global $DB;
+        if ($this->discussionfields->deleted) {
+            return;
+        }
+        $transaction = $DB->start_delegated_transaction();
+        $update = new StdClass;
+        $update->id = $this->discussionfields->id;
+        $update->deleted = time();
+        $DB->update_record('forumng_discussions', $update);
+        $this->discussionfields->deleted = $update->deleted;
+
+        // Update all the posts to remove them from search
+        $this->get_root_post()->search_update();
+        $this->get_root_post()->search_update_children();
+
+        // Update completion status in case it needs marking false for anyone
+        $this->update_completion(false);
+
+        // Log delete
+        if ($log) {
+            $this->log('delete discussion');
+        }
+        $transaction->allow_commit();
+
+        $this->uncache();
+    }
+
+    /**
+     * Undeletes this discussion.
+     * @param bool $log True to log action
+     */
+    public function undelete($log=true) {
+        global $DB;
+        if (!$this->discussionfields->deleted) {
+            return;
+        }
+        $transaction = $DB->start_delegated_transaction();
+        $update = new StdClass;
+        $update->id = $this->discussionfields->id;
+        $update->deleted = 0;
+        $DB->update_record('forumng_discussions', $update);
+        $this->discussionfields->deleted = 0;
+
+        // Update all the posts to add them back to search
+        $this->get_root_post()->search_update();
+        $this->get_root_post()->search_update_children();
+
+        // Update completion status in case it needs marking true for anyone
+        $this->update_completion(true);
+
+        if ($log) {
+            $this->log('undelete discussion');
+        }
+        $transaction->allow_commit();
+
+        $this->uncache();
+    }
+
+    /**
+     * Deletes this discussion and its relevant data permanently.
+     * It can't be undeleted afterwards.
+     * @param bool $log True to log action
+     */
+    public function permanently_delete($log=true) {
+        global $DB;
+
+        $this->delete(false);
+
+        $transaction = $DB->start_delegated_transaction();
+
+        // Deleting the relevant data in the forumng_subscriptions table.
+        $DB->delete_records('forumng_subscriptions', array('discussionid' => $this->get_id()));
+
+        // Deleting the relevant data in the forumng_read table.
+        $DB->delete_records('forumng_read', array('discussionid' => $this->get_id()));
+
+        // Deleting the relevant data in the forumng_ratings table.
+        $query = "WHERE postid IN (
+SELECT fp.id
+FROM
+    {forumng_posts} fp
+    INNER JOIN {forumng_discussions} fd ON fp.discussionid = fd.id
+WHERE
+    fd.id = ?)";
+        $queryparams = array($this->discussionfields->id);
+        $DB->execute("DELETE FROM {forumng_ratings} $query", $queryparams);
+
+        // Delete core ratings if enabled.
+        if ($this->get_forum()->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+            $ratequery = str_replace('postid', 'itemid', $query);
+            $DB->execute("DELETE FROM {rating} $ratequery AND component = ? AND ratingarea = ?
+                    AND contextid = ?", array_merge($queryparams, array('mod_forumng', 'post',
+                            $this->get_forum()->get_context(true)->id)));
+            $this->forum->update_grades();
+        }
+
+        // Deleting the relevant data in the forumng_flags table.
+        $DB->execute("DELETE FROM {forumng_flags} $query", $queryparams);
+
+        // Deleting the relevant data in the forumng_read_posts table.
+        $DB->execute("DELETE FROM {forumng_read_posts} $query", $queryparams);
+
+        // Delete all the attachment files of this discussion.
+        $fs = get_file_storage();
+        $filecontext = $this->get_forum()->get_context(true);
+
+        // Get list of all affected post ids (includes edited, deleted) that have attachments.
+        $postids = $DB->get_records('forumng_posts', array(
+                'discussionid' => $this->get_id(), 'attachments' => 1), '', 'id');
+
+        // Loop through all posts and deleting the attachments for each post.
+        foreach ($postids as $postid => $junk) {
+            foreach (array('attachment', 'message') as $filearea) {
+                $fs->delete_area_files($filecontext->id, 'mod_forumng', $filearea,
+                        $postid);
+            }
+        }
+
+        // Deleting the relevant posts in this discussion in the forumng_posts table.
+        $DB->delete_records('forumng_posts', array('discussionid' => $this->get_id()));
+
+        // Delete the relevant discussion in the forumng_flags table.
+        $DB->delete_records('forumng_flags', array('discussionid' => $this->get_id()));
+
+        // Delete the relevant discussion in the tag_instance table.
+        core_tag_tag::remove_all_item_tags('mod_forumng', 'forumng_discussions', $this->get_id());
+
+        // Finally deleting this discussion in the forumng_discussions table.
+        $DB->delete_records('forumng_discussions', array('id' => $this->get_id()));
+
+        // Log delete.
+        if ($log) {
+            $this->log('permdelete discussion');
+        }
+        $transaction->allow_commit();
+
+        $this->uncache();
+    }
+
+    /**
+     * Locks a discussion with a final message.
+     * @param string $subject Subject
+     * @param string $message Message
+     * @param int $format Moodle format used for message
+     * @param bool $attachments True if post contains attachments
+     * @param bool $mailnow If true, sends mail ASAP
+     * @param int $userid User ID (0 = current)
+     * @param bool $log True to log this action
+     * @param int $asmoderator values are ASMODERATOR_NO, ASMODERATOR_IDENTIFY or ASMODERATOR_ANON
+     * @return int post ID
+     */
+    public function lock($subject, $message, $format,
+        $attachments=false, $mailnow=false, $userid=0, $log=true, $asmoderator = mod_forumng::ASMODERATOR_NO) {
+        global $DB;
+        $transaction = $DB->start_delegated_transaction();
+
+        // Post reply
+        $postid = $this->get_root_post()->reply($subject, $message, $format,
+            $attachments, false, $mailnow, $userid, false, $asmoderator);
+
+        // Mark discussion locked
+        $this->edit_settings(self::NOCHANGE,
+            self::NOCHANGE, self::NOCHANGE,
+            true, self::NOCHANGE);
+
+        // Log
+        if ($log) {
+            $this->log('lock discussion', 'p' . $postid . ' d' . $this->get_id());
+        }
+
+        $transaction->allow_commit();
+        return $postid;
+    }
+
+    /**
+     * Auto locks a discussion with a final message.
+     * @return int post ID
+     */
+    public function auto_lock() {
+
+        if ($this->is_locked() ) {
+            $locked = self::NOCHANGE;
+        } else {
+            $locked = 2;
+            // Mark discussion locked.
+            $this->edit_settings(self::NOCHANGE,
+                self::NOCHANGE, self::NOCHANGE,
+                $locked, self::NOCHANGE);
+            // Log.
+            $this->log('auto lock discussion', ' d' . $this->get_id());
+        }
+
+    }
+
+    /**
+     * Unlocks a discussion.
+     * @param int $userid User ID (0 = current)
+     * @param bool $log True to log this action
+     */
+    public function unlock($userid=0, $log=true) {
+        global $DB;
+        $transaction = $DB->start_delegated_transaction();
+
+        // Get autolocked value as it changes after edit_settings is run.
+        $autolocked = $this->is_auto_locked();
+        // If not auto locked.
+        if (!$autolocked) {
+            // Delete lock post.
+            $lockpost = $this->get_lock_post();
+            if (!$lockpost) {
+                throw new invalid_state_exception('Discussion not locked');
+            }
+            $lockpost->delete($userid, false);
+        }
+
+        // Mark discussion unlocked
+        $this->edit_settings(self::NOCHANGE,
+            self::NOCHANGE, self::NOCHANGE,
+            false, self::NOCHANGE);
+
+        // Log
+        if ($log) {
+            if (!$autolocked) {
+                $this->log('unlock discussion', 'p' . $lockpost->get_id() . ' d' . $this->get_id());
+            } else {
+                $this->log('unlock auto locked discussion', ' d' . $this->get_id());
+            }
+        }
+
+        $transaction->allow_commit();
+    }
+
+    /**
+     * Merges the contents of this discussion into another discussion.
+     * @param mod_forumng_discussion $targetdiscussion Target discussion
+     * @param int $userid User ID (0 = current)
+     * @param bool $log True to log this action
+     */
+    public function merge_into($targetdiscussion, $userid=0, $log=true) {
+        global $DB;
+        $transaction = $DB->start_delegated_transaction();
+
+        // Delete search data for the source discussion
+        $this->ismakingsearchchange = true;
+        $root = $this->get_root_post();
+        $root->search_update();
+        $root->search_update_children();
+        $this->ismakingsearchchange = false;
+
+        // Update parent post id of root post
+        $record = new stdClass;
+        $record->id = $this->discussionfields->postid;
+        $record->parentpostid = $targetdiscussion->discussionfields->postid;
+        $DB->update_record('forumng_posts', $record);
+
+        // Move all posts into new discussion
+        $DB->execute("UPDATE {forumng_posts} SET discussionid = ? WHERE discussionid = ?",
+                array($targetdiscussion->get_id(), $this->get_id()));
+
+        // Update the last post id to that of the most recent time modified.
+        $targetdiscussion->possible_lastpost_change();
+
+        // Delete this discussion
+        $DB->delete_records('forumng_discussions', array('id' => $this->discussionfields->id));
+
+        // Attachments are OK because they are still in the same context, postid
+        // etc (note this would NOT be the case if we allowed merging between
+        // forums).
+        if ($this->get_forum()->get_id() != $targetdiscussion->get_forum()->get_id()) {
+            throw new coding_exception('Cannot merge into different forum');
+        }
+
+        // Merging the discussion into another might cause completion changes
+        // (if there was a requirement for discussions and this is no longer
+        // a discussion in its own right).
+        $this->update_completion(false);
+
+        // Update the search data for the target discussion after the merge
+        $newroot = $targetdiscussion->get_root_post();
+        $newroot->search_update();
+        $newroot->search_update_children();
+
+        if ($log) {
+            $this->log('merge discussion', 'd' . $this->get_id() . ' into d' .
+                    $targetdiscussion->get_id());
+        }
+
+        $transaction->allow_commit();
+        $this->uncache();
+        $targetdiscussion->uncache();
+    }
+
+    /**
+     * Obtains a list of everybody who has read this discussion (only works
+     * if the discussion is within the 'read' period). The list is in date order
+     * (most recent first). Each returned item has ->time (time last read) and
+     * ->user (Moodle user object) fields.
+     * @param int $groupid Group ID or mod_forumng::ALL_GROUPS
+     * @return array Array of information about readers
+     * @throws coding_exception If you try to call it in a shared forum (not supported)
+     */
+    public function get_readers($groupid=mod_forumng::ALL_GROUPS) {
+        global $DB;
+
+        if ($this->get_forum()->is_shared()) {
+            throw new coding_exception('get_readers not supported in shared forums');
+        }
+
+        list($sql, $params) = get_enrolled_sql(
+                $this->get_forum()->get_context(), '', $groupid ? $groupid : 0, true);
+        $now = round(time(), -2);
+        $params['discussionid'] = $this->discussionfields->id;
+        $result = $DB->get_records_sql($sql = "
+SELECT
+    fr.id,
+    " . mod_forumng_utils::select_username_fields('u', false) . ",
+    fr.time,
+    u.idnumber AS u_idnumber
+FROM
+    (SELECT MAX(id) AS id, userid, discussionid, MAX(time) AS time
+     FROM (
+         SELECT id, userid, discussionid, time
+           FROM {forumng_read} fr
+      UNION ALL
+         SELECT id, userid, discussionid, time
+           FROM (
+               SELECT frp.*, fp.discussionid
+                 FROM {forumng_posts} fp
+           RIGHT JOIN {forumng_read_posts} frp ON fp.id = frp.postid
+                WHERE fp.deleted = 0 AND fp.oldversion = 0
+           ) frp
+    ) rp GROUP BY userid, discussionid) fr
+    INNER JOIN {user} u ON u.id = fr.userid
+WHERE
+    fr.userid IN ($sql)
+    AND fr.discussionid = :discussionid
+ORDER BY
+    fr.time DESC", $params);
+
+        foreach ($result as $item) {
+            $item->user = mod_forumng_utils::extract_subobject($item, 'u_');
+        }
+
+        return $result;
+    }
+
+    /**
+     * @return bool True if read tracking is enabled for this discussion
+     *   (it is not too old, and read tracking is turned on globally)
+     */
+    public function is_read_tracked() {
+        $this->check_full();
+        return mod_forumng::enabled_read_tracking() &&
+            ($this->discussionfields->timemodified >=
+                mod_forumng::get_read_tracking_deadline());
+    }
+
+    /**
+     * Marks this discussion read.
+     * @param int $time Time to mark it read at (0 = now)
+     * @param int $userid User who's read the discussion (0=current)
+     */
+    public function mark_read($time=0, $userid=0) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        if (!$time) {
+            $time = time();
+        }
+        $transaction = $DB->start_delegated_transaction();
+        $existing = $DB->get_record('forumng_read', array('userid' => $userid,
+            'discussionid' => $this->discussionfields->id), '*', IGNORE_MISSING);
+        if ($existing) {
+            $readrecord = new StdClass;
+            $readrecord->id = $existing->id;
+            $readrecord->time = $time;
+            $DB->update_record('forumng_read', $readrecord);
+        } else {
+            $readrecord = new StdClass;
+            $readrecord->userid = $userid;
+            $readrecord->discussionid = $this->discussionfields->id;
+            $readrecord->time = $time;
+            $DB->insert_record('forumng_read', $readrecord);
+        }
+        // Delete any individual post records for discussion as now redundant.
+        $DB->execute("DELETE FROM {forumng_read_posts}
+                            WHERE postid IN(
+                                  SELECT id FROM {forumng_posts}
+                                   WHERE discussionid = :discussionid)
+                              AND userid = :userid AND time <= :now",
+                array('userid' => $userid, 'discussionid' => $this->discussionfields->id, 'now' => $time));
+        $transaction->allow_commit();
+
+        if ($this->incache) {
+            $this->discussionfields->timeread = $time;
+            $this->cache($this->incache->userid);
+        }
+    }
+
+    /**
+     * Marks this discussion unread.
+     * @param int $userid User who's not read the discussion (0=current)
+     */
+    public function mark_unread($userid=0) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $DB->delete_records('forumng_read',
+                array('userid' => $userid, 'discussionid' => $this->discussionfields->id));
+        // Delete any individual post records for discussion as well.
+        $DB->execute("DELETE FROM {forumng_read_posts}
+                            WHERE postid IN(
+                                  SELECT id FROM {forumng_posts}
+                                   WHERE discussionid = :discussionid)
+                              AND userid = :userid",
+                array('userid' => $userid, 'discussionid' => $this->discussionfields->id));
+        if ($this->incache) {
+            $this->discussionfields->timeread = null;
+            $this->cache($this->incache->userid);
+        }
+    }
+
+    /**
+     * Called when a post is deleted or undeleted or modified, or there is a
+     * larger change to the discussion
+     * @param mod_forumng_post $post Post that has changed; null to always recalculate
+     */
+    public function possible_lastpost_change($post=null) {
+        $recalculate = false;
+        if (!$post) {
+            $recalculate = true;
+        } else {
+            if ($post->get_deleted()) {
+                // For deleted posts, recalculate if this was previously
+                // considered the latest post
+                $recalculate =
+                    $this->discussionfields->lastpostid == $post->get_id();
+            } else {
+                // For other posts, recalculate if this is now newer than the
+                // stored last post
+                $recalculate =
+                    $post->get_modified() > $this->discussionfields->timemodified;
+            }
+        }
+
+        // If necessary, recalculate the date
+        if ($recalculate) {
+            global $DB;
+            $change = new stdClass;
+            $change->id = $this->get_id();
+
+            $records = $DB->get_records_sql("SELECT id " .
+                "FROM {forumng_posts} WHERE discussionid = ? AND deleted = 0 AND oldversion = 0 " .
+                "ORDER BY modified DESC", array($this->get_id()), 0, 1);
+            if (count($records) == 0) {
+                throw new moodle_exception('errorfindinglastpost', 'forumng');
+            }
+            $rec = reset($records);
+            $change->lastpostid = $rec->id;
+            if ($change->lastpostid != $this->discussionfields->lastpostid) {
+                $DB->update_record('forumng_discussions', $change);
+            }
+        }
+    }
+
+    /**
+     * Records an action in the Moodle log for current user.
+     * @param string $action Action name - see datalib.php for suggested verbs
+     *   and this code for example usage
+     * @param string $replaceinfo Optional info text to replace default (which
+     *   is just the discussion id again)
+     */
+    public function log($action, $replaceinfo = '') {
+        $info = 'd' . $this->discussionfields->id;
+        if ($replaceinfo !== '') {
+            $info = $replaceinfo;
+        }
+        $params = array(
+                'context' => $this->get_forum()->get_context(),
+                'objectid' => $this->get_id(),
+                'other' => array('info' => $info, 'logurl' => $this->get_log_url())
+        );
+        switch ($action) {
+            case 'add discussion':
+                $classname = 'discussion_created';
+                break;
+            case 'delete discussion':
+                $classname = 'discussion_deleted';
+                break;
+            case 'undelete discussion':
+                $classname = 'discussion_undeleted';
+                break;
+            case 'permdelete discussion':
+                $classname = 'discussion_permdeleted';
+                break;
+            case 'lock discussion':
+                $classname = 'discussion_locked';
+                break;
+            case 'unlock discussion':
+                $classname = 'discussion_unlocked';
+                break;
+            case 'auto lock discussion':
+                $params['other']['auto'] = true;
+                $classname = 'discussion_locked';
+                break;
+            case 'unlock auto locked discussion':
+                $params['other']['auto'] = true;
+                $classname = 'discussion_unlocked';
+                break;
+            case 'subscribe':
+                $classname = 'subscription_created';
+                $params['relateduserid'] = substr($info, 0, strpos($info, ' '));
+                unset($params['objectid']);// Unset discuss id as event for subscriptions table.
+                break;
+            case 'unsubscribe':
+                $classname = 'subscription_deleted';
+                $params['relateduserid'] = substr($info, 0, strpos($info, ' '));
+                unset($params['objectid']);// Unset discuss id as event for subscriptions table.
+                break;
+            case 'merge discussion':
+                $params['other']['newid'] = substr($info, strpos($info, 'into d') + 6);
+                $classname = 'discussion_merged';
+                break;
+            default:
+                $classname = 'discussion_viewed';
+                break;
+        }
+        $class = '\\mod_forumng\\event\\' . $classname;
+        $event = $class::create($params);
+        $event->add_record_snapshot('course_modules', $this->get_course_module());
+        $event->add_record_snapshot('course', $this->get_course());
+        $event->add_record_snapshot('forumng_discussions', $this->discussionfields);
+        $event->trigger();
+    }
+
+    /**
+     * Checks whether this discussion is currently visible to students.
+     * A discussion is visible to students if it is not deleted and is not
+     * restricted to a non-current time period.
+     * @return bool True if it's visible
+     */
+    public function is_currently_visible() {
+        // Deleted
+        if ($this->is_deleted()) {
+            return false;
+        }
+
+        return $this->is_within_time_period();
+    }
+
+    /**
+     * @return bool True if deleted
+     */
+    public function is_deleted() {
+        return $this->discussionfields->deleted ? true : false;
+    }
+
+    /**
+     * @return bool True if discussion is within the given time period, or
+     *   there isn't one
+     */
+    public function is_within_time_period() {
+        // Start/end time, if set
+        $now = time();
+        return ($this->discussionfields->timestart <= $now &&
+            ((!$this->discussionfields->timeend) ||
+                ($this->discussionfields->timeend > $now)));
+    }
+
+    /**
+     * @return int NOT_SUBSCRIBED:0; PARTIALLY_SUBSCRIBED:1; FULLY_SUBSCRIBED:2;
+     * THIS_GROUP_SUBSCRIBED:5; THIS_GROUP_NOT_SUBSCRIBED:6;
+     * @param int $userid User who's not read the discussion (0=current)
+     */
+    public function is_subscribed($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $subscriptioninfo = $this->get_forum()->get_subscription_info($userid);
+        if ($subscriptioninfo->wholeforum) {
+            // Subscribed to the entire forum.
+            return mod_forumng::FULLY_SUBSCRIBED;
+        } else if (count($subscriptioninfo->discussionids) == 0) {
+            if (count($subscriptioninfo->groupids) == 0) {
+                // Not subscribed at all.
+                return mod_forumng::NOT_SUBSCRIBED;
+            } else {
+                if ($this->get_forum()->get_group_mode()) {
+                    // If the group mode turned on, we need to check if subscribed to the group
+                    // that the current discussion belongs to.
+                    foreach ($subscriptioninfo->groupids as $id) {
+                        if ($this->get_group_id() == $id) {
+                            return mod_forumng::THIS_GROUP_SUBSCRIBED;
+                        }
+                    }
+                    return mod_forumng::THIS_GROUP_NOT_SUBSCRIBED;
+                } else {
+                    return mod_forumng::NOT_SUBSCRIBED;
+                }
+            }
+
+        } else {
+            // Discussionids array is not empty.
+            // No needs to check the groupids here assuming all the subscripiton data in
+            // the database is not messed up.
+            $discussionid = $this->get_id();
+            foreach ($subscriptioninfo->discussionids as $id => $groupid) {
+                if ($discussionid == $id) {
+                    return mod_forumng::PARTIALLY_SUBSCRIBED;
+                }
+            }
+            return mod_forumng::NOT_SUBSCRIBED;
+        }
+    }
+
+    /**
+     * @return True if discussion contains data about whether the user has
+     *   read it or not
+     */
+    public function has_unread_data() {
+        return property_exists($this->discussionfields, 'timeread');
+    }
+
+    /**
+     *
+     * @return int User ID that unread data was requested for (-1 if none)
+     */
+    public function get_unread_data_user_id() {
+        return empty($this->foruserid) ? -1 : $this->foruserid;
+    }
+
+    /**
+     * Checks that data about whether or not the user has read this discussion
+     * is available, sets to unread (null) if not.
+     * @throws mod_forumng_exception If discussion does not contain unread data
+     */
+    private function check_unread_data() {
+        if (!property_exists($this->discussionfields, 'timeread')) {
+            $this->discussionfields->timeread = null;
+        }
+    }
+
+    /**
+     * @return bool True if this entire discussion has not been read yet
+     */
+    public function is_entirely_unread() {
+        $this->check_unread_data();
+        return is_null($this->discussionfields->timeread);
+    }
+
+    /**
+     * @return int Time (seconds since epoch) that this discussion was
+     *   read by user, or null if it has never been read
+     */
+    public function get_time_read() {
+        $this->check_unread_data();
+        if ($this->pretendtimeread) {
+            return $this->pretendtimeread;
+        }
+        return $this->discussionfields->timeread;
+    }
+
+    /**
+     * Pretends that the discussion was read at a particular time. Future tests
+     * to mod_forumng_post->is_unread() etc will use this data rather than anything
+     * from the database.
+     * @param $time Time you want discussion to have been read at, or 0 to
+     *   stop pretending
+     */
+    public function pretend_time_read($time=0) {
+        $this->pretendtimeread = $time;
+    }
+
+    /**
+     * Use to obtain link parameters when linking to any page that has anything
+     * to do with discussions.
+     */
+    public function get_link_params($type) {
+        if ($type == mod_forumng::PARAM_FORM) {
+            $d = '<input type="hidden" name="d" value="' .
+                    $this->get_id() . '" />';
+        } else {
+            $d = 'd=' . $this->discussionfields->id;
+        }
+        return $d . $this->get_forum()->get_clone_param($type);
+    }
+
+    /**
+     * Use to obtain link parameters when linking to any page that has anything
+     * to do with discussions.
+     * @return array Array of parameters e.g. ('d'=>317)
+     */
+    public function get_link_params_array() {
+        $result = array('d' => $this->discussionfields->id);
+        $this->get_forum()->add_clone_param_array($result);
+        return $result;
+    }
+
+    /**
+     * Obtains group info for a user in this discussion. Group info may be
+     * cached in the discussion object in order to reduce DB queries.
+     * @param int $userid User ID (must be a user who has posts in this discussion)
+     *   May be 0 to pre-cache the data without returning anything
+     * @param bool $cacheall If true, obtains data for all users in the
+     *   discussion and caches it; set false if only one user's information
+     *   is likely to be required, to do a single query
+     * @return array Array of group objects containing id, name, picture
+     *   (empty if none). False if $userid was 0.
+     * @throws mod_forumng_exception If user is not in this discussion
+     */
+    public function get_user_groups($userid, $cacheall=true) {
+        global $DB;
+
+        // If there is no cached data yet, and we are supposed to cache it,
+        // then cache it now
+        if (!$this->groupscache && $cacheall) {
+            $this->groupscache = array();
+
+            // Get list of users in discussion and initialise empty cache
+            $userids = array();
+            $this->get_root_post()->list_all_user_ids($userids);
+            $userids = array_keys($userids);
+            list($userlistsql, $userlistparams) =
+                    mod_forumng_utils::get_in_array_sql('gm.userid', $userids);
+            foreach ($userids as $auserid) {
+                $this->groupscache[$auserid] = array();
+            }
+
+            // Basic IDs
+            $courseid = $this->get_forum()->get_course_id();
+            $discussionid = $this->get_id();
+
+            // Grouping restriction
+            if ($groupingid = $this->get_forum()->get_grouping()) {
+                $groupingjoin = "INNER JOIN {groupings_groups} gg ON gg.groupid = g.id";
+                $groupingcheck = "AND gg.groupingid = ?";
+                $groupingparams = array($groupingid);
+            } else {
+                $groupingjoin = $groupingcheck = '';
+                $groupingcheck = '';
+                $groupingparams = array();
+            }
+
+            // Do query
+            $rs = $DB->get_recordset_sql("
+SELECT
+    gm.userid, g.id, g.name, g.picture, g.hidepicture
+FROM
+    {groups_members} gm
+    INNER JOIN {groups} g ON g.id = gm.groupid
+    $groupingjoin
+WHERE
+    g.courseid = ?
+    $groupingcheck
+    AND $userlistsql", array_merge(array($courseid), $groupingparams, $userlistparams));
+            foreach ($rs as $rec) {
+                $auserid = $rec->userid;
+                unset($rec->userid);
+                $this->groupscache[$auserid][] = $rec;
+            }
+            $rs->close();
+
+            // Update cached version to include this data
+            if ($this->incache) {
+                $this->cache($this->incache->userid);
+            }
+        }
+
+        // If caller only wants to cache data, return false
+        if (!$userid) {
+            return false;
+        }
+
+        // If there is cached data, use it
+        if ($this->groupscache && $cacheall) {
+            if (!array_key_exists($userid, $this->groupscache)) {
+                // This can happen in rare cases when sending out email. If there
+                // is only one post from user X in a discussion, and that post is
+                // deleted/moved to another discussion between when it gets the
+                // list of all posts and when it tries to cache this list of groups
+                // for the individual discussion.
+                return $this->get_user_groups($userid, false);// Re-call to use code below.
+            }
+            return $this->groupscache[$userid];
+        }
+
+        // Otherwise make a query just for this user
+        $groups = groups_get_all_groups($this->get_forum()->get_course_id(),
+            $userid, $this->get_course_module()->groupingid);
+        return $groups ? $groups : array();
+    }
+
+    // Permissions
+    /*////////////*/
+
+    /**
+     * Checks if user can view this discussion, given that they can see the
+     * forum as a whole.
+     * @param int $userid User ID
+     * @return bool True if user can view discusion
+     */
+    public function can_view($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // If this is a 'all groups' post, then we only require access to the
+        // 'no groups' forum view (any group can see it)
+        $groupid = is_null($this->discussionfields->groupid) ?
+            mod_forumng::NO_GROUPS : $this->discussionfields->groupid;
+
+        // Check forum view permission and group access
+        if (!$this->forum->can_access_group($groupid, false, $userid)) {
+            return false;
+        }
+
+        // Check viewdiscussion
+        if (!has_capability('mod/forumng:viewdiscussion', $this->forum->get_context(), $userid)) {
+            return false;
+        }
+
+        // Let forum type check permission too
+        if (!$this->forum->get_type()->can_view_discussion($this, $userid)) {
+            return false;
+        }
+
+        // Check time limits / delete
+        if (!$this->is_currently_visible() &&
+            !has_capability('mod/forumng:viewallposts', $this->forum->get_context(), $userid)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Makes security checks for viewing this discussion. Will not return if
+     * user cannot view it.
+     * This function should be a complete access check. It calls the forum's
+     * equivalent method.
+     * @param int $userid ID of user to check for
+     */
+    public function require_view($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // If this is a 'all groups' post, then we only require access to the
+        // 'no groups' forum view (any group can see it)
+        $groupid = is_null($this->discussionfields->groupid) ?
+            mod_forumng::NO_GROUPS : $this->discussionfields->groupid;
+
+        // Check forum view permission and group access
+        $this->forum->require_view($groupid, $userid, true);
+
+        // Check viewdiscussion
+        require_capability('mod/forumng:viewdiscussion',
+            $this->forum->get_context(), $userid);
+
+        // Let forum type check permission too
+        if (!$this->forum->get_type()->can_view_discussion($this, $userid)) {
+            print_error('error_cannotviewdiscussion', 'forumng');
+        }
+
+        // Check time limits / delete
+        if ($this->is_currently_visible()) {
+            // Not deleted/no time limit, ordinary students are allowed to see
+            return;
+        }
+
+        // The post is outside the permitted time limit, so you need
+        // special permission to view it
+        require_capability('mod/forumng:viewallposts',
+            $this->forum->get_context(), $userid);
+    }
+
+    /**
+     * Requires that the user can edit discussion options, otherwise prints
+     * an error. (You need the managediscussions capability for this.)
+     * Editing options is not affected by locks.
+     */
+    public function require_edit() {
+        $this->require_view();
+        if (!$this->can_manage()) {
+            print_error('error_cannotmanagediscussion', 'forumng');
+        }
+    }
+
+    /**
+     * Checks whether the user can split this discussion, assuming that they
+     * can view it. (The split permission also works for join.)
+     * @return bool True if they are allowed to split
+     */
+    public function can_split(&$whynot, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // Check if discussion is locked
+        if ($this->is_locked()) {
+            $whynot = 'edit_locked';
+            return false;
+        }
+
+        // Check user has capability
+        if (!has_capability('mod/forumng:splitdiscussions',
+                $this->forum->get_context(), $userid)) {
+            $whynot = 'edit_nopermission';
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * When carrying out actions on discussion, this permission should be
+     * checked to ensure that the user is allowed to write to that discussion's
+     * group.
+     * @param int $userid User ID, 0 = current
+     * @return bool True if they're allowed
+     */
+    public function can_write_to_group($userid=0) {
+        // Get group id
+        $groupid = is_null($this->discussionfields->groupid) ?
+            mod_forumng::NO_GROUPS : $this->discussionfields->groupid;
+
+        // Check forum group access
+        return $this->forum->can_access_group($groupid, true, $userid);
+    }
+
+    /**
+     * Checks if you are allowed to manage settings of this discussion.
+     * @param int $userid User ID, 0 = current
+     * @return bool True if they're allowed
+     */
+    public function can_manage($userid=0) {
+        return $this->can_write_to_group($userid) &&
+            $this->forum->can_manage_discussions($userid);
+    }
+    /**
+     * Checks whether the user can subscribe this discussion
+     * @return bool True if this user is allowed to subscribe
+     */
+    public function can_subscribe($userid=0) {
+        // If PARTIALLY_SUBSCRIBED:1 or FULLY_SUBSCRIBED:2 or THIS_GROUP_SUBSCRIBED:5 return false.
+        if ($this->is_subscribed($userid) != mod_forumng::NOT_SUBSCRIBED &&
+            $this->is_subscribed($userid) != mod_forumng::THIS_GROUP_NOT_SUBSCRIBED) {
+            return false;
+        }
+        if (!$this->get_forum()->can_change_subscription($userid)) {
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * Checks whether the user can unsubscribe this discussion
+     * @return bool True if this user is allowed to unsubscribe
+     */
+    public function can_unsubscribe($userid=0) {
+        $issubscribed = $this->is_subscribed($userid);
+        if ($issubscribed == mod_forumng::PARTIALLY_SUBSCRIBED &&
+            $this->get_forum()->can_change_subscription($userid)) {
+                return true;
+        }
+        return false;
+    }
+
+    // UI
+    // //.
+
+    /**
+     * Given a list of post IDs, displays these selected posts in a manner
+     * suitable for use in email. Note that this function is now used for
+     * a number of other purposes in addition to email.
+     * @param array $postids Array of IDs for posts to include, or false
+     *   to include all posts
+     * @param string $alltext Output variable; text of all posts will be
+     *   appended (text format)
+     * @param string $allhtml Output variable; text of all posts will be
+     *   appended (HTML format)
+     * @param array $extraoptions Set or override options when displaying posts
+     */
+    public function build_selected_posts_email($postids, &$alltext, &$allhtml,
+            $extraoptions = array()) {
+        global $USER;
+        $list = array();
+        $rootpost = $this->get_root_post();
+        $rootpost->list_child_ids($list);
+        foreach ($list as $postid) {
+            if ($postids && !in_array($postid, $postids)) {
+                continue;
+            }
+            $post = $rootpost->find_child($postid);
+            $text = '';
+            $html = '';
+            $post->build_email(null, $subject, $text, $html, true,
+                false, has_capability('moodle/site:viewfullnames',
+                    $this->get_forum()->get_context()), current_language(),
+                $USER->timezone, true, true, $extraoptions);
+
+            // Don't put <hr> after the first post or after one which we didn't
+            // actually print (deleted posts)
+            if ($alltext != '' && $text !== '') {
+                $alltext .= "\n" . mod_forumng_cron::EMAIL_DIVIDER . "\n";
+                $allhtml .= '<hr size="1" noshade="noshade" />';
+            }
+            if ($text !== '') {
+                $alltext .= $text;
+                $allhtml .= $html;
+            }
+        }
+
+        // Remove crosslinks to posts that do not exist
+        $this->posthtml = $allhtml;
+        $allhtml = preg_replace_callback(
+            '~<a class="forumng-parentlink" href="#p([0-9]+)">([0-9]+)</a>~',
+            array($this, 'internal_build_selected_posts_replacer'), $allhtml);
+    }
+
+    public function internal_build_selected_posts_replacer($matches) {
+        if (strpos($this->posthtml, ' id="p' . $matches[1] . '"') === false) {
+            return $matches[2];
+        } else {
+            return $matches[0];
+        }
+    }
+
+    /**
+     * Initialises the $PAGE variable for the page.
+     * @param moodle_url Page URL
+     * @param string $pagename Name of page
+     * @return mod_forumng_renderer Renderer for use to output header etc
+     */
+    public function init_page($url, $pagename) {
+        // No blocks on discussion pages
+        global $PAGE;
+        $PAGE->set_pagelayout('base');
+
+        // Include discussion URL
+        $navigation = array(
+            shorten_text(htmlspecialchars($this->get_subject())) =>
+            $this->get_moodle_url());
+
+        // Standard forum init
+        return $this->forum->init_page($url, $pagename, $navigation);
+    }
+
+    /**
+     * Displays row of buttons that go along the bottom of a discussion.
+     * @return string HTML code for all feature buttons in this discussion
+     */
+    public function display_forumngfeature_discussions() {
+        global $PAGE;
+        // Get forum type
+        $type = $this->get_forum()->get_type();
+
+        // Print discussion features
+        $features = '';
+        foreach (forumngfeature_discussion::get_all() as $feature) {
+            if ($feature->should_display($this) &&
+                $type->allow_forumngfeature_discussion($this, $feature)) {
+                $features .= html_writer::start_div('forumngfeature_dis_' . $feature->get_id());
+                $features .= $feature->display($this);
+                $features .= html_writer::end_div();
+            }
+        }
+        if ($features) {
+            $PAGE->requires->string_for_js('tooltip_show_features', 'mod_forumng');
+            $PAGE->requires->js_call_amd('mod_forumng/featurebtns', 'initMobileHide');
+            return '<div id="forumng-features">' . $features . '</div>';
+        } else {
+            return '';
+        }
+    }
+
+    /**
+     * Display subscribe options for this discussion.
+     * @return string HTML code for this area
+     */
+    public function display_subscribe_options() {
+        if (!$this->can_subscribe() && !$this->can_unsubscribe()) {
+            return '';
+        } else {
+            $out = mod_forumng_utils::get_renderer();
+            return $out->render_discussion_subscribe_option($this, $this->can_subscribe());
+        }
+    }
+
+    public function display_link_back_to_forum() {
+        // Print link back to discussion list
+        print '<div id="forumng-arrowback">' .
+            link_arrow_left($this->get_forum()->get_name(),
+                'view.php?' . $this->get_forum()->get_link_params(mod_forumng::PARAM_HTML)) .
+                 '</div>';
+    }
+
+
+    /**
+     * Subscribe a user to this discussion. (Assuming it permits manual subscribe/
+     * unsubscribe.)
+     * @param $userid User ID (default current)
+     * @param $log True to log this
+     */
+    public function subscribe($userid=0, $log=true) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $params = array($userid, $this->discussionfields->id);
+        // For shared forums, we subscribe to a specific clone
+        if ($this->get_forum()->is_shared()) {
+            $clonecmid = $this->get_forum()->get_course_module_id();
+            $clonevalue = '=?';
+            $params[] = $clonecmid;
+        } else {
+            $clonecmid = null;
+            $clonevalue = 'IS NULL';
+        }
+        $transaction = $DB->start_delegated_transaction();
+
+        // Clear any previous subscriptions to this discussion from the same user if any.
+        $DB->execute(
+            "DELETE FROM {forumng_subscriptions} " .
+            "WHERE userid = ? AND discussionid = ? AND clonecmid " . $clonevalue, $params);
+
+        $subrecord = new StdClass;
+        $subrecord->userid = $userid;
+        $subrecord->forumngid = $this->get_forum()->get_id();
+        $subrecord->subscribed = 1;
+        $subrecord->discussionid = $this->discussionfields->id;
+        $subrecord->clonecmid = $clonecmid;
+        $DB->insert_record('forumng_subscriptions', $subrecord);
+        $transaction->allow_commit();
+
+        if ($log) {
+            $this->log('subscribe', $userid . ' discussion ' . $this->get_id());
+        }
+    }
+
+    /**
+     * Unsubscribe a user from this discussion.
+     * @param $userid User ID (default current)
+     * @param $log True to log this
+     */
+    public function unsubscribe($userid=0, $log=true) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $params = array($userid, $this->discussionfields->id);
+        // For shared forums, we subscribe to a specific clone
+        if ($this->get_forum()->is_shared()) {
+            $clonecmid = $this->get_forum()->get_course_module_id();
+            $clonevalue = '=?';
+            $params[] = $clonecmid;
+        } else {
+            $clonecmid = null;
+            $clonevalue = 'IS NULL';
+        }
+        $transaction = $DB->start_delegated_transaction();
+        // Clear any subscriptions to this discussion from the same user if any.
+        $DB->execute(
+            "DELETE FROM {forumng_subscriptions} " .
+            "WHERE userid = ? AND discussionid = ? AND clonecmid " . $clonevalue, $params);
+        $transaction->allow_commit();
+
+        if ($log) {
+            $this->log('unsubscribe', $userid . ' discussion ' . $this->get_id());
+        }
+    }
+
+    /**
+     * @return string HTML skip link to unread posts
+     */
+    public function display_unread_skip_link() {
+        if ($this->get_num_unread_posts() == 0 || $this->get_num_unread_posts() == ''
+                || $this->get_root_post()->is_unread()) {
+            return '';
+        }
+
+        $out = mod_forumng_utils::get_renderer();
+        return $out->render_unread_skip_link();
+    }
+
+    /**
+     * @return string HTML links for RSS/Atom feeds to this discussion (if
+     *   enabled etc)
+     */
+    public function display_feed_links() {
+        // Check they're allowed to see it
+        if ($this->get_forum()->get_effective_feed_option()
+            != mod_forumng::FEEDTYPE_ALL_POSTS) {
+            return '';
+        }
+
+        $out = mod_forumng_utils::get_renderer();
+        return $out->render_feed_links($this->get_feed_url(mod_forumng::FEEDFORMAT_ATOM),
+                $this->get_feed_url(mod_forumng::FEEDFORMAT_RSS));
+    }
+
+    // Feeds
+    /*//////*/
+
+    /**
+     * Gets URL for an Atom/RSS feed to this discussion.
+     * @param int $feedformat FEEDFORMAT_xx constant
+     * @param int $userid User ID or 0 for current
+     * @return string URL for feed
+     */
+    public function get_feed_url($feedformat, $userid=0) {
+        global $CFG;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $groupid = $this->get_group_id();
+
+        return $CFG->wwwroot . '/mod/forumng/feed.php?' .
+            $this->get_link_params(mod_forumng::PARAM_PLAIN) .
+            '&user=' . $userid .
+            '&key=' . $this->get_forum()->get_feed_key($groupid, $userid) .
+            '&format=' . ($feedformat == mod_forumng::FEEDFORMAT_RSS ? 'rss' : 'atom');
+    }
+
+    /**
+     * Obtains list of posts to include in an Atom/RSS feed.
+     * @param int $userid User ID
+     * @return array Array of mod_forumng_post objects in date order (newest first)
+     */
+    public function get_feed_posts($userid) {
+        return $this->forum->get_feed_posts(0, $userid, $this);
+    }
+
+    // Completion
+    /*///////////*/
+
+    /**
+     * Updates completion status based on changes made to entire discussion.
+     * @param bool $positive True if the changes will make things complete
+     *   that were previously incomplete; false if they will make things
+     *   incomplete that were previously complete
+     */
+    private function update_completion($positive) {
+        // Get list of affected users (if any)
+        $users = array();
+        if ($this->forum->get_completion_replies() ||
+            $this->forum->get_completion_posts()) {
+            // Affected users = everyone who posted
+            $rootpost = $this->get_root_post();
+            $posts = array();
+            $rootpost->build_linear_children($posts);
+            foreach ($posts as $post) {
+                $users[$post->get_user()->id] = true;
+            }
+        } else if ($this->forum->get_completion_discussions()) {
+            // Affected users = discussion poster only
+            $users[$this->get_poster()->id] = true;
+        }
+
+        foreach ($users as $userid => $junk) {
+            $course = $this->get_course();
+            $cm = $this->get_course_module();
+            $completion = new completion_info($course);
+            $completion->update_state($cm, $positive ? COMPLETION_COMPLETE : COMPLETION_INCOMPLETE,
+                    $userid);
+        }
+    }
+
+    // Tags.
+    /*//////*/
+
+    /**
+     * Get tags for this discussion.
+     * @param $htmldecode bool Set true to decode html special chars (for form field)
+     * @return array of sorted tags or false if no tags are found.
+     */
+    public function get_tags($htmldecode = false) {
+        global $CFG;
+        require_once($CFG->dirroot . '/tag/lib.php');
+        $tags = null;
+        $forum = $this->get_forum();
+        if ($forum->get_tags_enabled()) {
+            $tags = core_tag_tag::get_item_tags_array('mod_forumng', 'forumng_discussions', $this->get_id());
+            $tags = array_map('strtolower', $tags);
+            if ($htmldecode) {
+                $tags = array_map('htmlspecialchars_decode', $tags);
+            }
+            // Sort tags keeping id.
+            asort($tags);
+            return $tags;
+        } else {
+            return false;
+        }
+
+    }
+}
diff --git a/mod/forumng/mod_forumng_discussion_list.php b/mod/forumng/mod_forumng_discussion_list.php
new file mode 100644
index 0000000..62d8834
--- /dev/null
+++ b/mod/forumng/mod_forumng_discussion_list.php
@@ -0,0 +1,134 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * A list of discussions, suitable for displaying on the forum index page. The
+ * discussions may be divided into two categories: sticky and normal discussions.
+ * Each discussion object contains enough information to display its entry on
+ * the forum index, but does not (yet) contain actual messages.
+ * @see mod_forumng_discussion
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_discussion_list {
+    private $page, $pagecount, $discussioncount;
+    private $normaldiscussions, $stickydiscussions;
+
+    /**
+     * Constructs list (internal use only).
+     * @param int $page Page number (1-based)
+     * @param int $pagecount Count of pages
+     * @param int $discussioncount Count of all discussions
+     */
+    public function __construct($page, $pagecount, $discussioncount) {
+        $this->page = $page;
+        $this->pagecount = $pagecount;
+        $this->discussioncount = $discussioncount;
+        $this->normaldiscussions = array();
+        $this->stickydiscussions = array();
+    }
+
+    /**
+     * Adds a discussion to the list (internal use only).
+     * @param mod_forumng_discussion $discussion
+     */
+    public function add_discussion($discussion) {
+        if ($discussion->is_sticky() && !$discussion->is_deleted()) {
+            $this->stickydiscussions[$discussion->get_id()]=$discussion;
+        } else {
+            $this->normaldiscussions[$discussion->get_id()]=$discussion;
+        }
+    }
+
+    /**
+     * @return array Array of all sticky discussions (mod_forumng_discussion objects)
+     *   in the order they should be displayed; empty array if none
+     */
+    public function get_sticky_discussions() {
+        return $this->stickydiscussions;
+    }
+
+    /**
+     * @return array Array of all normal discussions (mod_forumng_discussion objects)
+     *   in the order they should be displayed; empty array if none
+     */
+    public function get_normal_discussions() {
+        return $this->normaldiscussions;
+    }
+
+    /**
+     * @return int Page index - 1 is first page
+     */
+    public function get_page_index() {
+        return $this->page;
+    }
+
+    /**
+     * @return int Total number of available pages - e.g. if this is 6,
+     *   then pages 1..6 are available.
+     */
+    public function get_total_pages() {
+        return $this->pagecount;
+    }
+
+    /**
+     * @return int Total number of discussions (not just the ones included
+     *   in this list)
+     */
+    public function get_total_discussions() {
+        return $this->discussioncount;
+    }
+
+    /**
+     * @return bool True if there are no discussions in this list
+     *   (get_sticky_discussions and get_normal_discussions both return
+     *   empty arrrays)
+     */
+    public function is_empty() {
+        return count($this->stickydiscussions)+count($this->normaldiscussions)==0;
+    }
+
+    /**
+     * Displays a Moodle standard paging bar for this result.
+     * @param string $baseurl Base URL (may include page= if you like)
+     * @return string HTML code for paging bar
+     */
+    public function display_paging_bar($baseurl) {
+        // Don't do anything if no pages
+        if ($this->pagecount < 2) {
+            return '';
+        }
+
+        // Remove page= if included and append &
+        $baseurl = preg_replace('~&page=[0-9]+~', '', $baseurl) . '&';
+        $out = mod_forumng_utils::get_renderer();
+        $result = $out->render(new paging_bar($this->pagecount,
+                $this->page-1, 1, htmlspecialchars($baseurl)));
+        // This is really damn annoying but discussionlist pages start from 1
+        // not 0, so need to change the params
+        $result = preg_replace_callback('~(&amp;page=)([0-9]+)~',
+            'mod_forumng_discussion_list::munge_page_number', $result);
+
+        return $result;
+    }
+
+    private static function munge_page_number($matches) {
+        // Always add &page= to the paging bar url no matter if it is the first page.
+        return $matches[1] . ($matches[2]+1);
+    }
+}
diff --git a/mod/forumng/mod_forumng_draft.php b/mod/forumng/mod_forumng_draft.php
new file mode 100644
index 0000000..774b64b
--- /dev/null
+++ b/mod/forumng/mod_forumng_draft.php
@@ -0,0 +1,402 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Represents a draft forum post (reply or discussion), as stored in the
+ * forumng_drafts database table.
+ * @see forum
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_draft {
+    private $draftfields;
+
+    /**
+     * Queries for draft posts, including necessary joins with other fields.
+     * @param string $where Text of WHERE clause e.g. 'fdr.id=14'. May refer
+     *   to aliases fdr (drafts), fd (discussions), fp (posts; post being
+     *   replied to), fpfirst (first post in discussion), and u (user being
+     *   replied to)
+     * @return array Array of mod_forumng_draft objects (empty if none)
+     */
+    public static function query_drafts($where, $whereparams) {
+        global $DB;
+        $result = array();
+        $rs = $DB->get_recordset_sql("
+SELECT
+    fdr.*, fd.id AS discussionid, fpfirst.subject AS discussionsubject,
+    f.course AS courseid,
+    " . mod_forumng_utils::select_username_fields('u', false) . "
+FROM
+    {forumng_drafts} fdr
+    LEFT JOIN {forumng_posts} fp ON fdr.parentpostid = fp.id
+    LEFT JOIN {forumng_discussions} fd ON fp.discussionid = fd.id
+    LEFT JOIN {forumng_posts} fpfirst ON fd.postid = fpfirst.id
+    LEFT JOIN {user} u ON fp.userid = u.id
+    INNER JOIN {forumng} f ON fdr.forumngid = f.id
+WHERE
+    $where
+ORDER BY
+    fdr.saved DESC", $whereparams);
+        foreach ($rs as $rec) {
+            $result[] = new mod_forumng_draft($rec);
+        }
+        $rs->close();
+        return $result;
+    }
+
+    /**
+     * @param int $draftid ID of draft
+     * @return mod_forumng_draft Draft post
+     */
+    public static function get_from_id($draftid) {
+        $posts = self::query_drafts("fdr.id = ?", array($draftid));
+        if (count($posts) == 0) {
+            throw new moodle_exception('error_draftnotfound', 'forumng', '');
+        }
+        return reset($posts);
+    }
+
+    /**
+     * Constructs draft post.
+     * @param object $draftfields Fields from query_drafts query
+     */
+    private function __construct($draftfields) {
+        $draftfields->replytouser =
+            mod_forumng_utils::extract_subobject($draftfields, 'u_');
+        $this->draftfields = $draftfields;
+    }
+
+    /**
+     * Saves a new draft message.
+     * @param int $forumngid ID of forum
+     * @param int $groupid Group ID (null if none)
+     * @param int $parentpostid ID of post this is in reply to, or 0 for
+     *   a new discussion
+     * @param string $subject Subject of draft post
+     * @param string $message Message of draft post
+     * @param int $messageformat Format (FORMAT_xx) of message
+     * @param bool $attachments True if draft contains attachments
+     * @param string $options Options (null if none)
+     * @param int $userid User ID or 0 for current
+     * @return int ID of new draft
+     */
+    public static function save_new($forum, $groupid, $parentpostid, $subject,
+            $message, $messageformat, $attachments, $options, $userid=0) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $serializedoptions = $options ? serialize($options) : null;
+        $record = (object)array('userid' => $userid, 'forumngid' => $forum->get_id(),
+            'parentpostid' => ($parentpostid ? $parentpostid : null),
+            'subject' => $subject, 'message' => $message,
+            'messageformat' => $messageformat,
+            'attachments' => $attachments ? 1 : 0,
+            'saved' => time(), 'groupid' => $groupid, 'options' => $serializedoptions);
+        return $DB->insert_record('forumng_drafts', $record);
+    }
+
+    /**
+     * Updates the message field of a draft entry. This is necessary in some cases where
+     * the user includes images etc. in the message; these are initially included using
+     * a draft URL which has to be changed to a special relative path on convert, and we
+     * can't do that until the draft ID is known. Additionally, we don't have a draft object
+     * at that point, hence use of static function.
+     * @param int $draftid ID of draft to update
+     * @param string $newtext Updated message text
+     */
+    public static function update_message_for_files($draftid, $newtext) {
+        global $DB;
+        $DB->set_field('forumng_drafts', 'message', $newtext, array('id'=>$draftid));
+    }
+
+    /**
+     * Updates an existing draft message.
+     * @param string $subject Subject of draft post
+     * @param string $message Message of draft post
+     * @param int $messageformat Format (FORMAT_xx) of message
+     * @param bool $attachments True if draft now has attachments
+     * @param int $groupid Group ID (null if none)
+     * @param object $options Options (null if none)
+     */
+    public function update($subject, $message,
+            $messageformat, $attachments, $groupid, $options) {
+        global $DB;
+
+        $serializedoptions = $options ? serialize($options) : null;
+
+        $record = (object)array(
+            'id' => $this->get_id(),
+            'subject' => $subject, 'message' => $message,
+            'messageformat' => $messageformat, 'attachments' => $attachments ? 1 : 0,
+            'groupid' => $groupid, 'options' => $serializedoptions, 'saved' => time());
+
+        // Do database update
+        $DB->update_record('forumng_drafts', $record);
+    }
+
+    /**
+     * Deletes an existing draft message.
+     * @param object $filecontext Context used for files (=forum context)
+     */
+    public function delete($filecontext) {
+        global $DB;
+        $transaction = $DB->start_delegated_transaction();
+
+        // Delete record
+        $DB->delete_records('forumng_drafts', array('id' => $this->draftfields->id));
+
+        // Delete attachments
+        $fs = get_file_storage();
+        if ($this->has_attachments()) {
+            $fs->delete_area_files($filecontext->id, 'mod_forumng', 'draft', $this->get_id());
+        }
+
+        // Delete message files
+        $fs->delete_area_files($filecontext->id, 'mod_forumng', 'draftmessage', $this->get_id());
+
+        $transaction->allow_commit();
+    }
+
+    // Direct fields
+    /*//////////////*/
+
+    /**
+     * @return int ID of this draft
+     */
+    public function get_id() {
+        return $this->draftfields->id;
+    }
+
+    /**
+     * @return int ID of user making draft
+     */
+    public function get_user_id() {
+        return $this->draftfields->userid;
+    }
+
+    /**
+     * @return int ID of forum containing draft
+     */
+    public function get_forumng_id() {
+        return $this->draftfields->forumngid;
+    }
+
+    /**
+     * @return int Time (seconds since epoch) this draft was saved
+     */
+    public function get_saved() {
+        return $this->draftfields->saved;
+    }
+
+    /**
+     * @return string Message subject
+     */
+    public function get_subject() {
+        return $this->draftfields->subject;
+    }
+
+    /**
+     * @return string Message content
+     */
+    public function get_raw_message() {
+        return $this->draftfields->message;
+    }
+
+    /**
+     * @param mod_forumng $forum Forum object
+     * @return string Message after format_text and replacing file URLs
+     */
+    public function get_formatted_message($forum) {
+        $context = $forum->get_context(true);
+        $text = file_rewrite_pluginfile_urls($this->draftfields->message, 'pluginfile.php',
+            $context->id, 'mod_forumng', 'draftmessage', $this->draftfields->id);
+        $textoptions = new stdClass();
+        // Don't put a <p> tag round post
+        $textoptions->para = false;
+        // Does not indicate that we trust the text, only that the
+        // TRUSTTEXT marker would be supported. At present though it isn't (hm)
+        $textoptions->trusttext = false;
+        if (trusttext_active() && $this->get_user_id() && has_capability('moodle/site:trustcontent',
+                $context, $this->get_user_id())) {
+            // Support trusted text when initial author is safe.
+            $textoptions->trusted = true;
+        }
+        $textoptions->context = $context;
+        return format_text($text, $this->draftfields->messageformat, $textoptions);
+    }
+
+    /**
+     * @return int Format (FORMAT_xx) of message content
+     */
+    public function get_format() {
+        return $this->draftfields->messageformat;
+    }
+
+    /**
+     * @return object Options object (may be null)
+     */
+    public function get_options() {
+        return $this->draftfields->options
+            ? unserialize($this->draftfields->options) : null;
+    }
+
+    // Discussion-related information from joins
+    /*//////////////////////////////////////////*/
+
+    /**
+     * @return bool True if this is a new discussion, false if it's a reply
+     */
+    public function is_new_discussion() {
+        return is_null($this->draftfields->discussionid);
+    }
+
+    /**
+     * @return bool True if this is a reply, false if it's a new discussion
+     */
+    public function is_reply() {
+        return !is_null($this->draftfields->discussionid);
+    }
+
+    /**
+     * @return int ID of group for new discussion (this field is not set for
+     *   replies)
+     */
+    public function get_group_id() {
+        return $this->draftfields->groupid;
+    }
+
+    /**
+     * Utility function to check this draft is about a reply in an existing
+     * discussion.
+     * @throws mod_forumng_exception If this is a new discussion (so no id yet)
+     */
+    private function check_discussion_exists() {
+        if (!$this->draftfields->discussionid) {
+            throw new invalid_state_exception("Draft message does not have discussion");
+        }
+    }
+
+    /**
+     * @return int Discussion id
+     * @throws mod_forumng_exception If this is a new discussion (so no id yet)
+     */
+    public function get_discussion_id() {
+        $this->check_discussion_exists();
+        return $this->draftfields->discussionid;
+    }
+
+    /**
+     * @return string Discussion subject
+     * @throws mod_forumng_exception If this is a new discussion
+     */
+    public function get_discussion_subject() {
+        $this->check_discussion_exists();
+        return $this->draftfields->discussionsubject;
+    }
+
+    /**
+     * @return object Moodle user object (selected fields) for post being
+     *   replied to
+     * @throws mod_forumng_exception If this is a new discussion
+     */
+    public function get_reply_to_user() {
+        $this->check_discussion_exists();
+        return $this->draftfields->replytouser;
+    }
+
+    /**
+     * @return int Parent post that is being replied to
+     * @throws mod_forumng_exception If this is a new discussion
+     */
+    public function get_parent_post_id() {
+        $this->check_discussion_exists();
+        return $this->draftfields->parentpostid;
+    }
+
+    // Attachments
+    /*////////////*/
+
+    /**
+     * @return bool True if this draft has any attachments
+     */
+    public function has_attachments() {
+        return $this->draftfields->attachments ? true : false;
+    }
+
+    // UI
+    /*///*/
+
+    /**
+     * Prints the content of this draft as a JavaScript variable (including
+     * surrounding script tag).
+     * @param mod_forumng $forum Forum object
+     * @return string HTML (including JS) code to place in page
+     */
+    public function prepare_edit_js($forum) {
+        global $USER;
+
+        // Copy fields
+        $fields = clone($this->draftfields);
+
+        // Prepare file areas
+        $fileoptions = array('subdirs'=>false, 'maxbytes'=>$forum->get_max_bytes());
+        $filecontext = $forum->get_context(true);
+
+        // Prepare draft area for attachments
+        $draftitemid = 0;
+        file_prepare_draft_area($draftitemid, $filecontext->id,
+                'mod_forumng', 'draft', $this->get_id(), $fileoptions);
+
+        // Prepare draft area for message files
+        $messagedraftitemid = 0;
+        $fields->message = file_prepare_draft_area($messagedraftitemid, $filecontext->id,
+                'mod_forumng', 'draftmessage', $this->get_id(), $fileoptions, $fields->message);
+
+        // Get list of files for main attachment area
+        $options = file_get_drafarea_files($draftitemid, '/');
+        $usercontext = context_user::instance($USER->id);
+        $fs = get_file_storage();
+        $files = $fs->get_area_files($usercontext->id, 'user', 'draft',
+                $options->itemid, 'id', false);
+        $options->filecount = count($files);
+        $fields->attachmentoptions = $options;
+
+        // Get list of files for message area
+        $messageoptions = file_get_drafarea_files($messagedraftitemid, '/');
+        $files = $fs->get_area_files($usercontext->id, 'user', 'draft',
+                $messageoptions->itemid, 'id', false);
+        $messageoptions->filecount = count($files);
+        $fields->messageoptions = $messageoptions;
+
+        // Unset things we don't need in JS
+        unset($fields->discussionid);
+        unset($fields->discussionsubject);
+        unset($fields->courseid);
+        unset($fields->replytouser);
+        unset($fields->options);
+        unset($fields->attachments);
+
+        // Add options
+        foreach ((array)($this->get_options()) as $key => $value) {
+            $fields->{$key} = $value;
+        }
+
+        return "<script type='text/javascript'>\n" .
+                "var forumng_draft = " . json_encode($fields) . ";\n</script>\n";
+    }
+}
diff --git a/mod/forumng/mod_forumng_file_exception.php b/mod/forumng/mod_forumng_file_exception.php
new file mode 100644
index 0000000..9b15e64
--- /dev/null
+++ b/mod/forumng/mod_forumng_file_exception.php
@@ -0,0 +1,32 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Exception thrown when there is a filesystem problem.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_file_exception extends moodle_exception {
+    /**
+     * Constructor.
+     * @param string $error Actual error message (not displayed to user unless debug is turned on)
+     */
+    public function __construct($error) {
+        parent::__construct('error_fileexception', 'forumng', '', '', $error);
+    }
+}
diff --git a/mod/forumng/mod_forumng_mail_list.php b/mod/forumng/mod_forumng_mail_list.php
new file mode 100644
index 0000000..1bf495e
--- /dev/null
+++ b/mod/forumng/mod_forumng_mail_list.php
@@ -0,0 +1,382 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once(dirname(__FILE__).'/mod_forumng.php');
+
+/**
+ * Manages a list (based on a database recordset, so not all stored in memory)
+ * of posts which need to be emailed to users.
+ *
+ * The list only includes posts which are due to be mailed.
+ * It does not include:
+ * - Posts older than 48 hours (this is to avoid cron sending out a million old
+ *   posts if it has never been run before), with exception of timed posts that
+ *   have just become due
+ * - Posts which have been deleted, or old versions of edited posts.
+ * - Any posts which don't belong to a valid discussion, forum, and
+ *   course-module
+ * - Posts which are timed and not yet due - even if user has permission to
+ *   see them (it is more useful for the timed posts to be mailed out at the
+ *   'right time' even to these users, plus is easier)
+ *
+ * When used with shared forums, this will return multiple copies of each
+ * message (one from each shared forum including the original one).
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_mail_list {
+    /** Config flag used to prevent sending mails twice */
+    const PENDING_MARK_MAILED = 'pending_mark_mailed';
+
+    private $rs;
+    private $time;
+
+    private $forum, $discussion;
+    private $storedrecord;
+
+    private $postcount;
+
+    /**
+     * Creates the mail queue and runs query to obtain list of posts that should
+     * be mailed.
+     * @param bool $tracetimes True if it should call mtrace to display
+     *   performance information
+     */
+    public function __construct($tracetimes) {
+        global $DB, $CFG;
+        $this->time = time();
+        $this->forum = null;
+        $this->discussion = null;
+        $this->storedrecord = null;
+        $this->postcount = 0;
+
+        // Check if an earlier run got aborted. In that case we mark all
+        // messages as mailed anyway because it's better to skip some than
+        // to send out double-posts.
+        if ($pending = get_config('forumng', $this->get_pending_flag_name())) {
+            $this->mark_mailed($pending);
+        }
+        // Note that we are mid-run
+        set_config($this->get_pending_flag_name(), $this->time, 'forumng');
+
+        list ($wheresql, $whereparams) = $this->get_query_where($this->time);
+        $querychunk = $this->get_query_from() . $wheresql;
+        $this->rs = $DB->get_recordset_sql($sql="
+SELECT
+    ".mod_forumng_utils::select_mod_forumng_fields('f').",
+    ".mod_forumng_utils::select_discussion_fields('fd').",
+    ".mod_forumng_utils::select_post_fields('discussionpost').",
+    ".mod_forumng_utils::select_post_fields('fp').",
+    ".mod_forumng_utils::select_post_fields('reply').",
+    ".mod_forumng_utils::select_course_module_fields('cm').",
+    ".mod_forumng_utils::select_context_fields('x').",
+    ".mod_forumng_utils::select_username_fields('u', true).",
+    ".mod_forumng_utils::select_username_fields('eu').",
+    ".mod_forumng_utils::select_username_fields('replyu').",
+    ".mod_forumng_utils::select_username_fields('replyeu').",
+    ".mod_forumng_utils::select_course_fields('c').",
+    clonecm.id AS cloneid
+$querychunk
+ORDER BY
+    clonecm.course, f.id, fd.id, fp.id", $whereparams);
+
+        if (!empty($CFG->forumng_cronultradebug)) {
+            $easyread = mod_forumng_utils::debug_query_for_reading($sql, $whereparams);
+            mtrace("\n\n" . $easyread . "\n\n");
+        }
+    }
+
+    /**
+     * Obtains the next post in current forum.
+     * @param mod_forumng_post &$post Output variable: Receives the post object
+     * @param mod_forumng_post &$inreplyto Output variable: Receives the post this one was
+     *   replying to
+     * @return bool True if a post could be retrieved, false if there are
+     *   no more posts in this forum (call next_forum)
+     */
+    public function next_post(&$post, &$inreplyto) {
+        // Make sure we have a forum/discussion setup
+        if ($this->forum==null || $this->discussion==null) {
+            throw new coding_exception("Cannot call next_post when not inside
+                forum and discussion");
+        }
+
+        // Get record
+        if ($this->storedrecord) {
+            $record = $this->storedrecord;
+            $this->storedrecord = null;
+        } else {
+            if (!$this->rs->valid()) {
+                // End of the line. Mark everything as mailed
+                $this->mark_mailed($this->time);
+                $this->rs->close();
+                $this->rs = null;
+                $this->discussion = null;
+                return false;
+            }
+            $record = $this->rs->current();
+            $this->rs->next();
+        }
+
+        // If record discussion is not the same as current discussion
+        if ($record->fd_id != $this->discussion->get_id()
+            || $record->cloneid != $this->forum->get_course_module_id()) {
+            $this->storedrecord = $record;
+            $this->discussion = null;
+            return false;
+        }
+
+        // Get post details including the joined user info
+        $postfields = mod_forumng_utils::extract_subobject($record, 'fp_');
+        mod_forumng_utils::copy_subobject($postfields, $record, 'u_');
+        mod_forumng_utils::copy_subobject($postfields, $record, 'eu_');
+        $post = new mod_forumng_post($this->discussion, $postfields);
+        if ($record->reply_id) {
+            $postfields = mod_forumng_utils::extract_subobject($record, 'reply_');
+            mod_forumng_utils::copy_subobject($postfields, $record, 'replyu_', 'u_');
+            mod_forumng_utils::copy_subobject($postfields, $record, 'replyeu_', 'eu_');
+            $inreplyto = new mod_forumng_post($this->discussion, $postfields);
+        } else {
+            $inreplyto = null;
+        }
+
+        $this->postcount++;
+        return true;
+    }
+
+    /**
+     * Obtains the next discussion in the list.
+     * @param mod_forumng_discussion $discussion Discussion
+     */
+    public function next_discussion(&$discussion) {
+        // Make sure we have a forum setup but no discussion
+        if ($this->forum==null) {
+            throw new coding_exception("Cannot call next_discussion when not inside
+                forum");
+        }
+        // Skip if required to get to new discussion
+        while ($this->discussion!=null) {
+            $this->next_post($post, $inreplyto);
+        }
+
+        // Get record
+        if ($this->storedrecord) {
+            $record = $this->storedrecord;
+            $this->storedrecord = null;
+        } else if (!$this->rs) {
+            // Already used entire list and closed recordset
+            $this->forum = null;
+            return false;
+        } else {
+            if (!$this->rs->valid()) {
+                // End of the line. Mark everything as mailed
+                $this->mark_mailed($this->time);
+                $this->rs->close();
+                $this->forum = null;
+                $this->rs = null;
+                return false;
+            }
+            $record = $this->rs->current();
+            $this->rs->next();
+        }
+
+        // If record forums are not the same as current forum
+        if ($record->cloneid != $this->forum->get_course_module_id()) {
+            $this->storedrecord = $record;
+            $this->forum = null;
+            return false;
+        }
+
+        // Store record and check discussion
+        $this->storedrecord = clone($record);
+        $discussionfields = mod_forumng_utils::extract_subobject($record, 'fd_');
+        $discussionfields->subject = $record->discussionpost_subject;
+        $discussion = new mod_forumng_discussion($this->forum,
+            $discussionfields, false, -1);
+        $this->discussion = $discussion;
+        return true;
+    }
+
+    /**
+     * Obtains the next forum from the list.
+     * @param mod_forumng &$forum Forum (out variable)
+     * @param object &$cm Course-module object (out variable)
+     * @param object &$context Context object (out variable)
+     * @param object &$course Course object (out variable)
+     */
+    public function next_forum(&$forum, &$cm, &$context, &$course) {
+        // Skip if required to get to new forum
+        while ($this->forum!=null) {
+            $this->next_discussion($discussion);
+        }
+
+        // Get record
+        if ($this->storedrecord) {
+            $record = $this->storedrecord;
+            $this->storedrecord = null;
+        } else if (!$this->rs) {
+            // Already used entire list and closed recordset
+            return false;
+        } else {
+            if (!$this->rs->valid()) {
+                // End of the line. Mark everything as mailed
+                $this->mark_mailed($this->time);
+                $this->rs->close();
+                $this->rs = null;
+                return false;
+            }
+            $record = $this->rs->current();
+            $this->rs->next();
+        }
+
+        // Set data
+        $this->storedrecord = clone($record);
+        $cm = mod_forumng_utils::extract_subobject($record, 'cm_');
+        $course = mod_forumng_utils::extract_subobject($record, 'c_');
+        // Get full cm info if we can.
+        $modinfo = get_fast_modinfo($course);
+        if (array_key_exists($cm->id, $modinfo->get_cms())) {
+            $cm = $modinfo->get_cm($cm->id);
+        }
+        context_helper::preload_from_record(
+                mod_forumng_utils::extract_subobject($record, 'x_'));
+        $context = context_module::instance($cm->id);
+        $forum = new mod_forumng($course, $cm, $context,
+            mod_forumng_utils::extract_subobject($record, 'f_'));
+        if ($forum->is_shared()) {
+            $forum->set_clone_reference($record->cloneid);
+            $cm = $forum->get_course_module();
+            $course = $forum->get_course();
+            $context = $forum->get_context();
+        }
+        $this->forum = $forum;
+
+        return true;
+    }
+
+    private function mark_mailed($time) {
+        global $DB;
+        list ($wheresql, $whereparams) = $this->get_query_where($time, 'forumng_posts');
+        $querychunk = $this->get_query_from() . $wheresql;
+        $before = microtime(true);
+
+        mtrace('Marking processed posts: ', '');
+        mod_forumng_utils::update_with_subquery_grrr_mysql("
+UPDATE
+    {forumng_posts}
+SET
+    mailstate = " . $this->get_target_mail_state() . "
+WHERE
+    id %'IN'%", "SELECT fp.id $querychunk", $whereparams);
+        mtrace(round(microtime(true)-$before, 1) . 's.');
+
+        unset_config($this->get_pending_flag_name(), 'forumng');
+    }
+
+    public function get_post_count_so_far() {
+        return $this->postcount;
+    }
+
+    protected function get_pending_flag_name() {
+        return self::PENDING_MARK_MAILED;
+    }
+
+    protected function get_target_mail_state() {
+        return mod_forumng::MAILSTATE_MAILED;
+    }
+
+    /**
+     * Safety net is to prevent the forum sending out very old emails if cron
+     * is down for a long time, potentially causing a mail flood.
+     * @param int $time Current/base time (seconds)
+     * @return int Oldest time (seconds) of messages to process
+     */
+    protected function get_safety_net($time) {
+        global $CFG;
+        $hours = isset($CFG->forumng_donotmailafter)
+                ? $CFG->forumng_donotmailafter : 48;
+        return $time - $hours * 3600;
+    }
+
+    protected function get_query_from() {
+        return "
+FROM
+    {forumng_posts} fp
+    INNER JOIN {user} u ON fp.userid = u.id
+    LEFT JOIN {user} eu ON fp.edituserid = eu.id
+    LEFT JOIN {forumng_posts} reply ON fp.parentpostid = reply.id
+    LEFT JOIN {user} replyu ON reply.userid = replyu.id
+    LEFT JOIN {user} replyeu ON reply.edituserid = replyeu.id
+    INNER JOIN {forumng_discussions} fd ON fp.discussionid = fd.id
+    INNER JOIN {forumng_posts} discussionpost ON fd.postid = discussionpost.id
+    INNER JOIN {forumng} f ON fd.forumngid = f.id
+    INNER JOIN {course_modules} cm ON f.id = cm.instance
+        AND cm.module = (SELECT id FROM {modules} WHERE name='forumng')
+    INNER JOIN {context} x ON x.instanceid = cm.id
+    INNER JOIN {course} c ON c.id = f.course
+    INNER JOIN {forumng} clonef
+        ON (clonef.originalcmid = cm.id OR (f.originalcmid IS NULL AND clonef.id = f.id))
+    INNER JOIN {course_modules} clonecm ON clonef.id = clonecm.instance
+        AND clonecm.module = (SELECT id FROM {modules} WHERE name='forumng')";
+    }
+
+    protected function get_query_where($time) {
+        global $CFG;
+
+        // We usually only mail out posts after a delay of maxeditingtime.
+        $mailtime = $time - $CFG->forumng_emailafter;
+
+        // In case cron has not run for a while
+        $safetynet = $this->get_safety_net($time);
+
+        $sql = "
+WHERE
+    -- Skip future posts (this is more relevant when using the set state
+    -- version of the query)...
+    fp.created < ?
+
+    -- Post must not have been mailed yet, also wait for editing delay if
+    -- not set to mailnow
+    AND ((fp.mailstate = " . mod_forumng::MAILSTATE_NOT_MAILED . "
+        AND fp.created < ?)
+        OR fp.mailstate = " . mod_forumng::MAILSTATE_NOW_NOT_MAILED . ")
+
+    -- Don't mail out really old posts (unless they were previously hidden)
+    AND (fp.created > ? OR fd.timestart > ?)
+
+    -- Group mode posts on non-group forums are not shown in the UI so let's
+    -- not mail them either
+    AND (fd.groupid IS NULL OR (c.groupmodeforce = 0 AND cm.groupmode <> 0) OR
+        (c.groupmodeforce <> 0 AND c.groupmode <> 0))
+
+    -- Discussion must meet time requirements
+    AND fd.timestart < ?
+    AND (fd.timeend = 0 OR fd.timeend > ?)
+
+    -- Post and discussion must not have been deleted and we're only looking
+    -- at original posts not edited old ones
+    AND fp.deleted = 0
+    AND fd.deleted = 0
+    AND fp.oldversion = 0
+
+    -- Context limitation
+    AND x.contextlevel = 70";
+        $params = array($time, $mailtime, $safetynet, $safetynet, $time, $time);
+        return array($sql, $params);
+    }
+}
diff --git a/mod/forumng/mod_forumng_post.php b/mod/forumng/mod_forumng_post.php
new file mode 100644
index 0000000..6582412
--- /dev/null
+++ b/mod/forumng/mod_forumng_post.php
@@ -0,0 +1,2658 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Represents a single forum post.
+ * @see mod_forumng_discussion
+ * @see forum
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_post {
+    const PARENT_NOT_LOADED = 'not_loaded';
+
+    const PARENTPOST_DEPTH_PER_QUERY = 8;
+
+    // For option definitions, see forumngtype.php display_post function
+    const OPTION_EMAIL = 'email';
+    const OPTION_DIGEST = 'digest';
+    const OPTION_COMMAND_REPLY = 'command_reply';
+    const OPTION_COMMAND_EDIT = 'command_edit';
+    const OPTION_COMMAND_DELETE = 'command_delete';
+    const OPTION_COMMAND_UNDELETE = 'command_undelete';
+    const OPTION_COMMAND_SPLIT = 'command_split';
+    const OPTION_COMMAND_HISTORY = 'command_history';
+    const OPTION_COMMAND_REPORT = 'command_report';
+    const OPTION_COMMAND_DIRECTLINK = 'command_directlink';
+    const OPTION_VIEW_FULL_NAMES = 'view_full_names';
+    const OPTION_TIME_ZONE = 'time_zone';
+    const OPTION_SUMMARY = 'summary';
+    const OPTION_NO_COMMANDS = 'no_commands';
+    const OPTION_RATINGS_VIEW = 'ratings_view';
+    const OPTION_RATINGS_EDIT = 'ratings_edit';
+    const OPTION_VIEW_DELETED_INFO = 'deleted_info';
+    const OPTION_EXPANDED = 'short';
+    const OPTION_FLAG_CONTROL = 'flag_control';
+    const OPTION_READ_TIME = 'read_time';
+    const OPTION_CHILDREN_EXPANDED = 'children_expanded';
+    const OPTION_CHILDREN_COLLAPSED = 'children_collapsed';
+    const OPTION_INCLUDE_LOCK = 'include_lock';
+    const OPTION_EXPORT = 'export';
+    const OPTION_FULL_ADDRESSES = 'full_addresses';
+    const OPTION_DISCUSSION_SUBJECT = 'discussion_subject';
+    const OPTION_SELECTABLE = 'selectable';
+    const OPTION_VISIBLE_POST_NUMBERS = 'visible_post_numbers';
+    const OPTION_USER_IMAGE = 'user_image';
+    const OPTION_PRINTABLE_VERSION = 'printable_version';
+    const OPTION_JUMP_NEXT = 'jump_next';
+    const OPTION_JUMP_PREVIOUS = 'jump_previous';
+    const OPTION_JUMP_PARENT = 'jump_parent';
+    const OPTION_FIRST_UNREAD = 'first_unread';
+    const OPTION_UNREAD_NOT_HIGHLIGHTED = 'unread_not_highlighted';
+    const OPTION_SINGLE_POST = 'single_post';
+    const OPTION_PARTICIPATION = 'in_participation_screen';
+
+    /** Constant indicating that post is not rated by user */
+    const NO_RATING = 999;
+
+    const OPTION_INDICATE_MODERATOR = 'indicate_moderator';
+    const OPTION_IS_ANON = 'is_anon';
+    const OPTION_VIEW_ANON_INFO = 'view_anon';
+
+    // Object variables and accessors
+    // Comment.
+
+    private $discussion, $parentpost, $postfields, $full, $children,
+        $forceexpand, $nextunread, $previousunread;
+
+    /** @return mod_forumng The forum that this post is in */
+    public function get_forum() {
+        return $this->discussion->get_forum();
+    }
+
+    /** @return mod_forumng_post Parent post*/
+    public function get_parent() {
+        if ($this->parentpost==self::PARENT_NOT_LOADED) {
+            throw new coding_exception('Parent post not loaded');
+        }
+        return $this->parentpost;
+    }
+
+    /** @return mod_forumng_discussion The discussion that this post is in  */
+    public function get_discussion() {
+        return $this->discussion;
+    }
+
+    /** @return int ID of this post */
+    public function get_id() {
+        return $this->postfields->id;
+    }
+
+    /** @return string Subject or null if no change in subject */
+    public function get_subject() {
+        return $this->postfields->subject;
+    }
+
+    /** @return int Post number [within discussion] */
+    public function get_number() {
+        if (!property_exists($this->postfields, 'number')) {
+            throw new coding_exception('Post number not available here');
+        }
+        return $this->postfields->number;
+    }
+
+    /**
+     * Use to obtain link parameters when linking to any page that has anything
+     * to do with posts.
+     */
+    public function get_link_params($type, $currentuser = false) {
+        global $USER;
+        $params = 'p=' . $this->postfields->id .
+                $this->get_forum()->get_clone_param($type);
+
+        if ($currentuser) {
+            $author = $this->get_user();
+
+            if ($author->id == $USER->id) {
+                $params .= '&currentuser=1';
+            }
+        }
+
+        return $params;
+    }
+
+    /**
+     * @return bool True if can flag
+     */
+    public function can_flag() {
+        // Cannot flag for deleted post
+        if ($this->get_deleted() || $this->discussion->is_deleted()) {
+            return false;
+        }
+        // The guest user cannot flag
+        if (isguestuser()) {
+            return false;
+        }
+        return true;
+    }
+
+    /** @return bool True if post is flagged by current user */
+    public function is_flagged() {
+        if (!property_exists($this->postfields, 'flagged')) {
+            throw new coding_exception('Flagged information not available here');
+        }
+        return $this->postfields->flagged ? true : false;
+    }
+
+    /**
+     * @param bool $flag True to set flag
+     * @param int $userid User ID or 0 for current
+     */
+    public function set_flagged($flag, $userid=0) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        if ($flag) {
+            $transaction = $DB->start_delegated_transaction();
+
+            // Check there is not already a row
+            if (!$DB->record_exists('forumng_flags',
+                    array('postid' => $this->get_id(), 'userid' => $userid))) {
+                // Insert new row
+                $newflag = (object)array('postid' => $this->get_id(),
+                    'userid' => $userid, 'flagged' => time());
+                $DB->insert_record('forumng_flags', $newflag);
+            }
+
+            // Note: Under rare circumstances this could result in two rows
+            // for the same post and user, resulting in duplicates being
+            // returned. This is dealt with in mod_forumng::get_flagged_posts.
+            $transaction->allow_commit();
+        } else {
+            $DB->delete_records('forumng_flags',
+                    array('postid' => $this->get_id(), 'userid' => $userid));
+        }
+    }
+
+    /**
+     * Obtains the subject to use for this post where a subject is required
+     * (should not be blank), such as in email. May be of the form Re:
+     * <parent subject>. This function call makes a database query if the full
+     * discussion was not loaded into memory.
+     * @param bool $expectingquery Set to true if you think this might make
+     *     a db query (to prevent the warning)
+     * @return string Subject
+     */
+    public function get_effective_subject($expectingquery = false) {
+        if (property_exists($this->postfields, 'effectivesubject')) {
+            return $this->postfields->effectivesubject;
+        }
+
+        // If subject is set in this post, return it
+        if (!is_null($this->postfields->subject)) {
+            $this->postfields->effectivesubject = $this->postfields->subject;
+            return $this->postfields->effectivesubject;
+        }
+
+        // See if we already have other posts loaded
+        if ($this->parentpost == self::PARENT_NOT_LOADED) {
+            // Posts are not loaded, do a database query
+            if (!$expectingquery) {
+                debugging('This get method made a DB query; if this is expected,
+                    set the flag to say so', DEBUG_DEVELOPER);
+            }
+
+            $this->postfields->effectivesubject =
+                    self::inner_get_recursive_subject($this->postfields->parentpostid);
+            return $this->postfields->effectivesubject;
+        } else {
+            // Posts are loaded, loop through them to find subject
+            for ($parent = $this->parentpost; $parent!=null;
+                $parent = $parent->parentpost) {
+                if ($parent->postfields->subject!==null) {
+                    return get_string('re', 'forumng',
+                        $parent->postfields->subject);
+                }
+            }
+            return '[subject error]'; // shouldn't get here
+        }
+    }
+
+    /**
+     * Given a post id - or the id of some ancestor of a post - this query
+     * obtains the next (up to) 8 ancestors and returns a 'Re:' subject line
+     * corresponding to the first ancestor which has a subject. If none of
+     * the 8 have a subject, it makes another query to retrieve the next 8,
+     * and so on.
+     * @param int $parentid ID of a child post that we are trying to find
+     *   the subject from a parent of
+     * @return string Subject of post ('Re: something')
+     */
+    private static function inner_get_recursive_subject($parentid) {
+        global $DB;
+
+        // Although the query looks scary because it has so many left joins,
+        // in testing it worked quickly. The db just does eight primary-key
+        // lookups. Analysis of existing posts in our database showed that
+        // doing 8 levels is currently sufficient for about 98.7% of posts.
+        $select = '';
+        $join = '';
+        $maxdepth = self::PARENTPOST_DEPTH_PER_QUERY;
+        for ($depth = 1; $depth <= $maxdepth; $depth++) {
+            $select .= "p$depth.subject AS s$depth, p$depth.deleted AS d$depth, ";
+            if ($depth >= 2) {
+                $prev = $depth - 1;
+                $join .= "LEFT JOIN {forumng_posts} p$depth
+                    ON p$depth.id = p$prev.parentpostid ";
+            }
+        }
+
+        do {
+            $rec = $DB->get_record_sql("
+SELECT
+    $select
+    p$maxdepth.parentpostid AS nextparent
+FROM
+    {forumng_posts} p1
+    $join
+WHERE
+    p1.id = ?
+", array($parentid), MUST_EXIST);
+            for ($depth = 1; $depth <= $maxdepth; $depth++) {
+                $var = "s$depth";
+                $var2 = "d$depth";
+                if (isset($rec->{$var}) && $rec->{$var2}==0) {
+                    return get_string('re', 'forumng', $rec->{$var});
+                }
+            }
+
+            $parentid = isset($rec->nextparent) ? $rec->nextparent : null;
+
+        } while ($parentid);
+
+        // If the database and memory representations are correct, we shouldn't
+        // really get here because the top-level post always has a subject
+        return '';
+    }
+
+    /** @return object User who created this post */
+    public function get_user() {
+        if (!property_exists($this->postfields, 'user')) {
+            throw new coding_exception('User is not available at this point.');
+        }
+        return $this->postfields->user;
+    }
+
+    /** @return object User who last edited this post or null if no edits */
+    public function get_edit_user() {
+        if (!property_exists($this->postfields, 'edituser')) {
+            throw new coding_exception('Edit user is not available at this point.');
+        }
+        return is_null($this->postfields->edituserid)
+            ? null : $this->postfields->edituser;
+    }
+
+    /** @return int Time post was originally created */
+    public function get_created() {
+        return $this->postfields->created;
+    }
+
+    /** @return int Time post was most recently modified */
+    public function get_modified() {
+        return $this->postfields->modified;
+    }
+
+    /** @return int 0 if post is not deleted, otherwise time of deletion */
+    public function get_deleted() {
+        return $this->postfields->deleted;
+    }
+
+    /** @return object User object (basic fields) of deleter */
+    public function get_delete_user() {
+        return $this->postfields->deleteuser;
+    }
+
+    /** @return bool True if this is an old version of a post */
+    public function is_old_version() {
+        return $this->postfields->oldversion ? true : false;
+    }
+
+    /** @return bool True if the post is important */
+    public function is_important() {
+        return $this->postfields->important ? true : false;
+    }
+
+    /** @return string Message data from database (May be in arbitrary format) */
+    public function get_raw_message() {
+        return $this->postfields->message;
+    }
+
+    /** @return int Format of message (Moodle FORMAT_xx constant) */
+    public function get_format() {
+        return $this->postfields->messageformat;
+    }
+
+    /**
+     * @param array $options.
+     * @return string Message after format_text and replacing file URLs
+     */
+    public function get_formatted_message($options = null) {
+        global $CFG;
+        require_once($CFG->dirroot . '/lib/filelib.php');
+        $foremail = false;
+        if (!empty($options) && array_key_exists(self::OPTION_EMAIL, $options)) {
+            $foremail = $options[self::OPTION_EMAIL];
+        }
+        $text = $this->postfields->message;
+        $forum = $this->get_forum();
+        // Add clone param to end of pluginfile requests
+        if ($forum->is_shared()) {
+            // "@@PLUGINFILE@@/cheese.gif?download=1"
+            $text = preg_replace('~([\'"]@@PLUGINFILE@@[^\'"?]+)\?~',
+                    '$1?clone=' . $forum->get_course_module_id() . '&amp;', $text);
+            // "@@PLUGINFILE@@/cheese.gif"
+            $text = preg_replace('~([\'"]@@PLUGINFILE@@[^\'"?]+)([\'"])~',
+                    '$1?clone=' . $forum->get_course_module_id() . '$2', $text);
+        }
+        $id = $this->get_id();
+        if ($this->is_old_version()) {
+            // If old version get id of parent post as images stored against this.
+            $id = $this->get_parent()->get_id();
+        }
+        $context = $forum->get_context(true);
+        if ($foremail) {
+            $fileurlbase = 'mod/forumng/pluginfile.php';
+        } else {
+            $fileurlbase = 'pluginfile.php';
+        }
+        $text = file_rewrite_pluginfile_urls($text, $fileurlbase,
+            $context->id, 'mod_forumng', 'message', $id);
+        if ($foremail && (!isset($CFG->slasharguments) || $CFG->slasharguments != 0)) {
+            // Append hash if this post render for email.
+            $text = $this->add_hash_to_image($text);
+        }
+        $textoptions = new stdClass();
+        // Don't put a <p> tag round post
+        $textoptions->para = false;
+        // Does not indicate that we trust the text, only that the
+        // TRUSTTEXT marker would be supported. At present though it isn't (hm)
+        $textoptions->trusttext = false;
+        if (trusttext_active() && $this->get_user() && has_capability('moodle/site:trustcontent',
+                $context, $this->get_user())) {
+            // Support trusted text when initial author is safe (post editors are not checked!).
+            $textoptions->trusted = true;
+        }
+        $textoptions->context = $context;
+        return format_text($text, $this->postfields->messageformat, $textoptions);
+    }
+
+    /**
+     * @return string Message after format_text_email and replacing file URLs
+     */
+    public function get_email_message() {
+        global $CFG;
+        require_once($CFG->dirroot . '/lib/filelib.php');
+        $text = file_rewrite_pluginfile_urls($this->postfields->message, 'pluginfile.php',
+            $this->get_forum()->get_context(true)->id, 'mod_forumng', 'message',
+            $this->postfields->id);
+        return format_text_email($text, $this->postfields->messageformat);
+    }
+
+    /** @return bool True if this message has one or more attachments */
+    public function has_attachments() {
+        return $this->postfields->attachments ? true : false;
+    }
+
+    /**
+     * Gets the names of all attachments (if any)
+     * @return array Array of attachment names (may be empty). Names only,
+     *   not including path to attachment folder
+     */
+    public function get_attachment_names() {
+        $result = array();
+        if (!$this->has_attachments()) {
+            return $result;
+        }
+        $filecontext = $this->get_forum()->get_context(true);
+        $fs = get_file_storage();
+        foreach ($fs->get_area_files($filecontext->id, 'mod_forumng', 'attachment',
+                $this->get_id(), 'filename', false) as $file) {
+            $result[] = $file->get_filename();
+        }
+        return $result;
+    }
+
+    /**
+     * @param string $attachment Attachment name (will not be checked for existence)
+     * @return moodle_url URL to attachment
+     */
+    public function get_attachment_url($attachment) {
+        $filecontext = $this->get_forum()->get_context(true);
+        $params = array();
+        if ($this->get_forum()->is_shared()) {
+            $params['clone'] = $this->get_forum()->get_course_module_id();
+        }
+        return new moodle_url('/pluginfile.php/' . $filecontext->id . '/mod_forumng/attachment/' .
+                $this->get_id() . '/' . urlencode($attachment), $params);
+    }
+
+    /**
+     * @return string URL of this discussion
+     */
+    public function get_url() {
+        return $this->get_discussion()->get_url() . '#p' . $this->get_id();
+    }
+
+    /**
+     * Marks this post read.
+     * @param int $time Time to mark it read at (0 = now)
+     * @param int $userid User who's read the post (0 = current)
+     */
+    public function mark_read($time = 0, $userid = 0) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        if (!$time) {
+            $time = time();
+        }
+        $transaction = $DB->start_delegated_transaction();
+        // Check for existing record - should never have one, but do this in case.
+        $existing = $DB->get_record('forumng_read_posts', array('userid' => $userid,
+                'postid' => $this->get_id()), '*', IGNORE_MISSING);
+        if ($existing) {
+            $readrecord = new stdClass();
+            $readrecord->id = $existing->id;
+            $readrecord->time = $time;
+            $DB->update_record('forumng_read_posts', $readrecord);
+        } else {
+            $readrecord = new stdClass();
+            $readrecord->userid = $userid;
+            $readrecord->postid = $this->get_id();
+            $readrecord->time = $time;
+            $DB->insert_record('forumng_read_posts', $readrecord);
+        }
+        $transaction->allow_commit();
+    }
+
+    /**
+     * Checks unread status (only available when requested as part of whole
+     * discussion).
+     * @return bool True if this post is unread
+     * @throws mod_forumng_exception If unread data is not available
+     */
+    public function is_unread() {
+        // Your own posts are always read (note: technically you can request
+        // unread data for another user - so we use the id for whom data was
+        // requested, not $USER->id directly).
+        $userid = $this->discussion->get_unread_data_user_id();
+        if (($this->postfields->edituserid == $userid) ||
+            (!$this->postfields->edituserid
+                && $this->postfields->userid==$userid)) {
+            return false;
+        }
+
+        // Posts past sell-by are always read
+        $deadline = mod_forumng::get_read_tracking_deadline();
+        if ($this->postfields->modified < $deadline) {
+            return false;
+        }
+
+        if ($this->get_deleted()) {
+            return false;
+        }
+
+        $timeread = $this->discussion->get_time_read();
+
+        // If later manual mark post as read record then use that as read time.
+        if (!empty($this->postfields->uread) && $this->postfields->uread > $timeread) {
+            $timeread = $this->postfields->uread;
+        }
+
+        // Compare date to discussion read data.
+        return $this->postfields->modified > $timeread;
+    }
+
+    /**
+     * Checks unread status of child posts (only available when requested as
+     * part of whole discussion). Not a recursive method - checks only one
+     * level of children.
+     * @return bool True if any of the children of this post are unread
+     */
+    public function has_unread_child() {
+        $this->require_children();
+        foreach ($this->children as $child) {
+            if ($child->is_unread()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Checks if this post has any children (replies).
+     * @return bool True if post has one or more replies
+     */
+    public function has_children() {
+        $this->require_children();
+        return count($this->children) > 0;
+    }
+
+    /**
+     * Marks this post as being expanded from the start.
+     */
+    public function force_expand() {
+        $this->forceexpand = true;
+    }
+
+    /** @return bool True if this is the first post of a discussion */
+    public function is_root_post() {
+        return $this->postfields->parentpostid ? false : true;
+    }
+
+    /**
+     * @throws mod_forumng_exception If rating information wasn't queried
+     */
+    private function check_ratings() {
+        if (!property_exists($this->postfields, 'averagerating')) {
+            throw new coding_exception('Rating information not retrieved');
+        }
+    }
+
+    /**
+     * @param bool $astext If true, returns a string rather than a number
+     * @return mixed Average rating as float, or a string description if
+     *   $astext is true
+     * @throws mod_forumng_exception If rating information wasn't queried
+     */
+    public function get_average_rating($astext = false) {
+        $this->check_ratings();
+        if ($astext) {
+            $options = $this->get_forum()->get_rating_options();
+            $value = (int)round($this->postfields->averagerating);
+            if (array_key_exists($value, $options)) {
+                return $options[$value];
+            } else {
+                return '?'; // Can occur if rating scale is changed
+            }
+        } else {
+            return $this->postfields->averagerating;
+        }
+    }
+
+    /**
+     * @return int Number of ratings of this post (may be 0)
+     */
+    public function get_num_ratings() {
+        $this->check_ratings();
+        return $this->postfields->numratings;
+    }
+
+    /**
+     * @return int Current user's rating of this post or null if none
+     * @throws mod_forumng_exception If rating information wasn't queried
+     */
+    public function get_own_rating() {
+        $this->check_ratings();
+        return $this->postfields->ownrating;
+    }
+
+    /**
+     * Obtains search document representing this post.
+     * @return local_ousearch_document Document object
+     */
+    public function search_get_document() {
+        $doc = new local_ousearch_document();
+        $doc->init_module_instance('forumng',
+                $this->get_forum()->get_course_module(true));
+        if ($groupid = $this->discussion->get_group_id()) {
+            $doc->set_group_id($groupid);
+        }
+        $doc->set_int_refs($this->get_id());
+        return $doc;
+    }
+
+    /**
+     * @param array $out Array that receives list of this post and all
+     *   children (including nested children) in order
+     */
+    public function build_linear_children(&$out) {
+        $this->require_children();
+        $out[count($out)] = $this;
+        foreach ($this->children as $child) {
+            $child->build_linear_children($out);
+        }
+    }
+
+    /**
+     * Finds a child post (or this one) with the specified ID.
+     * @param int $id Post ID
+     * @param bool $toplevel True for initial request (makes it throw
+     *   exception if not found)
+     * @return mod_forumng_post Child post
+     */
+    public function find_child($id, $toplevel=true) {
+        if ($this->postfields->id == $id) {
+            return $this;
+        }
+        $this->require_children();
+        foreach ($this->children as $child) {
+            $result = $child->find_child($id, false);
+            if ($result) {
+                return $result;
+            }
+        }
+
+        if ($toplevel) {
+            throw new coding_exception("Child id $id not found");
+        }
+        return null;
+    }
+
+    /**
+     * Finds which child post (or this) has the most recent modified date.
+     * @param mod_forumng_post &$newest Newest post (must be null when calling)
+     */
+    public function find_newest_child(&$newest) {
+        if (!$newest || $newest->get_modified() < $this->get_modified()) {
+            $newest = $this;
+        }
+        $this->require_children();
+        foreach ($this->children as $child) {
+            $child->find_newest_child($newest);
+        }
+    }
+
+    /**
+     * Adds the ID of all children (and this post itself) to a list.
+     * @param array &$list List of IDs
+     */
+    public function list_child_ids(&$list) {
+        $list[] = $this->get_id();
+        $this->require_children();
+        foreach ($this->children as $child) {
+            $child->list_child_ids($list);
+        }
+    }
+
+    /**
+     * @return mod_forumng_post Next unread post or null if there are no more
+     */
+    public function get_next_unread() {
+        $this->require_children();
+        return $this->nextunread;
+    }
+
+    /**
+     * @return mod_forumng_post Previous unread post or null if there are no more
+     */
+    public function get_previous_unread() {
+        $this->require_children();
+        return $this->previousunread;
+    }
+
+    /**
+     * Used by discussion to set up the unread posts.
+     * @param mod_forumng_post $nextunread
+     * @param mod_forumng_post $previousunread
+     */
+    public function set_unread_list($nextunread, $previousunread) {
+        $this->nextunread = $nextunread;
+        $this->previousunread = $previousunread;
+    }
+
+    /** @return int forum ratings enabled */
+    public function get_ratings() {
+        return isset($this->postfields->rating) ? $this->postfields->rating : null;
+    }
+
+    // Factory method
+    /*///////////////*/
+
+    /**
+     * Creates a forum post object, forum object, and all related data from a
+     * single forum post ID. Intended when entering a page which uses post ID
+     * as a parameter.
+     * @param int $id ID of forum post
+     * @param int $cloneid If this is in a shared forum, must be the id of the
+     *   clone forum currently in use, or CLONE_DIRECT; otherwise must be 0
+     * @param bool $wholediscussion If true, retrieves entire discussion
+     *   instead of just this single post
+     * @param bool $usecache True to use cache when retrieving the discussion
+     * @param int $userid User ID to get post on behalf of (controls flag data
+     *   retrieved)
+     * @return mod_forumng_post Post object
+     */
+    public static function get_from_id($id, $cloneid,
+            $wholediscussion=false, $usecache=false, $userid=0) {
+        global $CFG, $USER;
+        require_once($CFG->dirroot . '/rating/lib.php');
+        if ($wholediscussion) {
+            $discussion = mod_forumng_discussion::get_from_post_id($id, $cloneid,
+                    $usecache, $usecache);
+            $root = $discussion->get_root_post();
+            return $root->find_child($id);
+        } else {
+            // Get post data (including extra data such as ratings and flags)
+            $records = self::query_posts('fp.id = ?', array($id), 'fp.id', true,
+                    true, false, $userid);
+            if (count($records)!=1) {
+                throw new coding_exception("Invalid post ID $id");
+            }
+            $postfields = reset($records);
+
+            $discussion = mod_forumng_discussion::get_from_id($postfields->discussionid, $cloneid);
+            // Load standard ratings.
+            $forum = $discussion->get_forum();
+            if ($forum->get_enableratings() == mod_forumng::FORUMNG_STANDARD_RATING) {
+                // If grading is 'No grading' or 'Teacher grades students'.
+                if ($forum->get_grading() == mod_forumng::GRADING_NONE ||
+                    $forum->get_grading() == mod_forumng::GRADING_MANUAL) {
+                    // Set the aggregation method.
+                    if ($forum->get_rating_scale() > 0) {
+                        $aggregate = RATING_AGGREGATE_AVERAGE;
+                    } else {
+                        $aggregate = RATING_AGGREGATE_COUNT;
+                    }
+                } else {
+                    $aggregate = $forum->get_grading();
+                }
+                $ratingoptions = new stdClass();
+                $ratingoptions->context = $forum->get_context(true);
+                $ratingoptions->component = 'mod_forumng';
+                $ratingoptions->ratingarea = 'post';
+                $ratingoptions->items = array('post' => $postfields);
+                $ratingoptions->aggregate = $aggregate;
+                $ratingoptions->scaleid = $forum->get_rating_scale();
+                $ratingoptions->userid = $USER->id;
+                $ratingoptions->id = $id;
+                $ratingoptions->assesstimestart = $forum->get_ratingfrom();
+                $ratingoptions->assesstimefinish = $forum->get_ratinguntil();
+                $ratingoptions->returnurl = $discussion->get_moodle_url();
+
+                $rm = new rating_manager();
+                $postwithratings = $rm->get_ratings($ratingoptions);
+                $postfields = $postwithratings['post'];// Update 'post' object.
+            }
+            $newpost = new mod_forumng_post($discussion, $postfields);
+            return $newpost;
+        }
+    }
+
+    /**
+     * Obtains a search document given the ousearch parameters.
+     * @param object $document Object containing fields from the ousearch documents table
+     * @return mixed False if object can't be found, otherwise object containing the following
+     *   fields: ->content, ->title, ->url, ->activityname, ->activityurl,
+     *   and optionally ->extrastrings array, ->data, ->hide
+     */
+    public static function search_get_page($document) {
+        global $DB, $CFG, $USER;
+
+        // Implemented directly in SQL for performance, rather than using the
+        // objects themselves
+        $result = $DB->get_record_sql("
+SELECT
+    fp.message AS content, fp.subject, firstpost.subject AS firstpostsubject,
+    firstpost.id AS firstpostid, fd.id AS discussionid,
+    f.name AS activityname, cm.id AS cmid, fd.timestart, fd.timeend,
+    f.shared AS shared, f.type AS forumtype
+FROM
+    {forumng_posts} fp
+    INNER JOIN {forumng_discussions} fd ON fd.id = fp.discussionid
+    INNER JOIN {forumng_posts} firstpost ON fd.postid = firstpost.id
+    INNER JOIN {forumng} f ON fd.forumngid = f.id
+    INNER JOIN {course_modules} cm ON cm.instance = f.id AND cm.course = f.course
+    INNER JOIN {modules} m ON cm.module = m.id
+WHERE
+    fp.id = ? AND m.name = 'forumng'", array($document->intref1), IGNORE_MISSING);
+        if (!$result) {
+            return false;
+        }
+
+        // Title is either the post subject or Re: plus the discussion subject
+        // if the post subject is blank
+        $result->title = $result->subject;
+
+        if (is_null($result->title)) {
+            $result->title = get_string('re', 'forumng', $result->firstpostsubject);
+        }
+
+         // Link is to value in url if present, otherwise to original forum
+        $cloneparam = $result->cmid;
+        if ($result->shared) {
+            global $FORUMNG_CLONE_MAP;
+            if (!empty($FORUMNG_CLONE_MAP)) {
+                $cloneparam = $FORUMNG_CLONE_MAP[$result->cmid]->id;
+                $clonebit = '&amp;clone=' . $cloneparam;
+            } else {
+                $clonebit = '&amp;clone=' .
+                    ($cloneparam = optional_param('clone', $result->cmid, PARAM_INT));
+            }
+        } else {
+            $clonebit = '';
+        }
+
+        // Work out URL to post
+        $result->url = $CFG->wwwroot . '/mod/forumng/discuss.php?d=' .
+            $result->discussionid . $clonebit . '#p' . $document->intref1;
+
+        // Activity URL
+        $result->activityurl = $CFG->wwwroot . '/mod/forumng/view.php?id=' .
+            $result->cmid . $clonebit;
+
+        // Hide results outside their time range (unless current user can see)
+        $now = time();
+        if ($now < $result->timestart || ($result->timeend && $now>=$result->timeend) &&
+            !has_capability('mod/forumng:viewallposts',
+                context_module::instance($result->cmid))) {
+            $result->hide = true;
+        }
+
+        // Handle annoying forum types that hide discussions
+        $type = forumngtype::get_new($result->forumtype);
+        if ($type->has_unread_restriction()) {
+            // TODO The name of the _unread_restriction should be _discussion_restriction.
+            // This is going to be slow, we need to load the discussion
+            $discussion = mod_forumng_discussion::get_from_id($result->discussionid, $cloneparam);
+            if (!$type->can_view_discussion($discussion, $USER->id)) {
+                $result->hide = true;
+            }
+        }
+
+        return $result;
+    }
+
+    // Object methods
+    /*///////////////*/
+
+    /**
+     * @param mod_forumng_discussion $discussion Discussion object
+     * @param object $postfields Post fields from DB table (may also include
+     *   some extra fields provided by mod_forumng_post::query_posts)
+     * @param mod_forumng_post $parentpost Parent post or null if this is root post,
+     *   or PARENT_NOT_LOADED if not available
+     */
+    public function __construct($discussion, $postfields, $parentpost=self::PARENT_NOT_LOADED) {
+        $this->discussion = $discussion;
+        $this->postfields = $postfields;
+
+        // Extract the user details into Moodle user-like objects
+        if (property_exists($postfields, 'u_id')) {
+            $postfields->user = mod_forumng_utils::extract_subobject($postfields, 'u_');
+            $postfields->edituser = mod_forumng_utils::extract_subobject($postfields, 'eu_');
+            $postfields->deleteuser = mod_forumng_utils::extract_subobject($postfields, 'du_');
+        }
+
+        $this->parentpost = $parentpost;
+        $this->children = false;
+    }
+
+    /**
+     * Used to inform the post that all its children will be supplied.
+     * Call before calling add_child(), or even if there are no children.
+     */
+    public function init_children() {
+        $this->children = array();
+    }
+
+    /**
+     * For internal use only. Adds a child to this post while constructing
+     * the tree of posts
+     * @param mod_forumng_post $child Child post
+     */
+    public function add_child($child) {
+        $this->require_children();
+        $this->children[] = $child;
+    }
+
+    /**
+     * Checks that children are available.
+     * @throws mod_forumng_exception If children have not been loaded
+     */
+    public function require_children() {
+        if (!is_array($this->children)) {
+            throw new coding_exception('Requires child post data');
+        }
+    }
+
+    /**
+     * Internal function. Queries for posts.
+     * @param string $where Where clause (fp is alias for post table)
+     * @param array $whereparams Parameters (values for ? parameters) in where clause
+     * @param string $order Sort order; the default is fp.id - note this is preferable
+     *   to fp.timecreated because it works correctly if there are two posts in
+     *   the same second
+     * @param bool $ratings True if ratings should be included in the query
+     * @param bool $flags True if flags should be included in the query
+     * @param bool $effectivesubjects True if the query should include the
+     *   (complicated!) logic to obtain the 'effective subject'. This may result
+     *   in additional queries afterward for posts which are very deeply nested.
+     * @param int $userid 0 = current user (at present this is only used for
+     *   flags)
+     * @param bool $read True if read post record (time) is sought
+     * @return array Resulting posts as array of Moodle records, empty array
+     *   if none
+     */
+    public static function query_posts($where, $whereparams, $order='fp.id', $ratings=true,
+        $flags=false, $effectivesubjects=false,
+        $userid=0, $joindiscussion=false, $discussionsubject=false, $limitfrom='',
+        $limitnum='', $read = false) {
+        global $DB, $USER;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $queryparams = array();
+
+        // We include ratings if these are enabled, otherwise save the database
+        // some effort and don't bother
+        if ($ratings) {
+            $ratingsquery = ",
+(SELECT AVG(rating) FROM {forumng_ratings}
+    WHERE postid = fp.id) AS averagerating,
+(SELECT COUNT(1) FROM {forumng_ratings}
+    WHERE postid = fp.id) AS numratings,
+(SELECT rating FROM {forumng_ratings}
+    WHERE postid = fp.id AND userid = ?) AS ownrating";
+            // Add parameter to start of params list
+            $queryparams[] = $USER->id;
+        } else {
+            $ratingsquery = '';
+        }
+
+        if ($flags) {
+            $flagsjoin = "
+    LEFT JOIN {forumng_flags} ff ON ff.postid = fp.id AND ff.userid = ?";
+            $flagsquery = ", ff.flagged";
+            $queryparams[] = $userid;
+        } else {
+            $flagsjoin = '';
+            $flagsquery = '';
+        }
+
+        if ($joindiscussion) {
+            $discussionjoin = "
+    INNER JOIN {forumng_discussions} fd ON fp.discussionid = fd.id";
+            $discussionquery = ',' . mod_forumng_utils::select_discussion_fields('fd');
+            if ($discussionsubject) {
+                $discussionjoin .= "
+    INNER JOIN {forumng_posts} fdfp ON fd.postid = fdfp.id";
+                $discussionquery .= ', fdfp.subject AS fd_subject';
+            }
+        } else {
+            $discussionjoin = '';
+            $discussionquery = '';
+        }
+
+        if ($effectivesubjects) {
+            $maxdepth = self::PARENTPOST_DEPTH_PER_QUERY;
+            $subjectsjoin = '';
+            $subjectsquery = ", p$maxdepth.parentpostid AS nextparent ";
+
+            for ($depth = 2; $depth <= $maxdepth; $depth++) {
+                $subjectsquery .= ", p$depth.subject AS s$depth, p$depth.deleted AS d$depth";
+                $prev = 'p'. ($depth - 1);
+                if ($prev == 'p1') {
+                    $prev = 'fp';
+                }
+                $subjectsjoin .= "LEFT JOIN {forumng_posts} p$depth
+                    ON p$depth.id = $prev.parentpostid ";
+            }
+        } else {
+            $subjectsjoin = '';
+            $subjectsquery = '';
+        }
+
+        if ($read) {
+            $readquery = ', fr.time AS uread';
+            $readjoin = "LEFT JOIN {forumng_read_posts} fr ON fr.postid = fp.id AND fr.userid = ?";
+            $queryparams[] = $userid;
+        } else {
+            $readquery = '';
+            $readjoin = '';
+        }
+
+        // Retrieve posts from discussion with incorporated user information
+        // and ratings info if specified
+        $results = $DB->get_records_sql("
+SELECT
+    fp.*,
+    ".mod_forumng_utils::select_username_fields('u', true).",
+    ".mod_forumng_utils::select_username_fields('eu').",
+    ".mod_forumng_utils::select_username_fields('du')."
+    $ratingsquery
+    $flagsquery
+    $subjectsquery
+    $discussionquery
+    $readquery
+FROM
+    {forumng_posts} fp
+    INNER JOIN {user} u ON fp.userid = u.id
+    LEFT JOIN {user} eu ON fp.edituserid = eu.id
+    LEFT JOIN {user} du ON fp.deleteuserid = du.id
+    $discussionjoin
+    $flagsjoin
+    $subjectsjoin
+    $readjoin
+WHERE
+    $where
+ORDER BY
+    $order
+", array_merge($queryparams, $whereparams), $limitfrom, $limitnum);
+        if ($effectivesubjects) {
+            // Figure out the effective subject for each result
+            foreach ($results as $result) {
+                $got = false;
+                if ($result->subject !== null) {
+                    $result->effectivesubject = $result->subject;
+                    $got = true;
+                    continue;
+                }
+                for ($depth = 2; $depth <= $maxdepth; $depth++) {
+                    $var = "s$depth";
+                    $var2 = "d$depth";
+                    if (!$got && $result->{$var} !== null && $result->{$var2}==0) {
+                        $result->effectivesubject = get_string('re', 'forumng', $result->{$var});
+                        $got = true;
+                    }
+                    unset($result->{$var});
+                    unset($result->{$var2});
+                }
+                if (!$got) {
+                    // Do extra queries to pick up subjects for posts where it
+                    // was unknown within the default depth. We can use the
+                    // 'nextparent' to get the ID of the parent post of the last
+                    // one that we checked already
+                    $result->effectivesubject = self::inner_get_recursive_subject(
+                        $result->nextparent);
+                }
+            }
+        }
+        return $results;
+    }
+
+    /**
+     * Replies to the post
+     * @param string $subject Subject
+     * @param string $message Message
+     * @param int $messageformat Moodle format used for message
+     * @param bool $attachments True if post contains attachments
+     * @param bool $setimportant If true, highlight the post
+     * @param bool $mailnow If true, sends mail ASAP
+     * @param int $userid User ID (0 = current)
+     * @param bool $log True to log this reply
+     * @param int $asmoderator values are ASMODERATOR_NO, ASMODERATOR_IDENTIFY or ASMODERATOR_ANON
+     * @return int ID of newly-created post
+     */
+    public function reply($subject, $message, $messageformat,
+        $attachments=false, $setimportant=false, $mailnow=false, $userid=0, $log=true,
+        $asmoderator = mod_forumng::ASMODERATOR_NO) {
+        global $DB;
+        $transaction = $DB->start_delegated_transaction();
+        $id = $this->discussion->create_reply($this, $subject, $message, $messageformat,
+                $attachments, $setimportant, $mailnow, $userid, $asmoderator);
+        if ($log) {
+            $this->log('add reply', $id);
+        }
+        $transaction->allow_commit();
+        $this->get_discussion()->uncache();
+        return $id;
+    }
+
+    /**
+     * Updates the message field of a post entry. This is necessary in some cases where
+     * the user includes images etc. in the message; these are initially included using
+     * a draft URL which has to be changed to a special relative path on convert, and we
+     * can't do that until the post ID is known. Additionally, we don't have a post object
+     * at that point, hence use of static function.
+     * @param int $postid ID of post to update
+     * @param string $newtext Updated message text
+     */
+    public static function update_message_for_files($postid, $newtext) {
+        global $DB;
+        $DB->set_field('forumng_posts', 'message', $newtext, array('id'=>$postid));
+    }
+
+    /**
+     * Obtains a list of previous versions of this post (if any), in descending
+     * order of modification date.
+     * @return array Array of mod_forumng_post objects (empty if none)
+     */
+    public function get_old_versions() {
+        $postdata = self::query_posts(
+            'fp.oldversion = 1 AND fp.parentpostid = ?', array($this->postfields->id),
+            'fp.modified DESC', false, false);
+        $posts = array();
+        foreach ($postdata as $postfields) {
+            $newpost = new mod_forumng_post($this->discussion, $postfields, $this);
+            $posts[] = $newpost;
+        }
+        return $posts;
+    }
+
+    /**
+     * Recursive function obtains all users IDs that made this post and all
+     * child posts.
+     * @param array &$userids Associative array from id=>true that receives
+     *   all user IDs
+     * @param $ignoredeleted Set true to discount posts that are deleted
+     */
+    public function list_all_user_ids(&$userids, $ignoredeleted = false) {
+        $this->require_children();
+        // Add current ID.
+        if (!$ignoredeleted || !$this->get_deleted()) {
+            $userid = $this->get_user()->id;
+            if (!array_key_exists($userid, $userids)) {
+                $userids[$userid] = true;
+            }
+        }
+
+        foreach ($this->children as $post) {
+            $post->list_all_user_ids($userids, $ignoredeleted);
+        }
+    }
+
+    /**
+     * NOTE: This method is the second stage of editing and must be called
+     * after edit_start and after files are being updated. This is because
+     * it depends on the result of file_save_draft_area_files.
+     * @param string $message Message
+     * @param int $messageformat Moodle format ID
+     * @param bool $gotsubject True if message subject changed
+     */
+    public function edit_finish($message, $messageformat, $gotsubject) {
+        global $DB;
+
+        $transaction = $DB->start_delegated_transaction();
+        $update = new StdClass;
+        if ($message!==$this->postfields->message) {
+            $update->message = $message;
+        }
+        if ($messageformat != $this->postfields->messageformat) {
+            $update->messageformat = $messageformat;
+        }
+        if (count((array)$update)>0) {
+            $update->id = $this->postfields->id;
+            $DB->update_record('forumng_posts', $update);
+        }
+
+        // Update in-memory representation
+        foreach ((array)$update as $name => $value) {
+            $this->postfields->{$name} = $value;
+        }
+
+        // Uncache before updating search (want to make sure that the recursive
+        // update gets latest data)
+        $this->get_discussion()->uncache();
+
+        // Update search index
+        if ((isset($update->message) || $gotsubject)) {
+            // Update for this post
+            $this->search_update();
+
+            // If changing the subject of a root post, update all posts in the
+            // discussion (ugh)
+            if ($this->is_root_post() && $gotsubject) {
+                $this->search_update_children();
+            }
+        }
+
+        $transaction->allow_commit();
+    }
+
+    /**
+     * Edits an existing message. The previous version of the message is
+     * retained for admins to view if needed.
+     *
+     * NOTE: This method is the first stage of editing and must be called
+     * BEFORE files are updated. Ensure that there is a DB transaction around
+     * the calls to these two methods.
+     * @param string $subject Subject
+     * @param bool $attachments True if post now contains attachments
+     * @param bool $setimportant If true, highlight the post
+     * @param bool $mailnow New value of mailnow flag (ignored if message was already mailed)
+     * @param int $userid Userid doing the editing (0 = current)
+     * @param int $asmoderator values are ASMODERATOR_NO, ASMODERATOR_IDENTIFY or ASMODERATOR_ANON
+     * @return bool True if subject changed (this is weird, but edit_finish
+     *   needs it)
+     */
+    public function edit_start($subject, $attachments=false, $setimportant=false,
+            $mailnow=false, $userid=0, $log=true, $asmoderator = mod_forumng::ASMODERATOR_NO) {
+        global $DB;
+        $now = time();
+
+        // Create copy of existing entry ('old version')
+        $copy = clone($this->postfields);
+
+        // Copy has oldversion set to 1 and parentpost set to id of real post
+        $copy->oldversion = 1;
+        $copy->parentpostid = $copy->id;
+        unset($copy->id);
+
+        // OK, add copy
+        $transaction = $DB->start_delegated_transaction();
+        $copyid = $DB->insert_record('forumng_posts', $copy);
+
+        // Move old attachments to copy (note: we will save new attachments from filemanager draft
+        // area later)
+        if ($this->has_attachments()) {
+            $fs = get_file_storage();
+            $filecontext = $this->get_forum()->get_context(true);
+            foreach (array('attachment', 'message') as $filearea) {
+                $oldfiles = $fs->get_area_files($filecontext->id, 'mod_forumng', $filearea,
+                        $this->get_id(), 'id', false);
+                foreach ($oldfiles as $oldfile) {
+                    $filerecord = new stdClass();
+                    $filerecord->itemid = $copyid;
+                    $fs->create_file_from_storedfile($filerecord, $oldfile);
+                }
+                $fs->delete_area_files($filecontext->id, 'mod_forumng',
+                        $filearea, $this->get_id());
+            }
+        }
+
+        // Update existing entry with new data where it changed
+        $update = new StdClass;
+        $gotsubject = false;
+        if ($subject!==$this->postfields->subject) {
+            $update->subject = strlen(trim($subject)) == 0 ? null : $subject;
+            $gotsubject = true;
+        }
+        if (!$attachments && $this->postfields->attachments) {
+            $update->attachments = 0;
+        } else if ($attachments && !$this->postfields->attachments) {
+            $update->attachments = 1;
+        }
+        if ($setimportant) {
+            $update->important = 1;
+        } else {
+            $update->important = 0;
+        }
+        $update->mailstate = mod_forumng::MAILSTATE_NOT_MAILED;
+        $update->modified = $now;
+        $update->edituserid = mod_forumng_utils::get_real_userid($userid);
+
+        $update->id = $this->postfields->id;
+        $update->asmoderator = $asmoderator;
+        $DB->update_record('forumng_posts', $update);
+
+        if ($log) {
+            $this->log('edit post');
+        }
+
+        // Update in-memory representation
+        foreach ((array)$update as $name => $value) {
+            $this->postfields->{$name} = $value;
+        }
+        // If this is the root post, then changing its subject affects
+        // the discussion subhject
+        if ($this->is_root_post() && $gotsubject) {
+            $this->discussion->hack_subject($this->postfields->subject);
+        }
+
+        $transaction->allow_commit();
+
+        return $gotsubject;
+    }
+
+    /**
+     * Updates search data for this post.
+     * @param bool $expectingquery True if it might need to make a query to
+     *   get the subject
+     */
+    public function search_update($expectingquery = false) {
+        if (!mod_forumng::search_installed()) {
+            return;
+        }
+        global $DB;
+
+        $searchdoc = $this->search_get_document();
+
+        $transaction = $DB->start_delegated_transaction();
+        if ($this->get_deleted() || $this->get_discussion()->is_deleted() ||
+            $this->get_discussion()->is_making_search_change()) {
+            if ($searchdoc->find()) {
+                $searchdoc->delete();
+            }
+        } else {
+            // $title here is not the title appearing in the search result
+            // but the text which decides the search score
+            $title = $this->get_subject();
+            $searchdoc->update($title, $this->get_formatted_message());
+        }
+        $transaction->allow_commit();
+    }
+
+    /**
+     * Calls search_update on each child of the current post, and recurses.
+     * Used when the subject's discussion is changed.
+     */
+    public function search_update_children() {
+        if (!mod_forumng::search_installed()) {
+            return;
+        }
+        // If the in-memory post object isn't already part of a full
+        // discussion...
+        if (!is_array($this->children)) {
+            // ...then get one
+            $discussion = mod_forumng_discussion::get_from_id(
+                $this->discussion->get_id(),
+                $this->get_forum()->get_course_module_id());
+            $post = $discussion->get_root_post()->find_child($this->get_id());
+            // Do this update on the new discussion
+            $post->search_update_children();
+            return;
+        }
+
+        // Loop through all children
+        foreach ($this->children as $child) {
+            // Update its search fields
+            $child->search_update();
+
+            // Recurse
+            $child->search_update_children();
+        }
+    }
+
+    /**
+     * Marks a post as deleted.
+     * @param int $userid User ID to mark as having deleted the post
+     * @param bool $log If true, adds entry to Moodle log
+     */
+    public function delete($userid=0, $log=true) {
+        global $DB;
+
+        if ($this->postfields->deleted) {
+            return;
+        }
+        if (!$this->postfields->parentpostid) {
+            throw new coding_exception('Cannot delete discussion root post');
+        }
+        $transaction = $DB->start_delegated_transaction();
+
+        // Mark this post as deleted
+        $update = new StdClass;
+        $update->id = $this->postfields->id;
+        $update->deleted = time();
+        $update->deleteuserid = mod_forumng_utils::get_real_userid($userid);
+        $DB->update_record('forumng_posts', $update);
+        $this->postfields->deleted = $update->deleted;
+        $this->postfields->deleteuserid = $update->deleteuserid;
+
+        // In case this post is the last one, update the discussion field
+        $this->get_discussion()->possible_lastpost_change($this);
+
+        // May result in user becoming incomplete
+        $this->update_completion(false);
+
+        if ($log) {
+            $this->log('delete post');
+        }
+
+        $this->search_update();
+
+        $transaction->allow_commit();
+        $this->get_discussion()->uncache();
+    }
+
+    /**
+     * Marks a post as undeleted.
+     * @param bool $log If true, adds entry to Moodle log
+     */
+    public function undelete($log=true) {
+        global $DB;
+        if (!$this->postfields->deleted) {
+            return;
+        }
+        $transaction = $DB->start_delegated_transaction();
+
+        // Undelete this post
+        $update = new StdClass;
+        $update->id = $this->postfields->id;
+        $update->deleted = 0;
+        $update->deleteuserid = 0;
+        $DB->update_record('forumng_posts', $update);
+        $this->postfields->deleted = 0;
+        $this->postfields->deleteuserid = 0;
+
+        // In case this post is the last one, update the discussion field
+        $this->get_discussion()->possible_lastpost_change($this);
+
+        // May result in user becoming complete
+        $this->update_completion(true);
+
+        if ($log) {
+            $this->log('undelete post');
+        }
+
+        $this->search_update();
+
+        $transaction->allow_commit();
+        $this->get_discussion()->uncache();
+    }
+
+    /**
+     * Splits this post to become a new discussion
+     * @param $newsubject
+     * @param bool $log True to log action
+     * @return int ID of new discussion
+     */
+    public function split($newsubject, $log=true) {
+        global $DB;
+        $this->require_children();
+
+        // Begin a transaction
+        $transaction = $DB->start_delegated_transaction();
+
+        $olddiscussion = $this->get_discussion();
+
+        // Create new discussion
+        $newest = null;
+        $this->find_newest_child($newest);
+        $newdiscussionid = $olddiscussion->clone_for_split(
+            $this->get_id(), $newest->get_id());
+
+        // Update all child posts
+        $list = array();
+        $this->list_child_ids($list);
+        unset($list[0]); // Don't include this post itself
+        if (count($list) > 0) {
+            list($listsql, $listparams) = mod_forumng_utils::get_in_array_sql('id', $list);
+            $DB->execute("
+UPDATE
+    {forumng_posts}
+SET
+    discussionid = ?
+WHERE
+    $listsql", array_merge(array($newdiscussionid), $listparams));
+        }
+
+        // Update any edited posts in this discussion. Edited posts are
+        // not included in the child id list above because they are not
+        // loaded as children, but they are conceptually stored as children
+        // of one of the posts being moved.
+        $parentlist = $list;
+        $parentlist[] = $this->get_id();
+        list($parentlistsql, $parentlistparams) = mod_forumng_utils::get_in_array_sql(
+                'parentpostid', $parentlist);
+        $DB->execute("
+UPDATE
+    {forumng_posts}
+SET
+    discussionid = ?
+WHERE
+    oldversion = 1 AND $parentlistsql", array_merge(array($newdiscussionid), $parentlistparams));
+
+        // Update this post
+        $changes = new stdClass;
+        $changes->id = $this->get_id();
+        $changes->subject = $newsubject;
+        $changes->parentpostid = null;
+        // When split the post, reset the important to 0 so that it is not highlighted.
+        $changes->important = 0;
+        // Note don't update modified time, or it makes this post unread,
+        // which isn't very helpful
+        $changes->discussionid = $newdiscussionid;
+        $DB->update_record('forumng_posts', $changes);
+
+        // Update read data if relevant
+        if (mod_forumng::enabled_read_tracking() &&
+            ($newest->get_modified() >= mod_forumng::get_read_tracking_deadline())) {
+            $rs = $DB->get_recordset_sql("
+SELECT
+    userid, time
+FROM
+    {forumng_read}
+WHERE
+    discussionid = ? AND time >= ?", array($olddiscussion->get_id(), $this->get_created()));
+            foreach ($rs as $rec) {
+                $rec->discussionid = $newdiscussionid;
+                $DB->insert_record('forumng_read', $rec);
+            }
+            $rs->close();
+        }
+
+        $olddiscussion->possible_lastpost_change();
+
+        if ($log) {
+            $this->log('split post');
+        }
+
+        $transaction->allow_commit();
+        $this->get_discussion()->uncache();
+
+        // If discussion-based completion is turned on, this may enable someone
+        // to complete
+        if ($this->get_forum()->get_completion_discussions()) {
+            $this->update_completion(true);
+        }
+
+        return $newdiscussionid;
+    }
+
+    /**
+     * Rates this post or updates an existing forum rating.
+     * @param $rating Rating (value depends on scale used) or NO_RATING
+     * @param $userid User ID or 0 for current user
+     */
+    public function rate($rating, $userid=0) {
+        global $DB;
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $transaction = $DB->start_delegated_transaction();
+
+        // Delete any existing rating
+        $DB->delete_records('forumng_ratings',
+            array('postid' => $this->postfields->id, 'userid' => $userid));
+
+        // Add new rating
+        if ($rating != self::NO_RATING) {
+            $ratingobj = new StdClass;
+            $ratingobj->userid = $userid;
+            $ratingobj->postid = $this->postfields->id;
+            $ratingobj->time = time();
+            $ratingobj->rating = $rating;
+            $DB->insert_record('forumng_ratings', $ratingobj);
+        }
+
+        // Tell grade to update
+        if ($this->get_forum()->get_grading()) {
+            $this->get_forum()->update_grades($this->get_user()->id);
+        }
+
+        $transaction->allow_commit();
+        $this->get_discussion()->uncache();
+    }
+
+    /**
+     * Records an action in the Moodle log for current user.
+     * @param string $action Action name - see datalib.php for suggested verbs
+     *   and this code for example usage
+     * @param int $replyid Specify only when adding a reply; when specified,
+     *   this is the reply ID (used because the reply entry is logged under
+     *   the new post, not the old one)
+     */
+    public function log($action, $replyid=0) {
+        if ($replyid) {
+            $postid = $replyid;
+        } else {
+            $postid = $this->postfields->id;
+        }
+        $params = array(
+                'context' => $this->get_forum()->get_context(),
+                'objectid' => $postid,
+                'other' => array('logurl' => $this->discussion->get_log_url() . '#p' . $postid,
+                    'discussid' => $this->get_discussion()->get_id())
+        );
+        if ($action == 'add reply') {
+            $classname = 'post_created';
+            $params['other']['parent'] = $this->get_id();
+        } else if ($action == 'edit post') {
+            $classname = 'post_updated';
+        } else if ($action == 'delete post') {
+            $classname = 'post_deleted';
+        } else if ($action == 'undelete post') {
+            $classname = 'post_undeleted';
+        } else if ($action == 'split post') {
+            $classname = 'post_split';
+        } else if ($action == 'report post') {
+            $classname = 'post_reported';
+        } else {
+            throw new coding_exception('Unknown forumng post log event.');
+        }
+        $class = '\\mod_forumng\\event\\' . $classname;
+        $event = $class::create($params);
+        $event->add_record_snapshot('course_modules', $this->get_forum()->get_course_module());
+        $event->add_record_snapshot('course', $this->get_forum()->get_course());
+        if (empty($replyid)) {
+            // Only add snapshot when talking about this post, not new reply.
+            $event->add_record_snapshot('forumng_posts', $this->postfields);
+        }
+        $event->trigger();
+    }
+
+    // Permissions
+    /*////////////*/
+
+    /**
+     * Makes security checks for viewing this post. Will not return if
+     * user cannot view it.
+     * This function should be a complete access check. It calls the
+     * discussion's equivalent method.
+     * Note that this function only works for the current user when used in
+     * interactive mode (ordinary web page view). It cannot be called in cron,
+     * web services, etc.
+     */
+    public function require_view() {
+        global $USER;
+        // Check forum and discussion view permission, group access, etc.
+        $this->discussion->require_view();
+
+        // Other than being able to view the discussion, no additional
+        // requirements to view a normal post
+        if (!$this->get_deleted() && !$this->is_old_version()) {
+            return true;
+        }
+
+        // User can see own deleted posts.
+        if (isset($USER) && $this->get_deleted() && $this->get_user()->id === $USER->id) {
+            return true;
+        }
+
+        // Deleted posts and old versions of edited posts require viewallposts
+        require_capability('mod/forumng:viewallposts',
+            $this->get_forum()->get_context());
+    }
+
+    /**
+     * Checks whether the user can add a new reply to this post, assuming that
+     * they can view the discussion.
+     * @param string &$whynot
+     * @param int $userid
+     * @return unknown_type
+     */
+    public function can_reply(&$whynot, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $context = $this->get_forum()->get_context();
+
+        // Check if post is a special case
+        if ($this->get_deleted() || $this->is_old_version()
+            || $this->get_discussion()->is_deleted()) {
+            $whynot = 'reply_notcurrentpost';
+            return false;
+        }
+
+        // Check if discussion is different group
+        if (!$this->get_discussion()->can_write_to_group()) {
+            $whynot = 'reply_wronggroup';
+            return false;
+        }
+
+        // Check if discussion is locked
+        if ($this->get_discussion()->is_locked()) {
+            $whynot = 'edit_locked';
+            return false;
+        }
+
+        // Check read-only dates
+        if ($this->get_forum()->is_read_only($userid)) {
+            $whynot = 'reply_readonly';
+            return false;
+        }
+
+        // Check permission
+        if (!has_capability('mod/forumng:replypost', $context, $userid)) {
+            $whynot = 'reply_nopermission';
+            return false;
+        }
+
+        // Let forum type veto reply if required
+        if (!$this->get_forum()->get_type()->can_reply($this, $userid)) {
+            $whynot = 'reply_typelimit';
+            return false;
+        }
+
+        // Throttling
+        if ($this->get_forum()->get_remaining_post_quota($userid) == 0) {
+            $whynot = 'reply_postquota';
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * @param int $userid User ID or 0 for current
+     * @return bool True if user can rate this post
+     */
+    public function can_rate($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return
+            !$this->get_deleted() && !$this->is_old_version()
+            && !$this->get_discussion()->is_deleted()
+            && !$this->get_discussion()->is_locked()
+            && $this->get_discussion()->can_write_to_group()
+            && $this->get_forum()->can_rate($this->get_created()) &&
+            $this->get_user()->id != $userid;
+    }
+
+
+    /**
+     * @param int $userid User ID or 0 for current
+     * @return bool True if user can view ratings for this post
+     */
+    public function can_view_ratings($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        return !$this->get_deleted() && !$this->is_old_version()
+            && $this->get_forum()->has_ratings() &&
+            has_capability($this->get_user()->id == $userid
+            ? 'mod/forumng:viewrating'
+            : 'mod/forumng:viewanyrating', $this->get_forum()->get_context());
+    }
+
+    public function can_split(&$whynot, $userid=0) {
+        // Check if this is a special case
+        if ($this->get_deleted() || $this->is_old_version()
+            || $this->get_discussion()->is_deleted()) {
+            $whynot = 'edit_notcurrentpost';
+            return false;
+        }
+
+        // Check if discussion is different group
+        if (!$this->get_discussion()->can_write_to_group()) {
+            $whynot = 'edit_wronggroup';
+            return false;
+        }
+
+        // Can't split root post
+        if ($this->is_root_post()) {
+            $whynot = 'edit_rootpost';
+            return false;
+        }
+
+        // Check permission
+        if (!$this->get_discussion()->can_split($whynot, $userid)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * @param string &$whynot
+     * @return bool True if user can alert this post
+     */
+    public function can_alert(&$whynot) {
+        // Check if the post has been deleted
+        if ($this->get_deleted() || $this->discussion->is_deleted()) {
+            $whynot = 'alert_notcurrentpost';
+            return false;
+        }
+
+        // If not site level or forum level reporting email has been set
+        if (!$this->get_forum()->has_reporting_email()) {
+            $whynot = 'alert_turnedoff';
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * @param string &$whynot
+     * @return bool True if can display the direct link
+     */
+    public function can_showdirectlink() {
+        // Check if the post has been deleted
+        if ($this->get_deleted() || $this->discussion->is_deleted()) {
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * Checks whether the user can delete the post, assuming that they can
+     * view the discussion.
+     * @param string &$whynot If returning false, set to the language string defining
+     *   reason for not being able to edit
+     * @param int $userid User ID or 0 if current
+     * @return bool True if user can edit this post
+     */
+    public function can_undelete(&$whynot, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $context = $this->get_forum()->get_context();
+
+        // Check if post is a special case
+        if ($this->is_old_version() || $this->get_discussion()->is_deleted()) {
+            $whynot = 'edit_notcurrentpost';
+            return false;
+        }
+
+        // Check if discussion is different group
+        if (!$this->get_discussion()->can_write_to_group()) {
+            $whynot = 'edit_wronggroup';
+            return false;
+        }
+
+        // Check if discussion is locked
+        if ($this->get_discussion()->is_locked()) {
+            $whynot = 'edit_locked';
+            return false;
+        }
+
+        if (!$this->get_deleted()) {
+            $whynot = 'edit_notdeleted';
+            return false;
+        }
+
+        // Check the 'edit any' capability (always required to undelete)
+        if (!has_capability('mod/forumng:editanypost', $context, $userid)) {
+            $whynot = 'edit_nopermission';
+            return false;
+        }
+
+        // Check read-only dates
+        if ($this->get_forum()->is_read_only($userid)) {
+            $whynot = 'edit_readonly';
+            return false;
+        }
+
+        // OK! They're allowed to undelete (whew)
+        $whynot = '';
+        return true;
+    }
+
+    /**
+     * Checks whether the user can delete the post, assuming that they can
+     * view the discussion.
+     * @param string &$whynot If returning false, set to the language string defining
+     *   reason for not being able to edit
+     * @param int $userid User ID or 0 if current
+     * @return bool True if user can edit this post
+     */
+    public function can_delete(&$whynot, $userid=0) {
+        // At present the logic for this is identical to the edit logic
+        // except that you can't delete the root post
+        return !$this->is_root_post() && $this->can_edit($whynot, $userid);
+    }
+
+    /**
+     * Checks whether the user can view deleted post info.
+     * @param string $whynot If returning false, set to the language string
+     *   defining reason for not being able to view edits
+     * @param int $userid User ID or 0 for current
+     * @return bool True if user can view deleted posts
+     */
+    public function can_view_deleted(&$whynot, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // Check the 'edit any' capability (this is checked for deleting/undeleting).
+        if (!has_capability('mod/forumng:editanypost',
+                $this->get_forum()->get_context(), $userid)) {
+            // Check if post belongs to specified user.
+            if ($this->get_user()->id != $userid) {
+                $whynot = 'edit_nopermission';
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    /**
+     * Checks whether the user can view edits to posts.
+     * @param string $whynot If returning false, set to the language string
+     *   defining reason for not being able to view edits
+     * @param int $userid User ID or 0 for current
+     * @return bool True if user can view edits
+     */
+    public function can_view_history(&$whynot, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        // Check the 'edit any' capability
+        if (!has_capability('mod/forumng:editanypost',
+                $this->get_forum()->get_context(), $userid)) {
+            $whynot = 'edit_nopermission';
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Checks whether the user can edit the post, assuming that they can
+     * view the discussion.
+     * @param string &$whynot If returning false, set to the language string defining
+     *   reason for not being able to edit
+     * @param int $userid User ID or 0 if current
+     * @return bool True if user can edit this post
+     */
+    public function can_edit(&$whynot, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $context = $this->get_forum()->get_context();
+
+        // Check if post is a special case
+        if ($this->get_deleted() || $this->is_old_version()
+            || $this->get_discussion()->is_deleted()) {
+            $whynot = 'edit_notcurrentpost';
+            return false;
+        }
+
+        // Check if discussion is different group
+        if (!$this->get_discussion()->can_write_to_group()) {
+            $whynot = 'edit_wronggroup';
+            return false;
+        }
+
+        // Check if discussion is locked
+        if ($this->get_discussion()->is_locked()) {
+            $whynot = 'edit_locked';
+            return false;
+        }
+
+        // Check the 'edit any' capability
+        $editanypost = has_capability('mod/forumng:editanypost',
+            $context, $userid);
+        if (!$editanypost) {
+            // If they don't have edit any, they must have either the
+            // 'start discussion' or 'reply post' capability (the same
+            // one they needed to create the post in the first place)
+            if (($this->is_root_post() &&
+                !has_capability('mod/forumng:startdiscussion', $context, $userid))
+                && (!$this->is_root_post() &&
+                !has_capability('mod/forumng:replypost', $context, $userid))) {
+                $whynot = 'edit_nopermission';
+                return false;
+            }
+        }
+
+        // Check post belongs to specified user
+        if (($this->get_user()->id != $userid) && !$editanypost) {
+            $whynot = 'edit_notyours';
+            return false;
+        }
+
+        // Check editing timeout
+        if ((time() > $this->get_edit_time_limit()) && !$editanypost) {
+            $whynot = 'edit_timeout';
+            return false;
+        }
+
+        // Check read-only dates
+        if ($this->get_forum()->is_read_only($userid)) {
+            $whynot = 'edit_readonly';
+            return false;
+        }
+
+        // OK! They're allowed to edit (whew)
+        $whynot = '';
+        return true;
+    }
+
+    /**
+     * @param int $userid User ID or 0 for current
+     * @return True if user can ignore the post editing time limit
+     */
+    public function can_ignore_edit_time_limit($userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        $context = $this->get_forum()->get_context();
+        return has_capability('mod/forumng:editanypost',
+            $context, $userid);
+    }
+
+    /**
+     * @return int Time limit after which users who don't have the edit-all
+     *   permission are not allowed to edit this post (as epoch value)
+     */
+    public function get_edit_time_limit() {
+        global $CFG;
+        return $this->get_created() + $CFG->maxeditingtime;
+    }
+
+    /**
+     * Checks that the user can edit this post - requiring all higher-level
+     * access too.
+     */
+    public function require_edit() {
+        // Check forum and discussion view permission, group access, etc.
+        $this->discussion->require_view();
+
+        // Check post edit
+        $whynot = '';
+        if (!$this->can_edit($whynot)) {
+            print_error($whynot, 'forumng', 'discuss.php?' .
+                    $this->discussion->get_link_params(mod_forumng::PARAM_HTML));
+        }
+    }
+
+    /**
+     * Checks that the user can reply to this post - requiring all higher-level
+     * access too.
+     */
+    public function require_reply() {
+        // Check forum and discussion view permission, group access, etc.
+        $this->discussion->require_view();
+
+        // Check post reply
+        $whynot = '';
+        if (!$this->can_reply($whynot)) {
+            print_error($whynot, 'forumng', 'discuss.php?' .
+                    $this->discussion->get_link_params(mod_forumng::PARAM_HTML));
+        }
+    }
+
+    /**
+     * @return bool asmoderator, null returned as ASMODERATOR_NO
+     */
+    public function get_asmoderator() {
+        return is_null($this->postfields->asmoderator)
+                ? mod_forumng::ASMODERATOR_NO : $this->postfields->asmoderator;
+    }
+
+    // Email
+    // ////.
+
+    /**
+     * Obtains a version of this post as an email.
+     * @param mod_forumng_post $inreplyto Message this one's replying to, or null
+     *   if none
+     * @param string &$subject Output: Message subject
+     * @param string $text Output: Message plain text
+     * @param string $html Output: Message HTML (or blank if not in HTML mode)
+     * @param bool $ishtml True if in HTML mode
+     * @param bool $canreply True if user can reply
+     * @param bool $viewfullnames True if user gets to see full names even when
+     *   these are normally hidden
+     * @param string $lang Language of receiving user
+     * @param number $timezone Time zone of receiving user
+     * @param bool $digest True if in digest mode (does not include parent
+     *   message or surrounding links).
+     * @param bool $discussionemail True if digest is of a single disussion;
+     *   includes 'post 1' information
+     * @param array $extraoptions Set values here to add or override post
+     *   display options
+     */
+    public function build_email($inreplyto, &$subject, &$text, &$html,
+            $ishtml, $canreply, $viewfullnames, $lang, $timezone, $digest=false,
+            $discussionemail=false, $extraoptions = array()) {
+        global $CFG, $USER;
+
+        $oldlang = $USER->lang;
+        $USER->lang = $lang;
+
+        $forum = $this->get_forum();
+        $cmid = $forum->get_course_module_id();
+        $course = $forum->get_course();
+        $discussion = $this->get_discussion();
+
+        // Get subject (may make DB query, unfortunately)
+        $subject = $course->shortname . ': ' . format_string($forum->get_name(), true) . ': ' .
+            format_string($this->get_effective_subject(true), true);
+
+        $canunsubscribe = mod_forumng::SUBSCRIPTION_FORCED !=
+            $forum->get_effective_subscription_option();
+
+        // Header
+        $text = '';
+        $html = '';
+        if (!$discussionemail && !$digest) {
+            $html .= "\n<body id='forumng-email'>\n\n";
+        }
+
+        // Navigation bar (breadcrumbs)
+        if (!$digest) {
+            $text .= $forum->get_course()->shortname . ' -> ';
+            $html .= "<div class='forumng-email-navbar'><a target='_blank' " .
+              "href='$CFG->wwwroot/course/view.php?id=$course->id'>" .
+              "$course->shortname</a> &raquo; ";
+
+            $text .= format_string($forum->get_name(), true);
+            $html .= "<a target='_blank' " .
+                "href='$CFG->wwwroot/mod/forumng/view.php?" .
+                $forum->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                format_string($forum->get_name(), true) . '</a>';
+
+            // Makes a query :(
+            if ($discussionsubject = $discussion->get_subject(true)) {
+                $text .= ' -> ' . format_string($discussionsubject, true);
+                $html .= " &raquo; <a target='_blank' " .
+                    "href='$CFG->wwwroot/mod/forumng/discuss.php?" .
+                    $discussion->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                    format_string($discussionsubject, true).'</a>';
+            }
+
+            $html .= '</div>';
+        }
+
+        // Main part of email
+        $options = array(
+            self::OPTION_EMAIL => true,
+            self::OPTION_DIGEST => $digest ? true : false,
+            self::OPTION_COMMAND_REPLY => ($canreply && !$digest),
+            self::OPTION_VIEW_FULL_NAMES => $viewfullnames ? true : false,
+            self::OPTION_TIME_ZONE => $timezone,
+            self::OPTION_VISIBLE_POST_NUMBERS => $discussionemail,
+            self::OPTION_USER_IMAGE => true);
+        foreach ($extraoptions as $key => $value) {
+            $options[$key] = $value;
+        }
+        $html .= $this->display(true, $options);
+        $displaytext = $this->display(false, $options);
+        // In digest, don't display mail divider if mail is blank (== deleted).t
+        if ($displaytext !== '' || !$digest) {
+            $text .= "\n" . mod_forumng_cron::EMAIL_DIVIDER;
+        }
+        $text .= $displaytext;
+
+        // Now we need to display the parent post (if any, and if not in digest)
+        if ($this->postfields->parentpostid && !$digest) {
+            // Print the 'In reply to' heading
+            $html .= '<h2>' . get_string('inreplyto', 'forumng') . '</h2>';
+
+            $text .= "\n" . mod_forumng_cron::EMAIL_DIVIDER;
+            $text .= get_string('inreplyto', 'forumng'). ":\n\n";
+
+            // Get parent post (unfortunately this requires extra queries)
+            $parent = self::get_from_id(
+                $this->postfields->parentpostid,
+                $this->get_forum()->get_course_module_id(), false);
+
+            $options = array(
+                self::OPTION_EMAIL => true,
+                self::OPTION_NO_COMMANDS => true,
+                self::OPTION_TIME_ZONE => $timezone);
+            foreach ($extraoptions as $key => $value) {
+                $options[$key] = $value;
+            }
+            $html .= $parent->display(true, $options);
+            $text .= $parent->display(false, $options);
+        }
+
+        if (!$digest && $canunsubscribe) {
+            $text .= "\n" . mod_forumng_cron::EMAIL_DIVIDER;
+            $text .= get_string("unsubscribe", "forum");
+            $text .= ": $CFG->wwwroot/mod/forumng/subscribe.php?" .
+                $this->get_forum()->get_link_params(mod_forumng::PARAM_PLAIN) . "\n";
+
+            $html .= "<hr size='1' noshade='noshade' />" .
+                "<div class='forumng-email-unsubscribe'>" .
+                "<a href='$CFG->wwwroot/mod/forumng/subscribe.php?" .
+                $this->get_forum()->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                get_string('unsubscribe', 'forumng'). '</a></div>';
+        }
+
+        if (!$digest && !$discussionemail) {
+            $html .= '</body>';
+        }
+
+        $USER->lang = $oldlang;
+
+        // If not in HTML mode, chuck away the HTML version
+        if (!$ishtml) {
+            $html = '';
+        }
+    }
+
+    // UI
+    // //.
+
+    /**
+     * Displays this post.
+     * @param array $html True for HTML format, false for plain text
+     * @param array $options See forumngtype::display_post for details
+     * @return string HTML or text of post
+     */
+    public function display($html, $options=null) {
+        global $USER;
+
+        // Initialise options array
+        if (!is_array($options)) {
+            $options = array();
+        }
+        // Default for other options
+        if (!array_key_exists(self::OPTION_EMAIL, $options)) {
+            $options[self::OPTION_EMAIL] = false;
+        }
+        if (!array_key_exists(self::OPTION_EXPORT, $options)) {
+            $options[self::OPTION_EXPORT] = false;
+        }
+        if (!array_key_exists(self::OPTION_DIGEST, $options)) {
+            $options[self::OPTION_DIGEST] = false;
+        }
+        if (!array_key_exists(self::OPTION_SINGLE_POST, $options)) {
+            $options[self::OPTION_SINGLE_POST] = false;
+        }
+        if (!array_key_exists(self::OPTION_NO_COMMANDS, $options)) {
+            $options[self::OPTION_NO_COMMANDS] = $options[self::OPTION_EXPORT];
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_REPLY, $options)) {
+            $options[self::OPTION_COMMAND_REPLY] =
+                !$options[self::OPTION_NO_COMMANDS] && $this->can_reply($junk);
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_EDIT, $options)) {
+            $options[self::OPTION_COMMAND_EDIT] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_edit($junk);
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_DELETE, $options)) {
+            $options[self::OPTION_COMMAND_DELETE] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_delete($junk);
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_REPORT, $options)) {
+            $options[self::OPTION_COMMAND_REPORT] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_alert($junk);
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_DIRECTLINK, $options)) {
+            $options[self::OPTION_COMMAND_DIRECTLINK] =
+                !$options[self::OPTION_NO_COMMANDS] && !$options[self::OPTION_EMAIL] &&
+                        $this->can_showdirectlink();
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_UNDELETE, $options)) {
+            $options[self::OPTION_COMMAND_UNDELETE] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_undelete($junk);
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_SPLIT, $options)) {
+            $options[self::OPTION_COMMAND_SPLIT] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_split($junk);
+        }
+        if (!array_key_exists(self::OPTION_COMMAND_HISTORY, $options)) {
+            $options[self::OPTION_COMMAND_HISTORY] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_view_history($junk);
+        }
+        if (!array_key_exists(self::OPTION_READ_TIME, $options)) {
+            $options[self::OPTION_READ_TIME] = time();
+        }
+        if (!array_key_exists(self::OPTION_VIEW_FULL_NAMES, $options)) {
+            // Default to whether current user has the permission in context
+            $options[self::OPTION_VIEW_FULL_NAMES] = has_capability(
+                'moodle/site:viewfullnames', $this->get_forum()->get_context());
+        }
+        if (!array_key_exists(self::OPTION_TIME_ZONE, $options)) {
+            // Default to current user timezone
+            $options[self::OPTION_TIME_ZONE] = $USER->timezone;
+        }
+        if (!array_key_exists(self::OPTION_RATINGS_EDIT, $options)) {
+            $options[self::OPTION_RATINGS_EDIT] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_rate();
+        }
+        if (!array_key_exists(self::OPTION_EXPANDED, $options)) {
+            $options[self::OPTION_EXPANDED] = true;
+        }
+        if (!array_key_exists(self::OPTION_FLAG_CONTROL, $options)) {
+            $options[self::OPTION_FLAG_CONTROL] =
+                !$options[self::OPTION_NO_COMMANDS] &&
+                !$options[self::OPTION_EMAIL] && $this->can_flag() &&
+                $options[self::OPTION_EXPANDED];
+        }
+        if (!array_key_exists(self::OPTION_VIEW_DELETED_INFO, $options)) {
+            $options[self::OPTION_VIEW_DELETED_INFO] =
+                $this->can_view_deleted($junk) && !$options[self::OPTION_EXPORT];
+        }
+        if (!array_key_exists(self::OPTION_FULL_ADDRESSES, $options)) {
+            $options[self::OPTION_FULL_ADDRESSES] =
+                $options[self::OPTION_EXPORT] || $options[self::OPTION_EMAIL];
+        }
+        if (!array_key_exists(self::OPTION_DISCUSSION_SUBJECT, $options)) {
+            $options[self::OPTION_DISCUSSION_SUBJECT] = false;
+        }
+        if (!array_key_exists(self::OPTION_SELECTABLE, $options)) {
+            $options[self::OPTION_SELECTABLE] = false;
+        }
+        if (!array_key_exists(self::OPTION_VISIBLE_POST_NUMBERS, $options)) {
+            $options[self::OPTION_VISIBLE_POST_NUMBERS] = false;
+        }
+        if (!array_key_exists(self::OPTION_USER_IMAGE, $options)) {
+            $options[self::OPTION_USER_IMAGE] = true;
+        }
+        if (!array_key_exists(self::OPTION_PRINTABLE_VERSION, $options)) {
+            $options[self::OPTION_PRINTABLE_VERSION] = false;
+        }
+        if (!array_key_exists(self::OPTION_RATINGS_VIEW, $options)) {
+            $options[self::OPTION_RATINGS_VIEW] =
+                ((!$options[self::OPTION_NO_COMMANDS] && !$options[self::OPTION_EMAIL]) ||
+                    $options[self::OPTION_PRINTABLE_VERSION]) &&
+                    $this->can_view_ratings();
+        }
+        $dojumps = !$options[self::OPTION_NO_COMMANDS] && !$options[self::OPTION_EMAIL] &&
+                !$options[self::OPTION_SINGLE_POST];
+        if (!array_key_exists(self::OPTION_JUMP_NEXT, $options)) {
+            $options[self::OPTION_JUMP_NEXT] =
+                    ($dojumps && $this->is_unread() && ($next=$this->get_next_unread()))
+                    ? $next->get_id() : null;
+        }
+        if (!array_key_exists(self::OPTION_JUMP_PREVIOUS, $options)) {
+            $options[self::OPTION_JUMP_PREVIOUS] =
+                    ($dojumps && $this->is_unread() && $this->get_previous_unread())
+                    ? $this->get_previous_unread()->get_id() : null;
+        }
+        if (!array_key_exists(self::OPTION_JUMP_PARENT, $options)) {
+            $options[self::OPTION_JUMP_PARENT] =
+                    ($dojumps && !$this->is_root_post()) ? $this->get_parent()->get_id() : null;
+        }
+        if (!array_key_exists(self::OPTION_FIRST_UNREAD, $options)) {
+            $options[self::OPTION_FIRST_UNREAD] = !$options[self::OPTION_EMAIL] &&
+                    !$options[self::OPTION_SINGLE_POST] && $this->is_unread() &&
+                    !$this->get_previous_unread();
+        }
+        if (!array_key_exists(self::OPTION_UNREAD_NOT_HIGHLIGHTED, $options)) {
+            $options[self::OPTION_UNREAD_NOT_HIGHLIGHTED] = false;
+        }
+        if (!array_key_exists(self::OPTION_IS_ANON, $options)) {
+            if (self::get_asmoderator() == mod_forumng::ASMODERATOR_ANON &&
+                    $this->get_forum()->get_can_post_anon()) {
+                $options[self::OPTION_IS_ANON] = true;
+                $options[self::OPTION_INDICATE_MODERATOR] = true;
+            } else {
+                $options[self::OPTION_IS_ANON] = false;
+                $options[self::OPTION_INDICATE_MODERATOR] = false;
+            }
+        }
+        if (self::get_asmoderator() == mod_forumng::ASMODERATOR_IDENTIFY) {
+            $options[self::OPTION_INDICATE_MODERATOR] = true;
+        } else {
+            $options[self::OPTION_INDICATE_MODERATOR] = false;
+        }
+        if ($options[self::OPTION_IS_ANON] == true ||
+                $options[self::OPTION_INDICATE_MODERATOR] == true) {
+            if (!array_key_exists(self::OPTION_VIEW_ANON_INFO, $options)) {
+                if ($this->get_forum()->can_post_anonymously()) {
+                    $options[self::OPTION_VIEW_ANON_INFO] = true;
+                } else {
+                    $options[self::OPTION_VIEW_ANON_INFO] = false;
+                }
+            }
+        }
+        if (!array_key_exists(self::OPTION_PARTICIPATION, $options)) {
+            $options[self::OPTION_PARTICIPATION] = false;
+        }
+
+        // Get forum type to do actual display
+        $out = mod_forumng_utils::get_renderer();
+        return $out->render_post($this, $html, $options);
+    }
+
+    public function display_with_children($options = null, $recursing = false) {
+        global $USER;
+        $this->require_children();
+
+        if (!$recursing) {
+            // Initialise options array
+            if (!is_array($options)) {
+                $options = array();
+            }
+            if (!array_key_exists(self::OPTION_EXPORT, $options)) {
+                $options[self::OPTION_EXPORT] = false;
+            }
+            if (!array_key_exists(self::OPTION_CHILDREN_EXPANDED, $options)) {
+                $options[self::OPTION_CHILDREN_EXPANDED] =
+                    $options[self::OPTION_EXPORT];
+            }
+            if (!array_key_exists(self::OPTION_CHILDREN_COLLAPSED, $options)) {
+                $options[self::OPTION_CHILDREN_COLLAPSED] = false;
+            }
+            if (!array_key_exists(self::OPTION_INCLUDE_LOCK, $options)) {
+                $options[self::OPTION_INCLUDE_LOCK] = false;
+            }
+        }
+
+        $export = $options[self::OPTION_EXPORT];
+
+        // Decide ID of locked post to hide (if any)
+        if ($this->discussion->is_locked() &&
+            !$options[self::OPTION_INCLUDE_LOCK]) {
+            $lockpostid = $this->discussion->get_last_post_id();
+        } else {
+            $lockpostid = 0;
+        }
+
+        // Display this post. It should be 'short' unless it is unread, parent
+        // of unread post, top post, or flagged
+        $options[self::OPTION_EXPANDED] = !$recursing ||
+            ( !$options[self::OPTION_CHILDREN_COLLAPSED] &&
+                ($this->is_unread()
+                || $this->is_flagged()
+                || $this->has_unread_child() || $this->forceexpand || !$recursing
+                || $options[self::OPTION_CHILDREN_EXPANDED]));
+
+        $output = $this->display(true, $options);
+
+        // Are there any children?
+        if (count($this->children) > 0 && !($lockpostid
+            && count($this->children)==1
+            && reset($this->children)->get_id()==$lockpostid)) {
+            $output .= $export ? '<blockquote>' : '<div class="forumng-replies">';
+            foreach ($this->children as $child) {
+                if ($child->get_id()!=$lockpostid) {
+                    $output .= $child->display_with_children($options, true);
+                }
+            }
+            $output .= $export ? '</blockquote>' : '</div>';
+        }
+
+        if (!$recursing) {
+            $out = mod_forumng_utils::get_renderer();
+            $output = $out->render_post_group($this->get_discussion(), $output);
+        }
+
+        return $output;
+    }
+
+    /** @return string User picture HTML (for post author) */
+    public function display_user_picture() {
+        $out = mod_forumng_utils::get_renderer();
+        return $out->user_picture($this->get_user(),
+                array('courseid'=>$this->get_forum()->get_course_id()));
+    }
+
+    /**
+     * Displays group pictures. This may make a (single) DB query if group
+     * data has not yet been retrieved for this discussion.
+     * @return string Group pictures HTML (empty string if none) for groups
+     * that post author belongs to
+     */
+    public function display_group_pictures() {
+        $groups = $this->discussion->get_user_groups($this->get_user()->id);
+        if (count($groups) == 0) {
+            return '';
+        }
+        return print_group_picture($groups, $this->get_forum()->get_course_id(),
+            false, true);
+    }
+
+    /**
+     * Displays this draft as an item on the list.
+     * @param bool $last True if this is last in list
+     * @return string HTML code for the item
+     */
+    public function display_flagged_list_item($last) {
+        return $this->get_forum()->get_type()->display_flagged_list_item(
+            $this, $last);
+    }
+
+    /**
+     * Describes the post fields in JSON format. This is used for the AJAX
+     * edit code.
+     * @return string JSON structure listing key post fields.
+     */
+    public function prepare_edit_json() {
+        global $USER;
+        $forum = $this->get_forum();
+        $filecontext = $forum->get_context(true);
+        $fileoptions = array('subdirs'=>false, 'maxbytes'=>$forum->get_max_bytes());
+
+        // Prepare draft area for attachments
+        $draftitemid = 0;
+        file_prepare_draft_area($draftitemid, $filecontext->id, 'mod_forumng', 'attachment',
+                $this->get_id(), $fileoptions);
+
+        // Prepare draft area for message files
+        $messagedraftitemid = 0;
+        $message = $this->get_raw_message();
+        $message = file_prepare_draft_area($messagedraftitemid, $filecontext->id, 'mod_forumng',
+                'message', $this->get_id(), $fileoptions, $message);
+
+        // Get list of files for main attachment area
+        $options = file_get_drafarea_files($draftitemid, '/');
+        $usercontext = context_user::instance($USER->id);
+        $fs = get_file_storage();
+        $files = $fs->get_area_files($usercontext->id, 'user', 'draft',
+                $options->itemid, 'id', false);
+        $options->filecount = count($files);
+
+        // Get list of files for message area
+        $messageoptions = file_get_drafarea_files($messagedraftitemid, '/');
+        $files = $fs->get_area_files($usercontext->id, 'user', 'draft',
+                $messageoptions->itemid, 'id', false);
+        $messageoptions->filecount = count($files);
+
+        // Put everything together with basic data
+        $basicvalues = (object)array('subject'=>$this->get_subject(),
+            'message'=>$message, 'format'=>$this->get_format(),
+            'setimportant'=>$this->is_important() ? 1 : 0);
+        $basicvalues->options = $options;
+        $basicvalues->messageoptions = $messageoptions;
+
+        // Add time limit info
+        $timelimit = $this->can_ignore_edit_time_limit()
+            ? 0 : $this->get_edit_time_limit();
+        if ($timelimit) {
+            $basicvalues->editlimit = $timelimit-time();
+            $basicvalues->editlimitmsg = get_string('editlimited', 'forumng',
+                    userdate($timelimit-30, get_string('strftimetime', 'langconfig')));
+        } else {
+            $basicvalues->editlimit = 0;
+        }
+
+        // JSON encoding
+        return json_encode($basicvalues);
+    }
+
+    /**
+     * Prints AJAX version of the post to output, and exits.
+     * @param mixed $postorid Post object or ID of post
+     * @param int $cloneid If $postorid is an id, a clone id may be necessary
+     *   to construct the post
+     * @param array $options Post options if any
+     * @param int $postid ID of post
+     */
+    public static function print_for_ajax_and_exit($postorid, $cloneid=null,
+        $options=array()) {
+        header('Content-Type: text/plain');
+        echo self::get_post_html($postorid, $cloneid, $options);
+        exit;
+    }
+
+    /**
+     * Internal function that obtains HTML of a single post.
+     * @param mixed $postorid Post object or ID of post
+     * @param int $cloneid If $postorid is an id, a clone id may be necessary
+     *   to construct the post
+     * @param array $options Post options if any
+     * @return string HTML of post
+     */
+    private static function get_post_html($postorid, $cloneid=null,
+            $options=array()) {
+        if ($postorid === 0) {
+            // No post to show.
+            return '<div></div>';
+        }
+        if (is_object($postorid)) {
+            $post = $postorid;
+        } else {
+            $post = self::get_from_id($postorid, $cloneid, true);
+        }
+        return trim($post->display(true, $options));
+    }
+
+    /**
+     * Prints version of the post suitable for being read out of the iframe
+     * to output inside a hidden div with a script tag to inform the parent,
+     * then exits.
+     * @param mixed $postorid Post object or ID of post
+     * @param int $cloneid If $postorid is an id, a clone id may be necessary
+     *   to construct the post
+     * @param array $options Post options if any
+     * @param int $postid ID of post
+     */
+    public static function print_for_iframe_and_exit($postorid, $cloneid=null,
+            $options=array()) {
+        $posthtml = self::get_post_html($postorid, $cloneid, $options);
+        $script = html_writer::tag('script', 'window.parent.iframe_success(window);',
+                array('type' => 'text/javascript'));
+
+        echo '<!DOCTYPE html>';
+        echo html_writer::tag('html',
+                html_writer::tag('head', html_writer::tag('title', 'Result') .
+                html_writer::tag('body',
+                    html_writer::tag('div', $posthtml, array('style' => 'display:none')) .
+                    $script)));
+        exit;
+    }
+
+    // Completion
+    /*///////////*/
+
+    public function update_completion($positive) {
+        // Do nothing if completion isn't enabled
+        if (!$this->get_forum()->is_auto_completion_enabled(true)) {
+            return;
+        }
+        $course = $this->get_forum()->get_course();
+        $cm = $this->get_forum()->get_course_module();
+        $completion = new completion_info($course);
+        $completion->update_state($cm, $positive ? COMPLETION_COMPLETE : COMPLETION_INCOMPLETE,
+                $this->postfields->userid);
+    }
+
+    /**
+     * Append hash after image link found in the document.
+     *
+     * @param string $html HTML string.
+     * @return string mixed HTML string.
+     */
+    protected function add_hash_to_image($html) {
+        global $CFG;
+        $salt = context_course::instance($this->get_forum()->get_course()->id)->id;
+
+        $doc = new DOMDocument();
+        $previousinternalerrors = libxml_use_internal_errors(true);
+        $doc->loadHTML($html);
+        libxml_clear_errors();
+        libxml_use_internal_errors($previousinternalerrors);
+
+        $tags = $doc->getElementsByTagName('img');
+
+        // Image source will be replace.
+        $srcbefore = array();
+        // Image source will replace.
+        $srcafter = array();
+        $internaldomain = $this->get_domain_from_url($CFG->wwwroot);
+        foreach ($tags as $tag) {
+            $src = $tag->getAttribute('src');
+            $urldomain = $this->get_domain_from_url($src);
+            // Only add the hash to internal image link.
+            if ($internaldomain === $urldomain) {
+                $srcarr = explode('/', $src);
+                $arrlength = count($srcarr);
+                // Get from last to first in case the domain has more slash.
+                $activity = $srcarr[$arrlength - 4];
+                $area = $srcarr[$arrlength - 3];
+                // This image must belong to message area of forumng.
+                if ($activity == 'mod_forumng' && $area == 'message') {
+                    $imagename = urldecode($srcarr[$arrlength - 1]);
+                    $srcbefore[] = $src;
+                    $srcafter[] = $src . '/' . sha1($imagename . $salt);
+                }
+            }
+        }
+
+        return str_replace($srcbefore, $srcafter, $html);
+    }
+
+    /**
+     * @param string $url
+     * @return string mixed
+     */
+    protected function get_domain_from_url($url) {
+        $host = parse_url($url, PHP_URL_HOST);
+        if (!$host) {
+            $host = explode('/', $host);
+            $host = $host[0];
+        }
+        $regex = '/^www.(.*)/';
+        return preg_replace($regex, '$1', $host);
+    }
+}
diff --git a/mod/forumng/mod_forumng_utils.php b/mod/forumng/mod_forumng_utils.php
new file mode 100644
index 0000000..53bfaee
--- /dev/null
+++ b/mod/forumng/mod_forumng_utils.php
@@ -0,0 +1,606 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class that holds utility functions used by forum.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_utils {
+
+    // DB wrapper function
+    /*////////////////////*/
+
+    /**
+     * Similar to core $DB->get_in_or_equal, but permits empty array and requires the value to
+     * be passed to this function. The returned SQL fragment is a complete expression that returns
+     * boolean TRUE or FALSE.
+     *
+     * As an example, if you want to find out if the SQL expression
+     * f.id is contained within the array of ids $items:
+     *
+     * list($sql, $params) = get_in_array_sql('f.id', $items);
+     * $DB->get_records_sql("SELECT * FROM whatever WHERE $sql", $params);
+     * @param string $value SQL expression for value to be compared with array items
+     * @param array $items Array of IDs (or similar) that the value will be compared with
+     * @param int $type bound param type SQL_PARAMS_QM or SQL_PARAMS_NAMED
+     * @param string $start named param placeholder start
+     * @return array - $sql and $params
+     */
+    public static function get_in_array_sql($value, $items,
+            $type=SQL_PARAMS_QM, $start='param0000') {
+        global $DB;
+        if (is_array($items) && empty($items)) {
+            // Empty array returns false. The keyword FALSE is not supported on all databases
+            // but 1=0 probably should be.
+            return array('(1=0)', array());
+        }
+        list ($sql, $params) = $DB->get_in_or_equal($items, $type, $start);
+        return array($value . ' ' . $sql, $params);
+    }
+
+    // Exception handling
+    /*///////////////////*/
+
+    /**
+     * Adds exception information to Moodle log.
+     * @param Exception $e Exception
+     */
+    public static function log_exception(Exception $e) {
+        global $DB;
+
+        $info = '';
+
+        // Default courseid (may override later on)
+        global $COURSE;
+        $courseid = isset($COURSE->id) ? $COURSE->id  : 0;
+        $cmid = 0;
+
+        // These are numeric params so OK to include; I made this list from
+        // all the params in editpost.php where this is initially implemented
+        foreach (array('clone', 'id', 'd', 'p', 'ajax', 'draft', 'group', 'replyto',
+                'lock') as $param) {
+            if ($val = optional_param($param, 0, PARAM_INT)) {
+                $info .= $param . '=' . $val . ',';
+
+                // Guess courseid from param
+                if (!$cmid) {
+                    if ($param === 'clone' || $param === 'id') {
+                        $cmid = $val;
+                    } else if ($param === 'd') {
+                        $cmid = $DB->get_field_sql(
+                                'SELECT cm.id FROM {forumng_discussions} fd ' .
+                                'JOIN {forumng} f ON f.id = fd.forumngid ' .
+                                'JOIN {modules} m ON m.name = ? ' .
+                                'JOIN {course_modules} cm ON cm.instance = f.id ' .
+                                    'AND cm.module = m.id ' .
+                                'WHERE fd.id = ?',
+                                array('forumng', $val), IGNORE_MISSING);
+                    } else if ($param === 'p' || $param === 'replyto') {
+                        $cmid = $DB->get_field_sql(
+                                'SELECT cm.id FROM {forumng_posts} fp ' .
+                                'JOIN {forumng_discussions} fd ON fd.id = fp.discussionid ' .
+                                'JOIN {forumng} f ON f.id = fd.forumngid ' .
+                                'JOIN {modules} m ON m.name = ? ' .
+                                'JOIN {course_modules} cm ON cm.instance = f.id ' .
+                                    'AND cm.module = m.id ' .
+                                'WHERE fp.id = ?',
+                                array('forumng', $val), IGNORE_MISSING);
+                    }
+                }
+            }
+        }
+
+        if ($cmid) {
+            $courseid = $DB->get_field('course_modules', 'course', array('id' => $cmid),
+                IGNORE_MISSING);
+        }
+
+        // Remove final ,
+        $info = preg_replace('~\,$~', '', $info);
+
+        // Trace begins with | sign
+        $info .= '|';
+        global $CFG;
+
+        // Annoyingly the trace array does not include the 'first' location
+        $firsttrace = array('file' => $e->getFile(), 'line' => $e->getLine());
+        $trace = array_merge(array($firsttrace), $e->getTrace());
+
+        $file = '';
+        foreach ($trace as $line) {
+            // To reduce the number of required characters, remove the location
+            // prefix and .php, and remove mod/forumng/ too.
+            $file = str_replace($CFG->dirroot . '/', '', $line['file']);
+            $file = str_replace('mod/forumng/', '', $file);
+            $file = str_replace('.php', '', $file);
+            $info .= $file . ':' . $line['line'] . ',';
+        }
+
+        // Remove final ,
+        $info = preg_replace('~\,$~', '', $info);
+
+        // Finally let's add the exception message
+        $info .= '|' . $e->getMessage();
+
+        // Cut off (using textlib in case message contains UTF-8)
+        if (core_text::strlen($info) > 255) {
+            // Use first part + ellipsis
+            $info = core_text::substr($info, 0, 254) . html_entity_decode('&#x2026;', ENT_QUOTES, 'UTF-8');
+        }
+
+        // Add entry to Moodle log (using root file in action)
+        $cmid = $cmid ? $cmid : 0;
+        $courseid = $courseid ? $courseid : 0;
+        $params = array(
+                'context' => context_module::instance($cmid),
+                'other' => array('info' => $info, 'url' => $_SERVER['REQUEST_URI'])
+        );
+        switch ($file) {
+            case 'editpost':
+                $event = \mod_forumng\event\post_updated_failed::create($params);
+                break;
+        }
+        $event->trigger();
+    }
+
+    // Renderer
+    /*/////////*/
+
+    /**
+     * Obtains the forum renderer. This is necessary because the forum renderer has functions that
+     * are not included in the default $OUTPUT renderer.
+     * @return mod_forumng_renderer Singleton renderer
+     */
+    public static function get_renderer() {
+        // It probably doesn't take very long to construct one, but let's cache it anyhow
+        static $out;
+        if (!$out) {
+            global $PAGE;
+            $out = $PAGE->get_renderer('mod_forumng');
+        }
+        return $out;
+    }
+
+    // Exception-safe IO
+    /*//////////////////*/
+
+    // TODO Are these still needed now attachments were dumped to core?
+
+    /**
+     * Deletes a file.
+     * @param string $file File to delete
+     * @throws mod_forumng_exception If the delete fails
+     */
+    public static function unlink($file) {
+        if (!unlink($file)) {
+            require_once(dirname(__FILE__) . '/mod_forumng_file_exception.php');
+            throw new mod_forumng_file_exception("Failed to delete $file");
+        }
+    }
+
+    /**
+     * Renames a file, without needing to check the return value.
+     * @param $oldfile Old name
+     * @param $newfile New name
+     * @throws mod_forumng_exception If the rename fails
+     */
+    public static function rename($oldfile, $newfile) {
+        if (!rename($oldfile, $newfile)) {
+            require_once(dirname(__FILE__) . '/mod_forumng_file_exception.php');
+            throw new mod_forumng_file_exception("Failed to rename $oldfile to $newfile");
+        }
+    }
+
+    /**
+     * Deletes a folder, without needing to check the return value. (Note:
+     * This is not a recursive delete. You need to delete files first.)
+     * @param string $folder Path of folder
+     * @throws mod_forumng_exception If the delete fails
+     */
+    public static function rmdir($folder) {
+        if (!rmdir($folder)) {
+            require_once(dirname(__FILE__) . '/mod_forumng_file_exception.php');
+            throw new mod_forumng_file_exception("Failed to delete folder $folder");
+        }
+    }
+
+    /**
+     * Creates a folder, without needing to check the return value. (Note:
+     * This is not a recursive create. You need to create the parent first.)
+     * @param string $folder Path of folder
+     * @throws mod_forumng_exception If the create fails
+     */
+    public static function mkdir($folder) {
+        if (!mkdir($folder)) {
+            require_once(dirname(__FILE__) . '/mod_forumng_file_exception.php');
+            throw new mod_forumng_file_exception("Failed to make folder $folder");
+        }
+    }
+
+    /**
+     * Copies a file, without needing to check the return value.
+     * @param $oldfile Old name
+     * @param $newfile New name
+     * @throws mod_forumng_exception If the copy fails
+     */
+    public static function copy($oldfile, $newfile) {
+        if (!copy($oldfile, $newfile)) {
+            require_once(dirname(__FILE__) . '/mod_forumng_file_exception.php');
+            throw new mod_forumng_file_exception("Failed to copy $oldfile to $newfile");
+        }
+    }
+
+    /**
+     * Opens a directory handle. The directory must exist or this function
+     * will throw an exception.
+     * @param string $folder Folder to open
+     * @return int Handle
+     * @throws mod_forumng_exception If the open fails
+     */
+    public static function opendir($folder) {
+        $handle = @opendir($folder);
+        if (!$handle) {
+            require_once(dirname(__FILE__) . '/mod_forumng_file_exception.php');
+            throw new mod_forumng_file_exception(
+              "Failed to open folder: $folder");
+        }
+        return $handle;
+    }
+
+    // SQL field selections
+    /*/////////////////////*/
+
+    /**
+     * Makes a list of fields with alias in front.
+     * @param $fields Field
+     * @param $alias Table alias (also used as field prefix) - leave blank for
+     *   none
+     * @return SQL SELECT list
+     */
+    private static function select_fields($fields, $alias = '') {
+        $result = '';
+        if ($alias === '') {
+            $fieldprefix = '';
+            $nameprefix = '';
+        } else {
+            $fieldprefix = $alias . '.';
+            $nameprefix = $alias . '_';
+        }
+        foreach ($fields as $field) {
+            if ($result) {
+                $result .= ',';
+            }
+            $result .= $fieldprefix . $field . ' as ' . $nameprefix . $field;
+        }
+        return $result;
+    }
+
+    /**
+     * @param bool $includemailfields If true, includes email fields (loads)
+     * @return array List of all field names in mdl_user to include
+     */
+    public static function get_username_fields($includemailfields=false) {
+        // Get core user name fields, for use with fullname etc.
+        $namefields = get_all_user_name_fields();
+        return $includemailfields
+            ?  array('id', 'username', 'picture', 'url',
+                'imagealt', 'email', 'maildisplay', 'mailformat', 'maildigest',
+                'emailstop', 'deleted', 'auth', 'timezone', 'lang', 'idnumber') + $namefields
+            :   array('id', 'username', 'picture', 'url',
+                'imagealt', 'idnumber', 'email') + $namefields;
+    }
+
+    /**
+     * Used when selecting users inside other SQL statements.
+     * Returns list of fields suitable to go within the SQL SELECT block. For
+     * example, if the alias is 'fu', one field will be fu.username AS fu_username.
+     * Note, does not end in a comma.
+     * @param string $alias Alias of table to extract
+     * @param bool $includemailfields If true, includes additional fields
+     *   needed for sending emails
+     * @return string SQL select fields (no comma at start or end)
+     */
+    public static function select_username_fields($alias, $includemailfields = false) {
+        return self::select_fields(
+            self::get_username_fields($includemailfields), $alias);
+    }
+
+    public static function select_course_module_fields($alias) {
+        $fields = array('id', 'course', 'module', 'instance', 'section',
+            'added', 'score', 'indent', 'visible', 'visibleold', 'groupmode',
+            'groupingid', 'idnumber', 'completion',
+              'completiongradeitemnumber', 'completionview',
+              'completionexpected');
+
+        return self::select_fields($fields, $alias);
+    }
+
+    public static function select_course_fields($alias) {
+        return self::select_fields(array('id', 'shortname', 'fullname', 'format'),
+            $alias);
+    }
+
+    public static function select_context_fields($alias) {
+        return self::select_fields(array('id', 'contextlevel', 'instanceid',
+            'path', 'depth'), $alias);
+    }
+
+    /**
+     * Used when selecting forums inside other SQL statements.
+     * @param string $alias Alias of table to extract
+     * @return string SQL select fields (no comma at start or end)
+     */
+    public static function select_mod_forumng_fields($alias) {
+        return self::select_fields(array('id', 'course', 'name', 'type',
+            'intro', 'introformat', 'introduction', 'introductionformat',
+            'ratingscale', 'ratingfrom', 'ratinguntil', 'grading',
+            'attachmentmaxbytes', 'reportingemail', 'subscription', 'feedtype', 'feeditems',
+            'maxpostsperiod', 'maxpostsblock', 'postingfrom', 'postinguntil',
+            'typedata', 'magicnumber', 'originalcmid', 'shared', 'canpostanon', 'enabletags', 'enableratings'), $alias);
+    }
+
+    /**
+     * Used when selecting discussions inside other SQL statements.
+     * @param string $alias Alias of table to extract
+     * @return string SQL select fields (no comma at start or end)
+     */
+    public static function select_discussion_fields($alias) {
+        return self::select_fields(array('id', 'forumngid', 'groupid', 'postid',
+            'lastpostid', 'timestart', 'timeend', 'deleted', 'locked',
+            'sticky'), $alias);
+    }
+
+    /**
+     * Used when selecting posts inside other SQL statements.
+     * @param string $alias Alias of table to extract
+     * @return string SQL select fields (no comma at start or end)
+     */
+    public static function select_post_fields($alias) {
+        return self::select_fields(array('id', 'discussionid', 'parentpostid',
+            'userid', 'created', 'modified', 'deleted', 'important', 'mailstate',
+            'oldversion', 'edituserid', 'subject', 'message', 'messageformat',
+            'attachments', 'asmoderator'), $alias);
+    }
+
+    // SQL generic helpers
+    /*////////////////////*/
+
+    /**
+     * Safe version of explode function. Always returns an array. Ignores blank
+     * elements. So the result of calling this on '/3//4/5' will be array(3, 4, 5).
+     * @param string $separator Separator eg. ","
+     * @param string $string String to split
+     * @return array String split into parts
+     */
+    public static function safe_explode($separator, $string) {
+        $results = explode($separator, $string);
+        $answer = array();
+        if ($results) {
+            foreach ($results as $thing) {
+                if ($thing!=='') {
+                    $answer[] = $thing;
+                }
+            }
+        }
+        return $answer;
+    }
+
+    // SQL object extraction
+    /*//////////////////////*/
+
+    /**
+     * Loops through all the fields of an object, removing those which begin
+     * with a given prefix, and setting them as fields of a new object.
+     * @param &$object object Object
+     * @param $prefix string Prefix e.g. 'prefix_'
+     * @return object Object containing all the prefixed fields (without prefix)
+     */
+    public static function extract_subobject(&$object, $prefix) {
+        $result = array();
+        foreach ((array)$object as $key => $value) {
+            if (strpos($key, $prefix)===0) {
+                $result[substr($key, strlen($prefix))] = $value;
+                unset($object->{$key});
+            }
+        }
+        return (object)$result;
+    }
+
+    /**
+     * Copies fields beginning with the specified prefix from one object to
+     * another, optionally changing the prefix.
+     * @param $target Target object
+     * @param $source Source object
+     * @param $prefix Prefix for fields to copy
+     * @param $newprefix New prefix (null = same prefix)
+     */
+    public static function copy_subobject(&$target, $source, $prefix, $newprefix=null) {
+        if ($newprefix === null) {
+            $newprefix = $prefix;
+        }
+        foreach ($source as $key => $value) {
+            if (strpos($key, $prefix)===0) {
+                $newkey = $newprefix . substr($key, strlen($prefix));
+                $target->{$newkey} = $value;
+            }
+        }
+    }
+
+    // Moodle generic helpers
+    /*///////////////////////*/
+
+    /**
+     * @param int $userid User ID or 0 for default
+     * @return Genuine (non-zero) user ID
+     */
+    public static function get_real_userid($userid=0) {
+        global $USER;
+        $userid = $userid==0 ? $USER->id : $userid;
+        if (!$userid) {
+            // This can happen in cases where we are about to check whether the user is logged in.
+            // In that case, let us return user 0.
+            return 0;
+        }
+        return $userid;
+    }
+
+    /**
+     * @param int $userid User ID or 0 for default
+     * @return User object
+     */
+    public static function get_user($userid=0) {
+        global $USER, $DB;
+        if ($userid && (empty($USER->id) || $USER->id != $userid)) {
+            $user = $DB->get_record('user', array('id' => $userid), '*', MUST_EXIST);
+        } else {
+            $user = $USER;
+        }
+        return $user;
+    }
+
+    static private $scales = array();
+
+    /**
+     * Wrapper for Moodle function that caches result, so can be called
+     * without worry of a performance impact.
+     * @param int $gradingtype Grading type value
+     * @return array Array from value=>name
+     */
+    public static function make_grades_menu($gradingtype) {
+        if (!array_key_exists($gradingtype, self::$scales)) {
+            self::$scales[$gradingtype] = make_grades_menu($gradingtype);
+        }
+        return self::$scales[$gradingtype];
+    }
+
+    // UI
+    // //.
+
+    /**
+     * Wraps nice way to display reasonable date format in Moodle for use
+     * in all forum locations.
+     * @param int $date Date (seconds since epoch)
+     * @return string Date as string
+     */
+    public static function display_date($date) {
+        // Use OU custom 'nice date' function if available
+        if (function_exists('specially_shrunken_date')) {
+            return specially_shrunken_date($date, false, true);
+        } else {
+            return userdate($date,
+                get_string('strftimedatetimeshort', 'langconfig'));
+        }
+    }
+
+    /**
+     * Obtains a list of forums on the given course which can be converted.
+     * The requirements for this are that they must have a supported forum
+     * type and there must not be an existing ForumNG with the same name.
+     * @param object $course
+     * @return array Array of id=>name of convertable forums
+     */
+    public static function get_convertible_forums($course) {
+        global $DB;
+        return $DB->get_records_sql("
+SELECT cm.id, f.name
+FROM
+    {forum} f
+    INNER JOIN {course_modules} cm ON cm.instance = f.id
+      AND cm.module = (SELECT id FROM {modules} WHERE name = 'forum')
+    LEFT JOIN {forumng} fng ON fng.name = f.name AND fng.course = f.course
+WHERE
+    cm.course = ? AND f.course = ?
+    AND f.type = 'general'
+    AND fng.id IS NULL", array($course->id, $course->id));
+    }
+
+    /**
+     * Executes a database update in such a way that it will work in MySQL,
+     * when the update uses a subquery that refers to the table being updated.
+     * @param string $update Update query with the special string %'IN'% at the
+     *   point where the IN clause should go, i.e. replacing 'IN (SELECT id ...)'
+     * @param string $inids Query that selects a column (which must be named
+     *   id), i.e. 'SELECT id ...'
+     * @param array $inparams Parameters for the $inids query
+     */
+    public static function update_with_subquery_grrr_mysql($update, $inids, $inparams) {
+        global $DB;
+        if ($DB->get_dbfamily() === 'mysql') {
+            // MySQL is a PoS so the update can't directly run (you can't update
+            // a table based on a subquery that refers to the table). Instead,
+            // we do the same thing but with a separate update using an IN clause.
+            // This might theoretically run into problems if you had a really huge
+            // set of forums with frequent posts (so that the IN size exceeds
+            // MySQL query limit) however the limits appear to be generous enough
+            // that this is unlikely.
+            $ids = array();
+            $rs = $DB->get_recordset_sql($inids, $inparams);
+            foreach ($rs as $rec) {
+                $ids[] = $rec->id;
+            }
+            $rs->close();
+            if (count($ids) > 0) {
+                list($listsql, $listparams) = $DB->get_in_or_equal($ids);
+                $update = str_replace("%'IN'%", $listsql, $update);
+                $DB->execute($update, $listparams);
+            }
+        } else {
+            // With a decent database we can do the update and query in one,
+            // avoiding the need to transfer an ID list around.
+            $DB->execute(
+                str_replace("%'IN'%", "IN ($inids)", $update), $inparams);
+        }
+    }
+
+    /**
+     * Adds all the admin user ids to a list of users in format id=>$user,
+     * where $user has only the ->id field.
+     *
+     * This is needed because the doanything parameter was removed from
+     * get_users_by_capability.
+     * @param array $users Existing list of users
+     * @return void
+     */
+    public static function add_admin_users(&$users) {
+        global $CFG;
+        // There is no doanything parameter any more, so need to manually
+        // add admin users
+        foreach (explode(',', $CFG->siteadmins) as $adminid) {
+            $users[$adminid] = (object)array('id'=>$adminid);
+        }
+    }
+
+    /**
+     * Only used while debugging. Converts a query so it can easily be
+     * read (copied into pgadmin, etc).
+     * @param string $sql SQL
+     * @param array $whereparams Parameters
+     */
+    public static function debug_query_for_reading($sql, $whereparams) {
+        $easyread = str_replace('}', '', str_replace('{', 'mdl_', $sql));
+        foreach ($whereparams as $param) {
+            if (is_int($param)) {
+                $easyread = preg_replace('~\?~', $param, $easyread, 1);
+            } else {
+                $easyread = preg_replace('~\?~', "'" . $param . "'", $easyread, 1);
+            }
+        }
+        return $easyread;
+    }
+}
diff --git a/mod/forumng/module.js b/mod/forumng/module.js
new file mode 100644
index 0000000..020fabc
--- /dev/null
+++ b/mod/forumng/module.js
@@ -0,0 +1,2550 @@
+M.mod_forumng = {
+    Y : null,
+    cloneparam: '',
+    cloneid: 0,
+    cmid: 0,
+    ratingstars: 0,
+    discussionid: 0,
+    expirelinks: [],
+    select: {},
+    quotaleft: 0,
+    loaderpix: '',
+    mouseuser: false,
+    viewportwidth: -1,
+    starpix: {},
+    nowediting: false,
+
+    /**
+     * Main init function called from HTML. Sets a few variables then listens for DOM ready.
+     * @param Y YUI object
+     * @param cmid Course-module id of this forum
+     * @param cloneid Clone ID or 0 if none
+     * @param ratingstars If non-zero, the number of stars (1-5) used for ratings
+     * @param quotaleft If set, the number of posts left in post quota
+     * @param loaderpix URL of AJAX loader icon
+     * @param starpix Object containing multiple URLs of the various star icons
+     */
+    init : function(Y, cmid, cloneid, ratingstars, quotaleft, loaderpix, starpix) {
+        this.Y = Y;
+        this.cmid = cmid;
+        this.cloneid = cloneid;
+        this.cloneparam = cloneid ? '&clone=' + cloneid : '';
+        this.ratingstars = ratingstars;
+        this.quotaleft = quotaleft;
+        this.loaderpix = loaderpix;
+        this.starpix = starpix;
+
+        Y.on("domready", this.dom_init, M.mod_forumng);
+        this.urgent_init();
+    },
+
+    /**
+     * Simulates click on a link. YUI is supposed to be able to do this but
+     * it blatantly doesn't work in IE (YUI ticket #2530063).
+     * @param link Thing you want to click on (YUI node)
+     */
+    simulate_click : function(link) {
+        var node = this.Y.Node.getDOMNode(link);
+        if (node.click) {
+            // IE has this function, it is also in DOM for some things
+            node.click();
+        } else {
+            // For other browsers, hopefully YUI will work
+            link.simulate('click');
+        }
+    },
+
+    /**
+     * Main initialisation done on DOM ready.
+     */
+    dom_init : function() {
+        // b****y IE doesn't have a trim function
+        if (!String.prototype.trim) {
+            String.prototype.trim = function() {
+                return this.replace(/^\s+/, '') . replace(/\s+$/, '');
+            };
+        }
+
+        //Magicalise the hidden 'switch view mode' link
+        if (document.getElementById('forumng-switchlinkid')) {
+            var link = this.Y.one('#forumng-switchlinkid');
+            this.init_switchlink(link);
+        }
+
+        // Handle pages other than the discussion page
+        if (document.getElementById('page-mod-forumng-subscribers')) {
+            this.init_subscribers();
+            return;
+        }
+        if (document.getElementById('page-mod-forumng-view')) {
+            this.init_view();
+            return;
+        }
+        if (document.getElementById('page-mod-forumng-discuss')) {
+            this.init_discuss();
+            return;
+        }
+        if (document.getElementById('page-mod-forumng-feature-deletedposts-deletedpostslist')) {
+            this.init_content(this.Y.one(document));
+        }
+        if (document.getElementById('page-mod-forumng-feature-print-print')) {
+            this.init_content(this.Y.one(document));
+            this.print_page();
+            return;
+        }
+        if (document.getElementById('page-mod-forumng-deletepost')) {
+            this.init_deletepost();
+            return;
+        }
+    },
+
+    /**
+     * Urgent init; this is not done as urgently as it used to be :( because it's only
+     * in footer. I probably need to figure out a better way to do it. TODO
+     */
+    urgent_init : function() {
+        // Create new stylesheet in head
+        var newstyle = document.createElement("style");
+        newstyle.setAttribute("type", "text/css");
+
+        var selector = '.forumng-ratings';
+        var rules = 'display:none';
+
+        if (document.styleSheets && document.styleSheets.length > 0 &&
+            document.styleSheets[0].addRule) {
+            // Internet Explorer addRule usage
+            document.getElementsByTagName("head")[0].appendChild(newstyle);
+            document.styleSheets[document.styleSheets.length - 1].addRule(
+                selector, rules);
+        } else {
+            // Other browsers, just add stylesheet into DOM
+            newstyle.appendChild(
+                document.createTextNode(selector + " {" + rules + "}"));
+            document.getElementsByTagName("head")[0].appendChild(newstyle);
+        }
+    },
+
+    /**
+     * Sets up the 'accessible mode switch' link so that it becomes visible (not accesshide)
+     * if you tab to it, including its parent.
+     * @param link Link tag
+     */
+    init_switchlink : function(link) {
+        link.on('focus', function() {
+            link.get('parentNode').setStyle('position', 'static');
+        }, this);
+        link.on('blur', function() {
+            link.get('parentNode').setStyle('position', 'absolute');
+        }, this);
+    },
+
+    /**
+     * Initialises all JavaScript for the discussion page.
+     */
+    init_discuss : function() {
+        // Get discussion id
+        this.discussionid = window.location.search.replace(
+            /^.*[?&]d=([0-9]+).*$/ , '$1');
+
+        // Tell CSS that we have JS working
+        this.Y.one('#forumng-main').removeClass('forumng-nojs');
+
+        // To avoid having nested forms (breaks IE), remove the non-JS action form
+        var div = this.Y.one('#forumng-actionform > div');
+        if (div) {
+            var form = div.get('parentNode');
+            div.remove();
+            form.get('parentNode').insertBefore(div, form);
+            form.remove();
+        }
+
+        var div1 = this.Y.one('.forumng_deldiscussion');
+        if (div1) {
+            this.init_deldiscussion(div1);
+        }
+
+        // Set up magic links
+        this.forumng_expirelinks = [];
+        this.init_content(this.Y.one('#forumng-main'));
+
+        // Hide 'save ratings' button if present
+        var saveall = document.getElementById('forumng-saveallratings');
+        if (saveall) {
+            saveall.parentNode.removeChild(saveall);
+        }
+
+        // Init feature buttons
+        this.init_feature_buttons(false);
+
+        // Apply stop indents
+        this.apply_stop_indents();
+        var region = this.Y.one('#forumng-main').get('region');
+        this.viewportwidth = region.right - region.left;
+        setInterval(function() {
+            var region = this.Y.one('#forumng-main').get('region');
+            var width = region.right - region.left;
+            if (width != M.mod_forumng.viewportwidth) {
+                M.mod_forumng.viewportwidth = width;
+                M.mod_forumng.apply_stop_indents();
+            }
+        }, 250);
+    },
+
+    /**
+     * Initialises all JavaScript for the deletepost page.
+     */
+    init_deletepost : function() {
+        // if JS is enabled then we can copy the html version of the text to
+        // the textarea used by tinymce, otherwise plain text is used by default.
+        var msg = this.Y.one('#delete-form-html');
+        if (msg) {
+            var messagehtml = msg.getContent();
+            this.Y.one('#id_forumng_delete_msg').set('innerHTML', messagehtml);
+        }
+    },
+
+    init_deldiscussion : function(div) {
+        var form = div.get('parentNode').get('parentNode');
+        form.on('submit', function(e) {
+            e.preventDefault();
+           var deletebuttons = new Array(
+                   M.str.forumng.deleteemailpostbutton,
+                   M.str.forumng.deletepostbutton
+                   );
+            this.confirm(M.str.forumng.confirmdeletediscuss,
+                deletebuttons,
+                M.str.moodle.cancel,
+                null, [
+                       function() {
+                           location.href = form.get('action') + '?d=' +
+                           M.mod_forumng.discussionid + '&delete=1' +
+                           '&email=1' + '&clone=' + M.mod_forumng.cloneid;
+                       }, function() {
+                           location.href = form.get('action') + '?d=' +
+                           M.mod_forumng.discussionid + '&delete=1' +
+                           '&email=0' + '&notdeleted=1' + '&clone=' + M.mod_forumng.cloneid;
+                       }]);
+        }, this);
+
+    },
+
+    /**
+     * Initialises 'content' i.e. posts and related. Can be called on the whole page or on
+     * a single post.
+     * @param node Node to run on (e.g. document node or a post div)
+     */
+    init_content : function(node) {
+        // When the selector is in use, and this is being run on a single post, then
+        // do special init for the post
+        if (this.select.on && node.hasClass('forumng-post')) {
+            this.select_init_post(node, true);
+        }
+
+        // Get post id listed as URL anchor, if any (initial run only)
+        var expandposts = new Object;
+        if (this.Y.Node.getDOMNode(node) == document || node.get('id') == 'forumng-main') {
+            // Post from location bar
+            if (window.location.hash) {
+                var match = window.location.hash.match(/p([0-9]+)$/);
+                if (match) {
+                    expandposts[parseInt(match[1])] = true;
+                }
+            }
+            // Posts listed as expanded (from Back button)
+            var expandedList = this.Y.one('#expanded_posts');
+            if (expandedList) {
+                var posts = expandedList.get('value').split(',');
+            } else {
+                var posts = new Array();
+            }
+            for (var i=0; i<posts.length; i++) {
+                expandposts[posts[i]] = true;
+            }
+        }
+
+        // Kill reply links if necessary
+        if (this.quotaleft == 0) {
+            this.kill_reply_links();
+        }
+
+        // Add JS to other links
+        node.all('a').each(function(link, index, list) {
+            var href = link.get('href');
+
+            // Ignore mobile links
+            if (link.hasClass('forumng-mobilepost-link')) {
+                return;
+            }
+
+            // Any link with &expires= will be hidden a bit before that time
+            match = href.match(/[?&]expires=([0-9]+)(&|$)/);
+            if (match) {
+                this.init_expiry(link, parseInt(match[1]));
+                href = link.get('href');
+            }
+
+            // Magicalise 'Expand' links
+            var match = href.match(
+                /\/discuss\.php\?d=([0-9]+).*&expand=1#p([0-9]+)$/);
+            if (match && link.hasClass('forumng-expandlink')) {
+                this.init_expand(link, match[2], expandposts[parseInt(match[2])]);
+            }
+
+            // Magicalise 'Reply' links
+            match = href.match(/\/editpost\.php\?replyto=([0-9]+).*$/);
+            if (match) {
+                this.init_reply(link, parseInt(match[1]));
+            }
+
+            // Magicalise 'Edit' links
+            match = href.match(/\/editpost\.php\?p=([0-9]+).*$/);
+            if (match) {
+                this.init_edit(link, parseInt(match[1]));
+            }
+
+            // Magicalise 'Delete' / 'Undelete' links
+            match = href.match(/\/deletepost\.php\?p=([0-9]+)(?:&clone=[0-9]+)?(?:&expand=1)?(?:&delete=([0-9]+))?(?:&currentuser=([0-9]))?$/);
+            if (match) {
+                this.init_delete(link, parseInt(match[1]), match[2] && match[2]==0, match[3]);
+            }
+
+            // Magicalise the hidden parent-post links
+            if (link.hasClass('forumng-parentlink')) {
+                this.init_parentlink(link);
+            }
+
+            // Magicalise the jump-to links
+            if (link.get('parentNode').hasClass('forumng-jumpto')) {
+                this.init_jumplink(link);
+            }
+
+            // Magicalise the mark post read link.
+            if (link.get('parentNode').hasClass('forumng-markread')) {
+                this.init_postread(link);
+            }
+        }, this);
+
+        // Magicalise rating sections
+        node.all('div.forumng-ratings').each(function(rating, index, list) {
+            this.init_rating(rating);
+        }, this);
+
+        // Find any inputs with the zero-disable feature
+        node.all('input.forumng-zero-disable').each(function(input, index, list) {
+            this.zero_disable(input);
+        }, this);
+
+        // Set up flags
+        this.init_flags(node);
+    },
+
+    /**
+     * Applies expiry to links. Some links are marked with &expires=(time) to indicate that the
+     * JavaScript should disable them around that time. (Edit, delete links.)
+     * @param link Link node
+     * @param seconds Number of seconds to expire after
+     */
+    init_expiry: function(link, seconds) {
+        // Actually expires a bit early
+        link.forumng_expiry_javatime = seconds * 1000 - 45000 + new Date().getTime();
+        link.set('href', link.get('href').replace(/[?&]expires=[0-9]+/, ''));
+
+        this.expirelinks.push(link);
+        if (this.expirelinks.length == 1) {
+            var timerid = setInterval(function() {
+                var current = new Date().getTime();
+                for (var i=M.mod_forumng.expirelinks.length-1; i>=0; i--) {
+                    if (current > M.mod_forumng.expirelinks[i].forumng_expiry_javatime) {
+                        var deadlink = M.mod_forumng.expirelinks[i];
+                        deadlink.get('parentNode').remove();
+                        M.mod_forumng.expirelinks.splice(i, 1);
+                    }
+                }
+                if (M.mod_forumng.expirelinks.length == 0) {
+                    clearInterval(timerid);
+                }
+            }, 15000);
+        }
+    },
+
+    /**
+     * Removes reply links within a given tag. This is used if you run out of quota so that
+     * you cannot create new replies.
+     * @param root Root node to search within
+     */
+    kill_reply_links: function(root) {
+        this.Y.all('#forumng-main a[href]').each(function(link, index, list) {
+            if (link.get('href').match(/editpost\.php\?replyto=[0-9]+.*$/)) {
+                link.remove();
+            }
+        });
+    },
+
+    /**
+     * Removes iframe and marks it closed.
+     *
+     * @param scrollToParent If true (default), scrolls to parent after removing iframe
+     */
+    remove_iframe : function(iframe, scrollToParent) {
+        var parent = iframe.get('parentNode');
+        parent.removeChild(iframe);
+        if (M.is_mobile) {
+            // Hide iframe container also.
+            parent.setStyle('display', 'none');
+            // Remove scroll event trapping.
+            Y.one('window').detach('scroll');
+        }
+        this.nowediting = false;
+        if (scrollToParent === undefined || scrollToParent) {
+            this.scroll_page(parent.get('parentNode'));
+        }
+        this.links_enable(document.body);
+    },
+
+    /**
+     * Initialises an iframe and adds it.
+     *
+     * @param src iframe URL (&iframe=1 automatically added)
+     * @param post Post node to add iframe
+     * @return Iframe YUI node or null if already editing (abort)
+     */
+    init_iframe : function(src, post) {
+        // Check we're not already editing
+        var t = this;
+        if (this.nowediting) {
+            return null;
+        }
+        this.nowediting = true;
+
+        // Add special style that marks links disabled
+        this.links_disable(document.body);
+
+        var iframecon = this.Y.one(document.createElement('div'));
+        iframecon.addClass('iframecon');
+        var iframe = this.Y.one(document.createElement('iframe'));
+        iframe.set('className', 'forumng-inlineform');
+        iframe.set('name', 'forumng-post-iframe');
+        iframe.set('height', 500);
+        src += '&iframe=1';
+        iframe.set('src', src);
+        window.iframe_has_loaded = function(innerwin) {
+            // Note: I am avoiding using YUI because I think there are
+            // probably two YUI instances and I don't want it to get
+            // confused.
+            var doc = innerwin.document;
+            var counter = 0;
+
+            // Roll up edit author fieldset in edit post (do here so height correct).
+            var editemailhead = innerwin.document.getElementById('id_id_emailauthor');
+            if (editemailhead) {
+                editemailhead.className += ' collapsed';
+            }
+
+            // Check size and enlarge iframe if required.
+            var fix_height = function() {
+                if(doc.body.scrollHeight > Number(iframe.get('height'))) {
+                    iframe.set('height', (doc.body.scrollHeight + 2));
+                    iframecon.set('height', (doc.body.scrollHeight + 2));
+                }
+
+                // Check if the mobile view is activated, if so, then we align the
+                // iframe to the top left position and make it dominate the whole page,
+                // which basically make it behave like a pop-up overlay dialog.
+                //
+                // Create + set M.is_mobile in the mobile theme to activate.
+                if (M.is_mobile) {
+                    iframecon.setStyle('display', 'block');
+                    iframecon.setStyle('width', '100%');
+                    iframecon.setStyle('height', '100%');
+                    if (M.mod_forumng.Y.UA.ios) {
+                        // Make fixed div work in iOS.
+                        iframecon.setStyle('position', 'fixed');
+                        iframecon.setStyle('top', '0px');
+                        iframecon.setStyle('left', '0px');
+                        iframecon.setStyle('z-index', '9999');
+                        iframecon.setStyle('overflow', 'scroll');
+                        iframecon.setStyle('-webkit-overflow-scrolling', 'touch');
+                        iframe.setStyle('position', 'relative');
+                        iframe.setStyle('top', 'initial');
+                        iframe.setStyle('left', 'initial');
+                    } else {
+                        iframe.setStyle('position', 'fixed');
+                        iframe.setStyle('top', '0px');
+                        iframe.setStyle('left', '0px');
+                        iframe.setStyle('z-index', '9999');
+                    }
+                    iframe.setStyle('height', '100%');
+                    iframe.setStyle('width', '100%');
+                    iframe.setStyle('overflowX', 'hidden');
+                    iframe.setStyle('overflowY', 'auto');
+                    if (iframe.get('clientHeight') >= iframe.get('contentWindow.document').one('#page').get('clientHeight')) {
+                        // If iframe size larger than content then hide scroll.
+                        iframe.set('scrolling', 'no');
+                    } else {
+                        iframe.set('scrolling', 'auto');
+                    }
+                    doc.body.focus();
+                    window.scrollTo(0, 0);
+                } else {
+                    if (M.cfg.theme.indexOf('ou') != -1 || M.theme_ou) {
+                        if (iframe.get('parentNode') && iframe.get('parentNode').get('parentNode')) {
+                            iframe.set('width', iframe.get('parentNode').get('parentNode').getComputedStyle('width'));
+                        }
+                        if (M.mod_forumng.Y.UA.ios || M.mod_forumng.Y.UA.android) {
+                            var margin = parseInt(iframe.get('parentNode').get('parentNode').getComputedStyle('width')) - doc.body.scrollWidth;
+                            if (margin < 0) {
+                                iframecon.setStyle('margin-left', margin);
+                                iframe.setStyle('width', doc.body.scrollWidth);
+                                iframecon.setStyle('width', doc.body.scrollWidth);
+                                }
+                            }
+                        }
+                    }
+                counter++;
+                if (counter < 20) {
+                    // Keep resizing iframe as filemanager takes a while to initialise.
+                    setTimeout(fix_height, 500);
+                }
+            };
+            fix_height();
+
+            // Add cancel handler that just removes the iframe - Except Atto as autosave cancel needed.
+            doc.getElementById('id_cancel').onclick = function(e) {
+                var blank = false;// Check if empty text, if so close iframe (Hack to stop 'required' issue).
+                if (innerwin.Y.one('#id_message') && (innerwin.Y.one('#id_message').get('innerText') === ''
+                        || innerwin.Y.one('#id_message').get('textContent') === '')) {
+                    blank = true;
+                }
+                if (!innerwin.Y.one('.editor_atto') || blank) {
+                    if (!e) {
+                        e = window.event;
+                    }
+                    if (e) {
+                        if (e.stopPropagation) {
+                            e.stopPropagation();
+                        } else {
+                            e.cancelBubble = true;
+                        }
+                    }
+                    t.remove_iframe(iframe);
+                    return false;
+                }
+            };
+
+            // Focus the editor.
+            var try_focus = function() {
+                if (innerwin.tinyMCE) {
+                    for(edId in innerwin.tinyMCE.editors) {
+                        if (edId === 'id_message') {
+                            innerwin.tinyMCE.execCommand('mceFocus', false, 'id_message');
+                            return;
+                        }
+                    }
+                }
+                setTimeout(try_focus, 100);
+            };
+            if (!M.is_mobile) {
+                setTimeout(try_focus, 250);
+            }
+        };
+
+        // Put it in as last thing in post (except the 'end post' marker).
+        var ends = post.all('div.forumng-endpost');
+        var last = ends.pop();
+        last.get('parentNode').insertBefore(iframecon, last);
+        iframecon.append(iframe);
+
+        return iframe;
+    },
+
+    /**
+     * Initialises edit links.
+     * @param link Link node
+     * @param postid Post ID to edit
+     */
+    init_edit: function(link, postid) {
+        var t = this;
+        link.on('click', function(e) {
+            e.preventDefault();
+            if (this.are_links_disabled(link)) {
+                return;
+            }
+
+            // Get post.
+            var post = link.ancestor('.forumng-post');
+            var rootpost = !post.ancestor('.forumng-replies');
+
+            // Make iframe.
+            var src = 'editpost.php?p=' + postid;
+            if (this.cloneid) {
+                src += '&clone=' + this.cloneid;
+            }
+            var iframe = this.init_iframe(src, post);
+            if (!iframe) {
+                return;
+            }
+
+            // Function that gets called when the iframe has completed successfully.
+            window.iframe_success = function(innerwin) {
+                // Add item just in front of existing post, then delete existing.
+                var scriptcommands = [];
+                var newpost = t.prepare_new_post(innerwin, scriptcommands);
+                if (newpost.get('innerHTML') !== '') {
+                    post.get('parentNode').insertBefore(newpost, post);
+                    post.get('parentNode').removeChild(post);
+                    t.Y.later(100, this, function(post) {
+                        // Reload all the images - fixes chrome issue.
+                        post.all('img').each(function(img){
+                            img.set('src', img.get('src'));
+                        })
+                    }, newpost);
+
+                    // Run script commands.
+                    for (var i=0; i<scriptcommands.length; i++) {
+                        eval(scriptcommands[i]);
+                    }
+
+                    // For discussion, do special handling.
+                    if (rootpost) {
+                        // Get subject and remove its node.
+                        var subjectinput = newpost.one('input[name=discussion_subject]');
+                        var subject = subjectinput.get('value');
+                        subjectinput.remove();
+
+                        if (Y.one('.forumng_discussion_title')) {
+                            // OSEP theme discussion title
+                            Y.all('.forumng_discussion_title').setHTML(subject);
+                        }
+
+                        var navbar = Y.one('#page-header .navbar ul, #page-navbar ul');
+                        if (navbar) {
+                            // Find subject inside the breadcrumb (last <span> in last <li>).
+                            var lastspan = navbar.one('li:last-child > span:last-child');
+
+                            // Text is inside here, replace it.
+                            if (lastspan) {
+                                lastspan.get('childNodes').each(function (node, index, list) {
+                                    node.remove();
+                                });
+                                lastspan.appendChild(document.createTextNode(' ' + subject));
+                            }
+                        }
+
+                    }
+
+                    // Sort out links.
+                    t.init_content(newpost);
+                }
+                // Remove the iframe.
+                // This needs to be palced here for mobile devices to work.
+                t.remove_iframe(iframe);
+                window.iframe_success = null;
+            };
+        }, this);
+    },
+
+    /**
+     * Extracts a new post from the result of a reply or edit script.
+     * @param innerwin Iframe window
+     * @param scriptcommands Script commands will be added to this array
+     * @return New post YUI node
+     */
+    prepare_new_post : function(innerwin, scriptcommands) {
+        var responsetext = innerwin.document.body.firstChild.innerHTML;
+        var newdiv = document.createElement('div');
+        var scriptcommands = [];
+        newdiv.innerHTML = this.extract_js(responsetext, scriptcommands);
+        var newpost = newdiv.firstChild;
+        newdiv.removeChild(newpost);
+        newpost = this.Y.one(newpost);
+        return newpost;
+    },
+
+    /**
+     * Initialises reply links.
+     * @param link Link node
+     * @param postid Post ID to reply to
+     */
+    init_reply: function(link, replytoid) {
+        var t = this;
+        link.on('click', function(e) {
+            e.preventDefault();
+            if (this.are_links_disabled(link)) {
+                return;
+            }
+
+            // This function is also used when setting up a reply that
+            // includs existing draft text.
+            var draft = window.forumng_draft ? window.forumng_draft : false;
+            window.forumng_draft = null;
+
+            // Get post.
+            var post = link.ancestor('.forumng-post');
+
+            // Make iframe.
+            var src = 'editpost.php?';
+            if (draft) {
+                src += 'draft=' + draft.id;
+            } else {
+                src += 'replyto=' + replytoid;
+            }
+            if (this.cloneid) {
+                src += '&clone=' + this.cloneid;
+            }
+            var iframe = this.init_iframe(src, post);
+            if (!iframe) {
+                return;
+            }
+
+            // Function that gets called when the iframe has completed successfully.
+            window.iframe_success = function(innerwin) {
+                // Get replies div.
+                var replies;
+                if (post.get('nextSibling')
+                    && post.get('nextSibling').hasClass('forumng-replies')) {
+                    replies = post.get('nextSibling');
+                } else {
+                    replies = document.createElement('div');
+                    replies.className = 'forumng-replies';
+                    replies = t.Y.one(replies);
+                    post.get('parentNode').insertBefore(replies, post.get('nextSibling'));
+                    t.apply_stop_indents();
+                }
+
+                // Add item there.
+                var scriptcommands = [];
+                var newpost = t.prepare_new_post(innerwin, scriptcommands);
+                replies.appendChild(newpost);
+
+                // Run script commands.
+                for (var i=0; i<scriptcommands.length; i++) {
+                    eval(scriptcommands[i]);
+                }
+
+                // Set up JavaScript behaviour in new post.
+                t.init_content(newpost);
+
+                // Update quota left.
+                if (t.quotaleft > 0) {
+                    t.quotaleft--;
+
+                    // If out of quota, kill all the reply links
+                    if (t.quotaleft == 0) {
+                        t.kill_reply_links(document);
+                    }
+                }
+
+                // Remove the iframe.
+                // This needs to be palced here for mobile devices to work.
+                t.remove_iframe(iframe, false);
+                window.iframe_success = null;
+
+                // Scroll to it (must do this after frame removed or height will be incorrect).
+                t.scroll_page(newpost, null);
+            };
+
+            // Mark that we've got a reply there.
+            iframe.replytoid = replytoid;
+
+            var quotaDiv = this.Y.one('#id_postlimit1');
+            if (quotaDiv) {
+                var quotaItem = quotaDiv.ancestor('.fitem');
+                if (this.quotaleft > 2 || this.quotaleft < 0) {
+                    quotaItem.setStyle('display', 'none');
+                } else {
+                    quotaItem.setStyle('display', 'block');
+                    var text = (this.quotaleft == 1)
+                        ? M.str.forumng.quotaleft_singular
+                        : M.str.forumng.quotaleft_plural;
+                    text = text.replace('#', this.quotaleft);
+                    quotaDiv.set('innerHTML', text);
+                }
+            }
+        }, this);
+
+        // When we create the reply link that a draft post uses, make it click itself
+        if (window.forumng_draft && window.forumng_draft.parentpostid==replytoid) {
+            setTimeout( function() { M.mod_forumng.simulate_click(link); }, 0);
+        }
+    },
+
+    /**
+     * Initialises all flag icons on the page (discussion or main page) or a post.
+     * @param node Root element
+     */
+    init_flags: function(node) {
+        node.all('div.forumng-flagpost').each(function(div) {
+            this.init_flag_div(div);
+        }, this);
+    },
+
+    /**
+     * Initialises a single flag icon based on the div.
+     * @param div forumng-flag div
+     */
+    init_flag_div: function(div) {
+        div.anchor = div.one(' a');
+        div.span = div.one(' span');
+        // Get on state from image icon.
+        div.icon = div.one(' img.smallicon');
+        div.on = div.icon.get('src').match(/flag\.on/);
+        // Remove all other event listeners just in case this func called multiple times.
+        this.Y.Event.purgeElement(div.icon, false, 'click');
+        div.anchor.on('click', function(e) {
+            var cfg = {
+                method: 'POST',
+                timeout: 10000,
+                context: M.mod_forumng,
+                on: {
+                    success: function(o) {
+                        div.on = !div.on;
+                        div.icon.set('src', div.icon.get('src').replace(/flag\.o(n|ff)/,
+                                'flag.' + (div.on ? 'on' : 'off')));
+                        div.anchor.set('href', div.anchor.get('href').replace(/\&flag=(0|1)/, '&flag=' + (div.on ? 0 : 1)));
+                        div.anchor.set('title',
+                                div.on ? M.str.forumng.clearflag : M.str.forumng.setflag);
+                        var text = div.span.get('innerHTML');
+                        if (text) {
+                            div.span.set('innerHTML', div.on ? M.str.forumng.clearflag : M.str.forumng.flagpost);
+                        }
+                    },
+                    failure: function(o) {
+                        alert(M.str.forumng.jserr_alter);
+                    }
+                }
+            };
+            this.Y.io(div.anchor.get('href') + '&ajax=1', cfg);
+            e.preventDefault();
+        }, this);
+    },
+
+    init_postread: function(link) {
+        var t = this;
+        link.on('click', function(e) {
+            e.preventDefault();
+            if (t.are_links_disabled(link) || link.hasClass('disabled')) {
+                return;
+            }
+            var cfg = {
+                    method: 'GET',
+                    timeout: 10000,
+                    context: M.mod_forumng,
+                    on: {
+                        success: function(o) {
+                            if (!o.content == 'ok') {
+                                alert(M.str.forumng.jserr_alter);
+                                return;
+                            }
+                            link.addClass('disabled');
+                            link.set('disabled', 'disabled');
+                            var post = link.ancestor('div.forumng-unread');
+                            if (post) {
+                                post.replaceClass('forumng-unread', 'forumng-read');
+                            }
+                        },
+                        failure: function(o) {
+                            alert(M.str.forumng.jserr_alter);
+                        }
+                    }
+            };
+            t.Y.io(link.get('href') + '&ajax=1', cfg);
+        });
+    },
+
+    /**
+     * Initialises the feature buttons that run along the bottom of a discussion. Some
+     * of these may use the 'post selector' feature, which requires JavaScript.
+     *
+     * Looks for some ou-specific links that are treated as the real buttons
+     *
+     * @param islist True if discussion list
+     */
+    init_feature_buttons: function(islist) {
+        // Get all forms
+        if (islist) {
+            // Feature btns on discussion list.
+            this.Y.all('form.forumng-dselectorbutton input[type=submit], #osep-bottombutton-export, #osep-bottombutton-print').each(
+                    function(node) {
+                        // For hacked buttons do extra, inc passing original input node target.
+                        if (node.get('tagName') === 'A') {
+                            var discussions = this.Y.all('.forumng-discussionlist tr');
+                            if (discussions.size() == 0) {
+                                node.setStyle('display', 'none');
+                            }
+                        }
+                        this.init_select_button(node, true);
+            }, this);
+        } else {
+            var featureForms = this.Y.all('form.forumng-selectorbutton, #osep-bottombutton-export, #osep-bottombutton-print').each(
+                    function(node, index, list) {
+                        var submit;
+                        if (node.get('tagName') === 'A') {
+                            submit = node;
+                        } else {
+                            submit = node.one('input[type=submit]');
+                        }
+                this.init_select_button(submit, false);
+            }, this);
+        }
+    },
+
+    /**
+     * Adds JS to the button which runs the selector feature, causing it to call the
+     * 'confirm' prompt to ask whether you want to do the discussion or selected posts.
+     * @param submit Submit button node
+     * @param islist True if discussion list
+     */
+    init_select_button: function(submit, islist) {
+        if (islist) {
+            // Check there are discussions to select.
+            var discussions = this.Y.all('.forumng-discussionlist tr');
+            if (discussions.size() == 0) {
+                submit.set('disabled', 'disabled');
+                return;
+            }
+            submit.on('click', function(e) {
+                e.preventDefault();
+                if (submit.get('tagName') === 'A') {
+                    if (submit.get('id') === 'osep-bottombutton-export') {
+                        submit = this.Y.one('.forumngfeature_export form.forumng-dselectorbutton input[type=submit]');
+                    } else if (submit.get('id') === 'osep-bottombutton-print') {
+                        submit = this.Y.one('.forumngfeature_print form.forumng-dselectorbutton input[type=submit]');
+                    }
+                }
+                var outerThis = this;
+                // Pick up any discussion types we specifically include or exclude.
+                var include = new Array();
+                var exclude = new Array();
+                var includeel = submit.get('form').get('children').item(0).one('input[name=include]');
+                if (includeel) {
+                    include = includeel.get('value').split(',');
+                }
+                var excludeel = submit.get('form').get('children').item(0).one('input[name=exclude]');
+                if (excludeel) {
+                    exclude = excludeel.get('value').split(',');
+                }
+                // Pick up inputs needed from form.
+                var inputs = '';
+                var inputnodes = submit.get('form').all('input[type=hidden]');
+                // Some browsers (IE7) don't pick inputs in div up.
+                if (inputnodes.size() == 0) {
+                    inputnodes = submit.get('form').get('children').item(0).all('input[type=hidden]');
+                }
+                inputnodes.each(
+                        function (node) {inputs += '&' + node.get('name') + '=' + node.get('value');}
+                );
+
+                this.confirm("<h4>" + submit.get('value') + "</h4><p>" +
+                    M.str.forumng.selectordiscall + "</p>",
+                    [M.str.forumng.selectoralldisc, M.str.forumng.selectorselecteddisc],
+                    M.str.moodle.cancel,
+                    null, [function() {
+                        location.href = submit.get('form').get('action') + '?all=1' +
+                        M.mod_forumng.cloneparam + inputs;
+                    }, function() {
+                        if (!this.Y.one('div.forumng-main > form')) {
+                            outerThis.select_discuss_init(submit, include, exclude);
+                        }
+                    }]);
+            }, this);
+            return;
+        }
+        submit.on('click', function(e) {
+            e.preventDefault();
+            if (submit.get('tagName') === 'A') {
+                if (submit.get('id') === 'osep-bottombutton-export') {
+                    submit = this.Y.one('.forumngfeature_dis_export form.forumng-selectorbutton input[type=submit]');
+                } else if (submit.get('id') === 'osep-bottombutton-print') {
+                    submit = this.Y.one('.forumngfeature_dis_print form.forumng-selectorbutton input[type=submit]');
+                }
+            }
+            var outerThis = this;
+            this.confirm("<h4>" + submit.get('value') + "</h4><p>" +
+                M.str.forumng.selectorall + "</p>",
+                [M.str.forumng.discussion, M.str.forumng.selectedposts],
+                M.str.moodle.cancel,
+                null, [function() {
+                    location.href = submit.get('form').get('action') + '?d=' +
+                        M.mod_forumng.discussionid + M.mod_forumng.cloneparam + '&all=1';
+                }, function() {
+                    if (this.Y.one('div.forumng-selectbuttons')) {
+                        outerThis.select_init(null);
+                    }
+                    outerThis.select_init(submit);
+                }]);
+        }, this);
+    },
+
+    /**
+     * Stops indent from increasing once it gets past a certain minimum-post-width limit (this
+     * varies depending on browser size). Without this, discussions with a lot of nesting levels
+     * were getting ridiculous indent so that the actual posts were one word wide.
+     */
+    apply_stop_indents: function() {
+        // Pick max indent level
+        var region = this.Y.DOM.region(document.getElementById('forumng-main'));
+        var width = region.right - region.left;
+        var minwidth = 550; // Min size at which the stupid editor doesn't get cut off
+        var maxindentpixels = width - minwidth;
+        var stopIndent;
+
+        // There are 5 indents of 40px then 5 of 30px, then all 20px
+        if (maxindentpixels > 350) {
+            stopIndent = 10 + Math.floor((maxindentpixels - 350) / 20);
+        } else if (maxindentpixels > 200) {
+            stopIndent = 5 + Math.floor((maxindentpixels - 200) / 30);
+        } else {
+            stopIndent = Math.floor(maxindentpixels / 40);
+        }
+
+        // Fix indents for all tags
+        this.Y.all('div.forumng-replies').each(function(reply, index, list) {
+            var indent = this.get_reply_indent(reply);
+            if (indent == stopIndent){
+                reply.addClass('forumng-stop-indent');
+            } else {
+                reply.removeClass('forumng-stop-indent');
+            }
+        }, this);
+    },
+
+    /**
+     * Obtains indent level of a reply (i.e. how many levels it is indented by).
+     * @param reply Reply div
+     */
+    get_reply_indent: function(reply) {
+        // Use cached indent count if available
+        if (reply.forumng_indent) {
+            return reply.forumng_indent;
+        }
+
+        var indent = 1;
+        // Go through each parent to find its nesting.
+        var ancestor = reply.ancestor('div.forumng-replies');
+        if (ancestor) {
+            indent += this.get_reply_indent(ancestor);
+        }
+        reply.forumng_indent = indent;
+        return indent;
+    },
+
+    /**
+     * Disables links for a post or whole page. This is used to grey out other options while
+     * you are replying to a post.
+     *
+     * Note that the disable status is remembered at the level of the element, so if you disable
+     * it for a post, you should enable it for the same post too, not just the whole page.
+     * @param root Element within which to disable command links
+     */
+    links_disable: function(root) {
+        root.linksdisabled = true;
+        var links = M.mod_forumng.Y.all('ul.forumng-commands a').getDOMNodes();
+        for (var j = 0, len = links.length; j < len; j++) {
+            links[j].oldonclick = links[j].onclick;
+            links[j].onclick = function() {
+                return false;
+            };
+            links[j].style.cursor = 'default';
+            links[j].tabIndex = -1;
+            if (links[j].className.indexOf('forumng-disabled') === -1) {
+                links[j].className += ' forumng-disabled';
+            }
+        }
+    },
+
+    /**
+     * Enables links again after they were disabled.
+     * @param root Element within which to enable command links
+     */
+    links_enable: function(root) {
+        root.linksdisabled = false;
+        var links = M.mod_forumng.Y.all('ul.forumng-commands a').getDOMNodes();
+        for (var j=0, len = links.length; j < len; j++) {
+            if (links[j].oldonclick) {
+                links[j].onclick = links[j].oldonclick;
+                links[j].oldonclick = false; // Wanted to do 'delete' but it crashes ie
+            } else {
+                links[j].onclick = function(){};
+            }
+            links[j].style.cursor = 'auto';
+            links[j].tabIndex = 0;
+            links[j].className = links[j].className.replace(' forumng-disabled', '');
+        }
+    },
+
+    /**
+     * Checks if link are disabled including particular link
+     * @param link YUI element pointing to link
+     */
+    are_links_disabled: function(link) {
+        // True if links are disabled either at body or commands level
+        return document.body.linksdisabled ||
+                this.Y.Node.getDOMNode(link.ancestor('.forumng-commands')).linksdisabled;
+    },
+
+    /**
+     * Initialises the HTML editor (if used) within a form, ready for a reply or edit.
+     * @param form Form object
+     * @param settings If set, contains information required to start the editor and attachments
+     *   immediately without an AJAX request
+     */
+    init_editor_and_attachments: function(form, settings) {
+        // If attachments are not permitted there is no need to make a server request
+        // even for a reply
+        if (!settings && !form.get('attachments')) {
+            settings = { attachmentoptions : false, messageoptions : false, message: '' };
+        }
+
+        if (settings) {
+            // Set up editor and attachments using predefined details
+            this.start_editor(form, settings.message, settings.messageoptions);
+            this.start_file_manager(form, settings.attachmentoptions);
+        } else {
+            // We need to make AJAX request for replies, to get the attachment IDs
+            var cfg = {
+                method: 'GET',
+                timeout: 10000,
+                context: this,
+                arguments: form,
+                on: {
+                    success: this.initattachments_ok,
+                    failure: this.initattachments_error
+                }
+            };
+            this.Y.io('attachments.php?id=' + this.cmid + this.cloneparam, cfg);
+        }
+    },
+
+    deep_clone_change_itemid : function(obj, itemid) {
+        if (obj instanceof Array) {
+          var c = [];
+        } else {
+          var c = {};
+        }
+        for (var key in obj) {
+            if (key == 'itemid') {
+                c[key] = itemid;
+            } else if (typeof obj[key] == 'object') {
+                c[key] = this.deep_clone_change_itemid(obj[key], itemid);
+            } else {
+                c[key] = obj[key];
+            }
+        }
+        return c;
+    },
+
+    set_timeout_multi : function(fn, count) {
+      if (count > 0) {
+        setTimeout(function() { M.mod_forumng.set_timeout_multi(fn, count-1); }, 0);
+      } else {
+        fn();
+      }
+    },
+
+    /**
+     * Handles an AJAX response that is a 'success' by checking if it looks like
+     * a Moodle error response and, if so, treating it as error instead.
+     */
+    possible_success_handler : function(ok, error) {
+        return function(transactionid, o, form) {
+            // 'Success' status still applies if we get a Moodle AJAX failure
+            // exception, or if we get redirected to some other page such as
+            // an SSO login page that produces actual HTML and not the data
+            // we were expecting (which is either an HTML fragment or JSON
+            // format depending on the request).
+            if (/^{"error":/.test(o.responseText) ||
+                    o.responseText.indexOf('</html>') != -1) {
+                error.apply(M.mod_forumng, [transactionid, o, form]);
+            } else {
+                ok.apply(M.mod_forumng, [transactionid, o, form]);
+            }
+        };
+    },
+
+    /**
+     * Initialises the 'parent' links so that when tabbed to, the parent div/text displays.
+     * @param link Link node
+     */
+    init_parentlink: function(link) {
+        link.on('focus', function() {
+            link.get('parentNode').setStyle('position', 'static');
+        }, this);
+        link.on('blur', function() {
+            link.get('parentNode').setStyle('position', 'absolute');
+        }, this);
+    },
+
+    /**
+     * Initialises an expand link so that it can use AJAX to retrieve the message.
+     * @param link Link node
+     * @param postid Post ID
+     * @param expandnow If true, expand this post immediately
+     */
+    init_expand: function(link, postid, expandnow) {
+        link.post = link.ancestor('.forumng-post');
+        link.post.expandlink = link;
+        link.loader = link.get('nextSibling');
+        while (link.loader.get('nodeName').toLowerCase() != 'img') {
+            link.loader = link.loader.get('nextSibling');
+        }
+        link.loader.originalsrc = link.loader.get('src');
+        link.postid = postid;
+        link.delay = true;
+
+        // Replace 'expand all' text with 'expand this post'
+        var postnum = link.post.get('className').replace(/^.*forumng-p([0-9]+).*$/, '$1');
+        var text = link.one('.forumng-expandtext');
+        if (text) {
+            text.set('innerHTML', M.str.forumng.expand.replace('#', postnum));
+        }
+        // Add to post number to alt when using an image in expand link (expand_text lang string).
+        var linkimg = link.one('img.fng-eai');
+        if (linkimg) {
+            linkimg.set('alt', linkimg.get('alt') + ' ' + postnum);
+        }
+
+        link.on('click', function(e) {
+            e.preventDefault();
+            if (link.inProcess) {
+                return;
+            }
+            link.post.focushandler = null;
+
+            var cfg = {
+                method: 'GET',
+                data: 'p=' + link.postid + this.cloneparam,
+                timeout: 10000,
+                context: this,
+                arguments: link,
+                on: {
+                    success: this.expand_ok,
+                    failure: this.expand_error
+                }
+            };
+            this.Y.io('expandpost.php', cfg);
+            link.loader.set('src', this.loaderpix);
+            link.inProcess = true;
+        }, this);
+
+        // Automatically expand message listed in URL (if any)
+        if (expandnow) {
+            link.delay = false;
+            M.mod_forumng.simulate_click(link);
+        }
+    },
+
+    /**
+     * Some browsers cannot execute JavaScript just by inserting script tags.
+     * To avoid that problem, remove all script tags from the given content,
+     * and run them later.
+     * @param text HTML content
+     * @param scriptCommands Array of commands (the commands will be pushed
+     *   into this)
+     * @return New text with JS removed
+     */
+    extract_js: function(text, scriptCommands) {
+        var scriptRegexp = /<script[^>]*>([\s\S]*?)<\/script>/g;
+
+        while ((result = scriptRegexp.exec(text)) != null) {
+            scriptCommands.push(result[1]);
+        }
+
+        return text.replace(scriptRegexp, '');
+    },
+
+    /**
+     * AJAX response: Expand completes successfully.
+     * @param transactionid YUI transaction id
+     * @param o YUI response object
+     * @param link Link node
+     */
+    expand_ok: function(transactionid, o, link) {
+        var newDiv = document.createElement('div');
+        var scriptCommands = [];
+        newDiv.innerHTML = this.extract_js(o.responseText, scriptCommands);
+        var newpost = newDiv.firstChild;
+        newDiv.removeChild(newpost);
+        newpost = this.Y.one(newpost);
+        var focushandler = link.post.focushandler;
+
+        // If in select mode, note previous selection value
+        var previousSelect = false;
+        if (this.select.on) {
+            previousSelect = this.Y.one('#checkp' + link.postid).get('checked');
+        }
+
+        var expander = new forumng_expander(link.post);
+        var linkpostparent = link.post.get('parentNode');
+        if (linkpostparent) {
+            linkpostparent.insertBefore(newpost, link.post);
+        }
+        link.post.remove();
+
+        // Run script commands
+        for (var i=0; i<scriptCommands.length; i++) {
+            eval(scriptCommands[i]);
+        }
+
+        this.init_content(newpost);
+        if (previousSelect) {
+            var checkbox = this.Y.one('#checkp' + link.postid);
+            checkbox.set('checked', 'true');
+        }
+        if (document.body.linksdisabled) {
+            this.links_disable(newpost);
+            // It is not individually disabled, only as part of the general disable, so remove
+            // the individual marker
+            newpost.linksdisabled = false;
+        }
+
+        var tracker = this.Y.one('#expanded_posts');
+
+        tracker.set('value', tracker.get('value') + (tracker.get('value')=='' ? '' : ',') +
+                 link.postid);
+
+        // For core ratings, init js on expand.
+        if (newpost.one('.forumng-ratings-standard')) {
+            if (M.core_rating && M.core_rating.init) {
+                M.core_rating.init(this.Y);
+            } else if (M.local_themeextras && M.local_themeextras.rating.init) {
+                // OU only code for custom ratings.
+                M.local_themeextras.rating.init(link.postid);
+                M.local_themeextras.rating.init_count_popup(link.postid);
+            }
+        }
+
+        if (!link.delay) {
+            // Skip the expanding animation
+            return;
+        }
+
+        expander.go(newpost);
+
+        if (focushandler) {
+            focushandler();
+        } else {
+            // Replace focus on expand element which got wiped.
+            var authorspan = newpost.all('span.forumng-author');
+            if (authorspan.length > 0) {
+                // By default, focus on author name link.
+                // The timeout here is because otherwise IE7 sometimes crashes
+                setTimeout(function() { authorspan[0].get('firstChild').focus(); }, 0);
+            } else {
+                // If author name link is not present, focus on first link (which is usually
+                // the 'this is post 3, parent is post N' link).
+                var links = newpost.all('a[href]');
+                if (links.length > 0) {
+                    links[0].focus();
+                }
+            }
+        }
+    },
+
+    /**
+     * AJAX response: Expand fails.
+     * @param transactionid YUI transaction id
+     * @param o YUI response object
+     * @param form Form node
+     */
+    expand_error: function(transactionid, o, link) {
+        link.inProcess = false;
+        link.loader.set('src', link.loader.originalsrc);
+        alert(M.str.forumng.jserr_load);
+    },
+
+    /**
+     * Removes 'px' from the end of a string, if present, and converts it to a number.
+     * @param string Text that possibly is a number with 'px' in
+     * @return Value as number
+     */
+    remove_px: function(string) {
+        return parseInt(string.replace(/px$/, ''));
+    },
+
+    /**
+     * Initialises a 'jump' link (next unread).
+     * @param link Link node
+     */
+    init_jumplink: function(link) {
+        link.on('mousedown', function() {
+            this.mouseuser = true;
+        }, this);
+        link.on('click', function(e) {
+            e.preventDefault();
+            var id = link.get('href').substring(link.get('href').indexOf('#') + 1);
+
+            // Function to set up focus
+            var focuser = function() {
+                var targetpost = M.mod_forumng.Y.one('#' + id).get('parentNode');
+                var jumpto = targetpost.one('.forumng-jumpto');
+                if (M.mod_forumng.mouseuser && jumpto) {
+                    // For mouse (~= visual) users, focus the next link so that after
+                    // clicking the first time, they can then repeatedly press return
+                    var equivalent = jumpto.one('a.' + link.get('className'));
+                    if (equivalent) {
+                        M.mod_forumng.focus(equivalent);
+                    } else {
+                        var prev = jumpto.one('a.forumng-prev');
+                        var next = jumpto.one('a.forumng-next');
+                        if (prev || next) {
+                            M.mod_forumng.focus(prev ? prev : next);
+                        } else {
+                            M.mod_forumng.focus(jumpto.one('a'));
+                        }
+                    }
+                } else {
+                    // For keyboard-only users, go to the start of the post (makes more sense)
+                    var author = targetpost.one('.forumng-author');
+                    M.mod_forumng.focus(author.one('a'));
+                }
+            };
+
+            // Get link target and expand it if required
+            var targetpost2 = this.Y.one('#' + id).get('parentNode');
+            if (targetpost2.expandlink) {
+                M.mod_forumng.simulate_click(targetpost2.expandlink);
+                targetpost2.focushandler = focuser;
+            }
+            var targetpost3 = this.Y.one('#' + id).get('parentNode');
+            // If post has already been expanded, focus it now
+            if (!targetpost3.focushandler) {
+                focuser();
+            }
+
+            // Scroll to it
+            this.scroll_page(targetpost2);
+        }, this);
+    },
+
+    /**
+     * Scrolls the page so that a given target is at the top.
+     * @param target Node to scroll to
+     * @param after Callback to run after scrolling finishes
+     */
+    scroll_page: function(target, after) {
+        var scrollTo = target.getY();
+
+        var cfg = {
+            node: this.Y.one(window),
+            duration: Math.min(0.5, Math.abs(this.Y.DOM.docScrollY() - scrollTo)/200),
+            easing: this.Y.Easing.easeOut,
+            to: { scroll: [this.Y.DOM.docScrollX(), scrollTo] }
+        };
+        var anim = new this.Y.Anim(cfg);
+
+        if (after) {
+            anim.on('end', after, this);
+        }
+        anim.run();
+    },
+
+    /**
+     * Focuses the given node (after timeout).
+     * @param x Node to focus
+     */
+    focus : function(x) {
+        setTimeout(function() { x.focus(); }, 0);
+    },
+
+    /**
+     * Initialises a delete link.
+     * @param link Link node
+     * @param postid Post ID
+     * @param undeleted True if it's actually undelete
+     */
+    init_delete : function(link, postid, undelete, currentuser) {
+        link.postid = postid;
+        link.post = link.ancestor('.forumng-post');
+        link.on('click', function(e) {
+            e.preventDefault();
+            if (this.are_links_disabled(link)) {
+                return;
+            }
+            var deleteandemail = function() {
+                    window.location = 'deletepost.php' + '?p=' + link.postid + M.mod_forumng.cloneparam +
+                    '&delete=1' + '&ajax=1' + '&email=1'
+                    };
+            var deleteonly = function() {
+                    var cfg = {
+                            method: 'POST',
+                            data: 'p=' + link.postid + M.mod_forumng.cloneparam +
+                                    '&delete=' + (undelete ? 0 : 1) + '&ajax=1',
+                            timeout: 10000,
+                            context: M.mod_forumng,
+                            arguments: link,
+                            on: {
+                                success: M.mod_forumng.delete_ok,
+                                failure: M.mod_forumng.delete_error
+                            }
+                        };
+                        M.mod_forumng.Y.io('deletepost.php', cfg);
+                        M.mod_forumng.links_disable(link.post);
+                        link.loader = document.createElement('img');
+                        link.loader.alt = '';
+                        link.loader.src = M.mod_forumng.loaderpix;
+                        link.loader.style.position = 'absolute';
+                        link.loader = M.mod_forumng.Y.one(link.loader);
+                        link.get('parentNode').appendChild(link.loader);
+                        var linkregion = M.mod_forumng.Y.DOM.region(M.mod_forumng.Y.Node.getDOMNode(link));
+                        link.loader.setXY([linkregion.right + 3, linkregion.top]);
+                    };
+            if (currentuser) {
+                var deletebuttons = new Array(M.str.forumng.deletepostbutton);
+                var deleteoptions = new Array(deleteonly, '');
+            } else {
+                var deletebuttons = new Array(M.str.forumng.deleteemailpostbutton,M.str.forumng.deletepostbutton);
+                var deleteoptions = new Array(deleteandemail, deleteonly, '');
+            }
+            this.confirm(
+                    undelete ? M.str.forumng.confirmundelete : M.str.forumng.confirmdelete,
+                    undelete ? M.str.forumng.undeletepostbutton : deletebuttons,
+                    M.str.moodle.cancel, link.post,
+                    undelete ? deleteonly : deleteoptions
+                    );
+        }, this);
+    },
+
+    /**
+     * AJAX response: Delete completes OK / Set rating completes OK.
+     * @param transactionid YUI transaction id
+     * @param o YUI response object
+     * @param link Link (for delete) or div (for rating), which contains a '.post' variable
+     *   for the post object
+     */
+    delete_ok : function(transactionid, o, link) {
+        var newDiv = document.createElement('div');
+        newDiv.innerHTML = o.responseText;
+        var newpost = newDiv.firstChild;
+        // Post may be blank when deleting (if not admin)
+        if (newpost) {
+            newpost = this.Y.one(newpost);
+            link.post.get('parentNode').insertBefore(newpost, link.post);
+        }
+        this.links_enable(link.post);
+        link.post.remove();
+        if (newpost) {
+            this.init_content(newpost);
+        }
+    },
+
+    /**
+     * AJAX response: Delete fails / Set rating fails.
+     * @param transactionid YUI transaction id
+     * @param o YUI response object
+     * @param link Link (for delete) or div (for rating), which contains a '.post' variable
+     *   for the post object
+     */
+    delete_error : function(transactionid, o, link) {
+        if (link.loader) {
+            link.loader.remove();
+        }
+        this.links_enable(link.post);
+        alert(M.str.forumng.jserr_alter);
+    },
+
+    /**
+     * Displays a fancy dialog box on a faded-out background in the middle of the
+     * screen.
+     * @param message Message to display (may include html; if heading is included,
+     *     we recommend h4)
+     * @param actiontext Name for action button(s). May be a single string or
+     *     array if you need multiple buttons
+     * @param canceltext Name for cancel button
+     * @param highlight HTML element that should be highlighted (with an orange
+     *     box), used e.g. to indicate which post is being deleted
+     * @param action Function that gets run if user clicks the action button
+     *     (if there are multiple action buttons, this too must be an array)
+     */
+    confirm : function(message, actiontext, canceltext, highlight, action) {
+        if (typeof actiontext == 'string') {
+            // There is only one action (text and functions); make it look like an array
+            actiontext = [actiontext];
+            action = [action];
+        }
+
+        var fadepanel = document.createElement('div');
+        fadepanel.className = 'forumng-fadepanel';
+        document.body.appendChild(fadepanel);
+        fadepanel.style.position = 'absolute';
+        fadepanel.style.top = '0';
+        fadepanel.style.left = '0';
+        fadepanel.style.width = this.Y.DOM.docWidth() + "px";
+        fadepanel.style.height = this.Y.DOM.docHeight() + "px";
+        fadepanel.style.zIndex = 10;
+        fadepanel = this.Y.one(fadepanel);
+        fadepanel.setStyle('opacity', '0.0');
+
+        var anim = new this.Y.Anim({
+            node: fadepanel,
+            from: {'opacity': 0.0},
+            to: {'opacity': 0.5},
+            duration: 0.25,
+            easing : this.Y.Easing.easeNone});
+        anim.run();
+
+        var highlightdiv = null;
+        if (highlight) {
+            var highlightregion = highlight.get('region');
+
+            highlightdiv = document.createElement('div');
+            highlightdiv.className = 'forumng-highlightbox';
+            document.body.appendChild(highlightdiv);
+            highlightdiv.style.position = 'absolute';
+            highlightdiv.style.top = highlightregion.top + 'px';
+            highlightdiv.style.left = highlightregion.left + 'px';
+            highlightdiv.style.zIndex = 15;
+            highlightdiv = this.Y.one(highlightdiv);
+            var height = highlightregion.bottom - highlightregion.top -
+                this.remove_px(highlightdiv.getStyle('borderTopWidth')) -
+                this.remove_px(highlightdiv.getStyle('borderBottomWidth')) -
+                this.remove_px(highlightdiv.getStyle('paddingTop')) -
+                this.remove_px(highlightdiv.getStyle('paddingBottom'));
+            var width = highlightregion.right - highlightregion.left -
+                this.remove_px(highlightdiv.getStyle('borderLeftWidth')) -
+                this.remove_px(highlightdiv.getStyle('borderRightWidth')) -
+                this.remove_px(highlightdiv.getStyle('paddingLeft')) -
+                this.remove_px(highlightdiv.getStyle('paddingRight'));
+
+            highlightdiv.setStyle('height', height + 'px');
+            highlightdiv.setStyle('width', width + 'px');
+        }
+
+        var dialog = document.createElement('div');
+        document.body.appendChild(dialog);
+        dialog.className = 'forumng-confirmdialog';
+
+        dialog.style.position = 'absolute';
+        dialog.style.zIndex = 20;
+
+        dialog = this.Y.one(dialog);
+
+        var region = this.Y.DOM.viewportRegion();
+        region.height = region.bottom - region.top;
+        region.width = region.right - region.left;
+        dialog.setStyle('top', (region.top + region.height / 3) + "px");
+
+        // Set the dialog box width according to the browser window size.
+        var page = this.Y.DOM.region(Y.one("#page"));
+        var pixelsWidth = page.right - page.left;
+        var leftAdjuster = 0;
+        var requiredBoxWidth = 630;
+        if (pixelsWidth < 700) {
+            requiredBoxWidth = pixelsWidth - 40;
+            leftAdjuster = 5;
+        }
+        dialog.setStyle('width', (requiredBoxWidth - 10) + "px");
+        // Centre Dialog box.
+        var leftValue = region.left + region.width / 2 - (requiredBoxWidth / 2) - leftAdjuster;
+        // Ensure that the left property is not less than 0.
+        if ((leftValue) < 1) {
+            leftValue = 0;
+        }
+        dialog.setStyle('left', (leftValue) + "px");
+
+        var messagediv = document.createElement('div');
+        messagediv.className = 'forumng-message';
+        messagediv.tabIndex = -1;
+        messagediv.innerHTML = message;
+        messagediv = this.Y.one(messagediv);
+        dialog.appendChild(messagediv);
+
+        var buttondiv = document.createElement('div');
+        buttondiv.className = 'forumng-buttons';
+        buttondiv = this.Y.one(buttondiv);
+        dialog.appendChild(buttondiv);
+
+        var cancel = document.createElement('input');
+        cancel.type = 'button';
+        cancel.value = canceltext;
+        cancel = this.Y.one(cancel);
+        cancel.on('click', function() {
+            dialog.remove();
+            fadepanel.remove();
+            if (highlightdiv) {
+                highlightdiv.remove();
+            }
+        }, this);
+
+        for (var i = 0; i < actiontext.length; i++) {
+            buttondiv.appendChild(this.confirm_make_button(actiontext[i], action[i], cancel, false));
+        }
+
+        this.focus(messagediv);
+        buttondiv.appendChild(cancel);
+    },
+
+    /**
+     * Makes a button for the confirm dialog.
+     * @param actiontext Text
+     * @param action Function to call if button is clicked
+     * @param cancel Cancel button (which is automatically clicked before calling action)
+     * @param focus True if this should be focused
+     */
+    confirm_make_button : function(actiontext, action, cancel, focus) {
+        var yes = document.createElement('input');
+        yes.type = 'button';
+        yes.value = actiontext;
+        yes = this.Y.one(yes);
+        yes.on('click', function() {
+            M.mod_forumng.simulate_click(cancel);
+            action();
+        }, this);
+        if (focus) {
+            this.focus(yes);
+        }
+        return yes;
+    },
+
+    /**
+     * Logs data using Firebug if installed.
+     * @param thing Thing to log
+     */
+    log : function(thing) {
+        if (typeof(console) !== 'undefined') {
+            console.debug(thing);
+        }
+    },
+
+    /**
+     * Initialises forum main page JavaScript.
+     */
+    init_view : function() {
+        // Set the focus on the sort links when clicked
+        this.focus_sort_links();
+
+        // Set up all the draft links to use discuss.php instead of non-JS version
+        this.Y.all('.forumng-main a').each(function(link, index, list) {
+            var match = link.get('className').match(/^forumng-draftreply-([0-9]+)-([0-9]+)$/);
+            if (match) {
+                var linkmatch = link.get('href').match(/draft=([0-9]+)(&clone=[0-9]+)?$/);
+                link.set('href', 'discuss.php?d=' + match[1] + this.cloneparam +
+                        '&draft=' + linkmatch[1] + '#p' + match[2]);
+            }
+        }, this);
+
+        // Set up flag icons
+        this.init_flags(this.Y.one(document.body));
+
+        // Change selected buttons into links with text in brackets
+        this.Y.all('input.forumng-button-to-link').each(function(specialbutton, index, list) {
+            this.turn_button_into_link(specialbutton);
+        }, this);
+
+        // Init feature buttons
+        this.init_feature_buttons(true);
+    },
+
+    /**
+     * Focuses sort links after reloading page when a sort link was clicked.
+     */
+    focus_sort_links : function() {
+        var url = window.location.href;
+        var searchindex = url.search(/&sortlink=/);
+        if (searchindex != -1) {
+            var sortlinkid = "sortlink_" + url.substr(searchindex + 10, 1);
+            this.focus(this.Y.one('#' + sortlinkid));
+        }
+    },
+
+    /**
+     * On the main page, turns a button into a link with text in brackets (this is so we
+     * can have commands which are POST requests but look like links).
+     * @param button Button node
+     */
+    turn_button_into_link : function(button) {
+        var span = this.Y.one(document.createElement('span'));
+        span.appendChild(document.createTextNode('('));
+        var link = document.createElement('a');
+        link.appendChild(document.createTextNode(button.get('value')));
+        link.href = '#';
+        link = this.Y.one(link);
+        link.on('click', function(e) {
+            e.preventDefault();
+            M.mod_forumng.simulate_click(button);
+        }, this);
+        span.appendChild(link);
+        span.appendChild(document.createTextNode(') '));
+        button.get('parentNode').insertBefore(span, button);
+        button.setStyle('display', 'none');
+    },
+
+    /**
+     * Initialises the post selector feature, switching the whole page into post select mode.
+     * @param target Target button that indicates where the resulting selection will be posted,
+     *   or null to cancel select mode
+     */
+    select_init : function(target) {
+        this.select.on = target ? true : false;
+
+        var posts = this.Y.all('div.forumng-post');
+        var confirm = this.Y.Node.create('<input type="submit"/>');
+
+        var extraneousDisplay = this.select.on ? 'none' : 'block';
+        this.Y.one('#forumng-expandall').setStyle('display', extraneousDisplay);
+        this.Y.one('#forumng-features').setStyle('display', extraneousDisplay);
+        var subscribeOptions = this.Y.one('#forumng-subscribe-options');
+        if (subscribeOptions) {
+            subscribeOptions.setStyle('display', extraneousDisplay);
+        }
+
+        var main = this.Y.one('#forumng-main');
+        if (this.select.on) {
+            // Make form around main elements
+            var form = this.Y.Node.create("<form method='post'/>");
+            this.select.form = form;
+            form.set('action', target.get('form').get('action'));
+            main.addClass('forumng-selectmode');
+
+            form.inputs = this.Y.Node.create("<div/>");
+            form.appendChild(form.inputs);
+            var field = this.Y.Node.create('<input type="hidden" name="d"/>');
+            field.set('value', this.discussionid);
+            form.inputs.appendChild(field);
+            field = this.Y.Node.create('<input type="hidden" name="fromselect" value="1"/>');
+            form.inputs.appendChild(field);
+            if (this.cloneid) {
+                field = this.Y.Node.create('<input type="hidden" name="clone"/>');
+                field.set('value', this.cloneid);
+                form.inputs.appendChild(field);
+            }
+
+            // Make intro
+            form.intro = this.Y.Node.create('<div class="forumng-selectintro"/>');
+            main.get('parentNode').insertBefore(form.intro, main);
+            var introText = this.Y.Node.create('<p>' + M.str.forumng.selectintro + '</p>');
+            form.intro.appendChild(introText);
+
+            // Make buttons to select all/none
+            var selectButtons = this.Y.Node.create('<div class="forumng-selectbuttons"/>');
+            form.intro.appendChild(selectButtons);
+            var all = this.Y.Node.create('<input type="button"/>');
+            selectButtons.appendChild(all);
+            all.set('value', M.str.moodle.selectall);
+            all.on('click', function() {
+                // update the posts oject so it works after expanding a post
+                var posts = this.Y.all('div.forumng-post');
+                for (var i=0; i<posts.size(); i++) {
+                    if (!posts.item(i).check.get('checked')) {
+                        M.mod_forumng.simulate_click(posts.item(i).check);
+                    }
+                }
+                all.set('disabled', true);
+                none.set('disabled', false);
+            }, this);
+            selectButtons.appendChild(document.createTextNode(' '));
+            var none = this.Y.Node.create('<input type="button"/>');
+            selectButtons.appendChild(none);
+            none.set('value', M.str.moodle.deselectall);
+            none.on('click', function() {
+                // update the posts oject so it works after expanding a post
+                var posts = this.Y.all('div.forumng-post');
+                for (var i=0; i<posts.size(); i++) {
+                    if (posts.item(i).check.get('checked')) {
+                        M.mod_forumng.simulate_click(posts.item(i).check);
+                    }
+                }
+                all.set('disabled', false);
+                none.set('disabled', true);
+            }, this);
+
+            main.appendChild(form);
+
+            // Make outro
+            form.outro = this.Y.Node.create('<div class="forumng-selectoutro" />');
+            form.appendChild(form.outro);
+
+            confirm.set('value', M.str.forumng.confirmselection);
+            form.outro.appendChild(confirm);
+
+            form.outro.appendChild(document.createTextNode(' '));
+
+            var cancel = this.Y.Node.create('<input type="button" id="forumng-cancel-select"/>');
+            cancel.set('value', M.str.moodle.cancel);
+            form.outro.appendChild(cancel);
+            cancel.on('click', function() {
+                this.select_init(null);
+            }, this);
+
+            this.scroll_page(form.intro, null);
+        } else {
+            var form = this.select.form;
+            form.remove();
+            form.intro.remove();
+            form.outro.remove();
+            main.removeClass('forumng-selectmode');
+            this.select.form = null;
+        }
+
+        window.forumng_select_changed = function() {
+            // update the posts oject so it works after expanding a post
+            var posts = M.mod_forumng.Y.all('div.forumng-post');
+            var ok = false;
+            var checkcount = 0;
+            for (var i=0; i<posts.size(); i++) {
+                if (posts.item(i).check.get('checked')) {
+                    ok = true;
+                    checkcount++;
+                }
+            }
+            none.set('disabled', !ok);
+            confirm.set('disabled', !ok);
+            all.set('disabled', checkcount == posts.size());
+        };
+        for (var i=0; i<posts.size(); i++) {
+            this.select_init_post(posts.item(i), this.select.on);
+        }
+        if (this.select.on) {
+            window.forumng_select_changed();
+        }
+    },
+
+    /**
+     * Initialises a single post within select mode.
+     * @param post Post div
+     * @param on True if select is being turned on, false if it's being turned off
+     */
+    select_init_post : function(post, on) {
+        if (on) {
+            var info = post.one('div.forumng-info');
+            if (!info) {
+                return;
+            }
+            var span = this.Y.Node.create('<span/>');
+            var spanseparator = this.Y.Node.create('<span/>');
+            info.appendChild(span);
+            post.extraSpan = span;
+            post.addClass('forumng-deselected');
+            var postid = post.one('>a').get('id');
+
+            spanseparator.addClass('forumng-separator');
+            spanseparator.appendChild(document.createTextNode(' \u2022 '));
+            span.appendChild(spanseparator);
+            var check = this.Y.Node.create('<input type="checkbox"/>');
+            check.set('id', 'check' + postid);
+            post.check = check;
+            span.appendChild(check);
+            var label = this.Y.Node.create('<label class="accesshide"/>');
+            label.setAttribute('for', check.get('id'));
+            span.appendChild(label);
+            label.appendChild(document.createTextNode(M.str.forumng.selectlabel));
+            this.links_disable(document.body);
+
+            var hidden = this.Y.one("input[name='select" + postid + "']");
+            if (!hidden) {
+                hidden = this.Y.Node.create('<input type="hidden" value="0"/>');
+                hidden.set('name', 'select' + postid);
+                this.select.form.appendChild(hidden);
+            }
+            post.forumng_hidden = hidden;
+
+            check.on('click', function() {
+                if (check.get('checked')) {
+                    post.removeClass('forumng-deselected');
+                    post.forumng_hidden.set('value', 1);
+                } else {
+                    post.addClass('forumng-deselected');
+                    post.forumng_hidden.set('value', 0);
+                }
+                window.forumng_select_changed();
+            }, this);
+        } else {
+            if (post.extraSpan) {
+                post.extraSpan.remove();
+            }
+            post.removeClass('forumng-deselected');
+            this.links_enable(document.body);
+        }
+    },
+
+    /**
+     * Initialises the discussion selector feature, switching the whole page into select mode.
+     * @param target Target button that indicates where the resulting selection will be posted,
+     *   or null to cancel select mode
+     */
+    select_discuss_init : function(target, includes, excludes) {
+        this.select.on = target ? true : false;
+
+        var discussions = this.Y.all('.forumng-discussionlist tr');
+        if (discussions.size() == 0) {
+            return;
+        }
+        var confirm = this.Y.Node.create('<input type="submit"/>');
+
+        var extraneousDisplay = this.select.on ? 'none' : 'block';
+
+        var main = this.Y.one('table.forumng-discussionlist');
+        if (this.select.on) {
+            // Make form around main elements.
+            var form = this.Y.Node.create("<form method='post'/>");
+            this.select.form = form;
+            form.set('action', target.get('form').get('action'));
+            main.addClass('forumng-selectmode');
+
+            form.inputs = this.Y.Node.create("<div/>");
+            form.appendChild(form.inputs);
+            field = this.Y.Node.create('<input type="hidden" name="fromselect" value="1"/>');
+            form.inputs.appendChild(field);
+            if (this.cloneid) {
+                field = this.Y.Node.create('<input type="hidden" name="clone"/>');
+                field.set('value', this.cloneid);
+                form.inputs.appendChild(field);
+            }
+            target.get('form').get('children').item(0).all('input').each(
+                    function (node) {
+                        if (node.get('type') == 'hidden') {
+                            field = node.cloneNode(true);
+                            form.inputs.appendChild(field);
+                        }
+                    }
+            );
+
+            // Make intro.
+            form.intro = this.Y.Node.create('<div class="forumng-selectintro"/>');
+            main.get('parentNode').insertBefore(form.intro, main);
+            var introText = this.Y.Node.create('<p>' + M.str.forumng.selectdiscintro + '</p>');
+            form.intro.appendChild(introText);
+
+            // Make buttons to select all/none.
+            var selectButtons = this.Y.Node.create('<div class="forumng-selectbuttons"/>');
+            form.intro.appendChild(selectButtons);
+            var all = this.Y.Node.create('<input type="button"/>');
+            selectButtons.appendChild(all);
+            all.set('value', M.str.moodle.selectall);
+            all.on('click', function() {
+                for (var i = 1; i < discussions.size(); i++) {
+                    if (discussions.item(i).check && !discussions.item(i).check.get('checked')) {
+                        M.mod_forumng.simulate_click(discussions.item(i).check);
+                    }
+                }
+                all.set('disabled', true);
+                none.set('disabled', false);
+            }, this);
+            selectButtons.appendChild(document.createTextNode(' '));
+            var none = this.Y.Node.create('<input type="button"/>');
+            selectButtons.appendChild(none);
+            none.set('value', M.str.moodle.deselectall);
+            none.on('click', function() {
+                for (var i = 1; i < discussions.size(); i++) {
+                    if (discussions.item(i).check && discussions.item(i).check.get('checked')) {
+                        M.mod_forumng.simulate_click(discussions.item(i).check);
+                    }
+                }
+                all.set('disabled', false);
+                none.set('disabled', true);
+            }, this);
+
+            main.get('parentNode').insertBefore(form, this.Y.one('#forumng-features'));
+
+            // Make outro.
+            form.outro = this.Y.Node.create('<div class="forumng-selectoutro" />');
+            form.appendChild(form.outro);
+
+            confirm.set('value', M.str.forumng.confirmselection);
+            form.outro.appendChild(confirm);
+
+            form.outro.appendChild(document.createTextNode(' '));
+
+            var cancel = this.Y.Node.create('<input type="button" id="forumng-cancel-select"/>');
+            cancel.set('value', M.str.moodle.cancel);
+            form.outro.appendChild(cancel);
+            cancel.on('click', function() {
+                this.select_discuss_init(null);
+            }, this);
+
+            this.scroll_page(form.intro, null);
+            // Disable all discussion select buttons.
+            this.Y.all('.forumng-dselectorbutton input').each(
+                    function(node) {
+                        node.set('disabled', 'disabled');
+                    });
+        } else {
+            var form = this.select.form;
+            form.remove();
+            form.intro.remove();
+            form.outro.remove();
+            main.removeClass('forumng-selectmode');
+            this.select.form = null;
+            // Eanble all discussion select buttons.
+            this.Y.all('.forumng-dselectorbutton input').each(
+                    function(node) {
+                        node.set('disabled', '');
+                    });
+        }
+
+        for (var i = 0, len = discussions.size(); i < len; i++) {
+            if (discussions.item(i).hasClass('forumng-discussion-short')) {
+                var useid = discussions.item(i).get('id');
+                useid = useid.replace('discrow_', '');
+                // Check we interact with this discussion.
+                var include = true;
+                if (this.select.on) {
+                    if (includes.length > 0) {
+                        include = false;
+                        for (var a = 0; a < includes.length; a++) {
+                            if (discussions.item(i).hasClass(includes[a])) {
+                                include = true;
+                                break;
+                            }
+                        }
+                    }
+                    if (excludes.length > 0) {
+                        for (var a = 0; a < excludes.length; a++) {
+                            if (discussions.item(i).hasClass(excludes[a])) {
+                                include = false;
+                                break;
+                            }
+                        }
+                    }
+                }
+                if (include) {
+                    this.select_init_discuss(discussions.item(i), this.select.on, useid);
+                }
+            }
+        }
+        window.forumng_select_changed = function() {
+            var ok = false;
+            var checkcount = 0;
+            var availcount = 0;
+            for (var i = 0; i < discussions.size(); i++) {
+                if (discussions.item(i).check) {
+                    availcount++;
+                    if (discussions.item(i).check.get('checked')) {
+                        ok = true;
+                        checkcount++;
+                    }
+                }
+            }
+            none.set('disabled', !ok);
+            confirm.set('disabled', !ok);
+            all.set('disabled', checkcount == availcount);
+        };
+        if (this.select.on) {
+            window.forumng_select_changed();
+        }
+    },
+
+    /**
+     * Initialises a discussion row within select mode.
+     * @param post Discussion row
+     * @param on True if select is being turned on, false if it's being turned off
+     * @param number Order number of discussion in list
+     */
+    select_init_discuss : function(post, on, number) {
+        if (on) {
+            var info = post.one('td.cell.c0');
+            var span = this.Y.Node.create('<span class="dselectorcheck" />');
+            var spanseparator = this.Y.Node.create('<span/>');
+            info.prepend(span);
+            post.extraSpan = span;
+            post.addClass('forumng-deselected');
+            var postid = number;
+
+            spanseparator.addClass('forumng-separator');
+            spanseparator.appendChild(document.createTextNode(' \u2022 '));
+            var check = this.Y.Node.create('<input type="checkbox"/>');
+            check.set('id', 'check' + postid);
+            post.check = check;
+            span.appendChild(check);
+            var label = this.Y.Node.create('<label class="accesshide"/>');
+            label.setAttribute('for', check.get('id'));
+            span.appendChild(label);
+            label.appendChild(document.createTextNode(M.str.forumng.selectlabel.replace('{$a}', number)));
+            span.appendChild(spanseparator);
+            this.links_disable(document.body);
+
+            var hidden = this.Y.one("input[name='select" + postid + "']");
+            if (!hidden) {
+                hidden = this.Y.Node.create('<input type="hidden" value="0"/>');
+                hidden.set('name', 'selectd' + postid);
+                this.select.form.appendChild(hidden);
+            }
+            post.forumng_hidden = hidden;
+
+            check.on('click', function() {
+                if (check.get('checked')) {
+                    post.removeClass('forumng-deselected');
+                    post.forumng_hidden.set('value', 1);
+                } else {
+                    post.addClass('forumng-deselected');
+                    post.forumng_hidden.set('value', 0);
+                }
+                window.forumng_select_changed();
+            }, this);
+        } else {
+            if (post.extraSpan) {
+                post.extraSpan.remove();
+            }
+            post.removeClass('forumng-deselected');
+            this.links_enable(document.body);
+        }
+    },
+
+    /**
+     * Initialises rating div, either by turning the standard dropdown into an AJAX one with
+     * its own button, or else by turning it into a number of stars.
+     * @param div Rating div
+     */
+    init_rating : function(div) {
+        div.addClass('forumng-ratings-jsenabled');
+        div.post = div.ancestor('.forumng-post');
+        div.ratingcount = 0;
+
+        // If there is a select (=user allowed to edit rating), get it and use it to get detail
+        // about current rating.
+        var selects = div.all('select');
+        if (selects.size() > 0) {
+            div.selector = selects.item(0);
+            div.postid = parseInt(div.selector.get('name').replace(/^rating/, ''));
+            div.userrating = div.selector.get('value');
+            div.canrate = true;
+            div.hasuserrating = div.userrating != 999;
+        }
+        // If there is information about the current average rating (in a strong tag), get this
+        // (there might not be, if rating is not displayed)
+        var strongs = div.all('strong');
+        if (strongs.size() > 0) {
+            var strong = strongs.item(0);
+            div.publicratingvalue = strong.get('firstChild').get('nodeValue');
+            div.publicrating = parseInt(div.publicratingvalue.replace(/\s*\/.*$/,''));
+            div.postid = parseInt(strong.get('id').replace(/^rating_for_/, ''));
+            div.haspublicrating = true;
+            div.ratingcount = parseInt(strong.get('parentNode').one('span').
+                    get('firstChild').get('nodeValue'));
+        }
+        // Can user view rating?
+        div.canview = div.hasClass('forumng-canview');
+
+        if (this.ratingstars) {
+            // Get rid of everything inside the area and replace it with magic stars
+            div.get('childNodes').each(function(node, index, list) {node.remove();});
+            div.starspan = this.Y.Node.create('<span/>');
+            div.appendChild(div.starspan);
+            div.stars = [];
+            for (var i=0; i<=this.ratingstars; i++) {
+                var star = this.Y.Node.create('<img width="16" height="16"/>');
+                star.rating = i;
+                star.set('alt', i);
+                if (div.canrate) {
+                    this.star_init_events(div, star);
+                }
+                div.starspan.appendChild(star);
+                div.stars[i] = star;
+            }
+
+            // Set up number of votes
+            div.countspan = this.Y.Node.create('<span/>');
+            div.appendChild(div.countspan);
+
+            // Set star initial value
+            this.set_stars(div);
+        } else {
+            // No stars, just add AJAX to dropdown
+            if (!div.selector) {
+                return;
+            }
+
+            var newbutton = this.Y.Node.create('<input type="button"/>');
+            newbutton.set('value', M.str.forumng.rate);
+            div.selector.get('parentNode').insertBefore(newbutton, div.selector.get('nextSibling'));
+
+            newbutton.on('click', function() {
+                newbutton.disabled = true;
+
+                var cfg = {
+                    method: 'POST',
+                    data: 'p=' + div.postid  + M.mod_forumng.cloneparam + '&rating=' +
+                        div.selector.get('value') + '&ajax=1',
+                    timeout: 10000,
+                    context: this,
+                    arguments: div,
+                    on: {
+                        success: this.delete_ok, // Not a delete but it does the same thing
+                        failure: this.delete_error
+                    }
+                };
+                this.Y.io('rate.php', cfg);
+                this.links_disable(div.post);
+
+                div.loader = this.Y.Node.create('<img alt="" style="position:absolute"/>');
+                div.loader.set('src', this.loaderpix);
+                div.get('parentNode').appendChild(div.loader);
+                var byregion = this.Y.DOM.region(newbutton.getDOMNode());
+                div.loader.setXY([byregion.right + 3, byregion.top + 2]);
+            }, this);
+        }
+    },
+
+    /**
+     * Initialises events on a single star.
+     * @param div Main rating div
+     * @param star This star
+     */
+    star_init_events : function(div, star) {
+        star.set('tabIndex', 0);
+
+        star.clickfunction = function(e) {
+            div.newrating = star.rating;
+            if (div.hasuserrating && div.userrating == div.newrating) {
+                div.newrating = 999;
+            }
+
+            var cfg = {
+                method: 'POST',
+                data: 'p=' + div.postid  + M.mod_forumng.cloneparam + '&rating=' +
+                    div.newrating + '&ajax=1',
+                timeout: 10000,
+                context: M.mod_forumng,
+                arguments: div,
+                on: {
+                    success: M.mod_forumng.star_ok,
+                    failure: M.mod_forumng.delete_error
+                }
+            };
+            M.mod_forumng.Y.io('rate.php', cfg);
+            M.mod_forumng.links_disable(div.post);
+
+            // Use the current star as a loader icon place
+            star.set('src', M.mod_forumng.loaderpix);
+        };
+
+        star.on('click', star.clickfunction, this);
+        this.Y.on('key', star.clickfunction, star, 'press:13,32', this);
+
+        star.on('focus', function() {
+            star.addClass('forumng-starfocus');
+        }, this);
+        star.on('blur', function() {
+            star.removeClass('forumng-starfocus');
+        }, this);
+
+        star.on('mouseover', function() {
+            div.hastemprating = true;
+            div.temprating = star.rating;
+            this.set_stars(div);
+        }, this);
+        star.on('mouseout', function() {
+            div.hastemprating = false;
+            this.set_stars(div);
+        }, this);
+
+    },
+
+    /**
+     * Updates stars according to current rating values.
+     * @param div Main ratings div
+     */
+    set_stars : function(div) {
+        var userpos, publicpos;
+        var clearing = false;
+        if (div.hastemprating) {
+            if (div.hasuserrating && div.temprating == div.userrating) {
+                clearing = true;
+                userpos = -1;
+            } else {
+                userpos = div.temprating;
+            }
+        } else {
+            userpos = div.hasuserrating ? div.userrating : -1;
+        }
+        publicpos = div.haspublicrating ? div.publicrating : -1;
+
+        for (var i=0; i< div.stars.length; i++) {
+            var user = i==userpos, pub = i<=publicpos;
+            var key = (i==0 ? 'circle-' : 'star-') + (user ? 'y' : 'n') + "-" + (pub ? 'y' : 'n');
+            div.stars[i].set('src', this.starpix[key]);
+        }
+
+        if (div.ratingcount) {
+            var newtext = ' ' + (div.ratingcount == 1 ? M.str.forumng.js_nratings1 :
+                    M.str.forumng.js_nratings.replace(/#/, div.ratingcount));
+            var existing = div.countspan.get('firstChild');
+            if (existing) {
+                if (existing.get('nodeValue') != newtext) {
+                    existing.remove();
+                    existing = null;
+                }
+            }
+            if (!existing) {
+                div.countspan.appendChild(document.createTextNode(newtext));
+            }
+        }
+
+        var title = clearing ? M.str.forumng.js_clicktoclearrating :
+            div.temprating==1 ? M.str.forumng.js_clicktosetrating1 :
+            M.str.forumng.js_clicktosetrating.replace(/#/, div.temprating);
+        if (div.canview) {
+            if (!div.haspublicrating) {
+                title += ' ' + M.str.forumng.js_nopublicrating;
+            } else {
+                title += ' ' + M.str.forumng.js_publicrating.replace(/#/, div.publicrating);
+            }
+        }
+        if (div.canrate) {
+            if (!div.hasuserrating) {
+                title += ' ' + M.str.forumng.js_nouserrating;
+            } else {
+                title += ' ' + M.str.forumng.js_userrating.replace(/#/, div.userrating);
+            }
+        }
+        title += ' ' + M.str.forumng.js_outof.replace(/#/, this.ratingstars);
+
+        for (var i=0; i<div.stars.length; i++) {
+            div.stars[i].set('title', title.replace(/^\s*/, ''));
+        }
+    },
+
+    /**
+     * AJAX response: A star-click was handled OK.
+     * @param transactionid YUI transaction id
+     * @param o YUI response object
+     * @param div Ratings div
+     */
+    star_ok : function(transactionid, o, div) {
+        this.links_enable(div.post);
+        div.userrating = div.newrating;
+        div.hasuserrating = div.newrating != 999;
+        var re = /<strong id="rating_for_[0-9]+">([0-9]+) \//;
+        var match = re.exec(o.responseText);
+        if (match) {
+            div.publicrating = match[1];
+            div.haspublicrating = true;
+        } else {
+            div.haspublicrating = false;
+            div.ratingcount = 0;
+        }
+        var re = /<span class="forumng-count">([0-9]+)<\/span>/;
+        var match = re.exec(o.responseText);
+        if (match) {
+            div.ratingcount = parseInt(match[1]);
+        }
+        this.set_stars(div);
+    },
+
+    /**
+     * Sets up certain selects (currently just the 'Move discussion' one) so that their
+     * accompanying button is disabled when the select is set to 0.
+     * @param submit Submit button that goes with select
+     */
+    zero_disable : function(submit) {
+        var select = submit.previous();
+        if (!select || select.get('nodeName').toLowerCase() != 'select') {
+            M.mod_forumng.log('Warning: Zero-disable feature incorrectly applied.');
+            return;
+        }
+        var update = function() {
+            if (submit.hasClass('forumng-zero-disable')) {
+                submit.set('disabled', select.get('value') == 0);
+            }
+        };
+        update();
+        select.on('change', update, this);
+    },
+
+    /**
+     * Asks browser to print the page.
+     */
+    print_page : function() {
+        window.print();
+    },
+
+    /**
+     * Initialises the subscriber list page JavaScript.
+     */
+    init_subscribers : function() {
+        var buttonsDiv = this.Y.one('#forumng-buttons');
+        var selectAll = this.Y.Node.create('<input type="button"/>');
+        selectAll.set('value', M.str.moodle.selectall);
+        buttonsDiv.appendChild(document.createTextNode(' '));
+        buttonsDiv.appendChild(selectAll);
+        var deselectAll = this.Y.Node.create('<input type="button"/>');
+        deselectAll.set('value', M.str.moodle.deselectall);
+        buttonsDiv.appendChild(document.createTextNode(' '));
+        buttonsDiv.appendChild(deselectAll);
+
+        var unsubscribe;
+        var inputs = this.Y.one('#forumng-subscription-list').all('input');
+        var all = [];
+        for (var i=0; i<inputs.size(); i++) {
+            var input = inputs.item(i);
+            if (input.get('name').indexOf('user')==0) {
+                all.push(input);
+            }
+            if (input.get('name') == 'unsubscribe') {
+                unsubscribe = input;
+            }
+        }
+
+        var update = function() {
+            var allSelected=true, noneSelected=true;
+            for (var i=0; i<all.length; i++) {
+                if (all[i].get('checked')) {
+                    noneSelected = false;
+                } else {
+                    allSelected = false;
+                }
+            }
+            selectAll.set('disabled', allSelected);
+            deselectAll.set('disabled', noneSelected);
+            unsubscribe.set('disabled', noneSelected);
+        };
+        update();
+
+        for (var i=0; i<all.length; i++) {
+            all[i].on('click', update, this);
+        };
+
+        selectAll.on('click', function() {
+            for (var i=0; i<all.length; i++) {
+                all[i].set('checked', true);
+            }
+            update();
+        }, this);
+
+        deselectAll.on('click', function() {
+            for (var i=0; i<all.length; i++) {
+                all[i].set('checked', false);
+            }
+            update();
+        }, this);
+    }
+};
+
+/**
+ * Expands an object. Construct with original object (to determine the initial
+ * size) then add something into it or replace it, then call go() with the
+ * new object.
+ * @param originalobj Original object
+ * @return void
+ */
+function forumng_expander(originalobj) {
+    this.shrinkheight = originalobj==null ? 0 : M.mod_forumng.remove_px(
+            originalobj.getComputedStyle('height'));
+    this.lastheight = -1;
+
+    /**
+     * Starts expand animation.
+     */
+    this.go = function(newobj) {
+        // Some browsers don't return current actual height, which means this
+        // logic fails to work, so don't do the effect.
+        if (isNaN(this.shrinkheight)) {
+            return;
+        }
+        newobj.setStyle('maxHeight', this.shrinkheight + 'px');
+        newobj.setStyle('overflow', 'hidden');
+        var outer = this;
+
+        var timeoutid = setInterval(function() {
+            var currentheight = newobj.get('offsetHeight');
+            if (outer.lastheight == currentheight) {
+                newobj.setStyle('maxHeight', '');
+                newobj.setStyle('overflow', 'visible');
+                clearInterval(timeoutid);
+                return;
+            }
+            outer.lastheight = currentheight;
+            outer.shrinkheight += 20;
+            newobj.setStyle('maxHeight', outer.shrinkheight + 'px');
+        }, 20);
+    }
+}
diff --git a/mod/forumng/pix/circle-n-n.png b/mod/forumng/pix/circle-n-n.png
new file mode 100644
index 0000000000000000000000000000000000000000..4bd755fc24c8d4f73a5870df716e293b370b24ce
GIT binary patch
literal 128
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!D3?x-;bCrM;V{wqX6T`Z5GB1G~wg8_HR|bZ}
z88c=~+IYJaBwZ5Z7tG-B>_!@pBkk$p7{YNqIl+PH47<b+`-TaB_*t4d7?vJjU^s2c
VdB4U_3dmw$@O1TaS?83{1OObaA>{x7

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/circle-n-y.png b/mod/forumng/pix/circle-n-y.png
new file mode 100644
index 0000000000000000000000000000000000000000..69292ca9893b96e9289eb95e86e9e8cc6b23961a
GIT binary patch
literal 128
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!D3?x-;bCrM;V{wqX6T`Z5GB1G~wg8_HR|bZ}
zV_Rec3Xa%;q)USQf*Bm1-ADs+q&;06LpZJ{Cpa*jVVC$}-!S11KTA^w!_or`45v*w
U@7MTA0a*+Tp00i_>zopr0M%k3(*OVf

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/circle-y-n.png b/mod/forumng/pix/circle-y-n.png
new file mode 100644
index 0000000000000000000000000000000000000000..36fa5428f90dc782765e1e50738075609aaacab4
GIT binary patch
literal 148
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!73?$#)eFPF<EDmyaVpw-h<|UBBAK(+>3Z#KR
zP*5;FK7PiG8Be!JOaSs3OM?7@862M7NCR@zJY5_^IIbrrDDdsraUes3`&dGuVMtja
mgRw~K1<3$SpI8p&iwq1Ashs_OYu8JF%=2{hb6Mw<&;$SqFDBjq

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/circle-y-y.png b/mod/forumng/pix/circle-y-y.png
new file mode 100644
index 0000000000000000000000000000000000000000..20d584c48f78c87efa113319c412639caba73d94
GIT binary patch
literal 148
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!73?$#)eFPF<EDmyaVpw-h<|UBBAK(+>3Z#KR
zT$H({K<L;O+3wAo1c7|Uk|4ie28U-i(tsQ_PZ!4!j_b(@3Vb_u9LUh%K9*2u7*bZq
mU@X#lK{7zoCzgZxA_GH2Drdjn+Vv73^E_SsT-G@yGywqI$R<hv

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/clear.gif b/mod/forumng/pix/clear.gif
new file mode 100644
index 0000000000000000000000000000000000000000..0a38b0fee3382d08c21959be802f56a4a3190759
GIT binary patch
literal 179
zcmZ?wbhEHb<YwSz_#(pa`t|GU*RP*Cb!y+feY<w;nlx!rVPRozZf<I7YGh<&XlSUT
zqobvzrJ<prf`WpCgoKEQh=70q4-XFm1H=FS|A8cap!k!8m4QKoK?kG^WG4fwfr4sZ
zN+#E{2$z)&K1Xl*u(7Td*43KqBrD93Xfne?Z1RZ-M^0EWEj#pt(IZeuBbbB18UU)Y
BFY5pR

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/exclamation_mark.gif b/mod/forumng/pix/exclamation_mark.gif
new file mode 100644
index 0000000000000000000000000000000000000000..7472933736665f08dc3dc81492e3a2da0a1dc21d
GIT binary patch
literal 56
zcmZ?wbhEHb<YwSzXkcXc#mV{q|9{1wEQ|~cj0`#qKmd|qVB+uTU%C6ig}4&oRq2w4
IO+^{30hs0wLI3~&

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/flag.off.png b/mod/forumng/pix/flag.off.png
new file mode 100644
index 0000000000000000000000000000000000000000..7fccb71059ea019149c2b30fc61b7047a6363ea6
GIT binary patch
literal 352
zcmV-m0iXVfP)<h;3K|Lk000e1NJLTq000XB000XJ1^@s6sjPP<00001b5ch_0Itp)
z=>Px$8c9S!R2b8RkUvYqU=W9&_mUPNV25_lAaRg_lOT@bAh-ynbHFd;ckl~jata87
zAD{^0P&(8<;9#goNii)VN#1j4N&^l)%N=(=?ss=4xxc#jdbwdgyxs)vfNkIb$XH?k
z1$Lyl;dLjIN!Ni9Fb1ZLMq>*&2bz^|7ibCMSXHp=Ny9wPpM2jRRW7H%4Dei|iY~nh
zWlfSKZ&kXA&w_v|D15Gjy<X4ZFC9^f5o0iL0JMW3IE&-B1PH^>)WoTP;w<OP0Mazg
zfJ4vo_M#}NZ+0YQX-%iq{I)OvrdgH^09`B=a}ntS?dr%|!5E5CofDASUmt-FYwfVA
yjR7lFSB}?qb?aAP3cLfjS{6S>-1#L~{^1vp31hRFK&P$%0000<MNUMnLSTXxH;?Q9

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/flag.on.png b/mod/forumng/pix/flag.on.png
new file mode 100644
index 0000000000000000000000000000000000000000..97d6d2f1ee40438f4bbd226c6e9f14009b4db973
GIT binary patch
literal 429
zcmV;e0aE^nP)<h;3K|Lk000e1NJLTq000XB000XJ1^@s6sjPP<00001b5ch_0Itp)
z=>Px$XGugsR2b8RkuhsiVHAd+^Yy!?_a<h`53pQtDWz@+1f)M9AnBeV8A^uGr5&?~
zKcOfD2aAY}gM&k6Cv{0{1!>Z;CCyNXDeWcS{Z5Bm6(^tNoZ&ey2VO3|zWQ|DfA$eL
z1r&G_hT#T(39^~v>iAH<98~pTKBuc;lmaRu3Vg8E#+kSV>>Cl|7YnCR6lt^Blzcw#
z$Kx@rR;%WmJG0i_0At`e)04O9x0g>n;5Rp)_)e$e8;yn^jYetqmKF*H1yZ9R&N-r-
zb#WXoCX<OTm&>%<ZQ?lAZnx{_^SKuhi~xbP+$AnJI(q*gNs^VpU?7!BMe6lBy<SfM
zRMl7!(c2_7z-}%qeDC-Bd%)IkIFwqgMi2xJu)rOY;i3L`y>-pMYyj^7EtN_Ns4?cT
zL4?$+tuC+0QjUS`VzIbBolbXvN8bCNe}pRN=jHBx$IoW7)2yteq^bKQ#$LXFl>cxK
Xf*X;WDZ;0r00000NkvXXu0mjfTcE&{

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/icon.gif b/mod/forumng/pix/icon.gif
new file mode 100644
index 0000000000000000000000000000000000000000..b169178c82fbb7dfd214b645d7aba40cd41a1d24
GIT binary patch
literal 612
zcmZ?wbhEHb6krfwIOfP;z|ABg;<k)|rGcM8OeJd(L$to8th#!jy{f#l$=Vw{Dppoj
zPEJm1O&P-c8Qv*4RlA!81_sV>v@ngjloJ#4(lYFUlT}VmPDgIqgY@vF)p2|B_hz@<
zdYN6@)bzk>($Airo>MKV*Q!e{%(6c?C-Yy|+-1v_?OmI<cJ21ZD}uLd*|K)~`nps9
zf3Drpe)j*rT?cL)JN)Iu&3ETlT)upH)`S25FBhzT`TzgJy8riQJ$v@-?c2BiKdk%z
z{>$V4|NsBJ^z;AY@BiNcnL`&S{$ybkVW?-&VE_V9oG`E-Y^ZN)Zk7|4k>S*6F_4l{
ztCy3vonpeN)uf_sXRR#4siUK}Se~ceK*iB<jxvjm*#@(v^(qz)bIeWIgg44C&QLM8
zwlLqx#=^qRE@;rCrflTkXr#zyY}wLe%%^E|g-`rula-K?G%qi!lE93c61tA|l46E7
zh8&LsbidlzINIo|I4G$sbm<h+kK2+F=;UPK#H>{^!((GJ1J_Lfjf#MU$*t`C3=Jo?
fF&$uF)L`Xd*x=B<LsDGHV1^`P%juj(1_o;Y771k!

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/sortorder-down.gif b/mod/forumng/pix/sortorder-down.gif
new file mode 100644
index 0000000000000000000000000000000000000000..a0a257e87411aecec6fff77d233526a15f603fb6
GIT binary patch
literal 68
zcmZ?wbhEHb<YwSzSjYeZXU?4Y|NlRbq4<-9k&A(uL5G2X6)4Nbz`!IrrQVq7t-=%z
U{uYhQ-K+e&OD8Gvu`*Z#07DHC5C8xG

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/sortorder-up.gif b/mod/forumng/pix/sortorder-up.gif
new file mode 100644
index 0000000000000000000000000000000000000000..e92ab0801374dc140c2df46b81cdb38383d52666
GIT binary patch
literal 72
zcmZ?wbhEHb<YwSzSjYeZXU?4Y|NlRbq4<-9k&A(uK?fuXl4oF&oYTMZ^jq~uLX0dE
VHExJsJDb?dFfFNNnHwX6H2}AF6v+Sp

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/star-n-n.png b/mod/forumng/pix/star-n-n.png
new file mode 100644
index 0000000000000000000000000000000000000000..b1d2be9c887ca4b5018ce39f4a261e7b2a42666e
GIT binary patch
literal 277
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbKJV{wqX6T`Z5GB1IggaDrqR|ZA~
zNofgr1vy=9PJKhY08c4557+2G_V6I>fFS?a_?Y4}!Rnf-mbT_alSL;^o-lppv<>rR
zmM&j>e6#3=P3z7dayoQi>6Mc)M~@%5f2Ho}ooUZrJpK6k$fpmNKYzLV@BbhB(nCxj
zi%Ww1f*Bm1-ADs+!aQ9ZLnJQ8_671e7_zWbx12rJe&p}_pBhs4YNpP5I_JonoRE6n
zqU&rq?u~B+GTbE&?BxH*#}-r<Y<Wy4Gx_+B^RnehF|56s)owTDUEy2mul2ZfC4b$m
XLJrHFn=NhtZD8<p^>bP0l+XkK8q#gm

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/star-n-y.png b/mod/forumng/pix/star-n-y.png
new file mode 100644
index 0000000000000000000000000000000000000000..715cabb90b7a9cb87ad0912f25c2bcac552f85d8
GIT binary patch
literal 284
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbKJV{wqX6T`Z5GB1IggaDrqR|ZA~
zNoffcHDz6G&Hzs-HxJk7K=$w;?SLTv*!Y;@G{Necs+P9qMUzD*PM$D*=Clp-WtJ{q
zd}6c6v2CgwHmy5<$m!65rB_bI96f&I!Ij#lccy)KzVq3Or=Q-P`TXVXzyE(8@q{aY
zEG`N13ubV5b|VeQiS=}G43W4T+ZV`pK!L;A(wS4y>BGO{bIu5+zIW#q@!Hb4;GD#M
zrsC^-73B<f4?9$b2<hDGU&p0qlKv*+x6{dKLf3nr+*#RqY2w{ETHTG|KF@D?E)vb$
fzga3}@(V_%Tuy1WDKbnzix@mz{an^LB{Ts5akX#(

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/star-y-n.png b/mod/forumng/pix/star-y-n.png
new file mode 100644
index 0000000000000000000000000000000000000000..b96677bbc6b10d805f3fc15b10c4eef13f61ebcf
GIT binary patch
literal 439
zcmV;o0Z9IdP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00001b5ch_0Itp)
z=>Px$aY;l$R5;6(Qa!8UKomW9o`qNlT5Q-AA!*at3F!nok^D#hLXdQVonR5Lv~dQ+
z4Q{{z1CnCN*~+lPi|)Q#-LE-w?!5<iV|ku4&vU-(>AWi*k4OB=)T;u?4`U3BF(CQz
zWd@ha<#$z8jSoP+#Nc!~wfg@BKvHR~n^<cNlC8axrYRqfhm)-98n@fc$qk1?DCJ`G
zdOZlqZ)uud&*!sK-0gN)tyUNe28iPrQ4~4#@pz2IV&Qc}<QGYGI2`Kzevi7Y0RTyo
z006ADNRp%hP)cDsonkVXC=p=?07QfU<a)hwv)SN&zqc-|-|u5SpTqM!X<ee{c@hKx
z03eQI0BA-4fFKB*$E`Yeo-B%@Pjk1O(_v5)1<SH*;xG&mhG7$zWr?CF_>#f%hi<ov
z*=z>i_XPlqG2CvqsH*A{3kN`JjnQa?<#PE$MDl0e_kAJxeZ5}){99m-S!<bP8DA;x
hsn9ITXsvC=_yZVbw`n^D&(#0`002ovPDHLkV1f`i!l3{F

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/star-y-y.png b/mod/forumng/pix/star-y-y.png
new file mode 100644
index 0000000000000000000000000000000000000000..42247fda60881fe3bdd9571b31dfc63d262d5228
GIT binary patch
literal 300
zcmV+{0n`48P)<h;3K|Lk000e1NJLTq000mG000mO0{{R3C@l|D00001b5ch_0Itp)
z=>Px#S5Qn;MgRZ*0000N6$5;562`P0$F(8Kxh~4OFUz|!&AvO%zC6yqK+wTO(ZfpA
z$5__MT-M59+|hR3(t6<5gyGnV<J*(v-I?y_yYTD8@$Jg<@6hz{)AsY-RpLvV00001
zbW%=J06^y0W&i*Hc1c7*R2b7;j#m!AAPhqdb@!%w-2a?~1}ahiIDU#Dfao|7YaD+d
z&*Qw4djt$=B2bWpABWbep;hCi0q9*wlun%YZf8wNt&}FyRa$2ypgO~olT@bfkCLy-
ykS`mIy@ZzsGqVlYGR_{<op@J^-%IE&H}C-Yy#z^r-rm~)0000<MNUMnLSTaNJBIuK

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/sticky.png b/mod/forumng/pix/sticky.png
new file mode 100644
index 0000000000000000000000000000000000000000..214fd7554163393e0fd81e5a7b967b4715113c4b
GIT binary patch
literal 650
zcmV;50(Jd~P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00001b5ch_0Itp)
z=>Px%L`g(JR5;6RlRr;lQ4qy{b03B*>I>}Z(upQ+q|ipc0Qw1hi4BQV5=qQ{1G5Q<
zlv`UtrIngIYAUG=jg1t-TCip*%x+wW0-E^VY{8%4>aAvO=G;4H<{aU_<J6ov;2V&5
z_MaC34VqvBI0p{gCHHo`UdEHn>&?7~>;OD^kL*SF064rmWXhTX1w{+RcrpFv0jK8t
z02Tr5cpcfE*(Noc0^sQP5yyXynY1Pq5R@A??tTF<!=J~&$(ban*%YdZ@B5@?QzU1S
zbi9rL3M@J`Cl4UbwKIqC6VR^Lm90-(q(7%o)e$vS#TY~WF3;Kh86hh)>?CHzzsA3d
z$ZF5;iSyB6H@b_eB4gt*V(`^xZF-H4-=W&8%7jb+OdBBKsmJ>CI+<vu4;G>I(i#j&
zXnSppF{mn;Xod}Y15Z5^O&ElEAD>t-)(41CYLz(sdphdk<o<+GtAt2Dj|F4+_yF^U
z0aYCY<#w4|Gly;L5e3`W<eE9k?J@wq`eXD&8UR5Pr1DT9+sqOUgkLK}ARGvjZDy%F
zR0v9Nc;5&B=N8uD#lr=c-Af{Y2rv55-@;&N!;M4&5%z!Wvl?2(!a|U9qpAl+4E3kF
z+Lk>k9`YTJRTbN^sXx`#h(T2kOfg=(MJb4gj0Q0h0B?_?f(S~X7%$!$05|TYfg44K
zN<&oo6l4$&HPx@V8DL(U$*DPcRozjPmCy>yAC>{A_NrWUuMh+gDY#2+`dv4U+u2hu
k;o~m=YA_8;tat7F5BPrs=69CK$N&HU07*qoM6N<$f(XVSxBvhE

literal 0
HcmV?d00001

diff --git a/mod/forumng/pix/timeout.png b/mod/forumng/pix/timeout.png
new file mode 100644
index 0000000000000000000000000000000000000000..679e822dc282beb32e719ef68a751a731b4d9dbd
GIT binary patch
literal 300
zcmV+{0n`48P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00001b5ch_0Itp)
z=>Px#=1D|BR5;7ElevwAKoCWrHW<v!0kgx{5RixkwLu2ulLClDS~HEt!ENcUu|0@k
znvwSUPN}Z1I^m!20Sv$uNLdcq{u1xN=$w<8DTJVul0pbFGdbr3j5)5DeDU6E58y%f
z-V3;tNXC8gJ@F`aB;!NR&N-EEtl*B^&Nh?5%!&zTx|t~t7JzFA;ae4i5R|tAKuReU
zg8?ne@?^{L=`9o7VvKzGo>5g5(==_mBw~yJx0f?m*Hv|03lN~L>o(tU2B%w)q^4;$
yl6jtsTR6RgJNmv?+qS27@F$n}>tFcMH+}+_Zq<B|$4!X<0000<MNUMnLSTY`NP^D*

literal 0
HcmV?d00001

diff --git a/mod/forumng/pluginfile.php b/mod/forumng/pluginfile.php
new file mode 100644
index 0000000..820af7f
--- /dev/null
+++ b/mod/forumng/pluginfile.php
@@ -0,0 +1,56 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * A script to serve files from ForumNG though email.
+ * Used so can apply restrictions on core pluginfile, but leave this open to world
+ *
+ * @package    mod
+ * @subpackage forumng
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once($CFG->dirroot . '/lib/filelib.php');
+
+$relativepath = get_file_argument();
+
+// Relative path must start with '/'.
+if (!$relativepath) {
+    print_error('invalidargorconf');
+} else if ($relativepath{0} != '/') {
+    print_error('pathdoesnotstartslash');
+}
+
+// Extract relative path components.
+$args = explode('/', ltrim($relativepath, '/'));
+
+if (count($args) == 0) { // Always at least user id.
+    print_error('invalidarguments');
+}
+$contextid = (int)array_shift($args);
+$component = array_shift($args);
+$filearea = array_shift($args);
+$draftid = (int)array_shift($args);
+
+if ($component !== 'mod_forumng' && $filearea !== 'message') {
+    send_file_not_found();
+}
+// Following code must match root pluginfile.php (can't include, so must duplicate).
+$forcedownload = optional_param('forcedownload', 0, PARAM_BOOL);
+$preview = optional_param('preview', null, PARAM_ALPHANUM);
+
+file_pluginfile($relativepath, $forcedownload, $preview);
diff --git a/mod/forumng/preferences.php b/mod/forumng/preferences.php
new file mode 100644
index 0000000..4a8bffb
--- /dev/null
+++ b/mod/forumng/preferences.php
@@ -0,0 +1,91 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forumng mail subscription preferences (uses user record fields).
+ *
+ * @package    mod_forumng
+ * @copyright  2015 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once($CFG->dirroot . '/user/editlib.php');
+require_once($CFG->dirroot . '/user/lib.php');
+require_once($CFG->dirroot . '/mod/forumng/preferences_form.php');
+
+$userid = optional_param('id', $USER->id, PARAM_INT); // User id.
+$courseid = optional_param('course', SITEID, PARAM_INT); // Course id (defaults to Site).
+$cmid = optional_param('fid', null, PARAM_INT); // Forum cmid - for redirects.
+
+$PAGE->set_url('/mod/forumng/preferences.php', array('id' => $userid, 'course' => $courseid, 'fid' => $cmid));
+
+list($user, $course) = useredit_setup_preference_page($userid, $courseid);
+
+// Create form.
+$forumform = new user_edit_forumng_form(null, array('id' => $userid, 'course' => $courseid, 'fid' => $cmid));
+if ($user->maildigest == 2) {
+    $user->maildigest = 1;
+}
+$forumform->set_data($user);
+
+$redirect = new moodle_url('/user/preferences.php', array('userid' => $user->id));
+if ($cmid) {
+    $redirect = new moodle_url('/mod/forumng/view.php', array('id' => $cmid));
+}
+
+if ($forumform->is_cancelled()) {
+    redirect($redirect);
+} else if ($data = $forumform->get_data()) {
+
+    $user->maildigest = $data->maildigest;
+    $user->mailformat = $data->mailformat;
+
+    user_update_user($user, false, true);
+
+    if ($USER->id == $user->id) {
+        $USER->maildigest = $data->maildigest;
+        $USER->mailformat = $data->mailformat;
+    }
+
+    redirect($redirect);
+}
+
+// Display page header.
+$streditmyforum = get_string('forumpreferences');
+$userfullname = fullname($user, true);
+
+// Add forum info to breadcrumbs.
+if ($cmid) {
+    $modinfo = get_fast_modinfo($courseid);
+    $forum = $modinfo->get_cm($cmid);
+    $PAGE->navbar->add(format_text($CFG->navshowfullcoursenames ? $course->fullname : $course->shortname),
+            "/course/view.php?id=$courseid");
+    $PAGE->navbar->add($forum->get_formatted_name(), $redirect);
+}
+
+$PAGE->navbar->includesettingsbase = true;
+$PAGE->set_title("$course->shortname: $streditmyforum");
+$PAGE->set_heading($userfullname);
+
+echo $OUTPUT->header();
+echo $OUTPUT->heading($streditmyforum);
+
+// Finally display THE form.
+$forumform->display();
+
+// And proper footer.
+echo $OUTPUT->footer();
diff --git a/mod/forumng/preferences_form.php b/mod/forumng/preferences_form.php
new file mode 100644
index 0000000..88c8ae7
--- /dev/null
+++ b/mod/forumng/preferences_form.php
@@ -0,0 +1,74 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form for forumng user preferences.
+ *
+ * @package    mod_forumng
+ * @copyright  2015 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once($CFG->libdir . '/formslib.php');
+
+class user_edit_forumng_form extends moodleform {
+
+    /**
+     * Define the form.
+     */
+    public function definition () {
+        $mform = $this->_form;
+
+        self::add_elements($mform);
+
+        // Add some extra hidden fields.
+        foreach ($this->_customdata as $name => $default) {
+            $mform->addElement('hidden', $name);
+            $mform->setType($name, PARAM_INT);
+            if (!empty($default)) {
+                $mform->setDefault($name, $default);
+            }
+        }
+
+        $this->add_action_buttons(true, get_string('savechanges'));
+    }
+
+    /**
+     * Add re-usable form elements for forum preferences
+     * @param MoodleQuickForm $mform
+     */
+    public static function add_elements(&$mform) {
+        global $CFG, $OUTPUT;
+
+        $mform->addElement('html', $OUTPUT->heading(get_string('forumsubscription', 'forumng'), 3));
+
+        $choices = array();
+        $choices['0'] = get_string('emaildigestoff');
+        $choices['1'] = get_string('emaildigestcomplete');
+        $mform->addElement('select', 'maildigest', get_string('emaildigest'), $choices);
+        $mform->setDefault('maildigest', $CFG->defaultpreference_maildigest);
+        $mform->addHelpButton('maildigest', 'emaildigest');
+
+        $mform->addElement('html', html_writer::empty_tag('hr'));
+
+        $choices = array();
+        $choices['1'] = get_string('htmlformat');
+        $choices['0'] = get_string('textformat');
+        $mform->addElement('select', 'mailformat', get_string('emailformat'), $choices);
+        $mform->setDefault('autosubscribe', $CFG->defaultpreference_mailformat);
+    }
+
+}
diff --git a/mod/forumng/rate.php b/mod/forumng/rate.php
new file mode 100644
index 0000000..ebda04d
--- /dev/null
+++ b/mod/forumng/rate.php
@@ -0,0 +1,76 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Set rating for a post or multiple posts in a discussion (AJAX / non-JS).
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Discussion ID (to do a bunch at once)
+$discussionid = optional_param('d', 0, PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($discussionid) {
+    // Get discussion and check basic security
+    $discussion = mod_forumng_discussion::get_from_id($discussionid, $cloneid);
+    $discussion->require_view();
+
+    // Get list of posts to change
+    $changes = array();
+    foreach ($_POST as $key => $value) {
+        $matches = array();
+        if (preg_match('~^rating([0-9]+)$~', $key, $matches) &&
+            preg_match('~^[0-9]+$~', $value)) {
+            $changes[$matches[1]] = (int)$value;
+        }
+    }
+
+    $transaction = $DB->start_delegated_transaction();
+    $rootpost = $discussion->get_root_post();
+    foreach ($changes as $postid => $rating) {
+        $post = $rootpost->find_child($postid, true);
+        if (!$post->can_rate()) {
+            print_error('rate_nopermission', 'forumng', '', $postid);
+        }
+        $post->rate($rating);
+    }
+    $transaction->allow_commit();
+    redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+}
+
+// Post ID (to do a single post)
+$postid = required_param('p', PARAM_INT);
+$ajax = optional_param('ajax', 0, PARAM_INT);
+$rating = required_param('rating', PARAM_INT);
+
+// Get post and check basic security
+$post = mod_forumng_post::get_from_id($postid, $cloneid);
+$post->require_view();
+if (!$post->can_rate()) {
+    print_error('rate_nopermission', 'forumng', '', $postid);
+}
+
+$post->rate($rating);
+if ($ajax) {
+    mod_forumng_post::print_for_ajax_and_exit($postid, $cloneid);
+}
+redirect('discuss.php?' .
+        $post->get_discussion()->get_link_params(mod_forumng::PARAM_PLAIN) .
+        '#'. $postid);
diff --git a/mod/forumng/rebuildsearchindex.php b/mod/forumng/rebuildsearchindex.php
new file mode 100644
index 0000000..076eccd
--- /dev/null
+++ b/mod/forumng/rebuildsearchindex.php
@@ -0,0 +1,43 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This script is for use only temporarily to respond to a glitch in the
+ * forum -> ForumNG conversion script where it didn't build search indexes.
+ * This file lets the search index be manually rebuilt. We should probably
+ * delete it later.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+$cmid = required_param('id', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$cm = $forum->get_course_module();
+require_login($cm->course, false, $cm);
+require_capability('moodle/restore:restoreactivity', $cm->context);
+mod_forumng::search_installed();
+$PAGE->set_url('/mod/forumng/rebuildsearchindex.php', array('id' => $cmid, 'clone' => $cloneid));
+// This script is not very user friendly. Once it finishes, it's done...
+echo $OUTPUT->header();
+mod_forumng::search_update_all(true, $cm->course, $cm->id);
+echo $OUTPUT->footer();
diff --git a/mod/forumng/renderer.php b/mod/forumng/renderer.php
new file mode 100644
index 0000000..69e181a
--- /dev/null
+++ b/mod/forumng/renderer.php
@@ -0,0 +1,2061 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * ForumNG module renderer class
+ * @see core_renderer Core renderer (you can call methods in this)
+ * @package    mod
+ * @subpackage forumng
+ * @copyright  2011 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_renderer extends plugin_renderer_base {
+
+    /**
+     * Displays a discussion (main part of discussion page) with given options.
+     * @param mod_forumng_discussion $discussion
+     * @param object $options
+     * @return string HTML content of discussion
+     */
+    public function render_discussion($discussion, $options) {
+
+        if ($discussion->is_auto_locked()) {
+            $options[mod_forumng_post::OPTION_INCLUDE_LOCK] = true;
+        }
+        // Get main bit of discussion.
+        $content = $discussion->get_root_post()->display_with_children($options);
+
+        if ($discussion->is_auto_locked()) {
+            $content = $this->render_lock_message()  . $content;
+        } else {
+            // Get lock post, if any.
+            $lockpost = $discussion->get_lock_post();
+            if ($lockpost) {
+                $content = '<div class="forumng-lockmessage">' .
+                    $lockpost->display(true,
+                       array(mod_forumng_post::OPTION_NO_COMMANDS=>true)) .
+                '</div>' . $content;
+            }
+        }
+        return $content;
+    }
+
+    public function render_lock_message() {
+
+        $output = html_writer::start_tag('div', array('class' => 'forumng-auto-lockmessage'));
+        $output .= html_writer::start_tag('div', array('class' => 'forumng-post forumng-full'));
+        $output .= html_writer::start_tag('div', array('class' => 'post-deco'));
+        $output .= html_writer::tag('div', '', array('class' => 'post-deco-bar'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::start_tag('div', array('class' => 'forumng-post-outerbox'));
+        $output .= html_writer::tag('h3', get_string('lockedtitle', 'forumng'), array('class' => 'forumng-subject'));
+        $output .= html_writer::start_tag('div', array('class' => 'forumng-postmain'));
+        $output .= html_writer::start_tag('div', array('class' => 'forumng-message'));
+        $output .= html_writer::tag('p', get_string('autolockedmessage', 'forumng'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::tag('div', '', array('class' => 'forumng-postfooter'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::tag('div', '', array('class' => 'forumng-endpost'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::end_tag('div');
+        return $output;
+    }
+
+    /**
+     * Opens table tag and displays header row ready for calling
+     * render_discussion_list_item() a bunch of times.
+     * @param mod_forumng $forum
+     * @param int $groupid Group ID for display; may be NO_GROUPS or ALL_GROUPS
+     * @param string $baseurl Base URL of current page
+     * @param int $sort mod_forumng::SORT_xx constant for sort order
+     * @return string HTML code for start of table
+     */
+    public function render_discussion_list_start($forum, $groupid, $baseurl,
+        $sort, $sortreverse=false) {
+        global $CFG;
+        $th = "<th scope='col' class='header c";
+
+        // Work out sort headers
+        $baseurl = preg_replace('~&sort=[a-z]~', '', $baseurl);
+        $baseurl = preg_replace('~&page=[0-9]+~', '', $baseurl);
+        $sortdata = array();
+        $reversechar = ($sortreverse) ? '' : 'r';
+        foreach (array(mod_forumng::SORT_DATE, mod_forumng::SORT_SUBJECT, mod_forumng::SORT_AUTHOR,
+                mod_forumng::SORT_POSTS, mod_forumng::SORT_UNREAD,
+                mod_forumng::SORT_GROUP) as $possiblesort) {
+            $data = new stdClass;
+            if ($sort == $possiblesort) {
+                $data->before = '<a ' . 'id="sortlink_' .
+                        mod_forumng::get_sort_letter($possiblesort) .
+                        '" href="' . s($baseurl) . '&amp;sort=' .
+                        mod_forumng::get_sort_letter($possiblesort) . $reversechar .
+                        '&amp;sortlink=' . mod_forumng::get_sort_letter($possiblesort) .
+                        '" class="forumng-sortlink" '.
+                        'title="'. mod_forumng::get_sort_title($possiblesort) . ' ' .
+                        $this->get_sort_order_text($sort, !$sortreverse) . '">';
+                $data->after = '</a>' . $this->get_sort_arrow($sort, $sortreverse);
+            } else {
+                $data->before = '<a ' . 'id="sortlink_' .
+                        mod_forumng::get_sort_letter($possiblesort) . '" href="' . s($baseurl) .
+                        '&amp;sort=' . mod_forumng::get_sort_letter($possiblesort) .
+                        '&amp;sortlink=' . mod_forumng::get_sort_letter($possiblesort) .
+                        '" title="'. mod_forumng::get_sort_title($possiblesort) . ' ' .
+                        $this->get_sort_order_text($possiblesort) . '" class="forumng-sortlink">';
+                $data->after = '</a>';
+            }
+
+            $sortdata[$possiblesort] = $data;
+        }
+
+        if ($forum->can_mark_read()) {
+            $unreadpart = "{$th}1 forumng-unreadcount'>" .
+                    $sortdata[mod_forumng::SORT_UNREAD]->before .
+                    get_string('unread', 'forumng') .
+                    $sortdata[mod_forumng::SORT_UNREAD]->after .
+                    "</th>";
+            $nextnum = 2;
+        } else {
+            $unreadpart = '';
+            $nextnum = 1;
+        }
+
+        // Check group header
+        if ($groupid == mod_forumng::ALL_GROUPS) {
+            $grouppart = "{$th}$nextnum'>" .
+                    $sortdata[mod_forumng::SORT_GROUP]->before .
+                    get_string('group') . $sortdata[mod_forumng::SORT_GROUP]->after .
+                    "</th>";
+            $nextnum++;
+        } else {
+            $grouppart = '';
+        }
+        $lpnum = $nextnum + 1;
+        $npnum = $nextnum + 2;
+        $sbnum = $nextnum + 3;
+
+        return "<table class='generaltable forumng-discussionlist'><thead><tr>" .
+            "{$th}0'>" .
+            $sortdata[mod_forumng::SORT_SUBJECT]->before .
+            get_string('discussion', 'forumng') .
+            $sortdata[mod_forumng::SORT_SUBJECT]->after .
+            "</th>" .
+            $unreadpart .
+            $grouppart .
+            "{$th}{$lpnum}'>" .
+            $sortdata[mod_forumng::SORT_DATE]->before .
+            get_string('lastpost', 'forumng') .
+            $sortdata[mod_forumng::SORT_DATE]->after .
+            "</th>" .
+            "{$th}{$npnum} forumng-postscol'>" .
+            $sortdata[mod_forumng::SORT_POSTS]->before .
+            get_string('posts', 'forumng') .
+            $sortdata[mod_forumng::SORT_POSTS]->after .
+            "</th>" .
+            "{$th}{$sbnum} lastcol'>" .
+            $sortdata[mod_forumng::SORT_AUTHOR]->before .
+            get_string('startedby', 'forumng') .
+            $sortdata[mod_forumng::SORT_AUTHOR]->after .
+            '</th></tr></thead><tbody>';
+    }
+
+    /**
+     * Renders discussion author details in the list item
+     * @param mod_forumng_discussion $discussion object
+     * @param int $courseid of the course
+     * @param int $num Cur cell number
+     * @return string td html tag containing the discussion last post details
+     */
+    public function render_discussion_list_item_author($discussion, $courseid, $num) {
+        $posteranon = $discussion->get_poster_anon();
+        $poster = $discussion->get_poster();
+        $userimage = $this->user_picture($poster, array('courseid' => $courseid));
+        $defaultimage = html_writer::empty_tag('img',
+                array('src' => $this->pix_url('u/f2'), 'alt' => ''));
+        if ($discussion->get_forum()->is_shared()) {
+            // Strip course id if shared forum.
+            $userimage = str_replace('&amp;course=' . $courseid, '', $userimage);
+        }
+
+        $result = "<td class='forumng-startedby cell c$num lastcol'>";
+        $wrapper = html_writer::start_tag('div', array('class' => 'forumng-startedby-wrapper'));
+        $user = $discussion->get_forum()->display_user_link($poster);
+        $br = html_writer::empty_tag('br', array());
+        $moderator = get_string('moderator', 'forumng');
+        $userpicture = html_writer::tag('div', $userimage,
+                array('class' => 'forumng-startedbyimage'));
+        $defaultpicture = html_writer::tag('div', $defaultimage,
+                array('class' => 'forumng-startedbyimage'));
+        $userlink = html_writer::tag('div', $user ,
+                array('class' => 'forumng-startedbyuser'));
+        $moderated = html_writer::tag('div', $moderator,
+                array('class' => 'forumng-moderator'));
+        $endwrapper = html_writer::end_tag('div');
+        if ($posteranon == mod_forumng::ASMODERATOR_IDENTIFY) {
+            $startedby = $userpicture . $wrapper . $userlink . $moderated . $endwrapper;
+        } else if ($posteranon == mod_forumng::ASMODERATOR_ANON) {
+            if ($discussion->get_forum()->can_post_anonymously()) {
+                $startedby = $userpicture . $wrapper . $userlink .  $moderated . $endwrapper;
+            } else {
+                $startedby = $defaultimage . $moderator;
+            }
+        } else {
+            $startedby = $userimage . $user;
+        }
+        $result .= $startedby . "</td>";
+        return $result;
+    }
+
+    /**
+     * renders last post details for a discussion
+     * @param mod_forumng_discussion $discussion object
+     * @param int $lastpostanon boolen if last post was anon
+     * @param int $num value for specifying the position the last post details are rendered to in the item list
+     * @returns string the td html tag containing the last post details
+     */
+    public function render_discussion_list_item_lastpost($discussion, $lastposteranon, $num) {
+        $br = html_writer::empty_tag('br', array());
+        $result = '<td class="cell c' . $num .' forumng-lastpost">';
+        $lastposter = $discussion->get_last_post_user();
+        $lastuserlink = $discussion->get_forum()->display_user_link($lastposter);
+        $timestr = mod_forumng_utils::display_date($discussion->get_time_modified());
+        $moderator = get_string('moderator', 'forumng');
+        if ($lastposteranon == mod_forumng::ASMODERATOR_IDENTIFY) {
+            $lastpostcell = $timestr . $br . $lastuserlink . $br . $moderator;
+        } else if ($lastposteranon == mod_forumng::ASMODERATOR_ANON) {
+            if ($discussion->get_forum()->can_post_anonymously()) {
+                $lastpostcell = $timestr . $br . $lastuserlink .$br . $moderator;
+            } else {
+                $lastpostcell = $timestr .$br . $moderator;
+            }
+        } else {
+            $lastpostcell = $timestr . $br . $lastuserlink;
+        }
+        $result .= $lastpostcell . "</td>";
+        return $result;
+    }
+
+    /**
+     * Displays a short version (suitable for including in discussion list)
+     * of this discussion including a link to view the discussion and to
+     * mark it read (if enabled).
+     * @param mod_forumng_discussion $discussion Discussion
+     * @param int $groupid Group ID for display; may be NO_GROUPS or ALL_GROUPS
+     * @param bool $last True if this is the last item in the list
+     * @return string HTML code to print out for this discussion
+     */
+    public function render_discussion_list_item(mod_forumng_discussion $discussion, $groupid, $last) {
+        global $CFG, $USER;
+        $showgroups = $groupid == mod_forumng::ALL_GROUPS;
+
+        // Work out CSS classes to use for discussion
+        $classes = '';
+        $alts = array();
+        $icons = array();
+        if ($discussion->is_deleted()) {
+            $classes .= ' forumng-deleted';
+            $alts[] = get_string('alt_discussion_deleted', 'forumng');
+            $icons[] = array(); // No icon, text will be output on its own
+        }
+        if (!$discussion->is_within_time_period()) {
+            $classes .= ' forumng-timeout';
+            $icon = 'timeout';
+            $alts[] = get_string('alt_discussion_timeout', 'forumng');
+            $icons[] = array('timeout', 'mod_forumng');
+        }
+        if ($discussion->is_sticky()) {
+            $classes .= ' forumng-sticky';
+            $alts[] = get_string('alt_discussion_sticky', 'forumng');
+            $icons[] = array('sticky', 'mod_forumng');
+        }
+        if ($discussion->is_locked()) {
+            $classes .= ' forumng-locked';
+            $alts[] = get_string('alt_discussion_locked', 'forumng');
+            $icons[] = array('i/unlock', 'moodle');
+        }
+
+        // Classes for Moodle table styles
+        static $rownum = 0;
+        $classes .= ' r' . $rownum;
+        $rownum = 1 - $rownum;
+        if ($last) {
+            $classes .= ' lastrow';
+        }
+
+        $courseid = $discussion->get_forum()->get_course_id();
+
+        // Start row
+        $canmarkread = $discussion->get_forum()->can_mark_read();
+        if ($canmarkread) {
+            $unreadposts = $discussion->get_num_unread_posts();
+            $classes = $unreadposts ? $classes . ' forumng-discussion-unread' : $classes;
+        }
+
+        $result = "<tr id='discrow_{$discussion->get_id()}' class='forumng-discussion-short$classes'>";
+
+        // Get any tags.
+        $tags = $discussion->get_tags();
+        $taglinks = '';
+        $linkparams = $discussion->get_forum()->get_link_params(mod_forumng::PARAM_HTML);
+        if ($tags) {
+            $taglinks = "<div class='forumng_discuss_tags'>Tags: ";
+            // Unlist them.
+            $taglinkitems = array();
+            foreach ($tags as $key => $value) {
+                $taglinkitems[] = "<a href='view.php?$linkparams&tag=$key'>$value</a>";
+            }
+            $taglinks .= implode(', ', $taglinkitems);
+            $taglinks .= "</div>";
+        }
+
+        // Subject, with icons
+        $result .= "<td class='forumng-subject cell c0'>";
+        foreach ($icons as $index => $icon) {
+            $alt = $alts[$index];
+            if ($icon) {
+                $url = $this->pix_url($icon[0], $icon[1]);
+                $result .= "<img src='$url' alt='$alt' title='$alt' /> ";
+            } else {
+                $result .= "<span class='accesshide'>$alt:</span> ";
+            }
+        }
+        $result .= "<a href='discuss.php?" .
+                $discussion->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                format_string($discussion->get_subject(true), true, $courseid) . "</a>$taglinks</td>";
+
+        $num = 1;
+        // Number of unread posts.
+        if ($canmarkread) {
+            $result .= '<td class="cell forumng-unreadcount c1">';
+            if ($unreadposts) {
+                $result .=
+                        '<a href="discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_HTML) .
+                        '#firstunread">' . $unreadposts . '</a>' .
+                        '<form method="post" action="markread.php"><div>&nbsp;&nbsp;&nbsp;'.
+                        $discussion->get_link_params(mod_forumng::PARAM_FORM) .
+                        '<input type="hidden" name="back" value="view" />' .
+                        '<input type="image" title="' .
+                        get_string('markdiscussionread', 'forumng') .
+                        '" src="' . $this->pix_url('clear', 'mod_forumng') . '" ' .
+                        'class="iconsmall" alt="' .
+                        get_string('markdiscussionread', 'forumng') .
+                        '" /></div></form>';
+            } else {
+                $result .= $unreadposts;
+            }
+
+            $result .= '</td>';
+            $num++;
+        }
+
+        // Group.
+        if ($showgroups) {
+            $result .= '<td class="cell c' . $num . '">'
+                    . ($discussion->get_group_name()) . '</td>';
+            $num++;
+        }
+
+        // Update last post user profile link.
+        // Last post.
+        $result .= $this->render_discussion_list_item_lastpost($discussion, $discussion->get_last_post_anon(), $num);
+        $num++;
+
+        // Number of posts.
+        $result .= '<td class="cell c' . $num . ' forumng-postscol">'
+                . ($discussion->get_num_posts()) . '</td>';
+
+        $num++;
+
+        // Author.
+        $result .= $this->render_discussion_list_item_author($discussion, $courseid, $num);
+
+        $result .= '</tr>';
+        return $result;
+    }
+
+    /**
+     * Displays divider within discussion list.
+     * @param mod_forumng $forum
+     * @param int $groupid Group ID for display; may be NO_GROUPS or ALL_GROUPS
+     * @return string HTML code for end of table
+     */
+    public function render_discussion_list_divider($forum, $groupid) {
+        $showgroups = $groupid == mod_forumng::ALL_GROUPS;
+        $count = 4 + ($showgroups ? 1 : 0) + ($forum->can_mark_read() ? 1 : 0);
+        return '<tr class="forumng-divider"><td colspan="' .
+            $count . '"></td></tr>';
+    }
+
+    /**
+     * Closes table tag after calling render_discussion_list_start() and
+     * render_discussion_list_end().
+     * @param mod_forumng $forum
+     * @param int $groupid Group ID for display; may be NO_GROUPS or ALL_GROUPS
+     * @return string HTML code for end of table
+     */
+    public function render_discussion_list_end($forum, $groupid) {
+        return '</tbody></table>';
+    }
+
+    /**
+     * Opens table tag and displays header row ready for calling
+     * render_draft_list_item() a bunch of times.
+     * @return string HTML code for start of table
+     */
+    public function render_draft_list_start() {
+        $result = '<div class="forumng-drafts"><div class="forumng-heading"><h3>' .
+            get_string('drafts', 'forumng') . '</h3>';
+        $result .= $this->help_icon('drafts', 'forumng') . '</div>';
+
+        $th = "<th scope='col' class='header c";
+        $result .= "<table class='generaltable'><tr>" .
+            "{$th}0'>" . get_string('draft', 'forumng') .
+            "</th>{$th}1'>" . get_string('discussion', 'forumng') .
+            "</th>{$th}2 lastcol'>" . get_string('date') . '</th></tr>';
+
+        return $result;
+    }
+
+    protected static function get_post_summary($subject, $message) {
+        $summary = '<strong>' . format_string($subject) . '</strong> ' . strip_tags($message);
+        $summary = str_replace('<strong></strong>', '', $summary);
+        $summary = self::nice_shorten_text($summary);
+        return $summary;
+    }
+
+    public function render_draft_list_item($forum, $draft, $last) {
+        global $CFG;
+
+        // Classes for Moodle table styles
+        static $rownum = 0;
+        $classes = ' r' . $rownum;
+        $rownum = 1 - $rownum;
+        if ($last) {
+            $classes .= ' lastrow';
+        }
+
+        $summary = self::get_post_summary($draft->get_subject(),
+                $draft->get_formatted_message($forum));
+        if (trim($summary) === '') {
+            $summary = get_string('notext', 'forumng');
+        }
+
+        $result = '<tr class="' . $classes . '">';
+        $link = '<a href="editpost.php?draft=' . $draft->get_id() .
+                $forum->get_clone_param(mod_forumng::PARAM_PLAIN) . '"' .
+                ($draft->is_reply()
+                    ? ' class="forumng-draftreply-' . $draft->get_discussion_id() . '-' .
+                        $draft->get_parent_post_id() . '"'
+                        : '') . '>';
+        $result .= '<td class="cell c0">'. $link . $summary . '</a> '.
+            '<a href="deletedraft.php?draft=' . $draft->get_id() .
+            $forum->get_clone_param(mod_forumng::PARAM_PLAIN) .
+            '" title="' . get_string('deletedraft', 'forumng') .
+            '"><img src="' . $this->pix_url('t/delete') . '" alt="' .
+            get_string('deletedraft', 'forumng') . '"/></a></td>';
+
+        if ($draft->is_reply()) {
+            $result .= '<td class="cell c1">' .
+                format_string($draft->get_discussion_subject()) . ' ';
+            $result .= '<span class="forumng-draft-inreplyto">' .
+                get_string('draft_inreplyto', 'forumng',
+                    $forum->display_user_link($draft->get_reply_to_user()));
+            $result .= '</span></td>';
+        } else {
+            $result .= '<td class="cell c1">' .
+                get_string('draft_newdiscussion', 'forumng') . '</td>';
+        }
+
+        $result .= '<td class="cell c2 lastcol">' .
+            mod_forumng_utils::display_date($draft->get_saved()) . '</td>';
+
+        $result .= '</tr>';
+        return $result;
+    }
+
+    /**
+     * Closes table tag after draft list.
+     * @return string HTML code for end of table
+     */
+    public function render_draft_list_end() {
+        return '</table></div>';
+    }
+
+    /**
+     * Displays a skip link to the flagged posts box
+     * @param $flagged array of $flagged posts
+     * @return string HTML for link and wrapper or '' if no flagged posts
+     */
+    public function render_flagged_list_link($flagged, $discuss = false) {
+        $numberflagged = count($flagged);
+        if ($numberflagged == 0) {
+            return '';
+        }
+
+        if ($discuss) {
+            $flaggedtxt = get_string('flaggeddiscussionslink', 'forumng', $numberflagged);
+            $forumngflagged = 'forumng-flaggeddiscussions';
+        } else {
+            $flaggedtxt = get_string('flaggedpostslink', 'forumng', $numberflagged);
+            $forumngflagged = 'forumng-flaggedposts';
+        }
+
+        return '<div><a href="#' . $forumngflagged . '">' .
+            '<img src="' . $this->pix_url('flag.on', 'mod_forumng'). '" alt="' .
+            get_string('flagon', 'forumng') . '"/> ' . $flaggedtxt. '</a></div>';
+    }
+
+    /**
+     * Opens table tag and displays header row ready for calling.
+     * render_flagged_list_item() a bunch of times.
+     * @return string HTML code for start of table
+     */
+    public function render_flagged_list_start($discuss = false) {
+        global $CFG;
+        $result = '';
+
+        if ($discuss) {
+            $flagid = 'forumng-flaggeddiscussions';
+            $title = get_string('flaggeddiscussions', 'forumng');
+            $th0 = get_string('discussion', 'forumng');
+            $th1 = get_string('startedby', 'forumng');
+            $th2 = get_string('lastpost', 'forumng');
+            $helptext = $this->help_icon('flaggeddiscussions', 'forumng');
+        } else {
+            $flagid = 'forumng-flaggedposts';
+            $title = get_string('flaggedposts', 'forumng');
+            $th0 = get_string('post', 'forumng');
+            $th1 = get_string('discussion', 'forumng');
+            $th2 = get_string('date');
+            $helptext = $this->help_icon('flaggedposts', 'forumng');
+        }
+
+        $result = '<div class="forumng-flagged" id="' .$flagid .'">
+            <div class="forumng-heading"><h3>' . $title . '</h3>';
+        $result .= $helptext . '</div>';
+
+        $th = "<th scope='col' class='header c";
+
+        $result .= "<table class='generaltable'><tr>" .
+                    "{$th}0'>" . $th0 .
+                    "</th>{$th}1'>" . $th1 .
+                    "</th>{$th}2 lastcol'>" . $th2 . '</th></tr>';
+
+        return $result;
+    }
+
+    /**
+     * Displays a flagged item.
+     * @param mod_forumng_post $post
+     * @param bool $last
+     * @return string HTML code for table row
+     */
+    public function render_flagged_list_item($post, $last) {
+        global $CFG;
+
+        // Classes for Moodle table styles
+        static $rownum = 0;
+        $classes = ' r' . $rownum;
+        $rownum = 1 - $rownum;
+        if ($last) {
+            $classes .= ' lastrow';
+        }
+
+        $result = '<tr class="' . $classes . '">';
+
+        // Post cell
+        $result .= '<td class="cell c0">';
+
+        // Show flag icon. (Note: I tried to use &nbsp; before this so the
+        // icon never ends up on a line of its own, but it does not work.)
+        $result .= ' <form class="forumng-flag" action="flagpost.php" method="post"><div>' .
+                '<input type="hidden" name="p" value="' . $post->get_id() . '" />'.
+                '<input type="hidden" name="back" value="view" />'.
+                '<input type="hidden" name="flag" value="0" />'.
+                '<input type="image" title="' . get_string('clearflag', 'forumng') .
+                '" src="' . $this->pix_url('flag.on', 'mod_forumng'). '" alt="' .
+                get_string('flagon', 'forumng') .
+                '" /></div></form>&nbsp;';
+
+        // Get post URL
+        $discussion = $post->get_discussion();
+        $link = '<a href="discuss.php?' .
+                $discussion->get_link_params(mod_forumng::PARAM_HTML) .
+                '#p' . $post->get_id() . '">';
+
+        // Get post summary
+        $summary = self::get_post_summary($post->get_subject(), $post->get_formatted_message());
+        $result .= $link . $summary . '</a>';
+
+        $result .= '<small> ' . get_string('postby', 'forumng',
+            $post->get_forum()->display_user_link($post->get_user())) .
+            '</small></td>';
+
+        // Discussion cell.
+        $result .= '<td class="cell c1"><a href="discuss.php?' .
+                $discussion->get_link_params(mod_forumng::PARAM_HTML) . '">' .
+                format_string($discussion->get_subject()) . '</a></td>';
+
+        // Date cell.
+        $result .= '<td class="cell c2 lastcol">' .
+            mod_forumng_utils::display_date($post->get_created()) . '</td></tr>';
+        return $result;
+    }
+
+    /**
+     * Renders flagged discussion list details
+     * @param object $discussion
+     * @param boolean $last
+     * @return string
+     */
+    public function render_flagged_discuss_list_item($discussion, $last) {
+        global $CFG, $USER;
+
+        $result = '';
+        // Work out CSS classes to use for discussion.
+        $classes = '';
+        $alts = array();
+        $icons = array();
+        if ($discussion->is_deleted()) {
+            $classes .= ' forumng-deleted';
+            $alts[] = get_string('alt_discussion_deleted', 'forumng');
+            $icons[] = array(); // No icon, text will be output on its own.
+        }
+
+        // Classes for Moodle table styles.
+        static $rownum = 0;
+        $classes .= ' r' . $rownum;
+        $rownum = 1 - $rownum;
+        if ($last) {
+            $classes .= ' lastrow';
+        }
+
+        $courseid = $discussion->get_forum()->get_course_id();
+
+        // Start row.
+        $result = "<tr id='discrow_{$discussion->get_id()}' class='forumng-discussion-short$classes'>";
+
+        // Subject, with icons.
+        $result .= "<td class='forumng-subject cell c0'>";
+
+        // Show flag icon.
+        $result .= ' <form class="forumng-flag" action="feature/flagdiscussion/flag.php" method="post"><div>' .
+                '<input type="hidden" name="d" value="' . $discussion->get_id() . '" />'.
+                '<input type="hidden" name="back" value="view" />'.
+                '<input type="hidden" name="flag" value="0" />'.
+                '<input type="image" title="' . get_string('clearflag', 'forumng') .
+                '" src="' . $this->pix_url('flag.on', 'mod_forumng'). '" alt="' .
+                get_string('flagon', 'forumng') .
+                '" /></div></form>&nbsp;';
+
+        $result .= "<a href='discuss.php?" .
+                $discussion->get_link_params(mod_forumng::PARAM_HTML) . "'>" .
+                format_string($discussion->get_subject(true), true, $courseid) . "</a>";
+        $result .= '</td>';
+
+        // Author.
+        $lastposteranon = $discussion->get_last_post_anon();
+        $result .= $this->render_discussion_list_item_author($discussion, $courseid, 1);
+        $num = 2;
+
+        // Update last post user profile link.
+        // Last post.
+        $lastpostcell = $this->render_discussion_list_item_lastpost($discussion, $lastposteranon, $num);
+        $result .= $lastpostcell . "</tr>";
+
+        return $result;
+    }
+
+    /**
+     * Closes table tag after flagged post list.
+     * @return string HTML code for end of table
+     */
+    public function render_flagged_list_end() {
+        return '</table></div>';
+    }
+
+    /**
+     * Display intro section for forum.
+     * @param mod_forumng $forum Forum
+     * @return string Intro HTML or '' if none
+     */
+    public function render_introduction($forum) {
+        // Don't output anything if no text, so we don't get styling around
+        // something blank
+        $text = $forum->get_introduction();
+        if (trim($text) === '') {
+            return '';
+        }
+
+        $context = context_module::instance($forum->get_course_module_id(true));
+        $options = array('noclean' => true, 'para' => false, 'filter' => true, 'context' => $context, 'overflowdiv' => true);
+        $intro = file_rewrite_pluginfile_urls($forum->get_introduction(), 'pluginfile.php', $context->id, 'mod_forumng', 'introduction', null);
+        $intro = format_text($intro, $forum->get_introduction_format(), $options, null);
+
+        // Box styling appears to be consistent with some other modules
+        $intro = html_writer::tag('div', $intro, array('class' => 'generalbox box',
+                'id' => 'intro'));
+
+        return $intro;
+    }
+
+    /**
+     * Top of forum page
+     *
+     * @param mod_forumng $forum
+     * @param int $groupid
+     * @return string
+     */
+    public function render_forum_header($forum, $groupid) {
+        return '';
+    }
+
+    /**
+     * Bottom of forum page (before info).
+     *
+     * @param mod_forumng $forum
+     * @param int $groupid
+     * @return string
+     */
+    public function render_forum_footer($forum, $groupid) {
+        $toreturn = '';
+        // Subscribe and view subscribers links.
+        $toreturn .= $forum->display_subscribe_options();
+
+        // Atom/RSS links.
+        $toreturn .= $forum->display_feed_links($groupid);
+
+        return $toreturn;
+    }
+
+    /**
+     * Top of discussion page
+     *
+     * @param mod_forumng_discussion $discussion
+     * @return string
+     */
+    public function render_discussion_header($discussion) {
+        return '';
+    }
+
+    /**
+     * Bottom of discussion page
+     *
+     * @param mod_forumng_discussion $discussion
+     * @return string
+     */
+    public function render_discussion_footer($discussion) {
+        $toreturn = '';
+        // Display the subscription options to this disucssion if available.
+        $toreturn .= $discussion->display_subscribe_options();
+
+        // Atom/RSS links.
+        $toreturn .= $discussion->display_feed_links();
+        return $toreturn;
+    }
+
+    /**
+     * Display post button for forum.
+     * @param mod_forumng $forum Forum
+     * @param int $groupid Group
+     * @return string Post button
+     */
+    public function render_post_button($forum, $groupid) {
+        return '<div id= "forumng-buttons"><form action="editpost.php" method="get" ' .
+                'class="forumng-post-button"><div>' .
+                $forum->get_link_params(mod_forumng::PARAM_FORM) .
+                ($groupid != mod_forumng::NO_GROUPS
+                    ? '<input type="hidden" name="group" value="' . (int)$groupid . '" />'
+                    : '') .
+                '<input type="submit" value="' .
+                get_string('addanewdiscussion', 'forumng') . '" /></div></form>' .
+                $this->render_paste_button($forum, $groupid) . '</div>';
+    }
+
+    /**
+     * Display paste button for forum.
+     * @param mod_forumng $forum Forum
+     * @param int $groupid Group
+     * @return string Paste discussion button
+     */
+    public function render_paste_button($forum, $groupid) {
+        global $SESSION;
+        if (isset($SESSION->forumng_copyfrom)) {
+            $pastlang = (is_array($SESSION->forumng_copyfrom) &&
+                    count($SESSION->forumng_copyfrom) > 1) ?
+                    get_string('pastediscussions', 'forumng') :
+                    get_string('pastediscussion', 'forumng');
+            $cancel = get_string('cancel');
+            $paste = '<input type="submit" name="paste" value="' . $pastlang . '" />';
+
+            if ((!empty($SESSION->forumng_copyfromforum) &&
+                    $SESSION->forumng_copyfromforum == $forum->get_id()) &&
+                    (isset($SESSION->forumng_copyfromgroup) &&
+                    $SESSION->forumng_copyfromgroup == $groupid)) {
+                // Don't show paste button if pasting to copy location, change cancel text.
+                $paste = '';
+                $cancel = get_string('pastediscussion_cancel', 'forumng');
+            }
+            $cmid = required_param('id', PARAM_INT);
+            return '<form action="feature/copy/paste.php" method="get" '.
+                    'class="forumng-paste-buttons">' .
+                    '<div>' . $paste .
+                    '<input type="submit" name="cancel" value="' . $cancel . '" />' .
+                    '<input type="hidden" name="cmid" value="' . $cmid . '" />' .
+                    $forum->get_clone_param(mod_forumng::PARAM_FORM) .
+                    ($groupid != mod_forumng::NO_GROUPS
+                    ? '<input type="hidden" name="group" value="' . (int)$groupid . '" />'
+                    : '') . '</div></form>';
+        } else {
+            return '';
+        }
+    }
+
+    /**
+     * Display 'Switch to simple/standard view' link, except in cases where
+     * browser is not supported for 'standard' view anyhow.
+     * @return string HTML for the switch link.
+     */
+    public function render_switch_link() {
+        global $PAGE;
+        if ($PAGE->devicetypeinuse == 'legacy') {
+            return '';
+        }
+        $simple = get_user_preferences('forumng_simplemode', '');
+        if ($simple) {
+            return '<div class="forumng-switchlinkblock">' .
+                    get_string('switchto_standard_text', 'forumng') .
+                    ' <a href="viewmode.php?simple=0">' .
+                    get_string('switchto_standard_link', 'forumng') . '</a></div>';
+        } else {
+            return '<div class="accesshide forumng-switchlinkblock">' .
+                    get_string('switchto_simple_text', 'forumng') .
+                    ' <a id="forumng-switchlinkid" class="forumng-switchlink" href="viewmode.php' .
+                    '?simple=1">' . get_string('switchto_simple_link', 'forumng') . '</a></div>';
+        }
+    }
+
+    /**
+     * Display subscribe options.
+     * @param mod_forumng $forum Forum
+     * @param string $text Textual note
+     * @param int $subscribed
+     * @param bool $button True if subscribe/unsubscribe button should be shown
+     * @param bool $viewlink True if 'view subscribers' link should be shown
+     * @return string HTML code for this area
+     */
+    public function render_subscribe_options($forum, $text, $subscribed,
+        $button, $viewlink) {
+        $out = '<div class="forumng-subscribe-options forumng-subscribe-options' . $subscribed .
+            '"><div class="forumng-subscribe-details">' .
+            '<h3>' . get_string('subscription', 'forumng') . '</h3>' .
+            '<p>' . $text . '</p>';
+        $out .= '</div>';
+        $cm = $forum->get_course_module();
+        if ($button) {
+            $outsubmit = '';
+            $currentgroupid = mod_forumng::get_activity_group($cm, true);
+            if ($currentgroupid == mod_forumng::NO_GROUPS) {
+                $currentgroupid = 0;
+            }
+            if ($subscribed == mod_forumng::FULLY_SUBSCRIBED ||
+                    $subscribed == mod_forumng::FULLY_SUBSCRIBED_GROUPMODE) {
+                $outsubmit .= '<input type="submit" name="submitunsubscribe" value="' .
+                        get_string('unsubscribeshort', 'forumng') . '" />';
+            } else if ($subscribed == mod_forumng::PARTIALLY_SUBSCRIBED) {
+                // Print both subscribe button and unsubscribe button.
+                $outsubmit .= '<input type="submit" name="submitsubscribe" value="' .
+                    get_string('subscribelong', 'forumng') . '" />' .
+                    '<input type="submit" name="submitunsubscribe" value="' .
+                    get_string('unsubscribelong', 'forumng') . '" />';
+            } else if ($subscribed == mod_forumng::NOT_SUBSCRIBED) {
+                // Default unsubscribed, print subscribe button.
+                $outsubmit .= '<input type="submit" name="submitsubscribe" value="' .
+                        get_string('subscribeshort', 'forumng') . '" />';
+            } else if ($subscribed == mod_forumng::THIS_GROUP_PARTIALLY_SUBSCRIBED) {
+                $outsubmit .= '<input type="submit" name="submitsubscribe_thisgroup" value="' .
+                    get_string('subscribegroup', 'forumng') . '" />' .
+                    '<input type="submit" name="submitunsubscribe_thisgroup" value="' .
+                    get_string('unsubscribegroup_partial', 'forumng') . '" />'.
+                    '<input type="hidden" name="g" value="' . $currentgroupid . '" />';
+            } else if ($subscribed == mod_forumng::THIS_GROUP_SUBSCRIBED) {
+                $outsubmit .= '<input type="submit" name="submitunsubscribe_thisgroup" value="' .
+                    get_string('unsubscribegroup', 'forumng') . '" />'.
+                    '<input type="hidden" name="g" value="' . $currentgroupid . '" />';
+            } else if ($subscribed == mod_forumng::THIS_GROUP_NOT_SUBSCRIBED) {
+                $outsubmit .= '<input type="submit" name="submitsubscribe_thisgroup" value="' .
+                    get_string('subscribegroup', 'forumng') . '" />'.
+                    '<input type="hidden" name="g" value="' . $currentgroupid . '" />';
+            }
+
+            $out .= '<form action="subscribe.php" method="post"><div>' .
+                $forum->get_link_params(mod_forumng::PARAM_FORM) .
+                '<input type="hidden" name="back" value="view" />' .
+                $outsubmit . '</div></form>';
+        }
+        if ($subscribed != mod_forumng::NOT_SUBSCRIBED) {
+            $out .= $this->render_subscribe_info($forum->get_context());
+        }
+        if ($viewlink) {
+            $out .= ' <div class="forumng-subscribe-admin">' .
+                '<a href="subscribers.php?' .
+                $forum->get_link_params(mod_forumng::PARAM_HTML) . '">' .
+                get_string('viewsubscribers', 'forumng') . '</a></div>';
+        }
+        $out .= '</div>';
+        return $out;
+    }
+    /**
+     * Display subscribe option for discussions.
+     * @param mod_forumng_discussion $discussion Forum
+     * @param string $text Textual note
+     * @param bool $subscribe True if user can subscribe, False if user can unsubscribe
+     * @return string HTML code for this area
+     */
+    public function render_discussion_subscribe_option($discussion, $subscribe) {
+        global $USER;
+        $info = '';
+        if ($subscribe) {
+            $status = get_string('subscribestate_discussionunsubscribed', 'forumng');
+            $submit = 'submitsubscribe';
+            $button = get_string('subscribediscussion', 'forumng');
+        } else {
+            $status = get_string('subscribestate_discussionsubscribed', 'forumng',
+                    '<strong>' . $USER->email . '</strong>' );
+            $submit = 'submitunsubscribe';
+            $button = get_string('unsubscribediscussion', 'forumng');
+            $info = $this->render_subscribe_info($discussion->get_forum()->get_context());
+        }
+        return '<div class="clearfix"></div><div class="forumng-subscribe-options" id="forumng-subscribe-options">' .
+            '<div class="forumng-subscribe-details">' .
+            '<h3>' . get_string('subscription', 'forumng') . '</h3>' .
+            '<p>' . $status .
+            '</p></div>' . '&nbsp;<form action="subscribe.php" method="post"><div>' .
+            $discussion->get_link_params(mod_forumng::PARAM_FORM) .
+            '<input type="hidden" name="back" value="discuss" />' .
+            '<input type="submit" name="' . $submit . '" value="' .
+            $button . '" /></div></form>' . $info . '</div>';
+    }
+
+    /**
+     * Show current user forum subscription info
+     * Show link to change profile email preferences (if allowed to change profile)
+     * @param $context context_module
+     * @return string output html
+     */
+    public function render_subscribe_info($context) {
+        global $USER;
+        $output = '';
+        $link = '';
+        $course = $context->get_course_context(true)->instanceid;
+        $userauthplugin = false;
+        if (!empty($USER->auth)) {
+            $userauthplugin = get_auth_plugin($USER->auth);
+        }
+
+        // Add the profile edit link (partial copy from navigationlib).
+        if (isloggedin() && !isguestuser($USER) && !is_mnet_remote_user($USER)) {
+            if (has_capability('moodle/user:editownprofile', $context)) {
+                if ($userauthplugin && $userauthplugin->can_edit_profile()) {
+                    $url = $this->subscribe_preferences_url($context->instanceid);
+                    $link = ' (' . html_writer::link($url, get_string('subscribestate_info_link', 'forumng')) . ')';
+                }
+            }
+        }
+        $output = get_string('subscribestate_info', 'forumng', $link);
+
+        $info = ' ';
+        switch ($USER->maildigest) {
+            case 0:
+                $info .= get_string('emaildigestoff');
+                break;
+            case 1:
+                $info .= get_string('emaildigestcomplete');
+                break;
+            case 2:
+                $info .= get_string('emaildigestsubjects');
+                break;
+        }
+        $info .= ', ';
+        switch ($USER->mailformat) {
+            case 0:
+                $info .= get_string('textformat');
+                break;
+            case 1:
+                $info .= get_string('htmlformat');
+                break;
+        }
+        $infodiv = html_writer::span($info, 'forumng_subinfo_mail');
+
+        return html_writer::div($output . $infodiv, 'forumng_subinfo');
+    }
+
+    /**
+     * Returns url to forum mail subscription preferences page.
+     * @param int $forumngid cmid
+     * @return moodle_url
+     */
+    public function subscribe_preferences_url($forumngid) {
+        global $USER, $COURSE;
+        return new moodle_url('/mod/forumng/preferences.php',
+                array('id' => $USER->id, 'course' => $COURSE->id, 'fid' => $forumngid));
+    }
+
+    /**
+     * Display a post. This method is used for:
+     * - The normal HTML display of a post
+     * - HTML email of a post
+     * - Text-only email of a post
+     * These are all combined in one method since ordinarily they change at
+     * the same time (i.e. if adding/hiding information it is usually added to
+     * or hidden from all views).
+     *
+     * $options is an associative array from a mod_forumng_post::OPTION_xx constant.
+     * All available options are always set - if they were not set by
+     * the user, they will have been set to false before this call happens,
+     * so there is no need to use empty() or isset().
+     *
+     * Options are as follows. These are available in email mode:
+     *
+     * OPTION_TIME_ZONE (int) - Moodle time zone
+     * OPTION_VIEW_FULL_NAMES (bool) - If user is allowed to see full names
+     * OPTION_EMAIL (bool) - True if this is an email (false = standard view)
+     * OPTION_DIGEST (bool) - True if this is part of an email digest
+     * OPTION_COMMAND_REPLY (bool) - True if 'Reply' link should be displayed
+     *   (available in email too)
+     *
+     * These options only apply in non-email usage:
+     *
+     * OPTION_SUMMARY (bool) - True if the entire post should not be displayed,
+     *   only a short summary
+     * OPTION_NO_COMMANDS (bool) - True if this post is being printed on its own
+     * OPTION_COMMAND_EDIT (bool) - Display 'Edit' command
+     * OPTION_COMMAND_DELETE (bool) - Display 'Edit' command
+     * OPTION_COMMAND_SPLIT (bool) - Display 'Split' command
+     * OPTION_RATINGS_VIEW (bool) - True to display current ratings
+     * OPTION_RATINGS_EDIT (bool) - True to display ratings edit combo
+     * OPTION_LEAVE_DIV_OPEN (bool) - True to not close post div (means that
+     *   child posts can be added within).
+     * OPTION_EXPANDED (bool) - True to show full post, otherwise abbreviate
+     * OPTION_DISCUSSION_SUBJECT (bool) - If true, and only IF post is a
+     *   discussion root, includes subject (HTML, shortened as it would be for
+     *   header display) as a hidden field.
+     *
+     * @param mod_forumng_post $post Post object
+     * @param bool $html True if using HTML, false to output in plain text
+     * @param array $options Associative array of name=>option, as above
+     * @return string HTML or text of post
+     */
+    public function render_post($post, $html, $options) {
+        global $CFG, $USER, $THEME, $OUTPUT;
+        $discussion = $post->get_discussion();
+
+        $expanded = $options[mod_forumng_post::OPTION_EXPANDED];
+        $export = $options[mod_forumng_post::OPTION_EXPORT];
+        $email = $options[mod_forumng_post::OPTION_EMAIL];
+
+        // When posts are deleted we hide a lot of info - except when the person
+        // viewing it has the ability to view deleted posts.
+        $deletedhide = $post->get_deleted()
+            && !$options[mod_forumng_post::OPTION_VIEW_DELETED_INFO];
+        // Hide deleted messages if they have no replies
+        if ($deletedhide && ($export || !$email) && !$post->has_children()) {
+            // note: !email check is to deal with posts that are deleted
+            // between when the mail list finds them, and when it sends out
+            // mail. It would be confusing to send out a blank email so let's
+            // not do that. Also, ->has_children() is not safe to call during
+            // email processing because it doesn't load the whole discussion.
+            return '';
+        }
+
+        // Save some bandwidth by not sending link full paths except in emails
+        if ($options[mod_forumng_post::OPTION_FULL_ADDRESSES]) {
+            $linkprefix = $CFG->wwwroot . '/mod/forumng/';
+        } else {
+            $linkprefix = '';
+        }
+
+        $postnumber = (($options[mod_forumng_post::OPTION_NO_COMMANDS] || $email) &&
+            !$options[mod_forumng_post::OPTION_VISIBLE_POST_NUMBERS])
+            ? '' : $post->get_number();
+
+        $lf = "\n";
+
+        // Initialise result
+        $out = '';
+        if ($html) {
+            if ($export) {
+                $out .= '<hr />';
+            }
+            // Basic intro
+            $classes = $expanded ? ' forumng-full' : ' forumng-short';
+            $classes .= $post->is_important() ? ' forumng-important' : '';
+            $classes .= (!$email && !$options[mod_forumng_post::OPTION_UNREAD_NOT_HIGHLIGHTED] &&
+                $post->is_unread()) ? ' forumng-unread' : ' forumng-read';
+            $classes .= $post->get_deleted() ? ' forumng-deleted' : '';
+            $classes .= ' forumng-p' .$postnumber;
+            if ($options[mod_forumng_post::OPTION_INDICATE_MODERATOR] == true) {
+                $classes .= ' forumng-imoderator';
+            }
+            $out .= $lf . '<div class="forumng-post' . $classes . '">' .
+                    '<div class="post-deco"><div class="post-deco-bar"></div></div><a id="p' .
+                    $post->get_id() . '"></a>';
+            if ($options[mod_forumng_post::OPTION_FIRST_UNREAD]) {
+                $out .= '<a id="firstunread"></a>';
+            }
+
+            // Theme hooks
+            if (!empty($THEME->forumng_post_hooks)) {
+                for ($i=1; $i<=$THEME->forumng_post_hooks; $i++) {
+                    $out .= '<div class="forumng-'. $i .'"></div>';
+                }
+            }
+        }
+
+        if ($html || $options[mod_forumng_post::OPTION_VISIBLE_POST_NUMBERS]) {
+            // Accessible text giving post a number so we can make links unique
+            // etc.
+            if ($postnumber) {
+                $data = new stdClass;
+                $data->num = $postnumber;
+                if ($post->get_parent()) {
+                    if ($html) {
+                        $data->parent = '<a class="forumng-parentlink" href="#p' .
+                            $post->get_parent()->get_id() .
+                            '">' . $post->get_parent()->get_number() . '</a>';
+                    } else {
+                        $data->parent = $post->get_parent()->get_number();
+                    }
+                    $data->info = '';
+                    if ($post->is_unread()) {
+                        $data->info = get_string('postinfo_unread', 'forumng');
+                    }
+                    if (!$expanded) {
+                        $data->info .= ' ' . get_string('postinfo_short', 'forumng');
+                    }
+                    if ($post->get_deleted()) {
+                        $data->info .= ' ' . get_string('postinfo_deleted', 'forumng');
+                    }
+                    $data->info = trim($data->info);
+                    if ($data->info) {
+                        $data->info = ' (' . $data->info . ')';
+                    }
+                    $info = get_string('postnumreply', 'forumng', $data);
+                } else {
+                    $info = get_string('postnum', 'forumng', $data);
+                }
+                if ($options[mod_forumng_post::OPTION_VISIBLE_POST_NUMBERS]) {
+                    if (!$html) {
+                        $out .= "## " . $info . "\n";
+                    }
+                }
+            }
+        }
+
+        // Discussion subject (root only)
+        if ($options[mod_forumng_post::OPTION_DISCUSSION_SUBJECT] &&
+            $post->is_root_post()) {
+            $out .= '<input type="hidden" name="discussion_subject" value="' .
+                shorten_text(htmlspecialchars($post->get_subject())) .
+                '" />';
+        }
+
+        // Pictures (HTML version only)
+        if ($html) {
+            $out .= $lf . html_writer::start_tag('div', array('class' => 'forumng-pic-info'));
+        }
+        if ($html && !$export && $options[mod_forumng_post::OPTION_USER_IMAGE]) {
+            $out .= $lf . html_writer::start_tag('div', array('class' => 'forumng-pic'));
+
+            // User picture.
+            if (!$options[mod_forumng_post::OPTION_IS_ANON]) {
+                    $out .= $deletedhide ? '' : $post->display_user_picture();
+            } else {
+                if ($options[mod_forumng_post::OPTION_VIEW_ANON_INFO]) {
+                    $out .= $deletedhide ? '' : $post->display_user_picture();
+                }
+            }
+            // Group pictures if any - only for expanded version
+            if ($expanded && !$options[mod_forumng_post::OPTION_PARTICIPATION]) {
+                $grouppics = $post->display_group_pictures();
+                if ($grouppics) {
+                    $out .= '<div class="forumng-grouppicss">' . $grouppics .
+                      '</div>';
+                }
+            }
+
+            $out .=  html_writer::end_tag('div');
+        }
+
+        // Link used to expand post
+        $expandlink = '';
+        if (!$expanded && !$deletedhide) {
+            $expandlink = $this->render_expand_link($linkprefix, $discussion, $post);
+        }
+
+        // Byline
+        $by = new stdClass;
+        $by->name = $deletedhide ? '' : fullname($post->get_user(),
+            $options[mod_forumng_post::OPTION_VIEW_FULL_NAMES]);
+        $by->date = $deletedhide ? '' : userdate($post->get_created(),
+                get_string('strftimedatetime', 'langconfig'),
+                $options[mod_forumng_post::OPTION_TIME_ZONE]);
+
+        if ($html) {
+            $out .= $lf . '<div class="forumng-info"><h2 class="forumng-author">';
+            $out .= $post->is_important() ? '<img src="' .
+            $this->pix_url('exclamation_mark', 'mod_forumng') . '" alt="' .
+            get_string('important', 'forumng') . '" ' .
+            'title = "' . get_string('important', 'forumng') . '"/>' : '';
+            if ($export) {
+                if (!$options[mod_forumng_post::OPTION_IS_ANON]) {
+                    $out .=  $by->name . ' ';
+                }
+            } else {
+                if (!$options[mod_forumng_post::OPTION_IS_ANON]) {
+                    $out .= '<a href="' . $CFG->wwwroot . '/user/view.php?id=' .
+                        $post->get_user()->id .
+                        ($post->get_forum()->is_shared() ? '' : '&amp;course=' .
+                        $post->get_forum()->get_course_id()) .
+                        '">' . $by->name . '</a>';
+                }
+            }
+            if ($options[mod_forumng_post::OPTION_IS_ANON] ||
+                    $options[mod_forumng_post::OPTION_INDICATE_MODERATOR]) {
+                $moderator = get_string('moderator', 'forumng');
+                $out .= html_writer::tag('div', get_string('moderator', 'forumng'),
+                        array('class' => 'forumng-moderator-flag'));
+            }
+            if ($postnumber) {
+                if ($options[mod_forumng_post::OPTION_VISIBLE_POST_NUMBERS]) {
+                    $out .= html_writer::tag('small', ' ' . $info,
+                            array('class' => 'accesshide', 'style' => 'position:static'));
+                } else {
+                    $out .= '<span class="accesshide"> ' . $info . ' </span>';
+                }
+            }
+            $out .= $deletedhide ? '' : '</h2> <span class="forumng-separator">&#x2022;</span> ';
+            $out .= '<span class="forumng-date">' . $by->date . '</span>';
+            // Should not show editing user info, if poster is anonymous and
+            // current user can�t view anonymous info .
+            if ((($options[mod_forumng_post::OPTION_IS_ANON] && $discussion->get_forum()->can_post_anonymously()) ||
+                    $options[mod_forumng_post::OPTION_INDICATE_MODERATOR])  ||
+                    (!$options[mod_forumng_post::OPTION_IS_ANON] && !$email)) {
+                if ($edituser = $post->get_edit_user()) {
+                    $out .= ' <span class="forumng-separator">&#x2022;</span> ' .
+                            '<span class="forumng-edit">';
+                    $edit = new stdClass;
+                    $edit->date = userdate($post->get_modified(),
+                            get_string('strftimedatetime', 'langconfig'),
+                            $options[mod_forumng_post::OPTION_TIME_ZONE]);
+                    $edit->name = fullname($edituser,
+                            $options[mod_forumng_post::OPTION_VIEW_FULL_NAMES]);
+                    if ($edituser->id == $post->get_user()->id) {
+                        $out .= get_string('editbyself', 'forumng', $edit->date);
+                    } else {
+                        $out .= get_string('editbyother', 'forumng', $edit);
+                    }
+                    if ($options[mod_forumng_post::OPTION_COMMAND_HISTORY]) {
+                        $out .= ' (<a href="history.php?' .
+                                $post->get_link_params(mod_forumng::PARAM_HTML) . '">' .
+                                get_string('history', 'forumng') . '</a>)';
+                    }
+                    $out .= '</span>';
+                }
+            }
+            if ($options[mod_forumng_post::OPTION_SELECTABLE]) {
+                $out .= '<span class="forumng-separator"> &#x2022; </span>' .
+                        '<input type="checkbox" name="selectp' .
+                        $post->get_id() . '" id="id_selectp' . $post->get_id() .
+                        '" /><label class="accesshide" for="id_selectp' .
+                        $post->get_id() . '">' .
+                        get_string('selectlabel', 'forumng', $postnumber) . '</label>';
+            }
+            // End: forumng-info.
+            $out .= html_writer::end_tag('div');
+            // End: forumng-pic-info.
+            $out .=  html_writer::end_tag('div');
+        } else {
+            require_once(dirname(__FILE__) . '/mod_forumng_cron.php');
+            $out .= $by->name . ' - ' . $by->date . $lf;
+
+            $out .= mod_forumng_cron::EMAIL_DIVIDER;
+        }
+
+        // Add a outer div to main contents
+        if ($html) {
+            $out .= '<div class="forumng-post-outerbox">';
+        }
+        if ($html && $post->get_deleted()) {
+            $out .= '<p class="forumng-deleted-info"><strong>' .
+                get_string('deletedpost', 'forumng') . '</strong> ';
+            if ($deletedhide) {
+                $out .= get_string($post->get_delete_user()->id == $post->get_user()->id
+                    ? 'deletedbyauthor' : 'deletedbymoderator', 'forumng',
+                    userdate($post->get_deleted()));
+            } else {
+                $a = new stdClass;
+                $a->date = userdate($post->get_deleted());
+                $a->user = '<a href="' . $CFG->wwwroot . '/user/view.php?id=' .
+                    $post->get_delete_user()->id . '&amp;course=' .
+                    $post->get_forum()->get_course_id() . '">'  .
+                    fullname($post->get_delete_user(),
+                        $options[mod_forumng_post::OPTION_VIEW_FULL_NAMES]) . '</a>';
+                $out .= get_string('deletedbyuser', 'forumng', $a);
+            }
+            $out .= '</p>';
+        }
+
+        if ($options[mod_forumng_post::OPTION_IS_ANON] &&
+                $options[mod_forumng_post::OPTION_VIEW_ANON_INFO] && !$email) {
+            $a = html_writer::link(new moodle_url('/user/view.php', array(
+                'id' => $post->get_user()->id,
+                'course' => $post->get_forum()->get_course_id())),
+                fullname($post->get_user(), $options[mod_forumng_post::OPTION_VIEW_FULL_NAMES]));
+            $out .= get_string('createdbymoderator', 'forumng', $a);
+        }
+
+        // Get subject. This may make a db query when showing a single post
+        // (which includes parent subject).
+        if ($options[mod_forumng_post::OPTION_EMAIL]
+            || $options[mod_forumng_post::OPTION_NO_COMMANDS]) {
+            $subject = $post->get_effective_subject(true);
+        } else {
+            $subject = $post->get_subject();
+        }
+
+        // Otherwise, subject is only displayed if it has changed
+        if ($subject !== null && $expanded && !$deletedhide) {
+            if ($html) {
+                $out .= $lf . '<h3 class="forumng-subject">';
+                if ($options[mod_forumng_post::OPTION_DIGEST]) {
+                    // Digest contains link to original post
+                    $out .=
+                        '<a href="' . $linkprefix .
+                        'discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_HTML) .
+                        '#p' . $post->get_id() . '">' .
+                        format_string($subject) . '</a>';
+                } else {
+                    $out .= format_string($subject);
+                }
+                $out .= '</h3>';
+            } else {
+                $out .= format_string($subject, true);
+                if ($options[mod_forumng_post::OPTION_DIGEST]) {
+                    // Link to original post
+                    $out .= " <{$linkprefix}discuss.php?" .
+                            $discussion->get_link_params(mod_forumng::PARAM_HTML) .
+                            $discussion->get_id() . '#p' . $post->get_id() . '>';
+                }
+                $out .= $lf;
+            }
+        }
+
+        // Get content of actual message in HTML
+        if ($html) {
+            $message = $post->get_formatted_message($options);
+
+            if (!$expanded && !$deletedhide) {
+                // When not expanded and no subject, we include a summary of the
+                // message
+                $stripped = strip_tags(
+                    preg_replace('~<script.*?</script>~s', '', $message));
+                $messagetosummarise = $subject !== null
+                    ? '<h3>' . $subject . '</h3>&nbsp;' . $stripped
+                    : $stripped;
+                $summary = self::nice_shorten_text($messagetosummarise, 50);
+                $out .= $lf . '<div class="forumng-summary"><div class="forumng-text">' .
+                     $summary . '</div> ' . $expandlink . '</div>';
+            }
+        }
+
+        // Start of post main section
+        if ($expanded && !$deletedhide) {
+            if ($html) {
+                $out .= '<div class="forumng-postmain">';
+            }
+
+            // Attachments
+            $attachments = $post->get_attachment_names();
+            if (count($attachments)) {
+
+                foreach ($attachments as $attachment) {
+                    if (!$html) {
+                        // Right-align the entry to 70 characters
+                        $padding = 70 - strlen($attachment);
+                        if ($padding > 0) {
+                            $out .= str_repeat(' ', $padding);
+                        }
+
+                        // Add filename
+                        $out .= $attachment . $lf;
+                    }
+                }
+
+                if ($html) {
+                    $out .= $this->render_attachments($attachments, $post);
+                } else {
+                    $out .= $lf; // Extra line break after attachments
+                }
+            }
+
+            // Display actual content
+            if ($html) {
+                if ($options[mod_forumng_post::OPTION_PRINTABLE_VERSION]) {
+                    $message = preg_replace('~<a[^>]*\shref\s*=\s*[\'"](http:.*?)[\'"][^>]*>' .
+                    '(?!(http:|www\.)).*?</a>~', "$0 [$1]", $message);
+                }
+                $out .= $lf . '<div class="forumng-message">' . $this->render_message($message, $post) . '</div>';
+            } else {
+                $out .= $post->get_email_message();
+                $out .= "\n\n";
+            }
+
+            if ($html) {
+                $out .= $lf . '<div class="clear forumng-postfooter">';
+            }
+
+            // Ratings.
+            $ratings = '';
+            $ratingclasses = '';
+            if ($options[mod_forumng_post::OPTION_RATINGS_VIEW]) {
+                $ratingclasses .= ' forumng-canview';
+                if ($post->get_num_ratings() >=
+                    $post->get_forum()->get_rating_threshold()) {
+                    if ($html) {
+                        $ratings .= '<div class="forumng-rating">';
+                        $a = new stdClass;
+                        $a->avg = '<strong id="rating_for_' . $post->get_id() . '">' .
+                            $post->get_average_rating(true) . '</strong>';
+                        $a->num = '<span class="forumng-count">' .
+                            $post->get_num_ratings() . '</span>';
+                        $ratings .= get_string('averagerating', 'forumng', $a);
+                        $ratings .= '</div>';
+                    } else {
+                        $ratings .= strip_tags($post->get_average_rating(true));
+                    }
+                }
+            }
+            if ($options[mod_forumng_post::OPTION_RATINGS_EDIT] && $html) {
+                $ratingclasses .= ' forumng-canedit';
+                $ratings .= '<div class="forumng-editrating">' .
+                    get_string('yourrating', 'forumng') . ' ';
+                $ratings .= html_writer::select(
+                    $post->get_forum()->get_rating_options(),
+                    'rating' . $post->get_id(),
+                    $post->get_own_rating(),
+                    array(mod_forumng_post::NO_RATING => '-'));
+                $ratings .= '</div>';
+            }
+
+            if ($ratings && $post->get_forum()->get_enableratings() ==
+                    mod_forumng::FORUMNG_RATING_OBSOLETE) {
+                // Old Forum ratings.
+                $out .= '<div class="forumng-ratings' . $ratingclasses .
+                        '">' . $ratings . '</div>';
+            }
+
+            // Commands at bottom of mail
+            $mobileclass = '';
+            if ($html) {
+                $commandsarray = array();
+                $expires = $post->can_ignore_edit_time_limit() ? '' :
+                    '&amp;expires=' . ($post->get_edit_time_limit()-time());
+                $expandparam = !empty($options[mod_forumng_post::OPTION_CHILDREN_EXPANDED]) ?
+                        '&amp;expand=1' : '';
+
+                // Jump box
+                if ($options[mod_forumng_post::OPTION_JUMP_PREVIOUS] ||
+                        $options[mod_forumng_post::OPTION_JUMP_NEXT] ||
+                        $options[mod_forumng_post::OPTION_JUMP_PARENT]) {
+
+                    $nextid = $options[mod_forumng_post::OPTION_JUMP_NEXT];
+                    $pid = $options[mod_forumng_post::OPTION_JUMP_PREVIOUS];
+                    $parentid = $options[mod_forumng_post::OPTION_JUMP_PARENT];
+                    if ($jumptotext = $this->render_commands_jumpto($nextid, $pid, $parentid)) {
+                        $commandsarray['forumng-jumpto'] = $jumptotext;
+                    }
+                }
+
+                // Mark post read.
+                if ($CFG->forumng_trackreadposts && !isguestuser() && $post->is_unread()
+                    && !mod_forumng::mark_read_automatically()) {
+                    $params = array('p' => $post->get_id());
+                    if ($post->get_forum()->is_shared()) {
+                        $params['clone'] = $post->get_forum()->get_course_module_id();
+                    }
+                    $commandsarray['forumng-markread'] = html_writer::link(
+                            new moodle_url('/mod/forumng/markread.php', $params),
+                            get_string('markpostread', 'forumng'));
+                }
+
+                // Flag link.
+                if ($options[mod_forumng_post::OPTION_FLAG_CONTROL]) {
+                    $flagurl = new moodle_url('flagpost.php?',
+                            array('p' => $post->get_id(),
+                                    'timeread' => $options[mod_forumng_post::OPTION_READ_TIME],
+                                    'flag' => ($post->is_flagged() ? 0 : 1)));
+                    $icon = "flag." . ($post->is_flagged() ? 'on' : 'off');
+                    $iconalt = get_string($post->is_flagged() ? 'clearflag' : 'setflag', 'forumng');
+                    $bnstr = get_string($post->is_flagged() ? 'clearflag' : 'flagpost', 'forumng');
+                    $iconhtml = $OUTPUT->pix_icon($icon, '', 'forumng');
+                    $iconhtml .= html_writer::span($bnstr, 'flagtext');
+                    $link = html_writer::link($flagurl, $iconhtml,
+                        array('title' => $iconalt));
+                    $commandsarray['forumng-flagpost'] = html_writer::div($link, 'forumng-flagpost');
+                }
+
+                // Direct link.
+                if ($options[mod_forumng_post::OPTION_COMMAND_DIRECTLINK]) {
+                    $commandsarray['forumng-permalink'] = '<a href="discuss.php?' .
+                            $discussion->get_link_params(mod_forumng::PARAM_HTML) . '#p' .
+                            $post->get_id() . '" title="' .
+                            get_string('directlinktitle', 'forumng').'">' .
+                            get_string('directlink', 'forumng', $postnumber) . '</a>';
+                }
+
+                // Alert link.
+                $forum = $discussion->get_forum();
+                if ($options[mod_forumng_post::OPTION_COMMAND_REPORT] && !($options[mod_forumng_post::OPTION_IS_ANON]
+                        || $options[mod_forumng_post::OPTION_INDICATE_MODERATOR])) {
+                    $reportabuselink = '';
+                    if ($forum->oualerts_enabled()) {
+                        $itmurl = $CFG->wwwroot . '/mod/forumng/discuss.php';
+                        $itmurl .= '?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN);
+                        $itemurl = $itmurl . '#p' . $post->get_id();
+                        $context = $post->get_forum()->get_context(false);
+                        $reportabuselink = oualerts_generate_alert_form_url(
+                            'forumng', $context->id,
+                            'post', $post->get_id(), $itemurl, $itemurl,
+                            $USER->id, false, true);
+                    } else {
+                        $reportabuselink = $linkprefix . 'alert.php?' .
+                            $post->get_link_params(mod_forumng::PARAM_HTML) . $expandparam;
+                    }
+
+                    $commandsarray['forumng-alert'] = '<a href="' . $reportabuselink.
+                            '" title="'.get_string('alert_linktitle', 'forumng').'">' .
+                            get_string('alert_link', 'forumng', $postnumber) .
+                            '</a>';
+                }
+
+                // Split link
+                if ($options[mod_forumng_post::OPTION_COMMAND_SPLIT]) {
+                    $commandsarray['forumng-split'] = '<a href="' . $linkprefix .
+                            'splitpost.php?' .
+                            $post->get_link_params(mod_forumng::PARAM_HTML) .
+                            $expandparam . '">' .
+                            get_string('split', 'forumng', $postnumber) .
+                            '</a>';
+                }
+
+                // Delete link
+                if ($options[mod_forumng_post::OPTION_COMMAND_DELETE]) {
+                    $commandsarray ['forumng-delete'] = '<a' . $mobileclass . ' href="' . $linkprefix .
+                            'deletepost.php?' .
+                            $post->get_link_params(mod_forumng::PARAM_HTML, true) .
+                            $expandparam . $expires . '">' .
+                            get_string('delete', 'forumng', $postnumber) .
+                            '</a>';
+                }
+
+                // Undelete link
+                if ($options[mod_forumng_post::OPTION_COMMAND_UNDELETE]) {
+                    $commandsarray['forumng-undelete'] = '<a href="' . $linkprefix .
+                            'deletepost.php?' .
+                            $post->get_link_params(mod_forumng::PARAM_HTML) .
+                            $expandparam . '&amp;delete=0">' .
+                            get_string('undelete', 'forumng', $postnumber) .
+                            '</a>';
+                }
+
+                // Edit link
+                if ($options[mod_forumng_post::OPTION_COMMAND_EDIT]) {
+                    $commandsarray['forumng-edit'] = '<a' . $mobileclass . ' href="' . $linkprefix .
+                            'editpost.php?' .
+                            $post->get_link_params(mod_forumng::PARAM_HTML) .
+                            $expandparam . $expires. '">' .
+                            get_string('edit', 'forumng', $postnumber) .
+                            '</a>';
+                }
+
+                // Reply link
+                if ($options[mod_forumng_post::OPTION_COMMAND_REPLY]) {
+                    $commandsarray['forumng-replylink'] = '<a' . $mobileclass . ' href="' .
+                            $linkprefix . 'editpost.php?replyto=' . $post->get_id() .
+                            $post->get_forum()->get_clone_param(mod_forumng::PARAM_HTML) .
+                            $expandparam . '">' .
+                            get_string('reply', 'forumng', $postnumber) . '</a>';
+                }
+
+                if (count($commandsarray)) {
+                    $out .= $lf . $this->render_commands($commandsarray);
+                }
+            } else {
+                // Reply link
+                if ($options[mod_forumng_post::OPTION_COMMAND_REPLY]) {
+                    $out .= mod_forumng_cron::EMAIL_DIVIDER;
+                    if ($options[mod_forumng_post::OPTION_EMAIL]) {
+                        $course = $post->get_forum()->get_course();
+                        $out .= get_string("postmailinfo", "forumng",
+                            $course->shortname) . $lf;
+                    }
+                    $out .= "{$linkprefix}editpost.php?replyto=" .
+                            $post->get_id() .
+                            $post->get_forum()->get_clone_param(mod_forumng::PARAM_PLAIN) .
+                            $lf;
+                }
+
+                // Only the reply command is available in text mode
+            }
+
+            if ($post->get_forum()->get_enableratings() ==
+                    mod_forumng::FORUMNG_STANDARD_RATING && $post->get_ratings()) {
+                        $out .= html_writer::div($OUTPUT->render($post->get_ratings()), 'forumng-ratings-standard');
+            }
+
+            // End: forumng-postfooter and forumng-postmain.
+            if ($html) {
+                $out .= html_writer::end_tag('div') . html_writer::end_tag('div');
+            }
+        }
+
+        // End of post div
+        if ($html) {
+            // Useful empty div at end of post.
+            $out .= html_writer::tag('div', '', array('class' => 'forumng-endpost'));
+
+            // End: forumng-post-outerbox.
+            $out .= html_writer::end_tag('div');
+
+            // Export has a couple blank lines after post (but within div, for validity).
+            if ($export) {
+                $out .= '<br /><br />';
+            }
+
+            // End: forumng-post.
+            $out .= html_writer::end_tag('div');
+        }
+
+        return $out;
+    }
+
+    /**
+     * Returns list of attachments
+     *
+     * @param array $attachments
+     * @param mod_forumng_post $post
+     * @return string
+     */
+    public function render_attachments($attachments, $post) {
+        global $CFG;
+        require_once($CFG->libdir . '/filelib.php');
+        $lf = ' ';
+        $out = $lf;
+        if (count($attachments) == 1) {
+            $attachmentlabel = get_string('attachment', 'forumng');
+        } else {
+            $attachmentlabel = get_string('attachments', 'forumng');
+        }
+        $out .= '<span class="accesshide forumng-attachments-label">' . $attachmentlabel .
+            '</span><ul class="forumng-attachments">';
+
+        foreach ($attachments as $attachment) {
+            $iconsrc = $this->pix_url('/f/' . mimeinfo('icon', $attachment));
+            $alt = get_mimetype_description(mimeinfo('type', $attachment));
+
+            $out .= '<li><a href="' . $post->get_attachment_url($attachment) . '">' .
+                    '<img src="' . $iconsrc . '" alt="' . $alt . '" /> <span>' .
+                    htmlspecialchars($attachment) . '</span></a> </li>';
+        }
+
+        return $out .= '</ul>' . $lf;
+    }
+
+    /**
+     * Render message inner text
+     *
+     * @param string $text
+     * @param mod_forumng_post $post
+     * @return string
+     */
+    public function render_message($text, $post) {
+        return $text;
+    }
+
+    /**
+     * Renders the jumpto buttons.
+     * @param int $nextid id of the next unread post
+     * @param int $pid id of the previous unread post
+     * @param int $parentid id of the parent post
+     * @return string HTML code for the jumpto buttons
+     */
+    public function render_commands_jumpto($nextid, $pid, $parentid) {
+        $output = '';
+        if ($nextid) {
+            $output .= ' <a href="#p'. $nextid . '" class="forumng-next">' .
+                    get_string('jumpnext', 'forumng') . '</a>';
+        }
+        if ($pid) {
+            if ($nextid) {
+                $output .= ' (<a href="#p'. $pid . '" class="forumng-prev">' .
+                        get_string('jumppreviousboth', 'forumng') . '</a>)';
+            } else {
+                $output .= ' <a href="#p'. $pid . '" class="forumng-prev">' .
+                        get_string('jumpprevious', 'forumng') . '</a>';
+            }
+        }
+        if ($parentid) {
+            $output .= ' <a href="#p'. $parentid . '" class="forumng-parent">' .
+                    get_string('jumpparent', 'forumng') . '</a>';
+        }
+        if (!empty($output)) {
+            $output = '<span class="forumng-jumpto-label">' .
+                    get_string('jumpto', 'forumng') . '</span>' . $output;
+        }
+        return $output;
+    }
+
+    /**
+     * Renders array of commands that go at the bottom of each message.
+     * @param array $commandsarray Array of HTML strings
+     * @return string HTML code for the commands buttons
+     */
+    public function render_commands($commandsarray) {
+        $out = '<ul class="forumng-commands">';
+        foreach ($commandsarray as $class => $html) {
+            $out .= '<li class="' . $class . '">' . $html . '</li>';
+        }
+        $out .= '</ul>';
+        return $out;
+    }
+
+    /**
+     * Renders the expand link for each post.
+     * @param string $linkprefix prefix of the expand link url
+     * @param mod_forumng_discussion $discussion object
+     * @param mod_forumng_post $post object
+     * @return string HTML code for the expand link
+     */
+    public function render_expand_link($linkprefix, $discussion, $post) {
+        $out = '&nbsp;<span class="forumng-expandcontainer">[<a class="forumng-expandlink" ' .
+                'href="' . $linkprefix . 'discuss.php?' .
+                $discussion->get_link_params(mod_forumng::PARAM_HTML) .
+                '&amp;expand=1#p' .
+                $post->get_id() . '"><span class="forumng-expandtext">' . get_string('expandall', 'forumng') .
+                '</span></a>] <img src="' . $this->pix_url('spacer') .
+                '" width="16" height="16" alt="" /></span>';
+        return $out;
+    }
+
+    private static function nice_shorten_text($text, $length=40) {
+        $text = trim($text);
+        $summary = shorten_text($text, $length);
+        $summary = preg_replace('~\s*\.\.\.(<[^>]*>)*$~', '$1', $summary);
+        $dots = $summary != $text ? '...' : '';
+        return $summary. $dots;
+    }
+
+    /**
+     * Called when displaying a group of posts together on one page.
+     * @param mod_forumng_discussion $discussion Forum object
+     * @param string $html HTML that has already been created for the group
+     *   of posts
+     * @return string Modified (if necessary) HTML
+     */
+    public function render_post_group($discussion, $html) {
+        // Add ForumNG rating form if there are any ForumNG rating selects.
+        // Check any Form exists before adding actionform.
+        $hasratings = strpos($html, '<div class="forumng-editrating">') !== false;
+        $hasform = strpos($html, '<form') !== false;
+        if ($hasratings && !$hasform) {
+            $script = '<script type="text/javascript">' .
+                'document.getElementById("forumng-actionform").autocomplete=false;' .
+                '</script>';
+            $html = '<form method="post" id="forumng-actionform" ' .
+                'action="action.php"><div>' . $script . $html .
+                $discussion->get_link_params(mod_forumng::PARAM_FORM);
+            if ($hasratings) {
+                $html .= '<input type="submit" id="forumng-saveallratings" value="' .
+                    get_string('saveallratings', 'forumng') . '" name="action.rate"/>';
+            }
+            $html .=  '</div></form>';
+        }
+        return $html;
+    }
+
+    /**
+     * Displays the reply/edit form on a discussion page. Usually this form is
+     * hidden by CSS and only displayed when JavaScript activates it.
+     * @param mod_forumng $forum
+     * @return string HTMl for form
+     */
+    public function render_ajax_forms($forum) {
+        global $CFG;
+
+        require_once($CFG->dirroot . '/mod/forumng/editpost_form.php');
+        // Reply form
+        $mform = new mod_forumng_editpost_form('editpost.php',
+            array('params'=>array(), 'isdiscussion'=>false, 'ispost'=>true,
+                'islock'=>false, 'forum'=>$forum, 'edit'=>false, 'post'=>null,
+                'ajaxversion'=>1, 'isroot'=>false));
+        $result = $mform->get_html();
+        // Edit form
+        $mform = new mod_forumng_editpost_form('editpost.php',
+            array('params'=>array(), 'isdiscussion'=>false, 'ispost'=>true,
+                'islock'=>false, 'forum'=>$forum, 'edit'=>true, 'post'=>null,
+                'ajaxversion'=>2, 'isroot'=>false));
+        $result .= $mform->get_html();
+        // Edit form (discussion)
+        $mform = new mod_forumng_editpost_form('editpost.php',
+            array('params'=>array(), 'isdiscussion'=>false, 'ispost'=>true,
+                'islock'=>false, 'forum'=>$forum, 'edit'=>true, 'post'=>null,
+                'ajaxversion'=>3, 'isroot'=>true));
+        $result .= $mform->get_html();
+
+        return '<div id="forumng-formhome">' . $result . '</div>';
+    }
+
+    /**
+     * Returns the full img tag for the sort arrow gif.
+     * @return string
+     */
+    private function get_sort_arrow($sort, $sortreverse=false) {
+        $letter = mod_forumng::get_sort_letter($sort);
+        $up = 'sortorder-up';
+        $down = 'sortorder-down';
+        switch ($letter) {
+            case 'd' :
+                $imgname = ($sortreverse) ? $up : $down;
+                break;
+            case 's' :
+                $imgname = ($sortreverse) ? $down : $up;
+                break;
+            case 'a' :
+                $imgname = ($sortreverse) ? $down : $up;
+                break;
+            case 'p' :
+                $imgname = ($sortreverse) ? $up : $down;
+                break;
+            case 'u' :
+                $imgname = ($sortreverse) ? $up : $down;
+                break;
+            case 'g' :
+                $imgname = ($sortreverse) ? $down : $up;
+                break;
+            default:
+                throw new coding_exception("Unknown sort letter: $letter");
+        }
+        $imgtag = '<span class="forumng-sortcurrent">' . $this->pix_icon($imgname,
+                get_string('sorted', 'forumng', $this->get_sort_order_text($sort, $sortreverse)),
+                'forumng') . '</span>';
+        return $imgtag;
+    }
+
+    /**
+     * Returns the apropriate language string text for the current sort.
+     * e.g. a-Z or Z-a for text columns, recent first or oldest first for date columns and
+     * highest first or lowest first for numeric columns.
+     * @param string $sort Sort parameter
+     * @param bool $sortreverse True if sort is reversed
+     * @return string
+     */
+    private function get_sort_order_text($sort, $sortreverse=false) {
+        $letter = mod_forumng::get_sort_letter($sort);
+        switch ($letter) {
+            case 'd' :
+                return (!$sortreverse) ? get_string('date_desc', 'forumng')
+                        : get_string('date_asc', 'forumng');
+            case 's' :
+                return (!$sortreverse) ? get_string('text_asc', 'forumng')
+                        : get_string('text_desc', 'forumng');
+            case 'a' :
+                return (!$sortreverse) ? get_string('text_asc', 'forumng')
+                        : get_string('text_desc', 'forumng');
+            case 'p' :
+                return (!$sortreverse) ? get_string('numeric_desc', 'forumng')
+                        : get_string('numeric_asc', 'forumng');
+            case 'u' :
+                return (!$sortreverse) ? get_string('numeric_desc', 'forumng')
+                        : get_string('numeric_asc', 'forumng');
+            case 'g' :
+                return (!$sortreverse) ? get_string('text_asc', 'forumng')
+                        : get_string('text_desc', 'forumng');
+            default:
+                throw new coding_exception("Unknown sort letter: $letter");
+        }
+    }
+
+    public function render_unread_skip_link() {
+        $out = '<div id="forumng-unread-skip"><a href="#firstunread">';
+        $out .= get_string('skiptofirstunread', 'forumng');
+        $out .= '</a></div>';
+        return $out;
+    }
+
+    public function render_feed_links($atomurl, $rssurl) {
+        // Icon (decoration only) and Atom/RSS links
+        $strrss = get_string('rss');
+        $stratom = get_string('atom', 'forumng');
+        $feed = '<div class="forumng-feedlinks">';
+        $feed .= '<a class="forumng-iconlink" href="'. htmlspecialchars($atomurl) . '">';
+        $feed .= "<img src='" . $this->pix_url('i/rss') . "' alt=''/> " .
+            '<span class="forumng-textbyicon">' . $stratom . '</span></a> ';
+        $feed .= '<a href="'. htmlspecialchars($rssurl) . '">' . $strrss . '</a> ';
+        $feed .= '</div>';
+        return $feed;
+    }
+
+    /**
+     * Returns html for forumng search entry form for the header
+     * @param string $querytext user query
+     * @param string $linkfields passing through forum link parameters for form submission
+     * @param string $help help string if needed
+     * @param mod_forumng $forum Forum object if needed
+     * @return string
+     */
+    public function render_search_form($querytext, $linkfields, $help = '', $forum = null) {
+        $strsearchthisactivity = get_string('searchthisforum', 'forumng');
+        $out = html_writer::start_tag('form', array('action' => 'search.php', 'method' => 'get'));
+        $out .= html_writer::start_tag('div');
+        $out .= $linkfields;
+        $out .= html_writer::tag('label', $strsearchthisactivity,
+                array('for' => 'forumng_searchquery'));
+        $out .= $help;
+        $out .= html_writer::empty_tag('input', array('type' => 'text', 'name' => 'query',
+                'id' => 'forumng_searchquery', 'value' => $querytext));
+        $out .= html_writer::empty_tag('input', array('type' => 'image',
+                'id' => 'ousearch_searchbutton', 'alt' => get_string('search'),
+                'title' => get_string('search'), 'src' => $this->pix_url('i/search')));
+        $out .= html_writer::end_tag('div');
+        $out .= html_writer::end_tag('form');
+        return $out;
+    }
+
+    /**
+     * Print a message along with three buttons buttoneone/buttontwo/Cancel
+     *
+     * If a string or moodle_url is given instead of a single_button, method defaults to post.
+     *
+     * @param string $message The question to ask the user.
+     * @param single_button $buttonone The single_button component representing the buttontwo response.
+     * @param single_button $buttontwo The single_button component representing the buttontwo response.
+     * @param single_button $cancel The single_button component representing the Cancel response.
+     * @return string HTML fragment
+     */
+    public function confirm_three_button($message, $buttonone, $buttontwo, $cancel) {
+        if (!($buttonone instanceof single_button)) {
+            throw new coding_exception('The buttonone param must be an instance of a single_button.');
+        }
+
+        if (!($buttontwo instanceof single_button)) {
+            throw new coding_exception('The buttontwo param must be an instance of a single_button.');
+        }
+
+        if (!($cancel instanceof single_button)) {
+            throw new coding_exception('The cancel param must be an instance of a single_button.');
+        }
+
+        $output = $this->box_start('generalbox', 'notice');
+        $output .= html_writer::tag('p', $message);
+        $buttons = $this->render($buttonone) . $this->render($buttontwo) . $this->render($cancel);
+        $output .= html_writer::tag('div', $buttons, array('class' => 'buttons'));
+        $output .= $this->box_end();
+        return $output;
+    }
+
+    /**
+     * Print a message explaining why a user cannot start a discussion.
+     *
+     * @param string $message the identifier for the message to display.
+     */
+    public function cannot_start_discussion_error($message) {
+        return '<p class="forumng-cannotstartdiscussion">' . get_string($message, 'forumng') . '</p>';
+    }
+
+    /**
+     * Compiles the html message content for the rejection email.
+     *
+     * @param object $group The details of one group
+     * @param string $coursename
+     * @return string HTML
+     */
+    public function deletion_email($messagetext) {
+        $out = '';
+        $out .= html_writer::start_tag('html');
+        $out .= html_writer::start_tag('body');
+        $out .= $messagetext;
+        $out .= html_writer::end_tag('body');
+        $out .= html_writer::end_tag('html');
+
+        return $out;
+    }
+
+    /**
+     * Compiles the html message content for the rejection email.
+     *
+     * @param object $group The details of one group
+     * @param string $coursename
+     * @return string HTML
+     */
+    public function delete_form_html($messagehtml) {
+        return html_writer::tag('div', htmlentities($messagehtml, ENT_QUOTES),
+                array('id' => 'delete-form-html'));
+    }
+
+    /**
+     * Display 'Skip sticky discussions' link.
+     * @return string HTML for the jump link.
+     */
+    public function render_skip_link($id) {
+        return html_writer::tag('a', get_string('skipstickydiscussions', 'forumng'),
+                array('href' => '#discrow_' . $id, 'class' => 'skip'));
+    }
+
+    /**
+     * Display tag filter as a link or dropdown
+     * @param array $taglist is array of tags
+     * @param mod_forumng $forum
+     * @param string $selectid of tag if selected
+     * @return string for printing out
+     */
+    public function render_tag_filter($taglist, $forum, $selectid = null) {
+        $baseurl = 'view.php?' . $forum->get_link_params(mod_forumng::PARAM_HTML);
+        if (!empty($selectid)) {
+            $tagname = htmlspecialchars($taglist[$selectid]->displayname);
+            $taglink = get_string('removefiltering', 'forumng', $tagname);
+            $taglink .= '&nbsp;(';
+            $taglink .= html_writer::tag('a', get_string('show_all', 'forumng'), array('href' => $baseurl));
+            $taglink .= ')';
+            $out = html_writer::tag('div', $taglink, array('class' => 'forumng_discuss_tagfilter'));
+        } else {
+            // Display dropdown.
+            foreach ($taglist as $tag) {
+                $options[$tag->id] = htmlspecialchars($tag->displayname) . ' (' . $tag->count .')';
+            }
+            $tagurl = new moodle_url('/mod/forumng/view.php?', $forum->get_link_params_array(mod_forumng::PARAM_PLAIN));
+            $select = new single_select($tagurl, 'tag', $options, '');
+            $select->label = get_string('filterdiscussions', 'forumng');
+            $select->set_help_icon('forumngdiscusstagfilter', 'forumng');
+            $output = $this->render($select);
+            $out = '<div class="forumng_discuss_tagfilter">'.$output.'</div>';
+        }
+        return $out;
+    }
+
+}
diff --git a/mod/forumng/search.php b/mod/forumng/search.php
new file mode 100644
index 0000000..ac8ef27
--- /dev/null
+++ b/mod/forumng/search.php
@@ -0,0 +1,95 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Basic fulltext search using ousearch library.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+$cmid = required_param('id', PARAM_INT);
+$querytext = required_param('query', PARAM_RAW);
+$pageparams = array('id'=>$cmid, 'query'=>$querytext);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+$groupid = mod_forumng::get_activity_group($cm, true);
+$forum->require_view($groupid, 0, true);
+mod_forumng::search_installed();
+
+// If no search text has been entered, go straight to advanced search.
+if (empty($querytext)) {
+    redirect('advancedsearch.php?' . $forum->get_link_params(mod_forumng::PARAM_HTML) .
+            '&amp;action=0');
+}
+
+// Search form for header
+$buttontext = $forum->display_search_form($querytext);
+
+// Display header
+$PAGE->set_url(new moodle_url('/mod/forumng/search.php', $pageparams));
+$PAGE->set_context($forum->get_context());
+$PAGE->set_heading($course->fullname);
+$PAGE->set_title($course->shortname . ': ' . format_string($forum->get_name()));
+$PAGE->set_button($buttontext);
+$PAGE->set_cm($cm, $course);
+$PAGE->set_pagelayout('base');
+$PAGE->navbar->add(get_string('searchfor', 'local_ousearch', $querytext));
+$out = mod_forumng_utils::get_renderer();
+print $out->header();
+
+// Display group selector if required
+groups_print_activity_menu($cm, $CFG->wwwroot . '/mod/forumng/search.php?' .
+    $forum->get_link_params(mod_forumng::PARAM_HTML) . '&amp;query=' .
+    rawurlencode($querytext));
+
+$searchurl = 'search.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN);
+$query = new local_ousearch_search($querytext);
+$query->set_coursemodule($forum->get_course_module(true));
+if ($groupid && $groupid!=mod_forumng::NO_GROUPS) {
+    $query->set_group_id($groupid);
+}
+print $query->display_results($searchurl);
+
+// Print advanced search link.
+$options = $forum->get_link_params(mod_forumng::PARAM_HTML);
+$options .= '&amp;action=0';
+$options .= ($querytext) ? '&amp;query=' . rawurlencode($querytext) : '';
+$url = $CFG->wwwroot .'/mod/forumng/advancedsearch.php?' . $options;
+$strlink = get_string('advancedsearch', 'forumng');
+print "<div class='advanced-search-link'><a href=\"$url\">$strlink</a>";
+// Add link to search the rest of this website if service available.
+if (!empty($CFG->block_resources_search_baseurl)) {
+    $params = array('course' => $course->id, 'query' => $querytext);
+    $restofwebsiteurl = new moodle_url('/blocks/resources_search/search.php', $params);
+    $strrestofwebsite = get_string('restofwebsite', 'local_ousearch');
+    $altlink = html_writer::start_tag('div');
+    $altlink .= html_writer::link($restofwebsiteurl, $strrestofwebsite);
+    $altlink .= html_writer::end_tag('div');
+    print $altlink;
+}
+print '</div>';
+
+print $out->footer();
diff --git a/mod/forumng/settings.php b/mod/forumng/settings.php
new file mode 100644
index 0000000..1407e3e
--- /dev/null
+++ b/mod/forumng/settings.php
@@ -0,0 +1,125 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Administration settings form.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+$plugin = new stdClass();
+require_once($CFG->dirroot . '/mod/forumng/settingslib.php');
+require_once($CFG->dirroot.'/mod/forumng/version.php');
+
+if (!empty($plugin->release)) {
+$settings->add(new admin_setting_heading('forumng_version', '',
+    get_string('displayversion', 'forumng', $plugin->release)));
+}
+
+$settings->add(new admin_setting_configcheckbox('forumng_replytouser',
+    get_string('replytouser', 'forumng'),
+    get_string('configreplytouser', 'forumng'), 1));
+
+$settings->add(new admin_setting_configtext('forumng_usebcc',
+    get_string('usebcc', 'forumng'),
+    get_string('configusebcc', 'forumng'), 0, PARAM_INT));
+
+$settings->add(new admin_setting_configtext('forumng_donotmailafter',
+    get_string('donotmailafter', 'forumng'),
+    get_string('configdonotmailafter', 'forumng'), 48, PARAM_INT));
+
+    // Number of discussions on a page
+$settings->add(new admin_setting_configtext('forumng_discussionsperpage',
+    get_string('discussionsperpage', 'forumng'),
+    get_string('configdiscussionsperpage', 'forumng'), 20, PARAM_INT));
+if (isset($CFG->maxbytes)) {
+    $sizes = get_max_upload_sizes($CFG->maxbytes);
+} else {
+    $sizes = get_max_upload_sizes(0);
+}
+unset($sizes[0]);
+$sizes[-1] = get_string('forbidattachments', 'forumng');
+
+$settings->add(new admin_setting_configselect('forumng_attachmentmaxbytes',
+    get_string('attachmentmaxbytes', 'forumng'),
+    get_string('configattachmentmaxbytes', 'forumng'), 512000, $sizes));
+
+// Option about read tracking
+$settings->add(new admin_setting_configcheckbox('forumng_trackreadposts',
+    get_string('trackreadposts', 'forumng'), get_string('configtrackreadposts', 'forumng'), 1));
+
+// Number of days that a post is considered old and we don't store unread data
+$settings->add(new admin_setting_configtext('forumng_readafterdays',
+    get_string('readafterdays', 'forumng'),
+    get_string('configreadafterdays', 'forumng'), 60, PARAM_INT));
+
+// RSS feeds
+if (empty($CFG->enablerssfeeds)) {
+    $options = array(0 => get_string('rssglobaldisabled', 'admin'));
+    $str = get_string('configenablerssfeeds', 'forumng').'<br />'.
+        get_string('configenablerssfeedsdisabled2', 'admin');
+} else {
+    $options = array(0=>get_string('no'), 1=>get_string('yes'));
+    $str = get_string('configenablerssfeeds', 'forumng');
+}
+$settings->add(new admin_setting_configselect('forumng_enablerssfeeds',
+    get_string('enablerssfeeds', 'admin'), $str, 0, $options));
+
+$settings->add(new forumng_admin_setting_configselect_subscription('forumng_subscription',
+    get_string('subscription', 'forumng'),
+    get_string('configsubscription', 'forumng'), -1, null));
+
+$settings->add(new forumng_admin_setting_configselect_feedtype('forumng_feedtype',
+    get_string('feedtype', 'forumng'),
+    get_string('configfeedtype', 'forumng'), -1, null));
+
+$settings->add(new forumng_admin_setting_configselect_feeditems('forumng_feeditems',
+    get_string('feeditems', 'forumng'),
+    get_string('configfeeditems', 'forumng'), -1, null));
+
+$options = array(
+    0=>get_string('permanentdeletion_never', 'forumng'),
+    1=>get_string('permanentdeletion_soon', 'forumng'),
+    1*60*60*24=>'1 '.get_string('day'),
+    14*60*60*24=>'14 '.get_string('days'),
+    30*60*60*24=>'30 '.get_string('days'),
+    365*60*60*24=>'1 '.get_string('year'));
+$settings->add(new admin_setting_configselect('forumng_permanentdeletion',
+    get_string('permanentdeletion', 'forumng'),
+    get_string('configpermanentdeletion', 'forumng'), 30*60*60*24, $options));
+
+// Option about read tracking
+$settings->add(new admin_setting_configcheckbox('forumng_showusername',
+    get_string('showusername', 'forumng'),
+    get_string('configshowusername', 'forumng'), 0));
+$settings->add(new admin_setting_configcheckbox('forumng_showidnumber',
+    get_string('showidnumber', 'forumng'),
+    get_string('configshowidnumber', 'forumng'), 0));
+
+$settings->add(new admin_setting_configtext('forumng_reportunacceptable',
+        get_string('reportunacceptable', 'forumng'),
+        get_string('configreportunacceptable', 'forumng'), '', PARAM_NOTAGS));
+
+$settings->add(new admin_setting_configcheckbox('forumng_enableadvanced',
+    get_string('enableadvanced', 'forumng'),
+    get_string('configenableadvanced', 'forumng'), 0));
+
+$settings->add(new admin_setting_configduration('forumng_emailafter',
+    get_string('emailafter', 'forumng'),
+    get_string('configemailafter', 'forumng'), 120));
diff --git a/mod/forumng/settingslib.php b/mod/forumng/settingslib.php
new file mode 100644
index 0000000..cf2e272
--- /dev/null
+++ b/mod/forumng/settingslib.php
@@ -0,0 +1,58 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Administration settings lib - lazy loading of option values.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+class forumng_admin_setting_configselect_subscription extends admin_setting_configselect {
+    public function load_choices() {
+        global $CFG;
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+        $options = mod_forumng::get_subscription_options();
+        $options[-1] = get_string('perforumoption', 'forumng');
+        $this->choices = $options;
+        return true;
+    }
+}
+
+class forumng_admin_setting_configselect_feedtype extends admin_setting_configselect {
+    public function load_choices() {
+        global $CFG;
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+        $options = mod_forumng::get_feedtype_options();
+        $options[-1] = get_string('perforumoption', 'forumng');
+        $this->choices = $options;
+        return true;
+    }
+}
+
+class forumng_admin_setting_configselect_feeditems extends admin_setting_configselect {
+    public function load_choices() {
+        global $CFG;
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+        $options = mod_forumng::get_feeditems_options();
+        $options[-1] = get_string('perforumoption', 'forumng');
+        $this->choices = $options;
+        return true;
+    }
+}
diff --git a/mod/forumng/splitpost.php b/mod/forumng/splitpost.php
new file mode 100644
index 0000000..d655c23
--- /dev/null
+++ b/mod/forumng/splitpost.php
@@ -0,0 +1,95 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Split post or show form for splitting post.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+// Post ID
+$postid = required_param('p', PARAM_INT);
+$pageparams = array('p'=>$postid);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+// Were all posts expanded?
+$expand = optional_param('expand', 0, PARAM_INT);
+$expandparam = $expand ? '&expand=1' : '';
+
+// Get post
+$post = mod_forumng_post::get_from_id($postid, $cloneid, true);
+
+// Get convenience variables
+$discussion = $post->get_discussion();
+$forum = $post->get_forum();
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+// Set up page
+$pagename = get_string('splitpost', 'forumng', $post->get_effective_subject(true));
+$url = new moodle_url('/mod/forumng/splitpost.php', $pageparams);
+$out = $discussion->init_page($url, $pagename);
+
+// Do all access security checks
+$post->require_view();
+if (!$post->can_split($whynot)) {
+    print_error($whynot, 'forumng');
+}
+
+require_once('splitpost_form.php');
+$mform = new mod_forumng_splitpost_form('splitpost.php',
+    array('p'=>$postid, 'clone'=>$cloneid, 'expand' => $expand));
+
+if ($mform->is_cancelled()) {
+    redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN) .
+            $expandparam);
+} else if ($fromform = $mform->get_data(false)) {
+    // Split post
+    $newdiscussionid = $post->split($fromform->subject);
+
+    // Redirect back
+    redirect('discuss.php?d=' . $newdiscussionid .
+            $forum->get_clone_param(mod_forumng::PARAM_PLAIN));
+}
+
+// Confirm page. Work out navigation for header
+print $out->header();
+
+// Print post
+if ($post->get_subject() != null) {
+    $mform->set_data(array('subject' => $post->get_subject()));
+}
+
+// Print form
+$mform->display();
+
+print '<div class="forumng-exampleposts">';
+
+// Print posts
+print $post->display_with_children(
+    array(mod_forumng_post::OPTION_NO_COMMANDS=>true,
+        mod_forumng_post::OPTION_CHILDREN_EXPANDED=>true));
+
+print '</div>';
+
+// Display footer
+print $out->footer();
diff --git a/mod/forumng/splitpost_form.php b/mod/forumng/splitpost_form.php
new file mode 100644
index 0000000..9e19210
--- /dev/null
+++ b/mod/forumng/splitpost_form.php
@@ -0,0 +1,52 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Form used when splitting posts to confirm subject for new discussion.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_splitpost_form extends moodleform {
+
+    public function definition() {
+
+        global $CFG;
+        $mform =& $this->_form;
+
+        $mform->addElement('static', 'whatever', '',
+            get_string('splitinfo', 'forumng').'<br />');
+
+        $mform->addElement('text', 'subject',
+            get_string('subject', 'forumng'), 'size="48"');
+        $mform->setType('subject', PARAM_TEXT);
+        $mform->addRule('subject', get_string('maximumchars', '', 255),
+            'maxlength', 255, 'client');
+        $mform->addRule('subject', get_string('required'),
+             'required', null, 'client');
+
+        $this->add_action_buttons(true, get_string('splitpostbutton', 'forumng'));
+
+        // Hidden fields
+        foreach ($this->_customdata as $param => $value) {
+            $mform->addElement('hidden', $param, $value);
+            $mform->setType($param, PARAM_INT);
+        }
+    }
+}
diff --git a/mod/forumng/styles.css b/mod/forumng/styles.css
new file mode 100644
index 0000000..cd75c7a
--- /dev/null
+++ b/mod/forumng/styles.css
@@ -0,0 +1,1104 @@
+/*
+// CSS column layout
+////////////////////
+*/
+#page-mod-forumng-view #left-column {
+    width:12em;
+    float:left;
+}
+#page-mod-forumng-view #right-column {
+    width:12em;
+    float:right;
+}
+#page-mod-forumng-view #middle-column.has-right-column {
+    margin-right:13em;
+}
+#page-mod-forumng-view #middle-column.has-left-column {
+    margin-left:13em;
+}
+#page-mod-forumng-view .block_adminblock select {
+    max-width:12em;
+}
+#page-mod-forumng-view #footer {
+    clear:left;
+}
+/*
+// Icon links
+/////////////
+
+// These have an icon combined in the link, so you can click the icon,
+// but it isn't underlined. For accessibility reasons it's important this
+// effect is not created using two separate links.
+*/
+a.forumng-iconlink:link,
+a.forumng-iconlink:visited,
+a.forumng-iconlink:active,
+a.forumng-iconlink:hover {
+    text-decoration: none;
+    color: black;
+}
+.forumng-iconlink:hover .forumng-textbyicon {
+    text-decoration: underline;
+}
+
+.forumng-iconlink img {
+    position: relative;
+    top: 4px;
+}
+
+.forumng-feedlinks a:link,
+.forumng-feedlinks a:visited,
+.forumng-feedlinks a:active {
+    text-decoration: none;
+    color: black;
+}
+.generaltable .forumng-feedlinks a:link,
+.generaltable .forumng-feedlinks a:visited,
+.generaltable .forumng-feedlinks a:active {
+    color: black;
+}
+
+.forumng-feedlinks a:hover {
+    text-decoration: underline;
+}
+.forumng-feedlinks a.forumng-iconlink:hover {
+    text-decoration: none;
+}
+
+/*
+// Errors
+/////////
+*/
+
+.forumng-errormessage {
+    font-size:0.85em;
+    color:#333;
+    margin:1em 0;
+}
+
+/*
+// Index page styles
+////////////////////
+*/
+.forumng-subscribecell form,
+.forumng-subscribecell div {
+    display:inline;
+}
+.forumng-subscribecell input,
+.forumng-feedlinks {
+    font-size:0.85em;
+}
+.forumng-subscribecell {
+    white-space: nowrap;
+}
+
+#page-mod-forumng-index .generaltable {
+    width: 100%;
+    margin-top: 1em;
+    margin-bottom: 1em;
+}
+.forumng-allsubscribe {
+    text-align: center;
+}
+.forumng-allsubscribe form,
+.forumng-allsubscribe div {
+    display: inline;
+}
+
+/*
+// View page styles
+///////////////////
+*/
+
+#page-mod-forumng-view .generaltable,
+#page-mod-forumng-feature-deletedposts-list .generaltable {
+    width: 100%;
+}
+#page-mod-forumng-view .generaltable th,
+#page-mod-forumng-feature-deletedposts-list .generaltable th {
+    text-align: left;
+}
+.forumng-startedby td {
+     overflow: hidden;
+}
+.forumng-startedby a,
+.forumng-startedby img {
+    vertical-align:middle;
+}
+.forumng-startedby img {
+    margin-right:12px;
+}
+
+form.forumng-paste-buttons {
+    margin-left: 0.85em;
+    padding: 0.7em 0.5em;
+    background: #FFD991;
+}
+.ie7 form.forumng-paste-buttons {
+    padding: 0.5em 0.5em;
+}
+
+#forumng-buttons {
+    margin:0 0 1em;
+}
+#page-mod-forumng-view #forumng-buttons {
+    margin-top:0.6em;
+}
+
+#page-mod-forumng-subscribers #forumng-buttons {
+    margin-bottom: 1em;
+}
+
+.forumng_discuss_tagfilter .helptooltip {
+    margin-right: 5px;
+}
+
+.forumng-subscribe-options p,
+.forumng-subscribe-options form,
+.forumng-subscribe-options form div {
+    display:inline;
+}
+.forumng-subscribe-options form {
+    margin-left: 1em;
+}
+.forumng-subscribe-admin {
+    font-size: 0.85em;
+}
+
+.forumng-subscribe-options {
+    margin-top: 2em;
+}
+
+.forumng-subscribe-details {
+    display: inline;
+}
+
+.forumng-subscribe-options h3 {
+    margin: 0em;
+    font-size: 1em;
+}
+
+.forumng-archivewarning {
+    margin:1em 0;
+    color: red;
+}
+
+.forumng-timeout td.cell,
+.forumng-timeout td.cell a:link,
+.forumng-timeout td.cell a:visited,
+.forumng-timeout td.cell a:active,
+.forumng-deleted td.cell,
+.forumng-deleted td.cell a:link,
+.forumng-deleted td.cell a:visited,
+.forumng-deleted td.cell a:active {
+    color:#888;
+}
+.forumng-deleted .forumng-subject {
+    text-decoration:line-through;
+}
+
+#page-mod-forumng-view .groupselector,
+#page-mod-forumng-subscribers .groupselector,
+#page-mod-forumng-feature-readers-readers .groupselector,
+#page-mod-forumng-feature-userposts .groupselector {
+    float:none;
+}
+
+.forumng-subject img {
+  float:left;
+  margin-right:8px;
+}
+
+.forumng-divider {
+    height:8px;
+}
+
+.forumng-unreadcount form,
+.forumng-unreadcount form div {
+    display:inline;
+}
+
+a.forumng-sortlink:link,
+a.forumng-sortlink:visited {
+    text-decoration:none;
+}
+a.forumng-sortlink:hover {
+    text-decoration:underline;
+}
+
+.forumng-sortcurrent {
+    padding-left:0.3em;
+}
+
+#page-mod-forumng-view .forumng-feedlinks,
+#page-mod-forumng-discuss .forumng-feedlinks {
+    margin-top: 0.5em;
+}
+
+.forumng-draft-inreplyto {
+    font-size: 0.85em;
+}
+
+.forumng-drafts {
+    margin: 1em 0 2em;
+}
+.forumng-drafts .forumng-heading,
+.forumng-flagged .forumng-heading {
+    margin: 0 0 0.5em;
+}
+.forumng-drafts .forumng-heading h3,
+.forumng-flagged .forumng-heading h3{
+    display: inline;
+    margin: 0;
+}
+.forumng-flagged {
+    margin: 2em 0 1em;
+}
+
+div.forumng-flag,
+div.forumng-flagpost {
+    display: inline;
+    padding-right: 0.5em;
+}
+
+form.forumng-flag,
+form.forumng-flagpost {
+    display: inline;
+    padding-left: 0.5em;
+}
+form.forumng-flag div,
+form.forumng-flagpost div {
+    display:inline;
+}
+div.forumng-flagpost a img {
+    padding-right: 0.5em;
+    vertical-align: -3px;
+}
+
+.forumng-shareinfo {
+    margin: 2em 0 2em;
+}
+
+.forumng-flagged-link {
+    padding-bottom: 2px;
+    border-bottom: 2px solid #CCCCCC;
+}
+
+.forumng-flagged-link a {
+    text-decoration: none;
+}
+
+.forumng-startedby-wrapper {
+    margin-left: 51px;
+    overflow: hidden;
+}
+
+.forumng-startedbyimage {
+    display: inline;
+    float: left;
+    margin-right: 5px;
+    overflow: hidden;
+}
+
+.forumng-startedbyuser {
+    display: inline;
+    vertical-align:middle;
+    text-align: left;
+    width: 355px;
+    overflow: hidden;
+}
+
+.forumng-moderator {
+    display: block;
+}
+.forumng-moderator-flag {
+    font-weight: bold;
+}
+
+/*
+// Discussion page styles
+/////////////////////////
+*/
+
+#forumng-arrowback {
+    margin: 1em 0;
+}
+
+.forumng-replies {
+    margin-left: 40px;
+}
+
+h2.accesshide {
+    margin: 0 0 5px 40px;
+    padding-bottom: 5px;
+    padding-left:0.5em;
+    font-size: 0.85em;
+    border-bottom: 1px dotted #aaa;
+    top: auto;
+    left: -10000px;
+}
+
+h2.forumng-author {
+    font-size: 1.0em;
+    padding-right:0.5em;
+    display:inline;
+}
+
+.forumng-replies .forumng-replies .forumng-replies .forumng-replies .forumng-replies {
+    margin-left: 30px;
+}
+
+.forumng-replies .forumng-replies .forumng-replies .forumng-replies .forumng-replies
+.forumng-replies .forumng-replies .forumng-replies .forumng-replies .forumng-replies {
+    margin-left: 20px;
+}
+
+#forumng-main .forumng-stop-indent .forumng-replies{
+    margin-left: 0px;
+}
+
+.forumng-nojs
+.forumng-replies .forumng-replies .forumng-replies .forumng-replies .forumng-replies
+.forumng-replies .forumng-replies .forumng-replies .forumng-replies .forumng-replies
+.forumng-replies .forumng-replies .forumng-replies .forumng-replies .forumng-replies
+.forumng-replies .forumng-replies .forumng-replies .forumng-replies .forumng-replies {
+    margin-left: 0px;
+}
+
+.forumng-post {
+    margin-bottom:1em;
+    border:1px solid #aaa;
+    padding:0.5em;
+    max-width:800px;
+}
+
+.forumng-pic {
+    float:left;
+    width:35px;
+}
+.forumng-subject,
+.forumng-info,
+.forumng-summary,
+.forumng-deleted-info {
+    margin-left:35px;
+    padding-left:0.5em;
+}
+
+.forumng-info {
+    position: relative;
+    padding-right: 16px;
+}
+.forumng-info .forumng-flag .forumng-flagpost {
+    position: absolute;
+    right: -0.5em;
+}
+
+.forumng-deleted .forumng-pic,
+.forumng-deselected .forumng-pic{
+    opacity:0.5;
+    filter: alpha(opacity=50);
+}
+.forumng-deleted .forumng-info,
+.forumng-deleted .forumng-summary .forumng-text,
+.forumng-deleted .forumng-message,
+.forumng-deleted .forumng-subject,
+.forumng-deselected .forumng-info,
+.forumng-deselected .forumng-summary .forumng-text,
+.forumng-deselected .forumng-message,
+.forumng-deselected .forumng-subject {
+    color: #888;
+}
+.forumng-deselected a:link,
+.forumng-deselected a:active,
+.forumng-deselected a:visited,
+.forumng-deselected a:hover {
+    color: #7f98b2;
+}
+
+.forumng-summary .forumng-text {
+    display:inline;
+}
+
+.forumng-info {
+    font-size:0.85em;
+}
+.forumng-subject {
+    margin-top:0.5em;
+    word-break: break-word;
+}
+h3.forumng-subject {
+    font-size:1em;
+    margin-top:0.5em;
+    margin-bottom:0;
+}
+.forumng-summary h3 {
+    font-size:1em;
+    margin:0;
+    display:inline;
+}
+.forumng-summary {
+    margin-top:0.5em;
+}
+.forumng-postmain {
+    margin-left:35px;
+    padding-left:0.5em;
+    padding-top:0.5em;
+}
+.forumng-postfooter {
+    margin:0.5em 0 0;
+    text-align:right;
+}
+/* Hide buttons if copied into message */
+.forumng-message .forumng-postfooter, .forumng-message .forumng-commands,
+.forumng-message .forumng-expandcontainer {
+    display: none;
+}
+
+ul.forumng-commands {
+    display: inline-block;
+    margin: 0;
+    padding: 0;
+    white-space: nowrap;
+    float: left;
+    margin-bottom: .7em;
+}
+.ie7 ul.forumng-commands {
+    display: inline;
+}
+ul.forumng-commands li {
+    display:inline;
+    list-style-type:none;
+    margin:0 0 0 2em;
+    padding:0;
+    position: relative;
+}
+ul.forumng-commands li {
+    font-size: 0.85em;
+}
+ul.forumng-commands li.forumng-replylink {
+    font-size: 1.0em;
+}
+.forumng-endpost {
+    clear:left;
+}
+
+.forumng-post.forumng-important {
+    background-color: #F0E1B3;
+}
+
+.forumng-post.forumng-read {
+    color:#222;
+}
+.forumng-post.forumng-unread {
+    background: #FFD991;
+}
+
+.forumng-post.forumng-unread .forumng-info {
+    font-weight: bold;
+}
+
+.forumng-lockmessage .forumng-post {
+    background: #FFBBBB;
+    margin-bottom: 2em;
+}
+
+.forumng-attachments {
+    display: block;
+    text-align:right;
+    font-size: 0.85em;
+    margin: 0 0 0.5em;
+    padding: 0;
+}
+.forumng-attachments li {
+    display:inline;
+    list-style-type:none;
+    margin:0 0 0 2em;
+}
+.forumng-attachments li a {
+    white-space: nowrap;
+}
+.forumng-attachments a:link,
+.forumng-attachments a:visited,
+.forumng-attachments a:hover {
+    text-decoration: none;
+}
+.forumng-attachments img {
+    vertical-align: -4px;
+}
+.forumng-attachments a:hover span {
+    text-decoration: underline;
+}
+
+
+#forumng-expandall {
+    text-align:right;
+    margin-bottom:0.5em;
+}
+
+#forumng-saveallratings {
+    font-size:0.85em;
+}
+
+.forumng-deleted-discussion .forumng-post {
+    color: #888;
+}
+
+.forumng-bad-browser {
+    font-size: 0.85em;
+    margin-top: 2em;
+}
+
+.forumng-bad-browser h3 {
+    display: inline;
+    margin: 0;
+    font-size: 1em;
+}
+
+.forumng-bad-browser p {
+    display: inline;
+    margin: 0;
+}
+
+.forumng-selectmode {
+    background: #eee;
+    padding: 0.5em 0 0;
+}
+.forumng-selectmode .forumng-feedlinks,
+.forumng-selectmode #forumng-arrowback,
+.forumng-selectmode .forumng-info .forumng-flag .forumng-flagpost,
+.forumng-selectmode .forumng-edit {
+    display:none;
+}
+
+.forumng-selectintro {
+    padding: 0.5em 0 0;
+    margin: 0 0 1em;
+}
+.forumng-selectoutro {
+    background:white;
+    padding-top: 1em;
+}
+.forumng-buttons input,
+.forumng-selectoutro input {
+    margin-right: 10px;
+}
+.forumng-selectmode .forumng-post {
+    background-color:white;
+}
+.forumng-selectmode .forumng-post.forumng-deselected {
+    background-color:transparent;
+}
+
+.forumng-markread a.disabled {
+	pointer-events: none;
+}
+
+.forumng-message {
+    overflow: auto;
+}
+/*
+// Edit/reply form within discussion
+////////////////////////////////////
+*/
+#page-mod-forumng-editpost .yui3-panel-hidden div {
+    display: none;
+}
+#page-mod-forumng-discuss .iframecon {
+    overflow: auto;
+    -webkit-overflow-scrolling: touch;
+    width: 100%;
+}
+#page-mod-forumng-discuss iframe.forumng-inlineform {
+    border: none;
+    overflow-x: auto;
+    width: 100%;
+}
+.forumng-iframe#page-mod-forumng-editpost {
+    min-width: inherit;
+}
+.gecko.forumng-iframe#page-mod-forumng-editpost .mform {
+    min-width: 605px;
+}
+.forumng-iframe#page-mod-forumng-editpost fieldset {
+    border: none;
+    padding: 0;
+    margin: 0;
+}
+.forumng-iframe#page-mod-forumng-editpost textarea {
+    width: 99%;
+}
+.forumng-iframe#page-mod-forumng-editpost {
+    padding: 0;
+}
+.forumng-iframe#page-mod-forumng-editpost .advancedbutton {
+    margin: 0;
+}
+.forumng-iframe#page-mod-forumng-editpost .fcontainer {
+    margin-left: 0;
+}
+.forumng-iframe#page-mod-forumng-editpost .dndupload-target {
+    padding-top: 0;
+}
+#page-mod-forumng-editpost .fp-pathbar,
+.forumng-iframe#page-mod-forumng-editpost .fp-pathbar {
+    display: none;
+}
+.forumng-iframe#page-mod-forumng-editpost #fitem_id_message .felement.feditor,
+.forumng-iframe#page-mod-forumng-editpost #fitem_id_subject .felement,
+.forumng-iframe#page-mod-forumng-editpost #fitem_id_attachments .felement {
+    clear: left;
+    margin-left: 0;
+}
+.forumng-iframe#page-mod-forumng-editpost #fitem_id_subject input {
+	max-width: 90%;
+	min-width: 80%;
+}
+
+.forumng-iframe#page-mod-forumng-editpost #fgroup_id_buttonar .felement {
+    clear: left;
+    margin-left: 0;
+}
+.forumng-iframe#page-mod-forumng-editpost #fitem_id_subject .fitemtitle,
+.forumng-iframe#page-mod-forumng-editpost #fitem_id_message .fitemtitle,
+.forumng-iframe#page-mod-forumng-editpost #fitem_id_attachments .fitemtitle {
+    margin-left: 0;
+    text-align: left;
+    font-weight: bold;
+}
+.mobiletheme.forumng-iframe#page-mod-forumng-editpost #fitem_id_subject .felement,
+.mobiletheme.forumng-iframe#page-mod-forumng-editpost #fitem_id_message .felement.feditor,
+.mobiletheme.forumng-iframe#page-mod-forumng-editpost #fitem_id_attachments .felement,
+.mobiletheme.forumng-iframe#page-mod-forumng-editpost #fitem_id_subject .fitemtitle,
+.mobiletheme.forumng-iframe#page-mod-forumng-editpost #fitem_id_message .fitemtitle,
+.mobiletheme.forumng-iframe#page-mod-forumng-editpost #fitem_id_attachments .fitemtitle,
+.mobiletheme.forumng-iframe#page-mod-forumng-editpost #fgroup_id_buttonar .felement {
+    margin-left: 0;
+}
+.forumng-iframe#page-mod-forumng-editpost .mform #fitem_id_message textarea {
+    max-width: 100%;
+}
+
+#page-mod-forumng-discuss a:link.forumng-disabled,
+#page-mod-forumng-discuss a:visited.forumng-disabled,
+#page-mod-forumng-discuss a:hover.forumng-disabled,
+#page-mod-forumng-discuss a:active.forumng-disabled {
+    color: #888;
+    text-decoration: none;
+}
+
+.forumng-timeoutover {
+    color: red;
+}
+
+/*
+// Edit/reply form elsewhere
+////////////////////////////
+*/
+
+.forumng-form-attachments {
+    margin: 0;
+    display: block;
+    padding: 0;
+}
+.forumng-form-attachments li {
+    display: block;
+    list-style-type: none;
+    margin: 0;
+    padding: 0;
+}
+.forumng-deletefilecheck {
+    font-size: 0.85em;
+}
+
+.forumng-draftexists {
+    width: 80%;
+    margin: 1em auto;
+    font-weight: bold;
+}
+
+
+/*
+// Ratings within discussion
+////////////////////////////
+*/
+
+.forumng-ratings {
+    display:inline;
+    font-size: 0.85em;
+}
+.forumng-ratings select,
+.forumng-ratings input {
+    font-size: 1.0em;
+}
+
+.forumng-ratings .forumng-rating {
+    display:inline;
+    margin-right: 0.5em;
+}
+.forumng-ratings.forumng-ratings-jsenabled {
+    display:inline;
+}
+.forumng-ratings .forumng-editrating {
+    display:inline;
+}
+
+.forumng-ratings img {
+    vertical-align:-3px;
+}
+form.markread input {
+    font-size: 0.85em;
+}
+
+.forumng-ratings-standard {
+	float: left;
+}
+
+/*
+// Confirm dialog within discussion
+///////////////////////////////////
+
+// Note: Dialog width including padding etc. must be 350 pixels
+*/
+.forumng-confirmdialog div.forumng-buttons input[type='button'] {
+    margin-bottom: 10px;
+}
+
+.forumng-confirmdialog {
+    background: white;
+    border: 1px solid #aaa;
+    padding: 10px;
+}
+
+.forumng-confirmdialog .forumng-message {
+    margin-bottom: 10px;
+    outline-style: none;
+}
+
+.forumng-confirmdialog h4 {
+    margin: 0 0 0.5em;
+    font-size: 100%;
+}
+
+.forumng-fadepanel {
+    background: black;
+}
+
+.forumng-highlightbox {
+    border: 2px solid yellow;
+}
+
+/*
+// Features section (discussion)
+////////////////////////////////
+*/
+
+#forumng-features {
+    font-size: 0.85em;
+    margin-top: 2em;
+    line-height: 3;
+}
+#page-mod-forumng-view #forumng-features {
+    margin-top: 1em;
+}
+
+#forumng-features form {
+    margin-right: 1em;
+}
+#forumng-features form,
+#forumng-features div,
+#forumng-buttons form,
+#forumng-buttons div {
+    display:inline;
+}
+#forumng-features .forumng-highlight {
+    background: #FFD991;
+    padding: 0.7em 0.5em;
+}
+
+#forumng-features .forum-feature-edittags {
+    display: inline-block;
+}
+
+#forumng-features .forum-feature-edittags form {
+    margin-left: 1em;
+}
+
+/*
+// Split posts form
+///////////////////
+*/
+
+.forumng-exampleposts {
+    margin-top:2em;
+}
+
+/*
+// History view
+///////////////
+*/
+
+#page-mod-forumng-history h2 {
+    font-size: 1.0em;
+    margin:1em 0;
+}
+
+/*
+// Readers list
+///////////////
+*/
+
+#forumng-groupselector {
+    margin-bottom: 1em;
+    font-size: 0.85em
+}
+#forumng-groupselector input,
+#forumng-groupselector select {
+    font-size: 1.0em;
+}
+#page-mod-forumng-feature-readers-readers .generaltable {
+    margin-top: 1em;
+    margin-bottom: 1em;
+}
+
+/*
+// Subscribers list
+///////////////////
+*/
+
+#page-mod-forumng-subscribers .generaltable {
+    margin-top: 1em;
+    margin-bottom: 1em;
+}
+
+#page-mod-forumng-subscribers #forumng-buttons {
+    margin-bottom: 1em;
+}
+
+/*
+// Add attachment
+/////////////////
+*/
+
+#page-mod-forumng-addattachment,
+#page-mod-forumng-addattachment #page {
+    min-width: 370px;
+}
+
+.ie#page-mod-forumng-addattachment #page {
+    width: auto;
+}
+
+#page-mod-forumng-addattachment h1 {
+    font-size: 0.85em;
+    margin: 0;
+}
+
+#page-mod-forumng-addattachment form {
+  margin:0;
+}
+
+#page-mod-forumng-addattachment #content {
+    margin: 4px;
+}
+
+.forumng-addattachment-file {
+    float:left;
+}
+
+.forumng-addattachment-submit {
+    float:left;
+    margin-left: 8px;
+}
+
+.forumng-addattachment-max {
+    clear:both;
+    font-size:0.85em;
+}
+
+#page-mod-forumng-addattachment .notifyproblem {
+    margin: 0 0 0.5em;
+    padding: 0;
+    text-align: left;
+}
+
+#page-mod-forumng-addattachment .notifyproblem br {
+    display:none;
+}
+
+/*
+// Forward email
+////////////////
+*/
+
+#page-mod-forumng-feature-forward-forward .generalbox {
+    width:50%;
+    margin:1em auto;
+}
+#page-mod-forumng-feature-forward-forward .generalbox h2 {
+    margin:0;
+    font-size:1em;
+}
+.forumng-showemail {
+    margin: 2em 0;
+}
+
+/*
+// Printable view
+/////////////////
+*/
+#page-mod-forumng-feature-print-print .forumng-showprintable {
+    margin: 2em 0;
+}
+#page-mod-forumng-feature-print-print .forumng-printable-header {
+    border-bottom:1px dotted #aaa;
+    padding-bottom:4px;
+    margin-bottom:2em;
+}
+#page-mod-forumng-feature-print-print .forumng-printable-backlink {
+    float:left;
+}
+#page-mod-forumng-feature-print-print .forumng-printable-date {
+    float:right;
+}
+
+#page-mod-forumng-feature-print-print .forumng-donotprint {
+    margin: 1em 0;
+}
+
+@media print {
+    .forumng-donotprint {
+        display: none;
+    }
+}
+
+/*
+// Settings form
+////////////////
+*/
+
+#page-mod-forumng-mod .forumng-convertoffer {
+    margin-top: 2em;
+}
+
+.forumng-show-dates {
+    margin-bottom: 0.5em;
+    padding: 5px;
+    border: 1px dotted #555;
+}
+
+#forumng-reportingon.generalbox {
+    padding: 5px;
+}
+
+/*
+// Search page
+//////////////
+*/
+
+#page-mod-forumng-search h2 {
+clear: left;
+margin-top: 0;
+padding-top: 1em;
+}
+
+/*
+// forumngfeature_discussion_list
+/////////////////////////
+*/
+.forumng-userpostsheading {
+    margin-bottom: 0.5em;
+}
+.forumng-userpoststable {
+    margin-bottom: 0.5em;
+}
+.forumng-userposts {
+    margin-bottom: 0.5em;
+}
+
+#page-mod-forumng-feature-userposts-user .forumng-post {
+    margin: 0.5em 0 1em;
+}
+
+.ie7 .forumng-manualmark {
+    position: relative;
+    top: -0.4em;
+}
+.forumng-manualmark .iconhelp {
+    vertical-align: -3px;
+}
+
+#delete-form-html {
+    display: none;
+}
+
+/*
+// forumfeature save grades
+///////////////////////////
+*/
+.savegradeform .savegradesbutton {
+    margin-bottom: 10px;
+}
+#page-mod-forumng-feature-userposts-list .generaltable {
+    margin-top: 10px;
+    margin-bottom: 10px;
+}
+#page-mod-forumng-feature-userposts-list .generaltable td {
+    color: gray;
+}
+#page-mod-forumng-feature-userposts-list .generaltable td div.active {
+    color: black;
+}
+
+/*
+// forumfeature deletedposts
+////////////////////////////
+*/
+#page-mod-forumng-feature-deletedposts-deletedpostslist .individualselector,
+#page-mod-forumng-feature-deletedposts-list .individualselector {
+    display:inline;
+    margin-right:0.5em;
+    margin-bottom:0.5em;
+    white-space: nowrap;
+}
+/*
+// Discusion selector
+*/
+.path-mod-forumng-feature #discsel .generaltable {
+    width: 100%;
+}
+.path-mod-forumng-feature #discsel .generaltable td.dselect {
+    text-align: center;
+}
+.forumng-discussion-short.forumng-deselected  td {
+    color: #CCC;
+}
+.forumng-discussion-short td .dselectorcheck {
+    float: left;
+}
+
+/*
+// Discussion show tags
+///////////////////////
+*/
+.forumng_discuss_tags a {
+    text-decoration:none;
+}
+ .forumng_discuss_tags a hover {
+    text-decoration:underline;
+}
+.forumng_discuss_tags {
+    font-size: 0.85em;
+    margin-bottom:0.7em;
+    font-weight: normal;
+}
+
+.forumng_subinfo_mail {
+	font-size: .9em;
+}
+
+@media (min-width: 1200px) {
+    /* Checkbox align on wide (ForumNG - feature copy multiple discussions) */
+    body#page-mod-forumng-feature-copy-copyall .mform:not(.unresponsive) #id_hidelater {
+        margin-top: -4px;
+    }
+}
diff --git a/mod/forumng/subscribe.php b/mod/forumng/subscribe.php
new file mode 100644
index 0000000..dcea8c1
--- /dev/null
+++ b/mod/forumng/subscribe.php
@@ -0,0 +1,409 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This script handles requests to subscribe/unsubscribe from a forum or a discussion.
+ * It operates in two modes: 'go back' mode, where after subscribing it
+ * redirects, and 'full' mode (normally used only for links in email) where
+ * it displays information about the action.
+ *
+ * Specify either course (id) or (course-module) id or discussion (d). If you specify a course
+ * then it subscribes/unsubscribes to everything you have access to on that
+ * course.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+$courseid = optional_param('course', 0, PARAM_INT);
+$cmid = optional_param('id', 0, PARAM_INT);
+$discussionid = optional_param('d', 0, PARAM_INT);
+$groupid = optional_param('g', 0, PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+
+$pageparams = array();
+if ($courseid) {
+    $pageparams['course'] = $courseid;
+}
+if ($cmid) {
+    $pageparams['id'] = $cmid;
+}
+if ($discussionid) {
+    $pageparams['d'] = $discussionid;
+}
+if ($groupid) {
+    $pageparams['g'] = $groupid;
+}
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+$pageurl = new moodle_url('/mod/forumng/subscribe.php', $pageparams);
+
+$requestingsubscribe = optional_param('submitsubscribe', '', PARAM_RAW);
+$requestingunsubscribe = optional_param('submitunsubscribe', '', PARAM_RAW);
+$requestingsubscribegroup = optional_param('submitsubscribe_thisgroup', '', PARAM_RAW);
+$requestingunsubscribegroup = optional_param('submitunsubscribe_thisgroup', '', PARAM_RAW);
+if ($_SERVER['REQUEST_METHOD'] == 'GET') {
+    // Get request always does unsubscribe
+    $requestingunsubscribe = 'y';
+    $requestingsubscribe = '';
+}
+
+// Only one of the $courseid, $discussionid and $cmid must be true, also subscribe/unsubscribe.
+$options = ($courseid ? 1 : 0) + ($cmid ? 1 : 0) + ($discussionid ? 1 : 0);
+$subscribeoptions = ($requestingsubscribe ? 1 : 0) + ($requestingunsubscribe ? 1 : 0) +
+    ($requestingsubscribegroup ? 1 : 0) + ($requestingunsubscribegroup ? 1 : 0);
+// if group is set check that:
+// - subscribe/uns-group must be set
+// - cmid is set
+// - discussionid is not set
+// If group is not set, check that:
+// - subscribe/uns_group is NOT set
+if ($groupid && ($requestingsubscribegroup || $requestingunsubscribegroup) &&
+        $cmid && !$discussionid) {
+    $groupok = true;
+} else if (!($groupid || $requestingunsubscribegroup || $requestingsubscribegroup)) {
+    $groupok = true;
+} else {
+    $groupok = false;
+}
+if ($options != 1 || $subscribeoptions != 1 || !$groupok) {
+    print_error('error_subscribeparams', 'forumng');
+}
+
+// Permitted values 'index', 'view', 'discuss', nothing
+$back = optional_param('back', '', PARAM_ALPHA);
+if (!preg_match('~^(index|view|discuss)$~', $back)) {
+    $back = '';
+}
+if (($back=='index' && !($cmid || $courseid))) {
+    $back = '';
+}
+if (($back=='view' && !$cmid)) {
+    $back = '';
+}
+if (($back=='discuss' && !$discussionid)) {
+    $back = '';
+}
+global $USER;
+$userid = $USER->id;
+
+/**
+ * Return a list of groups the user belongs to that apply to this forum (same grouping)
+ * @param int $userid
+ * @param int $forumngid
+ * @return an array of group lists or an empty array
+ */
+function get_group_list($userid, $forumngid) {
+    global $DB;
+    $sqlgroup = "
+SELECT
+    g.id AS groupid
+FROM
+    {forumng} f
+    INNER JOIN {course_modules} cm on f.id = cm.instance
+    INNER JOIN {modules} m on cm.module = m.id
+    INNER JOIN {groups_members} gm ON gm.userid = ?
+    INNER JOIN {groups} g ON gm.groupid = g.id AND g.courseid = cm.course
+    LEFT JOIN {groupings_groups} gg ON gg.groupid = g.id AND cm.groupingid = gg.groupingid
+WHERE
+    f.id = ?
+    AND m.name = 'forumng'
+    AND (cm.groupingid = 0 or gg.id IS NOT NULL)";
+
+    $rs = $DB->get_recordset_sql($sqlgroup, array($userid, $forumngid));
+    $results = array();
+    foreach ($rs as $rec) {
+        $results[] = $rec->groupid;
+    }
+    $rs->close();
+    return $results;
+}
+
+// Decide the subscription confirmation string for not directing.
+if ($requestingsubscribe) {
+    $subscribe = true;
+} else {
+    $subscribe = false;
+}
+$confirmtext = get_string(
+    $subscribe ? 'subscribe_already' : 'unsubscribe_already', 'forumng');
+
+// Handle single discussion
+if ($discussionid) {
+    $discussion = mod_forumng_discussion::get_from_id($discussionid, $cloneid);
+    $discussion->require_view();
+    $forum = $discussion->get_forum();
+    if (!$discussion->can_subscribe() && !$discussion->can_unsubscribe()) {
+        print_error('error_cannotchangediscussionsubscription', 'forumng');
+    }
+    if ($requestingsubscribe && $discussion->can_subscribe()) {
+        $discussion->subscribe();
+        $confirmtext = get_string('subscribe_confirm', 'forumng');
+    } else if ($requestingunsubscribe && $discussion->can_unsubscribe()) {
+        $discussion->unsubscribe();
+        $confirmtext = get_string('unsubscribe_confirm', 'forumng');
+    }
+}
+
+// Handle single forum
+if ($cmid) {
+    $forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+    $forumngid = $forum->get_id();
+    $grouplist = -1;
+    if ($groupid) {
+        $forum->require_view($groupid);
+    } else {
+        // If it is a separate groups forum and current user does not have access all groups
+        $context = context_module::instance($cmid);
+        $aaguser = has_capability('moodle/site:accessallgroups', $context);
+        if ($forum->get_group_mode() == SEPARATEGROUPS && !$aaguser) {
+            $grouplist = get_group_list($userid, $forumngid);
+            // Get list of groups that this user belongs to that apply to this
+            // forum (same grouping). Call require_view on the first group in this list, or
+            // on NO_GROUPS if they don't have any groups
+            if (count($grouplist) == 0) {
+                $forum->require_view(mod_forumng::NO_GROUPS);
+            } else {
+                $forum->require_view($grouplist[0]);
+            }
+
+        } else {
+            // Require access to all groups (if any)
+            $forum->require_view(mod_forumng::NO_GROUPS);
+        }
+    }
+
+    if (isguestuser()) {
+        // This section allows users who are responding to the unsubscribe
+        // email link yet who may have already got guest access to the site.
+        // The display of the yes/no option is similar to other module behaviour
+        // though we could just redirect to login instead.
+        $wwwroot = $CFG->wwwroot.'/login/index.php';
+        if (!empty($CFG->loginhttps)) {
+            $wwwroot = str_replace('http:', 'https:', $wwwroot);
+        }
+        $out = $forum->init_page($pageurl, get_string('unsubscribeshort', 'forumng'));
+        print $out->header();
+
+        print $out->confirm(
+                get_string('noguestsubscribe', 'forumng').'<br /><br />'.get_string('liketologin'),
+                new single_button(new moodle_url('/login/', array()),
+                    get_string('yes'), 'get'),
+                new single_button(new moodle_url('/', array()),
+                    get_string('no'), 'get'));
+
+        print $out->footer();
+        exit;
+    }
+
+    if (!$forum->can_change_subscription()) {
+        print_error('error_cannotchangesubscription', 'forumng');
+    }
+    $subscriptioninfo = $forum->get_subscription_info();
+    $discussionidcount = count($subscriptioninfo->discussionids);
+    $groupidcount = count($subscriptioninfo->groupids);
+    if (!$forum->get_group_mode()) {
+        // No group mode.
+        if ($requestingsubscribegroup || $requestingunsubscribegroup) {
+            print_error('error_cannotchangegroupsubscription', 'forumng');
+        }
+        if ($subscriptioninfo->wholeforum) {
+            // Subscribed to the entire forum.
+            $subscribed = mod_forumng::FULLY_SUBSCRIBED;
+        } else if ($discussionidcount == 0) {
+            $subscribed = mod_forumng::NOT_SUBSCRIBED;
+        } else {
+            $subscribed = mod_forumng::PARTIALLY_SUBSCRIBED;
+        }
+        if ($requestingsubscribe && $subscribed != mod_forumng::FULLY_SUBSCRIBED) {
+            $forum->subscribe();
+            $confirmtext = get_string('subscribe_confirm', 'forumng');
+        } else if ($requestingunsubscribe && $subscribed != mod_forumng::NOT_SUBSCRIBED) {
+            $forum->unsubscribe();
+            $confirmtext = get_string('unsubscribe_confirm', 'forumng');
+        }
+    } else {
+        if ($subscriptioninfo->wholeforum) {
+            if ($requestingunsubscribe) {
+                $forum->unsubscribe();
+                $confirmtext = get_string('unsubscribe_confirm', 'forumng');
+            } else {
+                print_error('error_invalidsubscriptionrequest', 'forumng');
+            }
+        } else if ($discussionidcount != 0 || $groupidcount != 0 ) {
+            // Possible for subscribing to /unsubscribing from forum/group.
+            if ($requestingsubscribe) {
+                if ($grouplist == -1) {
+                    $forum->subscribe();
+                } else {
+                    foreach ($grouplist as $groupid) {
+                        $forum->subscribe(0, $groupid);
+                    }
+                }
+                $confirmtext = get_string('subscribe_confirm', 'forumng');
+            } else if ($requestingunsubscribe) {
+                $forum->unsubscribe();
+                $confirmtext = get_string('unsubscribe_confirm', 'forumng');
+            } else if ($requestingsubscribegroup) {
+                // Check whether the user has subscribed to this group or not
+                $cansubscribetogroup = true;
+                foreach ($subscriptioninfo->groupids as $id) {
+                    if ($id == $groupid) {
+                        $cansubscribetogroup = false;
+                        break;
+                    }
+                }
+                if ($cansubscribetogroup) {
+                    $forum->subscribe(0, $groupid);
+                    $confirmtext = get_string('subscribe_confirm_group', 'forumng');
+                } else {
+                    print_error('subscribe_already_group', 'forumng');
+                }
+            } else if ($requestingunsubscribegroup) {
+                $canunsubscribefromgroup = false;
+                foreach ($subscriptioninfo->groupids as $id) {
+                    if ($id == $groupid) {
+                        $canunsubscribefromgroup = true;
+                        break;
+                    }
+                }
+                // Check if subscribed to any discussions belong to this group.
+                foreach ($subscriptioninfo->discussionids as $id => $grpid) {
+                    if ($grpid == $groupid) {
+                        $canunsubscribefromgroup = true;
+                        break;
+                    }
+                }
+                if ($canunsubscribefromgroup) {
+                    $forum->unsubscribe(0, $groupid);
+                    $confirmtext = get_string('unsubscribe_confirm_group', 'forumng');
+                } else {
+                    print_error('unsubscribe_already_group', 'forumng');
+                }
+            } else {
+                print_error('error_invalidsubscriptionrequest', 'forumng');
+            }
+
+        } else {
+            // Not subscribed yet
+            if ($requestingsubscribe) {
+                // TODO Change to take account of group list if there is one
+                if ($grouplist == -1) {
+                    $forum->subscribe();
+                } else {
+                    foreach ($grouplist as $groupid) {
+                        $forum->subscribe(0, $groupid);
+                    }
+                }
+                $confirmtext = get_string('subscribe_confirm', 'forumng');
+            } else if ($requestingsubscribegroup && $groupid) {
+                $forum->subscribe(0, $groupid);
+                $confirmtext = get_string('subscribe_confirm_group', 'forumng');
+            } else {
+                print_error('error_invalidsubscriptionrequest', 'forumng');
+            }
+        }
+    }
+
+}
+
+// Handle whole course
+if ($courseid) {
+    $course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+    require_login($course);
+    $forums = mod_forumng::get_course_forums($course, 0, mod_forumng::UNREAD_NONE, array(), true);
+
+    foreach ($forums as $forum) {
+        if (!$forum->can_change_subscription()) {
+            continue;
+        }
+        $subscriptioninfo = $forum->get_subscription_info();
+        $discussionidcount = count($subscriptioninfo->discussionids);
+        if ($subscriptioninfo->wholeforum) {
+            // Subscribed to the entire forum.
+            $subscribed = mod_forumng::FULLY_SUBSCRIBED;
+        } else if ($discussionidcount == 0) {
+            $subscribed = mod_forumng::NOT_SUBSCRIBED;
+        } else {
+            $subscribed = mod_forumng::PARTIALLY_SUBSCRIBED;
+        }
+        if ($forum->can_change_subscription()) {
+            if ($requestingsubscribe && $subscribed != mod_forumng::FULLY_SUBSCRIBED) {
+                 // If this is separate groups and user does not have access all groups,
+                // then make a group list
+                $grouplist = -1;
+                // if separate groups and not access all groups , set to list of groups
+                $context = $forum->get_context();
+                $aaguser = has_capability('moodle/site:accessallgroups', $context);
+                if ($forum->get_group_mode() == SEPARATEGROUPS && !$aaguser) {
+                    $grouplist = get_group_list($userid, $forumngid);
+                }
+                if ($grouplist == -1) {
+                    $forum->subscribe();
+                } else {
+                    foreach ($grouplist as $groupid) {
+                        $forum->subscribe(0, $groupid);
+                    }
+                }
+                $confirmtext = get_string('subscribe_confirm', 'forumng');
+            } else if ($requestingunsubscribe && $subscribed != mod_forumng::NOT_SUBSCRIBED) {
+                $forum->unsubscribe();
+                $confirmtext = get_string('unsubscribe_confirm', 'forumng');
+            }
+        }
+    }
+}
+
+// Redirect back
+$backurl ='';
+if ($back == 'index') {
+    if (!$courseid) {
+        $courseid = $forum->get_course()->id;
+    }
+    redirect('index.php?id=' . $courseid);
+}
+if ($back == 'view') {
+    redirect($forum->get_url(mod_forumng::PARAM_PLAIN));
+}
+if ($back == 'discuss') {
+    redirect('discuss.php?' . $discussion->get_link_params(mod_forumng::PARAM_PLAIN));
+}
+
+// Not redirecting? OK, confirm
+if ($cmid || $discussionid) {
+    $backurl = $forum->get_url(mod_forumng::PARAM_HTML);
+    $out = $forum->init_page($pageurl, get_string(
+        $subscribe ? 'subscribeshort' : 'unsubscribeshort', 'forumng'));
+    print $out->header();
+    print $out->notification($confirmtext, 'success');
+    print $out->continue_button($backurl);
+    print $out->footer();
+} else {
+    $backurl = $CFG->wwwroot . '/course/view.php?id=' . $courseid;
+    $PAGE->set_url($pageurl);
+    $PAGE->set_context(context_course::instance($courseid));
+    $PAGE->set_heading($COURSE->fullname);
+    $PAGE->set_title($COURSE->shortname);
+    $out = forum_utils::get_renderer();
+    print $out->header();
+    print $out->notification($confirmtext, 'success');
+    print $out->continue_button($backurl);
+    print $out->footer();
+}
diff --git a/mod/forumng/subscribers.php b/mod/forumng/subscribers.php
new file mode 100644
index 0000000..56f7c67
--- /dev/null
+++ b/mod/forumng/subscribers.php
@@ -0,0 +1,264 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Show all subscribers to the forum.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+require_once('mod_forumng.php');
+
+function my_link_sort($a, $b) {
+    $a = core_text::strtolower(substr($a->link, strpos($a->link, '>')+1));
+    $b = core_text::strtolower(substr($b->link, strpos($b->link, '>')+1));
+    return strcmp($a, $b);
+}
+
+$cmid = required_param('id', PARAM_INT);
+$cloneid = optional_param('clone', 0, PARAM_INT);
+$pageparams = array('id' => $cmid);
+if ($cloneid) {
+    $pageparams['clone'] = $cloneid;
+}
+
+$forum = mod_forumng::get_from_cmid($cmid, $cloneid);
+$cm = $forum->get_course_module();
+$course = $forum->get_course();
+
+$groupid = mod_forumng::get_activity_group($cm, true);
+$forum->require_view($groupid);
+if (!$forum->can_view_subscribers()) {
+    print_error('subscribers_nopermission', 'forumng');
+}
+$canmanage = $forum->can_manage_subscriptions();
+
+// Get subscribers
+$subscriptionoption = $forum->get_effective_subscription_option();
+if ($subscriptionoption == mod_forumng::SUBSCRIPTION_FORCED) {
+    $forcedsubscribers = $forum->get_auto_subscribers();
+} else {
+    $forcedsubscribers = array();
+}
+if ($forum->is_forced_to_subscribe()) {
+    $forcedsubscribers = $forum->get_auto_subscribers();
+}
+
+// If they clicked the unsubscribe button, do something different
+if (optional_param('unsubscribe', '', PARAM_RAW)) {
+    if (!$canmanage) {
+        print_error('unsubscribe_nopermission', 'forumng');
+    }
+
+    // Header
+    $thisurl = new moodle_url('/mod/forumng/subscribers.php', $pageparams);
+    $out = $forum->init_page($thisurl, get_string('unsubscribeselected', 'forumng'));
+    print $out->header();
+
+    $confirmarray = array('id'=>$cmid, 'confirmunsubscribe'=>1, 'clone'=>$cloneid);
+    $list = '<ul>';
+    foreach (array_keys($_POST) as $key) {
+        $matches = array();
+        if (preg_match('~^user([0-9]+)$~', $key, $matches)) {
+            $confirmarray[$key] = 1;
+            $user = $DB->get_record('user', array('id' => $matches[1]),
+                '*', MUST_EXIST);
+            $list .= '<li>' . $forum->display_user_link($user) . '</li>';
+        }
+    }
+    $list .= '</ul>';
+
+    print $out->confirm(get_string('confirmbulkunsubscribe', 'forumng'),
+            new single_button(new moodle_url('/mod/forumng/subscribers.php', $confirmarray),
+                get_string('unsubscribeselected', 'forumng'), 'post'),
+            new single_button(new moodle_url('/mod/forumng/subscribers.php',
+                array('id'=>$cmid, 'clone'=>$cloneid)),
+                get_string('cancel'), 'get'));
+
+    print $list;
+
+    print $out->footer();
+    exit;
+}
+if (optional_param('confirmunsubscribe', 0, PARAM_INT)) {
+    if (!$canmanage) {
+        print_error('unsubscribe_nopermission', 'forumng');
+    }
+    $subscribers = $forum->get_subscribers($groupid);
+    $transaction = $DB->start_delegated_transaction();
+    foreach (array_keys($_POST) as $key) {
+        $matches = array();
+        if (preg_match('~^user([0-9]+)$~', $key, $matches)) {
+            // Use the subscribe list to check this user is on it. That
+            // means they can't unsubscribe users in different groups.
+            if (array_key_exists($matches[1], $subscribers)) {
+                $forum->unsubscribe($matches[1]);
+            }
+        }
+    }
+    $transaction->allow_commit();
+    redirect('subscribers.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+}
+
+$thisurl = new moodle_url('/mod/forumng/subscribers.php', $pageparams);
+$out = $forum->init_page($thisurl, get_string('subscribers', 'forumng'));
+print $out->header();
+$forum->print_js();
+
+// Display group selector if required
+groups_print_activity_menu($cm, $CFG->wwwroot . '/mod/forumng/subscribers.php?' .
+        $forum->get_link_params(mod_forumng::PARAM_PLAIN));
+
+// Get all subscribers
+$subscribers = $forum->get_subscribers();
+$individualgroup = $groupid != mod_forumng::ALL_GROUPS && $groupid != mod_forumng::NO_GROUPS;
+
+// Remove the subscribers to other groups and discussions which don't belong to this group.
+if ($individualgroup) {
+    foreach ($subscribers as $key => $user) {
+        $removeuser = true;
+        if (array_key_exists($groupid, $user->groupids)) {
+            $removeuser = false;
+        }
+        if (in_array($groupid, $user->discussionids)) {
+            $removeuser = false;
+        }
+        if ($user->wholeforum) {
+            $removeuser = false;
+        }
+        if ($removeuser) {
+            unset($subscribers[$key]);
+        }
+    }
+}
+if (count($subscribers) == 0) {
+    print '<p>' . get_string('nosubscribers' .
+        ($groupid==mod_forumng::ALL_GROUPS || $groupid==mod_forumng::NO_GROUPS
+        ? '' : 'group'), 'forumng') . '</p>';
+} else {
+    // Get name/link for each subscriber (this is used twice)
+    foreach ($subscribers as $user) {
+        $user->link = $forum->display_user_link($user);
+    }
+
+    // Sort subscribers into name order
+    uasort($subscribers, 'my_link_sort');
+
+    // Build table of subscribers
+    $table = new html_table;
+    $table->head = array(get_string('user'));
+    if ($CFG->forumng_showusername) {
+        $table->head[] = get_string('username');
+    }
+    if ($CFG->forumng_showidnumber) {
+        $table->head[] = get_string('idnumber');
+    }
+    $table->head[] = get_string('subscriptions', 'forumng');
+    $table->data = array();
+
+    if ($canmanage) {
+        // Note: This form has to be a post because if there are a lot of
+        // subscribers, the list will be too long to fit in a GET
+        print '<form action="subscribers.php" method="post"><div id="forumng-subscription-list">' .
+            $forum->get_link_params(mod_forumng::PARAM_FORM);
+    }
+
+    $gotsome = false;
+    foreach ($subscribers as $user) {
+        $row = array();
+        $name = $user->link;
+        if ($canmanage && !array_key_exists($user->id, $forcedsubscribers)) {
+            $name = "<input type='checkbox' name='user{$user->id}' " .
+                "value='1' id='check{$user->id}'/> " .
+                "<label for='check{$user->id}'>$name</label>";
+            $gotsome = true;
+        }
+        $row[] = $name;
+        if ($CFG->forumng_showusername) {
+            $row[] = htmlspecialchars($user->username);
+        }
+        if ($CFG->forumng_showidnumber) {
+            $row[] = htmlspecialchars($user->idnumber);
+        }
+        if ($user->wholeforum) {
+            $row[] = get_string('subscribeddiscussionall', 'forumng');
+        } else {
+            if ($individualgroup) {
+                $numberofdiscussions = 0;
+                foreach ($user->discussionids as $discussiongroupid) {
+                    if ($groupid == $discussiongroupid) {
+                        $numberofdiscussions++;
+                    }
+                }
+
+                if ($numberofdiscussions>0) {
+                    $numberofdiscussions = ($numberofdiscussions==1 ?
+                            get_string("numberofdiscussion", "forumng", $numberofdiscussions) :
+                            get_string("numberofdiscussions", "forumng", $numberofdiscussions)) .
+                            '<br />';
+                } else {
+                    $numberofdiscussions = '';
+                }
+                $grouplist = '';
+                foreach ($user->groupids as $id) {
+                    if ($id == $groupid) {
+                        $grouplist = get_string('subscribedthisgroup', 'forumng');
+                        break;
+                    }
+                }
+            } else {
+                $numberofdiscussions = count($user->discussionids);
+                if ($numberofdiscussions>0) {
+                    $numberofdiscussions = ($numberofdiscussions==1 ?
+                            get_string("numberofdiscussion", "forumng", $numberofdiscussions) :
+                            get_string("numberofdiscussions", "forumng", $numberofdiscussions)) .
+                            '<br />';
+                } else {
+                    $numberofdiscussions = '';
+                }
+                $grouplist = '';
+                if (count($user->groupids)) {
+                    foreach ($user->groupids as $id) {
+                        $grouplist .= groups_get_group_name($id) . '<br />';
+                    }
+                }
+            }
+
+            $row[] = $numberofdiscussions . $grouplist;
+        }
+        if ($user->link) {// CC Inline control structures are not allowed.
+            $table->data[] = $row;
+        }
+
+    }
+
+    print html_writer::table($table);
+
+    if ($canmanage) {
+        if ($gotsome) {
+            print '<div id="forumng-buttons"><input type="submit" ' .
+                'name="unsubscribe" value="' .
+                get_string('unsubscribeselected', 'forumng') . '" /></div>';
+        }
+        print '</div></form>';
+    }
+}
+
+print link_arrow_left($forum->get_name(), $forum->get_url(mod_forumng::PARAM_HTML));
+
+print $out->footer($course);
diff --git a/mod/forumng/tests/behat/basic.feature b/mod/forumng/tests/behat/basic.feature
new file mode 100644
index 0000000..6b092d2
--- /dev/null
+++ b/mod/forumng/tests/behat/basic.feature
@@ -0,0 +1,444 @@
+@mod @mod_forumng @ou @ou_vle @forumng_basic
+Feature: Add forumng activity and test basic functionality
+  In order to discuss topics with other users
+  As a teacher
+  I need to add forum activities to moodle courses
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+    And the following "activities" exist:
+      | activity | name            | introduction           | course | idnumber |
+      | forumng  | Test forum name | Test forum description | C1     | forumng1 |
+
+  Scenario: Access forum as student
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Then I should see "Test forum description"
+    And "Start a new discussion" "button" should exist
+
+  Scenario: Add discussions and check sorting and sticky
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I follow "Test forum name"
+    Then I should see "Discussion 1" in the ".forumng-subject" "css_element"
+    And "//td[1]//img" "xpath_element" should not exist in the "Discussion 1" "table_row"
+    And I should see "1" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[3]" "xpath_element"
+    Given I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | abcdefg |
+      | sticky | 1 |
+    And I follow "Test forum name"
+    Then I should see "Discussion 2" in the ".forumng-subject" "css_element"
+    And I should see "Discussion 2" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[1]" "xpath_element"
+    And "//td[1]//img" "xpath_element" should exist in the "Discussion 2" "table_row"
+    Given I add a discussion with the following data:
+      | Subject | Discussion 3 |
+      | Message | abcdefghijk |
+    And I follow "Test forum name"
+    # Check discussion 3 is second in list of discussions (allowing for extra divider row)
+    Then I should see "Discussion 3" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[3]//td[1]" "xpath_element"
+    # Check sorting
+    Given I follow "Discussion"
+    Then I should see "Discussion 2" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[1]" "xpath_element"
+    And I should see "Discussion 1" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[3]//td[1]" "xpath_element"
+    Given I follow "Last post"
+    Then I should see "Discussion 2" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[1]" "xpath_element"
+    And I should see "Discussion 3" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[3]//td[1]" "xpath_element"
+    Given I follow "Discussion 1"
+    And I reply to post "1" with the following data:
+      | Message | HELLO |
+    And I follow "Test forum name"
+    Then I should see "2" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[3]//td[4]" "xpath_element"
+    Given I follow "Posts"
+    Then I should see "Discussion 1" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[3]//td[1]" "xpath_element"
+    Given I follow "Posts"
+    Then I should see "Discussion 3" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[3]//td[1]" "xpath_element"
+
+  @mod_forumng_unread
+  Scenario: Check discussion post replies, unread and editing
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | REPLY1 |
+    And I reply to post "1" with the following data:
+      | Message | REPLY2 |
+    And I log out
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    Then I should see "(Unread posts)"
+    Given I follow "Test forum name"
+    Then I should see "3" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[4]" "xpath_element"
+    And I should see "3" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[2]" "xpath_element"
+    Given I follow "Discussion 1"
+    Then "li.forumng-edit" "css_element" should not exist
+    And "li.forumng-delete" "css_element" should not exist
+    And I should see "Collapse all posts"
+    And ".forumng-p2 a.forumng-parent" "css_element" should exist
+    And ".forumng-p2 a.forumng-next" "css_element" should exist
+    And ".forumng-p2 a.forumng-prev" "css_element" should exist
+    And ".forumng-p3 a.forumng-next" "css_element" should not exist
+    Given I reply to post "3" with the following data:
+      | Message | REPLY3 |
+    Then I should see "REPLY3"
+    And "li.forumng-edit" "css_element" should exist
+    And "li.forumng-delete" "css_element" should exist
+    Given I reply to post "4" with the following data:
+      | Message | REPLY4 |
+    Then I should see "REPLY4"
+    Given I edit post "4" with the following data:
+      | Message | REPLY3 EDIT |
+    Then I should see "REPLY3 EDIT"
+    Given I click on "#forumng-arrowback a" "css_element"
+    Then I should see "5" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[4]" "xpath_element"
+    And I should see "" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[2]" "xpath_element"
+    Given I press "Change"
+    Then I should see "Manually mark as read"
+    And I should see "" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[2]" "xpath_element"
+    Given I follow "Course 1"
+    Then I should not see "(unread posts)"
+    And I log out
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    Then I should see "(Unread posts)"
+    Given I follow "Test forum name"
+    And I should see "5" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[4]" "xpath_element"
+    And I should see "2" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[2]" "xpath_element"
+    When I press "Change"
+    Then I should see "Manually mark as read"
+    And I should see "2" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[2]" "xpath_element"
+    Given I follow "Discussion 1"
+    Then ".forumng-p4 .forumng-markread" "css_element" should exist
+    And ".forumng-p5 .forumng-markread" "css_element" should exist
+    When I click on ".forumng-p4 .forumng-markread a" "css_element"
+    Then ".forumng-p4 .forumng-markread" "css_element" should not exist
+    Given I follow "Test forum name"
+    And I should see "1" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[2]" "xpath_element"
+    Given I follow "Discussion 1"
+    When I click on ".forumng-p5 .forumng-markread a" "css_element"
+    Then ".forumng-p5 .forumng-markread" "css_element" should not exist
+    Given I follow "Test forum name"
+    And I should see "Manually mark as read"
+    And I should see "" in the "//table[contains(@class,'forumng-discussionlist')]/tbody/tr[1]//td[2]" "xpath_element"
+    Given I follow "Discussion 1"
+    When I press "Show readers"
+    Then I should see "Student 1"
+    And I should see "Admin User"
+    When I follow "Course 1"
+    Then I should not see "(Unread posts)"
+
+  Scenario: Deleting + locking discussions + posts
+    # NOTE - this is non-js specific, will fail if @javascript enabled on this scenario.
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | REPLY1 |
+    Given I click on "li.forumng-delete a" "css_element"
+    Then I should see "Are you sure you want to delete this post?"
+    Given I press "Cancel"
+    Then I should not see "Deleted post."
+    Given I click on "li.forumng-delete a" "css_element"
+    And I press "Delete"
+    Then I should see "Deleted post."
+    And "li.forumng-undelete" "css_element" should exist
+    Given I click on "li.forumng-undelete a" "css_element"
+    Then I should see "Are you sure you want to undelete this post?"
+    Given I press "Cancel"
+    Then I should see "Deleted post."
+    Given I click on "li.forumng-undelete a" "css_element"
+    And I press "Undelete"
+    Then I should not see "Deleted post."
+    Given I press "Lock"
+    Then I should see "Lock discussion: Discussion 1"
+    Given I set the following fields to these values:
+      | Message | A lock post |
+    And I press "Lock discussion"
+    Then I should see "This discussion is now closed"
+    And I should see "A lock post"
+    And "Reply" "link" should not exist
+    Given I follow "Test forum name"
+    Then ".forumng-subject.cell.c0 img" "css_element" should exist
+    Given I follow "Discussion 1"
+    And I press "Unlock"
+    Then I should see "Are you sure you want to unlock this discussion?"
+    Given I press "Cancel"
+    Then I should see "This discussion is now closed"
+    Given I press "Unlock"
+    And I press "Unlock"
+    Then "Lock" "button" should exist
+    And "Reply" "link" should exist
+
+  Scenario: Flagging (and removing flag) posts without javascript
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | REPLY1 |
+    And I reply to post "1" with the following data:
+      | Message | REPLY2 |
+    And I reply to post "1" with the following data:
+      | Message | REPLY3 |
+    Then I should see "Discussion 1"
+    And I should see "REPLY1"
+    And I should see "REPLY2"
+    And I should see "REPLY3"
+    And ".forumng-flagpost" "css_element" should exist
+
+    # Discussion1 post
+    And ".forumng-p1 .forumng-flagpost img" "css_element" should exist
+    # Reply1 post
+    And ".forumng-p2 .forumng-flagpost img" "css_element" should exist
+    # Reply3 post
+    And ".forumng-p4 .forumng-flagpost img" "css_element" should exist
+    And the "title" attribute of ".forumng-p1 .forumng-flagpost a" "css_element" should contain "Flag this post for future reference"
+
+    # Click to flag Reply1
+    And I click on ".forumng-p2 .forumng-flagpost a" "css_element"
+    # Click 'Expand' to access 'Flag' for Replies
+    And I expand post "3"
+    And I click on ".forumng-p3 .forumng-flagpost a" "css_element"
+    And I expand post "4"
+    And I click on ".forumng-p4 .forumng-flagpost a" "css_element"
+    And ".forumng-p4 .forumng-flagpost img" "css_element" should exist
+    And the "title" attribute of ".forumng-p2 .forumng-flagpost a" "css_element" should contain "Remove flag"
+
+    # Check flagged posts display ok on main forum page
+    And I follow "Test forum name"
+    And "3 flagged posts" "link" should exist
+    And ".forumng-flagged-link" "css_element" should exist
+    And ".forumng-flagged" "css_element" should exist
+    And "REPLY3" "link" should exist
+    And "REPLY2" "link" should exist
+    And "REPLY1" "link" should exist
+
+    # Click Reply3 to remove flag
+    And I click on "tr.r0 td.cell.c0 form.forumng-flag input[type=image]" "css_element"
+    Then "REPLY3" "link" should not exist
+    And "REPLY2" "link" should exist
+    And "REPLY1" "link" should exist
+
+    # Return to discussion page
+    And I follow "Discussion 1"
+    And the "title" attribute of ".forumng-p2 .forumng-flagpost a" "css_element" should contain "Remove flag"
+    # Click to un-flag Reply1
+    And I click on ".forumng-p2 .forumng-flagpost a" "css_element"
+    And I expand post "2"
+    And the "title" attribute of ".forumng-p2 .forumng-flagpost a" "css_element" should contain "Flag this post for future reference"
+
+    # Check numbner of flagged posts display on main forum page
+    And I follow "Test forum name"
+    And "1 flagged posts" "link" should exist
+    And ".forumng-flagged-link" "css_element" should exist
+    And ".forumng-flagged" "css_element" should exist
+    And "REPLY2" "link" should exist
+    And I log out
+
+
+  @javascript
+  Scenario: Flagging (and removing flag) posts with javascript
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 abc |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | REPLY1 |
+    And I reply to post "1" with the following data:
+      | Message | REPLY2 |
+    And I reply to post "1" with the following data:
+      | Message | REPLY3 |
+    Then I should see "Discussion 1 abc"
+    And I should see "REPLY1"
+    And I should see "REPLY2"
+    And I should see "REPLY3"
+
+    # Discussion1 post
+    And ".forumng-p1 .forumng-flagpost a img" "css_element" should exist
+    # Reply3 post
+    And ".forumng-p4 .forumng-flagpost a img" "css_element" should exist
+    And the "title" attribute of ".forumng-p4 .forumng-flagpost a" "css_element" should contain "Flag this post for future reference"
+
+    # Click to flag Reply1.
+    And I click on ".forumng-p2 .forumng-flagpost a" "css_element"
+    And I wait "1" seconds
+    # Click to flag Reply2.
+    And I click on ".forumng-p3 .forumng-flagpost a" "css_element"
+    And I wait "1" seconds
+    # Click to flag Reply3.
+    And I click on ".forumng-p4 .forumng-flagpost a" "css_element"
+    And the "title" attribute of ".forumng-p4 .forumng-flagpost a" "css_element" should contain "Remove flag"
+
+    # Check flagged posts display ok on main forum page
+    And I follow "Test forum name"
+    And "3 flagged posts" "link" should exist
+    And ".forumng-flagged-link" "css_element" should exist
+    And ".forumng-flagged" "css_element" should exist
+    And "REPLY3" "link" should exist
+    And "REPLY2" "link" should exist
+    And "REPLY1" "link" should exist
+
+    # Click to un-flag Reply3 from forum main page
+    And I click on "#forumng-flaggedposts .r0 form.forumng-flag input[type='image']" "css_element"
+    And I wait "1" seconds
+    And "REPLY3" "link" should not exist
+    And "REPLY2" "link" should exist
+    And "REPLY1" "link" should exist
+
+    # Return to discussion page
+    And I follow "Discussion 1 abc"
+    # Click to un-flag Reply1
+    And the "title" attribute of ".forumng-p2 .forumng-flagpost a" "css_element" should contain "Remove flag"
+    And I click on ".forumng-p2 .forumng-flagpost img" "css_element"
+    And the "title" attribute of ".forumng-p2 .forumng-flagpost a" "css_element" should contain "Flag this post for future reference"
+
+    # Check number of flagged posts display on main forum page.
+    And I follow "Test forum name"
+    And "1 flagged posts" "link" should exist
+    And ".forumng-flagged-link" "css_element" should exist
+    And ".forumng-flagged" "css_element" should exist
+    And "REPLY3" "link" should not exist
+    And "REPLY1" "link" should not exist
+    And "REPLY2" "link" should exist
+    And I log out
+
+  Scenario: Test subscription buttons
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    When I follow "Test forum name"
+    Then I should see "You do not currently receive messages from this forum"
+    And "Subscribe" "button" should exist
+    Given I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    Then I should see "You do not currently receive messages from this"
+    And "Subscribe to discussion" "button" should exist
+    Given I press "Subscribe to discussion"
+    Then I should see "Your email preferences"
+    And I should see "No digest (single email per forum post)"
+    And I should see "Pretty HTML format"
+    And "change" "link" should exist
+    And "Unsubscribe from discussion" "button" should exist
+    Given I follow "Test forum name"
+    Then I should see "You receive messages from some discussions in"
+    And I should see "Your email preferences ("
+    Given I press "Subscribe to whole forum"
+    Then I should see "You receive messages from this forum via email to"
+    And I should see "Your email preferences ("
+    And "Unsubscribe" "button" should exist
+    Given I follow "change"
+    And I should see "Forum preferences"
+    And I should see "Email digest type"
+    And I should see "Email format"
+    And I set the field "mailformat" to "0"
+    And I set the field "maildigest" to "1"
+    When I press "Save changes"
+    Then I should see "Complete (daily email with full posts)"
+    And I should see "Plain text format"
+    Given I follow "Discussion 1"
+    Then I should not see "You do not currently receive messages from this"
+    And I should not see "Your email preferences"
+    Given I follow "Test forum name"
+    And I press "Unsubscribe"
+    Then I should see "You do not currently receive messages from this"
+    Given I log out
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Edit settings"
+    And I set the field "subscription" to "3"
+    And I press "Save and display"
+    When I log out
+    And I log in as "student1"
+    And I follow "Course 1"
+    When I follow "Test forum name"
+    Then I should see "You receive messages from this forum via email to"
+    And I should see "This forum does not allow you to unsubscribe"
+
+  @javascript
+  Scenario: Test forum feature buttons on mobile
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Then "Show usage" "button" should be visible
+    And "Participation by user" "button" should be visible
+    And "..." "button" should not exist
+    Given I change window size to "320x768"
+    And I wait "1" seconds
+    Then "Show usage" "button" should not be visible
+    And "Participation by user" "button" should be visible
+    And "..." "button" should exist
+    Given I change window size to "large"
+    And I wait "1" seconds
+    Then "Show usage" "button" should be visible
+    And "Participation by user" "button" should be visible
+    And "..." "button" should not be visible
+
+  @javascript
+  Scenario: Add discussions and check button disable
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I reply to post "1" with the following data:
+      | Message | REPLY1 |
+    And I click on "Reply" "link"
+    Then ".forumng-p2 .forumng-delete a.forumng-disabled" "css_element" should exist
+    Then ".forumng-p2 .forumng-edit a.forumng-disabled" "css_element" should exist
+    Then ".forumng-p2 .forumng-replylink a.forumng-disabled" "css_element" should exist
+    And I switch to "forumng-post-iframe" iframe
+    And I press "Cancel"
+    Then ".forumng-p2 .forumng-delete a.forumng-disabled" "css_element" should not exist
+    Then ".forumng-p2 .forumng-edit a.forumng-disabled" "css_element" should not exist
+    Then ".forumng-p2 .forumng-replylink a.forumng-disabled" "css_element" should not exist
+
+  @javascript
+  Scenario: Edit discussion subject
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion original |
+      | Message | abc |
+    When I edit post "1" with the following data:
+      | Subject | Discussion edited |
+    And I should see "Discussion edited" in the ".forumng-subject" "css_element"
diff --git a/mod/forumng/tests/behat/behat_mod_forumng.php b/mod/forumng/tests/behat/behat_mod_forumng.php
new file mode 100644
index 0000000..c298a8e
--- /dev/null
+++ b/mod/forumng/tests/behat/behat_mod_forumng.php
@@ -0,0 +1,239 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Steps definitions related with the forumng activity.
+ *
+ * @package    mod_forumng
+ * @category   test
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// NOTE: no MOODLE_INTERNAL test here, this file may be required by behat before including /config.php.
+
+require_once(__DIR__ . '/../../../../lib/behat/behat_base.php');
+
+use Behat\Gherkin\Node\TableNode as TableNode;
+use Behat\Mink\Exception\ElementNotFoundException;
+
+/**
+ * forum-related steps definitions.
+ *
+ * @package    mod_forumng
+ * @category   test
+ * @copyright  2013 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class behat_mod_forumng extends behat_base {
+
+    /**
+     * Adds a discussion to the current forum with the provided data. You should be in the main view page.
+     * End point is the discussion page.
+     *
+     * @Given /^I add a discussion with the following data:$/
+     * @param TableNode $data
+     */
+    public function i_add_a_dicussion_with_the_following_data(TableNode $data) {
+        $this->execute('behat_forms::press_button', array(get_string('addanewdiscussion', 'mod_forumng')));
+        $this->execute('behat_forms::i_set_the_following_fields_to_these_values', array($data));
+        if ($this->running_javascript()) {
+            $this->execute('behat_general::wait_until_does_not_exists',
+                    array('#id_submitbutton[disabled]', 'css_element'));
+        }
+        $this->execute('behat_forms::press_button', array(get_string('postdiscussion', 'mod_forumng')));
+        if ($this->running_javascript()) {
+            $this->execute('behat_general::wait_until_the_page_is_ready', array());
+        }
+    }
+
+    /**
+     * Updates forumng post created date.
+     * Indentified by subject and using date format (YYYY-MM-DD OR YYYY/MM/DD).
+     * E.g. | Discussion 1 | 2015-01-20 |
+     * @Given /^I amend the forumng posts to new created date:$/
+     * @param TableNode $data
+     */
+    public function i_amend_the_forumng_posts_to_new_created_date(TableNode $data) {
+        global $DB;
+
+        foreach ($data->getRows() as $rowdata) {
+            $conditions = array('subject' => $rowdata[0]);
+            $idtochange = $DB->get_field('forumng_posts', 'id', $conditions);
+            if ($idtochange) {
+                $updateobject = new stdClass();
+                $updateobject->created = trim(strtotime(str_replace('/', '-', $rowdata[1])));
+                $updateobject->id = $idtochange;
+                $DB->update_record('forumng_posts', $updateobject);
+            }
+        }
+    }
+
+    /**
+     * Updates forumng post rated date.
+     * Indentified by rater username, subject and using date format (YYYY-MM-DD OR YYYY/MM/DD).
+     * E.g. | student1 | Discussion 1 | 2015-01-20 |
+     * @Given /^I amend the forumng rated posts to new rated date:$/
+     * @param TableNode $data
+     */
+    public function i_amend_the_forumng_rated_posts_to_new_rated_date(TableNode $data) {
+        global $DB;
+
+        foreach ($data->getRows() as $rowdata) {
+            $conditions = array('subject' => $rowdata[1]);
+            $postid = $DB->get_field('forumng_posts', 'id', $conditions);
+            if ($postid) {
+                $conditions = $conditions = array('username' => $rowdata[0]);
+                $userid = $DB->get_field('user', 'id', $conditions);
+                if ($userid) {
+                    $conditions = array(
+                            'userid' => $userid, 'itemid' => $postid, 'component' => 'mod_forumng', 'ratingarea' => 'post');
+                    $ratingid = $DB->get_field('rating', 'id', $conditions);
+                    if ($ratingid) {
+                        $newtime = trim(strtotime(str_replace('/', '-', $rowdata[2])));
+                        $updateobject = new stdClass();
+                        $updateobject->id = $ratingid;
+                        $updateobject->timecreated = $newtime;
+                        $updateobject->timemodified = $newtime;
+                        $updateobject->itemid = $postid;
+                        $DB->update_record('rating', $updateobject);
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Replies to numbered post (e.g. "2" is second post on page) with the provided data.
+     * You should be in the discussion view page.
+     * Note this step will always expand the post.
+     *
+     * @Given /^I reply to post "(?P<post_number>\d+)" with the following data:$/
+     * @param int $post
+     * @param TableNode $data
+     */
+    public function i_reply_to_post_with_the_following_data($post, TableNode $data) {
+        $this->interact_with_post('reply', $post, $data);
+    }
+
+    /**
+     * Edits a numbered post (e.g. "2" is second post on page) with the provided data.
+     * You should be in the discussion view page.
+     * Note this step will always expand the post.
+     *
+     * @Given /^I edit post "(?P<post_number>\d+)" with the following data:$/
+     * @param int $post
+     * @param TableNode $data
+     */
+    public function i_edit_post_with_the_following_data($post, TableNode $data) {
+        $this->interact_with_post('edit', $post, $data);
+    }
+
+    /**
+     * Replies to numbered post (e.g. "2" is second post on page) with the provided data.
+     * You should be in the discussion view page.
+     * Note this step will always expand the post.
+     *
+     * @Given /^I reply to post "(?P<post_number>\d+)" as draft with the following data:$/
+     * @param int $post
+     * @param TableNode $data
+     */
+    public function i_reply_to_post_as_draft_with_the_following_data($post, TableNode $data) {
+        $this->interact_with_post('draft', $post, $data);
+    }
+
+    /**
+     * This function is the one that does the post steps and adds to form
+     * The type used reflects the different types of interaction with post
+     * @param string $type 'reply'(default) or 'edit' or 'draft'
+     * @param int $post
+     * @param TableNode $data
+     * @return multitype:\Behat\Behat\Context\Step\Given \Behat\Behat\Context\Step\Then
+     */
+    private function interact_with_post($type = 'reply', $post, TableNode $data) {
+        $link = 'forumng-replylink';
+        $savebutton = get_string('postreply', 'forumng');
+        if ($type == 'edit') {
+            $link = 'forumng-edit';
+            $savebutton = get_string('savechanges');
+        } else if ($type == 'draft') {
+            $savebutton = get_string('savedraft', 'forumng');
+        }
+        $this->i_expand_post($post);
+        $this->execute('behat_general::i_click_on', array('.forumng-post.forumng-p' . $post .
+                ' .forumng-commands .' . $link .' a', 'css_element'));
+        // Switch steps depending on javascript as page acts differently.
+        if ($this->running_javascript()) {
+            $this->execute('behat_general::switch_to_iframe', array('forumng-post-iframe'));
+            $this->execute('behat_general::wait_until_exists', array($savebutton, 'button'));
+            $this->execute('behat_general::wait_until_the_page_is_ready', array());
+            if ($type == 'reply') {
+                $this->execute('behat_general::the_element_should_be_disabled',
+                        array($savebutton, 'button'));
+            }
+            $this->execute('behat_forms::i_set_the_following_fields_to_these_values', array($data));
+            // Wait for save button to become enabled (otherwise will skip submit).
+            if ($type == 'draft') {
+                $this->execute('behat_general::wait_until_does_not_exists',
+                        array('#id_savedraft[disabled]', 'css_element'));
+            } else {
+                $this->execute('behat_general::wait_until_does_not_exists',
+                        array('#id_submitbutton[disabled]', 'css_element'));
+            }
+            $this->execute('behat_general::the_element_should_be_enabled',
+                    array($savebutton, 'button'));
+            $this->execute('behat_forms::press_button', array($savebutton));
+            $this->execute('behat_general::switch_to_the_main_frame', array());
+            $this->execute('behat_general::wait_until_does_not_exists',
+                    array('iframe[name=forumng-post-iframe]', 'css_element'));
+        } else {
+            $this->execute('behat_forms::i_set_the_following_fields_to_these_values', array($data));
+            $this->execute('behat_forms::press_button', array($savebutton));
+            // Ensure always expanded as sometimes seem not to be when JS disabled.
+            $this->execute('behat_mod_forumng::i_expand_post', array('0'));
+        }
+    }
+
+    /**
+     * Expands post on page (post number i.e. "2" = second post)
+     * "0" for expand all
+     *
+     * @Given /^I expand post "(?P<post_number>\d+)"$/
+     * @param int $post
+     * @param TableNode $data
+     */
+    public function i_expand_post($post = null) {
+        try {
+            $exc = new ElementNotFoundException($this->getSession());
+            if (empty($post)) {
+                if ($this->find('css', '.forumng-expandall-link', $exc, false, 3)) {
+                    // Ensure all posts available for reply as we found expand link.
+                    $this->execute('behat_general::click_link',
+                            array(get_string('expandall', 'mod_forumng')));
+                }
+            } else {
+                if ($this->find('css', '.forumng-p' . $post . ' .forumng-expandlink', $exc, false, 3)) {
+                    // Ensure all posts available for reply as we found expand link.
+                    $this->execute('behat_general::i_click_on', array(
+                            '.forumng-p' . $post . ' .forumng-expandlink', 'css_element'));
+                }
+            }
+        } catch (ElementNotFoundException $e) {
+            // I guess we ignore this? Don't know why.
+            return;
+        }
+    }
+}
diff --git a/mod/forumng/tests/behat/coreratings.feature b/mod/forumng/tests/behat/coreratings.feature
new file mode 100644
index 0000000..cf4a23d
--- /dev/null
+++ b/mod/forumng/tests/behat/coreratings.feature
@@ -0,0 +1,95 @@
+@mod @mod_forumng @ou @ou_vle @forumng_rating
+Feature: Add forumng activity and test basic ratings functionality
+  In order to rate posts
+  As a teacher
+  I need to add forum activities and enable ratings
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | teacher1 | Teacher | 1 | teacha1@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | teacher1 | C1 | teacher |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum name |
+      | Forum introduction | Test forum description |
+      | Allow posts to be rated | 2 |
+      | ratingscale[modgrade_type] | Point |
+      | ratingscale[modgrade_point] | 5 |
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Admin1 |
+      | Message | Test |
+    And I reply to post "1" with the following data:
+      | Change subject (optional) | Admin2 |
+      | Message | Test2 |
+    # Forum chooses average of ratings by default for point scales.
+    Then I should see "Average of ratings"
+    And I am on homepage
+    And I log out
+
+  @javascript
+  Scenario: Access forum as teacher and rate
+    Given I log in as "teacher1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Admin1"
+    When I reply to post "2" with the following data:
+      | Change subject (optional) | Teacher1 post |
+      | Message | Test 3 |
+    Then I should see "Test2"
+    And I should see "Test 3"
+    And ".forumng-ratings-standard" "css_element" should exist
+    And ".forumng-p1 .forumng-ratings-standard select" "css_element" should exist
+    And ".forumng-p2 .forumng-ratings-standard select" "css_element" should exist
+    And ".forumng-p3 .forumng-ratings-standard select" "css_element" should not exist
+    Given I set the field "rating" to "3"
+    Then I should see "Average of ratings: 3 (1)"
+    # Re-access, testing rating works when posts collapsed.
+    Given I click on "#forumng-arrowback a" "css_element"
+    And I follow "Admin1"
+    When I set the field "rating" to "5"
+    Then I should see "Average of ratings: 5 (1)"
+    Given I expand post "2"
+    When I set the field "rating" to "1"
+    Then I should see "Average of ratings: 1 (1)"
+    # Check rating output on view all posts page.
+    Given I follow "Test forum name"
+    And I press "Participation by user"
+    When I follow "Show all posts by Teacher 1"
+    Then I should see "Average of ratings: "
+    # Switch on grading and check aggregates.
+    Given I follow "Course 1"
+    And I log out
+    And I wait until the page is ready
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I navigate to "Edit settings" node in "ForumNG administration"
+    And I set the field "Grade" to "Count of ratings"
+    And I press "Save and display"
+    When I follow "Admin1"
+    Then I should see "Count of ratings:"
+    And "(1)" "link" should exist
+    # Switch on rating time limit to.
+    Given I follow "Test forum name"
+    And I navigate to "Edit settings" node in "ForumNG administration"
+    And I set the field "id_ratingfrom_enabled" to "1"
+    And I set the field "id_ratinguntil_enabled" to "1"
+    And I set the field "id_ratingfrom_year" to "2010"
+    And I set the field "id_ratinguntil_year" to "2010"
+    And I press "Save and display"
+    When I follow "Admin1"
+    And I expand post "0"
+    Then ".forumng-p2 .forumng-ratings-standard" "css_element" should exist
+    And ".forumng-p2 .forumng-ratings-standard select" "css_element" should not exist
diff --git a/mod/forumng/tests/behat/tags.feature b/mod/forumng/tests/behat/tags.feature
new file mode 100644
index 0000000..b6610e3
--- /dev/null
+++ b/mod/forumng/tests/behat/tags.feature
@@ -0,0 +1,496 @@
+@mod @mod_forumng @ou @ou_vle @mod_forumng_tags @javascript
+Feature: Add forumng activity and test basic tagging functionality
+  In order to add and view tags
+  As admin
+  I need to add forum activities to moodle courses
+
+  Background:
+      Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+      | teacher1 | Teacher | 1 | teacha1@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "groups" exist:
+      | name | course | idnumber |
+      | Group 1 | C1 | G1 |
+      | Group 2 | C1 | G2 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+      | teacher1 | C1 | editingteacher |
+
+  Scenario: Add tagging to discussions
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum name |
+      | Forum introduction | Test forum description |
+      |Enable discussion tagging | 1 |
+    And I follow "Test forum name"
+    And I press "Start a new discussion"
+    And I press "Cancel"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+      | tags | one, oneA, oneB |
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | def |
+     | tags | two, twoA, twoB |
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 3 |
+      | Message | ghi |
+      | tags | three, threeA, threeB |
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 4 |
+      | Message | ghi |
+      | tags | four, fourA, fourB |
+
+
+    And I follow "Course 1"
+    And I follow "Test forum name"
+
+    # Check that 'Groups' dropdown does not exist
+    Then "group" "select" should not exist
+
+    # Check all tags are displayed in dropdown
+    Given "tag" "select" should exist
+    Then the "tag" select box should contain "one (1)"
+    Then the "tag" select box should contain "onea (1)"
+    Then the "tag" select box should contain "oneb (1)"
+    Then the "tag" select box should contain "two (1)"
+    Then the "tag" select box should contain "twoa (1)"
+    Then the "tag" select box should contain "twob (1)"
+    Then the "tag" select box should contain "three (1)"
+    Then the "tag" select box should contain "threea (1)"
+    Then the "tag" select box should contain "threeb (1)"
+
+    # Check correct tags are displayed for each discusssion
+    Given "tr.forumng-discussion-short:nth-child(2)" "css_element" should exist
+    Then "three" "link" should exist in the "tr.forumng-discussion-short:nth-child(2)" "css_element"
+    Then "threea" "link" should exist in the "tr.forumng-discussion-short:nth-child(2)" "css_element"
+    Then "threeb" "link" should exist in the "tr.forumng-discussion-short:nth-child(2)" "css_element"
+
+    Given "tr.forumng-discussion-short:nth-child(3)" "css_element" should exist
+    Then "two" "link" should exist in the "tr.forumng-discussion-short:nth-child(3)" "css_element"
+    Then "twoa" "link" should exist in the "tr.forumng-discussion-short:nth-child(3)" "css_element"
+    Then "twob" "link" should exist in the "tr.forumng-discussion-short:nth-child(3)" "css_element"
+
+    Given "tr.forumng-discussion-short:nth-child(4)" "css_element" should exist
+    Then "one" "link" should exist in the "tr.forumng-discussion-short:nth-child(4)" "css_element"
+    Then "onea" "link" should exist in the "tr.forumng-discussion-short:nth-child(4)" "css_element"
+    Then "oneb" "link" should exist in the "tr.forumng-discussion-short:nth-child(4)" "css_element"
+
+    # Check that the correct discussion is displayed if we click on a tag link
+    When I click on "oneb" "link"
+    Then "tr.forumng-discussion-short:nth-child(1)" "css_element" should exist
+    Then "one" "link" should exist in the "tr.forumng-discussion-short:nth-child(1)" "css_element"
+    Then "onea" "link" should exist in the "tr.forumng-discussion-short:nth-child(1)" "css_element"
+    Then "oneb" "link" should exist in the "tr.forumng-discussion-short:nth-child(1)" "css_element"
+    And "tr.forumng-discussion-short:nth-child(2)" "css_element" should not exist
+    And "Show all" "link" should exist in the "div.forumng_discuss_tagfilter" "css_element"
+
+    # Check that we return to view page when the 'Show all' link is clicked on
+    When I click on "Show all" "link"
+    Then "tr.forumng-discussion-short:nth-child(2)" "css_element" should exist
+    And "Discussion 3" "link" should exist in the "tr.forumng-discussion-short:nth-child(2)" "css_element"
+    Then "tr.forumng-discussion-short:nth-child(3)" "css_element" should exist
+    Then "tr.forumng-discussion-short:nth-child(4)" "css_element" should exist
+
+    # Check that we can display a discussion
+    When I click on "Discussion 3" "link"
+    Then I should see "Discussion 3" in the "h3.forumng-subject" "css_element"
+    Then I should see "ghi" in the "div.forumng-message" "css_element"
+
+    # Check that we open discussion options and set/edit tags to new values
+    When I click on "Discussion options" "button"
+    Then I should see "three" in the ".form-autocomplete-selection" "css_element"
+    And I should see "threea" in the ".form-autocomplete-selection" "css_element"
+    And I should see "threeb" in the ".form-autocomplete-selection" "css_element"
+    Given I click on "span[data-value=three]" "css_element"
+    And I click on "span[data-value=threea]" "css_element"
+    And I set the field "tags" to "two,"
+
+    # Check change of discussion tags has taken place on view page
+    When I click on "Save changes" "button"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Given "tag" "select" should exist
+    Then the "tag" select box should contain "two (2)"
+    Then the "tag" select box should not contain "threea (1)"
+
+    # Check that selecting tag option "two (2)2 brings up 2 discussions
+    Given I set the field "tag" to "two (2)"
+    Then "tr.forumng-discussion-short:nth-child(1)" "css_element" should exist
+    Then "tr.forumng-discussion-short:nth-child(2)" "css_element" should exist
+    Then "tr.forumng-discussion-short:nth-child(3)" "css_element" should not exist
+
+    # Check that there are links in each discussion are correct
+    Then "two" "link" should exist in the "tr.forumng-discussion-short:nth-child(1)" "css_element"
+    Then "two" "link" should exist in the "tr.forumng-discussion-short:nth-child(2)" "css_element"
+    Then "threea" "link" should not exist in the "tr.forumng-discussion-short:nth-child(2)" "css_element"
+    And "Show all" "link" should exist in the "div.forumng_discuss_tagfilter" "css_element"
+
+    # Check that we return to view page when the 'Show all' link is clicked on
+    When I click on "Show all" "link"
+
+    # Test forum wide 'set' tags
+    Then I navigate to "Edit settings" node in "ForumNG administration"
+    When I click on "Edit settings" "link"
+    Then the "Enable discussion tagging" "checkbox" should be enabled
+    Given I set the field "Set tags for forum" to "setA, setB, setC"
+    And I click on "Save and display" "button"
+
+    # Check to see that 'set' tags are not showing up in forumng view tag dropdown
+    Given "tag" "select" should exist
+    Then the "tag" select box should not contain "seta (0)"
+    Then the "tag" select box should not contain "setb (0)"
+    Then the "tag" select box should not contain "setc (0)"
+
+    # Add a new forum for checking copying and moving of discussions with tags
+    And I follow "Course 1"
+    And I add a "ForumNG" to section "2" and I fill the form with:
+      | Forum name | Test forum name two |
+      | Forum introduction | Test forum two description |
+      |Enable discussion tagging | 1 |
+
+    And I follow "Test forum name two"
+    And I add a discussion with the following data:
+      | Subject | Discussion two 1 |
+      | Message | abc2 |
+      | tags | t20, t21, t23 |
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion two 2 |
+      | Message | def2 |
+      | tags | t30, t31, t33 |
+
+    # Test the copying of a discussion
+    And I follow "Course 1"
+    And I follow "Test forum name two"
+    And I click on "Discussion two 1" "link"
+    When I click on "Copy" "button"
+    Then I click on "Begin copy" "button"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    When I click on "Paste discussion" "button"
+    Then I should see "Discussion two 1"
+    And "t20" "link" should exist
+    And "t21" "link" should exist
+    And "t23" "link" should exist
+    Given I click on "Discussion two 1" "link"
+    And I click on "Discussion options" "button"
+    Then I should see "t20" in the ".form-autocomplete-selection" "css_element"
+    Then I should see "t21" in the ".form-autocomplete-selection" "css_element"
+    Then I should see "t23" in the ".form-autocomplete-selection" "css_element"
+    And I click on "Cancel" "button"
+
+    # Test the moving of a discussion
+    Given I click on "Test forum name" "link"
+    Then I should see "Discussion 4"
+    And I click on "Discussion 4" "link"
+    Given "target" "select" should exist
+    Then the "target" select box should contain "Test forum name two"
+    Given I set the field "target" to "Test forum name two"
+    And I click on "Move" "button"
+    Then "Test forum name two" "link" should exist
+    And "Discussion 4" "link" should exist
+    And "four" "link" should exist
+    And "foura" "link" should exist
+    And "fourb" "link" should exist
+
+    Given I follow "Course 1"
+    And I follow "Test forum name"
+    Then "Discussion 4" "link" should not exist
+    And "four" "link" should not exist
+    And "foura" "link" should not exist
+    And "fourb" "link" should not exist
+
+    # Log out as admin
+    And I log out
+
+    # Log in as a student 1 to test adding discussion tags
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Then I should see "Test forum description"
+    And "Start a new discussion" "button" should exist
+    And I add a discussion with the following data:
+      | Subject | Discussion S1 |
+      | Message | abc |
+
+    # Check that we set/edit tags to new values
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion S1"
+    When I click on "Edit tags" "button"
+    Given I set the field "tags" to "s1, s12, s13"
+    And I click on "Save changes" "button"
+
+    # Log out as student 1
+    And I log out
+
+    # Log in as a student 2 to test adding discussion tags
+    Given I log in as "student2"
+    And I am on site homepage
+    # Check that we set/edit tags to new values
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I follow "Discussion S1"
+    Then I should see "Discussion tags: s1, s12, s13"
+    And I should not see "Edit tags"
+
+    # Log out as student 2
+    And I log out
+
+  Scenario: Test system changes
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum name |
+      | Forum introduction | Test forum description |
+      | Enable discussion tagging | 1 |
+      | Group mode | Separate groups |
+
+    # Set up groups for the forum
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Given "Separate groups" "select" should exist
+    And I set the field "Separate groups" to "Group 1"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc |
+    And I follow "Test forum name"
+    And I set the field "Separate groups" to "Group 2"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | def |
+
+    # Enrol users into groups
+    Given I follow "Course 1"
+    And I navigate to "Users > Groups" in current page administration
+    Then "Groups" "select" should exist
+
+    Given I set the field "Groups" to "Group 1 (0)"
+    Then I click on "Add/remove users" "button"
+    And I set the field "Potential members" to "Teacher 1 (teacha1@asd.com) (0)"
+    And I press "Add"
+    And I press "Back to groups"
+    And I log out
+
+    # Test teacher can only see groups from manage 'set' tags screen
+    Given I log in as "teacher1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Then I should see "Test forum description"
+    Given I press "Edit Set tags"
+    Then I should see "Set tags for Group 1"
+    And I should see "Set tags for Group 2"
+    And I should not see "Set tags for forum"
+    And I log out
+
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I navigate to "Users > Permissions" in current page administration
+    Given I override the system permissions of "Teacher" role with:
+      | forumngfeature/edittags:editsettags | Prevent |
+    And I click on "Back to Course: Course 1" "link"
+    And I log out
+
+    # Test teacher can only see group 2 set tags
+    Given I log in as "teacher1"
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Then I should see "Test forum description"
+    And I should not see "Edit Set tags"
+    And I log out
+
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I navigate to "Permissions" in current page administration
+    Given I override the system permissions of "Teacher" role with:
+      | forumngfeature/edittags:editsettags | Allow |
+    And I click on "Back to ForumNG: Test forum name" "link"
+    And I log out
+
+    # Test teacher can only see groups from manage 'set' tags screen
+    Given I log in as "teacher1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Then I should see "Test forum description"
+    Given I press "Edit Set tags"
+    Then I should see "Set tags for Group 1"
+    And I should see "Set tags for Group 2"
+    And I should not see "Set tags for forum"
+    And I log out
+
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    And I navigate to "Permissions" in current page administration
+    Given I override the system permissions of "Teacher" role with:
+      | moodle/site:accessallgroups | Prevent |
+    And I click on "Back to ForumNG: Test forum name" "link"
+    And I log out
+
+    # Test teacher can only see groups from manage 'set' tags screen
+    Given I log in as "teacher1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum name"
+    Then I should see "Test forum description"
+    Given I press "Edit Set tags"
+    Then I should see "Set tags for Group 1"
+    And I should not see "Set tags for Group 2"
+    And I should not see "Set tags for forum"
+
+  Scenario: Add group tagging to forums
+    And I log in as "admin"
+    And I am on site homepage
+    # Create 2 Discussions
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name                | Test forum name        |
+      | Forum introduction        | Test forum description |
+      | Enable discussion tagging | 1                      |
+    # No Groups default
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 1 |
+      | Message | abc          |
+    And I follow "Test forum name"
+    And I add a discussion with the following data:
+      | Subject | Discussion 2 |
+      | Message | def          |
+    And I follow "Test forum name"
+    # Check that 'Edit Set tags' button is displayed.
+    Given I click on "Edit Set tags" "button"
+    Then I should see "Set tags for forum"
+    # This is the only control we have over a group id
+    And I set the following fields to these values:
+      | Set tags for forum | f1, f2, f3  |
+    And I press "Save changes"
+
+    # Make use of forum wide tags
+    Then I click on "Discussion 1" "link"
+    Then I click on "Edit tags" "button"
+    When I click on " .form-autocomplete-downarrow" "css_element"
+    Then I should see "f1"
+    And I should see "f2"
+    And I should see "f3"
+    Given I click on "f1" "list_item"
+    And I click on "Save changes" "button"
+    # Returns to discuss.php page
+    Then I should see "Discussion tags: f1"
+    Given I click on "Edit tags" "button"
+    Then I should see "f1"
+    # Now need to return to main forum page
+    And I click on "Cancel" "button"
+    Given I click on "Test forum name" "link"
+    Then I click on "Discussion 2" "link"
+    Then I click on "Edit tags" "button"
+    When I click on " .form-autocomplete-downarrow" "css_element"
+    Then I should see "f1"
+    And I should see "f2"
+    And I should see "f3"
+    Given I click on "f3" "list_item"
+    And I click on "Save changes" "button"
+    # Returns to discuss.php page
+    Then I should see "Discussion tags: f3"
+    And I click on "Test forum name" "link"
+    Then "f3" "link" in the "tr.forumng-discussion-short.r0" "css_element" should be visible
+    And "f1" "link" in the "tr.forumng-discussion-short.r1.lastrow" "css_element" should be visible
+
+    # Set up groups for the forum
+    Then I navigate to "Edit settings" in current page administration
+    And I expand all fieldsets
+    Then I should see "Visible"
+    And the "Group mode" select box should contain "Separate groups"
+    Given I set the field "Group mode" to "Separate groups"
+    And I click on "Save and display" "button"
+
+    # Set discussion 1 to group 1
+    Given I click on "Discussion 1" "link"
+    Then I click on "Discussion options" "button"
+    Then I should see "Group"
+    And I set the field "Group" to "Group 1"
+    And I click on "Save changes" "button"
+    Then I click on "Test forum name" "link"
+
+    # Set discussion 2 to group 2.
+    Given I click on "Discussion 2" "link"
+    Then I click on "Discussion options" "button"
+    Then I should see "Group"
+    And I set the field "Group" to "Group 2"
+    And I click on "Save changes" "button"
+    Then I click on "Test forum name" "link"
+
+    # Test that text areas appear for the group tags
+    When I click on "Edit Set tags" "button"
+    Then I should see "Set tags for forum"
+    And I should see "Set tags for Group 1"
+    And I should see "Set tags for Group 2"
+    And I should see "f1" in the ".form-group.row:first-child" "css_element"
+    And I should see "f2" in the ".form-group.row:first-child" "css_element"
+    And I should see "f3" in the ".form-group.row:first-child" "css_element"
+
+    # Create group tags
+    When I set the field "Set tags for Group 1" to "g1, g2, g3"
+    And I set the field "Set tags for Group 2" to "g4, g5, g6"
+    And I press "Save changes"
+    And I press "Edit Set tags"
+    Then I should see "g1" in the ".form-group.row:nth-child(2)" "css_element"
+    And I should see "g2" in the ".form-group.row:nth-child(2)" "css_element"
+    And I should see "g3" in the ".form-group.row:nth-child(2)" "css_element"
+    And I should see "g4" in the ".form-group.row:last-child" "css_element"
+    And I should see "g5" in the ".form-group.row:last-child" "css_element"
+    And I should see "g6" in the ".form-group.row:last-child" "css_element"
+
+    Given I press "Cancel"
+    And I follow "Discussion 1"
+    And I press "Edit tags"
+    And I click on " .form-autocomplete-downarrow" "css_element"
+    Then I should see "g1"
+    And I should not see "g4"
+
+    # Test backup and restore
+    And I follow "Course 1"
+    And I duplicate "Test forum name" activity editing the new copy with:
+      | Forum name | Duplicated Test forum name |
+    # And I click on "Turn editing off" "link"
+    And I follow "Duplicated Test forum name"
+    Given I press "Edit Set tags"
+    Then I should see "Set tags for forum"
+    And I should see "Set tags for Group 1"
+    And I should see "Set tags for Group 2"
+    And I should see "f1" in the ".form-group.row:first-child" "css_element"
+    And I should see "f2" in the ".form-group.row:first-child" "css_element"
+    And I should see "f3" in the ".form-group.row:first-child" "css_element"
+    And I should see "g1" in the ".form-group.row:nth-child(2)" "css_element"
+    And I should see "g2" in the ".form-group.row:nth-child(2)" "css_element"
+    And I should see "g3" in the ".form-group.row:nth-child(2)" "css_element"
+    And I should see "g4" in the ".form-group.row:last-child" "css_element"
+    And I should see "g5" in the ".form-group.row:last-child" "css_element"
+    And I should see "g6" in the ".form-group.row:last-child" "css_element"
+
+    # Exit from test
+    And I log out
diff --git a/mod/forumng/tests/behat/usernameprotection.feature b/mod/forumng/tests/behat/usernameprotection.feature
new file mode 100644
index 0000000..35dae35
--- /dev/null
+++ b/mod/forumng/tests/behat/usernameprotection.feature
@@ -0,0 +1,70 @@
+@ou @ou_vle @mod @mod_forumng
+Feature: Username protection
+  In order to stop people accidentally posting OUCU due to broken password managers
+  As anybody at all
+  I should get a validation error if I use OUCU or PI in a subject line
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname |
+      | Course 1 | C1        |
+    And the following "users" exist:
+      | username | idnumber |
+      | abc123   | W1234567 |
+    And the following "course enrolments" exist:
+      | user   | course | role    |
+      | abc123 | C1     | student |
+    And the following "activities" exist:
+      | activity | name      | course | idnumber | section |
+      | forumng  | TestForum | C1     | WTF      | 0       |
+    And I log in as "abc123"
+    And I follow "Course 1"
+    And I follow "TestForum"
+
+  @javascript
+  Scenario: Post a new discussion
+    When I press "Start a new discussion"
+    And I set the following fields to these values:
+      | Subject | abc123 |
+      | Message | x      |
+    And I wait until "#id_submitbutton[disabled]" "css_element" does not exist
+    And I press "Post discussion"
+    Then I should see "You have set the subject line to your login"
+    And I should see "To continue, change the subject"
+
+    When I set the field "Subject" to "W1234567"
+    And I press "Post discussion"
+    Then I should see "You have set the subject line to your login"
+
+    When I set the field "Subject" to "Not abc123"
+    And I press "Post discussion"
+    Then I should not see "You have set the subject line to your login"
+    And I should see "Not abc123" in the ".breadcrumb-nav" "css_element"
+
+  @javascript
+  Scenario: Post a new reply
+    Given I press "Start a new discussion"
+    And I set the following fields to these values:
+      | Subject | Original |
+      | Message | x        |
+    And I wait until "#id_submitbutton[disabled]" "css_element" does not exist
+    And I press "Post discussion"
+
+    When I follow "Reply"
+    And I switch to "forumng-post-iframe" iframe
+    And I set the following fields to these values:
+      | subject    | abc123 |
+      | Message    | xxx    |
+    And I wait until "#id_submitbutton[disabled]" "css_element" does not exist
+    And I press "Post reply"
+    Then I should see "You have set the subject line to your login"
+    And I should see "To continue, delete or change the subject"
+
+    When I set the field "id_subject" to "W1234567"
+    And I press "Post reply"
+    Then I should see "You have set the subject line to your login"
+
+    When I set the field "id_subject" to "Not abc123"
+    And I press "Post reply"
+    And I switch to the main frame
+    Then I should see "xxx" in the ".forumng-replies" "css_element"
diff --git a/mod/forumng/tests/forumlistapi_test.php b/mod/forumng/tests/forumlistapi_test.php
new file mode 100644
index 0000000..161103d
--- /dev/null
+++ b/mod/forumng/tests/forumlistapi_test.php
@@ -0,0 +1,162 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG generator tests.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/externallib.php');
+require_once($CFG->dirroot . '/course/lib.php');
+
+/**
+ * PHPUnit forum list api testcase.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_forumlist_testcase extends advanced_testcase {
+    /**
+     * Tests the get_forum_list() function. This funcion is the meat of the web service but we cannot
+     * check it as a web service so we just call the function.
+     */
+    public function test_forumlistapi() {
+        global $DB;
+
+        $this->resetAfterTest(true);
+
+        // Create course.
+        $record = new stdClass();
+        $record->shortname = 'testcourse';
+        $course = self::getDataGenerator()->create_course($record);
+
+        // Create a teacher user and enrol them onto the course.
+        $record = array();
+        $record['username'] = 'teacher';
+        $teacher = self::getDataGenerator()->create_user($record);
+        $roleid = $DB->get_field('role', 'id', array('shortname' => 'teacher'));
+        self::getDataGenerator()->enrol_user($teacher->id, $course->id, $roleid);
+
+        // Create a student user and enrol them onto the course.
+        $record['username'] = 'student';
+        $student = self::getDataGenerator()->create_user($record);
+        $roleid = $DB->get_field('role', 'id', array('shortname' => 'student'));
+        self::getDataGenerator()->enrol_user($student->id, $course->id, $roleid);
+
+        // Create forum A.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->name = 'Forum A';
+        $foruma = self::getDataGenerator()->create_module('forumng', $record);
+
+        // Needed later when moving forums to specific sections.
+        course_create_sections_if_missing($course->id, array(1));
+        $modinfo = get_fast_modinfo($course);
+        $mod = $modinfo->get_cm($foruma->cmid);
+        $sectionzero = $modinfo->get_section_info(0, MUST_EXIST);
+        $sectionone = $modinfo->get_section_info(1, MUST_EXIST);
+
+         // Create forum B.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->name = 'Forum B';
+        $forumb = self::getDataGenerator()->create_module('forumng', $record);
+
+         // Create forum C.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->name = 'Forum C';
+        $forumc = self::getDataGenerator()->create_module('forumng', $record);
+        // Make forum C hidden.
+        set_coursemodule_visible($forumc->cmid, 0);
+
+        $modinfo = get_fast_modinfo($course);
+        // Move forum A to section 1.
+        $mod = $modinfo->get_cm($foruma->cmid);
+        moveto_module($mod, $sectionone);
+        // Move forum B to section 0.
+        $mod = $modinfo->get_cm($forumb->cmid);
+        moveto_module($mod, $sectionzero);
+        // Move forum C to section 1.
+        $mod = $modinfo->get_cm($forumc->cmid);
+        moveto_module($mod, $sectionone);
+
+        // Student starts discussion in forum A.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $foruma->id;
+        $record->userid = $student->id;
+        $this->setUser($student);
+        $discussionid = self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_discussion($record);
+
+        // Teacher starts discussion in forum B.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $forumb->id;
+        $record->userid = $teacher->id;
+        $this->setUser($teacher);
+        $discussionid = self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_discussion($record);
+
+        // Call the web service function to get a list of forums for the teacher.
+        $response = mod_forumng_external::get_forum_list($course->shortname, $teacher->username);
+        // There should be 3 forums in the array.
+        $this->assertEquals(3, count($response));
+        // Check each forum's data.
+        $this->assertEquals('Forum B', $response[0]->name);
+        $this->assertEquals('n', $response[0]->unread);
+        $this->assertEquals('Forum A', $response[1]->name);
+        $this->assertEquals('y', $response[1]->unread);
+        $this->assertEquals('Forum C', $response[2]->name);
+        $this->assertEquals('n', $response[2]->unread);
+
+        // Call the web service function to get a list of forums for the student.
+        $response = mod_forumng_external::get_forum_list($course->shortname, $student->username);
+        // There should be 2 forums in the array.
+        $this->assertEquals(2, count($response));
+        // Check each forum's data.
+        $this->assertEquals('Forum B', $response[0]->name);
+        $this->assertEquals('y', $response[0]->unread);
+        $this->assertEquals('Forum A', $response[1]->name);
+        $this->assertEquals('n', $response[1]->unread);
+
+        // Call the webservice function with invalid username.
+        $wronguser = 'doesnotexist';
+        try {
+            // If this does not throw an exception then the test fails.
+            $response = mod_forumng_external::get_forum_list($course->shortname, $wronguser);
+            $this->fail();
+        } catch (moodle_exception $e) {
+            $this->assertEquals(get_string('cannotfinduser', 'error', $wronguser), $e->errorcode);
+        }
+
+        // Call the webservice function with invalid course.
+        $wrongcourse = 'doesnotexist';
+        try {
+            // If this does not throw an exception then the test fails.
+            $response = mod_forumng_external::get_forum_list($wrongcourse, $student->username);
+            $this->fail();
+        } catch (Exception $e) {
+            $this->assertEquals(get_string('cannotfindcourse', 'error'), $e->errorcode);
+        }
+    }
+}
diff --git a/mod/forumng/tests/forumng_cron_test.php b/mod/forumng/tests/forumng_cron_test.php
new file mode 100644
index 0000000..14ae337
--- /dev/null
+++ b/mod/forumng/tests/forumng_cron_test.php
@@ -0,0 +1,196 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG discussion tests.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/tests/forumng_test_lib.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng_mail_list.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng_cron.php');
+
+class mod_forumng_cron_testcase extends forumng_test_lib
+{
+    /**
+     * Unit tests to check mod_forumng_cron::email_normal() and class mod_forumng_mail_list send the correct posts
+     */
+
+    protected $generator;
+    protected $discussionid;
+    protected $rootpostid;
+    protected $student;
+    protected $adminid;
+
+
+    /**
+     * Set up user, course, forum, discussion for tests
+     */
+    protected function setUp() {
+        global $USER, $CFG;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $CFG->forumng_trackreadposts = true;
+        $CFG->forumng_emailafter = 120;
+
+        // Create a course and users.
+        $this->adminid = $USER->id;
+        $course = $this->get_new_course();
+        $student = $this->get_new_user('student', $course->id);
+
+        // Set mark as read to 'manually' for discussions and posts.
+        set_user_preference('forumng_manualmark', 1, $this->adminid);
+        set_user_preference('forumng_manualmark', 1, $student);
+
+        // Create a forumng, a discussion and a post without edit.
+        $this->generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $forum = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS, 'shared' => false,
+            'cmidnumber' => 'IPMR'));
+        $forum->subscribe($student->id);
+
+        $discussion = $this->generator->create_discussion(array('course' => $course, 'forum' => $forum->get_id(),
+            'userid' => $this->adminid));
+        $this->discussionid = $discussion[0];
+        $this->rootpostid = $discussion[1];
+    }
+
+    /**
+     * Test post with no edits included after delay time only, expect mail send
+     */
+    public function test_email_normal_post_without_edit_in_delay_times() {
+        global $CFG;
+        $this->setUp();
+        $created = time() - $CFG->forumng_emailafter - 1;
+
+        // Create post with no edit after delay times no edit.
+        $postrecord = $this->generator->create_post(array('discussionid' => $this->discussionid,
+            'parentpostid' => $this->rootpostid, 'mailstate' => mod_forumng::MAILSTATE_NOT_MAILED,
+            'created' => $created, 'userid' => $this->adminid));
+
+        unset_config('noemailever');
+        $sink = $this->redirectEmails();
+        \mod_forumng_cron::email_normal();
+        $messages = $sink->get_messages();
+
+        // Check 1 email sent.
+        $this->assertEquals(1, count($messages));
+    }
+
+    /**
+     * Test post with edits within delay time , expect latest edit sent
+     */
+    public function test_email_normal_post_with_edit_in_delay_times() {
+        global $CFG;
+        $this->setUp();
+        $created = time() - $CFG->forumng_emailafter - 1;
+
+        // Create post with no edit after delay times.
+        $postrecord = $this->generator->create_post(array('discussionid' => $this->discussionid,
+            'parentpostid' => $this->rootpostid, 'mailstate' => mod_forumng::MAILSTATE_NOT_MAILED,
+            'created' => $created, 'userid' => $this->adminid));
+        $post = mod_forumng_post::get_from_id($postrecord->id, 0);
+
+        // Edit post within delay times.
+        $gotsubject = $post->edit_start("New subject");
+        $post->edit_finish($post->get_raw_message(), $post->get_format(), $gotsubject);
+
+        unset_config('noemailever');
+        $sink = $this->redirectEmails();
+        \mod_forumng_cron::email_normal();
+        $messages = $sink->get_messages();
+
+        // Check only 1 mail sent for latest edited post.
+        $this->assertEquals(1, count($messages));
+    }
+
+    /**
+     * Test post with edit(s) after mail has been sent, expect edit post sent
+     */
+    public function test_email_normal_post_with_edit_after_mail_sent() {
+        global $CFG;
+        $this->setUp();
+
+        $createtime = time() - $CFG->forumng_emailafter - 1;
+
+        // Create post with no edit after delay times.
+        $postrecord = $this->generator->create_post(array('discussionid' => $this->discussionid,
+            'parentpostid' => $this->rootpostid, 'mailstate' => mod_forumng::MAILSTATE_NOT_MAILED,
+            'created' => $createtime, 'userid' => $this->adminid));
+        $post = mod_forumng_post::get_from_id($postrecord->id, 0);
+
+        unset_config('noemailever');
+        $sink = $this->redirectEmails();
+
+        // Send email.
+        \mod_forumng_cron::email_normal();
+        $messages = $sink->get_messages();
+
+        // Check 1 email sent for created port.
+        $this->assertEquals(1, count($messages));
+
+        // Edit post after email sent.
+        $gotsubject = $post->edit_start("New subject");
+        $post->edit_finish($post->get_raw_message(), $post->get_format(), $gotsubject);
+
+        $sink = $this->redirectEmails();
+        \mod_forumng_cron::email_normal();
+        $messages = $sink->get_messages();
+        // Check send email again.
+        $this->assertEquals(1, count($messages));
+    }
+
+    /**
+     * Posts + edits already sent , expect do not get sent again
+     */
+    public function test_email_normal_post_with_edit_before_mail_already_sent() {
+        global $CFG;
+        $this->setUp();
+
+        $createtime = time() - $CFG->forumng_emailafter - 1;
+
+        // Create post after delay times.
+        $postrecord = $this->generator->create_post(array('discussionid' => $this->discussionid,
+            'parentpostid' => $this->rootpostid, 'mailstate' => mod_forumng::MAILSTATE_NOT_MAILED,
+            'created' => $createtime, 'userid' => $this->adminid));
+        $post = mod_forumng_post::get_from_id($postrecord->id, 0);
+
+        // Edit post within delay times.
+        $gotsubject = $post->edit_start("New subject");
+        $post->edit_finish($post->get_raw_message(), $post->get_format(), $gotsubject);
+
+        unset_config('noemailever');
+        $sink = $this->redirectEmails();
+        \mod_forumng_cron::email_normal();
+        $messages = $sink->get_messages();
+
+        // Check the sending email after delay time.
+        $this->assertEquals(1, count($messages));
+
+        $sink = $this->redirectEmails();
+        \mod_forumng_cron::email_normal();
+        $messages = $sink->get_messages();
+
+        // Check no email again.
+        $this->assertEquals(0, count($messages));
+    }
+}
\ No newline at end of file
diff --git a/mod/forumng/tests/forumng_discussion_test.php b/mod/forumng/tests/forumng_discussion_test.php
new file mode 100644
index 0000000..51457b9
--- /dev/null
+++ b/mod/forumng/tests/forumng_discussion_test.php
@@ -0,0 +1,758 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG discussion tests.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/tests/forumng_test_lib.php');
+
+
+class mod_forumng_discussion_testcase  extends forumng_test_lib {
+
+    /**
+     * ForumNG generator reference
+     * @var testing_module_generator
+     */
+    public $generator = null;
+
+    /**
+     * Create temporary test tables and entries in the database for these tests.
+     * These tests have to work on a brand new site.
+     */
+
+    /*
+        Backend functions covered:
+        get_root_post()
+        get_from_id()
+        edit_settings()
+        create_discussion()
+        get_time_start()
+        can_flag()
+        set_flagged()
+        get_flagged_discussions()
+        is_flagged()
+        get_tags()
+        get_set_tags()
+        forumng_update_instance()
+        permanently_delete()
+        copy() // TODO Check attachments and ratings copying.
+        lock(), unlock(), islocked(), auto_lock().
+    */
+
+    public function test_showfrom () {
+        global $DB, $USER, $SITE;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        // Create the generator object and do standard checks.
+        $generator = self::getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        // Create course.
+        $record = new stdClass();
+        $record->shortname = 'testcourse';
+        $course = self::getDataGenerator()->create_course($record);
+
+        // Create forum.
+        $forum = $generator->create_instance(array('course' => $SITE->id));
+
+        // Get UNIX time + 1 day.
+        $utime = time();
+        // UNIX time + 1 day.
+        $futuretime = $utime + (24 * 60 * 60);
+
+        // Start a discussion in forum.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $forum->id;
+        $record->userid = $USER->id;
+
+        $record->timestart = $futuretime;
+        $ids = $generator->create_discussion($record);
+
+        // Test to see that the created discussion and root post records contains a matching timestart to futuretime.
+        $discussionid = $ids[0];
+        $rootpostid = $ids[1];
+        $discussion = mod_forumng_discussion::get_from_id($discussionid , 0);
+        $starttime = $discussion->get_time_start();
+        $this->assertEquals($futuretime, $starttime);
+        $root = $discussion->get_root_post();
+        $this->assertEquals($futuretime, $root->get_created());
+        $this->assertEquals($futuretime, $root->get_modified());
+
+        // Test to see we can not create a post with an earlier start time than today.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $forum->id;
+        $record->userid = $USER->id;
+
+        $pasttime = $utime - (24 * 60 * 60);
+        $record->timestart = $pasttime;
+        $ids = $generator->create_discussion($record);
+        // Test to see that the created discussion and root post records contains a matching time for now (utime).
+        $discussionid = $ids[0];
+        $rootpostid = $ids[1];
+        $discussion = mod_forumng_discussion::get_from_id($discussionid , 0);
+        $starttime = $discussion->get_time_start();
+        $root = $discussion->get_root_post();
+        $this->assertNotEquals($pasttime, $root->get_created());
+        $this->assertNotEquals($pasttime, $root->get_modified());
+
+        // Test to see that we can change root post times to a revised future time.
+        // Future time is set to an extra day ahead (i.e. 2 days from now).
+        $futuretime = $futuretime + (24 * 60 * 60);
+
+        // Edit root post settings.
+        $discussion->edit_settings($discussion::NOCHANGE, $futuretime, $discussion::NOCHANGE, $discussion::NOCHANGE,
+                $discussion::NOCHANGE);
+
+        $starttime = $discussion->get_time_start();
+        $this->assertEquals($futuretime, $starttime);
+        // Set cache to false to stop it picking up old (cached) created and modified times.
+        $roota = $discussion->get_root_post(false);
+        $this->assertEquals($futuretime, $roota->get_created());
+        $this->assertEquals($futuretime, $roota->get_modified());
+
+    }
+
+    public function test_flag_discussion() {
+        global $DB, $USER, $SITE;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        // Create the generator object and do standard checks.
+        $generator = self::getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        // Create forum.
+        $forumrecord = $generator->create_instance(array('course' => $SITE->id));
+
+        // Start a discussion in forum.
+        $record = new stdClass();
+        $record->course = $SITE->id;
+        $record->forum = $forumrecord->id;
+        $record->userid = $USER->id;
+
+        $record->timestart = time();
+        $ids = $generator->create_discussion($record);
+
+        $discussionid = $ids[0];
+        $rootpostid = $ids[1];
+        $discussion = mod_forumng_discussion::get_from_id($discussionid, 0);
+        $this->assertFalse($discussion->is_flagged());
+        // Set flagged discussion.
+        $this->assertTrue($discussion->can_flag());
+        $discussion->set_flagged(true, $USER->id);
+
+        $forum = mod_forumng::get_from_id($forumrecord->id, mod_forumng::CLONE_DIRECT, false);
+
+        $flagged = $forum->get_flagged_discussions($USER->id);
+        $this->assertCount(1, $flagged);
+        foreach ($flagged as $flagdiscussion) {
+            $this->assertEquals($discussion->get_id(), $flagdiscussion->get_id());
+        }
+        $this->assertTrue($discussion->is_flagged());
+
+        $discussion->delete(false);
+        $this->assertTrue($discussion->can_flag());// Can flag if deleted and flagged already.
+
+        // Remove flag from discussion.
+        $discussion->set_flagged(false);
+        $flagged = $forum->get_flagged_discussions($USER->id);
+        $this->assertCount(0, $flagged);
+        $this->assertFalse($discussion->is_flagged());
+
+        $this->assertFalse($discussion->can_flag());
+        $discussion->undelete(false);
+
+        // Test can flag as guest user.
+        $this->setGuestUser();
+        $this->assertFalse($discussion->can_flag());
+    }
+
+    public function test_tag_discussion() {
+        global $DB, $USER, $SITE, $CFG;
+
+        require_once($CFG->dirroot . '/tag/lib.php');
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        // Create the generator object and do standard checks.
+        $generator = self::getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        // Create course.
+        $record = new stdClass();
+        $record->shortname = 'testcourse';
+        $course = self::getDataGenerator()->create_course($record);
+
+        // Create groups.
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+
+        // Create forum.
+        $forumrecord = $generator->create_instance(array('course' => $course->id, 'enabletags' => true,
+                'groupmode' => VISIBLEGROUPS));
+        $forum = mod_forumng::get_from_id($forumrecord->id, mod_forumng::CLONE_DIRECT, true);
+
+        // Set use tag.
+        $CFG->usetags = true;
+
+        // Set forum to tag enabling.
+        $this->assertTrue($CFG->usetags);
+        $this->assertEquals(true, $forum->get_tags_enabled());
+
+        // Start a discussion in forum (group1).
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $forum->get_id();
+        $record->groupid = $group1->id;
+        $record->userid = $USER->id;
+        $record->timestart = time();
+        $ids1 = $generator->create_discussion($record);
+
+        // Start a second discussion in forum (group1).
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $forum->get_id();
+        $record->groupid = $group1->id;
+        $record->userid = $USER->id;
+        $record->timestart = time();
+        $ids2 = $generator->create_discussion($record);
+
+        // Start a third discussion in forum (group2).
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $forum->get_id();
+        $record->groupid = $group2->id;
+        $record->userid = $USER->id;
+        $record->timestart = time();
+        $ids3 = $generator->create_discussion($record);
+
+        // Set up tags in each discussion.
+        $discussionid = $ids1[0];
+        $discussion = mod_forumng_discussion::get_from_id($discussionid , 0);
+        $this->assertEmpty($discussion->get_tags());
+        // Edit discussion settings.
+        $discussion->edit_settings($discussion::NOCHANGE, $discussion::NOCHANGE, $discussion::NOCHANGE, $discussion::NOCHANGE,
+                $discussion::NOCHANGE, array('tag1', 'tag2', 'tag3'));
+        $tags1 = $discussion->get_tags();
+        $this->assertCount(3, $tags1);
+        $discussion1 = $discussion;
+
+        $discussionid = $ids2[0];
+        $discussion = mod_forumng_discussion::get_from_id($discussionid , 0);
+        $this->assertEmpty($discussion->get_tags());
+        // Edit discussion settings.
+        $discussion->edit_settings(mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+                mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+                array('tag1', 'tag2'));
+        $tags2 = $discussion->get_tags();
+        $this->assertCount(2, $tags2);
+        $discussion2 = $discussion;
+
+        $discussionid = $ids3[0];
+        $discussion = mod_forumng_discussion::get_from_id($discussionid , 0);
+        $this->assertEmpty($discussion->get_tags());
+        // Edit discussion settings.
+        $discussion->edit_settings(mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+                mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+                mod_forumng_discussion::NOCHANGE, array('tag1'));
+        $tags3 = $discussion->get_tags();
+        $this->assertCount(1, $tags3);
+        $discussion3 = $discussion;
+
+        // Create a discussion with no tags for later use.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $record->forum = $forum->get_id();
+        $record->groupid = $group2->id;
+        $record->userid = $USER->id;
+        $record->timestart = time();
+        $ids4 = $generator->create_discussion($record);
+
+        // Get id of 'tag1'.
+        $tagid = array_search('tag1', $tags3);
+
+        // Get all tags and check on numbers for each tag.
+        $tagsused = $forum->get_tags_used();
+        $this->assertCount(3, $tagsused);
+
+        $tagsused1 = $forum->get_tags_used($group1->id);
+        $this->assertCount(3, $tagsused1);
+
+        $tagsused2 = $forum->get_tags_used($group2->id);
+        $this->assertCount(1, $tagsused2);
+        $this->assertArrayHasKey($tagid, $tagsused2);
+        $this->assertObjectHasAttribute('displayname', $tagsused2[$tagid]);
+        $this->assertObjectHasAttribute('count', $tagsused2[$tagid]);
+        $this->assertEquals('tag1', $tagsused2[$tagid]->displayname);
+        $this->assertEquals(1, $tagsused2[$tagid]->count);
+
+        // Get all discussions featuring 'tag1'.
+        $list = $forum->get_discussion_list(mod_forumng::ALL_GROUPS, $forum->can_view_hidden(),
+                1, mod_forumng::SORT_DATE, false, 0, true,  $tagid);
+        $taggedlist = $list->get_normal_discussions();
+        $this->assertCount(3, $taggedlist);
+
+        // Get all discussions featuring 'tag1'.for group1.
+        $list1 = $forum->get_discussion_list($group1->id, $forum->can_view_hidden(),
+                1, mod_forumng::SORT_DATE, false, 0, true,  $tagid);
+        $taggedlist1 = $list1->get_normal_discussions();
+        $this->assertCount(2, $taggedlist1);
+
+        // Get all discussions featuring 'tag1'.for group2.
+        $list2 = $forum->get_discussion_list($group2->id, $forum->can_view_hidden(),
+                1, mod_forumng::SORT_DATE, false, 0, true,  $tagid);
+        $taggedlist2 = $list2->get_normal_discussions();
+        $this->assertCount(1, $taggedlist2);
+
+        // Get all discussions featuring 'tag3'.for group2 - which should be none.
+        $tagid = array_search('tag3', $tags1);
+        $list = $forum->get_discussion_list($group2->id, $forum->can_view_hidden(),
+                1, mod_forumng::SORT_DATE, false, 0, true,  $tagid);
+        $taggedlist = $list->get_normal_discussions();
+        $this->assertCount(0, $taggedlist);
+
+        // Set tags specifically for group 1.
+        $forumng = new stdClass();
+        $forumng->settags = array('g1 vamp', 'g1 zomb', 'g1 mumm', 'g1 damm');
+        $forumng->id = $forum->get_id();
+        $forumng->instance = $forum->get_id();
+        $forumng->enabletags = 1;
+        forumng_update_instance($forumng);
+        $context = $forum->get_context();
+        mod_forumng::set_group_tags($forum->get_id(), $group1->id, $forumng->settags);
+        $tagsused1 = mod_forumng::get_set_tags($forumng->id, $group1->id);
+        $this->assertCount(8, $tagsused1);
+
+        // Set tags for group 2 (should return main set tags also).
+        $g2tags = array('g2 ghost', 'g2 ghoul', 'g2 googl', 'g2 welf', 'g2 gobb');
+        mod_forumng::set_group_tags($forum->get_id(), $group2->id, $g2tags);
+        $tagsused2 = mod_forumng::get_set_tags($forumng->id, $group2->id);
+        $this->assertCount(9, $tagsused2);
+
+        $tagsused3 = $forum::get_set_tags($forumng->id);
+        $this->assertCount(4, $tagsused3);
+
+        // Test that group only tags can be returned.
+        $tagsused1 = mod_forumng::get_set_tags($forumng->id, $group1->id, true);
+        $this->assertCount(4, $tagsused1);
+        $tagsused2 = mod_forumng::get_set_tags($forumng->id, $group2->id, true);
+        $this->assertCount(5, $tagsused2);
+
+        // Need to test permanently delete.
+        $discussionid = $ids4[0];
+        $discussion = mod_forumng_discussion::get_from_id($discussionid , 0);
+        $this->assertEmpty($discussion->get_tags());
+        // Edit discussion settings.
+        $discussion->edit_settings(mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+                mod_forumng_discussion::NOCHANGE, mod_forumng_discussion::NOCHANGE,
+                mod_forumng_discussion::NOCHANGE, array('t1', 't2', 't3'));
+        $tags4 = $discussion->get_tags();
+        $this->assertCount(3, $tags4);
+        $discussion4 = $discussion;
+        // Delete discussion.
+        $discussion4->permanently_delete(false);
+        $this->assertFalse($DB->get_record('forumng_discussions', array('id' => $discussion->get_id())));
+        $this->assertEmpty($DB->get_records('tag_instance',
+                array('itemid' => $discussion->get_id(), 'itemtype' => 'forumng discussions')));
+
+        // Test group tag setting.
+        $user2 = $this->get_new_user();
+        $this->setUser($user2);
+        mod_forumng::set_group_tags($forumng->id, $group1->id, array('t1', 'tnew'));
+        $tagsused = $forum::get_set_tags($forumng->id, $group1->id, true);
+        $this->assertCount(2, $tagsused);
+        mod_forumng::set_group_tags($forumng->id, $group1->id, array('t1'));
+        $tagsused = $forum::get_set_tags($forumng->id, $group1->id, true);
+        $this->assertCount(1, $tagsused);
+        // Create a new forum and add same group tags.
+        $forumrecord2 = $generator->create_instance(array('course' => $course->id, 'enabletags' => true,
+                'groupmode' => VISIBLEGROUPS));
+        $forum2 = mod_forumng::get_from_id($forumrecord2->id, mod_forumng::CLONE_DIRECT, true);
+        mod_forumng::set_group_tags($forumrecord2->id, $group1->id, array('t1'));
+        $tagsused = $forum::get_set_tags($forumrecord2->id, $group1->id, true);
+        $this->assertCount(1, $tagsused);
+        // Create a new forum and add same group tags (should use another user).
+        $forumrecord2 = $generator->create_instance(array('course' => $course->id, 'enabletags' => true,
+                'groupmode' => VISIBLEGROUPS));
+        $forum2 = mod_forumng::get_from_id($forumrecord2->id, mod_forumng::CLONE_DIRECT, true);
+        mod_forumng::set_group_tags($forumrecord2->id, $group1->id, array('t1'));
+        $tagsused = $forum::get_set_tags($forumrecord2->id, $group1->id, true);
+        $this->assertCount(1, $tagsused);
+        // Create a new forum and add same group tags (should fail as out of users).
+        $forumrecord2 = $generator->create_instance(array('course' => $course->id, 'enabletags' => true,
+                'groupmode' => VISIBLEGROUPS));
+        $forum2 = mod_forumng::get_from_id($forumrecord2->id, mod_forumng::CLONE_DIRECT, true);
+        mod_forumng::set_group_tags($forumrecord2->id, $group1->id, array('t1'));
+        $this->setExpectedException('moodle_exception');
+        $forumrecord2 = $generator->create_instance(array('course' => $course->id, 'enabletags' => true,
+                'groupmode' => VISIBLEGROUPS));
+        $forum2 = mod_forumng::get_from_id($forumrecord2->id, mod_forumng::CLONE_DIRECT, true);
+        mod_forumng::set_group_tags($forumrecord2->id, $group1->id, array('t1'));
+        // Do not add any tests after this point as exception called above.
+    }
+
+    /**
+     * Tests deleting discussion and permanent delete
+     * Checks completion
+     */
+    public function test_delete() {
+        global $DB, $USER, $SITE, $CFG;
+
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng_cron.php');
+        $CFG->enablecompletion = true;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $course = $this->get_new_course();
+        $course->enablecompletion = 1;
+        update_course($course);
+
+        $forum = $this->get_new_forumng($course->id, array('removeafter' => 1, 'removeto' => 0,
+                'completion' => 2, 'completiondiscussions' => 1));
+        $completion = new completion_info($forum->get_course());
+
+        $discussion = $this->get_new_discussion($forum, array('userid' => $USER->id));
+        $root1 = $discussion->get_root_post();
+        // Get completion status.
+        $complete = $completion->get_data($forum->get_course_module());
+        $this->assertEquals(COMPLETION_COMPLETE, $complete->completionstate);
+        $discussion2 = $this->get_new_discussion($forum, array('userid' => $USER->id));
+        // Make post old.
+        $root2 = $discussion2->get_root_post();
+        $dataobject = new stdClass();
+        $dataobject->id = $root2->get_id();
+        $dataobject->modified = $root2->get_modified() - 100;
+        $DB->update_record('forumng_posts', $dataobject);
+        // Check perm delete by manual call.
+        $discussion->permanently_delete(false);
+        $this->assertFalse($DB->get_record('forumng_discussions', array('id' => $discussion->get_id())));
+        $this->assertFalse($DB->get_record('forumng_posts', array('id' => $root1->get_id())));
+        // Check cron cleanup (Does permanently_delete() on discussion2).
+        mod_forumng_cron::archive_old_discussions();
+        $this->assertFalse($DB->get_record('forumng_discussions', array('id' => $discussion2->get_id())));
+        $this->assertFalse($DB->get_record('forumng_posts', array('id' => $root2->get_id())));
+
+        $complete = $completion->get_data($forum->get_course_module());
+        $this->assertEquals(COMPLETION_INCOMPLETE, $complete->completionstate);
+        if (mod_forumng::search_installed()) {
+            $searchdoc = $root2->search_get_document();
+            $this->assertFalse($searchdoc->find());
+            $query = new local_ousearch_search('Message for discussion');
+            $query->set_coursemodule($forum->get_course_module(true));
+            $results = $query->query();
+            $this->assertEmpty($results->results);
+        }
+    }
+
+    /**
+     * Checks timed discussions
+     */
+    public function test_timed_discussions() {
+        $this->resetAfterTest();
+        $this->setAdminUser();
+
+        $course = $this->get_new_course('TESTTIME');
+
+        list($forum, $discussions) = $this->create_timed_discussions_forum($course->id);
+
+        $this->assertEquals(1420070400, $discussions[0]->get_time_start());
+        $this->assertEquals(2524608000, $discussions[1]->get_time_start());
+        $this->assertEquals(1420070400, $discussions[2]->get_time_end());
+        $this->assertEquals(2524608000, $discussions[3]->get_time_end());
+    }
+
+    /**
+     * Tests discussion copying to another group and another course forum
+     * (Does not check attachments or ratings copying)
+     */
+    public function test_copy() {
+        global $USER;
+        $this->resetAfterTest();
+        $this->setAdminUser();
+        $course1 = $this->get_new_course();
+        $course2 = $this->get_new_course();
+
+        $group1 = $this->get_new_group($course1->id);
+        $group2 = $this->get_new_group($course1->id);
+
+        $orig = $this->get_new_forumng($course1->id, array('groupmode' => VISIBLEGROUPS));
+        $other = $this->get_new_forumng($course2->id);
+
+        $dis = $this->get_new_discussion($orig, array('groupid' => $group1->id, 'userid' => $USER->id));
+        $lastpost = mod_forumng_post::get_from_id($dis->get_last_post_id(), 0);
+        $dis->create_reply($lastpost, 'reply', 'reply', FORMAT_HTML);
+
+        $dis->copy($orig, $group2->id);
+        $dis->copy($other, mod_forumng::CLONE_DIRECT);
+
+        $forums1 = mod_forumng::get_course_forums($course1);
+        $forums2 = mod_forumng::get_course_forums($course2);
+
+        $this->assertEquals(2, $forums1[$orig->get_id()]->get_num_discussions());
+        $this->assertEquals(1, $forums2[$other->get_id()]->get_num_discussions());
+
+        $list = $forums1[$orig->get_id()]->get_discussion_list($group2->id);
+        $this->assertFalse($list->is_empty());
+        $discussion = $list->get_normal_discussions();
+        $this->assertEquals(2 , reset($discussion)->get_num_posts());
+
+        if (mod_forumng::search_installed()) {
+            $searchdoc = reset($discussion)->get_root_post()->search_get_document();
+            $this->assertTrue($searchdoc->find());
+            $query = new local_ousearch_search('reply');
+            $query->set_coursemodule($other->get_course_module(true));
+            $results = $query->query();
+            $this->assertNotEmpty($results->results);
+        }
+    }
+
+    /**
+     * Tests discussion locking
+     */
+    public function test_lock() {
+        global $USER, $DB;
+        $this->resetAfterTest();
+        $this->setAdminUser();
+        $course1 = $this->get_new_course();
+
+        $orig = $this->get_new_forumng($course1->id, array('removeto' => -1, 'removeafter' => 1));
+
+        $dis = $this->get_new_discussion($orig, array('userid' => $USER->id));
+        $dis2 = $this->get_new_discussion($orig, array('userid' => $USER->id));
+        $dis3 = $this->get_new_discussion($orig, array('userid' => $USER->id));
+        // Alter post modified times to in past.
+        foreach ($DB->get_records('forumng_posts') as $post) {
+            $new = new stdClass();
+            $new->id = $post->id;
+            $new->modified = 1420070400;
+            $DB->update_record('forumng_posts', $new);
+        }
+        // Delete dis2 so not auto-locked.
+        $dis2->delete(false);
+
+        $this->assertFalse($dis->is_locked());
+        $this->assertFalse($dis->is_auto_locked());
+
+        $lockpostid = $dis->lock('sub', 'mess', FORMAT_HTML);
+        $this->assertTrue($dis->is_locked());
+        $this->assertFalse($dis->is_auto_locked());
+
+        $dis = mod_forumng_discussion::get_from_id($dis->get_id(), mod_forumng::CLONE_DIRECT);
+        $this->assertTrue($dis->is_locked());
+        $this->assertFalse($dis->is_auto_locked());
+        $dis->unlock();
+        $this->assertFalse($dis->is_locked());
+        $this->assertFalse($dis->is_auto_locked());
+        $lockpost = mod_forumng_post::get_from_id($lockpostid, mod_forumng::CLONE_DIRECT);
+        $this->assertNotEmpty($lockpost->get_deleted());
+
+        // Check auto-locking ($dis3 should be auto-locked only).
+        $dis->lock('', '', FORMAT_HTML);
+        mod_forumng_cron::archive_old_discussions();
+        $dis = mod_forumng_discussion::get_from_id($dis->get_id(), mod_forumng::CLONE_DIRECT);
+        $dis2 = mod_forumng_discussion::get_from_id($dis2->get_id(), mod_forumng::CLONE_DIRECT);
+        $dis3 = mod_forumng_discussion::get_from_id($dis3->get_id(), mod_forumng::CLONE_DIRECT);
+        $this->assertTrue($dis->is_locked());
+        $this->assertFalse($dis->is_auto_locked());
+        $this->assertFalse($dis2->is_locked());
+        $this->assertFalse($dis2->is_auto_locked());
+        $this->assertTrue($dis3->is_locked());
+        $this->assertTrue($dis3->is_auto_locked());
+    }
+
+    public function test_get_num_discussions_empty() {
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        // Create the generator object and do standard checks.
+        $generator = self::getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        // Create course.
+        $record = new stdClass();
+        $record->shortname = 'testcourse';
+        $course = self::getDataGenerator()->create_course($record);
+
+        $user1 = $this->get_new_user();
+        $this->getDataGenerator()->enrol_user($user1->id, $course->id, 'student');
+
+        // Create forum.
+        $forumrecord = $generator->create_instance(array('course' => $course->id));
+        $forums = \mod_forumng::get_course_forums($course, $user1->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals(0, $forum->get_num_discussions());
+
+    }
+
+    public function test_get_num_discussions() {
+        global $USER;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        // Create the generator object and do standard checks.
+        $generator = self::getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        // Create course.
+        $record = new stdClass();
+        $record->shortname = 'testcourse';
+        $course = self::getDataGenerator()->create_course($record);
+
+        $user1 = $this->get_new_user();
+
+        $this->getDataGenerator()->enrol_user($user1->id, $course->id, 'student');
+
+        // Create forum.
+        $forumrecord = $generator->create_instance(array('course' => $course->id));
+
+        // Generate $n discussions
+        $n = $generator->create_discussions($course->id, $forumrecord->id, $user1->id);
+
+        $forums = \mod_forumng::get_course_forums($course, $user1->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($n, $forum->get_num_discussions());
+
+    }
+
+    public function test_get_num_discussions_groups() {
+        global $DB, $USER;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        // Create the generator object and do standard checks.
+        $generator = self::getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        // Create course.
+        $record = new stdClass();
+        $record->shortname = 'testcourse';
+        $course = self::getDataGenerator()->create_course($record);
+
+        // Create groups.
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+
+        $grouping = $this->getDataGenerator()->create_grouping(array('courseid' => $course->id));
+
+        $this->getDataGenerator()->create_grouping_group(array('groupingid' => $grouping->id, 'groupid' => $group1->id));
+        $this->getDataGenerator()->create_grouping_group(array('groupingid' => $grouping->id, 'groupid' => $group2->id));
+
+        $user1 = $this->get_new_user();
+        $user2 = $this->get_new_user();
+
+        $this->getDataGenerator()->enrol_user($user1->id, $course->id, 'student');
+        $this->getDataGenerator()->enrol_user($user2->id, $course->id, 'student');
+
+        $this->getDataGenerator()->create_group_member(array('userid' => $user1->id, 'groupid' => $group1->id));
+        $this->getDataGenerator()->create_group_member(array('userid' => $user2->id, 'groupid' => $group2->id));
+
+        // Create forum.
+        $forumrecord = $generator->create_instance(array('course' => $course->id, 'enabletags' => true,
+                'groupmode' => SEPARATEGROUPS, 'groupingid' => $grouping->id));
+
+        // Create $n discussions in group 1.
+        $n = $generator->create_discussions($course->id, $forumrecord->id, $user1->id, $group1->id);
+
+        // Create $m discussions in group 2.
+        $m = $generator->create_discussions($course->id, $forumrecord->id, $user2->id, $group2->id);
+
+        $forums = \mod_forumng::get_course_forums($course, $user1->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($n, $forum->get_num_discussions());
+
+        $forums = \mod_forumng::get_course_forums($course, $user2->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($m, $forum->get_num_discussions());
+
+        // Admin user can view all groups
+        $forums = \mod_forumng::get_course_forums($course, $USER->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($n + $m, $forum->get_num_discussions());
+
+        // Change the group mode to VISIBLEGROUPS.
+        $DB->set_field('course_modules', 'groupmode', VISIBLEGROUPS, array('id' => $forumrecord->cmid));
+        rebuild_course_cache($course->id);
+
+        $forums = \mod_forumng::get_course_forums($course, $user1->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($n + $m, $forum->get_num_discussions());
+
+        $forums = \mod_forumng::get_course_forums($course, $user2->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($n + $m, $forum->get_num_discussions());
+    }
+
+    /**
+     * In study advice mode, each student should only see the count of their own discussions.
+     */
+    public function test_get_num_discussions_studyadvice() {
+        global $USER;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        // Create the generator object and do standard checks.
+        $generator = self::getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        // Create course.
+        $record = new stdClass();
+        $record->shortname = 'testcourse';
+        $course = self::getDataGenerator()->create_course($record);
+
+        $user1 = $this->get_new_user();
+        $user2 = $this->get_new_user();
+
+        $this->getDataGenerator()->enrol_user($user1->id, $course->id, 'student');
+        $this->getDataGenerator()->enrol_user($user2->id, $course->id, 'student');
+
+        // Create forum.
+        $forumrecord = $generator->create_instance(array('course' => $course->id, 'type' => 'studyadvice'));
+
+        // Generate $n discussions for user 1.
+        $n = $generator->create_discussions($course->id, $forumrecord->id, $user1->id);
+        // Generate $m discussions for user 1.
+        $m = $generator->create_discussions($course->id, $forumrecord->id, $user2->id);
+
+        if ($m === $n) {
+            // Generate some extra discussions so the two counts are different.
+            $m += $generator->create_discussions($course->id, $forumrecord->id, $user2->id);
+        }
+
+        $forums = \mod_forumng::get_course_forums($course, $user1->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($n, $forum->get_num_discussions());
+        $this->assertEquals(0, $forum->get_num_unread_discussions());
+
+        $forums = \mod_forumng::get_course_forums($course, $user2->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($m, $forum->get_num_discussions());
+        $this->assertEquals(0, $forum->get_num_unread_discussions());
+
+        // Admin can view all discussions
+        $forums = \mod_forumng::get_course_forums($course, $USER->id, mod_forumng::UNREAD_DISCUSSIONS, array($forumrecord->cmid));
+        $forum = reset($forums);
+        $this->assertEquals($n + $m, $forum->get_num_discussions());
+        $this->assertEquals($n + $m, $forum->get_num_unread_discussions());
+    }
+
+}
diff --git a/mod/forumng/tests/forumng_post_test.php b/mod/forumng/tests/forumng_post_test.php
new file mode 100644
index 0000000..2ea8591
--- /dev/null
+++ b/mod/forumng/tests/forumng_post_test.php
@@ -0,0 +1,652 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG main mod_forumng class tests.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/tests/forumng_test_lib.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng_post.php');
+
+/**
+ * PHPUnit main forum class testcase.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_post_test extends forumng_test_lib {
+
+    /**
+     * Unit tests cover following aspects of mod_forumng:
+     * Backend functions covered:
+     * get_from_id()
+     * has_unread_discussions()
+     * get_num_unread_discussions()
+     * get_num_unread_posts()
+     */
+
+    /**
+     * Tests that discussions can be marked as read.
+     * (unread count etc tested in test_get_course_forums())
+     */
+    public function test_individual_posts_marked_read() {
+        global $USER, $DB, $CFG;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $CFG->forumng_trackreadposts = true;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $etuser = $this->get_new_user('editingteacher', $course->id);
+        $suser1 = $this->get_new_user('student', $course->id);
+        $suser2 = $this->get_new_user('student', $course->id);
+
+        // Set mark as read to 'manually' for discussions and posts.
+        set_user_preference('forumng_manualmark', 1, $adminid);
+        set_user_preference('forumng_manualmark', 1, $etuser);
+        set_user_preference('forumng_manualmark', 1, $suser1);
+        set_user_preference('forumng_manualmark', 1, $suser2);
+
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS,
+                'shared' => false, 'cmidnumber' => 'IPMR'));
+
+        $did1 = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(), 'userid' => $etuser->id));
+
+        $forumetposts = mod_forumng::get_course_forums($course, $etuser->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Check new discussion test state for 1st etuser.
+        $this->assertFalse($forumetposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $forumetposts[$forum1->get_id()]->get_num_unread_discussions());
+
+        $post1 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser1->id));
+        $post2 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser2->id));
+        $post3 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser1->id));
+        $post4 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser2->id));
+        $post5 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $etuser->id));
+        $post6 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser1->id));
+        $post7 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser2->id));
+        $post8 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser1->id));
+        $post9 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser2->id));
+        $post10 = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $etuser->id));
+
+        $forumadminposts = mod_forumng::get_course_forums($course, $adminid, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumadminposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumadminposts[$forum1->get_id()]->get_num_unread_discussions());
+        // Note etuser is classed as read at forum level as they made last post in discussion.
+        $forumetposts = mod_forumng::get_course_forums($course, $etuser->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertFalse($forumetposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $forumetposts[$forum1->get_id()]->get_num_unread_discussions());
+        // Check etuser should be classed as unread at discussion level.
+        $discussionetuser = mod_forumng_discussion::get_from_id($did1[0], 0, $etuser->id);
+        $this->assertEquals(8, $discussionetuser->get_num_unread_posts());
+
+        $forumsuser1posts = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumsuser1posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumsuser1posts[$forum1->get_id()]->get_num_unread_discussions());
+        $forumsuser2posts = mod_forumng::get_course_forums($course, $suser2->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumsuser2posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumsuser2posts[$forum1->get_id()]->get_num_unread_discussions());
+
+        // Create post objects.
+        $post = mod_forumng_post::get_from_id($did1[1], 0);// Etuser.
+        $posta = mod_forumng_post::get_from_id($post1->id, 0);// Suser1.
+        $postb = mod_forumng_post::get_from_id($post2->id, 0);// Suser2.
+        $postc = mod_forumng_post::get_from_id($post3->id, 0);// Suser1.
+        $postd = mod_forumng_post::get_from_id($post4->id, 0);// Suser2.
+        $poste = mod_forumng_post::get_from_id($post5->id, 0);// Etuser.
+        $postf = mod_forumng_post::get_from_id($post6->id, 0);// Suser1.
+        $postg = mod_forumng_post::get_from_id($post7->id, 0);// Suser2.
+        $posth = mod_forumng_post::get_from_id($post8->id, 0);// Suser1.
+        $posti = mod_forumng_post::get_from_id($post9->id, 0);// Suser2.
+        $postj = mod_forumng_post::get_from_id($post10->id, 0);// Etuser.
+
+        // Individuals mark some posts as read.
+        $post->mark_read(0, $suser1->id);// Poster Etuser, reader Student 1.
+        $post->mark_read(0, $suser2->id);// Poster Etuser, reader Student 2.
+        $posta->mark_read(0, $etuser->id);// Poster Suser1, reader Teacher.
+        $posta->mark_read(0, $suser2->id);// Poster Suser1, reader Student 1.
+        $postb->mark_read(0, $suser1->id);// Poster Suser2, reader Student 2.
+        $postb->mark_read(0, $etuser->id);// Poster Suser2, reader Teacher.
+        $postc->mark_read(0, $suser2->id);// Poster Suser1, reader Student 2.
+        $postc->mark_read(0, $etuser->id);// Poster Suser1, reader Teacher.
+        $postd->mark_read(0, $suser1->id);// Poster Suser2, reader Student 1.
+        $postd->mark_read(0, $etuser->id);// Poster Suser2, reader Teacher.
+        $poste->mark_read(0, $suser1->id);// Poster Etuser, reader Student 1.
+        $poste->mark_read(0, $suser2->id);// Poster Etuser, reader Student 2.
+
+        // Test forum read aggregate functions.
+        $this->assertTrue(mod_forumng::enabled_read_tracking());
+        $forumadminposts = mod_forumng::get_course_forums($course, $adminid, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumadminposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumadminposts[$forum1->get_id()]->get_num_unread_discussions());
+        // Note etuser is classed as read at forum level as they made last post in discussion.
+        $forumetposts = mod_forumng::get_course_forums($course, $etuser->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertFalse($forumetposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $forumetposts[$forum1->get_id()]->get_num_unread_discussions());
+        $forumsuser1posts = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumsuser1posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumsuser1posts[$forum1->get_id()]->get_num_unread_discussions());
+        $forumsuser2posts = mod_forumng::get_course_forums($course, $suser2->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumsuser2posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumsuser2posts[$forum1->get_id()]->get_num_unread_discussions());
+
+        // Get read counts for editingteacher, include count of their own posts.
+        $discussionetuser = mod_forumng_discussion::get_from_id($did1[0], 0, $etuser->id);
+        $etuserposts = $discussionetuser->get_num_posts();
+        $this->assertEquals(1, count($etuserposts));
+        $unreadpostsetuser = $discussionetuser->get_num_unread_posts();
+        $this->assertEquals(4, $unreadpostsetuser);
+        $readpostsetuser = $DB->get_records('forumng_read_posts', array('userid' => $etuser->id));
+        $this->assertCount(4, $readpostsetuser);
+
+        // Get the first count for the student user 1, includes count of their own posts.
+        $discussionsuser1 = mod_forumng_discussion::get_from_id($did1[0], 0, $suser1->id);
+        $suser1posts = $discussionsuser1->get_num_posts();
+        $this->assertEquals(1, count($suser1posts));
+        $unreadpostsuser1 = $discussionsuser1->get_num_unread_posts();
+        $this->assertEquals(3, $unreadpostsuser1);
+        $readpostsuser1 = $DB->get_records('forumng_read_posts', array('userid' => $suser1->id));
+        $this->assertCount(4, $readpostsuser1);
+
+        // Get the first count for the student user 2, includes count of their own posts.
+        $discussionsuser2 = mod_forumng_discussion::get_from_id($did1[0], 0, $suser2->id);
+        $suser2posts = $discussionsuser2->get_num_posts();
+        $this->assertEquals(1, count($suser2posts));
+        $unreadpostsuser2 = $discussionsuser2->get_num_unread_posts();
+        $this->assertEquals(3, $unreadpostsuser2);
+        $readpostsuser2 = $DB->get_records('forumng_read_posts', array('userid' => $suser2->id));
+        $this->assertCount(4, $readpostsuser2);
+
+        // Individuals mark some more posts as read.
+        $postf->mark_read(0, $etuser->id);// Poster Suser1, reader Teacher.
+        $postf->mark_read(0, $suser2->id);// Poster Suser1, reader Student 2.
+        $postg->mark_read(0, $suser2->id);// Poster Suser2, reader Teacher.
+        $postg->mark_read(0, $suser1->id);// Poster Suser2, reader Student 1.
+        $posth->mark_read(0, $etuser->id);// Poster Suser1, reader Teacher.
+        $posth->mark_read(0, $suser2->id);// Poster Suser1, reader Student 2.
+        $posti->mark_read(0, $suser1->id);// Poster Suser2, reader Student 1.
+        $posti->mark_read(0, $etuser->id);// Poster Suser2, reader Teacher.
+        $postj->mark_read(0, $suser1->id);// Poster Etuser, reader Student 1.
+        $postj->mark_read(0, $suser2->id);// Poster Etuser, reader Student 2.
+
+        $forumadminposts = mod_forumng::get_course_forums($course, $adminid, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumadminposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumadminposts[$forum1->get_id()]->get_num_unread_discussions());
+        // Note etuser is classed as read at forum level as they made last post in discussion.
+        $forumetposts = mod_forumng::get_course_forums($course, $etuser->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertFalse($forumetposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $forumetposts[$forum1->get_id()]->get_num_unread_discussions());
+        $forumsuser1posts = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertFalse($forumsuser1posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $forumsuser1posts[$forum1->get_id()]->get_num_unread_discussions());
+        $forumsuser2posts = mod_forumng::get_course_forums($course, $suser2->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertFalse($forumsuser2posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $forumsuser2posts[$forum1->get_id()]->get_num_unread_discussions());
+
+        // Get second read count for editingteacher, includes count of their own posts.
+        $discussionetuser = mod_forumng_discussion::get_from_id($did1[0], 0, $etuser->id);
+        $etuserposts = $discussionetuser->get_num_posts();
+        $this->assertEquals(11, $etuserposts);
+        $unreadpostsetuser = $discussionetuser->get_num_unread_posts();
+        $this->assertEquals(1, $unreadpostsetuser);
+        $readpostsetuser = $DB->get_records('forumng_read_posts', array('userid' => $etuser->id));
+        $this->assertCount(7, $readpostsetuser);
+
+        // Get the second count for the student user 1, includes count of their own posts.
+        $discussionsuser1 = mod_forumng_discussion::get_from_id($did1[0], 0, $suser1->id);
+        $suser1posts = $discussionsuser1->get_num_posts();
+        $this->assertEquals(1, count($suser1posts));
+        $unreadpostsuser1 = $discussionsuser1->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsuser1);
+        $readpostsuser1 = $DB->get_records('forumng_read_posts', array('userid' => $suser1->id));
+        $this->assertCount(7, $readpostsuser1);
+
+        // Get more counts for the student user 2, includes count of their own posts.
+        $discussionsuser2 = mod_forumng_discussion::get_from_id($did1[0], 0, $suser2->id);
+        $suser2posts = $discussionsuser2->get_num_posts();
+        $this->assertEquals(1, count($suser2posts));
+        $unreadpostsuser2 = $discussionsuser2->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsuser2);
+        $readpostsuser2 = $DB->get_records('forumng_read_posts', array('userid' => $suser2->id));
+        $this->assertCount(8, $readpostsuser2);
+
+        // Mark ALL individual posts as unread.
+        $discussionetuser->mark_unread($etuser->id);
+        $discussionsuser1->mark_unread($suser1->id);
+        $discussionsuser2->mark_unread($suser2->id);
+
+        $forumadminposts = mod_forumng::get_course_forums($course, $adminid, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumadminposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumadminposts[$forum1->get_id()]->get_num_unread_discussions());
+        // Note etuser is classed as read at forum level as they made last post in discussion.
+        $forumetposts = mod_forumng::get_course_forums($course, $etuser->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertFalse($forumetposts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $forumetposts[$forum1->get_id()]->get_num_unread_discussions());
+        $forumsuser1posts = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumsuser1posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumsuser1posts[$forum1->get_id()]->get_num_unread_discussions());
+        $forumsuser2posts = mod_forumng::get_course_forums($course, $suser2->id, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($forumsuser2posts[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $forumsuser2posts[$forum1->get_id()]->get_num_unread_discussions());
+
+        $discussionetuser = mod_forumng_discussion::get_from_id($did1[0], 0, $etuser->id);
+        $etuserposts = $discussionetuser->get_num_posts();
+        $this->assertEquals(11, $etuserposts);
+        $unreadpostsetuser = $discussionetuser->get_num_unread_posts();
+        $this->assertEquals(8, $unreadpostsetuser);
+        $readpostsetuser = $DB->get_records('forumng_read_posts', array('userid' => $etuser->id));
+        $this->assertCount(0, $readpostsetuser);
+
+        $unreadpostset = $discussionetuser->get_num_unread_posts();
+        $unreadpostsuser1 = $discussionsuser1->get_num_unread_posts();
+        $unreadpostsuser2 = $discussionsuser2->get_num_unread_posts();
+        $this->assertEquals(8, $unreadpostset);
+        $this->assertEquals(0, $unreadpostsuser1);
+        $this->assertEquals(0, $unreadpostsuser2);
+    }
+
+    /**
+     * Extend tests that check forumns and discussions being marked as read.
+     *
+     */
+    public function test_discussions_mark_read() {
+        global $USER, $DB;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $course = $this->get_new_course();
+        $etuser1 = $this->get_new_user('editingteacher', $course->id);
+        $suser1 = $this->get_new_user('student', $course->id);
+        $suser2 = $this->get_new_user('student', $course->id);
+
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+        $this->get_new_group_member($group1->id, $etuser1->id);
+        $this->get_new_group_member($group1->id, $suser1->id);
+
+        // Create 2 forums (1 group forum, 1 no groups), each with 1 discussion.
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS));
+        $forum2 = $this->get_new_forumng($course->id);
+        $did1 = $generator->create_discussion(array('course' => $course,
+                'forum' => $forum1->get_id(), 'userid' => $etuser1->id, 'groupid' => $group1->id));
+        $did2 = $generator->create_discussion(array('course' => $course,
+                'forum' => $forum2->get_id(), 'userid' => $etuser1->id));
+
+        // Set the time for offset use.
+        $posttime = time();
+        // Ensure user prefs allow discussions/posts to be marked as read 'automatically'.
+        unset_user_preference('forumng_manualmark', $etuser1);
+        unset_user_preference('forumng_manualmark', $suser1);
+
+        // Root post auto marked as read for ET the creator, of forum1 at group level.
+        $etforums = mod_forumng::get_course_forums($course, $etuser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forum contains discussion post read by etuser1.
+        $this->assertFalse($etforums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+
+        // Suser1 has NOT read root posts.
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forums contain discussion posts NOT read by Suser1.
+        $this->assertTrue($s1forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertTrue($s1forums[$forum2->get_id()]->has_unread_discussions());
+        // Discussion contains posts NOT read by S1.
+        $this->assertEquals(1, $s1forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(1, $s1forums[$forum2->get_id()]->get_num_unread_discussions());
+
+        // User Prefs allow the marking of both discussion root posts as read 'automatically'.
+        $posttime = $posttime + 2;
+        $did1read = mod_forumng_discussion::get_from_id($did1[0], 0);
+        $did1read->mark_read($posttime, $suser1->id);
+        $did2read = mod_forumng_discussion::get_from_id($did2[0], 0);
+        $did2read->mark_read($posttime, $suser1->id);
+
+        // Check the root posts now marked as read for S1.
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forums contain NO discussions not read by Suser1.
+        $this->assertFalse($s1forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertFalse($s1forums[$forum2->get_id()]->has_unread_discussions());
+        // No forumn discussions contain root posts not read by Suser1.
+        $this->assertEquals(0, $s1forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(0, $s1forums[$forum2->get_id()]->get_num_unread_discussions());
+
+        // Set user pref so discussions/posts marked 'manually'.
+        set_user_preference('forumng_manualmark', 1, $etuser1);
+        set_user_preference('forumng_manualmark', 1, $suser1);
+
+        // Add extra posts to both discussions with time modified offset.
+        $posttime = $posttime + 2;
+        $did1s1p1 = $generator->create_post(array('discussionid' => $did1[0],
+                'parentpostid' => $did1[1], 'userid' => $suser1->id, 'modified' => $posttime));
+        $did1etp1 = $generator->create_post(array('discussionid' => $did1[0],
+                'parentpostid' => $did1[1], 'userid' => $etuser1->id, 'modified' => $posttime));
+        $did1s2p1 = $generator->create_post(array('discussionid' => $did1[0],
+                'parentpostid' => $did1[1], 'userid' => $suser2->id, 'modified' => $posttime));
+        $did2s1p2 = $generator->create_post(array('discussionid' => $did2[0],
+                'parentpostid' => $did2[1], 'userid' => $suser1->id, 'modified' => $posttime));
+        $did2etp2 = $generator->create_post(array('discussionid' => $did2[0],
+                'parentpostid' => $did2[1], 'userid' => $etuser1->id, 'modified' => $posttime));
+        $did2s2p1 = $generator->create_post(array('discussionid' => $did2[0],
+                'parentpostid' => $did2[1], 'userid' => $suser2->id, 'modified' => $posttime));
+        $did1s1post1 = mod_forumng_post::get_from_id($did1s1p1->id, 0);
+        $did2s1post2 = mod_forumng_post::get_from_id($did2s1p2->id, 0);
+        $did1etpost1 = mod_forumng_post::get_from_id($did1etp1->id, 0);
+        $did2etpost2 = mod_forumng_post::get_from_id($did2etp2->id, 0);
+        $did1s2post1 = mod_forumng_post::get_from_id($did1s2p1->id, 0);
+        $did2s2post1 = mod_forumng_post::get_from_id($did2s2p1->id, 0);
+
+        // Check read status of new posts.
+        $etforums = mod_forumng::get_course_forums($course, $etuser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Discussions DO have posts not read by ET.
+        $this->assertTrue($etforums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertTrue($etforums[$forum2->get_id()]->has_unread_discussions());
+        // A number of discussions contain posts NOT read by ET.
+        $this->assertEquals(1, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(1, $etforums[$forum2->get_id()]->get_num_unread_discussions());
+
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Discussions DO have posts not read by Suser1.
+        $this->assertTrue($s1forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertTrue($s1forums[$forum2->get_id()]->has_unread_discussions());
+        // A number of discussions contain posts NOT read by Suser1.
+        $this->assertEquals(1, $s1forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(1, $s1forums[$forum2->get_id()]->get_num_unread_discussions());
+
+        // Mark posts read individually.
+        $posttime = $posttime + 2;
+        $did1s1post1->mark_read($posttime, $etuser1->id);// Poster suser1, reader teacher 1.
+        $did2s1post2->mark_read($posttime, $etuser1->id);// Poster suser1, reader teacher 1.
+        $did1etpost1->mark_read($posttime, $suser1->id);// Poster etuser1, reader suser1.
+        $did2etpost2->mark_read($posttime, $suser1->id);// Poster etuser1, reader suser1.
+        $did1s2post1->mark_read($posttime, $suser1->id);
+        $did2s2post1->mark_read($posttime, $suser1->id);
+        $did1s2post1->mark_read($posttime, $etuser1->id);
+        $did2s2post1->mark_read($posttime, $etuser1->id);
+
+        // Check read status of newly marked read posts.
+        $etforums = mod_forumng::get_course_forums($course, $etuser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Discussions have NO posts not read by ET.
+        $this->assertFalse($etforums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertFalse($etforums[$forum2->get_id()]->has_unread_discussions());
+        // No discussions contain posts not read by ET.
+        $this->assertEquals(0, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(0, $etforums[$forum2->get_id()]->get_num_unread_discussions());
+
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Discussions have NO posts not read by Suser1.
+        $this->assertFalse($s1forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertFalse($s1forums[$forum2->get_id()]->has_unread_discussions());
+        // No discussions contain posts not read by Suser1.
+        $this->assertEquals(0, $s1forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(0, $s1forums[$forum2->get_id()]->get_num_unread_discussions());
+
+        // Get read counts for ET user, includes their own posts,
+        // also checks both query_forums() and query_discussions().
+        $discussion1etuser = mod_forumng_discussion::get_from_id($did1[0], 0, $etuser1->id);
+        $etuserposts = $discussion1etuser->get_num_posts();
+        $this->assertEquals(1, count($etuserposts));
+        $unreadpostsetuser = $discussion1etuser->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsetuser);
+        $readpostsetuser = $DB->get_records('forumng_read_posts', array('userid' => $etuser1->id));
+        $this->assertCount(4, $readpostsetuser);
+
+        $discussion2etuser = mod_forumng_discussion::get_from_id($did2[0], 0, $etuser1->id);
+        $etuserposts = $discussion2etuser->get_num_posts();
+        $this->assertEquals(1, count($etuserposts));
+        $unreadpostsetuser = $discussion2etuser->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsetuser);
+        $readpostsetuser = $DB->get_records('forumng_read_posts', array('userid' => $etuser1->id));
+        $this->assertCount(4, $readpostsetuser);
+
+        // Get read counts for the student user 1, includes count of their own posts.
+        $discussion1suser1 = mod_forumng_discussion::get_from_id($did1[0], 0, $suser1->id);
+        $suser1posts = $discussion1suser1->get_num_posts();
+        $this->assertEquals(1, count($suser1posts));
+        $unreadpostsuser1 = $discussion1suser1->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsuser1);
+        $readpostsuser1 = $DB->get_records('forumng_read_posts', array('userid' => $suser1->id));
+        $this->assertCount(4, $readpostsuser1);
+
+        $discussion2suser1 = mod_forumng_discussion::get_from_id($did2[0], 0, $suser1->id);
+        $suser1posts = $discussion2suser1->get_num_posts();
+        $this->assertEquals(1, count($suser1posts));
+        $unreadpostsuser1 = $discussion2suser1->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsuser1);
+        $readpostsuser1 = $DB->get_records('forumng_read_posts', array('userid' => $suser1->id));
+        $this->assertCount(4, $readpostsuser1);
+
+        // Ensure user prefs allow discussions/posts to be marked as read 'automatically'.
+        unset_user_preference('forumng_manualmark', $etuser1);
+        unset_user_preference('forumng_manualmark', $suser1);
+
+        // Mark read at forumn/discussion level 'automatically'.
+        $posttime = $posttime + 2;
+        // Mark forumn/discussion 1 read 'automatically'.
+        $did1read = mod_forumng_discussion::get_from_id($did1[0], 0);
+        $did1read->mark_read($posttime, $etuser1->id);
+        $did1read->mark_read($posttime, $suser1->id);
+        // Mark forumn/discussion 2 read 'automatically'.
+        $did2read = mod_forumng_discussion::get_from_id($did2[0], 0);
+        $did2read->mark_read($posttime, $suser1->id);
+        $did2read->mark_read($posttime, $etuser1->id);
+
+        // Re-check Forumn read status of forum/discussions/posts.
+        $etforums = mod_forumng::get_course_forums($course, $etuser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forum discussions have NO posts not read by ET.
+        $this->assertFalse($etforums[$forum1->get_id()]->has_unread_discussions('use'));
+        $this->assertFalse($etforums[$forum2->get_id()]->has_unread_discussions());
+        // No forum discussion contains posts not read by ET.
+        $this->assertEquals(0, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(0, $etforums[$forum2->get_id()]->get_num_unread_discussions());
+
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forum discussions have NO posts not read by S1.
+        $this->assertFalse($s1forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertFalse($s1forums[$forum2->get_id()]->has_unread_discussions());
+        // No forum discussion contains posts not read by S1.
+        $this->assertEquals(0, $s1forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(0, $s1forums[$forum2->get_id()]->get_num_unread_discussions());
+
+        // Add some more posts to discussion 2 only, to remain NOT MARKED manually.
+        $posttime = $posttime + 2;
+        $did2s1p3 = $generator->create_post(array('discussionid' => $did2[0],
+                 'parentpostid' => $did2[1], 'userid' => $suser1->id, 'modified' => $posttime));
+        $did2s1post3 = mod_forumng_post::get_from_id($did2s1p3->id, 0);
+        $did2etp3 = $generator->create_post(array('discussionid' => $did2[0],
+                 'parentpostid' => $did2[1], 'userid' => $suser2->id, 'modified' => $posttime));
+        $did2etpost3 = mod_forumng_post::get_from_id($did2etp3->id, 0);
+
+        // Setuser pref so discussions/posts can be marked 'manually'.
+        set_user_preference('forumng_manualmark', 1, $etuser1);
+        set_user_preference('forumng_manualmark', 1, $suser1);
+
+        // Check read status of forum/discussions/posts.
+        $etforums = mod_forumng::get_course_forums($course, $etuser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forumn discussion 1 has NO post not read by ET.
+        $this->assertFalse($etforums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+        // Forumn discussion 2 has post NOT read by ET.
+        $this->assertTrue($etforums[$forum2->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $etforums[$forum2->get_id()]->get_num_unread_discussions());
+
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forumn discussions 1 has NO post unread by S1.
+        $this->assertFalse($s1forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $s1forums[$forum1->get_id()]->get_num_unread_discussions());
+        // Forumn discussion 2 DOES contain posts not read by S1.
+        $this->assertTrue($s1forums[$forum2->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $s1forums[$forum2->get_id()]->get_num_unread_discussions());
+
+        // Mark only the older posts read individually.
+        $posttime = $posttime + 2;
+        $did1s1post1->mark_read($posttime, $etuser1->id);// Poster suser1, reader teacher 1.
+        $did2s1post2->mark_read($posttime, $etuser1->id);// Poster suser1, reader teacher 1.
+        $did1etpost1->mark_read($posttime, $suser1->id);// Poster etuser1, reader suser1.
+        $did2etpost2->mark_read($posttime, $suser1->id);// Poster etuser1, reader suser1.
+
+        // Get read counts for ET user, includes their own posts,
+        // also checks both query_forums() and query_discussions().
+        $discussion1etuser = mod_forumng_discussion::get_from_id($did1[0], 0, $etuser1->id);
+        $etuserposts = $discussion1etuser->get_num_posts();
+        $this->assertEquals(4, $etuserposts);
+        $unreadpostsetuser = $discussion1etuser->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsetuser);
+        $readpostsetuser = $DB->get_records('forumng_read_posts', array('userid' => $etuser1->id));
+        $this->assertCount(2, $readpostsetuser);
+
+        $discussion2etuser = mod_forumng_discussion::get_from_id($did2[0], 0, $etuser1->id);
+        $etuserposts = $discussion2etuser->get_num_posts();
+        $this->assertEquals(6, $etuserposts);
+        $unreadpostsetuser = $discussion2etuser->get_num_unread_posts();
+        $this->assertEquals(2, $unreadpostsetuser);
+
+        // Get read counts for the student user 1, includes count of their own posts.
+        $discussion1suser1 = mod_forumng_discussion::get_from_id($did1[0], 0, $suser1->id);
+        $suser1posts = $discussion1suser1->get_num_posts();
+        $this->assertEquals(1, count($suser1posts));
+        $unreadpostsuser1 = $discussion1suser1->get_num_unread_posts();
+        $this->assertEquals(0, $unreadpostsuser1);
+        $readpostsuser1 = $DB->get_records('forumng_read_posts', array('userid' => $suser1->id));
+        $this->assertCount(2, $readpostsuser1);
+
+        $discussion2suser1 = mod_forumng_discussion::get_from_id($did2[0], 0, $suser1->id);
+        $suser1posts = $discussion2suser1->get_num_posts();
+        $this->assertEquals(1, count($suser1posts));
+        $unreadpostsuser1 = $discussion2suser1->get_num_unread_posts();
+        $this->assertEquals(1, $unreadpostsuser1);
+        $readpostsuser1 = $DB->get_records('forumng_read_posts', array('userid' => $suser1->id));
+        $this->assertCount(2, $readpostsuser1);
+
+        // Check read status of forum/discussions/posts.
+        $etforums = mod_forumng::get_course_forums($course, $etuser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forumn discussion 1  has NO posts not read by ET.
+        $this->assertFalse($etforums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+        // Forumn discussion 2 contains posts NOT read by ET.
+        $this->assertTrue($etforums[$forum2->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $etforums[$forum2->get_id()]->get_num_unread_discussions());
+
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forumn discussion 1 has NO posts not read by S1.
+        $this->assertFalse($etforums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(0, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+        // Forumn discussion 2 contains posts NOT read by S1.
+        $this->assertTrue($etforums[$forum2->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $etforums[$forum2->get_id()]->get_num_unread_discussions());
+
+        // Mark forumns read 'automatically'.
+        $forums = mod_forumng::get_course_forums($course, $etuser1->id);
+        $posttime = $posttime + 2;
+        $forums[$forum1->get_id()]->mark_read(0, $posttime, $etuser1->id);
+        $forums[$forum2->get_id()]->mark_read(0, $posttime, $etuser1->id);
+
+        $forums = mod_forumng::get_course_forums($course, $suser1->id);
+        $posttime = $posttime + 2;
+        $forums[$forum2->get_id()]->mark_read(0, $posttime, $suser1->id);
+        $forums[$forum1->get_id()]->mark_read(0, $posttime, $suser1->id);
+
+        // Check Discussion read status of forum/discussions.
+        $etforums = mod_forumng::get_course_forums($course, $etuser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forum discussions have NO posts not read by ET.
+        $this->assertFalse($etforums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertFalse($etforums[$forum2->get_id()]->has_unread_discussions());
+        // Forum discussions contain NO posts unread by ET.
+        $this->assertEquals(0, $etforums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(0, $etforums[$forum2->get_id()]->get_num_unread_discussions());
+
+        $s1forums = mod_forumng::get_course_forums($course, $suser1->id, mod_forumng::UNREAD_DISCUSSIONS);
+        // Forum discussions have NO posts not read by S1.
+        $this->assertFalse($s1forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertFalse($s1forums[$forum2->get_id()]->has_unread_discussions());
+        // No Forum 1 discussion contains posts not read by S1.
+        $this->assertEquals(0, $s1forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(0, $s1forums[$forum2->get_id()]->get_num_unread_discussions());
+
+    }
+
+    public function test_get_formatted_message_normal() {
+        global $USER;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $course = $this->get_new_course();
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS));
+        $did1 = $generator->create_discussion(array('course' => $course,
+            'forum' => $forum1->get_id(), 'userid' => $adminid));
+        $post1 = $generator->create_post(
+            array(
+                'discussionid' => $did1[0],
+                'parentpostid' => $did1[1],
+                'userid' => $adminid,
+                'message' => '<img src="@@PLUGINFILE@@/filename.testing.jpg" alt="description">'
+                    . '<img src="http://externalhost.com/images.jpg" alt="description" />'
+                    . '<img src="http://www.example.com/pluginfile.php/31/mod_bookingsystem/intro/test_image.png" '
+                    . 'alt="description" />'
+            ));
+        $postobj = mod_forumng_post::get_from_id($post1->id, 0);
+        $expected = '<img src="http://www.example.com/moodle/pluginfile.php/'
+            . $forum1->get_context()->id . '/mod_forumng/message/'
+            . $postobj->get_id() . '/filename.testing.jpg" alt="description" />'
+            . '<img src="http://externalhost.com/images.jpg" alt="description" />'
+            . '<img src="http://www.example.com/pluginfile.php/31/mod_bookingsystem/intro/test_image.png" '
+            . 'alt="description" />';
+        $actual = $postobj->get_formatted_message();
+        $this->assertEquals($expected, $actual);
+    }
+
+    public function test_get_formatted_message_email() {
+        global $USER;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $course = $this->get_new_course();
+        $salt = context_course::instance($course->id)->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS));
+        $did1 = $generator->create_discussion(array('course' => $course,
+            'forum' => $forum1->get_id(), 'userid' => $adminid));
+        $post1 = $generator->create_post(
+            array(
+                'discussionid' => $did1[0],
+                'parentpostid' => $did1[1],
+                'userid' => $adminid,
+                'message' => '<img src="@@PLUGINFILE@@/filename.testing.jpg" alt="description">'
+                    . '<img src="http://externalhost.com/images.jpg" alt="description" />'
+                    . '<img src="http://www.example.com/pluginfile.php/31/mod_bookingsystem/intro/test_image.png" '
+                    . 'alt="description"/>'
+            ));
+        $postobj = mod_forumng_post::get_from_id($post1->id, 0);
+        $expected = '<img src="http://www.example.com/moodle/mod/forumng/pluginfile.php/'
+            . $forum1->get_context()->id . '/mod_forumng/message/'
+            . $postobj->get_id() . '/filename.testing.jpg/' . sha1('filename.testing.jpg' . $salt) . '" alt="description" />'
+            . '<img src="http://externalhost.com/images.jpg" alt="description" />'
+            . '<img src="http://www.example.com/pluginfile.php/31/mod_bookingsystem/intro/test_image.png" alt="description" />';
+        $actual = $postobj->get_formatted_message(array(
+            'email' => true
+        ));
+        $this->assertEquals($expected, $actual);
+    }
+}
diff --git a/mod/forumng/tests/forumng_test.php b/mod/forumng/tests/forumng_test.php
new file mode 100644
index 0000000..9182c57
--- /dev/null
+++ b/mod/forumng/tests/forumng_test.php
@@ -0,0 +1,610 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG main mod_forumng class tests.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/tests/forumng_test_lib.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+/**
+ * PHPUnit main forum class testcase.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_forumng_testcase extends forumng_test_lib {
+
+    /**
+     * Unit tests cover following aspects of mod_forumng:
+     * Getting forum from id and cmid and checking base properties e.g. name, group, context
+     * Clones
+     * get_course_forums() (inc query_forums())
+     * can_? functions (access to functionality)
+     * read tracking (unread etc)
+     * whole forum + group subscriptions
+     * grades
+     * completion
+     * post date restrictions - get functions (inc quota)
+     * // TODO: Unit tests do not cover:
+     * discussion functions (in discussion tests instead)
+     * reporting email functions
+     * ratings functions
+     * Anon posting functions
+     * maxbytes etc
+     */
+
+    /**
+     * Tests getting forum object from id and cmid, inc clones.
+     */
+    public function test_get_forum() {
+        $this->resetAfterTest();
+        $course = $this->get_new_course();
+        // Test get_from_id using test lib.
+        $forum = $this->get_new_forumng($course->id, array('name' => 'TEST', 'introduction' => 'abc123'));
+        $cm = get_coursemodule_from_instance('forumng', $forum->get_id());
+        // Check.
+        $this->check_forum_settings($forum, $course, $cm);
+        // Check get_from_cmid also works.
+        $forum = mod_forumng::get_from_cmid($cm->id, mod_forumng::CLONE_DIRECT);
+        $this->check_forum_settings($forum, $course, $cm);
+
+        // Check clone.
+        $forum1 = $this->get_new_forumng($course->id, array('name' => 'TEST', 'intro' => 'abc123',
+                'shared' => true, 'cmidnumber' => 'SF1'));
+        $this->assertEmpty($forum1->get_clone_details());
+        $this->assertTrue($forum1->is_shared());
+
+        $course2 = $this->get_new_course();
+        $forum2 = $this->get_new_forumng($course2->id, array('name' => 'TEST',
+                'usesharedgroup' => array('useshared' => true, 'originalcmidnumber' => 'SF1')));
+
+        $this->assertTrue($forum2->is_shared());
+
+        $this->assertEquals($forum1->get_course_module_id(), $forum2->get_course_module_id(true));
+        $this->assertEquals($forum1->get_context()->id, $forum2->get_context(true)->id);
+        $this->assertEquals($course2->id, $forum2->get_course()->id);
+        $this->assertEquals($course->id, $forum2->get_course(true)->id);
+        // Discrepancy between get_course_id() [returns original] and get_course()[returns clone].
+        $this->assertEquals($course->id, $forum2->get_course_id());
+
+        // Use another instance without clone set to test it knows it is a clone.
+        $forum3 = mod_forumng::get_from_cmid($forum2->get_course_module_id(), mod_forumng::CLONE_DIRECT);
+        $this->assertTrue($forum3->is_clone());
+        $this->assertArrayHasKey($forum3->get_context()->id, $forum1->get_clone_details());
+        $this->assertEquals($course2->id, $forum1->get_clone_details()[$forum3->get_context()->id]->courseid);
+        $this->assertEquals($forum3->get_context()->id, $forum1->get_clone_details()[$forum3->get_context()->id]->context->id);
+        $this->assertEquals($course2->id, $forum3->get_course_id());
+    }
+
+    /**
+     * Checks forum object created in test_get_forum()
+     * In function so same tests can be carried out on multiple forum setups
+     * @param object $forum
+     * @param object $course
+     * @param object $cm
+     */
+    private function check_forum_settings(mod_forumng $forum, $course, $cm) {
+        $this->assertEquals('TEST', $forum->get_name());
+        $this->assertEquals('abc123', $forum->get_introduction());
+        $this->assertEquals(FORMAT_MOODLE, $forum->get_introduction_format());
+        $this->assertEquals($cm->instance, $forum->get_id());
+        $this->assertEquals($course->id, $forum->get_course_id());
+        $this->assertEquals($course->id, $forum->get_course()->id);
+        $this->assertEquals($cm->id, $forum->get_course_module_id());
+        $this->assertEquals(mod_forumng::NO_GROUPS, $forum->get_activity_group($cm));
+        $context = context_module::instance($cm->id);
+        $this->assertEquals($context->id, $forum->get_context()->id);
+        $this->assertInstanceOf('forumngtype', $forum->get_type());
+    }
+
+    /**
+     * Tests get_course_forums() for two users.
+     * 1 course, 3 forums (1 clone), 4 discussions (2 by each user).
+     */
+    public function test_get_course_forums() {
+        global $USER;
+        $this->resetAfterTest();
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $course2 = $this->get_new_course();
+        $course3 = $this->get_new_course();
+        $user2 = $this->get_new_user('student', $course->id);
+
+        $forum1 = $this->get_new_forumng($course->id);
+        $forum2 = $this->get_new_forumng($course->id, array('shared' => true, 'cmidnumber' => 'SFCF'));
+        $forum3 = $this->get_new_forumng($course2->id, array('usesharedgroup' =>
+                array('useshared' => true, 'originalcmidnumber' => 'SFCF')));
+
+        $did1 = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(), 'userid' => $USER->id));
+        $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $USER->id));
+        $did2 = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(), 'userid' => $user2->id));
+        $generator->create_post(array('discussionid' => $did2[0], 'parentpostid' => $did2[1], 'userid' => $user2->id));
+        $generator->create_discussion(array('course' => $course, 'forum' => $forum2->get_id(), 'userid' => $USER->id));
+        $generator->create_discussion(array('course' => $course, 'forum' => $forum2->get_id(), 'userid' => $user2->id));
+
+        $resultuser = mod_forumng::get_course_forums($course3, $user2->id, mod_forumng::UNREAD_NONE);
+        $this->assertEmpty($resultuser);
+        $result1admin = mod_forumng::get_course_forums($course, 0, mod_forumng::UNREAD_NONE);
+        $this->assertCount(2, $result1admin);
+
+        $result2admin = mod_forumng::get_course_forums($course2, 0, mod_forumng::UNREAD_NONE, array(), true);
+        $this->assertCount(1, $result2admin);// Should be getting master in other course instead.
+        $this->assertEquals($course->id, $result2admin[$forum3->get_course_module()->instance]->get_course_id());
+
+        $result3admin = mod_forumng::get_course_forums($course2, 0, mod_forumng::UNREAD_NONE);
+        $this->assertCount(1, $result3admin);// Should not be getting master in other course.
+        $this->assertEquals($course2->id, $result3admin[$forum3->get_course_module()->instance]->get_course_id());
+
+        $result4admin = mod_forumng::get_course_forums($course, 0, mod_forumng::UNREAD_NONE,
+                array($forum1->get_course_module_id()));
+        $this->assertCount(1, $result4admin);
+
+        $result5admin = mod_forumng::get_course_forums($course, 0, mod_forumng::UNREAD_DISCUSSIONS);
+        $this->assertTrue($result5admin[$forum1->get_id()]->has_unread_discussions());
+        $this->assertEquals(1, $result5admin[$forum1->get_id()]->get_num_unread_discussions());
+
+        $result6admin = mod_forumng::get_course_forums($course, 0, mod_forumng::UNREAD_BINARY);
+        $this->assertTrue($result6admin[$forum1->get_id()]->has_unread_discussions());
+    }
+
+    /**
+     * Test access/permissions functions, the can_...() functions in mod_forumng class.
+     */
+    public function test_can_x() {
+        global $USER, $DB;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $user1 = $this->get_new_user('editingteacher', $course->id);
+        $role = $DB->get_record('role', array('shortname' => 'editingteacher'));
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+        $this->get_new_group_member($group1->id, $user1->id);
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS));
+        $forum2 = $this->get_new_forumng($course->id, array('groupmode' => SEPARATEGROUPS));
+
+        // Test can_access_group().
+        $this->assertTrue($forum1->can_access_group($group1->id, true));
+        role_change_permission($role->id, $forum1->get_context(), 'moodle/site:accessallgroups', CAP_PREVENT);
+        role_change_permission($role->id, $forum2->get_context(), 'moodle/site:accessallgroups', CAP_PREVENT);
+        $this->assertTrue($forum1->can_access_group($group1->id, true, $user1->id));
+        $this->assertTrue($forum1->can_access_group($group2->id, false, $user1->id));
+        $this->assertFalse($forum1->can_access_group($group2->id, true, $user1->id));
+        $this->assertFalse($forum2->can_access_group($group2->id, false, $user1->id));
+
+        // Test can_change_subscription() - simple checks, subscriptions tested elsewhere.
+        $this->assertFalse($forum1->can_change_subscription(1));// Check guest user.
+        $this->assertTrue($forum1->can_change_subscription());
+        $this->assertTrue($forum1->can_change_subscription($user1->id));
+        $forum3 = $this->get_new_forumng($course->id, array('subscription' => mod_forumng::SUBSCRIPTION_NOT_PERMITTED));
+        $this->assertFalse($forum3->can_change_subscription());
+        $forum4 = $this->get_new_forumng($course->id, array('subscription' => mod_forumng::SUBSCRIPTION_FORCED));
+        $this->assertTrue($forum4->can_change_subscription());
+        $this->assertFalse($forum4->can_change_subscription(1));// Check guest user.
+
+        // Test can_create_attachments().
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:createattachment', CAP_PREVENT);
+        $this->assertFalse($forum1->can_create_attachments($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:createattachment', CAP_ALLOW);
+        $this->assertTrue($forum1->can_create_attachments($user1->id));
+
+        // Test can_grade().
+        $this->assertFalse($forum1->can_grade());
+        $forum5 = $this->get_new_forumng($course->id, array('grading' => mod_forumng::GRADING_MANUAL));
+        $this->assertTrue($forum5->can_grade());
+
+        // Test can_indicate_moderator().
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:postasmoderator', CAP_PREVENT);
+        $this->assertFalse($forum1->can_indicate_moderator($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:postasmoderator', CAP_ALLOW);
+        $this->assertTrue($forum1->can_indicate_moderator($user1->id));
+
+        // Test can_mail_now().
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:mailnow', CAP_PREVENT);
+        $this->assertFalse($forum1->can_mail_now($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:mailnow', CAP_ALLOW);
+        $this->assertTrue($forum1->can_mail_now($user1->id));
+
+        // Test can_manage_discussions().
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:managediscussions', CAP_PREVENT);
+        $this->assertFalse($forum1->can_manage_discussions($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:managediscussions', CAP_ALLOW);
+        $this->assertTrue($forum1->can_manage_discussions($user1->id));
+
+        // Test can_manage_subscriptions().
+        $this->assertFalse($forum3->can_manage_subscriptions());
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:managesubscriptions', CAP_PREVENT);
+        $this->assertFalse($forum1->can_manage_subscriptions($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:managesubscriptions', CAP_ALLOW);
+        $this->assertTrue($forum1->can_manage_subscriptions($user1->id));
+
+        // Test can_mark_read().
+        $this->assertFalse($forum1->can_mark_read(1));
+
+        // Test can_post_anonymously().
+        $this->assertFalse($forum1->can_post_anonymously());
+        $forum6 = $this->get_new_forumng($course->id, array('canpostanon' => 1));
+        role_change_permission($role->id, $forum6->get_context(), 'mod/forumng:postanon', CAP_PREVENT);
+        $this->assertFalse($forum6->can_post_anonymously($user1->id));
+        role_change_permission($role->id, $forum6->get_context(), 'mod/forumng:postanon', CAP_ALLOW);
+        $this->assertTrue($forum6->can_post_anonymously($user1->id));
+
+        // Test can_rate().
+        $this->assertFalse($forum1->can_rate(0));
+        $basetime = time();
+        $forum7 = $this->get_new_forumng($course->id, array('ratingscale' => 5,
+                'ratingfrom' => $basetime - 1, 'ratinguntil' => $basetime + 1));
+        $this->assertTrue($forum7->can_rate(0));
+        $this->setUser($user1);
+        role_change_permission($role->id, $forum7->get_context(), 'mod/forumng:rate', CAP_PREVENT);
+        $this->assertFalse($forum7->can_rate(0));
+        role_change_permission($role->id, $forum7->get_context(), 'mod/forumng:rate', CAP_ALLOW);
+        $this->assertTrue($forum7->can_rate(0));
+        $this->assertTrue($forum7->can_rate($basetime));
+        $this->assertFalse($forum7->can_rate($basetime - 1));
+        $this->assertFalse($forum7->can_rate($basetime + 1));
+        $this->setAdminUser();
+
+        // Test can_set_important().
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:setimportant', CAP_PREVENT);
+        $this->assertFalse($forum1->can_set_important($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:setimportant', CAP_ALLOW);
+        $this->assertTrue($forum1->can_set_important($user1->id));
+
+        // Test can_start_discussion().
+        // Check dates.
+        $forum8 = $this->get_new_forumng($course->id, array('postingfrom' => (time() + 1000)));
+        role_change_permission($role->id, $forum8->get_context(), 'mod/forumng:ignorepostlimits', CAP_PREVENT);
+        $this->assertFalse($forum8->can_start_discussion(-1, $whynot, $user1->id));
+        $this->assertEmpty($whynot);
+        $forum9 = $this->get_new_forumng($course->id, array('postinguntil' => (time() - 1000),
+                'maxpostsblock' => 1, 'maxpostsperiod' => 86400));
+        role_change_permission($role->id, $forum9->get_context(), 'mod/forumng:ignorepostlimits', CAP_PREVENT);
+        $this->assertFalse($forum9->can_start_discussion(-1, $whynot, $user1->id));
+        $this->assertEmpty($whynot);
+        // Check start discussion capability.
+        $this->assertTrue($forum8->can_start_discussion(-1, $whynot));
+        role_change_permission($role->id, $forum9->get_context(), 'mod/forumng:ignorepostlimits', CAP_ALLOW);
+        $this->assertTrue($forum9->can_start_discussion(-1, $whynot, $user1->id));
+        role_change_permission($role->id, $forum9->get_context(), 'mod/forumng:startdiscussion', CAP_PREVENT);
+        $this->assertFalse($forum9->can_start_discussion(-1, $whynot, $user1->id));
+        $this->assertEquals('startdiscussion_nopermission', $whynot);
+        // Check throttling.
+        $forum10 = $this->get_new_forumng($course->id, array('maxpostsblock' => 1, 'maxpostsperiod' => 86400));
+        role_change_permission($role->id, $forum10->get_context(), 'mod/forumng:ignorepostlimits', CAP_PREVENT);
+        $this->assertTrue($forum10->can_start_discussion(-1, $whynot, $user1->id));
+        $generator->create_discussion(array('course' => $course, 'forum' => $forum10->get_id(), 'userid' => $user1->id));
+        $this->assertFalse($forum10->can_start_discussion(-1, $whynot, $user1->id));
+
+        // Test can_view_discussions().
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:viewdiscussion', CAP_PREVENT);
+        $this->assertFalse($forum1->can_view_discussions($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:viewdiscussion', CAP_ALLOW);
+        $this->assertTrue($forum1->can_view_discussions($user1->id));
+
+        // Test can_view_hidden().
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:viewallposts', CAP_PREVENT);
+        $this->assertFalse($forum1->can_view_hidden($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:viewallposts', CAP_ALLOW);
+        $this->assertTrue($forum1->can_view_hidden($user1->id));
+
+        // Test can_view_subscribers().
+        $this->assertFalse($forum3->can_view_subscribers());// Forum with no subscription.
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:viewsubscribers', CAP_PREVENT);
+        $this->assertFalse($forum1->can_view_subscribers($user1->id));
+        role_change_permission($role->id, $forum1->get_context(), 'mod/forumng:viewsubscribers', CAP_ALLOW);
+        $this->assertTrue($forum1->can_view_subscribers($user1->id));
+    }
+
+    /**
+     * Tests that discussions can be marked as read.
+     * (unread count etc tested in test_get_course_forums())
+     */
+    public function test_mark_read() {
+        global $USER, $DB;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $user1 = $this->get_new_user('editingteacher', $course->id);
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+        $this->get_new_group_member($group1->id, $user1->id);
+        $this->get_new_group_member($group2->id, $user1->id);
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS,
+                'shared' => true, 'cmidnumber' => 'SFGF'));
+        $forum2 = $this->get_new_forumng($course->id, array('usesharedgroup' =>
+                array('useshared' => true, 'originalcmidnumber' => 'SFGF')));
+        $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(),
+                'userid' => $USER->id, 'groupid' => $group1->id));
+        $generator->create_discussion(array('course' => $course, 'forum' => $forum2->get_id(),
+                'userid' => $USER->id, 'groupid' => $group2->id));
+        $forums = mod_forumng::get_course_forums($course, $user1->id);
+        $this->assertTrue($forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertTrue($forums[$forum2->get_id()]->has_unread_discussions());
+        $this->assertEquals(2, $forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(2, $forums[$forum2->get_id()]->get_num_unread_discussions());
+        $forums[$forum1->get_id()]->mark_read($group2->id, 0, $user1->id);
+        $forums = mod_forumng::get_course_forums($course, $user1->id);
+        $this->assertEquals(1, $forums[$forum1->get_id()]->get_num_unread_discussions());
+        $this->assertEquals(1, $forums[$forum2->get_id()]->get_num_unread_discussions());
+        $forums[$forum2->get_id()]->mark_read($group1->id, 0, $user1->id);
+        $forums = mod_forumng::get_course_forums($course, $user1->id);
+        $this->assertFalse($forums[$forum1->get_id()]->has_unread_discussions());
+        $this->assertFalse($forums[$forum2->get_id()]->has_unread_discussions());
+    }
+
+    /**
+     * Test subscription functions.
+     * Also tests removing user from group and course.
+     * Does not test discussion level subscription.
+     */
+    public function test_subscription() {
+        global $USER, $DB;
+
+        $this->assertEquals('array', gettype(mod_forumng::get_subscription_options()));
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $user1 = $this->get_new_user('editingteacher', $course->id);
+        $user2 = $this->get_new_user('student', $course->id);
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+        $this->get_new_group_member($group1->id, $user1->id);
+        $this->get_new_group_member($group2->id, $user1->id);
+        $this->get_new_group_member($group2->id, $user2->id);
+        $forum1 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS,
+                'subscription' => mod_forumng::SUBSCRIPTION_PERMITTED));
+        $forum2 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS,
+                'subscription' => mod_forumng::SUBSCRIPTION_FORCED));
+        $forum3 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS,
+                'subscription' => mod_forumng::SUBSCRIPTION_INITIALLY_SUBSCRIBED));
+        $forum4 = $this->get_new_forumng($course->id, array('groupmode' => VISIBLEGROUPS,
+                'subscription' => mod_forumng::SUBSCRIPTION_NOT_PERMITTED));
+
+        set_config('forumng_subscription', mod_forumng::SUBSCRIPTION_FORCED);
+        $this->assertEquals(mod_forumng::SUBSCRIPTION_FORCED, $forum1->get_effective_subscription_option());
+        set_config('forumng_subscription', -1);
+        $this->assertEquals(mod_forumng::SUBSCRIPTION_PERMITTED, $forum1->get_effective_subscription_option());
+        $this->assertEquals(mod_forumng::SUBSCRIPTION_FORCED, $forum2->get_effective_subscription_option());
+        $this->assertEquals(mod_forumng::SUBSCRIPTION_INITIALLY_SUBSCRIBED, $forum3->get_effective_subscription_option());
+        $this->assertEquals(mod_forumng::SUBSCRIPTION_NOT_PERMITTED, $forum4->get_effective_subscription_option());
+
+        $this->assertFalse($forum2->is_forced_to_subscribe());
+        $this->assertFalse($forum3->is_initially_subscribed());
+        $this->assertTrue($forum2->is_forced_to_subscribe($user1->id));
+        $this->assertTrue($forum3->is_initially_subscribed($user1->id));
+
+        $this->assertEmpty($forum1->get_auto_subscribers());
+        $this->assertEmpty($forum4->get_auto_subscribers());
+        $this->assertCount(2, $forum2->get_auto_subscribers());
+        $this->assertCount(2, $forum3->get_auto_subscribers());
+        $this->assertEmpty($forum1->get_subscribers());
+        $this->assertEmpty($forum4->get_subscribers());
+        $this->assertCount(1, $forum2->get_subscribers($group1->id));
+        $this->assertCount(2, $forum2->get_subscribers());
+        $this->assertCount(2, $forum3->get_subscribers());
+
+        $this->assertFalse($forum1->get_subscription_info($user1->id)->wholeforum);
+        $this->assertTrue($forum2->get_subscription_info($user1->id)->wholeforum);
+        $this->assertTrue($forum3->get_subscription_info($user1->id)->wholeforum);
+        $this->assertTrue($forum2->get_subscription_info($user2->id)->wholeforum);
+        $this->assertTrue($forum3->get_subscription_info($user2->id)->wholeforum);
+        $this->assertFalse($forum4->get_subscription_info($user1->id)->wholeforum);
+
+        $forum1->subscribe($user1->id, $group1->id, true);
+        $forum1->subscribe($user1->id, $group2->id);
+        $this->assertArrayHasKey($group1->id, $forum1->get_subscription_info($user1->id)->groupids);
+        $this->assertArrayHasKey($group2->id, $forum1->get_subscription_info($user1->id)->groupids);
+        $this->assertCount(1, $forum1->get_subscribers());
+        $forum1->unsubscribe($user1->id, $group1->id, true);
+        $forum1->subscribe($user1->id);
+        $this->assertEmpty($forum1->get_subscription_info($user1->id)->groupids);
+        $this->assertTrue($forum1->get_subscription_info($user1->id)->wholeforum);
+        $this->assertCount(1, $forum1->get_subscribers());
+        $forum1->unsubscribe($user1->id);
+        $forum1->subscribe($user1->id, $group2->id);
+        groups_remove_member($group2, $user1);
+        $this->assertEmpty($forum1->get_subscribers($group2->id));
+        $forum1->subscribe($user1->id);
+        $role = $DB->get_record('role', array('shortname' => 'editingteacher'));
+        role_unassign($role->id, $user1->id, context_course::instance($course->id)->id);
+        $this->assertEmpty($forum1->get_subscribers());
+        // Test can subscribe (private) via can_change_subscription().
+        $forum = mod_forumng::get_from_id($forum1->get_id(), mod_forumng::CLONE_DIRECT);
+        $this->assertFalse($forum->can_change_subscription($user1->id));
+    }
+
+    /**
+     * Tests the grading functions in mod_forumng.
+     * Note manual grading is handled in feature/user posts and not tested here...
+     */
+    public function test_grading() {
+        global $USER, $DB;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $user1 = $this->get_new_user('editingteacher', $course->id);
+
+        $forum1 = $this->get_new_forumng($course->id, array('grading' => mod_forumng::GRADING_MANUAL, 'gradingscale' => 50));
+        $forum1->update_grades($USER->id);// Should do nothing and throw no excpetion...
+
+        $forum2 = $this->get_new_forumng($course->id, array('grading' => mod_forumng::GRADING_COUNT,
+                'gradingscale' => 5, 'ratingscale' => 5));
+        list ($discuss, $postid) = $generator->create_discussion(array('course' => $course->id,
+                'forum' => $forum2->get_id(), 'userid' => $USER->id));
+        $post = mod_forumng_post::get_from_id($postid, 0);
+        $post->rate(1);// Calls update_grades().
+        $post = $generator->create_post(array('discussionid' => $discuss, 'userid' => $USER->id,
+                'parentpostid' => $postid));
+        $post = mod_forumng_post::get_from_id($post->id, 0);
+        $post->rate(3);// Calls update_grades().
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum2->get_id(), $USER->id);
+        $this->assertEquals(2, abs($grades->items[0]->grades[$USER->id]->grade));
+        // Try another grading type, forumng_update_instance() should update grades.
+        forumng_update_instance((object) array('instance' => $forum2->get_id(),
+                'grading' => mod_forumng::GRADING_MAX));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum2->get_id(), $USER->id);
+        $this->assertEquals(3, abs($grades->items[0]->grades[$USER->id]->grade));
+        // Try another grading type, forumng_update_instance() should update grades.
+        forumng_update_instance((object) array('instance' => $forum2->get_id(),
+                'grading' => mod_forumng::GRADING_MIN));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum2->get_id(), $USER->id);
+        $this->assertEquals(1, abs($grades->items[0]->grades[$USER->id]->grade));
+        // Try another grading type, forumng_update_instance() should update grades.
+        forumng_update_instance((object) array('instance' => $forum2->get_id(),
+                'grading' => mod_forumng::GRADING_SUM));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum2->get_id(), $USER->id);
+        $this->assertEquals(4, abs($grades->items[0]->grades[$USER->id]->grade));
+        // Try another grading type, forumng_update_instance() should update grades.
+        forumng_update_instance((object) array('instance' => $forum2->get_id(),
+                'grading' => mod_forumng::GRADING_AVERAGE));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum2->get_id(), $USER->id);
+        $this->assertEquals(2, abs($grades->items[0]->grades[$USER->id]->grade));
+        // Try another grading type, forumng_update_instance() should update grades.
+        forumng_update_instance((object) array('instance' => $forum2->get_id(),
+                'grading' => mod_forumng::GRADING_NONE));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum2->get_id(), $USER->id);
+        $this->assertEmpty($grades->items[0]->grades[$USER->id]->grade);
+    }
+
+    /**
+     * Tests completion.
+     */
+    public function test_completion() {
+        global $USER, $DB, $CFG;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $adminid = $USER->id;
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $CFG->enablecompletion = true;
+        $course = $this->get_new_course();
+        $course->enablecompletion = true;
+        $DB->update_record('course', $course);
+        $user1 = $this->get_new_user('editingteacher', $course->id);
+        // Test post discussions or replies.
+        $forum1 = $this->get_new_forumng($course->id, array('completion' => COMPLETION_TRACKING_AUTOMATIC,
+                'completionpostsenabled' => 1, 'completionposts' => 1));
+        $this->assertEquals(1, $forum1->get_completion_posts());
+        $this->assertFalse($forum1->get_completion_state($USER->id, COMPLETION_OR));
+        list ($discuss, $postid) = $generator->create_discussion(array('course' => $course->id,
+                'forum' => $forum1->get_id(), 'userid' => $USER->id));
+        $this->assertTrue($forum1->get_completion_state($USER->id, COMPLETION_OR));
+        // Test post discussions.
+        $forum2 = $this->get_new_forumng($course->id, array('completion' => COMPLETION_TRACKING_AUTOMATIC,
+                'completiondiscussionsenabled' => 1, 'completiondiscussions' => 1));
+        $this->assertEquals(1, $forum2->get_completion_discussions());
+        $this->assertFalse($forum2->get_completion_state($USER->id, COMPLETION_OR));
+        list ($discuss, $postid) = $generator->create_discussion(array('course' => $course->id,
+                'forum' => $forum2->get_id(), 'userid' => $USER->id));
+        $this->assertTrue($forum2->get_completion_state($USER->id, COMPLETION_OR));
+        // Test replies.
+        $forum3 = $this->get_new_forumng($course->id, array('completion' => COMPLETION_TRACKING_AUTOMATIC,
+                'completionrepliesenabled' => 1, 'completionreplies' => 1));
+        $this->assertEquals(1, $forum3->get_completion_replies());
+        $this->assertFalse($forum3->get_completion_state($USER->id, COMPLETION_OR));
+        list ($discuss, $postid) = $generator->create_discussion(array('course' => $course->id,
+                'forum' => $forum3->get_id(), 'userid' => $USER->id));
+        $this->assertFalse($forum3->get_completion_state($USER->id, COMPLETION_OR));
+        $generator->create_post(array('discussionid' => $discuss, 'userid' => $USER->id,
+                'parentpostid' => $postid));
+        $this->assertTrue($forum3->get_completion_state($USER->id, COMPLETION_OR));
+    }
+
+    /**
+     * Checks timed discussions read
+     */
+    public function test_timed_discussions_read() {
+        $this->resetAfterTest();
+        $this->setAdminUser();
+
+        $course = $this->get_new_course('TESTTIME');
+        $student = $this->get_new_user('student', $course->id);
+        $manager = $this->get_new_user('manager', $course->id);
+
+        list($forum, $discussions) = $this->create_timed_discussions_forum($course->id);
+
+        $sforum = mod_forumng::get_course_forums($course, $student->id);
+        $this->assertEquals(2, $sforum[$forum->get_id()]->get_num_unread_discussions());
+
+        // Check manager (can see timed discussions).
+        $mforum = mod_forumng::get_course_forums($course, $manager->id);
+        $this->assertEquals(4, $mforum[$forum->get_id()]->get_num_unread_discussions());
+    }
+
+    /**
+     * Checks forum posting restrictions.
+     */
+    public function test_forum_posting_restrictions() {
+        global $USER;
+        $this->resetAfterTest();
+        $this->setAdminUser();
+
+        $course = $this->get_new_course('TESTTIME');
+        $student = $this->get_new_user('student', $course->id);
+
+        $course = $this->get_new_course();
+        $forum = $this->get_new_forumng($course->id, array('name' => 'TEST', 'intro' => 'abc123'));
+        $future = $this->get_new_forumng($course->id, array('name' => 'TEST2', 'intro' => 'abc123', 'postingfrom' => 1893456000));
+        $past = $this->get_new_forumng($course->id, array('name' => 'TEST3', 'intro' => 'abc123', 'postinguntil' => 1420070400));
+        $limit = $this->get_new_forumng($course->id, array('name' => 'TEST4', 'intro' => 'abc123', 'maxpostsblock' => 1, 'maxpostsperiod' => 1209600));
+
+        $this->assertFalse($forum->is_read_only());
+        $this->assertFalse($future->is_read_only());
+        $this->assertFalse($past->is_read_only());
+        $this->assertFalse($limit->has_post_quota());
+        $this->assertEquals(mod_forumng::QUOTA_DOES_NOT_APPLY, $limit->get_remaining_post_quota());
+
+        $this->assertFalse($forum->is_read_only($student->id));
+        $this->assertTrue($future->is_read_only($student->id));
+        $this->assertTrue($past->is_read_only($student->id));
+        $this->assertTrue($limit->has_post_quota($student->id));
+        $this->assertEquals(1, $limit->get_remaining_post_quota($student->id));
+
+        $this->get_new_discussion($limit, array('userid' => $USER->id));
+        $this->get_new_discussion($limit, array('userid' => $student->id));
+
+        $this->assertEquals(mod_forumng::QUOTA_DOES_NOT_APPLY, $limit->get_remaining_post_quota());
+        $this->assertEquals(0, $limit->get_remaining_post_quota($student->id));
+    }
+}
diff --git a/mod/forumng/tests/forumng_test_lib.php b/mod/forumng/tests/forumng_test_lib.php
new file mode 100644
index 0000000..696af68
--- /dev/null
+++ b/mod/forumng/tests/forumng_test_lib.php
@@ -0,0 +1,157 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This is a lib/helper class for forumng tests, containing useful setup functions
+ * Include + Extend this class in your test rather than advance_testcase
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+abstract class forumng_test_lib extends advanced_testcase {
+    /*
+     These functions require us to create database entries and/or grab objects to make it possible to test the
+    many permuations required for forumng.
+
+    */
+
+    /**
+     * Creates a new user and enrols them on course with role specified (optional)
+     * @param string $rolename role shortname if enrolment required
+     * @param int $courseid course id to enrol on
+     * @return stdClass user
+     */
+    public function get_new_user($rolename = null, $courseid = null) {
+        global $DB;
+        $user = $this->getDataGenerator()->create_user();
+
+        // Assign role if required.
+        if ($rolename && $courseid) {
+            $role = $DB->get_record('role', array('shortname' => $rolename));
+            $this->getDataGenerator()->enrol_user($user->id, $courseid, $role->id);
+        } else if ($rolename) {
+            // Assign role at system level.
+            $role = $DB->get_record('role', array('shortname' => $rolename));
+            $this->getDataGenerator()->role_assign($role->id, $user->id);
+        }
+
+        return $user;
+    }
+
+    public function get_new_course($shortname = null) {
+        $course = new stdClass();
+        $course->fullname = 'Anonymous test course';
+        $course->shortname = $shortname ? $shortname : 'ANON_' . random_string(3);
+        return $this->getDataGenerator()->create_course($course);
+    }
+
+    public function get_new_group($courseid) {
+        $group = new stdClass();
+        $group->courseid = $courseid;
+        $group->name = 'test group';
+        return $this->getDataGenerator()->create_group($group);
+    }
+
+    public function get_new_group_member($groupid, $userid) {
+        $member = new stdClass();
+        $member->groupid = $groupid;
+        $member->userid = $userid;
+        return $this->getDataGenerator()->create_group_member($member);
+    }
+
+    /**
+     * Create new forumng instance using generator, returns instance record + cm
+     * @param int $courseid
+     * @param array $options
+     * @return mod_forumng
+     */
+    public function get_new_forumng($courseid, $options = null) {
+        global $CFG, $DB;
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+        if (is_null($options)) {
+            $options = array();
+        } else {
+            $options = (array) $options;
+        }
+        $options['course'] = $courseid;
+
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $forum = $generator->create_instance((object) $options);
+
+        $this->assertNotEmpty($forum);
+
+        $cm = get_coursemodule_from_instance('forumng', $forum->id);
+        $this->assertNotEmpty($cm);
+
+        $clone = mod_forumng::CLONE_DIRECT;
+        if (!empty($options['usesharedgroup']['originalcmidnumber'])) {
+            // Clone forum - swap forum id into clone and find original.
+            if ($origcm = $DB->get_record('course_modules', array('idnumber' => $options['usesharedgroup']['originalcmidnumber'],
+                    'module' => $DB->get_field('modules', 'id', array('name' => 'forumng'))))) {
+                $clone = $cm->id;
+                $forum->id = $DB->get_field('forumng', 'id', array('id' => $origcm->instance), MUST_EXIST);
+            }
+        }
+        $forum = mod_forumng::get_from_id($forum->id, $clone, true);
+        return $forum;
+    }
+
+    /**
+     * Create a discussion using the generator, returns discussion object
+     * @param mod_forumng $forum
+     * @param array $options Must contain userid
+     * @return mod_forumng_discussion
+     */
+    public function get_new_discussion(mod_forumng $forum, array $options) {
+        $options['forum'] = $forum->get_id();
+        $options['course'] = $forum->get_course_id();
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $dis = $generator->create_discussion($options);
+        return mod_forumng_discussion::get_from_id($dis[0], mod_forumng::CLONE_DIRECT);
+    }
+
+    /**
+     * Creates a forum with 6 timed discussions
+     * 1 - start in past
+     * 2 - start in future
+     * 3 - end in past
+     * 4 - end in future
+     * 5 - start+end in past
+     * 6 - start+end in future
+     * @param int $courseid
+     * @param int $userid
+     * @returns array (forum, array(discussions))
+     */
+    public function create_timed_discussions_forum($courseid, $userid = 0) {
+        $forum = $this->get_new_forumng($courseid);
+        // Discussion starting in past.
+        $dis1 = $this->get_new_discussion($forum, array('userid' => $userid, 'timestart' => 1420070400));
+        // Discussion starting in future.
+        $dis2 = $this->get_new_discussion($forum, array('userid' => $userid, 'timestart' => 2524608000));
+        // Discussion ending in past.
+        $dis3 = $this->get_new_discussion($forum, array('userid' => $userid, 'timeend' => 1420070400));
+        // Discussion ending in future.
+        $dis4 = $this->get_new_discussion($forum, array('userid' => $userid, 'timeend' => 2524608000));
+        // Discussion starting & ending in past.
+        $dis5 = $this->get_new_discussion($forum, array('userid' => $userid, 'timestart' => 1420070400, 'timeend' => 1420070401));
+        // Discussion starting & ending in future.
+        $dis6 = $this->get_new_discussion($forum, array('userid' => $userid, 'timestart' => 2524608000, 'timeend' => 2524608001));
+        return array($forum, array($dis1, $dis2, $dis3, $dis4, $dis5, $dis6));
+    }
+
+}
diff --git a/mod/forumng/tests/generator/lib.php b/mod/forumng/tests/generator/lib.php
new file mode 100644
index 0000000..a5c9a12
--- /dev/null
+++ b/mod/forumng/tests/generator/lib.php
@@ -0,0 +1,235 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Data generator.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * ForumnNG module data generator class.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_generator extends testing_module_generator {
+
+    private $forumdiscussioncount = 0;
+    private $forumpostcount = 0;
+
+    public function reset() {
+        $this->forumdiscussioncount = 0;
+        $this->forumpostcount = 0;
+        return parent::reset();
+    }
+
+    /**
+     * Creates new forumng module instance.
+     *
+     * @param array|stdClass $record Resource module record, as from form
+     * @param array $options Standard options about how to create it
+     * @return stdClass Activity record, with extra cmid field
+     */
+    public function create_instance($record = null, array $options = null) {
+        global $CFG, $DB;
+        require_once($CFG->dirroot . '/mod/forumng/lib.php');
+
+        // Count generated modules.
+        $i = $this->instancecount + 1;
+
+        // Ensure the record can be modified without affecting calling code.
+        $record = (object)(array)$record;
+        $options = (array)$options;
+
+        // Course is required.
+        if (empty($record->course)) {
+            throw new coding_exception('module generator requires $record->course');
+        }
+
+        // Fill in optional values if not specified.
+        if (!isset($record->name)) {
+            $record->name = get_string('pluginname', 'forumng') . ' ' . $i;
+        }
+        if (!isset($record->introduction)) {
+            $record->introduction = 'Test forum ' . $i;
+        }
+        if (!isset($record->introductionformat)) {
+            $record->introductionformat = FORMAT_MOODLE;
+        }
+
+        if (isset($options['idnumber'])) {
+            $record->cmidnumber = $options['idnumber'];
+        }
+
+        // Now actually add the instance.
+        return parent::create_instance($record, $options);
+    }
+
+    /**
+     * Function to create a dummy discussion.
+     *
+     * @param array|stdClass $record
+     * @return int[] Array containing discussion id and post id
+     */
+    public function create_discussion($record = null) {
+        global $CFG;
+        require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+
+        // Increment the forum discussion count.
+        $this->forumdiscussioncount++;
+
+        $record = (array) $record;
+
+        if (!isset($record['course'])) {
+            throw new coding_exception('course must be present, in mod_forumng_generator::create_discussion() $record');
+        }
+
+        if (!isset($record['forum'])) {
+            throw new coding_exception('forum must be present, in mod_forumng_generator::create_discussion() $record');
+        }
+
+        if (!isset($record['userid'])) {
+            throw new coding_exception('userid must be present, in mod_forumng_generator::create_discussion() $record');
+        }
+
+        if (!isset($record['groupid'])) {
+            $record['groupid'] = -1;
+        }
+
+        if (!isset($record['subject'])) {
+            $record['subject'] = "Subject for discussion " . $this->forumdiscussioncount;
+        }
+
+        if (!isset($record['message'])) {
+            $record['message'] = html_writer::tag('p', 'Message for discussion ' . $this->forumdiscussioncount);
+        }
+
+        if (!isset($record['format'])) {
+            $record['format'] = FORMAT_MOODLE;
+        }
+
+        if (!isset($record['timestart'])) {
+            $record['timestart'] = 0;
+        }
+
+        if (!isset($record['timeend'])) {
+            $record['timeend'] = 0;
+        }
+
+        // Get a forum object.
+        $forum = mod_forumng::get_from_id($record['forum'], mod_forumng::CLONE_DIRECT);
+
+        // Create the discussion.
+        $discussionid = $forum->create_discussion($record['groupid'], $record['subject'],
+                $record['message'], $record['format'], false, false, $record['timestart'], $record['timeend'], false,
+                false, $record['userid']);
+
+        return $discussionid;
+    }
+
+    /**
+     * Generate a random number of discussions in a forum for a particular user
+     *
+     * @param int $courseid The course the forum is in
+     * @param int $forumid The ID of the forum instance
+     * @param int $userid The ID of the user to create the discussion as
+     * @param null|int $groupid The ID of the group the discussion is in (null for no group)
+     * @return int The number of discussions created.
+     */
+    public function create_discussions($courseid, $forumid, $userid, $groupid = null) {
+        $n = rand(2, 10);
+        for ($i = 0; $i < $n; $i++) {
+            $record = new stdClass();
+            $record->course = $courseid;
+            $record->forum = $forumid;
+            $record->userid = $userid;
+            $record->timestart = time();
+            if (!is_null($groupid)) {
+                $record->groupid = $groupid;
+            }
+            $this->create_discussion($record);
+        }
+        return $n;
+    }
+
+    /**
+     * Function to create a dummy post.
+     *
+     * @param array|stdClass $record
+     * @return stdClass the post object
+     */
+    public function create_post($record = null) {
+        global $DB;
+
+        // Increment the forum post count.
+        $this->forumpostcount++;
+
+        // Variable to store time.
+        $time = time() + $this->forumpostcount;
+
+        $record = (array) $record;
+
+        if (!isset($record['discussionid'])) {
+            throw new coding_exception('discussion must be present, in mod_forumng_generator::create_post() $record');
+        }
+
+        if (!isset($record['userid'])) {
+            throw new coding_exception('userid must be present, in mod_forumng_generator::create_post() $record');
+        }
+
+        if (!isset($record['parentpostid'])) {
+            $record['parentpostid'] = 0;
+        }
+
+        if (!isset($record['subject'])) {
+            $record['subject'] = 'Forum post subject ' . $this->forumpostcount;
+        }
+
+        if (!isset($record['message'])) {
+            $record['message'] = html_writer::tag('p', 'Forum message post ' . $this->forumpostcount);
+        }
+
+        if (!isset($record['created'])) {
+            $record['created'] = $time;
+        }
+
+        if (!isset($record['modified'])) {
+            $record['modified'] = $time;
+        }
+
+        if (!isset($record['messageformat'])) {
+            $record['messageformat'] = FORMAT_MOODLE;
+        }
+
+        $record = (object) $record;
+
+        // Add the post.
+        $record->id = $DB->insert_record('forumng_posts', $record);
+
+        $updatedis = new stdClass();
+        $updatedis->id = $record->discussionid;
+        $updatedis->lastpostid = $record->id;
+        $DB->update_record('forumng_discussions', $updatedis);
+
+        return $record;
+    }
+}
diff --git a/mod/forumng/tests/generator_test.php b/mod/forumng/tests/generator_test.php
new file mode 100644
index 0000000..1f5fcc8
--- /dev/null
+++ b/mod/forumng/tests/generator_test.php
@@ -0,0 +1,149 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG generator tests.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+
+/**
+ * PHPUnit data generator testcase.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_generator_testcase extends advanced_testcase {
+    public function test_generator() {
+        global $DB, $SITE;
+
+        $this->resetAfterTest(true);
+
+        // Must be a non-guest user to create forums.
+        $this->setAdminUser();
+
+        // There are 0 forums initially.
+        $this->assertEquals(0, $DB->count_records('forumng'));
+
+        // Create a course.
+        $course = $this->getDataGenerator()->create_course();
+
+        // Create the generator object and do standard checks.
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+        $this->assertInstanceOf('mod_forumng_generator', $generator);
+        $this->assertEquals('forumng', $generator->get_modulename());
+
+        // Create three forum instances in the site course.
+        $generator->create_instance(array('course' => $SITE->id));
+        $generator->create_instance(array('course' => $SITE->id));
+        $forum = $generator->create_instance(array('course' => $SITE->id));
+        $this->assertEquals(3, $DB->count_records('forumng'));
+
+        // Check the course-module is correct.
+        $cm = get_coursemodule_from_instance('forumng', $forum->id);
+        $this->assertEquals($forum->id, $cm->instance);
+        $this->assertEquals('forumng', $cm->modname);
+        $this->assertEquals($SITE->id, $cm->course);
+
+        // Check the context is correct.
+        $context = context_module::instance($cm->id);
+        $this->assertEquals($forum->cmid, $context->instanceid);
+    }
+
+    /**
+     * Test create_discussion.
+     */
+    public function test_create_discussion() {
+        global $DB;
+
+        $this->resetAfterTest(true);
+
+        // User that will create the forum.
+        $user = self::getDataGenerator()->create_user();
+        $this->setUser($user);
+
+        // Create course to add the forum to.
+        $course = self::getDataGenerator()->create_course();
+
+        // The forum.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $forum = self::getDataGenerator()->create_module('forumng', $record);
+
+        // Add a few discussions.
+        $record = array();
+        $record['course'] = $course->id;
+        $record['forum'] = $forum->id;
+        $record['userid'] = $user->id;
+        self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_discussion($record);
+        self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_discussion($record);
+        self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_discussion($record);
+
+        // Check the discussions were correctly created.
+        $this->assertEquals(3, $DB->count_records_select('forumng_discussions', 'forumngid = :forum',
+            array('forum' => $forum->id)));
+    }
+
+    /**
+     * Test create_post.
+     */
+    public function test_create_post() {
+        global $DB;
+
+        $this->resetAfterTest(true);
+
+        // Create a bunch of users.
+        $user1 = self::getDataGenerator()->create_user();
+        $user2 = self::getDataGenerator()->create_user();
+        $user3 = self::getDataGenerator()->create_user();
+        $user4 = self::getDataGenerator()->create_user();
+
+        // Create course to add the forum.
+        $course = self::getDataGenerator()->create_course();
+
+        // The forum.
+        $record = new stdClass();
+        $record->course = $course->id;
+        $forum = self::getDataGenerator()->create_module('forumng', $record);
+
+        // Add a discussion.
+        $record->forum = $forum->id;
+        $record->userid = $user1->id;
+        $this->setUser($user1);
+        $discussionid = self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_discussion($record);
+
+        // Add a bunch of replies, changing the userid.
+        $record = new stdClass();
+        $record->discussionid = $discussionid[0];
+        $record->userid = $user2->id;
+        self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_post($record);
+        $record->userid = $user3->id;
+        self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_post($record);
+        $record->userid = $user4->id;
+        self::getDataGenerator()->get_plugin_generator('mod_forumng')->create_post($record);
+
+        // Check the posts were correctly created, remember, when creating a discussion a post
+        // is generated as well, so we should have 4 posts, not 3.
+        $this->assertEquals(4, $DB->count_records_select('forumng_posts', 'discussionid = :discussionid',
+            array('discussionid' => $discussionid[0])));
+    }
+}
diff --git a/mod/forumng/tests/rating_test.php b/mod/forumng/tests/rating_test.php
new file mode 100644
index 0000000..98b829c
--- /dev/null
+++ b/mod/forumng/tests/rating_test.php
@@ -0,0 +1,257 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit ForumNG main mod_forumng class tests.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->dirroot . '/mod/forumng/tests/forumng_test_lib.php');
+require_once($CFG->dirroot . '/mod/forumng/mod_forumng.php');
+require_once($CFG->dirroot . '/rating/lib.php');
+
+/**
+ * PHPUnit main forum core ratings implementation.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_forumng_rating_testcase extends forumng_test_lib {
+
+    /**
+     * Unit tests cover following aspects of rating:
+     * Lib hooks
+     * Clones
+     * Rating posts
+     * Deleting discussion
+     * Moving discussion
+     * Copying discussion
+     * Grading
+     * Deleting forum
+     */
+
+    /**
+     * Tests getting forum object from id and cmid, inc clones.
+     */
+    public function test_lib_hooks() {
+        global $USER, $DB;
+        $this->resetAfterTest();
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $suser = $this->get_new_user('student', $course->id);
+
+        $forum = $this->get_new_forumng($course->id, array('name' => 'TEST', 'intro' => 'abc123',
+                'enableratings' => mod_forumng::FORUMNG_STANDARD_RATING, 'ratingscale' => 10));
+        $cm = get_coursemodule_from_instance('forumng', $forum->get_id());
+
+        $result = forumng_rating_permissions($forum->get_context()->id, 'mod_forumng', 'post');
+        $this->assertTrue(is_array($result));
+        foreach ($result as $cap) {
+            $this->assertFalse($cap);
+        }
+        $this->setAdminUser();
+        $result = forumng_rating_permissions($forum->get_context()->id, 'mod_forumng', 'post');
+        $this->assertTrue(is_array($result));
+        foreach ($result as $cap) {
+            $this->assertTrue($cap);
+        }
+
+        $did1 = $generator->create_discussion(array('course' => $course, 'forum' => $forum->get_id(), 'userid' => $USER->id));
+        $post = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser->id));
+
+        $rm = new rating_manager();
+        $params = array();
+        $params['context'] = $forum->get_context();
+        $params['component'] = 'mod_forumng';
+        $params['ratingarea'] = 'post';
+        $params['itemid'] = $did1[1];
+        $params['scaleid'] = $forum->get_rating_scale();
+        $params['rateduserid'] = $USER->id;
+        $params['rating'] = 21;
+
+        // Check rating valid, should fail with same user + rating too high.
+        $this->setExpectedException('rating_exception', get_string('nopermissiontorate', 'error'));
+        $rm->check_rating_is_valid($params);
+        $params['itemid'] = $post->id;
+        $params['rateduserid'] = $suser->id;
+        $this->setExpectedException('rating_exception', get_string('invalidnum', 'error'));
+        $rm->check_rating_is_valid($params);
+        $params['rating'] = 10;
+        $result = $rm->check_rating_is_valid($params);
+        $this->assertTrue($result);
+
+        // Call to update grades (should do nothing as grading not set, no assertions).
+        forumng_update_grades($DB->get_record('forumng', array('id' => $forum->get_id())));
+
+        // Check clones.
+        $forum1 = $this->get_new_forumng($course->id, array('name' => 'TEST', 'intro' => 'abc123',
+                'shared' => true, 'cmidnumber' => 'SF1',
+                'enableratings' => mod_forumng::FORUMNG_STANDARD_RATING, 'ratingscale' => 10));
+
+        $forum2 = $this->get_new_forumng($course->id, array('name' => 'TEST',
+                'usesharedgroup' => array('useshared' => true, 'originalcmidnumber' => 'SF1')));
+
+        $did1 = $generator->create_discussion(array('course' => $course, 'forum' => $forum1->get_id(), 'userid' => $USER->id));
+        $post = $generator->create_post(array('discussionid' => $did1[0], 'parentpostid' => $did1[1], 'userid' => $suser->id));
+
+        $params['itemid'] = $post->id;
+        $params['context'] = $forum2->get_context(true);
+        $result = $rm->check_rating_is_valid($params);
+        $this->assertTrue($result);
+
+    }
+
+    public function test_rating() {
+        global $USER, $DB;
+        $this->resetAfterTest();
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_forumng');
+
+        $course = $this->get_new_course();
+        $course2 = $this->get_new_course();
+        $suser = $this->get_new_user('student', $course->id);
+        $this->setAdminUser();
+
+        $forum = $this->get_new_forumng($course->id, array('name' => 'TEST', 'intro' => 'abc123',
+                'enableratings' => mod_forumng::FORUMNG_STANDARD_RATING, 'ratingscale' => 10));
+        $forum2 = $this->get_new_forumng($course->id, array('name' => 'TEST2', 'intro' => 'abc123',
+                'enableratings' => mod_forumng::FORUMNG_NO_RATING));
+        $forum3 = $this->get_new_forumng($course2->id, array('name' => 'TEST', 'intro' => 'abc123',
+                'enableratings' => mod_forumng::FORUMNG_STANDARD_RATING, 'ratingscale' => 10));
+
+        $did1 = $generator->create_discussion(array('course' => $course, 'forum' => $forum->get_id(), 'userid' => $suser->id));
+        $did2 = $generator->create_discussion(array('course' => $course, 'forum' => $forum->get_id(), 'userid' => $suser->id));
+        $did3 = $generator->create_discussion(array('course' => $course, 'forum' => $forum->get_id(), 'userid' => $suser->id));
+        $did4 = $generator->create_discussion(array('course' => $course, 'forum' => $forum->get_id(), 'userid' => $suser->id));
+        // Add rating to all 3 discussions.
+        $rm = new rating_manager();
+        $params = new stdClass();
+        $params->context = $forum->get_context();
+        $params->component = 'mod_forumng';
+        $params->ratingarea = 'post';
+        $params->scaleid = $forum->get_rating_scale();
+        $params->userid = $USER->id;
+        $params->itemid = $did1[1];
+        $rating = new rating($params);
+        $rating->update_rating(5);
+        $params->itemid = $did2[1];
+        $rating = new rating($params);
+        $rating->update_rating(5);
+        $params->itemid = $did3[1];
+        $rating = new rating($params);
+        $rating->update_rating(5);
+
+        // Check rating object gets added where expected.
+        $post = mod_forumng_post::get_from_id($did1[1], mod_forumng::CLONE_DIRECT, false, false);
+        $ratings = $post->get_ratings();
+        $this->assertNotNull($ratings);
+        $this->assertEquals($did1[1], $ratings->itemid);
+        $post = mod_forumng_post::get_from_id($did1[1], mod_forumng::CLONE_DIRECT, true, false);
+        $ratings = $post->get_ratings();
+        $this->assertNotNull($ratings);
+        $this->assertEquals($did1[1], $ratings->itemid);
+        $post = mod_forumng_post::get_from_id($did1[1], mod_forumng::CLONE_DIRECT, true, true);
+        $ratings = $post->get_ratings();
+        $this->assertNotNull($ratings);
+        $this->assertEquals($did1[1], $ratings->itemid);
+
+        $ratedposts = $forum->get_all_posts_by_user($suser->id, null, 'fp.id', null, null, true);
+        $this->assertCount(3, $ratedposts);
+        $allposts = $forum->get_all_posts_by_user($suser->id, null);
+        $this->assertCount(4, $allposts);
+        $this->assertNotNull($allposts[$did1[1]]->get_ratings());
+
+        // Update grades (does nothing).
+        $forum->update_grades();
+        // Enable rating grading, forumng_update_instance() should update grades.
+        forumng_update_instance((object) array('instance' => $forum->get_id(),
+            'grading' => mod_forumng::GRADING_SUM));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum->get_id(), $suser->id);
+        // Note sum is set to 10 not 15 as max grade is 10.
+        $this->assertEquals(10, abs($grades->items[0]->grades[$suser->id]->grade));
+
+        // Enable rating grading, forumng_update_instance() should update grades.
+        forumng_update_instance((object) array('instance' => $forum->get_id(),
+            'grading' => mod_forumng::GRADING_COUNT));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum->get_id(), $suser->id);
+        $this->assertEquals(3, abs($grades->items[0]->grades[$suser->id]->grade));
+
+        // Check get_rated_posts_by_user.
+        $extrapost = $generator->create_post(array('discussionid' => $did1[0],
+                 'parentpostid' => $did1[1], 'userid' => $suser->id, 'created' => 1388589745));
+        $extraposts = $forum->get_rated_posts_by_user($forum, $suser->id, -1, 'fp.id', null, null);
+        $this->assertCount(0, $extraposts);
+        $extraposts = $forum->get_rated_posts_by_user($forum, $USER->id, -1, 'fp.id', null, null);
+        $this->assertCount(3, $extraposts);
+        $params->itemid = $extrapost->id;
+        $rating = new rating($params);
+        $rating->update_rating(10);
+        $extraposts = $forum->get_rated_posts_by_user($forum, $USER->id, -1, 'fp.id', null, null);
+        $this->assertCount(4, $extraposts);
+        // Now filter out the 'old' extrapost.
+        $extraposts = $forum->get_rated_posts_by_user($forum, $USER->id, -1, 'fp.id', null, null, 1388600000);
+        $this->assertCount(3, $extraposts);
+
+        // Check discussion delete.
+        $discuss = mod_forumng_discussion::get_from_id($did1[0], mod_forumng::CLONE_DIRECT);
+        $discuss->permanently_delete();
+        $rating = $DB->get_record('rating', array('itemid' => $did1[1]));
+        $this->assertFalse($rating);
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum->get_id(), $suser->id);
+        $this->assertEquals(2, abs($grades->items[0]->grades[$suser->id]->grade));
+
+        // Check discussion move.
+        $discuss = mod_forumng_discussion::get_from_id($did2[0], mod_forumng::CLONE_DIRECT);
+        $discuss->move($forum2, 0);
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum->get_id(), $suser->id);
+        $this->assertEquals(1, abs($grades->items[0]->grades[$suser->id]->grade));
+        forumng_update_instance((object) array('instance' => $forum2->get_id(),
+            'grading' => mod_forumng::GRADING_COUNT,
+            'enableratings' => mod_forumng::FORUMNG_STANDARD_RATING, 'ratingscale' => 10));
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum2->get_id(), $suser->id);
+        $this->assertEquals(1, abs($grades->items[0]->grades[$suser->id]->grade));
+        $rating = $DB->get_record('rating', array('itemid' => $did2[1]));
+        $this->assertNotEmpty($rating);
+        $this->assertEquals($forum2->get_context(true)->id, $rating->contextid);
+
+        // Check discussion copy.
+        $discuss = mod_forumng_discussion::get_from_id($did3[0], mod_forumng::CLONE_DIRECT);
+        $discuss->copy($forum3, 0);
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum->get_id(), $suser->id);
+        $this->assertEquals(1, abs($grades->items[0]->grades[$suser->id]->grade));
+        // Check rating didn't copy as forum in another course.
+        $ratingtotal = $DB->get_records('rating');
+        $this->assertCount(2, $ratingtotal);
+        // Check rating does copy to foum in same course.
+        $discuss->copy($forum2, 0);
+        $ratingtotal = $DB->get_records('rating');
+        $this->assertCount(3, $ratingtotal);
+
+        // Check forum deleting.
+        course_delete_module($forum->get_course_module_id());
+        $ratingtotal = $DB->get_records('rating');
+        $this->assertCount(2, $ratingtotal);
+        $grades = grade_get_grades($course->id, 'mod', 'forumng', $forum->get_id(), $suser->id);
+        $this->assertEmpty($grades->items);
+    }
+}
diff --git a/mod/forumng/type/clone/forumngtype_clone.php b/mod/forumng/type/clone/forumngtype_clone.php
new file mode 100644
index 0000000..1e7e024
--- /dev/null
+++ b/mod/forumng/type/clone/forumngtype_clone.php
@@ -0,0 +1,34 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum type: clone forum.
+ * @package forumngtype
+ * @subpackage clone
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once($CFG->dirroot . '/mod/forumng/type/general/forumngtype_general.php');
+
+/**
+ * Clone forum type (not user-selectable).
+ */
+class forumngtype_clone extends forumngtype_general {
+    public function is_user_selectable() {
+        return false;
+    }
+}
diff --git a/mod/forumng/type/clone/lang/en/forumngtype_clone.php b/mod/forumng/type/clone/lang/en/forumngtype_clone.php
new file mode 100644
index 0000000..fd76b72
--- /dev/null
+++ b/mod/forumng/type/clone/lang/en/forumngtype_clone.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngtype
+ * @subpackage clone
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Clone forum';
diff --git a/mod/forumng/type/clone/lang/fr/forumngtype_clone.php b/mod/forumng/type/clone/lang/fr/forumngtype_clone.php
new file mode 100644
index 0000000..3e15fdb
--- /dev/null
+++ b/mod/forumng/type/clone/lang/fr/forumngtype_clone.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngtype
+ * @subpackage clone
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Forum clone (non sélectionnable par l\'utilisateur)';
diff --git a/mod/forumng/type/clone/tests/behat/basic.feature b/mod/forumng/type/clone/tests/behat/basic.feature
new file mode 100644
index 0000000..b2c155d
--- /dev/null
+++ b/mod/forumng/type/clone/tests/behat/basic.feature
@@ -0,0 +1,71 @@
+@mod @mod_forumng @ou @ou_vle @forumngtype_clone
+Feature: Clone forum
+  In order to use the same forum in multiple places
+  As a admin
+  I need to clone the forum
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+      | Course 2 | C2        | 0        |
+    And the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student1@asd.com |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+      | student2 | C2 | student |
+    Given the following config values are set as admin:
+      | forumng_enableadvanced | 1 |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum |
+      | cmidnumber | TF1 |
+      | id_shared | 1 |
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D1 |
+      | Message | abc |
+    And I am on site homepage
+    And I follow "Course 2"
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test clone forum |
+      | id_usesharedgroup_useshared | 1 |
+      | id_usesharedgroup_originalcmidnumber | TF1 |
+    And I log out
+
+  Scenario: Create and view shared forum
+    Given I log in as "student2"
+    And I am on site homepage
+    And I follow "Course 2"
+    And I follow "Test forum"
+    Then I should see "D1"
+    Given I add a discussion with the following data:
+      | Subject | D2 |
+      | Message | abc |
+    And I log out
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    Then I should see "D1"
+    And I should see "D2"
+    And I should see "TF1" in the ".forumng-shareinfo" "css_element"
+    And I should see "C2" in the ".forumng-shareinfo a" "css_element"
+    Given I am on site homepage
+    And I follow "Course 2"
+    And I follow "Test forum"
+    Then I should see "This is a shared forum"
+    And I should see "C1" in the ".forumng-shareinfo" "css_element"
+    Given I follow "Edit settings"
+    Then I should not see "Forum introduction"
+    And I should see "This is a shared forum"
+    When I press "Save and display"
+    And I follow "original forum"
+    Then I should see "C1"
+    And I log out
diff --git a/mod/forumng/type/clone/version.php b/mod/forumng/type/clone/version.php
new file mode 100644
index 0000000..c741e6b
--- /dev/null
+++ b/mod/forumng/type/clone/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngtype
+ * @subpackage clone
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngtype_clone';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/type/forumngtype.php b/mod/forumng/type/forumngtype.php
new file mode 100644
index 0000000..3538316
--- /dev/null
+++ b/mod/forumng/type/forumngtype.php
@@ -0,0 +1,209 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Base class for forum types.
+ *
+ * A forum type can control display of the view and discussion pages. (It
+ * cannot control display of the index page because that is shared by all
+ * forums so has no type!)
+ *
+ * For example, this could be used to add extra text or features.
+ *
+ * It can also control whether users can post or reply in the forum. These
+ * restrictions are in addition to any applied by the normal capability system.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+abstract class forumngtype {
+    /**
+     * Displays the view page (usually showing a list of discussions).
+     * @param mod_forumng $forum Forum
+     * @param int $groupid Group ID
+     */
+    abstract public function print_view_page($forum, $groupid);
+
+    /**
+     * Displays the discussion page.
+     * @param mod_forumng_discussion $discussion Discussion
+     */
+    abstract public function print_discussion_page($discussion);
+
+    /**
+     * Checks if user is allowed to post to this forum (if capabilities permit).
+     * Default implementation just returns true.
+     * @param mod_forumng $forum Forum
+     * @param string &$whynot Output parameter - set to a language string name
+     *   to give a specific reason for failure that is displayed on view
+     *   screen where the button would be (otherwise will not report one)
+     * @param int $userid User ID or 0 for current user
+     * @return bool False to prevent user posting; true to allow it subject
+     *   to normal restrictions
+     */
+    public function can_post($forum, &$whynot, $userid=0) {
+        return true;
+    }
+
+    /**
+     * Checks if user is allowed to view a discussion on this forum (if
+     * capabilities/groups permit). Default implementation just returns true.
+     *
+     * Note that implementing this function usually also requires implementation
+     * of get_unread_restriction_sql.
+     *
+     * @param mod_forumng_discussion $discussion Discussion
+     * @param int $userid User ID or 0 for current user
+     * @return bool False to prevent user viewing; true to allow it subject
+     *   to normal restrictions
+     */
+    public function can_view_discussion($discussion, $userid=0) {
+        return true;
+    }
+
+    /**
+     * Forum types can change the way unread status is calculated. If this
+     * is done, then extra SQL queries will be required when accessing forum
+     * unread data on courses that include forums of this type. The function
+     * get_unread_restriction_sql must be implemented.
+     * @return bool True if this forum changes the way 'unread' status is
+     *   calculated
+     */
+    public function has_unread_restriction() {
+        return false;
+    }
+
+    /**
+     * Obtains additional SQL used to restrict the list of discussions counted
+     * in the 'unread' queries.
+     *
+     * Valid aliases: 'fd' (forumng_discussions), 'fplast' (forumng_post; most
+     *   recent post in discussion), 'fpfirst' (forumng_post; first post in
+     *   discussion), f (forummg), cm (course_modules), c (course).
+     * @param mod_forumng Forum object
+     * @param int $userid
+     * @return array Array with 2 elements: SQL code and array of parameters
+     */
+    public function get_unread_restriction_sql($forum, $userid=0) {
+        return array('', array());
+    }
+
+    /**
+     * Checks if user is allowed to reply to a post on this forum (if
+     * capabilities permit). Default implementation just returns true.
+     * @param mod_forumng_post $inreplyto Post being replied to
+     * @param int $userid User ID or 0 for current user
+     * @return bool False to prevent user posting; true to allow it subject
+     *   to normal restrictions
+     */
+    public function can_reply($inreplyto, $userid=0) {
+        return true;
+    }
+
+    /**
+     * Checks whether a discussion feature is allowed for this forum type.
+     * Default just returns true. This could be used to veto selected features.
+     * @param mod_forumng_discussion $discussion
+     * @param forumngfeature_discussion $feature
+     * @return bool True to allow
+     */
+    public function allow_forumngfeature_discussion($discussion, $feature) {
+        return true;
+    }
+
+
+    // Type plugin basics
+    /* ////////////////// */
+
+    /**
+     * Obtains the ID of this forum type. Default implementation cuts
+     * '_forumngtype' off the class name and returns that.
+     * @return string ID
+     */
+    public function get_id() {
+        return str_replace('forumngtype_', '', get_class($this));
+    }
+
+    /**
+     * Obtains the display name of this forum type. Default implementation
+     * gets string type_(whatever) from forumng language file.
+     * @return string Name
+     */
+    public function get_name() {
+        return get_string('pluginname', 'forumngtype_' . $this->get_id());
+    }
+
+    /**
+     * Creates a new object of the given named type.
+     * @param $type Type name (may be null for default)
+     * @return forumngtype Type
+     * @throws mod_forumng_exception If the name isn't valid
+     */
+    public static function get_new($type) {
+        // Get type name
+        if (!$type) {
+            $type = 'general';
+        }
+        if (!preg_match('~^[a-z][a-z0-9_]*$~', $type)) {
+            throw new coding_exception("Invalid forum type name: $type");
+        }
+        $classname = 'forumngtype_' . $type;
+
+        // Require library
+        global $CFG;
+        require_once(dirname(__FILE__) . "/$type/$classname.php");
+
+        // Create and return type object
+        return new $classname;
+    }
+
+    /**
+     * Returns a new object of each available type.
+     * @return array Array of forumngtype objects
+     */
+    public static function get_all() {
+        global $CFG;
+        // Get directory listing (excluding simpletest, CVS, etc)
+        $list = core_component::get_plugin_list('forumngtype');
+
+        $results = array();
+        foreach ($list as $name => $location) {
+            $results[] = self::get_new(str_replace('forumngtype_', '', $name));
+        }
+        return $results;
+    }
+
+    /**
+     * Provided so that forum types can override certain language strings.
+     * @param mod_forumng $forum Forum object
+     * @param string $string Language string id (note: must be from forumng
+     *   language file)
+     * @param mixed $a Value or null
+     * @return string Evaluated string
+     */
+    protected function get_string($forum, $string, $a=null) {
+        return get_string($string, 'forumng', $a);
+    }
+
+    /**
+     * @return bool True if the user is allowed to select this type, false
+     *   if it's only used internally
+     */
+    public function is_user_selectable() {
+        return true;
+    }
+}
diff --git a/mod/forumng/type/general/forumngtype_general.php b/mod/forumng/type/general/forumngtype_general.php
new file mode 100644
index 0000000..874df94
--- /dev/null
+++ b/mod/forumng/type/general/forumngtype_general.php
@@ -0,0 +1,336 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forum type: Normal forum.
+ * @package forumngtype
+ * @subpackage general
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngtype_general extends forumngtype {
+    /**
+     * Displays the view page (usually showing a list of discussions).
+     * @param mod_forumng $forum Forum
+     * @param int $groupid Group ID
+     */
+    public function print_view_page($forum, $groupid) {
+        global $SESSION, $PAGE, $USER;
+        $out = mod_forumng_utils::get_renderer();
+        $forumngid = $forum->get_id();
+        $baseurl = 'view.php?' . $forum->get_link_params(mod_forumng::PARAM_PLAIN);
+
+        if (isset($SESSION->forumng_discussionlist[$forumngid]) &&
+            property_exists($SESSION->forumng_discussionlist[$forumngid], 'groupid') &&
+            $SESSION->forumng_discussionlist[$forumngid]->groupid != $groupid) {
+            unset($SESSION->forumng_discussionlist[$forumngid]->page);
+            unset($SESSION->forumng_discussionlist[$forumngid]->groupid);
+        }
+
+        // Remember the sort order and page number in session variables
+        // Unset the page session variable when the sort links are clicked
+        // or groupid has been changed (using the group dropdown box)
+        $sortorder = optional_param('sort', '' , PARAM_ALPHA);
+        if (!$sortorder) {
+            if (isset($SESSION->forumng_discussionlist[$forumngid]->sort)) {
+                $sortorder = $SESSION->forumng_discussionlist[$forumngid]->sort;
+            } else {
+                $sortorder = 'd';
+            }
+        } else {
+            if (optional_param('sortlink', '' , PARAM_ALPHA)) {
+                if (!isset($SESSION->forumng_discussionlist[$forumngid])) {
+                    $SESSION->forumng_discussionlist[$forumngid] = new stdClass();
+                }
+                $SESSION->forumng_discussionlist[$forumngid]->sort = $sortorder;
+                unset ($SESSION->forumng_discussionlist[$forumngid]->page);
+            }
+        }
+
+        $page = optional_param('page', 0, PARAM_INT);
+        if (!$page) {
+            if (isset($SESSION->forumng_discussionlist[$forumngid]->page)) {
+                $page = $SESSION->forumng_discussionlist[$forumngid]->page;
+            } else {
+                $page = 1;
+            }
+        } else {
+            if (!isset($SESSION->forumng_discussionlist[$forumngid])) {
+                $SESSION->forumng_discussionlist[$forumngid] = new stdClass();
+            }
+            $SESSION->forumng_discussionlist[$forumngid]->page = $page;
+            $SESSION->forumng_discussionlist[$forumngid]->groupid = $groupid;
+        }
+
+        $baseurl .= '&page='.$page;
+
+        $sortchar = substr($sortorder, 0, 1);
+        if (strlen($sortorder) == 2) {
+            $sortreverse = (substr($sortorder, 1, 1) == 'r') ? true : false;
+        } else {
+            $sortreverse = false;
+        }
+
+        $baseurl .= '&sort='.$sortchar;
+        $baseurl .= ($sortreverse) ? 'r':'';
+
+        $sort = mod_forumng::get_sort_code($sortchar);
+
+        // Get tagid if used.
+        $tag = optional_param('tag', null, PARAM_ALPHANUM);
+        $list = $forum->get_discussion_list($groupid, $forum->can_view_hidden(),
+                $page, $sort, $sortreverse, 0, true,  $tag);
+        $sticky = $list->get_sticky_discussions();
+        $normal = $list->get_normal_discussions();
+
+        // Remove discussions from list if the forumtype thinks we can't see
+        // them
+        foreach ($sticky as $key => $value) {
+            if (!$this->can_view_discussion($value)) {
+                unset($sticky[$key]);
+            }
+        }
+        foreach ($normal as $key => $value) {
+            if (!$this->can_view_discussion($value)) {
+                unset($normal[$key]);
+            }
+        }
+
+        // Intro
+        print $out->render_introduction($forum);
+
+        // Flagged posts skip link.
+        $flaggedposts = $forum->get_flagged_posts();
+        $flagdiscussions = $forum->get_flagged_discussions();
+        $flaggeddiscussions = array();
+
+        // Need to loop through flagged discussions removing any that can not be viewed by user.
+        foreach ($flagdiscussions as $discussion) {
+            if ($discussion->can_view($USER->id)) {
+                // Add to flagged discussions.
+                array_push($flaggeddiscussions, $discussion);
+            }
+        }
+
+        if ((count($flaggedposts) + count($flaggeddiscussions)) > 0) {
+            $output = html_writer::start_tag('div', array('class' => 'forumng-flagged-link'));
+            $output .= $out->render_flagged_list_link($flaggeddiscussions, true);
+            $output .= $out->render_flagged_list_link($flaggedposts);
+            $output .= html_writer::end_tag('div');
+            echo $output;
+        }
+
+        // Draft posts
+        $drafts = $forum->get_drafts();
+        if (count($drafts) > 0) {
+            print $out->render_draft_list_start();
+            foreach ($drafts as $draft) {
+                print $out->render_draft_list_item($forum, $draft, $draft==end($drafts));
+            }
+            print $out->render_draft_list_end();
+        }
+
+        // Print info about the start and end dates of the forum from the form setting
+        $stringend =
+            has_capability('mod/forumng:ignorepostlimits', $forum->get_context())
+            ? 'capable' : '';
+        $startdate = $forum->get_postingfrom();
+        $enddate = $forum->get_postinguntil();
+
+        // Before start date
+        if (time() < $startdate) {
+            $message = get_string('beforestartdate' . $stringend,
+                    'forumng', mod_forumng_utils::display_date($startdate));
+            print "<div class='forumng-show-dates'>$message</div>";
+        } else if (time() < $enddate) {
+            $message = get_string('beforeenddate' . $stringend,
+                    'forumng', mod_forumng_utils::display_date($enddate));
+            print "<div class='forumng-show-dates'>$message</div>";
+        }
+
+        // After end date
+        if ($enddate && time() >= $enddate) {
+            $message = get_string('afterenddate' . $stringend,
+                    'forumng', mod_forumng_utils::display_date($enddate));
+            print "<div class='forumng-show-dates'>$message</div>";
+        }
+
+        // Show Alert info.
+        if ($forum->has_reporting_email()) {
+            print $out->box(get_string('alert_intro', 'forumng'), 'generalbox', 'forumng-reportingon');
+        }
+
+        // Post button - temporarily disabled when in all-groups mode
+        print ($groupid == null) ? '':$forum->display_post_button($groupid);
+        if ($taglist = $forum->get_tags_used($groupid)) {
+            print $out->render_tag_filter($taglist, $forum, $tag);
+        }
+
+        // Provide link to skip sticky discussions.
+        if (count($sticky) > 0 && count($normal) > 0) {
+            print $out->render_skip_link(key($normal));
+        }
+
+        print $list->display_paging_bar($baseurl);
+
+        if (count($sticky) + count($normal) > 0) {
+            print $out->render_discussion_list_start(
+                    $forum, $groupid, $baseurl, $sort, $sortreverse);
+            foreach ($sticky as $discussion) {
+                print $out->render_discussion_list_item($discussion, $groupid,
+                    count($normal) == 0 && $discussion == end($sticky));
+            }
+            if (count($sticky) > 0 && count($normal) > 0) {
+                print $out->render_discussion_list_divider($forum, $groupid);
+            }
+            foreach ($normal as $discussion) {
+                print $out->render_discussion_list_item($discussion, $groupid,
+                        $discussion == end($normal));
+            }
+            print $out->render_discussion_list_end($forum, $groupid);
+        } else {
+            print '<p class="forumng-nodiscussions">' .
+                $this->get_string($forum, 'nodiscussions') . '</p>';
+        }
+
+        print $list->display_paging_bar($baseurl);
+
+        print $forum->display_forumngfeature_discussion_lists($groupid);
+
+        // Flagged discussions.
+        if (count($flaggeddiscussions) > 0) {
+            print $out->render_flagged_list_start(true);
+            foreach ($flaggeddiscussions as $discussion) {
+                print $out->render_flagged_discuss_list_item($discussion, $discussion === end($flaggeddiscussions));
+            }
+            print $out->render_flagged_list_end();
+        }
+
+        // Flagged posts.
+        if (count($flaggedposts) > 0) {
+            print $out->render_flagged_list_start();
+            foreach ($flaggedposts as $post) {
+                print $out->render_flagged_list_item($post,
+                    $post === end($flaggedposts));
+            }
+            print $out->render_flagged_list_end();
+        }
+
+        print $out->render_forum_footer($forum, $groupid);
+
+        // display the warning message for invalid archive setting
+        print $forum->display_archive_warning();
+
+        // Display sharing information
+        print $forum->display_sharing_info();
+    }
+
+    /**
+     * Displays the discussion page.
+     * @param mod_forumng_discussion $discussion Discussion
+     */
+    public function print_discussion_page($discussion) {
+        global $PAGE;
+        $out = mod_forumng_utils::get_renderer();
+
+        print $out->render_discussion_header($discussion);
+
+        $previousread = (int)$discussion->get_time_read();
+
+        // 'Read date' option (used when viewing all posts so that they keep
+        // their read/unread colouring)
+        $timeread = optional_param('timeread', 0, PARAM_INT);
+        if ($timeread) {
+            $discussion->pretend_time_read($timeread);
+            $previousread = $timeread;
+        }
+
+        // 'Expand all' option (always chosen for non-JS browsers)
+        $expandall = optional_param('expand', 0, PARAM_INT)
+            || $PAGE->devicetypeinuse == 'legacy';
+        // 'Expand all' option (always chosen for non-JS browsers)
+        $collapseall = optional_param('collapse', 0, PARAM_INT);
+        if (!$collapseall && !$expandall && $PAGE->devicetypeinuse == 'mobile') {
+            $collapseall = 1;
+        }
+
+        // Link back to first unread post if there is one
+        print $discussion->display_unread_skip_link();
+
+        // Magic expand tracker (for use in JS only, never set server-side).
+        // This tracks expanded posts, and makes the Back button 'work' in
+        // the sense that it will expand these posts again.
+        print '<form method="post" action="."><div>'.
+            '<input type="hidden" id="expanded_posts" name="expanded_posts" ' .
+            'value="" /></div></form>';
+
+        // Get content for all posts in the discussion
+        $options = array();
+        if ($expandall) {
+            $options[mod_forumng_post::OPTION_CHILDREN_EXPANDED] = true;
+        }
+        if ($collapseall) {
+            $options[mod_forumng_post::OPTION_CHILDREN_COLLAPSED] = true;
+        }
+        $content = $out->render_discussion($discussion, $options);
+
+        // Some post display options use the read time to construct links
+        // (usually for non-JS version) so that unread state is maintained.
+        $options[mod_forumng_post::OPTION_READ_TIME] = $previousread;
+
+        // Display expand all option if there are any 'Expand' links in content
+        $fakedate = '&amp;timeread=' . $previousread;
+        print '<div id="forumng-expandall">';
+        $showexpandall = preg_match(
+            '~<a [^>]*href="discuss\.php\?d=[0-9]+[^"]*&amp;expand=1#p[0-9]+">~',
+            $content);
+        // Note: On bad browsers we always expand all posts
+        $showcollapseall = preg_match(
+            '~<div class="forumng-post forumng-full.*<div class="forumng-post forumng-full~s',
+            $content) && $PAGE->devicetypeinuse != 'legacy';
+        if ($showexpandall) {
+            print '<a class="forumng-expandall-link" href="' .
+                        $discussion->get_url(mod_forumng::PARAM_HTML) . '&amp;expand=1' .
+                        $fakedate . '">' . get_string('expandall', 'forumng') . '</a>';
+            if ($showcollapseall) {
+                print '<span class="forumng-dot-separator"> &#x2022; </span>';
+            }
+        }
+        if ($showcollapseall) {
+            print '<a class="forumng-collapseall-link" href="' .
+                    $discussion->get_url(mod_forumng::PARAM_HTML) . '&amp;collapse=1' .
+                    $fakedate . '">' . get_string('collapseall', 'forumng') . '</a> ';
+        }
+        print '</div>';
+
+        // Display content
+        print $content;
+
+        // Link back to forum
+        print $discussion->display_link_back_to_forum();
+
+        // Display discussion features (row of buttons)
+        print $discussion->display_forumngfeature_discussions();
+
+        print $out->render_discussion_footer($discussion);
+
+        // Set read data [shouldn't this logic be somewhere else as it is not
+        // part of display?]
+        if (mod_forumng::mark_read_automatically()) {
+            $discussion->mark_read();
+        }
+    }
+}
diff --git a/mod/forumng/type/general/lang/en/forumngtype_general.php b/mod/forumng/type/general/lang/en/forumngtype_general.php
new file mode 100644
index 0000000..2a398fc
--- /dev/null
+++ b/mod/forumng/type/general/lang/en/forumngtype_general.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngtype
+ * @subpackage general
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Standard forum for general use';
diff --git a/mod/forumng/type/general/lang/fr/forumngtype_general.php b/mod/forumng/type/general/lang/fr/forumngtype_general.php
new file mode 100644
index 0000000..638eb1a
--- /dev/null
+++ b/mod/forumng/type/general/lang/fr/forumngtype_general.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngtype
+ * @subpackage general
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Forum standard pour utilisation générale';
diff --git a/mod/forumng/type/general/version.php b/mod/forumng/type/general/version.php
new file mode 100644
index 0000000..7fa6676
--- /dev/null
+++ b/mod/forumng/type/general/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngtype
+ * @subpackage general
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngtype_general';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/type/studyadvice/forumngtype_studyadvice.php b/mod/forumng/type/studyadvice/forumngtype_studyadvice.php
new file mode 100644
index 0000000..a35c1ac
--- /dev/null
+++ b/mod/forumng/type/studyadvice/forumngtype_studyadvice.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once($CFG->dirroot . '/mod/forumng/type/general/forumngtype_general.php');
+
+/**
+ * Forum type: Study advice (users can only see discussions they posted).
+ * @package forumngtype
+ * @subpackage studyadvice
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class forumngtype_studyadvice extends forumngtype_general {
+    public function can_view_discussion($discussion, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+
+        // When loaded from cron, we need to 'fill' the discussion
+        // (time-consuming but oh well) to get the userid
+        $discussion->fill(-1);
+        return $discussion->get_poster()->id == $userid
+            || $discussion->get_forum()->can_view_hidden($userid);
+    }
+
+    public function has_unread_restriction() {
+        return true;
+    }
+
+    public function get_unread_restriction_sql($forum, $userid=0) {
+        $userid = mod_forumng_utils::get_real_userid($userid);
+        // See if they're already allowed to view all discussions
+        if ($forum->can_view_hidden($userid)) {
+            return array('', array());
+        }
+        // Otherwise restrict it
+        return array('fpfirst.userid = ?', array($userid));
+    }
+
+    protected function get_string($forum, $string, $a=null) {
+        if ($string == 'nodiscussions') {
+            return get_string(
+                $forum->can_view_hidden() ? 'studyadvice_noquestions'
+                    : 'studyadvice_noyourquestions', 'forumng');
+        } else {
+            return parent::get_string($string, $a);
+        }
+    }
+}
diff --git a/mod/forumng/type/studyadvice/lang/en/forumngtype_studyadvice.php b/mod/forumng/type/studyadvice/lang/en/forumngtype_studyadvice.php
new file mode 100644
index 0000000..a6e6aa4
--- /dev/null
+++ b/mod/forumng/type/studyadvice/lang/en/forumngtype_studyadvice.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngtype
+ * @subpackage studyadvice
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Study advice (only see own discussions)';
diff --git a/mod/forumng/type/studyadvice/lang/fr/forumngtype_studyadvice.php b/mod/forumng/type/studyadvice/lang/fr/forumngtype_studyadvice.php
new file mode 100644
index 0000000..8771424
--- /dev/null
+++ b/mod/forumng/type/studyadvice/lang/fr/forumngtype_studyadvice.php
@@ -0,0 +1,24 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Lang strings.
+ * @package forumngtype
+ * @subpackage studyadvice
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$string['pluginname'] = 'Discussion personnelle (ne voit que ses propres discussions)';
diff --git a/mod/forumng/type/studyadvice/tests/behat/basic.feature b/mod/forumng/type/studyadvice/tests/behat/basic.feature
new file mode 100644
index 0000000..32bc08a
--- /dev/null
+++ b/mod/forumng/type/studyadvice/tests/behat/basic.feature
@@ -0,0 +1,58 @@
+@mod @mod_forumng @ou @ou_vle @forumngtype_studyadvice
+Feature: Study advice discussions
+  In order to use forum for study advice
+  As a student
+  I need to post discussions that others cannot see
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1        | 0        |
+    And the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student1@asd.com |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "ForumNG" to section "1" and I fill the form with:
+      | Forum name | Test forum |
+      | Forum type | studyadvice |
+    And I follow "Test forum"
+    And I add a discussion with the following data:
+      | Subject | D1 |
+      | Message | abc |
+    And I log out
+
+  Scenario: View flagged discussions
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    Then I should not see "D1"
+    Given I add a discussion with the following data:
+      | Subject | D2 |
+      | Message | abc |
+    And I log out
+    Given I log in as "student2"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    Then I should not see "D2"
+    Given I add a discussion with the following data:
+      | Subject | D3 |
+      | Message | abc |
+    And I log out
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "Test forum"
+    Then I should see "D1"
+    And I should see "D2"
+    And I should see "D3"
+    And I log out
diff --git a/mod/forumng/type/studyadvice/version.php b/mod/forumng/type/studyadvice/version.php
new file mode 100644
index 0000000..4ea519f
--- /dev/null
+++ b/mod/forumng/type/studyadvice/version.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ * @package forumngtype
+ * @subpackage studyadvice
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$plugin->version  = 2011020300;
+$plugin->component = 'forumngtype_studyadvice';
+$plugin->outestssufficient = true;
diff --git a/mod/forumng/version.php b/mod/forumng/version.php
new file mode 100644
index 0000000..10409f0
--- /dev/null
+++ b/mod/forumng/version.php
@@ -0,0 +1,31 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ *
+ * @package mod_forumng
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$plugin->version = 2017042106;
+$plugin->requires = 2016052300;
+$plugin->component = 'mod_forumng';
+$plugin->maturity = MATURITY_STABLE;
+$plugin->release = '3.1 r1';
diff --git a/mod/forumng/view.php b/mod/forumng/view.php
new file mode 100644
index 0000000..f00eb4a
--- /dev/null
+++ b/mod/forumng/view.php
@@ -0,0 +1,101 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Main forum page view.
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once('../../config.php');
+
+require_once('mod_forumng.php');
+
+// Require ID parameter here. Other parameters may be required in forum type.
+$id = required_param('id', PARAM_INT);
+
+// On the view page ONLY we allow a default for the clone parameter that won't
+// cause an error if it's omitted. All other pages have default 0, which will
+// show up any errors caused if the parameter is omitted somewhere.
+$cloneid = optional_param('clone', mod_forumng::CLONE_DIRECT, PARAM_INT);
+
+$params = array('id' => $id);
+if ($cloneid !== mod_forumng::CLONE_DIRECT) {
+    $params['clone'] = $cloneid;
+}
+$pageurl = new moodle_url('/mod/forumng/view.php', $params);
+
+// Construct forum variable (will check id is valid)
+$forum = mod_forumng::get_from_cmid($id, $cloneid);
+$course = $forum->get_course();
+$cm = $forum->get_course_module();
+
+// If this is a clone, redirect to original
+if ($forum->is_clone()) {
+    $forum->redirect_to_original();
+}
+
+// Check that forum can be viewed [Handles all other permissions]
+$groupid = mod_forumng::get_activity_group($cm, true);
+$forum->require_view($groupid, 0, true);
+
+// Get update button, if allowed for current user
+$strforum = get_string("modulename", "forum");
+
+// Atom header meta tag
+$feedtype = $forum->get_effective_feed_option();
+if ($feedtype == mod_forumng::FEEDTYPE_DISCUSSIONS ||
+    ($feedtype == mod_forumng::FEEDTYPE_ALL_POSTS
+        && $forum->can_view_discussions())) {
+    $atomurl = $forum->get_feed_url(mod_forumng::FEEDFORMAT_ATOM, $groupid);
+    $meta = '<link rel="alternate" type="application/atom+xml" ' .
+      'title="Atom feed" href="' . htmlspecialchars($atomurl) . '" />';
+} else {
+    $meta = '';
+}
+
+// Initialize $PAGE, compute blocks
+global $CURRENTFORUM;
+$CURRENTFORUM = $forum;
+
+// Update completion 'viewed' flag if in use
+$completion = new completion_info($course);
+$completion->set_module_viewed($cm);
+// Display header. Because this pagelib class doesn't actually have a
+// $buttontext parameter, there has to be a really evil hack
+$out = $forum->init_page($pageurl);
+print $out->header();
+$forum->print_js($cm->id);
+
+print $out->render_forum_header($forum, $groupid);
+
+// Display group selector if required
+groups_print_activity_menu($cm, $forum->get_url(mod_forumng::PARAM_HTML));
+
+print $out->container_start('forumng-main');
+print $out->render_switch_link($forum);
+print $out->skip_link_target();
+// Get forum type to display main part of page
+$forum->get_type()->print_view_page($forum, $groupid);
+
+print $out->container_end();
+
+// Log request
+$forum->log('view');
+
+// Display footer
+print $out->footer($course);
diff --git a/mod/forumng/viewmode.php b/mod/forumng/viewmode.php
new file mode 100644
index 0000000..1241bd3
--- /dev/null
+++ b/mod/forumng/viewmode.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Switch between simple view and standard view for accessibility purpose
+ * @package mod
+ * @subpackage forumng
+ * @copyright 2011 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_login();
+
+$viewmode = required_param('simple', PARAM_INT);
+if ($viewmode) {
+    set_user_preference('forumng_simplemode', 'y');
+} else {
+    unset_user_preference('forumng_simplemode');
+}
+
+// Redirect back
+redirect($_SERVER['HTTP_REFERER']);
diff --git a/mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck-debug.js b/mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..48a4a16c0f9585d9ce62342c503efdd8d1aa4ef8
GIT binary patch
literal 2705
zcma)8ZExE)5dQ98adUx5$!s|V)-Ub?v{-{77}^v|w!#>SfR;`&VTsg8%3hHAzweHE
zsb$Gs1sD>|<Gnuj99MtdMj}bVpwK$WabD=;G1aCjR5rI_hw%pEZ7_qhQn8a-LAaX1
zhqv!<F5r1Gc^@6g!!`8RU%tTe;dNgq>XefB^91NwTweM&T*BKVvA_}#TC|qzU4ZvM
zs;qNC<kCHX(_pK0AswtM=d`j>qh#UVQc1V$j)bvR4*zvBVYk^RKZ^xC7*PTyq=l@q
z5up-rXladRhX$mDs%%u#k)1HGcFL0Tt4QQ|7`%|lW9>-o#|->G6hmS}>Vk{cojpDn
zX%z->E_+E0@z^bPtxGp2BNZ|aPbFB20=Va7u>dAB5IGtLIt7Jpugw;;p*VaVDG*!X
z*Fg9<KOB%xj&i<!m6Lgtp?kE>P(H$-b)Zp6PzV})9EVmb>(r$(>&n}19lxD)IW7q<
zXU%zup0Qb%$74<WT~LT3BYjOE=OxR$%A~SO_<I$7^xx4tBeKuuPY}LEz656~9JNpQ
zK6Qsvx|iycOx(ufL@Nw~wN9Rb3r=kqw7X*&lqrPmKKuedzq%T$JlmvbDbLZqvC|!z
z!>g;ISBFtQOQA3)Cl&6g8nHG=s3s6`!;tbL@U~I<6OrBMeK@j<QE708%Dp4hR=FFK
z;Rt&~!Gu#psiYP)JCUD@m(lKY2`mk*FbE57LtSdnqO&Jt&^q0`;~a&#ZOnYzhwn+C
z?`N_a28py{O)bcP?Y>9S(=tvhR7`nivMIzCf%r$jZ#NGx2djZw*Aj#XKDj2mp6S|J
z2NRJ87}HLzcMMkb&Udm;n>I$W&-Pa%1~X#ic_E~N7X@#=95crn_%xF)!OIu8_A-?Y
zi%0Uc>Dq6d7S4&7duZ%@y;%^}>^U85Ju+D69gYE!ovgL|kB~R-3tgbwXkTV(<T0~{
zldAXIuA_B7)R<aBXN0oC&sIqkPB1QMm?4q5$?RAw5Qcu`q1=hW-S0z$aFeyVD7sqd
z16SjRYY6l<7*ov&;VwhMB|Fy)7Dy`OdF#QrXa@=!qs`DT>u6`jSkn6m>971SO2<b>
zo%tmMAMfrTf+1li!U@`C@3#1K9l%daXlWKT|Ij-4(GLi|2KfDMHPoin^5~+#F}07a
z;+SmEu;C(bq{GuJ%QLw$G?dz84EXmjJZPU(To0QW)!~yMULfporHM;DH6TzY^N;zX
zzIP03;ADZiqWjOwD|&i{Pv+GslA7)#O!lUr`et+&Qc<}niODE=M__J&eVCAn$>cyx
z_vWvgKkjeuKD;5}=c&PeDoLJBX}V6=!s2uWQ>7FCmYP@19h1k*Txlm$84JEt&i%}p
Ier6m00Zf?8%K!iX

literal 0
HcmV?d00001

diff --git a/mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck-min.js b/mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..38f564de8a8f1f1ea64d2ae688eae184048a6960
GIT binary patch
literal 1040
zcmaJ=Pfy!06u<9N6j!Pe;aVWUC0!&A?7)G62HP|tRJqAZ`h;V5_Dc&2`R;p8OGmYd
zOJYCU&%b~E_5DievP?wdTxnq1xN=@O-!`_M2EB%23B{9;Rci}EXA_W=cGv3Nw)|lB
z`r7sKprZC|@(wLhw(rHA*4mG34oVx7h%uJ)&@LLJMN8zY91RslQF>jGNM}|t1W_0~
zz~s~Jt>*}nZBt@cEum30&^(YwTPGqSsWci3v~iwki5*puO3XV#GLU_6ZrE^es(}!6
z4H?OmX=}70djNGi4ArIA^`m5^w8@T6dKs9fvyg~|D_=w!ktJe-_9vFKWOCv2+4;$2
zlAzkeN*<=?C+RFI<Z=s}(X}d^k5YlB1k;&QVd*wWD!p2HSc9cYX4e|x(t!if&_-2g
z3H(}{$)qr#{nc)oe6%-}R)vVO#Gn@jN@l+wZo##0w4zyswgng_)Be|~ca9HAj6Kwx
zs%fLqj>b*IdCFe+JQ~ePjVmN*=G=HE^kCFKi<(Fm%Z3#Qe6?2|8n*_P0sjtnJQ|>-
zi!4}uk@ji7Pfm#0mNxB(4~3Pp0q)_Mj&k9i#AL$3>bG8W+a8&?y}7#=vecwA5jY4>
z@REyTwyCOFv|)ZMCWT|6p9xD|Bk63`g|;YoISVp|vGtH4r{l#I91}^{fNLo`g|mJJ
z3LWR&*$RDQTwOznR;`vRAzcLD_flN^`10-U>gMZ(ke!F$Ei(G-K`e9trfFRnf9UwL
Zd*U%gQ|kyTEOdO-(;-sgu}^28{s5VuZ94z}

literal 0
HcmV?d00001

diff --git a/mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck.js b/mod/forumng/yui/build/moodle-mod_forumng-savecheck/moodle-mod_forumng-savecheck.js
new file mode 100644
index 0000000000000000000000000000000000000000..48a4a16c0f9585d9ce62342c503efdd8d1aa4ef8
GIT binary patch
literal 2705
zcma)8ZExE)5dQ98adUx5$!s|V)-Ub?v{-{77}^v|w!#>SfR;`&VTsg8%3hHAzweHE
zsb$Gs1sD>|<Gnuj99MtdMj}bVpwK$WabD=;G1aCjR5rI_hw%pEZ7_qhQn8a-LAaX1
zhqv!<F5r1Gc^@6g!!`8RU%tTe;dNgq>XefB^91NwTweM&T*BKVvA_}#TC|qzU4ZvM
zs;qNC<kCHX(_pK0AswtM=d`j>qh#UVQc1V$j)bvR4*zvBVYk^RKZ^xC7*PTyq=l@q
z5up-rXladRhX$mDs%%u#k)1HGcFL0Tt4QQ|7`%|lW9>-o#|->G6hmS}>Vk{cojpDn
zX%z->E_+E0@z^bPtxGp2BNZ|aPbFB20=Va7u>dAB5IGtLIt7Jpugw;;p*VaVDG*!X
z*Fg9<KOB%xj&i<!m6Lgtp?kE>P(H$-b)Zp6PzV})9EVmb>(r$(>&n}19lxD)IW7q<
zXU%zup0Qb%$74<WT~LT3BYjOE=OxR$%A~SO_<I$7^xx4tBeKuuPY}LEz656~9JNpQ
zK6Qsvx|iycOx(ufL@Nw~wN9Rb3r=kqw7X*&lqrPmKKuedzq%T$JlmvbDbLZqvC|!z
z!>g;ISBFtQOQA3)Cl&6g8nHG=s3s6`!;tbL@U~I<6OrBMeK@j<QE708%Dp4hR=FFK
z;Rt&~!Gu#psiYP)JCUD@m(lKY2`mk*FbE57LtSdnqO&Jt&^q0`;~a&#ZOnYzhwn+C
z?`N_a28py{O)bcP?Y>9S(=tvhR7`nivMIzCf%r$jZ#NGx2djZw*Aj#XKDj2mp6S|J
z2NRJ87}HLzcMMkb&Udm;n>I$W&-Pa%1~X#ic_E~N7X@#=95crn_%xF)!OIu8_A-?Y
zi%0Uc>Dq6d7S4&7duZ%@y;%^}>^U85Ju+D69gYE!ovgL|kB~R-3tgbwXkTV(<T0~{
zldAXIuA_B7)R<aBXN0oC&sIqkPB1QMm?4q5$?RAw5Qcu`q1=hW-S0z$aFeyVD7sqd
z16SjRYY6l<7*ov&;VwhMB|Fy)7Dy`OdF#QrXa@=!qs`DT>u6`jSkn6m>971SO2<b>
zo%tmMAMfrTf+1li!U@`C@3#1K9l%daXlWKT|Ij-4(GLi|2KfDMHPoin^5~+#F}07a
z;+SmEu;C(bq{GuJ%QLw$G?dz84EXmjJZPU(To0QW)!~yMULfporHM;DH6TzY^N;zX
zzIP03;ADZiqWjOwD|&i{Pv+GslA7)#O!lUr`et+&Qc<}niODE=M__J&eVCAn$>cyx
z_vWvgKkjeuKD;5}=c&PeDoLJBX}V6=!s2uWQ>7FCmYP@19h1k*Txlm$84JEt&i%}p
Ier6m00Zf?8%K!iX

literal 0
HcmV?d00001

diff --git a/mod/forumng/yui/src/savecheck/build.json b/mod/forumng/yui/src/savecheck/build.json
new file mode 100644
index 0000000..6a7694e
--- /dev/null
+++ b/mod/forumng/yui/src/savecheck/build.json
@@ -0,0 +1,10 @@
+{
+    "name": "moodle-mod_forumng-savecheck",
+    "builds": {
+        "moodle-mod_forumng-savecheck": {
+            "jsfiles": [
+                "savecheck.js"
+            ]
+        }
+    }
+}
diff --git a/mod/forumng/yui/src/savecheck/js/savecheck.js b/mod/forumng/yui/src/savecheck/js/savecheck.js
new file mode 100644
index 0000000..1cb7994
--- /dev/null
+++ b/mod/forumng/yui/src/savecheck/js/savecheck.js
@@ -0,0 +1,62 @@
+M.mod_forumng = M.mod_forumng || {};
+M.mod_forumng.savecheck = {
+    /**
+     * Adds save (session) checking functionality to submit buttons.
+     */
+    init: function(contextid) {
+        // Trap edit saving and test server is up.
+        var btns = Y.all('#id_submitbutton, #id_savedraft');
+        btns.on('click', function(e) {
+            function savefail() {
+                // Save failed, alert of network or session issue.
+                var content = M.util.get_string('savefailnetwork', 'forumng');
+                var config = {
+                        title: M.util.get_string('savefailtitle', 'forumng'),
+                        message: content,
+                        plugins: [Y.Plugin.Drag],
+                        modal: true
+                    };
+                var winWidth = Y.one('body').get('winWidth');
+                if (winWidth < 450) {
+                    config.width = winWidth - 50;
+                }
+                var panel = new M.core.alert(config);
+                panel.show();
+                e.preventDefault();
+                if (M.mod_forumng_form.finterval) {
+                    // Stop form interval as this resets buttons.
+                    clearInterval(M.mod_forumng_form.finterval);
+                }
+                btns.set('disabled', 'disabled');
+                // Trap cancel and make it a GET - so works with login.
+                var cancel = Y.one('#id_cancel');
+                cancel.on('click', function(e) {
+                    var form = Y.one('#region-main #mform1');
+                    var text = form.one('#fitem_id_message');
+                    var attach = form.one('#fitem_id_attachments');
+                    text.remove();
+                    attach.remove();
+                    form.set('method', 'get');
+                });
+            }
+            function checksave(transactionid, response, args) {
+                // Check response OK.
+                if (response.responseText != 'ok') {
+                    // Send save failed due to login/session error.
+                    savefail();
+                }
+            }
+            var cfg = {
+                method: 'POST',
+                data: 'sesskey=' + M.cfg.sesskey + '&contextid=' + contextid,
+                on: {
+                    success: checksave,
+                    failure: savefail
+                },
+                sync: true,// Wait for result so we can cancel submit.
+                timeout: 10000
+            };
+            Y.io('confirmloggedin.php', cfg);
+        });
+    }
+};
diff --git a/mod/forumng/yui/src/savecheck/meta/savecheck.json b/mod/forumng/yui/src/savecheck/meta/savecheck.json
new file mode 100644
index 0000000..cc16c41
--- /dev/null
+++ b/mod/forumng/yui/src/savecheck/meta/savecheck.json
@@ -0,0 +1,10 @@
+{
+    "moodle-mod_forumng-savecheck": {
+        "requires": [
+            "base",
+            "node",
+            "io",
+            "moodle-core-notification-alert"
+        ]
+    }
+}
-- 
1.8.3.1

