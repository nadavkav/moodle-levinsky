From bd41706c959c0cc398e31ec8bffb52ea18accb37 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Thu, 12 Oct 2017 18:47:42 +0300
Subject: [PATCH 55/95] grade (patch) Several modification to the grading logic
 and UI (teacher and students pov)

---
 grade/edit/tree/index.php |  38 +++++++++++-
 grade/edit/tree/lib.php   | 143 +++++++++++++++++++++++++++++++++++++++++++++-
 grade/report/user/lib.php |  77 +++++++++++++++++++++----
 3 files changed, 242 insertions(+), 16 deletions(-)

diff --git a/grade/edit/tree/index.php b/grade/edit/tree/index.php
index 3a1ce5e..20b581e 100644
--- a/grade/edit/tree/index.php
+++ b/grade/edit/tree/index.php
@@ -166,13 +166,43 @@ if ($data = data_submitted() and confirm_sesskey()) {
     }
 
     // Update weights (extra credits) on categories and items.
+    $weight_item_update = true;
     foreach ($data as $key => $value) {
+        // Update multfactor items. (nadavkav)
+        if (preg_match('/^(multfactor)_([0-9]+)$/', $key, $matches)) {
+            $param   = $matches[1];
+            $aid     = $matches[2];
+            $value = unformat_float($value);
+            $value = clean_param($value, PARAM_FLOAT);
+
+            if (round($value) != $value) {
+                // todo: translation string.
+                \core\notification::error(get_string('multfactor', 'grades') . ' ' . get_string('error') . ' value == ' . $value . ' not valid');
+                $weight_item_update = false;
+                continue;
+            }
+
+            $grade_item = grade_item::fetch(array('id' => $aid, 'courseid' => $courseid));
+            $grade_item->$param = $value;
+
+            $grade_item->update();
+
+            $recreatetree = true;
+        }
+
         if (preg_match('/^weight_([0-9]+)$/', $key, $matches)) {
             $aid   = $matches[1];
 
             $value = unformat_float($value);
             $value = clean_param($value, PARAM_FLOAT);
 
+            if (round($value) != $value) {
+                // todo: translation string.
+                \core\notification::error(get_string('weight', 'grades').' '.get_string('error'). ' value == '.$value. ' not valid');
+                $weight_item_update = false;
+                continue;
+            }
+
             $grade_item = grade_item::fetch(array('id' => $aid, 'courseid' => $courseid));
 
             // Convert weight to aggregation coef2.
@@ -186,8 +216,7 @@ if ($data = data_submitted() and confirm_sesskey()) {
                 $grade_item->aggregationcoef = $value;
             }
 
-            $grade_item->update();
-
+            $weight_item_update &= $grade_item->update();
             $recreatetree = true;
 
         // Grade item checkbox inputs.
@@ -199,11 +228,14 @@ if ($data = data_submitted() and confirm_sesskey()) {
             $grade_item = grade_item::fetch(array('id' => $aid, 'courseid' => $courseid));
             $grade_item->$param = $value;
 
-            $grade_item->update();
+            $weight_item_update &= $grade_item->update();
 
             $recreatetree = true;
         }
     }
+    if ($weight_item_update) {
+        \core\notification::success(get_string('update'));
+    }
 }
 
 $originalweights = grade_helper::fetch_all_natural_weights_for_course($courseid);
diff --git a/grade/edit/tree/lib.php b/grade/edit/tree/lib.php
index bd4a0c8..ddf33fb 100644
--- a/grade/edit/tree/lib.php
+++ b/grade/edit/tree/lib.php
@@ -74,6 +74,11 @@ class grade_edit_tree {
             $this->columns[] = grade_edit_tree_column::factory('weight', array('adv' => 'weight'));
         }
 
+        // todo: uses_multfactor (nadavkav)
+        if (has_capability('moodle/site:config', context_system::instance())) { // Only admin can see multfactor.
+            $this->columns[] = grade_edit_tree_column::factory('multfactor', array('adv' => 'multfactor'));
+        }
+
         $this->columns[] = grade_edit_tree_column::factory('range'); // This is not a setting... How do we deal with it?
         $this->columns[] = grade_edit_tree_column::factory('actions');
 
@@ -121,6 +126,22 @@ class grade_edit_tree {
             $is_category_item = true;
         }
 
+        // Admin only - Add aggregation type select form field to main course category. (hack nadavkav)
+        $isadmin = has_capability('moodle/site:config', context_system::instance());
+        if ($isadmin && $element['type'] == 'category' && $object->parent == null ) {
+            $aggregation_options = grade_helper::get_aggregation_strings();
+            $form = '<select name="aggregationtype">';
+            foreach($aggregation_options as $id => $option) {
+                if ($object->aggregation == $id) {
+                    $form .= '<option selected=selected value="'.$id.'">'.$option.'</option>';
+                } else {
+                    $form .= '<option value="'.$id.'">'.$option.'</option>';
+                }
+            }
+            $form .= '</select><input type="hidden" name="category" value="'.$object->id.'">';
+            //$object->name .= $form;
+        }
+
         $rowclasses = array();
         foreach ($parents as $parent_eid) {
             $rowclasses[] = $parent_eid;
@@ -403,7 +424,8 @@ class grade_edit_tree {
             return $OUTPUT->render_from_template('core_grades/weight_field', [
                 'id' => $item->id,
                 'itemname' => $itemname,
-                'value' => self::format_number($item->aggregationcoef)
+                // No real numbers in weights. (nadavkav)
+                'value' => round(self::format_number($item->aggregationcoef))
             ]);
 
         } else if ($aggcoef == 'aggregationcoefextraweightsum') {
@@ -411,7 +433,8 @@ class grade_edit_tree {
             $tpldata = [
                 'id' => $item->id,
                 'itemname' => $itemname,
-                'value' => self::format_number($item->aggregationcoef2 * 100.0),
+                // No real numbers in weights. (nadavkav)
+                'value' => round(self::format_number($item->aggregationcoef2 * 100.0)),
                 'checked' => $item->weightoverride,
                 'disabled' => !$item->weightoverride
             ];
@@ -422,6 +445,79 @@ class grade_edit_tree {
         return $str;
     }
 
+    /**
+     * Given a grade_item object, returns a labelled multfactor input if an aggregation coefficient (weight or extra credit) applies to it.
+     * @param grade_item $item
+     * @return string HTML
+     */
+    static function get_multfactor_input($item) {
+        global $OUTPUT;
+
+        if (!is_object($item) || get_class($item) !== 'grade_item') {
+            throw new Exception('grade_edit_tree::get_multfactor_input($item) was given a variable that is not of the required type (grade_item object)');
+        }
+
+        if ($item->is_course_item()) {
+            return '';
+        }
+
+        $parent_category = $item->get_parent_category();
+        $parent_category->apply_forced_settings();
+        $aggcoef = $item->get_coefstring();
+
+        $itemname = $item->itemname;
+        if ($item->is_category_item()) {
+            // Remember, the parent category of a category item is the category itself.
+            $itemname = $parent_category->get_name();
+        }
+        $str = '';
+
+// TODO: make it use M33 mustache template like above get_weight_input() (nadavkav)
+
+        if ($aggcoef == 'aggregationcoefweight' || $aggcoef == 'aggregationcoef' || $aggcoef == 'aggregationcoefextraweight') {
+            return '<label class="accesshide" for="multfactor_'.$item->id.'">'.
+            get_string('extracreditvalue', 'grades', $itemname).'</label>'.
+            '<input type="text" size="6" id="multfactor_'.$item->id.'" name="multfactor_'.$item->id.'"
+                value="'.grade_edit_tree::format_number($item->multfactor).'" />';
+        } else if ($aggcoef == 'aggregationcoefextraweightsum') {
+
+            $checkboxname = 'multfactoroverride_' . $item->id;
+            $checkboxlbl = html_writer::tag('label', get_string('overridemultfactortofa', 'core_levinsky', $itemname),
+                array('for' => $checkboxname, 'class' => 'accesshide'));
+            $checkbox = html_writer::empty_tag('input', array('name' => $checkboxname,
+                'type' => 'hidden', 'value' => 0));
+            $checkbox .= html_writer::empty_tag('input', array('name' => $checkboxname,
+                'type' => 'checkbox', 'value' => 1, 'id' => $checkboxname, 'class' => 'multfactoroverride',
+                'checked' => ($item->multfactor ? 'checked' : null)));
+            $name = 'multfactor_' . $item->id;
+            $hiddenlabel = html_writer::tag(
+                'label',
+                get_string('multfactorofa', 'core_levinsky', $itemname),
+                array(
+                    'class' => 'accesshide',
+                    'for' => $name
+                )
+            );
+
+            $input = html_writer::empty_tag(
+                'input',
+                array(
+                    'type' =>   'text',
+                    'size' =>   6,
+                    'id' =>     $name,
+                    'name' =>   $name,
+                    'value' =>  grade_edit_tree::format_number($item->multfactor),
+                    'disabled' => ($item->multfactor ? null : 'disabled')
+                )
+            );
+
+            //$str .= $checkboxlbl . $checkbox . $hiddenlabel . $input;
+            $str .= $checkboxlbl . $hiddenlabel . $input;
+        }
+
+        return $str;
+    }
+
     // Trims trailing zeros.
     // Used on the 'Gradebook setup' page for grade items settings like aggregation co-efficient.
     // Grader report has its own decimal place settings so they are handled elsewhere.
@@ -718,6 +814,49 @@ class grade_edit_tree_column_weight extends grade_edit_tree_column {
 }
 
 /**
+ * Class grade_edit_tree_column_multfactor
+ *
+ * @package   core_grades
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class grade_edit_tree_column_multfactor extends grade_edit_tree_column {
+
+    public function get_header_cell() {
+        global $OUTPUT;
+        $headercell = clone($this->headercell);
+        $headercell->text = get_string('multfactor', 'grades').$OUTPUT->help_icon('multfactor', 'grades');
+        return $headercell;
+    }
+
+    public function get_category_cell($category, $levelclass, $params) {
+
+        $item = $category->get_grade_item();
+        $categorycell = parent::get_category_cell($category, $levelclass, $params);
+        $categorycell->text = grade_edit_tree::get_multfactor_input($item);
+        return $categorycell;
+    }
+
+    public function get_item_cell($item, $params) {
+        global $CFG;
+        if (empty($params['element'])) {
+            throw new Exception('Array key (element) missing from 2nd param of grade_edit_tree_column_multfactororextracredit::get_item_cell($item, $params)');
+        }
+        $itemcell = parent::get_item_cell($item, $params);
+        $itemcell->text = '&nbsp;';
+        $object = $params['element']['object'];
+
+        if (!in_array($object->itemtype, array('courseitem', 'categoryitem', 'category'))
+            && !in_array($object->gradetype, array(GRADE_TYPE_NONE, GRADE_TYPE_TEXT))
+            && (!$object->is_outcome_item() || $object->load_parent_category()->aggregateoutcomes)
+            && ($object->gradetype != GRADE_TYPE_SCALE || !empty($CFG->grade_includescalesinaggregation))) {
+            $itemcell->text = grade_edit_tree::get_multfactor_input($item);
+        }
+
+        return $itemcell;
+    }
+}
+
+/**
  * Class grade_edit_tree_column_range
  *
  * @package   core_grades
diff --git a/grade/report/user/lib.php b/grade/report/user/lib.php
index ea40100..ae2d305 100644
--- a/grade/report/user/lib.php
+++ b/grade/report/user/lib.php
@@ -526,6 +526,8 @@ class grade_report_user extends grade_report {
                     $classfeedback = $class;
                 }
                 $class .= " itemcenter ";
+
+                // Weight
                 if ($this->showweight) {
                     $data['weight']['class'] = $class;
                     $data['weight']['content'] = '-';
@@ -534,16 +536,20 @@ class grade_report_user extends grade_report {
 
                     // This obliterates the weight because it provides a more informative description.
                     if (is_numeric($hint['weight'])) {
-                        $data['weight']['content'] = format_float($hint['weight'] * 100.0, 2) . ' %';
-                        $gradeitemdata['weightraw'] = $hint['weight'];
-                        $gradeitemdata['weightformatted'] = $data['weight']['content'];
+                        $data['weight']['content'] = format_float($hint['weight'] * 100.0,
+                            $grade_grade->grade_item->get_decimals()); //. ' %'; // Remove weight ("percentage") sign (nadavkav)
+                    }
+                    if (($hint['status'] !== 'used' && $hint['status'] !== 'unknown') ||
+                        ($data['weight']['content'] == 0 && $type !== 'courseitem ')) {
+                        //$data['weight']['content'] .= '<br>' . get_string('aggregationhint' . $hint['status'], 'grades');
+                        $data['weight']['content'] = get_string('notcalculated', 'core_levinsky'); // nadavkav
                     }
-                    if ($hint['status'] != 'used' && $hint['status'] != 'unknown') {
-                        $data['weight']['content'] .= '<br>' . get_string('aggregationhint' . $hint['status'], 'grades');
-                        $gradeitemdata['status'] = $hint['status'];
+                    if ($type === 'courseitem') {
+                        $data['weight']['content'] = '&nbsp'; // Display nothing on course total line. (nadavkav)
                     }
                 }
 
+                // Grades from activity.
                 if ($this->showgrade) {
                     $gradeitemdata['graderaw'] = null;
                     $gradeitemdata['gradehiddenbydate'] = false;
@@ -568,19 +574,46 @@ class grade_report_user extends grade_report {
 
                         if ($this->canviewhidden) {
                             $gradeitemdata['graderaw'] = $gradeval;
+                            // Round real grade items. (nadavkav)
                             $data['grade']['content'] = grade_format_gradevalue($gradeval,
                                                                                 $grade_grade->grade_item,
-                                                                                true);
+                                                                                true,
+                                                                                GRADE_DISPLAY_TYPE_REAL);
                         }
                     } else {
                         $data['grade']['class'] = $class;
+                        // Round real grade items. (nadavkav)
                         $data['grade']['content'] = grade_format_gradevalue($gradeval,
                                                                             $grade_grade->grade_item,
-                                                                            true);
+                                                                            true,
+                                                                            GRADE_DISPLAY_TYPE_REAL);
+                        // IDEA: points from the activity, before gradebook modifications.
+                        //$grade_grade->rawgrade);
+
+                        // IDEA: Mark grades that were changed in gradebook (manually, factor, add, ...)
+                        //if (round($grade_grade->rawgrade) != round(grade_format_gradevalue($gradeval, $grade_grade->grade_item, true, GRADE_DISPLAY_TYPE_REAL)) ) {
+                        //    $data['grade']['content'] .= "*";
+                        //}
                         $gradeitemdata['graderaw'] = $gradeval;
                     }
                     $data['grade']['headers'] = "$header_cat $header_row grade";
                     $gradeitemdata['gradeformatted'] = $data['grade']['content'];
+
+                    if ($type === 'courseitem') {
+                        $data['grade']['content'] = '&nbsp'; // Display nothing on course total line. (nadavkav)
+                    }
+
+                    // IDEA: Add new rawgrade column (nadavkav)
+                    /*
+                    $data['rawgrade']['headers'] = $data['grade']['headers'];
+                    $data['rawgrade']['class'] = $data['grade']['class'];
+                    if ($grade_grade->rawgrade == 0) {
+                        $tmprawgrade = floor($grade_grade->finalgrade);
+                    } else {
+                        $tmprawgrade = floor($grade_grade->rawgrade);
+                    }
+                    $data['rawgrade']['content'] = $tmprawgrade;
+                    */
                 }
 
                 // Range
@@ -592,6 +625,10 @@ class grade_report_user extends grade_report {
                     $gradeitemdata['rangeformatted'] = $data['range']['content'];
                     $gradeitemdata['grademin'] = $grade_grade->grade_item->grademin;
                     $gradeitemdata['grademax'] = $grade_grade->grade_item->grademax;
+
+                    if ($type === 'courseitem') {
+                        $data['range']['content'] = '&nbsp'; // Display nothing on course total line. (nadavkav)
+                    }
                 }
 
                 // Percentage
@@ -685,7 +722,7 @@ class grade_report_user extends grade_report {
                     $gradeitemdata['feedback'] = '';
                     $gradeitemdata['feedbackformat'] = $grade_grade->feedbackformat;
 
-                    if ($grade_grade->overridden > 0 AND ($type == 'categoryitem' OR $type == 'courseitem')) {
+                    if ($grade_grade->overridden > 0 AND ($type === 'categoryitem' OR $type === 'courseitem')) {
                     $data['feedback']['class'] = $classfeedback.' feedbacktext';
                         $data['feedback']['content'] = get_string('overridden', 'grades').': ' . format_text($grade_grade->feedback, $grade_grade->feedbackformat);
                         $gradeitemdata['feedback'] = $grade_grade->feedback;
@@ -702,9 +739,21 @@ class grade_report_user extends grade_report {
                 // Contribution to the course total column.
                 if ($this->showcontributiontocoursetotal) {
                     $data['contributiontocoursetotal']['class'] = $class;
-                    $data['contributiontocoursetotal']['content'] = '-';
+                    // Display course final grade (nadavkav)
+                    if ($type === 'courseitem') {
+                        $data['contributiontocoursetotal']['content'] = get_string('finalgrade', 'grades').': ';
+                    } else {
+                        $data['contributiontocoursetotal']['content'] = '';
+                    }
+                    $data['contributiontocoursetotal']['content'] .= round(grade_format_gradevalue($gradeval,
+                        $grade_grade->grade_item, true, GRADE_DISPLAY_TYPE_REAL));
                     $data['contributiontocoursetotal']['headers'] = "$header_cat $header_row contributiontocoursetotal";
 
+                    // Mark Zero grade as not calculated. (nadavkav)
+                    if ($data['contributiontocoursetotal']['content'] === '0.00') {
+                        $data['contributiontocoursetotal']['content'] = get_string('notcalculated', 'core_levinsky');
+                    }
+
                 }
                 $this->gradeitemsdata[] = $gradeitemdata;
             }
@@ -837,11 +886,17 @@ class grade_report_user extends grade_report {
                         $content = '-';
                         if (!is_null($gradeval)) {
                             $decimals = $grade_object->get_decimals();
-                            $content = format_float($gradeval, $decimals, true) . ' %';
+                            // Remove percentage sign from each calculated grade
+                            // and its contribution to course total grade (nadavkav)
+                            $content = format_float($gradeval, $decimals, true) ;//. ' %';
                         }
                         $this->tabledata[$key]['contributiontocoursetotal']['content'] = $content;
                         break;
                     }
+                    // IDEA todo: finish grade with wieght == 0 should not be printed?
+                    //if (round($element['object']->aggregationcoef2 * 100) == 0) {
+                    //    $this->tabledata[$key]['contributiontocoursetotal']['content'] = get_string('notcalculated', 'core_levinsky'); // nadavkav
+                    //}
                 }
             }
         }
-- 
1.8.3.1

