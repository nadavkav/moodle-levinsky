From 1501f0360fad58ef944fa3e0c703e2b06fd3565f Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Wed, 11 Oct 2017 21:23:24 +0300
Subject: [PATCH 38/95] lib/editor/atto/plugins/recordrtc (new)

---
 lib/editor/atto/plugins/recordrtc/LICENSE          |  674 ++++
 lib/editor/atto/plugins/recordrtc/README.md        |   86 +
 lib/editor/atto/plugins/recordrtc/RELEASENOTES     |    2 +
 .../plugins/recordrtc/amd/build/adapter.min.js     |  Bin 0 -> 60547 bytes
 .../atto/plugins/recordrtc/amd/build/bowser.min.js |  Bin 0 -> 6522 bytes
 .../atto/plugins/recordrtc/amd/src/adapter.js      | 3900 ++++++++++++++++++++
 .../atto/plugins/recordrtc/amd/src/bowser.js       |  587 +++
 lib/editor/atto/plugins/recordrtc/db/install.php   |   53 +
 .../plugins/recordrtc/lang/en/atto_recordrtc.php   |   79 +
 lib/editor/atto/plugins/recordrtc/lib.php          |  128 +
 .../atto/plugins/recordrtc/pix/i/audiortc.png      |  Bin 0 -> 348 bytes
 .../atto/plugins/recordrtc/pix/i/videortc.png      |  Bin 0 -> 323 bytes
 lib/editor/atto/plugins/recordrtc/pix/icon.png     |  Bin 0 -> 644 bytes
 lib/editor/atto/plugins/recordrtc/settings.php     |   64 +
 lib/editor/atto/plugins/recordrtc/styles.css       |   39 +
 .../atto/plugins/recordrtc/thirdpartylibs.xml      |   17 +
 lib/editor/atto/plugins/recordrtc/version.php      |   33 +
 .../moodle-atto_recordrtc-button-debug.js          |  Bin 0 -> 11369 bytes
 .../moodle-atto_recordrtc-button-min.js            |  Bin 0 -> 4074 bytes
 .../moodle-atto_recordrtc-button.js                |  Bin 0 -> 11369 bytes
 .../moodle-atto_recordrtc-recording-debug.js       |  Bin 0 -> 32627 bytes
 .../moodle-atto_recordrtc-recording-min.js         |  Bin 0 -> 11210 bytes
 .../moodle-atto_recordrtc-recording.js             |  Bin 0 -> 32627 bytes
 .../plugins/recordrtc/yui/src/button/build.json    |   10 +
 .../plugins/recordrtc/yui/src/button/js/button.js  |  382 ++
 .../recordrtc/yui/src/button/meta/button.json      |    8 +
 .../plugins/recordrtc/yui/src/recording/build.json |   14 +
 .../yui/src/recording/js/abstractmodule.js         |  111 +
 .../recordrtc/yui/src/recording/js/audiomodule.js  |  165 +
 .../recordrtc/yui/src/recording/js/commonmodule.js |  303 ++
 .../yui/src/recording/js/compatcheckmodule.js      |   74 +
 .../recordrtc/yui/src/recording/js/videomodule.js  |  173 +
 .../yui/src/recording/meta/recording.json          |    7 +
 33 files changed, 6909 insertions(+)
 create mode 100644 lib/editor/atto/plugins/recordrtc/LICENSE
 create mode 100644 lib/editor/atto/plugins/recordrtc/README.md
 create mode 100644 lib/editor/atto/plugins/recordrtc/RELEASENOTES
 create mode 100644 lib/editor/atto/plugins/recordrtc/amd/build/adapter.min.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/amd/build/bowser.min.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/amd/src/adapter.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/amd/src/bowser.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/db/install.php
 create mode 100644 lib/editor/atto/plugins/recordrtc/lang/en/atto_recordrtc.php
 create mode 100644 lib/editor/atto/plugins/recordrtc/lib.php
 create mode 100644 lib/editor/atto/plugins/recordrtc/pix/i/audiortc.png
 create mode 100644 lib/editor/atto/plugins/recordrtc/pix/i/videortc.png
 create mode 100644 lib/editor/atto/plugins/recordrtc/pix/icon.png
 create mode 100644 lib/editor/atto/plugins/recordrtc/settings.php
 create mode 100644 lib/editor/atto/plugins/recordrtc/styles.css
 create mode 100644 lib/editor/atto/plugins/recordrtc/thirdpartylibs.xml
 create mode 100644 lib/editor/atto/plugins/recordrtc/version.php
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button-debug.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button-min.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording-debug.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording-min.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/button/build.json
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/button/js/button.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/button/meta/button.json
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/recording/build.json
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/recording/js/abstractmodule.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/recording/js/audiomodule.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/recording/js/commonmodule.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/recording/js/compatcheckmodule.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/recording/js/videomodule.js
 create mode 100644 lib/editor/atto/plugins/recordrtc/yui/src/recording/meta/recording.json

diff --git a/lib/editor/atto/plugins/recordrtc/LICENSE b/lib/editor/atto/plugins/recordrtc/LICENSE
new file mode 100644
index 0000000..ef7e7ef
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/LICENSE
@@ -0,0 +1,674 @@
+GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    {one line to give the program's name and a brief idea of what it does.}
+    Copyright (C) {year}  {name of author}
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    {project}  Copyright (C) {year}  {fullname}
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<http://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<http://www.gnu.org/philosophy/why-not-lgpl.html>.
diff --git a/lib/editor/atto/plugins/recordrtc/README.md b/lib/editor/atto/plugins/recordrtc/README.md
new file mode 100644
index 0000000..db698a5
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/README.md
@@ -0,0 +1,86 @@
+# RecordRTC Atto plugin for Moodle
+
+[![Scrutinizer Code
+Quality](https://scrutinizer-ci.com/g/blindsidenetworks/moodle-atto_recordrtc/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/blindsidenetworks/moodle-atto_recordrtc/?branch=master)
+[![Build
+Status](https://scrutinizer-ci.com/g/blindsidenetworks/moodle-atto_recordrtc/badges/build.png?b=master)](https://scrutinizer-ci.com/g/blindsidenetworks/moodle-atto_recordrtc/build-status/master)
+
+### Features
+
+Add audio and video annotations to text, anywhere an Atto text editor is present. This plugin adds buttons for recording audio or video (with audio) to the editor's toolbar. Using WebRTC technologies, all recording is done instantly in the browser, using nothing but HTML5 and JavaScript (no Flash!). After recording, users can embed the annotation directly into the text they are currently editing. The recording will appear as an audio or video player in the published writing.
+
+### Installation
+
+There are currently two ways to install the plugin:
+
+1. Installing via zip file:
+
+   * Download the project's repository as a zip archive from GitHub: https://github.com/blindsidenetworks/moodle-atto_recordrtc/archive/master.zip
+   * In Moodle, go to `Site administration` > `Plugins` > `Install plugins`
+   * Under the `Install plugin from ZIP file` section, either select the above archive, or drag and drop it into the specified box on the page
+   * Click the installation button
+
+
+2. Installing manually (if the user does not have necessary permissions for installing the first way):
+
+   * Navigate to `moodle_root_path/lib/editor/atto/plugins`, where `moodle_root_path` is the location where Moodle is installed (ex.: `/var/www/html/moodle`)
+   * Execute `sudo git clone https://github.com/blindsidenetworks/moodle-atto_recordrtc.git recordrtc`
+   * Log into a Moodle account with administration capabilities
+   * A screen should appear asking the install the plugin, similar to above
+
+Soon, there will also be the possibility to install easily via the Moodle Plugins Directory.
+
+### Usage
+
+To use the plugin, just click on one of the recording buttons (either the microphone or the video camera), and a popup will appear with a big "Start Recording" button. When clicked, the browser will probably ask for permission to use the webcam/microphone.
+
+![Recording buttons](https://user-images.githubusercontent.com/2160185/28581382-0cfd2078-7130-11e7-8181-0d545287a154.png)  
+
+After the recording starts, a timer will begin counting down, indicating how much time is left to record; when the timer hits 0, the recording will automatically stop (this will also happen if approaching the maximum upload size determined in the server settings).
+
+![Recording started](https://user-images.githubusercontent.com/2160185/28581749-1ab016d4-7131-11e7-919f-d2756da5aec3.png)
+
+When the recording is finished, the user can play it back to see/hear if it is what they want. To embed the file, the user must click "Attach Recording as Annotation". A dialog box will pop up asking the user what the link should appear as in the text editor. After that, the file gets embedded right where the cursor was in the text.
+
+![Name the annotation](https://user-images.githubusercontent.com/2160185/28582017-fe3a64ea-7131-11e7-80ce-3b68bce23cb5.png)
+
+![Annotation in editor](https://user-images.githubusercontent.com/2160185/28582039-0d9a45a4-7132-11e7-8d45-8400a0ef2dd8.png)
+
+### Configuration
+
+The plugin can be configured during the initial install, and later by navigating to `Site administration` > `Plugins` > `Text editors` > `Atto HTML editor` > `RecordRTC`. The administrator can:
+
+* Allow the users to record only audio, only video, or both (changing the buttons that appear in the editor toolbar)
+* Change the target bitrate of recorded audio
+* Change the target bitrate of recorded video
+* Set the recording time limit, to control maximum recording size
+
+### Common problems
+
+* **For developers**: If trying to update Bowser or Adapter.js dependencies for the project, it is necessary to replace the named definition at the top of the file with an anonymous one, like so (for Bowser):  
+
+  *Old code*:
+  ```
+  !function (root, name, definition) {
+    if (typeof module != 'undefined' && module.exports) module.exports = definition()
+    else if (typeof define == 'function' && define.amd) define(name, definition)
+    else root[name] = definition()
+  }(this, 'bowser', function () {
+  ```
+  *New code*:
+  ```
+  define([], function() {
+  ```
+
+  Or so (for Adapter.js):  
+
+  *Old code*
+  ```
+  (function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.adapter = f()}})(function(){
+  ```
+  *New code*
+  ```
+  define([], function() {
+  ```
+* The default maximum size of uploads in PHP is very small, it is recommended to set the `upload_max_filesize` setting to `40M` and the `post_max_size` setting to `50M` for a time limit of 2:00 to avoid getting an alert while recording
+* The filesize of recorded video for Firefox will likely be twice that of other browsers, even with the same settings; this is expected as it uses a different writing library for recording video. The audio filesize should be similar across all browsers
diff --git a/lib/editor/atto/plugins/recordrtc/RELEASENOTES b/lib/editor/atto/plugins/recordrtc/RELEASENOTES
new file mode 100644
index 0000000..fe01983
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/RELEASENOTES
@@ -0,0 +1,2 @@
+1.0-b4 (2017080103)
+Bug: Fixed issue icons not shown properly in the Clear theme in Moodle 3.3
diff --git a/lib/editor/atto/plugins/recordrtc/amd/build/adapter.min.js b/lib/editor/atto/plugins/recordrtc/amd/build/adapter.min.js
new file mode 100644
index 0000000000000000000000000000000000000000..70619cc9df12fd5c04b15df97d0a2ed6512dcabd
GIT binary patch
literal 60547
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

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/amd/build/bowser.min.js b/lib/editor/atto/plugins/recordrtc/amd/build/bowser.min.js
new file mode 100644
index 0000000000000000000000000000000000000000..eeaf72d3d9edd13d5590d9cdef4926f8eef799ae
GIT binary patch
literal 6522
zcmb6eYj4{)@~_DH5J<HmIqhx_XNNJGptrcYE!snFcX4OC3reCb#*(P&5!<Q!-*<-8
zGg1QdLu{J!esDOP_-xB#W~?^Wwurr)i`X!~*Gr8WwDZd~T=V-QO*M~DJEFN4z{VnF
zd6CANcX8p_A&Yl;aB~Ig)zzjfb^YA%@_vZ=t)fP0zQu@ZI0jFIU-BdnF@rDan+`Ya
zT>L5yEWM){GfZnsoRIICMq@t}+;_O0vn&TAtbk0m7Z=VDz=;#HW09@1H>=s@`we_|
z$R5aq16c>-@0)1{z9-II`uW~z<b=e@c)0JNM6g47xaC>U*^P;l^CuQ}wghpE19QtD
zIhZ2r021OHc<hTqrb+8Npl`%*?rD@2@$NPS1eSJylLS<+DBEq*O38#>TuefMM%3eR
zE_$kEWD)>4g1;F41fYdHE{-h=E60E^f5+C2vG%9N+J;Yai4n01ggvq}gIpQ`KZ4=Z
z4O!k{cOa8Tkh1!Exrv0!JCGxBj;`p4UN|CQDQ!`fKKUNgh|TrS2+%DFpYN<ng?Uky
zm_5t61e794;g5^VT&=UUvw5!nc@7dPlpl~%i+G)RSr)+mrGT}jR2bSn<D8{2%eAdY
zwGS$(bt~%ye9Y9ogqJP#1kE~uXcdsY)b0?hTM}zbj0C*Q{Y2g8IoV419~?z?)T*r2
zt&{v+5sV3IxV<c}@Lm!4+g&THLF@=p5o{n`Da*M^@F^xZ1TZ>6{){EZCwk1GKIvAZ
z76bN@@-@~hfeJ_C(-`-U6->8ktO5TT@S2FE*h0-86YxbsbW33jn5*qE*7D?oW3rI(
zB<7tW)CT;%f<gXPtAT(TFeak*{r)myArqte|NHWjgz45^Ed~;5>Q^KrOQR_%e^h1n
z3tl?9Rn<~igy*}nl>@3BWmpKw&hqW5<dEE)O91b0LxypN1uh(^o2ChQm2p<)Dfd}C
zdMcZ8@bQ?0B4sHg8juXE#7(VCALr(<y6xMD+y$wKz${OGiwyXv<*g9==Es1$!YREJ
z4gq{d!W@=)$OVOFPnR0{XDr=5aW55_*yh?tz(89Nvm-ADHjn&~hJNQxX!ZYHfpn|F
z=}>~JtIeTqvIs{loBQf^#=@%Z={}=+cbzS(@-pO!xzA`M;ypX9oiStY8T}-|Ag0EA
zCa2yWWxwSq+lph!J$7Kw?S$p_Sruy2_8$sYw<@B(9JmT!U}mngu^Z8H)`p?-wp4ew
zxmbN&o0~U~Vym^kwl~u?l*YOVy10PsuSAH9>>#zn*4-Z>`XplQ9=arO1$_3k!<|tF
zU|GyX)QV|Yeo>%*-9zb8%RbL)^8xPr;emjn#UqwJj285J2}8yTtIxNl9A)c<)Z4o(
zO;6?8bzNwXTGh+aNqMx+o_9j6Nw-LSi`2T+a_WdzZA}Y;I6xFe>=WI3#@x?f3v`+C
zwD()210)7>&85g*PIJr2Md1a|eRs252D}EycsnljN1L=;*awT?vttXKR$oAeJkl?o
z=W*+l|6<3iTe5NPlY{DV7tW~p@+npA*S8{h;$b+d-hYbZ{|M8q8fze@2E2HMC@Hf1
z@nSSz@37zktSY^*8c3<h$E3*Hwj+ggYH^!mt=puyrp}Lx>hc(^=RwP_X+)d+!SYA9
zH032tk`M}%yXV~-tSwFV5)Df&qT?l6$n2@F&H{=B>tw8Y@9BiFrOwqgJlFB{S8u@z
zHogd7A7kYcXD7rigoN+vQ@t2|sX@BcVD;V8Z1+wUwt>?BiVvjkSHpgTZi7$FF`KuC
z_Z)JzCUwUE4<18$%Ullq^$fIjet!42wf*jWC%jN&@!dnz7reD^;gtp@)wf+-z%j%o
zq>u843=HBZk${8>RnEV-7{&si^4$d5?wGe1gJa(p@C)J~e~H{{iW)KUJytP$UXD#v
zO*LJz%PPy-U1cd>rM`_9#PSs^woCyG4_mUEA7O>>M_7JqY2a5TlTJQsm7`W{BejK|
z1~+^go+CIyAiD+5AWlTr7k#126Fzh+W!1x6!&hczE};r_410s=f=Mk2M5amD>d$qy
z!B;b6jGS43#u@<Ot!r8*a<WsFz#YI0M`AiVOSg469D$NssfQQ#W%muMgvt1dOre5O
z5bbKL(97c*xxGacMdxl>X97ke18X43poA-IT#d4o6&V~Y?Up}QYX_`;&JFC9;SgC}
z1x}{)`V+VzOG2I-X!~lmsfSIEW%&RZU)O=Mgn@<ej*zFae7Ye&!PMda2eio*b<IN9
zjf13;-8_^O`2#A4Tn1&yk*0M9{sPZImy6qAr76`^oe&<KHaBs_VW`q1`3<?6AzANP
z+lT**@TyDgLl7V@fIi2!l4Jk%-y{4939H7d2dF8r=Jo*Zk)k@_1Kr^)AaWCy-j9A@
zZiwX6`mQJCYGz+GHo<Mz1HPTX$)pgRfe){h3kROKR^|*1tpMt7=?J+VHM3&>16C?N
z_0`-JAdSF^1N8>$NIUj)afDjUNNLAu)vUBd^bBg%^Hs|ytIdLMjSp!`Pj-@uT;!*O
zL0L=8irEOr_GlPNHVYUS86KG}ylYxXT6oi`>Dx(>!PwTID{o^q!`qI&z8v`iwH&>Y
zPc#oe>QR!+Hl~H7S3n9wS=6{5?;;gaz<qRyCf6sGPD#uTnpD<c(<{?{5IlzSJkw1J
z7<4?+<5d~i(!QNt)|S*ffW?%aO{kPuH(>sIHW!zd{tcLIeh23<s2D4MbHhMk_^usy
zg^sOY6FB-k=%s|t2qAurKRdTUVuovZ7E`uvNwCl}c(2DhC?OahvBf#K0j{w;@(9<5
zHiKqBegj7Yd1P`0zJt}4P=i4T&}%!mUZ&gn9+ttwZLaZHb4^g!wF8=cKEz*AJgoW2
z;82UUE54D2)=ErjC0vB$&}AMp^x(%dg@Ed}Y8t0iRTi1&0n;KL|E|Wh8l;z&1)>Oj
z&4nqtri`0w`jk&~{JNLc!X&>5uy3q(7RuY0*Ryl|&w$orTg*qxtIxoMRlm>5?#T>B
z^VHA_m<Hm1B7D6uBBqagM{|)bo0VO_g!{t|#v@R=q3_chH3IqgB;9nxBY;9&$OpGQ
z2GePM$_QP#@|4y7>ju$7_XJfAOlr#}S7$4*dG=eJ6-gq}ocWbk2?Ky9qJ*Zba%V<-
W+zX&5B3oGf>9d@9IiXennfe!BW|x2f

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/amd/src/adapter.js b/lib/editor/atto/plugins/recordrtc/amd/src/adapter.js
new file mode 100644
index 0000000..d29ff53
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/amd/src/adapter.js
@@ -0,0 +1,3900 @@
+// ESLint directives.
+/* eslint-disable */
+
+// JSHint directives.
+/* jshint ignore:start */
+
+/*(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.adapter = f()}})(function(){*/
+define([], function() {
+var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
+/* eslint-env node */
+'use strict';
+
+// SDP helpers.
+var SDPUtils = {};
+
+// Generate an alphanumeric identifier for cname or mids.
+// TODO: use UUIDs instead? https://gist.github.com/jed/982883
+SDPUtils.generateIdentifier = function() {
+  return Math.random().toString(36).substr(2, 10);
+};
+
+// The RTCP CNAME used by all peerconnections from the same JS.
+SDPUtils.localCName = SDPUtils.generateIdentifier();
+
+// Splits SDP into lines, dealing with both CRLF and LF.
+SDPUtils.splitLines = function(blob) {
+  return blob.trim().split('\n').map(function(line) {
+    return line.trim();
+  });
+};
+// Splits SDP into sessionpart and mediasections. Ensures CRLF.
+SDPUtils.splitSections = function(blob) {
+  var parts = blob.split('\nm=');
+  return parts.map(function(part, index) {
+    return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
+  });
+};
+
+// Returns lines that start with a certain prefix.
+SDPUtils.matchPrefix = function(blob, prefix) {
+  return SDPUtils.splitLines(blob).filter(function(line) {
+    return line.indexOf(prefix) === 0;
+  });
+};
+
+// Parses an ICE candidate line. Sample input:
+// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
+// rport 55996"
+SDPUtils.parseCandidate = function(line) {
+  var parts;
+  // Parse both variants.
+  if (line.indexOf('a=candidate:') === 0) {
+    parts = line.substring(12).split(' ');
+  } else {
+    parts = line.substring(10).split(' ');
+  }
+
+  var candidate = {
+    foundation: parts[0],
+    component: parseInt(parts[1], 10),
+    protocol: parts[2].toLowerCase(),
+    priority: parseInt(parts[3], 10),
+    ip: parts[4],
+    port: parseInt(parts[5], 10),
+    // skip parts[6] == 'typ'
+    type: parts[7]
+  };
+
+  for (var i = 8; i < parts.length; i += 2) {
+    switch (parts[i]) {
+      case 'raddr':
+        candidate.relatedAddress = parts[i + 1];
+        break;
+      case 'rport':
+        candidate.relatedPort = parseInt(parts[i + 1], 10);
+        break;
+      case 'tcptype':
+        candidate.tcpType = parts[i + 1];
+        break;
+      default: // extension handling, in particular ufrag
+        candidate[parts[i]] = parts[i + 1];
+        break;
+    }
+  }
+  return candidate;
+};
+
+// Translates a candidate object into SDP candidate attribute.
+SDPUtils.writeCandidate = function(candidate) {
+  var sdp = [];
+  sdp.push(candidate.foundation);
+  sdp.push(candidate.component);
+  sdp.push(candidate.protocol.toUpperCase());
+  sdp.push(candidate.priority);
+  sdp.push(candidate.ip);
+  sdp.push(candidate.port);
+
+  var type = candidate.type;
+  sdp.push('typ');
+  sdp.push(type);
+  if (type !== 'host' && candidate.relatedAddress &&
+      candidate.relatedPort) {
+    sdp.push('raddr');
+    sdp.push(candidate.relatedAddress); // was: relAddr
+    sdp.push('rport');
+    sdp.push(candidate.relatedPort); // was: relPort
+  }
+  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
+    sdp.push('tcptype');
+    sdp.push(candidate.tcpType);
+  }
+  if (candidate.ufrag) {
+    sdp.push('ufrag');
+    sdp.push(candidate.ufrag);
+  }
+  return 'candidate:' + sdp.join(' ');
+};
+
+// Parses an ice-options line, returns an array of option tags.
+// a=ice-options:foo bar
+SDPUtils.parseIceOptions = function(line) {
+  return line.substr(14).split(' ');
+}
+
+// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
+// a=rtpmap:111 opus/48000/2
+SDPUtils.parseRtpMap = function(line) {
+  var parts = line.substr(9).split(' ');
+  var parsed = {
+    payloadType: parseInt(parts.shift(), 10) // was: id
+  };
+
+  parts = parts[0].split('/');
+
+  parsed.name = parts[0];
+  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
+  // was: channels
+  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
+  return parsed;
+};
+
+// Generate an a=rtpmap line from RTCRtpCodecCapability or
+// RTCRtpCodecParameters.
+SDPUtils.writeRtpMap = function(codec) {
+  var pt = codec.payloadType;
+  if (codec.preferredPayloadType !== undefined) {
+    pt = codec.preferredPayloadType;
+  }
+  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
+      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\r\n';
+};
+
+// Parses an a=extmap line (headerextension from RFC 5285). Sample input:
+// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
+// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
+SDPUtils.parseExtmap = function(line) {
+  var parts = line.substr(9).split(' ');
+  return {
+    id: parseInt(parts[0], 10),
+    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
+    uri: parts[1]
+  };
+};
+
+// Generates a=extmap line from RTCRtpHeaderExtensionParameters or
+// RTCRtpHeaderExtension.
+SDPUtils.writeExtmap = function(headerExtension) {
+  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
+      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
+          ? '/' + headerExtension.direction
+          : '') +
+      ' ' + headerExtension.uri + '\r\n';
+};
+
+// Parses an ftmp line, returns dictionary. Sample input:
+// a=fmtp:96 vbr=on;cng=on
+// Also deals with vbr=on; cng=on
+SDPUtils.parseFmtp = function(line) {
+  var parsed = {};
+  var kv;
+  var parts = line.substr(line.indexOf(' ') + 1).split(';');
+  for (var j = 0; j < parts.length; j++) {
+    kv = parts[j].trim().split('=');
+    parsed[kv[0].trim()] = kv[1];
+  }
+  return parsed;
+};
+
+// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
+SDPUtils.writeFmtp = function(codec) {
+  var line = '';
+  var pt = codec.payloadType;
+  if (codec.preferredPayloadType !== undefined) {
+    pt = codec.preferredPayloadType;
+  }
+  if (codec.parameters && Object.keys(codec.parameters).length) {
+    var params = [];
+    Object.keys(codec.parameters).forEach(function(param) {
+      params.push(param + '=' + codec.parameters[param]);
+    });
+    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
+  }
+  return line;
+};
+
+// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
+// a=rtcp-fb:98 nack rpsi
+SDPUtils.parseRtcpFb = function(line) {
+  var parts = line.substr(line.indexOf(' ') + 1).split(' ');
+  return {
+    type: parts.shift(),
+    parameter: parts.join(' ')
+  };
+};
+// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
+SDPUtils.writeRtcpFb = function(codec) {
+  var lines = '';
+  var pt = codec.payloadType;
+  if (codec.preferredPayloadType !== undefined) {
+    pt = codec.preferredPayloadType;
+  }
+  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
+    // FIXME: special handling for trr-int?
+    codec.rtcpFeedback.forEach(function(fb) {
+      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
+      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
+          '\r\n';
+    });
+  }
+  return lines;
+};
+
+// Parses an RFC 5576 ssrc media attribute. Sample input:
+// a=ssrc:3735928559 cname:something
+SDPUtils.parseSsrcMedia = function(line) {
+  var sp = line.indexOf(' ');
+  var parts = {
+    ssrc: parseInt(line.substr(7, sp - 7), 10)
+  };
+  var colon = line.indexOf(':', sp);
+  if (colon > -1) {
+    parts.attribute = line.substr(sp + 1, colon - sp - 1);
+    parts.value = line.substr(colon + 1);
+  } else {
+    parts.attribute = line.substr(sp + 1);
+  }
+  return parts;
+};
+
+// Extracts the MID (RFC 5888) from a media section.
+// returns the MID or undefined if no mid line was found.
+SDPUtils.getMid = function(mediaSection) {
+  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
+  if (mid) {
+    return mid.substr(6);
+  }
+}
+
+SDPUtils.parseFingerprint = function(line) {
+  var parts = line.substr(14).split(' ');
+  return {
+    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
+    value: parts[1]
+  };
+};
+
+// Extracts DTLS parameters from SDP media section or sessionpart.
+// FIXME: for consistency with other functions this should only
+//   get the fingerprint line as input. See also getIceParameters.
+SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
+  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
+      'a=fingerprint:');
+  // Note: a=setup line is ignored since we use the 'auto' role.
+  // Note2: 'algorithm' is not case sensitive except in Edge.
+  return {
+    role: 'auto',
+    fingerprints: lines.map(SDPUtils.parseFingerprint)
+  };
+};
+
+// Serializes DTLS parameters to SDP.
+SDPUtils.writeDtlsParameters = function(params, setupType) {
+  var sdp = 'a=setup:' + setupType + '\r\n';
+  params.fingerprints.forEach(function(fp) {
+    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
+  });
+  return sdp;
+};
+// Parses ICE information from SDP media section or sessionpart.
+// FIXME: for consistency with other functions this should only
+//   get the ice-ufrag and ice-pwd lines as input.
+SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
+  var lines = SDPUtils.splitLines(mediaSection);
+  // Search in session part, too.
+  lines = lines.concat(SDPUtils.splitLines(sessionpart));
+  var iceParameters = {
+    usernameFragment: lines.filter(function(line) {
+      return line.indexOf('a=ice-ufrag:') === 0;
+    })[0].substr(12),
+    password: lines.filter(function(line) {
+      return line.indexOf('a=ice-pwd:') === 0;
+    })[0].substr(10)
+  };
+  return iceParameters;
+};
+
+// Serializes ICE parameters to SDP.
+SDPUtils.writeIceParameters = function(params) {
+  return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
+      'a=ice-pwd:' + params.password + '\r\n';
+};
+
+// Parses the SDP media section and returns RTCRtpParameters.
+SDPUtils.parseRtpParameters = function(mediaSection) {
+  var description = {
+    codecs: [],
+    headerExtensions: [],
+    fecMechanisms: [],
+    rtcp: []
+  };
+  var lines = SDPUtils.splitLines(mediaSection);
+  var mline = lines[0].split(' ');
+  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
+    var pt = mline[i];
+    var rtpmapline = SDPUtils.matchPrefix(
+        mediaSection, 'a=rtpmap:' + pt + ' ')[0];
+    if (rtpmapline) {
+      var codec = SDPUtils.parseRtpMap(rtpmapline);
+      var fmtps = SDPUtils.matchPrefix(
+          mediaSection, 'a=fmtp:' + pt + ' ');
+      // Only the first a=fmtp:<pt> is considered.
+      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
+      codec.rtcpFeedback = SDPUtils.matchPrefix(
+          mediaSection, 'a=rtcp-fb:' + pt + ' ')
+        .map(SDPUtils.parseRtcpFb);
+      description.codecs.push(codec);
+      // parse FEC mechanisms from rtpmap lines.
+      switch (codec.name.toUpperCase()) {
+        case 'RED':
+        case 'ULPFEC':
+          description.fecMechanisms.push(codec.name.toUpperCase());
+          break;
+        default: // only RED and ULPFEC are recognized as FEC mechanisms.
+          break;
+      }
+    }
+  }
+  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {
+    description.headerExtensions.push(SDPUtils.parseExtmap(line));
+  });
+  // FIXME: parse rtcp.
+  return description;
+};
+
+// Generates parts of the SDP media section describing the capabilities /
+// parameters.
+SDPUtils.writeRtpDescription = function(kind, caps) {
+  var sdp = '';
+
+  // Build the mline.
+  sdp += 'm=' + kind + ' ';
+  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
+  sdp += ' UDP/TLS/RTP/SAVPF ';
+  sdp += caps.codecs.map(function(codec) {
+    if (codec.preferredPayloadType !== undefined) {
+      return codec.preferredPayloadType;
+    }
+    return codec.payloadType;
+  }).join(' ') + '\r\n';
+
+  sdp += 'c=IN IP4 0.0.0.0\r\n';
+  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';
+
+  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
+  caps.codecs.forEach(function(codec) {
+    sdp += SDPUtils.writeRtpMap(codec);
+    sdp += SDPUtils.writeFmtp(codec);
+    sdp += SDPUtils.writeRtcpFb(codec);
+  });
+  var maxptime = 0;
+  caps.codecs.forEach(function(codec) {
+    if (codec.maxptime > maxptime) {
+      maxptime = codec.maxptime;
+    }
+  });
+  if (maxptime > 0) {
+    sdp += 'a=maxptime:' + maxptime + '\r\n';
+  }
+  sdp += 'a=rtcp-mux\r\n';
+
+  caps.headerExtensions.forEach(function(extension) {
+    sdp += SDPUtils.writeExtmap(extension);
+  });
+  // FIXME: write fecMechanisms.
+  return sdp;
+};
+
+// Parses the SDP media section and returns an array of
+// RTCRtpEncodingParameters.
+SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
+  var encodingParameters = [];
+  var description = SDPUtils.parseRtpParameters(mediaSection);
+  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;
+  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;
+
+  // filter a=ssrc:... cname:, ignore PlanB-msid
+  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
+  .map(function(line) {
+    return SDPUtils.parseSsrcMedia(line);
+  })
+  .filter(function(parts) {
+    return parts.attribute === 'cname';
+  });
+  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
+  var secondarySsrc;
+
+  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
+  .map(function(line) {
+    var parts = line.split(' ');
+    parts.shift();
+    return parts.map(function(part) {
+      return parseInt(part, 10);
+    });
+  });
+  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
+    secondarySsrc = flows[0][1];
+  }
+
+  description.codecs.forEach(function(codec) {
+    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
+      var encParam = {
+        ssrc: primarySsrc,
+        codecPayloadType: parseInt(codec.parameters.apt, 10),
+        rtx: {
+          ssrc: secondarySsrc
+        }
+      };
+      encodingParameters.push(encParam);
+      if (hasRed) {
+        encParam = JSON.parse(JSON.stringify(encParam));
+        encParam.fec = {
+          ssrc: secondarySsrc,
+          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'
+        };
+        encodingParameters.push(encParam);
+      }
+    }
+  });
+  if (encodingParameters.length === 0 && primarySsrc) {
+    encodingParameters.push({
+      ssrc: primarySsrc
+    });
+  }
+
+  // we support both b=AS and b=TIAS but interpret AS as TIAS.
+  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
+  if (bandwidth.length) {
+    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
+      bandwidth = parseInt(bandwidth[0].substr(7), 10);
+    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
+      // use formula from JSEP to convert b=AS to TIAS value.
+      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95
+          - (50 * 40 * 8);
+    } else {
+      bandwidth = undefined;
+    }
+    encodingParameters.forEach(function(params) {
+      params.maxBitrate = bandwidth;
+    });
+  }
+  return encodingParameters;
+};
+
+// parses http://draft.ortc.org/#rtcrtcpparameters*
+SDPUtils.parseRtcpParameters = function(mediaSection) {
+  var rtcpParameters = {};
+
+  var cname;
+  // Gets the first SSRC. Note that with RTX there might be multiple
+  // SSRCs.
+  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
+      .map(function(line) {
+        return SDPUtils.parseSsrcMedia(line);
+      })
+      .filter(function(obj) {
+        return obj.attribute === 'cname';
+      })[0];
+  if (remoteSsrc) {
+    rtcpParameters.cname = remoteSsrc.value;
+    rtcpParameters.ssrc = remoteSsrc.ssrc;
+  }
+
+  // Edge uses the compound attribute instead of reducedSize
+  // compound is !reducedSize
+  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
+  rtcpParameters.reducedSize = rsize.length > 0;
+  rtcpParameters.compound = rsize.length === 0;
+
+  // parses the rtcp-mux attrіbute.
+  // Note that Edge does not support unmuxed RTCP.
+  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
+  rtcpParameters.mux = mux.length > 0;
+
+  return rtcpParameters;
+};
+
+// parses either a=msid: or a=ssrc:... msid lines and returns
+// the id of the MediaStream and MediaStreamTrack.
+SDPUtils.parseMsid = function(mediaSection) {
+  var parts;
+  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
+  if (spec.length === 1) {
+    parts = spec[0].substr(7).split(' ');
+    return {stream: parts[0], track: parts[1]};
+  }
+  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
+  .map(function(line) {
+    return SDPUtils.parseSsrcMedia(line);
+  })
+  .filter(function(parts) {
+    return parts.attribute === 'msid';
+  });
+  if (planB.length > 0) {
+    parts = planB[0].value.split(' ');
+    return {stream: parts[0], track: parts[1]};
+  }
+};
+
+// Generate a session ID for SDP.
+// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
+// recommends using a cryptographically random +ve 64-bit value
+// but right now this should be acceptable and within the right range
+SDPUtils.generateSessionId = function() {
+  return Math.random().toString().substr(2, 21);
+};
+
+// Write boilder plate for start of SDP
+// sessId argument is optional - if not supplied it will
+// be generated randomly
+SDPUtils.writeSessionBoilerplate = function(sessId) {
+  var sessionId;
+  if (sessId) {
+    sessionId = sessId;
+  } else {
+    sessionId = SDPUtils.generateSessionId();
+  }
+  // FIXME: sess-id should be an NTP timestamp.
+  return 'v=0\r\n' +
+      'o=thisisadapterortc ' + sessionId + ' 2 IN IP4 127.0.0.1\r\n' +
+      's=-\r\n' +
+      't=0 0\r\n';
+};
+
+SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
+  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);
+
+  // Map ICE parameters (ufrag, pwd) to SDP.
+  sdp += SDPUtils.writeIceParameters(
+      transceiver.iceGatherer.getLocalParameters());
+
+  // Map DTLS parameters to SDP.
+  sdp += SDPUtils.writeDtlsParameters(
+      transceiver.dtlsTransport.getLocalParameters(),
+      type === 'offer' ? 'actpass' : 'active');
+
+  sdp += 'a=mid:' + transceiver.mid + '\r\n';
+
+  if (transceiver.direction) {
+    sdp += 'a=' + transceiver.direction + '\r\n';
+  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {
+    sdp += 'a=sendrecv\r\n';
+  } else if (transceiver.rtpSender) {
+    sdp += 'a=sendonly\r\n';
+  } else if (transceiver.rtpReceiver) {
+    sdp += 'a=recvonly\r\n';
+  } else {
+    sdp += 'a=inactive\r\n';
+  }
+
+  if (transceiver.rtpSender) {
+    // spec.
+    var msid = 'msid:' + stream.id + ' ' +
+        transceiver.rtpSender.track.id + '\r\n';
+    sdp += 'a=' + msid;
+
+    // for Chrome.
+    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
+        ' ' + msid;
+    if (transceiver.sendEncodingParameters[0].rtx) {
+      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
+          ' ' + msid;
+      sdp += 'a=ssrc-group:FID ' +
+          transceiver.sendEncodingParameters[0].ssrc + ' ' +
+          transceiver.sendEncodingParameters[0].rtx.ssrc +
+          '\r\n';
+    }
+  }
+  // FIXME: this should be written by writeRtpDescription.
+  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +
+      ' cname:' + SDPUtils.localCName + '\r\n';
+  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {
+    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +
+        ' cname:' + SDPUtils.localCName + '\r\n';
+  }
+  return sdp;
+};
+
+// Gets the direction from the mediaSection or the sessionpart.
+SDPUtils.getDirection = function(mediaSection, sessionpart) {
+  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
+  var lines = SDPUtils.splitLines(mediaSection);
+  for (var i = 0; i < lines.length; i++) {
+    switch (lines[i]) {
+      case 'a=sendrecv':
+      case 'a=sendonly':
+      case 'a=recvonly':
+      case 'a=inactive':
+        return lines[i].substr(2);
+      default:
+        // FIXME: What should happen here?
+    }
+  }
+  if (sessionpart) {
+    return SDPUtils.getDirection(sessionpart);
+  }
+  return 'sendrecv';
+};
+
+SDPUtils.getKind = function(mediaSection) {
+  var lines = SDPUtils.splitLines(mediaSection);
+  var mline = lines[0].split(' ');
+  return mline[0].substr(2);
+};
+
+SDPUtils.isRejected = function(mediaSection) {
+  return mediaSection.split(' ', 2)[1] === '0';
+};
+
+// Expose public methods.
+module.exports = SDPUtils;
+
+},{}],2:[function(require,module,exports){
+(function (global){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+
+'use strict';
+
+var adapterFactory = require('./adapter_factory.js');
+module.exports = adapterFactory({window: global.window});
+
+}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
+},{"./adapter_factory.js":3}],3:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+
+'use strict';
+
+// Shimming starts here.
+module.exports = function(dependencies, opts) {
+  var window = dependencies && dependencies.window;
+
+  var options = Object.assign({
+    shimChrome: true,
+    shimFirefox: true,
+    shimEdge: true,
+    shimSafari: true,
+  }, opts);
+
+  // Utils.
+  var utils = require('./utils');
+  var logging = utils.log;
+  var browserDetails = utils.detectBrowser(window);
+
+  // Export to the adapter global object visible in the browser.
+  var adapter = {
+    browserDetails: browserDetails,
+    extractVersion: utils.extractVersion,
+    disableLog: utils.disableLog,
+    disableWarnings: utils.disableWarnings
+  };
+
+  // Uncomment the line below if you want logging to occur, including logging
+  // for the switch statement below. Can also be turned on in the browser via
+  // adapter.disableLog(false), but then logging from the switch statement below
+  // will not appear.
+  // require('./utils').disableLog(false);
+
+  // Browser shims.
+  var chromeShim = require('./chrome/chrome_shim') || null;
+  var edgeShim = require('./edge/edge_shim') || null;
+  var firefoxShim = require('./firefox/firefox_shim') || null;
+  var safariShim = require('./safari/safari_shim') || null;
+
+  // Shim browser if found.
+  switch (browserDetails.browser) {
+    case 'chrome':
+      if (!chromeShim || !chromeShim.shimPeerConnection ||
+          !options.shimChrome) {
+        logging('Chrome shim is not included in this adapter release.');
+        return adapter;
+      }
+      logging('adapter.js shimming chrome.');
+      // Export to the adapter global object visible in the browser.
+      adapter.browserShim = chromeShim;
+
+      chromeShim.shimGetUserMedia(window);
+      chromeShim.shimMediaStream(window);
+      utils.shimCreateObjectURL(window);
+      chromeShim.shimSourceObject(window);
+      chromeShim.shimPeerConnection(window);
+      chromeShim.shimOnTrack(window);
+      chromeShim.shimAddTrack(window);
+      chromeShim.shimGetSendersWithDtmf(window);
+      break;
+    case 'firefox':
+      if (!firefoxShim || !firefoxShim.shimPeerConnection ||
+          !options.shimFirefox) {
+        logging('Firefox shim is not included in this adapter release.');
+        return adapter;
+      }
+      logging('adapter.js shimming firefox.');
+      // Export to the adapter global object visible in the browser.
+      adapter.browserShim = firefoxShim;
+
+      firefoxShim.shimGetUserMedia(window);
+      utils.shimCreateObjectURL(window);
+      firefoxShim.shimSourceObject(window);
+      firefoxShim.shimPeerConnection(window);
+      firefoxShim.shimOnTrack(window);
+      break;
+    case 'edge':
+      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {
+        logging('MS edge shim is not included in this adapter release.');
+        return adapter;
+      }
+      logging('adapter.js shimming edge.');
+      // Export to the adapter global object visible in the browser.
+      adapter.browserShim = edgeShim;
+
+      edgeShim.shimGetUserMedia(window);
+      utils.shimCreateObjectURL(window);
+      edgeShim.shimPeerConnection(window);
+      edgeShim.shimReplaceTrack(window);
+      break;
+    case 'safari':
+      if (!safariShim || !options.shimSafari) {
+        logging('Safari shim is not included in this adapter release.');
+        return adapter;
+      }
+      logging('adapter.js shimming safari.');
+      // Export to the adapter global object visible in the browser.
+      adapter.browserShim = safariShim;
+      // shim window.URL.createObjectURL Safari (technical preview)
+      utils.shimCreateObjectURL(window);
+      safariShim.shimRTCIceServerUrls(window);
+      safariShim.shimCallbacksAPI(window);
+      safariShim.shimLocalStreamsAPI(window);
+      safariShim.shimRemoteStreamsAPI(window);
+      safariShim.shimGetUserMedia(window);
+      break;
+    default:
+      logging('Unsupported browser!');
+      break;
+  }
+
+  return adapter;
+};
+
+},{"./chrome/chrome_shim":4,"./edge/edge_shim":6,"./firefox/firefox_shim":9,"./safari/safari_shim":11,"./utils":12}],4:[function(require,module,exports){
+
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+var utils = require('../utils.js');
+var logging = utils.log;
+
+var chromeShim = {
+  shimMediaStream: function(window) {
+    window.MediaStream = window.MediaStream || window.webkitMediaStream;
+  },
+
+  shimOnTrack: function(window) {
+    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
+        window.RTCPeerConnection.prototype)) {
+      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
+        get: function() {
+          return this._ontrack;
+        },
+        set: function(f) {
+          var self = this;
+          if (this._ontrack) {
+            this.removeEventListener('track', this._ontrack);
+            this.removeEventListener('addstream', this._ontrackpoly);
+          }
+          this.addEventListener('track', this._ontrack = f);
+          this.addEventListener('addstream', this._ontrackpoly = function(e) {
+            // onaddstream does not fire when a track is added to an existing
+            // stream. But stream.onaddtrack is implemented so we use that.
+            e.stream.addEventListener('addtrack', function(te) {
+              var receiver;
+              if (window.RTCPeerConnection.prototype.getReceivers) {
+                receiver = self.getReceivers().find(function(r) {
+                  return r.track.id === te.track.id;
+                });
+              } else {
+                receiver = {track: te.track};
+              }
+
+              var event = new Event('track');
+              event.track = te.track;
+              event.receiver = receiver;
+              event.streams = [e.stream];
+              self.dispatchEvent(event);
+            });
+            e.stream.getTracks().forEach(function(track) {
+              var receiver;
+              if (window.RTCPeerConnection.prototype.getReceivers) {
+                receiver = self.getReceivers().find(function(r) {
+                  return r.track.id === track.id;
+                });
+              } else {
+                receiver = {track: track};
+              }
+              var event = new Event('track');
+              event.track = track;
+              event.receiver = receiver;
+              event.streams = [e.stream];
+              this.dispatchEvent(event);
+            }.bind(this));
+          }.bind(this));
+        }
+      });
+    }
+  },
+
+  shimGetSendersWithDtmf: function(window) {
+    if (typeof window === 'object' && window.RTCPeerConnection &&
+        !('getSenders' in window.RTCPeerConnection.prototype) &&
+        'createDTMFSender' in window.RTCPeerConnection.prototype) {
+      var shimSenderWithDtmf = function(pc, track) {
+        return {
+          track: track,
+          get dtmf() {
+            if (this._dtmf === undefined) {
+              if (track.kind === 'audio') {
+                this._dtmf = pc.createDTMFSender(track);
+              } else {
+                this._dtmf = null;
+              }
+            }
+            return this._dtmf;
+          }
+        };
+      };
+
+      // shim addTrack when getSenders is not available.
+      if (!window.RTCPeerConnection.prototype.getSenders) {
+        window.RTCPeerConnection.prototype.getSenders = function() {
+          return this._senders || [];
+        };
+        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
+        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
+          var pc = this;
+          var sender = origAddTrack.apply(pc, arguments);
+          if (!sender) {
+            sender = shimSenderWithDtmf(pc, track);
+            pc._senders.push(sender);
+          }
+          return sender;
+        };
+      }
+      var origAddStream = window.RTCPeerConnection.prototype.addStream;
+      window.RTCPeerConnection.prototype.addStream = function(stream) {
+        var pc = this;
+        pc._senders = pc._senders || [];
+        origAddStream.apply(pc, [stream]);
+        stream.getTracks().forEach(function(track) {
+          pc._senders.push(shimSenderWithDtmf(pc, track));
+        });
+      };
+
+      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
+      window.RTCPeerConnection.prototype.removeStream = function(stream) {
+        var pc = this;
+        pc._senders = pc._senders || [];
+        origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);
+
+        stream.getTracks().forEach(function(track) {
+          var sender = pc._senders.find(function(s) {
+            return s.track === track;
+          });
+          if (sender) {
+            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender
+          }
+        });
+      };
+    } else if (typeof window === 'object' && window.RTCPeerConnection &&
+               'getSenders' in window.RTCPeerConnection.prototype &&
+               'createDTMFSender' in window.RTCPeerConnection.prototype &&
+               window.RTCRtpSender &&
+               !('dtmf' in window.RTCRtpSender.prototype)) {
+      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
+      window.RTCPeerConnection.prototype.getSenders = function() {
+        var pc = this;
+        var senders = origGetSenders.apply(pc, []);
+        senders.forEach(function(sender) {
+          sender._pc = pc;
+        });
+        return senders;
+      };
+
+      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
+        get: function() {
+          if (this._dtmf === undefined) {
+            if (this.track.kind === 'audio') {
+              this._dtmf = this._pc.createDTMFSender(this.track);
+            } else {
+              this._dtmf = null;
+            }
+          }
+          return this._dtmf;
+        },
+      });
+    }
+  },
+
+  shimSourceObject: function(window) {
+    var URL = window && window.URL;
+
+    if (typeof window === 'object') {
+      if (window.HTMLMediaElement &&
+        !('srcObject' in window.HTMLMediaElement.prototype)) {
+        // Shim the srcObject property, once, when HTMLMediaElement is found.
+        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
+          get: function() {
+            return this._srcObject;
+          },
+          set: function(stream) {
+            var self = this;
+            // Use _srcObject as a private property for this shim
+            this._srcObject = stream;
+            if (this.src) {
+              URL.revokeObjectURL(this.src);
+            }
+
+            if (!stream) {
+              this.src = '';
+              return undefined;
+            }
+            this.src = URL.createObjectURL(stream);
+            // We need to recreate the blob url when a track is added or
+            // removed. Doing it manually since we want to avoid a recursion.
+            stream.addEventListener('addtrack', function() {
+              if (self.src) {
+                URL.revokeObjectURL(self.src);
+              }
+              self.src = URL.createObjectURL(stream);
+            });
+            stream.addEventListener('removetrack', function() {
+              if (self.src) {
+                URL.revokeObjectURL(self.src);
+              }
+              self.src = URL.createObjectURL(stream);
+            });
+          }
+        });
+      }
+    }
+  },
+
+  shimAddTrack: function(window) {
+    // shim addTrack (when getSenders is available)
+    if (window.RTCPeerConnection.prototype.addTrack) {
+      return;
+    }
+
+    // also shim pc.getLocalStreams when addTrack is shimmed
+    // to return the original streams.
+    var origGetLocalStreams = window.RTCPeerConnection.prototype
+        .getLocalStreams;
+    window.RTCPeerConnection.prototype.getLocalStreams = function() {
+      var self = this;
+      var nativeStreams = origGetLocalStreams.apply(this);
+      self._reverseStreams = self._reverseStreams || {};
+      return nativeStreams.map(function(stream) {
+        return self._reverseStreams[stream.id];
+      });
+    };
+
+    var origAddStream = window.RTCPeerConnection.prototype.addStream;
+    window.RTCPeerConnection.prototype.addStream = function(stream) {
+      var pc = this;
+      pc._streams = pc._streams || {};
+      pc._reverseStreams = pc._reverseStreams || {};
+
+      // Add identity mapping for consistency with addTrack.
+      // Unless this is being used with a stream from addTrack.
+      if (!pc._reverseStreams[stream.id]) {
+        pc._streams[stream.id] = stream;
+        pc._reverseStreams[stream.id] = stream;
+      }
+      origAddStream.apply(pc, [stream]);
+    };
+
+    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
+    window.RTCPeerConnection.prototype.removeStream = function(stream) {
+      var pc = this;
+      pc._streams = pc._streams || {};
+      pc._reverseStreams = pc._reverseStreams || {};
+
+      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);
+      delete pc._reverseStreams[(pc._streams[stream.id] ?
+          pc._streams[stream.id].id : stream.id)];
+      delete pc._streams[stream.id];
+    };
+
+    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
+      var pc = this;
+      if (pc.signalingState === 'closed') {
+        throw new DOMException(
+          'The RTCPeerConnection\'s signalingState is \'closed\'.',
+          'InvalidStateError');
+      }
+      var streams = [].slice.call(arguments, 1);
+      if (streams.length !== 1 ||
+          !streams[0].getTracks().find(function(t) {
+            return t === track;
+          })) {
+        // this is not fully correct but all we can manage without
+        // [[associated MediaStreams]] internal slot.
+        throw new DOMException(
+          'The adapter.js addTrack polyfill only supports a single ' +
+          ' stream which is associated with the specified track.',
+          'NotSupportedError');
+      }
+
+      var alreadyExists = pc.getSenders().find(function(s) {
+        return s.track === track;
+      });
+      if (alreadyExists) {
+        throw new DOMException('Track already exists.',
+            'InvalidAccessError');
+      }
+
+      pc._streams = pc._streams || {};
+      pc._reverseStreams = pc._reverseStreams || {};
+      var oldStream = pc._streams[stream.id];
+      if (oldStream) {
+        // this is using odd Chrome behaviour, use with caution:
+        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
+        oldStream.addTrack(track);
+        pc.dispatchEvent(new Event('negotiationneeded'));
+      } else {
+        var newStream = new window.MediaStream([track]);
+        pc._streams[stream.id] = newStream;
+        pc._reverseStreams[newStream.id] = stream;
+        pc.addStream(newStream);
+      }
+      return pc.getSenders().find(function(s) {
+        return s.track === track;
+      });
+    };
+  },
+
+  shimPeerConnection: function(window) {
+    var browserDetails = utils.detectBrowser(window);
+
+    // The RTCPeerConnection object.
+    if (!window.RTCPeerConnection) {
+      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
+        // Translate iceTransportPolicy to iceTransports,
+        // see https://code.google.com/p/webrtc/issues/detail?id=4869
+        // this was fixed in M56 along with unprefixing RTCPeerConnection.
+        logging('PeerConnection');
+        if (pcConfig && pcConfig.iceTransportPolicy) {
+          pcConfig.iceTransports = pcConfig.iceTransportPolicy;
+        }
+
+        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);
+      };
+      window.RTCPeerConnection.prototype =
+          window.webkitRTCPeerConnection.prototype;
+      // wrap static methods. Currently just generateCertificate.
+      if (window.webkitRTCPeerConnection.generateCertificate) {
+        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
+          get: function() {
+            return window.webkitRTCPeerConnection.generateCertificate;
+          }
+        });
+      }
+    } else {
+      // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
+      var OrigPeerConnection = window.RTCPeerConnection;
+      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
+        if (pcConfig && pcConfig.iceServers) {
+          var newIceServers = [];
+          for (var i = 0; i < pcConfig.iceServers.length; i++) {
+            var server = pcConfig.iceServers[i];
+            if (!server.hasOwnProperty('urls') &&
+                server.hasOwnProperty('url')) {
+              console.warn('RTCIceServer.url is deprecated! Use urls instead.');
+              server = JSON.parse(JSON.stringify(server));
+              server.urls = server.url;
+              newIceServers.push(server);
+            } else {
+              newIceServers.push(pcConfig.iceServers[i]);
+            }
+          }
+          pcConfig.iceServers = newIceServers;
+        }
+        return new OrigPeerConnection(pcConfig, pcConstraints);
+      };
+      window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
+      // wrap static methods. Currently just generateCertificate.
+      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
+        get: function() {
+          return OrigPeerConnection.generateCertificate;
+        }
+      });
+    }
+
+    var origGetStats = window.RTCPeerConnection.prototype.getStats;
+    window.RTCPeerConnection.prototype.getStats = function(selector,
+        successCallback, errorCallback) {
+      var self = this;
+      var args = arguments;
+
+      // If selector is a function then we are in the old style stats so just
+      // pass back the original getStats format to avoid breaking old users.
+      if (arguments.length > 0 && typeof selector === 'function') {
+        return origGetStats.apply(this, arguments);
+      }
+
+      // When spec-style getStats is supported, return those when called with
+      // either no arguments or the selector argument is null.
+      if (origGetStats.length === 0 && (arguments.length === 0 ||
+          typeof arguments[0] !== 'function')) {
+        return origGetStats.apply(this, []);
+      }
+
+      var fixChromeStats_ = function(response) {
+        var standardReport = {};
+        var reports = response.result();
+        reports.forEach(function(report) {
+          var standardStats = {
+            id: report.id,
+            timestamp: report.timestamp,
+            type: {
+              localcandidate: 'local-candidate',
+              remotecandidate: 'remote-candidate'
+            }[report.type] || report.type
+          };
+          report.names().forEach(function(name) {
+            standardStats[name] = report.stat(name);
+          });
+          standardReport[standardStats.id] = standardStats;
+        });
+
+        return standardReport;
+      };
+
+      // shim getStats with maplike support
+      var makeMapStats = function(stats) {
+        return new Map(Object.keys(stats).map(function(key) {
+          return [key, stats[key]];
+        }));
+      };
+
+      if (arguments.length >= 2) {
+        var successCallbackWrapper_ = function(response) {
+          args[1](makeMapStats(fixChromeStats_(response)));
+        };
+
+        return origGetStats.apply(this, [successCallbackWrapper_,
+          arguments[0]]);
+      }
+
+      // promise-support
+      return new Promise(function(resolve, reject) {
+        origGetStats.apply(self, [
+          function(response) {
+            resolve(makeMapStats(fixChromeStats_(response)));
+          }, reject]);
+      }).then(successCallback, errorCallback);
+    };
+
+    // add promise support -- natively available in Chrome 51
+    if (browserDetails.version < 51) {
+      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
+          .forEach(function(method) {
+            var nativeMethod = window.RTCPeerConnection.prototype[method];
+            window.RTCPeerConnection.prototype[method] = function() {
+              var args = arguments;
+              var self = this;
+              var promise = new Promise(function(resolve, reject) {
+                nativeMethod.apply(self, [args[0], resolve, reject]);
+              });
+              if (args.length < 2) {
+                return promise;
+              }
+              return promise.then(function() {
+                args[1].apply(null, []);
+              },
+              function(err) {
+                if (args.length >= 3) {
+                  args[2].apply(null, [err]);
+                }
+              });
+            };
+          });
+    }
+
+    // promise support for createOffer and createAnswer. Available (without
+    // bugs) since M52: crbug/619289
+    if (browserDetails.version < 52) {
+      ['createOffer', 'createAnswer'].forEach(function(method) {
+        var nativeMethod = window.RTCPeerConnection.prototype[method];
+        window.RTCPeerConnection.prototype[method] = function() {
+          var self = this;
+          if (arguments.length < 1 || (arguments.length === 1 &&
+              typeof arguments[0] === 'object')) {
+            var opts = arguments.length === 1 ? arguments[0] : undefined;
+            return new Promise(function(resolve, reject) {
+              nativeMethod.apply(self, [resolve, reject, opts]);
+            });
+          }
+          return nativeMethod.apply(this, arguments);
+        };
+      });
+    }
+
+    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
+    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
+        .forEach(function(method) {
+          var nativeMethod = window.RTCPeerConnection.prototype[method];
+          window.RTCPeerConnection.prototype[method] = function() {
+            arguments[0] = new ((method === 'addIceCandidate') ?
+                window.RTCIceCandidate :
+                window.RTCSessionDescription)(arguments[0]);
+            return nativeMethod.apply(this, arguments);
+          };
+        });
+
+    // support for addIceCandidate(null or undefined)
+    var nativeAddIceCandidate =
+        window.RTCPeerConnection.prototype.addIceCandidate;
+    window.RTCPeerConnection.prototype.addIceCandidate = function() {
+      if (!arguments[0]) {
+        if (arguments[1]) {
+          arguments[1].apply(null);
+        }
+        return Promise.resolve();
+      }
+      return nativeAddIceCandidate.apply(this, arguments);
+    };
+  }
+};
+
+
+// Expose public methods.
+module.exports = {
+  shimMediaStream: chromeShim.shimMediaStream,
+  shimOnTrack: chromeShim.shimOnTrack,
+  shimAddTrack: chromeShim.shimAddTrack,
+  shimGetSendersWithDtmf: chromeShim.shimGetSendersWithDtmf,
+  shimSourceObject: chromeShim.shimSourceObject,
+  shimPeerConnection: chromeShim.shimPeerConnection,
+  shimGetUserMedia: require('./getusermedia')
+};
+
+},{"../utils.js":12,"./getusermedia":5}],5:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+var utils = require('../utils.js');
+var logging = utils.log;
+
+// Expose public methods.
+module.exports = function(window) {
+  var browserDetails = utils.detectBrowser(window);
+  var navigator = window && window.navigator;
+
+  var constraintsToChrome_ = function(c) {
+    if (typeof c !== 'object' || c.mandatory || c.optional) {
+      return c;
+    }
+    var cc = {};
+    Object.keys(c).forEach(function(key) {
+      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
+        return;
+      }
+      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
+      if (r.exact !== undefined && typeof r.exact === 'number') {
+        r.min = r.max = r.exact;
+      }
+      var oldname_ = function(prefix, name) {
+        if (prefix) {
+          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
+        }
+        return (name === 'deviceId') ? 'sourceId' : name;
+      };
+      if (r.ideal !== undefined) {
+        cc.optional = cc.optional || [];
+        var oc = {};
+        if (typeof r.ideal === 'number') {
+          oc[oldname_('min', key)] = r.ideal;
+          cc.optional.push(oc);
+          oc = {};
+          oc[oldname_('max', key)] = r.ideal;
+          cc.optional.push(oc);
+        } else {
+          oc[oldname_('', key)] = r.ideal;
+          cc.optional.push(oc);
+        }
+      }
+      if (r.exact !== undefined && typeof r.exact !== 'number') {
+        cc.mandatory = cc.mandatory || {};
+        cc.mandatory[oldname_('', key)] = r.exact;
+      } else {
+        ['min', 'max'].forEach(function(mix) {
+          if (r[mix] !== undefined) {
+            cc.mandatory = cc.mandatory || {};
+            cc.mandatory[oldname_(mix, key)] = r[mix];
+          }
+        });
+      }
+    });
+    if (c.advanced) {
+      cc.optional = (cc.optional || []).concat(c.advanced);
+    }
+    return cc;
+  };
+
+  var shimConstraints_ = function(constraints, func) {
+    constraints = JSON.parse(JSON.stringify(constraints));
+    if (constraints && typeof constraints.audio === 'object') {
+      var remap = function(obj, a, b) {
+        if (a in obj && !(b in obj)) {
+          obj[b] = obj[a];
+          delete obj[a];
+        }
+      };
+      constraints = JSON.parse(JSON.stringify(constraints));
+      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');
+      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');
+      constraints.audio = constraintsToChrome_(constraints.audio);
+    }
+    if (constraints && typeof constraints.video === 'object') {
+      // Shim facingMode for mobile & surface pro.
+      var face = constraints.video.facingMode;
+      face = face && ((typeof face === 'object') ? face : {ideal: face});
+      var getSupportedFacingModeLies = browserDetails.version < 61;
+
+      if ((face && (face.exact === 'user' || face.exact === 'environment' ||
+                    face.ideal === 'user' || face.ideal === 'environment')) &&
+          !(navigator.mediaDevices.getSupportedConstraints &&
+            navigator.mediaDevices.getSupportedConstraints().facingMode &&
+            !getSupportedFacingModeLies)) {
+        delete constraints.video.facingMode;
+        var matches;
+        if (face.exact === 'environment' || face.ideal === 'environment') {
+          matches = ['back', 'rear'];
+        } else if (face.exact === 'user' || face.ideal === 'user') {
+          matches = ['front'];
+        }
+        if (matches) {
+          // Look for matches in label, or use last cam for back (typical).
+          return navigator.mediaDevices.enumerateDevices()
+          .then(function(devices) {
+            devices = devices.filter(function(d) {
+              return d.kind === 'videoinput';
+            });
+            var dev = devices.find(function(d) {
+              return matches.some(function(match) {
+                return d.label.toLowerCase().indexOf(match) !== -1;
+              });
+            });
+            if (!dev && devices.length && matches.indexOf('back') !== -1) {
+              dev = devices[devices.length - 1]; // more likely the back cam
+            }
+            if (dev) {
+              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :
+                                                        {ideal: dev.deviceId};
+            }
+            constraints.video = constraintsToChrome_(constraints.video);
+            logging('chrome: ' + JSON.stringify(constraints));
+            return func(constraints);
+          });
+        }
+      }
+      constraints.video = constraintsToChrome_(constraints.video);
+    }
+    logging('chrome: ' + JSON.stringify(constraints));
+    return func(constraints);
+  };
+
+  var shimError_ = function(e) {
+    return {
+      name: {
+        PermissionDeniedError: 'NotAllowedError',
+        InvalidStateError: 'NotReadableError',
+        DevicesNotFoundError: 'NotFoundError',
+        ConstraintNotSatisfiedError: 'OverconstrainedError',
+        TrackStartError: 'NotReadableError',
+        MediaDeviceFailedDueToShutdown: 'NotReadableError',
+        MediaDeviceKillSwitchOn: 'NotReadableError'
+      }[e.name] || e.name,
+      message: e.message,
+      constraint: e.constraintName,
+      toString: function() {
+        return this.name + (this.message && ': ') + this.message;
+      }
+    };
+  };
+
+  var getUserMedia_ = function(constraints, onSuccess, onError) {
+    shimConstraints_(constraints, function(c) {
+      navigator.webkitGetUserMedia(c, onSuccess, function(e) {
+        onError(shimError_(e));
+      });
+    });
+  };
+
+  navigator.getUserMedia = getUserMedia_;
+
+  // Returns the result of getUserMedia as a Promise.
+  var getUserMediaPromise_ = function(constraints) {
+    return new Promise(function(resolve, reject) {
+      navigator.getUserMedia(constraints, resolve, reject);
+    });
+  };
+
+  if (!navigator.mediaDevices) {
+    navigator.mediaDevices = {
+      getUserMedia: getUserMediaPromise_,
+      enumerateDevices: function() {
+        return new Promise(function(resolve) {
+          var kinds = {audio: 'audioinput', video: 'videoinput'};
+          return window.MediaStreamTrack.getSources(function(devices) {
+            resolve(devices.map(function(device) {
+              return {label: device.label,
+                kind: kinds[device.kind],
+                deviceId: device.id,
+                groupId: ''};
+            }));
+          });
+        });
+      },
+      getSupportedConstraints: function() {
+        return {
+          deviceId: true, echoCancellation: true, facingMode: true,
+          frameRate: true, height: true, width: true
+        };
+      }
+    };
+  }
+
+  // A shim for getUserMedia method on the mediaDevices object.
+  // TODO(KaptenJansson) remove once implemented in Chrome stable.
+  if (!navigator.mediaDevices.getUserMedia) {
+    navigator.mediaDevices.getUserMedia = function(constraints) {
+      return getUserMediaPromise_(constraints);
+    };
+  } else {
+    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
+    // function which returns a Promise, it does not accept spec-style
+    // constraints.
+    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
+        bind(navigator.mediaDevices);
+    navigator.mediaDevices.getUserMedia = function(cs) {
+      return shimConstraints_(cs, function(c) {
+        return origGetUserMedia(c).then(function(stream) {
+          if (c.audio && !stream.getAudioTracks().length ||
+              c.video && !stream.getVideoTracks().length) {
+            stream.getTracks().forEach(function(track) {
+              track.stop();
+            });
+            throw new DOMException('', 'NotFoundError');
+          }
+          return stream;
+        }, function(e) {
+          return Promise.reject(shimError_(e));
+        });
+      });
+    };
+  }
+
+  // Dummy devicechange event methods.
+  // TODO(KaptenJansson) remove once implemented in Chrome stable.
+  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
+    navigator.mediaDevices.addEventListener = function() {
+      logging('Dummy mediaDevices.addEventListener called.');
+    };
+  }
+  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
+    navigator.mediaDevices.removeEventListener = function() {
+      logging('Dummy mediaDevices.removeEventListener called.');
+    };
+  }
+};
+
+},{"../utils.js":12}],6:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+
+var utils = require('../utils');
+var shimRTCPeerConnection = require('./rtcpeerconnection_shim');
+
+module.exports = {
+  shimGetUserMedia: require('./getusermedia'),
+  shimPeerConnection: function(window) {
+    var browserDetails = utils.detectBrowser(window);
+
+    if (window.RTCIceGatherer) {
+      // ORTC defines an RTCIceCandidate object but no constructor.
+      // Not implemented in Edge.
+      if (!window.RTCIceCandidate) {
+        window.RTCIceCandidate = function(args) {
+          return args;
+        };
+      }
+      // ORTC does not have a session description object but
+      // other browsers (i.e. Chrome) that will support both PC and ORTC
+      // in the future might have this defined already.
+      if (!window.RTCSessionDescription) {
+        window.RTCSessionDescription = function(args) {
+          return args;
+        };
+      }
+      // this adds an additional event listener to MediaStrackTrack that signals
+      // when a tracks enabled property was changed. Workaround for a bug in
+      // addStream, see below. No longer required in 15025+
+      if (browserDetails.version < 15025) {
+        var origMSTEnabled = Object.getOwnPropertyDescriptor(
+            window.MediaStreamTrack.prototype, 'enabled');
+        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {
+          set: function(value) {
+            origMSTEnabled.set.call(this, value);
+            var ev = new Event('enabled');
+            ev.enabled = value;
+            this.dispatchEvent(ev);
+          }
+        });
+      }
+    }
+
+    // ORTC defines the DTMF sender a bit different.
+    // https://github.com/w3c/ortc/issues/714
+    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {
+      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {
+        get: function() {
+          if (this._dtmf === undefined) {
+            if (this.track.kind === 'audio') {
+              this._dtmf = new window.RTCDtmfSender(this);
+            } else if (this.track.kind === 'video') {
+              this._dtmf = null;
+            }
+          }
+          return this._dtmf;
+        }
+      });
+    }
+
+    window.RTCPeerConnection =
+        shimRTCPeerConnection(window, browserDetails.version);
+  },
+  shimReplaceTrack: function(window) {
+    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614
+    if (window.RTCRtpSender &&
+        !('replaceTrack' in window.RTCRtpSender.prototype)) {
+      window.RTCRtpSender.prototype.replaceTrack =
+          window.RTCRtpSender.prototype.setTrack;
+    }
+  }
+};
+
+},{"../utils":12,"./getusermedia":7,"./rtcpeerconnection_shim":8}],7:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+
+// Expose public methods.
+module.exports = function(window) {
+  var navigator = window && window.navigator;
+
+  var shimError_ = function(e) {
+    return {
+      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,
+      message: e.message,
+      constraint: e.constraint,
+      toString: function() {
+        return this.name;
+      }
+    };
+  };
+
+  // getUserMedia error shim.
+  var origGetUserMedia = navigator.mediaDevices.getUserMedia.
+      bind(navigator.mediaDevices);
+  navigator.mediaDevices.getUserMedia = function(c) {
+    return origGetUserMedia(c).catch(function(e) {
+      return Promise.reject(shimError_(e));
+    });
+  };
+};
+
+},{}],8:[function(require,module,exports){
+/*
+ *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+
+var SDPUtils = require('sdp');
+
+// sort tracks such that they follow an a-v-a-v...
+// pattern.
+function sortTracks(tracks) {
+  var audioTracks = tracks.filter(function(track) {
+    return track.kind === 'audio';
+  });
+  var videoTracks = tracks.filter(function(track) {
+    return track.kind === 'video';
+  });
+  tracks = [];
+  while (audioTracks.length || videoTracks.length) {
+    if (audioTracks.length) {
+      tracks.push(audioTracks.shift());
+    }
+    if (videoTracks.length) {
+      tracks.push(videoTracks.shift());
+    }
+  }
+  return tracks;
+}
+
+// Edge does not like
+// 1) stun:
+// 2) turn: that does not have all of turn:host:port?transport=udp
+// 3) turn: with ipv6 addresses
+// 4) turn: occurring muliple times
+function filterIceServers(iceServers, edgeVersion) {
+  var hasTurn = false;
+  iceServers = JSON.parse(JSON.stringify(iceServers));
+  return iceServers.filter(function(server) {
+    if (server && (server.urls || server.url)) {
+      var urls = server.urls || server.url;
+      if (server.url && !server.urls) {
+        console.warn('RTCIceServer.url is deprecated! Use urls instead.');
+      }
+      var isString = typeof urls === 'string';
+      if (isString) {
+        urls = [urls];
+      }
+      urls = urls.filter(function(url) {
+        var validTurn = url.indexOf('turn:') === 0 &&
+            url.indexOf('transport=udp') !== -1 &&
+            url.indexOf('turn:[') === -1 &&
+            !hasTurn;
+
+        if (validTurn) {
+          hasTurn = true;
+          return true;
+        }
+        return url.indexOf('stun:') === 0 && edgeVersion >= 14393;
+      });
+
+      delete server.url;
+      server.urls = isString ? urls[0] : urls;
+      return !!urls.length;
+    }
+    return false;
+  });
+}
+
+// Determines the intersection of local and remote capabilities.
+function getCommonCapabilities(localCapabilities, remoteCapabilities) {
+  var commonCapabilities = {
+    codecs: [],
+    headerExtensions: [],
+    fecMechanisms: []
+  };
+
+  var findCodecByPayloadType = function(pt, codecs) {
+    pt = parseInt(pt, 10);
+    for (var i = 0; i < codecs.length; i++) {
+      if (codecs[i].payloadType === pt ||
+          codecs[i].preferredPayloadType === pt) {
+        return codecs[i];
+      }
+    }
+  };
+
+  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {
+    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);
+    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);
+    return lCodec && rCodec &&
+        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();
+  };
+
+  localCapabilities.codecs.forEach(function(lCodec) {
+    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
+      var rCodec = remoteCapabilities.codecs[i];
+      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
+          lCodec.clockRate === rCodec.clockRate) {
+        if (lCodec.name.toLowerCase() === 'rtx' &&
+            lCodec.parameters && rCodec.parameters.apt) {
+          // for RTX we need to find the local rtx that has a apt
+          // which points to the same local codec as the remote one.
+          if (!rtxCapabilityMatches(lCodec, rCodec,
+              localCapabilities.codecs, remoteCapabilities.codecs)) {
+            continue;
+          }
+        }
+        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy
+        // number of channels is the highest common number of channels
+        rCodec.numChannels = Math.min(lCodec.numChannels,
+            rCodec.numChannels);
+        // push rCodec so we reply with offerer payload type
+        commonCapabilities.codecs.push(rCodec);
+
+        // determine common feedback mechanisms
+        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {
+          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {
+            if (lCodec.rtcpFeedback[j].type === fb.type &&
+                lCodec.rtcpFeedback[j].parameter === fb.parameter) {
+              return true;
+            }
+          }
+          return false;
+        });
+        // FIXME: also need to determine .parameters
+        //  see https://github.com/openpeer/ortc/issues/569
+        break;
+      }
+    }
+  });
+
+  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
+    for (var i = 0; i < remoteCapabilities.headerExtensions.length;
+         i++) {
+      var rHeaderExtension = remoteCapabilities.headerExtensions[i];
+      if (lHeaderExtension.uri === rHeaderExtension.uri) {
+        commonCapabilities.headerExtensions.push(rHeaderExtension);
+        break;
+      }
+    }
+  });
+
+  // FIXME: fecMechanisms
+  return commonCapabilities;
+}
+
+// is action=setLocalDescription with type allowed in signalingState
+function isActionAllowedInSignalingState(action, type, signalingState) {
+  return {
+    offer: {
+      setLocalDescription: ['stable', 'have-local-offer'],
+      setRemoteDescription: ['stable', 'have-remote-offer']
+    },
+    answer: {
+      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],
+      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']
+    }
+  }[type][action].indexOf(signalingState) !== -1;
+}
+
+module.exports = function(window, edgeVersion) {
+  var RTCPeerConnection = function(config) {
+    var self = this;
+
+    var _eventTarget = document.createDocumentFragment();
+    ['addEventListener', 'removeEventListener', 'dispatchEvent']
+        .forEach(function(method) {
+          self[method] = _eventTarget[method].bind(_eventTarget);
+        });
+
+    this.needNegotiation = false;
+
+    this.onicecandidate = null;
+    this.onaddstream = null;
+    this.ontrack = null;
+    this.onremovestream = null;
+    this.onsignalingstatechange = null;
+    this.oniceconnectionstatechange = null;
+    this.onicegatheringstatechange = null;
+    this.onnegotiationneeded = null;
+    this.ondatachannel = null;
+    this.canTrickleIceCandidates = null;
+
+    this.localStreams = [];
+    this.remoteStreams = [];
+    this.getLocalStreams = function() {
+      return self.localStreams;
+    };
+    this.getRemoteStreams = function() {
+      return self.remoteStreams;
+    };
+
+    this.localDescription = new window.RTCSessionDescription({
+      type: '',
+      sdp: ''
+    });
+    this.remoteDescription = new window.RTCSessionDescription({
+      type: '',
+      sdp: ''
+    });
+    this.signalingState = 'stable';
+    this.iceConnectionState = 'new';
+    this.iceGatheringState = 'new';
+
+    this.iceOptions = {
+      gatherPolicy: 'all',
+      iceServers: []
+    };
+    if (config && config.iceTransportPolicy) {
+      switch (config.iceTransportPolicy) {
+        case 'all':
+        case 'relay':
+          this.iceOptions.gatherPolicy = config.iceTransportPolicy;
+          break;
+        default:
+          // don't set iceTransportPolicy.
+          break;
+      }
+    }
+    this.usingBundle = config && config.bundlePolicy === 'max-bundle';
+
+    if (config && config.iceServers) {
+      this.iceOptions.iceServers = filterIceServers(config.iceServers,
+          edgeVersion);
+    }
+    this._config = config || {};
+
+    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
+    // everything that is needed to describe a SDP m-line.
+    this.transceivers = [];
+
+    // since the iceGatherer is currently created in createOffer but we
+    // must not emit candidates until after setLocalDescription we buffer
+    // them in this array.
+    this._localIceCandidatesBuffer = [];
+
+    this._sdpSessionId = SDPUtils.generateSessionId();
+  };
+
+  RTCPeerConnection.prototype._emitGatheringStateChange = function() {
+    var event = new Event('icegatheringstatechange');
+    this.dispatchEvent(event);
+    if (this.onicegatheringstatechange !== null) {
+      this.onicegatheringstatechange(event);
+    }
+  };
+
+  RTCPeerConnection.prototype._emitBufferedCandidates = function() {
+    var self = this;
+    var sections = SDPUtils.splitSections(self.localDescription.sdp);
+    // FIXME: need to apply ice candidates in a way which is async but
+    // in-order
+    this._localIceCandidatesBuffer.forEach(function(event) {
+      var end = !event.candidate || Object.keys(event.candidate).length === 0;
+      if (end) {
+        for (var j = 1; j < sections.length; j++) {
+          if (sections[j].indexOf('\r\na=end-of-candidates\r\n') === -1) {
+            sections[j] += 'a=end-of-candidates\r\n';
+          }
+        }
+      } else {
+        sections[event.candidate.sdpMLineIndex + 1] +=
+            'a=' + event.candidate.candidate + '\r\n';
+      }
+      self.localDescription.sdp = sections.join('');
+      self.dispatchEvent(event);
+      if (self.onicecandidate !== null) {
+        self.onicecandidate(event);
+      }
+      if (!event.candidate && self.iceGatheringState !== 'complete') {
+        var complete = self.transceivers.every(function(transceiver) {
+          return transceiver.iceGatherer &&
+              transceiver.iceGatherer.state === 'completed';
+        });
+        if (complete && self.iceGatheringStateChange !== 'complete') {
+          self.iceGatheringState = 'complete';
+          self._emitGatheringStateChange();
+        }
+      }
+    });
+    this._localIceCandidatesBuffer = [];
+  };
+
+  RTCPeerConnection.prototype.getConfiguration = function() {
+    return this._config;
+  };
+
+  // internal helper to create a transceiver object.
+  // (whih is not yet the same as the WebRTC 1.0 transceiver)
+  RTCPeerConnection.prototype._createTransceiver = function(kind) {
+    var hasBundleTransport = this.transceivers.length > 0;
+    var transceiver = {
+      track: null,
+      iceGatherer: null,
+      iceTransport: null,
+      dtlsTransport: null,
+      localCapabilities: null,
+      remoteCapabilities: null,
+      rtpSender: null,
+      rtpReceiver: null,
+      kind: kind,
+      mid: null,
+      sendEncodingParameters: null,
+      recvEncodingParameters: null,
+      stream: null,
+      wantReceive: true
+    };
+    if (this.usingBundle && hasBundleTransport) {
+      transceiver.iceTransport = this.transceivers[0].iceTransport;
+      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;
+    } else {
+      var transports = this._createIceAndDtlsTransports();
+      transceiver.iceTransport = transports.iceTransport;
+      transceiver.dtlsTransport = transports.dtlsTransport;
+    }
+    this.transceivers.push(transceiver);
+    return transceiver;
+  };
+
+  RTCPeerConnection.prototype.addTrack = function(track, stream) {
+    var transceiver;
+    for (var i = 0; i < this.transceivers.length; i++) {
+      if (!this.transceivers[i].track &&
+          this.transceivers[i].kind === track.kind) {
+        transceiver = this.transceivers[i];
+      }
+    }
+    if (!transceiver) {
+      transceiver = this._createTransceiver(track.kind);
+    }
+
+    transceiver.track = track;
+    transceiver.stream = stream;
+    transceiver.rtpSender = new window.RTCRtpSender(track,
+        transceiver.dtlsTransport);
+
+    this._maybeFireNegotiationNeeded();
+    return transceiver.rtpSender;
+  };
+
+  RTCPeerConnection.prototype.addStream = function(stream) {
+    var self = this;
+    if (edgeVersion >= 15025) {
+      this.localStreams.push(stream);
+      stream.getTracks().forEach(function(track) {
+        self.addTrack(track, stream);
+      });
+    } else {
+      // Clone is necessary for local demos mostly, attaching directly
+      // to two different senders does not work (build 10547).
+      // Fixed in 15025 (or earlier)
+      var clonedStream = stream.clone();
+      stream.getTracks().forEach(function(track, idx) {
+        var clonedTrack = clonedStream.getTracks()[idx];
+        track.addEventListener('enabled', function(event) {
+          clonedTrack.enabled = event.enabled;
+        });
+      });
+      clonedStream.getTracks().forEach(function(track) {
+        self.addTrack(track, clonedStream);
+      });
+      this.localStreams.push(clonedStream);
+    }
+    this._maybeFireNegotiationNeeded();
+  };
+
+  RTCPeerConnection.prototype.removeStream = function(stream) {
+    var idx = this.localStreams.indexOf(stream);
+    if (idx > -1) {
+      this.localStreams.splice(idx, 1);
+      this._maybeFireNegotiationNeeded();
+    }
+  };
+
+  RTCPeerConnection.prototype.getSenders = function() {
+    return this.transceivers.filter(function(transceiver) {
+      return !!transceiver.rtpSender;
+    })
+    .map(function(transceiver) {
+      return transceiver.rtpSender;
+    });
+  };
+
+  RTCPeerConnection.prototype.getReceivers = function() {
+    return this.transceivers.filter(function(transceiver) {
+      return !!transceiver.rtpReceiver;
+    })
+    .map(function(transceiver) {
+      return transceiver.rtpReceiver;
+    });
+  };
+
+  // Create ICE gatherer and hook it up.
+  RTCPeerConnection.prototype._createIceGatherer = function(mid,
+      sdpMLineIndex) {
+    var self = this;
+    var iceGatherer = new window.RTCIceGatherer(self.iceOptions);
+    iceGatherer.onlocalcandidate = function(evt) {
+      var event = new Event('icecandidate');
+      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};
+
+      var cand = evt.candidate;
+      var end = !cand || Object.keys(cand).length === 0;
+      // Edge emits an empty object for RTCIceCandidateComplete‥
+      if (end) {
+        // polyfill since RTCIceGatherer.state is not implemented in
+        // Edge 10547 yet.
+        if (iceGatherer.state === undefined) {
+          iceGatherer.state = 'completed';
+        }
+      } else {
+        // RTCIceCandidate doesn't have a component, needs to be added
+        cand.component = 1;
+        event.candidate.candidate = SDPUtils.writeCandidate(cand);
+      }
+
+      // update local description.
+      var sections = SDPUtils.splitSections(self.localDescription.sdp);
+      if (!end) {
+        sections[event.candidate.sdpMLineIndex + 1] +=
+            'a=' + event.candidate.candidate + '\r\n';
+      } else {
+        sections[event.candidate.sdpMLineIndex + 1] +=
+            'a=end-of-candidates\r\n';
+      }
+      self.localDescription.sdp = sections.join('');
+      var transceivers = self._pendingOffer ? self._pendingOffer :
+          self.transceivers;
+      var complete = transceivers.every(function(transceiver) {
+        return transceiver.iceGatherer &&
+            transceiver.iceGatherer.state === 'completed';
+      });
+
+      // Emit candidate if localDescription is set.
+      // Also emits null candidate when all gatherers are complete.
+      switch (self.iceGatheringState) {
+        case 'new':
+          if (!end) {
+            self._localIceCandidatesBuffer.push(event);
+          }
+          if (end && complete) {
+            self._localIceCandidatesBuffer.push(
+                new Event('icecandidate'));
+          }
+          break;
+        case 'gathering':
+          self._emitBufferedCandidates();
+          if (!end) {
+            self.dispatchEvent(event);
+            if (self.onicecandidate !== null) {
+              self.onicecandidate(event);
+            }
+          }
+          if (complete) {
+            self.dispatchEvent(new Event('icecandidate'));
+            if (self.onicecandidate !== null) {
+              self.onicecandidate(new Event('icecandidate'));
+            }
+            self.iceGatheringState = 'complete';
+            self._emitGatheringStateChange();
+          }
+          break;
+        case 'complete':
+          // should not happen... currently!
+          break;
+        default: // no-op.
+          break;
+      }
+    };
+    return iceGatherer;
+  };
+
+  // Create ICE transport and DTLS transport.
+  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {
+    var self = this;
+    var iceTransport = new window.RTCIceTransport(null);
+    iceTransport.onicestatechange = function() {
+      self._updateConnectionState();
+    };
+
+    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);
+    dtlsTransport.ondtlsstatechange = function() {
+      self._updateConnectionState();
+    };
+    dtlsTransport.onerror = function() {
+      // onerror does not set state to failed by itself.
+      Object.defineProperty(dtlsTransport, 'state',
+          {value: 'failed', writable: true});
+      self._updateConnectionState();
+    };
+
+    return {
+      iceTransport: iceTransport,
+      dtlsTransport: dtlsTransport
+    };
+  };
+
+  // Destroy ICE gatherer, ICE transport and DTLS transport.
+  // Without triggering the callbacks.
+  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(
+      sdpMLineIndex) {
+    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;
+    if (iceGatherer) {
+      delete iceGatherer.onlocalcandidate;
+      delete this.transceivers[sdpMLineIndex].iceGatherer;
+    }
+    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;
+    if (iceTransport) {
+      delete iceTransport.onicestatechange;
+      delete this.transceivers[sdpMLineIndex].iceTransport;
+    }
+    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;
+    if (dtlsTransport) {
+      delete dtlsTransport.ondtlsstatechange;
+      delete dtlsTransport.onerror;
+      delete this.transceivers[sdpMLineIndex].dtlsTransport;
+    }
+  };
+
+  // Start the RTP Sender and Receiver for a transceiver.
+  RTCPeerConnection.prototype._transceive = function(transceiver,
+      send, recv) {
+    var params = getCommonCapabilities(transceiver.localCapabilities,
+        transceiver.remoteCapabilities);
+    if (send && transceiver.rtpSender) {
+      params.encodings = transceiver.sendEncodingParameters;
+      params.rtcp = {
+        cname: SDPUtils.localCName,
+        compound: transceiver.rtcpParameters.compound
+      };
+      if (transceiver.recvEncodingParameters.length) {
+        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;
+      }
+      transceiver.rtpSender.send(params);
+    }
+    if (recv && transceiver.rtpReceiver) {
+      // remove RTX field in Edge 14942
+      if (transceiver.kind === 'video'
+          && transceiver.recvEncodingParameters
+          && edgeVersion < 15019) {
+        transceiver.recvEncodingParameters.forEach(function(p) {
+          delete p.rtx;
+        });
+      }
+      params.encodings = transceiver.recvEncodingParameters;
+      params.rtcp = {
+        cname: transceiver.rtcpParameters.cname,
+        compound: transceiver.rtcpParameters.compound
+      };
+      if (transceiver.sendEncodingParameters.length) {
+        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;
+      }
+      transceiver.rtpReceiver.receive(params);
+    }
+  };
+
+  RTCPeerConnection.prototype.setLocalDescription = function(description) {
+    var self = this;
+
+    if (!isActionAllowedInSignalingState('setLocalDescription',
+        description.type, this.signalingState)) {
+      var e = new Error('Can not set local ' + description.type +
+          ' in state ' + this.signalingState);
+      e.name = 'InvalidStateError';
+      if (arguments.length > 2 && typeof arguments[2] === 'function') {
+        window.setTimeout(arguments[2], 0, e);
+      }
+      return Promise.reject(e);
+    }
+
+    var sections;
+    var sessionpart;
+    if (description.type === 'offer') {
+      // FIXME: What was the purpose of this empty if statement?
+      // if (!this._pendingOffer) {
+      // } else {
+      if (this._pendingOffer) {
+        // VERY limited support for SDP munging. Limited to:
+        // * changing the order of codecs
+        sections = SDPUtils.splitSections(description.sdp);
+        sessionpart = sections.shift();
+        sections.forEach(function(mediaSection, sdpMLineIndex) {
+          var caps = SDPUtils.parseRtpParameters(mediaSection);
+          self._pendingOffer[sdpMLineIndex].localCapabilities = caps;
+        });
+        this.transceivers = this._pendingOffer;
+        delete this._pendingOffer;
+      }
+    } else if (description.type === 'answer') {
+      sections = SDPUtils.splitSections(self.remoteDescription.sdp);
+      sessionpart = sections.shift();
+      var isIceLite = SDPUtils.matchPrefix(sessionpart,
+          'a=ice-lite').length > 0;
+      sections.forEach(function(mediaSection, sdpMLineIndex) {
+        var transceiver = self.transceivers[sdpMLineIndex];
+        var iceGatherer = transceiver.iceGatherer;
+        var iceTransport = transceiver.iceTransport;
+        var dtlsTransport = transceiver.dtlsTransport;
+        var localCapabilities = transceiver.localCapabilities;
+        var remoteCapabilities = transceiver.remoteCapabilities;
+
+        var rejected = SDPUtils.isRejected(mediaSection);
+
+        if (!rejected && !transceiver.isDatachannel) {
+          var remoteIceParameters = SDPUtils.getIceParameters(
+              mediaSection, sessionpart);
+          var remoteDtlsParameters = SDPUtils.getDtlsParameters(
+              mediaSection, sessionpart);
+          if (isIceLite) {
+            remoteDtlsParameters.role = 'server';
+          }
+
+          if (!self.usingBundle || sdpMLineIndex === 0) {
+            iceTransport.start(iceGatherer, remoteIceParameters,
+                isIceLite ? 'controlling' : 'controlled');
+            dtlsTransport.start(remoteDtlsParameters);
+          }
+
+          // Calculate intersection of capabilities.
+          var params = getCommonCapabilities(localCapabilities,
+              remoteCapabilities);
+
+          // Start the RTCRtpSender. The RTCRtpReceiver for this
+          // transceiver has already been started in setRemoteDescription.
+          self._transceive(transceiver,
+              params.codecs.length > 0,
+              false);
+        }
+      });
+    }
+
+    this.localDescription = {
+      type: description.type,
+      sdp: description.sdp
+    };
+    switch (description.type) {
+      case 'offer':
+        this._updateSignalingState('have-local-offer');
+        break;
+      case 'answer':
+        this._updateSignalingState('stable');
+        break;
+      default:
+        throw new TypeError('unsupported type "' + description.type +
+            '"');
+    }
+
+    // If a success callback was provided, emit ICE candidates after it
+    // has been executed. Otherwise, emit callback after the Promise is
+    // resolved.
+    var hasCallback = arguments.length > 1 &&
+      typeof arguments[1] === 'function';
+    if (hasCallback) {
+      var cb = arguments[1];
+      window.setTimeout(function() {
+        cb();
+        if (self.iceGatheringState === 'new') {
+          self.iceGatheringState = 'gathering';
+          self._emitGatheringStateChange();
+        }
+        self._emitBufferedCandidates();
+      }, 0);
+    }
+    var p = Promise.resolve();
+    p.then(function() {
+      if (!hasCallback) {
+        if (self.iceGatheringState === 'new') {
+          self.iceGatheringState = 'gathering';
+          self._emitGatheringStateChange();
+        }
+        // Usually candidates will be emitted earlier.
+        window.setTimeout(self._emitBufferedCandidates.bind(self), 500);
+      }
+    });
+    return p;
+  };
+
+  RTCPeerConnection.prototype.setRemoteDescription = function(description) {
+    var self = this;
+
+    if (!isActionAllowedInSignalingState('setRemoteDescription',
+        description.type, this.signalingState)) {
+      var e = new Error('Can not set remote ' + description.type +
+          ' in state ' + this.signalingState);
+      e.name = 'InvalidStateError';
+      if (arguments.length > 2 && typeof arguments[2] === 'function') {
+        window.setTimeout(arguments[2], 0, e);
+      }
+      return Promise.reject(e);
+    }
+
+    var streams = {};
+    var receiverList = [];
+    var sections = SDPUtils.splitSections(description.sdp);
+    var sessionpart = sections.shift();
+    var isIceLite = SDPUtils.matchPrefix(sessionpart,
+        'a=ice-lite').length > 0;
+    var usingBundle = SDPUtils.matchPrefix(sessionpart,
+        'a=group:BUNDLE ').length > 0;
+    this.usingBundle = usingBundle;
+    var iceOptions = SDPUtils.matchPrefix(sessionpart,
+        'a=ice-options:')[0];
+    if (iceOptions) {
+      this.canTrickleIceCandidates = iceOptions.substr(14).split(' ')
+          .indexOf('trickle') >= 0;
+    } else {
+      this.canTrickleIceCandidates = false;
+    }
+
+    sections.forEach(function(mediaSection, sdpMLineIndex) {
+      var lines = SDPUtils.splitLines(mediaSection);
+      var kind = SDPUtils.getKind(mediaSection);
+      var rejected = SDPUtils.isRejected(mediaSection);
+      var protocol = lines[0].substr(2).split(' ')[2];
+
+      var direction = SDPUtils.getDirection(mediaSection, sessionpart);
+      var remoteMsid = SDPUtils.parseMsid(mediaSection);
+
+      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();
+
+      // Reject datachannels which are not implemented yet.
+      if (kind === 'application' && protocol === 'DTLS/SCTP') {
+        self.transceivers[sdpMLineIndex] = {
+          mid: mid,
+          isDatachannel: true
+        };
+        return;
+      }
+
+      var transceiver;
+      var iceGatherer;
+      var iceTransport;
+      var dtlsTransport;
+      var rtpReceiver;
+      var sendEncodingParameters;
+      var recvEncodingParameters;
+      var localCapabilities;
+
+      var track;
+      // FIXME: ensure the mediaSection has rtcp-mux set.
+      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
+      var remoteIceParameters;
+      var remoteDtlsParameters;
+      if (!rejected) {
+        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
+            sessionpart);
+        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
+            sessionpart);
+        remoteDtlsParameters.role = 'client';
+      }
+      recvEncodingParameters =
+          SDPUtils.parseRtpEncodingParameters(mediaSection);
+
+      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);
+
+      var isComplete = SDPUtils.matchPrefix(mediaSection,
+          'a=end-of-candidates', sessionpart).length > 0;
+      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')
+          .map(function(cand) {
+            return SDPUtils.parseCandidate(cand);
+          })
+          .filter(function(cand) {
+            return cand.component === '1' || cand.component === 1;
+          });
+
+      // Check if we can use BUNDLE and dispose transports.
+      if ((description.type === 'offer' || description.type === 'answer') &&
+          !rejected && usingBundle && sdpMLineIndex > 0 &&
+          self.transceivers[sdpMLineIndex]) {
+        self._disposeIceAndDtlsTransports(sdpMLineIndex);
+        self.transceivers[sdpMLineIndex].iceGatherer =
+            self.transceivers[0].iceGatherer;
+        self.transceivers[sdpMLineIndex].iceTransport =
+            self.transceivers[0].iceTransport;
+        self.transceivers[sdpMLineIndex].dtlsTransport =
+            self.transceivers[0].dtlsTransport;
+        if (self.transceivers[sdpMLineIndex].rtpSender) {
+          self.transceivers[sdpMLineIndex].rtpSender.setTransport(
+              self.transceivers[0].dtlsTransport);
+        }
+        if (self.transceivers[sdpMLineIndex].rtpReceiver) {
+          self.transceivers[sdpMLineIndex].rtpReceiver.setTransport(
+              self.transceivers[0].dtlsTransport);
+        }
+      }
+      if (description.type === 'offer' && !rejected) {
+        transceiver = self.transceivers[sdpMLineIndex] ||
+            self._createTransceiver(kind);
+        transceiver.mid = mid;
+
+        if (!transceiver.iceGatherer) {
+          transceiver.iceGatherer = usingBundle && sdpMLineIndex > 0 ?
+              self.transceivers[0].iceGatherer :
+              self._createIceGatherer(mid, sdpMLineIndex);
+        }
+
+        if (isComplete && cands.length &&
+            (!usingBundle || sdpMLineIndex === 0)) {
+          transceiver.iceTransport.setRemoteCandidates(cands);
+        }
+
+        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);
+
+        // filter RTX until additional stuff needed for RTX is implemented
+        // in adapter.js
+        if (edgeVersion < 15019) {
+          localCapabilities.codecs = localCapabilities.codecs.filter(
+              function(codec) {
+                return codec.name !== 'rtx';
+              });
+        }
+
+        sendEncodingParameters = [{
+          ssrc: (2 * sdpMLineIndex + 2) * 1001
+        }];
+
+        if (direction === 'sendrecv' || direction === 'sendonly') {
+          rtpReceiver = new window.RTCRtpReceiver(transceiver.dtlsTransport,
+              kind);
+
+          track = rtpReceiver.track;
+          // FIXME: does not work with Plan B.
+          if (remoteMsid) {
+            if (!streams[remoteMsid.stream]) {
+              streams[remoteMsid.stream] = new window.MediaStream();
+              Object.defineProperty(streams[remoteMsid.stream], 'id', {
+                get: function() {
+                  return remoteMsid.stream;
+                }
+              });
+            }
+            Object.defineProperty(track, 'id', {
+              get: function() {
+                return remoteMsid.track;
+              }
+            });
+            streams[remoteMsid.stream].addTrack(track);
+            receiverList.push([track, rtpReceiver,
+              streams[remoteMsid.stream]]);
+          } else {
+            if (!streams.default) {
+              streams.default = new window.MediaStream();
+            }
+            streams.default.addTrack(track);
+            receiverList.push([track, rtpReceiver, streams.default]);
+          }
+        }
+
+        transceiver.localCapabilities = localCapabilities;
+        transceiver.remoteCapabilities = remoteCapabilities;
+        transceiver.rtpReceiver = rtpReceiver;
+        transceiver.rtcpParameters = rtcpParameters;
+        transceiver.sendEncodingParameters = sendEncodingParameters;
+        transceiver.recvEncodingParameters = recvEncodingParameters;
+
+        // Start the RTCRtpReceiver now. The RTPSender is started in
+        // setLocalDescription.
+        self._transceive(self.transceivers[sdpMLineIndex],
+            false,
+            direction === 'sendrecv' || direction === 'sendonly');
+      } else if (description.type === 'answer' && !rejected) {
+        transceiver = self.transceivers[sdpMLineIndex];
+        iceGatherer = transceiver.iceGatherer;
+        iceTransport = transceiver.iceTransport;
+        dtlsTransport = transceiver.dtlsTransport;
+        rtpReceiver = transceiver.rtpReceiver;
+        sendEncodingParameters = transceiver.sendEncodingParameters;
+        localCapabilities = transceiver.localCapabilities;
+
+        self.transceivers[sdpMLineIndex].recvEncodingParameters =
+            recvEncodingParameters;
+        self.transceivers[sdpMLineIndex].remoteCapabilities =
+            remoteCapabilities;
+        self.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;
+
+        if (!usingBundle || sdpMLineIndex === 0) {
+          if ((isIceLite || isComplete) && cands.length) {
+            iceTransport.setRemoteCandidates(cands);
+          }
+          iceTransport.start(iceGatherer, remoteIceParameters,
+              'controlling');
+          dtlsTransport.start(remoteDtlsParameters);
+        }
+
+        self._transceive(transceiver,
+            direction === 'sendrecv' || direction === 'recvonly',
+            direction === 'sendrecv' || direction === 'sendonly');
+
+        if (rtpReceiver &&
+            (direction === 'sendrecv' || direction === 'sendonly')) {
+          track = rtpReceiver.track;
+          if (remoteMsid) {
+            if (!streams[remoteMsid.stream]) {
+              streams[remoteMsid.stream] = new window.MediaStream();
+            }
+            streams[remoteMsid.stream].addTrack(track);
+            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);
+          } else {
+            if (!streams.default) {
+              streams.default = new window.MediaStream();
+            }
+            streams.default.addTrack(track);
+            receiverList.push([track, rtpReceiver, streams.default]);
+          }
+        } else {
+          // FIXME: actually the receiver should be created later.
+          delete transceiver.rtpReceiver;
+        }
+      }
+    });
+
+    this.remoteDescription = {
+      type: description.type,
+      sdp: description.sdp
+    };
+    switch (description.type) {
+      case 'offer':
+        this._updateSignalingState('have-remote-offer');
+        break;
+      case 'answer':
+        this._updateSignalingState('stable');
+        break;
+      default:
+        throw new TypeError('unsupported type "' + description.type +
+            '"');
+    }
+    Object.keys(streams).forEach(function(sid) {
+      var stream = streams[sid];
+      if (stream.getTracks().length) {
+        self.remoteStreams.push(stream);
+        var event = new Event('addstream');
+        event.stream = stream;
+        self.dispatchEvent(event);
+        if (self.onaddstream !== null) {
+          window.setTimeout(function() {
+            self.onaddstream(event);
+          }, 0);
+        }
+
+        receiverList.forEach(function(item) {
+          var track = item[0];
+          var receiver = item[1];
+          if (stream.id !== item[2].id) {
+            return;
+          }
+          var trackEvent = new Event('track');
+          trackEvent.track = track;
+          trackEvent.receiver = receiver;
+          trackEvent.streams = [stream];
+          self.dispatchEvent(trackEvent);
+          if (self.ontrack !== null) {
+            window.setTimeout(function() {
+              self.ontrack(trackEvent);
+            }, 0);
+          }
+        });
+      }
+    });
+
+    // check whether addIceCandidate({}) was called within four seconds after
+    // setRemoteDescription.
+    window.setTimeout(function() {
+      if (!(self && self.transceivers)) {
+        return;
+      }
+      self.transceivers.forEach(function(transceiver) {
+        if (transceiver.iceTransport &&
+            transceiver.iceTransport.state === 'new' &&
+            transceiver.iceTransport.getRemoteCandidates().length > 0) {
+          console.warn('Timeout for addRemoteCandidate. Consider sending ' +
+              'an end-of-candidates notification');
+          transceiver.iceTransport.addRemoteCandidate({});
+        }
+      });
+    }, 4000);
+
+    if (arguments.length > 1 && typeof arguments[1] === 'function') {
+      window.setTimeout(arguments[1], 0);
+    }
+    return Promise.resolve();
+  };
+
+  RTCPeerConnection.prototype.close = function() {
+    this.transceivers.forEach(function(transceiver) {
+      /* not yet
+      if (transceiver.iceGatherer) {
+        transceiver.iceGatherer.close();
+      }
+      */
+      if (transceiver.iceTransport) {
+        transceiver.iceTransport.stop();
+      }
+      if (transceiver.dtlsTransport) {
+        transceiver.dtlsTransport.stop();
+      }
+      if (transceiver.rtpSender) {
+        transceiver.rtpSender.stop();
+      }
+      if (transceiver.rtpReceiver) {
+        transceiver.rtpReceiver.stop();
+      }
+    });
+    // FIXME: clean up tracks, local streams, remote streams, etc
+    this._updateSignalingState('closed');
+  };
+
+  // Update the signaling state.
+  RTCPeerConnection.prototype._updateSignalingState = function(newState) {
+    this.signalingState = newState;
+    var event = new Event('signalingstatechange');
+    this.dispatchEvent(event);
+    if (this.onsignalingstatechange !== null) {
+      this.onsignalingstatechange(event);
+    }
+  };
+
+  // Determine whether to fire the negotiationneeded event.
+  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {
+    var self = this;
+    if (this.signalingState !== 'stable' || this.needNegotiation === true) {
+      return;
+    }
+    this.needNegotiation = true;
+    window.setTimeout(function() {
+      if (self.needNegotiation === false) {
+        return;
+      }
+      self.needNegotiation = false;
+      var event = new Event('negotiationneeded');
+      self.dispatchEvent(event);
+      if (self.onnegotiationneeded !== null) {
+        self.onnegotiationneeded(event);
+      }
+    }, 0);
+  };
+
+  // Update the connection state.
+  RTCPeerConnection.prototype._updateConnectionState = function() {
+    var self = this;
+    var newState;
+    var states = {
+      'new': 0,
+      closed: 0,
+      connecting: 0,
+      checking: 0,
+      connected: 0,
+      completed: 0,
+      disconnected: 0,
+      failed: 0
+    };
+    this.transceivers.forEach(function(transceiver) {
+      states[transceiver.iceTransport.state]++;
+      states[transceiver.dtlsTransport.state]++;
+    });
+    // ICETransport.completed and connected are the same for this purpose.
+    states.connected += states.completed;
+
+    newState = 'new';
+    if (states.failed > 0) {
+      newState = 'failed';
+    } else if (states.connecting > 0 || states.checking > 0) {
+      newState = 'connecting';
+    } else if (states.disconnected > 0) {
+      newState = 'disconnected';
+    } else if (states.new > 0) {
+      newState = 'new';
+    } else if (states.connected > 0 || states.completed > 0) {
+      newState = 'connected';
+    }
+
+    if (newState !== self.iceConnectionState) {
+      self.iceConnectionState = newState;
+      var event = new Event('iceconnectionstatechange');
+      this.dispatchEvent(event);
+      if (this.oniceconnectionstatechange !== null) {
+        this.oniceconnectionstatechange(event);
+      }
+    }
+  };
+
+  RTCPeerConnection.prototype.createOffer = function() {
+    var self = this;
+    if (this._pendingOffer) {
+      throw new Error('createOffer called while there is a pending offer.');
+    }
+    var offerOptions;
+    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
+      offerOptions = arguments[0];
+    } else if (arguments.length === 3) {
+      offerOptions = arguments[2];
+    }
+
+    var numAudioTracks = this.transceivers.filter(function(t) {
+      return t.kind === 'audio';
+    }).length;
+    var numVideoTracks = this.transceivers.filter(function(t) {
+      return t.kind === 'video';
+    }).length;
+
+    // Determine number of audio and video tracks we need to send/recv.
+    if (offerOptions) {
+      // Reject Chrome legacy constraints.
+      if (offerOptions.mandatory || offerOptions.optional) {
+        throw new TypeError(
+            'Legacy mandatory/optional constraints not supported.');
+      }
+      if (offerOptions.offerToReceiveAudio !== undefined) {
+        if (offerOptions.offerToReceiveAudio === true) {
+          numAudioTracks = 1;
+        } else if (offerOptions.offerToReceiveAudio === false) {
+          numAudioTracks = 0;
+        } else {
+          numAudioTracks = offerOptions.offerToReceiveAudio;
+        }
+      }
+      if (offerOptions.offerToReceiveVideo !== undefined) {
+        if (offerOptions.offerToReceiveVideo === true) {
+          numVideoTracks = 1;
+        } else if (offerOptions.offerToReceiveVideo === false) {
+          numVideoTracks = 0;
+        } else {
+          numVideoTracks = offerOptions.offerToReceiveVideo;
+        }
+      }
+    }
+
+    this.transceivers.forEach(function(transceiver) {
+      if (transceiver.kind === 'audio') {
+        numAudioTracks--;
+        if (numAudioTracks < 0) {
+          transceiver.wantReceive = false;
+        }
+      } else if (transceiver.kind === 'video') {
+        numVideoTracks--;
+        if (numVideoTracks < 0) {
+          transceiver.wantReceive = false;
+        }
+      }
+    });
+
+    // Create M-lines for recvonly streams.
+    while (numAudioTracks > 0 || numVideoTracks > 0) {
+      if (numAudioTracks > 0) {
+        this._createTransceiver('audio');
+        numAudioTracks--;
+      }
+      if (numVideoTracks > 0) {
+        this._createTransceiver('video');
+        numVideoTracks--;
+      }
+    }
+    // reorder tracks
+    var transceivers = sortTracks(this.transceivers);
+
+    var sdp = SDPUtils.writeSessionBoilerplate(this._sdpSessionId);
+    transceivers.forEach(function(transceiver, sdpMLineIndex) {
+      // For each track, create an ice gatherer, ice transport,
+      // dtls transport, potentially rtpsender and rtpreceiver.
+      var track = transceiver.track;
+      var kind = transceiver.kind;
+      var mid = SDPUtils.generateIdentifier();
+      transceiver.mid = mid;
+
+      if (!transceiver.iceGatherer) {
+        transceiver.iceGatherer = self.usingBundle && sdpMLineIndex > 0 ?
+            transceivers[0].iceGatherer :
+            self._createIceGatherer(mid, sdpMLineIndex);
+      }
+
+      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);
+      // filter RTX until additional stuff needed for RTX is implemented
+      // in adapter.js
+      if (edgeVersion < 15019) {
+        localCapabilities.codecs = localCapabilities.codecs.filter(
+            function(codec) {
+              return codec.name !== 'rtx';
+            });
+      }
+      localCapabilities.codecs.forEach(function(codec) {
+        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552
+        // by adding level-asymmetry-allowed=1
+        if (codec.name === 'H264' &&
+            codec.parameters['level-asymmetry-allowed'] === undefined) {
+          codec.parameters['level-asymmetry-allowed'] = '1';
+        }
+      });
+
+      // generate an ssrc now, to be used later in rtpSender.send
+      var sendEncodingParameters = [{
+        ssrc: (2 * sdpMLineIndex + 1) * 1001
+      }];
+      if (track) {
+        // add RTX
+        if (edgeVersion >= 15019 && kind === 'video') {
+          sendEncodingParameters[0].rtx = {
+            ssrc: (2 * sdpMLineIndex + 1) * 1001 + 1
+          };
+        }
+      }
+
+      if (transceiver.wantReceive) {
+        transceiver.rtpReceiver = new window.RTCRtpReceiver(
+          transceiver.dtlsTransport,
+          kind
+        );
+      }
+
+      transceiver.localCapabilities = localCapabilities;
+      transceiver.sendEncodingParameters = sendEncodingParameters;
+    });
+
+    // always offer BUNDLE and dispose on return if not supported.
+    if (this._config.bundlePolicy !== 'max-compat') {
+      sdp += 'a=group:BUNDLE ' + transceivers.map(function(t) {
+        return t.mid;
+      }).join(' ') + '\r\n';
+    }
+    sdp += 'a=ice-options:trickle\r\n';
+
+    transceivers.forEach(function(transceiver, sdpMLineIndex) {
+      sdp += SDPUtils.writeMediaSection(transceiver,
+          transceiver.localCapabilities, 'offer', transceiver.stream);
+      sdp += 'a=rtcp-rsize\r\n';
+    });
+
+    this._pendingOffer = transceivers;
+    var desc = new window.RTCSessionDescription({
+      type: 'offer',
+      sdp: sdp
+    });
+    if (arguments.length && typeof arguments[0] === 'function') {
+      window.setTimeout(arguments[0], 0, desc);
+    }
+    return Promise.resolve(desc);
+  };
+
+  RTCPeerConnection.prototype.createAnswer = function() {
+    var sdp = SDPUtils.writeSessionBoilerplate(this._sdpSessionId);
+    if (this.usingBundle) {
+      sdp += 'a=group:BUNDLE ' + this.transceivers.map(function(t) {
+        return t.mid;
+      }).join(' ') + '\r\n';
+    }
+    this.transceivers.forEach(function(transceiver, sdpMLineIndex) {
+      if (transceiver.isDatachannel) {
+        sdp += 'm=application 0 DTLS/SCTP 5000\r\n' +
+            'c=IN IP4 0.0.0.0\r\n' +
+            'a=mid:' + transceiver.mid + '\r\n';
+        return;
+      }
+
+      // FIXME: look at direction.
+      if (transceiver.stream) {
+        var localTrack;
+        if (transceiver.kind === 'audio') {
+          localTrack = transceiver.stream.getAudioTracks()[0];
+        } else if (transceiver.kind === 'video') {
+          localTrack = transceiver.stream.getVideoTracks()[0];
+        }
+        if (localTrack) {
+          // add RTX
+          if (edgeVersion >= 15019 && transceiver.kind === 'video') {
+            transceiver.sendEncodingParameters[0].rtx = {
+              ssrc: (2 * sdpMLineIndex + 2) * 1001 + 1
+            };
+          }
+        }
+      }
+
+      // Calculate intersection of capabilities.
+      var commonCapabilities = getCommonCapabilities(
+          transceiver.localCapabilities,
+          transceiver.remoteCapabilities);
+
+      var hasRtx = commonCapabilities.codecs.filter(function(c) {
+        return c.name.toLowerCase() === 'rtx';
+      }).length;
+      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {
+        delete transceiver.sendEncodingParameters[0].rtx;
+      }
+
+      sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,
+          'answer', transceiver.stream);
+      if (transceiver.rtcpParameters &&
+          transceiver.rtcpParameters.reducedSize) {
+        sdp += 'a=rtcp-rsize\r\n';
+      }
+    });
+
+    var desc = new window.RTCSessionDescription({
+      type: 'answer',
+      sdp: sdp
+    });
+    if (arguments.length && typeof arguments[0] === 'function') {
+      window.setTimeout(arguments[0], 0, desc);
+    }
+    return Promise.resolve(desc);
+  };
+
+  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
+    if (!candidate) {
+      for (var j = 0; j < this.transceivers.length; j++) {
+        this.transceivers[j].iceTransport.addRemoteCandidate({});
+        if (this.usingBundle) {
+          return Promise.resolve();
+        }
+      }
+    } else {
+      var mLineIndex = candidate.sdpMLineIndex;
+      if (candidate.sdpMid) {
+        for (var i = 0; i < this.transceivers.length; i++) {
+          if (this.transceivers[i].mid === candidate.sdpMid) {
+            mLineIndex = i;
+            break;
+          }
+        }
+      }
+      var transceiver = this.transceivers[mLineIndex];
+      if (transceiver) {
+        var cand = Object.keys(candidate.candidate).length > 0 ?
+            SDPUtils.parseCandidate(candidate.candidate) : {};
+        // Ignore Chrome's invalid candidates since Edge does not like them.
+        if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {
+          return Promise.resolve();
+        }
+        // Ignore RTCP candidates, we assume RTCP-MUX.
+        if (cand.component &&
+            !(cand.component === '1' || cand.component === 1)) {
+          return Promise.resolve();
+        }
+        transceiver.iceTransport.addRemoteCandidate(cand);
+
+        // update the remoteDescription.
+        var sections = SDPUtils.splitSections(this.remoteDescription.sdp);
+        sections[mLineIndex + 1] += (cand.type ? candidate.candidate.trim()
+            : 'a=end-of-candidates') + '\r\n';
+        this.remoteDescription.sdp = sections.join('');
+      }
+    }
+    if (arguments.length > 1 && typeof arguments[1] === 'function') {
+      window.setTimeout(arguments[1], 0);
+    }
+    return Promise.resolve();
+  };
+
+  RTCPeerConnection.prototype.getStats = function() {
+    var promises = [];
+    this.transceivers.forEach(function(transceiver) {
+      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
+        'dtlsTransport'].forEach(function(method) {
+          if (transceiver[method]) {
+            promises.push(transceiver[method].getStats());
+          }
+        });
+    });
+    var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&
+        arguments[1];
+    var fixStatsType = function(stat) {
+      return {
+        inboundrtp: 'inbound-rtp',
+        outboundrtp: 'outbound-rtp',
+        candidatepair: 'candidate-pair',
+        localcandidate: 'local-candidate',
+        remotecandidate: 'remote-candidate'
+      }[stat.type] || stat.type;
+    };
+    return new Promise(function(resolve) {
+      // shim getStats with maplike support
+      var results = new Map();
+      Promise.all(promises).then(function(res) {
+        res.forEach(function(result) {
+          Object.keys(result).forEach(function(id) {
+            result[id].type = fixStatsType(result[id]);
+            results.set(id, result[id]);
+          });
+        });
+        if (cb) {
+          window.setTimeout(cb, 0, results);
+        }
+        resolve(results);
+      });
+    });
+  };
+  return RTCPeerConnection;
+};
+
+},{"sdp":1}],9:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+
+var utils = require('../utils');
+
+var firefoxShim = {
+  shimOnTrack: function(window) {
+    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
+        window.RTCPeerConnection.prototype)) {
+      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
+        get: function() {
+          return this._ontrack;
+        },
+        set: function(f) {
+          if (this._ontrack) {
+            this.removeEventListener('track', this._ontrack);
+            this.removeEventListener('addstream', this._ontrackpoly);
+          }
+          this.addEventListener('track', this._ontrack = f);
+          this.addEventListener('addstream', this._ontrackpoly = function(e) {
+            e.stream.getTracks().forEach(function(track) {
+              var event = new Event('track');
+              event.track = track;
+              event.receiver = {track: track};
+              event.streams = [e.stream];
+              this.dispatchEvent(event);
+            }.bind(this));
+          }.bind(this));
+        }
+      });
+    }
+  },
+
+  shimSourceObject: function(window) {
+    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.
+    if (typeof window === 'object') {
+      if (window.HTMLMediaElement &&
+        !('srcObject' in window.HTMLMediaElement.prototype)) {
+        // Shim the srcObject property, once, when HTMLMediaElement is found.
+        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
+          get: function() {
+            return this.mozSrcObject;
+          },
+          set: function(stream) {
+            this.mozSrcObject = stream;
+          }
+        });
+      }
+    }
+  },
+
+  shimPeerConnection: function(window) {
+    var browserDetails = utils.detectBrowser(window);
+
+    if (typeof window !== 'object' || !(window.RTCPeerConnection ||
+        window.mozRTCPeerConnection)) {
+      return; // probably media.peerconnection.enabled=false in about:config
+    }
+    // The RTCPeerConnection object.
+    if (!window.RTCPeerConnection) {
+      window.RTCPeerConnection = function(pcConfig, pcConstraints) {
+        if (browserDetails.version < 38) {
+          // .urls is not supported in FF < 38.
+          // create RTCIceServers with a single url.
+          if (pcConfig && pcConfig.iceServers) {
+            var newIceServers = [];
+            for (var i = 0; i < pcConfig.iceServers.length; i++) {
+              var server = pcConfig.iceServers[i];
+              if (server.hasOwnProperty('urls')) {
+                for (var j = 0; j < server.urls.length; j++) {
+                  var newServer = {
+                    url: server.urls[j]
+                  };
+                  if (server.urls[j].indexOf('turn') === 0) {
+                    newServer.username = server.username;
+                    newServer.credential = server.credential;
+                  }
+                  newIceServers.push(newServer);
+                }
+              } else {
+                newIceServers.push(pcConfig.iceServers[i]);
+              }
+            }
+            pcConfig.iceServers = newIceServers;
+          }
+        }
+        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);
+      };
+      window.RTCPeerConnection.prototype =
+          window.mozRTCPeerConnection.prototype;
+
+      // wrap static methods. Currently just generateCertificate.
+      if (window.mozRTCPeerConnection.generateCertificate) {
+        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
+          get: function() {
+            return window.mozRTCPeerConnection.generateCertificate;
+          }
+        });
+      }
+
+      window.RTCSessionDescription = window.mozRTCSessionDescription;
+      window.RTCIceCandidate = window.mozRTCIceCandidate;
+    }
+
+    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
+    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']
+        .forEach(function(method) {
+          var nativeMethod = window.RTCPeerConnection.prototype[method];
+          window.RTCPeerConnection.prototype[method] = function() {
+            arguments[0] = new ((method === 'addIceCandidate') ?
+                window.RTCIceCandidate :
+                window.RTCSessionDescription)(arguments[0]);
+            return nativeMethod.apply(this, arguments);
+          };
+        });
+
+    // support for addIceCandidate(null or undefined)
+    var nativeAddIceCandidate =
+        window.RTCPeerConnection.prototype.addIceCandidate;
+    window.RTCPeerConnection.prototype.addIceCandidate = function() {
+      if (!arguments[0]) {
+        if (arguments[1]) {
+          arguments[1].apply(null);
+        }
+        return Promise.resolve();
+      }
+      return nativeAddIceCandidate.apply(this, arguments);
+    };
+
+    // shim getStats with maplike support
+    var makeMapStats = function(stats) {
+      var map = new Map();
+      Object.keys(stats).forEach(function(key) {
+        map.set(key, stats[key]);
+        map[key] = stats[key];
+      });
+      return map;
+    };
+
+    var modernStatsTypes = {
+      inboundrtp: 'inbound-rtp',
+      outboundrtp: 'outbound-rtp',
+      candidatepair: 'candidate-pair',
+      localcandidate: 'local-candidate',
+      remotecandidate: 'remote-candidate'
+    };
+
+    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
+    window.RTCPeerConnection.prototype.getStats = function(
+      selector,
+      onSucc,
+      onErr
+    ) {
+      return nativeGetStats.apply(this, [selector || null])
+        .then(function(stats) {
+          if (browserDetails.version < 48) {
+            stats = makeMapStats(stats);
+          }
+          if (browserDetails.version < 53 && !onSucc) {
+            // Shim only promise getStats with spec-hyphens in type names
+            // Leave callback version alone; misc old uses of forEach before Map
+            try {
+              stats.forEach(function(stat) {
+                stat.type = modernStatsTypes[stat.type] || stat.type;
+              });
+            } catch (e) {
+              if (e.name !== 'TypeError') {
+                throw e;
+              }
+              // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
+              stats.forEach(function(stat, i) {
+                stats.set(i, Object.assign({}, stat, {
+                  type: modernStatsTypes[stat.type] || stat.type
+                }));
+              });
+            }
+          }
+          return stats;
+        })
+        .then(onSucc, onErr);
+    };
+  }
+};
+
+// Expose public methods.
+module.exports = {
+  shimOnTrack: firefoxShim.shimOnTrack,
+  shimSourceObject: firefoxShim.shimSourceObject,
+  shimPeerConnection: firefoxShim.shimPeerConnection,
+  shimGetUserMedia: require('./getusermedia')
+};
+
+},{"../utils":12,"./getusermedia":10}],10:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+
+var utils = require('../utils');
+var logging = utils.log;
+
+// Expose public methods.
+module.exports = function(window) {
+  var browserDetails = utils.detectBrowser(window);
+  var navigator = window && window.navigator;
+  var MediaStreamTrack = window && window.MediaStreamTrack;
+
+  var shimError_ = function(e) {
+    return {
+      name: {
+        InternalError: 'NotReadableError',
+        NotSupportedError: 'TypeError',
+        PermissionDeniedError: 'NotAllowedError',
+        SecurityError: 'NotAllowedError'
+      }[e.name] || e.name,
+      message: {
+        'The operation is insecure.': 'The request is not allowed by the ' +
+        'user agent or the platform in the current context.'
+      }[e.message] || e.message,
+      constraint: e.constraint,
+      toString: function() {
+        return this.name + (this.message && ': ') + this.message;
+      }
+    };
+  };
+
+  // getUserMedia constraints shim.
+  var getUserMedia_ = function(constraints, onSuccess, onError) {
+    var constraintsToFF37_ = function(c) {
+      if (typeof c !== 'object' || c.require) {
+        return c;
+      }
+      var require = [];
+      Object.keys(c).forEach(function(key) {
+        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
+          return;
+        }
+        var r = c[key] = (typeof c[key] === 'object') ?
+            c[key] : {ideal: c[key]};
+        if (r.min !== undefined ||
+            r.max !== undefined || r.exact !== undefined) {
+          require.push(key);
+        }
+        if (r.exact !== undefined) {
+          if (typeof r.exact === 'number') {
+            r. min = r.max = r.exact;
+          } else {
+            c[key] = r.exact;
+          }
+          delete r.exact;
+        }
+        if (r.ideal !== undefined) {
+          c.advanced = c.advanced || [];
+          var oc = {};
+          if (typeof r.ideal === 'number') {
+            oc[key] = {min: r.ideal, max: r.ideal};
+          } else {
+            oc[key] = r.ideal;
+          }
+          c.advanced.push(oc);
+          delete r.ideal;
+          if (!Object.keys(r).length) {
+            delete c[key];
+          }
+        }
+      });
+      if (require.length) {
+        c.require = require;
+      }
+      return c;
+    };
+    constraints = JSON.parse(JSON.stringify(constraints));
+    if (browserDetails.version < 38) {
+      logging('spec: ' + JSON.stringify(constraints));
+      if (constraints.audio) {
+        constraints.audio = constraintsToFF37_(constraints.audio);
+      }
+      if (constraints.video) {
+        constraints.video = constraintsToFF37_(constraints.video);
+      }
+      logging('ff37: ' + JSON.stringify(constraints));
+    }
+    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {
+      onError(shimError_(e));
+    });
+  };
+
+  // Returns the result of getUserMedia as a Promise.
+  var getUserMediaPromise_ = function(constraints) {
+    return new Promise(function(resolve, reject) {
+      getUserMedia_(constraints, resolve, reject);
+    });
+  };
+
+  // Shim for mediaDevices on older versions.
+  if (!navigator.mediaDevices) {
+    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,
+      addEventListener: function() { },
+      removeEventListener: function() { }
+    };
+  }
+  navigator.mediaDevices.enumerateDevices =
+      navigator.mediaDevices.enumerateDevices || function() {
+        return new Promise(function(resolve) {
+          var infos = [
+            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
+            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
+          ];
+          resolve(infos);
+        });
+      };
+
+  if (browserDetails.version < 41) {
+    // Work around http://bugzil.la/1169665
+    var orgEnumerateDevices =
+        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
+    navigator.mediaDevices.enumerateDevices = function() {
+      return orgEnumerateDevices().then(undefined, function(e) {
+        if (e.name === 'NotFoundError') {
+          return [];
+        }
+        throw e;
+      });
+    };
+  }
+  if (browserDetails.version < 49) {
+    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
+        bind(navigator.mediaDevices);
+    navigator.mediaDevices.getUserMedia = function(c) {
+      return origGetUserMedia(c).then(function(stream) {
+        // Work around https://bugzil.la/802326
+        if (c.audio && !stream.getAudioTracks().length ||
+            c.video && !stream.getVideoTracks().length) {
+          stream.getTracks().forEach(function(track) {
+            track.stop();
+          });
+          throw new DOMException('The object can not be found here.',
+                                 'NotFoundError');
+        }
+        return stream;
+      }, function(e) {
+        return Promise.reject(shimError_(e));
+      });
+    };
+  }
+  if (!(browserDetails.version > 55 &&
+      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {
+    var remap = function(obj, a, b) {
+      if (a in obj && !(b in obj)) {
+        obj[b] = obj[a];
+        delete obj[a];
+      }
+    };
+
+    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.
+        bind(navigator.mediaDevices);
+    navigator.mediaDevices.getUserMedia = function(c) {
+      if (typeof c === 'object' && typeof c.audio === 'object') {
+        c = JSON.parse(JSON.stringify(c));
+        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');
+        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');
+      }
+      return nativeGetUserMedia(c);
+    };
+
+    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
+      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
+      MediaStreamTrack.prototype.getSettings = function() {
+        var obj = nativeGetSettings.apply(this, arguments);
+        remap(obj, 'mozAutoGainControl', 'autoGainControl');
+        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');
+        return obj;
+      };
+    }
+
+    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
+      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
+      MediaStreamTrack.prototype.applyConstraints = function(c) {
+        if (this.kind === 'audio' && typeof c === 'object') {
+          c = JSON.parse(JSON.stringify(c));
+          remap(c, 'autoGainControl', 'mozAutoGainControl');
+          remap(c, 'noiseSuppression', 'mozNoiseSuppression');
+        }
+        return nativeApplyConstraints.apply(this, [c]);
+      };
+    }
+  }
+  navigator.getUserMedia = function(constraints, onSuccess, onError) {
+    if (browserDetails.version < 44) {
+      return getUserMedia_(constraints, onSuccess, onError);
+    }
+    // Replace Firefox 44+'s deprecation warning with unprefixed version.
+    console.warn('navigator.getUserMedia has been replaced by ' +
+                 'navigator.mediaDevices.getUserMedia');
+    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
+  };
+};
+
+},{"../utils":12}],11:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+'use strict';
+var utils = require('../utils');
+
+var safariShim = {
+  // TODO: DrAlex, should be here, double check against LayoutTests
+
+  // TODO: once the back-end for the mac port is done, add.
+  // TODO: check for webkitGTK+
+  // shimPeerConnection: function() { },
+
+  shimLocalStreamsAPI: function(window) {
+    if (typeof window !== 'object' || !window.RTCPeerConnection) {
+      return;
+    }
+    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {
+      window.RTCPeerConnection.prototype.getLocalStreams = function() {
+        if (!this._localStreams) {
+          this._localStreams = [];
+        }
+        return this._localStreams;
+      };
+    }
+    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {
+      window.RTCPeerConnection.prototype.getStreamById = function(id) {
+        var result = null;
+        if (this._localStreams) {
+          this._localStreams.forEach(function(stream) {
+            if (stream.id === id) {
+              result = stream;
+            }
+          });
+        }
+        if (this._remoteStreams) {
+          this._remoteStreams.forEach(function(stream) {
+            if (stream.id === id) {
+              result = stream;
+            }
+          });
+        }
+        return result;
+      };
+    }
+    if (!('addStream' in window.RTCPeerConnection.prototype)) {
+      var _addTrack = window.RTCPeerConnection.prototype.addTrack;
+      window.RTCPeerConnection.prototype.addStream = function(stream) {
+        if (!this._localStreams) {
+          this._localStreams = [];
+        }
+        if (this._localStreams.indexOf(stream) === -1) {
+          this._localStreams.push(stream);
+        }
+        var self = this;
+        stream.getTracks().forEach(function(track) {
+          _addTrack.call(self, track, stream);
+        });
+      };
+
+      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {
+        if (stream) {
+          if (!this._localStreams) {
+            this._localStreams = [stream];
+          } else if (this._localStreams.indexOf(stream) === -1) {
+            this._localStreams.push(stream);
+          }
+        }
+        _addTrack.call(this, track, stream);
+      };
+    }
+    if (!('removeStream' in window.RTCPeerConnection.prototype)) {
+      window.RTCPeerConnection.prototype.removeStream = function(stream) {
+        if (!this._localStreams) {
+          this._localStreams = [];
+        }
+        var index = this._localStreams.indexOf(stream);
+        if (index === -1) {
+          return;
+        }
+        this._localStreams.splice(index, 1);
+        var self = this;
+        var tracks = stream.getTracks();
+        this.getSenders().forEach(function(sender) {
+          if (tracks.indexOf(sender.track) !== -1) {
+            self.removeTrack(sender);
+          }
+        });
+      };
+    }
+  },
+  shimRemoteStreamsAPI: function(window) {
+    if (typeof window !== 'object' || !window.RTCPeerConnection) {
+      return;
+    }
+    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {
+      window.RTCPeerConnection.prototype.getRemoteStreams = function() {
+        return this._remoteStreams ? this._remoteStreams : [];
+      };
+    }
+    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {
+      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {
+        get: function() {
+          return this._onaddstream;
+        },
+        set: function(f) {
+          if (this._onaddstream) {
+            this.removeEventListener('addstream', this._onaddstream);
+            this.removeEventListener('track', this._onaddstreampoly);
+          }
+          this.addEventListener('addstream', this._onaddstream = f);
+          this.addEventListener('track', this._onaddstreampoly = function(e) {
+            var stream = e.streams[0];
+            if (!this._remoteStreams) {
+              this._remoteStreams = [];
+            }
+            if (this._remoteStreams.indexOf(stream) >= 0) {
+              return;
+            }
+            this._remoteStreams.push(stream);
+            var event = new Event('addstream');
+            event.stream = e.streams[0];
+            this.dispatchEvent(event);
+          }.bind(this));
+        }
+      });
+    }
+  },
+  shimCallbacksAPI: function(window) {
+    if (typeof window !== 'object' || !window.RTCPeerConnection) {
+      return;
+    }
+    var prototype = window.RTCPeerConnection.prototype;
+    var createOffer = prototype.createOffer;
+    var createAnswer = prototype.createAnswer;
+    var setLocalDescription = prototype.setLocalDescription;
+    var setRemoteDescription = prototype.setRemoteDescription;
+    var addIceCandidate = prototype.addIceCandidate;
+
+    prototype.createOffer = function(successCallback, failureCallback) {
+      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
+      var promise = createOffer.apply(this, [options]);
+      if (!failureCallback) {
+        return promise;
+      }
+      promise.then(successCallback, failureCallback);
+      return Promise.resolve();
+    };
+
+    prototype.createAnswer = function(successCallback, failureCallback) {
+      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];
+      var promise = createAnswer.apply(this, [options]);
+      if (!failureCallback) {
+        return promise;
+      }
+      promise.then(successCallback, failureCallback);
+      return Promise.resolve();
+    };
+
+    var withCallback = function(description, successCallback, failureCallback) {
+      var promise = setLocalDescription.apply(this, [description]);
+      if (!failureCallback) {
+        return promise;
+      }
+      promise.then(successCallback, failureCallback);
+      return Promise.resolve();
+    };
+    prototype.setLocalDescription = withCallback;
+
+    withCallback = function(description, successCallback, failureCallback) {
+      var promise = setRemoteDescription.apply(this, [description]);
+      if (!failureCallback) {
+        return promise;
+      }
+      promise.then(successCallback, failureCallback);
+      return Promise.resolve();
+    };
+    prototype.setRemoteDescription = withCallback;
+
+    withCallback = function(candidate, successCallback, failureCallback) {
+      var promise = addIceCandidate.apply(this, [candidate]);
+      if (!failureCallback) {
+        return promise;
+      }
+      promise.then(successCallback, failureCallback);
+      return Promise.resolve();
+    };
+    prototype.addIceCandidate = withCallback;
+  },
+  shimGetUserMedia: function(window) {
+    var navigator = window && window.navigator;
+
+    if (!navigator.getUserMedia) {
+      if (navigator.webkitGetUserMedia) {
+        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);
+      } else if (navigator.mediaDevices &&
+          navigator.mediaDevices.getUserMedia) {
+        navigator.getUserMedia = function(constraints, cb, errcb) {
+          navigator.mediaDevices.getUserMedia(constraints)
+          .then(cb, errcb);
+        }.bind(navigator);
+      }
+    }
+  },
+  shimRTCIceServerUrls: function(window) {
+    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
+    var OrigPeerConnection = window.RTCPeerConnection;
+    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
+      if (pcConfig && pcConfig.iceServers) {
+        var newIceServers = [];
+        for (var i = 0; i < pcConfig.iceServers.length; i++) {
+          var server = pcConfig.iceServers[i];
+          if (!server.hasOwnProperty('urls') &&
+              server.hasOwnProperty('url')) {
+            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');
+            server = JSON.parse(JSON.stringify(server));
+            server.urls = server.url;
+            delete server.url;
+            newIceServers.push(server);
+          } else {
+            newIceServers.push(pcConfig.iceServers[i]);
+          }
+        }
+        pcConfig.iceServers = newIceServers;
+      }
+      return new OrigPeerConnection(pcConfig, pcConstraints);
+    };
+    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
+    // wrap static methods. Currently just generateCertificate.
+    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
+      get: function() {
+        return OrigPeerConnection.generateCertificate;
+      }
+    });
+  }
+};
+
+// Expose public methods.
+module.exports = {
+  shimCallbacksAPI: safariShim.shimCallbacksAPI,
+  shimLocalStreamsAPI: safariShim.shimLocalStreamsAPI,
+  shimRemoteStreamsAPI: safariShim.shimRemoteStreamsAPI,
+  shimGetUserMedia: safariShim.shimGetUserMedia,
+  shimRTCIceServerUrls: safariShim.shimRTCIceServerUrls
+  // TODO
+  // shimPeerConnection: safariShim.shimPeerConnection
+};
+
+},{"../utils":12}],12:[function(require,module,exports){
+/*
+ *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
+ *
+ *  Use of this source code is governed by a BSD-style license
+ *  that can be found in the LICENSE file in the root of the source
+ *  tree.
+ */
+ /* eslint-env node */
+'use strict';
+
+var logDisabled_ = true;
+var deprecationWarnings_ = true;
+
+// Utility methods.
+var utils = {
+  disableLog: function(bool) {
+    if (typeof bool !== 'boolean') {
+      return new Error('Argument type: ' + typeof bool +
+          '. Please use a boolean.');
+    }
+    logDisabled_ = bool;
+    return (bool) ? 'adapter.js logging disabled' :
+        'adapter.js logging enabled';
+  },
+
+  /**
+   * Disable or enable deprecation warnings
+   * @param {!boolean} bool set to true to disable warnings.
+   */
+  disableWarnings: function(bool) {
+    if (typeof bool !== 'boolean') {
+      return new Error('Argument type: ' + typeof bool +
+          '. Please use a boolean.');
+    }
+    deprecationWarnings_ = !bool;
+    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');
+  },
+
+  log: function() {
+    if (typeof window === 'object') {
+      if (logDisabled_) {
+        return;
+      }
+      if (typeof console !== 'undefined' && typeof console.log === 'function') {
+        console.log.apply(console, arguments);
+      }
+    }
+  },
+
+  /**
+   * Shows a deprecation warning suggesting the modern and spec-compatible API.
+   */
+  deprecated: function(oldMethod, newMethod) {
+    if (!deprecationWarnings_) {
+      return;
+    }
+    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +
+        ' instead.');
+  },
+
+  /**
+   * Extract browser version out of the provided user agent string.
+   *
+   * @param {!string} uastring userAgent string.
+   * @param {!string} expr Regular expression used as match criteria.
+   * @param {!number} pos position in the version string to be returned.
+   * @return {!number} browser version.
+   */
+  extractVersion: function(uastring, expr, pos) {
+    var match = uastring.match(expr);
+    return match && match.length >= pos && parseInt(match[pos], 10);
+  },
+
+  /**
+   * Browser detector.
+   *
+   * @return {object} result containing browser and version
+   *     properties.
+   */
+  detectBrowser: function(window) {
+    var navigator = window && window.navigator;
+
+    // Returned result object.
+    var result = {};
+    result.browser = null;
+    result.version = null;
+
+    // Fail early if it's not a browser
+    if (typeof window === 'undefined' || !window.navigator) {
+      result.browser = 'Not a browser.';
+      return result;
+    }
+
+    // Firefox.
+    if (navigator.mozGetUserMedia) {
+      result.browser = 'firefox';
+      result.version = this.extractVersion(navigator.userAgent,
+          /Firefox\/(\d+)\./, 1);
+    } else if (navigator.webkitGetUserMedia) {
+      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now
+      if (window.webkitRTCPeerConnection) {
+        result.browser = 'chrome';
+        result.version = this.extractVersion(navigator.userAgent,
+          /Chrom(e|ium)\/(\d+)\./, 2);
+      } else { // Safari (in an unpublished version) or unknown webkit-based.
+        if (navigator.userAgent.match(/Version\/(\d+).(\d+)/)) {
+          result.browser = 'safari';
+          result.version = this.extractVersion(navigator.userAgent,
+            /AppleWebKit\/(\d+)\./, 1);
+        } else { // unknown webkit-based browser.
+          result.browser = 'Unsupported webkit-based browser ' +
+              'with GUM support but no WebRTC support.';
+          return result;
+        }
+      }
+    } else if (navigator.mediaDevices &&
+        navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) { // Edge.
+      result.browser = 'edge';
+      result.version = this.extractVersion(navigator.userAgent,
+          /Edge\/(\d+).(\d+)$/, 2);
+    } else if (navigator.mediaDevices &&
+        navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
+        // Safari, with webkitGetUserMedia removed.
+      result.browser = 'safari';
+      result.version = this.extractVersion(navigator.userAgent,
+          /AppleWebKit\/(\d+)\./, 1);
+    } else { // Default fallthrough: not supported.
+      result.browser = 'Not a supported browser.';
+      return result;
+    }
+
+    return result;
+  },
+
+  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.
+
+  shimCreateObjectURL: function(window) {
+    var URL = window && window.URL;
+
+    if (!(typeof window === 'object' && window.HTMLMediaElement &&
+          'srcObject' in window.HTMLMediaElement.prototype)) {
+      // Only shim CreateObjectURL using srcObject if srcObject exists.
+      return undefined;
+    }
+
+    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);
+    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);
+    var streams = new Map(), newId = 0;
+
+    URL.createObjectURL = function(stream) {
+      if ('getTracks' in stream) {
+        var url = 'polyblob:' + (++newId);
+        streams.set(url, stream);
+        utils.deprecated('URL.createObjectURL(stream)',
+            'elem.srcObject = stream');
+        return url;
+      }
+      return nativeCreateObjectURL(stream);
+    };
+    URL.revokeObjectURL = function(url) {
+      nativeRevokeObjectURL(url);
+      streams.delete(url);
+    };
+
+    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,
+                                              'src');
+    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {
+      get: function() {
+        return dsc.get.apply(this);
+      },
+      set: function(url) {
+        this.srcObject = streams.get(url) || null;
+        return dsc.set.apply(this, [url]);
+      }
+    });
+
+    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;
+    window.HTMLMediaElement.prototype.setAttribute = function() {
+      if (arguments.length === 2 &&
+          ('' + arguments[0]).toLowerCase() === 'src') {
+        this.srcObject = streams.get(arguments[1]) || null;
+      }
+      return nativeSetAttribute.apply(this, arguments);
+    };
+  }
+};
+
+// Export.
+module.exports = {
+  log: utils.log,
+  deprecated: utils.deprecated,
+  disableLog: utils.disableLog,
+  disableWarnings: utils.disableWarnings,
+  extractVersion: utils.extractVersion,
+  shimCreateObjectURL: utils.shimCreateObjectURL,
+  detectBrowser: utils.detectBrowser.bind(utils)
+};
+
+},{}]},{},[2])(2)
+});
diff --git a/lib/editor/atto/plugins/recordrtc/amd/src/bowser.js b/lib/editor/atto/plugins/recordrtc/amd/src/bowser.js
new file mode 100644
index 0000000..ca8d885
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/amd/src/bowser.js
@@ -0,0 +1,587 @@
+// ESLint directives.
+/* eslint-disable */
+
+// JSHint directives.
+/* jshint ignore:start */
+
+/*!
+ * Bowser - a browser detector
+ * https://github.com/ded/bowser
+ * MIT License | (c) Dustin Diaz 2015
+ */
+
+define([], function() {
+//!function (root, name, definition) {
+//  if (typeof module != 'undefined' && module.exports) module.exports = definition()
+//  else if (typeof define == 'function' && define.amd) define(name, definition)
+//  else root[name] = definition()
+//}(this, 'bowser', function () {
+  /**
+    * See useragents.js for examples of navigator.userAgent
+    */
+
+  var t = true;
+
+  function detect(ua) {
+
+    function getFirstMatch(regex) {
+      var match = ua.match(regex);
+      return (match && match.length > 1 && match[1]) || '';
+    }
+
+    function getSecondMatch(regex) {
+      var match = ua.match(regex);
+      return (match && match.length > 1 && match[2]) || '';
+    }
+
+    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
+      , likeAndroid = /like android/i.test(ua)
+      , android = !likeAndroid && /android/i.test(ua)
+      , nexusMobile = /nexus\s*[0-6]\s*/i.test(ua)
+      , nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua)
+      , chromeos = /CrOS/.test(ua)
+      , silk = /silk/i.test(ua)
+      , sailfish = /sailfish/i.test(ua)
+      , tizen = /tizen/i.test(ua)
+      , webos = /(web|hpw)os/i.test(ua)
+      , windowsphone = /windows phone/i.test(ua)
+      , samsungBrowser = /SamsungBrowser/i.test(ua)
+      , windows = !windowsphone && /windows/i.test(ua)
+      , mac = !iosdevice && !silk && /macintosh/i.test(ua)
+      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
+      , edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i)
+      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
+      , tablet = /tablet/i.test(ua)
+      , mobile = !tablet && /[^-]mobi/i.test(ua)
+      , xbox = /xbox/i.test(ua)
+      , result
+
+    if (/opera/i.test(ua)) {
+      //  an old Opera
+      result = {
+        name: 'Opera'
+      , opera: t
+      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
+      }
+    } else if (/opr|opios/i.test(ua)) {
+      // a new Opera
+      result = {
+        name: 'Opera'
+        , opera: t
+        , version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
+      }
+    }
+    else if (/SamsungBrowser/i.test(ua)) {
+      result = {
+        name: 'Samsung Internet for Android'
+        , samsungBrowser: t
+        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/coast/i.test(ua)) {
+      result = {
+        name: 'Opera Coast'
+        , coast: t
+        , version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/yabrowser/i.test(ua)) {
+      result = {
+        name: 'Yandex Browser'
+      , yandexbrowser: t
+      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/ucbrowser/i.test(ua)) {
+      result = {
+          name: 'UC Browser'
+        , ucbrowser: t
+        , version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
+      }
+    }
+    else if (/mxios/i.test(ua)) {
+      result = {
+        name: 'Maxthon'
+        , maxthon: t
+        , version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
+      }
+    }
+    else if (/epiphany/i.test(ua)) {
+      result = {
+        name: 'Epiphany'
+        , epiphany: t
+        , version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
+      }
+    }
+    else if (/puffin/i.test(ua)) {
+      result = {
+        name: 'Puffin'
+        , puffin: t
+        , version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
+      }
+    }
+    else if (/sleipnir/i.test(ua)) {
+      result = {
+        name: 'Sleipnir'
+        , sleipnir: t
+        , version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
+      }
+    }
+    else if (/k-meleon/i.test(ua)) {
+      result = {
+        name: 'K-Meleon'
+        , kMeleon: t
+        , version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
+      }
+    }
+    else if (windowsphone) {
+      result = {
+        name: 'Windows Phone'
+      , windowsphone: t
+      }
+      if (edgeVersion) {
+        result.msedge = t
+        result.version = edgeVersion
+      }
+      else {
+        result.msie = t
+        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/msie|trident/i.test(ua)) {
+      result = {
+        name: 'Internet Explorer'
+      , msie: t
+      , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
+      }
+    } else if (chromeos) {
+      result = {
+        name: 'Chrome'
+      , chromeos: t
+      , chromeBook: t
+      , chrome: t
+      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
+      }
+    } else if (/chrome.+? edge/i.test(ua)) {
+      result = {
+        name: 'Microsoft Edge'
+      , msedge: t
+      , version: edgeVersion
+      }
+    }
+    else if (/vivaldi/i.test(ua)) {
+      result = {
+        name: 'Vivaldi'
+        , vivaldi: t
+        , version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
+      }
+    }
+    else if (sailfish) {
+      result = {
+        name: 'Sailfish'
+      , sailfish: t
+      , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/seamonkey\//i.test(ua)) {
+      result = {
+        name: 'SeaMonkey'
+      , seamonkey: t
+      , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/firefox|iceweasel|fxios/i.test(ua)) {
+      result = {
+        name: 'Firefox'
+      , firefox: t
+      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
+      }
+      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
+        result.firefoxos = t
+      }
+    }
+    else if (silk) {
+      result =  {
+        name: 'Amazon Silk'
+      , silk: t
+      , version : getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/phantom/i.test(ua)) {
+      result = {
+        name: 'PhantomJS'
+      , phantom: t
+      , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/slimerjs/i.test(ua)) {
+      result = {
+        name: 'SlimerJS'
+        , slimer: t
+        , version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
+      result = {
+        name: 'BlackBerry'
+      , blackberry: t
+      , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (webos) {
+      result = {
+        name: 'WebOS'
+      , webos: t
+      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
+      };
+      /touchpad\//i.test(ua) && (result.touchpad = t)
+    }
+    else if (/bada/i.test(ua)) {
+      result = {
+        name: 'Bada'
+      , bada: t
+      , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
+      };
+    }
+    else if (tizen) {
+      result = {
+        name: 'Tizen'
+      , tizen: t
+      , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
+      };
+    }
+    else if (/qupzilla/i.test(ua)) {
+      result = {
+        name: 'QupZilla'
+        , qupzilla: t
+        , version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
+      }
+    }
+    else if (/chromium/i.test(ua)) {
+      result = {
+        name: 'Chromium'
+        , chromium: t
+        , version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
+      }
+    }
+    else if (/chrome|crios|crmo/i.test(ua)) {
+      result = {
+        name: 'Chrome'
+        , chrome: t
+        , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
+      }
+    }
+    else if (android) {
+      result = {
+        name: 'Android'
+        , version: versionIdentifier
+      }
+    }
+    else if (/safari|applewebkit/i.test(ua)) {
+      result = {
+        name: 'Safari'
+      , safari: t
+      }
+      if (versionIdentifier) {
+        result.version = versionIdentifier
+      }
+    }
+    else if (iosdevice) {
+      result = {
+        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
+      }
+      // WTF: version is not part of user agent in web apps
+      if (versionIdentifier) {
+        result.version = versionIdentifier
+      }
+    }
+    else if(/googlebot/i.test(ua)) {
+      result = {
+        name: 'Googlebot'
+      , googlebot: t
+      , version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
+      }
+    }
+    else {
+      result = {
+        name: getFirstMatch(/^(.*)\/(.*) /),
+        version: getSecondMatch(/^(.*)\/(.*) /)
+     };
+   }
+
+    // set webkit or gecko flag for browsers based on these engines
+    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
+      if (/(apple)?webkit\/537\.36/i.test(ua)) {
+        result.name = result.name || "Blink"
+        result.blink = t
+      } else {
+        result.name = result.name || "Webkit"
+        result.webkit = t
+      }
+      if (!result.version && versionIdentifier) {
+        result.version = versionIdentifier
+      }
+    } else if (!result.opera && /gecko\//i.test(ua)) {
+      result.name = result.name || "Gecko"
+      result.gecko = t
+      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
+    }
+
+    // set OS flags for platforms that have multiple browsers
+    if (!result.windowsphone && !result.msedge && (android || result.silk)) {
+      result.android = t
+    } else if (!result.windowsphone && !result.msedge && iosdevice) {
+      result[iosdevice] = t
+      result.ios = t
+    } else if (mac) {
+      result.mac = t
+    } else if (xbox) {
+      result.xbox = t
+    } else if (windows) {
+      result.windows = t
+    } else if (linux) {
+      result.linux = t
+    }
+
+    // OS version extraction
+    var osVersion = '';
+    if (result.windowsphone) {
+      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
+    } else if (iosdevice) {
+      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
+      osVersion = osVersion.replace(/[_\s]/g, '.');
+    } else if (android) {
+      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
+    } else if (result.webos) {
+      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
+    } else if (result.blackberry) {
+      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
+    } else if (result.bada) {
+      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
+    } else if (result.tizen) {
+      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
+    }
+    if (osVersion) {
+      result.osversion = osVersion;
+    }
+
+    // device type extraction
+    var osMajorVersion = osVersion.split('.')[0];
+    if (
+         tablet
+      || nexusTablet
+      || iosdevice == 'ipad'
+      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))
+      || result.silk
+    ) {
+      result.tablet = t
+    } else if (
+         mobile
+      || iosdevice == 'iphone'
+      || iosdevice == 'ipod'
+      || android
+      || nexusMobile
+      || result.blackberry
+      || result.webos
+      || result.bada
+    ) {
+      result.mobile = t
+    }
+
+    // Graded Browser Support
+    // http://developer.yahoo.com/yui/articles/gbs
+    if (result.msedge ||
+        (result.msie && result.version >= 10) ||
+        (result.yandexbrowser && result.version >= 15) ||
+		    (result.vivaldi && result.version >= 1.0) ||
+        (result.chrome && result.version >= 20) ||
+        (result.samsungBrowser && result.version >= 4) ||
+        (result.firefox && result.version >= 20.0) ||
+        (result.safari && result.version >= 6) ||
+        (result.opera && result.version >= 10.0) ||
+        (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
+        (result.blackberry && result.version >= 10.1)
+        || (result.chromium && result.version >= 20)
+        ) {
+      result.a = t;
+    }
+    else if ((result.msie && result.version < 10) ||
+        (result.chrome && result.version < 20) ||
+        (result.firefox && result.version < 20.0) ||
+        (result.safari && result.version < 6) ||
+        (result.opera && result.version < 10.0) ||
+        (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
+        || (result.chromium && result.version < 20)
+        ) {
+      result.c = t
+    } else result.x = t
+
+    return result
+  }
+
+  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')
+
+  bowser.test = function (browserList) {
+    for (var i = 0; i < browserList.length; ++i) {
+      var browserItem = browserList[i];
+      if (typeof browserItem=== 'string') {
+        if (browserItem in bowser) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Get version precisions count
+   *
+   * @example
+   *   getVersionPrecision("1.10.3") // 3
+   *
+   * @param  {string} version
+   * @return {number}
+   */
+  function getVersionPrecision(version) {
+    return version.split(".").length;
+  }
+
+  /**
+   * Array::map polyfill
+   *
+   * @param  {Array} arr
+   * @param  {Function} iterator
+   * @return {Array}
+   */
+  function map(arr, iterator) {
+    var result = [], i;
+    if (Array.prototype.map) {
+      return Array.prototype.map.call(arr, iterator);
+    }
+    for (i = 0; i < arr.length; i++) {
+      result.push(iterator(arr[i]));
+    }
+    return result;
+  }
+
+  /**
+   * Calculate browser version weight
+   *
+   * @example
+   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
+   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
+   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
+   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
+   *
+   * @param  {Array<String>} versions versions to compare
+   * @return {Number} comparison result
+   */
+  function compareVersions(versions) {
+    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
+    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
+    var chunks = map(versions, function (version) {
+      var delta = precision - getVersionPrecision(version);
+
+      // 2) "9" -> "9.0" (for precision = 2)
+      version = version + new Array(delta + 1).join(".0");
+
+      // 3) "9.0" -> ["000000000"", "000000009"]
+      return map(version.split("."), function (chunk) {
+        return new Array(20 - chunk.length).join("0") + chunk;
+      }).reverse();
+    });
+
+    // iterate in reverse order by reversed chunks array
+    while (--precision >= 0) {
+      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
+      if (chunks[0][precision] > chunks[1][precision]) {
+        return 1;
+      }
+      else if (chunks[0][precision] === chunks[1][precision]) {
+        if (precision === 0) {
+          // all version chunks are same
+          return 0;
+        }
+      }
+      else {
+        return -1;
+      }
+    }
+  }
+
+  /**
+   * Check if browser is unsupported
+   *
+   * @example
+   *   bowser.isUnsupportedBrowser({
+   *     msie: "10",
+   *     firefox: "23",
+   *     chrome: "29",
+   *     safari: "5.1",
+   *     opera: "16",
+   *     phantom: "534"
+   *   });
+   *
+   * @param  {Object}  minVersions map of minimal version to browser
+   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
+   * @param  {String}  [ua] user agent string
+   * @return {Boolean}
+   */
+  function isUnsupportedBrowser(minVersions, strictMode, ua) {
+    var _bowser = bowser;
+
+    // make strictMode param optional with ua param usage
+    if (typeof strictMode === 'string') {
+      ua = strictMode;
+      strictMode = void(0);
+    }
+
+    if (strictMode === void(0)) {
+      strictMode = false;
+    }
+    if (ua) {
+      _bowser = detect(ua);
+    }
+
+    var version = "" + _bowser.version;
+    for (var browser in minVersions) {
+      if (minVersions.hasOwnProperty(browser)) {
+        if (_bowser[browser]) {
+          if (typeof minVersions[browser] !== 'string') {
+            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
+          }
+
+          // browser version and min supported version.
+          return compareVersions([version, minVersions[browser]]) < 0;
+        }
+      }
+    }
+
+    return strictMode; // not found
+  }
+
+  /**
+   * Check if browser is supported
+   *
+   * @param  {Object} minVersions map of minimal version to browser
+   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
+   * @param  {String}  [ua] user agent string
+   * @return {Boolean}
+   */
+  function check(minVersions, strictMode, ua) {
+    return !isUnsupportedBrowser(minVersions, strictMode, ua);
+  }
+
+  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
+  bowser.compareVersions = compareVersions;
+  bowser.check = check;
+
+  /*
+   * Set our detect method to the main bowser object so we can
+   * reuse it to test other user agents.
+   * This is needed to implement future tests.
+   */
+  bowser._detect = detect;
+
+  return bowser;
+});
diff --git a/lib/editor/atto/plugins/recordrtc/db/install.php b/lib/editor/atto/plugins/recordrtc/db/install.php
new file mode 100644
index 0000000..d386814
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/db/install.php
@@ -0,0 +1,53 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Atto install script. Adds recordrtc to the toolbar.
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Enable RecordRTC plugin buttons on installation.
+ */
+function xmldb_atto_recordrtc_install() {
+    $toolbar = get_config('editor_atto', 'toolbar');
+    if (strpos($toolbar, 'recordrtc') === false) {
+        // Newline string changed in one of the latest versions from /n to /r/n.
+        $glue = "\r\n";
+        if (strpos($toolbar, $glue) === false) {
+            $glue = "\n";
+        }
+        $groups = explode($glue, $toolbar);
+        // Try to put recordrtc in files group.
+        foreach ($groups as $i => $group) {
+            $parts = explode('=', $group);
+            if (trim($parts[0]) == 'files') {
+                $groups[$i] = 'files = ' . trim($parts[1]) . ', recordrtc';
+                // Update config variable.
+                $toolbar = implode($glue, $groups);
+                set_config('toolbar', $toolbar, 'editor_atto');
+                return;
+            }
+        }
+    }
+}
diff --git a/lib/editor/atto/plugins/recordrtc/lang/en/atto_recordrtc.php b/lib/editor/atto/plugins/recordrtc/lang/en/atto_recordrtc.php
new file mode 100644
index 0000000..e002581
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/lang/en/atto_recordrtc.php
@@ -0,0 +1,79 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'atto_recordrtc', language 'en'.
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['pluginname'] = 'RecordRTC';
+$string['settings'] = 'RecordRTC settings';
+$string['audiortc'] = 'Insert audio recording';
+$string['videortc'] = 'Insert video recording';
+
+$string['onlyaudio'] = 'Audio only';
+$string['onlyvideo'] = 'Video only';
+$string['both'] = 'Audio and Video';
+$string['allowedtypes'] = 'Allowed types';
+$string['allowedtypes_desc'] = 'Which recording buttons should appear in Atto';
+$string['audiobitrate'] = 'Audio bitrate';
+$string['audiobitrate_desc'] = 'Quality of audio recording (larger number means higher quality)';
+$string['videobitrate'] = 'Video bitrate';
+$string['videobitrate_desc'] = 'Quality of video recording (larger number means higher quality)';
+$string['timelimit'] = 'Time limit in seconds';
+$string['timelimit_desc'] = 'Maximum recording length allowed for the audio/video clips';
+
+$string['nowebrtc_title'] = 'WebRTC not supported';
+$string['nowebrtc'] = 'Your browser offers limited or no support for WebRTC technologies yet, and cannot be used with this plugin. Please switch or upgrade your browser';
+$string['gumabort_title'] = 'Something happened';
+$string['gumabort'] = 'Something strange happened which prevented the webcam/microphone from being used';
+$string['gumnotallowed_title'] = 'Wrong permissions';
+$string['gumnotallowed'] = 'The user must allow the browser access to the webcam/microphone';
+$string['gumnotfound_title'] = 'Device missing';
+$string['gumnotfound'] = 'There is no input device connected or enabled';
+$string['gumnotreadable_title'] = 'Hardware error';
+$string['gumnotreadable'] = 'Something is preventing the browser from accessing the webcam/microphone';
+$string['gumoverconstrained_title'] = 'Problem with constraints';
+$string['gumoverconstrained'] = 'The current webcam/microphone can not produce a stream with the required constraints';
+$string['gumsecurity_title'] = 'No support for insecure connection';
+$string['gumsecurity'] = 'Your browser does not support recording over an insecure connection and must close the plugin';
+$string['gumtype_title'] = 'No constraints specified';
+$string['gumtype'] = 'Tried to get stream from the webcam/microphone, but no constraints were specified';
+$string['insecurealert_title'] = 'Insecure connection!';
+$string['insecurealert'] = 'Your browser might not allow this plugin to work unless it is used either over HTTPS or from localhost';
+$string['browseralert_title'] = 'Warning!';
+$string['browseralert'] = 'Use Firefox >= 29, Chrome >= 49 or Opera >= 36 for best experience';
+$string['startrecording'] = 'Start Recording';
+$string['recordagain'] = 'Record Again';
+$string['stoprecording'] = 'Stop Recording';
+$string['recordingfailed'] = 'Recording failed, try again';
+$string['attachrecording'] = 'Attach Recording as Annotation';
+$string['norecordingfound_title'] = 'No recording found';
+$string['norecordingfound'] = 'Something appears to have gone wrong, it seems nothing has been recorded';
+$string['nearingmaxsize_title'] = 'Recording stopped';
+$string['nearingmaxsize'] = 'You have attained the maximum size limit for file uploads';
+$string['uploadprogress'] = 'completed';
+$string['uploadfailed'] = 'Upload failed:';
+$string['uploadfailed404'] = 'Upload failed: file too large';
+$string['uploadaborted'] = 'Upload aborted:';
+$string['annotationprompt'] = 'What should the annotation appear as?';
+$string['annotation:audio'] = 'Audio annotation';
+$string['annotation:video'] = 'Video annotation';
diff --git a/lib/editor/atto/plugins/recordrtc/lib.php b/lib/editor/atto/plugins/recordrtc/lib.php
new file mode 100644
index 0000000..69ef96d
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/lib.php
@@ -0,0 +1,128 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Atto recordrtc library functions
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Set params for this plugin.
+ *
+ * @param string $elementid
+ * @param stdClass $options - the options for the editor, including the context.
+ * @param stdClass $fpoptions - unused.
+ */
+function atto_recordrtc_params_for_js($elementid, $options, $fpoptions) {
+    global $CFG;
+
+    $moodleversion = $CFG->version;
+    $moodle32 = '2016120500';
+    $moodle33 = '2017051500';
+
+    $context = $options['context'];
+    if (!$context) {
+        $context = context_system::instance();
+    }
+    $sesskey = sesskey();
+    $allowedtypes = get_config('atto_recordrtc', 'allowedtypes');
+    $audiobitrate = get_config('atto_recordrtc', 'audiobitrate');
+    $videobitrate = get_config('atto_recordrtc', 'videobitrate');
+    $timelimit = get_config('atto_recordrtc', 'timelimit');
+    $maxrecsize = ini_get('upload_max_filesize');
+    $audiortcicon = 'i/audiortc';
+    $videortcicon = 'i/videortc';
+    $params = array('contextid' => $context->id,
+                    'sesskey' => $sesskey,
+                    'recordrtcroot' => $CFG->wwwroot.'/lib/editor/atto/plugins/recordrtc/',
+                    'allowedtypes' => $allowedtypes,
+                    'audiobitrate' => $audiobitrate,
+                    'videobitrate' => $videobitrate,
+                    'timelimit' => $timelimit,
+                    'audiortcicon' => $audiortcicon,
+                    'videortcicon' => $videortcicon,
+                    'oldermoodle' => $moodleversion < $moodle32,
+                    'maxrecsize' => $maxrecsize
+              );
+
+    return $params;
+}
+
+/**
+ * Initialise the js strings required for this module.
+ */
+function atto_recordrtc_strings_for_js() {
+    global $PAGE;
+
+    $strings = array('audiortc',
+                     'videortc',
+                     'nowebrtc_title',
+                     'nowebrtc',
+                     'gumabort_title',
+                     'gumabort',
+                     'gumnotallowed_title',
+                     'gumnotallowed',
+                     'gumnotfound_title',
+                     'gumnotfound',
+                     'gumnotreadable_title',
+                     'gumnotreadable',
+                     'gumoverconstrained_title',
+                     'gumoverconstrained',
+                     'gumsecurity_title',
+                     'gumsecurity',
+                     'gumtype_title',
+                     'gumtype',
+                     'insecurealert_title',
+                     'insecurealert',
+                     'browseralert_title',
+                     'browseralert',
+                     'startrecording',
+                     'recordagain',
+                     'stoprecording',
+                     'recordingfailed',
+                     'attachrecording',
+                     'norecordingfound_title',
+                     'norecordingfound',
+                     'nearingmaxsize_title',
+                     'nearingmaxsize',
+                     'uploadprogress',
+                     'uploadfailed',
+                     'uploadfailed404',
+                     'uploadaborted',
+                     'annotationprompt',
+                     'annotation:audio',
+                     'annotation:video'
+               );
+
+    $PAGE->requires->strings_for_js($strings, 'atto_recordrtc');
+}
+
+/**
+ * Map icons for font-awesome themes.
+ */
+function atto_recordrtc_get_fontawesome_icon_map() {
+    return [
+        'atto_recordrtc:i/audiortc' => 'fa-file-audio-o',
+        'atto_recordrtc:i/videortc' => 'fa-file-video-o'
+    ];
+}
diff --git a/lib/editor/atto/plugins/recordrtc/pix/i/audiortc.png b/lib/editor/atto/plugins/recordrtc/pix/i/audiortc.png
new file mode 100644
index 0000000000000000000000000000000000000000..974d7b9129918975d975f1c2a187afeb360a1be0
GIT binary patch
literal 348
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbK}et=JiE0CT*M_~A+$Qo#+N=cAk
zFaskKGYcylJ2#J@u&9KLyo$P(mA!*&M08?BW!;KB*Y7=h{gwZqm?Kbqg{O;Sh(vho
zxszf|1_CY@r<*Yq$_X52Y5ny-zogNjFTYa!DsQ0k-KmPAX=!0AD*qf{Fet42$9Ptk
z`QD^mG6vdHoJBWqnsLYHJ!Yx9-~Q|I<02MM#TO;<{TI9+F1WgSmf0zhvh@4ADz7je
mx7uw~r_``yCriU@=6wQtxidItzpMnhfx*+&&t;ucLK6U<jg4CX

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/pix/i/videortc.png b/lib/editor/atto/plugins/recordrtc/pix/i/videortc.png
new file mode 100644
index 0000000000000000000000000000000000000000..4829178cd3135b8ffc77984bc6e7f90c6fe1b9a9
GIT binary patch
literal 323
zcmeAS@N?(olHy`uVBq!ia0vp^0wB!63?wyl`GbK}T7XZ8E0CT*d!V{WUKnVTVo8u+
zFaskK8#@P|u!x+3l9q$JXIMmZdS-D&Wp#b`+!cH7y#6?O@~sCz#o3-Njv*4^r6)Ya
znhZo-56+esX}0AmbEx@!e@U|d<N1wktaB$-s7*9C-u&#+)?^8W>wBy3Ok*sy?Ov>M
zH1ffjJwZPNoH*Cy^f*p3lZmrb@w`2G+Q#btE}_TrZB%(#Usv;OvcH&piTQ!r0rr|y
W9$)JRPl|xnGI+ZBxvX<aXaWF*(1RKP

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/pix/icon.png b/lib/editor/atto/plugins/recordrtc/pix/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..8f36cef00e72600ad3d0b755519e79fd1dc79f6b
GIT binary patch
literal 644
zcmV-~0(<?5P)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm00023000230aQ-bFaQ7m8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10s%=xK~y-6osvsPlu;CbzjNnzd^8y|MGhJwi3N!gWsI{hap%rW
z2DQmm1htTg+_bPwi-98A6cN})CX|HSNJwTHMTWgl%E}PR9A-wQQRhAL-xgxp^oP<}
zoqO*2KF+-y!6LdrRn_jl2>Jw&M&w?{)XXibUa>0n)b6_`a6YfKt7Ce`x2d4FuFjb;
zQ$fJUyIL+e@X2|+pWMcx0npypXN!M!w`!zna(ZyN{@ufT7-0L}gNKj)>~icfwR~_L
z8Jz-<_Uq4!V~O05K(pOY9P{qc6_Hul8T#@E?W(bBS9ONuLa%^{hC9xNu`@<2k-H?&
z3{dTMaI&dVpb}`Yd~Q1O1T*;^fzy#!P2);I>pwrlGS<69RGTu<wk>g%D$}6^8Tns<
zi5gdCrr;{@cB{~Ez=mE;-zR0|h8pT_T#99~-j?J@e`D&!rh;cd1OJ@epOBchykRnK
z0E~9GB=2?}s+ZXk5??(Ome(NmBC?C~L=~jeD!jN7Cb$$}!BiDz+b83&VcRs6=~SHX
zfR9p78<EF7WTPPlcW+~2M{(X9;$F)X>xMS~>EIlp0Uz0D2!J1j7E3Am^<M(f=4BwQ
zGpTi_=D~bX!P7iErgB_aJN({(n=b?3Iz45N5amD<*23+1XX%9rBkmWQJtranV_=@T
ee{T5W8utr?Pq>M~p#~EG0000<MNUMnLSTX>z#?q`

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/settings.php b/lib/editor/atto/plugins/recordrtc/settings.php
new file mode 100644
index 0000000..bda27e9
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/settings.php
@@ -0,0 +1,64 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Settings that allow turning on and off recordrtc features
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$ADMIN->add('editoratto', new admin_category('atto_recordrtc', new lang_string('pluginname', 'atto_recordrtc')));
+
+if ($ADMIN->fulltree) {
+    // Types allowed.
+    $options = array(
+        'both' => new lang_string('both', 'atto_recordrtc'),
+        'audio' => new lang_string('onlyaudio', 'atto_recordrtc'),
+        'video' => new lang_string('onlyvideo', 'atto_recordrtc')
+    );
+    $name = get_string('allowedtypes', 'atto_recordrtc');
+    $desc = get_string('allowedtypes_desc', 'atto_recordrtc');
+    $default = '';
+    $setting = new admin_setting_configselect('atto_recordrtc/allowedtypes', $name, $desc, $default, $options);
+    $settings->add($setting);
+
+    // Audio bitrate.
+    $name = get_string('audiobitrate', 'atto_recordrtc');
+    $desc = get_string('audiobitrate_desc', 'atto_recordrtc');
+    $default = '128000';
+    $setting = new admin_setting_configtext('atto_recordrtc/audiobitrate', $name, $desc, $default, PARAM_INT, 8);
+    $settings->add($setting);
+
+    // Video bitrate.
+    $name = get_string('videobitrate', 'atto_recordrtc');
+    $desc = get_string('videobitrate_desc', 'atto_recordrtc');
+    $default = '2500000';
+    $setting = new admin_setting_configtext('atto_recordrtc/videobitrate', $name, $desc, $default, PARAM_INT, 8);
+    $settings->add($setting);
+
+    // Recording time limit.
+    $name = get_string('timelimit', 'atto_recordrtc');
+    $desc = get_string('timelimit_desc', 'atto_recordrtc');
+    $default = '120';
+    $setting = new admin_setting_configtext('atto_recordrtc/timelimit', $name, $desc, $default, PARAM_INT, 8);
+    $settings->add($setting);
+}
diff --git a/lib/editor/atto/plugins/recordrtc/styles.css b/lib/editor/atto/plugins/recordrtc/styles.css
new file mode 100644
index 0000000..db81701
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/styles.css
@@ -0,0 +1,39 @@
+.atto_recordrtc,
+.atto_recordrtc div {
+    font-weight: normal;
+    line-height: 40px;
+    padding: 3px 0 3px 0;
+}
+
+.atto_recordrtc .alert {
+    line-height: 40px;
+    text-align: center;
+}
+
+.atto_recordrtc audio {
+    display: block;
+    width: 100%;
+}
+
+@media screen and (max-width: 670px) {
+    .atto_recordrtc video {
+        display: block;
+        width: 100%;
+        height: auto;
+        margin: 0 auto;
+    }
+}
+
+@media screen and (min-width: 671px) {
+    .atto_recordrtc video {
+        display: block;
+        width: 640px;
+        height: 480px;
+        margin: 0 auto;
+    }
+}
+
+.atto_recordrtc #start-stop,
+.atto_recordrtc #upload {
+    white-space: normal;
+}
diff --git a/lib/editor/atto/plugins/recordrtc/thirdpartylibs.xml b/lib/editor/atto/plugins/recordrtc/thirdpartylibs.xml
new file mode 100644
index 0000000..ba59145
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/thirdpartylibs.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0"?>
+<libraries>
+    <library>
+        <location>amd/src</location>
+        <name>Bowser</name>
+        <version>1.6.0</version>
+        <license>MIT</license>
+        <licenseversion></licenseversion>
+    </library>
+    <library>
+        <location>amd/src</location>
+        <name>WebRTC adapter</name>
+        <version>4.1.0</version>
+        <license>BSD</license>
+        <licenseversion>3-Clause</licenseversion>
+    </library>
+</libraries>
diff --git a/lib/editor/atto/plugins/recordrtc/version.php b/lib/editor/atto/plugins/recordrtc/version.php
new file mode 100644
index 0000000..fa283af
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/version.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Atto text editor recordrtc version file.
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$plugin->version   = 2017080103;
+$plugin->requires  = 2015051100;
+$plugin->component = 'atto_recordrtc';
+$plugin->maturity = MATURITY_BETA;
+$plugin->release = '1.0-b4';
diff --git a/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button-debug.js b/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..1bbc6200edaf3f0b05784f666fb1836522c6c544
GIT binary patch
literal 11369
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
RL`_tDbvQ3Rw}0a!{s$Xoq!$1H

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button-min.js b/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..d76b1c5a8d3c7c2e93965741c7df48e86a425fbd
GIT binary patch
literal 4074
zcmbtXZExE)5dOYj;c`GKVYJ$=+b}3~*ECDl08LgT>42dq3|czdL}=0@skoV{|GpzB
z$&w>CZ3pB<;=Ld5o;&^h?lfU}9+8z&xqvaVR!uczO6S^U<5_|4lF)e}Gs~5XfZDjc
zVR|Gdq|ZyJo;-Y(^P5p7m@yMlmT%v@`{VTd{OIhYsz#ZTmT?JsJQoGe$@4z%%uKb~
zAm5VbFhI<dsH!JF))bzjc>&svH%v<|7o@T3Pe)~m`k0tHYE_|-v0BN+b38{Y2DE3J
zT5bhY)w4%6*~xY2j)DO_@BQsX_^n>&OfEq0aoQ34PIGA>D>Ur&y2tR<ZkOfvd_H1D
z&K1h;1{gArISjcNCO<~HS1@u{vli?Y!$T2&_Ic4pb6J8g?ly)kxU0Xx+E6<d{8??G
zEFbZC8~&~yUtg$Y_xy_k4Bg=E8_Tfxj8*IQ5`E1XGo4vqa%JgxLN8&3I=6y?FH6Us
zbl=}3Pn(1e2l@+=JAo8yp;+DqfzFTccf8ho#q_Ozo(Yv*6YL#qc$O`{HlnRRoo0G?
z2#I7XFl&}UM9z{OFo~0w9(pE_ykrKF42$0)WAL0%NX`<-xm9}VB$E^W{8khTF6sLZ
zw44g;qLcuF7nj^}CiuUg(-z3$lFuW%<R)2wjmT0NOX4JB@^Yy*ueg9U&#pluFrpbo
z;(&TE*@`eB)CO{Uy9Ptz!w4pm37ILoB%eO{XJ7jyJ~;3)Q-s+NQ$zxV*5|J8VtQBJ
zSN5QMpw#mIB|dbZY+Lt!$AHzMfT-N?+%D56@RZI~R+yu?1^pWPD3yf}ReWd@=8htA
z!wsJaI9@tz>Og)I`2!nLRr8UU%E|7%C7D{Slw7I25O4?w2hoPhTy2s}0Mn-u4c#yi
zN#rY}MS{HYX+~X%PxOT!J)jQ`b`BEkCJPTR#auF+MK?f(c+@&_x)9HStsFyma-Lsl
zmR*}DPUcFVU>!$oEkImCf&%&NWn%<n4mnx?RN!=0G5$~u{}fz9^nPddJz_aqV{GI@
zXHv$PdLMgDoWSQa%=}myRuE`TzN+Z9j<&_@r?Ri6ZIP9sRnD==QlK2iZ`#%_{6KKJ
zyED8+_wQJ()=Gl3siYYe_6$>%TI%Ox8n_9yY+<@DXUt~Hi;xm?Bt-h)33`YQx`N(1
z*VIpAy)DfcF~Iod1HM>VLVtSvIL6Md&sYxn7?%e0iqNy9uw1xnoZ^iloYqZ*VGz1=
z8`!LkmYK?LTOFa@0+Q5+O)CZo?0l@AJ2ma&2_>C4Eb*}60`;BuErI^}^VbCG&HV2`
z17>_SP|q?HXfJ2mfa_I|PppH!8q`dSK@m{`?=WnZB>s)y?5dZ))IAfb_VeOkkR&BI
zo5vr`n9yQBE3)->LCW?s2Tssh=~k}Z#^`*%STh#|(+luZF$i@AWJ+45g+Eq>6}a$@
z?{HFqW9>DQxNy&yHV!n`IB_B!N1dG+TQPJJr(w-ZjeEe1q{=<i>up-pFV0NL+)G$O
z(z$ysgj-0qzTF+{w7c?#l{g(}x4T>ejn~t4pOzu{-Xgo-nE|$YwGFw`(=()@zrziw
z=yMF|*jbx~l<cq!Xu(OX!4_JML`5^93^X{p?MFYy5F#52&N}xsg_s8QvV^k_cK{q`
z6hZb4m)9L(_hknTVec15eaP2tO)iVt){uH+UpX6Z6_<#V&NMEP*YDOjj_({TSF}93
zy1KYb%gllMN6YgRzbHjfZzSlMG1qY0KWslqwNkcE>h57X6gP-w+-fx4r+B0rq*%TJ
z!B>3Oh*MS1%mGz{ln(m!MON%1#$#|H?VVR{dXg7^om^a={(1g_(6Zh)O!~h0KJV<j
V<F(&*u~vq^-P=8#e8A%Q?mwNb%kTgI

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button.js b/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-button/moodle-atto_recordrtc-button.js
new file mode 100644
index 0000000000000000000000000000000000000000..1bbc6200edaf3f0b05784f666fb1836522c6c544
GIT binary patch
literal 11369
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
RL`_tDbvQ3Rw}0a!{s$Xoq!$1H

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording-debug.js b/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..d066b16fbd685d3a1cc2c89ba3464f14f48202d2
GIT binary patch
literal 32627
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
F_P+_4SaARV

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording-min.js b/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..14174a45c79af4731923d014c5f054832e1929a5
GIT binary patch
literal 11210
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
Srf+Wf_gqu&I~V9`e)4bi$Lt{h

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording.js b/lib/editor/atto/plugins/recordrtc/yui/build/moodle-atto_recordrtc-recording/moodle-atto_recordrtc-recording.js
new file mode 100644
index 0000000000000000000000000000000000000000..d066b16fbd685d3a1cc2c89ba3464f14f48202d2
GIT binary patch
literal 32627
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
F_P+_4SaARV

literal 0
HcmV?d00001

diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/button/build.json b/lib/editor/atto/plugins/recordrtc/yui/src/button/build.json
new file mode 100644
index 0000000..d6abd5d
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/button/build.json
@@ -0,0 +1,10 @@
+{
+  "name": "moodle-atto_recordrtc-button",
+  "builds": {
+    "moodle-atto_recordrtc-button": {
+      "jsfiles": [
+        "button.js"
+      ]
+    }
+  }
+}
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/button/js/button.js b/lib/editor/atto/plugins/recordrtc/yui/src/button/js/button.js
new file mode 100644
index 0000000..94232bf
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/button/js/button.js
@@ -0,0 +1,382 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+//
+
+/**
+ * Atto recordrtc library functions
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/**
+ * @module moodle-atto_recordrtc-button
+ */
+
+/**
+ * Atto text editor recordrtc plugin.
+ *
+ * @namespace M.atto_recordrtc
+ * @class button
+ * @extends M.editor_atto.EditorPlugin
+ */
+
+// ESLint directives.
+/* eslint-disable camelcase, spaced-comment */
+
+// JSHint directives.
+/*global M */
+/*jshint onevar: false */
+
+// Scrutinizer CI directives.
+/** global: Y */
+/** global: M */
+
+var PLUGINNAME = 'atto_recordrtc',
+    TEMPLATE = '' +
+    '<div class="{{PLUGINNAME}} container-fluid">' +
+      '<div class="{{bs_row}} hide">' +
+        '<div class="{{bs_col}}12">' +
+          '<div id="alert-warning" class="alert {{bs_al_warn}}">' +
+            '<strong>{{browseralert_title}}</strong> {{browseralert}}' +
+          '</div>' +
+        '</div>' +
+      '</div>' +
+      '<div class="{{bs_row}} hide">' +
+        '<div class="{{bs_col}}12">' +
+          '<div id="alert-danger" class="alert {{bs_al_dang}}">' +
+            '<strong>{{insecurealert_title}}</strong> {{insecurealert}}' +
+          '</div>' +
+        '</div>' +
+      '</div>' +
+      '<div class="{{bs_row}} hide">' +
+        '{{#if audio}}' +
+          '<div class="{{bs_col}}1"></div>' +
+          '<div class="{{bs_col}}10">' +
+            '<audio id="player"></audio>' +
+          '</div>' +
+          '<div class="{{bs_col}}1"></div>' +
+        '{{else}}' +
+          '<div class="{{bs_col}}12">' +
+            '<video id="player"></video>' +
+          '</div>' +
+        '{{/if}}' +
+      '</div>' +
+      '<div class="{{bs_row}}">' +
+        '<div class="{{bs_col}}1"></div>' +
+        '<div class="{{bs_col}}10">' +
+          '<button id="start-stop" class="{{bs_ss_btn}}">{{startrecording}}</button>' +
+        '</div>' +
+        '<div class="{{bs_col}}1"></div>' +
+      '</div>' +
+      '<div class="{{bs_row}} hide">' +
+        '<div class="{{bs_col}}3"></div>' +
+        '<div class="{{bs_col}}6">' +
+          '<button id="upload" class="btn btn-primary btn-block">{{attachrecording}}</button>' +
+        '</div>' +
+        '<div class="{{bs_col}}3"></div>' +
+      '</div>' +
+    '</div>';
+
+Y.namespace('M.atto_recordrtc').Button = Y.Base.create('button', Y.M.editor_atto.EditorPlugin, [], {
+    /**
+     * The current language by default.
+     */
+    _lang: 'en',
+
+    initializer: function() {
+        if (this.get('host').canShowFilepicker('media')) {
+            // Add audio and/or video buttons depending on the settings.
+            var allowedtypes = this.get('allowedtypes');
+            if (allowedtypes === 'both' || allowedtypes === 'audio') {
+                this._addButton('audio', this._audio);
+            }
+            if (allowedtypes === 'both' || allowedtypes === 'video') {
+                this._addButton('video', this._video);
+            }
+
+            // Initialize the dialogue box.
+            var dialogue = this.getDialogue({
+                width: 1000,
+                focusAfterHide: null
+            });
+
+            // If dialogue is closed during recording, do the following.
+            dialogue.after('visibleChange', function() {
+                var closed = !dialogue.get('visible'),
+                    m = M.atto_recordrtc.commonmodule;
+
+                if (closed) {
+                    window.clearInterval(m.countdownTicker);
+
+                    if (m.mediaRecorder && m.mediaRecorder.state !== 'inactive') {
+                        m.mediaRecorder.stop();
+                    }
+
+                    if (m.stream) {
+                        m.stream.getTracks().forEach(function(track) {
+                            if (track.readyState !== 'ended') {
+                                track.stop();
+                            }
+                        });
+                    }
+                }
+            });
+
+            // Require Bowser and adapter.js libraries.
+            require(['atto_recordrtc/adapter'], function(adapter) {
+                window.adapter = adapter;
+            });
+            require(['atto_recordrtc/bowser'], function(bowser) {
+                window.bowser = bowser;
+            });
+        }
+    },
+
+    /**
+     * Add the buttons to the Atto toolbar.
+     *
+     * @method _addButton
+     * @param {string} type
+     * @param {callback} callback
+     * @private
+     */
+    _addButton: function(type, callback) {
+        this.addButton({
+            buttonName: type,
+            icon: this.get(type + 'rtcicon'),
+            iconComponent: PLUGINNAME,
+            callback: callback,
+            title: type + 'rtc',
+            tags: type + 'rtc',
+            tagMatchRequiresAll: false
+        });
+    },
+
+    /**
+     * Toggle audiortc and normal display mode
+     *
+     * @method _audio
+     * @private
+     */
+    _audio: function() {
+        var dialogue = this.getDialogue();
+
+        dialogue.set('height', 400);
+        dialogue.set('headerContent', M.util.get_string('audiortc', 'atto_recordrtc'));
+        dialogue.set('bodyContent', this._createContent('audio'));
+
+        dialogue.show();
+
+        M.atto_recordrtc.audiomodule.init(this);
+    },
+
+    /**
+     * Toggle videortc and normal display mode
+     *
+     * @method _video
+     * @private
+     */
+    _video: function() {
+        var dialogue = this.getDialogue();
+
+        dialogue.set('height', 850);
+        dialogue.set('headerContent', M.util.get_string('videortc', 'atto_recordrtc'));
+        dialogue.set('bodyContent', this._createContent('video'));
+
+        dialogue.show();
+
+        M.atto_recordrtc.videomodule.init(this);
+    },
+
+    /**
+     * Create the HTML to be displayed in the dialogue box
+     *
+     * @method _createContent
+     * @param {string} type
+     * @returns {Object}
+     * @private
+     */
+    _createContent: function(type) {
+        var audio = (type === 'audio'),
+            bsRow = this.get('oldermoodle') ? 'row-fluid' : 'row',
+            bsCol = this.get('oldermoodle') ? 'span' : 'col-xs-',
+            bsAlWarn = this.get('oldermoodle') ? '' : 'alert-warning',
+            bsAlDang = this.get('oldermoodle') ? 'alert-error' : 'alert-danger',
+            bsSsBtn = this.get('oldermoodle') ? 'btn btn-large btn-danger btn-block'
+                                              : 'btn btn-lg btn-outline-danger btn-block';
+
+        var bodyContent = Y.Handlebars.compile(TEMPLATE)({
+            PLUGINNAME: PLUGINNAME,
+            audio: audio,
+            bs_row: bsRow,
+            bs_col: bsCol,
+            bs_al_warn: bsAlWarn,
+            bs_al_dang: bsAlDang,
+            bs_ss_btn: bsSsBtn,
+            bs_ul_btn: 'btn btn-primary btn-block',
+            browseralert_title: M.util.get_string('browseralert_title', 'atto_recordrtc'),
+            browseralert: M.util.get_string('browseralert', 'atto_recordrtc'),
+            insecurealert_title: M.util.get_string('insecurealert_title', 'atto_recordrtc'),
+            insecurealert: M.util.get_string('insecurealert', 'atto_recordrtc'),
+            startrecording: M.util.get_string('startrecording', 'atto_recordrtc'),
+            attachrecording: M.util.get_string('attachrecording', 'atto_recordrtc')
+        });
+
+        return bodyContent;
+    },
+
+    /**
+     * Close the dialogue without further action.
+     *
+     * @method closeDialogue
+     * @param {Object} scope The "this" context of the editor.
+     */
+    closeDialogue: function(scope) {
+        scope.getDialogue().hide();
+
+        scope.editor.focus();
+    },
+
+    /**
+     * Insert the annotation link in the editor.
+     *
+     * @method setLink
+     * @param {Object} scope The "this" context of the editor.
+     * @param {string} annotation The HTML link to the recording.
+     */
+    setLink: function(scope, annotation) {
+        scope.getDialogue().hide();
+
+        scope.editor.focus();
+        scope.get('host').insertContentAtFocusPoint(annotation);
+        scope.markUpdated();
+    }
+}, {
+    ATTRS: {
+        /**
+         * The contextid to use when generating this recordrtc.
+         *
+         * @attribute contextid
+         * @type String
+         */
+        contextid: {
+            value: null
+        },
+
+        /**
+         * The sesskey to use when generating this recordrtc.
+         *
+         * @attribute sesskey
+         * @type String
+         */
+        sesskey: {
+            value: null
+        },
+
+        /**
+         * The root to use when loading the recordrtc.
+         *
+         * @attribute recordrtcroot
+         * @type String
+         */
+        recordrtcroot: {
+            value: null
+        },
+
+        /**
+         * The allowedtypes to use when generating this recordrtc.
+         *
+         * @attribute allowedtypes
+         * @type String
+         */
+        allowedtypes: {
+            value: null
+        },
+
+        /**
+         * The audiobitrate to use when generating this recordrtc.
+         *
+         * @attribute audiobitrate
+         * @type String
+         */
+        audiobitrate: {
+            value: null
+        },
+
+        /**
+         * The videobitrate to use when generating this recordrtc.
+         *
+         * @attribute videobitrate
+         * @type String
+         */
+        videobitrate: {
+            value: null
+        },
+
+        /**
+         * The timelimit to use when generating this recordrtc.
+         *
+         * @attribute timelimit
+         * @type String
+         */
+        timelimit: {
+            value: null
+        },
+
+        /**
+         * The audiortcicon to use when generating this recordrtc.
+         *
+         * @attribute audiortcicon
+         * @type String
+         */
+        audiortcicon: {
+            value: null
+        },
+
+        /**
+         * The videortcicon to use when generating this recordrtc.
+         *
+         * @attribute videortcicon
+         * @type String
+         */
+        videortcicon: {
+            value: null
+        },
+
+        /**
+         * True if Moodle is version < 3.2.
+         *
+         * @attribute oldermoodle
+         * @type Boolean
+         */
+        oldermoodle: {
+            value: null
+        },
+
+        /**
+         * Maximum upload size set on server, in MB.
+         *
+         * @attribute maxrecsize
+         * @type String
+         */
+        maxrecsize: {
+            value: null
+        }
+    }
+});
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/button/meta/button.json b/lib/editor/atto/plugins/recordrtc/yui/src/button/meta/button.json
new file mode 100644
index 0000000..3aa4826
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/button/meta/button.json
@@ -0,0 +1,8 @@
+{
+    "moodle-atto_recordrtc-button": {
+        "requires": [
+            "moodle-editor_atto-plugin",
+            "moodle-atto_recordrtc-recording"
+        ]
+    }
+}
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/recording/build.json b/lib/editor/atto/plugins/recordrtc/yui/src/recording/build.json
new file mode 100644
index 0000000..8fbac69
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/recording/build.json
@@ -0,0 +1,14 @@
+{
+    "name": "moodle-atto_recordrtc-recording",
+    "builds": {
+        "moodle-atto_recordrtc-recording": {
+            "jsfiles": [
+                "commonmodule.js",
+                "compatcheckmodule.js",
+                "abstractmodule.js",
+                "audiomodule.js",
+                "videomodule.js"
+            ]
+        }
+    }
+}
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/abstractmodule.js b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/abstractmodule.js
new file mode 100644
index 0000000..a90fa2a
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/abstractmodule.js
@@ -0,0 +1,111 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+//
+
+/**
+ * Atto recordrtc library functions for function abstractions
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// ESLint directives.
+/* eslint-disable camelcase */
+
+// Scrutinizer CI directives.
+/** global: M */
+/** global: Y */
+
+M.atto_recordrtc = M.atto_recordrtc || {};
+
+// Shorten access to module namespaces.
+var cm = M.atto_recordrtc.commonmodule,
+    am = M.atto_recordrtc.abstractmodule;
+
+M.atto_recordrtc.abstractmodule = {
+    // A helper for making a Moodle alert appear.
+    // Subject is the content of the alert (which error ther alert is for).
+    // Possibility to add on-alert-close event.
+    show_alert: function(subject, onCloseEvent) {
+        Y.use('moodle-core-notification-alert', function() {
+            var dialogue = new M.core.alert({
+                title: M.util.get_string(subject + '_title', 'atto_recordrtc'),
+                message: M.util.get_string(subject, 'atto_recordrtc')
+            });
+
+            if (onCloseEvent) {
+                dialogue.after('complete', onCloseEvent);
+            }
+        });
+    },
+
+    // Handle getUserMedia errors.
+    handle_gum_errors: function(error, commonConfig) {
+        var btnLabel = M.util.get_string('recordingfailed', 'atto_recordrtc'),
+            treatAsStopped = function() {
+                commonConfig.onMediaStopped(btnLabel);
+            };
+
+        // Changes 'CertainError' -> 'gumcertain' to match language string names.
+        var stringName = 'gum' + error.name.replace('Error', '').toLowerCase();
+
+        // After alert, proceed to treat as stopped recording, or close dialogue.
+        if (stringName !== 'gumsecurity') {
+            am.show_alert(stringName, treatAsStopped);
+        } else {
+            am.show_alert(stringName, function() {
+                cm.editorScope.closeDialogue(cm.editorScope);
+            });
+        }
+    },
+
+    // Select best options for the recording codec.
+    select_rec_options: function(recType) {
+        var types, options;
+
+        if (recType === 'audio') {
+            types = [
+                'audio/webm;codecs=opus',
+                'audio/ogg;codecs=opus'
+            ];
+            options = {
+                audioBitsPerSecond: window.parseInt(cm.editorScope.get('audiobitrate'))
+            };
+        } else {
+            types = [
+                'video/webm;codecs=vp9,opus',
+                'video/webm;codecs=h264,opus',
+                'video/webm;codecs=vp8,opus'
+            ];
+            options = {
+                audioBitsPerSecond: window.parseInt(cm.editorScope.get('audiobitrate')),
+                videoBitsPerSecond: window.parseInt(cm.editorScope.get('videobitrate'))
+            };
+        }
+
+        var compatTypes = types.filter(function(type) {
+            return window.MediaRecorder.isTypeSupported(type);
+        });
+
+        if (compatTypes.length !== 0) {
+            options.mimeType = compatTypes[0];
+        }
+
+        return options;
+    }
+};
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/audiomodule.js b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/audiomodule.js
new file mode 100644
index 0000000..efbc86c
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/audiomodule.js
@@ -0,0 +1,165 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+//
+
+/**
+ * Atto recordrtc library functions
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// ESLint directives.
+/* eslint-disable camelcase, spaced-comment */
+
+// Scrutinizer CI directives.
+/** global: M */
+/** global: Y */
+
+M.atto_recordrtc = M.atto_recordrtc || {};
+
+// Shorten access to module namespaces.
+var cm = M.atto_recordrtc.commonmodule,
+    am = M.atto_recordrtc.abstractmodule,
+    ccm = M.atto_recordrtc.compatcheckmodule;
+
+M.atto_recordrtc.audiomodule = {
+    init: function(scope) {
+        // Assignment of global variables.
+        cm.editorScope = scope; // Allows access to the editor's "this" context.
+        cm.alertWarning = Y.one('div#alert-warning');
+        cm.alertDanger = Y.one('div#alert-danger');
+        cm.player = Y.one('audio#player');
+        cm.playerDOM = document.querySelector('audio#player');
+        cm.startStopBtn = Y.one('button#start-stop');
+        cm.uploadBtn = Y.one('button#upload');
+        cm.recType = 'audio';
+        cm.olderMoodle = scope.get('oldermoodle');
+        // Extract the numbers from the string, and convert to bytes.
+        cm.maxUploadSize = window.parseInt(scope.get('maxrecsize').match(/\d+/)[0], 10) * Math.pow(1024, 2);
+
+        // Show alert and close plugin if WebRTC is not supported.
+        ccm.check_has_gum();
+        // Show alert and redirect user if connection is not secure.
+        ccm.check_secure();
+        // Show alert if using non-ideal browser.
+        ccm.check_browser();
+
+        // Run when user clicks on "record" button.
+        cm.startStopBtn.on('click', function() {
+            cm.startStopBtn.set('disabled', true);
+
+            // If button is displaying "Start Recording" or "Record Again".
+            if ((cm.startStopBtn.get('textContent') === M.util.get_string('startrecording', 'atto_recordrtc')) ||
+                (cm.startStopBtn.get('textContent') === M.util.get_string('recordagain', 'atto_recordrtc')) ||
+                (cm.startStopBtn.get('textContent') === M.util.get_string('recordingfailed', 'atto_recordrtc'))) {
+                // Make sure the audio player and upload button are not shown.
+                cm.player.ancestor().ancestor().addClass('hide');
+                cm.uploadBtn.ancestor().ancestor().addClass('hide');
+
+                // Change look of recording button.
+                if (!cm.olderMoodle) {
+                    cm.startStopBtn.replaceClass('btn-outline-danger', 'btn-danger');
+                }
+
+                // Empty the array containing the previously recorded chunks.
+                cm.chunks = [];
+                cm.blobSize = 0;
+
+                // Initialize common configurations.
+                var commonConfig = {
+                    // When the stream is captured from the microphone/webcam.
+                    onMediaCaptured: function(stream) {
+                        // Make audio stream available at a higher level by making it a property of the common module.
+                        cm.stream = stream;
+
+                        cm.start_recording(cm.recType, cm.stream);
+                    },
+
+                    // Revert button to "Record Again" when recording is stopped.
+                    onMediaStopped: function(btnLabel) {
+                        cm.startStopBtn.set('textContent', btnLabel);
+                        cm.startStopBtn.set('disabled', false);
+                        if (!cm.olderMoodle) {
+                            cm.startStopBtn.replaceClass('btn-danger', 'btn-outline-danger');
+                        }
+                    },
+
+                    // Handle recording errors.
+                    onMediaCapturingFailed: function(error) {
+                        am.handle_gum_errors(error, commonConfig);
+                    }
+                };
+
+                // Capture audio stream from microphone.
+                M.atto_recordrtc.audiomodule.capture_audio(commonConfig);
+            } else { // If button is displaying "Stop Recording".
+                // First of all clears the countdownTicker.
+                window.clearInterval(cm.countdownTicker);
+
+                // Disable "Record Again" button for 1s to allow background processing (closing streams).
+                window.setTimeout(function() {
+                    cm.startStopBtn.set('disabled', false);
+                }, 1000);
+
+                // Stop recording.
+                M.atto_recordrtc.audiomodule.stop_recording(cm.stream);
+
+                // Change button to offer to record again.
+                cm.startStopBtn.set('textContent', M.util.get_string('recordagain', 'atto_recordrtc'));
+                if (!cm.olderMoodle) {
+                    cm.startStopBtn.replaceClass('btn-danger', 'btn-outline-danger');
+                }
+            }
+        });
+    },
+
+    // Setup to get audio stream from microphone.
+    capture_audio: function(config) {
+        cm.capture_user_media(
+            // Media constraints.
+            {
+                audio: true
+            },
+
+            // Success callback.
+            function(audioStream) {
+                // Set audio player source to microphone stream.
+                cm.playerDOM.srcObject = audioStream;
+
+                config.onMediaCaptured(audioStream);
+            },
+
+            // Error callback.
+            function(error) {
+                config.onMediaCapturingFailed(error);
+            }
+        );
+    },
+
+    stop_recording: function(stream) {
+        // Stop recording microphone stream.
+        cm.mediaRecorder.stop();
+
+        // Stop each individual MediaTrack.
+        var tracks = stream.getTracks();
+        for (var i = 0; i < tracks.length; i++) {
+            tracks[i].stop();
+        }
+    }
+};
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/commonmodule.js b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/commonmodule.js
new file mode 100644
index 0000000..5e7ddee
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/commonmodule.js
@@ -0,0 +1,303 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+//
+
+/**
+ * Atto recordrtc library functions
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// ESLint directives.
+/* eslint-disable camelcase, no-alert, spaced-comment */
+
+// JSHint directives.
+/*global M */
+/*jshint es5: true */
+/*jshint onevar: false */
+/*jshint shadow: true */
+
+// Scrutinizer CI directives.
+/** global: M */
+/** global: Y */
+
+M.atto_recordrtc = M.atto_recordrtc || {};
+
+// Shorten access to M.atto_recordrtc.commonmodule namespace.
+var cm = M.atto_recordrtc.commonmodule,
+    am = M.atto_recordrtc.abstractmodule;
+
+M.atto_recordrtc.commonmodule = {
+    // Unitialized variables to be used by the other modules.
+    editorScope: null,
+    alertWarning: null,
+    alertDanger: null,
+    player: null,
+    playerDOM: null, // Used to manipulate DOM directly.
+    startStopBtn: null,
+    uploadBtn: null,
+    countdownSeconds: null,
+    countdownTicker: null,
+    recType: null,
+    stream: null,
+    mediaRecorder: null,
+    chunks: null,
+    blobSize: null,
+    olderMoodle: null,
+    maxUploadSize: null,
+
+    // Capture webcam/microphone stream.
+    capture_user_media: function(mediaConstraints, successCallback, errorCallback) {
+        window.navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
+    },
+
+    // Add chunks of audio/video to array when made available.
+    handle_data_available: function(event) {
+        // Push recording slice to array.
+        cm.chunks.push(event.data);
+        // Size of all recorded data so far.
+        cm.blobSize += event.data.size;
+
+        // If total size of recording so far exceeds max upload limit, stop recording.
+        // An extra condition exists to avoid displaying alert twice.
+        if (cm.blobSize >= cm.maxUploadSize) {
+            if (!window.localStorage.getItem('alerted')) {
+                window.localStorage.setItem('alerted', 'true');
+
+                cm.startStopBtn.simulate('click');
+                am.show_alert('nearingmaxsize');
+            } else {
+                window.localStorage.removeItem('alerted');
+            }
+
+            cm.chunks.pop();
+        }
+    },
+
+    // Handle recording end.
+    handle_stop: function() {
+        // Set source of audio player.
+        var blob = new window.Blob(cm.chunks, {type: cm.mediaRecorder.mimeType});
+        cm.player.set('src', window.URL.createObjectURL(blob));
+
+        // Show audio player with controls enabled, and unmute.
+        cm.player.set('muted', false);
+        cm.player.set('controls', true);
+        cm.player.ancestor().ancestor().removeClass('hide');
+
+        // Show upload button.
+        cm.uploadBtn.ancestor().ancestor().removeClass('hide');
+        cm.uploadBtn.set('textContent', M.util.get_string('attachrecording', 'atto_recordrtc'));
+        cm.uploadBtn.set('disabled', false);
+
+        // Handle when upload button is clicked.
+        cm.uploadBtn.on('click', function() {
+            // Trigger error if no recording has been made.
+            if (cm.chunks.length === 0) {
+                am.show_alert('norecordingfound');
+            } else {
+                cm.uploadBtn.set('disabled', true);
+
+                // Upload recording to server.
+                cm.upload_to_server(cm.recType, function(progress, fileURLOrError) {
+                    if (progress === 'ended') { // Insert annotation in text.
+                        cm.uploadBtn.set('disabled', false);
+                        cm.insert_annotation(cm.recType, fileURLOrError);
+                    } else if (progress === 'upload-failed') { // Show error message in upload button.
+                        cm.uploadBtn.set('disabled', false);
+                        cm.uploadBtn.set('textContent',
+                            M.util.get_string('uploadfailed', 'atto_recordrtc') + ' ' + fileURLOrError);
+                    } else if (progress === 'upload-failed-404') { // 404 error = File too large in Moodle.
+                        cm.uploadBtn.set('disabled', false);
+                        cm.uploadBtn.set('textContent', M.util.get_string('uploadfailed404', 'atto_recordrtc'));
+                    } else if (progress === 'upload-aborted') {
+                        cm.uploadBtn.set('disabled', false);
+                        cm.uploadBtn.set('textContent',
+                            M.util.get_string('uploadaborted', 'atto_recordrtc') + ' ' + fileURLOrError);
+                    } else {
+                        cm.uploadBtn.set('textContent', progress);
+                    }
+                });
+            }
+        });
+    },
+
+    // Get everything set up to start recording.
+    start_recording: function(type, stream) {
+        // The options for the recording codecs and bitrates.
+        var options = am.select_rec_options(type);
+        cm.mediaRecorder = new window.MediaRecorder(stream, options);
+
+        // Initialize MediaRecorder events and start recording.
+        cm.mediaRecorder.ondataavailable = cm.handle_data_available;
+        cm.mediaRecorder.onstop = cm.handle_stop;
+        cm.mediaRecorder.start(1000); // Capture in 1s chunks. Must be set to work with Firefox.
+
+        // Mute audio, distracting while recording.
+        cm.player.set('muted', true);
+
+        // Set recording timer to the time specified in the settings.
+        cm.countdownSeconds = cm.editorScope.get('timelimit');
+        cm.countdownSeconds++;
+        var timerText = M.util.get_string('stoprecording', 'atto_recordrtc');
+        timerText += ' (<span id="minutes"></span>:<span id="seconds"></span>)';
+        cm.startStopBtn.setHTML(timerText);
+        cm.set_time();
+        cm.countdownTicker = window.setInterval(cm.set_time, 1000);
+
+        // Make button clickable again, to allow stopping recording.
+        cm.startStopBtn.set('disabled', false);
+    },
+
+    // Upload recorded audio/video to server.
+    upload_to_server: function(type, callback) {
+        var xhr = new window.XMLHttpRequest();
+
+        // Get src media of audio/video tag.
+        xhr.open('GET', cm.player.get('src'), true);
+        xhr.responseType = 'blob';
+
+        xhr.onload = function() {
+            if (xhr.status === 200) { // If src media was successfully retrieved.
+                // blob is now the media that the audio/video tag's src pointed to.
+                var blob = this.response;
+
+                // Generate filename with random ID and file extension.
+                var fileName = (Math.random() * 1000).toString().replace('.', '');
+                fileName += (type === 'audio') ? '-audio.ogg'
+                                               : '-video.webm';
+
+                // Create FormData to send to PHP filepicker-upload script.
+                var formData = new window.FormData(),
+                    filepickerOptions = cm.editorScope.get('host').get('filepickeroptions').link,
+                    repositoryKeys = window.Object.keys(filepickerOptions.repositories);
+
+                formData.append('repo_upload_file', blob, fileName);
+                formData.append('itemid', filepickerOptions.itemid);
+
+                for (var i = 0; i < repositoryKeys.length; i++) {
+                    if (filepickerOptions.repositories[repositoryKeys[i]].type === 'upload') {
+                        formData.append('repo_id', filepickerOptions.repositories[repositoryKeys[i]].id);
+                        break;
+                    }
+                }
+
+                formData.append('env', filepickerOptions.env);
+                formData.append('sesskey', M.cfg.sesskey);
+                formData.append('client_id', filepickerOptions.client_id);
+                formData.append('savepath', '/');
+                formData.append('ctx_id', filepickerOptions.context.id);
+
+                // Pass FormData to PHP script using XHR.
+                var uploadEndpoint = M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload';
+                cm.make_xmlhttprequest(uploadEndpoint, formData,
+                    function(progress, responseText) {
+                        if (progress === 'upload-ended') {
+                            callback('ended', window.JSON.parse(responseText).url);
+                        } else {
+                            callback(progress);
+                        }
+                    }
+                );
+            }
+        };
+
+        xhr.send();
+    },
+
+    // Handle XHR sending/receiving/status.
+    make_xmlhttprequest: function(url, data, callback) {
+        var xhr = new window.XMLHttpRequest();
+
+        xhr.onreadystatechange = function() {
+            if ((xhr.readyState === 4) && (xhr.status === 200)) { // When request is finished and successful.
+                callback('upload-ended', xhr.responseText);
+            } else if (xhr.status === 404) { // When request returns 404 Not Found.
+                callback('upload-failed-404');
+            }
+        };
+
+        xhr.upload.onprogress = function(event) {
+            callback(Math.round(event.loaded / event.total * 100) + "% " + M.util.get_string('uploadprogress', 'atto_recordrtc'));
+        };
+
+        xhr.upload.onerror = function(error) {
+            callback('upload-failed', error);
+        };
+
+        xhr.upload.onabort = function(error) {
+            callback('upload-aborted', error);
+        };
+
+        // POST FormData to PHP script that handles uploading/saving.
+        xhr.open('POST', url);
+        xhr.send(data);
+    },
+
+    // Makes 1min and 2s display as 1:02 on timer instead of 1:2, for example.
+    pad: function(val) {
+        var valString = val + "";
+
+        if (valString.length < 2) {
+            return "0" + valString;
+        } else {
+            return valString;
+        }
+    },
+
+    // Functionality to make recording timer count down.
+    // Also makes recording stop when time limit is hit.
+    set_time: function() {
+        cm.countdownSeconds--;
+
+        cm.startStopBtn.one('span#seconds').set('textContent', cm.pad(cm.countdownSeconds % 60));
+        cm.startStopBtn.one('span#minutes').set('textContent', cm.pad(window.parseInt(cm.countdownSeconds / 60, 10)));
+
+        if (cm.countdownSeconds === 0) {
+            cm.startStopBtn.simulate('click');
+        }
+    },
+
+    // Generates link to recorded annotation to be inserted.
+    create_annotation: function(type, recording_url) {
+        var linkText = window.prompt(M.util.get_string('annotationprompt', 'atto_recordrtc'),
+                                     M.util.get_string('annotation:' + type, 'atto_recordrtc'));
+
+        // Return HTML for annotation link, if user did not press "Cancel".
+        if (!linkText) {
+            return undefined;
+        } else {
+            var annotation = '<a target="_blank" href="' + recording_url + '">' + linkText + '</a>';
+            return annotation;
+        }
+    },
+
+    // Inserts link to annotation in editor text area.
+    insert_annotation: function(type, recording_url) {
+        var annotation = cm.create_annotation(type, recording_url);
+
+        // Insert annotation link.
+        // If user pressed "Cancel", just go back to main recording screen.
+        if (!annotation) {
+            cm.uploadBtn.set('textContent', M.util.get_string('attachrecording', 'atto_recordrtc'));
+        } else {
+            cm.editorScope.setLink(cm.editorScope, annotation);
+        }
+    }
+};
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/compatcheckmodule.js b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/compatcheckmodule.js
new file mode 100644
index 0000000..b9611fe
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/compatcheckmodule.js
@@ -0,0 +1,74 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+//
+
+/**
+ * Atto recordrtc library functions for checking browser compatibility
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// ESLint directives.
+/* eslint-disable camelcase */
+
+// Scrutinizer CI directives.
+/** global: M */
+
+M.atto_recordrtc = M.atto_recordrtc || {};
+
+// Shorten access to module namespaces.
+var cm = M.atto_recordrtc.commonmodule,
+    am = M.atto_recordrtc.abstractmodule;
+
+M.atto_recordrtc.compatcheckmodule = {
+    // Show alert and close plugin if browser does not support WebRTC at all.
+    check_has_gum: function() {
+        if (!(navigator.mediaDevices && window.MediaRecorder)) {
+            am.show_alert('nowebrtc', function() {
+                cm.editorScope.closeDialogue(cm.editorScope);
+            });
+        }
+    },
+
+    // Notify and redirect user if plugin is used from insecure location.
+    check_secure: function() {
+        var isSecureOrigin = (window.location.protocol === 'https:') ||
+                             (window.location.host.indexOf('localhost') !== -1);
+
+        if (!isSecureOrigin && (window.bowser.chrome || window.bowser.opera)) {
+            am.show_alert('gumsecurity', function() {
+                cm.editorScope.closeDialogue(cm.editorScope);
+            });
+        } else if (!isSecureOrigin) {
+            cm.alertDanger.ancestor().ancestor().removeClass('hide');
+        }
+    },
+
+    // Display "consider switching browsers" message if not using:
+    // - Firefox 29+;
+    // - Chrome 49+;
+    // - Opera 36+.
+    check_browser: function() {
+        if (!((window.bowser.firefox && window.bowser.version >= 29) ||
+              (window.bowser.chrome && window.bowser.version >= 49) ||
+              (window.bowser.opera && window.bowser.version >= 36))) {
+            cm.alertWarning.ancestor().ancestor().removeClass('hide');
+        }
+    }
+};
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/videomodule.js b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/videomodule.js
new file mode 100644
index 0000000..fba7a6b
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/recording/js/videomodule.js
@@ -0,0 +1,173 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+//
+
+/**
+ * Atto recordrtc library functions
+ *
+ * @package    atto_recordrtc
+ * @author     Jesus Federico (jesus [at] blindsidenetworks [dt] com)
+ * @author     Jacob Prud'homme (jacob [dt] prudhomme [at] blindsidenetworks [dt] com)
+ * @copyright  2017 Blindside Networks Inc.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// ESLint directives.
+/* eslint-disable camelcase, spaced-comment */
+
+// Scrutinizer CI directives.
+/** global: M */
+/** global: Y */
+
+M.atto_recordrtc = M.atto_recordrtc || {};
+
+// Shorten access to module namespaces.
+var cm = M.atto_recordrtc.commonmodule,
+    am = M.atto_recordrtc.abstractmodule,
+    ccm = M.atto_recordrtc.compatcheckmodule;
+
+M.atto_recordrtc.videomodule = {
+    init: function(scope) {
+        // Assignment of global variables.
+        cm.editorScope = scope; // Allows access to the editor's "this" context.
+        cm.alertWarning = Y.one('div#alert-warning');
+        cm.alertDanger = Y.one('div#alert-danger');
+        cm.player = Y.one('video#player');
+        cm.playerDOM = document.querySelector('video#player');
+        cm.startStopBtn = Y.one('button#start-stop');
+        cm.uploadBtn = Y.one('button#upload');
+        cm.recType = 'video';
+        cm.olderMoodle = scope.get('oldermoodle');
+        // Extract the numbers from the string, and convert to bytes.
+        cm.maxUploadSize = window.parseInt(scope.get('maxrecsize').match(/\d+/)[0], 10) * Math.pow(1024, 2);
+
+        // Show alert and close plugin if WebRTC is not supported.
+        ccm.check_has_gum();
+        // Show alert and redirect user if connection is not secure.
+        ccm.check_secure();
+        // Show alert if using non-ideal browser.
+        ccm.check_browser();
+
+        // Run when user clicks on "record" button.
+        cm.startStopBtn.on('click', function() {
+            cm.startStopBtn.set('disabled', true);
+
+            // If button is displaying "Start Recording" or "Record Again".
+            if ((cm.startStopBtn.get('textContent') === M.util.get_string('startrecording', 'atto_recordrtc')) ||
+                (cm.startStopBtn.get('textContent') === M.util.get_string('recordagain', 'atto_recordrtc')) ||
+                (cm.startStopBtn.get('textContent') === M.util.get_string('recordingfailed', 'atto_recordrtc'))) {
+                // Make sure the upload button is not shown.
+                cm.uploadBtn.ancestor().ancestor().addClass('hide');
+
+                // Change look of recording button.
+                if (!cm.olderMoodle) {
+                    cm.startStopBtn.replaceClass('btn-outline-danger', 'btn-danger');
+                }
+
+                // Empty the array containing the previously recorded chunks.
+                cm.chunks = [];
+                cm.blobSize = 0;
+
+                // Initialize common configurations.
+                var commonConfig = {
+                    // When the stream is captured from the microphone/webcam.
+                    onMediaCaptured: function(stream) {
+                        // Make video stream available at a higher level by making it a property of the common module.
+                        cm.stream = stream;
+
+                        cm.start_recording(cm.recType, cm.stream);
+                    },
+
+                    // Revert button to "Record Again" when recording is stopped.
+                    onMediaStopped: function(btnLabel) {
+                        cm.startStopBtn.set('textContent', btnLabel);
+                        cm.startStopBtn.set('disabled', false);
+                        if (!cm.olderMoodle) {
+                            cm.startStopBtn.replaceClass('btn-danger', 'btn-outline-danger');
+                        }
+                    },
+
+                    // Handle recording errors.
+                    onMediaCapturingFailed: function(error) {
+                        am.handle_gum_errors(error, commonConfig);
+                    }
+                };
+
+                // Show video tag without controls to view webcam stream.
+                cm.player.ancestor().ancestor().removeClass('hide');
+                cm.player.set('controls', false);
+
+                // Capture audio+video stream from webcam/microphone.
+                M.atto_recordrtc.videomodule.capture_audio_video(commonConfig);
+            } else { // If button is displaying "Stop Recording".
+                // First of all clears the countdownTicker.
+                window.clearInterval(cm.countdownTicker);
+
+                // Disable "Record Again" button for 1s to allow background processing (closing streams).
+                window.setTimeout(function() {
+                    cm.startStopBtn.set('disabled', false);
+                }, 1000);
+
+                // Stop recording.
+                M.atto_recordrtc.videomodule.stop_recording(cm.stream);
+
+                // Change button to offer to record again.
+                cm.startStopBtn.set('textContent', M.util.get_string('recordagain', 'atto_recordrtc'));
+                if (!cm.olderMoodle) {
+                    cm.startStopBtn.replaceClass('btn-danger', 'btn-outline-danger');
+                }
+            }
+        });
+    },
+
+    // Setup to get audio+video stream from microphone/webcam.
+    capture_audio_video: function(config) {
+        cm.capture_user_media(
+            // Media constraints.
+            {
+                audio: true,
+                video: {
+                    width: {ideal: 640},
+                    height: {ideal: 480}
+                }
+            },
+
+            // Success callback.
+            function(audioVideoStream) {
+                // Set video player source to microphone+webcam stream, and play it back as it's recording.
+                cm.playerDOM.srcObject = audioVideoStream;
+                cm.playerDOM.play();
+
+                config.onMediaCaptured(audioVideoStream);
+            },
+
+            // Error callback.
+            function(error) {
+                config.onMediaCapturingFailed(error);
+            }
+        );
+    },
+
+    stop_recording: function(stream) {
+        // Stop recording microphone stream.
+        cm.mediaRecorder.stop();
+
+        // Stop each individual MediaTrack.
+        var tracks = stream.getTracks();
+        for (var i = 0; i < tracks.length; i++) {
+            tracks[i].stop();
+        }
+    }
+};
diff --git a/lib/editor/atto/plugins/recordrtc/yui/src/recording/meta/recording.json b/lib/editor/atto/plugins/recordrtc/yui/src/recording/meta/recording.json
new file mode 100644
index 0000000..4aa79cd
--- /dev/null
+++ b/lib/editor/atto/plugins/recordrtc/yui/src/recording/meta/recording.json
@@ -0,0 +1,7 @@
+{
+    "moodle-atto_recordrtc-recording": {
+        "requires": [
+            "moodle-atto_recordrtc-button"
+        ]
+    }
+}
-- 
1.8.3.1

