From bd33859ad39381157eb3a6247576e7571c18f824 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Sat, 23 Sep 2017 11:38:19 +0300
Subject: [PATCH 11/95] mod/attendance (new)

---
 mod/attendance/.travis.yml                         |   48 +
 mod/attendance/CHANGELOG.md                        |   39 +
 mod/attendance/README.md                           |   14 +
 mod/attendance/absentee.php                        |  140 ++
 mod/attendance/add_form.php                        |  321 ++++
 mod/attendance/attendance.php                      |  103 ++
 .../backup_attendance_activity_task.class.php      |   71 +
 .../backup/moodle2/backup_attendance_stepslib.php  |  109 ++
 .../restore_attendance_activity_task.class.php     |  113 ++
 .../backup/moodle2/restore_attendance_stepslib.php |  179 ++
 mod/attendance/calendar.js                         |  110 ++
 mod/attendance/classes/add_warning_form.php        |  113 ++
 .../classes/attendance_webservices_handler.php     |  158 ++
 mod/attendance/classes/calendar_helpers.php        |  155 ++
 mod/attendance/classes/event/attendance_taken.php  |  113 ++
 .../classes/event/attendance_taken_by_student.php  |  113 ++
 mod/attendance/classes/event/report_viewed.php     |   99 +
 mod/attendance/classes/event/session_added.php     |  111 ++
 mod/attendance/classes/event/session_deleted.php   |  111 ++
 .../classes/event/session_duration_updated.php     |  111 ++
 mod/attendance/classes/event/session_updated.php   |  119 ++
 mod/attendance/classes/event/status_added.php      |   99 +
 mod/attendance/classes/event/status_removed.php    |  101 ++
 mod/attendance/classes/event/status_updated.php    |   99 +
 mod/attendance/classes/header.php                  |   80 +
 mod/attendance/classes/manage_page_params.php      |   47 +
 mod/attendance/classes/notifyqueue.php             |   93 +
 mod/attendance/classes/observer.php                |   57 +
 .../classes/page_with_filter_controls.php          |  282 +++
 mod/attendance/classes/preferences_page_params.php |   73 +
 mod/attendance/classes/report_page_params.php      |   86 +
 mod/attendance/classes/search/activity.php         |   37 +
 mod/attendance/classes/sessions_page_params.php    |   66 +
 mod/attendance/classes/structure.php               | 1235 +++++++++++++
 mod/attendance/classes/summary.php                 |  348 ++++
 mod/attendance/classes/take_page_params.php        |  116 ++
 mod/attendance/classes/task/auto_mark.php          |  221 +++
 mod/attendance/classes/task/notify.php             |  141 ++
 mod/attendance/classes/view_page_params.php        |   70 +
 mod/attendance/composer.json                       |   10 +
 mod/attendance/coursesummary.php                   |  124 ++
 mod/attendance/db/access.php                       |  156 ++
 mod/attendance/db/events.php                       |   36 +
 mod/attendance/db/install.php                      |   49 +
 mod/attendance/db/install.xml                      |  149 ++
 mod/attendance/db/services.php                     |   58 +
 mod/attendance/db/tasks.php                        |   44 +
 mod/attendance/db/upgrade.php                      |  457 +++++
 mod/attendance/db/upgradelib.php                   |   55 +
 mod/attendance/defaultstatus.php                   |  128 ++
 mod/attendance/duration_form.php                   |   74 +
 mod/attendance/export.php                          |  210 +++
 mod/attendance/export_form.php                     |  157 ++
 mod/attendance/externallib.php                     |  182 ++
 mod/attendance/index.php                           |   40 +
 mod/attendance/lang/en/attendance.php              |  474 +++++
 mod/attendance/lib.php                             |  499 +++++
 mod/attendance/locallib.php                        |  824 +++++++++
 mod/attendance/manage.php                          |   99 +
 mod/attendance/mod_form.php                        |   76 +
 mod/attendance/module.js                           |   30 +
 mod/attendance/password.php                        |   51 +
 mod/attendance/password_ajax.php                   |   50 +
 mod/attendance/pix/ghost.png                       |  Bin 0 -> 48062 bytes
 mod/attendance/pix/icon.gif                        |  Bin 0 -> 125 bytes
 mod/attendance/pix/icon.svg                        |  114 ++
 mod/attendance/pix/key.svg                         |    1 +
 mod/attendance/pix/redo.png                        |  Bin 0 -> 524 bytes
 mod/attendance/preferences.php                     |  166 ++
 mod/attendance/renderables.php                     |  869 +++++++++
 mod/attendance/renderer.php                        | 1898 ++++++++++++++++++++
 mod/attendance/renderhelpers.php                   |  455 +++++
 mod/attendance/report.php                          |   86 +
 mod/attendance/resetcalendar.php                   |   92 +
 mod/attendance/sessions.php                        |  225 +++
 mod/attendance/settings.php                        |  151 ++
 mod/attendance/student_attendance_form.php         |  119 ++
 mod/attendance/styles.css                          |  244 +++
 mod/attendance/take.php                            |   83 +
 mod/attendance/temp_form.php                       |   83 +
 mod/attendance/tempedit.php                        |  115 ++
 mod/attendance/tempedit_form.php                   |   91 +
 .../templates/attendance_password_icon.mustache    |   21 +
 .../attendance_password_icon_boost.mustache        |   28 +
 mod/attendance/tempmerge.php                       |  103 ++
 mod/attendance/tempmerge_form.php                  |   73 +
 mod/attendance/tempusers.php                       |  134 ++
 .../tests/attendance_webservices_test.php          |  160 ++
 mod/attendance/tests/behat/attendance_mod.feature  |  117 ++
 .../tests/behat/calendar_features.feature          |   39 +
 mod/attendance/tests/behat/defaultstatus.feature   |   30 +
 mod/attendance/tests/behat/extra_features.feature  |  211 +++
 mod/attendance/tests/behat/preferences.feature     |   56 +
 mod/attendance/tests/behat/report.feature          |  250 +++
 mod/attendance/tests/generator/lib.php             |   68 +
 mod/attendance/update_form.php                     |  181 ++
 mod/attendance/version.php                         |   31 +
 mod/attendance/view.php                            |   88 +
 mod/attendance/warnings.php                        |  203 +++
 .../moodle-mod_attendance-groupfilter-debug.js     |  Bin 0 -> 1435 bytes
 .../moodle-mod_attendance-groupfilter-min.js       |  Bin 0 -> 618 bytes
 .../moodle-mod_attendance-groupfilter.js           |  Bin 0 -> 1435 bytes
 mod/attendance/yui/src/groupfilter/build.json      |   10 +
 .../yui/src/groupfilter/js/groupfilter.js          |   41 +
 .../yui/src/groupfilter/meta/groupfilter.json      |    8 +
 105 files changed, 16377 insertions(+)
 create mode 100644 mod/attendance/.travis.yml
 create mode 100644 mod/attendance/CHANGELOG.md
 create mode 100644 mod/attendance/README.md
 create mode 100644 mod/attendance/absentee.php
 create mode 100644 mod/attendance/add_form.php
 create mode 100644 mod/attendance/attendance.php
 create mode 100644 mod/attendance/backup/moodle2/backup_attendance_activity_task.class.php
 create mode 100644 mod/attendance/backup/moodle2/backup_attendance_stepslib.php
 create mode 100644 mod/attendance/backup/moodle2/restore_attendance_activity_task.class.php
 create mode 100644 mod/attendance/backup/moodle2/restore_attendance_stepslib.php
 create mode 100644 mod/attendance/calendar.js
 create mode 100644 mod/attendance/classes/add_warning_form.php
 create mode 100644 mod/attendance/classes/attendance_webservices_handler.php
 create mode 100644 mod/attendance/classes/calendar_helpers.php
 create mode 100644 mod/attendance/classes/event/attendance_taken.php
 create mode 100644 mod/attendance/classes/event/attendance_taken_by_student.php
 create mode 100644 mod/attendance/classes/event/report_viewed.php
 create mode 100644 mod/attendance/classes/event/session_added.php
 create mode 100644 mod/attendance/classes/event/session_deleted.php
 create mode 100644 mod/attendance/classes/event/session_duration_updated.php
 create mode 100644 mod/attendance/classes/event/session_updated.php
 create mode 100644 mod/attendance/classes/event/status_added.php
 create mode 100644 mod/attendance/classes/event/status_removed.php
 create mode 100644 mod/attendance/classes/event/status_updated.php
 create mode 100644 mod/attendance/classes/header.php
 create mode 100644 mod/attendance/classes/manage_page_params.php
 create mode 100644 mod/attendance/classes/notifyqueue.php
 create mode 100644 mod/attendance/classes/observer.php
 create mode 100644 mod/attendance/classes/page_with_filter_controls.php
 create mode 100644 mod/attendance/classes/preferences_page_params.php
 create mode 100644 mod/attendance/classes/report_page_params.php
 create mode 100644 mod/attendance/classes/search/activity.php
 create mode 100644 mod/attendance/classes/sessions_page_params.php
 create mode 100644 mod/attendance/classes/structure.php
 create mode 100644 mod/attendance/classes/summary.php
 create mode 100644 mod/attendance/classes/take_page_params.php
 create mode 100644 mod/attendance/classes/task/auto_mark.php
 create mode 100644 mod/attendance/classes/task/notify.php
 create mode 100644 mod/attendance/classes/view_page_params.php
 create mode 100644 mod/attendance/composer.json
 create mode 100644 mod/attendance/coursesummary.php
 create mode 100644 mod/attendance/db/access.php
 create mode 100644 mod/attendance/db/events.php
 create mode 100644 mod/attendance/db/install.php
 create mode 100644 mod/attendance/db/install.xml
 create mode 100644 mod/attendance/db/services.php
 create mode 100644 mod/attendance/db/tasks.php
 create mode 100644 mod/attendance/db/upgrade.php
 create mode 100644 mod/attendance/db/upgradelib.php
 create mode 100644 mod/attendance/defaultstatus.php
 create mode 100644 mod/attendance/duration_form.php
 create mode 100644 mod/attendance/export.php
 create mode 100644 mod/attendance/export_form.php
 create mode 100644 mod/attendance/externallib.php
 create mode 100644 mod/attendance/index.php
 create mode 100644 mod/attendance/lang/en/attendance.php
 create mode 100644 mod/attendance/lib.php
 create mode 100644 mod/attendance/locallib.php
 create mode 100644 mod/attendance/manage.php
 create mode 100644 mod/attendance/mod_form.php
 create mode 100644 mod/attendance/module.js
 create mode 100644 mod/attendance/password.php
 create mode 100644 mod/attendance/password_ajax.php
 create mode 100644 mod/attendance/pix/ghost.png
 create mode 100644 mod/attendance/pix/icon.gif
 create mode 100644 mod/attendance/pix/icon.svg
 create mode 100644 mod/attendance/pix/key.svg
 create mode 100644 mod/attendance/pix/redo.png
 create mode 100644 mod/attendance/preferences.php
 create mode 100644 mod/attendance/renderables.php
 create mode 100644 mod/attendance/renderer.php
 create mode 100644 mod/attendance/renderhelpers.php
 create mode 100644 mod/attendance/report.php
 create mode 100644 mod/attendance/resetcalendar.php
 create mode 100644 mod/attendance/sessions.php
 create mode 100644 mod/attendance/settings.php
 create mode 100644 mod/attendance/student_attendance_form.php
 create mode 100644 mod/attendance/styles.css
 create mode 100644 mod/attendance/take.php
 create mode 100644 mod/attendance/temp_form.php
 create mode 100644 mod/attendance/tempedit.php
 create mode 100644 mod/attendance/tempedit_form.php
 create mode 100644 mod/attendance/templates/attendance_password_icon.mustache
 create mode 100644 mod/attendance/templates/attendance_password_icon_boost.mustache
 create mode 100644 mod/attendance/tempmerge.php
 create mode 100644 mod/attendance/tempmerge_form.php
 create mode 100644 mod/attendance/tempusers.php
 create mode 100644 mod/attendance/tests/attendance_webservices_test.php
 create mode 100644 mod/attendance/tests/behat/attendance_mod.feature
 create mode 100644 mod/attendance/tests/behat/calendar_features.feature
 create mode 100644 mod/attendance/tests/behat/defaultstatus.feature
 create mode 100644 mod/attendance/tests/behat/extra_features.feature
 create mode 100644 mod/attendance/tests/behat/preferences.feature
 create mode 100644 mod/attendance/tests/behat/report.feature
 create mode 100644 mod/attendance/tests/generator/lib.php
 create mode 100644 mod/attendance/update_form.php
 create mode 100644 mod/attendance/version.php
 create mode 100644 mod/attendance/view.php
 create mode 100644 mod/attendance/warnings.php
 create mode 100644 mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter-debug.js
 create mode 100644 mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter-min.js
 create mode 100644 mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter.js
 create mode 100644 mod/attendance/yui/src/groupfilter/build.json
 create mode 100644 mod/attendance/yui/src/groupfilter/js/groupfilter.js
 create mode 100644 mod/attendance/yui/src/groupfilter/meta/groupfilter.json

diff --git a/mod/attendance/.travis.yml b/mod/attendance/.travis.yml
new file mode 100644
index 0000000..e3b8d9a
--- /dev/null
+++ b/mod/attendance/.travis.yml
@@ -0,0 +1,48 @@
+language: php
+
+dist: precise
+
+sudo: true
+
+addons:
+  postgresql: "9.3"
+  apt:
+    packages:
+      - oracle-java8-installer
+      - oracle-java8-set-default
+
+cache:
+  directories:
+    - $HOME/.composer/cache
+    - $HOME/.npm
+
+php:
+  - 7.1
+env:
+ global:
+  - MOODLE_BRANCH=master
+ matrix:
+  - DB=pgsql
+  - DB=mysqli
+
+before_install:
+  - phpenv config-rm xdebug.ini
+  - nvm install node
+  - cd ../..
+  - composer create-project -n --no-dev --prefer-dist moodlerooms/moodle-plugin-ci ci ^2
+  - export PATH="$(cd ci/bin; pwd):$(cd ci/vendor/bin; pwd):$PATH"
+
+install:
+  - moodle-plugin-ci install
+
+script:
+  - moodle-plugin-ci phplint
+  - moodle-plugin-ci phpcpd
+  - moodle-plugin-ci phpmd
+  - moodle-plugin-ci codechecker
+  - moodle-plugin-ci validate
+  - moodle-plugin-ci savepoints
+  - moodle-plugin-ci mustache
+  - moodle-plugin-ci grunt
+  - moodle-plugin-ci phpunit
+  - moodle-plugin-ci behat
\ No newline at end of file
diff --git a/mod/attendance/CHANGELOG.md b/mod/attendance/CHANGELOG.md
new file mode 100644
index 0000000..918c731
--- /dev/null
+++ b/mod/attendance/CHANGELOG.md
@@ -0,0 +1,39 @@
+### [Unreleased]
+- New Feature: Allow automatic marking using site logs.
+- New Feature: Warn users when attendance drops below threshold.
+- Improvement: Allow default view for teachers to be set at admin level.
+- Improvement: All courses user report now displays as table.
+- Bug fix: Restored attendances do not create calendar events correctly.
+
+### Date:		2017-May-23
+### Release:	2017052301
+
+- New Feature: New site Level/course category report with average course attendance.
+- New Feature: Allow unmarked students to be automatically marked when session closes.
+
+---
+
+### Date:		2017-May-11
+### Release:	2017051104
+
+- New Feature: Allow subnet mask to be set at the attendance session level.
+- New Feature: Allow certain statuses to be hidden from students when self-marking attendance.
+- New Feature: Allow student password to be viewed on session list page.
+- Improvement: Improve usablity by grouping settings on session add form.
+- Bug fix - fix issue with displaying dates when site hosted on Windows server.
+- Bug fix - improve compliance with Moodle coding guidelines.
+
+---
+
+### Date:		2017-Apr-21
+### Release:	2017042100
+
+- Feature: Allow a random self-marking password to be used when creating session.
+- Improvement: #63 use core useridentity setting when showing list of users.
+- Improvement: #258 Add link to attendance on student overview report.
+- Improvement: allow student self-marking to be restricted to the session time.
+- Improvement: allow admin to set default values when teachers creating new sessions.
+- Bug fix - improve compliance with Moodle coding guidelines - phpdocs etc.
+
+---
+
diff --git a/mod/attendance/README.md b/mod/attendance/README.md
new file mode 100644
index 0000000..bd14506
--- /dev/null
+++ b/mod/attendance/README.md
@@ -0,0 +1,14 @@
+#ABOUT [![Build Status](https://travis-ci.org/danmarsden/moodle-mod_attendance.svg?branch=master)](https://travis-ci.org/danmarsden/moodle-mod_attendance)
+
+The Attendance module is supported and maintained by Dan Marsden http://danmarsden.com
+
+The Attendance module was previously developed by
+    Dmitry Pupinin, Novosibirsk, Russia,
+    Artem Andreev, Taganrog, Russia.
+
+#PURPOSE
+The Attendance module allows teachers to maintain a record of attendance, replacing or supplementing a paper-based attendance register.
+It is primarily used in blended-learning environments where students are required to attend classes, lectures and tutorials and allows
+the teacher to track and optionally provide a grade for the students attendance.
+
+Sessions can be configured to allow students to record their own attendance and a range of different reports are available.
diff --git a/mod/attendance/absentee.php b/mod/attendance/absentee.php
new file mode 100644
index 0000000..1af4f23
--- /dev/null
+++ b/mod/attendance/absentee.php
@@ -0,0 +1,140 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance course summary report.
+ *
+ * @package    mod_attendance
+ * @copyright  2017 onwards Dan Marsden http://danmarsden.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->dirroot.'/mod/attendance/lib.php');
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+require_once($CFG->libdir.'/tablelib.php');
+require_once($CFG->libdir.'/coursecatlib.php');
+
+$category = optional_param('category', 0, PARAM_INT);
+$attendancecm = optional_param('id', 0, PARAM_INT);
+$download = optional_param('download', '', PARAM_ALPHA);
+$sort = optional_param('tsort', 'timesent', PARAM_ALPHA);
+
+if (!empty($category)) {
+    $context = context_coursecat::instance($category);
+    $coursecat = coursecat::get($category);
+    $courses = $coursecat->get_courses(array('recursive' => true, 'idonly' => true));
+    $PAGE->set_category_by_id($category);
+    require_login();
+} else if (!empty($attendancecm)) {
+    $cm             = get_coursemodule_from_id('attendance', $attendancecm, 0, false, MUST_EXIST);
+    $course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+    $att            = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+    $courses = array($course->id);
+    $context = context_module::instance($cm->id);
+    require_login($course, false, $cm);
+} else {
+    admin_externalpage_setup('managemodules');
+    $context = context_system::instance();
+    $courses = array(); // Show all courses.
+}
+// Check permissions.
+require_capability('mod/attendance:viewreports', $context);
+
+$exportfilename = 'attendance-absentee.csv';
+
+$PAGE->set_url('/mod/attendance/absentee.php', array('category' => $category, 'id' => $attendancecm));
+
+$PAGE->set_heading($SITE->fullname);
+
+$table = new flexible_table('attendanceabsentee');
+$table->define_baseurl($PAGE->url);
+
+if (!$table->is_downloading($download, $exportfilename)) {
+    if (!empty($attendancecm)) {
+        $pageparams = new mod_attendance_sessions_page_params();
+        $att = new mod_attendance_structure($att, $cm, $course, $context, $pageparams);
+        $output = $PAGE->get_renderer('mod_attendance');
+        $tabs = new attendance_tabs($att, attendance_tabs::TAB_ABSENTEE);
+        echo $output->header();
+        echo $output->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+        echo $output->render($tabs);
+    } else {
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading(get_string('absenteereport', 'mod_attendance'));
+        if (empty($category)) {
+            // Only show tabs if displaying via the admin page.
+            $tabmenu = attendance_print_settings_tabs('absentee');
+            echo $tabmenu;
+        }
+    }
+
+}
+
+$table->define_columns(array('coursename', 'aname', 'userid', 'numtakensessions', 'percent', 'timesent'));
+$table->define_headers(array(get_string('course'),
+    get_string('pluginname', 'attendance'),
+    get_string('user'),
+    get_string('takensessions', 'attendance'),
+    get_string('averageattendance', 'attendance'),
+    get_string('triggered', 'attendance')));
+$table->sortable(true);
+$table->set_attribute('cellspacing', '0');
+$table->set_attribute('class', 'generaltable generalbox');
+$table->show_download_buttons_at(array(TABLE_P_BOTTOM));
+$table->setup();
+
+// Work out direction of sort required.
+$sortcolumns = $table->get_sort_columns();
+// Now do sorting if specified.
+
+$orderby = ' ORDER BY percent ASC';
+if (!empty($sort)) {
+    $direction = ' DESC';
+    if (!empty($sortcolumns[$sort]) && $sortcolumns[$sort] == SORT_ASC) {
+        $direction = ' ASC';
+    }
+    $orderby = " ORDER BY $sort $direction";
+
+}
+
+$records = attendance_get_users_to_notify($courses, $orderby);
+foreach ($records as $record) {
+    if (!$table->is_downloading($download, $exportfilename)) {
+        $url = new moodle_url('/mod/attendance/index.php', array('id' => $record->courseid));
+        $name = html_writer::link($url, $record->coursename);
+    } else {
+        $name = $record->coursename;
+    }
+    $url = new moodle_url('/mod/attendance/view.php', array('studentid' => $record->userid,
+                                                                'id' => $record->cmid, 'view' => ATT_VIEW_ALL));
+    $attendancename = html_writer::link($url, $record->aname);
+
+    $username = html_writer::link($url, fullname($record));
+    $percent = round($record->percent * 100)."%";
+    $timesent = "-";
+    if (!empty($record->timesent)) {
+        $timesent = userdate($record->timesent);
+    }
+
+    $table->add_data(array($name, $attendancename, $username, $record->numtakensessions, $percent, $timesent));
+}
+$table->finish_output();
+
+if (!$table->is_downloading()) {
+    echo $OUTPUT->footer();
+}
\ No newline at end of file
diff --git a/mod/attendance/add_form.php b/mod/attendance/add_form.php
new file mode 100644
index 0000000..cda63d3
--- /dev/null
+++ b/mod/attendance/add_form.php
@@ -0,0 +1,321 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains the forms to add
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * class for displaying add form.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_add_form extends moodleform {
+
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+
+        global $CFG, $USER;
+        $mform    =& $this->_form;
+
+        $course        = $this->_customdata['course'];
+        $cm            = $this->_customdata['cm'];
+        $modcontext    = $this->_customdata['modcontext'];
+
+        $pluginconfig = get_config('attendance');
+
+        $mform->addElement('header', 'general', get_string('addsession', 'attendance'));
+
+        $groupmode = groups_get_activity_groupmode($cm);
+        switch ($groupmode) {
+            case NOGROUPS:
+                $mform->addElement('static', 'sessiontypedescription', get_string('sessiontype', 'attendance'),
+                                  get_string('commonsession', 'attendance'));
+                $mform->addHelpButton('sessiontypedescription', 'sessiontype', 'attendance');
+                $mform->addElement('hidden', 'sessiontype', mod_attendance_structure::SESSION_COMMON);
+                $mform->setType('sessiontype', PARAM_INT);
+                break;
+            case SEPARATEGROUPS:
+                $mform->addElement('static', 'sessiontypedescription', get_string('sessiontype', 'attendance'),
+                                  get_string('groupsession', 'attendance'));
+                $mform->addHelpButton('sessiontypedescription', 'sessiontype', 'attendance');
+                $mform->addElement('hidden', 'sessiontype', mod_attendance_structure::SESSION_GROUP);
+                $mform->setType('sessiontype', PARAM_INT);
+                break;
+            case VISIBLEGROUPS:
+                $radio = array();
+                $radio[] = &$mform->createElement('radio', 'sessiontype', '', get_string('commonsession', 'attendance'),
+                                                  mod_attendance_structure::SESSION_COMMON);
+                $radio[] = &$mform->createElement('radio', 'sessiontype', '', get_string('groupsession', 'attendance'),
+                                                  mod_attendance_structure::SESSION_GROUP);
+                $mform->addGroup($radio, 'sessiontype', get_string('sessiontype', 'attendance'), ' ', false);
+                $mform->setType('sessiontype', PARAM_INT);
+                $mform->addHelpButton('sessiontype', 'sessiontype', 'attendance');
+                $mform->setDefault('sessiontype', mod_attendance_structure::SESSION_COMMON);
+                break;
+        }
+        if ($groupmode == SEPARATEGROUPS or $groupmode == VISIBLEGROUPS) {
+            if ($groupmode == SEPARATEGROUPS and !has_capability('moodle/site:accessallgroups', $modcontext)) {
+                $groups = groups_get_all_groups ($course->id, $USER->id, $cm->groupingid);
+            } else {
+                $groups = groups_get_all_groups($course->id, 0, $cm->groupingid);
+            }
+            if ($groups) {
+                $selectgroups = array();
+                foreach ($groups as $group) {
+                    $selectgroups[$group->id] = $group->name;
+                }
+                $select = &$mform->addElement('select', 'groups', get_string('groups', 'group'), $selectgroups);
+                $select->setMultiple(true);
+                $mform->disabledIf('groups', 'sessiontype', 'eq', mod_attendance_structure::SESSION_COMMON);
+            } else {
+                if ($groupmode == VISIBLEGROUPS) {
+                    $mform->updateElementAttr($radio, array('disabled' => 'disabled'));
+                }
+                $mform->addElement('static', 'groups', get_string('groups', 'group'),
+                                  get_string('nogroups', 'attendance'));
+                if ($groupmode == SEPARATEGROUPS) {
+                    return;
+                }
+            }
+        }
+
+        attendance_form_sessiondate_selector($mform);
+
+        // Select which status set to use.
+        $maxstatusset = attendance_get_max_statusset($this->_customdata['att']->id);
+        if ($maxstatusset > 0) {
+            $opts = array();
+            for ($i = 0; $i <= $maxstatusset; $i++) {
+                $opts[$i] = attendance_get_setname($this->_customdata['att']->id, $i);
+            }
+            $mform->addElement('select', 'statusset', get_string('usestatusset', 'mod_attendance'), $opts);
+        } else {
+            $mform->addElement('hidden', 'statusset', 0);
+            $mform->setType('statusset', PARAM_INT);
+        }
+
+        $mform->addElement('editor', 'sdescription', get_string('description', 'attendance'), array('rows' => 1, 'columns' => 80),
+                            array('maxfiles' => EDITOR_UNLIMITED_FILES, 'noclean' => true, 'context' => $modcontext));
+        $mform->setType('sdescription', PARAM_RAW);
+
+        // For multiple sessions.
+        $mform->addElement('header', 'headeraddmultiplesessions', get_string('addmultiplesessions', 'attendance'));
+        if (!empty($pluginconfig->multisessionexpanded)) {
+            $mform->setExpanded('headeraddmultiplesessions');
+        }
+        $mform->addElement('checkbox', 'addmultiply', '', get_string('repeatasfollows', 'attendance'));
+        $mform->addHelpButton('addmultiply', 'createmultiplesessions', 'attendance');
+
+        $sdays = array();
+        if ($CFG->calendar_startwday === '0') { // Week start from sunday.
+            $sdays[] =& $mform->createElement('checkbox', 'Sun', '', get_string('sunday', 'calendar'));
+        }
+        $sdays[] =& $mform->createElement('checkbox', 'Mon', '', get_string('monday', 'calendar'));
+        $sdays[] =& $mform->createElement('checkbox', 'Tue', '', get_string('tuesday', 'calendar'));
+        $sdays[] =& $mform->createElement('checkbox', 'Wed', '', get_string('wednesday', 'calendar'));
+        $sdays[] =& $mform->createElement('checkbox', 'Thu', '', get_string('thursday', 'calendar'));
+        $sdays[] =& $mform->createElement('checkbox', 'Fri', '', get_string('friday', 'calendar'));
+        $sdays[] =& $mform->createElement('checkbox', 'Sat', '', get_string('saturday', 'calendar'));
+        if ($CFG->calendar_startwday !== '0') { // Week start from sunday.
+            $sdays[] =& $mform->createElement('checkbox', 'Sun', '', get_string('sunday', 'calendar'));
+        }
+        $mform->addGroup($sdays, 'sdays', get_string('repeaton', 'attendance'), array('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'), true);
+        $mform->disabledIf('sdays', 'addmultiply', 'notchecked');
+
+        $period = array(1 => 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
+            21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36);
+        $periodgroup = array();
+        $periodgroup[] =& $mform->createElement('select', 'period', '', $period, false, true);
+        $periodgroup[] =& $mform->createElement('static', 'perioddesc', '', get_string('week', 'attendance'));
+        $mform->addGroup($periodgroup, 'periodgroup', get_string('repeatevery', 'attendance'), array(' '), false);
+        $mform->disabledIf('periodgroup', 'addmultiply', 'notchecked');
+
+        $mform->addElement('date_selector', 'sessionenddate', get_string('repeatuntil', 'attendance'));
+        $mform->disabledIf('sessionenddate', 'addmultiply', 'notchecked');
+
+        $mform->addElement('hidden', 'coursestartdate', $course->startdate);
+        $mform->setType('coursestartdate', PARAM_INT);
+
+        $mform->addElement('hidden', 'previoussessiondate', 0);
+        $mform->setType('previoussessiondate', PARAM_INT);
+
+        // Students can mark own attendance.
+        if (!empty(get_config('attendance', 'studentscanmark'))) {
+            $mform->addElement('header', 'headerstudentmarking', get_string('studentmarking', 'attendance'), true);
+            if (!empty($pluginconfig->studentrecordingexpanded)) {
+                $mform->setExpanded('headerstudentmarking');
+            }
+            $mform->addElement('checkbox', 'studentscanmark', '', get_string('studentscanmark', 'attendance'));
+            $mform->addHelpButton('studentscanmark', 'studentscanmark', 'attendance');
+
+            $options = array(
+                ATTENDANCE_AUTOMARK_DISABLED => get_string('noautomark', 'attendance'),
+                ATTENDANCE_AUTOMARK_ALL => get_string('automarkall', 'attendance'),
+                ATTENDANCE_AUTOMARK_CLOSE => get_string('automarkclose', 'attendance'));
+
+            $mform->addElement('select', 'automark', get_string('automark', 'attendance'), $options);
+            $mform->setType('automark', PARAM_INT);
+            $mform->addHelpButton('automark', 'automark', 'attendance');
+            $mform->disabledif('automark', 'studentscanmark', 'notchecked');
+            $mform->setDefault('automark', $this->_customdata['att']->automark);
+
+            $mgroup = array();
+
+            $mgroup[] = & $mform->createElement('text', 'studentpassword', get_string('studentpassword', 'attendance'));
+            $mgroup[] = & $mform->createElement('checkbox', 'randompassword', '', get_string('randompassword', 'attendance'));
+            $mform->addGroup($mgroup, 'passwordgrp', get_string('passwordgrp', 'attendance'), array(' '), false);
+
+            $mform->setType('studentpassword', PARAM_TEXT);
+            $mform->disabledif('studentpassword', 'studentscanmark', 'notchecked');
+
+            $mform->addHelpButton('passwordgrp', 'passwordgrp', 'attendance');
+            $mform->disabledif('randompassword', 'studentscanmark', 'notchecked');
+            $mform->disabledif('studentpassword', 'randompassword', 'checked');
+            $mform->disabledif('studentpassword', 'automark', 'eq', ATTENDANCE_AUTOMARK_ALL);
+            $mform->disabledif('randompassword', 'automark', 'eq', ATTENDANCE_AUTOMARK_ALL);
+            if (isset($pluginconfig->studentscanmark_default)) {
+                $mform->setDefault('studentscanmark', $pluginconfig->studentscanmark_default);
+            }
+            if (isset($pluginconfig->randompassword_default)) {
+                $mform->setDefault('randompassword', $pluginconfig->randompassword_default);
+            }
+            if (isset($pluginconfig->automark_default)) {
+                $mform->setDefault('automark', $pluginconfig->automark_default);
+            }
+            $mgroup2 = array();
+            $mgroup2[] = & $mform->createElement('text', 'subnet', get_string('requiresubnet', 'attendance'));
+            if (empty(get_config('attendance', 'subnetactivitylevel'))) {
+                $mform->setDefault('subnet', get_config('attendance', 'subnet'));
+            } else {
+                $mform->setDefault('subnet', $this->_customdata['att']->subnet);
+            }
+
+            $mgroup2[] = & $mform->createElement('checkbox', 'usedefaultsubnet', get_string('usedefaultsubnet', 'attendance'));
+            $mform->setDefault('usedefaultsubnet', 1);
+            $mform->setType('subnet', PARAM_TEXT);
+
+            $mform->addGroup($mgroup2, 'subnetgrp', get_string('requiresubnet', 'attendance'), array(' '), false);
+            $mform->setAdvanced('subnetgrp');
+            $mform->addHelpButton('subnetgrp', 'requiresubnet', 'attendance');
+
+            $mform->disabledif('usedefaultsubnet', 'studentscanmark', 'notchecked');
+            $mform->disabledif('subnet', 'studentscanmark', 'notchecked');
+            $mform->disabledif('subnet', 'usedefaultsubnet', 'checked');
+        } else {
+            $mform->addElement('hidden', 'studentscanmark', '0');
+            $mform->settype('studentscanmark', PARAM_INT);
+            $mform->addElement('hidden', 'automark', '0');
+            $mform->setType('automark', PARAM_INT);
+            $mform->addElement('hidden', 'subnet', '');
+            $mform->setType('subnet', PARAM_TEXT);
+        }
+
+        $this->add_action_buttons(true, get_string('add', 'attendance'));
+    }
+
+    /**
+     * Perform minimal validation on the settings form
+     * @param array $data
+     * @param array $files
+     */
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        $sesstarttime = $data['sestime']['starthour'] * HOURSECS + $data['sestime']['startminute'] * MINSECS;
+        $sesendtime = $data['sestime']['endhour'] * HOURSECS + $data['sestime']['endminute'] * MINSECS;
+        if ($sesendtime < $sesstarttime) {
+            $errors['sestime'] = get_string('invalidsessionendtime', 'attendance');
+        }
+
+        if (!empty($data['addmultiply']) && $data['sessiondate'] != 0 && $data['sessionenddate'] != 0 &&
+                $data['sessionenddate'] < $data['sessiondate']) {
+            $errors['sessionenddate'] = get_string('invalidsessionenddate', 'attendance');
+        }
+
+        if ($data['sessiontype'] == mod_attendance_structure::SESSION_GROUP and empty($data['groups'])) {
+            $errors['groups'] = get_string('errorgroupsnotselected', 'attendance');
+        }
+
+        $addmulti = isset($data['addmultiply']) ? (int)$data['addmultiply'] : 0;
+        if (($addmulti != 0) && (!array_key_exists('sdays', $data) || empty($data['sdays']))) {
+            $data['sdays'] = array();
+            $errors['sdays'] = get_string('required', 'attendance');
+        }
+        if (isset($data['sdays'])) {
+            if (!$this->checkweekdays($data['sessiondate'], $data['sessionenddate'], $data['sdays']) ) {
+                $errors['sdays'] = get_string('checkweekdays', 'attendance');
+            }
+        }
+        if ($addmulti && ceil(($data['sessionenddate'] - $data['sessiondate']) / YEARSECS) > 1) {
+            $errors['sessionenddate'] = get_string('timeahead', 'attendance');
+        }
+
+        if ($data['sessiondate'] < $data['coursestartdate'] && $data['sessiondate'] != $data['previoussessiondate']) {
+            $errors['sessiondate'] = get_string('priorto', 'attendance',
+                userdate($data['coursestartdate'], get_string('strftimedmy', 'attendance')));
+            $this->_form->setConstant('previoussessiondate', $data['sessiondate']);
+        }
+
+        return $errors;
+    }
+
+    /**
+     * Check weekdays function.
+     * @param int $sessiondate
+     * @param int $sessionenddate
+     * @param int $sdays
+     * @return bool
+     */
+    private function checkweekdays($sessiondate, $sessionenddate, $sdays) {
+
+        $found = false;
+
+        $daysofweek = array(0 => "Sun", 1 => "Mon", 2 => "Tue", 3 => "Wed", 4 => "Thu", 5 => "Fri", 6 => "Sat");
+        $start = new DateTime( date("Y-m-d", $sessiondate) );
+        $interval = new DateInterval('P1D');
+        $end = new DateTime( date("Y-m-d", $sessionenddate) );
+        $end->add( new DateInterval('P1D') );
+
+        $period = new DatePeriod($start, $interval, $end);
+        foreach ($period as $date) {
+            if (!$found) {
+                foreach ($sdays as $name => $value) {
+                    $key = array_search($name, $daysofweek);
+                    if ($date->format("w") == $key) {
+                        $found = true;
+                        break;
+                    }
+                }
+            }
+        }
+
+        return $found;
+    }
+}
diff --git a/mod/attendance/attendance.php b/mod/attendance/attendance.php
new file mode 100644
index 0000000..c6290da
--- /dev/null
+++ b/mod/attendance/attendance.php
@@ -0,0 +1,103 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Prints attendance info for particular user
+ *
+ * @package   mod_attendance
+ * @copyright  2014 Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+require_once(dirname(__FILE__).'/student_attendance_form.php');
+
+$pageparams = new mod_attendance_sessions_page_params();
+
+// Check that the required parameters are present.
+$id = required_param('sessid', PARAM_INT);
+
+$attforsession = $DB->get_record('attendance_sessions', array('id' => $id), '*', MUST_EXIST);
+$attendance = $DB->get_record('attendance', array('id' => $attforsession->attendanceid), '*', MUST_EXIST);
+$cm = get_coursemodule_from_instance('attendance', $attendance->id, 0, false, MUST_EXIST);
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+// Require the user is logged in.
+require_login($course, true, $cm);
+
+if (!attendance_can_student_mark($attforsession)) {
+    // TODO: should we add a log message here? - student has got to submit page but cannot save attendance (time ran out?)
+    redirect(new moodle_url('/mod/attendance/view.php', array('id' => $cm->id)));
+    exit;
+}
+
+// Check if subnet is set and if the user is in the allowed range.
+if (!empty($attforsession->subnet) && !address_in_subnet(getremoteaddr(), $attforsession->subnet)) {
+    notice(get_string('subnetwrong', 'attendance'));
+    exit; // Notice calls this anyway.
+}
+
+$pageparams->sessionid = $id;
+$att = new mod_attendance_structure($attendance, $cm, $course, $PAGE->context, $pageparams);
+
+// Require that a session key is passed to this page.
+require_sesskey();
+
+// Create the form.
+$mform = new mod_attendance_student_attendance_form(null,
+        array('course' => $course, 'cm' => $cm, 'modcontext' => $PAGE->context, 'session' => $attforsession, 'attendance' => $att));
+
+$PAGE->set_url($att->url_sessions());
+
+if ($mform->is_cancelled()) {
+    // The user cancelled the form, so redirect them to the view page.
+    $url = new moodle_url('/mod/attendance/view.php', array('id' => $cm->id));
+    redirect($url);
+} else if ($fromform = $mform->get_data()) {
+    // Check if password required and if set correctly.
+    if (!empty($attforsession->studentpassword) &&
+        $attforsession->studentpassword !== $fromform->studentpassword) {
+
+        $url = new moodle_url('/mod/attendance/attendance.php', array('sessid' => $id, 'sesskey' => sesskey()));
+        redirect($url, get_string('incorrectpassword', 'mod_attendance'), null, \core\output\notification::NOTIFY_ERROR);
+    }
+
+    if (!empty($fromform->status)) {
+        $success = $att->take_from_student($fromform);
+
+        $url = new moodle_url('/mod/attendance/view.php', array('id' => $cm->id));
+        if ($success) {
+            // Redirect back to the view page for the block.
+            redirect($url);
+        } else {
+            print_error ('attendance_already_submitted', 'mod_attendance', $url);
+        }
+    }
+
+    // The form did not validate correctly so we will set it to display the data they submitted.
+    $mform->set_data($fromform);
+}
+
+$PAGE->set_title($course->shortname. ": ".$att->name);
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add($att->name);
+
+$output = $PAGE->get_renderer('mod_attendance');
+echo $output->header();
+$mform->display();
+echo $output->footer();
diff --git a/mod/attendance/backup/moodle2/backup_attendance_activity_task.class.php b/mod/attendance/backup/moodle2/backup_attendance_activity_task.class.php
new file mode 100644
index 0000000..3e7703f
--- /dev/null
+++ b/mod/attendance/backup/moodle2/backup_attendance_activity_task.class.php
@@ -0,0 +1,71 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class {@link backup_attendance_activity_task} definition
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/attendance/backup/moodle2/backup_attendance_stepslib.php');
+
+/**
+ * Provides all the settings and steps to perform one complete backup of attendance activity
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class backup_attendance_activity_task extends backup_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        $this->add_step(new backup_attendance_activity_structure_step('attendance_structure', 'attendance.xml'));
+    }
+
+    /**
+     * Code the transformations to perform in the activity in
+     * order to get transportable (encoded) links
+     * @param string $content
+     * @return string
+     */
+    static public function encode_content_links($content) {
+        global $CFG;
+
+        $base = preg_quote($CFG->wwwroot, "/");
+
+        // Link to attendance view by moduleid.
+        $search = "/(" . $base . "\/mod\/attendance\/view.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@ATTENDANCEVIEWBYID*$2@$', $content);
+
+        // Link to attendance view by moduleid and studentid.
+        $search = "/(" . $base . "\/mod\/attendance\/view.php\?id\=)([0-9]+)\&studentid\=([0-9]+)/";
+        $content = preg_replace($search, '$@ATTENDANCEVIEWBYIDSTUD*$2*$3@$', $content);
+
+        return $content;
+    }
+}
diff --git a/mod/attendance/backup/moodle2/backup_attendance_stepslib.php b/mod/attendance/backup/moodle2/backup_attendance_stepslib.php
new file mode 100644
index 0000000..2124a5c
--- /dev/null
+++ b/mod/attendance/backup/moodle2/backup_attendance_stepslib.php
@@ -0,0 +1,109 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Defines all the backup steps that will be used by {@link backup_attendance_activity_task}
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Defines the complete attendance structure for backup, with file and id annotations
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class backup_attendance_activity_structure_step extends backup_activity_structure_step {
+
+    /**
+     * Define the structure of the backup workflow.
+     *
+     * @return restore_path_element $structure
+     */
+    protected function define_structure() {
+
+        // Are we including userinfo?
+        $userinfo = $this->get_setting_value('userinfo');
+
+        // XML nodes declaration - non-user data.
+        $attendance = new backup_nested_element('attendance', array('id'), array(
+            'name', 'intro', 'introformat', 'grade', 'showsessiondetails', 'sessiondetailspos', 'subnet'));
+
+        $statuses = new backup_nested_element('statuses');
+        $status  = new backup_nested_element('status', array('id'), array(
+            'acronym', 'description', 'grade', 'studentavailability', 'setunmarked', 'visible', 'deleted', 'setnumber'));
+
+        $warnings = new backup_nested_element('warnings');
+        $warning  = new backup_nested_element('warning', array('id'), array('warningpercent', 'warnafter',
+            'maxwarn', 'emailuser', 'emailsubject', 'emailcontent', 'emailcontentformat', 'thirdpartyemails'));
+
+        $sessions = new backup_nested_element('sessions');
+        $session  = new backup_nested_element('session', array('id'), array(
+            'groupid', 'sessdate', 'duration', 'lasttaken', 'lasttakenby',
+            'timemodified', 'description', 'descriptionformat', 'studentscanmark', 'studentpassword',
+            'subnet', 'automark', 'automarkcompleted', 'statusset', 'caleventid'));
+
+        // XML nodes declaration - user data.
+        $logs = new backup_nested_element('logs');
+        $log  = new backup_nested_element('log', array('id'), array(
+            'sessionid', 'studentid', 'statusid', 'statusset', 'timetaken', 'takenby', 'remarks'));
+
+        // Build the tree in the order needed for restore.
+        $attendance->add_child($statuses);
+        $statuses->add_child($status);
+
+        $attendance->add_child($warnings);
+        $warnings->add_child($warning);
+
+        $attendance->add_child($sessions);
+        $sessions->add_child($session);
+
+        $session->add_child($logs);
+        $logs->add_child($log);
+
+        // Data sources - non-user data.
+
+        $attendance->set_source_table('attendance', array('id' => backup::VAR_ACTIVITYID));
+
+        $status->set_source_table('attendance_statuses', array('attendanceid' => backup::VAR_PARENTID));
+
+        $warning->set_source_table('attendance_warning',
+            array('idnumber' => backup::VAR_PARENTID));
+
+        $session->set_source_table('attendance_sessions', array('attendanceid' => backup::VAR_PARENTID));
+
+        // Data sources - user related data.
+        if ($userinfo) {
+            $log->set_source_table('attendance_log', array('sessionid' => backup::VAR_PARENTID));
+        }
+
+        // Id annotations.
+        $session->annotate_ids('user', 'lasttakenby');
+        $session->annotate_ids('group', 'groupid');
+        $log->annotate_ids('user', 'studentid');
+        $log->annotate_ids('user', 'takenby');
+
+        // File annotations.
+        $session->annotate_files('mod_attendance', 'session', 'id');
+
+        // Return the root element (workshop), wrapped into standard activity structure.
+        return $this->prepare_activity_structure($attendance);
+    }
+}
diff --git a/mod/attendance/backup/moodle2/restore_attendance_activity_task.class.php b/mod/attendance/backup/moodle2/restore_attendance_activity_task.class.php
new file mode 100644
index 0000000..28c1ec1
--- /dev/null
+++ b/mod/attendance/backup/moodle2/restore_attendance_activity_task.class.php
@@ -0,0 +1,113 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Define all the restore steps that will be used by the restore_attendance_activity_task
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/attendance/backup/moodle2/restore_attendance_stepslib.php');
+
+/**
+ * Attendance restore task that provides all the settings and steps to perform one complete restore of the activity
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class restore_attendance_activity_task extends restore_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        $this->add_step(new restore_attendance_activity_structure_step('attendance_structure', 'attendance.xml'));
+    }
+
+    /**
+     * Define the contents in the activity that must be
+     * processed by the link decoder
+     */
+    static public function define_decode_contents() {
+        $contents = array();
+
+        $contents[] = new restore_decode_content('attendance_sessions',
+                          array('description'), 'attendance_session');
+
+        return $contents;
+    }
+
+    /**
+     * Define the decoding rules for links belonging
+     * to the activity to be executed by the link decoder
+     */
+    static public function define_decode_rules() {
+        $rules = array();
+
+        $rules[] = new restore_decode_rule('ATTENDANCEVIEWBYID',
+                    '/mod/attendance/view.php?id=$1', 'course_module');
+        $rules[] = new restore_decode_rule('ATTENDANCEVIEWBYIDSTUD',
+                    '/mod/attendance/view.php?id=$1&studentid=$2', array('course_module', 'user'));
+
+        // Older style backups using previous plugin name.
+        $rules[] = new restore_decode_rule('ATTFORBLOCKVIEWBYID',
+            '/mod/attendance/view.php?id=$1', 'course_module');
+        $rules[] = new restore_decode_rule('ATTFORBLOCKVIEWBYIDSTUD',
+            '/mod/attendance/view.php?id=$1&studentid=$2', array('course_module', 'user'));
+
+        return $rules;
+
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * attendance logs. It must return one array
+     * of {@link restore_log_rule} objects
+     */
+    static public function define_restore_log_rules() {
+        $rules = array();
+
+        // TODO: log restore.
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * course logs. It must return one array
+     * of {@link restore_log_rule} objects
+     *
+     * Note this rules are applied when restoring course logs
+     * by the restore final task, but are defined here at
+     * activity level. All them are rules not linked to any module instance (cmid = 0)
+     */
+    static public function define_restore_log_rules_for_course() {
+        $rules = array();
+
+        return $rules;
+    }
+}
diff --git a/mod/attendance/backup/moodle2/restore_attendance_stepslib.php b/mod/attendance/backup/moodle2/restore_attendance_stepslib.php
new file mode 100644
index 0000000..8a11e11
--- /dev/null
+++ b/mod/attendance/backup/moodle2/restore_attendance_stepslib.php
@@ -0,0 +1,179 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Structure step to restore one attendance activity
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Define all the restore steps that will be used by the restore_attendance_activity_task
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class restore_attendance_activity_structure_step extends restore_activity_structure_step {
+
+    /**
+     * Define the structure of the restore workflow.
+     *
+     * @return restore_path_element $structure
+     */
+    protected function define_structure() {
+
+        $paths = array();
+
+        $userinfo = $this->get_setting_value('userinfo'); // Are we including userinfo?
+
+        // XML interesting paths - non-user data.
+        $paths[] = new restore_path_element('attendance', '/activity/attendance');
+
+        $paths[] = new restore_path_element('attendance_status',
+                       '/activity/attendance/statuses/status');
+
+        $paths[] = new restore_path_element('attendance_warning',
+            '/activity/attendance/warnings/warning');
+
+        $paths[] = new restore_path_element('attendance_session',
+                       '/activity/attendance/sessions/session');
+
+        // End here if no-user data has been selected.
+        if (!$userinfo) {
+            return $this->prepare_activity_structure($paths);
+        }
+
+        // XML interesting paths - user data.
+        $paths[] = new restore_path_element('attendance_log',
+                       '/activity/attendance/sessions/session/logs/log');
+
+        // Return the paths wrapped into standard activity structure.
+        return $this->prepare_activity_structure($paths);
+    }
+
+    /**
+     * Process an attendance restore.
+     *
+     * @param object $data The data in object form
+     * @return void
+     */
+    protected function process_attendance($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $data->course = $this->get_courseid();
+
+        // Insert the attendance record.
+        $newitemid = $DB->insert_record('attendance', $data);
+        // Immediately after inserting "activity" record, call this.
+        $this->apply_activity_instance($newitemid);
+    }
+
+    /**
+     * Process attendance status restore
+     * @param object $data The data in object form
+     * @return void
+     */
+    protected function process_attendance_status($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->attendanceid = $this->get_new_parentid('attendance');
+
+        $newitemid = $DB->insert_record('attendance_statuses', $data);
+        $this->set_mapping('attendance_status', $oldid, $newitemid);
+    }
+
+    /**
+     * Process attendance warning restore
+     * @param object $data The data in object form
+     * @return void
+     */
+    protected function process_attendance_warning($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        $data->idnumber = $this->get_new_parentid('attendance');
+
+        $DB->insert_record('attendance_warning', $data);
+    }
+
+    /**
+     * Process attendance session restore
+     * @param object $data The data in object form
+     * @return void
+     */
+    protected function process_attendance_session($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->attendanceid = $this->get_new_parentid('attendance');
+        $data->groupid = $this->get_mappingid('group', $data->groupid);
+        $data->sessdate = $this->apply_date_offset($data->sessdate);
+        $data->lasttaken = $this->apply_date_offset($data->lasttaken);
+        $data->lasttakenby = $this->get_mappingid('user', $data->lasttakenby);
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+        $data->caleventid = $this->get_mappingid('event', $data->caleventid);
+
+        $newitemid = $DB->insert_record('attendance_sessions', $data);
+        $data->id = $newitemid;
+        $this->set_mapping('attendance_session', $oldid, $newitemid, true);
+
+        // Create Calendar event.
+        attendance_create_calendar_event($data);
+    }
+
+    /**
+     * Process attendance log restore
+     * @param object $data The data in object form
+     * @return void
+     */
+    protected function process_attendance_log($data) {
+        global $DB;
+
+        $data = (object)$data;
+
+        $data->sessionid = $this->get_mappingid('attendance_session', $data->sessionid);
+        $data->studentid = $this->get_mappingid('user', $data->studentid);
+        $data->statusid = $this->get_mappingid('attendance_status', $data->statusid);
+        $statusset = explode(',', $data->statusset);
+        foreach ($statusset as $st) {
+            $st = $this->get_mappingid('attendance_status', $st);
+        }
+        $data->statusset = implode(',', $statusset);
+        $data->timetaken = $this->apply_date_offset($data->timetaken);
+        $data->takenby = $this->get_mappingid('user', $data->takenby);
+
+        $DB->insert_record('attendance_log', $data);
+    }
+
+    /**
+     * Once the database tables have been fully restored, restore the files
+     * @return void
+     */
+    protected function after_execute() {
+        $this->add_related_files('mod_attendance', 'session', 'attendance_session');
+    }
+}
diff --git a/mod/attendance/calendar.js b/mod/attendance/calendar.js
new file mode 100644
index 0000000..9170a0f
--- /dev/null
+++ b/mod/attendance/calendar.js
@@ -0,0 +1,110 @@
+/* global YUI */
+// eslint-disable-next-line new-cap
+YUI().use('yui2-container', 'yui2-calendar', function(Y) {
+    var YAHOO = Y.YUI2;
+
+    document.body.className += ' yui-skin-sam';
+
+    YAHOO.util.Event.onDOMReady(function() {
+
+        var Event = YAHOO.util.Event,
+            Dom = YAHOO.util.Dom,
+            dialog, calendar;
+
+        var showBtn = Dom.get("show");
+
+        Event.on(showBtn, "click", function() {
+            /**
+             * Reset handler and set current day.
+             */
+            function resetHandler() {
+                calendar.cfg.setProperty("pagedate", calendar.today);
+                calendar.render();
+            }
+
+            /**
+             * Close dialog.
+             */
+            function closeHandler() {
+                dialog.hide();
+            }
+
+            // Lazy Dialog Creation - Wait to create the Dialog, and setup document click listeners,
+            // until the first time the button is clicked.
+            if (!dialog) {
+
+                // Hide Calendar if we click anywhere in the document other than the calendar.
+                Event.on(document, "click", function(e) {
+                    var el = Event.getTarget(e);
+                    var dialogEl = dialog.element;
+                    if (el != dialogEl && !Dom.isAncestor(dialogEl, el) && el != showBtn && !Dom.isAncestor(showBtn, el)) {
+                        dialog.hide();
+                    }
+                });
+
+                dialog = new YAHOO.widget.Dialog("attcalendarcontainer", {
+                    visible: false,
+                    context: ["show", "tl", "bl"],
+                    buttons: [{text: M.util.get_string('caltoday', 'attendance'), handler: resetHandler, isDefault: true},
+                             {text: M.util.get_string('calclose', 'attendance'), handler: closeHandler}],
+                    draggable: false,
+                    close: false
+                });
+                dialog.setHeader('');
+                dialog.setBody('<div id="cal"></div>');
+                dialog.render(document.body);
+
+                dialog.showEvent.subscribe(function() {
+                    if (YAHOO.env.ua.ie) {
+                        // Since we're hiding the table using yui-overlay-hidden, we
+                        // want to let the dialog know that the content size has changed, when
+                        // shown.
+                        dialog.fireEvent("changeContent");
+                    }
+                });
+            }
+
+            // Lazy Calendar Creation - Wait to create the Calendar until the first time the button is clicked.
+            if (!calendar) {
+
+                calendar = new YAHOO.widget.Calendar("cal", {
+                    iframe: false,          // Turn iframe off, since container has iframe support.
+                    // eslint-disable-next-line camelcase
+                    hide_blank_weeks: true  // Enable, to demonstrate how we handle changing height, using changeContent.
+                });
+
+                calendar.cfg.setProperty("start_weekday", M.attendance.cal_start_weekday);
+                calendar.cfg.setProperty("MONTHS_LONG", M.attendance.cal_months);
+                calendar.cfg.setProperty("WEEKDAYS_SHORT", M.attendance.cal_week_days);
+                calendar.select(new Date(M.attendance.cal_cur_date * 1000));
+                calendar.render();
+
+                calendar.selectEvent.subscribe(function() {
+                    if (calendar.getSelectedDates().length > 0) {
+
+                        Dom.get("curdate").value = calendar.getSelectedDates()[0] / 1000;
+
+                        Dom.get("currentdate").submit();
+                    }
+                    dialog.hide();
+                });
+
+                calendar.renderEvent.subscribe(function() {
+                    // Tell Dialog it's contents have changed, which allows
+                    // container to redraw the underlay (for IE6/Safari2).
+                    dialog.fireEvent("changeContent");
+                });
+            }
+
+            var seldate = calendar.getSelectedDates();
+
+            if (seldate.length > 0) {
+                // Set the pagedate to show the selected date if it exists.
+                calendar.cfg.setProperty("pagedate", seldate[0]);
+                calendar.render();
+            }
+
+            dialog.show();
+        });
+    });
+});
diff --git a/mod/attendance/classes/add_warning_form.php b/mod/attendance/classes/add_warning_form.php
new file mode 100644
index 0000000..c21ad5e
--- /dev/null
+++ b/mod/attendance/classes/add_warning_form.php
@@ -0,0 +1,113 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Contains class mod_attendance_add_warning_form
+ *
+ * @package   mod_attendance
+ * @copyright 2017 Dan Marsden
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Class mod_attendance_add_warning_form
+ *
+ * @package   mod_attendance
+ * @copyright 2017 Dan Marsden
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_add_warning_form extends moodleform {
+    /**
+     * Form definition
+     */
+    public function definition() {
+        global $COURSE;
+        $mform = $this->_form;
+
+        // Load global defaults.
+        $config = get_config('attendance');
+
+        $options = array();
+        for ($i = 1; $i <= 100; $i++) {
+            $options[$i] = "$i%";
+        }
+        $mform->addElement('select', 'warningpercent', get_string('warningpercent', 'mod_attendance'), $options);
+        $mform->addHelpButton('warningpercent', 'warningpercent', 'mod_attendance');
+        $mform->setType('warningpercent', PARAM_INT);
+        $mform->setDefault('warningpercent', $config->warningpercent);
+
+        $options = array();
+        for ($i = 1; $i <= 50; $i++) {
+            $options[$i] = "$i";
+        }
+        $mform->addElement('select', 'warnafter', get_string('warnafter', 'mod_attendance'), $options);
+        $mform->addHelpButton('warnafter', 'warnafter', 'mod_attendance');
+        $mform->setType('warnafter', PARAM_INT);
+        $mform->setDefault('warnafter', $config->warnafter);
+
+        $mform->addElement('select', 'maxwarn', get_string('maxwarn', 'mod_attendance'), $options);
+        $mform->addHelpButton('maxwarn', 'maxwarn', 'mod_attendance');
+        $mform->setType('maxwarn', PARAM_INT);
+        $mform->setDefault('maxwarn', $config->maxwarn);
+
+        $mform->addElement('checkbox', 'emailuser', get_string('emailuser', 'mod_attendance'));
+        $mform->addHelpButton('emailuser', 'emailuser', 'mod_attendance');
+        $mform->setDefault('emailuser', $config->emailuser);
+
+        $mform->addElement('text', 'emailsubject', get_string('emailsubject', 'mod_attendance'), array('size' => '64'));
+        $mform->setType('emailsubject', PARAM_TEXT);
+        $mform->addRule('emailsubject', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');
+        $mform->addHelpButton('emailsubject', 'emailsubject', 'mod_attendance');
+        $mform->setDefault('emailsubject', $config->emailsubject);
+
+        $mform->addElement('editor', 'emailcontent', get_string('emailcontent', 'mod_attendance'), null, null);
+        $mform->setDefault('emailcontent', array('text' => format_text($config->emailcontent)));
+        $mform->setType('emailcontent', PARAM_RAW);
+        $mform->addHelpButton('emailcontent', 'emailcontent', 'mod_attendance');
+
+        $users = get_users_by_capability(context_course::instance($COURSE->id), 'mod/attendance:warningemails');
+        $options = array();
+        foreach ($users as $user) {
+            $options[$user->id] = fullname($user);
+        }
+
+        $select = $mform->addElement('searchableselector', 'thirdpartyemails',
+            get_string('thirdpartyemails', 'mod_attendance'), $options);
+        $mform->setType('thirdpartyemails', PARAM_TEXT);
+        $mform->addHelpButton('thirdpartyemails', 'thirdpartyemails', 'mod_attendance');
+        $select->setMultiple(true);
+
+        // Need to set hidden elements when adding default options.
+        $mform->addElement('hidden', 'idnumber', 0); // Default options use 0 as the idnumber.
+        $mform->setType('idnumber', PARAM_INT);
+
+        $mform->addElement('hidden', 'notid', 0); // The id of warning record.
+        $mform->setType('notid', PARAM_INT);
+
+        $mform->addElement('hidden', 'id', $this->_customdata['id']); // The id of course module record if attendance level.
+        $mform->setType('id', PARAM_INT);
+
+        if (!empty($this->_customdata['notid'])) {
+            $btnstring = get_string('update', 'attendance');
+        } else {
+            $btnstring = get_string('add', 'attendance');
+        }
+        $this->add_action_buttons(true, $btnstring);
+
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/classes/attendance_webservices_handler.php b/mod/attendance/classes/attendance_webservices_handler.php
new file mode 100644
index 0000000..0b0d079
--- /dev/null
+++ b/mod/attendance/classes/attendance_webservices_handler.php
@@ -0,0 +1,158 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Web Services for Attendance plugin.
+ *
+ * @package    mod_attendance
+ * @copyright  2015 Caio Bressan Doneda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/../locallib.php');
+require_once(dirname(__FILE__).'/structure.php');
+require_once(dirname(__FILE__).'/../../../lib/sessionlib.php');
+require_once(dirname(__FILE__).'/../../../lib/datalib.php');
+
+/**
+ * Class attendance_handler
+ * @copyright  2015 Caio Bressan Doneda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_handler {
+    /**
+     * For this user, this method searches in all the courses that this user has permission to take attendance,
+     * looking for today sessions and returns the courses with the sessions.
+     * @param int $userid
+     * @return array
+     */
+    public static function get_courses_with_today_sessions($userid) {
+        $usercourses = enrol_get_users_courses($userid);
+        $attendanceinstance = get_all_instances_in_courses('attendance', $usercourses);
+
+        $coursessessions = array();
+
+        foreach ($attendanceinstance as $attendance) {
+            $context = context_course::instance($attendance->course);
+            if (has_capability('mod/attendance:takeattendances', $context, $userid)) {
+                $course = $usercourses[$attendance->course];
+                $course->attendance_instance = array();
+
+                $att = new stdClass();
+                $att->id = $attendance->id;
+                $att->course = $attendance->course;
+                $att->name = $attendance->name;
+                $att->grade = $attendance->grade;
+
+                $cm = new stdClass();
+                $cm->id = $attendance->coursemodule;
+
+                $att = new mod_attendance_structure($att, $cm, $course, $context);
+                $course->attendance_instance[$att->id] = array();
+                $course->attendance_instance[$att->id]['name'] = $att->name;
+                $todaysessions = $att->get_today_sessions();
+
+                if (!empty($todaysessions)) {
+                    $course->attendance_instance[$att->id]['today_sessions'] = $todaysessions;
+                    $coursessessions[$course->id] = $course;
+                }
+            }
+        }
+
+        return self::prepare_data($coursessessions);
+    }
+
+    /**
+     * Prepare data.
+     *
+     * @param array $coursessessions
+     * @return array
+     */
+    private static function prepare_data($coursessessions) {
+        $courses = array();
+
+        foreach ($coursessessions as $c) {
+            $courses[$c->id] = new stdClass();
+            $courses[$c->id]->shortname = $c->shortname;
+            $courses[$c->id]->fullname = $c->fullname;
+            $courses[$c->id]->attendance_instances = $c->attendance_instance;
+        }
+
+        return $courses;
+    }
+
+    /**
+     * For this session, returns all the necessary data to take an attendance.
+     *
+     * @param int $sessionid
+     * @return mixed
+     */
+    public static function get_session($sessionid) {
+        global $DB;
+
+        $session = $DB->get_record('attendance_sessions', array('id' => $sessionid));
+        $session->courseid = $DB->get_field('attendance', 'course', array('id' => $session->attendanceid));
+        $session->statuses = attendance_get_statuses($session->attendanceid, true, $session->statusset);
+        $coursecontext = context_course::instance($session->courseid);
+        $session->users = get_enrolled_users($coursecontext, 'mod/attendance:canbelisted', 0, 'u.id, u.firstname, u.lastname');
+        $session->attendance_log = array();
+
+        if ($attendancelog = $DB->get_records('attendance_log', array('sessionid' => $sessionid),
+                                              '', 'studentid, statusid, remarks, id')) {
+            $session->attendance_log = $attendancelog;
+        }
+
+        return $session;
+    }
+
+    /**
+     * Update user status
+     *
+     * @param int $sessionid
+     * @param int $studentid
+     * @param int $takenbyid
+     * @param int $statusid
+     * @param int $statusset
+     */
+    public static function update_user_status($sessionid, $studentid, $takenbyid, $statusid, $statusset) {
+        global $DB;
+
+        $record = new stdClass();
+        $record->statusset = $statusset;
+        $record->sessionid = $sessionid;
+        $record->timetaken = time();
+        $record->takenby = $takenbyid;
+        $record->statusid = $statusid;
+        $record->studentid = $studentid;
+
+        if ($attendancelog = $DB->get_record('attendance_log', array('sessionid' => $sessionid, 'studentid' => $studentid))) {
+            $record->id = $attendancelog->id;
+            $DB->update_record('attendance_log', $record);
+        } else {
+            $DB->insert_record('attendance_log', $record);
+        }
+
+        if ($attendancesession = $DB->get_record('attendance_sessions', array('id' => $sessionid))) {
+            $attendancesession->lasttaken = time();
+            $attendancesession->lasttakenby = $takenbyid;
+            $attendancesession->timemodified = time();
+
+            $DB->update_record('attendance_sessions', $attendancesession);
+        }
+    }
+}
diff --git a/mod/attendance/classes/calendar_helpers.php b/mod/attendance/classes/calendar_helpers.php
new file mode 100644
index 0000000..9b5b8bf
--- /dev/null
+++ b/mod/attendance/classes/calendar_helpers.php
@@ -0,0 +1,155 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Calendar related functions
+ *
+ * @package    mod_attendance
+ * @copyright  2016 Vyacheslav Strelkov
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/../../../calendar/lib.php');
+
+/**
+ * Create single calendar event bases on session data.
+ *
+ * @param stdClass $session initial sessions to take data from
+ * @return bool result of calendar event creation
+ */
+function attendance_create_calendar_event(&$session) {
+    global $DB;
+
+    // We don't want to create multiple calendar events for 1 session.
+    if ($session->caleventid) {
+        return $session->caleventid;
+    }
+    if (empty(get_config('attendance', 'enablecalendar'))) {
+        // Calendar events are not used.
+        return true;
+    }
+
+    $attendance = $DB->get_record('attendance', array('id' => $session->attendanceid));
+
+    $caleventdata = new stdClass();
+    $caleventdata->name           = $attendance->name;
+    $caleventdata->courseid       = $attendance->course;
+    $caleventdata->groupid        = $session->groupid;
+    $caleventdata->instance       = $session->attendanceid;
+    $caleventdata->timestart      = $session->sessdate;
+    $caleventdata->timeduration   = $session->duration;
+    $caleventdata->eventtype      = 'attendance';
+    $caleventdata->timemodified   = time();
+    $caleventdata->modulename     = 'attendance';
+
+    $calevent = new stdClass();
+    if ($calevent = calendar_event::create($caleventdata, false)) {
+        $session->caleventid = $calevent->id;
+        $DB->set_field('attendance_sessions', 'caleventid', $session->caleventid, array('id' => $session->id));
+        return true;
+    } else {
+        return false;
+    }
+}
+
+/**
+ * Create multiple calendar events based on sessions data.
+ *
+ * @param array $sessionsids array of sessions ids
+ */
+function attendance_create_calendar_events($sessionsids) {
+    global $DB;
+
+    if (empty(get_config('attendance', 'enablecalendar'))) {
+        // Calendar events are not used.
+        return true;
+    }
+
+    $sessions = $DB->get_recordset_list('attendance_sessions', 'id', $sessionsids);
+
+    foreach ($sessions as $session) {
+        attendance_create_calendar_event($session);
+        if ($session->caleventid) {
+            $DB->update_record('attendance_sessions', $session);
+        }
+    }
+}
+
+/**
+ * Update calendar event duration and date
+ *
+ * @param int $caleventid calendar event id
+ * @param int $timeduration duration of the event
+ * @param int $timestart start time of the event
+ * @return bool result of updating
+ */
+function attendance_update_calendar_event($caleventid, $timeduration, $timestart) {
+
+    if (empty(get_config('attendance', 'enablecalendar'))) {
+        // Calendar events are not used.
+        return true;
+    }
+
+    $caleventdata = new stdClass();
+    $caleventdata->timeduration   = $timeduration;
+    $caleventdata->timestart      = $timestart;
+    $caleventdata->timemodified   = time();
+
+    $calendarevent = calendar_event::load($caleventid);
+    if ($calendarevent) {
+        return $calendarevent->update($caleventdata) ? true : false;
+    } else {
+        return false;
+    }
+}
+
+/**
+ * Delete calendar events for sessions
+ *
+ * @param array $sessionsids array of sessions ids
+ * @return bool result of updating
+ */
+function attendance_delete_calendar_events($sessionsids) {
+    global $DB;
+    $caleventsids = attendance_existing_calendar_events_ids($sessionsids);
+    if ($caleventsids) {
+        $DB->delete_records_list('event', 'id', $caleventsids);
+    }
+
+    $sessions = $DB->get_recordset_list('attendance_sessions', 'id', $sessionsids);
+    foreach ($sessions as $session) {
+        $session->caleventid = 0;
+        $DB->update_record('attendance_sessions', $session);
+    }
+}
+
+/**
+ * Check if calendar events are created for given sessions
+ *
+ * @param array $sessionsids of sessions ids
+ * @return array | bool array of existing calendar events or false if none found
+ */
+function attendance_existing_calendar_events_ids($sessionsids) {
+    global $DB;
+    $caleventsids = array_keys($DB->get_records_list('attendance_sessions', 'id', $sessionsids, '', 'caleventid'));
+    $existingcaleventsids = array_filter($caleventsids);
+    if (! empty($existingcaleventsids)) {
+        return $existingcaleventsids;
+    } else {
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/classes/event/attendance_taken.php b/mod/attendance/classes/event/attendance_taken.php
new file mode 100644
index 0000000..5c9385e
--- /dev/null
+++ b/mod/attendance/classes/event/attendance_taken.php
@@ -0,0 +1,113 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance is taken.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance is taken.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *    string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_taken extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_log';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' took attendance with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventtaken', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/take.php', array('id' => $this->contextinstanceid,
+                                                                 'sessionid' => $this->other['sessionid'],
+                                                                 'grouptype' => $this->other['grouptype']));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'taken', $this->get_url(),
+            '', $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        if (empty($this->other['sessionid'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\attendance_taken must specify sessionid.');
+        }
+        parent::validate_data();
+    }
+}
diff --git a/mod/attendance/classes/event/attendance_taken_by_student.php b/mod/attendance/classes/event/attendance_taken_by_student.php
new file mode 100644
index 0000000..3335cdf
--- /dev/null
+++ b/mod/attendance/classes/event/attendance_taken_by_student.php
@@ -0,0 +1,113 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance is taken.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance is taken.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_taken_by_student extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'attendance_log';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'Student with id ' . $this->userid . ' took attendance with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventtakenbystudent', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/take.php', array('id' => $this->contextinstanceid,
+                                                                 'sessionid' => $this->other['sessionid'],
+                                                                 'grouptype' => $this->other['grouptype']));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'taken', $this->get_url(),
+            '', $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        if (empty($this->other['sessionid'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\attendance_taken must specify sessionid.');
+        }
+        parent::validate_data();
+    }
+}
diff --git a/mod/attendance/classes/event/report_viewed.php b/mod/attendance/classes/event/report_viewed.php
new file mode 100644
index 0000000..6b64a50
--- /dev/null
+++ b/mod/attendance/classes/event/report_viewed.php
@@ -0,0 +1,99 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when a attendance report is viewed.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when a attendance report is viewed.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class report_viewed extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' viewed attendance report with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventreportviewed', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/report.php', array('id' => $this->objectid));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'report', 'report.php?id=' . $this->objectid,
+            $this->objectid, $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+}
diff --git a/mod/attendance/classes/event/session_added.php b/mod/attendance/classes/event/session_added.php
new file mode 100644
index 0000000..d734345
--- /dev/null
+++ b/mod/attendance/classes/event/session_added.php
@@ -0,0 +1,111 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance session is added.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance session is added
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class session_added extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_sessions';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' added a session to the instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventsessionadded', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/manage.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'report', 'report.php?id=' . $this->objectid,
+            $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        if (empty($this->other['info'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\session_added must specify info.');
+        }
+        parent::validate_data();
+    }
+}
diff --git a/mod/attendance/classes/event/session_deleted.php b/mod/attendance/classes/event/session_deleted.php
new file mode 100644
index 0000000..576d1a2
--- /dev/null
+++ b/mod/attendance/classes/event/session_deleted.php
@@ -0,0 +1,111 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance session is deleted.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance session is deleted.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class session_deleted extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_sessions';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' deleted session with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventsessiondeleted', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/manage.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'sessions deleted', $this->get_url(),
+            $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        if (empty($this->other['info'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\session_deleted must specify info.');
+        }
+        parent::validate_data();
+    }
+}
diff --git a/mod/attendance/classes/event/session_duration_updated.php b/mod/attendance/classes/event/session_duration_updated.php
new file mode 100644
index 0000000..0e43364
--- /dev/null
+++ b/mod/attendance/classes/event/session_duration_updated.php
@@ -0,0 +1,111 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance session duration is updated.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance session duration is updated.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class session_duration_updated extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_sessions';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' updated attendance session duration with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventdurationupdated', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/manage.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'sessions duration updated', $this->get_url(),
+            $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        if (empty($this->other['info'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\session_duration_updated must specify info.');
+        }
+        parent::validate_data();
+    }
+}
diff --git a/mod/attendance/classes/event/session_updated.php b/mod/attendance/classes/event/session_updated.php
new file mode 100644
index 0000000..efa5e62
--- /dev/null
+++ b/mod/attendance/classes/event/session_updated.php
@@ -0,0 +1,119 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance session is updated.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance session is updated.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class session_updated extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_sessions';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' updated attendance session with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventsessionupdated', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/sessions.php', array('id' => $this->contextinstanceid,
+                                                                     'sessionid' => $this->other['sessionid'],
+                                                                     'action' => $this->other['action']));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'session updated', $this->get_url(),
+            $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        if (empty($this->other['info'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\session_updated must specify info.');
+        }
+        if (empty($this->other['sessionid'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\session_updated must specify sessionid.');
+        }
+        if (empty($this->other['action'])) {
+            throw new \coding_exception('The event mod_attendance\\event\\session_updated must specify action.');
+        }
+        parent::validate_data();
+    }
+}
diff --git a/mod/attendance/classes/event/status_added.php b/mod/attendance/classes/event/status_added.php
new file mode 100644
index 0000000..b411370
--- /dev/null
+++ b/mod/attendance/classes/event/status_added.php
@@ -0,0 +1,99 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance status is added.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance status is added.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class status_added extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_statuses';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' updated attendance status with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventstatusadded', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/preferences.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'status added', $this->get_url(),
+            $this->other['acronym'].': '.$this->other['description'].' ('.$this->other['grade'].')', $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+}
diff --git a/mod/attendance/classes/event/status_removed.php b/mod/attendance/classes/event/status_removed.php
new file mode 100644
index 0000000..5f3814b
--- /dev/null
+++ b/mod/attendance/classes/event/status_removed.php
@@ -0,0 +1,101 @@
+<?php
+// This file is part of the Attendance module for Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance status is updated.
+ *
+ * @package    mod_attendance
+ * @copyright  2015 onwards, University of Nottingham
+ * @author     Barry Oosthuizen <barry.oosthuizen@nottingham.ac.uk>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance status is removed.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class status_removed extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_statuses';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' deleted attendance status "' . $this->data['other']['acronym'] .
+               ' - ' . $this->data['other']['description'] . '" with instanceid ' .
+            $this->objectid . '';
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('statusdeleted', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/preferences.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'status removed', $this->get_url(),
+            $this->other['acronym'] . ' - ' . $this->other['description'], $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+}
diff --git a/mod/attendance/classes/event/status_updated.php b/mod/attendance/classes/event/status_updated.php
new file mode 100644
index 0000000..b7ed879
--- /dev/null
+++ b/mod/attendance/classes/event/status_updated.php
@@ -0,0 +1,99 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains an event for when an attendance status is updated.
+ *
+ * @package    mod_attendance
+ * @copyright  2014 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\event;
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event for when an attendance status is updated.
+ *
+ * @property-read array $other {
+ *      Extra information about event properties.
+ *
+ *      string mode Mode of the report viewed.
+ * }
+ * @package    mod_attendance
+ * @since      Moodle 2.7
+ * @copyright  2013 onwards Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class status_updated extends \core\event\base {
+
+    /**
+     * Init method.
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'attendance_statuses';
+    }
+
+    /**
+     * Returns non-localised description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return 'User with id ' . $this->userid . ' updated attendance status with instanceid ' .
+            $this->objectid;
+    }
+
+    /**
+     * Returns localised general event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('eventstatusupdated', 'mod_attendance');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/attendance/preferences.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Replace add_to_log() statement.
+     *
+     * @return array of parameters to be passed to legacy add_to_log() function.
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'attendance', 'status updated', $this->get_url(),
+            '', $this->contextinstanceid);
+    }
+
+    /**
+     * Get objectid mapping
+     *
+     * @return array of parameters for object mapping.
+     */
+    public static function get_objectid_mapping() {
+        return array('db' => 'attendance', 'restore' => 'attendance');
+    }
+
+}
diff --git a/mod/attendance/classes/header.php b/mod/attendance/classes/header.php
new file mode 100644
index 0000000..612e6a3
--- /dev/null
+++ b/mod/attendance/classes/header.php
@@ -0,0 +1,80 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_header
+ *
+ * @package    mod_attendance
+ * @author     Daniel Thee Roperto <daniel.roperto@catalyst-au.net>
+ * @copyright  2017 Catalyst IT Australia {@link http://www.catalyst-au.net}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Used to render the page header.
+ *
+ * @package    mod_attendance
+ * @author     Daniel Thee Roperto <daniel.roperto@catalyst-au.net>
+ * @copyright  2017 Catalyst IT Australia {@link http://www.catalyst-au.net}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_header implements renderable {
+    /** @var mod_attendance_structure */
+    private $attendance;
+
+    /** @var string */
+    private $title;
+
+    /**
+     * mod_attendance_header constructor.
+     *
+     * @param mod_attendance_structure $attendance
+     * @param null                     $title
+     */
+    public function __construct(mod_attendance_structure $attendance, $title = null) {
+        $this->attendance = $attendance;
+        $this->title = $title;
+    }
+
+    /**
+     * Gets the attendance data.
+     *
+     * @return mod_attendance_structure
+     */
+    public function get_attendance() {
+        return $this->attendance;
+    }
+
+    /**
+     * Gets the title. If title was not provided, use the module name.
+     *
+     * @return string
+     */
+    public function get_title() {
+        return is_null($this->title) ? $this->attendance->name : $this->title;
+    }
+
+    /**
+     * Checks if the header should be rendered.
+     *
+     * @return bool
+     */
+    public function should_render() {
+        return !is_null($this->title) || !empty($this->attendance->intro);
+    }
+}
diff --git a/mod/attendance/classes/manage_page_params.php b/mod/attendance/classes/manage_page_params.php
new file mode 100644
index 0000000..48e5a54
--- /dev/null
+++ b/mod/attendance/classes/manage_page_params.php
@@ -0,0 +1,47 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_manage_page_params
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+/**
+ * stores constants/data passed depending on view.
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_manage_page_params extends mod_attendance_page_with_filter_controls {
+    /**
+     * mod_attendance_manage_page_params constructor.
+     */
+    public function  __construct() {
+        $this->selectortype = mod_attendance_page_with_filter_controls::SELECTOR_SESS_TYPE;
+    }
+
+    /**
+     * Get page params.
+     * @return array
+     */
+    public function get_significant_params() {
+        return array();
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/classes/notifyqueue.php b/mod/attendance/classes/notifyqueue.php
new file mode 100644
index 0000000..63eee58
--- /dev/null
+++ b/mod/attendance/classes/notifyqueue.php
@@ -0,0 +1,93 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Notify queue
+ *
+ * @package   mod_attendance
+ * @copyright 2015 Antonio Carlos Mariani <antonio.c.mariani@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Notify Queue class
+ *
+ * @copyright 2015 Antonio Carlos Mariani <antonio.c.mariani@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_notifyqueue {
+
+    /**
+     * Show (print) the pending messages and clear them
+     */
+    public static function show() {
+        global $SESSION, $OUTPUT;
+
+        if (isset($SESSION->mod_attendance_notifyqueue)) {
+            foreach ($SESSION->mod_attendance_notifyqueue as $message) {
+                echo $OUTPUT->notification($message->message, 'notify'.$message->type);
+            }
+            unset($SESSION->mod_attendance_notifyqueue);
+        }
+    }
+
+    /**
+     * Queue a text as a problem message to be shown latter by show() method
+     *
+     * @param string $message a text with a message
+     */
+    public static function notify_problem($message) {
+        self::queue_message($message, \core\output\notification::NOTIFY_PROBLEM);
+    }
+
+    /**
+     * Queue a text as a simple message to be shown latter by show() method
+     *
+     * @param string $message a text with a message
+     */
+    public static function notify_message($message) {
+        self::queue_message($message, \core\output\notification::NOTIFY_MESSAGE);
+    }
+
+    /**
+     * queue a text as a suceess message to be shown latter by show() method
+     *
+     * @param string $message a text with a message
+     */
+    public static function notify_success($message) {
+        self::queue_message($message, \core\output\notification::NOTIFY_SUCCESS);
+    }
+
+    /**
+     * queue a text as a message of some type to be shown latter by show() method
+     *
+     * @param string $message a text with a message
+     * @param string $messagetype one of the \core\output\notification messages ('message', 'suceess' or 'problem')
+     */
+    private static function queue_message($message, $messagetype=\core\output\notification::NOTIFY_MESSAGE) {
+        global $SESSION;
+
+        if (!isset($SESSION->mod_attendance_notifyqueue)) {
+            $SESSION->mod_attendance_notifyqueue = array();
+        }
+        $m = new stdclass();
+        $m->type = $messagetype;
+        $m->message = $message;
+        $SESSION->mod_attendance_notifyqueue[] = $m;
+    }
+}
diff --git a/mod/attendance/classes/observer.php b/mod/attendance/classes/observer.php
new file mode 100644
index 0000000..150a540
--- /dev/null
+++ b/mod/attendance/classes/observer.php
@@ -0,0 +1,57 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Event observers supported by this module
+ *
+ * @package    mod_attendance
+ * @copyright  2017 Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Event observers supported by this module
+ *
+ * @package    mod_attendance
+ * @copyright  2017 Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_observer {
+
+    /**
+     * Observer for the event course_content_deleted - delete all attendance stuff.
+     *
+     * @param \core\event\course_content_deleted $event
+     */
+    public static function course_content_deleted(\core\event\course_content_deleted $event) {
+        global $DB;
+
+        $attids = array_keys($DB->get_records('attendance', array('course' => $event->objectid), '', 'id'));
+        $sessids = array_keys($DB->get_records_list('attendance_sessions', 'attendanceid', $attids, '', 'id'));
+        if (attendance_existing_calendar_events_ids($sessids)) {
+            attendance_delete_calendar_events($sessids);
+        }
+        if ($sessids) {
+            $DB->delete_records_list('attendance_log', 'sessionid', $sessids);
+        }
+        if ($attids) {
+            $DB->delete_records_list('attendance_statuses', 'attendanceid', $attids);
+            $DB->delete_records_list('attendance_sessions', 'attendanceid', $attids);
+        }
+    }
+}
diff --git a/mod/attendance/classes/page_with_filter_controls.php b/mod/attendance/classes/page_with_filter_controls.php
new file mode 100644
index 0000000..b88ff57
--- /dev/null
+++ b/mod/attendance/classes/page_with_filter_controls.php
@@ -0,0 +1,282 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_page_with_filter_controls
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Base filter controls class - overridden by different views where needed.
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_page_with_filter_controls {
+    /** No filter. */
+    const SELECTOR_NONE         = 1;
+
+    /** Filter by group. */
+    const SELECTOR_GROUP        = 2;
+
+    /** Filter by session type. */
+    const SELECTOR_SESS_TYPE    = 3;
+
+    /** Common. */
+    const SESSTYPE_COMMON       = 0;
+
+    /** All. */
+    const SESSTYPE_ALL          = -1;
+
+    /** No value. */
+    const SESSTYPE_NO_VALUE     = -2;
+
+    /** @var int current view mode */
+    public $view;
+
+    /** @var int $view and $curdate specify displaed date range */
+    public $curdate;
+
+    /** @var int start date of displayed date range */
+    public $startdate;
+
+    /** @var int end date of displayed date range */
+    public $enddate;
+
+    /** @var int type. */
+    public $selectortype        = self::SELECTOR_NONE;
+
+    /** @var int default view. */
+    protected $defaultview;
+
+    /** @var stdClass course module record. */
+    private $cm;
+
+    /** @var array  */
+    private $sessgroupslist;
+
+    /** @var int */
+    private $sesstype;
+
+    /**
+     * initialise stuff.
+     *
+     * @param stdClass $cm
+     */
+    public function init($cm) {
+        $this->cm = $cm;
+        if (empty($this->defaultview)) {
+            $this->defaultview = get_config('attendance', 'defaultview');
+        }
+        $this->init_view();
+        $this->init_curdate();
+        $this->init_start_end_date();
+    }
+
+    /**
+     * Initialise the view.
+     */
+    private function init_view() {
+        global $SESSION;
+
+        if (isset($this->view)) {
+            $SESSION->attcurrentattview[$this->cm->course] = $this->view;
+        } else if (isset($SESSION->attcurrentattview[$this->cm->course])) {
+            $this->view = $SESSION->attcurrentattview[$this->cm->course];
+        } else {
+            $this->view = $this->defaultview;
+        }
+    }
+
+    /**
+     * Initialise the current date.
+     */
+    private function init_curdate() {
+        global $SESSION;
+
+        if (isset($this->curdate)) {
+            $SESSION->attcurrentattdate[$this->cm->course] = $this->curdate;
+        } else if (isset($SESSION->attcurrentattdate[$this->cm->course])) {
+            $this->curdate = $SESSION->attcurrentattdate[$this->cm->course];
+        } else {
+            $this->curdate = time();
+        }
+    }
+
+    /**
+     * Initialise the end date.
+     */
+    public function init_start_end_date() {
+        global $CFG;
+
+        // HOURSECS solves issue for weeks view with Daylight saving time and clocks adjusting by one hour backward.
+        $date = usergetdate($this->curdate + HOURSECS);
+        $mday = $date['mday'];
+        $wday = $date['wday'] - $CFG->calendar_startwday;
+        if ($wday < 0) {
+            $wday += 7;
+        }
+        $mon = $date['mon'];
+        $year = $date['year'];
+
+        switch ($this->view) {
+            case ATT_VIEW_DAYS:
+                $this->startdate = make_timestamp($year, $mon, $mday);
+                $this->enddate = make_timestamp($year, $mon, $mday + 1);
+                break;
+            case ATT_VIEW_WEEKS:
+                $this->startdate = make_timestamp($year, $mon, $mday - $wday);
+                $this->enddate = make_timestamp($year, $mon, $mday + 7 - $wday) - 1;
+                break;
+            case ATT_VIEW_MONTHS:
+                $this->startdate = make_timestamp($year, $mon);
+                $this->enddate = make_timestamp($year, $mon + 1);
+                break;
+            case ATT_VIEW_ALLPAST:
+                $this->startdate = 1;
+                $this->enddate = time();
+                break;
+            case ATT_VIEW_ALL:
+                $this->startdate = 0;
+                $this->enddate = 0;
+                break;
+            case ATT_VIEW_SUMMARY:
+                $this->startdate = 1;
+                $this->enddate = 1;
+                break;
+        }
+    }
+
+    /**
+     * Calculate the session group list type.
+     */
+    private function calc_sessgroupslist_sesstype() {
+        global $SESSION;
+
+        if (!array_key_exists('attsessiontype', $SESSION)) {
+            $SESSION->attsessiontype = array($this->cm->course => self::SESSTYPE_ALL);
+        } else if (!array_key_exists($this->cm->course, $SESSION->attsessiontype)) {
+            $SESSION->attsessiontype[$this->cm->course] = self::SESSTYPE_ALL;
+        }
+
+        $group = optional_param('group', self::SESSTYPE_NO_VALUE, PARAM_INT);
+        if ($this->selectortype == self::SELECTOR_SESS_TYPE) {
+            if ($group > self::SESSTYPE_NO_VALUE) {
+                $SESSION->attsessiontype[$this->cm->course] = $group;
+                if ($group > self::SESSTYPE_ALL) {
+                    // Set activegroup in $SESSION.
+                    groups_get_activity_group($this->cm, true);
+                } else {
+                    // Reset activegroup in $SESSION.
+                    unset($SESSION->activegroup[$this->cm->course][VISIBLEGROUPS][$this->cm->groupingid]);
+                    unset($SESSION->activegroup[$this->cm->course]['aag'][$this->cm->groupingid]);
+                    unset($SESSION->activegroup[$this->cm->course][SEPARATEGROUPS][$this->cm->groupingid]);
+                }
+                $this->sesstype = $group;
+            } else {
+                $this->sesstype = $SESSION->attsessiontype[$this->cm->course];
+            }
+        } else if ($this->selectortype == self::SELECTOR_GROUP) {
+            if ($group == 0) {
+                $SESSION->attsessiontype[$this->cm->course] = self::SESSTYPE_ALL;
+                $this->sesstype = self::SESSTYPE_ALL;
+            } else if ($group > 0) {
+                $SESSION->attsessiontype[$this->cm->course] = $group;
+                $this->sesstype = $group;
+            } else {
+                $this->sesstype = $SESSION->attsessiontype[$this->cm->course];
+            }
+        }
+
+        if (is_null($this->sessgroupslist)) {
+            $this->calc_sessgroupslist();
+        }
+        // For example, we set SESSTYPE_ALL but user can access only to limited set of groups.
+        if (!array_key_exists($this->sesstype, $this->sessgroupslist)) {
+            reset($this->sessgroupslist);
+            $this->sesstype = key($this->sessgroupslist);
+        }
+    }
+
+    /**
+     * Calculate the session group list
+     */
+    private function calc_sessgroupslist() {
+        global $USER, $PAGE;
+
+        $this->sessgroupslist = array();
+        $groupmode = groups_get_activity_groupmode($this->cm);
+        if ($groupmode == NOGROUPS) {
+            return;
+        }
+
+        if ($groupmode == VISIBLEGROUPS or has_capability('moodle/site:accessallgroups', $PAGE->context)) {
+            $allowedgroups = groups_get_all_groups($this->cm->course, 0, $this->cm->groupingid);
+        } else {
+            $allowedgroups = groups_get_all_groups($this->cm->course, $USER->id, $this->cm->groupingid);
+        }
+
+        if ($allowedgroups) {
+            if ($groupmode == VISIBLEGROUPS or has_capability('moodle/site:accessallgroups', $PAGE->context)) {
+                $this->sessgroupslist[self::SESSTYPE_ALL] = get_string('all', 'attendance');
+            }
+            // Show Common groups always.
+            $this->sessgroupslist[self::SESSTYPE_COMMON] = get_string('commonsessions', 'attendance');
+            foreach ($allowedgroups as $group) {
+                $this->sessgroupslist[$group->id] = get_string('group') . ': ' . format_string($group->name);
+            }
+        }
+    }
+
+    /**
+     * Return the session groups.
+     *
+     * @return array
+     */
+    public function get_sess_groups_list() {
+        if (is_null($this->sessgroupslist)) {
+            $this->calc_sessgroupslist_sesstype();
+        }
+
+        return $this->sessgroupslist;
+    }
+
+    /**
+     * Get the current session type.
+     *
+     * @return int
+     */
+    public function get_current_sesstype() {
+        if (is_null($this->sesstype)) {
+            $this->calc_sessgroupslist_sesstype();
+        }
+
+        return $this->sesstype;
+    }
+
+    /**
+     * Set the current session type.
+     *
+     * @param int $sesstype
+     */
+    public function set_current_sesstype($sesstype) {
+        $this->sesstype = $sesstype;
+    }
+}
diff --git a/mod/attendance/classes/preferences_page_params.php b/mod/attendance/classes/preferences_page_params.php
new file mode 100644
index 0000000..9be3a29
--- /dev/null
+++ b/mod/attendance/classes/preferences_page_params.php
@@ -0,0 +1,73 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_preferences_page_params
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * base preferences page param class
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_preferences_page_params {
+    /** Add */
+    const ACTION_ADD              = 1;
+    /** Delete */
+    const ACTION_DELETE           = 2;
+    /** Hide */
+    const ACTION_HIDE             = 3;
+    /** Show */
+    const ACTION_SHOW             = 4;
+    /** Save */
+    const ACTION_SAVE             = 5;
+
+    /** @var int view mode of taking attendance page*/
+    public $action;
+
+    /** @var int */
+    public $statusid;
+
+    /** @var array */
+    public $statusset;
+
+    /**
+     * Get params for this page.
+     *
+     * @return array
+     */
+    public function get_significant_params() {
+        $params = array();
+
+        if (isset($this->action)) {
+            $params['action'] = $this->action;
+        }
+        if (isset($this->statusid)) {
+            $params['statusid'] = $this->statusid;
+        }
+        if (isset($this->statusset)) {
+            $params['statusset'] = $this->statusset;
+        }
+
+        return $params;
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/classes/report_page_params.php b/mod/attendance/classes/report_page_params.php
new file mode 100644
index 0000000..a0d995c
--- /dev/null
+++ b/mod/attendance/classes/report_page_params.php
@@ -0,0 +1,86 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_report_page_params
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * contains specific data/functions for report_page.
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_report_page_params extends mod_attendance_page_with_filter_controls {
+    /** @var int */
+    public $group;
+    /** @var int */
+    public $sort;
+    /** @var int */
+    public $showsessiondetails;
+    /** @var int */
+    public $sessiondetailspos;
+
+    /**
+     * mod_attendance_report_page_params constructor.
+     */
+    public function  __construct() {
+        $this->selectortype = self::SELECTOR_GROUP;
+    }
+
+    /**
+     * Initialise params.
+     *
+     * @param stdClass $cm
+     */
+    public function init($cm) {
+        parent::init($cm);
+
+        if (!isset($this->group)) {
+            $this->group = $this->get_current_sesstype() > 0 ? $this->get_current_sesstype() : 0;
+        }
+        if (!isset($this->sort)) {
+            $this->sort = ATT_SORT_DEFAULT;
+        }
+    }
+
+    /**
+     * Get params for this page.
+     * @return array
+     */
+    public function get_significant_params() {
+        $params = array();
+
+        if ($this->sort != ATT_SORT_DEFAULT) {
+            $params['sort'] = $this->sort;
+        }
+
+        if (empty($this->showsessiondetails)) {
+            $params['showsessiondetails'] = 0;
+        }
+
+        if ($this->sessiondetailspos != 'left') {
+            $params['sessiondetailspos'] = $this->sessiondetailspos;
+        }
+
+        return $params;
+    }
+}
diff --git a/mod/attendance/classes/search/activity.php b/mod/attendance/classes/search/activity.php
new file mode 100644
index 0000000..d71ce49
--- /dev/null
+++ b/mod/attendance/classes/search/activity.php
@@ -0,0 +1,37 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Search area for mod_attendance activities.
+ *
+ * @package    mod_attendance
+ * @copyright  2016 Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\search;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Search area for mod_attendance activities.
+ *
+ * @package    mod_attendance
+ * @copyright  2016 Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class activity extends \core_search\base_activity {
+}
diff --git a/mod/attendance/classes/sessions_page_params.php b/mod/attendance/classes/sessions_page_params.php
new file mode 100644
index 0000000..a638811
--- /dev/null
+++ b/mod/attendance/classes/sessions_page_params.php
@@ -0,0 +1,66 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+
+/**
+ * Class definition for mod_attendance_sessions_page_params
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * stores constants/data used by sessions page params.
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_sessions_page_params {
+    /**
+     *  Add Session.
+     */
+    const ACTION_ADD               = 1;
+
+    /**
+     *  Update Session.
+     */
+    const ACTION_UPDATE            = 2;
+
+    /**
+     * Delete Session
+     */
+    const ACTION_DELETE            = 3;
+
+    /**
+     *  Delete selected Sessions.
+     */
+    const ACTION_DELETE_SELECTED   = 4;
+
+    /**
+     *  Change duration of a session.
+     */
+    const ACTION_CHANGE_DURATION   = 5;
+
+    /**
+     *  Delete a hidden session.
+     */
+    const ACTION_DELETE_HIDDEN     = 6;
+
+    /** @var int view mode of taking attendance page*/
+    public $action;
+}
\ No newline at end of file
diff --git a/mod/attendance/classes/structure.php b/mod/attendance/classes/structure.php
new file mode 100644
index 0000000..ea379e5
--- /dev/null
+++ b/mod/attendance/classes/structure.php
@@ -0,0 +1,1235 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_structure
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__) . '/calendar_helpers.php');
+
+/**
+ * Main class with all Attendance related info.
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_structure {
+    /** Common sessions */
+    const SESSION_COMMON        = 0;
+    /** Group sessions */
+    const SESSION_GROUP         = 1;
+
+    /** @var stdclass course module record */
+    public $cm;
+
+    /** @var stdclass course record */
+    public $course;
+
+    /** @var stdclass context object */
+    public $context;
+
+    /** @var int attendance instance identifier */
+    public $id;
+
+    /** @var string attendance activity name */
+    public $name;
+
+    /** @var float number (10, 5) unsigned, the maximum grade for attendance */
+    public $grade;
+
+    /** @var int last time attendance was modified - used for global search */
+    public $timemodified;
+
+    /** @var string required field for activity modules and searching */
+    public $intro;
+
+    /** @var int format of the intro (see above) */
+    public $introformat;
+
+    /** @var array current page parameters */
+    public $pageparams;
+
+    /** @var string subnets (IP range) for student self selection. */
+    public $subnet;
+
+    /** @var string subnets (IP range) for student self selection. */
+    public $automark;
+
+    /** @var boolean flag set when automarking is complete. */
+    public $automarkcompleted;
+
+    /** @var int Define if session details should be shown in reports */
+    public $showsessiondetails;
+
+    /** @var int Position for the session detail columns related to summary columns.*/
+    public $sessiondetailspos;
+
+    /** @var int groupmode  */
+    private $groupmode;
+
+    /** @var  array */
+    private $statuses;
+    /** @var  array Cache list of all statuses (not just one used by current session). */
+    private $allstatuses;
+
+    /** @var array of sessionid. */
+    private $sessioninfo = array();
+
+    /**
+     * Initializes the attendance API instance using the data from DB
+     *
+     * Makes deep copy of all passed records properties. Replaces integer $course attribute
+     * with a full database record (course should not be stored in instances table anyway).
+     *
+     * @param stdClass $dbrecord Attandance instance data from {attendance} table
+     * @param stdClass $cm       Course module record as returned by {@link get_coursemodule_from_id()}
+     * @param stdClass $course   Course record from {course} table
+     * @param stdClass $context  The context of the workshop instance
+     * @param stdClass $pageparams
+     */
+    public function __construct(stdClass $dbrecord, stdClass $cm, stdClass $course, stdClass $context=null, $pageparams=null) {
+        global $DB;
+
+        foreach ($dbrecord as $field => $value) {
+            if (property_exists('mod_attendance_structure', $field)) {
+                $this->{$field} = $value;
+            } else {
+                throw new coding_exception('The attendance table has a field with no property in the attendance class');
+            }
+        }
+        $this->cm           = $cm;
+        $this->course       = $course;
+        if (is_null($context)) {
+            $this->context = context_module::instance($this->cm->id);
+        } else {
+            $this->context = $context;
+        }
+
+        $this->pageparams = $pageparams;
+
+        if (isset($pageparams->showsessiondetails) && $pageparams->showsessiondetails != $this->showsessiondetails) {
+            $DB->set_field('attendance', 'showsessiondetails', $pageparams->showsessiondetails, array('id' => $this->id));
+        }
+        if (isset($pageparams->sessiondetailspos) && $pageparams->sessiondetailspos != $this->sessiondetailspos) {
+            $DB->set_field('attendance', 'sessiondetailspos', $pageparams->sessiondetailspos, array('id' => $this->id));
+        }
+    }
+
+    /**
+     * Get group mode.
+     *
+     * @return int
+     */
+    public function get_group_mode() {
+        if (is_null($this->groupmode)) {
+            $this->groupmode = groups_get_activity_groupmode($this->cm, $this->course);
+        }
+        return $this->groupmode;
+    }
+
+    /**
+     * Returns current sessions for this attendance
+     *
+     * Fetches data from {attendance_sessions}
+     *
+     * @return array of records or an empty array
+     */
+    public function get_current_sessions() {
+        global $DB;
+
+        $today = time(); // Because we compare with database, we don't need to use usertime().
+
+        $sql = "SELECT *
+                  FROM {attendance_sessions}
+                 WHERE :time BETWEEN sessdate AND (sessdate + duration)
+                   AND attendanceid = :aid";
+        $params = array(
+            'time'  => $today,
+            'aid'   => $this->id);
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Returns today sessions for this attendance
+     *
+     * Fetches data from {attendance_sessions}
+     *
+     * @return array of records or an empty array
+     */
+    public function get_today_sessions() {
+        global $DB;
+
+        $start = usergetmidnight(time());
+        $end = $start + DAYSECS;
+
+        $sql = "SELECT *
+                  FROM {attendance_sessions}
+                 WHERE sessdate >= :start AND sessdate < :end
+                   AND attendanceid = :aid";
+        $params = array(
+            'start' => $start,
+            'end'   => $end,
+            'aid'   => $this->id);
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Returns today sessions suitable for copying attendance log
+     *
+     * Fetches data from {attendance_sessions}
+     * @param stdClass $sess
+     * @return array of records or an empty array
+     */
+    public function get_today_sessions_for_copy($sess) {
+        global $DB;
+
+        $start = usergetmidnight($sess->sessdate);
+
+        $sql = "SELECT *
+                  FROM {attendance_sessions}
+                 WHERE sessdate >= :start AND sessdate <= :end AND
+                       (groupid = 0 OR groupid = :groupid) AND
+                       lasttaken > 0 AND attendanceid = :aid";
+        $params = array(
+            'start'     => $start,
+            'end'       => $sess->sessdate,
+            'groupid'   => $sess->groupid,
+            'aid'       => $this->id);
+
+        return $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Returns count of hidden sessions for this attendance
+     *
+     * Fetches data from {attendance_sessions}
+     *
+     * @return count of hidden sessions
+     */
+    public function get_hidden_sessions_count() {
+        global $DB;
+
+        $where = "attendanceid = :aid AND sessdate < :csdate";
+        $params = array(
+            'aid'   => $this->id,
+            'csdate' => $this->course->startdate);
+
+        return $DB->count_records_select('attendance_sessions', $where, $params);
+    }
+
+    /**
+     * Returns the hidden sessions for this attendance
+     *
+     * Fetches data from {attendance_sessions}
+     *
+     * @return hidden sessions
+     */
+    public function get_hidden_sessions() {
+        global $DB;
+
+        $where = "attendanceid = :aid AND sessdate < :csdate";
+        $params = array(
+            'aid'   => $this->id,
+            'csdate' => $this->course->startdate);
+
+        return $DB->get_records_select('attendance_sessions', $where, $params);
+    }
+
+    /**
+     * Get filtered sessions.
+     *
+     * @return array
+     */
+    public function get_filtered_sessions() {
+        global $DB;
+
+        if ($this->pageparams->startdate && $this->pageparams->enddate) {
+            $where = "attendanceid = :aid AND sessdate >= :csdate AND sessdate >= :sdate AND sessdate < :edate";
+        } else if ($this->pageparams->enddate) {
+            $where = "attendanceid = :aid AND sessdate >= :csdate AND sessdate < :edate";
+        } else {
+            $where = "attendanceid = :aid AND sessdate >= :csdate";
+        }
+
+        if ($this->pageparams->get_current_sesstype() > mod_attendance_page_with_filter_controls::SESSTYPE_ALL) {
+            $where .= " AND (groupid = :cgroup OR groupid = 0)";
+        }
+        $params = array(
+            'aid'       => $this->id,
+            'csdate'    => $this->course->startdate,
+            'sdate'     => $this->pageparams->startdate,
+            'edate'     => $this->pageparams->enddate,
+            'cgroup'    => $this->pageparams->get_current_sesstype());
+        $sessions = $DB->get_records_select('attendance_sessions', $where, $params, 'sessdate asc');
+        $statussetmaxpoints = attendance_get_statusset_maxpoints($this->get_statuses(true, true));
+        foreach ($sessions as $sess) {
+            if (empty($sess->description)) {
+                $sess->description = get_string('nodescription', 'attendance');
+            } else {
+                $sess->description = file_rewrite_pluginfile_urls($sess->description,
+                    'pluginfile.php', $this->context->id, 'mod_attendance', 'session', $sess->id);
+            }
+            $sess->maxpoints = $statussetmaxpoints[$sess->statusset];
+        }
+
+        return $sessions;
+    }
+
+    /**
+     * Get manage url.
+     * @param array $params
+     * @return moodle_url of manage.php for attendance instance
+     */
+    public function url_manage($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/manage.php', $params);
+    }
+
+    /**
+     * Get manage temp users url.
+     * @param array $params optional
+     * @return moodle_url of tempusers.php for attendance instance
+     */
+    public function url_managetemp($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/tempusers.php', $params);
+    }
+
+    /**
+     * Get temp delete url.
+     *
+     * @param array $params optional
+     * @return moodle_url of tempdelete.php for attendance instance
+     */
+    public function url_tempdelete($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id, 'action' => 'delete'), $params);
+        return new moodle_url('/mod/attendance/tempedit.php', $params);
+    }
+
+    /**
+     * Get temp edit url.
+     *
+     * @param array $params optional
+     * @return moodle_url of tempedit.php for attendance instance
+     */
+    public function url_tempedit($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/tempedit.php', $params);
+    }
+
+    /**
+     * Get temp merge url
+     *
+     * @param array $params optional
+     * @return moodle_url of tempedit.php for attendance instance
+     */
+    public function url_tempmerge($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/tempmerge.php', $params);
+    }
+
+    /**
+     * Get url for sessions.
+     * @param array $params
+     * @return moodle_url of sessions.php for attendance instance
+     */
+    public function url_sessions($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/sessions.php', $params);
+    }
+
+    /**
+     * Get url for report.
+     * @param array $params
+     * @return moodle_url of report.php for attendance instance
+     */
+    public function url_report($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/report.php', $params);
+    }
+
+    /**
+     * Get url for report.
+     * @param array $params
+     * @return moodle_url of report.php for attendance instance
+     */
+    public function url_absentee($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/absentee.php', $params);
+    }
+
+    /**
+     * Get url for export.
+     *
+     * @return moodle_url of export.php for attendance instance
+     */
+    public function url_export() {
+        $params = array('id' => $this->cm->id);
+        return new moodle_url('/mod/attendance/export.php', $params);
+    }
+
+    /**
+     * Get preferences url
+     * @param array $params
+     * @return moodle_url of attsettings.php for attendance instance
+     */
+    public function url_preferences($params=array()) {
+        // Add the statusset params.
+        if (isset($this->pageparams->statusset) && !isset($params['statusset'])) {
+            $params['statusset'] = $this->pageparams->statusset;
+        }
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/preferences.php', $params);
+    }
+
+    /**
+     * Get preferences url
+     * @param array $params
+     * @return moodle_url of attsettings.php for attendance instance
+     */
+    public function url_warnings($params=array()) {
+        // Add the statusset params.
+        if (isset($this->pageparams->statusset) && !isset($params['statusset'])) {
+            $params['statusset'] = $this->pageparams->statusset;
+        }
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/warnings.php', $params);
+    }
+
+    /**
+     * Get take url.
+     * @param array $params
+     * @return moodle_url of attendances.php for attendance instance
+     */
+    public function url_take($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/take.php', $params);
+    }
+
+    /**
+     * Get view url.
+     * @param array $params
+     * @return moodle_url
+     */
+    public function url_view($params=array()) {
+        $params = array_merge(array('id' => $this->cm->id), $params);
+        return new moodle_url('/mod/attendance/view.php', $params);
+    }
+
+    /**
+     * Add sessions.
+     *
+     * @param array $sessions
+     */
+    public function add_sessions($sessions) {
+        global $DB;
+
+        foreach ($sessions as $sess) {
+            $sess->attendanceid = $this->id;
+            $sess->automarkcompleted = 0;
+            if (!isset($sess->automark)) {
+                $sess->automark = 0;
+            }
+
+            $sess->id = $DB->insert_record('attendance_sessions', $sess);
+            $description = file_save_draft_area_files($sess->descriptionitemid,
+                $this->context->id, 'mod_attendance', 'session', $sess->id,
+                array('subdirs' => false, 'maxfiles' => -1, 'maxbytes' => 0),
+                $sess->description);
+            $DB->set_field('attendance_sessions', 'description', $description, array('id' => $sess->id));
+
+            $sess->caleventid = 0;
+            attendance_create_calendar_event($sess);
+
+            $infoarray = array();
+            $infoarray[] = construct_session_full_date_time($sess->sessdate, $sess->duration);
+
+            // Trigger a session added event.
+            $event = \mod_attendance\event\session_added::create(array(
+                'objectid' => $this->id,
+                'context' => $this->context,
+                'other' => array('info' => implode(',', $infoarray))
+            ));
+            $event->add_record_snapshot('course_modules', $this->cm);
+            $sess->description = $description;
+            $sess->lasttaken = 0;
+            $sess->lasttakenby = 0;
+            if (!isset($sess->studentscanmark)) {
+                $sess->studentscanmark = 0;
+            }
+            if (!isset($sess->studentpassword)) {
+                $sess->studentpassword = '';
+            }
+            if (!isset($sess->subnet)) {
+                $sess->subnet = '';
+            }
+
+            $event->add_record_snapshot('attendance_sessions', $sess);
+            $event->trigger();
+        }
+    }
+
+    /**
+     * Update session from form.
+     *
+     * @param stdClass $formdata
+     * @param int $sessionid
+     */
+    public function update_session_from_form_data($formdata, $sessionid) {
+        global $DB;
+
+        if (!$sess = $DB->get_record('attendance_sessions', array('id' => $sessionid) )) {
+            print_error('No such session in this course');
+        }
+
+        $sesstarttime = $formdata->sestime['starthour'] * HOURSECS + $formdata->sestime['startminute'] * MINSECS;
+        $sesendtime = $formdata->sestime['endhour'] * HOURSECS + $formdata->sestime['endminute'] * MINSECS;
+
+        $sess->sessdate = $formdata->sessiondate + $sesstarttime;
+        $sess->duration = $sesendtime - $sesstarttime;
+
+        $description = file_save_draft_area_files($formdata->sdescription['itemid'],
+            $this->context->id, 'mod_attendance', 'session', $sessionid,
+            array('subdirs' => false, 'maxfiles' => -1, 'maxbytes' => 0), $formdata->sdescription['text']);
+        $sess->description = $description;
+        $sess->descriptionformat = $formdata->sdescription['format'];
+
+        $sess->studentscanmark = 0;
+        $sess->studentpassword = '';
+        $sess->subnet = '';
+        $sess->automark = 0;
+        $sess->automarkcompleted = 0;
+
+        if (!empty(get_config('attendance', 'studentscanmark')) &&
+            !empty($formdata->studentscanmark)) {
+            $sess->studentscanmark = $formdata->studentscanmark;
+            $sess->studentpassword = $formdata->studentpassword;
+            if (!empty($formdata->usedefaultsubnet)) {
+                $sess->subnet = $this->subnet;
+            } else {
+                $sess->subnet = $formdata->subnet;
+            }
+
+            if (!empty($formdata->automark)) {
+                $sess->automark = $formdata->automark;
+            }
+        }
+
+        $sess->timemodified = time();
+        $DB->update_record('attendance_sessions', $sess);
+        if (empty($sess->caleventid)) {
+             // This shouldn't really happen, but just in case to prevent fatal error.
+            attendance_create_calendar_event($sess);
+        } else {
+            attendance_update_calendar_event($sess->caleventid, $sess->duration, $sess->sessdate);
+        }
+
+        $info = construct_session_full_date_time($sess->sessdate, $sess->duration);
+        $event = \mod_attendance\event\session_updated::create(array(
+            'objectid' => $this->id,
+            'context' => $this->context,
+            'other' => array('info' => $info, 'sessionid' => $sessionid,
+                'action' => mod_attendance_sessions_page_params::ACTION_UPDATE)));
+        $event->add_record_snapshot('course_modules', $this->cm);
+        $event->add_record_snapshot('attendance_sessions', $sess);
+        $event->trigger();
+    }
+
+    /**
+     * Used to record attendance submitted by the student.
+     *
+     * @param stdClass $mformdata
+     * @return boolean
+     */
+    public function take_from_student($mformdata) {
+        global $DB, $USER;
+
+        $statuses = implode(',', array_keys( (array)$this->get_statuses() ));
+        $now = time();
+
+        $record = new stdClass();
+        $record->studentid = $USER->id;
+        $record->statusid = $mformdata->status;
+        $record->statusset = $statuses;
+        $record->remarks = get_string('set_by_student', 'mod_attendance');
+        $record->sessionid = $mformdata->sessid;
+        $record->timetaken = $now;
+        $record->takenby = $USER->id;
+
+        $dbsesslog = $this->get_session_log($mformdata->sessid);
+        if (array_key_exists($record->studentid, $dbsesslog)) {
+            // Already recorded do not save.
+            return false;
+        }
+
+        $logid = $DB->insert_record('attendance_log', $record, false);
+        $record->id = $logid;
+
+        // Update the session to show that a register has been taken, or staff may overwrite records.
+        $session = $this->get_session_info($mformdata->sessid);
+        $session->lasttaken = $now;
+        $session->lasttakenby = $USER->id;
+        $DB->update_record('attendance_sessions', $session);
+
+        // Update the users grade.
+        $this->update_users_grade(array($USER->id));
+
+        /* create url for link in log screen
+         * need to set grouptype to 0 to allow take attendance page to be called
+         * from report/log page */
+
+        $params = array(
+            'sessionid' => $this->pageparams->sessionid,
+            'grouptype' => 0);
+
+        // Log the change.
+        $event = \mod_attendance\event\attendance_taken_by_student::create(array(
+            'objectid' => $this->id,
+            'context' => $this->context,
+            'other' => $params));
+        $event->add_record_snapshot('course_modules', $this->cm);
+        $event->add_record_snapshot('attendance_sessions', $session);
+        $event->add_record_snapshot('attendance_log', $record);
+        $event->trigger();
+
+        return true;
+    }
+
+    /**
+     * Take attendance from form data.
+     *
+     * @param stdClass $formdata
+     */
+    public function take_from_form_data($formdata) {
+        global $DB, $USER;
+        // TODO: WARNING - $formdata is unclean - comes from direct $_POST - ideally needs a rewrite but we do some cleaning below.
+        // This whole function could do with a nice clean up.
+        $statuses = implode(',', array_keys( (array)$this->get_statuses() ));
+        $now = time();
+        $sesslog = array();
+        $formdata = (array)$formdata;
+        foreach ($formdata as $key => $value) {
+            // Look at Remarks field because the user options may not be passed if empty.
+            if (substr($key, 0, 7) == 'remarks') {
+                $sid = substr($key, 7);
+                if (!(is_numeric($sid))) { // Sanity check on $sid.
+                    print_error('nonnumericid', 'attendance');
+                }
+                $sesslog[$sid] = new stdClass();
+                $sesslog[$sid]->studentid = $sid; // We check is_numeric on this above.
+                if (array_key_exists('user'.$sid, $formdata) && is_numeric($formdata['user' . $sid])) {
+                    $sesslog[$sid]->statusid = $formdata['user' . $sid];
+                }
+                $sesslog[$sid]->statusset = $statuses;
+                $sesslog[$sid]->remarks = $value;
+                $sesslog[$sid]->sessionid = $this->pageparams->sessionid;
+                $sesslog[$sid]->timetaken = $now;
+                $sesslog[$sid]->takenby = $USER->id;
+            }
+        }
+        // Get existing session log.
+        $dbsesslog = $this->get_session_log($this->pageparams->sessionid);
+        foreach ($sesslog as $log) {
+            // Don't save a record if no statusid or remark.
+            if (!empty($log->statusid) || !empty($log->remarks)) {
+                if (array_key_exists($log->studentid, $dbsesslog)) {
+                    // Check if anything important has changed before updating record.
+                    // Don't update timetaken/takenby records if nothing has changed.
+                    if ($dbsesslog[$log->studentid]->remarks <> $log->remarks ||
+                        $dbsesslog[$log->studentid]->statusid <> $log->statusid ||
+                        $dbsesslog[$log->studentid]->statusset <> $log->statusset) {
+
+                        $log->id = $dbsesslog[$log->studentid]->id;
+                        $DB->update_record('attendance_log', $log);
+                    }
+                } else {
+                    $DB->insert_record('attendance_log', $log, false);
+                }
+            }
+        }
+
+        $session = $this->get_session_info($this->pageparams->sessionid);
+        $session->lasttaken = $now;
+        $session->lasttakenby = $USER->id;
+
+        $DB->update_record('attendance_sessions', $session);
+
+        if ($this->grade != 0) {
+            $this->update_users_grade(array_keys($sesslog));
+        }
+
+        // Create url for link in log screen.
+        $params = array(
+            'sessionid' => $this->pageparams->sessionid,
+            'grouptype' => $this->pageparams->grouptype);
+        $event = \mod_attendance\event\attendance_taken::create(array(
+            'objectid' => $this->id,
+            'context' => $this->context,
+            'other' => $params));
+        $event->add_record_snapshot('course_modules', $this->cm);
+        $event->add_record_snapshot('attendance_sessions', $session);
+        $event->trigger();
+
+        $group = 0;
+        if ($this->pageparams->grouptype != self::SESSION_COMMON) {
+            $group = $this->pageparams->grouptype;
+        } else {
+            if ($this->pageparams->group) {
+                $group = $this->pageparams->group;
+            }
+        }
+
+        $totalusers = count_enrolled_users(context_module::instance($this->cm->id), 'mod/attendance:canbelisted', $group);
+        $usersperpage = $this->pageparams->perpage;
+
+        if (!empty($this->pageparams->page) && $this->pageparams->page && $totalusers && $usersperpage) {
+            $numberofpages = ceil($totalusers / $usersperpage);
+            if ($this->pageparams->page < $numberofpages) {
+                $params['page'] = $this->pageparams->page + 1;
+                redirect($this->url_take($params), get_string('moreattendance', 'attendance'));
+            }
+        }
+
+        redirect($this->url_manage(), get_string('attendancesuccess', 'attendance'));
+    }
+
+    /**
+     * Get users with enrolment status (Feature request MDL-27591)
+     *
+     * @param int $groupid
+     * @param int $page
+     * @return array
+     */
+    public function get_users($groupid = 0, $page = 1) {
+        global $DB;
+
+        $fields = array('username' , 'idnumber' , 'institution' , 'department');
+        // Get user identity fields if required - doesn't return original $fields array.
+        $extrafields = get_extra_user_fields($this->context, $fields);
+        $fields = array_merge($fields, $extrafields);
+
+        $userfields = user_picture::fields('u', $fields);
+
+        if (empty($this->pageparams->sort)) {
+            $this->pageparams->sort = ATT_SORT_DEFAULT;
+        }
+        if ($this->pageparams->sort == ATT_SORT_FIRSTNAME) {
+            $orderby = $DB->sql_fullname('u.firstname', 'u.lastname') . ', u.id';
+        } else if ($this->pageparams->sort == ATT_SORT_LASTNAME) {
+            $orderby = 'u.lastname, u.firstname, u.id';
+        } else {
+            list($orderby, $sortparams) = users_order_by_sql('u');
+        }
+
+        if ($page) {
+            $usersperpage = $this->pageparams->perpage;
+            if (!empty($this->cm->groupingid)) {
+                $startusers = ($page - 1) * $usersperpage;
+                if ($groupid == 0) {
+                    $groups = array_keys(groups_get_all_groups($this->cm->course, 0, $this->cm->groupingid, 'g.id'));
+                } else {
+                    $groups = $groupid;
+                }
+                $users = get_users_by_capability($this->context, 'mod/attendance:canbelisted',
+                    $userfields.',u.id, u.firstname, u.lastname, u.email',
+                    $orderby, $startusers, $usersperpage, $groups,
+                    '', false, true);
+            } else {
+                $startusers = ($page - 1) * $usersperpage;
+                $users = get_enrolled_users($this->context, 'mod/attendance:canbelisted', $groupid, $userfields,
+                    $orderby, $startusers, $usersperpage);
+            }
+        } else {
+            if (!empty($this->cm->groupingid)) {
+                if ($groupid == 0) {
+                    $groups = array_keys(groups_get_all_groups($this->cm->course, 0, $this->cm->groupingid, 'g.id'));
+                } else {
+                    $groups = $groupid;
+                }
+                $users = get_users_by_capability($this->context, 'mod/attendance:canbelisted',
+                    $userfields.',u.id, u.firstname, u.lastname, u.email',
+                    $orderby, '', '', $groups,
+                    '', false, true);
+            } else {
+                $users = get_enrolled_users($this->context, 'mod/attendance:canbelisted', $groupid, $userfields, $orderby);
+            }
+        }
+
+        // Add a flag to each user indicating whether their enrolment is active.
+        if (!empty($users)) {
+            list($sql, $params) = $DB->get_in_or_equal(array_keys($users), SQL_PARAMS_NAMED, 'usid0');
+
+            // See CONTRIB-4868.
+            $mintime = 'MIN(CASE WHEN (ue.timestart > :zerotime) THEN ue.timestart ELSE ue.timecreated END)';
+            $maxtime = 'CASE WHEN MIN(ue.timeend) = 0 THEN 0 ELSE MAX(ue.timeend) END';
+
+            // See CONTRIB-3549.
+            $sql = "SELECT ue.userid, MIN(ue.status) as status,
+                           $mintime AS mintime,
+                           $maxtime AS maxtime
+                      FROM {user_enrolments} ue
+                      JOIN {enrol} e ON e.id = ue.enrolid
+                     WHERE ue.userid $sql
+                           AND e.status = :estatus
+                           AND e.courseid = :courseid
+                  GROUP BY ue.userid";
+            $params += array('zerotime' => 0, 'estatus' => ENROL_INSTANCE_ENABLED, 'courseid' => $this->course->id);
+            $enrolments = $DB->get_records_sql($sql, $params);
+
+            foreach ($users as $user) {
+                $users[$user->id]->enrolmentstatus = $enrolments[$user->id]->status;
+                $users[$user->id]->enrolmentstart = $enrolments[$user->id]->mintime;
+                $users[$user->id]->enrolmentend = $enrolments[$user->id]->maxtime;
+                $users[$user->id]->type = 'standard'; // Mark as a standard (not a temporary) user.
+            }
+        }
+
+        // Add the 'temporary' users to this list.
+        $tempusers = $DB->get_records('attendance_tempusers', array('courseid' => $this->course->id));
+        foreach ($tempusers as $tempuser) {
+            $users[$tempuser->studentid] = self::tempuser_to_user($tempuser);
+        }
+
+        return $users;
+    }
+
+    /**
+     * Convert a tempuser record into a user object.
+     *
+     * @param stdClass $tempuser
+     * @return object
+     */
+    protected static function tempuser_to_user($tempuser) {
+        global $CFG;
+
+        $ret = (object)array(
+            'id' => $tempuser->studentid,
+            'firstname' => $tempuser->fullname,
+            'email' => $tempuser->email,
+            'username' => '',
+            'enrolmentstatus' => 0,
+            'enrolmentstart' => 0,
+            'enrolmentend' => 0,
+            'picture' => 0,
+            'type' => 'temporary',
+        );
+        $allfields = get_all_user_name_fields();
+        if (!empty($CFG->showuseridentity)) {
+            $allfields = array_merge($allfields, explode(',', $CFG->showuseridentity));
+        }
+
+        foreach ($allfields as $namefield) {
+            if (!isset($ret->$namefield)) {
+                $ret->$namefield = '';
+            }
+        }
+
+        return $ret;
+    }
+
+    /**
+     * Get user and include extra info.
+     *
+     * @param int $userid
+     * @return mixed|object
+     */
+    public function get_user($userid) {
+        global $DB;
+
+        $user = $DB->get_record('user', array('id' => $userid), '*', MUST_EXIST);
+
+        // Look for 'temporary' users and return their details from the attendance_tempusers table.
+        if ($user->idnumber == 'tempghost') {
+            $tempuser = $DB->get_record('attendance_tempusers', array('studentid' => $userid), '*', MUST_EXIST);
+            return self::tempuser_to_user($tempuser);
+        }
+
+        $user->type = 'standard';
+
+        // See CONTRIB-4868.
+        $mintime = 'MIN(CASE WHEN (ue.timestart > :zerotime) THEN ue.timestart ELSE ue.timecreated END)';
+        $maxtime = 'CASE WHEN MIN(ue.timeend) = 0 THEN 0 ELSE MAX(ue.timeend) END';
+
+        $sql = "SELECT ue.userid, ue.status,
+                       $mintime AS mintime,
+                       $maxtime AS maxtime
+                  FROM {user_enrolments} ue
+                  JOIN {enrol} e ON e.id = ue.enrolid
+                 WHERE ue.userid = :uid
+                       AND e.status = :estatus
+                       AND e.courseid = :courseid
+              GROUP BY ue.userid, ue.status";
+        $params = array('zerotime' => 0, 'uid' => $userid, 'estatus' => ENROL_INSTANCE_ENABLED, 'courseid' => $this->course->id);
+        $enrolments = $DB->get_record_sql($sql, $params);
+        if (!empty($enrolments)) {
+            $user->enrolmentstatus = $enrolments->status;
+            $user->enrolmentstart = $enrolments->mintime;
+            $user->enrolmentend = $enrolments->maxtime;
+        } else {
+            $user->enrolmentstatus = '';
+            $user->enrolmentstart = 0;
+            $user->enrolmentend = 0;
+        }
+
+        return $user;
+    }
+
+    /**
+     * Get possible statuses.
+     *
+     * @param bool $onlyvisible
+     * @param bool $allsets
+     * @return array
+     */
+    public function get_statuses($onlyvisible = true, $allsets = false) {
+        if (!isset($this->statuses)) {
+            // Get the statuses for the current set only.
+            $statusset = 0;
+            if (isset($this->pageparams->statusset)) {
+                $statusset = $this->pageparams->statusset;
+            } else if (isset($this->pageparams->sessionid)) {
+                $sessioninfo = $this->get_session_info($this->pageparams->sessionid);
+                $statusset = $sessioninfo->statusset;
+            }
+            $this->statuses = attendance_get_statuses($this->id, $onlyvisible, $statusset);
+            $this->allstatuses = attendance_get_statuses($this->id, $onlyvisible);
+        }
+
+        // Return all sets, if requested.
+        if ($allsets) {
+            return $this->allstatuses;
+        }
+        return $this->statuses;
+    }
+
+    /**
+     * Get session info.
+     * @param int $sessionid
+     * @return mixed
+     */
+    public function get_session_info($sessionid) {
+        global $DB;
+
+        if (!array_key_exists($sessionid, $this->sessioninfo)) {
+            $this->sessioninfo[$sessionid] = $DB->get_record('attendance_sessions', array('id' => $sessionid));
+        }
+        if (empty($this->sessioninfo[$sessionid]->description)) {
+            $this->sessioninfo[$sessionid]->description = get_string('nodescription', 'attendance');
+        } else {
+            $this->sessioninfo[$sessionid]->description = file_rewrite_pluginfile_urls($this->sessioninfo[$sessionid]->description,
+                'pluginfile.php', $this->context->id, 'mod_attendance', 'session', $this->sessioninfo[$sessionid]->id);
+        }
+        return $this->sessioninfo[$sessionid];
+    }
+
+    /**
+     * Get sessions info
+     *
+     * @param array $sessionids
+     * @return array
+     */
+    public function get_sessions_info($sessionids) {
+        global $DB;
+
+        list($sql, $params) = $DB->get_in_or_equal($sessionids);
+        $sessions = $DB->get_records_select('attendance_sessions', "id $sql", $params, 'sessdate asc');
+
+        foreach ($sessions as $sess) {
+            if (empty($sess->description)) {
+                $sess->description = get_string('nodescription', 'attendance');
+            } else {
+                $sess->description = file_rewrite_pluginfile_urls($sess->description,
+                    'pluginfile.php', $this->context->id, 'mod_attendance', 'session', $sess->id);
+            }
+        }
+
+        return $sessions;
+    }
+
+    /**
+     * Get log.
+     *
+     * @param int $sessionid
+     * @return array
+     */
+    public function get_session_log($sessionid) {
+        global $DB;
+
+        return $DB->get_records('attendance_log', array('sessionid' => $sessionid), '', 'studentid,statusid,remarks,id,statusset');
+    }
+
+    /**
+     * Update user grade.
+     * @param array $userids
+     */
+    public function update_users_grade($userids) {
+        attendance_update_users_grade($this, $userids);
+    }
+
+    /**
+     * Get filtered log.
+     * @param int $userid
+     * @return array
+     */
+    public function get_user_filtered_sessions_log($userid) {
+        global $DB;
+
+        if ($this->pageparams->startdate && $this->pageparams->enddate) {
+            $where = "ats.attendanceid = :aid AND ats.sessdate >= :csdate AND
+                      ats.sessdate >= :sdate AND ats.sessdate < :edate";
+        } else {
+            $where = "ats.attendanceid = :aid AND ats.sessdate >= :csdate";
+        }
+        if ($this->get_group_mode()) {
+            $sql = "SELECT ats.id, ats.sessdate, ats.groupid, al.statusid, al.remarks
+                  FROM {attendance_sessions} ats
+                  JOIN {attendance_log} al ON ats.id = al.sessionid AND al.studentid = :uid
+                  LEFT JOIN {groups_members} gm ON gm.userid = al.studentid AND gm.groupid = ats.groupid
+                 WHERE $where AND (ats.groupid = 0 or gm.id is NOT NULL)
+              ORDER BY ats.sessdate ASC";
+
+            $params = array(
+                'uid'       => $userid,
+                'aid'       => $this->id,
+                'csdate'    => $this->course->startdate,
+                'sdate'     => $this->pageparams->startdate,
+                'edate'     => $this->pageparams->enddate);
+
+        } else {
+            $sql = "SELECT ats.id, ats.sessdate, ats.groupid, al.statusid, al.remarks
+                  FROM {attendance_sessions} ats
+                  JOIN {attendance_log} al
+                    ON ats.id = al.sessionid AND al.studentid = :uid
+                 WHERE $where
+              ORDER BY ats.sessdate ASC";
+
+            $params = array(
+                'uid'       => $userid,
+                'aid'       => $this->id,
+                'csdate'    => $this->course->startdate,
+                'sdate'     => $this->pageparams->startdate,
+                'edate'     => $this->pageparams->enddate);
+        }
+        $sessions = $DB->get_records_sql($sql, $params);
+
+        return $sessions;
+    }
+
+    /**
+     * Get filtered log extended.
+     * @param int $userid
+     * @return array
+     */
+    public function get_user_filtered_sessions_log_extended($userid) {
+        global $DB;
+        // All taked sessions (including previous groups).
+
+        if ($this->pageparams->startdate && $this->pageparams->enddate) {
+            $where = "ats.attendanceid = :aid AND ats.sessdate >= :csdate AND
+                      ats.sessdate >= :sdate AND ats.sessdate < :edate";
+        } else {
+            $where = "ats.attendanceid = :aid AND ats.sessdate >= :csdate";
+        }
+
+        // We need to add this concatination so that moodle will use it as the array index that is a string.
+        // If the array's index is a number it will not merge entries.
+        // It would be better as a UNION query but unfortunatly MS SQL does not seem to support doing a
+        // DISTINCT on a the description field.
+        $id = $DB->sql_concat(':value', 'ats.id');
+        if ($this->get_group_mode()) {
+            $sql = "SELECT $id, ats.id, ats.groupid, ats.sessdate, ats.duration, ats.description,
+                           al.statusid, al.remarks, ats.studentscanmark
+                      FROM {attendance_sessions} ats
+                RIGHT JOIN {attendance_log} al
+                        ON ats.id = al.sessionid AND al.studentid = :uid
+                 LEFT JOIN {groups_members} gm ON gm.userid = al.studentid AND gm.groupid = ats.groupid
+                     WHERE $where AND (ats.groupid = 0 or gm.id is NOT NULL)
+                  ORDER BY ats.sessdate ASC";
+        } else {
+            $sql = "SELECT $id, ats.id, ats.groupid, ats.sessdate, ats.duration, ats.description, ats.statusset,
+                           al.statusid, al.remarks, ats.studentscanmark
+                      FROM {attendance_sessions} ats
+                RIGHT JOIN {attendance_log} al
+                        ON ats.id = al.sessionid AND al.studentid = :uid
+                     WHERE $where
+                  ORDER BY ats.sessdate ASC";
+        }
+
+        $params = array(
+            'uid'       => $userid,
+            'aid'       => $this->id,
+            'csdate'    => $this->course->startdate,
+            'sdate'     => $this->pageparams->startdate,
+            'edate'     => $this->pageparams->enddate,
+            'value'     => 'c');
+        $sessions = $DB->get_records_sql($sql, $params);
+
+        // All sessions for current groups.
+
+        $groups = array_keys(groups_get_all_groups($this->course->id, $userid));
+        $groups[] = 0;
+        list($gsql, $gparams) = $DB->get_in_or_equal($groups, SQL_PARAMS_NAMED, 'gid0');
+
+        if ($this->pageparams->startdate && $this->pageparams->enddate) {
+            $where = "ats.attendanceid = :aid AND ats.sessdate >= :csdate AND
+                      ats.sessdate >= :sdate AND ats.sessdate < :edate AND ats.groupid $gsql";
+        } else {
+            $where = "ats.attendanceid = :aid AND ats.sessdate >= :csdate AND ats.groupid $gsql";
+        }
+
+        $sql = "SELECT $id, ats.id, ats.groupid, ats.sessdate, ats.duration, ats.description, ats.statusset,
+                       al.statusid, al.remarks, ats.studentscanmark
+                  FROM {attendance_sessions} ats
+             LEFT JOIN {attendance_log} al
+                    ON ats.id = al.sessionid AND al.studentid = :uid
+                 WHERE $where
+              ORDER BY ats.sessdate ASC";
+
+        $params = array_merge($params, $gparams);
+        $sessions = array_merge($sessions, $DB->get_records_sql($sql, $params));
+
+        foreach ($sessions as $sess) {
+            if (empty($sess->description)) {
+                $sess->description = get_string('nodescription', 'attendance');
+            } else {
+                $sess->description = file_rewrite_pluginfile_urls($sess->description,
+                    'pluginfile.php', $this->context->id, 'mod_attendance', 'session', $sess->id);
+            }
+        }
+
+        return $sessions;
+    }
+
+    /**
+     * Delete sessions.
+     * @param array $sessionsids
+     */
+    public function delete_sessions($sessionsids) {
+        global $DB;
+        if (attendance_existing_calendar_events_ids($sessionsids)) {
+            attendance_delete_calendar_events($sessionsids);
+        }
+
+        list($sql, $params) = $DB->get_in_or_equal($sessionsids);
+        $DB->delete_records_select('attendance_log', "sessionid $sql", $params);
+        $DB->delete_records_list('attendance_sessions', 'id', $sessionsids);
+        $event = \mod_attendance\event\session_deleted::create(array(
+            'objectid' => $this->id,
+            'context' => $this->context,
+            'other' => array('info' => implode(', ', $sessionsids))));
+        $event->add_record_snapshot('course_modules', $this->cm);
+        $event->trigger();
+    }
+
+    /**
+     * Update duration.
+     *
+     * @param array $sessionsids
+     * @param int $duration
+     */
+    public function update_sessions_duration($sessionsids, $duration) {
+        global $DB;
+
+        $now = time();
+        $sessions = $DB->get_recordset_list('attendance_sessions', 'id', $sessionsids);
+        foreach ($sessions as $sess) {
+            $sess->duration = $duration;
+            $sess->timemodified = $now;
+            $DB->update_record('attendance_sessions', $sess);
+            if ($sess->caleventid) {
+                attendance_update_calendar_event($sess->caleventid, $duration, $sess->sessdate);
+            }
+            $event = \mod_attendance\event\session_duration_updated::create(array(
+                'objectid' => $this->id,
+                'context' => $this->context,
+                'other' => array('info' => implode(', ', $sessionsids))));
+            $event->add_record_snapshot('course_modules', $this->cm);
+            $event->add_record_snapshot('attendance_sessions', $sess);
+            $event->trigger();
+        }
+        $sessions->close();
+    }
+
+    /**
+     * Check if the email address is already in use by either another temporary user,
+     * or a real user.
+     *
+     * @param string $email the address to check for
+     * @param int $tempuserid optional the ID of the temporary user (to avoid matching against themself)
+     * @return null|string the error message to display, null if there is no error
+     */
+    public static function check_existing_email($email, $tempuserid = 0) {
+        global $DB;
+
+        if (empty($email)) {
+            return null; // Fine to create temporary users without an email address.
+        }
+        if ($tempuser = $DB->get_record('attendance_tempusers', array('email' => $email), 'id')) {
+            if ($tempuser->id != $tempuserid) {
+                return get_string('tempexists', 'attendance');
+            }
+        }
+        if ($DB->record_exists('user', array('email' => $email))) {
+            return get_string('userexists', 'attendance');
+        }
+
+        return null;
+    }
+
+    /**
+     * Gets the status to use when auto-marking.
+     *
+     * @param int $time the time the user first accessed the course.
+     * @param int $sessionid the related sessionid to check.
+     * @return int the statusid to assign to this user.
+     */
+    public function get_automark_status($time, $sessionid) {
+        $statuses = $this->get_statuses();
+        // Statuses are returned highest grade first, find the first high grade we can assign to this user.
+
+        // Get status to use when unmarked.
+        $session = $this->sessioninfo[$sessionid];
+        $duration = $session->duration;
+        if (empty($duration)) {
+            $duration = get_config('attendance', 'studentscanmarksessiontimeend') * 60;
+        }
+        if ($time > $session->sessdate + $duration) {
+            // This session closed after the users access - use the unmarked state.
+            foreach ($statuses as $status) {
+                if (!empty($status->setunmarked)) {
+                    return $status->id;
+                }
+            }
+        } else {
+            foreach ($statuses as $status) {
+                if ($status->studentavailability !== '0' &&
+                    $this->sessioninfo[$sessionid]->sessdate + ($status->studentavailability * 60) > $time) {
+
+                    // Found first status we could set.
+                    return $status->id;
+                }
+            }
+        }
+        return;
+    }
+}
diff --git a/mod/attendance/classes/summary.php b/mod/attendance/classes/summary.php
new file mode 100644
index 0000000..bec15cf
--- /dev/null
+++ b/mod/attendance/classes/summary.php
@@ -0,0 +1,348 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class that computes summary of users points
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Antonio Carlos Mariani http://antonio.c.mariani@gmail.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->dirroot . '/mod/attendance/locallib.php');
+
+/**
+ * Class that computes summary of users points
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Antonio Carlos Mariani http://antonio.c.mariani@gmail.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_summary {
+
+    /** @var int attendance instance identifier */
+    private $attendanceid;
+
+    /** @var stdclass course course data*/
+    private $course;
+
+    /** @var int groupmode*/
+    private $groupmode;
+
+    /** @var array userspoints (userid, numtakensessions, points, maxpoints) */
+    private $userspoints;
+
+    /** @var array pointsbygroup (groupid, numsessions, maxpoints) */
+    private $maxpointsbygroupsessions;
+
+    /** @var array userstakensessionsbyacronym */
+    private $userstakensessionsbyacronym;
+
+    /**
+     * Initializes the class
+     *
+     * @param int $attendanceid instance identifier
+     * @param array $userids user instances identifier
+     * @param int $startdate Attendance sessions startdate
+     * @param int $enddate Attendance sessions enddate
+     */
+    public function __construct($attendanceid, $userids=array(), $startdate = '', $enddate = '') {
+        $this->attendanceid = $attendanceid;
+
+        $this->compute_users_points($userids, $startdate, $enddate);
+        $this->compute_users_taken_sessions_by_acronym($userids, $startdate, $enddate);
+    }
+
+    /**
+     * Returns true if the user has some session with points
+     *
+     * @param int $userid User instance id
+     *
+     * @return boolean
+     */
+    public function has_taken_sessions($userid) {
+        return isset($this->userspoints[$userid]);
+    }
+
+    /**
+     * Returns true if the corresponding attendance instance is currently configure to work with grades (points)
+     *
+     * @return boolean
+     */
+    public function with_groups() {
+        return $this->groupmode > 0;
+    }
+
+    /**
+     * Returns the groupmode of the corresponding attendance instance
+     *
+     * @return int
+     */
+    public function get_groupmode() {
+        return $this->groupmode;
+    }
+
+    /**
+     * Returns the percentages of each user related to the taken sessions
+     *
+     * @return array
+     */
+    public function get_user_taken_sessions_percentages() {
+        $percentages = array();
+
+        foreach ($this->userspoints as $userid => $userpoints) {
+            $percentages[$userid] = attendance_calc_fraction($userpoints->points, $userpoints->maxpoints);
+        }
+
+        return $percentages;
+    }
+
+    /**
+     * Returns a summary of the points assigned to the user related to the taken sessions
+     *
+     * @param int $userid User instance id
+     *
+     * @return array
+     */
+    public function get_taken_sessions_summary_for($userid) {
+        $usersummary = new stdClass();
+        if ($this->has_taken_sessions($userid)) {
+            $usersummary->numtakensessions = $this->userspoints[$userid]->numtakensessions;
+            $usersummary->takensessionspoints = $this->userspoints[$userid]->points;
+            $usersummary->takensessionsmaxpoints = $this->userspoints[$userid]->maxpoints;
+        } else {
+            $usersummary->numtakensessions = 0;
+            $usersummary->takensessionspoints = 0;
+            $usersummary->takensessionsmaxpoints = 0;
+        }
+        $usersummary->takensessionspercentage = attendance_calc_fraction($usersummary->takensessionspoints,
+                                                                         $usersummary->takensessionsmaxpoints);
+        if (isset($this->userstakensessionsbyacronym[$userid])) {
+            $usersummary->userstakensessionsbyacronym = $this->userstakensessionsbyacronym[$userid];
+        } else {
+            $usersummary->userstakensessionsbyacronym = array();
+        }
+
+        return $usersummary;
+    }
+
+    /**
+     * Returns a summary of the points assigned to the user, both related to taken sessions and related to all sessions
+     *
+     * @param int $userid User instance id
+     *
+     * @return array
+     */
+    public function get_all_sessions_summary_for($userid) {
+        $usersummary = $this->get_taken_sessions_summary_for($userid);
+
+        if (!isset($this->maxpointsbygroupsessions)) {
+            $this->compute_maxpoints_by_group_session();
+        }
+
+        $usersummary->numallsessions = $this->maxpointsbygroupsessions[0]->numsessions;
+        $usersummary->allsessionsmaxpoints = $this->maxpointsbygroupsessions[0]->maxpoints;
+
+        if ($this->with_groups()) {
+            $groupids = array_keys(groups_get_all_groups($this->course->id, $userid));
+            foreach ($groupids as $gid) {
+                if (isset($this->maxpointsbygroupsessions[$gid])) {
+                    $usersummary->numallsessions += $this->maxpointsbygroupsessions[$gid]->numsessions;
+                    $usersummary->allsessionsmaxpoints += $this->maxpointsbygroupsessions[$gid]->maxpoints;
+                }
+            }
+        }
+        $usersummary->allsessionspercentage = attendance_calc_fraction($usersummary->takensessionspoints,
+                                                                       $usersummary->allsessionsmaxpoints);
+
+        $deltapoints = $usersummary->allsessionsmaxpoints - $usersummary->takensessionsmaxpoints;
+        $usersummary->maxpossiblepoints = $usersummary->takensessionspoints + $deltapoints;
+        $usersummary->maxpossiblepercentage = attendance_calc_fraction($usersummary->maxpossiblepoints,
+                                                                       $usersummary->allsessionsmaxpoints);
+
+        return $usersummary;
+    }
+
+    /**
+     * Computes the summary of points for the users that have some taken session
+     *
+     * @param array $userids user instances identifier
+     * @param int $startdate Attendance sessions startdate
+     * @param int $enddate Attendance sessions enddate
+     * @return  (userid, numtakensessions, points, maxpoints)
+     */
+    private function compute_users_points($userids=array(), $startdate = '', $enddate = '') {
+        global $DB;
+
+        list($this->course, $cm) = get_course_and_cm_from_instance($this->attendanceid, 'attendance');
+        $this->groupmode = $cm->effectivegroupmode;
+
+        $params = array(
+            'attid'      => $this->attendanceid,
+            'attid2'     => $this->attendanceid,
+            'cstartdate' => $this->course->startdate,
+            );
+
+        $where = '';
+        if (!empty($userids)) {
+            list($insql, $inparams) = $DB->get_in_or_equal($userids, SQL_PARAMS_NAMED);
+            $where .= ' AND atl.studentid ' . $insql;
+            $params = array_merge($params, $inparams);
+        }
+        if (!empty($startdate)) {
+            $where .= ' AND ats.sessdate >= :startdate';
+            $params['startdate'] = $startdate;
+        }
+        if (!empty($enddate)) {
+            $where .= ' AND ats.sessdate < :enddate ';
+            $params['enddate'] = $enddate;
+        }
+
+        $joingroup = '';
+        if ($this->with_groups()) {
+            $joingroup = 'LEFT JOIN {groups_members} gm ON (gm.userid = atl.studentid AND gm.groupid = ats.groupid)';
+            $where .= ' AND (ats.groupid = 0 or gm.id is NOT NULL)';
+        } else {
+            $where .= ' AND ats.groupid = 0';
+        }
+
+        $sql = " SELECT atl.studentid AS userid, COUNT(DISTINCT ats.id) AS numtakensessions,
+                        SUM(stg.grade) AS points, SUM(stm.maxgrade) AS maxpoints
+                   FROM {attendance_sessions} ats
+                   JOIN {attendance_log} atl ON (atl.sessionid = ats.id)
+                   JOIN {attendance_statuses} stg ON (stg.id = atl.statusid AND stg.deleted = 0 AND stg.visible = 1)
+                   JOIN (SELECT setnumber, MAX(grade) AS maxgrade
+                           FROM {attendance_statuses}
+                          WHERE attendanceid = :attid2
+                            AND deleted = 0
+                            AND visible = 1
+                         GROUP BY setnumber) stm
+                     ON (stm.setnumber = ats.statusset)
+                   {$joingroup}
+                  WHERE ats.attendanceid = :attid
+                    AND ats.sessdate >= :cstartdate
+                    AND ats.lasttaken != 0
+                    {$where}
+                GROUP BY atl.studentid";
+        $this->userspoints = $DB->get_records_sql($sql, $params);
+    }
+
+    /**
+     * Computes the summary of taken sessions by acronym
+     *
+     * @param array $userids user instances identifier
+     * @param int $startdate Attendance sessions startdate
+     * @param int $enddate Attendance sessions enddate
+     * @return  null
+     */
+    private function compute_users_taken_sessions_by_acronym($userids=array(), $startdate = '', $enddate = '') {
+        global $DB;
+
+        list($this->course, $cm) = get_course_and_cm_from_instance($this->attendanceid, 'attendance');
+        $this->groupmode = $cm->effectivegroupmode;
+
+        $params = array(
+            'attid'      => $this->attendanceid,
+            'cstartdate' => $this->course->startdate,
+            );
+
+        $where = '';
+        if (!empty($userids)) {
+            list($insql, $inparams) = $DB->get_in_or_equal($userids, SQL_PARAMS_NAMED);
+            $where .= ' AND atl.studentid ' . $insql;
+            $params = array_merge($params, $inparams);
+        }
+        if (!empty($startdate)) {
+            $where .= ' AND ats.sessdate >= :startdate';
+            $params['startdate'] = $startdate;
+        }
+        if (!empty($enddate)) {
+            $where .= ' AND ats.sessdate < :enddate ';
+            $params['enddate'] = $enddate;
+        }
+
+        if ($this->with_groups()) {
+            $joingroup = 'LEFT JOIN {groups_members} gm ON (gm.userid = atl.studentid AND gm.groupid = ats.groupid)';
+            $where .= ' AND (ats.groupid = 0 or gm.id is NOT NULL)';
+        } else {
+            $joingroup = '';
+            $where .= ' AND ats.groupid = 0';
+        }
+
+        $sql = "SELECT atl.studentid AS userid, sts.setnumber, sts.acronym, COUNT(*) AS numtakensessions
+                  FROM {attendance_sessions} ats
+                  JOIN {attendance_log} atl ON (atl.sessionid = ats.id)
+                  JOIN {attendance_statuses} sts
+                    ON (sts.attendanceid = ats.attendanceid AND
+                        sts.id = atl.statusid AND
+                        sts.deleted = 0 AND sts.visible = 1)
+                  {$joingroup}
+                 WHERE ats.attendanceid = :attid
+                   AND ats.sessdate >= :cstartdate
+                   AND ats.lasttaken != 0
+                   {$where}
+              GROUP BY atl.studentid, sts.setnumber, sts.acronym";
+        $this->userstakensessionsbyacronym = array();
+        $records = $DB->get_recordset_sql($sql, $params);
+        foreach ($records as $rec) {
+            $this->userstakensessionsbyacronym[$rec->userid][$rec->setnumber][$rec->acronym] = $rec->numtakensessions;
+        }
+        $records->close();
+    }
+
+    /**
+     * Computes and store the maximum points possible for each group session
+     *
+     * @return null
+     */
+    private function compute_maxpoints_by_group_session() {
+        global $DB;
+
+        $params = array(
+            'attid'      => $this->attendanceid,
+            'attid2'     => $this->attendanceid,
+            'cstartdate' => $this->course->startdate,
+            );
+
+        $where = '';
+        if (!$this->with_groups()) {
+            $where = 'AND sess.groupid = 0';
+        }
+
+        $sql = "SELECT sess.groupid, COUNT(*) AS numsessions, SUM(stamax.maxgrade) AS maxpoints
+                  FROM {attendance_sessions} sess
+                  JOIN (SELECT setnumber, MAX(grade) AS maxgrade
+                                             FROM {attendance_statuses}
+                                            WHERE attendanceid = :attid2
+                                              AND deleted = 0
+                                              AND visible = 1
+                                           GROUP BY setnumber) stamax
+                    ON (stamax.setnumber = sess.statusset)
+                 WHERE sess.attendanceid = :attid
+                   AND sess.sessdate >= :cstartdate
+                   {$where}
+              GROUP BY sess.groupid";
+        $this->maxpointsbygroupsessions = $DB->get_records_sql($sql, $params);
+
+        if (!isset($this->maxpointsbygroupsessions[0])) {
+            $gpoints = new stdClass();
+            $gpoints->numsessions = 0;
+            $gpoints->maxpoints = 0;
+            $this->maxpointsbygroupsessions[0] = $gpoints;
+        }
+    }
+}
diff --git a/mod/attendance/classes/take_page_params.php b/mod/attendance/classes/take_page_params.php
new file mode 100644
index 0000000..38f29ec
--- /dev/null
+++ b/mod/attendance/classes/take_page_params.php
@@ -0,0 +1,116 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_take_page_params
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * contains functions/constants used by take attendance page.
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_take_page_params {
+    /** Sorted list. */
+    const SORTED_LIST           = 1;
+    /** Sorted grid. */
+    const SORTED_GRID           = 2;
+
+    /** Default view */
+    const DEFAULT_VIEW_MODE     = self::SORTED_LIST;
+
+    /** @var int */
+    public $sessionid;
+    /** @var int */
+    public $grouptype;
+    /** @var int */
+    public $group;
+    /** @var int */
+    public $sort;
+    /** @var int */
+    public $copyfrom;
+
+    /** @var int view mode of taking attendance page*/
+    public $viewmode;
+
+    /** @var int */
+    public $gridcols;
+
+    /**
+     * Initialize params.
+     */
+    public function init() {
+        if (!isset($this->group)) {
+            $this->group = 0;
+        }
+        if (!isset($this->sort)) {
+            $this->sort = ATT_SORT_DEFAULT;
+        }
+        $this->init_view_mode();
+        $this->init_gridcols();
+    }
+
+    /**
+     * Initialise view mode params.
+     */
+    private function init_view_mode() {
+        if (isset($this->viewmode)) {
+            set_user_preference("attendance_take_view_mode", $this->viewmode);
+        } else {
+            $this->viewmode = get_user_preferences("attendance_take_view_mode", self::DEFAULT_VIEW_MODE);
+        }
+    }
+
+    /**
+     * Initilise grid columns.
+     */
+    private function init_gridcols() {
+        if (isset($this->gridcols)) {
+            set_user_preference("attendance_gridcolumns", $this->gridcols);
+        } else {
+            $this->gridcols = get_user_preferences("attendance_gridcolumns", 5);
+        }
+    }
+
+    /**
+     * Get main page params.
+     * @return array
+     */
+    public function get_significant_params() {
+        $params = array();
+
+        $params['sessionid'] = $this->sessionid;
+        $params['grouptype'] = $this->grouptype;
+        if ($this->group) {
+            $params['group'] = $this->group;
+        }
+        if ($this->sort != ATT_SORT_DEFAULT) {
+            $params['sort'] = $this->sort;
+        }
+        if (isset($this->copyfrom)) {
+            $params['copyfrom'] = $this->copyfrom;
+        }
+
+        return $params;
+    }
+}
diff --git a/mod/attendance/classes/task/auto_mark.php b/mod/attendance/classes/task/auto_mark.php
new file mode 100644
index 0000000..54a6f7b
--- /dev/null
+++ b/mod/attendance/classes/task/auto_mark.php
@@ -0,0 +1,221 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance task - auto mark.
+ *
+ * @package    mod_attendance
+ * @copyright  2017 onwards Dan Marsden http://danmarsden.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\task;
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/attendance/locallib.php');
+/**
+ * get_scores class, used to get scores for submitted files.
+ *
+ * @package    mod_attendance
+ * @copyright  2017 onwards Dan Marsden http://danmarsden.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class auto_mark extends \core\task\scheduled_task {
+    public function get_name() {
+        // Shown in admin screens.
+        return get_string('automarktask', 'mod_attendance');
+    }
+    public function execute() {
+        global $DB;
+        // Create some cache vars - might be nice to restructure this and make a smaller number of sql calls.
+        $cachecm = array();
+        $cacheatt = array();
+        $cachecourse = array();
+        $now = time(); // Store current time to use in queries so they all match nicely.
+
+        $sessions = $DB->get_recordset_select('attendance_sessions',
+            'automark > 0 AND automarkcompleted < 2 AND sessdate < ? ', array($now));
+
+        foreach ($sessions as $session) {
+            if ($session->sessdate + $session->duration < $now || // If session is over.
+                // OR if session is currently open and automark is set to do all.
+                ($session->sessdate < $now && $session->automark == 1)) {
+
+                $userfirstaccess = array();
+                $donesomething = false; // Only trigger grades/events when an update actually occurs.
+                $sessionover = false; // Is this session over?
+                if ($session->sessdate + $session->duration < $now) {
+                    $sessionover = true;
+                }
+
+                // Store cm/att/course in cachefields so we don't make unnecessary db calls.
+                // Would probably be nice to grab this stuff outside of the loop.
+                // Make sure this status set has something to setunmarked.
+                $setunmarked = $DB->get_field('attendance_statuses', 'id',
+                    array('attendanceid' => $session->attendanceid, 'setnumber' => $session->statusset,
+                          'setunmarked' => 1, 'deleted' => 0));
+                if (empty($setunmarked)) {
+                    mtrace("No unmarked status configured for session id: ".$session->id);
+                    continue;
+                }
+                if (empty($cacheatt[$session->attendanceid])) {
+                    $cacheatt[$session->attendanceid] = $DB->get_record('attendance', array('id' => $session->attendanceid));
+                }
+                if (empty($cachecm[$session->attendanceid])) {
+                    $cachecm[$session->attendanceid] = get_coursemodule_from_instance('attendance',
+                        $session->attendanceid, $cacheatt[$session->attendanceid]->course);
+                }
+                $courseid = $cacheatt[$session->attendanceid]->course;
+                if (empty($cachecourse[$courseid])) {
+                    $cachecourse[$courseid] = $DB->get_record('course', array('id' => $courseid));
+                }
+                $context = \context_module::instance($cachecm[$session->attendanceid]->id);
+
+                $pageparams = new \mod_attendance_take_page_params();
+                $pageparams->group = $session->groupid;
+                if (empty($session->groupid)) {
+                    $pageparams->grouptype  = 0;
+                } else {
+                    $pageparams->grouptype  = 1;
+                }
+                $pageparams->sessionid  = $session->id;
+
+                if ($session->automark == 1) {
+                    $userfirstacess = array();
+                    // If set to do full automarking, get all users that have accessed course during session open.
+                    $id = $DB->sql_concat('userid', 'ip'); // Users may access from multiple ip, make the first field unique.
+                    $sql = "SELECT $id, userid, ip, min(timecreated) as timecreated
+                             FROM {logstore_standard_log}
+                            WHERE courseid = ? AND timecreated > ? AND timecreated < ?
+                         GROUP BY userid, ip";
+
+                    $timestart = $session->sessdate;
+                    if (empty($session->lasttakenby) && $session->lasttaken > $timestart) {
+                        // If the last time session was taken it was done automatically, use the last time taken
+                        // as the start time for the logs we are interested in to help with performance.
+                        $timestart = $session->lasttaken;
+                    }
+                    $duration = $session->duration;
+                    if (empty($duration)) {
+                        $duration = get_config('attendance', 'studentscanmarksessiontimeend') * 60;
+                    }
+                    $timeend = $timestart + $duration;
+                    $logusers = $DB->get_recordset_sql($sql, array($courseid, $timestart, $timeend));
+                    // Check if user access is in allowed subnet.
+                    foreach ($logusers as $loguser) {
+                        if (!empty($session->subnet) && !address_in_subnet($loguser->ip, $session->subnet)) {
+                            // This record isn't in the right subnet.
+                            continue;
+                        }
+                        if (empty($userfirstaccess[$loguser->userid]) ||
+                            $userfirstaccess[$loguser->userid] > $loguser->timecreated) {
+                            // Users may have accessed from mulitple ip addresses, find the earliest access.
+                            $userfirstaccess[$loguser->userid] = $loguser->timecreated;
+                        }
+                    }
+                    $logusers->close();
+                }
+
+                // Get all unmarked students.
+                $att = new \mod_attendance_structure($cacheatt[$session->attendanceid],
+                    $cachecm[$session->attendanceid], $cachecourse[$courseid], $context, $pageparams);
+
+                $users = $att->get_users($session->groupid, 0);
+
+                $existinglog = $DB->get_recordset('attendance_log', array('sessionid' => $session->id));
+                $updated = 0;
+
+                foreach ($existinglog as $log) {
+                    if (empty($log->statusid)) {
+                        if ($sessionover || !empty($userfirstaccess[$log->studentid])) {
+                            // Status needs updating.
+                            if ($sessionover) {
+                                $log->statusid = $setunmarked;
+                            } else if (!empty($userfirstaccess[$log->studentid])) {
+                                $log->statusid = $att->get_automark_status($userfirstaccess[$log->studentid], $session->id);
+                            }
+                            if (!empty($log->statusid)) {
+                                $log->timetaken = $now;
+                                $log->takenby = 0;
+                                $log->remarks = get_string('autorecorded', 'attendance');
+
+                                $DB->update_record('attendance_log', $log);
+                                $updated++;
+                                $donesomething = true;
+                            }
+                        }
+                    }
+                    unset($users[$log->studentid]);
+                }
+                $existinglog->close();
+                mtrace($updated . " session status updated");
+
+                $newlog = new \stdClass();
+                $newlog->timetaken = $now;
+                $newlog->takenby = 0;
+                $newlog->sessionid = $session->id;
+                $newlog->remarks = get_string('autorecorded', 'attendance');
+                $newlog->statusset = implode(',', array_keys( (array)$att->get_statuses()));
+
+                $added = 0;
+                foreach ($users as $user) {
+                    if ($sessionover || !empty($userfirstaccess[$user->id])) {
+                        if ($sessionover) {
+                            $newlog->statusid = $setunmarked;
+                        } else if (!empty($userfirstaccess[$user->id])) {
+                            $newlog->statusid = $att->get_automark_status($userfirstaccess[$user->id], $session->id);
+                        }
+                        if (!empty($newlog->statusid)) {
+                            $newlog->studentid = $user->id;
+                            $DB->insert_record('attendance_log', $newlog);
+                            $added++;
+                            $donesomething = true;
+                        }
+                    }
+                }
+                mtrace($added . " session status inserted");
+
+                // Update lasttaken time and automarkcompleted for this session.
+                $session->lasttaken = $now;
+                $session->lasttakenby = 0;
+                if ($sessionover) {
+                    $session->automarkcompleted = 2;
+                } else {
+                    $session->automarkcompleted = 1;
+                }
+
+                $DB->update_record('attendance_sessions', $session);
+
+                if ($donesomething) {
+                    if ($att->grade != 0) {
+                        $att->update_users_grade(array_keys($users));
+                    }
+
+                    $params = array(
+                        'sessionid' => $att->pageparams->sessionid,
+                        'grouptype' => $att->pageparams->grouptype);
+                    $event = \mod_attendance\event\attendance_taken::create(array(
+                        'objectid' => $att->id,
+                        'context' => $att->context,
+                        'other' => $params));
+                    $event->add_record_snapshot('course_modules', $att->cm);
+                    $event->add_record_snapshot('attendance_sessions', $session);
+                    $event->trigger();
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/classes/task/notify.php b/mod/attendance/classes/task/notify.php
new file mode 100644
index 0000000..138097c
--- /dev/null
+++ b/mod/attendance/classes/task/notify.php
@@ -0,0 +1,141 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance task - Send warnings.
+ *
+ * @package    mod_attendance
+ * @copyright  2017 onwards Dan Marsden http://danmarsden.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_attendance\task;
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/attendance/locallib.php');
+/**
+ * Task class
+ *
+ * @package    mod_attendance
+ * @copyright  2017 onwards Dan Marsden http://danmarsden.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class notify extends \core\task\scheduled_task {
+    public function get_name() {
+        // Shown in admin screens.
+        return get_string('notifytask', 'mod_attendance');
+    }
+    public function execute() {
+        global $DB;
+        if (empty(get_config('attendance', 'enablewarnings'))) {
+            return; // Warnings not enabled.
+        }
+        $now = time(); // Store current time to use in queries so they all match nicely.
+
+        $orderby = 'ORDER BY cm.id, atl.studentid, n.warningpercent ASC';
+
+        // Get records for attendance sessions that have been updated since last time this task ran.
+        // Note: this returns all users for these sessions - even if the users attendance wasn't changed
+        // since last time we ran, before sending a notification we check to see if the users have
+        // updated attendance logs since last time they were notified.
+        $records = attendance_get_users_to_notify(array(), $orderby, true);
+        $sentnotifications = array();
+        $thirdpartynotifications = array();
+        $numsentusers = 0;
+        $numsentthird = 0;
+        foreach ($records as $record) {
+            if (empty($sentnotifications[$record->userid])) {
+                $sentnotifications[$record->userid] = array();
+            }
+
+            if (!empty($record->emailuser)) {
+                // Only send one warning to this user from each attendance in this run.
+                // Flag any higher percent notifications as sent.
+                if (empty($sentnotifications[$record->userid]) || !in_array($record->aid, $sentnotifications[$record->userid])) {
+
+                    // If has previously been sent a warning, check to see if this user has
+                    // attendance updated since the last time the notification was sent.
+                    if (!empty($record->timesent)) {
+                        $sql = "SELECT *
+                              FROM {attendance_log} l
+                              JOIN {attendance_sessions} s ON s.id = l.sessionid
+                             WHERE s.attendanceid = ? AND studentid = ? AND timetaken > ?";
+                        if (!$DB->record_exists_sql($sql, array($record->aid, $record->userid, $record->timesent))) {
+                            continue; // Skip this record and move to the next user.
+                        }
+                    }
+
+                    // Convert variables in emailcontent.
+                    $record = attendance_template_variables($record);
+                    $user = $DB->get_record('user', array('id' => $record->userid));
+                    $from = \core_user::get_noreply_user();
+
+                    $emailcontent = format_text($record->emailcontent, $record->emailcontentformat);
+
+                    email_to_user($user, $from, $record->emailsubject, $emailcontent, $emailcontent);
+
+                    $sentnotifications[$record->userid][] = $record->aid;
+                    $numsentusers++;
+                }
+            }
+            // Only send one warning to this user from each attendance in this run. - flag any higher percent notifications as sent.
+            if (!empty($record->thirdpartyemails)) {
+                $sendto = explode(',', $record->thirdpartyemails);
+                $record->percent = round($record->percent * 100)."%";
+                $context = \context_module::instance($record->cmid);
+                foreach ($sendto as $senduser) {
+                    // Check user is allowed to receive warningemails.
+                    if (has_capability('mod/attendance:warningemails', $context, $senduser)) {
+                        if (empty($thirdpartynotifications[$senduser])) {
+                            $thirdpartynotifications[$senduser] = array();
+                        }
+                        if (!isset($thirdpartynotifications[$senduser][$record->aid . '_' . $record->userid])) {
+                            $thirdpartynotifications[$senduser][$record->aid . '_' . $record->userid]
+                                = get_string('thirdpartyemailtext', 'attendance', $record);
+                        }
+                    } else {
+                        mtrace("user".$senduser. "does not have capablity in cm".$record->cmid);
+                    }
+                }
+            }
+            $notify = new \stdClass();
+            $notify->userid = $record->userid;
+            $notify->notifyid = $record->notifyid;
+            $notify->timesent = $now;
+            $DB->insert_record('attendance_warning_done', $notify);
+        }
+        if (!empty($numsentusers)) {
+            mtrace($numsentusers ." user emails sent");
+        }
+        if (!empty($thirdpartynotifications)) {
+            foreach ($thirdpartynotifications as $sendid => $notifications) {
+                $user = $DB->get_record('user', array('id' => $sendid));
+                $from = \core_user::get_noreply_user();
+
+                $emailcontent = implode("\n", $notifications);
+                $emailcontent .= "\n\n".get_string('thirdpartyemailtextfooter', 'attendance');
+                $emailcontent = format_text($emailcontent);
+                $emailsubject = get_string('thirdpartyemailsubject', 'attendance');
+
+                email_to_user($user, $from, $emailsubject, $emailcontent, $emailcontent);
+                $numsentthird++;
+            }
+            if (!empty($numsentthird)) {
+                mtrace($numsentthird ." thirdparty emails sent");
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/classes/view_page_params.php b/mod/attendance/classes/view_page_params.php
new file mode 100644
index 0000000..c0f98a7
--- /dev/null
+++ b/mod/attendance/classes/view_page_params.php
@@ -0,0 +1,70 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Class definition for mod_attendance_view_page_params
+ *
+ * @package   mod_attendance
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * contains functions/constants used by attendance view page.
+ *
+ * @copyright  2016 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_view_page_params extends mod_attendance_page_with_filter_controls {
+    /** Only This course  */
+    const MODE_THIS_COURSE  = 0;
+
+    /** All courses  */
+    const MODE_ALL_COURSES  = 1;
+
+    /** @var int */
+    public $studentid;
+
+    /** @var string */
+    public $mode;
+
+    /**
+     * mod_attendance_view_page_params constructor.
+     */
+    public function  __construct() {
+        $this->defaultview = ATT_VIEW_MONTHS;
+    }
+
+    /**
+     * Get params for url.
+     *
+     * @return array
+     */
+    public function get_significant_params() {
+        $params = array();
+
+        if (isset($this->studentid)) {
+            $params['studentid'] = $this->studentid;
+        }
+        if ($this->mode != self::MODE_THIS_COURSE) {
+            $params['mode'] = $this->mode;
+        }
+
+        return $params;
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/composer.json b/mod/attendance/composer.json
new file mode 100644
index 0000000..43ab0b7
--- /dev/null
+++ b/mod/attendance/composer.json
@@ -0,0 +1,10 @@
+{
+    "name": "danmarsden/moodle-mod_attendance",
+    "type": "moodle-mod",
+    "require": {
+        "composer/installers": "~1.0"
+    },
+    "extra": {
+        "installer-name": "attendance"
+    }
+}
diff --git a/mod/attendance/coursesummary.php b/mod/attendance/coursesummary.php
new file mode 100644
index 0000000..55e4566
--- /dev/null
+++ b/mod/attendance/coursesummary.php
@@ -0,0 +1,124 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance course summary report.
+ *
+ * @package    mod_attendance
+ * @copyright  2017 onwards Dan Marsden http://danmarsden.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->dirroot.'/mod/attendance/lib.php');
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+require_once($CFG->libdir.'/tablelib.php');
+require_once($CFG->libdir.'/coursecatlib.php');
+
+$category = optional_param('category', 0, PARAM_INT);
+$download = optional_param('download', '', PARAM_ALPHA);
+$sort = optional_param('tsort', '', PARAM_ALPHA);
+$fromcourse = optional_param('fromcourse', 0, PARAM_INT);
+
+$admin = false;
+if (empty($fromcourse)) {
+    $admin = true;
+    admin_externalpage_setup('managemodules');
+} else {
+    require_login($fromcourse);
+}
+
+if (empty($category)) {
+    $context = context_system::instance();
+    $courses = array(); // Show all courses.
+} else {
+    $context = context_coursecat::instance($category);
+    $coursecat = coursecat::get($category);
+    $courses = $coursecat->get_courses(array('recursive' => true, 'idonly' => true));
+}
+// Check permissions.
+require_capability('mod/attendance:viewsummaryreports', $context);
+
+$exportfilename = 'attendancecoursesummary.csv';
+
+$PAGE->set_url('/mod/attendance/coursesummary.php', array('category' => $category));
+
+$PAGE->set_heading($SITE->fullname);
+
+$table = new flexible_table('attendancecoursesummary');
+$table->define_baseurl($PAGE->url);
+
+if (!$table->is_downloading($download, $exportfilename)) {
+    echo $OUTPUT->header();
+    $heading = get_string('coursesummary', 'mod_attendance');
+    if (!empty($category)) {
+        $heading .= " (".$coursecat->name.")";
+    }
+    echo $OUTPUT->heading($heading);
+    if ($admin) {
+        // Only show tabs if displaying via the admin page.
+        $tabmenu = attendance_print_settings_tabs('coursesummary');
+        echo $tabmenu;
+    }
+    $url = new moodle_url('/mod/attendance/coursesummary.php', array('category' => $category, 'fromcourse' => $fromcourse));
+
+    if ($admin) {
+        $options = coursecat::make_categories_list('mod/attendance:viewsummaryreports');
+        echo $OUTPUT->single_select($url, 'category', $options, $category);
+    }
+
+}
+
+$table->define_columns(array('course', 'percentage'));
+$table->define_headers(array(get_string('course'),
+    get_string('averageattendance', 'attendance')));
+$table->sortable(true);
+$table->no_sorting('course');
+$table->set_attribute('cellspacing', '0');
+$table->set_attribute('class', 'generaltable generalbox');
+$table->show_download_buttons_at(array(TABLE_P_BOTTOM));
+$table->setup();
+
+// Work out direction of sort required.
+$sortcolumns = $table->get_sort_columns();
+// Now do sorting if specified.
+
+$orderby = ' ORDER BY percentage ASC';
+if (!empty($sort)) {
+    $direction = ' DESC';
+    if (!empty($sortcolumns[$sort]) && $sortcolumns[$sort] == SORT_ASC) {
+        $direction = ' ASC';
+    }
+    $orderby = " ORDER BY $sort $direction";
+
+}
+
+$records = attendance_course_users_points($courses, $orderby);
+foreach ($records as $record) {
+    if (!$table->is_downloading($download, $exportfilename)) {
+        $url = new moodle_url('/mod/attendance/index.php', array('id' => $record->courseid));
+        $name = html_writer::link($url, $record->coursename);
+    } else {
+        $name = $record->coursename;
+    }
+    $table->add_data(array($name, round($record->percentage * 100)."%"));
+}
+$table->finish_output();
+
+if (!$table->is_downloading()) {
+    echo $OUTPUT->footer();
+}
\ No newline at end of file
diff --git a/mod/attendance/db/access.php b/mod/attendance/db/access.php
new file mode 100644
index 0000000..22841ed
--- /dev/null
+++ b/mod/attendance/db/access.php
@@ -0,0 +1,156 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Capability definitions for this module.
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$capabilities = array(
+    'mod/attendance:view' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/attendance:addinstance' => array(
+        'riskbitmask' => RISK_XSS,
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        ),
+        'clonepermissionsfrom' => 'moodle/course:manageactivities'
+    ),
+
+    'mod/attendance:viewreports' => array(
+        'riskbitmask' => RISK_PERSONAL,
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/attendance:takeattendances' => array(
+        'riskbitmask' => RISK_DATALOSS,
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/attendance:changeattendances' => array(
+        'riskbitmask' => RISK_DATALOSS,
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/attendance:manageattendances' => array(
+        'riskbitmask' => RISK_CONFIG,
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/attendance:changepreferences' => array(
+        'riskbitmask' => RISK_CONFIG,
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/attendance:export' => array(
+        'riskbitmask' => RISK_PERSONAL,
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+
+    'mod/attendance:canbelisted' => array(
+        'riskbitmask' => RISK_PERSONAL,
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW
+        )
+    ),
+
+    // Allow teachers to manage temporary users.
+    'mod/attendance:managetemporaryusers' => array(
+        'riskbitmask' => RISK_DATALOSS,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+    // Allow access to site level reports.
+    'mod/attendance:viewsummaryreports' => array(
+        'riskbitmask' => RISK_PERSONAL,
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSECAT,
+        'archetypes' => array(
+            'manager' => CAP_ALLOW
+        )
+    ),
+    // Users that can receive extra warning e-mails.
+    'mod/attendance:warningemails' => array(
+        'riskbitmask' => RISK_DATALOSS,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    )
+);
diff --git a/mod/attendance/db/events.php b/mod/attendance/db/events.php
new file mode 100644
index 0000000..6b877b3
--- /dev/null
+++ b/mod/attendance/db/events.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance event handler definition.
+ *
+ * @package mod_attendance
+ * @category event
+ * @copyright 2017 Dan Marsden
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+// List of observers.
+$observers = array(
+
+    array(
+        'eventname'   => '\core\event\course_content_deleted',
+        'callback'    => 'mod_attendance_observer::course_content_deleted',
+    ),
+
+);
diff --git a/mod/attendance/db/install.php b/mod/attendance/db/install.php
new file mode 100644
index 0000000..4bcb19a
--- /dev/null
+++ b/mod/attendance/db/install.php
@@ -0,0 +1,49 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * post installation hook for adding data.
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Post installation procedure
+ */
+function xmldb_attendance_install() {
+    global $DB;
+
+    $result = true;
+    $arr = array('P' => 2, 'A' => 0, 'L' => 1, 'E' => 1);
+    foreach ($arr as $k => $v) {
+        $rec = new stdClass;
+        $rec->attendanceid = 0;
+        $rec->acronym = get_string($k.'acronym', 'attendance');
+        $rec->description = get_string($k.'full', 'attendance');
+        $rec->grade = $v;
+        $rec->visible = 1;
+        $rec->deleted = 0;
+        if (!$DB->record_exists('attendance_statuses', array('attendanceid' => 0, 'acronym' => $rec->acronym))) {
+            $result = $result && $DB->insert_record('attendance_statuses', $rec);
+        }
+    }
+
+    return $result;
+}
diff --git a/mod/attendance/db/install.xml b/mod/attendance/db/install.xml
new file mode 100644
index 0000000..efd9c6c
--- /dev/null
+++ b/mod/attendance/db/install.xml
@@ -0,0 +1,149 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="mod/attendance/db" VERSION="20170620" COMMENT="XMLDB file for Moodle mod/attendance"
+       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+       xsi:noNamespaceSchemaLocation="../../../lib/xmldb/xmldb.xsd"
+>
+  <TABLES>
+    <TABLE NAME="attendance" COMMENT="Attendance module table">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="grade" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="100" SEQUENCE="false" COMMENT="This is maximum grade for instance"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="The time the settings for this attendance instance were last modified."/>
+        <FIELD NAME="intro" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="This field is a requirement for activity modules."/>
+        <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="This field is a requirement for activity modules."/>
+        <FIELD NAME="subnet" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="Default subnet used when creating sessions."/>
+        <FIELD NAME="sessiondetailspos" TYPE="char" LENGTH="5" NOTNULL="true" DEFAULT="left" SEQUENCE="false" COMMENT="Position for the session detail columns related to summary columns."/>
+        <FIELD NAME="showsessiondetails" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false" COMMENT="Define if session details should be shown in reports."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for attendance"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="course" UNIQUE="false" FIELDS="course"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="attendance_sessions" COMMENT="attendance_sessions table retrofitted from MySQL">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="attendanceid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="sessdate" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="duration" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="lasttaken" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="lasttakenby" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="description" TYPE="text" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="descriptionformat" TYPE="int" LENGTH="2" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="studentscanmark" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="studentpassword" TYPE="char" LENGTH="50" NOTNULL="false" DEFAULT="" SEQUENCE="false"/>
+        <FIELD NAME="subnet" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="Restrict ability for students to mark by subnet."/>
+        <FIELD NAME="automark" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="automarkcompleted" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="statusset" TYPE="int" LENGTH="5" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Which set of statuses to use"/>
+        <FIELD NAME="caleventid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for attendance_sessions"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="attendanceid" UNIQUE="false" FIELDS="attendanceid"/>
+        <INDEX NAME="groupid" UNIQUE="false" FIELDS="groupid"/>
+        <INDEX NAME="sessdate" UNIQUE="false" FIELDS="sessdate"/>
+        <INDEX NAME="caleventid" UNIQUE="false" FIELDS="caleventid"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="attendance_log" COMMENT="attendance_log table retrofitted from MySQL">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="sessionid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="studentid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="statusid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="link with attendance_status table"/>
+        <FIELD NAME="statusset" TYPE="char" LENGTH="100" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="timetaken" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="When attendance of this student was taken"/>
+        <FIELD NAME="takenby" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="remarks" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for attendance_log"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="sessionid" UNIQUE="false" FIELDS="sessionid"/>
+        <INDEX NAME="studentid" UNIQUE="false" FIELDS="studentid"/>
+        <INDEX NAME="statusid" UNIQUE="false" FIELDS="statusid"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="attendance_statuses" COMMENT="attendance_statuses table retrofitted from MySQL">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="attendanceid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="acronym" TYPE="char" LENGTH="2" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="description" TYPE="char" LENGTH="30" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="grade" TYPE="number" LENGTH="5" NOTNULL="true" DEFAULT="0" SEQUENCE="false" DECIMALS="2"/>
+        <FIELD NAME="studentavailability" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="How many minutes this status is available when self marking is enabled."/>
+        <FIELD NAME="setunmarked" TYPE="int" LENGTH="2" NOTNULL="false" SEQUENCE="false" COMMENT="Set this status if unmarked at end of session."/>
+        <FIELD NAME="visible" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
+        <FIELD NAME="deleted" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="setnumber" TYPE="int" LENGTH="5" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Allows different sets of statuses to be allocated to different sessions"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for attendance_settings"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="attendanceid" UNIQUE="false" FIELDS="attendanceid"/>
+        <INDEX NAME="visible" UNIQUE="false" FIELDS="visible"/>
+        <INDEX NAME="deleted" UNIQUE="false" FIELDS="deleted"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="attendance_tempusers" COMMENT="Stores temporary users details">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="studentid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="student id"/>
+        <FIELD NAME="courseid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="course id"/>
+        <FIELD NAME="fullname" TYPE="char" LENGTH="100" NOTNULL="false" SEQUENCE="false" COMMENT="temp user fullname"/>
+        <FIELD NAME="email" TYPE="char" LENGTH="100" NOTNULL="false" SEQUENCE="false" COMMENT="temporary user email"/>
+        <FIELD NAME="created" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="unix timestamp for temp user creation"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="courseid" UNIQUE="false" FIELDS="courseid"/>
+        <INDEX NAME="studentid" UNIQUE="true" FIELDS="studentid"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="attendance_warning" COMMENT="Warning configuration">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="idnumber" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="attendance id or other id relating to this warning."/>
+        <FIELD NAME="warningpercent" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Percentage that triggers this warning."/>
+        <FIELD NAME="warnafter" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Start warning after this number of taken sessions."/>
+        <FIELD NAME="maxwarn" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Maximum number of warnings to send."/>
+        <FIELD NAME="emailuser" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false" COMMENT="Should the user be notified at this level."/>
+        <FIELD NAME="emailsubject" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="Email subject line for emails going to user"/>
+        <FIELD NAME="emailcontent" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="The html-formatted text that should be sent to the user"/>
+        <FIELD NAME="emailcontentformat" TYPE="int" LENGTH="4" NOTNULL="true" SEQUENCE="false" COMMENT="Format of the emailcontent field"/>
+        <FIELD NAME="thirdpartyemails" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="list of extra users to receive warnings"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+        <KEY NAME="level_id" TYPE="unique" FIELDS="idnumber, warningpercent, warnafter"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="attendance_warning_done" COMMENT="Warnings processed">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="notifyid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="id of warning"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="user id of user"/>
+        <FIELD NAME="timesent" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time warning sent to user."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="notifyid_userid" UNIQUE="false" FIELDS="notifyid, userid"/>
+      </INDEXES>
+    </TABLE>
+  </TABLES>
+</XMLDB>
\ No newline at end of file
diff --git a/mod/attendance/db/services.php b/mod/attendance/db/services.php
new file mode 100644
index 0000000..274f023
--- /dev/null
+++ b/mod/attendance/db/services.php
@@ -0,0 +1,58 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Web service local plugin attendance external functions and service definitions.
+ *
+ * @package    mod_attendance
+ * @copyright  2015 Caio Bressan Doneda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$functions = array(
+    'mod_wsattendance_get_courses_with_today_sessions' => array(
+        'classname'   => 'mod_wsattendance_external',
+        'methodname'  => 'get_courses_with_today_sessions',
+        'classpath'   => 'mod/attendance/externallib.php',
+        'description' => 'Method that retrieves courses with today sessions of a teacher.',
+        'type'        => 'read',
+    ),
+    'mod_wsattendance_get_session' => array(
+        'classname'   => 'mod_wsattendance_external',
+        'methodname'  => 'get_session',
+        'classpath'   => 'mod/attendance/externallib.php',
+        'description' => 'Method that retrieves the session data',
+        'type'        => 'read',
+    ),
+
+    'mod_wsattendance_update_user_status' => array(
+        'classname'   => 'mod_wsattendance_external',
+        'methodname'  => 'update_user_status',
+        'classpath'   => 'mod/attendance/externallib.php',
+        'description' => 'Method that updates the user status in a session.',
+        'type'        => 'write',
+    )
+);
+
+
+// We define the services to install as pre-build services. A pre-build service is not editable by administrator.
+$services = array('Attendance' => array('functions' => array('mod_wsattendance_get_courses_with_today_sessions',
+                  'mod_wsattendance_get_session',
+                  'mod_wsattendance_update_user_status'),
+                  'restrictedusers' => 0,
+                  'enabled' => 1));
diff --git a/mod/attendance/db/tasks.php b/mod/attendance/db/tasks.php
new file mode 100644
index 0000000..361f9f3
--- /dev/null
+++ b/mod/attendance/db/tasks.php
@@ -0,0 +1,44 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance module tasks.
+ *
+ * @package    mod_attendance
+ * @copyright  2017 Dan Marsden
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$tasks = array(
+    array(
+        'classname' => 'mod_attendance\task\auto_mark',
+        'blocking' => 0,
+        'minute' => '8',
+        'hour' => '*',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'),
+    array(
+        'classname' => 'mod_attendance\task\notify',
+        'blocking' => 0,
+        'minute' => '30',
+        'hour' => '1',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*')
+);
\ No newline at end of file
diff --git a/mod/attendance/db/upgrade.php b/mod/attendance/db/upgrade.php
new file mode 100644
index 0000000..ce1be8e
--- /dev/null
+++ b/mod/attendance/db/upgrade.php
@@ -0,0 +1,457 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * upgrade processes for this module.
+ *
+ * @package   mod_attendance
+ * @copyright 2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once(dirname(__FILE__) . '/upgradelib.php');
+
+/**
+ * upgrade this attendance instance - this function could be skipped but it will be needed later
+ * @param int $oldversion The old version of the attendance module
+ * @return bool
+ */
+function xmldb_attendance_upgrade($oldversion=0) {
+
+    global $DB;
+    $dbman = $DB->get_manager(); // Loads ddl manager and xmldb classes.
+
+    $result = true;
+
+    if ($oldversion < 2014112000) {
+        $table = new xmldb_table('attendance_sessions');
+
+        $field = new xmldb_field('studentscanmark');
+        $field->set_attributes(XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        upgrade_mod_savepoint(true, 2014112000, 'attendance');
+    }
+
+    if ($oldversion < 2014112001) {
+        // Replace values that reference old module "attforblock" to "attendance".
+        $sql = "UPDATE {grade_items}
+                   SET itemmodule = 'attendance'
+                 WHERE itemmodule = 'attforblock'";
+
+        $DB->execute($sql);
+
+        $sql = "UPDATE {grade_items_history}
+                   SET itemmodule = 'attendance'
+                 WHERE itemmodule = 'attforblock'";
+
+        $DB->execute($sql);
+
+        /*
+         * The user's custom capabilities need to be preserved due to the module renaming.
+         * Capabilities with a modifierid = 0 value are installed by default.
+         * Only update the user's custom capabilities where modifierid is not zero.
+         */
+        $sql = $DB->sql_like('capability', '?').' AND modifierid <> 0';
+        $rs = $DB->get_recordset_select('role_capabilities', $sql, array('%mod/attforblock%'));
+        foreach ($rs as $cap) {
+            $renamedcapability = str_replace('mod/attforblock', 'mod/attendance', $cap->capability);
+            $exists = $DB->record_exists('role_capabilities', array('roleid' => $cap->roleid, 'capability' => $renamedcapability));
+            if (!$exists) {
+                $DB->update_record('role_capabilities', array('id' => $cap->id, 'capability' => $renamedcapability));
+            }
+        }
+
+        // Delete old role capabilities.
+        $sql = $DB->sql_like('capability', '?');
+        $DB->delete_records_select('role_capabilities', $sql, array('%mod/attforblock%'));
+
+        // Delete old capabilities.
+        $DB->delete_records_select('capabilities', 'component = ?', array('mod_attforblock'));
+
+        upgrade_mod_savepoint(true, 2014112001, 'attendance');
+    }
+
+    if ($oldversion < 2015040501) {
+        // Define table attendance_tempusers to be created.
+        $table = new xmldb_table('attendance_tempusers');
+
+        // Adding fields to table attendance_tempusers.
+        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+        $table->add_field('studentid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);
+        $table->add_field('courseid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);
+        $table->add_field('fullname', XMLDB_TYPE_CHAR, '100', null, null, null, null);
+        $table->add_field('email', XMLDB_TYPE_CHAR, '100', null, null, null, null);
+        $table->add_field('created', XMLDB_TYPE_INTEGER, '10', null, null, null, null);
+
+        // Adding keys to table attendance_tempusers.
+        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+
+        // Conditionally launch create table for attendance_tempusers.
+        if (!$dbman->table_exists($table)) {
+            $dbman->create_table($table);
+        }
+
+        // Conditionally launch add index courseid.
+        $index = new xmldb_index('courseid', XMLDB_INDEX_NOTUNIQUE, array('courseid'));
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Conditionally launch add index studentid.
+        $index = new xmldb_index('studentid', XMLDB_INDEX_UNIQUE, array('studentid'));
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2015040501, 'attendance');
+    }
+
+    if ($oldversion < 2015040502) {
+
+        // Define field setnumber to be added to attendance_statuses.
+        $table = new xmldb_table('attendance_statuses');
+        $field = new xmldb_field('setnumber', XMLDB_TYPE_INTEGER, '5', null, XMLDB_NOTNULL, null, '0', 'deleted');
+
+        // Conditionally launch add field setnumber.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Define field statusset to be added to attendance_sessions.
+        $table = new xmldb_table('attendance_sessions');
+        $field = new xmldb_field('statusset', XMLDB_TYPE_INTEGER, '5', null, XMLDB_NOTNULL, null, '0', 'descriptionformat');
+
+        // Conditionally launch add field statusset.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2015040502, 'attendance');
+    }
+
+    if ($oldversion < 2015040503) {
+
+        // Changing type of field grade on table attendance_statuses to number.
+        $table = new xmldb_table('attendance_statuses');
+        $field = new xmldb_field('grade', XMLDB_TYPE_NUMBER, '5, 2', null, XMLDB_NOTNULL, null, '0', 'description');
+
+        // Launch change of type for field grade.
+        $dbman->change_field_type($table, $field);
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2015040503, 'attendance');
+    }
+
+    if ($oldversion < 2016052202) {
+        // Adding field to store calendar event ids.
+        $table = new xmldb_table('attendance_sessions');
+        $field = new xmldb_field('caleventid', XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', null);
+
+        // Conditionally launch add field statusset.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Creating events for all existing sessions.
+        attendance_upgrade_create_calendar_events();
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2016052202, 'attendance');
+    }
+
+    if ($oldversion < 2016082900) {
+
+        // Define field timemodified to be added to attendance.
+        $table = new xmldb_table('attendance');
+        $field = new xmldb_field('timemodified', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'grade');
+
+        // Conditionally launch add field timemodified.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2016082900, 'attendance');
+    }
+    if ($oldversion < 2016112100) {
+        $table = new xmldb_table('attendance');
+        $newfield = $table->add_field('subnet', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'timemodified');
+        if (!$dbman->field_exists($table, $newfield)) {
+            $dbman->add_field($table, $newfield);
+        }
+        upgrade_mod_savepoint(true, 2016112100, 'attendance');
+    }
+
+    if ($oldversion < 2016121300) {
+        $table = new xmldb_table('attendance');
+        $field = new xmldb_field('sessiondetailspos', XMLDB_TYPE_CHAR, '5', null, null, null, 'left', 'subnet');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        $field = new xmldb_field('showsessiondetails', XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '1', 'subnet');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        upgrade_mod_savepoint(true, 2016121300, 'attendance');
+    }
+
+    if ($oldversion < 2017020700) {
+        // Define field timemodified to be added to attendance.
+        $table = new xmldb_table('attendance');
+
+        $fields = [];
+        $fields[] = new xmldb_field('intro', XMLDB_TYPE_TEXT, null, null, null, null, null, 'timemodified');
+        $fields[] = new xmldb_field('introformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, 0, 'intro');
+
+        // Conditionally launch add field.
+        foreach ($fields as $field) {
+            if (!$dbman->field_exists($table, $field)) {
+                $dbman->add_field($table, $field);
+            }
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017020700, 'attendance');
+    }
+
+    if ($oldversion < 2017042800) {
+        $table = new xmldb_table('attendance_sessions');
+
+        $field = new xmldb_field('studentpassword');
+        $field->set_attributes(XMLDB_TYPE_CHAR, '50', null, false, null, '', 'studentscanmark');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        upgrade_mod_savepoint(true, 2017042800, 'attendance');
+    }
+
+    if ($oldversion < 2017051101) {
+
+        // Define field studentavailability to be added to attendance_statuses.
+        $table = new xmldb_table('attendance_statuses');
+        $field = new xmldb_field('studentavailability', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'grade');
+
+        // Conditionally launch add field studentavailability.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017051101, 'attendance');
+    }
+
+    if ($oldversion < 2017051103) {
+        $table = new xmldb_table('attendance_sessions');
+        $newfield = $table->add_field('subnet', XMLDB_TYPE_CHAR, '255', null, null, null, null, 'studentpassword');
+        if (!$dbman->field_exists($table, $newfield)) {
+            $dbman->add_field($table, $newfield);
+        }
+        upgrade_mod_savepoint(true, 2017051103, 'attendance');
+    }
+
+    if ($oldversion < 2017051104) {
+        // The meaning of the subnet in the attendance table has changed - it is now the "default" value - find all existing
+        // Attendance with subnet set and set the session subnet for these.
+        $attendances = $DB->get_recordset_select('attendance', 'subnet IS NOT NULL');
+        foreach ($attendances as $attendance) {
+            if (!empty($attendance->subnet)) {
+                // Get all sessions for this attendance.
+                $sessions = $DB->get_recordset('attendance_sessions', array('attendanceid' => $attendance->id));
+                foreach ($sessions as $session) {
+                    $session->subnet = $attendance->subnet;
+                    $DB->update_record('attendance_sessions', $session);
+                }
+                $sessions->close();
+            }
+        }
+        $attendances->close();
+
+        upgrade_mod_savepoint(true, 2017051104, 'attendance');
+    }
+
+    if ($oldversion < 2017051900) {
+        // Define field setunmarked to be added to attendance_statuses.
+        $table = new xmldb_table('attendance_statuses');
+        $field = new xmldb_field('setunmarked', XMLDB_TYPE_INTEGER, '2', null, null, null, null, 'studentavailability');
+
+        // Conditionally launch add field studentavailability.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017051900, 'attendance');
+    }
+
+    if ($oldversion < 2017052201) {
+        // Define field setunmarked to be added to attendance_statuses.
+        $table = new xmldb_table('attendance_sessions');
+        $field = new xmldb_field('automark', XMLDB_TYPE_INTEGER, '1', null, true, null, '0', 'subnet');
+
+        // Conditionally launch add field automark.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        $field = new xmldb_field('automarkcompleted', XMLDB_TYPE_INTEGER, '1', null, true, null, '0', 'automark');
+
+        // Conditionally launch add field automarkcompleted.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017052201, 'attendance');
+    }
+
+    if ($oldversion < 2017060900) {
+        // Automark values changed.
+        $default = get_config('attendance', 'automark_default');
+        if (!empty($default)) { // Change default if set.
+            set_config('automark_default', 2, 'attendance');
+        }
+        // Update any sessions set to use automark = 1.
+        $sql = "UPDATE {attendance_sessions} SET automark = 2 WHERE automark = 1";
+        $DB->execute($sql);
+
+        // Update automarkcompleted to 2 if already complete.
+        $sql = "UPDATE {attendance_sessions} SET automarkcompleted = 2 WHERE automarkcompleted = 1";
+        $DB->execute($sql);
+
+        upgrade_mod_savepoint(true, 2017060900, 'attendance');
+    }
+
+    if ($oldversion < 2017062000) {
+
+        // Define table attendance_warning_done to be created.
+        $table = new xmldb_table('attendance_warning_done');
+
+        // Adding fields to table attendance_warning_done.
+        $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+        $table->add_field('notifyid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+        $table->add_field('userid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+        $table->add_field('timesent', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+
+        // Adding keys to table attendance_warning_done.
+        $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+
+        // Adding indexes to table attendance_warning_done.
+        $table->add_index('notifyid_userid', XMLDB_INDEX_UNIQUE, array('notifyid', 'userid'));
+
+        // Conditionally launch create table for attendance_warning_done.
+        if (!$dbman->table_exists($table)) {
+            $dbman->create_table($table);
+        }
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017062000, 'attendance');
+    }
+
+    if ($oldversion < 2017071305) {
+
+        // Define table attendance_warning to be created.
+        $table = new xmldb_table('attendance_warning');
+
+        if (!$dbman->table_exists($table)) {
+            // Adding fields to table attendance_warning.
+            $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
+            $table->add_field('idnumber', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+            $table->add_field('warningpercent', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+            $table->add_field('warnafter', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
+            $table->add_field('emailuser', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);
+            $table->add_field('emailsubject', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null);
+            $table->add_field('emailcontent', XMLDB_TYPE_TEXT, null, null, XMLDB_NOTNULL, null, null);
+            $table->add_field('emailcontentformat', XMLDB_TYPE_INTEGER, '4', null, XMLDB_NOTNULL, null, null);
+            $table->add_field('thirdpartyemails', XMLDB_TYPE_TEXT, null, null, null, null, null);
+
+            // Adding keys to table attendance_warning.
+            $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
+            $table->add_key('level_id', XMLDB_KEY_UNIQUE, array('idnumber, warningpercent, warnafter'));
+
+            // Conditionally launch create table for attendance_warning.
+            $dbman->create_table($table);
+
+        } else {
+            // Key definition is probably incorrect so fix it - drop_key dml function doesn't seem to work.
+            $indexes = $DB->get_indexes('attendance_warning');
+            foreach ($indexes as $name => $index) {
+                if ($DB->get_dbfamily() === 'mysql') {
+                    $DB->execute("ALTER TABLE {attendance_warning} DROP INDEX ". $name);
+                } else {
+                    $DB->execute("DROP INDEX ". $name);
+                }
+            }
+            $index = new xmldb_key('level_id', XMLDB_KEY_UNIQUE, array('idnumber, warningpercent', 'warnafter'));
+            $dbman->add_key($table, $index);
+        }
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017071305, 'attendance');
+    }
+
+    if ($oldversion < 2017071800) {
+        // Define field setunmarked to be added to attendance_statuses.
+        $table = new xmldb_table('attendance_warning');
+        $field = new xmldb_field('maxwarn', XMLDB_TYPE_INTEGER, '10', null, true, null, '1', 'warnafter');
+
+        // Conditionally launch add field automark.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017071800, 'attendance');
+    }
+
+    if ($oldversion < 2017071802) {
+        // Define field setunmarked to be added to attendance_statuses.
+        $table = new xmldb_table('attendance_warning_done');
+
+        $index = new xmldb_index('notifyid_userid', XMLDB_INDEX_UNIQUE, array('notifyid', 'userid'));
+        $dbman->drop_index($table, $index);
+
+        $index = new xmldb_index('notifyid', XMLDB_INDEX_NOTUNIQUE, array('notifyid', 'userid'));
+        $dbman->add_index($table, $index);
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017071802, 'attendance');
+    }
+
+    if ($oldversion < 2017082200) {
+        // Warnings idnumber field should use attendanceid instead of cmid.
+        $sql = "SELECT cm.id, cm.instance
+                  FROM {course_modules} cm
+                  JOIN {modules} md ON md.id = cm.module AND md.name = 'attendance'";
+        $idnumbers = $DB->get_records_sql_menu($sql);
+        $warnings = $DB->get_recordset('attendance_warning');
+        foreach ($warnings as $warning) {
+            if (!empty($warning->idnumber) && !empty($idnumbers[$warning->idnumber])) {
+                $warning->idnumber = $idnumbers[$warning->idnumber];
+                $DB->update_record("attendance_warning", $warning);
+            }
+        }
+        $warnings->close();
+
+        // Attendance savepoint reached.
+        upgrade_mod_savepoint(true, 2017082200, 'attendance');
+    }
+    return $result;
+}
diff --git a/mod/attendance/db/upgradelib.php b/mod/attendance/db/upgradelib.php
new file mode 100644
index 0000000..e2ba9ca
--- /dev/null
+++ b/mod/attendance/db/upgradelib.php
@@ -0,0 +1,55 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Helper functions to keep upgrade.php clean.
+ *
+ * @package   mod_attendance
+ * @copyright 2016 Vyacheslav Strelkov <strelkov.vo@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Function to help upgrade old attendance records and create calendar events.
+ */
+function attendance_upgrade_create_calendar_events() {
+    global $DB;
+
+    $attendances = $DB->get_records('attendance', null, null, 'id, name, course');
+    foreach ($attendances as $att) {
+        $sessionsdata = $DB->get_records('attendance_sessions', array('attendanceid' => $att->id), null,
+            'id, groupid, sessdate, duration, description, descriptionformat');
+        foreach ($sessionsdata as $session) {
+            $calevent = new stdClass();
+            $calevent->name           = $att->name;
+            $calevent->courseid       = $att->course;
+            $calevent->groupid        = $session->groupid;
+            $calevent->instance       = $att->id;
+            $calevent->timestart      = $session->sessdate;
+            $calevent->timeduration   = $session->duration;
+            $calevent->eventtype      = 'attendance';
+            $calevent->timemodified   = time();
+            $calevent->modulename     = 'attendance';
+            $calevent->description    = $session->description;
+            $calevent->format         = $session->descriptionformat;
+
+            $caleventid = $DB->insert_record('event', $calevent);
+            $DB->set_field('attendance_sessions', 'caleventid', $caleventid, array('id' => $session->id));
+        }
+    }
+}
diff --git a/mod/attendance/defaultstatus.php b/mod/attendance/defaultstatus.php
new file mode 100644
index 0000000..b1531f2
--- /dev/null
+++ b/mod/attendance/defaultstatus.php
@@ -0,0 +1,128 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Allows default status set to be modified.
+ *
+ * @package   mod_attendance
+ * @copyright 2017 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+require_once(__DIR__.'/../../config.php');
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->dirroot.'/mod/attendance/lib.php');
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+
+$action         = optional_param('action', null, PARAM_INT);
+$statusid       = optional_param('statusid', null, PARAM_INT);
+admin_externalpage_setup('managemodules');
+$url = new moodle_url('/mod/attendance/defaultstatus.php', array('statusid' => $statusid, 'action' => $action));
+
+// Check sesskey if we are performing an action.
+if (!empty($action)) {
+    require_sesskey();
+}
+
+$output = $PAGE->get_renderer('mod_attendance');
+echo $OUTPUT->header();
+echo $OUTPUT->heading(get_string('defaultstatus', 'mod_attendance'));
+$tabmenu = attendance_print_settings_tabs('defaultstatus');
+echo $tabmenu;
+
+// TODO: Would be good to combine this code block with the one in preferences to avoid duplication.
+$errors = array();
+switch ($action) {
+    case mod_attendance_preferences_page_params::ACTION_ADD:
+        $newacronym         = optional_param('newacronym', null, PARAM_TEXT);
+        $newdescription     = optional_param('newdescription', null, PARAM_TEXT);
+        $newgrade           = optional_param('newgrade', 0, PARAM_RAW);
+        $newstudentavailability = optional_param('newstudentavailability', null, PARAM_INT);
+        $newgrade = unformat_float($newgrade);
+
+        // Default value uses setnumber/attendanceid = 0.
+        $status = new stdClass();
+        $status->attendanceid = 0;
+        $status->acronym = $newacronym;
+        $status->description = $newdescription;
+        $status->grade = $newgrade;
+        $status->studentavailability = $newstudentavailability;
+        $status->setnumber = 0;
+        attendance_add_status($status);
+
+        break;
+    case mod_attendance_preferences_page_params::ACTION_DELETE:
+        $confirm    = optional_param('confirm', null, PARAM_INT);
+        $statuses = attendance_get_statuses(0, false);
+        $status = $statuses[$statusid];
+
+        if (isset($confirm)) {
+            attendance_remove_status($status);
+            echo $OUTPUT->notification(get_string('statusdeleted', 'attendance'), 'success');
+            break;
+        }
+
+        $message = get_string('deletecheckfull', '', get_string('variable', 'attendance'));
+        $message .= str_repeat(html_writer::empty_tag('br'), 2);
+        $message .= $status->acronym.': '.
+            ($status->description ? $status->description : get_string('nodescription', 'attendance'));
+        $confirmurl = $url;
+        $confirmurl->param('confirm', 1);
+
+        echo $OUTPUT->confirm($message, $confirmurl, $url);
+        echo $OUTPUT->footer();
+        exit;
+    case mod_attendance_preferences_page_params::ACTION_HIDE:
+        $statuses = attendance_get_statuses(0, false);
+        $status = $statuses[$statusid];
+        attendance_update_status($status, null, null, null, 0);
+        break;
+    case mod_attendance_preferences_page_params::ACTION_SHOW:
+        $statuses = attendance_get_statuses(0, false);
+        $status = $statuses[$statusid];
+        attendance_update_status($status, null, null, null, 1);
+        break;
+    case mod_attendance_preferences_page_params::ACTION_SAVE:
+        $acronym        = required_param_array('acronym', PARAM_TEXT);
+        $description    = required_param_array('description', PARAM_TEXT);
+        $grade          = required_param_array('grade', PARAM_RAW);
+        $studentavailability = required_param_array('studentavailability', PARAM_RAW);
+        $unmarkedstatus = optional_param('setunmarked', null, PARAM_INT);
+        foreach ($grade as &$val) {
+            $val = unformat_float($val);
+        }
+        $statuses = attendance_get_statuses(0, false);
+
+        foreach ($acronym as $id => $v) {
+            $status = $statuses[$id];
+            $setunmarked = false;
+            if ($unmarkedstatus == $id) {
+                $setunmarked = true;
+            }
+            $errors[$id] = attendance_update_status($status, $acronym[$id], $description[$id], $grade[$id],
+                                             null, null, null, $studentavailability[$id], $setunmarked);
+        }
+        echo $OUTPUT->notification(get_string('eventstatusupdated', 'attendance'), 'success');
+
+        break;
+}
+
+$statuses = attendance_get_statuses(0, false);
+$prefdata = new attendance_default_statusset($statuses, $errors);
+echo $output->render($prefdata);
+
+echo $OUTPUT->footer();
\ No newline at end of file
diff --git a/mod/attendance/duration_form.php b/mod/attendance/duration_form.php
new file mode 100644
index 0000000..53bb563
--- /dev/null
+++ b/mod/attendance/duration_form.php
@@ -0,0 +1,74 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains the forms for duration
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * class for displaying duration form.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_duration_form extends moodleform {
+
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+
+        $mform    =& $this->_form;
+
+        $cm            = $this->_customdata['cm'];
+        $ids           = $this->_customdata['ids'];
+
+        $mform->addElement('header', 'general', get_string('changeduration', 'attendance'));
+        $mform->addElement('static', 'count', get_string('countofselected', 'attendance'), count(explode('_', $ids)));
+
+        for ($i = 0; $i <= 23; $i++) {
+            $hours[$i] = sprintf("%02d", $i);
+        }
+        for ($i = 0; $i < 60; $i += 5) {
+            $minutes[$i] = sprintf("%02d", $i);
+        }
+        $durselect[] =& $mform->createElement('select', 'hours', '', $hours);
+        $durselect[] =& $mform->createElement('select', 'minutes', '', $minutes, false, true);
+        $mform->addGroup($durselect, 'durtime', get_string('newduration', 'attendance'), array(' '), true);
+
+        $mform->addElement('hidden', 'ids', $ids);
+        $mform->setType('ids', PARAM_ALPHANUMEXT);
+        $mform->addElement('hidden', 'id', $cm->id);
+        $mform->setType('id', PARAM_INT);
+        $mform->addElement('hidden', 'action', mod_attendance_sessions_page_params::ACTION_CHANGE_DURATION);
+        $mform->setType('action', PARAM_INT);
+
+        $mform->setDefaults(array('durtime' => array('hours' => 0, 'minutes' => 0)));
+
+        $submitstring = get_string('update', 'attendance');
+        $this->add_action_buttons(true, $submitstring);
+    }
+
+}
diff --git a/mod/attendance/export.php b/mod/attendance/export.php
new file mode 100644
index 0000000..c940070
--- /dev/null
+++ b/mod/attendance/export.php
@@ -0,0 +1,210 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Export attendance sessions
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+require_once(dirname(__FILE__).'/export_form.php');
+require_once(dirname(__FILE__).'/renderables.php');
+require_once(dirname(__FILE__).'/renderhelpers.php');
+
+$id             = required_param('id', PARAM_INT);
+
+$cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att            = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+require_login($course, true, $cm);
+
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:export', $context);
+
+$att = new mod_attendance_structure($att, $cm, $course, $context);
+
+$PAGE->set_url($att->url_export());
+$PAGE->set_title($course->shortname. ": ".$att->name);
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add(get_string('export', 'attendance'));
+
+$formparams = array('course' => $course, 'cm' => $cm, 'modcontext' => $context);
+$mform = new mod_attendance_export_form($att->url_export(), $formparams);
+
+if ($formdata = $mform->get_data()) {
+
+    $pageparams = new mod_attendance_page_with_filter_controls();
+    $pageparams->init($cm);
+    $pageparams->page = 0;
+    $pageparams->group = $formdata->group;
+    $pageparams->set_current_sesstype($formdata->group ? $formdata->group : mod_attendance_page_with_filter_controls::SESSTYPE_ALL);
+    if (isset($formdata->includeallsessions)) {
+        if (isset($formdata->includenottaken)) {
+            $pageparams->view = ATT_VIEW_ALL;
+        } else {
+            $pageparams->view = ATT_VIEW_ALLPAST;
+            $pageparams->curdate = time();
+        }
+        $pageparams->init_start_end_date();
+    } else {
+        $pageparams->startdate = $formdata->sessionstartdate;
+        $pageparams->enddate = $formdata->sessionenddate;
+    }
+    if ($formdata->selectedusers) {
+        $pageparams->userids = $formdata->users;
+    }
+    $att->pageparams = $pageparams;
+
+    $reportdata = new attendance_report_data($att);
+    if ($reportdata->users) {
+        $filename = clean_filename($course->shortname.'_Attendances_'.userdate(time(), '%Y%m%d-%H%M'));
+
+        $group = $formdata->group ? $reportdata->groups[$formdata->group] : 0;
+        $data = new stdClass;
+        $data->tabhead = array();
+        $data->course = $att->course->fullname;
+        $data->group = $group ? $group->name : get_string('allparticipants');
+
+        if (isset($formdata->ident['id'])) {
+            $data->tabhead[] = get_string('studentid', 'attendance');
+        }
+        if (isset($formdata->ident['uname'])) {
+            $data->tabhead[] = get_string('username');
+        }
+
+        $optional = array('idnumber', 'institution', 'department');
+        foreach ($optional as $opt) {
+            if (isset($formdata->ident[$opt])) {
+                $data->tabhead[] = get_string($opt);
+            }
+        }
+
+        $data->tabhead[] = get_string('lastname');
+        $data->tabhead[] = get_string('firstname');
+        $groupmode = groups_get_activity_groupmode($cm, $course);
+        if (!empty($groupmode)) {
+            $data->tabhead[] = get_string('groups');
+        }
+
+        if (count($reportdata->sessions) > 0) {
+            foreach ($reportdata->sessions as $sess) {
+                $text = userdate($sess->sessdate, get_string('strftimedmyhm', 'attendance'));
+                $text .= ' ';
+                if (!empty($sess->groupid) && empty($reportdata->groups[$sess->groupid])) {
+                    $text .= get_string('deletedgroup', 'attendance');
+                } else {
+                    $text .= $sess->groupid ? $reportdata->groups[$sess->groupid]->name : get_string('commonsession', 'attendance');
+                }
+                $data->tabhead[] = $text;
+                if (isset($formdata->includeremarks)) {
+                    $data->tabhead[] = ''; // Space for the remarks.
+                }
+            }
+        } else {
+            print_error('sessionsnotfound', 'attendance', $att->url_manage());
+        }
+
+        $setnumber = -1;
+        foreach ($reportdata->statuses as $sts) {
+            if ($sts->setnumber != $setnumber) {
+                $setnumber = $sts->setnumber;
+            }
+
+            $data->tabhead[] = $sts->acronym;
+        }
+
+        $data->tabhead[] = get_string('takensessions', 'attendance');
+        $data->tabhead[] = get_string('points', 'attendance');
+        $data->tabhead[] = get_string('percentage', 'attendance');
+
+        $i = 0;
+        $data->table = array();
+        foreach ($reportdata->users as $user) {
+            if (isset($formdata->ident['id'])) {
+                $data->table[$i][] = $user->id;
+            }
+            if (isset($formdata->ident['uname'])) {
+                $data->table[$i][] = $user->username;
+            }
+
+            $optionalrow = array('idnumber', 'institution', 'department');
+            foreach ($optionalrow as $opt) {
+                if (isset($formdata->ident[$opt])) {
+                    $data->table[$i][] = $user->$opt;
+                }
+            }
+
+            $data->table[$i][] = $user->lastname;
+            $data->table[$i][] = $user->firstname;
+            if (!empty($groupmode)) {
+                $grouptext = '';
+                $groupsraw = groups_get_all_groups($course->id, $user->id, 0, 'g.name');
+                $groups = array();
+                foreach ($groupsraw as $group) {
+                    $groups[] = $group->name;;
+                }
+                $data->table[$i][] = implode(', ', $groups);
+            }
+            $cellsgenerator = new user_sessions_cells_text_generator($reportdata, $user);
+            $data->table[$i] = array_merge($data->table[$i], $cellsgenerator->get_cells(isset($formdata->includeremarks)));
+
+            $usersummary = $reportdata->summary->get_taken_sessions_summary_for($user->id);
+
+            foreach ($reportdata->statuses as $sts) {
+                if (isset($usersummary->userstakensessionsbyacronym[$sts->setnumber][$sts->acronym])) {
+                    $data->table[$i][] = $usersummary->userstakensessionsbyacronym[$sts->setnumber][$sts->acronym];
+                } else {
+                    $data->table[$i][] = 0;
+                }
+            }
+
+            $data->table[$i][] = $usersummary->numtakensessions;
+            $data->table[$i][] = format_float($usersummary->takensessionspoints, 1, true, true) . ' / ' .
+                                    format_float($usersummary->takensessionsmaxpoints, 1, true, true);
+            $data->table[$i][] = format_float($usersummary->takensessionspercentage * 100);
+
+            $i++;
+        }
+
+        if ($formdata->format === 'text') {
+            attendance_exporttocsv($data, $filename);
+        } else {
+            attendance_exporttotableed($data, $filename, $formdata->format);
+        }
+        exit;
+    } else {
+        print_error('studentsnotfound', 'attendance', $att->url_manage());
+    }
+}
+
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att, attendance_tabs::TAB_EXPORT);
+echo $output->header();
+echo $output->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+echo $output->render($tabs);
+
+$mform->display();
+
+echo $OUTPUT->footer();
+
+
+
diff --git a/mod/attendance/export_form.php b/mod/attendance/export_form.php
new file mode 100644
index 0000000..2a7b280
--- /dev/null
+++ b/mod/attendance/export_form.php
@@ -0,0 +1,157 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Export attendance sessions forms
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * class for displaying export form.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_export_form extends moodleform {
+
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+        global $USER, $DB, $PAGE;
+        $mform    =& $this->_form;
+        $course        = $this->_customdata['course'];
+        $cm            = $this->_customdata['cm'];
+        $modcontext    = $this->_customdata['modcontext'];
+
+        $mform->addElement('header', 'general', get_string('export', 'attendance'));
+
+        $groupmode = groups_get_activity_groupmode($cm, $course);
+        $groups = groups_get_activity_allowed_groups($cm, $USER->id);
+        if ($groupmode == VISIBLEGROUPS or has_capability('moodle/site:accessallgroups', $modcontext)) {
+            $grouplist[0] = get_string('allparticipants');
+        }
+        if ($groups) {
+            foreach ($groups as $group) {
+                $grouplist[$group->id] = $group->name;
+            }
+        }
+
+        // Restrict the export to the selected users.
+        $namefields = get_all_user_name_fields(true, 'u');
+        $allusers = get_enrolled_users($modcontext, 'mod/attendance:canbelisted', 0, 'u.id,'.$namefields);
+        $userlist = array();
+        foreach ($allusers as $user) {
+            $userlist[$user->id] = fullname($user);
+        }
+        unset($allusers);
+        $tempusers = $DB->get_records('attendance_tempusers', array('courseid' => $course->id), 'studentid, fullname');
+        foreach ($tempusers as $user) {
+            $userlist[$user->studentid] = $user->fullname;
+        }
+        if (empty($userlist)) {
+            $mform->addElement('static', 'nousers', '', get_string('noattendanceusers', 'attendance'));
+            return;
+        }
+
+        list($gsql, $gparams) = $DB->get_in_or_equal(array_keys($grouplist), SQL_PARAMS_NAMED);
+        list($usql, $uparams) = $DB->get_in_or_equal(array_keys($userlist), SQL_PARAMS_NAMED);
+        $params = array_merge($gparams, $uparams);
+        $groupmembers = $DB->get_recordset_select('groups_members', "groupid {$gsql} AND userid {$usql}", $params,
+                                                  '', 'groupid, userid');
+        $groupmappings = array();
+        foreach ($groupmembers as $groupmember) {
+            if (!isset($groupmappings[$groupmember->groupid])) {
+                $groupmappings[$groupmember->groupid] = array();
+            }
+            $groupmappings[$groupmember->groupid][$groupmember->userid] = $userlist[$groupmember->userid];
+        }
+        if (isset($grouplist[0])) {
+            $groupmappings[0] = $userlist;
+        }
+
+        $mform->addElement('select', 'group', get_string('group'), $grouplist);
+
+        $mform->addElement('selectyesno', 'selectedusers', get_string('onlyselectedusers', 'mod_attendance'));
+        $sel = $mform->addElement('select', 'users', get_string('users', 'mod_attendance'), $userlist, array('size' => 12));
+        $sel->setMultiple(true);
+        $mform->disabledIf('users', 'selectedusers', 'eq', 0);
+
+        $opts = array('groupmappings' => $groupmappings);
+        $PAGE->requires->yui_module('moodle-mod_attendance-groupfilter', 'M.mod_attendance.groupfilter.init', array($opts));
+
+        $ident = array();
+        $ident[] =& $mform->createElement('checkbox', 'id', '', get_string('studentid', 'attendance'));
+        $ident[] =& $mform->createElement('checkbox', 'uname', '', get_string('username'));
+
+        $optional = array('idnumber', 'institution', 'department');
+        foreach ($optional as $opt) {
+            $ident[] =& $mform->createElement('checkbox', $opt, '', get_string($opt));
+            $mform->setType($opt, PARAM_NOTAGS);
+        }
+
+        $mform->addGroup($ident, 'ident', get_string('identifyby', 'attendance'), array('<br />'), true);
+        $mform->setDefaults(array('ident[id]' => true, 'ident[uname]' => true));
+        $mform->setType('id', PARAM_INT);
+        $mform->setType('uname', PARAM_INT);
+
+        $mform->addElement('checkbox', 'includeallsessions', get_string('includeall', 'attendance'), get_string('yes'));
+        $mform->setDefault('includeallsessions', true);
+        $mform->addElement('checkbox', 'includenottaken', get_string('includenottaken', 'attendance'), get_string('yes'));
+        $mform->addElement('checkbox', 'includeremarks', get_string('includeremarks', 'attendance'), get_string('yes'));
+        $mform->addElement('date_selector', 'sessionstartdate', get_string('startofperiod', 'attendance'));
+        $mform->setDefault('sessionstartdate', $course->startdate);
+        $mform->disabledIf('sessionstartdate', 'includeallsessions', 'checked');
+        $mform->addElement('date_selector', 'sessionenddate', get_string('endofperiod', 'attendance'));
+        $mform->disabledIf('sessionenddate', 'includeallsessions', 'checked');
+
+        $formatoptions = array('excel' => get_string('downloadexcel', 'attendance'),
+                               'ooo' => get_string('downloadooo', 'attendance'),
+                               'text' => get_string('downloadtext', 'attendance'));
+        $mform->addElement('select', 'format', get_string('format'), $formatoptions);
+
+        $submitstring = get_string('ok');
+        $this->add_action_buttons(false, $submitstring);
+
+        $mform->addElement('hidden', 'id', $cm->id);
+    }
+
+    /**
+     * Validate form.
+     * @param array $data
+     * @param array $files
+     * @return array
+     */
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        // Validate the 'users' field.
+        if ($data['selectedusers'] && empty($data['users'])) {
+            $errors['users'] = get_string('mustselectusers', 'mod_attendance');
+        }
+
+        return $errors;
+    }
+}
+
diff --git a/mod/attendance/externallib.php b/mod/attendance/externallib.php
new file mode 100644
index 0000000..767367b
--- /dev/null
+++ b/mod/attendance/externallib.php
@@ -0,0 +1,182 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Externallib.php file for attendance plugin.
+ *
+ * @package    mod_attendance
+ * @copyright  2015 Caio Bressan Doneda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die;
+
+require_once("$CFG->libdir/externallib.php");
+require_once(dirname(__FILE__).'/classes/attendance_webservices_handler.php');
+
+/**
+ * Class mod_wsattendance_external
+ * @copyright  2015 Caio Bressan Doneda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_wsattendance_external extends external_api {
+
+    /**
+     * Get parameter list.
+     * @return external_function_parameters
+     */
+    public static function get_courses_with_today_sessions_parameters() {
+        return new external_function_parameters (
+                    array('userid' => new external_value(PARAM_INT, 'User id.',  VALUE_DEFAULT, 0)));
+    }
+
+    /**
+     * Get list of courses with active sessions for today.
+     * @param int $userid
+     * @return array
+     */
+    public static function get_courses_with_today_sessions($userid) {
+        return attendance_handler::get_courses_with_today_sessions($userid);
+    }
+
+    /**
+     * Get structure of an attendance session.
+     *
+     * @return array
+     */
+    private static function get_session_structure() {
+        $session = array('id' => new external_value(PARAM_INT, 'Session id.'),
+                         'attendanceid' => new external_value(PARAM_INT, 'Attendance id.'),
+                         'groupid' => new external_value(PARAM_INT, 'Group id.'),
+                         'sessdate' => new external_value(PARAM_INT, 'Session date.'),
+                         'duration' => new external_value(PARAM_INT, 'Session duration.'),
+                         'lasttaken' => new external_value(PARAM_INT, 'Session last taken time.'),
+                         'lasttakenby' => new external_value(PARAM_INT, 'ID of the last user that took this session.'),
+                         'timemodified' => new external_value(PARAM_INT, 'Time modified.'),
+                         'description' => new external_value(PARAM_TEXT, 'Session description.'),
+                         'descriptionformat' => new external_value(PARAM_INT, 'Session description format.'),
+                         'studentscanmark' => new external_value(PARAM_INT, 'Students can mark their own presence.'),
+                         'statusset' => new external_value(PARAM_INT, 'Session statusset.'));
+
+        return $session;
+    }
+
+    /**
+     * Show structure of return.
+     * @return external_multiple_structure
+     */
+    public static function get_courses_with_today_sessions_returns() {
+        $todaysessions = self::get_session_structure();
+
+        $attendanceinstances = array('name' => new external_value(PARAM_TEXT, 'Attendance name.'),
+                                      'today_sessions' => new external_multiple_structure(
+                                                          new external_single_structure($todaysessions)));
+
+        $courses = array('shortname' => new external_value(PARAM_TEXT, 'short name of a moodle course.'),
+                         'fullname' => new external_value(PARAM_TEXT, 'full name of a moodle course.'),
+                         'attendance_instances' => new external_multiple_structure(
+                                                   new external_single_structure($attendanceinstances)));
+
+        return new external_multiple_structure(new external_single_structure(($courses)));
+    }
+
+    /**
+     * Get session params.
+     *
+     * @return external_function_parameters
+     */
+    public static function get_session_parameters() {
+        return new external_function_parameters (
+                    array('sessionid' => new external_value(PARAM_INT, 'session id')));
+    }
+
+    /**
+     * Get session.
+     *
+     * @param int $sessionid
+     * @return mixed
+     */
+    public static function get_session($sessionid) {
+        return attendance_handler::get_session($sessionid);
+    }
+
+    /**
+     * Show return values of get_session.
+     *
+     * @return external_single_structure
+     */
+    public static function get_session_returns() {
+        $statuses = array('id' => new external_value(PARAM_INT, 'Status id.'),
+                          'attendanceid' => new external_value(PARAM_INT, 'Attendance id.'),
+                          'acronym' => new external_value(PARAM_TEXT, 'Status acronym.'),
+                          'description' => new external_value(PARAM_TEXT, 'Status description.'),
+                          'grade' => new external_value(PARAM_FLOAT, 'Status grade.'),
+                          'visible' => new external_value(PARAM_INT, 'Status visibility.'),
+                          'deleted' => new external_value(PARAM_INT, 'informs if this session was deleted.'),
+                          'setnumber' => new external_value(PARAM_INT, 'Set number.'));
+
+        $users = array('id' => new external_value(PARAM_INT, 'User id.'),
+                       'firstname' => new external_value(PARAM_TEXT, 'User first name.'),
+                       'lastname' => new external_value(PARAM_TEXT, 'User last name.'));
+
+        $attendancelog = array('studentid' => new external_value(PARAM_INT, 'Student id.'),
+                                'statusid' => new external_value(PARAM_TEXT, 'Status id (last time).'),
+                                'remarks' => new external_value(PARAM_TEXT, 'Last remark.'),
+                                'id' => new external_value(PARAM_TEXT, 'log id.'));
+
+        $session = self::get_session_structure();
+        $session['courseid'] = new external_value(PARAM_INT, 'Course moodle id.');
+        $session['statuses'] = new external_multiple_structure(new external_single_structure($statuses));
+        $session['attendance_log'] = new external_multiple_structure(new external_single_structure($attendancelog));
+        $session['users'] = new external_multiple_structure(new external_single_structure($users));
+
+        return new external_single_structure($session);
+    }
+
+    /**
+     * Update user status params.
+     *
+     * @return external_function_parameters
+     */
+    public static function update_user_status_parameters() {
+        return new external_function_parameters(
+                    array('sessionid' => new external_value(PARAM_INT, 'Session id'),
+                          'studentid' => new external_value(PARAM_INT, 'Student id'),
+                          'takenbyid' => new external_value(PARAM_INT, 'Id of the user who took this session'),
+                          'statusid' => new external_value(PARAM_INT, 'Status id'),
+                          'statusset' => new external_value(PARAM_TEXT, 'Status set of session')));
+    }
+
+    /**
+     * Update user status.
+     *
+     * @param int $sessionid
+     * @param int $studentid
+     * @param int $takenbyid
+     * @param int $statusid
+     * @param int $statusset
+     */
+    public static function update_user_status($sessionid, $studentid, $takenbyid, $statusid, $statusset) {
+        return attendance_handler::update_user_status($sessionid, $studentid, $takenbyid, $statusid, $statusset);
+    }
+
+    /**
+     * Show return values.
+     * @return external_value
+     */
+    public static function update_user_status_returns() {
+        return new external_value(PARAM_TEXT, 'Http code');
+    }
+}
diff --git a/mod/attendance/index.php b/mod/attendance/index.php
new file mode 100644
index 0000000..f699052
--- /dev/null
+++ b/mod/attendance/index.php
@@ -0,0 +1,40 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * redjrects to the first Attendance in the course.
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+
+$id = required_param('id', PARAM_INT);
+
+$course = $DB->get_record('course', array('id' => $id), '*', MUST_EXIST);
+require_login($course);
+
+$PAGE->set_url('/mod/attendance/index.php', array('id' => $id));
+
+// TODO: check if this is correct behaviour - other modules list all the instances of the module in the course.
+if ($att = get_all_instances_in_course('attendance', $course, null, true)) {
+    $att = array_pop($att);
+    redirect("view.php?id=$att->coursemodule");
+} else {
+    print_error('notfound', 'attendance');
+}
diff --git a/mod/attendance/lang/en/attendance.php b/mod/attendance/lang/en/attendance.php
new file mode 100644
index 0000000..d40ace8
--- /dev/null
+++ b/mod/attendance/lang/en/attendance.php
@@ -0,0 +1,474 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'attendance', language 'en'
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['Aacronym'] = 'A';
+$string['Afull'] = 'Absent';
+$string['Eacronym'] = 'E';
+$string['Efull'] = 'Excused';
+$string['Lacronym'] = 'L';
+$string['Lfull'] = 'Late';
+$string['Pacronym'] = 'P';
+$string['Pfull'] = 'Present';
+$string['acronym'] = 'Acronym';
+$string['absenteereport'] = 'Absentee report';
+$string['add'] = 'Add';
+$string['addmultiplesessions'] = 'Multiple sessions';
+$string['addwarning'] = 'Add warning';
+$string['addsession'] = 'Add session';
+$string['adduser'] = 'Add user';
+$string['all'] = 'All';
+$string['allcourses'] = 'All courses';
+$string['allpast'] = 'All past';
+$string['allsessions'] = 'All sessions';
+$string['attendance:addinstance'] = 'Add a new attendance activity';
+$string['attendance:canbelisted'] = 'Appears in the roster';
+$string['attendance:changeattendances'] = 'Changing Attendances';
+$string['attendance:changepreferences'] = 'Changing Preferences';
+$string['attendance:export'] = 'Export Reports';
+$string['attendance:manageattendances'] = 'Manage Attendances';
+$string['attendance:managetemporaryusers'] = 'Manage temporary users';
+$string['attendance:takeattendances'] = 'Taking Attendances';
+$string['attendance:view'] = 'Viewing Attendances';
+$string['attendance:viewreports'] = 'Viewing Reports';
+$string['attendance:viewsummaryreports'] = 'View course summary reports';
+$string['attendance:warningemails'] = 'Can be subscribed to emails with absentee users';
+$string['attendance_already_submitted'] = 'You may not self register attendance that has already been set.';
+$string['attendancedata'] = 'Attendance data';
+$string['attendanceforthecourse'] = 'Attendance for the course';
+$string['attendancegrade'] = 'Attendance grade';
+$string['attendancenotset'] = 'You must set your attendance';
+$string['attendancenotstarted'] = 'Attendance has not started yet for this course';
+$string['attendancepercent'] = 'Attendance percent';
+$string['attendancereport'] = 'Attendance report';
+$string['attendancesuccess'] = 'Attendance has been successfully taken';
+$string['attendanceupdated'] = 'Attendance successfully updated';
+$string['attforblockdirstillexists'] = 'old mod/attforblock directory still exists - you must delete this directory on your server before running this upgrade.';
+$string['attrecords'] = 'Attendances records';
+$string['automark'] = 'Automatic marking';
+$string['automarkall'] = 'Yes';
+$string['automarkclose'] = 'Set unmarked at end of session';
+$string['automark_help'] = 'Allows marking to be completed automatically.
+If "Yes" students will be automatically marked depending on their first access to the course.
+If "Set unmarked at end of session" any students who have not marked their attendance will be set to the unmarked status selected.';
+$string['automarktask'] = 'Check for attendance sessions that require auto marking';
+$string['autorecorded'] = 'system auto recorded';
+$string['averageattendance'] = 'Average attendance';
+$string['calclose'] = 'Close';
+$string['caleventcreated'] = 'Calendar event for session successfully created';
+$string['caleventdeleted'] = 'Calendar event for session successfully deleted';
+$string['calmonths'] = 'January,February,March,April,May,June,July,August,September,October,November,December';
+$string['calshow'] = 'Choose date';
+$string['caltoday'] = 'Today';
+$string['calweekdays'] = 'Su,Mo,Tu,We,Th,Fr,Sa';
+$string['cannottakeforgroup'] = 'You can\'t take attendance for group "{$a}"';
+$string['categoryreport'] = 'Course category report';
+$string['changeattendance'] = 'Change attendance';
+$string['changeduration'] = 'Change duration';
+$string['changesession'] = 'Change session';
+$string['checkweekdays'] = 'Select weekdays that fall within your selected session date range.';
+$string['column'] = 'column';
+$string['columns'] = 'columns';
+$string['commonsession'] = 'All students';
+$string['commonsessions'] = 'All students';
+$string['confirmdeletehiddensessions'] = 'Are you sure you want to delete {$a->count} sessions scheduled before the course start date ({$a->date})?';
+$string['confirmdeleteuser'] = 'Are you sure you want to delete user \'{$a->fullname}\' ({$a->email})?<br/>All of their attendance records will be permanently deleted.';
+$string['copyfrom'] = 'Copy attendance data from';
+$string['countofselected'] = 'Count of selected';
+$string['coursesummary'] = 'Course summary report';
+$string['createmultiplesessions'] = 'Create multiple sessions';
+$string['createmultiplesessions_help'] = 'This function allows you to create multiple sessions in one simple step.
+The sessions begin on the date of the base session and continue until the \'repeat until\' date.
+
+  * <strong>Repeat on</strong>: Select the days of the week when your class will meet (for example, Monday/Wednesday/Friday).
+  * <strong>Repeat every</strong>: This allows for a frequency setting. If your class will meet every week, select 1; if it will meet every other week, select 2; every 3rd week, select 3, etc.
+  * <strong>Repeat until</strong>: Select the last day of class (the last day you want to take attendance).
+';
+$string['createonesession'] = 'Create one session for the course';
+$string['days'] = 'Days';
+$string['defaultdisplaymode'] = 'Default display mode';
+$string['defaultwarnings'] = 'Default warning set';
+$string['defaultwarningsettings'] = 'Default warning settings';
+$string['defaultwarningsettings_help'] = 'These settings define the defaults for all new warnings';
+$string['defaults'] = 'Defaults';
+$string['defaultsessionsettings'] = 'Default session settings';
+$string['defaultsessionsettings_help'] = 'These settings define the defaults for all new sessions';
+$string['defaultsettings'] = 'Default attendance settings';
+$string['defaultsettings_help'] = 'These settings define the defaults for all new attendances';
+$string['defaultstatus'] = 'Default status set';
+$string['defaultsubnet'] = 'Default network address';
+$string['defaultsubnet_help'] = 'Attendance recording may be restricted to particular subnets by specifying a comma-separated list of partial or full IP addresses. This is the default value used when creating new sessions.';
+$string['defaultview'] = 'Default view on login';
+$string['defaultview_desc'] = 'This is the default view shown to teachers on first login.';
+$string['delete'] = 'Delete';
+$string['deletewarningconfirm'] = 'Are you sure you want to delete this warning?';
+$string['deletedgroup'] = 'The group associated with this session has been deleted';
+$string['deletehiddensessions'] = 'Delete all hidden sessions';
+$string['deletelogs'] = 'Delete attendance data';
+$string['deleteselected'] = 'Delete selected';
+$string['deletesession'] = 'Delete session';
+$string['deletesessions'] = 'Delete all sessions';
+$string['deleteuser'] = 'Delete user';
+$string['deletingsession'] = 'Deleting session for the course';
+$string['deletingstatus'] = 'Deleting status for the course';
+$string['description'] = 'Description';
+$string['display'] = 'Display';
+$string['displaymode'] = 'Display mode';
+$string['donotusepaging'] = 'Do not use paging';
+$string['downloadexcel'] = 'Download in Excel format';
+$string['downloadooo'] = 'Download in OpenOffice format';
+$string['downloadtext'] = 'Download in text format';
+$string['duration'] = 'Duration';
+$string['editsession'] = 'Edit Session';
+$string['edituser'] = 'Edit user';
+$string['emailcontent_default'] = 'Hi %userfirstname%,
+Your attendance in %coursename% %attendancename% has dropped below %warningpercent% and is currently %percent% - we hope you are ok!
+
+To get the most out of this course you should improve your attendance, please get in touch if you require any further support.';
+$string['emailcontent'] = 'Email content';
+$string['emailcontent_help'] = 'When a warning is sent to a student, it takes the email content from this field. The following wildcards can be used:
+<ul>
+<li>%coursename%</li>
+<li>%userfirstname%</li>
+<li>%userlastname%</li>
+<li>%userid%</li>
+<li>%warningpercent%</li>
+<li>%attendancename%</li>
+<li>%cmid%</li>
+<li>%numtakensessions%</li>
+<li>%points%</li>
+<li>%maxpoints%</li>
+<li>%percent%</li>
+</ul>';
+
+$string['emailsubject'] = 'Email subject';
+$string['emailsubject_help'] = 'When a warning is sent to a student, it takes the email subject from this field.';
+$string['emailsubject_default'] = 'Attendance warning';
+$string['emailuser'] = 'Email user';
+$string['emailuser_help'] = 'If checked, a warning will be sent to the student.';
+$string['emptyacronym'] = 'Empty acronyms are not allowed. Status record not updated.';
+$string['emptydescription'] = 'Empty descriptions are not allowed. Status record not updated.';
+$string['enablecalendar'] = 'Create calendar events';
+$string['enablecalendar_desc'] = 'If enabled, a calendar event will be created for each attendance session. After changing this setting you should run the reset calendar report.';
+$string['enablewarnings'] = 'Enable warnings';
+$string['enablewarnings_desc'] = 'This allows a warning set to be defined for an attendance and email notifications to users when attendance drops below the configured threshold. <br/><strong>WARNING: This is a new feature and has not been tested extensively. Please use at your own-risk and provide feeback in the moodle forums if you find it works well.</strong>';
+$string['endofperiod'] = 'End of period';
+$string['endtime'] = 'Session end time';
+$string['enrolmentend'] = 'User enrolment ends {$a}';
+$string['enrolmentstart'] = 'User enrolment starts {$a}';
+$string['enrolmentsuspended'] = 'Enrolment suspended';
+$string['errorgroupsnotselected'] = 'Select one or more groups';
+$string['errorinaddingsession'] = 'Error in adding session';
+$string['erroringeneratingsessions'] = 'Error in generating sessions ';
+$string['eventdurationupdated'] = 'Session duration updated';
+$string['eventreportviewed'] = 'Attendance report viewed';
+$string['eventscreated'] = 'Calendar events created';
+$string['eventsdeleted'] = 'Calendar events deleted';
+$string['eventsessionadded'] = 'Session added';
+$string['eventsessiondeleted'] = 'Session deleted';
+$string['eventsessionupdated'] = 'Session updated';
+$string['eventstatusadded'] = 'Status added';
+$string['eventstatusupdated'] = 'Status updated';
+$string['eventtaken'] = 'Attendance taken';
+$string['eventtakenbystudent'] = 'Attendance taken by student';
+$string['export'] = 'Export';
+$string['extrarestrictions'] = 'Extra restrictions';
+$string['from'] = 'from:';
+$string['gradebookexplanation'] = 'Grade in gradebook';
+$string['gradebookexplanation_help'] = 'The Attendance module displays your current attendance grade based on the number of points you have earned to date and the number of points that could have been earned to date; it does not include class periods in the future. In the gradebook, your attendance grade is based on your current attendance percentage and the number of points that can be earned over the entire duration of the course, including future class periods. As such, your attendance grades displayed in the Attendance module and in the gradebook may not be the same number of points but they are the same percentage.
+
+For example, if you have earned 8 of 10 points to date (80% attendance) and attendance for the entire course is worth 50 points, the Attendance module will display 8/10 and the gradebook will display 40/50. You have not yet earned 40 points but 40 is the equivalent point value to your current attendance percentage of 80%. The point value you have earned in the Attendance module can never decrease, as it is based only on attendance to date; however, the attendance point value shown in the gradebook may increase or decrease depending on your future attendance, as it is based on attendance for the entire course.';
+$string['gridcolumns'] = 'Grid columns';
+$string['groupsession'] = 'Group of students';
+$string['hiddensessions'] = 'Hidden sessions';
+$string['hiddensessions_help'] = 'Sessions are hidden if they are scheduled before the course start date.
+
+You can use this feature to hide older sessions instead of deleting them. Only visible sessions will appear in the Gradebook.';
+$string['hiddensessionsdeleted'] = 'All hidden sessions were delete';
+$string['hidensessiondetails'] = 'Hide session details';
+$string['identifyby'] = 'Identify student by';
+$string['includeall'] = 'Select all sessions';
+$string['includenottaken'] = 'Include not taken sessions';
+$string['includeremarks'] = 'Include remarks';
+$string['incorrectpassword'] = 'You have entered an incorrect password and your attendance has not been recorded, please enter the correct password.';
+$string['indetail'] = 'In detail...';
+$string['invalidaction'] = 'You must select an action';
+$string['invalidemails'] = 'You must specify addresses of existing user accounts, could not find: {$a}';
+$string['invalidsessionenddate'] = 'This date can not be earlier than the session date';
+$string['invalidsessionendtime'] = 'The end time must be greater than start time';
+$string['invalidstatus'] = 'You have selected an invalid status, please try again';
+$string['jumpto'] = 'Jump to';
+$string['lowgrade'] = 'Low grade';
+$string['maxpossible'] = 'Maximum possible';
+$string['maxpossible_help'] = 'Shows the score each user can reach if they receive the maximum points in each session not yet taken (past and future):
+    <ul>
+    <li><strong>Points</strong>: maximum points each user can reach over all sessions.</li>
+    <li><strong>Percentage</strong>: maximum percentage each user can reach over all sessions.</li>
+    </ul>';
+$string['maxpossiblepercentage'] = 'Maximum possible percentage';
+$string['maxpossiblepoints'] = 'Maximum possible points';
+$string['maxwarn'] = 'Maximum number of e-mail warnings';
+$string['maxwarn_help'] = 'The maximum number of times a warning should be sent (only one warning per session is sent)';
+$string['mergeuser'] = 'Merge user';
+$string['modulename'] = 'Attendance';
+$string['modulename_help'] = 'The attendance activity module enables a teacher to take attendance during class and students to view their own attendance record.
+
+The teacher can create multiple sessions and can mark the attendance status as "Present", "Absent", "Late", or "Excused" or modify the statuses to suit their needs.
+
+Reports are available for the entire class or individual students.';
+$string['modulenameplural'] = 'Attendances';
+$string['months'] = 'Months';
+$string['moreattendance'] = 'Attendance has been successfully taken for this page';
+$string['moveleft'] = 'Move left';
+$string['moveright'] = 'Move right';
+$string['multisessionexpanded'] = 'Multiple sessions expanded';
+$string['multisessionexpanded_desc'] = 'Show the "Multiple sessions" settings as expanded by default when creating new sessions.';
+$string['mustselectusers'] = 'Must select users to export';
+$string['newdate'] = 'New date';
+$string['newduration'] = 'New duration';
+$string['newstatusset'] = 'New set of statuses';
+$string['noattendanceusers'] = 'It is not possible to export any data as there are no students enrolled in the course.';
+$string['noautomark'] = 'Disabled';
+$string['noattforuser'] = 'No attendance records exist for the user';
+$string['nodescription'] = 'Regular class session';
+$string['noeventstoreset'] = 'There are no calendar events that require an update.';
+$string['nogroups'] = 'You can\'t add group sessions. No groups exists in course.';
+$string['noguest'] = 'Guest can\'t see attendance';
+$string['noofdaysabsent'] = 'No of days absent';
+$string['noofdaysexcused'] = 'No of days excused';
+$string['noofdayslate'] = 'No of days late';
+$string['noofdayspresent'] = 'No of days present';
+$string['nosessiondayselected'] = 'No Session day selected';
+$string['nosessionexists'] = 'No Session exists for this course';
+$string['nosessionsselected'] = 'No sessions selected';
+$string['warningdeleted'] = 'Warning deleted';
+$string['warningdesc'] = 'These warnings will be automatically added to any new attendance activities. If more than one warning is triggered at exactly the same time, only the warning with the lower warning threshold will be sent.';
+$string['warningdesc_course'] = 'Warnings thresholds set here affect the absentee report and allow students and third parties to be notified.  If more than one warning is triggered at exactly the same time, only the warning with the lower warning threshold will be sent.';
+$string['warnings'] = 'Warnings set';
+$string['warningupdated'] = 'Updated warnings';
+$string['notifytask'] = 'Send warnings to users';
+$string['notfound'] = 'Attendance activity not found in this course!';
+$string['notmember'] = 'not&nbsp;member';
+$string['noupgradefromthisversion'] = 'The Attendance module cannot upgrade from the version of attforblock you have installed. - please delete attforblock or upgrade it to the latest version before isntalling the new attendance module';
+$string['numsessions'] = 'Number of sessions';
+$string['olddate'] = 'Old date';
+$string['onlyselectedusers'] = 'Export specific users';
+$string['overallsessions'] = 'Over all sessions';
+$string['overallsessions_help'] = 'Shows statistics for all sessions including those not yet taken (past and future):
+    <ul>
+    <li><strong>Sessions</strong>: total number of sessions.</li>
+    <li><strong>Points</strong>: points awarded based on the taken sessions.</li>
+    <li><strong>Percentage</strong>: percentage of points awarded over the maxium possible points for all sessions.</li>
+    </ul>';
+$string['oversessionstaken'] = 'Over taken sessions';
+$string['oversessionstaken_help'] = 'Shows statistics for sessions where attendance has been taken:
+    <ul>
+    <li><strong>Sessions</strong>: number of already taken sessions.</li>
+    <li><strong>Points</strong>: points awarded based on the taken sessions.</li>
+    <li><strong>Percentage</strong>: percentage of points awarded over the maxium possible points of the taken sessions.</li>
+    </ul>';
+$string['participant'] = 'Participant';
+$string['password'] = 'Password';
+$string['passwordgrp'] = 'Student password';
+$string['passwordgrp_help'] = 'If set students will be required to enter this password before they can set their own attendance status for the session. If empty, no password is required.';
+$string['passwordrequired'] = 'You must enter the session password before you can submit your attendance';
+$string['percentage'] = 'Percentage';
+$string['percentageallsessions'] = 'Percentage over all sessions';
+$string['percentagesessionscompleted'] = 'Percentage over taken sessions';
+$string['pluginadministration'] = 'Attendance administration';
+$string['pluginname'] = 'Attendance';
+$string['points'] = 'Points';
+$string['pointsallsessions'] = 'Points over all sessions';
+$string['pointssessionscompleted'] = 'Points over taken sessions';
+$string['preferences_desc'] = 'Changes to status sets will affect existing attendance sessions and may affect grading.';
+$string['priorto'] = 'The session date is prior to the course start date ({$a}) so that the new sessions scheduled before this date will be hidden (not accessible). You can change the course start date at any time (see course settings) in order to have access to earlier sessions.<br><br>Please change the session date or just click the "Add session" button again to confirm?';
+$string['randompassword'] = 'Random password';
+$string['remark'] = 'Remark for: {$a}';
+$string['remarks'] = 'Remarks';
+$string['repeatasfollows'] = 'Repeat the session above as follows';
+$string['repeatevery'] = 'Repeat every';
+$string['repeaton'] = 'Repeat on';
+$string['repeatuntil'] = 'Repeat until';
+$string['report'] = 'Report';
+$string['required'] = 'Required*';
+$string['requiredentries'] = '  Temporary records overwrite participant attendance records';
+$string['requiredentry'] = '  Temporary user merge help guide';
+$string['requiredentry_help'] = '<p align="center"><b>Attendance</b></p>
+<p align="left"><strong>Merge Accounts</strong></p>
+<p align="left">
+<table border="2" cellpadding="4">
+<tr>
+<th>Moodle User</th>
+<th>Temporary User</th>
+<th>Action</th>
+</tr>
+<tr>
+<td>Attendance data</td>
+<td>Attendance data</td>
+<td>Temporary user will override Moodle user</td>
+</tr>
+<tr>
+<td>No attendance data</td>
+<td>Attendance data</td>
+<td>Temporary user attendance will be transfered to Moodle user</td>
+</tr>
+<tr>
+<td>Attendance data</td>
+<td>No attendance data</td>
+<td>Temporary user will be deleted</td>
+</tr>
+<tr>
+<td>No attendance data</td>
+<td>No attendance data</td>
+<td>Temporary user will be deleted</td>
+</tr>
+</table>
+
+</p>
+<p align="left"><strong>Temporay user will be deleted in all cases after merge action</strong></p>';
+$string['requiresubnet'] = 'Require network address';
+$string['requiresubnet_help'] = 'Attendance recording may be restricted to particular subnets by specifying a comma-separated list of partial or full IP addresses.';
+$string['resetcalendar'] = 'Reset calendar';
+$string['resetcaledarcreate'] = 'Calendar events have been enabled but a number of existing sessions do not have events. Do you want to create calendar events for all existing sessions?';
+$string['resetcaledardelete'] = 'Calendar events have been disabled but a number of existing sessions have events that should be deleted. Do you want to delete all existing events?';
+$string['resetdescription'] = 'Remember that deleting attendance data will erase information from database. You can just hide older sessions having changed start date of course!';
+$string['resetstatuses'] = 'Reset statuses to default';
+$string['restoredefaults'] = 'Restore defaults';
+$string['resultsperpage'] = 'Results per page';
+$string['resultsperpage_desc'] = 'Number of students displayed on a page';
+$string['save'] = 'Save attendance';
+$string['search:activity'] = 'Attendance - activity information';
+$string['session'] = 'Session';
+$string['session_help'] = 'Session';
+$string['sessionadded'] = 'Session successfully added';
+$string['sessionalreadyexists'] = 'Session already exists for this date';
+$string['sessiondate'] = 'Date';
+$string['sessiondays'] = 'Session Days';
+$string['sessiondeleted'] = 'Session successfully deleted';
+$string['sessionexist'] = 'Session not added (already exists)!';
+$string['sessiongenerated'] = 'One session was successfully generated';
+$string['sessions'] = 'Sessions';
+$string['sessionscompleted'] = 'Taken sessions';
+$string['sessionsgenerated'] = '{$a} sessions were successfully generated';
+$string['sessionsids'] = 'IDs of sessions: ';
+$string['sessionsnotfound'] = 'There is no sessions in the selected timespan';
+$string['sessionstartdate'] = 'Session start date';
+$string['sessionstotal'] = 'Total number of sessions';
+$string['sessiontype'] = 'Type';
+$string['sessiontype_help'] = 'You can add sessions for all students or for a group of students. Ability to add different types depends on activity group mode.
+
+* In group mode "No groups" you can add only sessions for all students.
+* In group mode "Separate groups" you can add only sessions for a group of students.
+* In group mode "Visible groups" you can add both types of sessions.
+';
+$string['sessiontypeshort'] = 'Type';
+$string['sessionupdated'] = 'Session successfully updated';
+$string['set_by_student'] = 'Self-recorded';
+$string['setallstatuses'] = 'Set status for all users';
+$string['setallstatusesto'] = 'Set status for all users to «{$a}»';
+$string['settings'] = 'Settings';
+$string['setunmarked'] = 'Automatically set when not marked';
+$string['setunmarked_help'] = 'If enabled in the session, set this status if a student has not marked their own attendance.';
+$string['showdefaults'] = 'Show defaults';
+$string['showduration'] = 'Show duration';
+$string['showsessiondetails'] = 'Show session details';
+$string['somedisabledstatus'] = '(Some options have been removed as the session has started.)';
+$string['sortedgrid'] = 'Sorted grid';
+$string['sortedlist'] = 'Sorted list';
+$string['startofperiod'] = 'Start of period';
+$string['status'] = 'Status';
+$string['statusdeleted'] = 'Status deleted';
+$string['statuses'] = 'Statuses';
+$string['statusset'] = 'Status set {$a}';
+$string['statussetsettings'] = 'Status set';
+$string['strftimedm'] = '%b %d';
+$string['strftimedmy'] = '%d %b %Y';
+$string['strftimedmyhm'] = '%d %b %Y %I.%M%p'; // Line added to allow multiple sessions in the same day.
+$string['strftimedmyw'] = '<nobr>%a %d %b %Y</nobr>';
+$string['strftimeh'] = '%I%p';
+$string['strftimehm'] = '%I:%M%p';
+$string['strftimeshortdate'] = '%d.%m.%Y';
+$string['studentavailability'] = 'Available for students (minutes)';
+$string['studentavailability_help'] = 'When students are marking their own attendance, the number of minutes after session starts that this status is available.
+ <br/>If empty, this status will always be available, If set to 0 it will always be hidden to students.';
+$string['studentid'] = 'Student ID';
+$string['studentmarking'] = 'Student recording';
+$string['studentpassword'] = 'Student password';
+$string['studentrecordingexpanded'] = 'Student recording expanded';
+$string['studentrecordingexpanded_desc'] = 'Show the "Student recording" settings as expanded by default when creating new sessions.';
+$string['studentscanmark'] = 'Allow students to record own attendance';
+$string['studentscanmark_desc'] = 'If checked, teachers will be able to allow students to mark their own attendance.';
+$string['studentscanmark_help'] = 'If checked students will be able to change their own attendance status for the session.';
+$string['studentscanmarksessiontime'] = 'Students record attendance during session time';
+$string['studentscanmarksessiontime_desc'] = 'If checked students can only record their attendance during the session.';
+$string['studentscanmarksessiontimeend'] = 'Session end (minutes)';
+$string['studentscanmarksessiontimeend_desc'] = 'If the session does not have an end time, how many minutes should the session be available for students to record their attendance.';
+$string['submitattendance'] = 'Submit attendance';
+$string['subnetactivitylevel'] = 'Allow subnet config at activity level';
+$string['subnetactivitylevel_desc'] = 'If enabled, teachers can override the default subnet at the activity level when creating an attendance. Otherwise the site default will be used when creating a session.';
+$string['subnetwrong'] = 'Attendance can only be recorded from certain locations, and this computer is not on the allowed list.';
+$string['summary'] = 'Summary';
+$string['tablerenamefailed'] = 'Rename of old attforblock table to attendance failed';
+$string['tactions'] = 'Action';
+$string['takeattendance'] = 'Take attendance';
+$string['takensessions'] = 'Taken sessions';
+$string['tcreated'] = 'Created';
+$string['tempaddform'] = 'Add temporary user';
+$string['tempexists'] = 'There is already a temporary user with this email address';
+$string['temptable'] = 'List of temporary users';
+$string['tempuser'] = 'Temporary user';
+$string['tempusermerge'] = 'Merge temporary user';
+$string['tempusers'] = 'Temporary users';
+$string['tempusersedit'] = 'Edit temporary user';
+$string['tempuserslist'] = 'Temporary users';
+$string['thirdpartyemailsubject'] = 'Attendance warning';
+$string['thirdpartyemailtext'] = '{$a->firstname} {$a->lastname} attendance within {$a->coursename} {$a->aname} is lower than {$a->warningpercent} ({$a->percent})';
+$string['thirdpartyemailtextfooter'] = 'You are receiving this because the teacher of this course has added your email to the recipient’s list';
+$string['thirdpartyemails'] = 'Notify other users';
+$string['thirdpartyemails_help'] = 'List of other users who will be notified. (requires the capability mod/attendance:viewreports)';
+$string['thiscourse'] = 'This course';
+$string['time'] = 'Time';
+$string['timeahead'] = 'Multiple sessions that exceed one year cannot be created, please adjust the start and end dates.';
+$string['to'] = 'to:';
+$string['triggered'] = 'First notified';
+$string['tuseremail'] = 'Email';
+$string['tusername'] = 'Full name';
+$string['unknowngroup'] = 'Unknown group';
+$string['update'] = 'Update';
+$string['usedefaultsubnet'] = 'Use default';
+$string['userexists'] = 'There is already a real user with this email address';
+$string['users'] = 'Users to export';
+$string['usestatusset'] = 'Status set';
+$string['variable'] = 'variable';
+$string['variablesupdated'] = 'Variables successfully updated';
+$string['versionforprinting'] = 'version for printing';
+$string['viewmode'] = 'View mode';
+$string['warnafter'] = 'Number of sessions taken before warning';
+$string['warnafter_help'] = 'Warnings will only be triggered when the user has had their attendance taken for at least this number of sessions.';
+$string['warningfailed'] = 'You cannot create a warning that uses the same percentage and number of sessions.';
+$string['warningpercent'] = 'Warn if percentage falls under';
+$string['warningpercent_help'] = 'A warning will be triggered when the overall percentage falls below this number.';
+$string['warningthreshold'] = 'Warning threshold';
+$string['week'] = 'week(s)';
+$string['weeks'] = 'Weeks';
+$string['youcantdo'] = 'You can\'t do anything';
diff --git a/mod/attendance/lib.php b/mod/attendance/lib.php
new file mode 100644
index 0000000..c2af403
--- /dev/null
+++ b/mod/attendance/lib.php
@@ -0,0 +1,499 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Library of functions and constants for module attendance
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once(dirname(__FILE__) . '/classes/calendar_helpers.php');
+
+/**
+ * Returns the information if the module supports a feature
+ *
+ * @see plugin_supports() in lib/moodlelib.php
+ * @param string $feature FEATURE_xx constant for requested feature
+ * @return mixed true if the feature is supported, null if unknown
+ */
+function attendance_supports($feature) {
+    switch($feature) {
+        case FEATURE_GRADE_HAS_GRADE:
+            return true;
+        case FEATURE_GROUPS:
+            return true;
+        case FEATURE_GROUPINGS:
+            return true;
+        case FEATURE_MOD_INTRO:
+            return true;
+        case FEATURE_BACKUP_MOODLE2:
+            return true;
+        // Artem Andreev: AFAIK it's not tested.
+        case FEATURE_COMPLETION_TRACKS_VIEWS:
+            return false;
+        default:
+            return null;
+    }
+}
+
+/**
+ * Add default set of statuses to the new attendance.
+ *
+ * @param int $attid - id of attendance instance.
+ */
+function att_add_default_statuses($attid) {
+    global $DB;
+
+    $statuses = $DB->get_recordset('attendance_statuses', array('attendanceid' => 0), 'id');
+    foreach ($statuses as $st) {
+        $rec = $st;
+        $rec->attendanceid = $attid;
+        $DB->insert_record('attendance_statuses', $rec);
+    }
+    $statuses->close();
+}
+
+/**
+ * Add default set of warnings to the new attendance.
+ *
+ * @param int $id - id of attendance instance.
+ */
+function attendance_add_default_warnings($id) {
+    global $DB, $CFG;
+    require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+
+    $warnings = $DB->get_recordset('attendance_warning',
+        array('idnumber' => 0), 'id');
+    foreach ($warnings as $n) {
+        $rec = $n;
+        $rec->idnumber = $id;
+        $DB->insert_record('attendance_warning', $rec);
+    }
+    $warnings->close();
+}
+
+/**
+ * Add new attendance instance.
+ *
+ * @param stdClass $attendance
+ * @return bool|int
+ */
+function attendance_add_instance($attendance) {
+    global $DB;
+
+    $attendance->timemodified = time();
+
+    $attendance->id = $DB->insert_record('attendance', $attendance);
+
+    att_add_default_statuses($attendance->id);
+
+    attendance_add_default_warnings($attendance->id);
+
+    attendance_grade_item_update($attendance);
+
+    return $attendance->id;
+}
+
+/**
+ * Update existing attendance instance.
+ *
+ * @param stdClass $attendance
+ * @return bool
+ */
+function attendance_update_instance($attendance) {
+    global $DB;
+
+    $attendance->timemodified = time();
+    $attendance->id = $attendance->instance;
+
+    if (! $DB->update_record('attendance', $attendance)) {
+        return false;
+    }
+
+    attendance_grade_item_update($attendance);
+
+    return true;
+}
+
+/**
+ * Delete existing attendance
+ *
+ * @param int $id
+ * @return bool
+ */
+function attendance_delete_instance($id) {
+    global $DB, $CFG;
+    require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+
+    if (! $attendance = $DB->get_record('attendance', array('id' => $id))) {
+        return false;
+    }
+
+    if ($sessids = array_keys($DB->get_records('attendance_sessions', array('attendanceid' => $id), '', 'id'))) {
+        if (attendance_existing_calendar_events_ids($sessids)) {
+            attendance_delete_calendar_events($sessids);
+        }
+        $DB->delete_records_list('attendance_log', 'sessionid', $sessids);
+        $DB->delete_records('attendance_sessions', array('attendanceid' => $id));
+    }
+    $DB->delete_records('attendance_statuses', array('attendanceid' => $id));
+
+    $DB->delete_records('attendance_warning', array('idnumber' => $id));
+
+    $DB->delete_records('attendance', array('id' => $id));
+
+    attendance_grade_item_delete($attendance);
+
+    return true;
+}
+
+/**
+ * Called by course/reset.php
+ * @param moodleform $mform form passed by reference
+ */
+function attendance_reset_course_form_definition(&$mform) {
+    $mform->addElement('header', 'attendanceheader', get_string('modulename', 'attendance'));
+
+    $mform->addElement('static', 'description', get_string('description', 'attendance'),
+                                get_string('resetdescription', 'attendance'));
+    $mform->addElement('checkbox', 'reset_attendance_log', get_string('deletelogs', 'attendance'));
+
+    $mform->addElement('checkbox', 'reset_attendance_sessions', get_string('deletesessions', 'attendance'));
+    $mform->disabledIf('reset_attendance_sessions', 'reset_attendance_log', 'notchecked');
+
+    $mform->addElement('checkbox', 'reset_attendance_statuses', get_string('resetstatuses', 'attendance'));
+    $mform->setAdvanced('reset_attendance_statuses');
+    $mform->disabledIf('reset_attendance_statuses', 'reset_attendance_log', 'notchecked');
+}
+
+/**
+ * Course reset form defaults.
+ *
+ * @param stdClass $course
+ * @return array
+ */
+function attendance_reset_course_form_defaults($course) {
+    return array('reset_attendance_log' => 0, 'reset_attendance_statuses' => 0, 'reset_attendance_sessions' => 0);
+}
+
+/**
+ * Reset user data within attendance.
+ *
+ * @param stdClass $data
+ * @return array
+ */
+function attendance_reset_userdata($data) {
+    global $DB;
+
+    $status = array();
+
+    $attids = array_keys($DB->get_records('attendance', array('course' => $data->courseid), '', 'id'));
+
+    if (!empty($data->reset_attendance_log)) {
+        $sess = $DB->get_records_list('attendance_sessions', 'attendanceid', $attids, '', 'id');
+        if (!empty($sess)) {
+            list($sql, $params) = $DB->get_in_or_equal(array_keys($sess));
+            $DB->delete_records_select('attendance_log', "sessionid $sql", $params);
+            list($sql, $params) = $DB->get_in_or_equal($attids);
+            $DB->set_field_select('attendance_sessions', 'lasttaken', 0, "attendanceid $sql", $params);
+            if (empty($data->reset_attendance_sessions)) {
+                // If sessions are being retained, clear automarkcompleted value.
+                $DB->set_field_select('attendance_sessions', 'automarkcompleted', 0, "attendanceid $sql", $params);
+            }
+
+            $status[] = array(
+                'component' => get_string('modulenameplural', 'attendance'),
+                'item' => get_string('attendancedata', 'attendance'),
+                'error' => false
+            );
+        }
+    }
+
+    if (!empty($data->reset_attendance_statuses)) {
+        $DB->delete_records_list('attendance_statuses', 'attendanceid', $attids);
+        foreach ($attids as $attid) {
+            att_add_default_statuses($attid);
+        }
+
+        $status[] = array(
+            'component' => get_string('modulenameplural', 'attendance'),
+            'item' => get_string('sessions', 'attendance'),
+            'error' => false
+        );
+    }
+
+    if (!empty($data->reset_attendance_sessions)) {
+        $sessionsids = array_keys($DB->get_records_list('attendance_sessions', 'attendanceid', $attids, '', 'id'));
+        if (attendance_existing_calendar_events_ids($sessionsids)) {
+            attendance_delete_calendar_events($sessionsids);
+        }
+        $DB->delete_records_list('attendance_sessions', 'attendanceid', $attids);
+
+        $status[] = array(
+            'component' => get_string('modulenameplural', 'attendance'),
+            'item' => get_string('statuses', 'attendance'),
+            'error' => false
+        );
+    }
+
+    return $status;
+}
+/**
+ * Return a small object with summary information about what a
+ *  user has done with a given particular instance of this module
+ *  Used for user activity reports.
+ *  $return->time = the time they did it
+ *  $return->info = a short text description
+ *
+ * @param stdClass $course - full course record.
+ * @param stdClass $user - full user record
+ * @param stdClass $mod
+ * @param stdClass $attendance
+ * @return stdClass.
+ */
+function attendance_user_outline($course, $user, $mod, $attendance) {
+    global $CFG;
+    require_once(dirname(__FILE__).'/locallib.php');
+    require_once($CFG->libdir.'/gradelib.php');
+
+    $grades = grade_get_grades($course->id, 'mod', 'attendance', $attendance->id, $user->id);
+
+    $result = new stdClass();
+    if (!empty($grades->items[0]->grades)) {
+        $grade = reset($grades->items[0]->grades);
+        $result->time = $grade->dategraded;
+    } else {
+        $result->time = 0;
+    }
+    if (has_capability('mod/attendance:canbelisted', $mod->context, $user->id)) {
+        $summary = new mod_attendance_summary($attendance->id, $user->id);
+        $usersummary = $summary->get_all_sessions_summary_for($user->id);
+
+        $result->info = format_float($usersummary->takensessionspoints, 1, true, true) . ' / ' .
+                        format_float($usersummary->allsessionsmaxpoints, 1, true, true);
+    }
+
+    return $result;
+}
+/**
+ * Print a detailed representation of what a  user has done with
+ * a given particular instance of this module, for user activity reports.
+ *
+ * @param stdClass $course
+ * @param stdClass $user
+ * @param stdClass $mod
+ * @param stdClass $attendance
+ */
+function attendance_user_complete($course, $user, $mod, $attendance) {
+    global $CFG;
+
+    require_once(dirname(__FILE__).'/renderhelpers.php');
+    require_once($CFG->libdir.'/gradelib.php');
+
+    if (has_capability('mod/attendance:canbelisted', $mod->context, $user->id)) {
+        echo construct_full_user_stat_html_table($attendance, $user);
+    }
+}
+
+/**
+ * Dummy function - must exist to allow quick editing of module name.
+ *
+ * @param stdClass $attendance
+ * @param int $userid
+ * @param bool $nullifnone
+ */
+function attendance_update_grades($attendance, $userid=0, $nullifnone=true) {
+    // We need this function to exist so that quick editing of module name is passed to gradebook.
+}
+/**
+ * Create grade item for given attendance
+ *
+ * @param stdClass $attendance object with extra cmidnumber
+ * @param mixed $grades optional array/object of grade(s); 'reset' means reset grades in gradebook
+ * @return int 0 if ok, error code otherwise
+ */
+function attendance_grade_item_update($attendance, $grades=null) {
+    global $CFG, $DB;
+
+    require_once('locallib.php');
+
+    if (!function_exists('grade_update')) { // Workaround for buggy PHP versions.
+        require_once($CFG->libdir.'/gradelib.php');
+    }
+
+    if (!isset($attendance->courseid)) {
+        $attendance->courseid = $attendance->course;
+    }
+    if (!$DB->get_record('course', array('id' => $attendance->course))) {
+        error("Course is misconfigured");
+    }
+
+    if (!empty($attendance->cmidnumber)) {
+        $params = array('itemname' => $attendance->name, 'idnumber' => $attendance->cmidnumber);
+    } else {
+        // MDL-14303.
+        $params = array('itemname' => $attendance->name);
+    }
+
+    if ($attendance->grade > 0) {
+        $params['gradetype'] = GRADE_TYPE_VALUE;
+        $params['grademax']  = $attendance->grade;
+        $params['grademin']  = 0;
+    } else if ($attendance->grade < 0) {
+        $params['gradetype'] = GRADE_TYPE_SCALE;
+        $params['scaleid']   = -$attendance->grade;
+
+    } else {
+        $params['gradetype'] = GRADE_TYPE_NONE;
+    }
+
+    if ($grades === 'reset') {
+        $params['reset'] = true;
+        $grades = null;
+    }
+
+    return grade_update('mod/attendance', $attendance->courseid, 'mod', 'attendance', $attendance->id, 0, $grades, $params);
+}
+
+/**
+ * Delete grade item for given attendance
+ *
+ * @param object $attendance object
+ * @return object attendance
+ */
+function attendance_grade_item_delete($attendance) {
+    global $CFG;
+    require_once($CFG->libdir.'/gradelib.php');
+
+    if (!isset($attendance->courseid)) {
+        $attendance->courseid = $attendance->course;
+    }
+
+    return grade_update('mod/attendance', $attendance->courseid, 'mod', 'attendance',
+                        $attendance->id, 0, null, array('deleted' => 1));
+}
+
+/**
+ * This function returns if a scale is being used by one attendance
+ * it it has support for grading and scales. Commented code should be
+ * modified if necessary. See book, glossary or journal modules
+ * as reference.
+ *
+ * @param int $attendanceid
+ * @param int $scaleid
+ * @return boolean True if the scale is used by any attendance
+ */
+function attendance_scale_used ($attendanceid, $scaleid) {
+    return false;
+}
+
+/**
+ * Checks if scale is being used by any instance of attendance
+ *
+ * This is used to find out if scale used anywhere
+ *
+ * @param int $scaleid
+ * @return bool true if the scale is used by any book
+ */
+function attendance_scale_used_anywhere($scaleid) {
+    return false;
+}
+
+/**
+ * Serves the attendance sessions descriptions files.
+ *
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param array $args
+ * @param bool $forcedownload
+ * @return bool false if file not found, does not return if found - justsend the file
+ */
+function attendance_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload) {
+    global $DB;
+
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return false;
+    }
+
+    require_login($course, false, $cm);
+
+    if (!$DB->record_exists('attendance', array('id' => $cm->instance))) {
+        return false;
+    }
+
+    // Session area is served by pluginfile.php.
+    $fileareas = array('session');
+    if (!in_array($filearea, $fileareas)) {
+        return false;
+    }
+
+    $sessid = (int)array_shift($args);
+    if (!$DB->record_exists('attendance_sessions', array('id' => $sessid))) {
+        return false;
+    }
+
+    $fs = get_file_storage();
+    $relativepath = implode('/', $args);
+    $fullpath = "/$context->id/mod_attendance/$filearea/$sessid/$relativepath";
+    if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+        return false;
+    }
+    send_stored_file($file, 0, 0, true);
+}
+
+/**
+ * Print tabs on attendance settings page.
+ *
+ * @param string $selected - current selected tab.
+ */
+function attendance_print_settings_tabs($selected = 'settings') {
+    global $CFG;
+    // Print tabs for different settings pages.
+    $tabs = array();
+    $tabs[] = new tabobject('settings', $CFG->wwwroot.'/admin/settings.php?section=modsettingattendance',
+        get_string('settings', 'attendance'), get_string('settings'), false);
+
+    $tabs[] = new tabobject('defaultstatus', $CFG->wwwroot.'/mod/attendance/defaultstatus.php',
+        get_string('defaultstatus', 'attendance'), get_string('defaultstatus', 'attendance'), false);
+
+    if (get_config('attendance', 'enablewarnings')) {
+        $tabs[] = new tabobject('defaultwarnings', $CFG->wwwroot . '/mod/attendance/warnings.php',
+            get_string('defaultwarnings', 'attendance'), get_string('defaultwarnings', 'attendance'), false);
+    }
+
+    $tabs[] = new tabobject('coursesummary', $CFG->wwwroot.'/mod/attendance/coursesummary.php',
+        get_string('coursesummary', 'attendance'), get_string('coursesummary', 'attendance'), false);
+
+    if (get_config('attendance', 'enablewarnings')) {
+        $tabs[] = new tabobject('absentee', $CFG->wwwroot . '/mod/attendance/absentee.php',
+            get_string('absenteereport', 'attendance'), get_string('absenteereport', 'attendance'), false);
+    }
+
+    $tabs[] = new tabobject('resetcalendar', $CFG->wwwroot.'/mod/attendance/resetcalendar.php',
+        get_string('resetcalendar', 'attendance'), get_string('resetcalendar', 'attendance'), false);
+
+    ob_start();
+    print_tabs(array($tabs), $selected);
+    $tabmenu = ob_get_contents();
+    ob_end_clean();
+
+    return $tabmenu;
+}
\ No newline at end of file
diff --git a/mod/attendance/locallib.php b/mod/attendance/locallib.php
new file mode 100644
index 0000000..dfb3c92
--- /dev/null
+++ b/mod/attendance/locallib.php
@@ -0,0 +1,824 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * local functions and constants for module attendance
+ *
+ * @package   mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir . '/gradelib.php');
+require_once(dirname(__FILE__).'/renderhelpers.php');
+
+define('ATT_VIEW_DAYS', 1);
+define('ATT_VIEW_WEEKS', 2);
+define('ATT_VIEW_MONTHS', 3);
+define('ATT_VIEW_ALLPAST', 4);
+define('ATT_VIEW_ALL', 5);
+define('ATT_VIEW_NOTPRESENT', 6);
+define('ATT_VIEW_SUMMARY', 7);
+
+define('ATT_SORT_DEFAULT', 0);
+define('ATT_SORT_LASTNAME', 1);
+define('ATT_SORT_FIRSTNAME', 2);
+
+define('ATTENDANCE_AUTOMARK_DISABLED', 0);
+define('ATTENDANCE_AUTOMARK_ALL', 1);
+define('ATTENDANCE_AUTOMARK_CLOSE', 2);
+
+/**
+ * Get statuses,
+ *
+ * @param int $attid
+ * @param bool $onlyvisible
+ * @param int $statusset
+ * @return array
+ */
+function attendance_get_statuses($attid, $onlyvisible=true, $statusset = -1) {
+    global $DB;
+
+    // Set selector.
+    $params = array('aid' => $attid);
+    $setsql = '';
+    if ($statusset >= 0) {
+        $params['statusset'] = $statusset;
+        $setsql = ' AND setnumber = :statusset ';
+    }
+
+    if ($onlyvisible) {
+        $statuses = $DB->get_records_select('attendance_statuses', "attendanceid = :aid AND visible = 1 AND deleted = 0 $setsql",
+                                            $params, 'setnumber ASC, grade DESC');
+    } else {
+        $statuses = $DB->get_records_select('attendance_statuses', "attendanceid = :aid AND deleted = 0 $setsql",
+                                            $params, 'setnumber ASC, grade DESC');
+    }
+
+    return $statuses;
+}
+
+/**
+ * Get the name of the status set.
+ *
+ * @param int $attid
+ * @param int $statusset
+ * @param bool $includevalues
+ * @return string
+ */
+function attendance_get_setname($attid, $statusset, $includevalues = true) {
+    $statusname = get_string('statusset', 'mod_attendance', $statusset + 1);
+    if ($includevalues) {
+        $statuses = attendance_get_statuses($attid, true, $statusset);
+        $statusesout = array();
+        foreach ($statuses as $status) {
+            $statusesout[] = $status->acronym;
+        }
+        if ($statusesout) {
+            if (count($statusesout) > 6) {
+                $statusesout = array_slice($statusesout, 0, 6);
+                $statusesout[] = '&helip;';
+            }
+            $statusesout = implode(' ', $statusesout);
+            $statusname .= ' ('.$statusesout.')';
+        }
+    }
+
+    return $statusname;
+}
+
+/**
+ * Get users courses and the relevant attendances.
+ *
+ * @param int $userid
+ * @return array
+ */
+function attendance_get_user_courses_attendances($userid) {
+    global $DB;
+
+    $usercourses = enrol_get_users_courses($userid);
+
+    list($usql, $uparams) = $DB->get_in_or_equal(array_keys($usercourses), SQL_PARAMS_NAMED, 'cid0');
+
+    $sql = "SELECT att.id as attid, att.course as courseid, course.fullname as coursefullname,
+                   course.startdate as coursestartdate, att.name as attname, att.grade as attgrade
+              FROM {attendance} att
+              JOIN {course} course
+                   ON att.course = course.id
+             WHERE att.course $usql
+          ORDER BY coursefullname ASC, attname ASC";
+
+    $params = array_merge($uparams, array('uid' => $userid));
+
+    return $DB->get_records_sql($sql, $params);
+}
+
+/**
+ * Used to calculate a fraction based on the part and total values
+ *
+ * @param float $part - part of the total value
+ * @param float $total - total value.
+ * @return float the calculated fraction.
+ */
+function attendance_calc_fraction($part, $total) {
+    if ($total == 0) {
+        return 0;
+    } else {
+        return $part / $total;
+    }
+}
+
+/**
+ * Check to see if statusid in use to help prevent deletion etc.
+ *
+ * @param integer $statusid
+ */
+function attendance_has_logs_for_status($statusid) {
+    global $DB;
+    return $DB->record_exists('attendance_log', array('statusid' => $statusid));
+}
+
+/**
+ * Helper function to add sessiondate_selector to add/update forms.
+ *
+ * @param MoodleQuickForm $mform
+ */
+function attendance_form_sessiondate_selector (MoodleQuickForm $mform) {
+
+    $mform->addElement('date_selector', 'sessiondate', get_string('sessiondate', 'attendance'));
+
+    for ($i = 0; $i <= 23; $i++) {
+        $hours[$i] = sprintf("%02d", $i);
+    }
+    for ($i = 0; $i < 60; $i += 5) {
+        $minutes[$i] = sprintf("%02d", $i);
+    }
+
+    $sesendtime = array();
+    $sesendtime[] =& $mform->createElement('static', 'from', '', get_string('from', 'attendance'));
+    $sesendtime[] =& $mform->createElement('select', 'starthour', get_string('hour', 'form'), $hours, false, true);
+    $sesendtime[] =& $mform->createElement('select', 'startminute', get_string('minute', 'form'), $minutes, false, true);
+    $sesendtime[] =& $mform->createElement('static', 'to', '', get_string('to', 'attendance'));
+    $sesendtime[] =& $mform->createElement('select', 'endhour', get_string('hour', 'form'), $hours, false, true);
+    $sesendtime[] =& $mform->createElement('select', 'endminute', get_string('minute', 'form'), $minutes, false, true);
+    $mform->addGroup($sesendtime, 'sestime', get_string('time', 'attendance'), array(' '), true);
+}
+
+/**
+ * Count the number of status sets that exist for this instance.
+ *
+ * @param int $attendanceid
+ * @return int
+ */
+function attendance_get_max_statusset($attendanceid) {
+    global $DB;
+
+    $max = $DB->get_field_sql('SELECT MAX(setnumber) FROM {attendance_statuses} WHERE attendanceid = ? AND deleted = 0',
+        array($attendanceid));
+    if ($max) {
+        return $max;
+    }
+    return 0;
+}
+
+/**
+ * Returns the maxpoints for each statusset
+ *
+ * @param array $statuses
+ * @return array
+ */
+function attendance_get_statusset_maxpoints($statuses) {
+    $statussetmaxpoints = array();
+    foreach ($statuses as $st) {
+        if (!isset($statussetmaxpoints[$st->setnumber])) {
+            $statussetmaxpoints[$st->setnumber] = $st->grade;
+        }
+    }
+    return $statussetmaxpoints;
+}
+
+/**
+ * Update user grades
+ *
+ * @param mod_attendance_structure|stdClass $attendance
+ * @param array $userids
+ */
+function attendance_update_users_grade($attendance, $userids=array()) {
+    global $DB;
+
+    if (empty($attendance->grade)) {
+        return false;
+    }
+
+    list($course, $cm) = get_course_and_cm_from_instance($attendance->id, 'attendance');
+
+    $summary = new mod_attendance_summary($attendance->id, $userids);
+
+    if (empty($userids)) {
+        $context = context_module::instance($cm->id);
+        $userids = array_keys(get_enrolled_users($context, 'mod/attendance:canbelisted', 0, 'u.id'));
+    }
+
+    if ($attendance->grade < 0) {
+        $dbparams = array('id' => -($attendance->grade));
+        $scale = $DB->get_record('scale', $dbparams);
+        $scalearray = explode(',', $scale->scale);
+        $attendancegrade = count($scalearray);
+    } else {
+        $attendancegrade = $attendance->grade;
+    }
+
+    $grades = array();
+    foreach ($userids as $userid) {
+        $grades[$userid] = new stdClass();
+        $grades[$userid]->userid = $userid;
+
+        if ($summary->has_taken_sessions($userid)) {
+            $usersummary = $summary->get_taken_sessions_summary_for($userid);
+            $grades[$userid]->rawgrade = $usersummary->takensessionspercentage * $attendancegrade;
+        } else {
+            $grades[$userid]->rawgrade = null;
+        }
+    }
+
+    return grade_update('mod/attendance', $course->id, 'mod', 'attendance', $attendance->id, 0, $grades);
+}
+
+/**
+ * Add an attendance status variable
+ *
+ * @param stdClass $status
+ * @return bool
+ */
+function attendance_add_status($status) {
+    global $DB;
+    if (empty($status->context)) {
+        $status->context = context_system::instance();
+    }
+
+    if (!empty($status->acronym) && !empty($status->description)) {
+        $status->deleted = 0;
+        $status->visible = 1;
+        $status->setunmarked = 0;
+
+        $id = $DB->insert_record('attendance_statuses', $status);
+        $status->id = $id;
+
+        $event = \mod_attendance\event\status_added::create(array(
+            'objectid' => $status->attendanceid,
+            'context' => $status->context,
+            'other' => array('acronym' => $status->acronym,
+                             'description' => $status->description,
+                             'grade' => $status->grade)));
+        if (!empty($status->cm)) {
+            $event->add_record_snapshot('course_modules', $status->cm);
+        }
+        $event->add_record_snapshot('attendance_statuses', $status);
+        $event->trigger();
+        return true;
+    } else {
+        return false;
+    }
+}
+
+/**
+ * Remove a status variable from an attendance instance
+ *
+ * @param stdClass $status
+ * @param stdClass $context
+ * @param stdClass $cm
+ */
+function attendance_remove_status($status, $context = null, $cm = null) {
+    global $DB;
+    if (empty($context)) {
+        $context = context_system::instance();
+    }
+    $DB->set_field('attendance_statuses', 'deleted', 1, array('id' => $status->id));
+    $event = \mod_attendance\event\status_removed::create(array(
+        'objectid' => $status->id,
+        'context' => $context,
+        'other' => array(
+            'acronym' => $status->acronym,
+            'description' => $status->description
+        )));
+    if (!empty($cm)) {
+        $event->add_record_snapshot('course_modules', $cm);
+    }
+    $event->add_record_snapshot('attendance_statuses', $status);
+    $event->trigger();
+}
+
+/**
+ * Update status variable for a particular Attendance module instance
+ *
+ * @param stdClass $status
+ * @param string $acronym
+ * @param string $description
+ * @param int $grade
+ * @param bool $visible
+ * @param stdClass $context
+ * @param stdClass $cm
+ * @param int $studentavailability
+ * @param bool $setunmarked
+ * @return array
+ */
+function attendance_update_status($status, $acronym, $description, $grade, $visible,
+                                  $context = null, $cm = null, $studentavailability = null, $setunmarked = false) {
+    global $DB;
+
+    if (empty($context)) {
+        $context = context_system::instance();
+    }
+
+    if (isset($visible)) {
+        $status->visible = $visible;
+        $updated[] = $visible ? get_string('show') : get_string('hide');
+    } else if (empty($acronym) || empty($description)) {
+        return array('acronym' => $acronym, 'description' => $description);
+    }
+
+    $updated = array();
+
+    if ($acronym) {
+        $status->acronym = $acronym;
+        $updated[] = $acronym;
+    }
+    if ($description) {
+        $status->description = $description;
+        $updated[] = $description;
+    }
+    if (isset($grade)) {
+        $status->grade = $grade;
+        $updated[] = $grade;
+    }
+    if (isset($studentavailability)) {
+        if (empty($studentavailability)) {
+            if ($studentavailability !== '0') {
+                $studentavailability = null;
+            }
+        }
+
+        $status->studentavailability = $studentavailability;
+        $updated[] = $studentavailability;
+    }
+    if ($setunmarked) {
+        $status->setunmarked = 1;
+    } else {
+        $status->setunmarked = 0;
+    }
+    $DB->update_record('attendance_statuses', $status);
+
+    $event = \mod_attendance\event\status_updated::create(array(
+        'objectid' => $status->attendanceid,
+        'context' => $context,
+        'other' => array('acronym' => $acronym, 'description' => $description, 'grade' => $grade,
+            'updated' => implode(' ', $updated))));
+    if (!empty($cm)) {
+        $event->add_record_snapshot('course_modules', $cm);
+    }
+    $event->add_record_snapshot('attendance_statuses', $status);
+    $event->trigger();
+}
+
+/**
+ * Similar to core random_string function but only lowercase letters.
+ * designed to make it relatively easy to provide a simple password in class.
+ *
+ * @param int $length The length of the string to be created.
+ * @return string
+ */
+function attendance_random_string($length=6) {
+    $randombytes = random_bytes_emulate($length);
+    $pool = 'abcdefghijklmnopqrstuvwxyz';
+    $pool .= '0123456789';
+    $poollen = strlen($pool);
+    $string = '';
+    for ($i = 0; $i < $length; $i++) {
+        $rand = ord($randombytes[$i]);
+        $string .= substr($pool, ($rand % ($poollen)), 1);
+    }
+    return $string;
+}
+
+/**
+ * Check to see if this session is open for student marking.
+ *
+ * @param stdclass $sess the session record from attendance_sessions.
+ * @return boolean
+ */
+function attendance_can_student_mark($sess) {
+    $canmark = false;
+    $attconfig = get_config('attendance');
+    if (!empty($attconfig->studentscanmark) && !empty($sess->studentscanmark)) {
+        if (empty($attconfig->studentscanmarksessiontime)) {
+            $canmark = true;
+        } else {
+            $duration = $sess->duration;
+            if (empty($duration)) {
+                $duration = $attconfig->studentscanmarksessiontimeend * 60;
+            }
+            if ($sess->sessdate < time() && time() < ($sess->sessdate + $duration)) {
+                $canmark = true;
+            }
+        }
+    }
+    return $canmark;
+}
+
+/**
+ * Generate worksheet for Attendance export
+ *
+ * @param stdclass $data The data for the report
+ * @param string $filename The name of the file
+ * @param string $format excel|ods
+ *
+ */
+function attendance_exporttotableed($data, $filename, $format) {
+    global $CFG;
+
+    if ($format === 'excel') {
+        require_once("$CFG->libdir/excellib.class.php");
+        $filename .= ".xls";
+        $workbook = new MoodleExcelWorkbook("-");
+    } else {
+        require_once("$CFG->libdir/odslib.class.php");
+        $filename .= ".ods";
+        $workbook = new MoodleODSWorkbook("-");
+    }
+    // Sending HTTP headers.
+    $workbook->send($filename);
+    // Creating the first worksheet.
+    $myxls = $workbook->add_worksheet('Attendances');
+    // Format types.
+    $formatbc = $workbook->add_format();
+    $formatbc->set_bold(1);
+
+    $myxls->write(0, 0, get_string('course'), $formatbc);
+    $myxls->write(0, 1, $data->course);
+    $myxls->write(1, 0, get_string('group'), $formatbc);
+    $myxls->write(1, 1, $data->group);
+
+    $i = 3;
+    $j = 0;
+    foreach ($data->tabhead as $cell) {
+        // Merge cells if the heading would be empty (remarks column).
+        if (empty($cell)) {
+            $myxls->merge_cells($i, $j - 1, $i, $j);
+        } else {
+            $myxls->write($i, $j, $cell, $formatbc);
+        }
+        $j++;
+    }
+    $i++;
+    $j = 0;
+    foreach ($data->table as $row) {
+        foreach ($row as $cell) {
+            $myxls->write($i, $j++, $cell);
+        }
+        $i++;
+        $j = 0;
+    }
+    $workbook->close();
+}
+
+/**
+ * Generate csv for Attendance export
+ *
+ * @param stdclass $data The data for the report
+ * @param string $filename The name of the file
+ *
+ */
+function attendance_exporttocsv($data, $filename) {
+    $filename .= ".txt";
+
+    header("Content-Type: application/download\n");
+    header("Content-Disposition: attachment; filename=\"$filename\"");
+    header("Expires: 0");
+    header("Cache-Control: must-revalidate,post-check=0,pre-check=0");
+    header("Pragma: public");
+
+    echo get_string('course')."\t".$data->course."\n";
+    echo get_string('group')."\t".$data->group."\n\n";
+
+    echo implode("\t", $data->tabhead)."\n";
+    foreach ($data->table as $row) {
+        echo implode("\t", $row)."\n";
+    }
+}
+
+/**
+ * Get session data for form.
+ * @param stdClass $formdata moodleform - attendance form.
+ * $param mod_attendance_structure $att - used to get attendance level subnet.
+ * @return array.
+ */
+function attendance_construct_sessions_data_for_add($formdata, mod_attendance_structure $att) {
+    global $CFG;
+
+    $sesstarttime = $formdata->sestime['starthour'] * HOURSECS + $formdata->sestime['startminute'] * MINSECS;
+    $sesendtime = $formdata->sestime['endhour'] * HOURSECS + $formdata->sestime['endminute'] * MINSECS;
+    $sessiondate = $formdata->sessiondate + $sesstarttime;
+    $duration = $sesendtime - $sesstarttime;
+    $now = time();
+
+    if (empty(get_config('attendance', 'studentscanmark'))) {
+        $formdata->studentscanmark = 0;
+    }
+
+    $sessions = array();
+    if (isset($formdata->addmultiply)) {
+        $startdate = $sessiondate;
+        $enddate = $formdata->sessionenddate + DAYSECS; // Because enddate in 0:0am.
+
+        if ($enddate < $startdate) {
+            return null;
+        }
+
+        // Getting first day of week.
+        $sdate = $startdate;
+        $dinfo = usergetdate($sdate);
+        if ($CFG->calendar_startwday === '0') { // Week start from sunday.
+            $startweek = $startdate - $dinfo['wday'] * DAYSECS; // Call new variable.
+        } else {
+            $wday = $dinfo['wday'] === 0 ? 7 : $dinfo['wday'];
+            $startweek = $startdate - ($wday - 1) * DAYSECS;
+        }
+
+        $wdaydesc = array(0 => 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
+
+        while ($sdate < $enddate) {
+            if ($sdate < $startweek + WEEKSECS) {
+                $dinfo = usergetdate($sdate);
+                if (isset($formdata->sdays) && array_key_exists($wdaydesc[$dinfo['wday']], $formdata->sdays)) {
+                    $sess = new stdClass();
+                    $sess->sessdate = make_timestamp($dinfo['year'], $dinfo['mon'], $dinfo['mday'],
+                        $formdata->sestime['starthour'], $formdata->sestime['startminute']);
+                    $sess->duration = $duration;
+                    $sess->descriptionitemid = $formdata->sdescription['itemid'];
+                    $sess->description = $formdata->sdescription['text'];
+                    $sess->descriptionformat = $formdata->sdescription['format'];
+                    $sess->timemodified = $now;
+                    if (isset($formdata->studentscanmark)) { // Students will be able to mark their own attendance.
+                        $sess->studentscanmark = 1;
+                        if (!empty($formdata->usedefaultsubnet)) {
+                            $sess->subnet = $att->subnet;
+                        } else {
+                            $sess->subnet = $formdata->subnet;
+                        }
+                        $sess->automark = $formdata->automark;
+                        $sess->automarkcompleted = 0;
+                        if (!empty($formdata->randompassword)) {
+                            $sess->studentpassword = attendance_random_string();
+                        } else {
+                            $sess->studentpassword = $formdata->studentpassword;
+                        }
+                    } else {
+                        $sess->studentpassword = '';
+                        $sess->subnet = '';
+                        $sess->automark = 0;
+                        $sess->automarkcompleted = 0;
+                    }
+                    $sess->statusset = $formdata->statusset;
+
+                    attendance_fill_groupid($formdata, $sessions, $sess);
+                }
+                $sdate += DAYSECS;
+            } else {
+                $startweek += WEEKSECS * $formdata->period;
+                $sdate = $startweek;
+            }
+        }
+    } else {
+        $sess = new stdClass();
+        $sess->sessdate = $sessiondate;
+        $sess->duration = $duration;
+        $sess->descriptionitemid = $formdata->sdescription['itemid'];
+        $sess->description = $formdata->sdescription['text'];
+        $sess->descriptionformat = $formdata->sdescription['format'];
+        $sess->timemodified = $now;
+        $sess->studentscanmark = 0;
+        $sess->subnet = '';
+        $sess->studentpassword = '';
+        $sess->automark = 0;
+        $sess->automarkcompleted = 0;
+
+        if (isset($formdata->studentscanmark) && !empty($formdata->studentscanmark)) {
+            // Students will be able to mark their own attendance.
+            $sess->studentscanmark = 1;
+            if (!empty($formdata->randompassword)) {
+                $sess->studentpassword = attendance_random_string();
+            } else if (!empty($formdata->studentpassword)) {
+                $sess->studentpassword = $formdata->studentpassword;
+            }
+            if (!empty($formdata->usedefaultsubnet)) {
+                $sess->subnet = $att->subnet;
+            } else {
+                $sess->subnet = $formdata->subnet;
+            }
+
+            if (!empty($formdata->automark)) {
+                $sess->automark = $formdata->automark;
+            }
+        }
+        $sess->statusset = $formdata->statusset;
+
+        attendance_fill_groupid($formdata, $sessions, $sess);
+    }
+
+    return $sessions;
+}
+
+/**
+ * Helper function for attendance_construct_sessions_data_for_add().
+ *
+ * @param stdClass $formdata
+ * @param stdClass $sessions
+ * @param stdClass $sess
+ */
+function attendance_fill_groupid($formdata, &$sessions, $sess) {
+    if ($formdata->sessiontype == mod_attendance_structure::SESSION_COMMON) {
+        $sess = clone $sess;
+        $sess->groupid = 0;
+        $sessions[] = $sess;
+    } else {
+        foreach ($formdata->groups as $groupid) {
+            $sess = clone $sess;
+            $sess->groupid = $groupid;
+            $sessions[] = $sess;
+        }
+    }
+}
+
+/**
+ * Generates a summary of points for the courses selected.
+ *
+ * @param array $courseids optional list of courses to return
+ * @param string $orderby - optional order by param
+ * @return stdClass
+ */
+function attendance_course_users_points($courseids = array(), $orderby = '') {
+    global $DB;
+
+    $where = '';
+    $params = array();
+    $where .= ' AND ats.sessdate < :enddate ';
+    $params['enddate'] = time();
+
+    $joingroup = 'LEFT JOIN {groups_members} gm ON (gm.userid = atl.studentid AND gm.groupid = ats.groupid)';
+    $where .= ' AND (ats.groupid = 0 or gm.id is NOT NULL)';
+
+    if (!empty($courseids)) {
+        list($insql, $inparams) = $DB->get_in_or_equal($courseids, SQL_PARAMS_NAMED);
+        $where .= ' AND c.id ' . $insql;
+        $params = array_merge($params, $inparams);
+    }
+
+    $sql = "SELECT courseid, coursename, sum(points) / sum(maxpoints) as percentage FROM (
+SELECT a.id, a.course as courseid, c.fullname as coursename, atl.studentid AS userid, COUNT(DISTINCT ats.id) AS numtakensessions,
+                        SUM(stg.grade) AS points, SUM(stm.maxgrade) AS maxpoints
+                   FROM {attendance_sessions} ats
+                   JOIN {attendance} a ON a.id = ats.attendanceid
+                   JOIN {course} c ON c.id = a.course
+                   JOIN {attendance_log} atl ON (atl.sessionid = ats.id)
+                   JOIN {attendance_statuses} stg ON (stg.id = atl.statusid AND stg.deleted = 0 AND stg.visible = 1)
+                   JOIN (SELECT attendanceid, setnumber, MAX(grade) AS maxgrade
+                           FROM {attendance_statuses}
+                          WHERE deleted = 0
+                            AND visible = 1
+                         GROUP BY attendanceid, setnumber) stm
+                     ON (stm.setnumber = ats.statusset AND stm.attendanceid = ats.attendanceid)
+                  {$joingroup}
+                  WHERE ats.sessdate >= c.startdate
+                    AND ats.lasttaken != 0
+                    {$where}
+                GROUP BY a.id, a.course, c.fullname, atl.studentid
+                ) p GROUP by courseid, coursename {$orderby}";
+
+    return $DB->get_records_sql($sql, $params);
+}
+
+/**
+ * Generates a list of users flagged absent.
+ *
+ * @param array $courseids optional list of courses to return
+ * @param bool $allfornotify get notification list for scheduled task.
+ * @return stdClass
+ */
+function attendance_get_users_to_notify($courseids = array(), $orderby = '', $allfornotify = false) {
+    global $DB;
+
+    $joingroup = 'LEFT JOIN {groups_members} gm ON (gm.userid = atl.studentid AND gm.groupid = ats.groupid)';
+    $where = ' AND (ats.groupid = 0 or gm.id is NOT NULL)';
+    $having = '';
+    $params = array();
+
+    if (!empty($courseids)) {
+        list($insql, $inparams) = $DB->get_in_or_equal($courseids, SQL_PARAMS_NAMED);
+        $where .= ' AND c.id ' . $insql;
+        $params = array_merge($params, $inparams);
+    }
+    if ($allfornotify) {
+        // Exclude warnings that have already sent the max num.
+        $having .= ' AND n.maxwarn > COUNT(DISTINCT ns.id) ';
+    }
+
+    $unames = get_all_user_name_fields(true);
+    $unames2 = get_all_user_name_fields(true, 'u');
+
+    $idfield = $DB->sql_concat('cm.id', 'atl.studentid', 'n.id');
+    $sql = "SELECT {$idfield} as uniqueid, a.id as aid, {$unames2}, a.name as aname, cm.id as cmid, c.id as courseid,
+                    c.fullname as coursename, atl.studentid AS userid, n.id as notifyid, n.warningpercent, n.emailsubject,
+                    n.emailcontent, n.emailcontentformat, n.emailuser, n.thirdpartyemails, n.warnafter, n.maxwarn,
+                     COUNT(DISTINCT ats.id) AS numtakensessions, SUM(stg.grade) AS points, SUM(stm.maxgrade) AS maxpoints,
+                      COUNT(DISTINCT ns.id) as nscount, MAX(ns.timesent) as timesent,
+                      SUM(stg.grade) / SUM(stm.maxgrade) AS percent
+                   FROM {attendance_sessions} ats
+                   JOIN {attendance} a ON a.id = ats.attendanceid
+                   JOIN {course_modules} cm ON cm.instance = a.id
+                   JOIN {course} c on c.id = cm.course
+                   JOIN {modules} md ON md.id = cm.module AND md.name = 'attendance'
+                   JOIN {attendance_log} atl ON (atl.sessionid = ats.id)
+                   JOIN {user} u ON (u.id = atl.studentid)
+                   JOIN {attendance_statuses} stg ON (stg.id = atl.statusid AND stg.deleted = 0 AND stg.visible = 1)
+                   JOIN {attendance_warning} n ON n.idnumber = a.id
+                   LEFT JOIN {attendance_warning_done} ns ON ns.notifyid = n.id AND ns.userid = atl.studentid
+                   JOIN (SELECT attendanceid, setnumber, MAX(grade) AS maxgrade
+                           FROM {attendance_statuses}
+                          WHERE deleted = 0
+                            AND visible = 1
+                         GROUP BY attendanceid, setnumber) stm
+                     ON (stm.setnumber = ats.statusset AND stm.attendanceid = ats.attendanceid)
+                  {$joingroup}
+                  WHERE 1 = 1 {$where}
+                GROUP BY uniqueid, a.id, a.name, a.course, c.fullname, atl.studentid, n.id, n.warningpercent,
+                         n.emailsubject, n.emailcontent, n.emailcontentformat, n.warnafter, n.maxwarn,
+                         n.emailuser, n.thirdpartyemails, cm.id, c.id, {$unames2}, ns.userid
+                HAVING n.warnafter <= COUNT(DISTINCT ats.id) AND n.warningpercent > ((SUM(stg.grade) / SUM(stm.maxgrade)) * 100)
+                {$having}
+                      {$orderby}";
+
+    if (!$allfornotify) {
+        $idfield = $DB->sql_concat('cmid', 'userid');
+        // Only show one record per attendance for teacher reports.
+        $sql = "SELECT DISTINCT {$idfield} as id, {$unames}, aid, cmid, courseid, aname, coursename, userid,
+                        numtakensessions, percent, MAX(timesent) as timesent
+              FROM ({$sql}) as m
+         GROUP BY id, aid, cmid, courseid, aname, userid, numtakensessions,
+                  percent, coursename, {$unames} {$orderby}";
+    }
+
+    return $DB->get_records_sql($sql, $params);
+
+}
+
+/**
+ * Template variables into place in supplied email content.
+ *
+ * @param object $record db record of details
+ * @return array - the content of the fields after templating.
+ */
+function attendance_template_variables($record) {
+    $templatevars = array(
+        '/%coursename%/' => $record->coursename,
+        '/%courseid%/' => $record->courseid,
+        '/%userfirstname%/' => $record->firstname,
+        '/%userlastname%/' => $record->lastname,
+        '/%userid%/' => $record->userid,
+        '/%warningpercent%/' => $record->warningpercent,
+        '/%attendancename%/' => $record->aname,
+        '/%cmid%/' => $record->cmid,
+        '/%numtakensessions%/' => $record->numtakensessions,
+        '/%points%/' => $record->points,
+        '/%maxpoints%/' => $record->maxpoints,
+        '/%percent%/' => $record->percent,
+    );
+    $extrauserfields = get_all_user_name_fields();
+    foreach ($extrauserfields as $extra) {
+        $templatevars['/%'.$extra.'%/'] = $record->$extra;
+    }
+    $patterns = array_keys($templatevars); // The placeholders which are to be replaced.
+    $replacements = array_values($templatevars); // The values which are to be templated in for the placeholders.
+    // Array to describe which fields in reengagement object should have a template replacement.
+    $replacementfields = array('emailsubject', 'emailcontent');
+
+    // Replace %variable% with relevant value everywhere it occurs in reengagement->field.
+    foreach ($replacementfields as $field) {
+        $record->$field = preg_replace($patterns, $replacements, $record->$field);
+    }
+    return $record;
+}
\ No newline at end of file
diff --git a/mod/attendance/manage.php b/mod/attendance/manage.php
new file mode 100644
index 0000000..c8b5514
--- /dev/null
+++ b/mod/attendance/manage.php
@@ -0,0 +1,99 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Manage attendance sessions
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+
+$pageparams = new mod_attendance_manage_page_params();
+
+$id                         = required_param('id', PARAM_INT);
+$from                       = optional_param('from', null, PARAM_ALPHANUMEXT);
+$pageparams->view           = optional_param('view', null, PARAM_INT);
+$pageparams->curdate        = optional_param('curdate', null, PARAM_INT);
+$pageparams->perpage        = get_config('attendance', 'resultsperpage');
+
+$cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att            = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+require_login($course, true, $cm);
+
+$context = context_module::instance($cm->id);
+$capabilities = array(
+    'mod/attendance:manageattendances',
+    'mod/attendance:takeattendances',
+    'mod/attendance:changeattendances'
+);
+if (!has_any_capability($capabilities, $context)) {
+    $url = new moodle_url('/mod/attendance/view.php', array('id' => $cm->id));
+    redirect($url);
+}
+
+$pageparams->init($cm);
+$att = new mod_attendance_structure($att, $cm, $course, $context, $pageparams);
+
+// If teacher is coming from block, then check for a session exists for today.
+if ($from === 'block') {
+    $sessions = $att->get_today_sessions();
+    $size = count($sessions);
+    if ($size == 1) {
+        $sess = reset($sessions);
+        $nottaken = !$sess->lasttaken && has_capability('mod/attendance:takeattendances', $context);
+        $canchange = $sess->lasttaken && has_capability('mod/attendance:changeattendances', $context);
+        if ($nottaken || $canchange) {
+            redirect($att->url_take(array('sessionid' => $sess->id, 'grouptype' => $sess->groupid)));
+        }
+    } else if ($size > 1) {
+        $att->curdate = $today;
+        // Temporarily set $view for single access to page from block.
+        $att->view = ATT_VIEW_DAYS;
+    }
+}
+
+$PAGE->set_url($att->url_manage());
+$PAGE->set_title($course->shortname. ": ".$att->name);
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add($att->name);
+
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att, attendance_tabs::TAB_SESSIONS);
+$filtercontrols = new attendance_filter_controls($att);
+$sesstable = new attendance_manage_data($att);
+
+
+$title = get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname);
+$header = new mod_attendance_header($att, $title);
+
+// Output starts here.
+
+echo $output->header();
+echo $output->render($header);
+mod_attendance_notifyqueue::show();
+echo $output->render($tabs);
+echo $output->render($filtercontrols);
+echo $output->render($sesstable);
+
+echo $output->footer();
+
diff --git a/mod/attendance/mod_form.php b/mod/attendance/mod_form.php
new file mode 100644
index 0000000..6d6b78d
--- /dev/null
+++ b/mod/attendance/mod_form.php
@@ -0,0 +1,76 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forms for updating/adding attendance
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->dirroot.'/course/moodleform_mod.php');
+
+/**
+ * class for displaying add/update form.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_mod_form extends moodleform_mod {
+
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+        $attendanceconfig = get_config('attendance');
+        if (!isset($attendanceconfig->subnet)) {
+            $attendanceconfig->subnet = '';
+        }
+        $mform    =& $this->_form;
+
+        $mform->addElement('header', 'general', get_string('general', 'form'));
+
+        $mform->addElement('text', 'name', get_string('name'), array('size' => '64'));
+        $mform->setType('name', PARAM_TEXT);
+        $mform->addRule('name', null, 'required', null, 'client');
+        $mform->setDefault('name', get_string('modulename', 'attendance'));
+
+        $this->standard_intro_elements();
+
+        // Grade settings.
+        $this->standard_grading_coursemodule_elements();
+
+        $this->standard_coursemodule_elements(true);
+
+        // IP address.
+        if (get_config('attendance', 'subnetactivitylevel')) {
+            $mform->addElement('header', 'security', get_string('extrarestrictions', 'attendance'));
+            $mform->addElement('text', 'subnet', get_string('defaultsubnet', 'attendance'), array('size' => '164'));
+            $mform->setType('subnet', PARAM_TEXT);
+            $mform->addHelpButton('subnet', 'defaultsubnet', 'attendance');
+            $mform->setDefault('subnet', $attendanceconfig->subnet);
+        } else {
+            $mform->addElement('hidden', 'subnet', '');
+            $mform->setType('subnet', PARAM_TEXT);
+        }
+
+        $this->add_action_buttons();
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/module.js b/mod/attendance/module.js
new file mode 100644
index 0000000..a2d51e8
--- /dev/null
+++ b/mod/attendance/module.js
@@ -0,0 +1,30 @@
+M.mod_attendance = {}; // eslint-disable-line camelcase
+
+M.mod_attendance.init_manage = function(Y) { // eslint-disable-line camelcase
+
+    Y.on('click', function(e) {
+        if (e.target.get('checked')) {
+            Y.all('input.attendancesesscheckbox').each(function() {
+                this.set('checked', 'checked');
+            });
+        } else {
+            Y.all('input.attendancesesscheckbox').each(function() {
+                this.set('checked', '');
+            });
+        }
+    }, '#cb_selector');
+};
+
+M.mod_attendance.set_preferences_action = function(action) { // eslint-disable-line camelcase
+    var item = document.getElementById('preferencesaction');
+    if (item) {
+        item.setAttribute('value', action);
+    } else {
+        item = document.getElementById('preferencesform');
+        var input = document.createElement("input");
+        input.setAttribute("type", "hidden");
+        input.setAttribute("name", "action");
+        input.setAttribute("value", action);
+        item.appendChild(input);
+    }
+};
\ No newline at end of file
diff --git a/mod/attendance/password.php b/mod/attendance/password.php
new file mode 100644
index 0000000..041d618
--- /dev/null
+++ b/mod/attendance/password.php
@@ -0,0 +1,51 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Displays help via AJAX call or in a new page
+ *
+ * Use {@link core_renderer::help_icon()} or {@link addHelpButton()} to display
+ * the help icon.
+ *
+ * @copyright 2002 onwards Martin Dougiamas
+ * @package   core
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+
+$session = required_param('session', PARAM_INT);
+$session = $DB->get_record('attendance_sessions', array('id' => $session), '*', MUST_EXIST);
+
+$cm = get_coursemodule_from_instance('attendance', $session->attendanceid);
+require_login($cm->course, $cm);
+
+$context = context_module::instance($cm->id);
+$capabilities = array('mod/attendance:manageattendances', 'mod/attendance:takeattendances', 'mod/attendance:changeattendances');
+if (!has_any_capability($capabilities, $context)) {
+    exit;
+}
+
+$PAGE->set_url('/mod/attendance/password.php');
+$PAGE->set_pagelayout('popup');
+
+$PAGE->set_context(context_system::instance());
+
+$PAGE->set_title(get_string('password', 'attendance'));
+
+echo $OUTPUT->header();
+echo html_writer::span($session->studentpassword, 'student-password');
+echo $OUTPUT->footer();
diff --git a/mod/attendance/password_ajax.php b/mod/attendance/password_ajax.php
new file mode 100644
index 0000000..4faf694
--- /dev/null
+++ b/mod/attendance/password_ajax.php
@@ -0,0 +1,50 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Displays help via AJAX call or in a new page
+ *
+ * Use {@link core_renderer::help_icon()} or {@link addHelpButton()} to display
+ * the help icon.
+ *
+ * @copyright 2002 onwards Martin Dougiamas
+ * @package   core
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+define('AJAX_SCRIPT', true);
+require_once(dirname(__FILE__).'/../../config.php');
+
+$session = required_param('session', PARAM_INT);
+$session = $DB->get_record('attendance_sessions', array('id' => $session), '*', MUST_EXIST);
+
+$cm = get_coursemodule_from_instance('attendance', $session->attendanceid);
+require_login($cm->course, $cm);
+
+$context = context_module::instance($cm->id);
+$capabilities = array('mod/attendance:manageattendances', 'mod/attendance:takeattendances', 'mod/attendance:changeattendances');
+if (!has_any_capability($capabilities, $context)) {
+    exit;
+}
+
+$PAGE->set_url('/mod/attendance/password.php');
+$PAGE->set_pagelayout('popup');
+
+$PAGE->set_context(context_system::instance());
+
+$data->heading = '';
+$data->text = html_writer::span($session->studentpassword, 'student-password');
+
+echo json_encode($data);
diff --git a/mod/attendance/pix/ghost.png b/mod/attendance/pix/ghost.png
new file mode 100644
index 0000000000000000000000000000000000000000..b199efa48aee951d390b92d90730c748d6d893f3
GIT binary patch
literal 48062
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
Z{~trw!<*0$T?YUF002ovPDHLkV1l(d-0}bb

literal 0
HcmV?d00001

diff --git a/mod/attendance/pix/icon.gif b/mod/attendance/pix/icon.gif
new file mode 100644
index 0000000000000000000000000000000000000000..5157566d1f8d9b5145bc8d0bb5ed8486fccacdd0
GIT binary patch
literal 125
zcmZ?wbhEHb6krfwSj52a|Nnmm28JCwcAS}+R#a33WJ7@BPZmZHO9w=N)G{zTaR{vW
zr`IF7VCt5eC!Vc{R^Yg?-1YH^DGQWVt=hh;VAm;cUm=#=YqaF@zg4id=m!;=`mEIR
UP47Njpk;2U`E7fW3Il^R0Fp&2zW@LL

literal 0
HcmV?d00001

diff --git a/mod/attendance/pix/icon.svg b/mod/attendance/pix/icon.svg
new file mode 100644
index 0000000..8c58a21
--- /dev/null
+++ b/mod/attendance/pix/icon.svg
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
+<svg version="1.1"
+	 id="svg2" sodipodi:docname="Group_Choice.svg" inkscape:version="0.48.4 r9939" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/"
+	 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="24px" height="24px"
+	 viewBox="0 0 24 24" enable-background="new 0 0 24 24" xml:space="preserve">
+<sodipodi:namedview  bordercolor="#666666" borderopacity="1" id="namedview73" inkscape:window-width="1440" objecttolerance="10" gridtolerance="10" guidetolerance="10" pagecolor="#ffffff" inkscape:pageopacity="0" inkscape:pageshadow="2" inkscape:window-height="878" showgrid="false" inkscape:zoom="9.8333333" inkscape:cx="-4.1694915" inkscape:cy="12" inkscape:window-x="-8" inkscape:window-y="-8" inkscape:window-maximized="1" inkscape:current-layer="svg2">
+	</sodipodi:namedview>
+<g>
+	
+		<linearGradient id="path32_3_" gradientUnits="userSpaceOnUse" x1="-19.9995" y1="-817" x2="-19.9995" y2="-833.0005" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#90C50E"/>
+		<stop  offset="1" style="stop-color:#70A034"/>
+	</linearGradient>
+	<path id="path32_1_" fill="url(#path32_3_)" d="M11,16v-3.4l-3-1.5c-0.5-0.3-0.6-0.8-0.301-1.199c0,0,1.6-2,1.6-4.2
+		C9.299,2.5,7.4,0,4.9,0C2.5,0,0.5,2.6,0.5,5.7c0,2.1,1.6,4.2,1.6,4.2c0.301,0.399,0.199,1-0.301,1.3L0,12.444c0,0,0,2.955,0,3.556
+		H11z"/>
+	
+		<linearGradient id="path39_3_" gradientUnits="userSpaceOnUse" x1="-19.9995" y1="-818" x2="-19.9995" y2="-832.0147" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#D9F991"/>
+		<stop  offset="1" style="stop-color:#B1DD4B"/>
+	</linearGradient>
+	<path id="path39_1_" fill="url(#path39_3_)" d="M0.9,13l1.6-1c0.5-0.3,0.799-0.7,1-1.2c0.1-0.5,0-1.1-0.4-1.5c0,0-1.4-1.8-1.4-3.6
+		C1.7,3.1,3.2,1,5.1,1s3.4,2.1,3.4,4.7c0,1.8-1.4,3.6-1.4,3.6c-0.301,0.4-0.5,1-0.4,1.5c0.1,0.5,0.5,1,1,1.2l2.4,1.201V15H0.9V13z"
+		/>
+	
+		<linearGradient id="path46_3_" gradientUnits="userSpaceOnUse" x1="-20.5005" y1="-818.9863" x2="-20.5005" y2="-831.0005" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#B3E73A"/>
+		<stop  offset="1" style="stop-color:#90C61D"/>
+	</linearGradient>
+	<path id="path46_1_" fill="url(#path46_3_)" d="M0.9,14L3,12.9C3.799,12.5,4.299,11.8,4.5,11c0.199-0.8,0-1.7-0.6-2.3
+		c-0.301-0.4-1.201-1.8-1.201-3c0-2,1.1-3.7,2.4-3.7c1.3,0,2.4,1.7,2.4,3.7c0,1.2-0.9,2.5-1.201,3c-0.5,0.7-0.699,1.5-0.6,2.3
+		c0.201,0.8,0.701,1.5,1.5,1.9l1.9,1V14H0.9z"/>
+</g>
+<g>
+	
+		<linearGradient id="path11_1_" gradientUnits="userSpaceOnUse" x1="-1157.0952" y1="-819.666" x2="-1157.0952" y2="-835.6655" gradientTransform="matrix(-1 0 0 -1 -1149.5 -817)">
+		<stop  offset="0" style="stop-color:#DB6D17"/>
+		<stop  offset="1" style="stop-color:#BF3B08"/>
+	</linearGradient>
+	<path id="path11" fill="url(#path11_1_)" d="M12.05,12.566c0,0,1.601-2.101,1.601-4.2c0-3.1-2-5.7-4.398-5.7s-4.4,2.5-4.3,5.6
+		c0,2.2,1.6,4.2,1.6,4.2c0.3,0.401,0.2,0.901-0.3,1.2l-6,3.1c-0.5,0.301-0.252,1.9-0.252,1.9h15.252v-3.199l-3-1.6
+		C11.75,13.566,11.65,12.967,12.05,12.566z"/>
+	
+		<linearGradient id="path18_1_" gradientUnits="userSpaceOnUse" x1="-1157.0005" y1="-820.667" x2="-1157.0005" y2="-834.6655" gradientTransform="matrix(-1 0 0 -1 -1149.5 -817)">
+		<stop  offset="0" style="stop-color:#F6A55E"/>
+		<stop  offset="1" style="stop-color:#EA5B03"/>
+	</linearGradient>
+	<path id="path18" fill="url(#path18_1_)" d="M0.75,17.666l5.9-3c0.5-0.199,0.9-0.699,1-1.199s-0.1-1.1-0.4-1.5
+		c0-0.1-1.4-1.899-1.4-3.6c0-2.6,1.6-4.7,3.4-4.7s3.4,2.1,3.3,4.7c0,1.8-1.4,3.6-1.4,3.6c-0.4,0.4-0.5,1-0.4,1.5
+		c0.2,0.5,0.5,0.9,1,1.199l2.5,1.301v1.699H0.75z"/>
+	
+		<linearGradient id="path25_1_" gradientUnits="userSpaceOnUse" x1="-1158.5503" y1="-821.6523" x2="-1158.5503" y2="-833.6642" gradientTransform="matrix(-1 0 0 -1 -1149.5 -817)">
+		<stop  offset="0" style="stop-color:#F17219"/>
+		<stop  offset="1" style="stop-color:#EA5B03"/>
+	</linearGradient>
+	<path id="path25" fill="url(#path25_1_)" d="M4.85,16.666l2.2-1.1c0.8-0.4,1.3-1.102,1.5-1.9c0.2-0.799,0-1.6-0.5-2.299
+		c-0.3-0.5-1.2-1.9-1.2-3c0-2,1.1-3.7,2.4-3.7s2.4,1.7,2.4,3.7c0,1.2-0.9,2.6-1.2,3c-0.6,0.6-0.8,1.5-0.6,2.299
+		c0.2,0.801,0.7,1.5,1.5,1.9l1.9,1.1l0,0H4.85z"/>
+</g>
+<g>
+	
+		<linearGradient id="path32_4_" gradientUnits="userSpaceOnUse" x1="-14.3999" y1="-822" x2="-14.3999" y2="-838.0005" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#90C50E"/>
+		<stop  offset="1" style="stop-color:#70A034"/>
+	</linearGradient>
+	<path id="path32_2_" fill="url(#path32_4_)" d="M19.199,21v-3.4l-3-1.5c-0.5-0.299-0.6-0.799-0.301-1.199c0,0,1.601-2,1.601-4.198
+		C17.499,7.5,15.6,5,13.1,5C10.7,5,8.7,7.6,8.7,10.7c0,2.1,1.6,4.2,1.6,4.2c0.301,0.398,0.2,1-0.3,1.301L4,19.4
+		c-0.5,0.301-1,0.898-1,1.5V21H19.199z"/>
+	
+		<linearGradient id="path39_4_" gradientUnits="userSpaceOnUse" x1="-13.8511" y1="-823.001" x2="-13.8511" y2="-837.0157" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#D9F991"/>
+		<stop  offset="1" style="stop-color:#B1DD4B"/>
+	</linearGradient>
+	<path id="path39_2_" fill="url(#path39_4_)" d="M4.999,20l5.7-3c0.5-0.299,0.8-0.699,1-1.199c0.1-0.5,0-1.1-0.4-1.5
+		c0,0-1.399-1.801-1.399-3.6c0-2.6,1.5-4.7,3.399-4.7c1.9,0,3.4,2.101,3.4,4.7c0,1.799-1.4,3.6-1.4,3.6c-0.3,0.4-0.5,1-0.398,1.5
+		c0.101,0.5,0.5,1,1,1.199l2.398,1.201V20H4.999z"/>
+	
+		<linearGradient id="path46_4_" gradientUnits="userSpaceOnUse" x1="-12.3013" y1="-823.9863" x2="-12.3013" y2="-836.001" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#B3E73A"/>
+		<stop  offset="1" style="stop-color:#90C61D"/>
+	</linearGradient>
+	<path id="path46_2_" fill="url(#path46_4_)" d="M9.1,19l2.1-1.1c0.8-0.4,1.3-1.102,1.5-1.9s0-1.699-0.6-2.299
+		c-0.301-0.4-1.2-1.801-1.2-3c0-2,1.1-3.7,2.399-3.7c1.301,0,2.4,1.7,2.4,3.7c0,1.199-0.9,2.5-1.2,3c-0.5,0.699-0.7,1.5-0.601,2.299
+		c0.201,0.801,0.701,1.5,1.5,1.9l1.898,1V19H9.1z"/>
+</g>
+<g>
+	
+		<linearGradient id="path32_5_" gradientUnits="userSpaceOnUse" x1="-9.6001" y1="-825" x2="-9.6001" y2="-841.0005" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#90C50E"/>
+		<stop  offset="1" style="stop-color:#70A034"/>
+	</linearGradient>
+	<path id="path32" fill="url(#path32_5_)" d="M24,24v-3.4l-3-1.5c-0.5-0.3-0.6-0.8-0.3-1.199c0,0,1.6-2,1.6-4.198
+		C22.3,10.5,20.4,8,17.9,8c-2.4,0-4.4,2.6-4.4,5.7c0,2.1,1.6,4.2,1.6,4.2c0.301,0.397,0.2,1-0.3,1.3l-6,3.2c-0.5,0.3-1,0.897-1,1.5
+		V24H24z"/>
+	
+		<linearGradient id="path39_5_" gradientUnits="userSpaceOnUse" x1="-9.0503" y1="-826" x2="-9.0503" y2="-840.0152" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#D9F991"/>
+		<stop  offset="1" style="stop-color:#B1DD4B"/>
+	</linearGradient>
+	<path id="path39" fill="url(#path39_5_)" d="M9.8,23l5.7-3c0.5-0.3,0.8-0.7,1-1.2c0.1-0.5,0-1.1-0.4-1.5c0,0-1.397-1.8-1.397-3.6
+		c0-2.6,1.5-4.7,3.397-4.7c1.9,0,3.4,2.1,3.4,4.7c0,1.8-1.4,3.6-1.4,3.6c-0.3,0.4-0.5,1-0.397,1.5c0.1,0.5,0.5,1,1,1.2l2.397,1.2V23
+		H9.8z"/>
+	
+		<linearGradient id="path46_5_" gradientUnits="userSpaceOnUse" x1="-7.502" y1="-826.9863" x2="-7.502" y2="-839.0015" gradientTransform="matrix(1 0 0 -1 25.5 -817)">
+		<stop  offset="0" style="stop-color:#B3E73A"/>
+		<stop  offset="1" style="stop-color:#90C61D"/>
+	</linearGradient>
+	<path id="path46" fill="url(#path46_5_)" d="M13.9,22l2.1-1.1c0.8-0.4,1.3-1.103,1.5-1.9s0-1.7-0.6-2.3c-0.301-0.4-1.2-1.8-1.2-3
+		c0-2,1.1-3.7,2.399-3.7c1.301,0,2.398,1.7,2.398,3.7c0,1.2-0.898,2.5-1.2,3c-0.5,0.7-0.698,1.5-0.6,2.3
+		c0.198,0.8,0.698,1.5,1.5,1.9l1.897,1V22H13.9z"/>
+</g>
+</svg>
diff --git a/mod/attendance/pix/key.svg b/mod/attendance/pix/key.svg
new file mode 100644
index 0000000..0d3f3d9
--- /dev/null
+++ b/mod/attendance/pix/key.svg
@@ -0,0 +1 @@
+<svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M832 512q0-80-56-136t-136-56-136 56-56 136q0 42 19 83-41-19-83-19-80 0-136 56t-56 136 56 136 136 56 136-56 56-136q0-42-19-83 41 19 83 19 80 0 136-56t56-136zm851 704q0 17-49 66t-66 49q-9 0-28.5-16t-36.5-33-38.5-40-24.5-26l-96 96 220 220q28 28 28 68 0 42-39 81t-81 39q-40 0-68-28l-671-671q-176 131-365 131-163 0-265.5-102.5t-102.5-265.5q0-160 95-313t248-248 313-95q163 0 265.5 102.5t102.5 265.5q0 189-131 365l355 355 96-96q-3-3-26-24.5t-40-38.5-33-36.5-16-28.5q0-17 49-66t66-49q13 0 23 10 6 6 46 44.5t82 79.5 86.5 86 73 78 28.5 41z"/></svg>
\ No newline at end of file
diff --git a/mod/attendance/pix/redo.png b/mod/attendance/pix/redo.png
new file mode 100644
index 0000000000000000000000000000000000000000..480a3291a53c258f994a37fd6a8c424a0aa48de5
GIT binary patch
literal 524
zcmV+n0`vWeP)<h;3K|Lk000e1NJLTq000XB000XJ1^@s6sjPP<0000PbVXQnQ*UN;
zcVTj606}DLVr3vnZDD6+Qe|Oed2z{QJOBUzu1Q2eRCwBakV{A#VHAbW{PRzeiOD3f
z8HgI&8bli-1RE;2unR@#q99^*Q#aycC)BMg7w)9nQUnp9h%1FcKx{WfuvlrKAc9gw
zYJA{i(3r_&l6iF^>B27hEe;p%xtDtn3x`OGgYb|==d>3}#)2wYXdA<)>kNKbDl(`-
z?$id#iVaQGk(@FZPcvv;)ZaC^9RCafiF;<70r+~O#p~i1>Vl8<hUTIt?a3zcJlX9X
zdG~me_z<i3n2I#?kgk_+o_uVNbc6$L5qu2?O}~Yz<=_%E>>Tdgd>FrYL7kqE>K7N2
zjZedVHh_Y80r@tIf|W(t%)_ndco5fv?jT~6^P{sV9*(PJ3Fpi=<RQUe^Pr}MfJh)S
zHdY7CxAG6HQ5TPBnUio-IK{zk>Ew6=>$x-I_t1OKY~&dUEcF)W&$lt-Tx%fILWf7c
zaQ5ppz9>X|1JyUUS7}a8jIb+CP5-7rHHrMpoe@(A@djsO3sAriu<0><qIij~cN?p)
zhGxpeD;L{3;Omo)wBzhS>ARD=WhmH3W%6Gb&{{F!p7KS}hyU<LfB^vga+d3nbn&YI
O0000<MNUMnLSTY)Uhang

literal 0
HcmV?d00001

diff --git a/mod/attendance/preferences.php b/mod/attendance/preferences.php
new file mode 100644
index 0000000..776de7e
--- /dev/null
+++ b/mod/attendance/preferences.php
@@ -0,0 +1,166 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Manage attendance settings
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+
+$pageparams = new mod_attendance_preferences_page_params();
+
+$id                         = required_param('id', PARAM_INT);
+$pageparams->action         = optional_param('action', null, PARAM_INT);
+$pageparams->statusid       = optional_param('statusid', null, PARAM_INT);
+$pageparams->statusset      = optional_param('statusset', 0, PARAM_INT); // Set of statuses to view.
+
+$cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att            = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+require_login($course, true, $cm);
+
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:changepreferences', $context);
+
+// Make sure the statusset is valid.
+$maxstatusset = attendance_get_max_statusset($att->id);
+if ($pageparams->statusset > $maxstatusset + 1) {
+    $pageparams->statusset = $maxstatusset + 1;
+}
+
+$att = new mod_attendance_structure($att, $cm, $course, $context, $pageparams);
+
+$PAGE->set_url($att->url_preferences());
+$PAGE->set_title($course->shortname. ": ".$att->name.' - '.get_string('settings', 'attendance'));
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add(get_string('settings', 'attendance'));
+
+$errors = array();
+
+// Check sesskey if we are performing an action.
+if (!empty($att->pageparams->action)) {
+    require_sesskey();
+}
+
+// TODO: combine this with the stuff in defaultstatus.php to avoid code duplication.
+switch ($att->pageparams->action) {
+    case mod_attendance_preferences_page_params::ACTION_ADD:
+        $newacronym         = optional_param('newacronym', null, PARAM_TEXT);
+        $newdescription     = optional_param('newdescription', null, PARAM_TEXT);
+        $newgrade           = optional_param('newgrade', 0, PARAM_RAW);
+        $newstudentavailability = optional_param('newstudentavailability', null, PARAM_INT);
+        $newgrade = unformat_float($newgrade);
+
+        $newstatus = new stdClass();
+        $newstatus->attendanceid = $att->id;
+        $newstatus->acronym = $newacronym;
+        $newstatus->description = $newdescription;
+        $newstatus->grade = $newgrade;
+        $newstatus->studentavailability = $newstudentavailability;
+        $newstatus->setnumber = $att->pageparams->statusset;
+        $newstatus->cm = $att->cm;
+        $newstatus->context = $att->context;
+
+        $status = attendance_add_status($newstatus);
+        if (!$status) {
+            print_error('cantaddstatus', 'attendance', $this->url_preferences());
+        }
+
+        if ($pageparams->statusset > $maxstatusset) {
+            $maxstatusset = $pageparams->statusset; // Make sure the new maximum is shown without a page refresh.
+        }
+        break;
+    case mod_attendance_preferences_page_params::ACTION_DELETE:
+        if (attendance_has_logs_for_status($att->pageparams->statusid)) {
+            print_error('cantdeletestatus', 'attendance', "attsettings.php?id=$id");
+        }
+
+        $confirm    = optional_param('confirm', null, PARAM_INT);
+        $statuses = $att->get_statuses(false);
+        $status = $statuses[$att->pageparams->statusid];
+
+        if (isset($confirm)) {
+            attendance_remove_status($status);
+            redirect($att->url_preferences(), get_string('statusdeleted', 'attendance'));
+        }
+
+        $message = get_string('deletecheckfull', '', get_string('variable', 'attendance'));
+        $message .= str_repeat(html_writer::empty_tag('br'), 2);
+        $message .= $status->acronym.': '.
+                    ($status->description ? $status->description : get_string('nodescription', 'attendance'));
+        $params = array_merge($att->pageparams->get_significant_params(), array('confirm' => 1));
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+        echo $OUTPUT->confirm($message, $att->url_preferences($params), $att->url_preferences());
+        echo $OUTPUT->footer();
+        exit;
+    case mod_attendance_preferences_page_params::ACTION_HIDE:
+        $statuses = $att->get_statuses(false);
+        $status = $statuses[$att->pageparams->statusid];
+        attendance_update_status($status, null, null, null, 0, $att->context, $att->cm);
+        break;
+    case mod_attendance_preferences_page_params::ACTION_SHOW:
+        $statuses = $att->get_statuses(false);
+        $status = $statuses[$att->pageparams->statusid];
+        attendance_update_status($status, null, null, null, 1, $att->context, $att->cm);
+        break;
+    case mod_attendance_preferences_page_params::ACTION_SAVE:
+        $acronym        = required_param_array('acronym', PARAM_TEXT);
+        $description    = required_param_array('description', PARAM_TEXT);
+        $grade          = required_param_array('grade', PARAM_RAW);
+        $studentavailability = optional_param_array('studentavailability', null, PARAM_RAW);
+        $unmarkedstatus = optional_param('setunmarked', null, PARAM_INT);
+
+        foreach ($grade as &$val) {
+            $val = unformat_float($val);
+        }
+        $statuses = $att->get_statuses(false);
+
+        foreach ($acronym as $id => $v) {
+            $status = $statuses[$id];
+            $setunmarked = false;
+            if ($unmarkedstatus == $id) {
+                $setunmarked = true;
+            }
+            $errors[$id] = attendance_update_status($status, $acronym[$id], $description[$id], $grade[$id],
+                                                    null, $att->context, $att->cm, $studentavailability[$id], $setunmarked);
+        }
+        attendance_update_users_grade($att);
+        break;
+}
+
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att, attendance_tabs::TAB_PREFERENCES);
+$prefdata = new attendance_preferences_data($att, array_filter($errors));
+$setselector = new attendance_set_selector($att, $maxstatusset);
+
+// Output starts here.
+
+echo $output->header();
+echo $output->heading(get_string('attendanceforthecourse', 'attendance').' :: '. format_string($course->fullname));
+echo $output->render($tabs);
+echo $OUTPUT->box(get_string('preferences_desc', 'attendance'), 'generalbox attendancedesc', 'notice');
+echo $output->render($setselector);
+echo $output->render($prefdata);
+
+echo $output->footer();
diff --git a/mod/attendance/renderables.php b/mod/attendance/renderables.php
new file mode 100644
index 0000000..0b546e0
--- /dev/null
+++ b/mod/attendance/renderables.php
@@ -0,0 +1,869 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance module renderable components are defined here
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/locallib.php');
+
+
+/**
+ * Represents info about attendance tabs.
+ *
+ * Proxy class for security reasons (renderers must not have access to all attendance methods)
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ *
+ */
+class attendance_tabs implements renderable {
+    /** Sessions tab */
+    const TAB_SESSIONS      = 1;
+    /** Add tab */
+    const TAB_ADD           = 2;
+    /** Rerort tab */
+    const TAB_REPORT        = 3;
+    /** Export tab */
+    const TAB_EXPORT        = 4;
+    /** Preferences tab */
+    const TAB_PREFERENCES   = 5;
+    /** Temp users tab */
+    const TAB_TEMPORARYUSERS = 6; // Tab for managing temporary users.
+    /** Update tab */
+    const TAB_UPDATE        = 7;
+    /** Warnings tab */
+    const TAB_WARNINGS = 8;
+    /** Absentee tab */
+    const TAB_ABSENTEE      = 9;
+    /** @var int current tab */
+    public $currenttab;
+
+    /** @var stdClass attendance */
+    private $att;
+
+    /**
+     * Prepare info about sessions for attendance taking into account view parameters.
+     *
+     * @param mod_attendance_structure $att
+     * @param int $currenttab - one of attendance_tabs constants
+     */
+    public function  __construct(mod_attendance_structure $att, $currenttab=null) {
+        $this->att = $att;
+        $this->currenttab = $currenttab;
+    }
+
+    /**
+     * Return array of rows where each row is an array of tab objects
+     * taking into account permissions of current user
+     */
+    public function get_tabs() {
+        $toprow = array();
+        $context = $this->att->context;
+        $capabilities = array(
+            'mod/attendance:manageattendances',
+            'mod/attendance:takeattendances',
+            'mod/attendance:changeattendances'
+        );
+        if (has_any_capability($capabilities, $context)) {
+            $toprow[] = new tabobject(self::TAB_SESSIONS, $this->att->url_manage()->out(),
+                            get_string('sessions', 'attendance'));
+        }
+
+        if (has_capability('mod/attendance:manageattendances', $context)) {
+            $toprow[] = new tabobject(self::TAB_ADD,
+                            $this->att->url_sessions()->out(true,
+                                array('action' => mod_attendance_sessions_page_params::ACTION_ADD)),
+                                get_string('addsession', 'attendance'));
+        }
+        if (has_capability('mod/attendance:viewreports', $context)) {
+            $toprow[] = new tabobject(self::TAB_REPORT, $this->att->url_report()->out(),
+                            get_string('report', 'attendance'));
+        }
+
+        if (has_capability('mod/attendance:viewreports', $context) &&
+            get_config('attendance', 'enablewarnings')) {
+            $toprow[] = new tabobject(self::TAB_ABSENTEE, $this->att->url_absentee()->out(),
+                get_string('absenteereport', 'attendance'));
+        }
+
+        if (has_capability('mod/attendance:export', $context)) {
+            $toprow[] = new tabobject(self::TAB_EXPORT, $this->att->url_export()->out(),
+                            get_string('export', 'attendance'));
+        }
+
+        if (has_capability('mod/attendance:changepreferences', $context)) {
+            $toprow[] = new tabobject(self::TAB_PREFERENCES, $this->att->url_preferences()->out(),
+                            get_string('statussetsettings', 'attendance'));
+
+            if (get_config('attendance', 'enablewarnings')) {
+                $toprow[] = new tabobject(self::TAB_WARNINGS, $this->att->url_warnings()->out(),
+                    get_string('warnings', 'attendance'));
+            }
+        }
+        if (has_capability('mod/attendance:managetemporaryusers', $context)) {
+            $toprow[] = new tabobject(self::TAB_TEMPORARYUSERS, $this->att->url_managetemp()->out(),
+                            get_string('tempusers', 'attendance'));
+        }
+        if ($this->currenttab == self::TAB_UPDATE && has_capability('mod/attendance:manageattendances', $context)) {
+            $toprow[] = new tabobject(self::TAB_UPDATE,
+                            $this->att->url_sessions()->out(true,
+                                array('action' => mod_attendance_sessions_page_params::ACTION_UPDATE)),
+                                get_string('changesession', 'attendance'));
+        }
+
+        return array($toprow);
+    }
+}
+
+/**
+ * Class attendance_filter_controls
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_filter_controls implements renderable {
+    /** @var int current view mode */
+    public $pageparams;
+    /** @var stdclass  */
+    public $cm;
+    /** @var int  */
+    public $curdate;
+    /** @var int  */
+    public $prevcur;
+    /** @var int  */
+    public $nextcur;
+    /** @var string  */
+    public $curdatetxt;
+    /** @var boolean  */
+    public $reportcontrol;
+    /** @var string  */
+    private $urlpath;
+    /** @var array  */
+    private $urlparams;
+    /** @var mod_attendance_structure */
+    public $att;
+
+    /**
+     * attendance_filter_controls constructor.
+     * @param mod_attendance_structure $att
+     * @param bool $report
+     */
+    public function __construct(mod_attendance_structure $att, $report = false) {
+        global $PAGE;
+
+        $this->pageparams = $att->pageparams;
+
+        $this->cm = $att->cm;
+
+        // This is a report control only if $reports is true and the attendance block can be graded.
+        $this->reportcontrol = $report;
+
+        $this->curdate = $att->pageparams->curdate;
+
+        $date = usergetdate($att->pageparams->curdate);
+        $mday = $date['mday'];
+        $mon = $date['mon'];
+        $year = $date['year'];
+
+        switch ($this->pageparams->view) {
+            case ATT_VIEW_DAYS:
+                $format = get_string('strftimedm', 'attendance');
+                $this->prevcur = make_timestamp($year, $mon, $mday - 1);
+                $this->nextcur = make_timestamp($year, $mon, $mday + 1);
+                $this->curdatetxt = userdate($att->pageparams->startdate, $format);
+                break;
+            case ATT_VIEW_WEEKS:
+                $format = get_string('strftimedm', 'attendance');
+                $this->prevcur = $att->pageparams->startdate - WEEKSECS;
+                $this->nextcur = $att->pageparams->startdate + WEEKSECS;
+                $this->curdatetxt = userdate($att->pageparams->startdate, $format).
+                                    " - ".userdate($att->pageparams->enddate, $format);
+                break;
+            case ATT_VIEW_MONTHS:
+                $format = '%B';
+                $this->prevcur = make_timestamp($year, $mon - 1);
+                $this->nextcur = make_timestamp($year, $mon + 1);
+                $this->curdatetxt = userdate($att->pageparams->startdate, $format);
+                break;
+        }
+
+        $this->urlpath = $PAGE->url->out_omit_querystring();
+        $params = $att->pageparams->get_significant_params();
+        $params['id'] = $att->cm->id;
+        $this->urlparams = $params;
+
+        $this->att = $att;
+    }
+
+    /**
+     * Helper function for url.
+     *
+     * @param array $params
+     * @return moodle_url
+     */
+    public function url($params=array()) {
+        $params = array_merge($this->urlparams, $params);
+
+        return new moodle_url($this->urlpath, $params);
+    }
+
+    /**
+     * Helper function for url path.
+     * @return string
+     */
+    public function url_path() {
+        return $this->urlpath;
+    }
+
+    /**
+     * Helper function for url_params.
+     * @param array $params
+     * @return array
+     */
+    public function url_params($params=array()) {
+        $params = array_merge($this->urlparams, $params);
+
+        return $params;
+    }
+
+    /**
+     * Return groupmode.
+     * @return int
+     */
+    public function get_group_mode() {
+        return $this->att->get_group_mode();
+    }
+
+    /**
+     * Return groupslist.
+     * @return mixed
+     */
+    public function get_sess_groups_list() {
+        return $this->att->pageparams->get_sess_groups_list();
+    }
+
+    /**
+     * Get current session type.
+     * @return mixed
+     */
+    public function get_current_sesstype() {
+        return $this->att->pageparams->get_current_sesstype();
+    }
+}
+
+/**
+ * Represents info about attendance sessions taking into account view parameters.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_manage_data implements renderable {
+    /** @var array of sessions*/
+    public $sessions;
+
+    /** @var int number of hidden sessions (sessions before $course->startdate)*/
+    public $hiddensessionscount;
+    /** @var array  */
+    public $groups;
+    /** @var  int */
+    public $hiddensesscount;
+
+    /** @var mod_attendance_structure */
+    public $att;
+    /**
+     * Prepare info about attendance sessions taking into account view parameters.
+     *
+     * @param mod_attendance_structure $att instance
+     */
+    public function __construct(mod_attendance_structure $att) {
+
+        $this->sessions = $att->get_filtered_sessions();
+
+        $this->groups = groups_get_all_groups($att->course->id);
+
+        $this->hiddensessionscount = $att->get_hidden_sessions_count();
+
+        $this->att = $att;
+    }
+
+    /**
+     * Helper function to return urls.
+     * @param int $sessionid
+     * @param int $grouptype
+     * @return mixed
+     */
+    public function url_take($sessionid, $grouptype) {
+        return url_helpers::url_take($this->att, $sessionid, $grouptype);
+    }
+
+    /**
+     * Must be called without or with both parameters
+     *
+     * @param int $sessionid
+     * @param null $action
+     * @return mixed
+     */
+    public function url_sessions($sessionid=null, $action=null) {
+        return url_helpers::url_sessions($this->att, $sessionid, $action);
+    }
+}
+
+/**
+ * class take data.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_take_data implements renderable {
+    /** @var array  */
+    public $users;
+    /** @var array|null|stdClass  */
+    public $pageparams;
+    /** @var int  */
+    public $groupmode;
+    /** @var stdclass  */
+    public $cm;
+    /** @var array  */
+    public $statuses;
+    /** @var mixed  */
+    public $sessioninfo;
+    /** @var array  */
+    public $sessionlog;
+    /** @var array  */
+    public $sessions4copy;
+    /** @var bool  */
+    public $updatemode;
+    /** @var string  */
+    private $urlpath;
+    /** @var array */
+    private $urlparams;
+    /** @var mod_attendance_structure  */
+    public $att;
+
+    /**
+     * attendance_take_data constructor.
+     * @param mod_attendance_structure $att
+     */
+    public function  __construct(mod_attendance_structure $att) {
+        if ($att->pageparams->grouptype) {
+            $this->users = $att->get_users($att->pageparams->grouptype, $att->pageparams->page);
+        } else {
+            $this->users = $att->get_users($att->pageparams->group, $att->pageparams->page);
+        }
+
+        $this->pageparams = $att->pageparams;
+
+        $this->groupmode = $att->get_group_mode();
+        $this->cm = $att->cm;
+
+        $this->statuses = $att->get_statuses();
+
+        $this->sessioninfo = $att->get_session_info($att->pageparams->sessionid);
+        $this->updatemode = $this->sessioninfo->lasttaken > 0;
+
+        if (isset($att->pageparams->copyfrom)) {
+            $this->sessionlog = $att->get_session_log($att->pageparams->copyfrom);
+        } else if ($this->updatemode) {
+            $this->sessionlog = $att->get_session_log($att->pageparams->sessionid);
+        } else {
+            $this->sessionlog = array();
+        }
+
+        if (!$this->updatemode) {
+            $this->sessions4copy = $att->get_today_sessions_for_copy($this->sessioninfo);
+        }
+
+        $this->urlpath = $att->url_take()->out_omit_querystring();
+        $params = $att->pageparams->get_significant_params();
+        $params['id'] = $att->cm->id;
+        $this->urlparams = $params;
+
+        $this->att = $att;
+    }
+
+    /**
+     * Url function
+     * @param array $params
+     * @param array $excludeparams
+     * @return moodle_url
+     */
+    public function url($params=array(), $excludeparams=array()) {
+        $params = array_merge($this->urlparams, $params);
+
+        foreach ($excludeparams as $paramkey) {
+            unset($params[$paramkey]);
+        }
+
+        return new moodle_url($this->urlpath, $params);
+    }
+
+    /**
+     * Url view helper.
+     * @param array $params
+     * @return mixed
+     */
+    public function url_view($params=array()) {
+        return url_helpers::url_view($this->att, $params);
+    }
+
+    /**
+     * Url path helper.
+     * @return string
+     */
+    public function url_path() {
+        return $this->urlpath;
+    }
+}
+
+/**
+ * Class user data.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_user_data implements renderable {
+    /** @var mixed|object  */
+    public $user;
+    /** @var array|null|stdClass  */
+    public $pageparams;
+    /** @var array  */
+    public $statuses;
+    /** @var array  */
+    public $summary;
+    /** @var attendance_filter_controls  */
+    public $filtercontrols;
+    /** @var array  */
+    public $sessionslog;
+    /** @var array  */
+    public $groups;
+    /** @var array  */
+    public $coursesatts;
+    /** @var string  */
+    private $urlpath;
+    /** @var array */
+    private $urlparams;
+
+    /**
+     * attendance_user_data constructor.
+     * @param mod_attendance_structure $att
+     * @param int $userid
+     */
+    public function  __construct(mod_attendance_structure $att, $userid) {
+        $this->user = $att->get_user($userid);
+
+        $this->pageparams = $att->pageparams;
+
+        if ($this->pageparams->mode == mod_attendance_view_page_params::MODE_THIS_COURSE) {
+            $this->statuses = $att->get_statuses(true, true);
+
+            $this->summary = new mod_attendance_summary($att->id, array($userid), $att->pageparams->startdate,
+                                                        $att->pageparams->enddate);
+
+            $this->filtercontrols = new attendance_filter_controls($att);
+
+            $this->sessionslog = $att->get_user_filtered_sessions_log_extended($userid);
+
+            $this->groups = groups_get_all_groups($att->course->id);
+        } else {
+            $this->coursesatts = attendance_get_user_courses_attendances($userid);
+            $this->statuses = array();
+            $this->summary = array();
+            foreach ($this->coursesatts as $atid => $ca) {
+                // Check to make sure the user can view this cm.
+                $modinfo = get_fast_modinfo($ca->courseid);
+                if (!$modinfo->instances['attendance'][$ca->attid]->uservisible) {
+                    unset($this->coursesatts[$atid]);
+                    continue;
+                } else {
+                    $this->coursesatts[$atid]->cmid = $modinfo->instances['attendance'][$ca->attid]->get_course_module_record()->id;
+                }
+                $this->statuses[$ca->attid] = attendance_get_statuses($ca->attid);
+                $this->summary[$ca->attid] = new mod_attendance_summary($ca->attid, array($userid));
+            }
+        }
+        $this->urlpath = $att->url_view()->out_omit_querystring();
+        $params = $att->pageparams->get_significant_params();
+        $params['id'] = $att->cm->id;
+        $this->urlparams = $params;
+    }
+
+    /**
+     * url helper.
+     * @return moodle_url
+     */
+    public function url() {
+        return new moodle_url($this->urlpath, $this->urlparams);
+    }
+}
+
+/**
+ * Class report data.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_report_data implements renderable {
+    /** @var array|null|stdClass  */
+    public $pageparams;
+    /** @var array  */
+    public $users;
+    /** @var array  */
+    public $groups;
+    /** @var array  */
+    public $sessions;
+    /** @var array  */
+    public $statuses;
+    /** @var array includes disablrd/deleted statuses. */
+    public $allstatuses;
+    /** @var array  */
+    public $usersgroups = array();
+    /** @var array  */
+    public $sessionslog = array();
+    /** @var array|mod_attendance_summary  */
+    public $summary = array();
+    /** @var mod_attendance_structure  */
+    public $att;
+
+    /**
+     * attendance_report_data constructor.
+     * @param mod_attendance_structure $att
+     */
+    public function  __construct(mod_attendance_structure $att) {
+        $currenttime = time();
+        if ($att->pageparams->view == ATT_VIEW_NOTPRESENT) {
+            $att->pageparams->enddate = $currenttime;
+        }
+
+        $this->pageparams = $att->pageparams;
+
+        $this->users = $att->get_users($att->pageparams->group, $att->pageparams->page);
+
+        if (isset($att->pageparams->userids)) {
+            foreach ($this->users as $key => $user) {
+                if (!in_array($user->id, $att->pageparams->userids)) {
+                    unset($this->users[$key]);
+                }
+            }
+        }
+
+        $this->groups = groups_get_all_groups($att->course->id);
+
+        $this->sessions = $att->get_filtered_sessions();
+
+        $this->statuses = $att->get_statuses(true, true);
+        $this->allstatuses = $att->get_statuses(false, true);
+
+        if ($att->pageparams->view == ATT_VIEW_SUMMARY) {
+            $this->summary = new mod_attendance_summary($att->id);
+        } else {
+            $this->summary = new mod_attendance_summary($att->id, array_keys($this->users),
+                                                        $att->pageparams->startdate, $att->pageparams->enddate);
+        }
+
+        foreach ($this->users as $key => $user) {
+            $usersummary = $this->summary->get_taken_sessions_summary_for($user->id);
+            if ($att->pageparams->view != ATT_VIEW_NOTPRESENT ||
+                    $usersummary->takensessionspoints < $usersummary->takensessionsmaxpoints ||
+                    $usersummary->takensessionsmaxpoints == 0) {
+                $this->usersgroups[$user->id] = groups_get_all_groups($att->course->id, $user->id);
+
+                $this->sessionslog[$user->id] = $att->get_user_filtered_sessions_log($user->id);
+            } else {
+                unset($this->users[$key]);
+            }
+        }
+
+        $this->att = $att;
+    }
+
+    /**
+     * url take helper.
+     * @param int $sessionid
+     * @param int $grouptype
+     * @return mixed
+     */
+    public function url_take($sessionid, $grouptype) {
+        return url_helpers::url_take($this->att, $sessionid, $grouptype);
+    }
+
+    /**
+     * url view helper.
+     * @param array $params
+     * @return mixed
+     */
+    public function url_view($params=array()) {
+        return url_helpers::url_view($this->att, $params);
+    }
+
+    /**
+     * url helper.
+     * @param array $params
+     * @return moodle_url
+     */
+    public function url($params=array()) {
+        $params = array_merge($params, $this->pageparams->get_significant_params());
+
+        return $this->att->url_report($params);
+    }
+
+}
+
+/**
+ * Class preferences data.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_preferences_data implements renderable {
+    /** @var array  */
+    public $statuses;
+    /** @var mod_attendance_structure  */
+    private $att;
+    /** @var array  */
+    public $errors;
+
+    /**
+     * attendance_preferences_data constructor.
+     * @param mod_attendance_structure $att
+     * @param array $errors
+     */
+    public function __construct(mod_attendance_structure $att, $errors) {
+        $this->statuses = $att->get_statuses(false);
+        $this->errors = $errors;
+
+        foreach ($this->statuses as $st) {
+            $st->haslogs = attendance_has_logs_for_status($st->id);
+        }
+
+        $this->att = $att;
+    }
+
+    /**
+     * url helper function
+     * @param array $params
+     * @param bool $significantparams
+     * @return moodle_url
+     */
+    public function url($params=array(), $significantparams=true) {
+        if ($significantparams) {
+            $params = array_merge($this->att->pageparams->get_significant_params(), $params);
+        }
+
+        return $this->att->url_preferences($params);
+    }
+}
+
+/**
+ * Default status set
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_default_statusset implements renderable {
+    /** @var array  */
+    public $statuses;
+    /** @var array  */
+    public $errors;
+
+    /**
+     * attendance_default_statusset constructor.
+     * @param array $statuses
+     * @param array $errors
+     */
+    public function __construct($statuses, $errors) {
+        $this->statuses = $statuses;
+        $this->errors = $errors;
+    }
+
+    /**
+     * url helper.
+     * @param stdClass $params
+     * @return moodle_url
+     */
+    public function url($params) {
+        return new moodle_url('/mod/attendance/defaultstatus.php', $params);
+    }
+}
+
+/**
+ * Output a selector to change between status sets.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_set_selector implements renderable {
+    /** @var int  */
+    public $maxstatusset;
+    /** @var mod_attendance_structure  */
+    private $att;
+
+    /**
+     * attendance_set_selector constructor.
+     * @param mod_attendance_structure $att
+     * @param int $maxstatusset
+     */
+    public function __construct(mod_attendance_structure $att, $maxstatusset) {
+        $this->att = $att;
+        $this->maxstatusset = $maxstatusset;
+    }
+
+    /**
+     * url helper
+     * @param array $statusset
+     * @return moodle_url
+     */
+    public function url($statusset) {
+        $params = array();
+        $params['statusset'] = $statusset;
+
+        return $this->att->url_preferences($params);
+    }
+
+    /**
+     * get current statusset.
+     * @return int
+     */
+    public function get_current_statusset() {
+        if (isset($this->att->pageparams->statusset)) {
+            return $this->att->pageparams->statusset;
+        }
+        return 0;
+    }
+
+    /**
+     * get statusset name.
+     * @param int $statusset
+     * @return string
+     */
+    public function get_status_name($statusset) {
+        return attendance_get_setname($this->att->id, $statusset, true);
+    }
+}
+
+/**
+ * Url helpers
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class url_helpers {
+    /**
+     * Url take.
+     * @param stdClass $att
+     * @param int $sessionid
+     * @param int $grouptype
+     * @return mixed
+     */
+    public static function url_take($att, $sessionid, $grouptype) {
+        $params = array('sessionid' => $sessionid);
+        if (isset($grouptype)) {
+            $params['grouptype'] = $grouptype;
+        }
+
+        return $att->url_take($params);
+    }
+
+    /**
+     * Must be called without or with both parameters
+     * @param stdClass $att
+     * @param null $sessionid
+     * @param null $action
+     * @return mixed
+     */
+    public static function url_sessions($att, $sessionid=null, $action=null) {
+        if (isset($sessionid) && isset($action)) {
+            $params = array('sessionid' => $sessionid, 'action' => $action);
+        } else {
+            $params = array();
+        }
+
+        return $att->url_sessions($params);
+    }
+
+    /**
+     * Url view helper.
+     * @param stdClass $att
+     * @param array $params
+     * @return mixed
+     */
+    public static function url_view($att, $params=array()) {
+        return $att->url_view($params);
+    }
+}
+
+/**
+ * Data structure representing an attendance password icon.
+ * copied from help_icon class
+ *
+ * @copyright 2017 Dan Marsden
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_password_icon implements renderable, templatable {
+
+    /**
+     * @var string text to show
+     */
+    public $text;
+
+    /**
+     * @var string Extra descriptive text next to the icon
+     */
+    public $linktext = null;
+
+    /**
+     * Constructor
+     *
+     * @param string $identifier string for help page title,
+     *  string with _help suffix is used for the actual help text.
+     *  string with _link suffix is used to create a link to further info (if it exists)
+     * @param string $component
+     */
+    public function __construct($text, $sessionid) {
+        $this->text  = $text;
+        $this->sessionid = $sessionid;
+    }
+
+    /**
+     * Export this data so it can be used as the context for a mustache template.
+     *
+     * @param renderer_base $output Used to do a final render of any components that need to be rendered for export.
+     * @return array
+     */
+    public function export_for_template(renderer_base $output) {
+
+        $title = get_string('password', 'attendance');
+
+        $data = new stdClass();
+        $data->heading = '';
+        $data->text = $this->text;
+
+        $data->alt = $title;
+        $data->icon = (new pix_icon('key', '', 'attendance'))->export_for_template($output);
+        $data->linktext = '';
+        $data->title = $title;
+        $data->url = (new moodle_url('/mod/attendance/password.php', [
+            'session' => $this->sessionid]))->out(false);
+
+        $data->ltr = !right_to_left();
+        return $data;
+    }
+}
diff --git a/mod/attendance/renderer.php b/mod/attendance/renderer.php
new file mode 100644
index 0000000..7b382e7
--- /dev/null
+++ b/mod/attendance/renderer.php
@@ -0,0 +1,1898 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance module renderering methods
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/locallib.php');
+require_once(dirname(__FILE__).'/renderables.php');
+require_once(dirname(__FILE__).'/renderhelpers.php');
+require_once($CFG->libdir.'/tablelib.php');
+
+/**
+ * Attendance module renderer class
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_renderer extends plugin_renderer_base {
+    // External API - methods to render attendance renderable components.
+
+    /**
+     * Renders tabs for attendance
+     *
+     * @param attendance_tabs $atttabs - tabs to display
+     * @return string html code
+     */
+    protected function render_attendance_tabs(attendance_tabs $atttabs) {
+        return print_tabs($atttabs->get_tabs(), $atttabs->currenttab, null, null, true);
+    }
+
+    /**
+     * Renders filter controls for attendance
+     *
+     * @param attendance_filter_controls $fcontrols - filter controls data to display
+     * @return string html code
+     */
+    protected function render_attendance_filter_controls(attendance_filter_controls $fcontrols) {
+        $filtertable = new html_table();
+        $filtertable->attributes['class'] = ' ';
+        $filtertable->width = '100%';
+        $filtertable->align = array('left', 'center', 'right', 'right');
+
+        $filtertable->data[0][] = $this->render_sess_group_selector($fcontrols);
+
+        $filtertable->data[0][] = $this->render_curdate_controls($fcontrols);
+
+        $filtertable->data[0][] = $this->render_paging_controls($fcontrols);
+
+        $filtertable->data[0][] = $this->render_view_controls($fcontrols);
+
+        $o = html_writer::table($filtertable);
+        $o = $this->output->container($o, 'attfiltercontrols');
+
+        return $o;
+    }
+
+    /**
+     * Render group selector
+     *
+     * @param attendance_filter_controls $fcontrols
+     * @return mixed|string
+     */
+    protected function render_sess_group_selector(attendance_filter_controls $fcontrols) {
+        switch ($fcontrols->pageparams->selectortype) {
+            case mod_attendance_page_with_filter_controls::SELECTOR_SESS_TYPE:
+                $sessgroups = $fcontrols->get_sess_groups_list();
+                if ($sessgroups) {
+                    $select = new single_select($fcontrols->url(), 'group', $sessgroups,
+                                                $fcontrols->get_current_sesstype(), null, 'selectgroup');
+                    $select->label = get_string('sessions', 'attendance');
+                    $output = $this->output->render($select);
+
+                    return html_writer::tag('div', $output, array('class' => 'groupselector'));
+                }
+                break;
+            case mod_attendance_page_with_filter_controls::SELECTOR_GROUP:
+                return groups_print_activity_menu($fcontrols->cm, $fcontrols->url(), true);
+        }
+
+        return '';
+    }
+
+    /**
+     * Render paging controls.
+     *
+     * @param attendance_filter_controls $fcontrols
+     * @return string
+     */
+    protected function render_paging_controls(attendance_filter_controls $fcontrols) {
+        $pagingcontrols = '';
+
+        $group = 0;
+        if (!empty($fcontrols->pageparams->group)) {
+            $group = $fcontrols->pageparams->group;
+        }
+
+        $totalusers = count_enrolled_users(context_module::instance($fcontrols->cm->id), 'mod/attendance:canbelisted', $group);
+
+        if (empty($fcontrols->pageparams->page) || !$fcontrols->pageparams->page || !$totalusers ||
+            empty($fcontrols->pageparams->perpage)) {
+
+            return $pagingcontrols;
+        }
+
+        $numberofpages = ceil($totalusers / $fcontrols->pageparams->perpage);
+
+        if ($fcontrols->pageparams->page > 1) {
+            $pagingcontrols .= html_writer::link($fcontrols->url(array('curdate' => $fcontrols->curdate,
+                                                                       'page' => $fcontrols->pageparams->page - 1)),
+                                                                 $this->output->larrow());
+        }
+        $pagingcontrols .= html_writer::tag('span', "Page {$fcontrols->pageparams->page} of $numberofpages",
+                                            array('class' => 'attbtn'));
+        if ($fcontrols->pageparams->page < $numberofpages) {
+            $pagingcontrols .= html_writer::link($fcontrols->url(array('curdate' => $fcontrols->curdate,
+                                                                       'page' => $fcontrols->pageparams->page + 1)),
+                                                                 $this->output->rarrow());
+        }
+
+        return $pagingcontrols;
+    }
+
+    /**
+     * Render date controls.
+     *
+     * @param attendance_filter_controls $fcontrols
+     * @return string
+     */
+    protected function render_curdate_controls(attendance_filter_controls $fcontrols) {
+        global $CFG;
+
+        $curdatecontrols = '';
+        if ($fcontrols->curdatetxt) {
+            $this->page->requires->strings_for_js(array('calclose', 'caltoday'), 'attendance');
+            $jsvals = array(
+                    'cal_months'    => explode(',', get_string('calmonths', 'attendance')),
+                    'cal_week_days' => explode(',', get_string('calweekdays', 'attendance')),
+                    'cal_start_weekday' => $CFG->calendar_startwday,
+                    'cal_cur_date'  => $fcontrols->curdate);
+            $curdatecontrols = html_writer::script(js_writer::set_variable('M.attendance', $jsvals));
+
+            $this->page->requires->js('/mod/attendance/calendar.js');
+
+            $curdatecontrols .= html_writer::link($fcontrols->url(array('curdate' => $fcontrols->prevcur)),
+                                                                         $this->output->larrow());
+            $params = array(
+                    'title' => get_string('calshow', 'attendance'),
+                    'id'    => 'show',
+                    'class' => 'btn btn-secondary',
+                    'type'  => 'button');
+            $buttonform = html_writer::tag('button', $fcontrols->curdatetxt, $params);
+            foreach ($fcontrols->url_params(array('curdate' => '')) as $name => $value) {
+                $params = array(
+                        'type'  => 'hidden',
+                        'id'    => $name,
+                        'name'  => $name,
+                        'value' => $value);
+                $buttonform .= html_writer::empty_tag('input', $params);
+            }
+            $params = array(
+                    'id'        => 'currentdate',
+                    'action'    => $fcontrols->url_path(),
+                    'method'    => 'post'
+            );
+
+            $buttonform = html_writer::tag('form', $buttonform, $params);
+            $curdatecontrols .= $buttonform;
+
+            $curdatecontrols .= html_writer::link($fcontrols->url(array('curdate' => $fcontrols->nextcur)),
+                                                                         $this->output->rarrow());
+        }
+
+        return $curdatecontrols;
+    }
+
+    /**
+     * Render view controls.
+     *
+     * @param attendance_filter_controls $fcontrols
+     * @return string
+     */
+    protected function render_view_controls(attendance_filter_controls $fcontrols) {
+        $views[ATT_VIEW_ALL] = get_string('all', 'attendance');
+        $views[ATT_VIEW_ALLPAST] = get_string('allpast', 'attendance');
+        if ($fcontrols->reportcontrol  && $fcontrols->att->grade > 0) {
+            $views[ATT_VIEW_NOTPRESENT] = get_string('lowgrade', 'attendance');
+        }
+        $views[ATT_VIEW_MONTHS] = get_string('months', 'attendance');
+        $views[ATT_VIEW_WEEKS] = get_string('weeks', 'attendance');
+        $views[ATT_VIEW_DAYS] = get_string('days', 'attendance');
+        if ($fcontrols->reportcontrol) {
+            $views[ATT_VIEW_SUMMARY] = get_string('summary', 'attendance');
+        }
+        $viewcontrols = '';
+        foreach ($views as $key => $sview) {
+            if ($key != $fcontrols->pageparams->view) {
+                $link = html_writer::link($fcontrols->url(array('view' => $key)), $sview);
+                $viewcontrols .= html_writer::tag('span', $link, array('class' => 'attbtn'));
+            } else {
+                $viewcontrols .= html_writer::tag('span', $sview, array('class' => 'attcurbtn'));
+            }
+        }
+
+        return html_writer::tag('nobr', $viewcontrols);
+    }
+
+    /**
+     * Renders attendance sessions managing table
+     *
+     * @param attendance_manage_data $sessdata to display
+     * @return string html code
+     */
+    protected function render_attendance_manage_data(attendance_manage_data $sessdata) {
+        $o = $this->render_sess_manage_table($sessdata) . $this->render_sess_manage_control($sessdata);
+        $o = html_writer::tag('form', $o, array('method' => 'post', 'action' => $sessdata->url_sessions()->out()));
+        $o = $this->output->container($o, 'generalbox attwidth');
+        $o = $this->output->container($o, 'attsessions_manage_table');
+
+        return $o;
+    }
+
+    /**
+     * Render session manage table.
+     *
+     * @param attendance_manage_data $sessdata
+     * @return string
+     */
+    protected function render_sess_manage_table(attendance_manage_data $sessdata) {
+        $this->page->requires->js_init_call('M.mod_attendance.init_manage');
+
+        $table = new html_table();
+        $table->width = '100%';
+        $table->head = array(
+                '#',
+                get_string('date'),
+                get_string('time'),
+                get_string('sessiontypeshort', 'attendance'),
+                get_string('description', 'attendance'),
+                get_string('actions'),
+                html_writer::checkbox('cb_selector', 0, false, '', array('id' => 'cb_selector'))
+            );
+        $table->align = array('', 'right', '', '', 'left', 'right', 'center');
+        $table->size = array('1px', '1px', '1px', '', '*', '120px', '1px');
+
+        $i = 0;
+        foreach ($sessdata->sessions as $key => $sess) {
+            $i++;
+
+            $dta = $this->construct_date_time_actions($sessdata, $sess);
+
+            $table->data[$sess->id][] = $i;
+            $table->data[$sess->id][] = $dta['date'];
+            $table->data[$sess->id][] = $dta['time'];
+            if ($sess->groupid) {
+                if (empty($sessdata->groups[$sess->groupid])) {
+                    $table->data[$sess->id][] = get_string('deletedgroup', 'attendance');
+                    // Remove actions and links on date/time.
+                    $dta['actions'] = '';
+                    $dta['date'] = userdate($sess->sessdate, get_string('strftimedmyw', 'attendance'));
+                    $dta['time'] = $this->construct_time($sess->sessdate, $sess->duration);
+                } else {
+                    $table->data[$sess->id][] = get_string('group') . ': ' . $sessdata->groups[$sess->groupid]->name;
+                }
+            } else {
+                $table->data[$sess->id][] = get_string('commonsession', 'attendance');
+            }
+            $table->data[$sess->id][] = $sess->description;
+            $table->data[$sess->id][] = $dta['actions'];
+            $table->data[$sess->id][] = html_writer::checkbox('sessid[]', $sess->id, false, '',
+                                                              array('class' => 'attendancesesscheckbox'));
+        }
+
+        return html_writer::table($table);
+    }
+
+    /**
+     * Implementation of user image rendering.
+     *
+     * @param help_icon $helpicon A help icon instance
+     * @return string HTML fragment
+     */
+    protected function render_attendance_password_icon(attendance_password_icon $helpicon) {
+        return $this->render_from_template('attendance/attendance_password_icon', $helpicon->export_for_template($this));
+    }
+    /**
+     * Construct date time actions.
+     *
+     * @param attendance_manage_data $sessdata
+     * @param stdClass $sess
+     * @return array
+     */
+    private function construct_date_time_actions(attendance_manage_data $sessdata, $sess) {
+        $actions = '';
+        if (!empty($sess->studentpassword) &&
+            (has_capability('mod/attendance:manageattendances', $sessdata->att->context) ||
+            has_capability('mod/attendance:takeattendances', $sessdata->att->context) ||
+            has_capability('mod/attendance:changeattendances', $sessdata->att->context))) {
+
+            $icon = new attendance_password_icon($sess->studentpassword, $sess->id);
+            $actions .= $this->render($icon);
+        }
+
+        $date = userdate($sess->sessdate, get_string('strftimedmyw', 'attendance'));
+        $time = $this->construct_time($sess->sessdate, $sess->duration);
+        if ($sess->lasttaken > 0) {
+            if (has_capability('mod/attendance:changeattendances', $sessdata->att->context)) {
+                $url = $sessdata->url_take($sess->id, $sess->groupid);
+                $title = get_string('changeattendance', 'attendance');
+
+                $date = html_writer::link($url, $date, array('title' => $title));
+                $time = html_writer::link($url, $time, array('title' => $title));
+
+                $actions .= $this->output->action_icon($url, new pix_icon('redo', $title, 'attendance'));
+            } else {
+                $date = '<i>' . $date . '</i>';
+                $time = '<i>' . $time . '</i>';
+            }
+        } else {
+            if (has_capability('mod/attendance:takeattendances', $sessdata->att->context)) {
+                $url = $sessdata->url_take($sess->id, $sess->groupid);
+                $title = get_string('takeattendance', 'attendance');
+                $actions .= $this->output->action_icon($url, new pix_icon('t/go', $title));
+            }
+        }
+
+        if (has_capability('mod/attendance:manageattendances', $sessdata->att->context)) {
+            $url = $sessdata->url_sessions($sess->id, mod_attendance_sessions_page_params::ACTION_UPDATE);
+            $title = get_string('editsession', 'attendance');
+            $actions .= $this->output->action_icon($url, new pix_icon('t/edit', $title));
+
+            $url = $sessdata->url_sessions($sess->id, mod_attendance_sessions_page_params::ACTION_DELETE);
+            $title = get_string('deletesession', 'attendance');
+            $actions .= $this->output->action_icon($url, new pix_icon('t/delete', $title));
+        }
+
+        return array('date' => $date, 'time' => $time, 'actions' => $actions);
+    }
+
+    /**
+     * Render session manage control.
+     *
+     * @param attendance_manage_data $sessdata
+     * @return string
+     */
+    protected function render_sess_manage_control(attendance_manage_data $sessdata) {
+        $table = new html_table();
+        $table->attributes['class'] = ' ';
+        $table->width = '100%';
+        $table->align = array('left', 'right');
+
+        $table->data[0][] = $this->output->help_icon('hiddensessions', 'attendance',
+                get_string('hiddensessions', 'attendance').': '.$sessdata->hiddensessionscount);
+
+        if (has_capability('mod/attendance:manageattendances', $sessdata->att->context)) {
+            if ($sessdata->hiddensessionscount > 0) {
+                $attributes = array(
+                        'type'  => 'submit',
+                        'name'  => 'deletehiddensessions',
+                        'class' => 'btn btn-secondary',
+                        'value' => get_string('deletehiddensessions', 'attendance'));
+                $table->data[1][] = html_writer::empty_tag('input', $attributes);
+            }
+
+            $options = array(mod_attendance_sessions_page_params::ACTION_DELETE_SELECTED => get_string('delete'),
+                mod_attendance_sessions_page_params::ACTION_CHANGE_DURATION => get_string('changeduration', 'attendance'));
+
+            $controls = html_writer::select($options, 'action');
+            $attributes = array(
+                    'type'  => 'submit',
+                    'name'  => 'ok',
+                    'value' => get_string('ok'),
+                    'class' => 'btn btn-secondary');
+            $controls .= html_writer::empty_tag('input', $attributes);
+        } else {
+            $controls = get_string('youcantdo', 'attendance'); // You can't do anything.
+        }
+        $table->data[0][] = $controls;
+
+        return html_writer::table($table);
+    }
+
+    /**
+     * Render take data.
+     *
+     * @param attendance_take_data $takedata
+     * @return string
+     */
+    protected function render_attendance_take_data(attendance_take_data $takedata) {
+        $controls = $this->render_attendance_take_controls($takedata);
+        $table = html_writer::start_div('no-overflow');
+        if ($takedata->pageparams->viewmode == mod_attendance_take_page_params::SORTED_LIST) {
+            $table .= $this->render_attendance_take_list($takedata);
+        } else {
+            $table .= $this->render_attendance_take_grid($takedata);
+        }
+        $table .= html_writer::input_hidden_params($takedata->url(array('sesskey' => sesskey(),
+                                                                        'page' => $takedata->pageparams->page)));
+        $table .= html_writer::end_div();
+        $params = array(
+                'type'  => 'submit',
+                'class' => 'btn btn-primary',
+                'value' => get_string('save', 'attendance'));
+        $table .= html_writer::tag('center', html_writer::empty_tag('input', $params));
+        $table = html_writer::tag('form', $table, array('method' => 'post', 'action' => $takedata->url_path(),
+                                                        'id' => 'attendancetakeform'));
+
+        foreach ($takedata->statuses as $status) {
+            $sessionstats[$status->id] = 0;
+        }
+        // Calculate the sum of statuses for each user.
+        $sessionstats[] = array();
+        foreach ($takedata->sessionlog as $userlog) {
+            foreach ($takedata->statuses as $status) {
+                if ($userlog->statusid == $status->id) {
+                    $sessionstats[$status->id]++;
+                }
+            }
+        }
+
+        $statsoutput = '<br/>';
+        foreach ($takedata->statuses as $status) {
+            $statsoutput .= "$status->description = ".$sessionstats[$status->id]." <br/>";
+        }
+
+        return $controls.$table.$statsoutput;
+    }
+
+    /**
+     * Render take controls.
+     *
+     * @param attendance_take_data $takedata
+     * @return string
+     */
+    protected function render_attendance_take_controls(attendance_take_data $takedata) {
+        $table = new html_table();
+        $table->attributes['class'] = ' ';
+
+        $table->data[0][] = $this->construct_take_session_info($takedata);
+        $table->data[0][] = $this->construct_take_controls($takedata);
+
+        return $this->output->container(html_writer::table($table), 'generalbox takecontrols');
+    }
+
+    /**
+     * Construct take session info.
+     *
+     * @param attendance_take_data $takedata
+     * @return string
+     */
+    private function construct_take_session_info(attendance_take_data $takedata) {
+        $sess = $takedata->sessioninfo;
+        $date = userdate($sess->sessdate, get_string('strftimedate'));
+        $starttime = attendance_strftimehm($sess->sessdate);
+        $endtime = attendance_strftimehm($sess->sessdate + $sess->duration);
+        $time = html_writer::tag('nobr', $starttime . ($sess->duration > 0 ? ' - ' . $endtime : ''));
+        $sessinfo = $date.' '.$time;
+        $sessinfo .= html_writer::empty_tag('br');
+        $sessinfo .= html_writer::empty_tag('br');
+        $sessinfo .= $sess->description;
+
+        return $sessinfo;
+    }
+
+    /**
+     * Construct take controls.
+     *
+     * @param attendance_take_data $takedata
+     * @return string
+     */
+    private function construct_take_controls(attendance_take_data $takedata) {
+
+        $controls = '';
+        $context = context_module::instance($takedata->cm->id);
+        $group = 0;
+        if ($takedata->pageparams->grouptype != mod_attendance_structure::SESSION_COMMON) {
+            $group = $takedata->pageparams->grouptype;
+        } else {
+            if ($takedata->pageparams->group) {
+                $group = $takedata->pageparams->group;
+            }
+        }
+
+        if (!empty($takedata->cm->groupingid)) {
+            if ($group == 0) {
+                $groups = array_keys(groups_get_all_groups($takedata->cm->course, 0, $takedata->cm->groupingid, 'g.id'));
+            } else {
+                $groups = $group;
+            }
+            $users = get_users_by_capability($context, 'mod/attendance:canbelisted',
+                            'u.id, u.firstname, u.lastname, u.email',
+                            '', '', '', $groups,
+                            '', false, true);
+            $totalusers = count($users);
+        } else {
+            $totalusers = count_enrolled_users($context, 'mod/attendance:canbelisted', $group);
+        }
+        $usersperpage = $takedata->pageparams->perpage;
+        if (!empty($takedata->pageparams->page) && $takedata->pageparams->page && $totalusers && $usersperpage) {
+            $controls .= html_writer::empty_tag('br');
+            $numberofpages = ceil($totalusers / $usersperpage);
+
+            if ($takedata->pageparams->page > 1) {
+                $controls .= html_writer::link($takedata->url(array('page' => $takedata->pageparams->page - 1)),
+                                                              $this->output->larrow());
+            }
+            $controls .= html_writer::tag('span', "Page {$takedata->pageparams->page} of $numberofpages",
+                                          array('class' => 'attbtn'));
+            if ($takedata->pageparams->page < $numberofpages) {
+                $controls .= html_writer::link($takedata->url(array('page' => $takedata->pageparams->page + 1,
+                            'perpage' => $takedata->pageparams->perpage)), $this->output->rarrow());
+            }
+        }
+
+        if ($takedata->pageparams->grouptype == mod_attendance_structure::SESSION_COMMON and
+                ($takedata->groupmode == VISIBLEGROUPS or
+                ($takedata->groupmode and has_capability('moodle/site:accessallgroups', $context)))) {
+            $controls .= groups_print_activity_menu($takedata->cm, $takedata->url(), true);
+        }
+
+        $controls .= html_writer::empty_tag('br');
+
+        $options = array(
+            mod_attendance_take_page_params::SORTED_LIST   => get_string('sortedlist', 'attendance'),
+            mod_attendance_take_page_params::SORTED_GRID   => get_string('sortedgrid', 'attendance'));
+        $select = new single_select($takedata->url(), 'viewmode', $options, $takedata->pageparams->viewmode, null);
+        $select->set_label(get_string('viewmode', 'attendance'));
+        $select->class = 'singleselect inline';
+        $controls .= $this->output->render($select);
+
+        if ($takedata->pageparams->viewmode == mod_attendance_take_page_params::SORTED_LIST) {
+            $options = array(
+                    0 => get_string('donotusepaging', 'attendance'),
+                   get_config('attendance', 'resultsperpage') => get_config('attendance', 'resultsperpage'));
+            $select = new single_select($takedata->url(), 'perpage', $options, $takedata->pageparams->perpage, null);
+            $select->class = 'singleselect inline';
+            $controls .= $this->output->render($select);
+        }
+
+        if ($takedata->pageparams->viewmode == mod_attendance_take_page_params::SORTED_GRID) {
+            $options = array (1 => '1 '.get_string('column', 'attendance'), '2 '.get_string('columns', 'attendance'),
+                                   '3 '.get_string('columns', 'attendance'), '4 '.get_string('columns', 'attendance'),
+                                   '5 '.get_string('columns', 'attendance'), '6 '.get_string('columns', 'attendance'),
+                                   '7 '.get_string('columns', 'attendance'), '8 '.get_string('columns', 'attendance'),
+                                   '9 '.get_string('columns', 'attendance'), '10 '.get_string('columns', 'attendance'));
+            $select = new single_select($takedata->url(), 'gridcols', $options, $takedata->pageparams->gridcols, null);
+            $select->class = 'singleselect inline';
+            $controls .= $this->output->render($select);
+        }
+
+        if (count($takedata->sessions4copy) > 0) {
+            $controls .= html_writer::empty_tag('br');
+            $controls .= html_writer::empty_tag('br');
+
+            $options = array();
+            foreach ($takedata->sessions4copy as $sess) {
+                $start = attendance_strftimehm($sess->sessdate);
+                $end = $sess->duration ? ' - '.attendance_strftimehm($sess->sessdate + $sess->duration) : '';
+                $options[$sess->id] = $start . $end;
+            }
+            $select = new single_select($takedata->url(array(), array('copyfrom')), 'copyfrom', $options);
+            $select->set_label(get_string('copyfrom', 'attendance'));
+            $select->class = 'singleselect inline';
+            $controls .= $this->output->render($select);
+        }
+
+        return $controls;
+    }
+
+    /**
+     * Render take list.
+     *
+     * @param attendance_take_data $takedata
+     * @return string
+     */
+    protected function render_attendance_take_list(attendance_take_data $takedata) {
+        global $PAGE, $CFG;
+        $table = new html_table();
+        $table->width = '0%';
+        $table->head = array(
+                '#',
+                $this->construct_fullname_head($takedata)
+            );
+        $table->align = array('left', 'left');
+        $table->size = array('20px', '');
+        $table->wrap[1] = 'nowrap';
+        // Check if extra useridentity fields need to be added.
+        $extrasearchfields = array();
+        if (!empty($CFG->showuseridentity) && has_capability('moodle/site:viewuseridentity', $takedata->att->context)) {
+            $extrasearchfields = explode(',', $CFG->showuseridentity);
+        }
+        foreach ($extrasearchfields as $field) {
+            $table->head[] = get_string($field);
+            $table->align[] = 'left';
+        }
+        foreach ($takedata->statuses as $st) {
+            $table->head[] = html_writer::link("#", $st->acronym, array('id' => 'checkstatus'.$st->id,
+                'title' => get_string('setallstatusesto', 'attendance', $st->description)));
+            $table->align[] = 'center';
+            $table->size[] = '20px';
+            // JS to select all radios of this status and prevent default behaviour of # link.
+            $PAGE->requires->js_amd_inline("
+                require(['jquery'], function($) {
+                    $('#checkstatus".$st->id."').click(function(e) {
+                        $('#attendancetakeform').find('.st".$st->id."').prop('checked', true);
+                        e.preventDefault();
+                    });
+                });");
+
+        }
+
+        $table->head[] = get_string('remarks', 'attendance');
+        $table->align[] = 'center';
+        $table->size[] = '20px';
+        $table->attributes['class'] = 'generaltable takelist';
+
+        // Show a 'select all' row of radio buttons.
+        $row = new html_table_row();
+        $row->cells[] = '';
+        foreach ($extrasearchfields as $field) {
+            $row->cells[] = '';
+        }
+        $row->cells[] = html_writer::div(get_string('setallstatuses', 'attendance'), 'setallstatuses');
+        foreach ($takedata->statuses as $st) {
+            $attribs = array(
+                'id' => 'radiocheckstatus'.$st->id,
+                'type' => 'radio',
+                'title' => get_string('setallstatusesto', 'attendance', $st->description),
+                'name' => 'setallstatuses',
+                'class' => "st{$st->id}",
+            );
+            $row->cells[] = html_writer::empty_tag('input', $attribs);
+            // Select all radio buttons of the same status.
+            $PAGE->requires->js_amd_inline("
+                require(['jquery'], function($) {
+                    $('#radiocheckstatus".$st->id."').click(function(e) {
+                        $('#attendancetakeform').find('.st".$st->id."').prop('checked', true);
+                    });
+                });");
+        }
+        $row->cells[] = '';
+        $table->data[] = $row;
+
+        $i = 0;
+        foreach ($takedata->users as $user) {
+            $i++;
+            $row = new html_table_row();
+            $row->cells[] = $i;
+            $fullname = html_writer::link($takedata->url_view(array('studentid' => $user->id)), fullname($user));
+            $fullname = $this->user_picture($user).$fullname; // Show different picture if it is a temporary user.
+
+            $ucdata = $this->construct_take_user_controls($takedata, $user);
+            if (array_key_exists('warning', $ucdata)) {
+                $fullname .= html_writer::empty_tag('br');
+                $fullname .= $ucdata['warning'];
+            }
+            $row->cells[] = $fullname;
+            foreach ($extrasearchfields as $field) {
+                $row->cells[] = $user->$field;
+            }
+
+            if (array_key_exists('colspan', $ucdata)) {
+                $cell = new html_table_cell($ucdata['text']);
+                $cell->colspan = $ucdata['colspan'];
+                $row->cells[] = $cell;
+            } else {
+                $row->cells = array_merge($row->cells, $ucdata['text']);
+            }
+
+            if (array_key_exists('class', $ucdata)) {
+                $row->attributes['class'] = $ucdata['class'];
+            }
+
+            $table->data[] = $row;
+        }
+
+        return html_writer::table($table);
+    }
+
+    /**
+     * Render take grid.
+     *
+     * @param attendance_take_data $takedata
+     * @return string
+     */
+    protected function render_attendance_take_grid(attendance_take_data $takedata) {
+        $table = new html_table();
+        for ($i = 0; $i < $takedata->pageparams->gridcols; $i++) {
+            $table->align[] = 'center';
+            $table->size[] = '110px';
+        }
+        $table->attributes['class'] = 'generaltable takegrid';
+        $table->headspan = $takedata->pageparams->gridcols;
+        $head = array();
+        foreach ($takedata->statuses as $st) {
+            $head[] = html_writer::link("javascript:select_all_in(null, 'st" . $st->id . "', null);", $st->acronym,
+                                        array('title' => get_string('setallstatusesto', 'attendance', $st->description)));
+        }
+        $table->head[] = implode('&nbsp;&nbsp;', $head);
+
+        $i = 0;
+        $row = new html_table_row();
+        foreach ($takedata->users as $user) {
+            $celltext = $this->user_picture($user, array('size' => 100));  // Show different picture if it is a temporary user.
+            $celltext .= html_writer::empty_tag('br');
+            $fullname = html_writer::link($takedata->url_view(array('studentid' => $user->id)), fullname($user));
+            $celltext .= html_writer::tag('span', $fullname, array('class' => 'fullname'));
+            $celltext .= html_writer::empty_tag('br');
+            $ucdata = $this->construct_take_user_controls($takedata, $user);
+            $celltext .= is_array($ucdata['text']) ? implode('', $ucdata['text']) : $ucdata['text'];
+            if (array_key_exists('warning', $ucdata)) {
+                $celltext .= html_writer::empty_tag('br');
+                $celltext .= $ucdata['warning'];
+            }
+
+            $cell = new html_table_cell($celltext);
+            if (array_key_exists('class', $ucdata)) {
+                $cell->attributes['class'] = $ucdata['class'];
+            }
+            $row->cells[] = $cell;
+
+            $i++;
+            if ($i % $takedata->pageparams->gridcols == 0) {
+                $table->data[] = $row;
+                $row = new html_table_row();
+            }
+        }
+        if ($i % $takedata->pageparams->gridcols > 0) {
+            $table->data[] = $row;
+        }
+
+        return html_writer::table($table);
+    }
+
+    /**
+     * Construct full name.
+     *
+     * @param stdClass $data
+     * @return string
+     */
+    private function construct_fullname_head($data) {
+        global $CFG;
+
+        $url = $data->url();
+        if ($data->pageparams->sort == ATT_SORT_LASTNAME) {
+            $url->param('sort', ATT_SORT_FIRSTNAME);
+            $firstname = html_writer::link($url, get_string('firstname'));
+            $lastname = get_string('lastname');
+        } else if ($data->pageparams->sort == ATT_SORT_FIRSTNAME) {
+            $firstname = get_string('firstname');
+            $url->param('sort', ATT_SORT_LASTNAME);
+            $lastname = html_writer::link($url, get_string('lastname'));
+        } else {
+            $firstname = html_writer::link($data->url(array('sort' => ATT_SORT_FIRSTNAME)), get_string('firstname'));
+            $lastname = html_writer::link($data->url(array('sort' => ATT_SORT_LASTNAME)), get_string('lastname'));
+        }
+
+        if ($CFG->fullnamedisplay == 'lastname firstname') {
+            $fullnamehead = "$lastname / $firstname";
+        } else {
+            $fullnamehead = "$firstname / $lastname ";
+        }
+
+        return $fullnamehead;
+    }
+
+    /**
+     * Construct take user controls.
+     *
+     * @param attendance_take_data $takedata
+     * @param stdClass $user
+     * @return array
+     */
+    private function construct_take_user_controls(attendance_take_data $takedata, $user) {
+        $celldata = array();
+        if ($user->enrolmentend and $user->enrolmentend < $takedata->sessioninfo->sessdate) {
+            $celldata['text'] = get_string('enrolmentend', 'attendance', userdate($user->enrolmentend, '%d.%m.%Y'));
+            $celldata['colspan'] = count($takedata->statuses) + 1;
+            $celldata['class'] = 'userwithoutenrol';
+        } else if (!$user->enrolmentend and $user->enrolmentstatus == ENROL_USER_SUSPENDED) {
+            // No enrolmentend and ENROL_USER_SUSPENDED.
+            $celldata['text'] = get_string('enrolmentsuspended', 'attendance');
+            $celldata['colspan'] = count($takedata->statuses) + 1;
+            $celldata['class'] = 'userwithoutenrol';
+        } else {
+            if ($takedata->updatemode and !array_key_exists($user->id, $takedata->sessionlog)) {
+                $celldata['class'] = 'userwithoutdata';
+            }
+
+            $celldata['text'] = array();
+            foreach ($takedata->statuses as $st) {
+                $params = array(
+                        'type'  => 'radio',
+                        'name'  => 'user'.$user->id,
+                        'class' => 'st'.$st->id,
+                        'value' => $st->id);
+                if (array_key_exists($user->id, $takedata->sessionlog) and $st->id == $takedata->sessionlog[$user->id]->statusid) {
+                    $params['checked'] = '';
+                }
+
+                $input = html_writer::empty_tag('input', $params);
+
+                if ($takedata->pageparams->viewmode == mod_attendance_take_page_params::SORTED_GRID) {
+                    $input = html_writer::tag('nobr', $input . $st->acronym);
+                }
+
+                $celldata['text'][] = $input;
+            }
+            $params = array(
+                    'type'  => 'text',
+                    'name'  => 'remarks'.$user->id,
+                    'maxlength' => 255);
+            if (array_key_exists($user->id, $takedata->sessionlog)) {
+                $params['value'] = $takedata->sessionlog[$user->id]->remarks;
+            }
+            $celldata['text'][] = html_writer::empty_tag('input', $params);
+
+            if ($user->enrolmentstart > $takedata->sessioninfo->sessdate + $takedata->sessioninfo->duration) {
+                $celldata['warning'] = get_string('enrolmentstart', 'attendance',
+                                                  userdate($user->enrolmentstart, '%H:%M %d.%m.%Y'));
+                $celldata['class'] = 'userwithoutenrol';
+            }
+        }
+
+        return $celldata;
+    }
+
+    /**
+     * Render header.
+     *
+     * @param mod_attendance_header $header
+     * @return string
+     */
+    protected function render_mod_attendance_header(mod_attendance_header $header) {
+        if (!$header->should_render()) {
+            return '';
+        }
+
+        $attendance = $header->get_attendance();
+
+        $heading = format_string($header->get_title(), false, ['context' => $attendance->context]);
+        $o = $this->output->heading($heading);
+
+        $o .= $this->output->box_start('generalbox boxaligncenter', 'intro');
+        $o .= format_module_intro('attendance', $attendance, $attendance->cm->id);
+        $o .= $this->output->box_end();
+
+        return $o;
+    }
+
+    /**
+     * Render user data.
+     *
+     * @param attendance_user_data $userdata
+     * @return string
+     */
+    protected function render_attendance_user_data(attendance_user_data $userdata) {
+        global $USER;
+
+        $o = $this->render_user_report_tabs($userdata);
+
+        if ($USER->id == $userdata->user->id) {
+
+            $o .= $this->construct_user_data($userdata);
+
+        } else {
+
+            $table = new html_table();
+
+            $table->attributes['class'] = 'userinfobox';
+            $table->colclasses = array('left side', '');
+            // Show different picture if it is a temporary user.
+            $table->data[0][] = $this->user_picture($userdata->user, array('size' => 100));
+            $table->data[0][] = $this->construct_user_data($userdata);
+
+            $o .= html_writer::table($table);
+        }
+
+        return $o;
+    }
+
+    /**
+     * Render user report tabs.
+     *
+     * @param attendance_user_data $userdata
+     * @return string
+     */
+    protected function render_user_report_tabs(attendance_user_data $userdata) {
+        $tabs = array();
+
+        $tabs[] = new tabobject(mod_attendance_view_page_params::MODE_THIS_COURSE,
+                        $userdata->url()->out(true, array('mode' => mod_attendance_view_page_params::MODE_THIS_COURSE)),
+                        get_string('thiscourse', 'attendance'));
+
+        // Skip the 'all courses' tab for 'temporary' users.
+        if ($userdata->user->type == 'standard') {
+            $tabs[] = new tabobject(mod_attendance_view_page_params::MODE_ALL_COURSES,
+                            $userdata->url()->out(true, array('mode' => mod_attendance_view_page_params::MODE_ALL_COURSES)),
+                            get_string('allcourses', 'attendance'));
+        }
+
+        return print_tabs(array($tabs), $userdata->pageparams->mode, null, null, true);
+    }
+
+    /**
+     * Construct user data.
+     *
+     * @param attendance_user_data $userdata
+     * @return string
+     */
+    private function construct_user_data(attendance_user_data $userdata) {
+        global $USER;
+        $o = '';
+        if ($USER->id <> $userdata->user->id) {
+            $o = html_writer::tag('h2', fullname($userdata->user));
+        }
+
+        if ($userdata->pageparams->mode == mod_attendance_view_page_params::MODE_THIS_COURSE) {
+            $o .= $this->render_attendance_filter_controls($userdata->filtercontrols);
+            $o .= $this->construct_user_sessions_log($userdata);
+            $o .= html_writer::empty_tag('hr');
+            $o .= construct_user_data_stat($userdata->summary->get_all_sessions_summary_for($userdata->user->id),
+                $userdata->pageparams->view);
+        } else {
+            $prevcid = 0;
+            $table = new html_table();
+            $table->head  = array(get_string('course'),
+                get_string('pluginname', 'mod_attendance'),
+                get_string('sessionscompleted', 'attendance'),
+                get_string('pointssessionscompleted', 'attendance'),
+                get_string('percentagesessionscompleted', 'attendance'));
+            $table->align = array('left', 'left', 'center', 'center', 'center');
+            $table->colclasses = array('colcourse', 'colatt', 'colsessionscompleted',
+                                       'colpointssessionscompleted', 'colpercentagesessionscompleted');
+            $totalattendance = 0;
+            $totalpercentage = 0;
+            foreach ($userdata->coursesatts as $ca) {
+                $row = new html_table_row();
+                $courseurl = new moodle_url('/course/view.php', array('id' => $ca->courseid));
+                $row->cells[] = html_writer::link($courseurl, $ca->coursefullname);
+                $attendanceurl = new moodle_url('/mod/attendance/view.php', array('id' => $ca->cmid,
+                                                                                      'studentid' => $userdata->user->id,
+                                                                                      'view' => ATT_VIEW_ALL));
+                $row->cells[] = html_writer::link($attendanceurl, $ca->attname);
+                $usersummary = new stdClass();
+                if (isset($userdata->summary[$ca->attid])) {
+                    $usersummary = $userdata->summary[$ca->attid]->get_all_sessions_summary_for($userdata->user->id);
+
+                    $row->cells[] = $usersummary->numtakensessions;
+                    $row->cells[] = format_float($usersummary->takensessionspoints, 1, true, true) . ' / ' .
+                        format_float($usersummary->takensessionsmaxpoints, 1, true, true);
+                    if (empty($usersummary->numtakensessions)) {
+                        $row->cells[] = '-';
+                    } else {
+                        $row->cells[] = format_float($usersummary->takensessionspercentage * 100) . '%';
+                    }
+
+                }
+                $table->data[] = $row;
+                if ($usersummary->numtakensessions > 0) {
+                    $totalattendance++;
+                    $totalpercentage = $totalpercentage + format_float($usersummary->takensessionspercentage * 100);
+                }
+            }
+            $row = new html_table_row();
+            $average = format_float($totalpercentage / $totalattendance).'%';
+            $col = new html_table_cell(get_string('averageattendance', 'mod_attendance'));
+            $col->attributes['class'] = 'averageattendance';
+            $row->cells = array($col, '', '', '', $average);
+            $table->data[] = $row;
+
+            $o .= html_writer::table($table);
+        }
+
+        return $o;
+    }
+
+    /**
+     * Construct user sessions log.
+     *
+     * @param attendance_user_data $userdata
+     * @return string
+     */
+    private function construct_user_sessions_log(attendance_user_data $userdata) {
+        global $OUTPUT, $USER;
+        $context = context_module::instance($userdata->filtercontrols->cm->id);
+
+        $shortform = false;
+        if ($USER->id == $userdata->user->id) {
+            // This is a user viewing their own stuff - hide non-relevant columns.
+            $shortform = true;
+        }
+
+        $table = new html_table();
+        $table->attributes['class'] = 'generaltable attwidth boxaligncenter';
+        $table->head = array();
+        $table->align = array();
+        $table->size = array();
+        $table->colclasses = array();
+        if (!$shortform) {
+            $table->head[] = get_string('sessiontypeshort', 'attendance');
+            $table->align[] = '';
+            $table->size[] = '1px';
+            $table->colclasses[] = '';
+        }
+        $table->head[] = get_string('date');
+        $table->head[] = get_string('description', 'attendance');
+        $table->head[] = get_string('status', 'attendance');
+        $table->head[] = get_string('points', 'attendance');
+        $table->head[] = get_string('remarks', 'attendance');
+
+        $table->align = array_merge($table->align, array('', 'left', 'center', 'center', 'center'));
+        $table->colclasses = array_merge($table->colclasses, array('datecol', 'desccol', 'statuscol', 'pointscol', 'remarkscol'));
+        $table->size = array_merge($table->size, array('1px', '*', '*', '1px', '*'));
+
+        if (has_capability('mod/attendance:takeattendances', $context)) {
+            $table->head[] = get_string('action');
+            $table->align[] = '';
+            $table->size[] = '';
+        }
+
+        $statussetmaxpoints = attendance_get_statusset_maxpoints($userdata->statuses);
+
+        $i = 0;
+        foreach ($userdata->sessionslog as $sess) {
+            $i++;
+
+            $row = new html_table_row();
+            if (!$shortform) {
+                if ($sess->groupid) {
+                    $sessiontypeshort = get_string('group') . ': ' . $userdata->groups[$sess->groupid]->name;
+                } else {
+                    $sessiontypeshort = get_string('commonsession', 'attendance');
+                }
+
+                $row->cells[] = html_writer::tag('nobr', $sessiontypeshort);
+            }
+            $row->cells[] = userdate($sess->sessdate, get_string('strftimedmyw', 'attendance')) .
+             " ". $this->construct_time($sess->sessdate, $sess->duration);
+            $row->cells[] = $sess->description;
+            if (!empty($sess->statusid)) {
+                $status = $userdata->statuses[$sess->statusid];
+                $row->cells[] = $status->description;
+                $row->cells[] = format_float($status->grade, 1, true, true) . ' / ' .
+                                    format_float($statussetmaxpoints[$status->setnumber], 1, true, true);
+                $row->cells[] = $sess->remarks;
+            } else if ($sess->sessdate < $userdata->user->enrolmentstart) {
+                $cell = new html_table_cell(get_string('enrolmentstart', 'attendance',
+                                            userdate($userdata->user->enrolmentstart, '%d.%m.%Y')));
+                $cell->colspan = 3;
+                $row->cells[] = $cell;
+            } else if ($userdata->user->enrolmentend and $sess->sessdate > $userdata->user->enrolmentend) {
+                $cell = new html_table_cell(get_string('enrolmentend', 'attendance',
+                                            userdate($userdata->user->enrolmentend, '%d.%m.%Y')));
+                $cell->colspan = 3;
+                $row->cells[] = $cell;
+            } else {
+                if (attendance_can_student_mark($sess)) {
+                    // Student can mark their own attendance.
+                    // URL to the page that lets the student modify their attendance.
+
+                    $url = new moodle_url('/mod/attendance/attendance.php',
+                            array('sessid' => $sess->id, 'sesskey' => sesskey()));
+                    $cell = new html_table_cell(html_writer::link($url, get_string('submitattendance', 'attendance')));
+                    $cell->colspan = 3;
+                    $row->cells[] = $cell;
+                } else { // Student cannot mark their own attendace.
+                    $row->cells[] = '?';
+                    $row->cells[] = '? / ' . format_float($statussetmaxpoints[$sess->statusset], 1, true, true);
+                    $row->cells[] = '';
+                }
+            }
+
+            if (has_capability('mod/attendance:takeattendances', $context)) {
+                $params = array('id' => $userdata->filtercontrols->cm->id,
+                    'sessionid' => $sess->id,
+                    'grouptype' => $sess->groupid);
+                $url = new moodle_url('/mod/attendance/take.php', $params);
+                $icon = $OUTPUT->pix_icon('redo', get_string('changeattendance', 'attendance'), 'attendance');
+                $row->cells[] = html_writer::link($url, $icon);
+            }
+
+            $table->data[] = $row;
+        }
+
+        return html_writer::table($table);
+    }
+
+    /**
+     * Construct time for display.
+     *
+     * @param int $datetime
+     * @param int $duration
+     * @return string
+     */
+    private function construct_time($datetime, $duration) {
+        $time = html_writer::tag('nobr', construct_session_time($datetime, $duration));
+
+        return $time;
+    }
+
+    /**
+     * Render report data.
+     *
+     * @param attendance_report_data $reportdata
+     * @return string
+     */
+    protected function render_attendance_report_data(attendance_report_data $reportdata) {
+        global $PAGE, $COURSE;
+
+        // Initilise Javascript used to (un)check all checkboxes.
+        $this->page->requires->js_init_call('M.mod_attendance.init_manage');
+
+        $table = new html_table();
+        $table->attributes['class'] = 'generaltable attwidth attreport';
+
+        $userrows = $this->get_user_rows($reportdata);
+
+        if ($reportdata->pageparams->view == ATT_VIEW_SUMMARY) {
+            $sessionrows = array();
+        } else {
+            $sessionrows = $this->get_session_rows($reportdata);
+        }
+
+        $setnumber = -1;
+        $statusetcount = 0;
+        foreach ($reportdata->statuses as $sts) {
+            if ($sts->setnumber != $setnumber) {
+                $statusetcount++;
+                $setnumber = $sts->setnumber;
+            }
+        }
+
+        $acronymrows = $this->get_acronym_rows($reportdata, true);
+        $startwithcontrast = $statusetcount % 2 == 0;
+        $summaryrows = $this->get_summary_rows($reportdata, $startwithcontrast);
+
+        // Check if the user should be able to bulk send messages to other users on the course.
+        $bulkmessagecapability = has_capability('moodle/course:bulkmessaging', $PAGE->context);
+        if ($bulkmessagecapability) {
+            $bulkmessagingrows = $this->get_bulkmessage_rows($reportdata);
+        }
+
+        // Extract rows from each part and collate them into one row each.
+        $sessiondetailsleft = $reportdata->pageparams->sessiondetailspos == 'left';
+        foreach ($userrows as $index => $row) {
+            $summaryrow = isset($summaryrows[$index]->cells) ? $summaryrows[$index]->cells : array();
+            $bulkmessagingrow = isset($bulkmessagingrows[$index]->cells) ? $bulkmessagingrows[$index]->cells : array();
+            $sessionrow = isset($sessionrows[$index]->cells) ? $sessionrows[$index]->cells : array();
+            if ($sessiondetailsleft) {
+                $row->cells = array_merge($row->cells, $sessionrow, $acronymrows[$index]->cells, $summaryrow, $bulkmessagingrow);
+            } else {
+                $row->cells = array_merge($row->cells, $acronymrows[$index]->cells, $summaryrow, $sessionrow, $bulkmessagingrow);
+            }
+            $table->data[] = $row;
+        }
+
+        if ($bulkmessagecapability) { // Require that the user can bulk message users.
+            // Display check boxes that will allow the user to send a message to the students that have been checked.
+            $output = html_writer::empty_tag('input', array('name' => 'sesskey', 'type' => 'hidden', 'value' => sesskey()));
+            $output .= html_writer::empty_tag('input', array('name' => 'formaction', 'type' => 'hidden',
+                                                             'value' => 'messageselect.php'));
+            $output .= html_writer::empty_tag('input', array('name' => 'id', 'type' => 'hidden', 'value' => $COURSE->id));
+            $output .= html_writer::empty_tag('input', array('name' => 'returnto', 'type' => 'hidden', 'value' => s(me())));
+            $output .= html_writer::table($table).html_writer::tag('div', get_string('users').': '.count($reportdata->users));;
+            $output .= html_writer::tag('div',
+                    html_writer::empty_tag('input', array('type' => 'submit',
+                                                                   'value' => get_string('messageselectadd'),
+                                                                   'class' => 'btn btn-secondary')),
+                    array('class' => 'buttons'));
+            $url = new moodle_url('/user/action_redir.php');
+            return html_writer::tag('form', $output, array('action' => $url->out(), 'method' => 'post'));
+        } else {
+            return html_writer::table($table).html_writer::tag('div', get_string('users').': '.count($reportdata->users));
+        }
+    }
+
+    /**
+     * Build and return the rows that will make up the left part of the attendance report.
+     * This consists of student names and icons, as well as header cells for these columns.
+     *
+     * @param attendance_report_data $reportdata the report data
+     * @return array Array of html_table_row objects
+     */
+    protected function get_user_rows(attendance_report_data $reportdata) {
+        $rows = array();
+        $extrafields = get_extra_user_fields($reportdata->att->context);
+        $usercolspan = 1 + count($extrafields);
+
+        $row = new html_table_row();
+        $row->cells[] = $this->build_header_cell('');
+        $row->cells[] = $this->build_header_cell(get_string('users'), false, false, $usercolspan);
+        $rows[] = $row;
+
+        $row = new html_table_row();
+        $row->cells[] = $this->build_header_cell('');
+        $row->cells[] = $this->build_header_cell($this->construct_fullname_head($reportdata), false, false);
+
+        foreach ($extrafields as $field) {
+            $row->cells[] = $this->build_header_cell(get_string($field), false, false);
+        }
+
+        $rows[] = $row;
+
+        foreach ($reportdata->users as $user) {
+            $row = new html_table_row();
+            $row->cells[] = $this->build_data_cell($this->user_picture($user));
+            $text = html_writer::link($reportdata->url_view(array('studentid' => $user->id)), fullname($user));
+            $row->cells[] = $this->build_data_cell($text, false, false, null, null, false);
+            foreach ($extrafields as $field) {
+                $row->cells[] = $this->build_data_cell($user->$field, false, false);
+            }
+            $rows[] = $row;
+        }
+
+        $row = new html_table_row();
+        $row->cells[] = $this->build_data_cell('');
+        $text = ($reportdata->pageparams->view == ATT_VIEW_SUMMARY) ? '' : get_string('summary');
+        $row->cells[] = $this->build_data_cell($text, false, true, $usercolspan);
+        $rows[] = $row;
+
+        return $rows;
+    }
+
+    /**
+     * Build and return the rows that will make up the summary part of the attendance report.
+     * This consists of countings for each status set acronyms, as well as header cells for these columns.
+     *
+     * @param attendance_report_data $reportdata the report data
+     * @param boolean $startwithcontrast true if the first column must start with contrast (bgcolor)
+     * @return array Array of html_table_row objects
+     */
+    protected function get_acronym_rows(attendance_report_data $reportdata, $startwithcontrast=false) {
+        $rows = array();
+
+        $summarycells = array();
+
+        $row1 = new html_table_row();
+        $row2 = new html_table_row();
+
+        $setnumber = -1;
+        $contrast = !$startwithcontrast;
+        foreach ($reportdata->statuses as $sts) {
+            if ($sts->setnumber != $setnumber) {
+                $contrast = !$contrast;
+                $setnumber = $sts->setnumber;
+                $text = attendance_get_setname($reportdata->att->id, $setnumber, false);
+                $cell = $this->build_header_cell($text, $contrast);
+                $row1->cells[] = $cell;
+            }
+            $cell->colspan++;
+            $sts->contrast = $contrast;
+            $row2->cells[] = $this->build_header_cell($sts->acronym, $contrast);
+            $summarycells[] = $this->build_data_cell('', $contrast);
+        }
+
+        $rows[] = $row1;
+        $rows[] = $row2;
+
+        foreach ($reportdata->users as $user) {
+            if ($reportdata->pageparams->view == ATT_VIEW_SUMMARY) {
+                $usersummary = $reportdata->summary->get_all_sessions_summary_for($user->id);
+            } else {
+                $usersummary = $reportdata->summary->get_taken_sessions_summary_for($user->id);
+            }
+
+            $row = new html_table_row();
+            foreach ($reportdata->statuses as $sts) {
+                if (isset($usersummary->userstakensessionsbyacronym[$sts->setnumber][$sts->acronym])) {
+                    $text = $usersummary->userstakensessionsbyacronym[$sts->setnumber][$sts->acronym];
+                } else {
+                    $text = 0;
+                }
+                $row->cells[] = $this->build_data_cell($text, $sts->contrast);
+            }
+
+            $rows[] = $row;
+        }
+
+        $rows[] = new html_table_row($summarycells);
+
+        return $rows;
+    }
+
+    /**
+     * Build and return the rows that will make up the summary part of the attendance report.
+     * This consists of counts and percentages for taken sessions (all sessions for summary report),
+     * as well as header cells for these columns.
+     *
+     * @param attendance_report_data $reportdata the report data
+     * @param boolean $startwithcontrast true if the first column must start with contrast (bgcolor)
+     * @return array Array of html_table_row objects
+     */
+    protected function get_summary_rows(attendance_report_data $reportdata, $startwithcontrast=false) {
+        $rows = array();
+
+        $contrast = $startwithcontrast;
+        $summarycells = array();
+
+        $row1 = new html_table_row();
+        $helpicon = $this->output->help_icon('oversessionstaken', 'attendance');
+        $row1->cells[] = $this->build_header_cell(get_string('oversessionstaken', 'attendance') . $helpicon, $contrast, true, 3);
+
+        $row2 = new html_table_row();
+        $row2->cells[] = $this->build_header_cell(get_string('sessions', 'attendance'), $contrast);
+        $row2->cells[] = $this->build_header_cell(get_string('points', 'attendance'), $contrast);
+        $row2->cells[] = $this->build_header_cell(get_string('percentage', 'attendance'), $contrast);
+        $summarycells[] = $this->build_data_cell('', $contrast);
+        $summarycells[] = $this->build_data_cell('', $contrast);
+        $summarycells[] = $this->build_data_cell('', $contrast);
+
+        if ($reportdata->pageparams->view == ATT_VIEW_SUMMARY) {
+            $contrast = !$contrast;
+
+            $helpicon = $this->output->help_icon('overallsessions', 'attendance');
+            $row1->cells[] = $this->build_header_cell(get_string('overallsessions', 'attendance') . $helpicon, $contrast, true, 3);
+
+            $row2->cells[] = $this->build_header_cell(get_string('sessions', 'attendance'), $contrast);
+            $row2->cells[] = $this->build_header_cell(get_string('points', 'attendance'), $contrast);
+            $row2->cells[] = $this->build_header_cell(get_string('percentage', 'attendance'), $contrast);
+            $summarycells[] = $this->build_data_cell('', $contrast);
+            $summarycells[] = $this->build_data_cell('', $contrast);
+            $summarycells[] = $this->build_data_cell('', $contrast);
+
+            $contrast = !$contrast;
+            $helpicon = $this->output->help_icon('maxpossible', 'attendance');
+            $row1->cells[] = $this->build_header_cell(get_string('maxpossible', 'attendance') . $helpicon, $contrast, true, 2);
+
+            $row2->cells[] = $this->build_header_cell(get_string('points', 'attendance'), $contrast);
+            $row2->cells[] = $this->build_header_cell(get_string('percentage', 'attendance'), $contrast);
+            $summarycells[] = $this->build_data_cell('', $contrast);
+            $summarycells[] = $this->build_data_cell('', $contrast);
+        }
+
+        $rows[] = $row1;
+        $rows[] = $row2;
+
+        foreach ($reportdata->users as $user) {
+            if ($reportdata->pageparams->view == ATT_VIEW_SUMMARY) {
+                $usersummary = $reportdata->summary->get_all_sessions_summary_for($user->id);
+            } else {
+                $usersummary = $reportdata->summary->get_taken_sessions_summary_for($user->id);
+            }
+
+            $contrast = $startwithcontrast;
+            $row = new html_table_row();
+            $row->cells[] = $this->build_data_cell($usersummary->numtakensessions, $contrast);
+            $text = format_float($usersummary->takensessionspoints, 1, true, true) . ' / ' .
+                                format_float($usersummary->takensessionsmaxpoints, 1, true, true);
+            $row->cells[] = $this->build_data_cell($text, $contrast);
+            $row->cells[] = $this->build_data_cell(format_float($usersummary->takensessionspercentage * 100) . '%', $contrast);
+
+            if ($reportdata->pageparams->view == ATT_VIEW_SUMMARY) {
+                $contrast = !$contrast;
+                $row->cells[] = $this->build_data_cell($usersummary->numallsessions, $contrast);
+                $text = format_float($usersummary->takensessionspoints, 1, true, true) . ' / ' .
+                                format_float($usersummary->allsessionsmaxpoints, 1, true, true);
+                $row->cells[] = $this->build_data_cell($text, $contrast);
+                $row->cells[] = $this->build_data_cell(format_float($usersummary->allsessionspercentage * 100) . '%', $contrast);
+
+                $contrast = !$contrast;
+                $text = format_float($usersummary->maxpossiblepoints, 1, true, true) . ' / ' .
+                                format_float($usersummary->allsessionsmaxpoints, 1, true, true);
+                $row->cells[] = $this->build_data_cell($text, $contrast);
+                $row->cells[] = $this->build_data_cell(format_float($usersummary->maxpossiblepercentage * 100) . '%', $contrast);
+            }
+
+            $rows[] = $row;
+        }
+
+        $rows[] = new html_table_row($summarycells);
+
+        return $rows;
+    }
+
+    /**
+     * Build and return the rows that will make up the attendance report.
+     * This consists of details for each selected session, as well as header and summary cells for these columns.
+     *
+     * @param attendance_report_data $reportdata the report data
+     * @param boolean $startwithcontrast true if the first column must start with contrast (bgcolor)
+     * @return array Array of html_table_row objects
+     */
+    protected function get_session_rows(attendance_report_data $reportdata, $startwithcontrast=false) {
+        global $OUTPUT;
+
+        $rows = array();
+
+        $row = new html_table_row();
+
+        $showsessiondetails = $reportdata->pageparams->showsessiondetails;
+        $text = get_string('sessions', 'attendance');
+        $params = $reportdata->pageparams->get_significant_params();
+        if (count($reportdata->sessions) > 1) {
+            if ($showsessiondetails) {
+                $params['showsessiondetails'] = 0;
+                $url = $reportdata->att->url_report($params);
+                $text .= $OUTPUT->action_icon($url, new pix_icon('t/switch_minus',
+                            get_string('hidensessiondetails', 'attendance')), null, null);
+                $colspan = count($reportdata->sessions);
+            } else {
+                $params['showsessiondetails'] = 1;
+                $url = $reportdata->att->url_report($params);
+                $text .= $OUTPUT->action_icon($url, new pix_icon('t/switch_plus',
+                            get_string('showsessiondetails', 'attendance')), null, null);
+                $colspan = 1;
+            }
+        } else {
+            $colspan = 1;
+        }
+
+        $params = $reportdata->pageparams->get_significant_params();
+        if ($reportdata->pageparams->sessiondetailspos == 'left') {
+            $params['sessiondetailspos'] = 'right';
+            $url = $reportdata->att->url_report($params);
+            $text .= $OUTPUT->action_icon($url, new pix_icon('t/right', get_string('moveright', 'attendance')), null, null);
+        } else {
+            $params['sessiondetailspos'] = 'left';
+            $url = $reportdata->att->url_report($params);
+            $text = $OUTPUT->action_icon($url, new pix_icon('t/left', get_string('moveleft', 'attendance')), null, null) . $text;
+        }
+
+        $row->cells[] = $this->build_header_cell($text, '', true, $colspan);
+        $rows[] = $row;
+
+        $row = new html_table_row();
+        if ($showsessiondetails && !empty($reportdata->sessions)) {
+            foreach ($reportdata->sessions as $sess) {
+                $sesstext = userdate($sess->sessdate, get_string('strftimedm', 'attendance'));
+                $sesstext .= html_writer::empty_tag('br');
+                $sesstext .= attendance_strftimehm($sess->sessdate);
+                $capabilities = array(
+                    'mod/attendance:takeattendances',
+                    'mod/attendance:changeattendances'
+                );
+                if (is_null($sess->lasttaken) and has_any_capability($capabilities, $reportdata->att->context)) {
+                    $sesstext = html_writer::link($reportdata->url_take($sess->id, $sess->groupid), $sesstext);
+                }
+                $sesstext .= html_writer::empty_tag('br');
+                if ($sess->groupid) {
+                    if (empty($reportdata->groups[$sess->groupid])) {
+                        $sesstext .= html_writer::tag('small', get_string('deletedgroup', 'attendance'));
+                    } else {
+                        $sesstext .= html_writer::tag('small', $reportdata->groups[$sess->groupid]->name);
+                    }
+
+                } else {
+                    $sesstext .= html_writer::tag('small', get_string('commonsession', 'attendance'));
+                }
+
+                $row->cells[] = $this->build_header_cell($sesstext, false, true, null, null, false);
+            }
+        } else {
+            $row->cells[] = $this->build_header_cell('');
+        }
+        $rows[] = $row;
+
+        foreach ($reportdata->users as $user) {
+            $row = new html_table_row();
+            if ($showsessiondetails && !empty($reportdata->sessions)) {
+                $cellsgenerator = new user_sessions_cells_html_generator($reportdata, $user);
+                foreach ($cellsgenerator->get_cells(true) as $cell) {
+                    if ($cell instanceof html_table_cell) {
+                        $cell->attributes['class'] .= ' center';
+                        $row->cells[] = $cell;
+                    } else {
+                        $row->cells[] = $this->build_data_cell($cell);
+                    }
+                }
+            } else {
+                $row->cells[] = $this->build_data_cell('');
+            }
+            $rows[] = $row;
+        }
+
+        $row = new html_table_row();
+        if ($showsessiondetails && !empty($reportdata->sessions)) {
+            foreach ($reportdata->sessions as $sess) {
+                $sessionstats = array();
+                foreach ($reportdata->statuses as $status) {
+                    if ($status->setnumber == $sess->statusset) {
+                        $status->count = 0;
+                        $sessionstats[$status->id] = $status;
+                    }
+                }
+
+                foreach ($reportdata->users as $user) {
+                    if (!empty($reportdata->sessionslog[$user->id][$sess->id])) {
+                        $statusid = $reportdata->sessionslog[$user->id][$sess->id]->statusid;
+                        if (isset($sessionstats[$statusid]->count)) {
+                            $sessionstats[$statusid]->count++;
+                        }
+                    }
+                }
+
+                $statsoutput = '';
+                foreach ($sessionstats as $status) {
+                    $statsoutput .= "$status->description: {$status->count}<br/>";
+                }
+                $row->cells[] = $this->build_data_cell($statsoutput);
+            }
+        } else {
+            $row->cells[] = $this->build_header_cell('');
+        }
+        $rows[] = $row;
+
+        return $rows;
+    }
+
+    /**
+     * Build and return the rows that will make up the right part of the attendance report.
+     * This consists of checkbox column for bulk message.
+     *
+     * @param attendance_report_data $reportdata the report data
+     * @return array Array of html_table_row objects
+     */
+    protected function get_bulkmessage_rows(attendance_report_data $reportdata) {
+        $rows = array();
+
+        $row = new html_table_row();
+        $row->cells[] = $this->build_header_cell('');
+        $rows[] = $row;
+
+        // Display the table header for bulk messaging.
+        // The checkbox must have an id of cb_selector so that the JavaScript will pick it up.
+        $row = new html_table_row();
+        $text = html_writer::checkbox('cb_selector', 0, false, '', array('id' => 'cb_selector'));
+        $row->cells[] = $this->build_header_cell($text);
+        $rows[] = $row;
+
+        foreach ($reportdata->users as $user) {
+            // Create the checkbox for bulk messaging.
+            $row = new html_table_row();
+            $text = html_writer::checkbox('user'.$user->id, 'on', false, '', array('class' => 'attendancesesscheckbox'));
+            $row->cells[] = $this->build_data_cell($text);
+            $rows[] = $row;
+        }
+
+        $row = new html_table_row();
+        $row->cells[] = $this->build_data_cell('');
+        $rows[] = $row;
+
+        return $rows;
+    }
+
+    /**
+     * Build and return a html_table_cell for header rows
+     *
+     * @param html_table_cell|string $cell the cell or a label for a cell
+     * @param boolean $contrast true menans the cell must be shown with bgcolor contrast
+     * @param boolean $center true means the cell text should be centered. Othersiwe it should be left-aligned.
+     * @param int $colspan how many columns should cell spans
+     * @param int $rowspan how many rows should cell spans
+     * @param boolean $nowrap true means the cell text must be shown with nowrap option
+     * @return html_table_cell a html table cell
+     */
+    protected function build_header_cell($cell, $contrast=false, $center=true, $colspan=null, $rowspan=null, $nowrap=true) {
+        $classes = array('header', 'bottom');
+        if ($center) {
+            $classes[] = 'center';
+            $classes[] = 'narrow';
+        } else {
+            $classes[] = 'left';
+        }
+        if ($contrast) {
+            $classes[] = 'contrast';
+        }
+        if ($nowrap) {
+            $classes[] = 'nowrap';
+        }
+        return $this->build_cell($cell, $classes, $colspan, $rowspan, true);
+    }
+
+    /**
+     * Build and return a html_table_cell for data rows
+     *
+     * @param html_table_cell|string $cell the cell or a label for a cell
+     * @param boolean $contrast true menans the cell must be shown with bgcolor contrast
+     * @param boolean $center true means the cell text should be centered. Othersiwe it should be left-aligned.
+     * @param int $colspan how many columns should cell spans
+     * @param int $rowspan how many rows should cell spans
+     * @param boolean $nowrap true means the cell text must be shown with nowrap option
+     * @return html_table_cell a html table cell
+     */
+    protected function build_data_cell($cell, $contrast=false, $center=true, $colspan=null, $rowspan=null, $nowrap=true) {
+        $classes = array();
+        if ($center) {
+            $classes[] = 'center';
+            $classes[] = 'narrow';
+        } else {
+            $classes[] = 'left';
+        }
+        if ($nowrap) {
+            $classes[] = 'nowrap';
+        }
+        if ($contrast) {
+            $classes[] = 'contrast';
+        }
+        return $this->build_cell($cell, $classes, $colspan, $rowspan, false);
+    }
+
+    /**
+     * Build and return a html_table_cell for header or data rows
+     *
+     * @param html_table_cell|string $cell the cell or a label for a cell
+     * @param Array $classes a list of css classes
+     * @param int $colspan how many columns should cell spans
+     * @param int $rowspan how many rows should cell spans
+     * @param boolean $header true if this should be a header cell
+     * @return html_table_cell a html table cell
+     */
+    protected function build_cell($cell, $classes, $colspan=null, $rowspan=null, $header=false) {
+        if (!($cell instanceof html_table_cell)) {
+            $cell = new html_table_cell($cell);
+        }
+        $cell->header = $header;
+        $cell->scope = 'col';
+
+        if (!empty($colspan) && $colspan > 1) {
+            $cell->colspan = $colspan;
+        }
+
+        if (!empty($rowspan) && $rowspan > 1) {
+            $cell->rowspan = $rowspan;
+        }
+
+        if (!empty($classes)) {
+            $classes = implode(' ', $classes);
+            if (empty($cell->attributes['class'])) {
+                $cell->attributes['class'] = $classes;
+            } else {
+                $cell->attributes['class'] .= ' ' . $classes;
+            }
+        }
+
+        return $cell;
+    }
+
+    /**
+     * Output the status set selector.
+     *
+     * @param attendance_set_selector $sel
+     * @return string
+     */
+    protected function render_attendance_set_selector(attendance_set_selector $sel) {
+        $current = $sel->get_current_statusset();
+        $selected = null;
+        $opts = array();
+        for ($i = 0; $i <= $sel->maxstatusset; $i++) {
+            $url = $sel->url($i);
+            $display = $sel->get_status_name($i);
+            $opts[$url->out(false)] = $display;
+            if ($i == $current) {
+                $selected = $url->out(false);
+            }
+        }
+        $newurl = $sel->url($sel->maxstatusset + 1);
+        $opts[$newurl->out(false)] = get_string('newstatusset', 'mod_attendance');
+        if ($current == $sel->maxstatusset + 1) {
+            $selected = $newurl->out(false);
+        }
+
+        return $this->output->url_select($opts, $selected, null);
+    }
+
+    /**
+     * Render preferences data.
+     *
+     * @param stdClass $prefdata
+     * @return string
+     */
+    protected function render_attendance_preferences_data($prefdata) {
+        $this->page->requires->js('/mod/attendance/module.js');
+
+        $studentscanmark = false;
+        if (!empty(get_config('attendance', 'studentscanmark'))) {
+            $studentscanmark = true;
+        }
+
+        $table = new html_table();
+        $table->width = '100%';
+        $table->head = array('#',
+                             get_string('acronym', 'attendance'),
+                             get_string('description'),
+                             get_string('points', 'attendance'));
+        $table->align = array('center', 'center', 'center', 'center', 'center', 'center');
+        if ($studentscanmark) {
+            $table->head[] = get_string('studentavailability', 'attendance').
+                $this->output->help_icon('studentavailability', 'attendance');
+            $table->align[] = 'center';
+
+            $table->head[] = get_string('setunmarked', 'attendance').
+                $this->output->help_icon('setunmarked', 'attendance');
+            $table->align[] = 'center';
+        }
+        $table->head[] = get_string('action');
+
+        $i = 1;
+        foreach ($prefdata->statuses as $st) {
+            $emptyacronym = '';
+            $emptydescription = '';
+            if (isset($prefdata->errors[$st->id]) && !empty(($prefdata->errors[$st->id]))) {
+                if (empty($prefdata->errors[$st->id]['acronym'])) {
+                    $emptyacronym = $this->construct_notice(get_string('emptyacronym', 'mod_attendance'), 'notifyproblem');
+                }
+                if (empty($prefdata->errors[$st->id]['description'])) {
+                    $emptydescription = $this->construct_notice(get_string('emptydescription', 'mod_attendance') , 'notifyproblem');
+                }
+            }
+            $cells = array();
+            $cells[] = $i;
+            $cells[] = $this->construct_text_input('acronym['.$st->id.']', 2, 2, $st->acronym) . $emptyacronym;
+            $cells[] = $this->construct_text_input('description['.$st->id.']', 30, 30, $st->description) .
+                                 $emptydescription;
+            $cells[] = $this->construct_text_input('grade['.$st->id.']', 4, 4, $st->grade);
+            if ($studentscanmark) {
+                $checked = '';
+                if ($st->setunmarked) {
+                    $checked = ' checked ';
+                }
+                $cells[] = $this->construct_text_input('studentavailability['.$st->id.']', 4, 5, $st->studentavailability);
+                $cells[] = '<input type="radio" name="setunmarked" value="'.$st->id.'"'.$checked.'>';
+            }
+            $cells[] = $this->construct_preferences_actions_icons($st, $prefdata);
+
+            $table->data[$i] = new html_table_row($cells);
+            $table->data[$i]->id = "statusrow".$i;
+            $i++;
+        }
+
+        $table->data[$i][] = '*';
+        $table->data[$i][] = $this->construct_text_input('newacronym', 2, 2);
+        $table->data[$i][] = $this->construct_text_input('newdescription', 30, 30);
+        $table->data[$i][] = $this->construct_text_input('newgrade', 4, 4);
+        if ($studentscanmark) {
+            $table->data[$i][] = $this->construct_text_input('newstudentavailability', 4, 5);
+        }
+        $table->data[$i][] = $this->construct_preferences_button(get_string('add', 'attendance'),
+            mod_attendance_preferences_page_params::ACTION_ADD);
+
+        $o = html_writer::table($table);
+        $o .= html_writer::input_hidden_params($prefdata->url(array(), false));
+        // We should probably rewrite this to use mforms but for now add sesskey.
+        $o .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'sesskey', 'value' => sesskey()))."\n";
+
+        $o .= $this->construct_preferences_button(get_string('update', 'attendance'),
+                                                  mod_attendance_preferences_page_params::ACTION_SAVE);
+        $o = html_writer::tag('form', $o, array('id' => 'preferencesform', 'method' => 'post',
+                                                'action' => $prefdata->url(array(), false)->out_omit_querystring()));
+        $o = $this->output->container($o, 'generalbox attwidth');
+
+        return $o;
+    }
+
+    /**
+     * Render default statusset.
+     *
+     * @param attendance_default_statusset $prefdata
+     * @return string
+     */
+    protected function render_attendance_default_statusset(attendance_default_statusset $prefdata) {
+        return $this->render_attendance_preferences_data($prefdata);
+    }
+
+    /**
+     * Render preferences data.
+     *
+     * @param stdClass $prefdata
+     * @return string
+     */
+    protected function render_attendance_pref($prefdata) {
+
+    }
+
+    /**
+     * Construct text input.
+     *
+     * @param string $name
+     * @param integer $size
+     * @param integer $maxlength
+     * @param string $value
+     * @return string
+     */
+    private function construct_text_input($name, $size, $maxlength, $value='') {
+        $attributes = array(
+                'type'      => 'text',
+                'name'      => $name,
+                'size'      => $size,
+                'maxlength' => $maxlength,
+                'value'     => $value,
+                'class' => 'form-control');
+        return html_writer::empty_tag('input', $attributes);
+    }
+
+    /**
+     * Construct action icons.
+     *
+     * @param stdClass $st
+     * @param stdClass $prefdata
+     * @return string
+     */
+    private function construct_preferences_actions_icons($st, $prefdata) {
+        global $OUTPUT;
+        $params = array('sesskey' => sesskey(),
+                        'statusid' => $st->id);
+        if ($st->visible) {
+            $params['action'] = mod_attendance_preferences_page_params::ACTION_HIDE;
+            $showhideicon = $OUTPUT->action_icon(
+                    $prefdata->url($params),
+                    new pix_icon("t/hide", get_string('hide')));
+        } else {
+            $params['action'] = mod_attendance_preferences_page_params::ACTION_SHOW;
+            $showhideicon = $OUTPUT->action_icon(
+                    $prefdata->url($params),
+                    new pix_icon("t/show", get_string('show')));
+        }
+        if (empty($st->haslogs)) {
+            $params['action'] = mod_attendance_preferences_page_params::ACTION_DELETE;
+            $deleteicon = $OUTPUT->action_icon(
+                    $prefdata->url($params),
+                    new pix_icon("t/delete", get_string('delete')));
+        } else {
+            $deleteicon = '';
+        }
+
+        return $showhideicon . $deleteicon;
+    }
+
+    /**
+     * Construct preferences button.
+     *
+     * @param string $text
+     * @param string $action
+     * @return string
+     */
+    private function construct_preferences_button($text, $action) {
+        $attributes = array(
+                'type'      => 'submit',
+                'value'     => $text,
+                'class'     => 'btn btn-secondary',
+                'onclick'   => 'M.mod_attendance.set_preferences_action('.$action.')');
+        return html_writer::empty_tag('input', $attributes);
+    }
+
+    /**
+     * Construct a notice message
+     *
+     * @param string $text
+     * @param string $class
+     * @return string
+     */
+    private function construct_notice($text, $class = 'notifymessage') {
+        $attributes = array('class' => $class);
+        return html_writer::tag('p', $text, $attributes);
+    }
+
+    /**
+     * Show different picture if it is a temporary user.
+     *
+     * @param stdClass $user
+     * @param array $opts
+     * @return string
+     */
+    protected function user_picture($user, array $opts = null) {
+        if ($user->type == 'temporary') {
+            $attrib = array(
+                'width' => '35',
+                'height' => '35',
+                'class' => 'userpicture defaultuserpic',
+            );
+            if (isset($opts['size'])) {
+                $attrib['width'] = $attrib['height'] = $opts['size'];
+            }
+            return $this->output->pix_icon('ghost', '', 'mod_attendance', $attrib);
+        }
+
+        return $this->output->user_picture($user, $opts);
+    }
+}
diff --git a/mod/attendance/renderhelpers.php b/mod/attendance/renderhelpers.php
new file mode 100644
index 0000000..216d459
--- /dev/null
+++ b/mod/attendance/renderhelpers.php
@@ -0,0 +1,455 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance module renderering helpers
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once(dirname(__FILE__).'/renderables.php');
+
+/**
+ * class Template method for generating user's session's cells
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class user_sessions_cells_generator {
+    /** @var array $cells - list of table cells. */
+    protected $cells = array();
+
+    /** @var stdClass $reportdata - data for report. */
+    protected $reportdata;
+
+    /** @var stdClass $user - user record. */
+    protected $user;
+
+    /**
+     * Set up params.
+     * @param attendance_report_data $reportdata - reportdata.
+     * @param stdClass $user - user record.
+     */
+    public function  __construct(attendance_report_data $reportdata, $user) {
+        $this->reportdata = $reportdata;
+        $this->user = $user;
+    }
+
+    /**
+     * Get cells for the table.
+     *
+     * @param boolean $remarks - include remarks cell.
+     */
+    public function get_cells($remarks = false) {
+        foreach ($this->reportdata->sessions as $sess) {
+            if (array_key_exists($sess->id, $this->reportdata->sessionslog[$this->user->id]) &&
+            !empty($this->reportdata->sessionslog[$this->user->id][$sess->id]->statusid)) {
+                $statusid = $this->reportdata->sessionslog[$this->user->id][$sess->id]->statusid;
+                if (array_key_exists($statusid, $this->reportdata->statuses)) {
+                    $points = format_float($this->reportdata->statuses[$statusid]->grade, 1, true, true);
+                    $maxpoints = format_float($sess->maxpoints, 1, true, true);
+                    $this->construct_existing_status_cell($this->reportdata->statuses[$statusid]->acronym .
+                                " ({$points}/{$maxpoints})");
+                } else {
+                    $this->construct_hidden_status_cell($this->reportdata->allstatuses[$statusid]->acronym);
+                }
+                if ($remarks) {
+                    $this->construct_remarks_cell($this->reportdata->sessionslog[$this->user->id][$sess->id]->remarks);
+                }
+            } else {
+                if ($this->user->enrolmentstart > $sess->sessdate) {
+                    $starttext = get_string('enrolmentstart', 'attendance', userdate($this->user->enrolmentstart, '%d.%m.%Y'));
+                    $this->construct_enrolments_info_cell($starttext);
+                } else if ($this->user->enrolmentend and $this->user->enrolmentend < $sess->sessdate) {
+                    $endtext = get_string('enrolmentend', 'attendance', userdate($this->user->enrolmentend, '%d.%m.%Y'));
+                    $this->construct_enrolments_info_cell($endtext);
+                } else if (!$this->user->enrolmentend and $this->user->enrolmentstatus == ENROL_USER_SUSPENDED) {
+                    // No enrolmentend and ENROL_USER_SUSPENDED.
+                    $suspendext = get_string('enrolmentsuspended', 'attendance', userdate($this->user->enrolmentend, '%d.%m.%Y'));
+                    $this->construct_enrolments_info_cell($suspendext);
+                } else {
+                    if ($sess->groupid == 0 or array_key_exists($sess->groupid, $this->reportdata->usersgroups[$this->user->id])) {
+                        $this->construct_not_taken_cell('?');
+                    } else {
+                        $this->construct_not_existing_for_user_session_cell('');
+                    }
+                }
+                if ($remarks) {
+                    $this->construct_remarks_cell('');
+                }
+            }
+        }
+        $this->finalize_cells();
+
+        return $this->cells;
+    }
+
+    /**
+     * Construct status cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_existing_status_cell($text) {
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Construct hidden status cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_hidden_status_cell($text) {
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Construct enrolments info cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_enrolments_info_cell($text) {
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Construct not taken cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_not_taken_cell($text) {
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Construct remarks cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_remarks_cell($text) {
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Construct not existing user session cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_not_existing_for_user_session_cell($text) {
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Dummy stub method, called at the end. - override if you need/
+     */
+    protected function finalize_cells() {
+    }
+}
+
+/**
+ * class Template method for generating user's session's cells in html
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class user_sessions_cells_html_generator extends user_sessions_cells_generator {
+    /** @var html_table_cell $cell */
+    private $cell;
+
+    /**
+     * Construct status cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_existing_status_cell($text) {
+        $this->close_open_cell_if_needed();
+        $this->cells[] = html_writer::span($text, 'attendancestatus-'.$text);
+    }
+
+    /**
+     * Construct hidden status cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_hidden_status_cell($text) {
+        $this->cells[] = html_writer::tag('s', $text);
+    }
+
+    /**
+     * Construct enrolments info cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_enrolments_info_cell($text) {
+        if (is_null($this->cell)) {
+            $this->cell = new html_table_cell($text);
+            $this->cell->colspan = 1;
+        } else {
+            if ($this->cell->text != $text) {
+                $this->cells[] = $this->cell;
+                $this->cell = new html_table_cell($text);
+                $this->cell->colspan = 1;
+            } else {
+                $this->cell->colspan++;
+            }
+        }
+    }
+
+    /**
+     * Close cell if needed.
+     */
+    private function close_open_cell_if_needed() {
+        if ($this->cell) {
+            $this->cells[] = $this->cell;
+            $this->cell = null;
+        }
+    }
+
+    /**
+     * Construct not taken cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_not_taken_cell($text) {
+        $this->close_open_cell_if_needed();
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Construct remarks cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_remarks_cell($text) {
+        global $OUTPUT;
+
+        if (!trim($text)) {
+            return;
+        }
+
+        // Format the remark.
+        $icon = $OUTPUT->pix_icon('i/info', '');
+        $remark = html_writer::span($text, 'remarkcontent');
+        $remark = html_writer::span($icon.$remark, 'remarkholder');
+
+        // Add it into the previous cell.
+        $markcell = array_pop($this->cells);
+        $markcell .= ' '.$remark;
+        $this->cells[] = $markcell;
+    }
+
+    /**
+     * Construct not existing for user session cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_not_existing_for_user_session_cell($text) {
+        $this->close_open_cell_if_needed();
+        $this->cells[] = $text;
+    }
+
+    /**
+     * Finalize cells.
+     *
+     */
+    protected function finalize_cells() {
+        if ($this->cell) {
+            $this->cells[] = $this->cell;
+        }
+    }
+}
+
+/**
+ * class Template method for generating user's session's cells in text
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class user_sessions_cells_text_generator extends user_sessions_cells_generator {
+    /** @var string $enrolmentsinfocelltext. */
+    private $enrolmentsinfocelltext;
+
+    /**
+     * Construct hidden status cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_hidden_status_cell($text) {
+        $this->cells[] = '-'.$text;
+    }
+
+    /**
+     * Construct enrolments info cell.
+     *
+     * @param string $text - text for the cell.
+     */
+    protected function construct_enrolments_info_cell($text) {
+        if ($this->enrolmentsinfocelltext != $text) {
+            $this->enrolmentsinfocelltext = $text;
+            $this->cells[] = $text;
+        } else {
+            $this->cells[] = '←';
+        }
+    }
+}
+
+/**
+ * Used to print simple time - 1am instead of 1:00am.
+ *
+ * @param int $time - unix timestamp.
+ */
+function attendance_strftimehm($time) {
+    $mins = userdate($time, '%M');
+    if ($mins == '00') {
+        $format = get_string('strftimeh', 'attendance');
+    } else {
+        $format = get_string('strftimehm', 'attendance');
+    }
+
+    $userdate = userdate($time, $format);
+
+    // Some Lang packs use %p to suffix with AM/PM but not all strftime support this.
+    // Check if %p is in use and make sure it's being respected.
+    if (stripos($format, '%p')) {
+        // Check if $userdate did something with %p by checking userdate against the same format without %p
+        $formatwithoutp = str_ireplace('%p', '', $format);
+        if (userdate($time, $formatwithoutp) == $userdate) {
+            // The date is the same with and without %p - we have a problem.
+            if (userdate($time, '%H') > 11) {
+                $userdate .= 'pm';
+            } else {
+                $userdate .= 'am';
+            }
+        }
+        // Some locales and O/S don't respect correct intended case of %p vs %P
+        // This can cause problems with behat which expects AM vs am.
+        if (strpos($format, '%p')) { // Should be upper case according to PHP spec.
+            $userdate = str_replace('am', 'AM', $userdate);
+            $userdate = str_replace('pm', 'PM', $userdate);
+        }
+    }
+
+    return $userdate;
+}
+
+/**
+ * Used to print simple time - 1am instead of 1:00am.
+ *
+ * @param int $datetime - unix timestamp.
+ * @param int $duration - number of seconds.
+ */
+function construct_session_time($datetime, $duration) {
+    $starttime = attendance_strftimehm($datetime);
+    $endtime = attendance_strftimehm($datetime + $duration);
+
+    return $starttime . ($duration > 0 ? ' - ' . $endtime : '');
+}
+
+/**
+ * Used to print session time.
+ *
+ * @param int $datetime - unix timestamp.
+ * @param int $duration - number of seconds duration.
+ * @return string.
+ */
+function construct_session_full_date_time($datetime, $duration) {
+    $sessinfo = userdate($datetime, get_string('strftimedmyw', 'attendance'));
+    $sessinfo .= ' '.construct_session_time($datetime, $duration);
+
+    return $sessinfo;
+}
+
+/**
+ * Used to construct user summary.
+ *
+ * @param stdclass $usersummary - data for summary.
+ * @param int $view - ATT_VIEW_ALL|ATT_VIEW_
+ * @return string.
+ */
+function construct_user_data_stat($usersummary, $view) {
+    $stattable = new html_table();
+    $stattable->attributes['class'] = 'attlist';
+    $row = new html_table_row();
+    $row->attributes['class'] = 'normal';
+    $row->cells[] = get_string('sessionscompleted', 'attendance') . ':';
+    $row->cells[] = $usersummary->numtakensessions;
+    $stattable->data[] = $row;
+
+    $row = new html_table_row();
+    $row->attributes['class'] = 'normal';
+    $row->cells[] = get_string('pointssessionscompleted', 'attendance') . ':';
+    $row->cells[] = format_float($usersummary->takensessionspoints, 1, true, true) . ' / ' .
+                        format_float($usersummary->takensessionsmaxpoints, 1, true, true);
+    $stattable->data[] = $row;
+
+    $row = new html_table_row();
+    $row->attributes['class'] = 'normal';
+    $row->cells[] = get_string('percentagesessionscompleted', 'attendance') . ':';
+    $row->cells[] = format_float($usersummary->takensessionspercentage * 100) . '%';
+    $stattable->data[] = $row;
+
+    if ($view == ATT_VIEW_ALL) {
+        $row = new html_table_row();
+        $row->attributes['class'] = 'highlight';
+        $row->cells[] = get_string('sessionstotal', 'attendance') . ':';
+        $row->cells[] = $usersummary->numallsessions;
+        $stattable->data[] = $row;
+
+        $row = new html_table_row();
+        $row->attributes['class'] = 'highlight';
+        $row->cells[] = get_string('pointsallsessions', 'attendance') . ':';
+        $row->cells[] = format_float($usersummary->takensessionspoints, 1, true, true) . ' / ' .
+                            format_float($usersummary->allsessionsmaxpoints, 1, true, true);
+        $stattable->data[] = $row;
+
+        $row = new html_table_row();
+        $row->attributes['class'] = 'highlight';
+        $row->cells[] = get_string('percentageallsessions', 'attendance') . ':';
+        $row->cells[] = format_float($usersummary->allsessionspercentage * 100) . '%';
+        $stattable->data[] = $row;
+
+        $row = new html_table_row();
+        $row->attributes['class'] = 'normal';
+        $row->cells[] = get_string('maxpossiblepoints', 'attendance') . ':';
+        $row->cells[] = format_float($usersummary->maxpossiblepoints, 1, true, true) . ' / ' .
+                            format_float($usersummary->allsessionsmaxpoints, 1, true, true);
+        $stattable->data[] = $row;
+
+        $row = new html_table_row();
+        $row->attributes['class'] = 'normal';
+        $row->cells[] = get_string('maxpossiblepercentage', 'attendance') . ':';
+        $row->cells[] = format_float($usersummary->maxpossiblepercentage * 100) . '%';
+        $stattable->data[] = $row;
+    }
+
+    return html_writer::table($stattable);
+}
+
+/**
+ * Returns html user summary
+ *
+ * @param stdclass $attendance - attendance record.
+ * @param stdclass $user - user record
+ * @return string.
+ *
+ */
+function construct_full_user_stat_html_table($attendance, $user) {
+    $summary = new mod_attendance_summary($attendance->id, $user->id);
+    return construct_user_data_stat($summary->get_all_sessions_summary_for($user->id), ATT_VIEW_ALL);
+}
diff --git a/mod/attendance/report.php b/mod/attendance/report.php
new file mode 100644
index 0000000..f0c5439
--- /dev/null
+++ b/mod/attendance/report.php
@@ -0,0 +1,86 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance report
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+
+$pageparams = new mod_attendance_report_page_params();
+
+$id                     = required_param('id', PARAM_INT);
+$from                   = optional_param('from', null, PARAM_ACTION);
+$pageparams->view       = optional_param('view', null, PARAM_INT);
+$pageparams->curdate    = optional_param('curdate', null, PARAM_INT);
+$pageparams->group      = optional_param('group', null, PARAM_INT);
+$pageparams->sort       = optional_param('sort', ATT_SORT_DEFAULT, PARAM_INT);
+$pageparams->page       = optional_param('page', 1, PARAM_INT);
+$pageparams->perpage    = get_config('attendance', 'resultsperpage');
+
+$cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$attrecord = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+require_login($course, true, $cm);
+
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:viewreports', $context);
+
+$pageparams->init($cm);
+$pageparams->showsessiondetails = optional_param('showsessiondetails', $attrecord->showsessiondetails, PARAM_INT);
+$pageparams->sessiondetailspos = optional_param('sessiondetailspos', $attrecord->sessiondetailspos, PARAM_TEXT);
+
+$att = new mod_attendance_structure($attrecord, $cm, $course, $context, $pageparams);
+
+$PAGE->set_url($att->url_report());
+$PAGE->set_pagelayout('report');
+$PAGE->set_title($course->shortname. ": ".$att->name.' - '.get_string('report', 'attendance'));
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add(get_string('report', 'attendance'));
+
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att, attendance_tabs::TAB_REPORT);
+$filtercontrols = new attendance_filter_controls($att, true);
+$reportdata = new attendance_report_data($att);
+
+// Trigger a report viewed event.
+$event = \mod_attendance\event\report_viewed::create(array(
+    'objectid' => $att->id,
+    'context' => $PAGE->context,
+    'other' => array()
+));
+$event->add_record_snapshot('course_modules', $cm);
+$event->add_record_snapshot('attendance', $attrecord);
+$event->trigger();
+
+$title = get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname);
+$header = new mod_attendance_header($att, $title);
+
+// Output starts here.
+echo $output->header();
+echo $output->render($header);
+echo $output->render($tabs);
+echo $output->render($filtercontrols);
+echo $output->render($reportdata);
+echo $output->footer();
+
diff --git a/mod/attendance/resetcalendar.php b/mod/attendance/resetcalendar.php
new file mode 100644
index 0000000..63ac20c
--- /dev/null
+++ b/mod/attendance/resetcalendar.php
@@ -0,0 +1,92 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Reset Calendar events.
+ *
+ * @package    mod_attendance
+ * @copyright  2017 onwards Dan Marsden http://danmarsden.com
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once('../../config.php');
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->dirroot.'/mod/attendance/lib.php');
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+
+$action = optional_param('action', '', PARAM_ALPHA);
+
+admin_externalpage_setup('managemodules');
+$context = context_system::instance();
+
+// Check permissions.
+require_capability('mod/attendance:viewreports', $context);
+
+$exportfilename = 'attendance-absentee.csv';
+
+$PAGE->set_url('/mod/attendance/resetcalendar.php');
+
+$PAGE->set_heading($SITE->fullname);
+
+echo $OUTPUT->header();
+echo $OUTPUT->heading(get_string('resetcalendar', 'mod_attendance'));
+$tabmenu = attendance_print_settings_tabs('resetcalendar');
+echo $tabmenu;
+
+if (get_config('attendance', 'enablecalendar')) {
+    // Check to see if all sessions have calendar events.
+    if ($action == 'create' && confirm_sesskey()) {
+        $sessions = $DB->get_recordset('attendance_sessions',  array('caleventid' => 0));
+        foreach ($sessions as $session) {
+            attendance_create_calendar_event($session);
+            if ($session->caleventid) {
+                $DB->update_record('attendance_sessions', $session);
+            }
+        }
+        $sessions->close();
+        echo $OUTPUT->notification(get_string('eventscreated', 'mod_attendance'), 'notifysuccess');
+    } else {
+        if ($DB->record_exists('attendance_sessions', array('caleventid' => 0))) {
+            $createurl = new moodle_url('/mod/attendance/resetcalendar.php', array('action' => 'create'));
+            $returnurl = new moodle_url('/admin/settings.php', array('section' => 'modsettingattendance'));
+
+            echo $OUTPUT->confirm(get_string('resetcaledarcreate', 'mod_attendance'), $createurl, $returnurl);
+        } else {
+            echo $OUTPUT->box(get_string("noeventstoreset", "mod_attendance"));
+        }
+    }
+} else {
+    if ($action == 'delete' && confirm_sesskey()) {
+        $caleventids = $DB->get_records_select_menu('attendance_sessions', 'caleventid > 0', array(),
+                                                     '', 'caleventid, caleventid as id2');
+        $DB->delete_records_list('event', 'id', $caleventids);
+        $DB->execute("UPDATE {attendance_sessions} set caleventid = 0");
+        echo $OUTPUT->notification(get_string('eventsdeleted', 'mod_attendance'), 'notifysuccess');
+    } else {
+        // Check to see if there are any events that need to be deleted.
+        if ($DB->record_exists_select('attendance_sessions', 'caleventid > 0')) {
+            $deleteurl = new moodle_url('/mod/attendance/resetcalendar.php', array('action' => 'delete'));
+            $returnurl = new moodle_url('/admin/settings.php', array('section' => 'modsettingattendance'));
+
+            echo $OUTPUT->confirm(get_string('resetcaledardelete', 'mod_attendance'), $deleteurl, $returnurl);
+        } else {
+            echo $OUTPUT->box(get_string("noeventstoreset", "mod_attendance"));
+        }
+    }
+
+}
+
+echo $OUTPUT->footer();
\ No newline at end of file
diff --git a/mod/attendance/sessions.php b/mod/attendance/sessions.php
new file mode 100644
index 0000000..73631fc
--- /dev/null
+++ b/mod/attendance/sessions.php
@@ -0,0 +1,225 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Adding attendance sessions
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+require_once(dirname(__FILE__).'/add_form.php');
+require_once(dirname(__FILE__).'/update_form.php');
+require_once(dirname(__FILE__).'/duration_form.php');
+
+$pageparams = new mod_attendance_sessions_page_params();
+
+$id                     = required_param('id', PARAM_INT);
+$pageparams->action     = required_param('action', PARAM_INT);
+
+if (optional_param('deletehiddensessions', false, PARAM_TEXT)) {
+    $pageparams->action = mod_attendance_sessions_page_params::ACTION_DELETE_HIDDEN;
+}
+
+if (empty($pageparams->action)) {
+    // The form on manage.php can submit with the "choose" option - this should be fixed in the long term,
+    // but in the meantime show a useful error and redirect when it occurs.
+    $url = new moodle_url('/mod/attendance/view.php', array('id' => $id));
+    redirect($url, get_string('invalidaction', 'mod_attendance'), 2);
+}
+
+$cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att            = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+require_login($course, true, $cm);
+
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:manageattendances', $context);
+
+$att = new mod_attendance_structure($att, $cm, $course, $context, $pageparams);
+
+$PAGE->set_url($att->url_sessions(array('action' => $pageparams->action)));
+$PAGE->set_title($course->shortname. ": ".$att->name);
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add($att->name);
+
+$currenttab = attendance_tabs::TAB_ADD;
+$formparams = array('course' => $course, 'cm' => $cm, 'modcontext' => $context, 'att' => $att);
+switch ($att->pageparams->action) {
+    case mod_attendance_sessions_page_params::ACTION_ADD:
+        $url = $att->url_sessions(array('action' => mod_attendance_sessions_page_params::ACTION_ADD));
+        $mform = new mod_attendance_add_form($url, $formparams);
+
+        if ($mform->is_cancelled()) {
+            redirect($att->url_manage());
+        }
+
+        if ($formdata = $mform->get_data()) {
+            $sessions = attendance_construct_sessions_data_for_add($formdata, $att);
+            $att->add_sessions($sessions);
+            if (count($sessions) == 1) {
+                $message = get_string('sessiongenerated', 'attendance');
+            } else {
+                $message = get_string('sessionsgenerated', 'attendance', count($sessions));
+            }
+
+            mod_attendance_notifyqueue::notify_success($message);
+            // Redirect to the sessions tab always showing all sessions.
+            $SESSION->attcurrentattview[$cm->course] = ATT_VIEW_ALL;
+            redirect($att->url_manage());
+        }
+        break;
+    case mod_attendance_sessions_page_params::ACTION_UPDATE:
+        $sessionid = required_param('sessionid', PARAM_INT);
+
+        $url = $att->url_sessions(array('action' => mod_attendance_sessions_page_params::ACTION_UPDATE, 'sessionid' => $sessionid));
+        $formparams['sessionid'] = $sessionid;
+        $mform = new mod_attendance_update_form($url, $formparams);
+
+        if ($mform->is_cancelled()) {
+            redirect($att->url_manage());
+        }
+
+        if ($formdata = $mform->get_data()) {
+            $att->update_session_from_form_data($formdata, $sessionid);
+
+            mod_attendance_notifyqueue::notify_success(get_string('sessionupdated', 'attendance'));
+            redirect($att->url_manage());
+        }
+        $currenttab = attendance_tabs::TAB_UPDATE;
+        break;
+    case mod_attendance_sessions_page_params::ACTION_DELETE:
+        $sessionid = required_param('sessionid', PARAM_INT);
+        $confirm   = optional_param('confirm', null, PARAM_INT);
+
+        if (isset($confirm) && confirm_sesskey()) {
+            $att->delete_sessions(array($sessionid));
+            attendance_update_users_grade($att);
+            redirect($att->url_manage(), get_string('sessiondeleted', 'attendance'));
+        }
+
+        $sessinfo = $att->get_session_info($sessionid);
+
+        $message = get_string('deletecheckfull', '', get_string('session', 'attendance'));
+        $message .= str_repeat(html_writer::empty_tag('br'), 2);
+        $message .= userdate($sessinfo->sessdate, get_string('strftimedmyhm', 'attendance'));
+        $message .= html_writer::empty_tag('br');
+        $message .= $sessinfo->description;
+
+        $params = array('action' => $att->pageparams->action, 'sessionid' => $sessionid, 'confirm' => 1, 'sesskey' => sesskey());
+
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+        echo $OUTPUT->confirm($message, $att->url_sessions($params), $att->url_manage());
+        echo $OUTPUT->footer();
+        exit;
+    case mod_attendance_sessions_page_params::ACTION_DELETE_SELECTED:
+        $confirm    = optional_param('confirm', null, PARAM_INT);
+        $message = get_string('deletecheckfull', '', get_string('session', 'attendance'));
+
+        if (isset($confirm) && confirm_sesskey()) {
+            $sessionsids = required_param('sessionsids', PARAM_ALPHANUMEXT);
+            $sessionsids = explode('_', $sessionsids);
+            if ($att->pageparams->action == mod_attendance_sessions_page_params::ACTION_DELETE_SELECTED) {
+                $att->delete_sessions($sessionsids);
+                attendance_update_users_grade($att);
+                redirect($att->url_manage(), get_string('sessiondeleted', 'attendance'));
+            }
+        }
+        $sessid = optional_param_array('sessid', '', PARAM_SEQUENCE);
+        if (empty($sessid)) {
+            print_error('nosessionsselected', 'attendance', $att->url_manage());
+        }
+        $sessionsinfo = $att->get_sessions_info($sessid);
+
+        $message .= html_writer::empty_tag('br');
+        foreach ($sessionsinfo as $sessinfo) {
+            $message .= html_writer::empty_tag('br');
+            $message .= userdate($sessinfo->sessdate, get_string('strftimedmyhm', 'attendance'));
+            $message .= html_writer::empty_tag('br');
+            $message .= $sessinfo->description;
+        }
+
+        $sessionsids = implode('_', $sessid);
+        $params = array('action' => $att->pageparams->action, 'sessionsids' => $sessionsids,
+                        'confirm' => 1, 'sesskey' => sesskey());
+
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+        echo $OUTPUT->confirm($message, $att->url_sessions($params), $att->url_manage());
+        echo $OUTPUT->footer();
+        exit;
+    case mod_attendance_sessions_page_params::ACTION_CHANGE_DURATION:
+        $sessid = optional_param_array('sessid', '', PARAM_SEQUENCE);
+        $ids = optional_param('ids', '', PARAM_ALPHANUMEXT);
+
+        $slist = !empty($sessid) ? implode('_', $sessid) : '';
+
+        $url = $att->url_sessions(array('action' => mod_attendance_sessions_page_params::ACTION_CHANGE_DURATION));
+        $formparams['ids'] = $slist;
+        $mform = new mod_attendance_duration_form($url, $formparams);
+
+        if ($mform->is_cancelled()) {
+            redirect($att->url_manage());
+        }
+
+        if ($formdata = $mform->get_data()) {
+            $sessionsids = explode('_', $ids);
+            $duration = $formdata->durtime['hours'] * HOURSECS + $formdata->durtime['minutes'] * MINSECS;
+            $att->update_sessions_duration($sessionsids, $duration);
+            redirect($att->url_manage(), get_string('sessionupdated', 'attendance'));
+        }
+
+        if ($slist === '') {
+            print_error('nosessionsselected', 'attendance', $att->url_manage());
+        }
+
+        break;
+    case mod_attendance_sessions_page_params::ACTION_DELETE_HIDDEN:
+        $confirm  = optional_param('confirm', null, PARAM_INT);
+        if ($confirm && confirm_sesskey()) {
+            $sessions = $att->get_hidden_sessions();
+            $att->delete_sessions(array_keys($sessions));
+            redirect($att->url_manage(), get_string('hiddensessionsdeleted', 'attendance'));
+        }
+
+        $a = new stdClass();
+        $a->count = $att->get_hidden_sessions_count();
+        $a->date = userdate($course->startdate);
+        $message = get_string('confirmdeletehiddensessions', 'attendance', $a);
+
+        $params = array('action' => $att->pageparams->action, 'confirm' => 1, 'sesskey' => sesskey());
+        echo $OUTPUT->header();
+        echo $OUTPUT->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+        echo $OUTPUT->confirm($message, $att->url_sessions($params), $att->url_manage());
+        echo $OUTPUT->footer();
+        exit;
+}
+
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att, $currenttab);
+echo $output->header();
+echo $output->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+echo $output->render($tabs);
+
+$mform->display();
+
+echo $OUTPUT->footer();
\ No newline at end of file
diff --git a/mod/attendance/settings.php b/mod/attendance/settings.php
new file mode 100644
index 0000000..42c8eb4
--- /dev/null
+++ b/mod/attendance/settings.php
@@ -0,0 +1,151 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance plugin settings
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Netspot, Tim Lock.
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die;
+
+if ($ADMIN->fulltree) {
+    require_once(dirname(__FILE__).'/lib.php');
+    require_once(dirname(__FILE__).'/locallib.php');
+
+    $tabmenu = attendance_print_settings_tabs();
+    $settings->add(new admin_setting_heading('attendance_header', '', $tabmenu));
+
+    // Paging options.
+    $options = array(
+          0 => get_string('donotusepaging', 'attendance'),
+         25 => 25,
+         50 => 50,
+         75 => 75,
+         100 => 100,
+         250 => 250,
+         500 => 500,
+         1000 => 1000,
+    );
+
+    $settings->add(new admin_setting_configselect('attendance/resultsperpage',
+        get_string('resultsperpage', 'attendance'), get_string('resultsperpage_desc', 'attendance'), 25, $options));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/studentscanmark',
+        get_string('studentscanmark', 'attendance'), get_string('studentscanmark_desc', 'attendance'), 1));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/studentscanmarksessiontime',
+        get_string('studentscanmarksessiontime', 'attendance'),
+        get_string('studentscanmarksessiontime_desc', 'attendance'), 1));
+
+    $settings->add(new admin_setting_configtext('attendance/studentscanmarksessiontimeend',
+        get_string('studentscanmarksessiontimeend', 'attendance'),
+        get_string('studentscanmarksessiontimeend_desc', 'attendance'), '60', PARAM_INT));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/subnetactivitylevel',
+        get_string('subnetactivitylevel', 'attendance'),
+        get_string('subnetactivitylevel_desc', 'attendance'), 1));
+
+    $options = array(
+        ATT_VIEW_ALL => get_string('all', 'attendance'),
+        ATT_VIEW_ALLPAST => get_string('allpast', 'attendance'),
+        ATT_VIEW_NOTPRESENT => get_string('lowgrade', 'attendance'),
+        ATT_VIEW_MONTHS => get_string('months', 'attendance'),
+        ATT_VIEW_WEEKS => get_string('weeks', 'attendance'),
+        ATT_VIEW_DAYS => get_string('days', 'attendance')
+    );
+
+    $settings->add(new admin_setting_configselect('attendance/defaultview',
+        get_string('defaultview', 'attendance'),
+            get_string('defaultview_desc', 'attendance'), ATT_VIEW_WEEKS, $options));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/multisessionexpanded',
+        get_string('multisessionexpanded', 'attendance'),
+        get_string('multisessionexpanded_desc', 'attendance'), 0));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/studentrecordingexpanded',
+        get_string('studentrecordingexpanded', 'attendance'),
+        get_string('studentrecordingexpanded_desc', 'attendance'), 1));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/enablecalendar',
+        get_string('enablecalendar', 'attendance'),
+        get_string('enablecalendar_desc', 'attendance'), 1));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/enablewarnings',
+        get_string('enablewarnings', 'attendance'),
+        get_string('enablewarnings_desc', 'attendance'), 0));
+
+    $name = new lang_string('defaultsettings', 'mod_attendance');
+    $description = new lang_string('defaultsettings_help', 'mod_attendance');
+    $settings->add(new admin_setting_heading('defaultsettings', $name, $description));
+
+    $settings->add(new admin_setting_configtext('attendance/subnet',
+        get_string('requiresubnet', 'attendance'), get_string('requiresubnet_help', 'attendance'), '', PARAM_RAW));
+
+    $name = new lang_string('defaultsessionsettings', 'mod_attendance');
+    $description = new lang_string('defaultsessionsettings_help', 'mod_attendance');
+    $settings->add(new admin_setting_heading('defaultsessionsettings', $name, $description));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/studentscanmark_default',
+        get_string('studentscanmark', 'attendance'), '', 0));
+
+    $options = array(
+        ATTENDANCE_AUTOMARK_DISABLED => get_string('noautomark', 'attendance'),
+        ATTENDANCE_AUTOMARK_ALL => get_string('automarkall', 'attendance'),
+        ATTENDANCE_AUTOMARK_CLOSE => get_string('automarkclose', 'attendance'));
+
+    $settings->add(new admin_setting_configselect('attendance/automark_default',
+        get_string('automark', 'attendance'), '', 0, $options));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/randompassword_default',
+        get_string('randompassword', 'attendance'), '', 0));
+
+    $name = new lang_string('defaultwarningsettings', 'mod_attendance');
+    $description = new lang_string('defaultwarningsettings_help', 'mod_attendance');
+    $settings->add(new admin_setting_heading('defaultwarningsettings', $name, $description));
+
+    $options = array();
+    for ($i = 1; $i <= 100; $i++) {
+        $options[$i] = "$i%";
+    }
+    $settings->add(new admin_setting_configselect('attendance/warningpercent',
+        get_string('warningpercent', 'attendance'), get_string('warningpercent_help', 'attendance'), 70, $options));
+
+    $options = array();
+    for ($i = 1; $i <= 50; $i++) {
+        $options[$i] = "$i";
+    }
+    $settings->add(new admin_setting_configselect('attendance/warnafter',
+        get_string('warnafter', 'attendance'), get_string('warnafter_help', 'attendance'), 5, $options));
+
+    $settings->add(new admin_setting_configselect('attendance/maxwarn',
+        get_string('maxwarn', 'attendance'), get_string('maxwarn_help', 'attendance'), 1, $options));
+
+    $settings->add(new admin_setting_configcheckbox('attendance/emailuser',
+        get_string('emailuser', 'attendance'), get_string('emailuser_help', 'attendance'), 1));
+
+    $settings->add(new admin_setting_configtext('attendance/emailsubject',
+        get_string('emailsubject', 'attendance'), get_string('emailsubject_help', 'attendance'),
+        get_string('emailsubject_default', 'attendance'), PARAM_RAW));
+
+
+    $settings->add(new admin_setting_configtextarea('attendance/emailcontent',
+        get_string('emailcontent', 'attendance'), get_string('emailcontent_help', 'attendance'),
+        get_string('emailcontent_default', 'attendance'), PARAM_RAW));
+
+}
diff --git a/mod/attendance/student_attendance_form.php b/mod/attendance/student_attendance_form.php
new file mode 100644
index 0000000..61c11bb
--- /dev/null
+++ b/mod/attendance/student_attendance_form.php
@@ -0,0 +1,119 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Student form class.
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Class mod_attendance_student_attendance_form
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_student_attendance_form extends moodleform {
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+        global $USER;
+
+        $mform  =& $this->_form;
+
+        $attforsession = $this->_customdata['session'];
+        $attblock = $this->_customdata['attendance'];
+
+        $statuses = $attblock->get_statuses();
+        // Check if user has access to all statuses.
+        $disabledduetotime = false;
+        foreach ($statuses as $status) {
+            if ($status->studentavailability === '0') {
+                unset($statuses[$status->id]);
+            }
+            if (!empty($status->studentavailability) &&
+                time() > $attforsession->sessdate + ($status->studentavailability * 60)) {
+                unset($statuses[$status->id]);
+                $disabledduetotime = true;
+            }
+        }
+
+        $mform->addElement('hidden', 'sessid', null);
+        $mform->setType('sessid', PARAM_INT);
+        $mform->setConstant('sessid', $attforsession->id);
+
+        $mform->addElement('hidden', 'sesskey', null);
+        $mform->setType('sesskey', PARAM_INT);
+        $mform->setConstant('sesskey', sesskey());
+
+        // Set a title as the date and time of the session.
+        $sesstiontitle = userdate($attforsession->sessdate, get_string('strftimedate')).' '
+                .attendance_strftimehm($attforsession->sessdate);
+
+        $mform->addElement('header', 'session', $sesstiontitle);
+
+        // If a session description is set display it.
+        if (!empty($attforsession->description)) {
+            $mform->addElement('html', $attforsession->description);
+        }
+        if (!empty($attforsession->studentpassword)) {
+            $mform->addElement('text', 'studentpassword', get_string('password', 'attendance'));
+            $mform->setType('studentpassword', PARAM_TEXT);
+            $mform->addRule('studentpassword', get_string('passwordrequired', 'attendance'), 'required');
+        }
+        // Create radio buttons for setting the attendance status.
+        $radioarray = array();
+        foreach ($statuses as $status) {
+            $name = html_writer::span($status->description, 'statusdesc');
+            $radioarray[] =& $mform->createElement('radio', 'status', '', $name, $status->id, array());
+        }
+        if ($disabledduetotime) {
+            $warning = html_writer::span(get_string('somedisabledstatus', 'attendance'), 'somedisabledstatus');
+            $radioarray[] =& $mform->createElement('static', '', '', $warning);
+        }
+
+        // Add the radio buttons as a control with the user's name in front.
+        $radiogroup = $mform->addGroup($radioarray, 'statusarray', $USER->firstname.' '.$USER->lastname.':', array(''), false);
+        $radiogroup->setAttributes(array('class' => 'statusgroup'));
+        $mform->addRule('statusarray', get_string('attendancenotset', 'attendance'), 'required', '', 'client', false, false);
+        $this->add_action_buttons();
+    }
+
+    /**
+     * Validate Form.
+     *
+     * @param array $data
+     * @param array $files
+     * @return array
+     */
+    public function validation($data, $files) {
+        $errors = array();
+        // Check if this status is allowed to be set.
+        if (empty($data['status'])) {
+            $errors['statusarray'] = get_string('invalidstatus', 'attendance');
+        }
+
+        return $errors;
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/styles.css b/mod/attendance/styles.css
new file mode 100644
index 0000000..5aa997a
--- /dev/null
+++ b/mod/attendance/styles.css
@@ -0,0 +1,244 @@
+.path-mod-attendance .attbtn {
+    border: 1px solid #aaa;
+    border-radius: 5px;
+    margin-left: 2px;
+    margin-right: 2px;
+    padding: 5px;
+}
+
+.path-mod-attendance .attcurbtn {
+    margin-left: 2px;
+    margin-right: 2px;
+    padding: 5px;
+}
+
+.path-mod-attendance .attfiltercontrols {
+    margin-bottom: 10px;
+    margin-left: auto;
+    margin-right: auto;
+    width: 90%;
+}
+
+.path-mod-attendance .attfiltercontrols #currentdate {
+    display: inline;
+}
+
+.path-mod-attendance .attwidth {
+    margin: auto;
+    width: 90%;
+}
+
+.path-mod-attendance .userwithoutenrol,
+.path-mod-attendance .userwithoutenrol a {
+    color: gray;
+}
+
+.path-mod-attendance .userwithoutdata,
+.path-mod-attendance .userwithoutdata a {
+    color: red;
+}
+
+.path-mod-attendance .takelist td {
+    vertical-align: middle;
+}
+
+.path-mod-attendance .takelist .userpicture {
+    margin: 0 3px;
+    vertical-align: middle;
+}
+
+.path-mod-attendance .takegrid input {
+    margin: 0 3px 0 6px;
+}
+
+.path-mod-attendance .takegrid .fullname {
+    font-size: 0.8em;
+}
+
+.path-mod-attendance table.controls {
+    text-align: center;
+    width: 100%;
+}
+
+.path-mod-attendance table.controls tr {
+    vertical-align: top;
+}
+
+.path-mod-attendance table.controls td.right,
+.path-mod-attendance table.controls td.left {
+    padding: 4px;
+}
+
+.path-mod-attendance table.controls .right {
+    text-align: right;
+}
+/* for IE7*/
+.path-mod-attendance .filtercontrols td {
+    padding: 6px;
+}
+
+.path-mod-attendance .takecontrols {
+    margin: 0 auto 20px auto;
+    width: 800px;
+}
+.path-mod-attendance .takecontrols table {
+    margin: 0 auto;
+}
+.path-mod-attendance .takecontrols .c0 {
+    text-align: left;
+    width: 500px;
+}
+.path-mod-attendance .takecontrols .c1 {
+    text-align: right;
+}
+
+.path-mod-attendance .inline,
+.path-mod-attendance .inline form,
+.path-mod-attendance .inline div {
+    display: inline;
+}
+
+.path-mod-attendance table.userinfobox {
+    border: 1px solid #eee;
+    padding: 0;
+}
+.path-mod-attendance table.userinfobox td.left {
+    background-color: #eee;
+    padding: 30px 10px;
+}
+.path-mod-attendance table.attlist td.c0 {
+    text-align: right;
+}
+
+#page-mod-attendance-preferences .generalbox {
+    text-align: center;
+}
+
+.path-mod-attendance .attsessions_manage_table .action-icon img.smallicon {
+    margin-left: 5px;
+}
+#page-mod-attendance-sessions input[type="checkbox"] {
+    margin-right: 2px;
+}
+
+.path-mod-attendance .setallstatuses {
+    text-align: right;
+}
+
+.path-mod-attendance .remarkholder {
+    position: relative;
+}
+
+.path-mod-attendance .remarkholder .remarkcontent {
+    background-color: white;
+    border: 1px solid #ccc;
+    border-radius: 3px;
+    box-shadow: 3px 3px 5px #ccc;
+    display: none;
+    left: 20px;
+    padding: 5px;
+    position: absolute;
+    top: 0;
+    width: 150px;
+    z-index: 5000;
+}
+
+.path-mod-attendance .remarkholder:hover .remarkcontent {
+    display: inline-block;
+}
+
+.path-mod-attendance .attendancestatus-P {
+    color: green;
+}
+
+.path-mod-attendance .attendancestatus-E {
+    color: #00aee3;
+}
+
+.path-mod-attendance .attendancestatus-L {
+    color: #f7931e;
+}
+
+.path-mod-attendance .attendancestatus-A {
+    color: red;
+}
+
+.path-mod-attendance .attreport .contrast {
+    background-color: #eaeaea;
+}
+
+.path-mod-attendance .attreport .center {
+    text-align: center;
+}
+
+.path-mod-attendance .attreport .left {
+    text-align: left;
+}
+
+.path-mod-attendance .attreport .bottom {
+    vertical-align: bottom;
+}
+
+.path-mod-attendance .attreport .nowrap {
+    white-space: nowrap;
+}
+
+.path-mod-attendance .attreport .narrow {
+    width: 1px;
+}
+.path-mod-attendance .student-password {
+    font-size: x-large;
+    text-align: center;
+}
+#page-mod-attendance-sessions .statusgroup .statusdesc {
+    margin-right: 12px;
+}
+
+#page-mod-attendance-view .averageattendance {
+    font-weight: bold;
+}
+
+#page-mod-attendance-preferences .form-control {
+    width: inherit;
+    display: inherit;
+}
+
+@media (max-width: 767px) {
+    .path-mod-attendance .remarkscol {
+        display: none;
+    }
+
+    .path-mod-attendance .statusgroup .form-check-inline {
+        display: block;
+        padding-top: 10px;
+        padding-bottom: 10px;
+    }
+
+    #page-mod-attendance-view .colatt {
+        display: none;
+    }
+
+    .path-mod-attendance .attfiltercontrols,
+    .path-mod-attendance .attwidth {
+        width: 100%;
+    }
+}
+
+@media (max-width: 480px) {
+    .path-mod-attendance .desccol {
+        display: none;
+    }
+
+    .path-mod-attendance .pointscol {
+        display: none;
+    }
+
+    .path-mod-attendance .attfiltercontrols #currentdate {
+        display: none;
+    }
+
+    #page-mod-attendance-view .colsessionscompleted,
+    #page-mod-attendance-view .colpointssessionscompleted {
+        display: none;
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/take.php b/mod/attendance/take.php
new file mode 100644
index 0000000..8355f3a
--- /dev/null
+++ b/mod/attendance/take.php
@@ -0,0 +1,83 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Take Attendance
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+
+$pageparams = new mod_attendance_take_page_params();
+
+$id                     = required_param('id', PARAM_INT);
+$pageparams->sessionid  = required_param('sessionid', PARAM_INT);
+$pageparams->grouptype  = required_param('grouptype', PARAM_INT);
+$pageparams->sort       = optional_param('sort', ATT_SORT_DEFAULT, PARAM_INT);
+$pageparams->copyfrom   = optional_param('copyfrom', null, PARAM_INT);
+$pageparams->viewmode   = optional_param('viewmode', null, PARAM_INT);
+$pageparams->gridcols   = optional_param('gridcols', null, PARAM_INT);
+$pageparams->page       = optional_param('page', 1, PARAM_INT);
+$pageparams->perpage    = optional_param('perpage', get_config('attendance', 'resultsperpage'), PARAM_INT);
+
+$cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att            = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+// Check this is a valid session for this attendance.
+$session        = $DB->get_record('attendance_sessions', array('id' => $pageparams->sessionid, 'attendanceid' => $att->id),
+                                  '*', MUST_EXIST);
+
+require_login($course, true, $cm);
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:takeattendances', $context);
+
+$pageparams->group = groups_get_activity_group($cm, true);
+
+$pageparams->init($course->id);
+$att = new mod_attendance_structure($att, $cm, $course, $PAGE->context, $pageparams);
+
+$allowedgroups = groups_get_activity_allowed_groups($cm);
+if (!empty($pageparams->grouptype) && !array_key_exists($pageparams->grouptype, $allowedgroups)) {
+     $group = groups_get_group($pageparams->grouptype);
+     throw new moodle_exception('cannottakeforgroup', 'attendance', '', $group->name);
+}
+
+if (($formdata = data_submitted()) && confirm_sesskey()) {
+    $att->take_from_form_data($formdata);
+}
+
+$PAGE->set_url($att->url_take());
+$PAGE->set_title($course->shortname. ": ".$att->name);
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add($att->name);
+
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att);
+$sesstable = new attendance_take_data($att);
+
+// Output starts here.
+
+echo $output->header();
+echo $output->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+echo $output->render($tabs);
+echo $output->render($sesstable);
+
+echo $output->footer();
diff --git a/mod/attendance/temp_form.php b/mod/attendance/temp_form.php
new file mode 100644
index 0000000..87b2a0b
--- /dev/null
+++ b/mod/attendance/temp_form.php
@@ -0,0 +1,83 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form for creating temporary users.
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Class temp_form
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class temp_form extends moodleform {
+    /**
+     * Define form.
+     */
+    public function definition() {
+        $mform = $this->_form;
+
+        $mform->addElement('hidden', 'id', 0);
+        $mform->setType('id', PARAM_INT);
+
+        $mform->addElement('header', 'attheader', get_string('tempaddform', 'attendance'));
+        $mform->addElement('text', 'tname', get_string('tusername', 'attendance'));
+        $mform->addRule('tname', 'Required', 'required', null, 'client');
+        $mform->setType('tname', PARAM_TEXT);
+
+        $mform->addElement('text', 'temail', get_string('tuseremail', 'attendance'));
+        $mform->addRule('temail', 'Email', 'email', null, 'client');
+        $mform->addRule('temail', '', 'callback', null, 'server');
+        $mform->setType('temail', PARAM_EMAIL);
+
+        $mform->addElement('submit', 'submitbutton', get_string('adduser', 'attendance'));
+        $mform->closeHeaderBefore('submit');
+    }
+
+    /**
+     * Do stuff to form after creation.
+     */
+    public function definition_after_data() {
+        $mform = $this->_form;
+        $mform->applyFilter('tname', 'trim');
+    }
+
+    /**
+     * Form validation.
+     *
+     * @param array $data
+     * @param array $files
+     * @return array
+     */
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        if ($err = mod_attendance_structure::check_existing_email($data['temail'])) {
+            $errors['temail'] = $err;
+        }
+
+        return $errors;
+    }
+}
diff --git a/mod/attendance/tempedit.php b/mod/attendance/tempedit.php
new file mode 100644
index 0000000..6f93301
--- /dev/null
+++ b/mod/attendance/tempedit.php
@@ -0,0 +1,115 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Attendance tempedit
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+
+global $CFG, $DB, $PAGE, $OUTPUT;
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+require_once($CFG->dirroot.'/mod/attendance/tempedit_form.php');
+
+$id = required_param('id', PARAM_INT);
+$userid = required_param('userid', PARAM_INT);
+$action = optional_param('action', null, PARAM_ALPHA);
+
+$cm = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+$tempuser = $DB->get_record('attendance_tempusers', array('id' => $userid), '*', MUST_EXIST);
+
+$att = new mod_attendance_structure($att, $cm, $course);
+
+$params = array('userid' => $tempuser->id);
+if ($action) {
+    $params['action'] = $action;
+}
+$PAGE->set_url($att->url_tempedit($params));
+
+require_login($course, true, $cm);
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:managetemporaryusers', $context);
+
+$PAGE->set_title($course->shortname.": ".$att->name.' - '.get_string('tempusersedit', 'attendance'));
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add(get_string('tempusersedit', 'attendance'));
+
+/** @var mod_attendance_renderer $output */
+$output = $PAGE->get_renderer('mod_attendance');
+
+if ($action == 'delete') {
+    if (optional_param('confirm', false, PARAM_BOOL)) {
+        require_sesskey();
+
+        // Remove the user from the grades table, the attendance log and the tempusers table.
+        $DB->delete_records('grade_grades', array('userid' => $tempuser->studentid));
+        $DB->delete_records('attendance_log', array('studentid' => $tempuser->studentid));
+        $DB->delete_records('attendance_tempusers', array('id' => $tempuser->id));
+
+        redirect($att->url_managetemp());
+    } else {
+
+        $info = (object)array(
+            'fullname' => $tempuser->fullname,
+            'email' => $tempuser->email,
+        );
+        $msg = get_string('confirmdeleteuser', 'attendance', $info);
+        $continue = new moodle_url($PAGE->url, array('confirm' => 1, 'sesskey' => sesskey()));
+
+        echo $output->header();
+        echo $output->confirm($msg, $continue, $att->url_managetemp());
+        echo $output->footer();
+
+        die();
+    }
+}
+
+$formdata = new stdClass();
+$formdata->id = $cm->id;
+$formdata->tname = $tempuser->fullname;
+$formdata->userid = $tempuser->id;
+$formdata->temail = $tempuser->email;
+
+$mform = new tempedit_form();
+$mform->set_data($formdata);
+
+if ($mform->is_cancelled()) {
+    redirect($att->url_managetemp());
+} else if ($tempuser = $mform->get_data()) {
+    global $DB;
+    $updateuser = new stdClass();
+    $updateuser->id = $tempuser->userid;
+    $updateuser->fullname = $tempuser->tname;
+    $updateuser->email = $tempuser->temail;
+    $DB->update_record('attendance_tempusers', $updateuser);
+    redirect($att->url_managetemp());
+}
+
+$tabs = new attendance_tabs($att, attendance_tabs::TAB_TEMPORARYUSERS);
+
+echo $output->header();
+echo $output->heading(get_string('tempusersedit', 'attendance').' : '.format_string($course->fullname));
+echo $output->render($tabs);
+$mform->display();
+echo $output->footer($course);
+
diff --git a/mod/attendance/tempedit_form.php b/mod/attendance/tempedit_form.php
new file mode 100644
index 0000000..ef4d79b
--- /dev/null
+++ b/mod/attendance/tempedit_form.php
@@ -0,0 +1,91 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Form for editing temporary users.
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * class for displaying tempedit form.
+ *
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class tempedit_form extends moodleform {
+
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+
+        $mform = $this->_form;
+
+        $mform->addElement('hidden', 'userid', 0);
+        $mform->setType('userid', PARAM_INT);
+        $mform->addElement('hidden', 'id', 0);
+        $mform->setType('id', PARAM_INT);
+
+        $mform->addElement('header', 'attheader', get_string('tempusersedit', 'attendance'));
+        $mform->addElement('text', 'tname', get_string('tusername', 'attendance'));
+        $mform->addRule('tname', 'Required', 'required', null, 'client');
+        $mform->setType('tname', PARAM_TEXT);
+
+        $mform->addElement('text', 'temail', get_string('tuseremail', 'attendance'));
+        $mform->addRule('temail', 'Email', 'email', null, 'client');
+        $mform->setType('temail', PARAM_EMAIL);
+
+        $buttonarray = array(
+            $mform->createElement('submit', 'submitbutton', get_string('edituser', 'attendance')),
+            $mform->createElement('cancel'),
+        );
+        $mform->addGroup($buttonarray, 'buttonar', '', array(' '), false);
+        $mform->closeHeaderBefore('submit');
+    }
+
+    /**
+     * Apply filter to form
+     *
+     */
+    public function definition_after_data() {
+        $mform = $this->_form;
+        $mform->applyFilter('tname', 'trim');
+    }
+
+    /**
+     * Perform validation on the form
+     * @param array $data
+     * @param array $files
+     */
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        if ($err = mod_attendance_structure::check_existing_email($data['temail'], $data['userid'])) {
+            $errors['temail'] = $err;
+        }
+        return $errors;
+    }
+}
diff --git a/mod/attendance/templates/attendance_password_icon.mustache b/mod/attendance/templates/attendance_password_icon.mustache
new file mode 100644
index 0000000..6c8e911
--- /dev/null
+++ b/mod/attendance/templates/attendance_password_icon.mustache
@@ -0,0 +1,21 @@
+{{!
+    @template attendance/attendance_password_icon
+
+    attendance_password  icon.
+
+    Example context (json):
+    {
+        "title": "Help with something",
+        "url": "http://example.org/help",
+        "linktext": "",
+        "icon":{
+            "attributes": [
+                {"name": "src", "value": "../pix/key.svg"},
+                {"name": "alt", "value": "Password icon"}
+            ]
+        }
+    }
+}}
+<span class="helptooltip">
+    <a href="{{url}}" title={{#quote}}{{title}}{{/quote}} aria-haspopup="true" target="_blank">{{#icon}}{{>core/pix_icon}}{{/icon}}{{#linktext}}{{.}}{{/linktext}}</a>
+</span>
\ No newline at end of file
diff --git a/mod/attendance/templates/attendance_password_icon_boost.mustache b/mod/attendance/templates/attendance_password_icon_boost.mustache
new file mode 100644
index 0000000..319b897
--- /dev/null
+++ b/mod/attendance/templates/attendance_password_icon_boost.mustache
@@ -0,0 +1,28 @@
+{{!
+    @template attendance/attendance_password_icon Boost Example.
+    This is an example of a template you could copy into a boost based theme to use proper popover.
+    At the moment we cannot specify different templates to use in plugin so we use
+    a cross-compatible link based pop-up for the password.
+
+    attendance_password  icon.
+
+    Example context (json):
+    {
+        "title": "Help with something",
+        "url": "http://example.org/help",
+        "linktext": "",
+        "icon":{
+            "attributes": [
+                {"name": "class", "value": "iconhelp"},
+                {"name": "src", "value": "../../../pix/help.svg"},
+                {"name": "alt", "value": "Help icon"}
+            ]
+        }
+    }
+}}
+<a class="btn btn-link p-a-0" role="button"
+    data-container="body" data-toggle="popover"
+    data-placement="{{#ltr}}left{{/ltr}}{{^ltr}}right{{/ltr}}" data-content="<span class='student-pass'>{{text}}</span> {{completedoclink}}"
+    data-html="true" tabindex="0" data-trigger="focus">
+    {{#pix}}key, attendance, {{alt}}{{/pix}}
+</a>
diff --git a/mod/attendance/tempmerge.php b/mod/attendance/tempmerge.php
new file mode 100644
index 0000000..8815fca
--- /dev/null
+++ b/mod/attendance/tempmerge.php
@@ -0,0 +1,103 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Merge temporary user with real user.
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+
+global $CFG, $DB, $PAGE, $OUTPUT;
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+require_once($CFG->dirroot.'/mod/attendance/tempmerge_form.php');
+
+$id = required_param('id', PARAM_INT);
+$userid = required_param('userid', PARAM_INT);
+
+$cm = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+$tempuser = $DB->get_record('attendance_tempusers', array('id' => $userid), '*', MUST_EXIST);
+
+$att = new mod_attendance_structure($att, $cm, $course);
+$params = array('userid' => $tempuser->id);
+$PAGE->set_url($att->url_tempmerge($params));
+
+require_login($course, true, $cm);
+
+$PAGE->set_title($course->shortname.": ".$att->name.' - '.get_string('tempusermerge', 'attendance'));
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add(get_string('tempusermerge', 'attendance'));
+
+$formdata = (object)array(
+    'id' => $cm->id,
+    'userid' => $tempuser->id,
+);
+
+$custom = array(
+    'description' => format_string($tempuser->fullname).' ('.format_string($tempuser->email).')',
+);
+$mform = new tempmerge_form(null, $custom);
+$mform->set_data($formdata);
+
+if ($mform->is_cancelled()) {
+    redirect($att->url_managetemp());
+
+} else if ($data = $mform->get_data()) {
+
+    $sql = "SELECT s.id, lr.id AS reallogid, lt.id AS templogid
+              FROM {attendance_sessions} s
+              LEFT JOIN {attendance_log} lr ON lr.sessionid = s.id AND lr.studentid = :realuserid
+              LEFT JOIN {attendance_log} lt ON lt.sessionid = s.id AND lt.studentid = :tempuserid
+             WHERE s.attendanceid = :attendanceid AND lt.id IS NOT NULL
+             ORDER BY s.id";
+    $params = array(
+        'realuserid' => $data->participant,
+        'tempuserid' => $tempuser->studentid,
+        'attendanceid' => $att->id,
+    );
+    $logs = $DB->get_recordset_sql($sql, $params);
+
+    foreach ($logs as $log) {
+        if (!is_null($log->reallogid)) {
+            // Remove the existing attendance for the real user for this session.
+            $DB->delete_records('attendance_log', array('id' => $log->reallogid));
+        }
+        // Adjust the 'temp user' attendance record to point at the real user.
+        $DB->set_field('attendance_log', 'studentid', $data->participant, array('id' => $log->templogid));
+    }
+
+    // Delete the temp user.
+    $DB->delete_records('attendance_tempusers', array('id' => $tempuser->id));
+    $att->update_users_grade(array($data->participant)); // Update the gradebook after the merge.
+
+    redirect($att->url_managetemp());
+}
+
+/** @var mod_attendance_renderer $output */
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att, attendance_tabs::TAB_TEMPORARYUSERS);
+
+echo $output->header();
+echo $output->heading(get_string('tempusermerge', 'attendance').' : '.format_string($course->fullname));
+echo $output->render($tabs);
+$mform->display();
+echo $output->footer($course);
\ No newline at end of file
diff --git a/mod/attendance/tempmerge_form.php b/mod/attendance/tempmerge_form.php
new file mode 100644
index 0000000..d25c4f8
--- /dev/null
+++ b/mod/attendance/tempmerge_form.php
@@ -0,0 +1,73 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Temp merge form class.
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $CFG;
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * Temp merge form class.
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class tempmerge_form extends moodleform {
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+        global $COURSE;
+
+        $context = context_course::instance($COURSE->id);
+        $namefields = get_all_user_name_fields(true, 'u');
+        $students = get_enrolled_users($context, 'mod/attendance:canbelisted', 0, 'u.id,'.$namefields.',u.email',
+                                       'u.lastname, u.firstname', 0, 0, true);
+        $partarray = array();
+        foreach ($students as $student) {
+            $partarray[$student->id] = fullname($student).' ('.$student->email.')';
+        }
+
+        $mform = $this->_form;
+        $description = $this->_customdata['description'];
+
+        $mform->addElement('hidden', 'id', 0);
+        $mform->setType('id', PARAM_INT);
+        $mform->addElement('hidden', 'userid', 0);
+        $mform->setType('userid', PARAM_INT);
+
+        $mform->addElement('header', 'attheader', get_string('tempusermerge', 'attendance'));
+        $mform->addElement('static', 'description', get_string('tempuser', 'attendance'), $description);
+
+        $mform->addElement('select', 'participant', get_string('participant', 'attendance'), $partarray);
+
+        $mform->addElement('static', 'requiredentries', '', get_string('requiredentries', 'attendance'));
+        $mform->addHelpButton('requiredentries', 'requiredentry', 'attendance');
+
+        $this->add_action_buttons(true, get_string('mergeuser', 'attendance'));
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/tempusers.php b/mod/attendance/tempusers.php
new file mode 100644
index 0000000..0faf1f1
--- /dev/null
+++ b/mod/attendance/tempusers.php
@@ -0,0 +1,134 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Temporary user management.
+ *
+ * @package    mod_attendance
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+global $CFG, $DB, $OUTPUT, $PAGE, $COURSE;
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+require_once($CFG->dirroot.'/mod/attendance/temp_form.php');
+
+$id = required_param('id', PARAM_INT);
+
+$cm = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$att = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+$att = new mod_attendance_structure($att, $cm, $course);
+$PAGE->set_url($att->url_managetemp());
+
+require_login($course, true, $cm);
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:managetemporaryusers', $context);
+
+$PAGE->set_title($course->shortname.": ".$att->name.' - '.get_string('tempusers', 'attendance'));
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add(get_string('tempusers', 'attendance'));
+
+$output = $PAGE->get_renderer('mod_attendance');
+$tabs = new attendance_tabs($att, attendance_tabs::TAB_TEMPORARYUSERS);
+
+$formdata = (object)array(
+    'id' => $cm->id,
+);
+$mform = new temp_form();
+$mform->set_data($formdata);
+
+if ($data = $mform->get_data()) {
+    // Create temp user in main user table.
+    $user = new stdClass();
+    $user->auth = 'manual';
+    $user->confirmed = 1;
+    $user->deleted = 1;
+    $user->email = time().'@ghost.user.de';
+    $user->username = time().'@ghost.user.de';
+    $user->idnumber = 'tempghost';
+    $user->mnethostid = $CFG->mnet_localhost_id;
+    $studentid = $DB->insert_record('user', $user);
+
+    // Create the temporary user record.
+    $newtempuser = new stdClass();
+    $newtempuser->fullname = $data->tname;
+    $newtempuser->courseid = $COURSE->id;
+    $newtempuser->email = $data->temail;
+    $newtempuser->created = time();
+    $newtempuser->studentid = $studentid;
+    $DB->insert_record('attendance_tempusers', $newtempuser);
+
+    redirect($att->url_managetemp());
+}
+
+// Output starts here.
+echo $output->header();
+echo $output->heading(get_string('tempusers', 'attendance').' : '.format_string($course->fullname));
+echo $output->render($tabs);
+$mform->display();
+
+$tempusers = $DB->get_records('attendance_tempusers', array('courseid' => $course->id), 'fullname, email');
+
+echo '<div>';
+echo '<p style="margin-left:10%;">'.get_string('tempuserslist', 'attendance').'</p>';
+if ($tempusers) {
+    attendance_print_tempusers($tempusers, $att);
+}
+echo '</div>';
+echo $output->footer($course);
+
+/**
+ * Print list of users.
+ *
+ * @param stdClass $tempusers
+ * @param mod_attendance_structure $att
+ */
+function attendance_print_tempusers($tempusers, mod_attendance_structure $att) {
+    echo '<p></p>';
+    echo '<table border="1" bordercolor="#EEEEEE" style="background-color:#fff" cellpadding="2" align="center"'.
+          'width="80%" summary="'.get_string('temptable', 'attendance').'"><tr>';
+    echo '<th class="header">'.get_string('tusername', 'attendance').'</th>';
+    echo '<th class="header">'.get_string('tuseremail', 'attendance').'</th>';
+    echo '<th class="header">'.get_string('tcreated', 'attendance').'</th>';
+    echo '<th class="header">'.get_string('tactions', 'attendance').'</th>';
+    echo '</tr>';
+
+    $even = false; // Used to colour rows.
+    foreach ($tempusers as $tempuser) {
+        if ($even) {
+            echo '<tr style="background-color: #FCFCFC">';
+        } else {
+            echo '<tr>';
+        }
+        $even = !$even;
+        echo '<td>'.format_string($tempuser->fullname).'</td>';
+        echo '<td>'.format_string($tempuser->email).'</td>';
+        echo '<td>'.userdate($tempuser->created, get_string('strftimedatetime')).'</td>';
+        $params = array('userid' => $tempuser->id);
+        $editlink = html_writer::link($att->url_tempedit($params), get_string('edituser', 'attendance'));
+        $deletelink = html_writer::link($att->url_tempdelete($params), get_string('deleteuser', 'attendance'));
+        $mergelink = html_writer::link($att->url_tempmerge($params), get_string('mergeuser', 'attendance'));
+        echo '<td>'.$editlink.' | '.$deletelink.' | '.$mergelink.'</td>';
+        echo '</tr>';
+    }
+    echo '</table>';
+}
+
+
diff --git a/mod/attendance/tests/attendance_webservices_test.php b/mod/attendance/tests/attendance_webservices_test.php
new file mode 100644
index 0000000..f0ff9e2
--- /dev/null
+++ b/mod/attendance/tests/attendance_webservices_test.php
@@ -0,0 +1,160 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Webservices test for attendance plugin.
+ *
+ * @package    mod_attendance
+ * @copyright  2015 Caio Bressan Doneda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');
+}
+
+global $CFG;
+
+// Include the code to test.
+require_once($CFG->dirroot . '/mod/attendance/classes/attendance_webservices_handler.php');
+require_once($CFG->dirroot . '/mod/attendance/classes/structure.php');
+
+/**
+ * This class contains the test cases for the functions in attendance_webservices_handler.php.
+ * @copyright  2015 Caio Bressan Doneda
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class attendance_webservices_tests extends advanced_testcase {
+    /** @var coursecat */
+    protected $category;
+    /** @var stdClass */
+    protected $course;
+    /** @var stdClass */
+    protected $attendance;
+    /** @var stdClass */
+    protected $teacher;
+    /** @var array */
+    protected $sessions;
+
+    /**
+     * Setup class.
+     */
+    public function setUp() {
+        global $DB;
+
+        $this->category = $this->getDataGenerator()->create_category();
+        $this->course = $this->getDataGenerator()->create_course(array('category' => $this->category->id));
+
+        $record = new stdClass();
+        $record->course = $this->course->id;
+        $record->name = "Attendance";
+        $record->grade = 100;
+
+        $DB->insert_record('attendance', $record);
+
+        $this->getDataGenerator()->create_module('attendance', array('course' => $this->course->id));
+
+        $moduleid = $DB->get_field('modules', 'id', array('name' => 'attendance'));
+        $cm = $DB->get_record('course_modules', array('course' => $this->course->id, 'module' => $moduleid));
+        $context = context_course::instance($this->course->id);
+        $att = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+        $this->attendance = new mod_attendance_structure($att, $cm, $this->course, $context);
+
+        $this->create_and_enrol_users();
+
+        $this->setUser($this->teacher);
+
+        $session = new stdClass();
+        $session->sessdate = time();
+        $session->duration = 6000;
+        $session->description = "";
+        $session->descriptionformat = 1;
+        $session->descriptionitemid = 0;
+        $session->timemodified = time();
+        $session->statusset = 0;
+        $session->groupid = 0;
+
+        // Creating two sessions.
+        $this->sessions[] = $session;
+
+        $this->attendance->add_sessions($this->sessions);
+    }
+
+    /** Creating 10 students and 1 teacher. */
+    protected function create_and_enrol_users() {
+        for ($i = 0; $i < 10; $i++) {
+            $student = $this->getDataGenerator()->create_user();
+            $this->getDataGenerator()->enrol_user($student->id, $this->course->id, 5); // Enrol as student.
+        }
+
+        $this->teacher = $this->getDataGenerator()->create_user();
+        $this->getDataGenerator()->enrol_user($this->teacher->id, $this->course->id, 3); // Enrol as teacher.
+    }
+
+    public function test_get_courses_with_today_sessions() {
+        $this->resetAfterTest(true);
+
+        // Just adding the same session again to check if the method returns the right amount of instances.
+        $this->attendance->add_sessions($this->sessions);
+
+        $courseswithsessions = attendance_handler::get_courses_with_today_sessions($this->teacher->id);
+
+        $this->assertTrue(is_array($courseswithsessions));
+        $this->assertEquals(count($courseswithsessions), 1);
+        $course = array_pop($courseswithsessions);
+        $this->assertEquals($course->fullname, $this->course->fullname);
+        $attendanceinstance = array_pop($course->attendance_instances);
+        $this->assertEquals(count($attendanceinstance['today_sessions']), 2);
+    }
+
+    public function test_get_session() {
+        $this->resetAfterTest(true);
+
+        $courseswithsessions = attendance_handler::get_courses_with_today_sessions($this->teacher->id);
+
+        $course = array_pop($courseswithsessions);
+        $attendanceinstance = array_pop($course->attendance_instances);
+        $session = array_pop($attendanceinstance['today_sessions']);
+
+        $sessioninfo = attendance_handler::get_session($session->id);
+
+        $this->assertEquals($this->attendance->id, $sessioninfo->attendanceid);
+        $this->assertEquals($session->id, $sessioninfo->id);
+        $this->assertEquals(count($sessioninfo->users), 10);
+    }
+
+    public function test_update_user_status() {
+        $this->resetAfterTest(true);
+
+        $courseswithsessions = attendance_handler::get_courses_with_today_sessions($this->teacher->id);
+
+        $course = array_pop($courseswithsessions);
+        $attendanceinstance = array_pop($course->attendance_instances);
+        $session = array_pop($attendanceinstance['today_sessions']);
+
+        $sessioninfo = attendance_handler::get_session($session->id);
+
+        $student = array_pop($sessioninfo->users);
+        $status = array_pop($sessioninfo->statuses);
+        $statusset = $sessioninfo->statusset;
+        attendance_handler::update_user_status($session->id, $student->id, $this->teacher->id, $status->id, $statusset);
+
+        $sessioninfo = attendance_handler::get_session($session->id);
+        $log = $sessioninfo->attendance_log;
+        $studentlog = $log[$student->id];
+
+        $this->assertEquals($status->id, $studentlog->statusid);
+    }
+}
diff --git a/mod/attendance/tests/behat/attendance_mod.feature b/mod/attendance/tests/behat/attendance_mod.feature
new file mode 100644
index 0000000..027bc9f
--- /dev/null
+++ b/mod/attendance/tests/behat/attendance_mod.feature
@@ -0,0 +1,117 @@
+@javascript @mod @uon @mod_attendance
+Feature: Teachers and Students can record session attendance
+  In order to record session attendance
+  As a student
+  I need to be able to mark my own attendance to a session
+  And as a teacher
+  I need to be able to mark any students attendance to a session
+  In order to report on session attendance
+  As a teacher
+  I need to be able to export session attendance and run reports
+  In order to contact students with poor attendance
+  As a teacher
+  I need the ability to message a group of students with low attendance
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | summary                             | category | timecreated   | timemodified  |
+      | Course 1 | C1        | Prove the attendance activity works | 0        | ##yesterday## | ##yesterday## |
+    And the following "users" exist:
+      | username    | firstname | lastname | email            | idnumber | department       | institution |
+      | student1    | Sam       | Student  | student1@asd.com | 1234     | computer science | University of Nottingham |
+      | teacher1    | Teacher   | One      | teacher1@asd.com | 5678     | computer science | University of Nottingham |
+    And the following "course enrolments" exist:
+      | course | user     | role           | timestart     |
+      | C1     | student1 | student        | ##yesterday## |
+      | C1     | teacher1 | editingteacher | ##yesterday## |
+
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage with editing mode on
+    And I follow "Add a block"
+    And I follow "Administration"
+    And I add a "Attendance" to section "1" and I fill the form with:
+      | Name        | Attendance       |
+    And I log out
+    And I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I should see "Attendance"
+    And I log out
+
+  Scenario: Students can mark their own attendance and teacher can hide specific status from students.
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Add"
+    And I set the field "Allow students to record own attendance" to "1"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 00 |
+      | id_sestime_endhour   | 23 |
+      | id_sestime_endminute | 55 |
+    And I click on "id_submitbutton" "button"
+    And I log out
+    And I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Submit attendance"
+    And I should see "Excused"
+    And I log out
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Status set"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[3]/td[5]/input" to "0"
+    And I press "Update"
+    And I log out
+    And I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Submit attendance"
+    And I should not see "Excused"
+    And I set the field "Present" to "1"
+    And I press "Save changes"
+    And I should see "Self-recorded"
+    And I log out
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I expand "Reports" node
+    And I follow "Logs"
+    And I click on "Get these logs" "button"
+    Then "Attendance taken by student" "link" should exist
+
+  Scenario: Teachers can view low grade report and send a message
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Add"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 01 |
+      | id_sestime_endhour   | 02 |
+    And I click on "id_submitbutton" "button"
+    And I follow "Report"
+    And I follow "Low grade"
+    And I set the field "cb_selector" to "1"
+    And I click on "Send a message" "button"
+    And I should see "Message body"
+    And I should see "student1@asd.com"
+    And I follow "Course 1"
+    And I expand "Reports" node
+    And I follow "Logs"
+    And I click on "Get these logs" "button"
+    Then "Attendance report viewed" "link" should exist
+
+  Scenario: Export report includes id number, department and institution
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Add"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 01 |
+      | id_sestime_endhour   | 02 |
+    And I click on "id_submitbutton" "button"
+    And I follow "Export"
+    Then the field "id_ident_idnumber" matches value ""
+    And the field "id_ident_institution" matches value ""
+    And the field "id_ident_department" matches value ""
+
+  # Removed dependency on behat_download to allow automated Travis CI tests to pass.
+  # It would be good to add these back at some point.
\ No newline at end of file
diff --git a/mod/attendance/tests/behat/calendar_features.feature b/mod/attendance/tests/behat/calendar_features.feature
new file mode 100644
index 0000000..d86bc76
--- /dev/null
+++ b/mod/attendance/tests/behat/calendar_features.feature
@@ -0,0 +1,39 @@
+@mod @mod_attendance @javascript
+Feature: Test the calendar related features in the attendance module
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | summary                             | category | timecreated   | timemodified  |
+      | Course 1 | C1        | Prove the attendance activity works | 0        | ##yesterday## | ##yesterday## |
+    And the following "users" exist:
+      | username | firstname | lastname | email                |
+      | teacher1 | Teacher   | 1        | teacher1@example.com |
+      | student1 | Student   | 1        | student1@example.com |
+    And the following "course enrolments" exist:
+      | course | user        | role           | timestart     |
+      | C1     | student1    | student        | ##yesterday## |
+      | C1     | teacher1    | editingteacher | ##yesterday## |
+
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage with editing mode on
+    And I add the "Upcoming events" block
+    And I add a "Attendance" to section "1" and I fill the form with:
+      | Name | Test attendance |
+    And I log out
+
+  Scenario: Calendar events can be created automatically with sessions creation
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test attendance"
+    And I follow "Add session"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 01 |
+      | id_sestime_endhour   | 02 |
+    And I click on "id_submitbutton" "button"
+    And I am on "Course 1" course homepage
+    And I follow "Go to calendar"
+    And I should see "Test attendance"
+    And I log out
+    And I log in as "student1"
+    And I follow "Go to calendar"
+    Then I should see "Test attendance"
diff --git a/mod/attendance/tests/behat/defaultstatus.feature b/mod/attendance/tests/behat/defaultstatus.feature
new file mode 100644
index 0000000..9701fa6
--- /dev/null
+++ b/mod/attendance/tests/behat/defaultstatus.feature
@@ -0,0 +1,30 @@
+@mod @mod_attendance
+Feature: Admin can set default status set for use in new attendance
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | summary                             | category | timecreated   | timemodified  |
+      | Course 1 | C1        | Prove the attendance activity works | 0        | ##yesterday## | ##yesterday## |
+    And the following "users" exist:
+      | username | firstname | lastname | email                |
+      | teacher1 | Teacher   | 1        | teacher1@example.com |
+    And the following "course enrolments" exist:
+      | course | user     | role           | timestart     |
+      | C1     | teacher1 | editingteacher | ##yesterday## |
+    And I log in as "admin"
+    And I navigate to "Attendance" node in "Site administration > Plugins"
+    And I follow "Default status set"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[3]/input" to "customstatusdescription"
+    And I click on "Update" "button" in the "#preferencesform" "css_element"
+    And I should see "Status updated"
+    And I log out
+
+  @javascript
+  Scenario: Modified default status set added to new attendance
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage with editing mode on
+    And I add a "Attendance" to section "1" and I fill the form with:
+      | Name        | Attendance1       |
+    And I follow "Attendance1"
+    And I follow "Status set"
+    Then the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[3]/input" matches value "customstatusdescription"
\ No newline at end of file
diff --git a/mod/attendance/tests/behat/extra_features.feature b/mod/attendance/tests/behat/extra_features.feature
new file mode 100644
index 0000000..db7c77c
--- /dev/null
+++ b/mod/attendance/tests/behat/extra_features.feature
@@ -0,0 +1,211 @@
+@mod @mod_attendance @javascript
+Feature: Test the various new features in the attendance module
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | summary                             | category | timecreated   | timemodified  |
+      | Course 1 | C1        | Prove the attendance activity works | 0        | ##yesterday## | ##yesterday## |
+    And the following "users" exist:
+      | username | firstname | lastname | email                |
+      | teacher1 | Teacher   | 1        | teacher1@example.com |
+      | student1 | Student   | 1        | student1@example.com |
+      | student2 | Student   | 2        | student2@example.com |
+      | student3 | Student   | 3        | student3@example.com |
+      | student4 | Student   | 4        | student4@example.com |
+      | student5 | Student   | 5        | student5@example.com |
+    And the following "course enrolments" exist:
+      | course | user     | role           | timestart     |
+      | C1     | teacher1 | editingteacher | ##yesterday## |
+      | C1     | student1 | student        | ##yesterday## |
+      | C1     | student2 | student        | ##yesterday## |
+      | C1     | student3 | student        | ##yesterday## |
+
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage with editing mode on
+    And I add a "Attendance" to section "1" and I fill the form with:
+      | Name | Test attendance |
+    And I log out
+
+  Scenario: A teacher can create and update temporary users
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test attendance"
+    And I follow "Temporary users"
+
+    When I set the following fields to these values:
+      | Full name | Temporary user 1 |
+      | Email     |                  |
+    And I press "Add user"
+    And I set the following fields to these values:
+      | Full name | Temporary user test 2     |
+      | Email     | tempuser2test@example.com |
+    And I press "Add user"
+    Then I should see "Temporary user 1"
+    And "tempuser2test@example.com" "text" should exist in the "Temporary user test 2" "table_row"
+
+    When I click on "Edit user" "link" in the "Temporary user test 2" "table_row"
+    And the following fields match these values:
+      | Full name | Temporary user test 2     |
+      | Email     | tempuser2test@example.com |
+    And I set the following fields to these values:
+      | Full name | Temporary user 2      |
+      | Email     | tempuser2@example.com |
+    And I press "Edit user"
+    Then "tempuser2@example.com" "text" should exist in the "Temporary user 2" "table_row"
+
+    When I click on "Delete user" "link" in the "Temporary user 1" "table_row"
+    And I press "Continue"
+    Then I should not see "Temporary user 1"
+    And I should see "Temporary user 2"
+
+  Scenario: A teacher can take attendance for temporary users
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test attendance"
+    And I follow "Temporary users"
+    And I set the following fields to these values:
+      | Full name | Temporary user 1 |
+      | Email     |                  |
+    And I press "Add user"
+    And I set the following fields to these values:
+      | Full name | Temporary user 2      |
+      | Email     | tempuser2@example.com |
+    And I press "Add user"
+
+    And I follow "Add"
+    And I set the following fields to these values:
+      | id_addmultiply | 0 |
+    And I click on "submitbutton" "button"
+
+    And I follow "Take attendance"
+    # Present
+    And I click on "td.cell.c3 input" "css_element" in the "Student 1" "table_row"
+    # Late
+    And I click on "td.cell.c4 input" "css_element" in the "Student 2" "table_row"
+    # Excused
+    And I click on "td.cell.c5 input" "css_element" in the "Temporary user 1" "table_row"
+    # Absent
+    And I click on "td.cell.c6 input" "css_element" in the "Temporary user 2" "table_row"
+    And I press "Save attendance"
+    And I follow "Report"
+    And "P" "text" should exist in the "Student 1" "table_row"
+    And "L" "text" should exist in the "Student 2" "table_row"
+    And "E" "text" should exist in the "Temporary user 1" "table_row"
+    And "A" "text" should exist in the "Temporary user 2" "table_row"
+
+    And I follow "Temporary user 2"
+    And I should see "Absent"
+
+    # Merge user.
+    When I follow "Test attendance"
+    And I follow "Temporary users"
+    And I click on "Merge user" "link" in the "Temporary user 2" "table_row"
+    And I set the field "Participant" to "Student 3"
+    And I press "Merge user"
+    And I follow "Report"
+
+    And "P" "text" should exist in the "Student 1" "table_row"
+    And "L" "text" should exist in the "Student 2" "table_row"
+    And "E" "text" should exist in the "Temporary user 1" "table_row"
+    And "A" "text" should exist in the "Student 3" "table_row"
+    Then I should not see "Temporary user 2"
+
+  Scenario: A teacher can select a subset of users for export
+    Given the following "groups" exist:
+      | course | name   | idnumber |
+      | C1     | Group1 | Group1   |
+      | C1     | Group2 | Group2   |
+    And the following "group members" exist:
+      | group  | user     |
+      | Group1 | student1 |
+      | Group1 | student2 |
+      | Group2 | student2 |
+      | Group2 | student3 |
+
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test attendance"
+    And I follow "Add"
+    And I set the following fields to these values:
+      | id_addmultiply | 0 |
+    And I click on "submitbutton" "button"
+
+    And I follow "Export"
+
+    When I set the field "Export specific users" to "Yes"
+    And I set the field "Group" to "Group1"
+    Then the "Users to export" select box should contain "Student 1"
+    And the "Users to export" select box should contain "Student 2"
+    And the "Users to export" select box should not contain "Student 3"
+
+    When I set the field "Group" to "Group2"
+    Then the "Users to export" select box should contain "Student 2"
+    And the "Users to export" select box should contain "Student 3"
+    And the "Users to export" select box should not contain "Student 1"
+    # Ideally the download would be tested here, but that is difficult to configure.
+
+  Scenario: A teacher can create and use multiple status lists
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test attendance"
+    And I follow "Status set"
+    And I set the field "jump" to "New set of statuses"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[1]/td[2]/input" to "G"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[1]/td[3]/input" to "Great"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[1]/td[4]/input" to "3"
+    And I click on "Add" "button" in the ".lastrow" "css_element"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[2]/input" to "O"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[3]/input" to "OK"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[4]/input" to "2"
+    And I click on "Add" "button" in the ".lastrow" "css_element"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[3]/td[2]/input" to "B"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[3]/td[3]/input" to "Bad"
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[3]/td[4]/input" to "0"
+    And I click on "Add" "button" in the ".lastrow" "css_element"
+    And I click on "Update" "button" in the "#preferencesform" "css_element"
+
+    And I follow "Add"
+    And I set the following fields to these values:
+      | id_addmultiply            | 0                      |
+      | Status set                | Status set 1 (P L E A) |
+      | id_sestime_starthour      | 10                     |
+      | id_sestime_startminute    | 0                      |
+      | id_sestime_endhour        | 11 |
+    And I click on "submitbutton" "button"
+    And I follow "Add"
+    And I set the following fields to these values:
+      | id_addmultiply            | 0                    |
+      | Status set                | Status set 2 (G O B) |
+      | id_sestime_starthour      | 12                   |
+      | id_sestime_startminute    | 0                    |
+      | id_sestime_endhour        | 13 |
+    And I click on "submitbutton" "button"
+
+    When I click on "Take attendance" "link" in the "10AM" "table_row"
+    Then "Set status for all users to «Present»" "link" should exist
+    And "Set status for all users to «Late»" "link" should exist
+    And "Set status for all users to «Excused»" "link" should exist
+    And "Set status for all users to «Absent»" "link" should exist
+
+    When I follow "Sessions"
+    And I click on "Take attendance" "link" in the "12PM" "table_row"
+    Then "Set status for all users to «Great»" "link" should exist
+    And "Set status for all users to «OK»" "link" should exist
+    And "Set status for all users to «Bad»" "link" should exist
+
+  Scenario: A teacher can use the radio buttons to set attendance values for all users
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Test attendance"
+    And I follow "Add"
+    And I set the following fields to these values:
+      | id_addmultiply | 0 |
+    And I click on "submitbutton" "button"
+    And I click on "Take attendance" "link"
+
+    When I click on "setallstatuses" "field" in the ".takelist tbody td.c4" "css_element"
+    And I press "Save attendance"
+    And I follow "Report"
+    Then "L" "text" should exist in the "Student 1" "table_row"
+    And "L" "text" should exist in the "Student 2" "table_row"
+    And "L" "text" should exist in the "Student 3" "table_row"
diff --git a/mod/attendance/tests/behat/preferences.feature b/mod/attendance/tests/behat/preferences.feature
new file mode 100644
index 0000000..169db77
--- /dev/null
+++ b/mod/attendance/tests/behat/preferences.feature
@@ -0,0 +1,56 @@
+@mod @uon @mod_attendance @mod_attendance_preferences
+Feature: Teachers can't change status variables to have empty acronyms or descriptions
+  In order to update status variables
+  As a teacher
+  I need to see an error notice below each acronym / description that I try to set to be empty
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | summary                             | category | timecreated   | timemodified  |
+      | Course 1 | C1        | Prove the attendance activity works | 0        | ##yesterday## | ##yesterday## |
+    And the following "users" exist:
+      | username    | firstname | lastname |
+      | student1    | Sam       | Student  |
+      | teacher1    | Teacher   | One      |
+    And the following "course enrolments" exist:
+      | course | user     | role           | timestart     |
+      | C1     | student1 | student        | ##yesterday## |
+      | C1     | teacher1 | editingteacher | ##yesterday## |
+
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage with editing mode on
+    And I add a "Attendance" to section "1" and I fill the form with:
+      | Name        | Attendancepreftest       |
+    And I follow "Attendancepreftest"
+    And I follow "Status set"
+
+  @javascript
+  Scenario: Teachers can add status variables
+    # Set the second status acronym to be empty
+    Given I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[2]/input" to ""
+    # Set the second status description to be empty
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[3]/input" to ""
+    # Set the second status grade to be empty
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[2]/td[4]/input" to ""
+    When I click on "Update" "button" in the "#preferencesform" "css_element"
+    Then I should see "Empty acronyms are not allowed" in the "//*[@id='preferencesform']/table/tbody/tr[2]/td[2]/p" "xpath_element"
+    And I should see "Empty descriptions are not allowed" in the "//*[@id='preferencesform']/table/tbody/tr[2]/td[3]/p" "xpath_element"
+    And I click on "Update" "button" in the "#preferencesform" "css_element"
+
+    # Set the first status acronym to be empty
+    Given I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[1]/td[2]/input" to ""
+    # Set the first status description to be empty
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[1]/td[3]/input" to ""
+    # Set the first status grade to be empty
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[1]/td[4]/input" to ""
+    # Set the third status acronym to be empty
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[3]/td[2]/input" to ""
+    # Set the third status description to be empty
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[3]/td[3]/input" to ""
+    # Set the third status grade to be empty
+    And I set the field with xpath "//*[@id='preferencesform']/table/tbody/tr[3]/td[4]/input" to ""
+    When I click on "Update" "button" in the "#preferencesform" "css_element"
+    Then I should see "Empty acronyms are not allowed" in the "//*[@id='preferencesform']/table/tbody/tr[1]/td[2]/p" "xpath_element"
+    And I should see "Empty descriptions are not allowed" in the "//*[@id='preferencesform']/table/tbody/tr[1]/td[3]/p" "xpath_element"
+    And I should see "Empty acronyms are not allowed" in the "//*[@id='preferencesform']/table/tbody/tr[3]/td[2]/p" "xpath_element"
+    And I should see "Empty descriptions are not allowed" in the "//*[@id='preferencesform']/table/tbody/tr[3]/td[3]/p" "xpath_element"
\ No newline at end of file
diff --git a/mod/attendance/tests/behat/report.feature b/mod/attendance/tests/behat/report.feature
new file mode 100644
index 0000000..a6e5585
--- /dev/null
+++ b/mod/attendance/tests/behat/report.feature
@@ -0,0 +1,250 @@
+@javascript @mod @uon @mod_attendance
+Feature: Visiting reports
+  As a teacher I visit the reports
+
+  Background:
+    Given the following "courses" exist:
+      | fullname | shortname | summary                             | category | timecreated   | timemodified  |
+      | Course 1 | C1        | Prove the attendance activity works | 0        | ##yesterday## | ##yesterday## |
+    And the following "users" exist:
+      | username    | firstname | lastname | email            | idnumber | department       | institution |
+      | student1    | Student   | 1  | student1@asd.com | 1234     | computer science | University of Nottingham |
+      | teacher1    | Teacher   | 1  | teacher1@asd.com | 5678     | computer science | University of Nottingham |
+    And the following "course enrolments" exist:
+      | course | user     | role           | timestart     |
+      | C1     | student1 | student        | ##yesterday## |
+      | C1     | teacher1 | editingteacher | ##yesterday## |
+    And the following config values are set as admin:
+      | enablewarnings | 1 | attendance |
+
+    And I log in as "teacher1"
+    And I am on "Course 1" course homepage with editing mode on
+    And I add a "Attendance" to section "1" and I fill the form with:
+      | Name        | Attendance       |
+    And I follow "Attendance"
+    And I follow "Add a block"
+    And I follow "Administration"
+    And I follow "Add session"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 01 |
+      | id_sestime_endhour   | 02 |
+    And I click on "id_submitbutton" "button"
+    And I follow "Warnings set"
+    And I press "Add warning"
+    And I set the following fields to these values:
+      | id_warningpercent | 84 |
+      | id_warnafter   | 2 |
+    And I click on "id_submitbutton" "button"
+    And I log out
+
+  Scenario: Teacher takes attendance
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Edit settings"
+    Then I set the following fields to these values:
+      | id_grade_modgrade_type  | Point |
+      | id_grade_modgrade_point | 50   |
+    And I press "Save and display"
+
+    When I follow "Report"
+    Then "0 / 0" "text" should exist in the "Student 1" "table_row"
+    And "0.0%" "text" should exist in the "Student 1" "table_row"
+
+    When I follow "Grades" in the user menu
+    And I follow "Course 1"
+    And "-" "text" should exist in the "Student 1" "table_row"
+
+    When I follow "Attendance"
+    Then I click on "Take attendance" "link" in the "1AM - 2AM" "table_row"
+    # Late
+    And I click on "td.cell.c4 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Report"
+    Then "1 / 2" "text" should exist in the "Student 1" "table_row"
+    And "50.0%" "text" should exist in the "Student 1" "table_row"
+
+    When I follow "Grades" in the user menu
+    And I follow "Course 1"
+    And "25.00" "text" should exist in the "Student 1" "table_row"
+
+    And I log out
+
+  Scenario: Teacher changes the maximum points in the attendance settings
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Edit settings"
+    Then I set the following fields to these values:
+      | id_grade_modgrade_type  | Point |
+      | id_grade_modgrade_point | 50   |
+    And I press "Save and display"
+
+    When I follow "Attendance"
+    Then I click on "Take attendance" "link" in the "1AM - 2AM" "table_row"
+    # Excused
+    And I click on "td.cell.c4 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Attendance"
+    And I follow "Edit settings"
+    Then I set the following fields to these values:
+      | id_grade_modgrade_type  | Point |
+      | id_grade_modgrade_point | 70   |
+    And I press "Save and display"
+
+    When I follow "Report"
+    Then "1 / 2" "text" should exist in the "Student 1" "table_row"
+    And "50.0%" "text" should exist in the "Student 1" "table_row"
+
+    When I follow "Grades" in the user menu
+    And I follow "Course 1"
+    Then "35.00" "text" should exist in the "Student 1" "table_row"
+    And I log out
+
+  Scenario: Teacher take attendance of group session
+    Given the following "groups" exist:
+      | course | name   | idnumber |
+      | C1     | Group1 | Group1   |
+    And the following "group members" exist:
+      | group  | user     |
+      | Group1 | student1 |
+
+    When I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Edit settings"
+    And I set the following fields to these values:
+      | id_grade_modgrade_type  | Point |
+      | id_grade_modgrade_point | 50   |
+      | id_groupmode            | Visible groups |
+    And I press "Save and display"
+
+    When I follow "Attendance"
+    Then I click on "Take attendance" "link" in the "1AM - 2AM" "table_row"
+    # Excused
+    And I click on "td.cell.c4 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Add session"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 03 |
+      | id_sestime_endhour   | 04 |
+      | id_sessiontype_1     | 1  |
+      | id_groups            | Group1 |
+    And I click on "id_submitbutton" "button"
+    Then I should see "3AM - 4AM"
+    And "Group: Group1" "text" should exist in the "3AM - 4AM" "table_row"
+
+    When I click on "Take attendance" "link" in the "3AM - 4AM" "table_row"
+    # Present
+    And I click on "td.cell.c3 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Report"
+    Then "3 / 4" "text" should exist in the "Student 1" "table_row"
+    And "75.0%" "text" should exist in the "Student 1" "table_row"
+
+    When I follow "Grades" in the user menu
+    And I follow "Course 1"
+    Then "37.50" "text" should exist in the "Student 1" "table_row"
+
+    And I log out
+
+  Scenario: Teacher visit summary report and absentee report
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Edit settings"
+    And I set the following fields to these values:
+       | id_grade_modgrade_type  | Point |
+       | id_grade_modgrade_point | 50   |
+    And I press "Save and display"
+
+    When I click on "Take attendance" "link" in the "1AM - 2AM" "table_row"
+    # Late
+    And I click on "td.cell.c4 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Add session"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 03 |
+      | id_sestime_endhour   | 04 |
+    And I click on "id_submitbutton" "button"
+    Then I should see "3AM - 4AM"
+
+    When I click on "Take attendance" "link" in the "3AM - 4AM" "table_row"
+    # Present
+    And I click on "td.cell.c3 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Add session"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 05 |
+      | id_sestime_endhour   | 06 |
+    And I click on "id_submitbutton" "button"
+    Then I should see "5AM - 6AM"
+
+    When I follow "Report"
+    And I click on "Summary" "link" in the "All" "table_row"
+
+    Then "3 / 6" "text" should exist in the "Student 1" "table_row"
+    And "50.0%" "text" should exist in the "Student 1" "table_row"
+    And "5 / 6" "text" should exist in the "Student 1" "table_row"
+    And "83.3%" "text" should exist in the "Student 1" "table_row"
+
+    And I follow "Absentee report"
+    And I should see "Student 1"
+
+    And I log out
+
+  Scenario: Student visit user report
+    Given I log in as "teacher1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I follow "Edit settings"
+    Then I set the following fields to these values:
+      | id_grade_modgrade_type  | Point |
+      | id_grade_modgrade_point | 50   |
+    And I press "Save and display"
+
+    When I click on "Take attendance" "link" in the "1AM - 2AM" "table_row"
+    # Late
+    And I click on "td.cell.c4 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Add session"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 03 |
+      | id_sestime_endhour   | 04 |
+    And I click on "id_submitbutton" "button"
+
+    When I click on "Take attendance" "link" in the "3AM - 4AM" "table_row"
+    # Present
+    And I click on "td.cell.c3 input" "css_element" in the "Student 1" "table_row"
+    And I press "Save attendance"
+
+    When I follow "Add session"
+    And I set the following fields to these values:
+      | id_sestime_starthour | 05 |
+      | id_sestime_endhour   | 06 |
+    And I click on "id_submitbutton" "button"
+
+    Then I log out
+
+    When I log in as "student1"
+    And I am on "Course 1" course homepage
+    And I follow "Attendance"
+    And I click on "All" "link" in the ".attfiltercontrols" "css_element"
+
+    Then "2" "text" should exist in the "Taken sessions" "table_row"
+    And "3 / 4" "text" should exist in the "Points over taken sessions:" "table_row"
+    And "75.0%" "text" should exist in the "Percentage over taken sessions:" "table_row"
+    And "3" "text" should exist in the "Total number of sessions:" "table_row"
+    And "3 / 6" "text" should exist in the "Points over all sessions:" "table_row"
+    And "50.0%" "text" should exist in the "Percentage over all sessions:" "table_row"
+    And "5 / 6" "text" should exist in the "Maximum possible points:" "table_row"
+    And "83.3%" "text" should exist in the "Maximum possible percentage:" "table_row"
+
+    And I log out
\ No newline at end of file
diff --git a/mod/attendance/tests/generator/lib.php b/mod/attendance/tests/generator/lib.php
new file mode 100644
index 0000000..7a3dfb8
--- /dev/null
+++ b/mod/attendance/tests/generator/lib.php
@@ -0,0 +1,68 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * mod_attendance data generator
+ *
+ * @package    mod_attendance
+ * @category   test
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * mod_attendance data generator
+ *
+ * @package    mod_attendance
+ * @category   test
+ * @copyright  2013 Davo Smith, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_generator extends testing_module_generator {
+
+    /**
+     * Create new attendance module instance
+     * @param array|stdClass $record
+     * @param array $options
+     * @return stdClass activity record with extra cmid field
+     */
+    public function create_instance($record = null, array $options = null) {
+        global $CFG;
+        require_once($CFG->dirroot.'/mod/attendance/lib.php');
+
+        $this->instancecount++;
+        $i = $this->instancecount;
+
+        $record = (object)(array)$record;
+        $options = (array)$options;
+
+        if (empty($record->course)) {
+            throw new coding_exception('module generator requires $record->course');
+        }
+        if (!isset($record->name)) {
+            $record->name = get_string('pluginname', 'attendance').' '.$i;
+        }
+        if (!isset($record->grade)) {
+            $record->grade = 100;
+        }
+
+        $record->coursemodule = $this->precreate_course_module($record->course, $options);
+        $id = attendance_add_instance($record, null);
+        return $this->post_add_instance($id, $record->coursemodule);
+    }
+}
diff --git a/mod/attendance/update_form.php b/mod/attendance/update_form.php
new file mode 100644
index 0000000..a1dfe53
--- /dev/null
+++ b/mod/attendance/update_form.php
@@ -0,0 +1,181 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Update form
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->libdir.'/formslib.php');
+
+/**
+ * class for displaying update form.
+ *
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_attendance_update_form extends moodleform {
+
+    /**
+     * Called to define this moodle form
+     *
+     * @return void
+     */
+    public function definition() {
+
+        global $DB;
+        $mform    =& $this->_form;
+
+        $modcontext    = $this->_customdata['modcontext'];
+        $sessionid     = $this->_customdata['sessionid'];
+
+        if (!$sess = $DB->get_record('attendance_sessions', array('id' => $sessionid) )) {
+            error('No such session in this course');
+        }
+        $attendancesubnet = $DB->get_field('attendance', 'subnet', array('id' => $sess->attendanceid));
+        $defopts = array('maxfiles' => EDITOR_UNLIMITED_FILES, 'noclean' => true, 'context' => $modcontext);
+        $sess = file_prepare_standard_editor($sess, 'description', $defopts, $modcontext, 'mod_attendance', 'session', $sess->id);
+
+        $starttime = $sess->sessdate - usergetmidnight($sess->sessdate);
+        $starthour = floor($starttime / HOURSECS);
+        $startminute = floor(($starttime - $starthour * HOURSECS) / MINSECS);
+
+        $enddate = $sess->sessdate + $sess->duration;
+        $endtime = $enddate - usergetmidnight($enddate);
+        $endhour = floor($endtime / HOURSECS);
+        $endminute = floor(($endtime - $endhour * HOURSECS) / MINSECS);
+
+        $data = array('sessiondate' => $sess->sessdate,
+                'sestime' => array('starthour' => $starthour, 'startminute' => $startminute,
+                                   'endhour' => $endhour, 'endminute' => $endminute),
+                'sdescription' => $sess->description_editor,
+                'studentscanmark' => $sess->studentscanmark,
+                'studentpassword' => $sess->studentpassword,
+                'subnet' => $sess->subnet,
+                'automark' => $sess->automark,
+                'automarkcompleted' => 0);
+        if ($sess->subnet == $attendancesubnet) {
+            $data['usedefaultsubnet'] = 1;
+        } else {
+            $data['usedefaultsubnet'] = 0;
+        }
+
+        $mform->addElement('header', 'general', get_string('changesession', 'attendance'));
+
+        if ($sess->groupid == 0) {
+            $strtype = get_string('commonsession', 'attendance');
+        } else {
+            $groupname = $DB->get_field('groups', 'name', array('id' => $sess->groupid));
+            $strtype = get_string('group') . ': ' . $groupname;
+        }
+        $mform->addElement('static', 'sessiontypedescription', get_string('sessiontype', 'attendance'), $strtype);
+
+        $olddate = construct_session_full_date_time($sess->sessdate, $sess->duration);
+        $mform->addElement('static', 'olddate', get_string('olddate', 'attendance'), $olddate);
+
+        attendance_form_sessiondate_selector($mform);
+
+        // Show which status set is in use.
+        $maxstatusset = attendance_get_max_statusset($this->_customdata['att']->id);
+        if ($maxstatusset > 0) {
+            $mform->addElement('static', 'statusset', get_string('usestatusset', 'mod_attendance'),
+                attendance_get_setname($this->_customdata['att']->id, $sess->statusset));
+        }
+
+        $mform->addElement('editor', 'sdescription', get_string('description', 'attendance'),
+                           array('rows' => 1, 'columns' => 80), $defopts);
+        $mform->setType('sdescription', PARAM_RAW);
+
+        // Students can mark own attendance.
+        if (!empty(get_config('attendance', 'studentscanmark'))) {
+            $mform->addElement('header', 'headerstudentmarking', get_string('studentmarking', 'attendance'), true);
+            $mform->setExpanded('headerstudentmarking');
+
+            $mform->addElement('checkbox', 'studentscanmark', '', get_string('studentscanmark', 'attendance'));
+            $mform->addHelpButton('studentscanmark', 'studentscanmark', 'attendance');
+
+            $options2 = array(
+                ATTENDANCE_AUTOMARK_DISABLED => get_string('noautomark', 'attendance'),
+                ATTENDANCE_AUTOMARK_ALL => get_string('automarkall', 'attendance'),
+                ATTENDANCE_AUTOMARK_CLOSE => get_string('automarkclose', 'attendance'));
+
+            $mform->addElement('select', 'automark', get_string('automark', 'attendance'), $options2);
+            $mform->setType('automark', PARAM_INT);
+            $mform->addHelpButton('automark', 'automark', 'attendance');
+            $mform->disabledif('automark', 'studentscanmark', 'notchecked');
+
+            $mform->addElement('text', 'studentpassword', get_string('studentpassword', 'attendance'));
+            $mform->setType('studentpassword', PARAM_TEXT);
+            $mform->addHelpButton('studentpassword', 'passwordgrp', 'attendance');
+            $mform->disabledif('studentpassword', 'studentscanmark', 'notchecked');
+            $mform->disabledif('studentpassword', 'automark', 'eq', ATTENDANCE_AUTOMARK_ALL);
+            $mform->disabledif('randompassword', 'automark', 'eq', ATTENDANCE_AUTOMARK_ALL);
+
+            $mgroup = array();
+            $mgroup[] = & $mform->createElement('text', 'subnet', get_string('requiresubnet', 'attendance'));
+            $mform->setDefault('subnet', $this->_customdata['att']->subnet);
+            $mgroup[] = & $mform->createElement('checkbox', 'usedefaultsubnet', get_string('usedefaultsubnet', 'attendance'));
+            $mform->setDefault('usedefaultsubnet', 1);
+            $mform->setType('subnet', PARAM_TEXT);
+
+            $mform->addGroup($mgroup, 'subnetgrp', get_string('requiresubnet', 'attendance'), array(' '), false);
+            $mform->setAdvanced('subnetgrp');
+            $mform->addHelpButton('subnetgrp', 'requiresubnet', 'attendance');
+
+            $mform->disabledif('usedefaultsubnet', 'studentscanmark', 'notchecked');
+            $mform->disabledif('subnet', 'studentscanmark', 'notchecked');
+            $mform->disabledif('subnet', 'usedefaultsubnet', 'checked');
+
+            $mform->addElement('hidden', 'automarkcompleted', '0');
+            $mform->settype('automarkcompleted', PARAM_INT);
+
+        } else {
+            $mform->addElement('hidden', 'studentscanmark', '0');
+            $mform->settype('studentscanmark', PARAM_INT);
+            $mform->addElement('hidden', 'subnet', '0');
+            $mform->settype('subnet', PARAM_TEXT);
+            $mform->addElement('hidden', 'automark', '0');
+            $mform->settype('automark', PARAM_INT);
+            $mform->addElement('hidden', 'automarkcompleted', '0');
+            $mform->settype('automarkcompleted', PARAM_INT);
+        }
+
+        $mform->setDefaults($data);
+
+        $this->add_action_buttons(true);
+    }
+
+    /**
+     * Perform minimal validation on the settings form
+     * @param array $data
+     * @param array $files
+     */
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+
+        $sesstarttime = $data['sestime']['starthour'] * HOURSECS + $data['sestime']['startminute'] * MINSECS;
+        $sesendtime = $data['sestime']['endhour'] * HOURSECS + $data['sestime']['endminute'] * MINSECS;
+        if ($sesendtime < $sesstarttime) {
+            $errors['sestime'] = get_string('invalidsessionendtime', 'attendance');
+        }
+
+        return $errors;
+    }
+}
diff --git a/mod/attendance/version.php b/mod/attendance/version.php
new file mode 100644
index 0000000..dec509c
--- /dev/null
+++ b/mod/attendance/version.php
@@ -0,0 +1,31 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+$plugin->version  = 2017082200;
+$plugin->requires = 2017042100;
+$plugin->release = '3.3.11';
+$plugin->maturity  = MATURITY_ALPHA;
+$plugin->cron     = 0;
+$plugin->component = 'mod_attendance';
diff --git a/mod/attendance/view.php b/mod/attendance/view.php
new file mode 100644
index 0000000..97c05e7
--- /dev/null
+++ b/mod/attendance/view.php
@@ -0,0 +1,88 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Prints attendance info for particular user
+ *
+ * @package    mod_attendance
+ * @copyright  2011 Artem Andreev <andreev.artem@gmail.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once(dirname(__FILE__).'/locallib.php');
+
+$pageparams = new mod_attendance_view_page_params();
+
+$id                     = required_param('id', PARAM_INT);
+$pageparams->studentid  = optional_param('studentid', null, PARAM_INT);
+$pageparams->mode       = optional_param('mode', mod_attendance_view_page_params::MODE_THIS_COURSE, PARAM_INT);
+$pageparams->view       = optional_param('view', null, PARAM_INT);
+$pageparams->curdate    = optional_param('curdate', null, PARAM_INT);
+
+$cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+$course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+$attendance    = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+require_login($course, true, $cm);
+$context = context_module::instance($cm->id);
+require_capability('mod/attendance:view', $context);
+
+$pageparams->init($cm);
+$att = new mod_attendance_structure($attendance, $cm, $course, $context, $pageparams);
+
+// Not specified studentid for displaying attendance?
+// Redirect to appropriate page if can.
+if (!$pageparams->studentid) {
+    $capabilities = array(
+        'mod/attendance:manageattendances',
+        'mod/attendance:takeattendances',
+        'mod/attendance:changeattendances'
+    );
+    if (has_any_capability($capabilities, $context)) {
+        redirect($att->url_manage());
+    } else if (has_capability('mod/attendance:viewreports', $context)) {
+        redirect($att->url_report());
+    }
+}
+
+$PAGE->set_url($att->url_view());
+$PAGE->set_title($course->shortname. ": ".$att->name);
+$PAGE->set_heading($course->fullname);
+$PAGE->set_cacheable(true);
+$PAGE->navbar->add(get_string('attendancereport', 'attendance'));
+
+$output = $PAGE->get_renderer('mod_attendance');
+
+if (isset($pageparams->studentid) && $USER->id != $pageparams->studentid) {
+    // Only users with proper permissions should be able to see any user's individual report.
+    require_capability('mod/attendance:viewreports', $context);
+    $userid = $pageparams->studentid;
+} else {
+    // A valid request to see another users report has not been sent, show the user's own.
+    $userid = $USER->id;
+}
+
+$userdata = new attendance_user_data($att, $userid);
+$header = new mod_attendance_header($att);
+
+echo $output->header();
+
+echo $output->render($header);
+echo $output->render($userdata);
+
+echo $output->footer();
diff --git a/mod/attendance/warnings.php b/mod/attendance/warnings.php
new file mode 100644
index 0000000..74518a2
--- /dev/null
+++ b/mod/attendance/warnings.php
@@ -0,0 +1,203 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Allows default warnings to be modified.
+ *
+ * @package   mod_attendance
+ * @copyright 2017 Dan Marsden http://danmarsden.com
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(__DIR__.'/../../config.php');
+require_once($CFG->libdir.'/adminlib.php');
+require_once($CFG->libdir.'/formslib.php');
+require_once($CFG->dirroot.'/mod/attendance/lib.php');
+require_once($CFG->dirroot.'/mod/attendance/locallib.php');
+
+$action = optional_param('action', '', PARAM_ALPHA);
+$notid = optional_param('notid', 0, PARAM_INT);
+$id = optional_param('id', 0, PARAM_INT);
+
+$url = new moodle_url('/mod/attendance/warnings.php');
+
+// This page is used for configuring default set and for configuring attendance level set.
+if (empty($id)) {
+    // This is the default status set - show appropriate admin stuff and check admin permissions.
+    admin_externalpage_setup('managemodules');
+
+    $output = $PAGE->get_renderer('mod_attendance');
+    echo $OUTPUT->header();
+    echo $OUTPUT->heading(get_string('defaultwarnings', 'mod_attendance'));
+    $tabmenu = attendance_print_settings_tabs('defaultwarnings');
+    echo $tabmenu;
+
+} else {
+    // This is an attendance level config.
+    $cm             = get_coursemodule_from_id('attendance', $id, 0, false, MUST_EXIST);
+    $course         = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+    $att            = $DB->get_record('attendance', array('id' => $cm->instance), '*', MUST_EXIST);
+
+    require_login($course, false, $cm);
+    $context = context_module::instance($cm->id);
+    require_capability('mod/attendance:changepreferences', $context);
+
+    $att = new mod_attendance_structure($att, $cm, $course, $PAGE->context);
+
+    $PAGE->set_url($url);
+    $PAGE->set_title($course->shortname. ": ".$att->name);
+    $PAGE->set_heading($course->fullname);
+    $PAGE->navbar->add($att->name);
+
+    $output = $PAGE->get_renderer('mod_attendance');
+    $tabs = new attendance_tabs($att, attendance_tabs::TAB_WARNINGS);
+    echo $output->header();
+    echo $output->heading(get_string('attendanceforthecourse', 'attendance').' :: ' .format_string($course->fullname));
+    echo $output->render($tabs);
+
+}
+
+$mform = new mod_attendance_add_warning_form($url, array('notid' => $notid, 'id' => $id));
+
+if ($data = $mform->get_data()) {
+    if (empty($data->notid)) {
+        // Insert new record.
+        $notify = new stdClass();
+        if (empty($id)) {
+            $notify->idnumber = 0;
+        } else {
+            $notify->idnumber = $att->id;
+        }
+
+        $notify->warningpercent = $data->warningpercent;
+        $notify->warnafter = $data->warnafter;
+        $notify->maxwarn = $data->maxwarn;
+        $notify->emailuser = empty($data->emailuser) ? 0 : $data->emailuser;
+        $notify->emailsubject = $data->emailsubject;
+        $notify->emailcontent = $data->emailcontent['text'];
+        $notify->emailcontentformat = $data->emailcontent['format'];
+        $notify->thirdpartyemails = '';
+        if (!empty($data->thirdpartyemails)) {
+            $notify->thirdpartyemails = implode(',', $data->thirdpartyemails);
+        }
+        $existingrecord = $DB->record_exists('attendance_warning', array('idnumber' => $notify->idnumber,
+                                                                         'warningpercent' => $notify->warningpercent,
+                                                                              'warnafter' => $notify->warnafter));
+        if (empty($existingrecord)) {
+            $DB->insert_record('attendance_warning', $notify);
+            echo $OUTPUT->notification(get_string('warningupdated', 'mod_attendance'), 'success');
+        } else {
+            echo $OUTPUT->notification(get_string('warningfailed', 'mod_attendance'), 'warning');
+        }
+
+    } else {
+        $notify = $DB->get_record('attendance_warning', array('id' => $data->notid));
+        if (!empty($id) && $data->idnumber != $att->id) {
+            // Someone is trying to update a record for a different attendance.
+            print_error('invalidcoursemodule');
+        } else {
+            $notify = new stdClass();
+            $notify->id = $data->notid;
+            $notify->idnumber = $data->idnumber;
+            $notify->warningpercent = $data->warningpercent;
+            $notify->warnafter = $data->warnafter;
+            $notify->maxwarn = $data->maxwarn;
+            $notify->emailuser = empty($data->emailuser) ? 0 : $data->emailuser;
+            $notify->emailsubject = $data->emailsubject;
+            $notify->emailcontentformat = $data->emailcontent['format'];
+            $notify->emailcontent = $data->emailcontent['text'];
+            $notify->thirdpartyemails = '';
+            if (!empty($data->thirdpartyemails)) {
+                $notify->thirdpartyemails = implode(',', $data->thirdpartyemails);
+            }
+            $existingrecord = $DB->get_record('attendance_warning', array('idnumber' => $notify->idnumber,
+                'warningpercent' => $notify->warningpercent));
+            if (empty($existingrecord) || $existingrecord->id == $notify->id) {
+                $DB->update_record('attendance_warning', $notify);
+                echo $OUTPUT->notification(get_string('warningupdated', 'mod_attendance'), 'success');
+            } else {
+                echo $OUTPUT->notification(get_string('warningfailed', 'mod_attendance'), 'error');
+            }
+        }
+    }
+}
+if ($action == 'delete' && !empty($notid)) {
+    if (!optional_param('confirm', false, PARAM_BOOL)) {
+        $cancelurl = $url;
+        $url->params(array('action' => 'delete', 'notid' => $notid, 'sesskey' => sesskey(), 'confirm' => true, 'id' => $id));
+        echo $OUTPUT->confirm(get_string('deletewarningconfirm', 'mod_attendance'), $url, $cancelurl);
+        echo $OUTPUT->footer();
+        exit;
+    } else {
+        require_sesskey();
+        $params = array('id' => $notid);
+        if (!empty($att)) {
+            // Add id/level to array.
+            $params['idnumber'] = $att->id;
+        }
+        $DB->delete_records('attendance_warning', $params);
+        echo $OUTPUT->notification(get_string('warningdeleted', 'mod_attendance'), 'success');
+    }
+}
+if ($action == 'update' && !empty($notid)) {
+    $existing = $DB->get_record('attendance_warning', array('id' => $notid));
+    $content = $existing->emailcontent;
+    $existing->emailcontent = array();
+    $existing->emailcontent['text'] = $content;
+    $existing->emailcontent['format'] = $existing->emailcontentformat;
+    $existing->notid = $existing->id;
+    $existing->id = $id;
+    $mform->set_data($existing);
+    $mform->display();
+} else if ($action == 'add' && confirm_sesskey()) {
+    $mform->display();
+} else {
+    if (empty($id)) {
+        $warningdesc = get_string('warningdesc', 'mod_attendance');
+        $idnumber = 0;
+    } else {
+        $warningdesc = get_string('warningdesc_course', 'mod_attendance');
+        $idnumber = $att->id;
+    }
+    echo $OUTPUT->box($warningdesc, 'generalbox attendancedesc', 'notice');
+    $existingnotifications = $DB->get_records('attendance_warning',
+        array('idnumber' => $idnumber),
+        'warningpercent');
+
+    if (!empty($existingnotifications)) {
+        $table = new html_table();
+        $table->head = array(get_string('warningthreshold', 'mod_attendance'),
+            get_string('numsessions', 'mod_attendance'),
+            get_string('emailsubject', 'mod_attendance'),
+            '');
+        foreach ($existingnotifications as $notification) {
+            $url->params(array('action' => 'delete', 'notid' => $notification->id, 'id' => $id));
+            $actionbuttons = $OUTPUT->action_icon($url, new pix_icon('t/delete',
+                get_string('delete', 'attendance')), null, null);
+            $url->params(array('action' => 'update', 'notid' => $notification->id, 'id' => $id));
+            $actionbuttons .= $OUTPUT->action_icon($url, new pix_icon('t/edit',
+                get_string('update', 'attendance')), null, null);
+            $table->data[] = array($notification->warningpercent, $notification->warnafter,
+                                   $notification->emailsubject, $actionbuttons);
+        }
+        echo html_writer::table($table);
+    }
+    $addurl = new moodle_url('/mod/attendance/warnings.php', array('action' => 'add', 'id' => $id));
+    echo $OUTPUT->single_button($addurl, get_string('addwarning', 'mod_attendance'));
+
+}
+
+echo $OUTPUT->footer();
\ No newline at end of file
diff --git a/mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter-debug.js b/mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..6bb50aaba1c21b6050c11cde39cf463475f2b9f1
GIT binary patch
literal 1435
zcmZ`(O>f&U488kTaNfaAkl6Qr3>}7I=%MY9p#_4V2vmzs1Spax$?b|X|9zC?B+kcl
zh#iWLe0-!ieYz_c=Xti$noAt7G@mo)P;sUz950M+n_5VRCL2NBs>%tiAfJxl;rspV
z0M<!T4q+knE0b^!!!jvLKr4lEV=gRvrI-r;x-nT0Dz-vdF^kE4ahM6N;l%X$3G2<}
ziEGg#MX+@Obb@WgnntLFy#UopIZDEfP{Lj8sOP$I*3<SNf6~?>SZ74#(#weOX15eJ
zCfWw2R33Y1yxhf^7FuDReHDBjxMYKZ)g)V<RZFH8Nb-f4ZNr(vIb}6-DXfd;K@7C%
zIG4j=3_OIV;7?ctj{%Q?cj1;~(nP)1t>Pe5@USSca>%0`MHizC&*Q{BO-K(oZQD`D
zyej@23KneuZ_LD`f{y~xSevJ8qrqR0fIW>V<xg~hc&JL(0cp3@RIM?n+(9vvFUTu6
z_2Z1@3v_w*#$=0Gr>SQcXb|AEtFtcJ%OS4`uJjuQYQ&jF-a>8kDi~t0D0L@smm*Yg
zKr8qjGx2UkAlk*ISur7DPMmiWMe<Cr(M>C9U`{gkXCN{<I|Go58kqVR?3t1wkBBeV
z*Fe*QHGP}B|513&YHgw)Nll>x;@HRg?ZOpHW*^_xFQXeY?jz(7d~goqaa4O~;e+N_
zR0gTYJiCgDe7h>Um%er$wLNrQ*nO|JBi8Hr*3&<C-i}rgeTku%ng131<v$pI8#+Zx
zh1TJZrI6fjk2CI@UC(^7{lECONoa{B$z}xE&GYT#_ub>e4RKhf2LH6epiM7emcG(f
OOh=F^k|TZDP?mp^46UaC

literal 0
HcmV?d00001

diff --git a/mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter-min.js b/mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..6e5da5771069eefaea509311ed7c3aa8381d7caa
GIT binary patch
literal 618
zcmZvaPiq@75XJBL6wVZa1QYdcXG@^;kVBKwl0Y!VsH<6fU@dJ&vrdY$-#zlC%^xQ>
z&12@hpGLa9zHmMS1DljWOQ)L@mR^-&@Uf=Tm88CFxK$FsrjNC9iiS|_?z?;2TOA4y
z54!;mMfb|F+Kt7=cOA!7p2ogykt6H$IjQ78pJ|d+xK^0yn)8#z|EWsf)<`ZzGVqDR
za<m8Qd{g)h)N3DC1UQ=XUGPfFVlK;;vyQ4A@KAqYIY8NZnJ7jSWXv<IKFD2>8rb@_
zC$K2hd-%C7FutDL<K)sD-8h@N{l1Ifgf?kQ#?H7ga$Hq?4AgL>V4Ea{CmbhY#jSn5
zx{E&~btL-Nusu03xddFMK&}=lS2l3=Wc%gp^S?t0%r3vcB0mdC_X;R;UhJXDOO>DT
sb<J%s+1g<k5YBJD{rq)tb$JfB6Z+G$P@c}=x6ftO5KAyD20J@?1k{w=zW@LL

literal 0
HcmV?d00001

diff --git a/mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter.js b/mod/attendance/yui/build/moodle-mod_attendance-groupfilter/moodle-mod_attendance-groupfilter.js
new file mode 100644
index 0000000000000000000000000000000000000000..6bb50aaba1c21b6050c11cde39cf463475f2b9f1
GIT binary patch
literal 1435
zcmZ`(O>f&U488kTaNfaAkl6Qr3>}7I=%MY9p#_4V2vmzs1Spax$?b|X|9zC?B+kcl
zh#iWLe0-!ieYz_c=Xti$noAt7G@mo)P;sUz950M+n_5VRCL2NBs>%tiAfJxl;rspV
z0M<!T4q+knE0b^!!!jvLKr4lEV=gRvrI-r;x-nT0Dz-vdF^kE4ahM6N;l%X$3G2<}
ziEGg#MX+@Obb@WgnntLFy#UopIZDEfP{Lj8sOP$I*3<SNf6~?>SZ74#(#weOX15eJ
zCfWw2R33Y1yxhf^7FuDReHDBjxMYKZ)g)V<RZFH8Nb-f4ZNr(vIb}6-DXfd;K@7C%
zIG4j=3_OIV;7?ctj{%Q?cj1;~(nP)1t>Pe5@USSca>%0`MHizC&*Q{BO-K(oZQD`D
zyej@23KneuZ_LD`f{y~xSevJ8qrqR0fIW>V<xg~hc&JL(0cp3@RIM?n+(9vvFUTu6
z_2Z1@3v_w*#$=0Gr>SQcXb|AEtFtcJ%OS4`uJjuQYQ&jF-a>8kDi~t0D0L@smm*Yg
zKr8qjGx2UkAlk*ISur7DPMmiWMe<Cr(M>C9U`{gkXCN{<I|Go58kqVR?3t1wkBBeV
z*Fe*QHGP}B|513&YHgw)Nll>x;@HRg?ZOpHW*^_xFQXeY?jz(7d~goqaa4O~;e+N_
zR0gTYJiCgDe7h>Um%er$wLNrQ*nO|JBi8Hr*3&<C-i}rgeTku%ng131<v$pI8#+Zx
zh1TJZrI6fjk2CI@UC(^7{lECONoa{B$z}xE&GYT#_ub>e4RKhf2LH6epiM7emcG(f
OOh=F^k|TZDP?mp^46UaC

literal 0
HcmV?d00001

diff --git a/mod/attendance/yui/src/groupfilter/build.json b/mod/attendance/yui/src/groupfilter/build.json
new file mode 100644
index 0000000..9545400
--- /dev/null
+++ b/mod/attendance/yui/src/groupfilter/build.json
@@ -0,0 +1,10 @@
+{
+    "name": "moodle-mod_attendance-groupfilter",
+    "builds": {
+        "moodle-mod_attendance-groupfilter": {
+            "jsfiles": [
+                "groupfilter.js"
+            ]
+        }
+    }
+}
\ No newline at end of file
diff --git a/mod/attendance/yui/src/groupfilter/js/groupfilter.js b/mod/attendance/yui/src/groupfilter/js/groupfilter.js
new file mode 100644
index 0000000..5cd7ade
--- /dev/null
+++ b/mod/attendance/yui/src/groupfilter/js/groupfilter.js
@@ -0,0 +1,41 @@
+/* global M */
+// eslint-disable-next-line camelcase
+M.mod_attendance = M.mod_attendance || {};
+M.mod_attendance.groupfilter = {
+    groupmappings: null,
+
+    init: function(opts) {
+        "use strict";
+
+        this.groupmappings = opts.groupmappings;
+        Y.one('#id_group').after('change', this.update_user_list, this);
+    },
+
+    /**
+     * Update the user list with those found in the selected group.
+     */
+    update_user_list: function() { // eslint-disable-line camelcase
+        "use strict";
+        var groupid, userlist, users, userid, opt;
+
+        // Get the list of users in the current group.
+        groupid = Y.one('#id_group').get('value');
+        users = this.groupmappings[groupid];
+
+        // Remove the options from the users select.
+        userlist = Y.one('#id_users');
+        userlist.get('options').remove();
+
+        // Repopulate the users select with those users in the selected group (if any).
+        if (users !== undefined) {
+            for (userid in users) {
+                if (users.hasOwnProperty(userid)) {
+                    opt = Y.Node.create('<option></option>');
+                    opt.set('value', userid);
+                    opt.set('text', users[userid]);
+                    userlist.appendChild(opt);
+                }
+            }
+        }
+    }
+};
diff --git a/mod/attendance/yui/src/groupfilter/meta/groupfilter.json b/mod/attendance/yui/src/groupfilter/meta/groupfilter.json
new file mode 100644
index 0000000..5308751
--- /dev/null
+++ b/mod/attendance/yui/src/groupfilter/meta/groupfilter.json
@@ -0,0 +1,8 @@
+{
+    "moodle-mod_attendance-groupfilter": {
+        "requires": [
+            "base",
+            "node"
+        ]
+    }
+}
\ No newline at end of file
-- 
1.8.3.1

