From 8ba2d296db9341ce68765afae86d3de9a9ec8d7c Mon Sep 17 00:00:00 2001
From: root <root@moodle.levinsky.ac.il>
Date: Sun, 16 Jul 2017 23:48:23 +0300
Subject: [PATCH 03/95] mod/ouwiki (new)

---
 mod/ouwiki/.sams                                   |    6 +
 mod/ouwiki/README                                  |   68 +
 mod/ouwiki/annotate.php                            |  357 ++
 mod/ouwiki/annotate_form.php                       |   77 +
 mod/ouwiki/backup/moodle1/lib.php                  |  130 +
 .../moodle2/backup_ouwiki_activity_task.class.php  |   60 +
 .../backup/moodle2/backup_ouwiki_settingslib.php   |   26 +
 .../backup/moodle2/backup_ouwiki_stepslib.php      |  120 +
 .../moodle2/restore_ouwiki_activity_task.class.php |  112 +
 .../backup/moodle2/restore_ouwiki_stepslib.php     |  330 ++
 mod/ouwiki/basicpage.php                           |   77 +
 .../event/course_module_instance_list_viewed.php   |   39 +
 mod/ouwiki/classes/event/ouwiki_viewed.php         |  120 +
 mod/ouwiki/classes/event/page_created.php          |  115 +
 mod/ouwiki/classes/event/page_lock.php             |  114 +
 mod/ouwiki/classes/event/page_unlock.php           |  114 +
 mod/ouwiki/classes/event/page_updated.php          |  113 +
 mod/ouwiki/classes/event/page_version_deleted.php  |  110 +
 .../classes/event/page_version_undeleted.php       |  110 +
 mod/ouwiki/classes/event/save_failed.php           |  105 +
 mod/ouwiki/classes/task/daily_housekeeping.php     |   53 +
 mod/ouwiki/confirmlock.php                         |   43 +
 mod/ouwiki/confirmloggedin.php                     |   60 +
 mod/ouwiki/csv_writer.php                          |  105 +
 mod/ouwiki/db/access.php                           |  196 +
 mod/ouwiki/db/install.xml                          |  150 +
 mod/ouwiki/db/log.php                              |   53 +
 mod/ouwiki/db/tasks.php                            |   38 +
 mod/ouwiki/db/upgrade.php                          |  492 +++
 mod/ouwiki/delete.php                              |  159 +
 mod/ouwiki/diff.php                                |  141 +
 mod/ouwiki/difflib.php                             |  829 ++++
 mod/ouwiki/edit.php                                |  494 +++
 mod/ouwiki/edit_form.php                           |   69 +
 mod/ouwiki/entirewiki.php                          |  264 ++
 mod/ouwiki/feed-history.php                        |  159 +
 mod/ouwiki/feed-wikihistory.php                    |  148 +
 mod/ouwiki/feed.xsl                                |   54 +
 mod/ouwiki/hideannotations.php                     |   45 +
 mod/ouwiki/history.php                             |  284 ++
 mod/ouwiki/import.php                              |  722 ++++
 mod/ouwiki/import_form.php                         |  223 ++
 mod/ouwiki/index.php                               |  110 +
 mod/ouwiki/internaldoc/participation.txt           |  105 +
 mod/ouwiki/internaldoc/testcase.import.txt         |  274 ++
 .../internaldoc/testcase.importbetweencourses.txt  |  109 +
 mod/ouwiki/internaldoc/testcase.participation.txt  |  210 ++
 mod/ouwiki/internaldoc/testcase.uploadtemplate.txt |  149 +
 mod/ouwiki/internaldoc/testcase.wordcount.txt      |  205 +
 mod/ouwiki/internaldoc/uploadtemplate.txt          |   12 +
 mod/ouwiki/internaldoc/wordcount.txt               |   18 +
 mod/ouwiki/lang/en/ouwiki.php                      |  591 +++
 mod/ouwiki/lib.php                                 |  878 +++++
 mod/ouwiki/locallib.php                            | 3980 ++++++++++++++++++++
 mod/ouwiki/lock.php                                |  153 +
 mod/ouwiki/mod_form.php                            |  189 +
 mod/ouwiki/module.js                               |  539 +++
 mod/ouwiki/nojslock.php                            |   40 +
 mod/ouwiki/override.php                            |   47 +
 mod/ouwiki/participation.php                       |  112 +
 mod/ouwiki/participation_table.php                 |  321 ++
 mod/ouwiki/pix/annotation-marker.gif               |  Bin 0 -> 53 bytes
 mod/ouwiki/pix/annotation.gif                      |  Bin 0 -> 479 bytes
 mod/ouwiki/pix/diff_added_begins.gif               |  Bin 0 -> 61 bytes
 mod/ouwiki/pix/diff_added_ends.gif                 |  Bin 0 -> 51 bytes
 mod/ouwiki/pix/diff_deleted_begins.gif             |  Bin 0 -> 58 bytes
 mod/ouwiki/pix/diff_deleted_ends.gif               |  Bin 0 -> 51 bytes
 mod/ouwiki/pix/dot.png                             |  Bin 0 -> 69 bytes
 mod/ouwiki/pix/icon.gif                            |  Bin 0 -> 1027 bytes
 mod/ouwiki/pix/orphan.gif                          |  Bin 0 -> 306 bytes
 mod/ouwiki/pix/rss.gif                             |  Bin 0 -> 1007 bytes
 mod/ouwiki/pix/warning.png                         |  Bin 0 -> 786 bytes
 mod/ouwiki/renderer.php                            | 1374 +++++++
 mod/ouwiki/revert.php                              |  107 +
 mod/ouwiki/savegrades.php                          |   70 +
 mod/ouwiki/search.php                              |   62 +
 mod/ouwiki/styles.css                              |  889 +++++
 mod/ouwiki/tests/behat/basic.feature               |  702 ++++
 mod/ouwiki/tests/behat/behat_mod_ouwiki.php        |   76 +
 mod/ouwiki/tests/behat/lastupdated.feature         |  110 +
 mod/ouwiki/tests/behat/viewdetails.feature         |   94 +
 mod/ouwiki/tests/diff_test.php                     |  338 ++
 mod/ouwiki/tests/fixtures/simple_template.zip      |  Bin 0 -> 214 bytes
 mod/ouwiki/tests/generator/lib.php                 |  127 +
 mod/ouwiki/tests/generator_test.php                |  105 +
 mod/ouwiki/tests/locallib_test.php                 |  723 ++++
 mod/ouwiki/tests/participation_test.php            |  235 ++
 mod/ouwiki/tests/sections_test.php                 |   70 +
 mod/ouwiki/userparticipation.php                   |  110 +
 mod/ouwiki/version.php                             |   29 +
 mod/ouwiki/view.php                                |  114 +
 mod/ouwiki/viewold.php                             |  126 +
 mod/ouwiki/wikihistory.php                         |  277 ++
 mod/ouwiki/wikiindex.php                           |  200 +
 mod/ouwiki/yui/pageselector/pageselector.js        |   37 +
 95 files changed, 21101 insertions(+)
 create mode 100644 mod/ouwiki/.sams
 create mode 100644 mod/ouwiki/README
 create mode 100644 mod/ouwiki/annotate.php
 create mode 100644 mod/ouwiki/annotate_form.php
 create mode 100644 mod/ouwiki/backup/moodle1/lib.php
 create mode 100644 mod/ouwiki/backup/moodle2/backup_ouwiki_activity_task.class.php
 create mode 100644 mod/ouwiki/backup/moodle2/backup_ouwiki_settingslib.php
 create mode 100644 mod/ouwiki/backup/moodle2/backup_ouwiki_stepslib.php
 create mode 100644 mod/ouwiki/backup/moodle2/restore_ouwiki_activity_task.class.php
 create mode 100644 mod/ouwiki/backup/moodle2/restore_ouwiki_stepslib.php
 create mode 100644 mod/ouwiki/basicpage.php
 create mode 100644 mod/ouwiki/classes/event/course_module_instance_list_viewed.php
 create mode 100644 mod/ouwiki/classes/event/ouwiki_viewed.php
 create mode 100644 mod/ouwiki/classes/event/page_created.php
 create mode 100644 mod/ouwiki/classes/event/page_lock.php
 create mode 100644 mod/ouwiki/classes/event/page_unlock.php
 create mode 100644 mod/ouwiki/classes/event/page_updated.php
 create mode 100644 mod/ouwiki/classes/event/page_version_deleted.php
 create mode 100644 mod/ouwiki/classes/event/page_version_undeleted.php
 create mode 100644 mod/ouwiki/classes/event/save_failed.php
 create mode 100644 mod/ouwiki/classes/task/daily_housekeeping.php
 create mode 100644 mod/ouwiki/confirmlock.php
 create mode 100644 mod/ouwiki/confirmloggedin.php
 create mode 100644 mod/ouwiki/csv_writer.php
 create mode 100644 mod/ouwiki/db/access.php
 create mode 100644 mod/ouwiki/db/install.xml
 create mode 100644 mod/ouwiki/db/log.php
 create mode 100644 mod/ouwiki/db/tasks.php
 create mode 100644 mod/ouwiki/db/upgrade.php
 create mode 100644 mod/ouwiki/delete.php
 create mode 100644 mod/ouwiki/diff.php
 create mode 100644 mod/ouwiki/difflib.php
 create mode 100644 mod/ouwiki/edit.php
 create mode 100644 mod/ouwiki/edit_form.php
 create mode 100644 mod/ouwiki/entirewiki.php
 create mode 100644 mod/ouwiki/feed-history.php
 create mode 100644 mod/ouwiki/feed-wikihistory.php
 create mode 100644 mod/ouwiki/feed.xsl
 create mode 100644 mod/ouwiki/hideannotations.php
 create mode 100644 mod/ouwiki/history.php
 create mode 100644 mod/ouwiki/import.php
 create mode 100644 mod/ouwiki/import_form.php
 create mode 100644 mod/ouwiki/index.php
 create mode 100644 mod/ouwiki/internaldoc/participation.txt
 create mode 100644 mod/ouwiki/internaldoc/testcase.import.txt
 create mode 100644 mod/ouwiki/internaldoc/testcase.importbetweencourses.txt
 create mode 100644 mod/ouwiki/internaldoc/testcase.participation.txt
 create mode 100644 mod/ouwiki/internaldoc/testcase.uploadtemplate.txt
 create mode 100644 mod/ouwiki/internaldoc/testcase.wordcount.txt
 create mode 100644 mod/ouwiki/internaldoc/uploadtemplate.txt
 create mode 100644 mod/ouwiki/internaldoc/wordcount.txt
 create mode 100644 mod/ouwiki/lang/en/ouwiki.php
 create mode 100644 mod/ouwiki/lib.php
 create mode 100644 mod/ouwiki/locallib.php
 create mode 100644 mod/ouwiki/lock.php
 create mode 100644 mod/ouwiki/mod_form.php
 create mode 100644 mod/ouwiki/module.js
 create mode 100644 mod/ouwiki/nojslock.php
 create mode 100644 mod/ouwiki/override.php
 create mode 100644 mod/ouwiki/participation.php
 create mode 100644 mod/ouwiki/participation_table.php
 create mode 100644 mod/ouwiki/pix/annotation-marker.gif
 create mode 100644 mod/ouwiki/pix/annotation.gif
 create mode 100644 mod/ouwiki/pix/diff_added_begins.gif
 create mode 100644 mod/ouwiki/pix/diff_added_ends.gif
 create mode 100644 mod/ouwiki/pix/diff_deleted_begins.gif
 create mode 100644 mod/ouwiki/pix/diff_deleted_ends.gif
 create mode 100644 mod/ouwiki/pix/dot.png
 create mode 100644 mod/ouwiki/pix/icon.gif
 create mode 100644 mod/ouwiki/pix/orphan.gif
 create mode 100644 mod/ouwiki/pix/rss.gif
 create mode 100644 mod/ouwiki/pix/warning.png
 create mode 100644 mod/ouwiki/renderer.php
 create mode 100644 mod/ouwiki/revert.php
 create mode 100644 mod/ouwiki/savegrades.php
 create mode 100644 mod/ouwiki/search.php
 create mode 100644 mod/ouwiki/styles.css
 create mode 100644 mod/ouwiki/tests/behat/basic.feature
 create mode 100644 mod/ouwiki/tests/behat/behat_mod_ouwiki.php
 create mode 100644 mod/ouwiki/tests/behat/lastupdated.feature
 create mode 100644 mod/ouwiki/tests/behat/viewdetails.feature
 create mode 100644 mod/ouwiki/tests/diff_test.php
 create mode 100644 mod/ouwiki/tests/fixtures/simple_template.zip
 create mode 100644 mod/ouwiki/tests/generator/lib.php
 create mode 100644 mod/ouwiki/tests/generator_test.php
 create mode 100644 mod/ouwiki/tests/locallib_test.php
 create mode 100644 mod/ouwiki/tests/participation_test.php
 create mode 100644 mod/ouwiki/tests/sections_test.php
 create mode 100644 mod/ouwiki/userparticipation.php
 create mode 100644 mod/ouwiki/version.php
 create mode 100644 mod/ouwiki/view.php
 create mode 100644 mod/ouwiki/viewold.php
 create mode 100644 mod/ouwiki/wikihistory.php
 create mode 100644 mod/ouwiki/wikiindex.php
 create mode 100644 mod/ouwiki/yui/pageselector/pageselector.js

diff --git a/mod/ouwiki/.sams b/mod/ouwiki/.sams
new file mode 100644
index 0000000..7467e97
--- /dev/null
+++ b/mod/ouwiki/.sams
@@ -0,0 +1,6 @@
+<Files feed-history.php>
+DISABLE_SAMS
+</Files>
+<Files feed-wikihistory.php>
+DISABLE_SAMS
+</Files>
diff --git a/mod/ouwiki/README b/mod/ouwiki/README
new file mode 100644
index 0000000..88bf526
--- /dev/null
+++ b/mod/ouwiki/README
@@ -0,0 +1,68 @@
+OU wiki
+=======
+
+Copyright 2012 The Open University
+
+
+This is an alternative wiki that you can install into standard Moodle.
+
+It does not replace the standard wiki, and operates alongside it. The key
+intention of this wiki is to provide a simple teaching tool suitable for
+student use with minimal required training. It is in no way intended to be
+a full-fledged wiki like MediaWiki. For example, there is no wiki syntax
+except [[links]].
+
+
+Branch:
+
+This is the development branch including latest, untested code. If you would
+like a tested version equivalent to an OU live release, please switch to a
+branch that matches your Moodle version (e.g. MOODLE_22_STABLE) using the
+above dropdown.
+
+Support:
+
+We cannot offer direct support. Please do not contact me directly. If you
+need assistance, try the wiki forum on moodle.org. (Remember to make clear
+that you are using OU wiki and not the standard forum.)
+
+Documentation:
+
+We don't provide any documentation, but Steve Wright of Lancaster University
+has written some, under a Creative Commons license:
+
+http://www.lancs.ac.uk/staff/wrightst/
+
+Please feel free to also contribute documentation to the relevant areas of the
+MoodleDocs wiki.
+
+Bug reports:
+
+Please report bugs using the GitHub 'Issues' tab (experimental). Before
+reporting a bug, please try the latest version to verify that the problem
+hasn't already been fixed. In each bug, please remember to give:
+
+1. Exact steps to reproduce your problem, starting from creating a new wiki
+   with default or specified settings.
+2. The ouwiki version you are using (from version.php or Modules admin screen).
+
+Reliability:
+
+Please note that this code is tested on OU systems but we rely on the
+community for testing on other systems.
+
+Requires:
+
+Moodle 2.2+
+Postgres / MySQL
+
+Install:
+
+Place the contents of this source tree into your Moodle installation so that
+within your Moodle root, this file is mod/ouwiki/README. Then visit the
+Moodle notifications page to install.
+
+If you want the forums to be searchable, you also need to install the
+local_ousearch plugin. (It is best to do this before using the wiki much,
+otherwise it takes ages to install as it builds indexes for everything.)
+When you install the ousearch plugin, a search box will automatically appear.
diff --git a/mod/ouwiki/annotate.php b/mod/ouwiki/annotate.php
new file mode 100644
index 0000000..e4402e3
--- /dev/null
+++ b/mod/ouwiki/annotate.php
@@ -0,0 +1,357 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Annotate page. Allows user to add and edit wiki annotations.
+ *
+ * @copyright &copy; 2009 The Open University
+ * @author b.j.waddington@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once($CFG->dirroot.'/lib/ajax/ajaxlib.php');
+require_once($CFG->dirroot.'/mod/ouwiki/annotate_form.php');
+require_once($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$save = optional_param('submitbutton', '', PARAM_TEXT);
+$cancel = optional_param('cancel', '', PARAM_TEXT);
+$deleteorphaned = optional_param('deleteorphaned', 0, PARAM_BOOL);
+$lockunlock = optional_param('lockediting', false, PARAM_BOOL);
+
+if (!empty($_POST) && !confirm_sesskey()) {
+    print_error('invalidrequest');
+}
+
+$url = new moodle_url('/mod/ouwiki/annotate.php', array('id' => $id));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Check permission
+require_capability('mod/ouwiki:annotate', $context);
+if (!$subwiki->annotation) {
+    $redirect = 'view.php?'.ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL);
+    print_error('You do not have permission to annotate this wiki page', 'error', $redirect);
+}
+
+// Get the current page version, creating page if needed
+$pageversion = ouwiki_get_current_page($subwiki, $pagename, OUWIKI_GETPAGE_ACCEPTNOVERSION);
+$wikiformfields = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_FORM);
+
+// For everything except cancel we need to obtain a lock.
+if (!$cancel) {
+    if (!$pageversion) {
+        print_error(get_string('startpagedoesnotexist', 'ouwiki'));
+    }
+    // Get lock
+    list($lockok, $lock) = ouwiki_obtain_lock($ouwiki, $pageversion->pageid);
+}
+
+// Handle save
+if ($save) {
+    if (!$lockok) {
+        ouwiki_release_lock($pageversion->pageid);
+        print_error('cannotlockpage', 'ouwiki', 'view.php?'.ouwiki_display_wiki_parameters($pagename,
+                $subwiki, $cm, OUWIKI_PARAMS_URL));
+    }
+
+    // Format XHTML so it matches that sent to annotation marker creation code.
+    /*$pageversion->xhtml = ouwiki_convert_content($pageversion->xhtml, $subwiki, $cm, null,
+            $pageversion->xhtmlformat);*/
+
+    $userid = !$userid ? $USER->id : $userid;
+    $neednewversion = false;
+
+    // get the form data
+    $new_annotations = array();
+    $edited_annotations = array();
+    foreach ($_POST as $key => $value) {
+        if (strpos($key, 'edit') === 0) {
+            $edited_annotations[substr($key, 4)] = optional_param($key, null, PARAM_TEXT);
+        } else if (strpos($key, 'new') === 0) {
+            $new_annotations[substr($key, 3)] = optional_param($key, null, PARAM_TEXT);
+        }
+    }
+
+    $transaction = $DB->start_delegated_transaction();
+
+    // get the existing annotations to check for changes
+    $stored = ouwiki_get_annotations($pageversion);
+    $updated = $stored;
+
+    // do we need to delete orphaned annotations
+    $deleted_annotations = array();
+    if ($deleteorphaned) {
+        foreach ($stored as $annotation) {
+            if ($annotation->orphaned) {
+                $DB->delete_records('ouwiki_annotations', array('id' => $annotation->id));
+                $deleted_annotations[$annotation->id] = '';
+            }
+        }
+    }
+
+    foreach ($edited_annotations as $key => $value) {
+        if ($value == '') {
+            $DB->delete_records('ouwiki_annotations', array('id' => $key));
+            $deleted_annotations[$key] = '';
+        } else if ($value != $stored[$key]->content) {
+            $dataobject = new stdClass();
+            $dataobject->id = $key;
+            $dataobject->pageid = $pageversion->pageid;
+            $dataobject->userid = $USER->id;
+            $dataobject->timemodified = time();
+            $dataobject->content = $value;
+            $DB->update_record('ouwiki_annotations', $dataobject);
+        }
+    }
+
+    $updated = array_diff_key($updated, $deleted_annotations);
+
+    // we need to work backwords through this lot in order to maintain charactor position
+    krsort($new_annotations, SORT_NUMERIC);
+    $prevkey = '';
+    $spanlength = 0;
+    foreach ($new_annotations as $key => $value) {
+        if ($value != '') {
+            $dataobject = new stdClass();
+            $dataobject->pageid = $pageversion->pageid;
+            $dataobject->userid = $USER->id;
+            $dataobject->timemodified = time();
+            $dataobject->content = $value;
+            $newannoid = $DB->insert_record('ouwiki_annotations', $dataobject);
+            $updated[$newannoid] = '';
+
+            // we're still going so insert the new annotation into the xhtml
+            $replace = '<span id="annotation'.$newannoid.'"></span>';
+            $position = $key;
+            if ($key == $prevkey) {
+                $position = $key + $spanlength;
+            } else {
+                $position = $key;
+            }
+
+            $pageversion->xhtml = substr_replace($pageversion->xhtml, $replace, $position, 0);
+            $neednewversion = true;
+            $spanlength = strlen($replace);
+            $prevkey = $key;
+        }
+    }
+
+    // if we have got this far then commit the transaction, remove any unwanted spans
+    // and save a new wiki version if required
+    $neednewversion = (ouwiki_cleanup_annotation_tags($updated, $pageversion->xhtml)) ? true : $neednewversion;
+
+    // Note: Because we didn't get data values from the form, they have not been
+    // sanity-checked so we don't know if the field actually existed or not.
+    // That means we need to do another lock capability check here in addition
+    // to the one done when displaying the form.
+    if (has_capability('mod/ouwiki:lock', $context)) {
+        ouwiki_lock_editing($pageversion->pageid, $lockunlock);
+    }
+
+    if ($neednewversion) {
+        if (strpos($pageversion->xhtml, '"view.php') !== false) {
+            // Tidy up and revert converted content (links) back to original format.
+            $pattern = '(<a\b[^>]*?href="view\.php[^>]*?>(.*?)<\/a>)';
+            $pageversion->xhtml = preg_replace($pattern, "[[$1]]", $pageversion->xhtml);
+        }
+        if ($contenttag = strpos($pageversion->xhtml, '<div class="ouwiki_content">') !== false) {
+            // Strip out content tag.
+            $pageversion->xhtml = substr_replace($pageversion->xhtml, '', $contenttag, 28);
+            $endtag = strrpos($pageversion->xhtml, '</div>');
+            if ($endtag !== false) {
+                $pageversion->xhtml = substr_replace($pageversion->xhtml, '', $endtag, 6);
+            }
+        }
+        ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename, $pageversion->xhtml);
+    }
+
+    $transaction->allow_commit();
+}
+
+// Redirect for save or cancel
+if ($save || $cancel) {
+    ouwiki_release_lock($pageversion->pageid);
+    redirect('view.php?'.ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL), '', 0);
+}
+// OK, not redirecting...
+
+// Handle case where page is locked by someone else
+if (!$lockok) {
+    // Print header etc
+    echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context);
+
+    $lockholder = $DB->get_record('user', array('id' => $lock->userid));
+    $pagelockedtitle = get_string('pagelockedtitle', 'ouwiki');
+    $pagelockedtimeout = '';
+
+    $details = new StdClass;
+    $details->name = fullname($lockholder);
+    $details->lockedat = ouwiki_nice_date($lock->lockedat);
+    $details->seenat = ouwiki_nice_date($lock->seenat);
+
+    if ($lock->seenat > time()) {
+        // When the 'seen at' value is greater than current time, that means
+        // their lock has been automatically confirmed in advance because they
+        // don't have JavaScript support.
+        $details->nojs = ouwiki_nice_date($lock->seenat + OUWIKI_LOCK_PERSISTENCE);
+        $pagelockeddetails = get_string('pagelockeddetailsnojs', 'ouwiki', $details);
+    } else {
+        $pagelockeddetails = get_string('pagelockeddetails', 'ouwiki', $details);
+        if ($lock->expiresat) {
+            $pagelockedtimeout = get_string('pagelockedtimeout', 'ouwiki', userdate($lock->expiresat));
+        }
+    }
+    $canoverride = has_capability('mod/ouwiki:overridelock', $context);
+    $pagelockedoverride = $canoverride ? '<p>'.get_string('pagelockedoverride', 'ouwiki').'</p>' : '';
+    $overridelock = get_string('overridelock', 'ouwiki');
+    $overridebutton = $canoverride ? "
+<form class='ouwiki_overridelock' action='override.php' method='post'>
+  <input type='hidden' name='redirpage' value='annotate' />
+  $wikiformfields
+  <input type='submit' value='$overridelock' />
+</form>
+" : '';
+    $cancel = get_string('cancel');
+    $tryagain = get_string('tryagain', 'ouwiki');
+    print "
+<div id='ouwiki_lockinfo'>
+  <h2>$pagelockedtitle</h2>
+  <p>$pagelockeddetails $pagelockedtimeout</p>
+  $pagelockedoverride
+  <div class='ouwiki_lockinfobuttons'>
+    <form action='edit.php' method='get'>
+      $wikiformfields
+      <input type='submit' value='$tryagain' />
+    </form>
+    <form action='view.php' method='get'>
+      $wikiformfields
+      <input type='submit' value='$cancel' />
+    </form>
+    $overridebutton
+  </div>
+  </div><div>";
+
+    ouwiki_print_footer($course, $cm, $subwiki, $pagename);
+    exit;
+}
+// The page is now locked to us! Go ahead and print edit form
+
+// get title of the page
+$title = get_string('annotatingpage', 'ouwiki');
+$wikiname = format_string(htmlspecialchars($ouwiki->name));
+$name = $pagename;
+if ($pagename) {
+    $title = $wikiname.' - '.$title.' : '.$pagename;
+} else {
+    $title = $wikiname.' - '.$title.' : '.get_string('startpage', 'ouwiki');
+}
+
+// Print header
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context,
+    array(array('name' => get_string('annotatingpage', 'ouwiki'), 'link' => null)),
+    false, false, '', $title);
+
+// Tabs
+ouwiki_print_tabs('annotate', $pagename, $subwiki, $cm, $context, $pageversion->versionid ? true : false, $pageversion->locked);
+
+// prints the div that contains a message when js is disabled in the browser so cannot annotate.
+print '<div id="ouwiki_belowtabs_annotate_nojs"><p>'.get_string('jsnotenabled', 'ouwiki').'</p>'.
+        '<div class="ouwiki_jsrequired"><p>'.get_string('jsajaxrequired', 'ouwiki').'</p></div></div>';
+
+// opens the annotate specific div for when js is enabled in the browser, user can annotate.
+print '<div id="ouwiki_belowtabs_annotate">';
+
+ouwiki_print_editlock($lock, $ouwiki);
+
+if ($ouwiki->timeout) {
+    $countdowntext = get_string('countdowntext', 'ouwiki', $ouwiki->timeout/60);
+    print "<script type='text/javascript'>
+document.write('<p><div id=\"ouw_countdown\"></div>$countdowntext<span id=\"ouw_countdownurgent\"></span></p>');
+</script>";
+}
+
+print get_string('advice_annotate', 'ouwiki');
+$data = $ouwikioutput->ouwiki_print_page($subwiki, $cm, $pageversion, false, 'annotate', $ouwiki->enablewordcount);
+echo $data[0];
+$annotations = $data[1];
+
+$customdata[0] = $annotations;
+$customdata[1] = $pageversion;
+$customdata[2] = $pagename;
+$customdata[3] = $userid;
+$customdata[4] = has_capability('mod/ouwiki:lock', $context);
+echo html_writer::start_div('ouw-annotation-list');
+echo html_writer::tag('h2', get_string('annotations', 'ouwiki'));
+echo html_writer::end_div();
+
+$annotateform = new mod_ouwiki_annotate_form('annotate.php?id='.$id, $customdata);
+$annotateform->display();
+echo $ouwikioutput->get_bottom_buttons($subwiki, $cm, $context, $pageversion, true);
+
+$usedannotations = array();
+foreach ($annotations as $annotation) {
+    if (!$annotation->orphaned) {
+        $usedannotations[$annotation->id] = $annotation;
+    }
+}
+echo '<div id="annotationcount" style="display:none;">'.count($usedannotations).'</div>';
+
+echo '<div class="yui-skin-sam">';
+echo '    <div id="annotationdialog" class="yui-pe-content">';
+echo '        <div class="hd">'.get_string('addannotation', 'ouwiki').'</div>';
+echo '        <div class="bd">';
+echo '            <form method="POST" action="post.php">';
+echo '                <label for="annotationtext">'.get_string('addannotation', 'ouwiki').':</label>';
+echo '                <textarea name="annotationtext" id="annotationtext" rows="4" cols="30"></textarea>';
+echo '            </form>';
+echo '        </div>';
+echo '    </div>';
+echo '</div>';
+
+// init JS module
+$stringlist[] = array('add', 'ouwiki');
+$stringlist[] = array('cancel', 'ouwiki');
+$jsmodule = array('name'     => 'mod_ouwiki_annotate',
+                  'fullpath' => '/mod/ouwiki/module.js',
+                  'requires' => array('base', 'event', 'io', 'node', 'anim', 'panel',
+                                      'yui2-container', 'yui2-dragdrop'),
+                  'strings'  => $stringlist
+                 );
+$PAGE->requires->js_init_call('M.mod_ouwiki_annotate.init', array(), true, $jsmodule);
+
+// close <div id="#ouwiki_belowtabs_annotate">
+print '</div>';
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
diff --git a/mod/ouwiki/annotate_form.php b/mod/ouwiki/annotate_form.php
new file mode 100644
index 0000000..f111d07
--- /dev/null
+++ b/mod/ouwiki/annotate_form.php
@@ -0,0 +1,77 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot . '/lib/formslib.php');
+
+class mod_ouwiki_annotate_form extends moodleform {
+
+    public function definition() {
+        global $CFG, $COURSE;
+
+        $mform =& $this->_form;
+        $annotations = $this->_customdata[0];
+        $pageid = $this->_customdata[1]->pageid;
+        $pagename = $this->_customdata[2];
+        $currentuserid = $this->_customdata[3];
+        $canlock = $this->_customdata[4];
+        $orphaned = false;
+
+        if ($pagename !== '') {
+            $mform->addElement('hidden', 'page', $pagename);
+            $mform->setType('page', PARAM_TEXT);
+        }
+        $mform->addElement('hidden', 'user', $currentuserid);
+        $mform->setType('user', PARAM_INT);
+
+        if (count($annotations != 0)) {
+            usort($annotations, array('mod_ouwiki_annotate_form', 'ouwiki_internal_position_sort'));
+            $editnumber = 1;
+            foreach ($annotations as $annotation) {
+                if (!$annotation->orphaned) {
+                    $mform->addElement('textarea', 'edit'.$annotation->id, '(' . $editnumber . ')',
+                            array('cols'=>'40', 'rows'=>'3'));
+                    $mform->setDefault('edit'.$annotation->id, $annotation->content);
+                    $editnumber++;
+                } else {
+                    $orphaned = true;
+                }
+            }
+        }
+
+        // Special field used in JavaScript
+        $mform->addElement('static', 'endannotations', '', '<span id="end"></span>');
+
+        // only display this checkbox if there are orphaned annotations
+        if ($orphaned) {
+            $mform->addElement('checkbox', 'deleteorphaned', get_string('deleteorphanedannotations', 'ouwiki'));
+        }
+
+        if ($canlock) {
+            $mform->addElement('checkbox', 'lockediting', get_string('lockediting', 'ouwiki'));
+            if (ouwiki_is_page_editing_locked($pageid)) {
+                $mform->setDefault('lockediting', true);
+            } else {
+                $mform->setDefault('lockediting', false);
+            }
+        }
+        $this->add_action_buttons();
+    }
+
+    private function ouwiki_internal_position_sort($a, $b) {
+        return intval($a->position) - intval($b->position);
+    }
+}
diff --git a/mod/ouwiki/backup/moodle1/lib.php b/mod/ouwiki/backup/moodle1/lib.php
new file mode 100644
index 0000000..fb5a62c
--- /dev/null
+++ b/mod/ouwiki/backup/moodle1/lib.php
@@ -0,0 +1,130 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Provides support for the conversion of moodle1 backup to the moodle2 format
+ *
+ * @package    mod
+ * @subpackage ouwiki
+ * @copyright  2011 Mark Nielsen <mark@moodlerooms.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * OUwiki conversion handler
+ */
+class moodle1_mod_ouwiki_handler extends moodle1_mod_handler {
+
+    /** @var moodle1_file_manager */
+    protected $fileman = null;
+
+    /** @var int cmid */
+    protected $moduleid = null;
+
+    /**
+     * Declare the paths in moodle.xml we are able to convert
+     *
+     * The method returns list of {@link convert_path} instances.
+     * For each path returned, the corresponding conversion method must be
+     * defined.
+     *
+     * Note that the paths /MOODLE_BACKUP/COURSE/MODULES/MOD/OUWIKI do not
+     * actually exist in the file. The last element with the module name was
+     * appended by the moodle1_converter class.
+     *
+     * @return array of {@link convert_path} instances
+     */
+    public function get_paths() {
+        return array(
+            new convert_path('ouwiki', '/MOODLE_BACKUP/COURSE/MODULES/MOD/OUWIKI',
+                array(
+                    'renamefields' => array(
+                        'summary' => 'intro',
+                    ),
+                    'newfields' => array(
+                        'introformat' => 1,
+                        'enablewordcount' => 1,
+                        'annotation' => 0,
+                        'editbegin' => null,
+                        'editend' => null,
+                    ),
+                    'dropfields' => array(
+                        'ouwiki_version',
+                    )
+                )
+            ),
+        );
+    }
+
+    /**
+     * Converts /MOODLE_BACKUP/COURSE/MODULES/MOD/OUWIKI data
+     */
+    public function process_ouwiki($data) {
+        // get the course module id and context id
+        $instanceid     = $data['id'];
+        $cminfo         = $this->get_cminfo($instanceid);
+        $this->moduleid = $cminfo['id'];
+        $contextid      = $this->converter->get_contextid(CONTEXT_MODULE, $this->moduleid);
+
+        // get a fresh new file manager for this instance
+        $this->fileman = $this->converter->get_file_manager($contextid, 'mod_ouwiki');
+
+        // convert course files embedded into the intro
+        $this->fileman->filearea = 'intro';
+        $this->fileman->itemid   = 0;
+        $data['intro'] = moodle1_converter::migrate_referenced_files($data['intro'], $this->fileman);
+
+        // start writing ouwiki.xml
+        $this->open_xml_writer("activities/ouwiki_{$this->moduleid}/ouwiki.xml");
+        $this->xmlwriter->begin_tag('activity', array('id' => $instanceid, 'moduleid' => $this->moduleid,
+            'modulename' => 'ouwiki', 'contextid' => $contextid));
+        $this->xmlwriter->begin_tag('ouwiki', array('id' => $instanceid));
+
+        foreach ($data as $field => $value) {
+            if ($field <> 'id') {
+                $this->xmlwriter->full_tag($field, $value);
+            }
+        }
+
+        $this->xmlwriter->begin_tag('subs');
+
+        return $data;
+    }
+
+    /**
+     * This is executed when we reach the closing </MOD> tag of our 'ouwiki' path
+     */
+    public function on_ouwiki_end() {
+        // finish writing ouwiki.xml
+        $this->xmlwriter->end_tag('subs');
+        $this->xmlwriter->end_tag('ouwiki');
+        $this->xmlwriter->end_tag('activity');
+        $this->close_xml_writer();
+
+        // write inforef.xml
+        $this->open_xml_writer("activities/ouwiki_{$this->moduleid}/inforef.xml");
+        $this->xmlwriter->begin_tag('inforef');
+        $this->xmlwriter->begin_tag('fileref');
+        foreach ($this->fileman->get_fileids() as $fileid) {
+            $this->write_xml('file', array('id' => $fileid));
+        }
+        $this->xmlwriter->end_tag('fileref');
+        $this->xmlwriter->end_tag('inforef');
+        $this->close_xml_writer();
+    }
+}
diff --git a/mod/ouwiki/backup/moodle2/backup_ouwiki_activity_task.class.php b/mod/ouwiki/backup/moodle2/backup_ouwiki_activity_task.class.php
new file mode 100644
index 0000000..6d14dd1
--- /dev/null
+++ b/mod/ouwiki/backup/moodle2/backup_ouwiki_activity_task.class.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+require_once($CFG->dirroot . '/mod/ouwiki/backup/moodle2/backup_ouwiki_stepslib.php'); // Because it exists (must)
+require_once($CFG->dirroot . '/mod/ouwiki/backup/moodle2/backup_ouwiki_settingslib.php'); // Because it exists (optional)
+
+/**
+ * ouwiki backup task that provides all the settings and steps to perform one
+ * complete backup of the activity
+ */
+class backup_ouwiki_activity_task extends backup_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Wiki only has one structure step
+        $this->add_step(new backup_ouwiki_activity_structure_step('ouwiki_structure', 'ouwiki.xml'));
+    }
+
+    /**
+     * Code the transformations to perform in the activity in
+     * order to get transportable (encoded) links
+     */
+    static public function encode_content_links($content) {
+        global $CFG;
+
+        $base = preg_quote($CFG->wwwroot, "/");
+
+        // Link to the list of wikis
+        $search = "/(" . $base . "\/mod\/ouwiki\/index.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@OUWIKIINDEX*$2@$', $content);
+
+        // Link to wiki view by moduleid
+        $search = "/(" . $base . "\/mod\/ouwiki\/view.php\?id\=)([0-9]+)/";
+        $content = preg_replace($search, '$@OUWIKIVIEWBYID*$2@$', $content);
+
+        return $content;
+    }
+
+}
diff --git a/mod/ouwiki/backup/moodle2/backup_ouwiki_settingslib.php b/mod/ouwiki/backup/moodle2/backup_ouwiki_settingslib.php
new file mode 100644
index 0000000..c683516
--- /dev/null
+++ b/mod/ouwiki/backup/moodle2/backup_ouwiki_settingslib.php
@@ -0,0 +1,26 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+ // This activity has not particular settings but the inherited from the generic
+ // backup_activity_task so here there isn't any class definition, like the ones
+ // existing in /backup/moodle2/backup_settingslib.php (activities section)
diff --git a/mod/ouwiki/backup/moodle2/backup_ouwiki_stepslib.php b/mod/ouwiki/backup/moodle2/backup_ouwiki_stepslib.php
new file mode 100644
index 0000000..facca1c
--- /dev/null
+++ b/mod/ouwiki/backup/moodle2/backup_ouwiki_stepslib.php
@@ -0,0 +1,120 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/**
+ * Define all the backup steps that will be used by the backup_ouwiki_activity_task
+ */
+
+/**
+ * Define the complete ouwiki structure for backup, with file and id annotations
+ */
+class backup_ouwiki_activity_structure_step extends backup_activity_structure_step {
+
+    protected function define_structure() {
+
+        // To know if we are including userinfo
+        $userinfo = $this->get_setting_value('userinfo');
+
+        $els = array('name', 'subwikis', 'intro', 'editbegin', 'editend', 'annotation',
+                'introformat', 'completionedits', 'completionpages', 'enablewordcount', 'allowimport');
+        if (!$userinfo) {
+            $els[] = 'template';
+        }
+        // Define each element separated
+        $ouwiki = new backup_nested_element('ouwiki', array('id'), $els);
+
+        $subwikis = new backup_nested_element('subs');
+
+        $subwiki = new backup_nested_element('subwiki', array('id'), array('groupid', 'userid', 'magic'));
+
+        $pages = new backup_nested_element('pages');
+
+        $page = new backup_nested_element('page', array('id'), array('title', 'currentversionid', 'locked'));
+
+        $versions = new backup_nested_element('versions');
+
+        $version = new backup_nested_element('version', array('id'), array('xhtml', 'changestart',
+                'changesize', 'changeprevsize', 'deletedat', 'timecreated', 'userid', 'wordcount'));
+
+        $annotations = new backup_nested_element('annotations');
+
+        $annotation = new backup_nested_element('annotation', array('id'), array('userid', 'timemodified', 'content'));
+
+        $links = new backup_nested_element('links');
+
+        $link = new backup_nested_element('link', array('id'), array('topageid', 'tomissingpage', 'tourl'));
+
+        // Build the tree
+        $ouwiki->add_child($subwikis);
+        $subwikis->add_child($subwiki);
+
+        $subwiki->add_child($pages);
+        $pages->add_child($page);
+
+        $page->add_child($versions);
+        $versions->add_child($version);
+
+        $version->add_child($links);
+        $links->add_child($link);
+
+        $page->add_child($annotations);
+        $annotations->add_child($annotation);
+
+        // Define sources
+        $ouwiki->set_source_table('ouwiki', array('id' => backup::VAR_ACTIVITYID));
+
+        // All these source definitions only happen if we are including user info
+        if ($userinfo) {
+            $subwiki->set_source_table('ouwiki_subwikis', array('wikiid' => backup::VAR_PARENTID));
+
+            $page->set_source_table('ouwiki_pages', array('subwikiid' => backup::VAR_PARENTID));
+
+            $version->set_source_table('ouwiki_versions', array('pageid' => backup::VAR_PARENTID));
+
+            $link->set_source_table('ouwiki_links', array('fromversionid' => backup::VAR_PARENTID));
+
+            $annotation->set_source_table('ouwiki_annotations', array('pageid' => backup::VAR_PARENTID));
+        }
+
+        // Define id annotations
+        $subwiki->annotate_ids('group', 'groupid');
+
+        $subwiki->annotate_ids('user', 'userid');
+
+        $version->annotate_ids('user', 'userid');
+
+        $annotation->annotate_ids('user', 'userid');
+
+        // Define file annotations
+        $ouwiki->annotate_files('mod_ouwiki', 'intro', null); // This file area hasn't itemid
+        if (!$userinfo) {
+            $ouwiki->annotate_files('mod_ouwiki', 'template', 'id');
+        }
+        $version->annotate_files('mod_ouwiki', 'attachment', 'id');
+        $version->annotate_files('mod_ouwiki', 'content', 'id');
+
+        // Return the root element (wiki), wrapped into standard activity structure
+        return $this->prepare_activity_structure($ouwiki);
+
+    }
+}
diff --git a/mod/ouwiki/backup/moodle2/restore_ouwiki_activity_task.class.php b/mod/ouwiki/backup/moodle2/restore_ouwiki_activity_task.class.php
new file mode 100644
index 0000000..c455f34
--- /dev/null
+++ b/mod/ouwiki/backup/moodle2/restore_ouwiki_activity_task.class.php
@@ -0,0 +1,112 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/ouwiki/backup/moodle2/restore_ouwiki_stepslib.php'); // Because it exists (must)
+
+/**
+ * ouwiki restore task that provides all the settings and steps to perform one
+ * complete restore of the activity
+ */
+class restore_ouwiki_activity_task extends restore_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Choice only has one structure step
+        $this->add_step(new restore_ouwiki_activity_structure_step('ouwiki_structure', 'ouwiki.xml'));
+    }
+
+    /**
+     * Define the contents in the activity that must be
+     * processed by the link decoder
+     */
+    static public function define_decode_contents() {
+        $contents = array();
+
+        $contents[] = new restore_decode_content('ouwiki', array('intro'), 'ouwiki');
+
+        return $contents;
+    }
+
+    /**
+     * Define the decoding rules for links belonging
+     * to the activity to be executed by the link decoder
+     */
+    static public function define_decode_rules() {
+        $rules = array();
+
+        $rules[] = new restore_decode_rule('OUWIKIVIEWBYID', '/mod/ouwiki/view.php?id=$1', 'course_module');
+        $rules[] = new restore_decode_rule('OUWIKIINDEX', '/mod/ouwiki/index.php?id=$1', 'course');
+
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * ouwiki logs. It must return one array
+     * of {@link restore_log_rule} objects
+     */
+    static public function define_restore_log_rules() {
+        $rules = array();
+
+        $rules[] = new restore_log_rule('ouwiki', 'add', 'view.php?id={course_module}', '{ouwiki}');
+        $rules[] = new restore_log_rule('ouwiki', 'update', 'view.php?id={course_module}', '{ouwiki}');
+        $rules[] = new restore_log_rule('ouwiki', 'view', 'view.php?id={course_module}', '{ouwiki}');
+        $rules[] = new restore_log_rule('ouwiki', 'report', 'report.php?id={course_module}', '{ouwiki}');
+
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * course logs. It must return one array
+     * of {@link restore_log_rule} objects
+     *
+     * Note this rules are applied when restoring course logs
+     * by the restore final task, but are defined here at
+     * activity level. All them are rules not linked to any module instance (cmid = 0)
+     */
+    static public function define_restore_log_rules_for_course() {
+        $rules = array();
+
+        // Fix old wrong uses (missing extension)
+        $rules[] = new restore_log_rule('ouwiki', 'view all', 'index?id={course}', null,
+                                        null, null, 'index.php?id={course}');
+        $rules[] = new restore_log_rule('ouwiki', 'view all', 'index.php?id={course}', null);
+
+        return $rules;
+    }
+}
diff --git a/mod/ouwiki/backup/moodle2/restore_ouwiki_stepslib.php b/mod/ouwiki/backup/moodle2/restore_ouwiki_stepslib.php
new file mode 100644
index 0000000..4e6fe1c
--- /dev/null
+++ b/mod/ouwiki/backup/moodle2/restore_ouwiki_stepslib.php
@@ -0,0 +1,330 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/**
+ * Structure step to restore one ouwiki activity
+ */
+class restore_ouwiki_activity_structure_step extends restore_activity_structure_step {
+    private $versions = array();
+    private $processingversion = null;
+
+    protected $elementsids; // Array to store last oldid and newid as a key/value pair used for each annotation.
+
+    protected function define_structure() {
+
+        $paths = array();
+        $userinfo = $this->get_setting_value('userinfo');
+
+        $paths[] = new restore_path_element('ouwiki', '/activity/ouwiki');
+        $paths[] = new restore_path_element('ouwiki_subwiki', '/activity/ouwiki/subs/subwiki');
+        $paths[] = new restore_path_element('ouwiki_page', '/activity/ouwiki/subs/subwiki/pages/page');
+        $paths[] = new restore_path_element('ouwiki_version', '/activity/ouwiki/subs/subwiki/pages/page/versions/version');
+        $paths[] = new restore_path_element('ouwiki_annotation', '/activity/ouwiki/subs/subwiki/pages/page/annotations/annotation');
+        $paths[] = new restore_path_element('ouwiki_link', '/activity/ouwiki/subs/subwiki/pages/page/versions/version/links/link');
+
+        // Set annotation elements id array.
+        $this->elementsids = array();
+        // Return the paths wrapped into standard activity structure.
+        return $this->prepare_activity_structure($paths);
+    }
+
+    protected function process_ouwiki($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+        $data->course = $this->get_courseid();
+
+        $data->editbegin = $this->apply_date_offset($data->editbegin);
+        $data->editend = $this->apply_date_offset($data->editend);
+
+        if (!isset($data->enablewordcount)) {
+            $data->enablewordcount = 1;
+        }
+
+        // insert the ouwiki record
+        $newitemid = $DB->insert_record('ouwiki', $data);
+        // immediately after inserting "activity" record, call this
+        $this->apply_activity_instance($newitemid);
+        // Get OU Wiki id for later use.
+        $this->ouwikiid = $newitemid;
+        $this->set_mapping('ouwiki', $oldid, $newitemid);
+    }
+
+    protected function process_ouwiki_subwiki($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->wikiid = $this->get_new_parentid('ouwiki');
+        $data->groupid = $this->get_mappingid('group', $data->groupid);
+        $data->userid = $this->get_mappingid('user', $data->userid);
+
+        // extra cleanup required - if values are 0 then set them to null
+        if ($data->groupid == 0) {
+            $data->groupid = null;
+        }
+        if ($data->userid == 0) {
+            $data->userid = null;
+        }
+
+        $newitemid = $DB->insert_record('ouwiki_subwikis', $data);
+        $this->set_mapping('ouwiki_subwiki', $oldid, $newitemid);
+    }
+
+    protected function process_ouwiki_page($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->subwikiid = $this->get_new_parentid('ouwiki_subwiki');
+
+        $newitemid = $DB->insert_record('ouwiki_pages', $data);
+
+        $this->set_mapping('ouwiki_page', $oldid, $newitemid);
+
+        // Flush out any unsaved versions.
+        $this->flush_versions();
+    }
+
+    protected function process_ouwiki_version($data) {
+        global $CFG;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->pageid = $this->get_new_parentid('ouwiki_page');
+
+        if (!isset($data->wordcount)) {
+            // calculate the wordcount if it doesn't exist
+            require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+            $wordcount = ouwiki_count_words($data->xhtml);
+            $data->wordcount = $wordcount;
+        }
+
+        // Store the version in memory. We cannot write it out now because
+        // they need to be in id order, but the stupid backup can be in random
+        // order (Moodle backup doesn't let you sort it) and there is no way
+        // to fix this before getting here...
+        $this->versions[$oldid] = $data;
+
+        // Store the current version in memory so we can store links inside
+        // it from the process_ouwiki_link function.
+        $data->links = array();
+        $this->processingversion = $data;
+    }
+
+    /**
+     * Saves out all versions currently in memory (if any), in id order. This
+     * function should be called before each new page, so saving may be delayed,
+     * but it shouldn't need to hold more than one page's worth of versions in
+     * memory at once.
+     */
+    private function flush_versions() {
+        global $DB;
+
+        // Sort versions into id order.
+        ksort($this->versions);
+
+        // Loop through, saving each one.
+        $transaction = $DB->start_delegated_transaction();
+        foreach ($this->versions as $data) {
+            // Insert version.
+            $oldid = $data->id;
+            $newversionid = $DB->insert_record('ouwiki_versions', $data);
+            $this->set_mapping('ouwiki_version', $oldid, $newversionid, true);
+
+            // Insert any links.
+            foreach ($data->links as $link) {
+                $link->fromversionid = $newversionid;
+                // Note: The 'topageid' is still pointing to old id - we cannot
+                // use mapping yet because not all pages have been retrieved,
+                // so this needs to be update after_execute.
+                $DB->insert_record('ouwiki_links', $link);
+            }
+
+            // If this version was the "currentversion" in the old database, update it.
+            $page = $DB->get_record('ouwiki_pages', array('id' => $data->pageid),
+                    'id, currentversionid');
+            if ($oldid == $page->currentversionid) {
+                $page->currentversionid = $newversionid;
+                $DB->update_record('ouwiki_pages', $page);
+            }
+        }
+        $transaction->allow_commit();
+
+        // Clear array.
+        $this->versions = array();
+    }
+
+    protected function process_ouwiki_link($data) {
+        $data = (object)$data;
+
+        // The new page id and parent version id are both not yet known, so
+        // 'topageid' points to the old page id, and 'fromversionid' is not set
+        // at all. Add to list, we will fill this data in later.
+        $this->processingversion->links[] = $data;
+    }
+
+    protected function process_ouwiki_annotation($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->pageid = $this->get_new_parentid('ouwiki_page');
+        $data->userid = $this->get_mappingid('user', $data->userid);
+
+        $newitemid = $DB->insert_record('ouwiki_annotations', $data);
+
+        // Add old and new annotation id to element ids array.
+        $this->elementsids['annotation'.$oldid] = 'annotation'.$newitemid;
+    }
+
+    protected function after_execute() {
+        global $DB, $CFG;
+        $transaction = $DB->start_delegated_transaction();
+        $ouwikiid = $this->get_task()->get_activityid();
+
+        // Flush out any unsaved versions.
+        $this->flush_versions();
+
+        // Add ouwiki related files, no need to match by itemname (just internally handled context).
+        $this->add_related_files('mod_ouwiki', 'intro', null);
+        $this->add_related_files('mod_ouwiki', 'template', 'ouwiki');
+
+        // Add post related files.
+        $this->add_related_files('mod_ouwiki', 'attachment', 'ouwiki_version');
+        $this->add_related_files('mod_ouwiki', 'content', 'ouwiki_version');
+
+        // Update firstversionid.
+        $sql = 'SELECT v.pageid,
+                    (SELECT MIN(id)
+                    FROM {ouwiki_versions} v3
+                    WHERE v3.pageid = p.id AND v3.deletedat IS NULL)
+                    AS firstversionid
+                FROM
+                    {ouwiki} o
+                    JOIN {ouwiki_subwikis} s ON s.wikiid = o.id
+                    JOIN {ouwiki_pages} p ON p.subwikiid = s.id
+                    JOIN {ouwiki_versions} v ON v.pageid = p.id
+                WHERE
+                    o.id = ?
+                GROUP BY v.pageid, p.id
+                ORDER BY v.pageid';
+        $rs = $DB->get_recordset_sql($sql, array($ouwikiid));
+        foreach ($rs as $entry) {
+            if ($entry->firstversionid) {
+                $DB->set_field('ouwiki_pages', 'firstversionid', $entry->firstversionid,
+                    array('id' => $entry->pageid));
+            }
+        }
+        $rs->close();
+
+        // Update previousversionid.
+        $sql = 'SELECT v.id AS versionid,
+                    (SELECT MAX(v2.id)
+                    FROM {ouwiki_versions} v2
+                    WHERE v2.pageid = p.id AND v2.id < v.id)
+                    AS previousversionid
+                FROM
+                    {ouwiki} o
+                    JOIN {ouwiki_subwikis} s ON s.wikiid = o.id
+                    JOIN {ouwiki_pages} p ON p.subwikiid = s.id
+                    JOIN {ouwiki_versions} v ON v.pageid = p.id
+                WHERE
+                    o.id = ?';
+        $rs = $DB->get_recordset_sql($sql, array($ouwikiid));
+        foreach ($rs as $entry) {
+            if ($entry->previousversionid) {
+                $DB->set_field('ouwiki_versions', 'previousversionid',
+                    $entry->previousversionid, array('id' => $entry->versionid));
+            }
+        }
+        $rs->close();
+
+        // Update all the page ids for links.
+        $sql = 'SELECT l.id AS linkid, l.topageid
+                FROM
+                    {ouwiki} o
+                    JOIN {ouwiki_subwikis} s ON s.wikiid = o.id
+                    JOIN {ouwiki_pages} p ON p.subwikiid = s.id
+                    JOIN {ouwiki_versions} v ON v.pageid = p.id
+                    JOIN {ouwiki_links} l ON l.fromversionid = v.id
+                WHERE
+                    o.id = ? AND l.topageid IS NOT NULL';
+        $rs = $DB->get_recordset_sql($sql, array($ouwikiid));
+        $errors = array();
+        foreach ($rs as $entry) {
+            $newpageid = $this->get_mappingid('ouwiki_page', $entry->topageid, null);
+            if (!$newpageid && empty($errors[$entry->topageid])) {
+                $errors[$entry->topageid] = true;
+                $this->get_logger()->process('OU wiki: link to missing pageid ' .
+                        $entry->topageid . ' not restored properly.', backup::LOG_WARNING);
+            }
+            $DB->set_field('ouwiki_links', 'topageid', $newpageid, array('id' => $entry->linkid));
+        }
+        $rs->close();
+
+        // Update xhtml field with correct annotations.
+        // Get all table entries in ouwiki_versions table for this wiki.
+        $sql = "SELECT v.id, v.xhtml
+                    FROM {ouwiki_subwikis} s
+                    JOIN {ouwiki_pages} p ON p.subwikiid = s.id
+                    JOIN {ouwiki_versions} v ON v.pageid = p.id
+                    WHERE s.wikiid = ?
+                    ORDER BY v.id";
+        $rs = $DB->get_recordset_sql($sql, array($ouwikiid));
+
+        // Go through annotation elements ids replacing old annotation ids with new annotation ids in xhtml field of result set.
+        foreach ($rs as $entry) {
+            $matches = array();
+            // Check to see whether this contains any annotations to be replaced.
+            $found = preg_match_all('~(span id=")(annotation[0-9]+)(")~', $entry->xhtml, $matches, PREG_SET_ORDER);
+            if ($found) {
+                foreach ($matches as $arr) {
+                    // Check to see whether an old array key exist.
+                    if (array_key_exists($arr[2], $this->elementsids)) {
+                        // Do the replace.
+                        $replacestr = 'span id="' .$this->elementsids[$arr[2]]. '"';
+                        $entry->xhtml = str_replace($arr[0], $replacestr, $entry->xhtml);
+                    }
+                }
+                // Set the xhtml field if any annotation ids replaced.
+                $DB->set_field('ouwiki_versions', 'xhtml', $entry->xhtml, array('id' => $entry->id));
+            }
+        }
+        // Close the result set.
+        $rs->close();
+
+        $transaction->allow_commit();
+
+        require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+        // Create search index if user data restored.
+        if ($this->get_setting_value('userinfo') && ouwiki_search_installed()) {
+            ouwiki_ousearch_update_all(false, $this->get_courseid());
+        }
+    }
+}
diff --git a/mod/ouwiki/basicpage.php b/mod/ouwiki/basicpage.php
new file mode 100644
index 0000000..72e4267
--- /dev/null
+++ b/mod/ouwiki/basicpage.php
@@ -0,0 +1,77 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Shared initialisation from wiki PHP pages.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+$id = required_param('id', PARAM_INT);           // Course Module ID that defines wiki
+$pagename = optional_param('page', null, PARAM_RAW);    // Which page to show. Omitted for start page
+$groupid = optional_param('group', 0, PARAM_INT); // Group ID. If omitted, uses first appropriate group
+$userid  = optional_param('user', 0, PARAM_INT);   // User ID (for individual wikis). If omitted, uses own
+
+// Special logic to handle legacy code that gets pagename wrong
+if ($pagename === '') {
+    debugging('Please try to make code omit page parameter when it is null', DEBUG_DEVELOPER);
+}
+if (is_null($pagename)) {
+    $pagename = '';
+}
+
+// Restrict page name
+if (core_text::strlen($pagename) > 200) {
+    print_error('pagenametoolong', 'ouwiki');
+}
+// Convert nbsp to space
+$pagename = str_replace(html_entity_decode('&nbsp;', ENT_QUOTES, 'UTF-8'), ' ', $pagename);
+$pagename = trim($pagename);
+if (strtolower($pagename) == strtolower(get_string('startpage', 'ouwiki'))) {
+    print_error('pagenameisstartpage', 'ouwiki');
+}
+
+// Load efficiently (and with full $cm data) using get_fast_modinfo
+$course = $DB->get_record_select('course',
+        'id = (SELECT course FROM {course_modules} WHERE id = ?)', array($id),
+        '*', MUST_EXIST);
+$modinfo = get_fast_modinfo($course);
+$cm = $modinfo->get_cm($id);
+if ($cm->modname !== 'ouwiki') {
+    print_error('invalidcoursemodule');
+}
+
+$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance));
+if (!$ouwiki) {
+    print_error("Wiki ID is incorrect in database");
+}
+$context = context_module::instance($cm->id);
+
+global $ouwiki_nologin;
+if (empty($ouwiki_nologin)) {
+    // Make sure they're logged in and check they have permission to view
+    require_course_login($course, true, $cm);
+    require_capability('mod/ouwiki:view', $context);
+}
+
+// Get subwiki, creating it if necessary
+$subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $groupid, $userid, true);
diff --git a/mod/ouwiki/classes/event/course_module_instance_list_viewed.php b/mod/ouwiki/classes/event/course_module_instance_list_viewed.php
new file mode 100644
index 0000000..84c5056
--- /dev/null
+++ b/mod/ouwiki/classes/event/course_module_instance_list_viewed.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forumng instance list viewed event.
+ *
+ * @package    mod_forumng
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forumng instance list viewed event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class course_module_instance_list_viewed extends \core\event\course_module_instance_list_viewed {
+    // No need for any code here as everything is handled by the parent class.
+}
diff --git a/mod/ouwiki/classes/event/ouwiki_viewed.php b/mod/ouwiki/classes/event/ouwiki_viewed.php
new file mode 100644
index 0000000..6210fe6
--- /dev/null
+++ b/mod/ouwiki/classes/event/ouwiki_viewed.php
@@ -0,0 +1,120 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_ouwiki view ouwiki event.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki view ouwiki event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class ouwiki_viewed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'ouwiki';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $str1 = "The user with id '$this->userid' viewed ouwiki page {$this->other['info']}
+        with the course module id of '$this->contextinstanceid'.";
+        $str2 = "Action was {$this->other['action']}";
+        return $str1.$str2;
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:ouwikiviewed', 'mod_ouwiki');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\ouwiki\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'ouwiki', $this->other['action'], $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->objectid)) {
+            throw new \coding_exception('The \'ouwikiid\' value must be set in the object.');
+        }
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['action'])) {
+            throw new \coding_exception('The \'action\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/ouwiki/classes/event/page_created.php b/mod/ouwiki/classes/event/page_created.php
new file mode 100644
index 0000000..231e4f8
--- /dev/null
+++ b/mod/ouwiki/classes/event/page_created.php
@@ -0,0 +1,115 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_ouwiki view ouwiki event.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki view ouwiki event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+class page_created extends \core\event\base {
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'ouwiki_pages';
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:ouwikipagecreated', 'mod_ouwiki');
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' created the page {$this->other['info']} with id '$this->objectid'
+                for the ouwiki with course module id of '$this->contextinstanceid'.";
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url($this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $logurl = substr($this->other['logurl'], strlen('/mod/ouwiki/'));
+        return array($this->courseid, 'ouwiki', 'page created', $logurl,
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->objectid)) {
+            throw new \coding_exception('The \'ouwikiid\' value must be set in the object.');
+        }
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/ouwiki/classes/event/page_lock.php b/mod/ouwiki/classes/event/page_lock.php
new file mode 100644
index 0000000..739acc6
--- /dev/null
+++ b/mod/ouwiki/classes/event/page_lock.php
@@ -0,0 +1,114 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_ouwiki view ouwiki event.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki view ouwiki event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class page_lock extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'ouwiki_pages';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' locked ouwiki page {$this->other['info']}
+                with the course module id '$this->contextinstanceid' ";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:pagelock', 'mod_ouwiki');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\ouwiki\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'ouwiki', 'lock', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->objectid)) {
+            throw new \coding_exception('The \'ouwikiid\' value must be set in the object.');
+        }
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/ouwiki/classes/event/page_unlock.php b/mod/ouwiki/classes/event/page_unlock.php
new file mode 100644
index 0000000..74f9d77
--- /dev/null
+++ b/mod/ouwiki/classes/event/page_unlock.php
@@ -0,0 +1,114 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_ouwiki view ouwiki event.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki view ouwiki event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class page_unlock extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'ouwiki_pages';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' unlocked ouwiki page {$this->other['info']}
+                with the course module id '$this->contextinstanceid' ";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:pageunlock', 'mod_ouwiki');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\ouwiki\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'ouwiki', 'unlock', $this->other['logurl'],
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->objectid)) {
+            throw new \coding_exception('The \'ouwikiid\' value must be set in the object.');
+        }
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/ouwiki/classes/event/page_updated.php b/mod/ouwiki/classes/event/page_updated.php
new file mode 100644
index 0000000..189ba17
--- /dev/null
+++ b/mod/ouwiki/classes/event/page_updated.php
@@ -0,0 +1,113 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * The mod_ouwiki view ouwiki event.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki view ouwiki event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+class page_updated extends \core\event\base {
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'ouwiki_pages';
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:ouwikipageupdated', 'mod_ouwiki');
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' updated the page {$this->other['info']} with id '$this->objectid'
+                for the ouwiki with the course module id '$this->contextinstanceid'.";
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url( $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        $logurl = substr($this->other['logurl'], strlen('/mod/ouwiki/'));
+        return array($this->courseid, 'ouwiki', 'page updated', $logurl,
+                $this->other['info'], $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->objectid)) {
+            throw new \coding_exception('The \'ouwikiid\' value must be set in the object.');
+        }
+
+        if (!isset($this->other['info'])) {
+            throw new \coding_exception('The \'info\' value must be set in other.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+}
diff --git a/mod/ouwiki/classes/event/page_version_deleted.php b/mod/ouwiki/classes/event/page_version_deleted.php
new file mode 100644
index 0000000..6213f24
--- /dev/null
+++ b/mod/ouwiki/classes/event/page_version_deleted.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_ouwiki delete ouwiki event.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki delete ouwiki event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class page_version_deleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'ouwiki_versions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' deleted ouwiki with the course module id '$this->contextinstanceid'
+                delete version action";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:ouwikidelete', 'mod_ouwiki');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\ouwiki\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'ouwiki', 'version delete', $this->other['logurl'],
+                '', $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->objectid)) {
+            throw new \coding_exception('The \'ouwikiid\' value must be set in the object.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/ouwiki/classes/event/page_version_undeleted.php b/mod/ouwiki/classes/event/page_version_undeleted.php
new file mode 100644
index 0000000..84b2ad4
--- /dev/null
+++ b/mod/ouwiki/classes/event/page_version_undeleted.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_ouwiki delete ouwiki event.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki delete ouwiki event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class page_version_undeleted extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'ouwiki_versions';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        return "The user with id '$this->userid' undeleted ouwiki page with the course module id '$this->contextinstanceid'
+                delete version action";
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:ouwikidelete', 'mod_ouwiki');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('\\mod\\ouwiki\\' . $this->other['logurl']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'ouwiki', 'version delete', $this->other['logurl'],
+                '', $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->objectid)) {
+            throw new \coding_exception('The \'ouwikiid\' value must be set in the object.');
+        }
+
+        if (!isset($this->other['logurl'])) {
+            throw new \coding_exception('The \'logurl\' value must be set in other.');
+        }
+
+        if ($this->contextlevel != CONTEXT_MODULE) {
+            throw new \coding_exception('Context level must be CONTEXT_MODULE.');
+        }
+    }
+
+}
diff --git a/mod/ouwiki/classes/event/save_failed.php b/mod/ouwiki/classes/event/save_failed.php
new file mode 100644
index 0000000..7b094d6
--- /dev/null
+++ b/mod/ouwiki/classes/event/save_failed.php
@@ -0,0 +1,105 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @package    mod_ouwiki
+ * @copyright  2015 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_ouwiki\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_ouwiki page saving failed event class.
+ *
+ * @package    mod_ouwiki
+ * @since      Moodle 2.7
+ * @copyright  2015 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class save_failed extends \core\event\base {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'u';
+        $this->data['edulevel'] = self::LEVEL_OTHER;
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $string = 'OUwiki page edit failed due to session error.';
+        if (!empty($this->other['pid'])) {
+            $string .= " Wiki cm id '{$this->other['pid']}'.";
+        }
+        return $string;
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:savefailed', 'mod_ouwiki');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url($this->other['page']);
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        global $SITE;
+        $url = str_replace('/mod/ouwiki/', '', $this->other['page']);
+        return array($SITE->id, 'ouwiki', 'error editpage', $this->other['page'], 'session error',
+                $this->contextinstanceid);
+    }
+
+    /**
+     * Custom validation.
+     *
+     * @throws \coding_exception
+     * @return void
+     */
+    protected function validate_data() {
+        parent::validate_data();
+
+        if (!isset($this->other['page'])) {
+            throw new \coding_exception('The \'page\' value must be set in other.');
+        }
+    }
+
+}
diff --git a/mod/ouwiki/classes/task/daily_housekeeping.php b/mod/ouwiki/classes/task/daily_housekeeping.php
new file mode 100644
index 0000000..beed26f
--- /dev/null
+++ b/mod/ouwiki/classes/task/daily_housekeeping.php
@@ -0,0 +1,53 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * A scheduled task for OUWiki cron.
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+namespace mod_ouwiki\task;
+
+class daily_housekeeping extends \core\task\scheduled_task {
+
+    /**
+     * Get a descriptive name for this task (shown to admins).
+     *
+     * @return string
+     */
+    public function get_name() {
+        return get_string('ouwikicrontask', 'mod_ouwiki');
+    }
+
+    /**
+     * Delete old locks from the ouwiki_locks database
+     */
+    public function execute() {
+        global $DB, $CFG;
+        // Require to get OUWIKI_LOCK_TIMEOUT.
+        require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+        $now = time();
+        // We are going to delete anything with a locked at time longer than now - 30 minutes ago.
+        $timeout = $now - OUWIKI_LOCK_TIMEOUT;
+        mtrace('Beginning ouwiki locks cleanup...');
+        $before = microtime(true);
+        $DB->delete_records_select('ouwiki_locks', 'lockedat < ?', array($timeout));
+        mtrace(round(microtime(true)-$before, 1) . 's');
+    }
+}
diff --git a/mod/ouwiki/confirmlock.php b/mod/ouwiki/confirmlock.php
new file mode 100644
index 0000000..4a74d85
--- /dev/null
+++ b/mod/ouwiki/confirmlock.php
@@ -0,0 +1,43 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * This script is called through AJAX. It confirms that a user is still
+ * trying to edit a page that they have locked (they haven't closed
+ * their browser window or something).
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+
+header('Content-Type: text/plain');
+
+$lockid = optional_param('lockid', 0, PARAM_INT);
+if (!isset($lockid) || $lockid == 0) {
+    print 'noid';
+    exit;
+}
+
+if ($lock = $DB->get_record('ouwiki_locks', array('id' => $lockid))) {
+    $lock->seenat = time();
+    $DB->update_record('ouwiki_locks', $lock);
+    print 'ok';
+} else {
+    print 'cancel'; // Tells user their lock has been cancelled.
+}
diff --git a/mod/ouwiki/confirmloggedin.php b/mod/ouwiki/confirmloggedin.php
new file mode 100644
index 0000000..f77b349
--- /dev/null
+++ b/mod/ouwiki/confirmloggedin.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This script is called through AJAX. It confirms that a user is still
+ * logged in and has a valid session before saving edits to a wiki page
+ *
+ * @package    mod
+ * @subpackage ouwiki
+ * @copyright  2013 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+define('AJAX_SCRIPT', true);
+require_once(dirname(__FILE__) . '/../../config.php');
+
+header('Content-Type: text/plain');
+
+try {
+    // Test session - These functions throw exceptions so trap and exit if they fail.
+    // This saves 404 errors and sends a smaller page.
+    $contextid = required_param('contextid', PARAM_INT);
+    list($context, $course, $cm) = get_context_info_array($contextid);
+    $PAGE->set_url('/mod/ouwiki/confirmloggedin.php');
+    $PAGE->set_context($context);
+    require_login($course, false, $cm);
+    require_sesskey();
+} catch (moodle_exception $e) {
+    $pid = 0;
+    $url = '/mod/ouwiki/edit.php';
+    if (!empty($_SERVER['HTTP_REFERER'])) {
+        $url = new moodle_url($_SERVER['HTTP_REFERER']);
+        $rpid = $url->get_param('id');
+        if (!empty($rpid)) {
+            $pid = $rpid;
+        }
+        $url = $url->out_as_local_url();
+    }
+    $params = array(
+            'context' => context_system::instance(),
+            'other' => array('page' => $url, 'pid' => $pid)
+    );
+    $event = \mod_ouwiki\event\save_failed::create($params);
+    $event->trigger();
+    exit;
+}
+
+echo 'ok';
diff --git a/mod/ouwiki/csv_writer.php b/mod/ouwiki/csv_writer.php
new file mode 100644
index 0000000..b694f98
--- /dev/null
+++ b/mod/ouwiki/csv_writer.php
@@ -0,0 +1,105 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * csv writer class
+ *
+ * @copyright &copy; 2008 The Open University
+ * @author d.a.woolhead@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+
+class csv_writer {
+
+    // Define csv format dependant variables
+    private $_excelcsv = false;
+    private $_sep = ",";
+    private $_line = "\n";
+
+    /**
+     * Constructor
+     * Outputs relevant csv header.
+     *
+     * @param string $filename csv filename
+     * @return none other than updated csv object
+     */
+    public function __construct($filename, $format = null) {
+
+        // Write common header
+        header('Content-Disposition: attachment; filename='.
+            preg_replace('/[^a-z0-9-]/', '_', strtolower($filename)).'.csv');
+
+        // Unicode byte-order mark for Excel
+        if ($format == 'excelcsv') {
+
+            // Set Excel csv variables
+            $this->_excelcsv = true;
+            $this->_sep = "\t".chr(0);
+            $this->_line = "\n".chr(0);
+
+            // Write Excel csv header
+            header('Content-Type: text/csv; charset=UTF-16LE');
+            print chr(0xFF).chr(0xFE);
+
+        } else {
+
+            // Set csv variables
+            $this->_excelcsv = false;
+            $this->_sep = ",";
+            $this->_line = "\n";
+
+            // Write cvs header
+            header('Content-Type: text/csv; charset=UTF-8');
+        }
+    }
+
+    /**
+     * Gets quoted csv variable string.
+     *
+     * @param string $varstr csv variable string
+     * @return quoted csv variable string
+     */
+    public function quote($varstr) {
+        if ($this->_excelcsv) {
+            return core_text::convert('"'.str_replace('"', "'", $varstr).'"', 'UTF-8', 'UTF-16LE');
+        } else {
+            return '"'.str_replace('"', "'", $varstr).'"';
+        }
+    }
+
+    /**
+     * Gets csv variable separator.
+     *
+     * @param none
+     * @return csv variable separator
+     */
+    public function sep() {
+        return $this->_sep;
+    }
+
+    /**
+     * Gets csv line separator.
+     *
+     * @param none
+     * @return csv line separator
+     */
+    public function line() {
+        return $this->_line;
+    }
+
+}
diff --git a/mod/ouwiki/db/access.php b/mod/ouwiki/db/access.php
new file mode 100644
index 0000000..c2b4e2d
--- /dev/null
+++ b/mod/ouwiki/db/access.php
@@ -0,0 +1,196 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Capability definitions for the OU wiki module.
+ *
+ * For naming conventions, see lib/db/access.php.
+ */
+$capabilities = array(
+
+    'mod/ouwiki:edit' => array(
+
+        'riskbitmask' => RISK_SPAM,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+
+    'mod/ouwiki:view' => array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+
+    // Ability to add new OU wiki instances to a course
+    'mod/ouwiki:addinstance' => array(
+        'riskbitmask' => RISK_XSS,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        ),
+        'clonepermissionsfrom' => 'moodle/course:manageactivities'
+    ),
+
+    'mod/ouwiki:overridelock' => array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+
+    'mod/ouwiki:viewgroupindividuals'=> array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+
+    'mod/ouwiki:viewallindividuals'=> array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+
+    'mod/ouwiki:deletepage'=> array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+    'mod/ouwiki:lock'=> array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archtypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+    'mod/ouwiki:annotate'=> array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'coursecreator' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+    'mod/ouwiki:viewparticipation' => array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+    'mod/ouwiki:grade' => array(
+
+        'riskbitmask' => 0,
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW,
+        )
+    ),
+    'mod/ouwiki:editothers' => array(
+
+            'riskbitmask' => RISK_SPAM,
+
+            'captype' => 'read',
+            'contextlevel' => CONTEXT_MODULE,
+            'archetypes' => array(
+                    'teacher' => CAP_ALLOW,
+                    'editingteacher' => CAP_ALLOW,
+                    'coursecreator' => CAP_ALLOW,
+                    'manager' => CAP_ALLOW,
+            )
+    ),
+    'mod/ouwiki:annotateothers' => array(
+
+            'riskbitmask' => RISK_SPAM,
+
+            'captype' => 'read',
+            'contextlevel' => CONTEXT_MODULE,
+            'archetypes' => array(
+                    'teacher' => CAP_ALLOW,
+                    'editingteacher' => CAP_ALLOW,
+                    'coursecreator' => CAP_ALLOW,
+                    'manager' => CAP_ALLOW,
+            )
+    ),
+);
diff --git a/mod/ouwiki/db/install.xml b/mod/ouwiki/db/install.xml
new file mode 100644
index 0000000..8e92133
--- /dev/null
+++ b/mod/ouwiki/db/install.xml
@@ -0,0 +1,150 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="mod/ouwiki/db" VERSION="20150630" COMMENT="OU wiki database tables."
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="../../../lib/xmldb/xmldb.xsd"
+>
+  <TABLES>
+    <TABLE NAME="ouwiki" COMMENT="Main table for OU wiki">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Course ID"/>
+        <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="Name of wiki"/>
+        <FIELD NAME="subwikis" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="0=single subwiki (no groups), 1=per-group subwikis, 2=per-user subwikis"/>
+        <FIELD NAME="timeout" TYPE="int" LENGTH="9" NOTNULL="false" SEQUENCE="false" COMMENT="How long users are allowed to edit, in seconds, before it automatically saves their changes and ends the edit. Null = no timeout."/>
+        <FIELD NAME="template" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="Null for no template, or set to a filename (name only, no path). File will be opened from mod_data/ouwiki and used to initialise the content of all new subwikis."/>
+        <FIELD NAME="intro" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="Optional non-editable text that displays above the edit field on the start page to describe the purpose of the wiki."/>
+        <FIELD NAME="editbegin" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Date in seconds since epoch, or null. If set, the wiki is in read-only mode (i.e. even users who have mod/ouwiki:edit cannot actually edit anything) until the specified date."/>
+        <FIELD NAME="editend" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Date in seconds since epoch, or null. If set, the wiki is in read-only mode (i.e. even users who have mod/ouwiki:edit cannot actually edit anything) from the specified date onwards."/>
+        <FIELD NAME="completionpages" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If set, wiki should be marked complete once user creates this many new pages of their own."/>
+        <FIELD NAME="completionedits" TYPE="int" LENGTH="9" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If set, wiki should be marked complete once user makes this many edits to the wiki."/>
+        <FIELD NAME="annotation" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="If set, wiki will use annotations."/>
+        <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="enablewordcount" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="1" SEQUENCE="false"/>
+        <FIELD NAME="grade" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="allowimport" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Shows whether the link to import pages is displayed within the wiki activity."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="Primary key for ouwiki"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="ouwiki_ix_course" UNIQUE="false" FIELDS="course" COMMENT="So we can find all wikis for a course if we want."/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="ouwiki_subwikis" COMMENT="Contains a row for each subwiki. A subwiki is an independent collection of named pages. For example, when a wiki is set to group mode, each group has their own subwiki.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="wikiid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Wiki that owns this subwiki"/>
+        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Null if not a group subwiki. References the group in mdl_groups that this subwiki is for."/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Null if not a user subwiki. References the user in mdl_user that this subwiki is for."/>
+        <FIELD NAME="magic" TYPE="int" LENGTH="16" NOTNULL="true" SEQUENCE="false" COMMENT="Magic code used to provide a degree of access security for the RSS feeds, i.e. make it impossible to guess the URLs."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="primary key of the table, please edit me"/>
+        <KEY NAME="ouwiki_subwikis_fk_wikiid" TYPE="foreign" FIELDS="wikiid" REFTABLE="ouwiki" REFFIELDS="id"/>
+        <KEY NAME="ouwiki_subwikis_fk_groupid" TYPE="foreign" FIELDS="groupid" REFTABLE="groups" REFFIELDS="id"/>
+        <KEY NAME="ouwiki_subwikis_fk_userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="ouwiki_subwikis_unique_group" UNIQUE="true" FIELDS="wikiid, groupid" COMMENT="Make sure only one group subwiki per wikiid"/>
+        <INDEX NAME="ouwiki_subwikis_unique_user" UNIQUE="true" FIELDS="wikiid, userid" COMMENT="Make sure only one user subwiki per wikiid"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="ouwiki_pages" COMMENT="Single pages inside a subwiki. If a page has multiple versions, it still has only one entry in this table.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="subwikiid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="The subwiki that owns this page."/>
+        <FIELD NAME="title" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" COMMENT="Title for the page. All pages must have a title, but the start page for the wiki is set to empty string."/>
+        <FIELD NAME="currentversionid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Points to the most recent entry in ouwiki_versions. This is the entry that will appear when viewing the page normally. May be null if there are no versions of the page yet."/>
+        <FIELD NAME="locked" TYPE="int" LENGTH="1" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="Allows the page to be locked. Introduced with the Annotations commenting system to allow page locking while editing annotations."/>
+        <FIELD NAME="firstversionid" TYPE="int" LENGTH="10" NOTNULL="false" DEFAULT="0" SEQUENCE="false" COMMENT="Points to the entry in ouwiki_versions that first related to this page. This is used for participation calculations to help with query load at that point."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="primary key of the table, please edit me"/>
+        <KEY NAME="ouwiki_pages_fk_currentversionid" TYPE="foreign" FIELDS="currentversionid" REFTABLE="ouwiki_versions" REFFIELDS="id"/>
+        <KEY NAME="subwikiid" TYPE="foreign" FIELDS="subwikiid" REFTABLE="ouwiki_subwikis" REFFIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="subwikiid-title" UNIQUE="true" FIELDS="subwikiid, title"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="ouwiki_versions" COMMENT="Each row here is a version of the content on a particular subwiki page. Whenever a change is saved, a new version is created.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="pageid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Page that this is a version of."/>
+        <FIELD NAME="xhtml" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Contains actual XHTML content of the page. Should be well-formed XML (when placed inside a containing element)."/>
+        <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time (seconds since epoch) at which the version was created."/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="User who created this version. May be null if the version was created by the system, such as when the wiki is initialised from a template."/>
+        <FIELD NAME="changestart" TYPE="int" LENGTH="9" NOTNULL="false" SEQUENCE="false" COMMENT="If a section was edited, set to the starting point (in bytes) of the section within the 'xhtml' field. If the whole page was edited, set to null."/>
+        <FIELD NAME="changesize" TYPE="int" LENGTH="9" NOTNULL="false" SEQUENCE="false" COMMENT="If a section was edited, the new size of the section in bytes. Otherwise null."/>
+        <FIELD NAME="changeprevsize" TYPE="int" LENGTH="9" NOTNULL="false" SEQUENCE="false" COMMENT="If a section was edited, the previous size of the section (before editing) in bytes. Otherwise null."/>
+        <FIELD NAME="deletedat" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="timestamp when page version was deleted"/>
+        <FIELD NAME="xhtmlformat" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="wordcount" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="previousversionid" TYPE="int" LENGTH="10" NOTNULL="false" DEFAULT="0" SEQUENCE="false" COMMENT="Points to the entry in ouwiki_versions of the previous version for the page. This is used for participation calculations to help with query load at that point."/>
+        <FIELD NAME="importversionid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="primary key of the table, please edit me"/>
+        <KEY NAME="ouwiki_versions_fk_pageid" TYPE="foreign" FIELDS="pageid" REFTABLE="ouwiki_pages" REFFIELDS="id"/>
+        <KEY NAME="ouwiki_versions_fk_userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="ouwiki_links" COMMENT="Keeps record of all wiki-links (links within the wiki that were specified using square brackets, in the topageid or tomissingpage fields) and standard URL links or images (in the tourl field).">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="fromversionid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Version that contains this link."/>
+        <FIELD NAME="topageid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Target of the link. Must be specified unless the target doesn't exist yet."/>
+        <FIELD NAME="tomissingpage" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="If link goes to a page that doesn't exist, includes name of missing page. Should be filled in (set this field to null, set topageid) once page is created."/>
+        <FIELD NAME="tourl" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="When page links to a URL that is recorded here."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="primary key of the table, please edit me"/>
+        <KEY NAME="ouwiki_links_fk_fromversionid" TYPE="foreign" FIELDS="fromversionid" REFTABLE="ouwiki_versions" REFFIELDS="id"/>
+        <KEY NAME="ouwiki_links_fk_topageid" TYPE="foreign" FIELDS="topageid" REFTABLE="ouwiki_pages" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="ouwiki_locks" COMMENT="When people are editing a subwiki page or section, that information is stored in this table so that other people cannot edit the same thing at the same time.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="pageid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Page being edited"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Moodle user who holds this lock."/>
+        <FIELD NAME="versionid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Null if whole page is locked. If a section is locked, this is the version that they started off by editing."/>
+        <FIELD NAME="sectionstart" TYPE="int" LENGTH="9" NOTNULL="false" SEQUENCE="false" COMMENT="Null if whole page is locked. If section is locked, this is the start position in bytes relative to the beginning of the 'xhtml' field in the specified version."/>
+        <FIELD NAME="sectionsize" TYPE="int" LENGTH="9" NOTNULL="false" SEQUENCE="false" COMMENT="Null if whole page is locked. If section is locked, this is the size of the section being edited in bytes."/>
+        <FIELD NAME="lockedat" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time (seconds since epoch) at which lock was first seen."/>
+        <FIELD NAME="expiresat" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Time (seconds since epoch) at which lock expires. Null if there is no expiry. (This is a hard lock that occurs about 1 minute after the user-visible timeout.)"/>
+        <FIELD NAME="seenat" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="Time (seconds since epoch) at which the user's client checked in to confirm they still hold the lock. Locks become invalid a certain time after this, in addition to the fixed expiry time."/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="primary key of the table, please edit me"/>
+        <KEY NAME="ouwiki_locks_fk_pageid" TYPE="foreign" FIELDS="pageid" REFTABLE="ouwiki_pages" REFFIELDS="id"/>
+        <KEY NAME="ouwiki_locks_fk_userid" TYPE="foreign" FIELDS="userid" REFTABLE="user" REFFIELDS="id"/>
+        <KEY NAME="ouwiki_locks_fk_versionid" TYPE="foreign" FIELDS="versionid" REFTABLE="ouwiki_versions" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="ouwiki_sections" COMMENT="Stores reference to sections (marked by headings) within pages. Entries in this table are only added when sections are actually used to store something in the database. They may remain after the section itself has been deleted from the current page version.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true" COMMENT="id of the table, please edit me"/>
+        <FIELD NAME="pageid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="ID of page that this section is for."/>
+        <FIELD NAME="xhtmlid" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="This is the ID used in XHTML for the section, excluding prefix. For example if the heading is &lt;h2 id=&quot;ouwiki_41_325&quot;&gt; then this value will be 41_325. When storing data for the main part of a page rather than a subsection, this should be set to null."/>
+        <FIELD NAME="title" TYPE="char" LENGTH="255" NOTNULL="false" SEQUENCE="false" COMMENT="Title of section in plain text (no HTML), restricted to a reasonable length. The title is taken from the contents of the heading tag in HTML and is updated when the page is saved. ('Dead' sections retain their title in the database.)"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" COMMENT="primary key of the table, please edit me"/>
+        <KEY NAME="ouwiki_sections_fk_pageid" TYPE="foreign" FIELDS="pageid" REFTABLE="ouwiki_pages" REFFIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="ouwiki_annotations" COMMENT="Holds the inline comments for the commenting system called Annotations.">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="pageid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="used to get all all annotations on a page"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="false" SEQUENCE="false" COMMENT="who created the annotation"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="Time the annotation was created or edited"/>
+        <FIELD NAME="content" TYPE="text" NOTNULL="true" SEQUENCE="false" COMMENT="Annotation text, plain text not HTML"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+  </TABLES>
+</XMLDB>
diff --git a/mod/ouwiki/db/log.php b/mod/ouwiki/db/log.php
new file mode 100644
index 0000000..78eaaff
--- /dev/null
+++ b/mod/ouwiki/db/log.php
@@ -0,0 +1,53 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Definition of log events
+ *
+ *
+ * @package    mod_ouwiki
+ * @copyright  2012 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+global $DB;
+
+$logs = array(
+    array('module' => 'ouwiki', 'action' => 'add', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'annotate', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'diff', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'edit', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'entirewiki', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'history', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'lock', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'participation', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'revert', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'search', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'unlock', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'update', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'userparticipation', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'versiondelete', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'versionundelete', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'view', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'view all', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'viewold', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'wikihistory', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'wikiindex', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'page created', 'mtable' => 'ouwiki', 'field' => 'name'),
+    array('module' => 'ouwiki', 'action' => 'page updated', 'mtable' => 'ouwiki', 'field' => 'name')
+);
\ No newline at end of file
diff --git a/mod/ouwiki/db/tasks.php b/mod/ouwiki/db/tasks.php
new file mode 100644
index 0000000..5133d5f
--- /dev/null
+++ b/mod/ouwiki/db/tasks.php
@@ -0,0 +1,38 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Definition of Forum scheduled tasks.
+ *
+ * @package mod_ouwiki
+ * @category task
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$tasks = array(
+    array(
+        'classname' => 'mod_ouwiki\task\daily_housekeeping',
+        'blocking' => 0,
+        'minute' => '45',
+        'hour' => '4',
+        'day' => '*',
+        'month' => '*',
+        'dayofweek' => '*'
+    )
+);
diff --git a/mod/ouwiki/db/upgrade.php b/mod/ouwiki/db/upgrade.php
new file mode 100644
index 0000000..89373ed
--- /dev/null
+++ b/mod/ouwiki/db/upgrade.php
@@ -0,0 +1,492 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+function xmldb_ouwiki_upgrade($oldversion=0) {
+
+    global $CFG, $DB;
+
+    $dbman = $DB->get_manager(); // Loads ddl manager and xmldb classes.
+
+    if ($oldversion < 2008100600) {
+
+        // Define field deletedat to be added to ouwiki_versions.
+        $table = new xmldb_table('ouwiki_versions');
+        $field = new xmldb_field('deletedat');
+        $field->set_attributes(XMLDB_TYPE_INTEGER, '10', XMLDB_UNSIGNED, null, null, null, 'changeprevsize');
+        // Launch add field deletedat (provided field does not already exist).
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        upgrade_mod_savepoint(true, 2008100600, 'ouwiki');
+    }
+
+    if ($oldversion < 2009120801) {
+        // Launch create table for ouwiki_annotations - if it does not already exist (extra precaution).
+        $table = new xmldb_table('ouwiki_annotations');
+        if (!$dbman->table_exists($table)) {
+            $dbman->install_one_table_from_xmldb_file($CFG->dirroot.'/mod/ouwiki/db/install.xml', 'ouwiki_annotations');
+        }
+
+        // Define field locked to be added to ouwiki_pages.
+        $table = new xmldb_table('ouwiki_pages');
+        $field = new xmldb_field('locked');
+        $field->set_attributes(XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, 0, 'currentversionid');
+        // Launch add field locked - if it does not already exist (extra precaution).
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+        upgrade_mod_savepoint(true, 2009120801, 'ouwiki');
+    }
+
+    if ($oldversion < 2010022300) {
+
+        // Define field locked to be added to ouwiki_pages.
+        $table = new xmldb_table('ouwiki');
+        $field = new xmldb_field('commenting');
+        $field->set_attributes(XMLDB_TYPE_CHAR, '20', null, null, null, 'default', 'completionedits');
+        // Launch add field locked - if it does not already exist (extra precaution).
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        upgrade_mod_savepoint(true, 2010022300, 'ouwiki');
+    }
+
+    if ($oldversion < 2010122001) {
+
+        // Drop the old comments table
+        $table = new xmldb_table('ouwiki_comments');
+        if ($dbman->table_exists($table)) {
+            $dbman->drop_table($table);
+        }
+
+        // Drop the old commenting field in ouwiki
+        $table2 = new xmldb_table('ouwiki');
+        $field = new xmldb_field('commenting');
+
+        if ($dbman->field_exists($table2, $field)) {
+            // We need to know about any wikis which are currently
+            // using annotation or both systems before the upgrade
+            // we need these before we drop the commenting field
+            $rs = $DB->get_records_sql("SELECT DISTINCT w.id ".
+                                            "FROM {ouwiki} w ".
+                                            "WHERE w.commenting = 'annotations' OR w.commenting = 'both'");
+
+            $dbman->drop_field($table2, $field);
+        }
+
+        // Define field annotation to be added to ouwiki
+        $field2 = new xmldb_field('annotation');
+        $field2->set_attributes(XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, 0, 'completionedits');
+
+        if (!$dbman->field_exists($table2, $field2)) {
+            $dbman->add_field($table2, $field2);
+        }
+
+        // update the existing wikis to have annotation turned on
+        // where they did before or had the BOTH commenting option
+        if (!empty($rs)) {
+            $ids = array_keys($rs);
+            list($usql, $params) = $DB->get_in_or_equal($ids);
+            $update_sql = 'UPDATE {ouwiki} SET annotation = 1 WHERE id '.$usql;
+            $DB->execute($update_sql, $params);
+        }
+
+        // retrieve new summary field
+        $field3 = new xmldb_field('summary', XMLDB_TYPE_TEXT, 'small', null, null, null, null, 'template');
+
+        // Launch rename field summary
+        if ($dbman->field_exists($table2, $field3)) {
+            $dbman->rename_field($table2, $field3, 'intro');
+        }
+
+        // Define field introformat to be added to ouwiki
+        $field4 = new xmldb_field('introformat', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', 'annotation');
+
+        // Launch add field introformat
+        if (!$dbman->field_exists($table2, $field4)) {
+            $dbman->add_field($table2, $field4);
+        }
+
+        // Define field introformat to be added to ouwiki
+        $table3 = new xmldb_table('ouwiki_versions');
+        $field5 = new xmldb_field('xhtmlformat', XMLDB_TYPE_INTEGER, '4', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', 'deletedat');
+
+        // Launch add field introformat
+        if (!$dbman->field_exists($table3, $field5)) {
+            $dbman->add_field($table3, $field5);
+        }
+
+        // conditionally migrate to html format in intro
+        if ($CFG->texteditors !== 'textarea') {
+            // introformat
+            $rs = $DB->get_recordset('ouwiki', array('introformat' => FORMAT_MOODLE), '', 'id,intro,introformat');
+            foreach ($rs as $r) {
+                $r->intro       = text_to_html($r->intro, false, false, true);
+                $r->introformat = FORMAT_HTML;
+                $DB->update_record('ouwiki', $r);
+                upgrade_set_timeout();
+            }
+            $rs->close();
+
+            // xhtmlformat
+            $rs = $DB->get_recordset('ouwiki_versions', array('xhtmlformat' => FORMAT_MOODLE), '', 'id,xhtml,xhtmlformat');
+            foreach ($rs as $r) {
+                $r->xhtml       = text_to_html($r->xhtml, false, false, true);
+                $r->xhtmlformat = FORMAT_MOODLE;
+                $DB->update_record('ouwiki_versions', $r);
+                upgrade_set_timeout();
+            }
+            $rs->close();
+        }
+
+        upgrade_mod_savepoint(true, 2010122001, 'ouwiki');
+    }
+
+    if ($oldversion < 2011031800) {
+        upgrade_mod_savepoint(true, 2011031800, 'ouwiki');
+    }
+
+    if ($oldversion < 2011060100) {
+
+        // Define field enablewordcount to be added to ouwiki
+        $table = new xmldb_table('ouwiki');
+        $field = new xmldb_field('enablewordcount', XMLDB_TYPE_INTEGER, '1',
+            XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '1', 'introformat');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Define field wordcount to be added to ouwiki_versions
+        $table = new xmldb_table('ouwiki_versions');
+        $field = new xmldb_field('wordcount', XMLDB_TYPE_INTEGER, '10',
+            XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', 'xhtmlformat');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // we need to update all ouwiki_versions wordcounts
+        $count = $DB->count_records_sql('SELECT COUNT(*) FROM {ouwiki_versions}');
+        $rs = $DB->get_recordset_sql('SELECT id, xhtml FROM {ouwiki_versions} ORDER BY id');
+        if ($rs->valid()) {
+            $pbar = new progress_bar('countwordsouwikiversionsxhtml', 500, true);
+
+            $i = 0;
+            foreach ($rs as $entry) {
+                $i++;
+                upgrade_set_timeout(60); // set up timeout, may also abort execution
+                $pbar->update($i, $count, "Counting words of ouwiki version entries - $i/$count.");
+
+                // retrieve wordcount
+                require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+                $wordcount = ouwiki_count_words($entry->xhtml);
+                $entry->wordcount = $wordcount;
+                $DB->update_record('ouwiki_versions', $entry);
+            }
+        }
+        $rs->close();
+
+        upgrade_mod_savepoint(true, 2011060100, 'ouwiki');
+    }
+
+    if ($oldversion < 2011071300) {
+
+        // Define field grade to be added to ouwiki
+        $table = new xmldb_table('ouwiki');
+        $field = new xmldb_field('grade', XMLDB_TYPE_INTEGER, '10',
+            XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', 'enablewordcount');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // we need to update all ouwiki_versions scales
+        $rs = $DB->get_recordset_sql('SELECT id FROM {ouwiki} ORDER BY id');
+        if ($rs->valid()) {
+            foreach ($rs as $entry) {
+                $entry->grade = 0;
+                $DB->update_record('ouwiki', $entry);
+            }
+        }
+        $rs->close();
+
+        upgrade_mod_savepoint(true, 2011071300, 'ouwiki');
+    }
+
+    if ($oldversion < 2011072000) {
+
+        // Define field firstversionid to be added to ouwiki_pages
+        $table = new xmldb_table('ouwiki_pages');
+        $field = new xmldb_field('firstversionid', XMLDB_TYPE_INTEGER, '10',
+            XMLDB_UNSIGNED, null, null, '0', 'locked');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Define field previousversionid to be added to ouwiki_versions
+        $table = new xmldb_table('ouwiki_versions');
+        $field = new xmldb_field('previousversionid', XMLDB_TYPE_INTEGER, '10',
+            XMLDB_UNSIGNED, null, null, '0', 'wordcount');
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // update all ouwiki_versions previousversionids and ouwiki_pages firstversionids
+        // firstversionid
+        $sql = 'SELECT v.pageid,
+                    (SELECT MIN(id)
+                        FROM {ouwiki_versions} v3
+                        WHERE v3.pageid = p.id AND v3.deletedat IS NULL)
+                    AS firstversionid
+                        FROM {ouwiki_pages} p
+                        JOIN {ouwiki_versions} v ON v.pageid = p.id
+                    GROUP BY v.pageid, p.id ORDER BY v.pageid';
+        $rs = $DB->get_recordset_sql($sql);
+        if ($rs->valid()) {
+            foreach ($rs as $entry) {
+                if (isset($entry->firstversionid)) {
+                    $DB->set_field('ouwiki_pages', 'firstversionid', $entry->firstversionid,
+                        array('id' => $entry->pageid));
+                }
+            }
+        }
+        $rs->close();
+
+        // previousversionid
+        $count = $DB->count_records_sql('SELECT COUNT(*) FROM {ouwiki_versions}');
+        $sql = 'SELECT v.id AS versionid,
+                    (SELECT MAX(v2.id)
+                        FROM {ouwiki_versions} v2
+                        WHERE v2.pageid = p.id AND v2.id < v.id)
+                    AS previousversionid
+                        FROM {ouwiki_pages} p
+                        JOIN {ouwiki_versions} v ON v.pageid = p.id';
+        $rs = $DB->get_recordset_sql($sql);
+        if ($rs->valid()) {
+            $pbar = new progress_bar('ouwikifirstandpreviousversions', 500, true);
+
+            $i = 0;
+            foreach ($rs as $entry) {
+                $i++;
+                upgrade_set_timeout(60); // set up timeout, may also abort execution
+                $pbar->update($i, $count, "Updating wiki metadata - $i/$count.");
+
+                if (isset($entry->previousversionid)) {
+                    $DB->set_field('ouwiki_versions', 'previousversionid',
+                        $entry->previousversionid, array('id' => $entry->versionid));
+                }
+            }
+        }
+        $rs->close();
+
+        upgrade_mod_savepoint(true, 2011072000, 'ouwiki');
+    }
+
+    if ($oldversion < 2011102802) {
+
+        // Delete any duplicate null values (these aren't caught by index)
+        // Done in two stages in case mysql is a piece of ****.
+        $rs = $DB->get_recordset_sql("
+SELECT
+    p.id
+FROM
+   {ouwiki_pages} p
+   LEFT JOIN {ouwiki_pages} p2 ON p2.subwikiid = p.subwikiid AND p2.title IS NULL
+       AND p.title IS NULL AND p2.id < p.id
+WHERE
+   p2.id IS NOT NULL");
+        $ids = array();
+        foreach ($rs as $rec) {
+            $ids[] = $rec->id;
+        }
+        $rs->close();
+        if ($ids) {
+            list($sql, $params) = $DB->get_in_or_equal($ids);
+            $DB->execute("DELETE FROM {ouwiki_pages} WHERE id $sql", $params);
+        }
+
+        // Set all the null values to blank
+        $DB->execute("UPDATE {ouwiki_pages} SET title='' WHERE title IS NULL");
+
+        // Also in ousearch table if installed
+        $table = new xmldb_table('local_ousearch_documents');
+        if ($dbman->table_exists($table)) {
+            $DB->execute("UPDATE {local_ousearch_documents} SET stringref='' WHERE stringref IS NULL AND plugin='mod_ouwiki'");
+        }
+
+        // Changing nullability of field title on table ouwiki_pages to not null
+        $table = new xmldb_table('ouwiki_pages');
+        $field = new xmldb_field('title', XMLDB_TYPE_CHAR, '255', null, XMLDB_NOTNULL, null, null, 'subwikiid');
+
+        // Launch change of nullability for field title
+        $dbman->change_field_notnull($table, $field);
+
+        // Define index subwikiid-title (unique) to be added to ouwiki_pages
+        $index = new xmldb_index('subwikiid-title', XMLDB_INDEX_UNIQUE, array('subwikiid', 'title'));
+
+        // Conditionally launch add index subwikiid-title
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // ouwiki savepoint reached
+        upgrade_mod_savepoint(true, 2011102802, 'ouwiki');
+    }
+
+    if ($oldversion < 2013060600) {
+        // Fix broken links due to annotations (current version unlocked page only).
+        $likes = $DB->sql_like('l.tourl', '?');
+        $params = array('view.php%');
+        // Fix where relative has been turned into incorrect absolute.
+        $likes .= ' or ' . $DB->sql_like('l.tourl', '?');
+        $params[] = "$CFG->wwwroot/view.php%";
+        // Only pickup links on pages where annotations have been used.
+        $pagelike = $DB->sql_like('v.xhtml', '?');
+        $params[] = '<div class="ouwiki_content"%';
+        $params[] = 0;
+        $sql = "select l.id as lid, l.tourl, v.id as vid, v.xhtml, p.id as pageid, p.subwikiid
+            from {ouwiki_links} l
+            inner join {ouwiki_versions} v on v.id = l.fromversionid
+            inner join {ouwiki_pages} p on v.id = p.currentversionid
+            where ($likes)
+            and $pagelike and p.locked = ?
+            order by p.id";
+        $links = $DB->get_records_sql($sql, $params);
+        $pagesprocessed = array();
+        $subwikipages = array();
+        foreach ($links as $linkdetails) {
+            // For each link found fix content of page it belongs to (once per page).
+            if (!in_array($linkdetails->pageid, $pagesprocessed)) {
+                // Tidy up and revert converted content (links) back to original format.
+                $pattern = '(<a\b[^>]*?href="(' . preg_quote($CFG->wwwroot . '/') . ')?view\.php[^"]*?page=([^"]*?)"[^>]*?>(.*?)<\/a>)';
+                preg_match_all($pattern, $linkdetails->xhtml, $matches);
+                $newxhtml = $linkdetails->xhtml;
+                for ($i = 0; $i < count($matches[0]); $i++) {
+                    $tag = $matches[0][$i];
+                    $page = urldecode($matches[2][$i]);
+                    $text = $matches[3][$i];
+                    if (strip_tags($text) == $text) {
+                        // Only create 'proper' link where tag contents not formatted.
+                        $newxhtml = str_replace($tag, "[[$page]]", $newxhtml);
+                    } else if (!empty($matches[1][$i])) {
+                        // Fix link if absolute to incorrect path.
+                        $newtag = str_replace("{$CFG->wwwroot}/view.php",
+                            "{$CFG->wwwroot}/mod/ouwiki/view.php", $tag);
+                        $newxhtml = str_replace($tag, $newtag, $newxhtml);
+                    } else {
+                        // Fix relative links to view.php as these break when page is edited.
+                        $newtag = str_replace('"view.php',
+                            "\"{$CFG->wwwroot}/mod/ouwiki/view.php", $tag);
+                        $newxhtml = str_replace($tag, $newtag, $newxhtml);
+                    }
+                }
+                if ($newxhtml != $linkdetails->xhtml) {
+                    // Save updated page content.
+                    $update = new stdClass();
+                    $update->id = $linkdetails->vid;
+                    $update->xhtml = $newxhtml;
+                    $DB->update_record('ouwiki_versions', $update);
+                }
+                $pagesprocessed[] = $linkdetails->pageid; // Don't process again.
+            }
+            // Attempt to turn tourl link into 'proper' wiki link so structure is correct.
+            if (!isset($subwikipages[$linkdetails->subwikiid])) {
+                // Store all pages from the subwiki (once) so we can find the relevant page.
+                $subwikipages[$linkdetails->subwikiid] = $DB->get_records('ouwiki_pages',
+                        array('subwikiid' => $linkdetails->subwikiid), '', 'id,title');
+            }
+            $pagetitle = '';
+            if ($pagechar = strpos($linkdetails->tourl, 'page=')) {
+                // Get page title from url (always at end of url).
+                $pagetitle = urldecode(substr($linkdetails->tourl , $pagechar + 5));
+            }
+            $pageid = 0;
+            // Find page title in sub wiki pages (includes start page match).
+            if (!empty($subwikipages[$linkdetails->subwikiid])) {
+                foreach ($subwikipages[$linkdetails->subwikiid] as $page) {
+                    if ($page->title === $pagetitle) {
+                        $pageid = $page->id;
+                        break;
+                    }
+                }
+            }
+            // Update link record (will always tidy regardless).
+            $update = new stdClass();
+            $update->id = $linkdetails->lid;
+            $update->tourl = null;
+            if ($pageid) {
+                $update->topageid = $pageid;
+            } else {
+                $update->tomissingpage = strtoupper($pagetitle);
+            }
+            $DB->update_record('ouwiki_links', $update);
+        }
+        $links = null;
+        $subwikipages = null;
+        // ouwiki savepoint reached.
+        upgrade_mod_savepoint(true, 2013060600, 'ouwiki');
+    }
+
+    if ($oldversion < 2014012700) {
+
+        // Define field allowimport to be added to ouwiki.
+        $table = new xmldb_table('ouwiki');
+        $field = new xmldb_field('allowimport', XMLDB_TYPE_INTEGER, '1', null, XMLDB_NOTNULL, null, '0', 'grade');
+
+        // Conditionally launch add field allowimport.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Define field importversionid to be added to ouwiki_versions.
+        $table = new xmldb_table('ouwiki_versions');
+        $field = new xmldb_field('importversionid', XMLDB_TYPE_INTEGER, '10', null, null, null, null, 'previousversionid');
+
+        // Conditionally launch add field importversionid.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Ouwiki savepoint reached.
+        upgrade_mod_savepoint(true, 2014012700, 'ouwiki');
+    }
+
+    if ($oldversion < 2014031100) {
+
+        // Define index ouwiki_subwikis_unique_group (unique) to be added to ouwiki_subwikis.
+        $table = new xmldb_table('ouwiki_subwikis');
+        $index = new xmldb_index('ouwiki_subwikis_unique_group', XMLDB_INDEX_UNIQUE, array('wikiid', 'groupid'));
+
+        // Conditionally launch add index ouwiki_subwikis_unique_group.
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Define index ouwiki_subwikis_unique_user (unique) to be added to ouwiki_subwikis.
+        $table = new xmldb_table('ouwiki_subwikis');
+        $index = new xmldb_index('ouwiki_subwikis_unique_user', XMLDB_INDEX_UNIQUE, array('wikiid', 'userid'));
+
+        // Conditionally launch add index ouwiki_subwikis_unique_user.
+        if (!$dbman->index_exists($table, $index)) {
+            $dbman->add_index($table, $index);
+        }
+
+        // Ouwiki savepoint reached.
+        upgrade_mod_savepoint(true, 2014031100, 'ouwiki');
+    }
+
+    // Must always return true from these functions
+    return true;
+}
diff --git a/mod/ouwiki/delete.php b/mod/ouwiki/delete.php
new file mode 100644
index 0000000..ab8dcc7
--- /dev/null
+++ b/mod/ouwiki/delete.php
@@ -0,0 +1,159 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * [Un]Deletes a version of a page then redirects back to the history page
+ * @copyright &copy; 2008 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id = required_param('id', PARAM_INT);
+$versionid = required_param('version', PARAM_INT);
+$pagename = optional_param('page', '', PARAM_TEXT);
+
+$url = new moodle_url('/mod/ouwiki/view.php', array('id' => $id, 'page' => $pagename));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+require_capability('mod/ouwiki:deletepage', $context);
+
+// Get the page version to be [un]deleted
+$pageversion = ouwiki_get_page_version($subwiki, $pagename, $versionid);
+if (!$pageversion) {
+    print_error('deleteversionerrorversion', 'ouwiki');
+}
+
+// Note: No need to confirm deleting/undeleting page version
+// Lock page
+list($lockok, $lock) = ouwiki_obtain_lock($ouwiki, $pageversion->pageid);
+
+// Set default action
+$action = 'delete';
+try {
+    // [Un]Delete page version
+    if (empty($pageversion->deletedat)) {
+
+        // Flag page version as deleted
+        $DB->set_field('ouwiki_versions', 'deletedat', time(), array('id' => $versionid));
+
+        // Check if current version has been deleted
+        if ($pageversion->versionid == $pageversion->currentversionid) {
+
+            // Current version deleted
+            // Update current version to first undeleted version (or null)
+            $pageversions = ouwiki_get_page_history($pageversion->pageid, false, 0, 1);
+            if (($currentpageversion = reset($pageversions))) {
+                // Page version found, update page current version id
+                $DB->set_field('ouwiki_pages', 'currentversionid', $currentpageversion->versionid, array('id' => $pageversion->pageid));
+            } else {
+                // No page version found, reset page current version id
+                $DB->set_field('ouwiki_pages', 'currentversionid', null, array('id' => $pageversion->pageid));
+            }
+        }
+
+        // Update completion status for user
+        $completion = new completion_info($course);
+        if ($completion->is_enabled($cm) && ($ouwiki->completionpages || $ouwiki->completionedits)) {
+                $completion->update_state($cm, COMPLETION_INCOMPLETE);
+        }
+    } else {
+
+        // Flag page version as no longer deleted
+        $action = 'undelete';
+        $DB->set_field('ouwiki_versions', 'deletedat', null, array('id' => $versionid));
+
+        // Get first undeleted (current) page version (there must be one)
+        $pageversions = ouwiki_get_page_history($pageversion->pageid, false, 0, 1);
+        $currentpageversion = reset($pageversions);
+        if (!$currentpageversion) {
+            throw new Exception('Error deleting/undeleting ouwiki page version');
+        }
+
+        // Check if version that has been undeleted should be the new current version
+        if ($pageversion->currentversionid != $currentpageversion->versionid) {
+
+            // Set new current version id
+            $DB->set_field('ouwiki_pages', 'currentversionid', $currentpageversion->versionid, array('id' => $pageversion->pageid));
+        }
+
+        // Update completion status for user
+        $completion = new completion_info($course);
+        if ($completion->is_enabled($cm) && ($ouwiki->completionedits || $ouwiki->completionpages)) {
+            $completion->update_state($cm, COMPLETION_COMPLETE, $pageversion->userid);
+        }
+    }
+
+} catch (Exception $e) {
+
+    // Unlock page
+    ouwiki_release_lock($pageversion->pageid);
+
+    ouwiki_dberror('Error deleting/undeleting ouwiki page version '.$e);
+}
+
+// Unlock page
+ouwiki_release_lock($pageversion->pageid);
+
+// Log delete or undelete action.
+$ouwikiparamsurl = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL);
+
+$logurl = 'delete.php?' . $ouwikiparamsurl . '&amp;version=' . $versionid;
+
+// Add to log.
+$params = array(
+        'context' => $context,
+        'objectid' => $pageversion->pageid,
+        'other' => array('logurl' => $logurl)
+);
+
+$event = null;
+if ($action == 'delete') {
+    $event = \mod_ouwiki\event\page_version_deleted::create($params);
+} else {
+    // Undeleting.
+    $event = \mod_ouwiki\event\page_version_undeleted::create($params);
+}
+$event->add_record_snapshot('course_modules', $cm);
+$event->add_record_snapshot('course', $course);
+$event->add_record_snapshot('ouwiki', $ouwiki);
+$event->trigger();
+
+// Redirect to view what is now the current version.
+$redirecturl = new moodle_url('/mod/ouwiki/history.php');
+redirect($redirecturl.'?'.$ouwikiparamsurl);
+exit;
diff --git a/mod/ouwiki/diff.php b/mod/ouwiki/diff.php
new file mode 100644
index 0000000..78fde1e
--- /dev/null
+++ b/mod/ouwiki/diff.php
@@ -0,0 +1,141 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Diff. Displays the difference between two versions of a wiki page.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id = required_param('id', PARAM_INT);
+$v1 = required_param('v1', PARAM_INT);
+$v2 = required_param('v2', PARAM_INT);
+$pagename = optional_param('page', '', PARAM_TEXT);
+
+$url = new moodle_url('/mod/ouwiki/diff.php', array('id' => $id, 'v1' => $v1, 'v2' => $v2, 'page' => $pagename));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+$candelete = has_capability('mod/ouwiki:deletepage', $context);
+
+// Get the current page [and current version, which we ignore]
+$pageversion1 = ouwiki_get_page_version($subwiki, $pagename, $v1);
+$pageversion2 = ouwiki_get_page_version($subwiki, $pagename, $v2);
+if (!$pageversion1 || !$pageversion2 ||
+   ((!empty($pageversion1->deletedat) || !empty($pageversion2->deletedat)) && !$candelete)) {
+    print_error('Specified version does not exist');
+}
+if ($pageversion1 >= $pageversion2) {
+    print_error('Versions out of order');
+}
+
+// Print header
+$tabhistparams = ouwiki_shared_url_params($pagename, $subwiki, $cm);
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context,
+    array(
+        array('name' => get_string('tab_history', 'ouwiki'), 'link' => new moodle_url('/mod/ouwiki/history.php', $tabhistparams)),
+        array('name' => get_string('changesnav', 'ouwiki'), 'link' => null)),
+    true, true
+);
+
+// Obtain difference between two versions
+list($diff1, $diff2, $numchanges) = ouwiki_diff_html($pageversion1->xhtml, $pageversion2->xhtml);
+
+$fs = get_file_storage();
+$files1 = ($files1 = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment', $pageversion1->versionid, "timemodified", false)) ? $files1 : null;
+$files2 = ($files2 = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment', $pageversion2->versionid, "timemodified", false)) ? $files2 : null;
+
+list($attachdiff1, $attachdiff2, $attachnumchanges) = ouwiki_diff_attachments($files1, $files2, $context->id,
+    $pageversion1->versionid, $pageversion2->versionid);
+
+$numchanges = $numchanges + $attachnumchanges;
+// if there are no changes then check if there are any annotations in the new version
+if ($numchanges == 0) {
+    $annotations = ouwiki_get_annotations($pageversion2);
+    if (count($annotations) === 0) {
+        $advice = get_string('diff_nochanges', 'ouwiki');
+    } else {
+        $advice = get_string('diff_someannotations', 'ouwiki');
+    }
+} else {
+    $advice = get_string('advice_diff', 'ouwiki');
+}
+
+print get_accesshide(get_string('changedifferences', 'ouwiki'), 'h1');
+print '<p class="ouw_advice">'.
+     $advice.' '.
+     get_string('returntohistory', 'ouwiki',
+    'history.php?'.ouwiki_display_wiki_parameters($pagename, $subwiki, $cm)).'</p>';
+
+// Obtain pluginfile urls.
+$pageversion1->xhtml = file_rewrite_pluginfile_urls($pageversion1->xhtml, 'pluginfile.php',
+    $context->id, 'mod_ouwiki', 'content', $pageversion1->versionid);
+$pageversion2->xhtml = file_rewrite_pluginfile_urls($pageversion2->xhtml, 'pluginfile.php',
+    $context->id, 'mod_ouwiki', 'content', $pageversion2->versionid);
+
+// Obtain difference between two versions
+list($diff1, $diff2) = ouwiki_diff_html($pageversion1->xhtml, $pageversion2->xhtml);
+
+// To make it look like a user object
+$pageversion1->id = $pageversion1->userid;
+$v1name = ouwiki_display_user($pageversion1, $course->id);
+$pageversion2->id = $pageversion2->userid;
+$v2name = ouwiki_display_user($pageversion2, $course->id);
+
+// Disply the two versions
+$v1 = new StdClass;
+$v1->version = get_string('olderversion', 'ouwiki');
+$v1->date = userdate($pageversion1->timecreated);
+$v1->savedby = get_string('savedby', 'ouwiki', $v1name);
+$v1->content = $diff1;
+$v1->attachments = $attachdiff1;
+
+$v2 = new StdClass;
+$v2->version = get_string('newerversion', 'ouwiki');
+$v2->date = userdate($pageversion2->timecreated);
+$v2->savedby = get_string('savedby', 'ouwiki', $v2name);
+$v2->content = $diff2;
+$v2->attachments = $attachdiff2;
+
+echo $ouwikioutput->ouwiki_print_diff($v1, $v2);
+
+// Footer
+echo '<div>';
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
diff --git a/mod/ouwiki/difflib.php b/mod/ouwiki/difflib.php
new file mode 100644
index 0000000..fb4c0dd
--- /dev/null
+++ b/mod/ouwiki/difflib.php
@@ -0,0 +1,829 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Standard diff function plus some extras for handling XHTML diffs.
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+/**
+ * Basic diff utility function, using standard diff algorithm.
+ *
+ * Based on Bell Laboratories Computing Science Technical Report #41,
+ * July 1976, Hunt & McIlroy, Appendix A.1 and A.3.
+ *
+ * http://www.cs.dartmouth.edu/~doug/diff.ps
+ *
+ * @param array $file1 Array of lines in file 1. The first line in the file
+ *   MUST BE INDEX 1 NOT ZERO!!
+ * @param array $file2 Array of lines in file 2, again starting from 1.
+ * @return array An array with one entry (again 1-based) for each line in
+ *   file 1, with its corresponding position in file 2 or 0 if it isn't there.
+ */
+require_once(dirname(__FILE__) . '/../../config.php');
+
+function ouwiki_diff_internal($file1, $file2) {
+    // Basic variables
+    $n = count($file2);
+    $m = count($file1);
+
+    // Special-case for empty file2 which otherwise causes error
+    if ($n == 0) {
+        $result = array();
+        for ($i = 1; $i <= $m; $i++) {
+            $result[$i] = 0;
+        }
+        return $result;
+    }
+
+    // Step 1   Build list of elements
+    /*////////////////////////////////*/
+
+    $vhs = array();
+    for ($j = 1; $j <= $n; $j++) {
+        $vhs[$j] = new StdClass;
+        $vhs[$j]->serial = $j;
+        $vhs[$j]->hash = crc32($file2[$j]);
+    }
+
+    // Step 2   Sort by hash,serial
+    /*/////////////////////////////*/
+
+    usort($vhs, "ouwiki_diff_sort_v");
+
+    // Make it start from 1 again
+    array_unshift($vhs, 'bogus');
+    unset($vhs[0]);
+
+    // $vhshs is now an array including the line number 'serial' and hash
+    // of each line in file 2, sorted by hash and then serial.
+
+    // Step 3   Equivalence classes
+    /*/////////////////////////////*/
+
+    $eqc = array();
+    $eqc[0] = new StdClass;
+    $eqc[0]->serial = 0;
+    $eqc[0]->last = true;
+    for ($j = 1; $j <= $n; $j++) {
+        $eqc[$j] = new StdClass;
+        $eqc[$j]->serial = $vhs[$j]->serial;
+        $eqc[$j]->last = $j===$n || $vhs[$j]->hash !== $vhs[$j+1]->hash;
+    }
+
+    // E is now an array sorted the same way as $vhs which includes
+    // the line number 'serial' and whether or not that is the 'last'
+    // line in the given equivalence class, i.e. set of identical lines
+
+    // Step 4   For each line in file1, finds start of equivalence class
+    /*//////////////////////////////////////////////////////////////////*/
+    $pos = array();
+    for ($i = 1; $i <= $m; $i++) {
+        // Find matching last entry from equivalence list
+        $pos[$i] = ouwiki_diff_find_last($vhs, $eqc, crc32($file1[$i]));
+    }
+
+    // P is now an array that finds the index (within $vhs) of the *first*
+    // matching line in $vhs (referencing file 2, but not a line number,
+    // because sorted in $vhs order) for each line in file 1. In other words
+    // if you were to start at the P-value in $vhs and continue through, you
+    // would find all the lines from file 2 that are equal to the given line
+    // from file 1.
+
+    // Step 5   Initialise vector of candidates
+    /*/////////////////////////////////////////*/
+
+    // I do not trust PHP references further than I can throw them (preferably
+    // at the idiot who came up with the idea) so I am using a separate array
+    // to store candidates and all references are integers into that.
+
+    $candidates = array();
+    $candidates[0] = new StdClass;
+    $candidates[0]->a = 0;
+    $candidates[0]->b = 0;
+    $candidates[0]->previous = null;
+    $candidates[1] = new StdClass;
+    $candidates[1]->a = $m+1;
+    $candidates[1]->b = $n+1;
+    $candidates[1]->previous = null;
+
+    $karr = array();
+    $karr[0] = 0; // Ref to candidate 0
+    $karr[1] = 1; // Ref to candidate 1
+    $k = 0;
+
+    // Step 6   Merge stage
+    /*/////////////////////*/
+
+    for ($i = 1; $i <= $m; $i++) {
+        if ($pos[$i] !== 0) {
+            ouwiki_diff_merge($karr, $k, $i, $eqc, $pos[$i], $candidates);
+        }
+    }
+
+    // Step 7
+    /*///////*/
+
+    $jac = array();
+    for ($i = 1; $i <= $m; $i++) {
+        $jac[$i] = 0;
+    }
+
+    // Step 8   Follow candidate chain to make nice representation
+    /*////////////////////////////////////////////////////////////*/
+
+    $index = $karr[$k];
+    while (!is_null($index)) {
+        // Stop when we reach the first, dummy candidate
+        if ($candidates[$index]->a != 0) {
+            $jac[$candidates[$index]->a] = $candidates[$index]->b;
+        }
+        $index = $candidates[$index]->previous;
+    }
+
+    // Step 9   Get rid of 'jackpots' (hash collisions)
+    /*////////////////////////////////////////////////*/
+
+    for ($i = 1; $i <= $m; $i++) {
+        if ($jac[$i] != 0 && $file1[$i] != $file2[$jac[$i]]) {
+            $jac[$i] = 0;
+        }
+    }
+
+    // Done! (Maybe.)
+    return $jac;
+}
+
+// Functions needed by parts of the algorithm
+/*///////////////////////////////////////////*/
+
+// Merge, from step 7 (Appendix A.3)
+function ouwiki_diff_merge(&$karr, &$k, $i, &$eqc, $p, &$candidates) {
+    $r = 0;
+    $c = $karr[0];
+
+    while (true) {
+        $j = $eqc[$p]->serial; // Paper says 'i' but this is wrong (OCR)
+
+        // Binary search in $karr from $r to $k.
+        $min = $r;
+        $max = $k+1;
+
+        while (true) {
+            $try = (int)(($min+$max)/2);
+            if ($candidates[$karr[$try]]->b >= $j) {
+                $max = $try;
+            } else if ($candidates[$karr[$try+1]]->b <= $j) {
+                $min = $try+1;
+            } else { // $try is less and $try+1 is more
+                $s = $try;
+                break;
+            }
+            if ($max <= $min) {
+                $s = -1;
+                break;
+            }
+        }
+
+        if ($s > -1) {
+            if ($candidates[$karr[$s+1]]->b > $j) {
+                // Create new candidate
+                $index = count($candidates);
+                $candidates[$index] = new StdClass;
+                $candidates[$index]->a = $i;
+                $candidates[$index]->b = $j;
+                $candidates[$index]->previous = $karr[$s];
+                $karr[$r] = $c;
+                $r = $s + 1;
+                $c = $index; // Or should this go before?
+            }
+
+            if ($s === $k) {
+                $karr[$k+2] = $karr[$k+1];
+                $k++;
+                break;
+            }
+        }
+
+        if ($eqc[$p]->last) {
+            break;
+        }
+
+        $p++;
+    }
+    $karr[$r] = $c;
+}
+
+// From Step 2
+function ouwiki_diff_sort_v($a, $b) {
+    if ($a->hash < $b->hash) {
+        return -1;
+    } else if ($a->hash > $b->hash) {
+        return 1;
+    } else if ($a->serial < $b->serial) {
+        return -1;
+    } else if ($a->serial > $b->serial) {
+        return 1;
+    } else {
+        return 0;
+    }
+}
+
+// From Step 4
+function ouwiki_diff_find_last(&$vhs, &$eqc, $hash) {
+    // Binary search in $vhs until we find something with $hash.
+
+    // Min = 1, array is 1-indexed
+    $min = 1;
+    // Max = 1 higher than highest key
+    end($vhs);
+    $max = key($vhs)+1;
+    while (true) {
+        $try = (int)(($min+$max)/2);
+        if ($vhs[$try]->hash > $hash) {
+            $max = $try;
+        } else if ($vhs[$try]->hash < $hash) {
+            $min = $try+1;
+        } else { // Equal
+            break;
+        }
+        if ($max <= $min) {
+            // No matching line
+            return 0;
+        }
+    }
+
+    // Now check back in $eqc to find the first line of that equivalence class
+    for ($j = $try; !$eqc[$j-1]->last; $j--) {
+        $j;// Inline control strucs not allowed.
+    }
+    return $j;
+}
+
+/*///////////////////////////*/
+
+
+/**
+ * Class representing one 'line' of HTML content for the purpose of
+ * text comparison.
+ */
+class ouwiki_line {
+    /* Array of ouwiki_words */
+    public $words = array();
+
+    /**
+     * Construct line object based on a chunk of text.
+     * @param string $data Text data that makes up this 'line'. (May include line breaks etc.)
+     * @param int $linepos Position number for first character in text
+     */
+    public function __construct($data, $linepos) {
+        // 1. Turn things we don't want into spaces (so that positioning stays same)
+
+        // Whitespace replaced with space
+        $data = preg_replace('/\s/', ' ', $data);
+
+        // Various ways of writing non-breaking space replaced with space
+        // Note that using a single param for replace only works because all
+        // the search strings are 6 characters long
+        $data = str_replace(array('&nbsp;', '&#xA0;', '&#160;') , '      ', $data);
+
+        // Tags replaced with equal number of spaces
+        $data = preg_replace_callback('/<.*?'.'>/', create_function(
+            '$matches', 'return preg_replace("/./"," ", $matches[0]);'), $data);
+
+        // 2. Analyse string so that each space-separated thing
+        // is counted as a 'word' (note these may not be real words,
+        // for instance words may include punctuation at either end)
+        $pos = 0;
+        while (true) {
+            // Find a non-space
+            for (; $pos < strlen($data) && substr($data, $pos, 1) === ' '; $pos++) {
+                $pos;// Inline control strucs not allowed.
+            }
+            if ($pos == strlen($data)) {
+                // No more content
+                break;
+            }
+
+            // Aaaand find the next space after that
+            $space2 = strpos($data, ' ', $pos);
+            if ($space2 === false) {
+                // No more spaces? Everything left must be a word.
+                $word = ltrim(substr($data, $pos), chr(0xC2) . chr(0xA0));
+                if (!empty($word)) {
+                    $this->words[] = new ouwiki_word($word, $pos + $linepos);
+                }
+                break;
+            } else {
+                // Specially trim nbsp; see http://www.php.net/manual/en/function.trim.php#98812.
+                $word = trim(substr($data, $pos, $space2-$pos), chr(0xC2) . chr(0xA0));
+                if (!empty($word)) {
+                    $this->words[] = new ouwiki_word($word, $pos + $linepos);
+                }
+                $pos = $space2;
+            }
+        }
+    }
+
+    /**
+     * @return string Normalised string representation of this line object
+     */
+    public function get_as_string() {
+        $result = '';
+        foreach ($this->words as $word) {
+            if ($result !== '') {
+                $result .= ' ';
+            }
+            $result .= $word->word;
+        }
+        return $result;
+    }
+
+    /**
+     * Static function converts lines to strings.
+     * @param array $lines Array of ouwiki_line
+     * @return array Array of strings
+     */
+    public static function get_as_strings($lines) {
+        $strings = array();
+        foreach ($lines as $key => $value) {
+            $strings[$key] = $value->get_as_string();
+        }
+        return $strings;
+    }
+
+    /**
+     * @return True if there are no words in the line
+     */
+    public function is_empty() {
+        return count($this->words) === 0;
+    }
+}
+
+/**
+ * Represents single word for html comparison. Note that words
+ * are just chunks of plain text and may not be actual words;
+ * they could include punctuation or (if there was e.g. a span
+ * in the middle of something) even be part-words.
+ */
+class ouwiki_word {
+    /* Word as plain string */
+    public $word;
+    /* Start position in original xhtml */
+    public $start;
+
+    public function __construct($word, $start) {
+        $this->word = $word;
+        $this->start = $start;
+    }
+}
+
+/**
+ * Prepares XHTML content for text difference comparison.
+ * @param string $content XHTML content [NO SLASHES]
+ * @return array Array of ouwiki_line objects
+ */
+function ouwiki_diff_html_to_lines($content) {
+    // These functions are a pain mostly because PHP preg_* don't provide
+    // proper information as to the start/end position of matches. As a
+    // consequence there is a lot of hackery going down. At every point we
+    // replace things with spaces rather than getting rid, in order to store
+    // positions within original content.
+
+    // Get rid of all script, style, object tags (that might contain non-text
+    // outside tags)
+    $content = preg_replace_callback(
+        '^(<script .*?</script>)|(<object .*?</object>)|(<style .*?</style>)^i', create_function(
+            '$matches', 'return preg_replace("/./"," ",$matches[0]);'), $content);
+
+    // Get rid of all ` symbols as we are going to use these for a marker later.
+    $content = preg_replace('/[`]/', ' ', $content);
+
+    // Put line breaks on block tags. Mark each line break with ` symbol
+    $blocktags = array('p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'td', 'li');
+    $taglist = '';
+    foreach ($blocktags as $blocktag) {
+        if ($taglist !== '') {
+            $taglist .= '|';
+        }
+        $taglist .= "<$blocktag>|<\\/$blocktag>";
+    }
+    $content = preg_replace_callback('/(('.$taglist.')\s*)+/i', create_function(
+        '$matches', 'return "`".preg_replace("/./"," ",substr($matches[0],1));'), $content);
+
+    // Now go through splitting each line
+    $lines = array();
+    $index = 1;
+    $pos = 0;
+    while ($pos < strlen($content)) {
+        $nextline = strpos($content, '`', $pos);
+        if ($nextline === false) {
+            // No more line breaks? Take content to end
+            $nextline = strlen($content);
+        }
+
+        $linestr = substr($content, $pos, $nextline-$pos);
+        $line = new ouwiki_line($linestr, $pos);
+        if (!$line->is_empty()) {
+            $lines[$index++] = $line;
+        }
+        $pos = $nextline+1;
+    }
+    return $lines;
+}
+
+/**
+ * Represents a changed area of file and where it is located in the
+ * two source files.
+ */
+class ouwiki_change_range {
+    public $file1start, $file1count;
+    public $file2start, $file2count;
+}
+
+/**
+ * A more logical representation of the results from ouwiki_internal_diff()
+ */
+class ouwiki_changes {
+
+    /* Array of indexes (in file 2) of added lines */
+    public $adds;
+
+    /* Array of indexes (in file 1) of deleted lines */
+    public $deletes;
+
+    /* Array of changed ranges */
+    public $changes;
+
+    /**
+     * @param array $diff Array from line indices in file1
+     *   to indices in file2. All indices 1-based.
+     * @param int $count2 Number of lines in file2
+     */
+    public function __construct($diff, $count2) {
+        // Find deleted lines
+        $this->deletes = self::internal_find_deletes($diff, $count2);
+
+        // Added lines work the same way after the comparison is
+        // reversed.
+        $this->adds = self::internal_find_deletes(
+            ouwiki_diff_internal_flip($diff, $count2), count($diff));
+
+        // Changed ranges are all the other lines from file 1 that
+        // weren't found in file 2 but aren't deleted, and the
+        // corresponding lines from file 2 (between the equivalent
+        // 'found' lines).
+        $this->changes = array();
+        $matchbefore = 0;
+        $inrange = -1; $lastrange = -1;
+        foreach ($diff as $index1 => $index2) {
+            // Changed line if this isn't in 'deleted' section and
+            // doesn't have a match in file2.
+            if ($index2 === 0 && !in_array($index1, $this->deletes)) {
+                if ($inrange === -1) {
+                    // Not already in a range, start a new one at array end
+                    $inrange = count($this->changes);
+                    $this->changes[$inrange] = new ouwiki_change_range;
+                    $this->changes[$inrange]->file1start = $index1;
+                    $this->changes[$inrange]->file1count = 1;
+                    $this->changes[$inrange]->file2start = $matchbefore+1; // Last valid from file2
+                    $this->changes[$inrange]->file2count = 0;
+                    $lastrange = $inrange;
+                } else {
+                    // One more line that gets added to the range
+                    $this->changes[$inrange]->file1count++;
+                }
+            } else {
+                // Not in a range any more
+                $inrange = -1;
+                // If we have a line match...
+                if ($index2 !== 0) {
+                    // Remember this line as next range must start after it
+                    $matchbefore = $index2;
+                    // If last range is still looking for a number, fill that in too
+                    if ($lastrange !== -1) {
+                        $this->changes[$lastrange]->file2count = $index2
+                            -$this->changes[$lastrange]->file2start;
+                        $lastrange = -1;
+                    }
+                }
+            }
+        }
+        // Unfinished range in file2 gets end of file
+        if ($lastrange !== -1) {
+            $this->changes[$lastrange]->file2count = $count2
+                -$this->changes[$lastrange]->file2start+1;
+        }
+    }
+
+    /**
+     * Find deleted lines. These are lines in file1 that
+     * cannot be present even in modified form in file2
+     * because we have matching lines around them.
+     * O(n) algorithm.
+     * @param array $diff Array of file1->file2 indexes
+     * @param int $count2 Count of lines in file2
+     */
+    public function internal_find_deletes($diff, $count2) {
+        $deletes = array();
+
+        // 1. Create a new array that includes the lowest-valued
+        //    index2 value below each run of 0s.
+        //    I.e. if our array is say 1,2,0,0,0,3,0 then the
+        //    resulting array will be -,-,3,3,3,-,0
+        $squidges = array();
+        $lowest = 0;
+        for ($index1 = count($diff); $index1 >= 1; $index1--) {
+            $index2 = $diff[$index1];
+            if ($index2 === 0) {
+                $squidges[$index1] = $lowest;
+            } else {
+                $lowest = $index2;
+            }
+        }
+
+        // 2. OK now we can use this new array to work out
+        //    items that are known to be deleted because we
+        //    have matching items either side
+        $highest = 0;
+        foreach ($diff as $index1 => $index2) {
+            if ($index2 === 0) {
+                if ($highest === $count2 || $highest+1 === $squidges[$index1]) {
+                    // Yep! Definitely deleted.
+                    $deletes[]=$index1;
+                }
+            } else {
+                $highest = $index2;
+            }
+        }
+        return $deletes;
+    }
+}
+
+/**
+ * Flips around the array returned by ouwiki_diff_internal
+ * so that it refers to lines from the other file.
+ * @param array $diff Array of index1=>index2
+ * @param int $count2 Count of lines in file 2
+ * @return array Flipped version
+ */
+function ouwiki_diff_internal_flip($diff, $count2) {
+    $flip = array();
+    for ($i = 1; $i <= $count2; $i++) {
+        $flip[$i] = 0;
+    }
+    foreach ($diff as $index1 => $index2) {
+        if ($index2 !== 0) {
+            $flip[$index2]=$index1;
+        }
+    }
+    return $flip;
+}
+
+/**
+ * Compares two files based initially on lines and then on words within the lines that
+ * differ.
+ * @param array $lines1 Array of ouwiki_line
+ * @param array $lines2 Array of ouwiki_line
+ * @return array (deleted,added); deleted and added are arrays of ouwiki_word with
+ *   position numbers from $lines1 and $lines2 respectively
+ */
+function ouwiki_diff_words($lines1, $lines2) {
+    // Prepare arrays
+    $deleted = array();
+    $added = array();
+    // Get line difference
+    $linediff = ouwiki_diff(
+        ouwiki_line::get_as_strings($lines1),
+        ouwiki_line::get_as_strings($lines2));
+
+    // Handle lines that were entirely deleted
+    foreach ($linediff->deletes as $deletedline) {
+        $deleted = array_merge($deleted, $lines1[$deletedline]->words);
+    }
+    // And ones that were entirely added
+    foreach ($linediff->adds as $addedline) {
+        $added = array_merge($added, $lines2[$addedline]->words);
+    }
+
+    // Changes get diffed at the individual-word level
+    foreach ($linediff->changes as $changerange) {
+        // Build list of all words in each side of the range
+        $file1words = array();
+        for ($index = $changerange->file1start; $index < $changerange->file1start + $changerange->file1count; $index++) {
+            foreach ($lines1[$index]->words as $word) {
+                $file1words[] = $word;
+            }
+        }
+        $file2words = array();
+        for ($index = $changerange->file2start; $index < $changerange->file2start + $changerange->file2count; $index++) {
+            foreach ($lines2[$index]->words as $word) {
+                $file2words[] = $word;
+            }
+        }
+
+        // Make arrays 1-based
+        array_unshift($file1words, 'dummy');
+        unset($file1words[0]);
+        array_unshift($file2words, 'dummy');
+        unset($file2words[0]);
+
+        // Convert word lists into plain strings
+        $file1strings = array();
+        foreach ($file1words as $index => $word) {
+            $file1strings[$index] = $word->word;
+        }
+        $file2strings = array();
+        foreach ($file2words as $index => $word) {
+            $file2strings[$index] = $word->word;
+        }
+
+        // Run diff on strings
+        $worddiff = ouwiki_diff($file1strings, $file2strings);
+        foreach ($worddiff->adds as $index) {
+            $added[] = $file2words[$index];
+        }
+        foreach ($worddiff->deletes as $index) {
+            $deleted[] = $file1words[$index];
+        }
+        foreach ($worddiff->changes as $changerange) {
+            for ($index = $changerange->file1start;
+                $index < $changerange->file1start + $changerange->file1count; $index++) {
+                $deleted[] = $file1words[$index];
+            }
+            for ($index = $changerange->file2start;
+                $index < $changerange->file2start + $changerange->file2count; $index++) {
+                $added[] = $file2words[$index];
+            }
+        }
+    }
+
+    return array($deleted, $added);
+}
+
+/**
+ * Runs diff and interprets results into ouwiki_changes object.
+ * @param array $file1 Array of lines in file 1. The first line in the file
+ *   MUST BE INDEX 1 NOT ZERO!!
+ * @param array $file2 Array of lines in file 2, again starting from 1.
+ * @return ouwiki_changes Object describing changes
+ */
+function ouwiki_diff($file1, $file2) {
+    return new ouwiki_changes(ouwiki_diff_internal($file1, $file2), count($file2));
+}
+
+/**
+ * Adds HTML span elements to $html around the words listed in $words.
+ * @param string $html HTML content
+ * @param array $words Array of ouwiki_word to mark
+ * @param string $markerclass Name of class for span element
+ * @return HTML with markup added
+ */
+function ouwiki_diff_add_markers($html, $words, $markerclass, $beforetext, $aftertext) {
+    // Sort words by start position
+    usort($words, create_function('$a,$b', 'return $a->start-$b->start;'));
+
+    // Add marker for each word. We use an odd tag name which will
+    // be replaced by span later, this for ease of replacing
+    $spanstart = "<ouwiki_diff_add_markers>";
+    $pos = 0;
+    $result = '';
+    foreach ($words as $word) {
+        // Add everything up to the word
+        $result .= substr($html, $pos, $word->start - $pos);
+        // Add word
+        $result .= $spanstart.$word->word.'</ouwiki_diff_add_markers>';
+        // Update position
+        $pos = $word->start + strlen($word->word);
+    }
+
+    // Add everything after last word
+    $result .= substr($html, $pos);
+
+    // If we end a marker then immediately start one, get rid of
+    // both the end and start
+    $result = preg_replace('^</ouwiki_diff_add_markers>(\s*)<ouwiki_diff_add_markers>^', '$1', $result);
+
+    // Turn markers into proper span
+    $result = preg_replace('^<ouwiki_diff_add_markers>^', $beforetext.'<span class="'.$markerclass.'">', $result);
+    $result = preg_replace('^</ouwiki_diff_add_markers>^', '</span>'.$aftertext, $result);
+
+    return $result;
+}
+
+/**
+ * Compares two HTML files. (This is the main function that everything else supports.)
+ * @param string $html1 XHTML for file 1
+ * @param string $html2 XHTML for file 2
+ * @return array ($result1,$result2,$changes); result1 and result2 are XHTML
+ *   to be displayed indicating the differences, while $changes is the total
+ *   number of changed (added or deleted) words. May be 0 if there are no
+ *   differences or if differences are only to HTML
+ */
+function ouwiki_diff_html($html1, $html2) {
+    global $OUTPUT;
+
+    $lines1 = ouwiki_diff_html_to_lines($html1);
+    $lines2 = ouwiki_diff_html_to_lines($html2);
+    list($deleted, $added) = ouwiki_diff_words($lines1, $lines2);
+    $changes = count($deleted) + count($added);
+    $result1 = ouwiki_diff_add_markers($html1, $deleted, 'ouw_deleted',
+        '<img src="'.$OUTPUT->pix_url('diff_deleted_begins', 'ouwiki').'" alt="'.get_string('deletedbegins', 'ouwiki').'" />',
+        '<img src="'.$OUTPUT->pix_url('diff_added_ends', 'ouwiki').'" alt="'.get_string('deletedends', 'ouwiki').'" />');
+    $result2 = ouwiki_diff_add_markers($html2, $added, 'ouw_added',
+        '<img src="'.$OUTPUT->pix_url('diff_added_begins', 'ouwiki').'" alt="'.get_string('addedbegins', 'ouwiki').'" />',
+        '<img src="'.$OUTPUT->pix_url('diff_added_ends', 'ouwiki').'" alt="'.get_string('addedends', 'ouwiki').'" />');
+    return array($result1, $result2, $changes);
+}
+
+// compare attachments between versions
+
+function ouwiki_diff_attachments($a1, $a2, $modcontextid, $p1versionid, $p2versionid) {
+    global $PAGE;
+    $ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+    $changes = 0;
+    if (empty($a1) && empty($a2)) {
+        // no attachments exist in either version
+        $result1 = get_string('noattachments', 'ouwiki');
+        $result2 = get_string('noattachments', 'ouwiki');
+    } else if (!empty($a1) && empty($a2)) {
+        // all attachments removed in version 2; only in version 1
+        $result1 = '<ul>';
+        foreach ($a1 as $file) {
+            $result1 .= $ouwikioutput->ouwiki_print_attachment_diff($file, 'delete');
+        }
+        $result1 .= '</ul>';
+        $result2 = get_string('noattachments', 'ouwiki');
+        $changes = count($a1);
+    } else if (empty($a1) && !empty($a2)) {
+        // attachments all added by version 2; none in version 1
+        $result2 = '<ul>';
+        foreach ($a2 as $file) {
+            $result2 .= $ouwikioutput->ouwiki_print_attachment_diff($file, 'add');
+        }
+        $result2 .= '</ul>';
+        $result1 = get_string('noattachments', 'ouwiki');
+        $changes = count($a2);
+    } else { // compare all
+        $changes = 0;
+        $result1 = '<ul>';
+        $result2 = '<ul>';
+
+        // help speed it up by keeping hashes
+        $f1hashes = array();
+        $f2hashes = array();
+
+        // start with in both
+        foreach ($a1 as $f1) {
+            $f1hash = $f1->get_contenthash();
+            $f1hashes[$f1hash] = $f1hash;
+            foreach ($a2 as $f2) {
+                $f2hash = $f2->get_contenthash();
+                $f2hashes[$f2hash] = $f2hash;
+                if ($f1hash === $f2hash) {
+                    $result1 .= $ouwikioutput->ouwiki_print_attachment_diff($f1);
+                    $result2 .= $ouwikioutput->ouwiki_print_attachment_diff($f2);
+                }
+            }
+        }
+
+        // check for new files in version 2
+        foreach ($a2 as $f2) {
+            $f2hash = $f2->get_contenthash();
+            if (!array_key_exists($f2hash, $f1hashes)) {
+                $result2 .= $ouwikioutput->ouwiki_print_attachment_diff($f2, 'add');
+                $changes++;
+            }
+        }
+
+        // check for deleted files in version 1
+        foreach ($a1 as $f1) {
+            $f1hash = $f1->get_contenthash();
+            if (!array_key_exists($f1hash, $f2hashes)) {
+                $result1 .= $ouwikioutput->ouwiki_print_attachment_diff($f1, 'delete');
+                $changes++;
+            }
+        }
+        $result1 .= '</ul>';
+        $result2 .= '</ul>';
+    }
+
+    return array($result1, $result2, $changes);
+}
diff --git a/mod/ouwiki/edit.php b/mod/ouwiki/edit.php
new file mode 100644
index 0000000..add8f99
--- /dev/null
+++ b/mod/ouwiki/edit.php
@@ -0,0 +1,494 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Edit page. Allows user to edit and/or preview wiki pages.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__).'/../../config.php');
+require_once($CFG->dirroot.'/lib/ajax/ajaxlib.php');
+require_once($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+require_once($CFG->dirroot.'/mod/ouwiki/edit_form.php');
+
+if (file_exists($CFG->dirroot.'/local/mobile/ou_lib.php')) {
+    require_once($CFG->dirroot.'/local/mobile/ou_lib.php');
+}
+
+$action = optional_param('editoption', '', PARAM_TEXT);
+
+// for creating pages and sections
+$frompage = optional_param('frompage', null, PARAM_TEXT);
+$newsection = optional_param('newsection', null, PARAM_TEXT);
+
+// for creating/editing sections
+$section = optional_param('section', null, PARAM_RAW);
+
+$urlparams = array();
+$urlparams['id'] = $cm->id;
+if (!empty($pagename)) {
+    $urlparams['page'] = $pagename;
+}
+if (!empty($newsection)) {
+    $urlparams['newsection'] = $newsection;
+}
+if (!empty($section)) {
+    $urlparams['section'] = $section;
+}
+
+// sort out if the action was save or cancel
+$save = $action === get_string('savechanges') ? true : false;
+$cancel = $action === get_string('cancel') ? true : false;
+
+if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+    print_error('invalidcoursemodule');
+}
+
+// Checking course instance
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+    print_error('invalidcoursemodule');
+}
+
+$PAGE->set_cm($cm);
+
+// When creating a new page, do some checks
+$addpage = false;
+if (!is_null($frompage)) {
+    $urlparams['frompage'] = $frompage;
+    $returnurl = new moodle_url('/mod/ouwiki/view.php',
+            ouwiki_display_wiki_parameters($frompage, $subwiki, $cm, OUWIKI_PARAMS_ARRAY));
+    if (trim($pagename) === '') {
+        print_error('emptypagetitle', 'ouwiki', $returnurl);
+    }
+    // Strip whitespace from new page name from form (editor does this for other links).
+    $pagename = preg_replace('/\s+/', ' ', $pagename);
+
+    $addpage = true;
+}
+
+$returnurl = new moodle_url('/mod/ouwiki/view.php',
+        ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_ARRAY));
+
+// When creating a section, do checks
+$addsection = false;
+if (!is_null($newsection)) {
+    if (trim($newsection) === '') {
+        print_error('emptysectiontitle', 'ouwiki', $returnurl);
+    }
+    $addsection = true;
+}
+
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+require_capability('mod/ouwiki:edit', $context);
+
+$url = new moodle_url('/mod/ouwiki/edit.php', $urlparams);
+$PAGE->set_url($url);
+
+// Check permission
+if (!$subwiki->canedit) {
+    print_error('You do not have permission to edit this wiki');
+}
+
+$useattachments = !$addsection && !$section;
+
+// create the new mform
+// customdata indicates whether attachments are used (no for sections)
+$mform = new mod_ouwiki_edit_page_form('edit.php', (object)array(
+        'attachments' => $useattachments, 'startpage' => $pagename === '',
+        'addpage' => $addpage, 'addsection' => $addsection));
+
+// get form content if save/preview
+$content = null;
+$formdata = null;
+if ($formdata = $mform->get_data()) {
+    if ($content = $formdata->content['text']) {
+        // Check if they used the plaintext editor, if so fixup linefeeds
+        if ((isset($formdata->content['format'])) && ($formdata->content['format'] != FORMAT_HTML)) {
+            $content = ouwiki_plain_to_xhtml($content);
+        }
+        $content = ouwiki_format_xhtml_a_bit($content); // Tidy up HTML
+    }
+}
+
+// new content for section
+if ($newsection) {
+    $new = new StdClass;
+    $new->name = ouwiki_display_user($USER, $course->id);
+    $new->date = userdate(time());
+    $sectionheader = html_writer::tag('h3', s($newsection)) .
+            html_writer::tag('p', '(' . get_string('createdbyon', 'ouwiki', $new) . ')');
+}
+
+// if cancel redirect before going too far
+if ($cancel) {
+    // Get pageid to unlock.
+    $pageversion = ouwiki_get_current_page($subwiki, $pagename);
+    if (!empty($pageversion->pageid)) {
+        ouwiki_release_lock($pageversion->pageid);
+    }
+    redirect($returnurl);
+    exit;
+}
+
+// Get the current page version, creating page if needed
+$pageversion = ouwiki_get_current_page($subwiki, $pagename, OUWIKI_GETPAGE_CREATE);
+if ($addpage && !is_null($pageversion->xhtml)) {
+    print_error('duplicatepagetitle', 'ouwiki', $returnurl);
+}
+if ($pageversion->locked === '1') {
+    print_error('thispageislocked', 'ouwiki', 'view.php?id='.$cm->id);
+}
+
+// Need list of known sections on current version
+$knownsections = ouwiki_find_sections($pageversion->xhtml);
+
+// Get section, make sure the name is valid
+if (!preg_match('/^[0-9]+_[0-9]+$/', $section)) {
+    $section = null;
+}
+if ($section) {
+    if (!array_key_exists($section, $knownsections)) {
+        print_error("Unknown section $section");
+    }
+    $sectiontitle = $knownsections[$section];
+    $sectiondetails = ouwiki_get_section_details($pageversion->xhtml, $section);
+}
+
+
+// Get lock
+if (!$cancel) {
+    list($lockok, $lock) = ouwiki_obtain_lock($ouwiki, $pageversion->pageid);
+}
+
+if ($save) {
+    if (!$newsection ) {
+        // Check we started editing the right version
+        $startversionid = required_param('startversionid', PARAM_INT);
+        $versionok = $startversionid == $pageversion->versionid;
+    } else {
+        $versionok = true;
+    }
+
+    // If we either don't have a lock or are editing the wrong version...
+    if (!$versionok || !$lockok) {
+        $savefailtitle = get_string('savefailtitle', 'ouwiki');
+        $specificmessage = get_string(!$versionok ? 'savefaildesynch' : 'savefaillocked', 'ouwiki');
+        $returntoview = get_string('returntoview', 'ouwiki');
+        $savefailcontent = get_string('savefailcontent', 'ouwiki');
+        $actualcontent = ouwiki_convert_content($content, $subwiki, $cm, null, $pageversion->xhtmlformat);
+
+        // we are either returning to an existing page or a "new" one that ws
+        // simultaneously created by someone else at the same time
+        $returnpage = $addpage ? $frompage : $pagename;
+
+        ouwiki_release_lock($pageversion->pageid);
+        echo $OUTPUT->header();
+
+        $pagefield = '';
+        if ($returnpage !== '') {
+            $pagefield = html_writer::empty_tag('input', array('type' => 'hidden',
+                    'name' => 'page', 'value' => $returnpage));
+        }
+        print '<div id="ouwiki_savefail">'
+            .'<h2>'.$savefailtitle.'</h2>'
+            .'<p>'.$specificmessage.'</p>'
+            .'<form action="view.php" method="get">'
+            .'<input type="hidden" name="id" value="'.$cm->id.'" />'
+            . $pagefield
+            .'<input type="submit" value="'.$returntoview.'" />'
+            .'</form>'
+            .'<p>'.$savefailcontent.'</p>'
+            .'<div class="ouwiki_savefailcontent">'.$actualcontent.'</div>'
+            .'</div><div>';
+
+        ouwiki_print_footer($course, $cm, $subwiki, $pagename);
+        exit;
+    }
+
+    $event = null;
+    if ($section) {
+        ouwiki_save_new_version_section($course, $cm, $ouwiki, $subwiki, $pagename, $pageversion->xhtml, $formdata->content['text'], $sectiondetails, $formdata);
+    } else {
+        if ($addpage) {
+            ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $frompage, $pagename, $content, $formdata);
+        } else {
+            if ($addsection) {
+                ouwiki_create_new_section($course, $cm, $ouwiki, $subwiki, $pagename, $formdata->content['text'], $sectionheader, $formdata);
+            } else {
+                // Normal save
+                ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename, $content, -1, -1, -1, null, $formdata);
+            }
+        }
+    }
+
+    // Update completion state
+    $completion = new completion_info($course);
+    if ($completion->is_enabled($cm) && ($ouwiki->completionedits || $ouwiki->completionpages)) {
+        $completion->update_state($cm, COMPLETION_COMPLETE);
+    }
+
+    // Release lock, log and redirect.
+    ouwiki_release_lock($pageversion->pageid);
+
+    // Log.
+    $info = '';
+    if ($pagename) {
+        $info = $pagename;
+    }
+
+    // Log usage edit.
+    $params = array(
+            'context' => $context,
+            'objectid' => $pageversion->pageid,
+            'other' => array('info' => $info, 'logurl' => $url->out_as_local_url())
+    );
+
+    if ($addpage) {
+        $event = \mod_ouwiki\event\page_created::create($params);
+    } else {
+        $event = \mod_ouwiki\event\page_updated::create($params);
+    }
+    $event->add_record_snapshot('course_modules', $cm);
+    $event->add_record_snapshot('course', $course);
+    $event->add_record_snapshot('ouwiki', $ouwiki);
+    $event->trigger();
+
+    // Redirect.
+    redirect($returnurl);
+    exit;
+}
+
+if ($section) {
+    $sectionfields = "<input type='hidden' name='section' value='$section' />";
+} else {
+    $sectionfields = '';
+}
+
+// Handle case where page is locked by someone else
+if (!$lockok) {
+    echo $OUTPUT->header();
+
+    $lockholder = $DB->get_record('user', array('id' => $lock->userid));
+    $canoverride = has_capability('mod/ouwiki:overridelock', $context);
+    $pagelockedtimeout = null;
+
+    $cancel = get_string('cancel');
+    $tryagain = get_string('tryagain', 'ouwiki');
+    $pagelockedtitle = get_string('pagelockedtitle', 'ouwiki');
+    $overridelock = get_string('overridelock', 'ouwiki');
+
+    $details = new StdClass;
+    $details->name = fullname($lockholder);
+    $details->lockedat = ouwiki_nice_date($lock->lockedat);
+    $details->seenat = ouwiki_nice_date($lock->seenat);
+    if ($lock->seenat > time()) {
+        // When the 'seen at' value is greater than current time, that means
+        // their lock has been automatically confirmed in advance because they
+        // don't have JavaScript support.
+        $details->nojs = ouwiki_nice_date($lock->seenat + OUWIKI_LOCK_PERSISTENCE);
+        $pagelockeddetails = get_string('pagelockeddetailsnojs', 'ouwiki', $details);
+    } else {
+        $pagelockeddetails = get_string('pagelockeddetails', 'ouwiki', $details);
+        if ($lock->expiresat) {
+            $pagelockedtimeout = get_string('pagelockedtimeout', 'ouwiki', userdate($lock->expiresat));
+        }
+    }
+
+    $pagelockedoverride = $canoverride ? '<p>'.get_string('pagelockedoverride', 'ouwiki').'</p>' : '';
+
+    print "<div id='ouwiki_lockinfo'>
+        <h2>$pagelockedtitle</h2>
+        <p>$pagelockeddetails $pagelockedtimeout</p>
+        $pagelockedoverride
+        <div class='ouwiki_lockinfobuttons'>";
+
+    if ($pagename === '') {
+        $pageinputs = '';
+    } else {
+        $pageinputs = html_writer::empty_tag('input', array('type' => 'hidden',
+                        'name' => 'page', 'value' => $pagename));
+    }
+    if ($addpage) {
+        $pageinputs .= html_writer::empty_tag('input', array('type' => 'hidden',
+                        'name' => 'frompage', 'value' => $frompage));
+    }
+
+    $newsectioninput = '';
+    if ($addsection) {
+        $newsectioninput = html_writer::empty_tag('input', array('type' => 'hidden',
+                'name' => 'newsection', 'value' => $newsection));
+    }
+
+    print "<form action='edit.php' method='get'>
+            <input type='hidden' name='id' value='$cm->id' />
+            $pageinputs
+            $newsectioninput
+            $sectionfields
+            <input type='submit' value='$tryagain' />
+        </form>";
+
+    print "<form action='view.php' method='get'>
+            <input type='hidden' name='id' value='$cm->id' />
+            $pageinputs
+            $newsectioninput
+            $sectionfields
+            <input type='submit' value='$cancel' />
+        </form>";
+
+    print $canoverride
+        ? "<form class='ouwiki_overridelock' action='override.php' method='post'>
+        <input type='hidden' name='id' value='$cm->id' />
+        $pageinputs
+        $newsectioninput
+        <input type='submit' value='$overridelock' /></form>"
+        : '';
+
+    print "</div></div><div>";
+
+    ouwiki_print_footer($course, $cm, $subwiki, $pagename);
+    exit;
+}
+
+// The page is now locked to us! Go ahead and print edit form
+
+// get title of the page
+$title = get_string('editingpage', 'ouwiki');
+$wikiname = format_string(htmlspecialchars($ouwiki->name));
+$name = '';
+if ($pagename) {
+    $title .= ': ' . $pagename;
+} else {
+    if ($addsection) {
+        $sectiontitle = $newsection;
+        $name = htmlspecialchars($newsection);
+        $title = get_string('editingsection', 'ouwiki', $name);
+        $section = true;
+    } else {
+        if (!$section) {
+            $name = get_string('startpage', 'ouwiki');
+        } else {
+            $name = htmlspecialchars($sectiontitle);
+            $title = get_string('editingsection', 'ouwiki', $name);
+        }
+    }
+}
+$title = $wikiname.' - '.$title;
+
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context,
+    array(array('name' =>
+        $section
+            ? get_string('editingsection', 'ouwiki', htmlspecialchars($sectiontitle))
+            : get_string('editingpage', 'ouwiki'), 'link' => null)
+        ), false, false, '', $title);
+
+if ($newsection) {
+    $section = false;
+}
+
+// Tabs
+ouwiki_print_tabs('edit', $pagename, $subwiki, $cm, $context, $pageversion->versionid ? true : false);
+
+// setup the edit locking
+ouwiki_print_editlock($lock, $ouwiki);
+
+// Calculate initial text for editor
+if ($section) {
+    $existing = $sectiondetails->content;
+} else if ($newsection) {
+    $existing = $sectionheader;
+} else if ($pageversion) {
+    $existing = $pageversion->xhtml;
+} else {
+    $existing = '';
+}
+
+// print the preview box
+if ($content) {
+    echo $ouwikioutput->ouwiki_print_preview($content, $pagename, $subwiki, $cm, $pageversion->xhtmlformat);
+    $existing = $content;
+}
+
+// Get the annotations and add prepare them for editing
+$annotations = ouwiki_get_annotations($pageversion);
+ouwiki_highlight_existing_annotations($existing, $annotations, 'edit');
+
+print get_string('advice_edit', 'ouwiki', $OUTPUT->help_icon('createlinkedwiki', 'ouwiki'));
+if ($ouwiki->timeout) {
+    $countdowntext = get_string('countdowntext', 'ouwiki', $ouwiki->timeout/60);
+    print "<script type='text/javascript'>
+                document.write('<p><div id=\"ouw_countdown\"></div>$countdowntext<span id=\"ouw_countdownurgent\"></span></p>');
+        </script>";
+}
+
+// Set up basic form data
+$data = new StdClass;
+$data->id = $cm->id;
+$data->startversionid = $pageversion->versionid;
+$data->page = $pagename;
+$data->frompage = $frompage;
+$data->newsection = $newsection;
+$data->section = $section;
+$data->user = $subwiki->userid;
+
+// Prepare form file manager attachments
+if ($useattachments) {
+    $attachmentsdraftid = file_get_submitted_draft_itemid('attachments');
+    file_prepare_draft_area($attachmentsdraftid, $context->id, 'mod_ouwiki',
+            'attachment', empty($pageversion->versionid) ? null : $pageversion->versionid);
+    $data->attachments = $attachmentsdraftid;
+}
+
+// Prepare form editor attachments
+$contentdraftid = file_get_submitted_draft_itemid('content');
+$currenttext = file_prepare_draft_area($contentdraftid, $context->id, 'mod_ouwiki', 'content',
+        empty($pageversion->versionid) ? null : $pageversion->versionid,
+        array('subdirs' => false), empty($existing) ? '' : $existing);
+
+$data->content = array('text' => $currenttext,
+       'format' => empty($pageversion->xhtmlformat)
+           ? editors_get_preferred_format() : $pageversion->xhtmlformat,
+       'itemid' => $contentdraftid);
+
+$mform->set_data($data);
+
+$mform->display();
+
+echo $ouwikioutput->get_bottom_buttons($subwiki, $cm, $context, $pageversion, false);
+
+$stringlist = array(
+        array('savefailnetwork', 'ouwiki'),
+        array('savefailtitle', 'ouwiki'),
+);
+$jsmodule = array(
+        'name' => 'mod_ouwiki_edit',
+        'fullpath' => '/mod/ouwiki/module.js',
+        'requires' => array('base', 'event', 'io', 'node', 'anim', 'moodle-core-notification-alert', 'button'),
+        'strings'  => $stringlist
+);
+$PAGE->requires->js_init_call('M.mod_ouwiki_edit.init', array($context->id), true, $jsmodule);
+
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
diff --git a/mod/ouwiki/edit_form.php b/mod/ouwiki/edit_form.php
new file mode 100644
index 0000000..8c6f191
--- /dev/null
+++ b/mod/ouwiki/edit_form.php
@@ -0,0 +1,69 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * This file contains all necessary code to define and process an edit form
+ */
+
+require_once($CFG->libdir.'/formslib.php');
+require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+class mod_ouwiki_edit_page_form extends moodleform {
+
+    protected function definition() {
+        global $CFG;
+
+        $mform =& $this->_form;
+
+        // Editor.
+        $mform->addElement('editor', 'content', get_string('content'), null, array('maxfiles' => EDITOR_UNLIMITED_FILES));
+        $mform->addHelpButton('content', 'formathtml', 'wiki');
+
+        // attachments
+        if ($this->_customdata->attachments) {
+            $mform->addElement('filemanager', 'attachments', get_string('attachments', 'ouwiki'), null, array('subdirs' => 0));
+        }
+
+        // hiddens
+        $mform->addElement('hidden', 'id');
+        $mform->setType('id', PARAM_INT);
+        $mform->addElement('hidden', 'startversionid', null);
+        $mform->setType('startversionid', PARAM_INT);
+        $mform->addElement('hidden', 'user', null);
+        $mform->setType('user', PARAM_INT);
+        if (!$this->_customdata->startpage) {
+            $mform->addElement('hidden', 'page', '');
+            $mform->setType('page', PARAM_TEXT);
+        }
+        if ($this->_customdata->addpage) {
+            $mform->addElement('hidden', 'frompage', '');
+            $mform->setType('frompage', PARAM_TEXT);
+        }
+        if ($this->_customdata->addsection) {
+            $mform->addElement('hidden', 'newsection', '');
+            $mform->setType('newsection', PARAM_TEXT);
+        }
+        $mform->addElement('hidden', 'section', '');
+        $mform->setType('section', PARAM_RAW);
+
+        $buttongroup = array();
+        $buttongroup[] =& $mform->createElement('submit', 'editoption', get_string('savechanges'), array('id' => 'save'));
+        $buttongroup[] =& $mform->createElement('submit', 'editoption', get_string('preview'), array('id' => 'preview'));
+        $buttongroup[] =& $mform->createElement('submit', 'editoption', get_string('cancel'), array('id' => 'cancel'));
+
+        $mform->addGroup($buttongroup, 'buttonar', '', array(' '), false);
+        $mform->closeHeaderBefore('buttonar');
+    }
+}
diff --git a/mod/ouwiki/entirewiki.php b/mod/ouwiki/entirewiki.php
new file mode 100644
index 0000000..85bbe13
--- /dev/null
+++ b/mod/ouwiki/entirewiki.php
@@ -0,0 +1,264 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Save template feature. Saves entire subwiki contents as an XML template.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id = required_param('id', PARAM_INT); // Course Module ID
+$pagename = optional_param('page', '', PARAM_TEXT);
+$filesexist = optional_param('filesexist', 0, PARAM_INT);
+
+$url = new moodle_url('/mod/ouwiki/view.php', array('id' => $id, 'page' => $pagename));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+$format = required_param('format', PARAM_ALPHA);
+if ($format !== OUWIKI_FORMAT_HTML && $format !== OUWIKI_FORMAT_RTF && $format !== OUWIKI_FORMAT_TEMPLATE) {
+    print_error('Unexpected format');
+}
+
+// Get basic wiki details for filename
+$filename = $course->shortname.'.'.$ouwiki->name;
+$filename = preg_replace('/[^A-Za-z0-9.-]/' , '_', $filename);
+
+$markup = '';
+$fs = null;
+
+switch ($format) {
+    case OUWIKI_FORMAT_TEMPLATE:
+        $markup = '<wiki>';
+        $files = array();
+        $fs = get_file_storage();
+        break;
+    case OUWIKI_FORMAT_RTF:
+        require_once($CFG->dirroot.'/local/rtf.php');
+        $markup = '<root><p>'.get_string('savedat', 'ouwiki', userdate(time())).'</p><hr />';
+        break;
+    case OUWIKI_FORMAT_HTML:
+        // Do header
+        echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, get_string('entirewiki', 'ouwiki'), $context, null, false, true);
+        print '<div class="ouwiki_content">';
+        break;
+}
+
+// Get list of all pages.
+$first = true;
+$index = ouwiki_get_subwiki_index($subwiki->id);
+$brokenimagestr = get_string('brokenimage', 'ouwiki');
+
+$orphans = false;
+$treemode = optional_param('type', '', PARAM_ALPHA) == 'tree';
+
+// Check for orphan posts.
+foreach ($index as $indexitem) {
+    if (count($indexitem->linksfrom) == 0 && $indexitem->title !== '') {
+        $orphans = true;
+        break;
+    }
+}
+
+// If tree view specified.
+if (($treemode) && ($format == OUWIKI_FORMAT_HTML) ) {
+    ouwiki_build_tree($index);
+    // Print out in hierarchical form...
+    print '<ul class="ouw_indextree">';
+    $functionname = 'ouwiki_display_entirewiki_page_in_index';
+    print ouwiki_tree_index($functionname, reset($index)->pageid, $index, $subwiki, $cm, $context);
+    print '</ul>';
+
+    if ($orphans) {
+        print '<h2 class="ouw_orphans">'.get_string('orphanpages', 'ouwiki').'</h2>';
+        print '<ul class="ouw_indextree">';
+        foreach ($index as $indexitem) {
+            if (count($indexitem->linksfrom) == 0 && $indexitem->title !== '') {
+                $orphanindex = ouwiki_get_sub_tree_from_index($indexitem->pageid, $index);
+                ouwiki_build_tree($orphanindex);
+                print ouwiki_tree_index($functionname, $indexitem->pageid, $orphanindex, $subwiki, $cm, $context);
+            }
+        }
+        print '</ul>';
+    }
+} else {
+    foreach ($index as $pageinfo) {
+        if (count($pageinfo->linksfrom)!= 0 || $pageinfo->title === '') {
+            // Get page details.
+            $pageversion = ouwiki_get_current_page($subwiki, $pageinfo->title);
+            // If the page hasn't really been created yet, skip it.
+            if (is_null($pageversion->xhtml)) {
+                continue;
+            }
+
+            $markup .= get_online_display_content($format, $pageversion, $context, $subwiki, $cm, $index, $fs, $files);
+
+            if ($first) {
+                $first = false;
+            }
+        }
+    }
+
+    if ($orphans) {
+        if ($format == OUWIKI_FORMAT_HTML) {
+            print '<h2 class="ouw_orphans">'.get_string('orphanpages', 'ouwiki').'</h2>';
+        } else if ($format != OUWIKI_FORMAT_TEMPLATE) {
+            $markup .= '<h2 class="ouw_orphans">'.get_string('orphanpages', 'ouwiki').'</h2>';
+        }
+
+        foreach ($index as $indexitem) {
+            if (count($indexitem->linksfrom) == 0 && $indexitem->title !== '') {
+                // Get page details.
+                $pageversion = ouwiki_get_current_page($subwiki, $indexitem->title);
+                // If the page hasn't really been created yet, skip it.
+                if (is_null($pageversion->xhtml)) {
+                    continue;
+                }
+
+                $markup .= get_online_display_content($format, $pageversion, $context, $subwiki, $cm, $index, $fs, $files);
+
+                if ($first) {
+                    $first = false;
+                }
+
+            }
+        }
+    }
+}
+
+switch ($format) {
+    case OUWIKI_FORMAT_TEMPLATE:
+        $markup .= '</wiki>';
+        // Create temp xml file.
+        $filerec = new stdClass();
+        $filerec->contextid = $context->id;
+        $filerec->component = 'mod_ouwiki';
+        $filerec->filearea = 'temp';
+        $filerec->filepath = '/';
+        $filerec->itemid = $id;
+        $filerec->filename = strtolower(get_string('template', 'mod_ouwiki')) . '.xml';
+        $files[$filerec->filename] = $fs->create_file_from_string($filerec, $markup);
+        $zip = get_file_packer();
+        $file = $zip->archive_to_storage($files, $context->id, 'mod_ouwiki', 'temp', $id, '/', $filename . '.zip');
+        send_stored_file($file, 0, 0, true, array('dontdie' => true));
+        // Delete all our temp files used in this process.
+        $fs->delete_area_files($context->id, 'mod_ouwiki', 'temp', $id);
+        exit;
+        break;
+
+    case OUWIKI_FORMAT_RTF:
+        $markup .= '</root>';
+        rtf_from_html($filename.'.rtf', $markup);
+        break;
+
+    case OUWIKI_FORMAT_HTML:
+        ouwiki_print_footer($course, $cm, $subwiki);
+        break;
+}
+
+function get_online_display_content($format, $pageversion, $context, $subwiki, $cm, $index, $fs, &$files) {
+    $markup = '';
+    $visibletitle = $pageversion->title === '' ? get_string('startpage', 'ouwiki') : $pageversion->title;
+
+    if ($format != OUWIKI_FORMAT_TEMPLATE) {
+        $pageversion->xhtml = file_rewrite_pluginfile_urls($pageversion->xhtml, 'pluginfile.php',
+                $context->id, 'mod_ouwiki', 'content', $pageversion->versionid);
+    }
+
+    switch ($format) {
+        case OUWIKI_FORMAT_TEMPLATE:
+            // Print template wiki page.
+            $markup .= '<page>';
+            if ($pageversion->title !== '') {
+                $markup .= '<title>' . htmlspecialchars($pageversion->title) . '</title>';
+            }
+            $markup .= '<versionid>' . $pageversion->versionid . '</versionid>';
+            // Copy images found in content.
+            preg_match_all('#<img.*?src="@@PLUGINFILE@@/(.*?)".*?/>#', $pageversion->xhtml, $matches);
+            if (! empty($matches)) {
+                // Extract the file names from the matches.
+                foreach ($matches[1] as $key => $match) {
+                    // Get file name and copy to zip.
+                    $match = urldecode($match);
+                    // Copy image - on fail swap tag with string.
+                    if ($file = $fs->get_file($context->id, 'mod_ouwiki', 'content',
+                            $pageversion->versionid, '/', $match)) {
+                        $files["/$pageversion->versionid/$match/"] = $file;
+                    } else {
+                        $pageversion->xhtml = str_replace($matches[0][$key], $brokenimagestr,
+                                $pageversion->xhtml);
+                    }
+                }
+            }
+            $markup .= '<xhtml>' . htmlspecialchars($pageversion->xhtml) . '</xhtml>';
+            // Add attachments.
+            if ($attachments = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment',
+                    $pageversion->versionid, 'itemid', false)) {
+                // We have attachements.
+                $markup .= '<attachments>';
+                $attachmentsarray = array();
+                foreach ($attachments as $attachment) {
+                    $filename = $attachment->get_filename();
+                    array_push($attachmentsarray, $filename);
+                    $files["/$pageversion->versionid/$filename/"] = $attachment;
+                }
+                $markup .= implode('|', $attachmentsarray);
+                $markup .= '</attachments>';
+            }
+            $markup .= '</page>';
+            break;
+        case OUWIKI_FORMAT_RTF:
+            $markup .= '<h1>' . htmlspecialchars($visibletitle) . '</h1>';
+            $markup .= trim($pageversion->xhtml);
+            $markup .= '<br /><br /><hr />';
+            break;
+        case OUWIKI_FORMAT_HTML:
+            print '<div class="ouw_entry"><a name="' . $pageversion->pageid . '"></a><h1 class="ouw_entry_heading">' .
+                    '<a href="view.php?' . ouwiki_display_wiki_parameters($pageversion->title, $subwiki, $cm) .
+                    '">' . htmlspecialchars($visibletitle) . '</a></h1>';
+            print ouwiki_convert_content($pageversion->xhtml, $subwiki, $cm, $index, $pageversion->xhtmlformat);
+            print '</div>';
+            break;
+    }
+
+    return $markup;
+
+}
diff --git a/mod/ouwiki/feed-history.php b/mod/ouwiki/feed-history.php
new file mode 100644
index 0000000..1503868
--- /dev/null
+++ b/mod/ouwiki/feed-history.php
@@ -0,0 +1,159 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * History page, feed version. Shows list of all previous versions of a page.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+global $ouwiki_nologin;
+$ouwiki_nologin = true;
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+// Get information about page
+$pageversion = ouwiki_get_current_page($subwiki, $pagename, OUWIKI_GETPAGE_CREATE);
+
+$magic = required_param('magic', PARAM_RAW);
+if ($magic != $subwiki->magic) {
+    header('HTTP/1.0 404 not found');
+    die('Incorrect magic number');
+}
+
+$rss = optional_param('format', '', PARAM_RAW) === 'rss';
+
+// Get history
+$changes = ouwiki_get_page_history($pageversion->pageid, false, 0, OUWIKI_FEEDSIZE);
+
+$useragent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
+$oldbrowser =
+  (!preg_match('/Opera/', $useragent) && preg_match('/MSIE [456]/', $useragent)) ||
+  preg_match('/Firefox\/1\./', $useragent);
+
+if ($oldbrowser) {
+    header('Content-Type: text/xml; charset=UTF-8');
+} else if ($rss) {
+    header('Content-Type: application/rss+xml; charset=UTF-8');
+} else {
+    header('Content-Type: application/atom+xml; charset=UTF-8');
+}
+
+$pagetitle = $pageversion->title === '' ? get_string('startpage', 'ouwiki') :
+        htmlspecialchars($pageversion->title);
+
+$a = new StdClass;
+$a->course = htmlspecialchars($course->shortname);
+$a->name = htmlspecialchars($ouwiki->name);
+$a->subtitle = $pagetitle;
+$feedtitle = get_string('feedtitle', 'ouwiki', $a);
+$feedlink = 'http://'.htmlspecialchars($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']);
+$feeddescription = get_string('feeddescriptionhistory', 'ouwiki');
+
+// Domain name, used for IDs (we assume this is owned by site operator in 2007)
+$domainname = preg_replace('/^.*\/\/(www\.)?(.*?)\/.*$/', '$2', $CFG->wwwroot);
+$id = 'tag:'.$domainname.',2007:ouwiki/'.$ouwiki->id.'/wikihistory/changes/'.$pageversion->pageid;
+
+$wikiparams = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm);
+$pagelink = $CFG->wwwroot .'/mod/ouwiki/history.php?'.$wikiparams;
+
+print '<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="'.$CFG->wwwroot.'/mod/ouwiki/feed.xsl"?>';
+if ($rss) {
+    print '
+<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
+  <channel>
+    <title>'.$feedtitle.'</title>
+    <description>'.$feeddescription.'</description>
+    <atom:link rel="self" type="application/rss+xml" href="'.$feedlink.'" />
+    <link>'.$pagelink.'</link>
+    <pubDate>'.date('r', reset($changes)->timecreated).'</pubDate>';
+} else {
+    print '
+<feed xmlns="http://www.w3.org/2005/Atom">
+  <link rel="self" href="'.$feedlink.'"/>
+  <link rel="alternate" type="text/html" href="'.$pagelink.'"/>
+  <title>'.$feedtitle.'</title>
+  <subtitle>'.$feeddescription.'</subtitle>
+  <updated>'.date('c', reset($changes)->timecreated).'</updated>
+  <author>
+    <name>Wiki system</name>
+  </author>
+  <id>'.$id.'</id>';
+}
+
+$pageparams = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm);
+
+$changeindex = 0;
+$changeids = array_keys($changes);
+
+foreach ($changes as $change) {
+    $a = new StdClass;
+    $a->name = htmlspecialchars(fullname($change));
+
+    if ($change->versionid == $pageversion->versionid) {
+        $itemlink = $CFG->wwwroot.'/mod/ouwiki/view.php?'.$pageparams;
+    } else {
+        $itemlink = $CFG->wwwroot.'/mod/ouwiki/viewold.php?'.$pageparams.'&amp;version='.$change->versionid;
+    }
+    $itemtitle = $ouwiki->name.' - '.$pagetitle.' ('.ouwiki_nice_date($change->timecreated).')';
+
+    $nextchange = false;
+    if ($changeindex + 1 < count($changes)) {
+        $nextchange = $changes[$changeids[$changeindex + 1]];
+    }
+
+    if ($nextchange) {
+        $a->url = $CFG->wwwroot.'/mod/ouwiki/diff.php?'.$pageparams.'&amp;v1='.
+            $nextchange->versionid.'&amp;v2='.$change->versionid;
+        $a->main = get_string('feedchange', 'ouwiki', $a);
+    } else {
+        $a->main = get_string('feednewpage', 'ouwiki', $a);
+    }
+    $itemdescription = get_string('feeditemdescriptionnodate', 'ouwiki', $a);
+    if ($rss) {
+        // The 'permalink' guid just points to the wiki history page but with a unique-ifying versionid on end
+        print '
+<item>
+  <title>'.$itemtitle.'</title>
+  <link>'.$itemlink.'</link>
+  <pubDate>'.date('r', $change->timecreated).'</pubDate>
+  <description>'.htmlspecialchars($itemdescription).'</description>
+  <guid>'.$CFG->wwwroot.'/mod/ouwiki/history.php?'.$pageparams.'#v'.$change->versionid.'</guid>
+</item>';
+    } else {
+        print '
+<entry>
+  <title>'.$itemtitle. '</title>
+  <link href="'.$itemlink.'"/>
+  <id>'.$id.'/'.$change->versionid.'</id>
+  <updated>'.date('c', $change->timecreated).'</updated>
+  <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">'.$itemdescription.'</div></summary>
+</entry>';
+    }
+
+    $changeindex++;
+}
+
+if ($rss) {
+    print '</channel></rss>';
+} else {
+    print '</feed>';
+}
diff --git a/mod/ouwiki/feed-wikihistory.php b/mod/ouwiki/feed-wikihistory.php
new file mode 100644
index 0000000..87d2958
--- /dev/null
+++ b/mod/ouwiki/feed-wikihistory.php
@@ -0,0 +1,148 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * 'Wiki changes' page. Displays a list of recent changes to the wiki. You
+ * can choose to view all changes or only new pages.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+global $ouwiki_nologin;
+$ouwiki_nologin = true;
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$magic = required_param('magic', PARAM_RAW);
+if ($magic != $subwiki->magic) {
+    header('HTTP/1.0 404 not found');
+    die('Incorrect magic number');
+}
+
+$newpages = optional_param('type', '', PARAM_ALPHA) == 'pages';
+$rss = optional_param('format', '', PARAM_RAW) === 'rss';
+
+// Get basic wiki parameters
+$wikiparams = ouwiki_display_wiki_parameters('', $subwiki, $cm);
+
+// Get changes
+if ($newpages) {
+    $changes = ouwiki_get_subwiki_recentpages($subwiki->id, 0, OUWIKI_FEEDSIZE);
+    $wikiparams = $wikiparams . '&amp;type=pages';
+} else {
+    $changes = ouwiki_get_subwiki_recentchanges($subwiki->id, 0, OUWIKI_FEEDSIZE);
+}
+
+$useragent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
+$oldbrowser =
+  (!preg_match('/Opera/', $useragent) && preg_match('/MSIE [456]/', $useragent)) ||
+  preg_match('/Firefox\/1\./', $useragent);
+
+if ($oldbrowser) {
+    header('Content-Type: text/xml; charset=UTF-8');
+} else if ($rss) {
+    header('Content-Type: application/rss+xml; charset=UTF-8');
+} else {
+    header('Content-Type: application/atom+xml; charset=UTF-8');
+}
+
+$a = new StdClass;
+$a->course = htmlspecialchars($course->shortname);
+$a->name = htmlspecialchars($ouwiki->name);
+$a->subtitle = get_string($newpages ? 'tab_index_pages' : 'tab_index_changes', 'ouwiki');
+$feedtitle = get_string('feedtitle', 'ouwiki', $a);
+$feedlink = 'http://'.htmlspecialchars($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']);
+$feeddescription=get_string('feeddescription'. ($newpages ? 'pages' : 'changes'), 'ouwiki');
+
+// Domain name, used for IDs (we assume this is owned by site operator in 2007)
+$domainname = preg_replace('/^.*\/\/(www\.)?(.*?)\/.*$/', '$2', $CFG->wwwroot);
+$id = 'tag:'.$domainname.',2007:ouwiki/'.$ouwiki->id.'/wikihistory/'.($newpages ? 'pages' : 'changes');
+
+$pagelink = $CFG->wwwroot . '/mod/ouwiki/wikihistory.php?' . $wikiparams;
+
+print '<?xml version="1.0"?>
+<?xml-stylesheet type="text/xsl" href="'.$CFG->wwwroot.'/mod/ouwiki/feed.xsl"?>';
+if ($rss) {
+    print '
+<rss version="2.0">
+  <channel>
+    <title>'.$feedtitle.'</title>
+    <description>'.$feeddescription.'</description>
+    <link>' . $pagelink . '</link>
+    <pubDate>' . date('r', !empty($changes) ? reset($changes)->timecreated : time()). '</pubDate>';
+} else {
+    print '
+<feed xmlns="http://www.w3.org/2005/Atom">
+  <link rel="self" href="'.$feedlink.'"/>
+  <title>'.$feedtitle.'</title>
+  <subtitle>'.$feeddescription.'</subtitle>
+  <link href="' . $pagelink . '"/>
+  <updated>' . date('c', !empty($changes) ? reset($changes)->timecreated : time()) . '</updated>
+  <author>
+    <name>Wiki system</name>
+  </author>
+  <id>'.$id.'</id>';
+}
+
+foreach ($changes as $change) {
+    $pageparams = ouwiki_display_wiki_parameters($change->title, $subwiki, $cm);
+
+    $a = new StdClass;
+    $a->name = htmlspecialchars(fullname($change));
+    $a->date = ouwiki_nice_date($change->timecreated);
+
+    $itemtitle = $ouwiki->name . ' - ' . ($change->title === ''
+            ? get_string('startpage', 'ouwiki') : htmlspecialchars($change->title));
+    $itemlink = $CFG->wwwroot.'/mod/ouwiki/view.php?'.$pageparams;
+    if (!empty($change->previousversionid)) {
+        $a->url = $CFG->wwwroot.'/mod/ouwiki/diff.php?'.$pageparams.'&amp;v1='.
+            $change->previousversionid.'&amp;v2='.$change->versionid;
+        $a->main = get_string('feedchange', 'ouwiki', $a);
+    } else {
+        $a->main = get_string('feednewpage', 'ouwiki', $a);
+    }
+    $itemdescription = get_string('feeditemdescriptiondate', 'ouwiki', $a);
+    if ($rss) {
+        // The 'permalink' guid just points to the wiki history page but with a unique-ifying versionid on end
+        print '
+<item>
+  <title>'.$itemtitle.'</title>
+  <link>'.$itemlink.'</link>
+  <pubDate>'.date('r', $change->timecreated).'</pubDate>
+  <description>'.htmlspecialchars($itemdescription).'</description>
+  <guid>'.$CFG->wwwroot.'/mod/ouwiki/wikihistory.php?'.$wikiparams.'#v'.$change->versionid.'</guid>
+</item>';
+    } else {
+        print '
+<entry>
+  <title>'.$itemtitle. '</title>
+  <link href="'.$itemlink.'"/>
+  <id>'.$id.'/'.$change->versionid.'</id>
+  <updated>'.date('c', $change->timecreated).'</updated>
+  <summary type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">'.$itemdescription.'</div></summary>
+</entry>';
+    }
+}
+
+if ($rss) {
+    print '</channel></rss>';
+} else {
+    print '</feed>';
+}
diff --git a/mod/ouwiki/feed.xsl b/mod/ouwiki/feed.xsl
new file mode 100644
index 0000000..7d5b10a
--- /dev/null
+++ b/mod/ouwiki/feed.xsl
@@ -0,0 +1,54 @@
+<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+  xmlns:atom="http://www.w3.org/2005/Atom">
+<xsl:output method="html"/>
+
+<xsl:template match="/atom:feed">
+    <html>
+        <head>
+            <title>Atom feed: <xsl:value-of select="atom:title"/></title>
+        </head>
+        <body>
+            <h1>Atom feed: <xsl:value-of select="atom:title"/></h1>
+            <p>
+              This is an Atom feed. If you use a news reader program or
+              website, you can add the Internet address of this page in order
+              to be updated when new information is posted to this feed.
+            </p>
+            <p>
+              Your course doesn't require you to use this page but, if you are
+              interested, you can find out more about Atom from public websites such as
+              <a href="http://atomenabled.org/">Atom Enabled</a>.
+            </p>
+            <p>
+              Click your browser's Back button to return to the website.
+            </p>
+        </body>
+    </html>
+</xsl:template>
+
+<xsl:template match="/rss">
+    <html>
+        <head>
+            <title>RSS feed: <xsl:value-of select="channel/title"/></title>
+        </head>
+        <body>
+            <h1>RSS feed: <xsl:value-of select="channel/title"/></h1>
+            <p>
+              This is an RSS feed. If you use a news reader program or
+              website, you can add the Internet address of this page in order
+              to be updated when new information is posted to this feed.
+            </p>
+            <p>
+              Your course doesn't require you to use this page but, if you are
+              interested, you can find out more about RSS from public sources
+              such as
+              <a href="http://en.wikipedia.org/wiki/RSS_%28file_format%29">this Wikipedia entry</a>.
+            </p>
+            <p>
+              Click your browser's Back button to return to the website.
+            </p>
+        </body>
+    </html>
+</xsl:template>
+
+</xsl:stylesheet>
diff --git a/mod/ouwiki/hideannotations.php b/mod/ouwiki/hideannotations.php
new file mode 100644
index 0000000..1b94c79
--- /dev/null
+++ b/mod/ouwiki/hideannotations.php
@@ -0,0 +1,45 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Toggles the controls whether to load HQ videos or SQ videos for this user
+ * @package mod_ouwiki
+ * @copyright 2012 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require('../../config.php');
+require($CFG->dirroot . '/mod/ouwiki/basicpage.php');
+
+require_login();
+require_sesskey();
+
+$hide = required_param('hide', PARAM_INT);
+
+if ($hide) {
+    set_user_preference(OUWIKI_PREF_HIDEANNOTATIONS, 1);
+} else {
+    unset_user_preference(OUWIKI_PREF_HIDEANNOTATIONS);
+}
+
+// If this is the AJAX version, stop processing now.
+if (optional_param('ajax', 0, PARAM_INT)) {
+    exit;
+}
+
+// Otherwise redirect back.
+redirect('view.php?' .ouwiki_display_wiki_parameters(
+        $pagename, $subwiki, $cm, OUWIKI_PARAMS_URL));
diff --git a/mod/ouwiki/history.php b/mod/ouwiki/history.php
new file mode 100644
index 0000000..ed919b5
--- /dev/null
+++ b/mod/ouwiki/history.php
@@ -0,0 +1,284 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * History page. Shows list of all previous versions of a page.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id = required_param('id', PARAM_INT); // Course Module ID
+$compare = optional_param('compare', 0, PARAM_INT);
+$pagename = optional_param('page', '', PARAM_TEXT);
+
+$url = new moodle_url('/mod/ouwiki/history.php', array('id' => $id));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+$candelete = has_capability('mod/ouwiki:deletepage', $context);
+
+// Check if this is a compare request
+if ($compare) {
+    // OK, figure out the version numbers and redirect to diff.php (this
+    // is done here just so diff.php doesn't have to worry about the manky
+    // format)
+    $versions = array();
+    foreach ($_GET as $name => $value) {
+        if (preg_match('/^v[0-9]+$/', $name)) {
+            $versions[] = substr($name, 1);
+        }
+    }
+    if (count($versions) != 2) {
+        print_error(get_string('mustspecify2', 'ouwiki'));
+    }
+    sort($versions, SORT_NUMERIC);
+    $wikiurlparams = html_entity_decode(ouwiki_display_wiki_parameters($pagename, $subwiki, $cm), ENT_QUOTES);
+    redirect("diff.php?$wikiurlparams&v1={$versions[0]}&v2={$versions[1]}");
+    exit;
+}
+
+// Get information about page
+$pageversion = ouwiki_get_current_page($subwiki, $pagename, OUWIKI_GETPAGE_CREATE);
+$wikiparams = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm);
+$wikiinputs = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_FORM);
+
+// Do header
+$atomurl = $CFG->wwwroot.'/mod/ouwiki/feed-history.php?'.$wikiparams.
+    '&amp;magic='.$subwiki->magic;
+$rssurl = $CFG->wwwroot.'/mod/ouwiki/feed-history.php?'.$wikiparams.
+    '&amp;magic='.$subwiki->magic.'&amp;format=rss';
+$meta = '<link rel="alternate" type="application/atom+xml" title="Atom feed" '.
+    'href="'.$atomurl.'" />';
+
+$wikiname = format_string(htmlspecialchars($ouwiki->name));
+$title = get_string('historyfor', 'ouwiki');
+if ($pagename) {
+    $title = $wikiname.' - '.$title.' : '.$pagename;
+    $name = $pagename;
+} else {
+    $title = $wikiname.' - '.$title.' : '. get_string('startpage', 'ouwiki');
+}
+
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context, null, false, false, $meta, $title);
+
+// Get history
+$changes = ouwiki_get_page_history($pageversion->pageid, $candelete);
+ouwiki_print_tabs('history', $pagename, $subwiki, $cm, $context, true, $pageversion->locked);
+
+print_string('advice_history', 'ouwiki', "view.php?$wikiparams");
+
+// Print message about deleted things being invisible to students so admins
+// don't get confused
+if ($candelete) {
+    $found = false;
+    foreach ($changes as $change) {
+        if (!empty($change->deletedat)) {
+            $found = true;
+            break;
+        }
+    }
+    if ($found) {
+        print '<p class="ouw_deletedpageinfo">'.get_string('pagedeletedinfo', 'ouwiki').'</p>';
+    }
+}
+
+// Check to see whether any change has been overwritten by being imported.
+$overwritten = false;
+foreach ($changes as $change) {
+    if (!empty($change->importversionid)) {
+        $overwritten = true;
+        break;
+    }
+}
+
+print "
+<form name='ouw_history' class='ouw_history' method='get' action='history.php'>
+<input type='hidden' name='compare' value='1'/>
+$wikiinputs
+<table class='generaltable'>
+<thead>
+<tr><th scope='col'>".get_string('date')."</th><th scope='col'>".get_string('time')."</th><th><span class='accesshide'>".get_string('actionheading', 'ouwiki')."</span>
+</th>";
+if ($ouwiki->enablewordcount) {
+    print "<th scope='col'>".get_string('words', 'ouwiki')."</th>";
+}
+if ($overwritten) {
+    print '<th scope="col">'.get_string('importedfrom', 'ouwiki').'</th>';
+}
+print "<th scope='col'>".get_string('changedby', 'ouwiki')."</th><th scope='col'><span class='accesshide'>".get_string('compare', 'ouwiki')."</span></th>";
+print '</thead></tr><tbody>';
+
+$lastdate = '';
+$changeindex = 0;
+$changeids = array_keys($changes);
+foreach ($changes as $change) {
+    $date = userdate($change->timecreated, get_string('strftimedate'));
+    if ($date == $lastdate) {
+        $date = '';
+    } else {
+        $lastdate = $date;
+    }
+    $time = ouwiki_recent_span($change->timecreated).userdate($change->timecreated, get_string('strftimetime')).'</span>';
+
+    $createdtime = userdate($change->timecreated, get_string('strftimetime'));
+    $nextchange = false;
+    if ($changeindex + 1 < count($changes)) {
+        $nextchange = $changes[$changeids[$changeindex + 1]];
+    }
+
+    if ($nextchange) {
+        $changelink = " <small>(<a href='diff.php?$wikiparams&amp;v2={$change->versionid}&amp;v1={$nextchange->versionid}'>".
+                get_string('changes', 'ouwiki')."<span class=\"accesshide\"> $lastdate $createdtime</span></a>)</small>";
+    } else {
+        $changelink = '';
+    }
+    $revertlink = '';
+    if ($change->versionid == $pageversion->versionid) {
+        $viewlink = "view.php?$wikiparams";
+    } else {
+        $viewlink = "viewold.php?$wikiparams&amp;version={$change->versionid}";
+        if ($subwiki->canedit && !$pageversion->locked) {
+            $revertlink = " <a href=revert.php?$wikiparams&amp;version={$change->versionid}>".get_string('revert')."</a>";
+        }
+    }
+
+    // set delete link as appropriate
+    $deletedclass = '';
+    $deletedstr = '';
+    $deletelink = '';
+    if ($candelete) {
+        $strdelete = get_string('delete');
+        $strdeleted = get_string('deleted');
+        if (!empty($change->deletedat)) {
+            $revertlink = '';
+            $deletedclass = " class='ouw_deletedrow'";
+            $strdelete = get_string('undelete', 'ouwiki');
+            $deletedstr = "<span class='ouw_deleted'>$strdeleted</span>";
+        }
+        $deletelink = " <a href=delete.php?$wikiparams&amp;version={$change->versionid}>$strdelete</a>";
+    }
+
+    if ($change->id) {
+        $userlink = ouwiki_display_user($change, $course->id);
+    } else {
+        $userlink = '';
+    }
+
+    $a = new StdClass;
+    $a->lastdate = $lastdate;
+    $a->createdtime = $createdtime;
+
+    $selectaccessibility = get_string('historycompareaccessibility', 'ouwiki', $a);
+
+    print "
+    <tr$deletedclass>
+      <td class='ouw_leftcol'>$date</td><td>$time $deletedstr</td>
+      <td class='actions'><a href='$viewlink'>".get_string('view')."</a>$deletelink$revertlink$changelink</td>";
+    if ($ouwiki->enablewordcount) {
+        if ($change->previouswordcount) {
+            $wordcountchanges = ouwiki_wordcount_difference($change->wordcount, $change->previouswordcount, true);
+        } else {
+            $wordcountchanges = ouwiki_wordcount_difference($change->wordcount, 0, false);
+        }
+        print "<td>$wordcountchanges</td>";
+    }
+
+    if ($overwritten) {
+        if (!empty($change->importversionid)) {
+            $selectedouwiki = ouwiki_get_wiki_details($change->importversionid);
+            print '<td>';
+            if ($selectedouwiki->courseshortname) {
+                print $selectedouwiki->courseshortname. '<br/>';
+            }
+            print $selectedouwiki->name;
+            if ($selectedouwiki->group) {
+                print '<br/>';
+                print '[[' .$selectedouwiki->group. ']]';
+            } else if ($selectedouwiki->user) {
+                print '<br/>';
+                print '[[' .$selectedouwiki->user. ']]';
+            }
+            print '</td>';
+        } else {
+            print '<td></td>';
+        }
+    }
+    print "
+      <td>$userlink</td>
+      <td class='check ouw_rightcol'><label for='v{$change->versionid}' class=\"accesshide\"> $selectaccessibility </label>
+      <input type='checkbox' name='v{$change->versionid}' id='v{$change->versionid}' onclick='ouw_check()' /></td>";
+    print '</tr>';
+    $changeindex++;
+}
+
+print "</tbody></table>";
+$input = '<input id="ouw_comparebutton" type="submit" value="' .
+        get_string('compareselected', 'ouwiki') . '" class="osep-smallbutton" />';
+echo html_writer::div($input, 'ouw-comparebutton-wrapper');
+print "</form>";
+
+// The page works without JS. If you do have it, though, this script ensures
+// you can't click compare without having two versions selected.
+print '
+<script type="text/javascript">
+var comparebutton=document.getElementById("ouw_comparebutton");
+comparebutton.disabled=true;
+
+function ouw_check() {
+    var elements=document.forms["ouw_history"].elements;
+    var checked=0;
+    for(var i=0;i<elements.length;i++) {
+        if(/^v[0-9]+/.test(elements[i].name) && elements[i].checked) {
+            checked++;
+        }
+    }
+    comparebutton.disabled=checked!=2;
+}
+
+</script>
+';
+
+echo $ouwikioutput->ouwiki_get_feeds($atomurl, $rssurl);
+
+$pageversion = ouwiki_get_current_page($subwiki, $pagename);
+echo $ouwikioutput->get_bottom_buttons($subwiki, $cm, $context, $pageversion, false);
+
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
diff --git a/mod/ouwiki/import.php b/mod/ouwiki/import.php
new file mode 100644
index 0000000..4a8eb8c
--- /dev/null
+++ b/mod/ouwiki/import.php
@@ -0,0 +1,722 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Import page content from other ouwiki activities into this wiki.
+ * @package mod
+ * @subpackage ouwiki
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot . '/mod/ouwiki/basicpage.php');
+require($CFG->dirroot . '/mod/ouwiki/import_form.php');
+
+$pageparams = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_ARRAY);
+
+/* Define/work out the step of the import process we are on.
+ Step 1  - Select wiki (+sub wiki)
+Step 2 - Select pages
+Step 3 - Confirm
+Step 4 - Process import
+*/
+$curstep = optional_param('step', 1, PARAM_INT);
+if (optional_param('cancel', '', PARAM_TEXT) == get_string('cancel')) {
+    // Cancelled last step, go back one.
+    $curstep -= 2;
+}
+$pageparams['step'] = $curstep;
+
+$url = new moodle_url('/mod/ouwiki/import.php', array('id' => $id, 'page' => $pagename));
+$PAGE->set_url($url);
+
+$PAGE->set_cm($cm);
+$PAGE->set_pagelayout('incourse');
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, get_string('import', 'ouwiki'), $context);
+
+echo $OUTPUT->heading(get_string('import', 'ouwiki'));
+
+if ((!$subwiki->canedit) || (!$ouwiki->allowimport)) {
+    print_error('You are not able to add content to this wiki.');
+}
+
+// Get course id of wiki that is being imported from. Only used in steps 2,3 and 4.
+$importedfromcourse = $course;
+$courseid = optional_param('courseid', 0, PARAM_INT);
+if ($courseid) {
+    $importedfromcourse = get_course($courseid);
+}
+
+echo '<div class="ouwiki_import ouwiki_import_step' . $curstep . '" id="ouwiki_belowtabs">';
+
+if ($curstep == 1) {
+    $courses = enrol_get_users_courses($USER->id, true);
+    $pageparams['step']++;
+    $wikisfound = false;
+    foreach ($courses as $listcourse) {
+        // Select wiki from course step, first get wikis.
+        $modinfo = get_fast_modinfo($listcourse);
+        $allwikis = $modinfo->get_instances_of('ouwiki');
+        unset($allwikis[$ouwiki->id]);// Don't include current activity.
+        $availablewikis = array();
+        foreach ($allwikis as $wikiact) {
+            $wikicontext = context_module::instance($wikiact->id);
+            // Check wiki is available.
+            if (!$wikiact->uservisible ||
+                    !has_capability('mod/ouwiki:view', $wikicontext)) {
+                continue;
+            }
+            // Create object for this wiki that we will use if it is shown.
+            $wikiob = new stdClass();
+            $wikiob->cm = $wikiact;
+            $wikiob->selector = array();
+            $wikiob->selectordefault = 0;
+            $wikiob->nocontent = false;
+
+            // For each wiki type do further access checks and get more info.
+            $wikiinst = $DB->get_record('ouwiki', array('id' => $wikiact->instance));
+            if (!$wikiinst) {
+                continue;
+            }
+            if ($wikiinst->subwikis == OUWIKI_SUBWIKIS_SINGLE) {
+                // Course wiki, check subwiki and start page exists.
+                if (!$wikisubwiki = $DB->get_record_select('ouwiki_subwikis', 'wikiid = ? AND
+                        groupid IS NULL AND userid IS NULL', array($wikiinst->id), 'id')) {
+                    $wikiob->nocontent = true;
+                } else if (!ouwiki_subwiki_content_exists($wikisubwiki->id)) {
+                    $wikiob->nocontent = true;
+                } else {
+                    $wikiob->selectordefault = $wikisubwiki->id;
+                }
+            } else if ($wikiinst->subwikis == OUWIKI_SUBWIKIS_GROUPS) {
+                // Group wiki. Get all groups user can see (checking they have content to import).
+                if (!$groups = groups_get_activity_allowed_groups($wikiact)) {
+                    continue;
+                }
+                $default = groups_get_activity_group($wikiact);
+                foreach ($groups as $group) {
+                    // Check group subwiki has content before adding it.
+                    if ($wikisubwiki = $DB->get_record_select('ouwiki_subwikis', 'wikiid = ?
+                            AND groupid = ? AND userid IS NULL', array($wikiinst->id, $group->id), 'id')) {
+                        if (ouwiki_subwiki_content_exists($wikisubwiki->id)) {
+                            $wikiob->selector[$wikisubwiki->id] = format_string($group->name);
+                            if ($group->id == $default) {
+                                $wikiob->selectordefault = $wikisubwiki->id;
+                            }
+                        }
+                    }
+                }
+                // If no groups have content disable wiki selector.
+                if (empty($wikiob->selector)) {
+                    $wikiob->nocontent = true;
+                }
+            } else if ($wikiinst->subwikis == OUWIKI_SUBWIKIS_INDIVIDUAL) {
+                // Individual wiki. Get all users user can view (checking subwiki for content).
+                $userfields = user_picture::fields('u', null, 'uid');
+                $sql = "SELECT sw.id, $userfields
+                        FROM {ouwiki_subwikis} sw
+                        INNER JOIN {user} u ON sw.userid = u.id
+                        INNER JOIN (SELECT subwikiid
+                            FROM {ouwiki_pages}
+                            WHERE currentversionid IS NOT NULL
+                            GROUP BY subwikiid) as wp on wp.subwikiid = sw.id
+                        WHERE sw.wikiid = ?";
+                $params = array($wikiinst->id);
+                if (!has_capability('mod/ouwiki:viewallindividuals', $wikicontext)) {
+                    if (!has_capability('mod/ouwiki:viewgroupindividuals', $wikicontext)) {
+                        // Can only see own wiki (if exists).
+                        $sql .= ' AND sw.userid = ?';
+                        $params[] = $USER->id;
+                    } else {
+                        // Can see any users that are in the same group(s).
+                        if ($theirgroups = groups_get_all_groups($wikiact->course, $USER->id,
+                                $wikiact->groupingid, 'g.id')) {
+                            $groupmembers = array();
+                            foreach ($theirgroups as $group) {
+                                if ($members = groups_get_members($group->id, 'u.id')) {
+                                    $groupmembers = array_merge($groupmembers, array_keys($members));
+                                }
+                            }
+                            if (!empty($groupmembers)) {
+                                list($insql, $inparams) = $DB->get_in_or_equal($groupmembers);
+                                $sql .= 'AND sw.userid ' . $insql;
+                                $params = array_merge($params, $inparams);
+                            }
+                        }
+                    }
+                }
+                $sql .= ' ORDER BY u.lastname, u.firstname';
+
+                if (!$choices = $DB->get_records_sql($sql, $params)) {
+                    $wikiob->nocontent = true;
+                }
+
+                foreach ($choices as $wikisubwiki) {
+                    $wikiob->selector[$wikisubwiki->id] = fullname($wikisubwiki);
+                    if ($wikisubwiki->uid == $USER->id) {
+                        $wikiob->selectordefault = $wikisubwiki->id;
+                    }
+                }
+            }
+            // Add wiki info to list of available wiki activities.
+            $availablewikis[] = $wikiob;
+        }
+        $courserenderer = $PAGE->get_renderer('course');
+        // Create selection forms for available wikis.
+        $pageparams['courseid'] = $listcourse->id;
+        $i = 0;
+        foreach ($availablewikis as $showwiki) {
+            if ($i == 0) {
+                $coursename = $listcourse->shortname . ' ' . $listcourse->fullname;
+                echo html_writer::div($coursename);
+            }
+            $i++;
+
+            echo html_writer::start_div('ouwiki_import_act');
+            $customdata = array('wikiinfo' => $showwiki, 'params' => $pageparams,
+                    'actlink' => $courserenderer->course_section_cm_name($showwiki->cm));
+            $form = new mod_ouwiki_import_wikiselect_form(null, $customdata);
+            $form->display();
+            echo html_writer::end_div();
+            $wikisfound = true;
+        }
+    }
+
+    if (!$wikisfound) {
+        // If courses are empty print a warning message.
+        echo $OUTPUT->notification(get_string('unabletoimport', 'ouwiki'));
+        unset($pageparams['step']);
+        echo $OUTPUT->continue_button(new moodle_url('/mod/ouwiki/view.php', $pageparams));
+    }
+} else if ($curstep == 2) {
+    // Select pages, first ensure step 1 data correct.
+    require_sesskey();
+    if ($pagelist = optional_param('pages', null, PARAM_SEQUENCE)) {
+        // Full page list available e.g. from cancel.
+        $pagelist = explode(',', $pagelist);
+    }
+
+    $selectedact = required_param('importid', PARAM_INT);
+    $selectedsubwiki = required_param('subwikiid' . $selectedact, PARAM_INT);
+    $selectedouwiki = '';
+
+    ouwiki_get_wikiinfo($selectedact, $selectedsubwiki, $selectedouwiki, $importedfromcourse);
+
+    echo html_writer::tag('p', get_string('import_selectwiki', 'ouwiki', $selectedact->get_formatted_name()));
+
+    // Build page selector.
+    $pages = '';
+    $index = ouwiki_get_subwiki_index($selectedsubwiki->id);
+    ouwiki_build_tree($index);
+    // Print out in hierarchical form...
+    $pages .= html_writer::start_tag('ul', array('class' => 'ouw_indextree'));
+    $pages .= ouwiki_tree_index('ouwiki_display_wikiindex_page_in_index', reset($index)->pageid,
+            $index, $selectedsubwiki, $selectedact, null, true);
+    $pages .= html_writer::end_tag('ul');
+    $orphans = '';
+    foreach ($index as $indexitem) {
+        if (count($indexitem->linksfrom) == 0 && $indexitem->title !== '') {
+            $orphanindex = ouwiki_get_sub_tree_from_index($indexitem->pageid, $index);
+            ouwiki_build_tree($orphanindex);
+            $orphans .= ouwiki_tree_index('ouwiki_display_wikiindex_page_in_index',
+                    $indexitem->pageid, $orphanindex, $selectedsubwiki, $selectedact, null, true);
+        }
+    }
+    if (!empty($orphans)) {
+        $pages .= $OUTPUT->heading(get_string('orphanpages', 'ouwiki'), 3);
+        $pages .= html_writer::start_tag('ul', array('class' => 'ouw_indextree'));
+        $pages .= $orphans;
+        $pages .= html_writer::end_tag('ul');
+    }
+    $PAGE->requires->yui_module('moodle-mod_ouwiki-pageselector', 'M.mod_ouwiki.pageselector.init', array($pagelist));
+    // Prepare form parameters.
+    $wikiinfo = array('importid' => $selectedact->id , 'subwikiid' => $selectedsubwiki->id);
+    $pageparams['step']++;
+    $pageparams['courseid'] = $importedfromcourse->id;
+    $form = new mod_ouwiki_import_pageselect_form(null, array('params' => array_merge($pageparams,
+            $wikiinfo), 'pages' => $pages));
+    $form->display();
+} else if ($curstep == 3) {
+    // Confirmation - check OK to proceed and look for merge conflicts, locks etc.
+    require_sesskey();
+    $selectedact = required_param('importid', PARAM_INT);
+    $selectedsubwiki = required_param('subwikiid', PARAM_INT);
+    $selectedouwiki = '';
+
+    ouwiki_get_wikiinfo($selectedact, $selectedsubwiki, $selectedouwiki, $importedfromcourse);
+
+    // Build up index, get selected pages - making sure sub pages are included.
+    $index = ouwiki_get_subwiki_index($selectedsubwiki->id);
+    ouwiki_build_tree($index);
+    $pagelist = array();// Our list of page ids to import.
+    if ($pages = optional_param('pages', null, PARAM_SEQUENCE)) {
+        // Full page list available e.g. from cancel.
+        $pagelist = explode(',', $pages);
+    } else {
+        // Find pages sent from step 1, get any linked pages also.
+        foreach ($_POST as $key => $value) {
+            if (strpos($key, 'page') === 0) {
+                // Add in page and recursive add of links.
+                ouwiki_add_linkedpages($pagelist, $index, $value);
+            }
+        }
+        $pagelist = array_unique($pagelist);
+    }
+    echo $OUTPUT->heading(get_string('import_confirm', 'ouwiki'), 3);
+    // Setup confirm form.
+    $confirmdata = array(
+            'importfrom' => $selectedact->get_formatted_name(),
+            'pages' => array(), // Array of page names.
+            'conflicts' => array(), // Array of conflicting pages and if locked.
+            'lockedpage' => false, // If any pages were locked (stops import).
+            'startselected' => false, // Was start page included?
+            'startlocked' => false, // Check start page not locked.
+            'wikipages' => array() // Current wiki pages and locked status.
+            );
+    foreach ($pagelist as $page) {
+        $ipagename = $index[$page]->title;
+        if ($ipagename == '') {
+            $confirmdata['startselected'] = true;
+            array_unshift($confirmdata['pages'], get_string('startpage', 'ouwiki'));
+        } else {
+            $confirmdata['pages'][] = $ipagename;
+        }
+        // Check if this page already exists, and is locked.
+        if ($pageexists = ouwiki_get_current_page($subwiki, $ipagename, OUWIKI_GETPAGE_ACCEPTNOVERSION)) {
+            $locked = false;
+            if ($pageexists->locked || (ouwiki_is_page_locked($pageexists->pageid) &&
+                    !has_capability('mod/ouwiki:overridelock', $context))) {
+                $locked = true;
+                if ($ipagename != '') {
+                    $confirmdata['lockedpage'] = true;
+                }
+            }
+            if ($ipagename == '') {
+                $confirmdata['startlocked'] = $locked;
+            } else {
+                $confirmdata['conflicts'][$ipagename] = $locked;
+            }
+        }
+    }
+    if (!$confirmdata['startselected'] && !empty($pagelist)) {
+        // We didn't select start page, so need to choose a page to use as base for links.
+        $confirmdata['wikipages']['-1'] = get_string('import_confirm_linkfrom_newpage', 'ouwiki');
+        $thisindex = ouwiki_get_subwiki_allpages_index($subwiki);
+        foreach ($thisindex as $thispage) {
+            if ($thispage->title == '') {
+                $thispage->title = get_string('startpage', 'ouwiki');
+            }
+            if ($thispage->locked) {
+                // Prevent selection by adding a note that page is locked.
+                $confirmdata['wikipages'][$thispage->pageid] = $thispage->title .
+                '[' . get_string('import_lockedpage', 'ouwiki') . ']';
+            } else {
+                $confirmdata['wikipages'][$thispage->pageid] = $thispage->title;
+            }
+        }
+        if (empty($thisindex)) {
+            // No pages at all - add start page manually with id of 0.
+            $confirmdata['wikipages'][0] = get_string('startpage', 'ouwiki');
+        }
+    }
+    $wikiinfo = array('importid' => $selectedact->id , 'subwikiid' => $selectedsubwiki->id,
+            'subwikiid' . $selectedact->id => $selectedsubwiki->id, 'pages' => implode(',', $pagelist));
+    $pageparams['step']++;
+    $pageparams['courseid'] = $importedfromcourse->id;
+    $form = new mod_ouwiki_import_confirm_form(null, array('params' => array_merge($pageparams, $wikiinfo),
+            'confirmdata' => $confirmdata));
+    $form->display();
+} else if ($curstep == 4) {
+    // Processing step.
+    require_sesskey();
+    $selectedact = required_param('importid', PARAM_INT);
+    $selectedsubwiki = required_param('subwikiid', PARAM_INT);
+    $selectedouwiki = '';
+
+    ouwiki_get_wikiinfo($selectedact, $selectedsubwiki, $selectedouwiki, $importedfromcourse);
+
+    $pagelist = explode(',', required_param('pages', PARAM_SEQUENCE));// Page ids to import.
+    $conflictmerge = optional_param('conflictmerge', 0, PARAM_INT);// Page conflict setting.
+    $startpagemerge = optional_param('startpagemerge', 0, PARAM_INT);// SP conflict setting.
+    $linkfrom = optional_param('linkfrom', null, PARAM_INT);// Add links to (if SP not included).
+
+    // Build up index of orig wiki, get selected pages - making sure sub pages are included.
+    $index = ouwiki_get_subwiki_allpages_index($selectedsubwiki);
+    $conflicts = array();// All conflicting pages in $pagelist [id] => title.
+    $warned = false;// Set to true if user warned of problems.
+    $startpagelocked = false; // Start page locked.
+    $pagelocked = false;      // Page you are trying to import into is locked.
+    $startpageid = null;
+
+    echo $OUTPUT->heading(get_string('import_process', 'ouwiki'), 3);
+    try {
+        // Throw moodle_exception when any problems to display continue/cancel form.
+
+        $checkpagelist = array();
+        if ($linkfrom > 0) {
+            // Selected page to link to, so needs conflict checking.
+            $checkpagelist[] = $linkfrom;
+        } else if ($pageexists = ouwiki_get_current_page($subwiki, '', OUWIKI_GETPAGE_CREATE)) {
+            // Check to see whether start page exists and is locked.
+            $startpagelocked = $pageexists->locked;
+            $startpageid = $pageexists->pageid;
+            $checkpagelist[] = $startpageid;
+        }
+
+        if ($startpagemerge == 1) {
+            if ($currentpageexists = ouwiki_get_current_page($subwiki, get_string('importedstartpage', 'ouwiki'),
+                    OUWIKI_GETPAGE_ACCEPTNOVERSION)) {
+                $checkpagelist[] = $currentpageexists->pageid;
+            }
+        }
+        if ($linkfrom == -1) {
+            if ($currentpageexists = ouwiki_get_current_page($subwiki, get_string('importedpages', 'ouwiki'),
+                        OUWIKI_GETPAGE_ACCEPTNOVERSION)) {
+                $checkpagelist[] = $currentpageexists->pageid;
+            }
+        }
+
+        // Obtain lock for any conflicting pages (inc start page).
+        $checkpagelist = array_merge($pagelist, $checkpagelist);
+        foreach ($checkpagelist as $page) {
+            if (!isset($index[$page])) {
+                $ipagename = $DB->get_field('ouwiki_pages', 'title', array('id' => $page), MUST_EXIST);
+            } else {
+                $ipagename = $index[$page]->title;
+            }
+            if ($ipagename == '' && $startpagemerge == 1) {
+                // If start page exists then set imported start page in conflicts array.
+                if (ouwiki_get_current_page($subwiki, $ipagename, OUWIKI_GETPAGE_ACCEPTNOVERSION)) {
+                    $conflicts[$page] = $ipagename;
+                }
+                // Doesn't matter if start page is locked - when adding links check and skip if is.
+                continue;
+            }
+
+            // Check if this page already exists, and is locked.
+            if ($currentpageexists = ouwiki_get_current_page($subwiki, $ipagename, OUWIKI_GETPAGE_ACCEPTNOVERSION)) {
+                $conflicts[$page] = $ipagename;
+                if (has_capability('mod/ouwiki:overridelock', $context)) {
+                    ouwiki_override_lock($currentpageexists->pageid);
+                }
+                list ($lock, $by) = ouwiki_obtain_lock($ouwiki, $currentpageexists->pageid);
+                if ($currentpageexists->locked) {
+                    $lock = false;// No one can edit.
+                }
+                if (!$lock) {
+                    throw new moodle_exception('import_process_locked', 'ouwiki');
+                }
+            }
+        }
+        $newpagelist = array();// Use to store names of new pages imported.
+        $updatepagelist = array();
+        $importedindex = array();
+        $updatedindex = array();
+
+        $pbar = new progress_bar('mod_ouwiki_import', 500, true);
+        for ($len = count($pagelist), $a = 0; $a < $len; $a++) {
+            $page = $pagelist[$a];
+            if (!isset($index[$page])) {
+                // For some reason our page is not in the list in index - stop.
+                throw new moodle_exception('Error. Page to import missing.');
+            }
+            $pageinfo = $index[$page];
+            if (in_array($page, array_keys($conflicts))) {
+                // This page has been identified as one that already exists.
+                if ($startpagelocked) {
+                    $warned = true;
+                }
+
+                if ($pageinfo->title == '' && $startpagemerge == 1) {
+                    // Create a new 'Imported start page' with imported start page content.
+                    $importedstartpage = get_string('importedstartpage', 'ouwiki');
+                    $newpage = true;
+                    // See whether an 'Imported start page' already exists in the target wiki.
+                    if ($importedstartpageexists = ouwiki_get_current_page($subwiki, $importedstartpage, OUWIKI_GETPAGE_CREATE)) {
+                         // Check if 'Imported start page' (lang string needed) exists or is locked (skip and warn).
+                        if ($importedstartpageexists->locked) {
+                            $warned = true;
+                            $pagelocked = true;
+                        }
+                        // Get imported page content.
+                        $importedcontent = $pageinfo->xhtml;
+                        // Get existing page content.
+                        $currentpagecontent = $importedstartpageexists->xhtml;
+                        // Add imported page content to existing page content.
+                        $importedstartpageexists->xhtml = $currentpagecontent . $importedcontent;
+
+                        // Save new version of existing page.
+                        $versionid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $importedstartpageexists->title,
+                                $importedstartpageexists->xhtml, -1, -1,  -1, null, null, null,
+                                $pageinfo->versionid);
+
+                        // Add page names to $newpagelist|$updatepagelist array as appropriate.
+                        if (empty($currentpagecontent)) {
+                            // Link imported start page to start page.
+                            $newpagelist[] = $importedstartpage;
+                            $importedstartpageexists->linkfrom = $startpageid;
+                            $importedindex[$importedstartpageexists->pageid] = $importedstartpageexists;
+                            $linkfrom = $startpageid;
+                        } else {
+                            $updatepagelist[] = $importedstartpage;
+                        }
+                        $updatepagelist[] = get_string('startpage', 'ouwiki');
+                    }
+                } else {
+                    // Either merge or replace existing page content.
+                    if ($conflictmerge == 0 || ($pageinfo->title == '' && $startpagemerge == 0)) {
+                        // Append import page content to existing content.
+                        if (!$currentpageexists = ouwiki_get_current_page($subwiki, $pageinfo->title,
+                                OUWIKI_GETPAGE_REQUIREVERSION)) {
+                            // We got the page above, but not now?
+                            throw new moodle_exception('Error. Page to import into missing.');
+                        }
+                        // Append existing content with imported content.
+                        // Get imported page content.
+                        $importedcontent = $pageinfo->xhtml;
+                        // Get existing page content.
+                        $currentpagecontent = $currentpageexists->xhtml;
+                        // Merge/Add imported page content to existing page content.
+                        $currentpagecontent = $currentpagecontent . $importedcontent;
+                        // Save new version of existing page.
+                        $versionid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $currentpageexists->title,
+                                $currentpagecontent, -1, -1,  -1, null, null, null,  $pageinfo->versionid);
+                        $updatedindex[$pageinfo->pageid] = $pageinfo;
+                    } else {
+                        // Override existing content with imported content.
+                        // Get imported page content.
+                        $importedcontent = $pageinfo->xhtml;
+                        // Replace existing page content with imported page content.
+                        // Save new version of existing page.
+                        $versionid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pageinfo->title, $importedcontent,
+                                -1, -1,  -1, null, null, null,  $pageinfo->versionid);
+                        $updatedindex[$pageinfo->pageid] = $pageinfo;
+                    }
+                    $updatepagelist[] = $pageinfo->title;
+                }
+            } else {
+                // New page.
+                // Add new page using $pageinfo->xhtml as content.
+                $newpagelist[] = $pageinfo->title;
+                $pageversion = ouwiki_get_current_page($subwiki, $pageinfo->title, OUWIKI_GETPAGE_CREATE);
+                $versionid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pageinfo->title, $pageinfo->xhtml,
+                        -1, -1,  -1, null, null, null,  $pageinfo->versionid);
+                $importedindex[$pageinfo->pageid] = $pageinfo;
+            }
+
+            // Add any attachments and image files to the page.
+            // Information needed for files and attachments.
+            $fs = get_file_storage();
+            $modcontext = context_module::instance($selectedact->id);
+            $prevversion = $pageinfo->versionid;
+            // Add any files.
+            if ($oldfiles = $fs->get_area_files($modcontext->id, 'mod_ouwiki', 'content', $prevversion)) {
+                foreach ($oldfiles as $oldfile) {
+                    // Copy this file to the version record.
+                    try {
+                        $fs->create_file_from_storedfile(array(
+                                'contextid' => $context->id,
+                                'filearea' => 'content',
+                                'itemid' => $versionid), $oldfile);
+                    } catch (stored_file_creation_exception $e) {
+                        continue;
+                    }
+                }
+            }
+            // Add any attachments.
+            if ($oldfiles = $fs->get_area_files($modcontext->id, 'mod_ouwiki', 'attachment', $prevversion)) {
+                foreach ($oldfiles as $oldfile) {
+                    try {
+                        // Copy this file to the version record.
+                        $fs->create_file_from_storedfile(array(
+                                'contextid' => $context->id,
+                                'filearea' => 'attachment',
+                                'itemid' => $versionid), $oldfile);
+                    } catch (stored_file_creation_exception $e) {
+                        continue;
+                    }
+                }
+            }
+
+            $pbar->update($a + 1, count($pagelist), get_string('import_process', 'ouwiki'));
+
+            // We have a problem with new page - need to check linkfrom value.
+            if ($linkfrom == -1) {
+                $importedindex[$pageinfo->pageid] = $pageinfo;
+            }
+        }
+
+        if (!is_null($linkfrom)) {
+            $mergexhtml = '';
+            // Merge imported index and updated index.
+            $pageindexes = $importedindex + $updatedindex;
+            // Work out top level of the updated/imported pages ready to add links to these.
+            foreach ($pageindexes as $page) {
+                if ( (!isset($page->linksfrom)) || empty($page->linksfrom)) {
+                    $page->linksfrom = array();
+                    $page->linksfrom[0] = 0;     // Nullifies for test below.
+                }
+                // Create the links xhtml.
+                if (!in_array($page->linksfrom[0], $pagelist)) {
+                    // Assume that we have a top level page.
+                    $page->linksfrom = array();
+                    $mergexhtml .= '<p>[[' .$page->title. ']]</p>';
+                }
+            }
+
+            if ($linkfrom == 0) {
+                // Add links to non-existing start page.
+                // Create start page with links.
+                $updatepagelist[] = get_string('startpage', 'ouwiki');
+                $pageversion = ouwiki_get_current_page($subwiki, null, OUWIKI_GETPAGE_CREATE);
+                //  Add links into selected page content.
+                $versionid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, '', $mergexhtml);
+            } else if ($linkfrom == -1) {
+                // Check start page not locked (skip and warn) and add link to 'Imported pages'.
+                // Check to see whether start page is locked.
+                if ($startpagelocked) {
+                    $warned = true;
+                }
+                // Create a new 'Imported pages' page with the links on.
+                $importedpages = get_string('importedpages', 'ouwiki');
+                // Create/update(merge) 'Imported pages'.
+                $linkfrompage = ouwiki_get_current_page($subwiki, $importedpages, OUWIKI_GETPAGE_CREATE);
+                $linkfrompageid = $linkfrompage->pageid;
+                $newpage = false;
+                if (empty($linkfrompage->xhtml)) {
+                    // New page.
+                    $newpage = true;
+                } else if ($linkfrompage->locked) {
+                    // Check for 'Imported pages' not locked(skip and warn).
+                    $warned = true;
+                    $pagelocked = true;
+                }
+                // Merge links xhtml into import into page xhtml content.
+                $linkfrompage->xhtml = $linkfrompage->xhtml . $mergexhtml;
+                $linkfrompage->linkfrom = $pageinfo->pageid;
+                // Place in new page creation.
+                $versionid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $linkfrompage->title, $linkfrompage->xhtml);
+                // Add page names to $newpagelist|$updatepagelist array as appropriate.
+                if ($newpage) {
+                    $newpagelist[] = $importedpages;
+                    // Update 'Start page'.
+                    $title = '';
+                    $xhtmlcontent = '';
+                    if ($pageexists) {
+                        $xhtmlcontent = $pageexists->xhtml . '<p>[[' .$linkfrompage->title. ']]</p>';
+                        $title = $pageexists->title;
+                    } else {
+                        $xhtmlcontent = $xhtmlcontent . '<p>[[' .$linkfrompage->title. ']]</p>';
+                    }
+                    ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $title, $xhtmlcontent);
+                } else {
+                    $updatepagelist[] = $importedpages;
+                }
+                // Set linkfrom to 'Imported pages'.
+                $linkfrom = $importedpages;
+                $updatepagelist[] = get_string('startpage', 'ouwiki');
+            } else {
+                // Add links into selected page.
+                if (!$pageinfo = $DB->get_record('ouwiki_pages', array('id' => $linkfrom))) {
+                    throw new moodle_exception('Error. Page to import into missing.');
+                }
+                // Store page name so we can go there.
+                $linkfrom = $pageinfo->title;
+                // Add links into selected page content.
+                $linkfrompage = ouwiki_get_current_page($subwiki, $pageinfo->title, OUWIKI_GETPAGE_CREATE);
+                $linkfrompageid = $linkfrompage->pageid;
+                // Merge links xhtml into import into page xhtml content.
+                $linkfrompage->xhtml = $linkfrompage->xhtml . $mergexhtml;
+                $versionid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $linkfrompage->title, $linkfrompage->xhtml);
+                if ($pageinfo->title == '') {
+                    // Start page.
+                    $updatepagelist[] = get_string('startpage', 'ouwiki');
+                } else {
+                    $updatepagelist[] = $pageinfo->title;
+                }
+            }
+        }
+        // Provide summary output.
+        echo $OUTPUT->heading(get_string('import_process_summary', 'ouwiki'), 3);
+        echo html_writer::tag('p', $warned ? get_string('import_process_summary_warn', 'ouwiki') :
+                get_string('import_process_summary_success', 'ouwiki'));
+        if ($startpagelocked) {
+            // Start page locked.
+            echo html_writer::div(get_string('import_process_startpage_locked', 'ouwiki'));
+        }
+        if ($pagelocked) {
+            // Page imported into locked.
+            echo html_writer::div(get_string('import_process_locked', 'ouwiki'));
+        }
+
+        // Show pages imported.
+        echo html_writer::start_div();
+        echo get_string('import_process_summary_imported', 'ouwiki');
+        echo html_writer::alist(array_unique($newpagelist));
+        echo html_writer::end_div();
+        if (!empty($updatepagelist)) {
+            // Show pages updated.
+            echo html_writer::start_div();
+            echo get_string('import_process_summary_updated', 'ouwiki');
+            echo html_writer::alist(array_unique($updatepagelist));
+            echo html_writer::end_div();
+        }
+        // Continue button to page where links were added.
+        if (is_null($linkfrom) || (is_numeric($linkfrom) && ($linkfrom < 1)) || $linkfrom == '') {
+            unset($pageparams['page']);// Set to start page.
+        } else {
+            $pageparams['page'] = $linkfrom;
+        }
+        unset($pageparams['step']);
+        echo $OUTPUT->continue_button(new moodle_url('/mod/ouwiki/view.php', $pageparams));
+    } catch (moodle_exception $e) {
+        // Display continue/cancel form.
+        $wikiinfo = array('importid' => $selectedact->id , 'subwikiid' => $selectedsubwiki->id,
+                'pages' => implode(',', $pagelist), 'conflictmerge' => $conflictmerge,
+                'startpagemerge' => $startpagemerge, 'linkfrom' => $linkfrom,
+                'sesskey' => sesskey());
+        $continue = new moodle_url('/mod/ouwiki/import.php', array_merge($pageparams, $wikiinfo));
+        $pageparams['step']++;
+        $pageparams['cancel'] = get_string('cancel');
+        $cancel = new moodle_url('/mod/ouwiki/import.php', array_merge($pageparams, $wikiinfo));
+        echo $OUTPUT->confirm($e->getMessage(), $cancel, new moodle_url('/mod/ouwiki/view.php', $pageparams));
+        ouwiki_print_footer($course, $cm, $subwiki, $pagename);
+        exit;
+    }
+}
+
+// Footer.
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
+
+/**
+ * Recursive function to put all pages from page id value into pagelist
+ * @param array $pagelist
+ * @param array $index subwiki index tree
+ * @param int $value page id
+ */
+function ouwiki_add_linkedpages(&$pagelist, &$index, $value) {
+    if (!in_array($value, $pagelist) && in_array($value, array_keys($index))) {
+        $pagelist[] = $value;
+        $newpages = array_unique($index[$value]->linksto);
+        foreach ($newpages as $newvalue) {
+            ouwiki_add_linkedpages($pagelist, $index, $newvalue);
+        }
+    }
+}
diff --git a/mod/ouwiki/import_form.php b/mod/ouwiki/import_form.php
new file mode 100644
index 0000000..58084840
--- /dev/null
+++ b/mod/ouwiki/import_form.php
@@ -0,0 +1,223 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Forms used in import process.
+ * @package mod
+ * @subpackage ouwiki
+ * @copyright 2013 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once($CFG->libdir.'/formslib.php');
+
+class mod_ouwiki_import_wikiselect_form extends moodleform {
+    protected function definition() {
+        global $CFG;
+
+        $mform =& $this->_form;
+        $params = $this->_customdata['params'];
+        $wikiinfo = $this->_customdata['wikiinfo'];
+
+        if (!empty($this->_customdata['actlink'])) {
+            $actlink = '<div class="ouwiki_import_link">' . $this->_customdata['actlink'] .
+                '</div>';
+            $mform->addElement('html', $actlink);
+        }
+
+        if ($wikiinfo->nocontent) {
+            $warn = '<div class="ouwiki_import_nocontent">' .
+                    get_string('import_nocontent', 'ouwiki') . '</div>';
+            $mform->addElement('html', $warn);
+            return;
+        }
+
+        if (!empty($wikiinfo->selector) && count($wikiinfo->selector) == 1) {
+            // When there is only one choice force selection by setting as default.
+            $keys = array_keys($wikiinfo->selector);
+            $wikiinfo->selectordefault = array_shift($keys);
+            $wikiinfo->selector = array();
+        }
+
+        if (!empty($wikiinfo->selector)) {
+            // Subwiki selector must have unique id on page, so add cm id.
+            $mform->addElement('select', 'subwikiid' . $wikiinfo->cm->id,
+                    get_string('import_selectsubwiki', 'ouwiki'), $wikiinfo->selector);
+            $mform->addHelpButton('subwikiid' . $wikiinfo->cm->id, 'import_selectsubwiki', 'ouwiki');
+            $mform->setDefault('subwikiid' . $wikiinfo->cm->id, $wikiinfo->selectordefault);
+        } else {
+            // No subwikis to choose from, default should be used to set required.
+            $mform->addElement('hidden', 'subwikiid' . $wikiinfo->cm->id, $wikiinfo->selectordefault);
+            $mform->setType('subwikiid' . $wikiinfo->cm->id, PARAM_INT);
+        }
+
+        foreach ($params as $paramkey => $paramvalue) {
+            $mform->addElement('hidden', $paramkey, $paramvalue);
+            $mform->setType($paramkey, PARAM_INT);
+        }
+
+        $mform->addElement('hidden', 'importid', $wikiinfo->cm->id);
+        $mform->setType('importid', PARAM_INT);
+
+        $this->add_action_buttons(false, get_string('import_selectwiki', 'ouwiki',
+                $wikiinfo->cm->name));
+
+    }
+
+    protected function get_form_identifier() {
+        // Override form name to ensure unique.
+        return parent::get_form_identifier() . '_' . $this->_customdata['wikiinfo']->cm->id;
+    }
+
+    public function add_action_buttons($cancel = true, $submitlabel=null) {
+        // Override submit to ensure name unique.
+        $mform =& $this->_form;
+        $mform->addElement('submit', 'submitbutton' . '_' . $this->_customdata['wikiinfo']->cm->id, $submitlabel);
+        $mform->closeHeaderBefore('submitbutton' . '_' . $this->_customdata['wikiinfo']->cm->id);
+    }
+}
+
+class mod_ouwiki_import_pageselect_form extends moodleform {
+    protected function definition() {
+        global $CFG;
+
+        $mform =& $this->_form;
+        $params = $this->_customdata['params'];
+        $pages = $this->_customdata['pages'];
+
+        $mform->addElement('html', $pages);
+
+        foreach ($params as $paramkey => $paramvalue) {
+            $mform->addElement('hidden', $paramkey, $paramvalue);
+            $mform->setType($paramkey, PARAM_INT);
+        }
+
+        $this->add_action_buttons(true, get_string('import', 'ouwiki'));
+    }
+}
+
+class mod_ouwiki_import_confirm_form extends moodleform {
+    protected function definition() {
+        global $CFG, $OUTPUT;
+
+        $mform =& $this->_form;
+        $params = $this->_customdata['params'];
+        $confirmdata = $this->_customdata['confirmdata'];
+
+        $mform->addElement('header', 'infohead', get_string('import_confirm_infoheader', 'ouwiki'));
+        $mform->setExpanded('infohead');
+
+        // Create confirm form layout.
+        $mform->addElement('static', 'importfrom', get_string('import_confirm_from', 'ouwiki'),
+                $confirmdata['importfrom']);
+
+        if (!empty($confirmdata['pages'])) {
+            $mform->addElement('static', 'importpages', get_string('import_confirm_pages', 'ouwiki'),
+                html_writer::alist($confirmdata['pages']));
+            $mform->addHelpButton('importpages', 'import_confirm_pages', 'ouwiki');
+        } else {
+            $mform->addElement('html', html_writer::tag('p',
+                    get_string('import_confirm_pages_none', 'ouwiki'),
+                        array('class' => 'ouwiki_import_warn')));
+        }
+
+        $conflicts = $confirmdata['conflicts'];
+        if (!empty($conflicts)) {
+            $mform->addElement('header', 'conflicthead', get_string('import_confirm_mergeheader', 'ouwiki'));
+            $mform->setExpanded('conflicthead');
+            $conflictlist = html_writer::start_tag('ul');
+            foreach ($conflicts as $pagename => $locked) {
+                if ($locked) {
+                    $img = $OUTPUT->pix_icon('i/invalid', get_string('import_confirm_conflicts_locked',
+                            'ouwiki', $pagename));
+                } else {
+                    $img = $OUTPUT->pix_icon('i/valid', get_string('import_confirm_conflicts_notlocked',
+                            'ouwiki'));
+                }
+                $pagelink = new moodle_url('/mod/ouwiki/view.php', array('id' => $params['id'], 'page' => $pagename));
+                $conflictlist .= html_writer::tag('li', html_writer::link($pagelink, $pagename) . ' ' . $img);
+            }
+            $conflictlist .= html_writer::end_tag('ul');
+            $mform->addElement('html', html_writer::tag('p',
+                    get_string('import_confirm_conflicts_instruct', 'ouwiki'), array('class' => 'ouwiki_import_info')));
+            $mform->addElement('static', 'conflictpages', get_string('import_confirm_conflicts', 'ouwiki'),
+                    $conflictlist);
+            if (!$confirmdata['lockedpage']) {
+                // Get merge strategy.
+                $radioarr = array();
+                $radioarr[] = $mform->createElement('radio', 'conflictmerge', '',
+                        get_string('import_confirm_conflicts_option1', 'ouwiki'), 0);
+                $radioarr[] = $mform->createElement('radio', 'conflictmerge', '',
+                        get_string('import_confirm_conflicts_option2', 'ouwiki'), 1);
+                $mform->addGroup($radioarr, 'conflictmergegrp',
+                        get_string('import_confirm_conflicts_label', 'ouwiki'), array('<br />'), false);
+            }
+        }
+
+        if ($confirmdata['lockedpage']) {
+            // If a page is locked show warning and then no other options and cancel only.
+            $mform->addElement('html', html_writer::tag('p',
+                    get_string('import_confirm_conflicts_lockedwarn', 'ouwiki'), array('class' => 'ouwiki_import_warn')));
+        } else {
+            $mform->addElement('header', 'linkhead', get_string('import_confirm_linkheader', 'ouwiki'));
+            $mform->setExpanded('linkhead');
+            // Where to add links to new pages? Start page or other...
+            if ($confirmdata['startselected']) {
+                // Start page is in page choice so links will be added here, get merge strategy.
+                $radioarr = array();
+                $disabled = $confirmdata['startlocked'] ? array('disabled' => 'disabled') : null;
+                $radioarr[] = $mform->createElement('radio', 'startpagemerge', '',
+                        get_string('import_confirm_linkfrom_startpage1', 'ouwiki'), 0, $disabled);
+                $radioarr[] = $mform->createElement('radio', 'startpagemerge', '',
+                        get_string('import_confirm_linkfrom_startpage2', 'ouwiki'), 1);
+                $mform->addGroup($radioarr, 'startpagemergegrp',
+                        get_string('import_confirm_linkfrom_startpage', 'ouwiki'), array('<br />'), false);
+                if ($confirmdata['startlocked']) {
+                    $mform->setDefault('startpagemerge', 1);
+                }
+            } else if (!empty($confirmdata['wikipages'])) {
+                // User must choose a page to add links to.
+                $select = $mform->createElement('select', 'linkfrom', get_string('import_confirm_linkfrom', 'ouwiki'));
+                foreach ($confirmdata['wikipages'] as $id => $name) {
+                    $disabled = strpos($name, get_string('import_lockedpage', 'ouwiki')) ?
+                        array('disabled' => 'disabled') : null;
+                    $select->addOption($name, $id, $disabled);
+                }
+                $mform->addElement($select);
+                $mform->addHelpButton('linkfrom', 'import_confirm_linkfrom', 'ouwiki');
+                $mform->addRule('linkfrom', get_string('required'), 'required');
+                // Set default to page we originally came from, or start page, or just leave at new page.
+                if (!empty($params['page']) && in_array($params['page'], $confirmdata['wikipages'])) {
+                    $mform->setDefault('linkfrom', array_search($params['page'], $confirmdata['wikipages']));
+                } else if (in_array(get_string('startpage', 'ouwiki'), $confirmdata['wikipages'])) {
+                    $mform->setDefault('linkfrom', array_search(get_string('startpage', 'ouwiki'), $confirmdata['wikipages']));
+                }
+            }
+        }
+
+        foreach ($params as $paramkey => $paramvalue) {
+            $mform->addElement('hidden', $paramkey, $paramvalue);
+            $mform->setType($paramkey, PARAM_INT);
+        }
+
+        if (!$confirmdata['lockedpage'] && !empty($confirmdata['pages'])) {
+            $this->add_action_buttons(true, get_string('import', 'ouwiki'));
+        } else {
+            // Something is not good for the import - allow cancel only.
+            $mform->addElement('cancel');
+        }
+    }
+}
diff --git a/mod/ouwiki/index.php b/mod/ouwiki/index.php
new file mode 100644
index 0000000..49815b7
--- /dev/null
+++ b/mod/ouwiki/index.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * List of wikis on course. (Not used in OU. I ripped it entirely off
+ * from another module, deleting module-specific bits.)
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot.'/mod/ouwiki/lib.php');
+
+// Support for OU shared activities system, if installed
+$grabindex = $CFG->dirroot.'/course/format/sharedactv/grabindex.php';
+if (file_exists($grabindex)) {
+    require_once($grabindex);
+}
+
+$id = required_param('id', PARAM_INT);   // course
+$url = new moodle_url('/mod/ouwiki/index.php', array('id' => $id));
+$PAGE->set_url($url);
+
+if (!$course = $DB->get_record('course', array('id' => $id))) {
+    print_error('invalidcourseid');
+}
+
+require_course_login($course->id, true);
+$PAGE->set_pagelayout('incourse');
+$context = context_course::instance($course->id);
+
+// Get all required strings.
+$strname = get_string('name');
+$strsectionname = get_string('sectionname', 'format_' . $course->format);
+$strdescription = get_string('description');
+$strsectionname = get_string('sectionname', 'format_' . $course->format);
+$strouwikis = get_string('modulenameplural', 'ouwiki');
+
+// Print the header.
+$PAGE->navbar->add($strouwikis, "index.php?id=$course->id");
+$PAGE->set_title($strouwikis);
+$PAGE->set_heading($course->fullname);
+echo $OUTPUT->header();
+
+if (!($ouwikis = get_all_instances_in_course('ouwiki', $course))) {
+    notice("There are no wikis", "../../course/view.php?id=$course->id");
+    die;
+}
+
+$usesections = course_format_uses_sections($course->format);
+if ($usesections) {
+    $sections = get_fast_modinfo($course)->get_section_info_all();
+}
+
+$table = new html_table();
+if ($usesections) {
+    $table->head = array($strsectionname, $strname, $strdescription);
+} else {
+    $table->head = array($strname, $strdescription);
+}
+
+foreach ($ouwikis as $ouwiki) {
+    // Calculate the href.
+    $linkcss = null;
+    if (!$ouwiki->visible) {
+        $linkcss = array('class' => 'dimmed');
+    }
+    $link = html_writer::link(new moodle_url('/mod/ouwiki/view.php', array('id' => $ouwiki->coursemodule)), $ouwiki->name, $linkcss);
+
+    // Properly format the intro.
+    $contextmodule = context_module::instance($ouwiki->coursemodule);
+    $ouwiki->intro = file_rewrite_pluginfile_urls($ouwiki->intro, 'pluginfile.php', $contextmodule->id,
+            'mod_ouwiki', 'intro', null);
+
+    if ($usesections) {
+        $table->data[] = array(get_section_name($course, $sections[$ouwiki->section]), $link, $ouwiki->intro);
+    } else {
+        $table->data[] = array($link, $ouwiki->intro);
+    }
+}
+
+echo html_writer::table($table);
+
+// Log usage view.
+$params = array(
+    'context' => $context,
+);
+
+$event = \mod_ouwiki\event\course_module_instance_list_viewed::create($params);
+$event->add_record_snapshot('course', $course);
+$event->trigger();
+
+// Finish the page.
+echo $OUTPUT->footer();
diff --git a/mod/ouwiki/internaldoc/participation.txt b/mod/ouwiki/internaldoc/participation.txt
new file mode 100644
index 0000000..7c0d8b2
--- /dev/null
+++ b/mod/ouwiki/internaldoc/participation.txt
@@ -0,0 +1,105 @@
+== OU Wiki Participation Feature ==
+
+=== Description ===
+
+Display user participation within wikis.
+
+Participation is defined as:
+
+* words added
+* words deleted
+* pages created
+* pages edited
+
+=== Capability Requirements ===
+
+A user will be considered as participating in a wiki if they have the '''mod/ouwiki:edit''' capability within
+the context of the current wiki instance and are not considered a teacher or adminstrator
+by standard Moodle legacy roles and capabilities.
+
+A user who has the capability '''mod/ouwiki:viewparticipation''' and has access to the current wiki
+can view all user participation, subject to the groupmode settings and their membershipt of those groups.
+(A user who has the capability '''moodle/site:accessallgroups''' will be able to see all groups regardless of
+personal membership).
+
+A user who only has the capability ''mod/ouwiki:edit'' and access to the current wiki will only be able to see
+their own participation.
+
+=== Participation Page Display ===
+
+The button displayed to the user to access the participation screens will disply accordingly.
+A user with access to all users participation will see a button labelled '''Participation by user'''
+whereas a user with access to only their participation will see '''My participation'''.  These appear
+next to the buttons for '''Wiki index''' and '''Wiki changes'''.
+
+The different buttons will take the user to two different screens respectively - one showing all participants
+and an overview of their participation and one only showing a single users participation but with more detali.
+
+If a user has access to all users they can also view detailed information per user via a '''Detail''' link which appears
+next to the users full name in the table.
+
+The participants to display is as follows:
+
+{| border="1" style="text-align: left;"
+!Groups
+!Is current group member
+!mod/ouwiki:viewparticipation
+!moodle/site:accessallgroups
+!Visible Participants:
+|-
+| None
+| -
+| Allow
+| -
+| ''All enrolled''
+|-
+| None
+| -
+| -
+| -
+| ''Own participation only''
+|-
+| Visible/Separate
+| No
+| Allow
+| Allow
+| ''All enrolled''
+|-
+| Visible/Separate
+| No
+| Allow
+| -
+| ''No participants''
+|-
+| Visible/Separate
+| Yes
+| Allow
+| -
+| ''Current group members''
+|-
+| Visible/Separate
+| Yes
+| -
+| -
+| ''Own participation only''
+|}
+
+=== Participation Calculations ===
+
+A users participation is calculated in terms of page creations and edits and word additions and deletions.
+
+Each saved page version is saved with the count of words contained in that version.  To calculate a single users
+word count participation each version corresponding to their ID is retrieved and word count values calculated against
+the previous stored version.
+
+Page edits are calculated where the user has saved a version of an existing page.
+
+Page creations are where the user saves a new page.
+
+=== Grading ===
+
+A user with the capability ''mod/ouwiki:grade'' in relation to the current wiki has the ability to add grade values.
+This can either be done as a bulk action on the '''Participation by user''' page or as a single update on the more detailed
+single user page.
+
+Grading will only be available if it has been set for the particular wiki instance in the '''OU wiki administration''' '''edit''' screen.
diff --git a/mod/ouwiki/internaldoc/testcase.import.txt b/mod/ouwiki/internaldoc/testcase.import.txt
new file mode 100644
index 0000000..5c45aea
--- /dev/null
+++ b/mod/ouwiki/internaldoc/testcase.import.txt
@@ -0,0 +1,274 @@
+﻿This script describes steps to test the use of the import pages facility to add pages from one wiki to another.
+
+NOTE: In this test case, the word 'wiki' always refers to the OU wiki.
+
+The test steps in this script follow on from each other and aren't independent, except as noted.
+
+Test requirements
+=================
+
+Test course – referred to as WIP1 in this test case
+At least two test groups setup in WIP1
+User with permission to add and edit activities and with access all groups – Admin
+Test user with student permissions – S1. S1 must be enrolled on course and be a member of at least one group in WIP1 (TG)
+
+
+WIPCW Creating wikis and data
+=============================
+
+Create a test course – WIP1 (Wiki Import Pages Test), enrol user S1 as student and create at least 1 group (TG) with user S1 as member.
+
+WIPCW01 / Admin
+ Add a new wiki activity to any section of course WIP1, setting name to 'WIP.coursewiki' and Annotation system to 'Yes'
+ Select 'Save and return to website'
+ Add a new wiki activity to any section of course WIP1, setting name to 'WIP.groupwiki' and Annotation system to 'Yes' and Sub-wikis to 'One per group' and Group mode to 'Visible groups'
+ Select 'Save and return to website'
+ Add a new wiki activity to any section of course WIP1, setting name to 'WIP.individualwiki' and Annotation system to 'Yes' and Sub-wikis to 'Separate wiki for every user'
+ Select 'Save and return to website'
+ Add a new wiki activity to any section of course WIP1, setting name to 'WIP.hiddenwiki' and Visible to 'Hide
+ Select 'Save and return to website'
+- Verify WIP.hiddenwiki has 'Hidden from students message' against link to it
+ Add a new wiki activity to any section of course WIP1, setting name to 'WIP.importwiki1', Annotation system to 'Yes' and tick Link to import pages
+ Select 'Save and return to website'
+ Add a new wiki activity to any section of course WIP1, setting name to 'WIP.importwiki2' and tick Link to import pages
+ Select 'Save and return to website'
+ Course editing can be turned off at this point.
+
+WIPCW02 /Admin
+ Enter WIP.coursewiki
+ Select 'Create page' when prompted to create the wiki start page
+ Enter text 'WIP.coursewiki start page' new paragraph'[[WIPcoursewiki1]]' into content field
+ Select 'Save changes'
+ Select link 'WIPcoursewiki1'
+ Select 'Create page' when prompted to create the new page
+ Enter text 'WIPcoursewiki1 page' new paragraph'[[WIPcoursewiki2]]' into content field. Add a file into the attachments area
+ Select Annotate tab, select annotate marker after 'page' and enter 'Annotation' into the text area, then select 'Add'. Select 'Save changes'
+ Select link 'WIPcoursewiki2'
+ Select 'Create page' when prompted to create the new page
+ Enter text 'WIPcoursewiki2 page' new paragraph and add an image into content field.
+
+WIPCW03 / Admin
+ Enter WIP.individualwiki
+ Select 'Create page' when prompted to create the wiki start page
+ Enter text 'WIP.individualwiki Admin start page' into content field
+ Select 'Save changes'.
+
+WINP Import new pages
+=====================
+
+WINP01 / Admin
+
+ Select course WIP1
+ Enter WIP.importwiki1
+ Select 'Import pages' link (beside Wiki changes link)
+- Verify WIP.coursewiki, WIP.groupwiki, WIP.individualwiki, WIP.importwiki2 and WIP.hiddenwiki wikis are listed
+- Verify only WIP.coursewiki and WIP.individualwiki have import buttons shown and the other wiki's have 'This wiki activity contains no available content to import' shown
+ Select 'Import from WIP.coursewiki' button
+- Verify 'Start page', 'WIPcoursewiki1' (indented) and 'WIPcoursewiki2' (indented) pages are listed
+ Select 'Import pages'
+- Verify 'Confirm import' page loads and warning 'No pages selected for import' shown
+ Select 'Cancel'
+- Verify WIP.coursewiki pages listed again
+
+WINP02 / Admin
+
+ Following on from step 01...
+ Select checkbox against 'Start page'
+- Verify all checkboxes become checked
+ Uncheck 'WIPcoursewiki1' page
+- Verify 'WIPcoursewiki1' and 'WIPcoursewiki2' pages become unchecked
+ Select 'Import pages'
+- Verify 'Confirm import' page loads with Import information displayed as follows:
+-- 'Import from: WIP.coursewiki'
+-- 'Import pages:' 'Start page', 'WIPcoursewiki1', 'WIPcoursewiki2'
+-- 'Page links' - 'Use imported Start page:' (radio buttons) 'Merge into existing Start page content' (default), 'Create new page from imported Start page'
+- Verify 'Import pages' and 'Cancel' buttons shown
+ Select 'Create new page from imported Start page' radio button
+ Select 'Import pages'
+- Verify 'Importing pages' 'bar' at 100%. Pages imported listed as 'Imported start page', 'WIPcoursewiki1' and 'WIPcoursewiki2'. Pages updates listed as 'Start page'
+ Select 'Continue' button
+- Verify taken to WIP.importwiki start page - contents is a link to 'Imported start page'
+Select 'imported start page link'
+- Verify contents as per WIP.coursewiki now shown (start page text with link to 'WIPcoursewiki1')
+ Select 'WIPcoursewiki1' page link
+- Verify WIPcoursewiki1 page shown including link to 'WIPcoursewiki2' and attachment (testing attachment downloads correctly). Note: annotation should not have been imported
+ Select 'WIPcoursewiki2' link
+- Verify WIPcoursewiki2 page shown correctly as populated in step WIPWC02.
+
+WINP03 / Admin
+
+ Select course WIP1
+ Enter WIP.importwiki2
+ Select 'Import pages' link
+ Select 'Import from WIP.coursewiki' button
+ Select checkbox against WIPcoursewiki1 page
+- Verify 'WIPcoursewiki1' and 'WIPcoursewiki2' pages become checked
+ Select 'Import pages'
+- Verify 'Confirm import' page loads with Import information displayed as follows:
+-- 'Import from: WIP.coursewiki'
+-- 'Import pages:''WIPcoursewiki1' and 'WIPcoursewiki2'
+-- 'Page links' - 'Add links to new pages to' (drop down) 'New page' and 'Start page' (selected)
+ Select 'New page' from the drop-down, select 'Import pages'
+- Verify 'Importing pages' progress bar at 100%, Pages imported listed as 'WIPcoursewiki1', 'WIPcoursewiki2', 'Imported pages'. Pages updated 'Start page'
+ Select 'Continue' button
+- Verify 'Imported pages' page shown, contents link to WIPcoursewiki1 and 'Page that links to this one' 'start page' shown.
+
+WIWS Wiki selection
+===================
+
+WIWS01 / S1 (change)
+
+ Select course WIP1
+ Enter WIP.importwiki1
+ Select 'Import pages' link
+- Verify WIP.coursewiki, WIP.groupwiki, WIP.individualwiki, WIP.importwiki2 wikis are listed only
+- Verify only WIP.coursewiki has an import button shown and the other wiki's have 'This wiki activity contains no available content to import' shown
+ Return to course WIP1
+ Select WIP.individualwiki
+ Select 'Create page'
+ Enter text 'WIP.individualwiki page - S1' into the content field
+ Select 'Save changes'
+ Return to course WIP1
+ Select WIP.groupwiki, ensure group TG (group used for testing) selected
+ Select 'Create page'
+ Enter text 'WIP.groupwiki page - TG - S1' into the content field
+ Select 'Save changes'
+ Return to course WIP1
+ Enter WIP.importwiki1
+ Select 'Import pages' link
+- Verify WIP.coursewiki, WIP.groupwiki, WIP.individualwiki, WIP.importwiki2 wikis are listed only
+- Verify all wikis have import button shown.
+
+WIWS02 / Admin (change)
+
+ Select course WIP1
+ Enter WIP.groupwiki - ensure a group other that main testing group (TG) selected
+ Select 'Create page'
+ Enter text 'WIP.groupwiki page - [OTHER GROUP] - Admin' into the content field
+ Select 'Save changes'
+ Return to course WIP1
+ Enter WIP.importwiki1
+ Select 'Import pages' link
+- Verify WIP.groupwiki has a 'Select wiki' drop-down with TG and other group used in this step listed
+- Verify WIP.individualwiki has a 'Select wiki' drop-down with Admin (selected) and S1 user listed
+ Select TG group from drop-down against WIP.groupwiki and then select 'Import from WIP.groupwiki' button
+- Verify 'Import from WIP.groupwiki' shown
+- Verify 'Start page' is shown with a word count of 4 and last change made by user S1
+ Select 'Cancel' button
+ Select S1 user from drop-down against WIP.individualwiki and then select 'Import from WIP.individualwiki' button
+- Verify 'Import from WIP.individualwiki' shown
+- Verify 'Start page' is shown with a word count of 3 and last change made by user S1
+ Return to course WIP1.
+
+
+WIMP Import existing pages
+==========================
+
+WIMP01 / S1 (change)
+
+ Select course WIP1
+ Enter WIP.importwiki1
+ Select 'Import pages' link
+ Select 'Import from WIP.coursewiki' button
+ Select checkbox against WIPcoursewiki2 page, select 'Import pages' button
+- Verify 'Page conflicts' section shown with 'WIPcoursewiki2' page listed with a tick
+- Verify 'WIPcoursewiki2' page link goes to WIP.importwiki1 wiki (new window)
+- Verify 'Merge setting' options shown are 'Merge page content' (selected) and 'Replace existing page content'
+ Select 'New page' in 'Add links to new pages to' drop-down
+ Select 'Import pages'
+- Verify 'Pages imported' is 'Imported pages' and 'Pages updated' lists 'WIPcoursewiki2' and 'Start page'
+ Select 'Continue' button
+- Verify 'Imported pages' page shown with content 'WIPcoursewiki2' (page link)
+ Select 'WIPcoursewiki2' link
+- Verify 'WIPcoursewiki2' page shown with same content twice; 'WIPcoursewiki2 page' and two images.
+
+WIMP02 / S1
+
+ Enter WIP.importwiki1
+ Select 'Import pages' link
+ Select 'Import from WIP.coursewiki' button
+ Select checkbox against WIPcoursewiki2 page, select 'Import pages' button
+- Verify 'Page conflicts' section shown with 'WIPcoursewiki2' page listed with a tick
+- Verify 'Merge setting' options shown are 'Merge page content' (selected) and 'Replace existing page content'
+ Select 'New page' in 'Add links to new pages to' drop-down
+ Select 'Replace existing page content' under 'Merge setting'
+ Select 'Import pages'
+- Verify 'Pages imported' is empty and 'Pages updated' lists 'Imported pages', 'WIPcoursewiki2' and 'Start page'
+ Select 'Continue' button
+- Verify 'Imported pages' page shown with content 'WIPcoursewiki2' (page link) twice
+ Select a 'WIPcoursewiki2' link
+- Verify 'WIPcoursewiki2' page shown with content 'WIPcoursewiki2 page' and image
+ Return to course WIP1.
+
+WIMP03 / Admin
+
+ Enter WIP.importwiki
+ Select 'Wiki index' link
+ Select 'WIPcoursewiki2' page link
+ Select 'Lock page' button
+ Select 'Import pages' link
+ Select 'Import from WIP.coursewiki' button
+ Select checkbox against WIPcoursewiki2 page, select 'Import pages' button
+- Verify 'Page conflicts' section shown with 'WIPcoursewiki2' listed with X against
+- Verify warning text shown and only 'Cancel' button available
+ Select 'Cancel' button
+- Verify returned to import page selection screen with WIPcoursewiki2 page checked.
+
+WIMP04a / Admin
+
+ Enter WIP.importwiki
+ Select 'Wiki index' link
+ Select 'WIPcoursewiki1' page link
+ Select Edit tab
+
+WIMP04b / S1 (change)
+
+ Open a separate browser to test under user S1
+ Enter course WIP1
+ Enter WIP.importwiki1
+ Select 'Import pages' link
+ Select 'Import from WIP.coursewiki' button
+ Select checkbox against WIPcoursewiki1 page, select 'Import pages' button
+- Verify 'Page conflicts' section shown with 'WIPcoursewiki1' and 'WIPcoursewiki2' listed with X against
+- Verify warning text shown and only 'Cancel' button available
+ Enter WIP.importwiki1 again
+ Select 'Wiki index' link
+ Select 'WIPcoursewiki1' page link
+ Select 'Edit' tab
+- Verify editing warning shown along with 'Try again' and 'Cancel' buttons (Note this is time dependant, normal editing page may show instead).
+
+
+WIMP04c / Admin (change)
+
+ Following on from part a, select 'Cancel button'.
+
+
+WIMP04b / S1 (change)
+
+ Following on from part b (separate browser), select 'Try again'
+- Verify normal editing page shown.
+
+WIMP04c / Admin
+
+ Select 'Import pages' link
+ Select 'Import from WIP.coursewiki' button
+ Select checkbox against WIPcoursewiki1 page, select 'Import pages' button
+- Verify 'Page conflicts' section shown with 'WIPcoursewiki1' [Tick] and 'WIPcoursewiki2' [X] shown (Admin must have mod/ouwiki:overridelock capability to see tick)
+- Verify warning text shown and only 'Cancel' button available.
+
+
+WIPHIS Import history recorded
+==============================
+
+WIPHIS01 / Admin
+
+ Enter course WIP1
+ Enter WIP.importwiki1
+ Select 'Imported start page' link, select 'History' tab on the 'Imported start page'
+- Verify 'Imported from' column shows 'WIP.coursewiki' against initial version
+ Select 'Wiki changes' link
+- Verify 'Imported from' column shows 'WIP.coursewiki' against page versions for 'Imported start page', 'WIPcoursewiki1' and 'WIPcoursewiki2' pages
+ Select 'Participation by user' link
+- Verify user S1 has 'Pages imported' value of 1
+ Select 'Detail' link against user S1
+- Verify 'Imported from' column shows 'WIP.coursewiki' against page versions for 'WIPcoursewiki2'.
diff --git a/mod/ouwiki/internaldoc/testcase.importbetweencourses.txt b/mod/ouwiki/internaldoc/testcase.importbetweencourses.txt
new file mode 100644
index 0000000..4d486a6
--- /dev/null
+++ b/mod/ouwiki/internaldoc/testcase.importbetweencourses.txt
@@ -0,0 +1,109 @@
+This script describes steps to test the use of the import pages facility to add pages from one wiki to another across courses.
+
+NOTE: In this test case, the word 'wiki' always refers to the OU wiki.
+
+The test steps in this script follow on from each other and aren't independent, except as noted.
+
+Test requirements
+=================
+
+Two Test courses – referred to as WIP1 and WIP2 in this test case
+At least two test groups setup in courses WIP1 and WIP2
+User with permission to add and edit activities and with access all groups – Admin
+Test user with student permissions – S1. S1 must be enrolled on both courses and be a member of at least one group in WIP1 (TG) and WIP2 (TG2)
+
+
+WIPCW Creating wikis and data
+=============================
+
+Create a test course – WIP1 (Wiki Import Pages Test), enrol user S1 as student and create at least 1 group (TG) with user S1 as member.
+Create a test course – WIP2 (Wiki Import Pages Test), enrol user S1 as student and create at least 1 group (TG2) with user S1 as member.
+
+WIPCW01 / Admin
+ Add a new wiki activity to any section of course WIP1, setting name to 'WIP.coursewiki' and Annotation system to 'Yes'
+ Select 'Save and return to website'
+ Enter WIP.coursewiki
+ Select 'Create page' when prompted to create the wiki start page
+ Enter text 'WIP.coursewiki start page' new paragraph'[[WIPcoursewiki1]]' into content field
+ Select 'Save changes'
+ Select link 'WIPcoursewiki1'
+ Select 'Create page' when prompted to create the new page
+ Enter text 'WIPcoursewiki1 page' new paragraph'[[WIPcoursewiki2]]' into content field. Add a file into the attachments area
+ Select Annotate tab, select annotate marker after 'page' and enter 'Annotation' into the text area, then select 'Add'. Select 'Save changes'
+ Select link 'WIPcoursewiki2'
+ Select 'Create page' when prompted to create the new page
+ Enter text 'WIPcoursewiki2 page' new paragraph and add an image into content field.
+
+WIPCW02 / Admin
+ Add a new wiki activity to any section of course WIP2, setting name to 'WIP2.coursewiki' and Annotation system to 'Yes' and tick 'link to import pages'
+ Select 'Save and return to website'
+ Enter WIP2.coursewiki
+ Select 'Create page' when prompted to create the wiki start page
+ Enter text 'WIP2.coursewiki start page' new paragraph'[[WIP2coursewiki1]]' into content field
+ Select 'Save changes'
+ Select link 'WIP2coursewiki1'
+ Select 'Create page' when prompted to create the new page
+ Enter text 'WIP2coursewiki1 page' new paragraph'[[WIP2coursewiki2]]' into content field. Add a file into the attachments area
+ Select Annotate tab, select annotate marker after 'page' and enter 'Annotation' into the text area, then select 'Add'. Select 'Save changes'
+ Select link 'WIP2coursewiki2'
+ Select 'Create page' when prompted to create the new page
+ Enter text 'WIP2coursewiki2 page' new paragraph and add an image into content field.
+
+WINP Import new pages
+=====================
+
+WINP01 / Admin
+
+ Select course WIP2
+ Enter WIP2.coursewiki
+ Select 'Import pages' link (beside Wiki changes link)
+- Verify that you can not import pages.
+ 'No wiki's available to import from.' is displayed (Note: this may not be the case if user has access to other course wikis)
+ Select 'Continue'
+- Verify that this takes you back to the wiki start page
+
+NOTE : Import can only be tested as S1
+
+WIN02 / S1 (change)
+
+ Select course WIP2
+ Enter WIP2.coursewiki
+ Select 'Import pages' link (beside Wiki changes link).
+ The wikis should be shown under each course WIP1 and WIP2
+ Under course WIP1
+- Verify WIP.coursewiki is listed and has import buttons shown
+  Under course WIP2
+- Verify WIP2.coursewiki is listed and has import buttons shown
+
+WIMP Import existing pages
+==========================
+
+WIMP01 / S1 (change)
+
+ Select course WIP2
+ Enter WIP2.coursewiki
+ Select 'Import pages' link
+ Select 'Import from WIP.coursewiki' button
+ Select checkbox against WIPcoursewiki2 page, select 'Import pages' button
+ Select 'New page' in 'Add links to new pages to' drop-down
+ Select 'Import pages'
+- Verify 'Pages imported' is 'Imported pages' and 'WIPcoursewiki2' and 'Pages updated' list is 'Start page'
+ Select 'Continue' button
+- Verify 'Imported pages' page shown with content 'WIPcoursewiki2' (page link)
+
+WIPHIS Import history recorded
+==============================
+
+WIPHIS01 / Admin (change)
+
+ Enter course WIP2
+ Enter WIP2.coursewiki
+ Select 'Imported pages' link,
+ Select 'WIPcoursewiki2' link, select 'History' tab on the 'WIPcoursewiki2'
+- Verify 'Imported from' column shows 'WIP1 WIP.coursewiki' against initial version
+ Select 'Wiki changes' link
+- Verify 'Imported from' column shows 'WIP1 WIP.coursewiki' against page versions for 'Imported start page', 'WIPcoursewiki1' and 'WIPcoursewiki2' pages
+ Select 'Participation by user' link
+- Verify user S1 has 'Pages imported' value of 1
+ Select 'Detail' link against user S1
+- Verify 'Imported from' column shows 'WIP1 WIP.coursewiki' against page versions for 'WIPcoursewiki2'.
diff --git a/mod/ouwiki/internaldoc/testcase.participation.txt b/mod/ouwiki/internaldoc/testcase.participation.txt
new file mode 100644
index 0000000..98cfc51
--- /dev/null
+++ b/mod/ouwiki/internaldoc/testcase.participation.txt
@@ -0,0 +1,210 @@
+This script describes steps to test the participation facility from a user
+perspective. It is intended to cover most of the UI and features.
+
+NOTE: In this test case, the word 'wiki' always refers to the OU wiki.
+
+The test steps in this script follow on from each other and aren't independent.
+
+
+Initial setup
+=============
+
+This test case requires:
+
+- a course which has at least two groups defined (G1 and G2).
+- two test student users (U.S1, who is in group G1, and U.S2, in group G2).
+- one test teacher (U.T1) who is in group G1.
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+The completion system must be enabled for (a) the site, and (b) the test
+course.
+
+
+CRE Creating wikis and data
+===========================
+
+CRE01 / admin
+  In your test course, create a wiki called CRE01 which is set to group wikis
+  and separate groups.
+  Go to the Permissions page for this wiki and set it so that the Teacher role
+  DOES have the accessallgroups capability in this wiki.
+
+CRE02 / admin
+  Create a wiki called CRE02 which is a whole-course wiki (no groups).
+
+CRE03 / admin
+  Create a wiki called CRE03 which is set to individual wikis (no groups).
+
+CRE04 / U.S1 [change]
+  Go to wiki CRE01 (you should be in group G1).
+  Create the start page with 3 words.
+  Edit the start page and add another word so that it now has 4 words.
+  Edit the start page and remove 2 words so that it now has 2 words.
+  Go to wiki CRE02.
+  Create the start page with 1 word.
+  Go to wiki CRE03 (you should be in the individual wiki for U.S1).
+  Create the start page with 2 words.
+
+CRE05 / U.S2 [change]
+  Go to wiki CRE01 (you should be in group G2).
+  Create start page with 1 word.
+  Go to wiki CRE02.
+  Edit start page so that it has 4 words.
+  Using the button at the bottom, create a new page called 'Frog' which has
+  2 words.
+  Go to wiki CRE03 (you should be in the individual wiki for U.S2).
+  Create the start page with 1 word.
+  Create a new page called 'Frog' with 1 word.
+
+CRE06 / U.T [change]
+  Go to wiki CRE01 and choose group G1.
+  Edit the start page and add 3 words so that it now has 5 words.
+
+
+BSC Basic usage
+===============
+
+BSC01 / U.T
+  Go to wiki CRE01.
+  - Verify that there is a button 'Participation by user' alongside the
+    'Wiki index' and 'Wiki changes' buttons.
+  Click the button. The participation list page should load.
+  - Verify that there is a group dropdown.
+  Choose group G1.
+  - Verify that the list of users shows U.S1 and U.T (everyone who is in
+    group G1).
+  - The counts should be:
+         Pages created | Page edits | Words added | Words deleted
+    U.S1   1           |   2        |   4         |   2
+    U.T    0           |   1        |   3         |   0
+
+BSC02 / U.T
+  Go to wiki CRE02. Click the participation list button.
+  - U.T should be included on the list even though they did not do anything in
+    this wiki.
+  - The counts should be:
+         Pages created | Page edits | Words added | Words deleted
+    U.S1   1           |   0        |   1         |   0
+    U.S2   1           |   2        |   6         |   0
+    U.T    0           |   0        |   0         |   0
+
+BSC03 / U.T
+  Go to wiki CRE03. Click the participation list button.
+  - The counts should be:
+         Pages created | Page edits | Words added | Words deleted
+    U.S1   1           |   0        |   2         |   0
+    U.S2   2           |   1        |   3         |   0
+    U.T    0           |   0        |   0         |   0
+
+BSC04 / U.T
+  Return to wiki CRE01. Click on the 'Detail' link next to U.S1.
+  - Verify that you are taken to a page showing details of all the changes
+    made by U.S1.
+  In another tab, go to the 'Wiki changes' page.
+  - Check that the changes shown on this detail link are basically the same
+    as the lines on 'Wiki changes' that relate to U.S1, but with slightly
+    different formatting. (I.e. the values are the same.)
+
+
+FIL File download
+=================
+
+FIL01 / admin [change]
+  Go to the wiki CRE01. Select group G1.
+  - Verify that there is a file download option and CSV is one of the available
+    formats (or possibly the only available format).
+  Do a CSV download of the data.
+  - Verify that the download is as follows (with possible differences regarding
+    quoting, course name, user names, etc.):
+
+    MY-COURSE-SHORTNAME,CRE01,G1
+    User,Pages created,Page edits,Words added,Words deleted
+    U S1,1,2,4,2
+    U T,0,1,3,0
+
+FIL02 / admin
+  Go to the Details list for user U.S1.
+  - Verify there is a download option with CSV.
+  Do the CSV download.
+  - Verify that download is something like the following, with possible
+    differences as noted:
+
+    MY-COURSE-SHORTNAME,CRE01,G1,U S1
+    Date,Time,Page,Words added,Words deleted
+    12 May 2011,11:36,Start page,3,0
+    12 May 2011,11:37,Start page,1,0
+    12 May 2011,11:37,Start page,0,2
+
+FIL03 / admin
+  Create a new wiki (course-wide) with title (exactly as shown including
+  commas and quotes):
+
+  This, surprisingly, is another wiki"'\
+
+  Go to the participation list.
+  - It should show a table with the three users and lots of zeros.
+  Do a CSV download of the data.
+  - Verify that the wiki name in the CSV download is escaped so that it goes
+    into a single column despite the commas.
+    NOTE: This test is supposed to check that the code is correctly using core
+    CSV support library to escape its text. It is possible there might be a bug
+    in the core library which will cause this test to fail. In that case the
+    core library bug should be reported in the Moodle bug tracker and we ignore
+    the failure of this one test item.
+
+
+GRD Grading
+===========
+
+GRD01 / admin
+  Edit the wiki CRE01 settings and set grading option to the 'Separate or
+  Connected' scale. Save and display.
+  Go to participation list.
+  - Verify that a Grade column now shows in the table.
+  - Verify that it shows existing grade as unset for everyone.
+  - Verify that the dropdowns have options as per the scale ('Separate' or
+    'Connected', I think).
+  Edit wiki settings again and set grading option to the 0..10 numeric scale.
+  Save and display. Go to participation list.
+  - Verify that grade dropdowns now have options 0..10.
+
+GRD02 / admin
+  Edit the wiki CRE01 settings and set the completion option to automatic
+  completion.
+  In the form, temporarily turn off the grading option.
+  - Verify that the 'Require grade' checkbox is greyed out.
+  Turn the grading option back on (to 0..10 numeric scale again).
+  - Verify that the 'Require grade' checkbox is now available.
+  Tick the 'Require grade' checkbox and save changes.
+
+GRD03 / U.T [change]
+  Go to the wiki CRE01, group G1, participation list.
+  - Verify that Grade column displays and shows existing grade as unset.
+  Change grade for U.S1 to 5/10 and U.T to 10/10. Click Save grades button.
+  - Verify that the page reloads and now displays the new grades 5/10, 10/10.
+  Change grade for U.T back to 'not set'. Click Save grades button.
+  - Verify that page reloads and shows U.T as 'not set'.
+
+GRD04 / U.T
+  Go to the course gradebook.
+  - Verify that there is a column relating to the wiki CRE01.
+  - Verify that the grades in this column are 50% for U.S1 and not set for
+    other users.
+
+GRD05 / U.T
+  Go to course page.
+  - Verify that automatic tickbox icon next to the wiki is not ticked (this
+    may mean it's invisible, depending on the icon in use).
+  Go to CRE01, group G1, participation list. Click into the details page for
+  U.T.
+  - Verify that the Grade dropdown is shown at the bottom of the details page
+    and is currently showing unset.
+  Change the grade for U.T to 7/10 and save.
+  - The participation list should now load, showing the new 7/10 grade.
+  Click in Details page for U.T.
+  - Verify that the grade now shows as 7/10 here too.
+  Return to course page.
+  - Verify that the automatic tickbox is now ticked.
diff --git a/mod/ouwiki/internaldoc/testcase.uploadtemplate.txt b/mod/ouwiki/internaldoc/testcase.uploadtemplate.txt
new file mode 100644
index 0000000..34c1474
--- /dev/null
+++ b/mod/ouwiki/internaldoc/testcase.uploadtemplate.txt
@@ -0,0 +1,149 @@
+This script describes steps to test the use of the add template anytime facility
+and codes ability to create OU wikis from that template. It assumes that the tt server
+is set up so has to allow the Roll Forward of dummy courses.
+
+The script also tests the embedding of files and attachments into templates.
+
+NOTE: In this test case, the word 'wiki' always refers to the OU wiki.
+
+The test steps in this script follow on from each other and aren't independent,
+except as noted.
+
+Initial setup
+=============
+
+Create a test course called TC1.
+
+CRE Creating wikis and data
+===========================
+
+CRE01 / admin
+  In your test course TC1, create a wiki called CRE01.
+  Create the start page with 3 words.
+  Create 2 pages 'page1' and 'page2' from the start page in the wiki
+  Go to page1 and create a page 'inner page1'
+  Go to wiki index
+  Choose 'Structure' view
+  Download as wiki template and save the download zip file to a temp area on your PC as CRE01_template.zip
+  Unzip the downloaded template zip file and save the xml file to a temp area on your PC as CRE01_template.xml
+
+CRE02 / admin
+  In your test course TC1, create a wiki called CRE02
+  Create the start page with 6 words.
+  Create 2 pages 'page1' and 'page2' from the start page in the wiki
+  Go to page2 and create a page 'inner page2'
+  Go to wiki index
+  Choose 'Structure' view
+  Download as wiki template and save the download zip file to a temp area on your PC as CRE02_template.zip
+  Unzip the downloaded template zip file and save the xml file to a temp area on your PC as CRE02_template.xml
+
+
+CRE03 / admin
+  Create a wiki called CRE03
+  Create the start page with 1 word.
+
+CRE04 / admin
+  Create a wiki called CRE04
+  Create the start page with 2 words.
+
+ CRE05 / admin
+  Create a wiki called CRE05
+  DO NOT create a start page for it.
+
+ CRE06 / admin
+  Create a wiki called CRE06
+  Create a start page for it.
+  Click the 'Cancel' button
+
+
+ CRE07 / admin
+  Set up the block 'View as'
+  Create a wiki called CRE07
+  Set Wiki Settings to 'Individual wiki per user'
+  Save and return to course
+  Navigate as example student to CRE07
+  DO NOT create a start page for it.
+  Log back in as admin
+
+CRE08 / admin
+  In your test course TC1, create a wiki called CRE08.
+  Create the start page with 3 words.
+  Create 2 pages 'page1' and 'page2' from the start page in the wiki
+  Go to page1 and edit page
+  Click against the 'edit/insert image' tree icon.
+  Upload an image.
+  Insert the image and save.
+  Check that the image has been saved to the wiki page.
+  Go to page2 and edit page and add an attachment and save.
+  Check that the image has been saved to the wiki page.
+  Go to wiki index.
+  Download as wiki template and save the download zip file to a temp area on your PC as CRE08_template.zip
+
+ Upload Template Files Tests
+ ===========================
+
+  UTFT01 / admin
+  Go to wiki CRE03
+  Go to edit settings
+  Choose to upload the downloaded template CRE01 zip file.
+  Save and display
+  This should leave the CRE03 start page as originally created
+
+  UTFT02 / admin
+  Go to wiki CRE04
+  Go to edit settings
+  Choose to upload the downloaded template CRE01 xml file.
+  Save and display
+  This should leave the CRE04 start page as originally created
+
+  UTFT03 / admin
+  Go to wiki CRE05
+  Go to edit settings
+  Choose to upload the downloaded template CRE01 zip file
+  Save and display
+  This should create a start page matching that of wiki CRE01
+
+  UTFT04 / admin
+  Go to wiki CRE06
+  Go to edit settings
+  Choose to upload the downloaded template CRE01 xml file
+  Save and display
+  This should create a start page matching that of wiki CRE01
+
+  UTFT05 / admin
+  Go to wiki CRE07
+  Go to edit settings
+  Choose to upload the downloaded template CRE01 xml file
+  Save and display
+  This should create a start page matching that of wiki CRE01
+  Return to course home page
+  Login as example student and visit CRE07 to see that the start page is matching that of wiki CRE01
+
+  UTFT06 / admin
+  As admin go to wiki CRE07
+  Go to edit settings
+  Choose to upload the downloaded template CRE02 xml file
+  Save and display
+  The start page should remain as previously
+  Go to course home page
+  Login as example Tutor and visit CRE07 - the start page should match that of wiki CRE02
+
+  UTFT07 / admin
+  Create wiki CRE09
+  Go to edit settings
+  Choose to upload the downloaded CRE08_template.zip.
+  Save and display.
+  This should create a copy of the CRE08 wiki.
+
+
+ Backup and Restore Test
+ =======================
+
+  BRT01 / admin
+  Login as admin user
+  Backup the test course TC1 disabling all user settings/inputs.
+  Restore the course as TC2.
+  Check to see that the ouwikis have been created correctly according to the template files.
+  CRE01, 03, 04, 05 and 06 should match the template of CRE01
+  CRE02 and O7 should match the template of CRE02
+  CRE08 and CRE09 should match the template of CRE08
diff --git a/mod/ouwiki/internaldoc/testcase.wordcount.txt b/mod/ouwiki/internaldoc/testcase.wordcount.txt
new file mode 100644
index 0000000..9cc179d
--- /dev/null
+++ b/mod/ouwiki/internaldoc/testcase.wordcount.txt
@@ -0,0 +1,205 @@
+This script describes steps to test the word count facility from a user
+perspective. It is intended to cover most of the UI and features.
+
+NOTE: In this test case, the word 'wiki' always refers to the OU wiki.
+
+The test steps in this script follow on from each other and aren't independent,
+except as noted.
+
+
+Initial setup
+=============
+
+This test case requires:
+
+- a course which has at least two groups defined (G1 and G2).
+
+As word count is displayed in the same way to all users, the test case uses
+only the admin user, so you don't need to create any users.
+
+The test server must have debugging set to DEVELOPER level and to display
+errors; during all parts of the test script, there should be no debugging
+warnings.
+
+You must have enabled portfolios and added a file download (HTML) portfolio
+option.
+
+
+UPG Upgrade
+===========
+
+NOTE: This test stage requires access to edit the code on the server and will
+trash all data from all wikis on it. It may be necessary to run this on a
+separate, disposable Moodle installation. For that reason, this test is
+described independently of other tests; the other tests can be done without
+uninstalling anything.
+
+UPG01 / admin
+  Using the Moodle admin interface, delete the wiki module if it is installed.
+    NOTE: This will delete all data from all wikis.
+  Set up the code on the server so that it contains the previous version of the
+  wiki, without the word count feature.
+  Visit the Notifications page so that the wiki installs itself.
+
+UPG02 / admin
+  On your test course, create a wiki called UPG02 which is set to group
+  wikis and separate groups.
+  View the wiki. Select group G1. Click to create the start page. Add the text
+  'This is the start page' and save the page.
+  Click into the 'create new page' text box, type in the title 'Frogs', and
+  click the button. Enter text 'Page about frogs' into the edit box and save
+  the page.
+  Switch group to G2. Click to create the start page. Add the text 'It's
+  yet another page' and save it.
+
+UPG03 / admin
+  Make a backup of the course, with user data, including the (pre-wordcount)
+  wiki.
+
+UPG04 / admin
+  Set up the code on the server so that it contains the new version of the wiki
+  that has the word count feature.
+  Visit the Notifications page so that the wiki upgrades itself.
+  - Verify that a Moodle progress bar displays indicating that 4 versions are
+    being converted. (Obviously the progress bar may move too fast to see in
+    this case.)
+
+UPG05 / admin
+  Visit the wiki. Select group G2 if not already selected.
+  - Verify that the word count 'Words: 4' displays at the bottom of the page.
+  Select group G1.
+  - Verify that word count 6 displays.
+  Click to Frogs page in G1.
+  - Verify that word count 3 displays.
+
+UPG06 / admin
+  Restore the backup (that was made in step UPG03) to a new course.
+  On the new course, visit the wiki and check each page.
+  - The word counts should display and should be the same as in UPG05.
+
+
+BSC Basic usage
+===============
+
+BSC01 / admin
+  In your test course, create a wiki called BSC01 which is set to group wikis
+  and separate groups.
+  - Verify that the settings form has a 'Show word counts' option.
+  - Verify that this option defaults to Yes.
+  Save and display the new wiki.
+
+BSC02 / admin
+  Switch to group G1 and create the start page of the wiki. Type the text
+  'One two 3.'. Save it.
+  - Verify that the page displays and shows 'Words: 3' at the bottom.
+  - Verify that the word count is displayed in a suitable style (e.g. small,
+    grey, with some margin above) to distinguish it from the page content.
+
+BSC03 / admin
+  Click into the 'create new page' box and type the title 'Assorted undead'.
+  Click the button. In the page edit area enter 'Zombies, werewolves'. Save
+  the new page.
+  - Verify that the page shows 'Words: 2'.
+  Click back to the start page. The start page now contains a link to the
+  'Assorted undead' page.
+  - Verify that the start page now shows 'Words: 5'.
+
+BSC04 / admin
+  Click into group G2 and create the start page. Leave the text blank. Save it.
+  - Verify that the page shows 'Words: 0'.
+
+
+CHG Changes and index
+=====================
+
+CHG01 / admin
+  Click into group G2 and edit the start page. Add the phrase 'Frogs, toads'.
+  Save it.
+  - Page should now show 2 words.
+  Edit the page again. This time, add quotes around the word 'toads', but do
+  not add any words. Save it.
+  - Page should still show 2 words.
+  Edit the page again and delete the word 'toads'. Save it.
+  - Page should now show 'Words: 1'.
+
+CHG02 / admin
+  Click into the History tab.
+  - Verify that there is a 'Words' column in the table.
+  - There should be four versions (original and three changes). In the order
+    they appear on screen, these should have the following values for the
+    Words column: '-1', '' (blank), '+2', and '0'.
+
+CHG03 / admin
+  Click on the 'View' link next to the previous version, with 2 words.
+  The old page containing both words should appear.
+  - Verify that there is a 'Words: 2' display at bottom.
+
+CHG03 / admin
+  Click the 'Wiki changes' button toward top right.
+  - Verify there is a 'Words' column in the table.
+  - Verify that the values are the same as when shown on the individual page
+    history.
+  Click the 'New pages' tab.
+  - Verify there is a 'Words' column in the table.
+  - This should show '0' for the new page because it had 0 words when created.
+
+CHG04 / admin
+  Click the 'Wiki index' button.
+  - Verify that the 'Start page' box contains a line 'Words: 1'.
+  Click the 'Structure' tab.
+  - Verify that the 'Start page' box still contains the same line.
+
+
+EXP Export
+==========
+
+EXP01 / admin
+  Switch to group G1 and go to the 'Assorted undead' page.
+  Click the 'Export to portfolio' link (and select the portfolio, if
+  necessary); save and open the resulting .html file.
+  - Verify that the exported html file contains the 'Words: 2' text.
+
+
+BAR Backup and restore
+======================
+
+BAR01 / admin
+  Back up the course, including user data, with the wiki.
+  Restore the backup to a new course.
+  - Check each wiki page and verify that it contains the expected word counts.
+    (G1: 5, 2; G2: 1)
+
+
+SWH Switch on/off
+=================
+
+SWH01 / admin
+  Edit the wiki settings and change the 'Show word counts' option to No.
+  Visit the start page of the wiki.
+  - Verify that word count is not displayed.
+
+SWH02 / admin
+  Visit the history tab.
+  - Verify that the 'Words' column is not displayed.
+  Click on an old version of the page.
+  - Verify that word count is not displayed.
+  Click the 'Wiki changes' button.
+  - Verify that the 'Words' column is not displayed in either tab.
+  Click the 'Wiki index' button
+  - Verify that the 'Words' column is not displayed in either tab.
+
+SWH03 / admin
+  Export a page to portfolio and open the resulting .html file.
+  - Verify that word count is not shown.
+
+SWH04 / admin
+  Change to group G2 and edit the start page, which currently has 1 word. Add
+  two more words 'eat flies', so that there are now three words, and save the
+  changes.
+  Edit the page again, delete the word 'flies', and save the changes.
+  Edit the wiki settings and change 'Show word counts' back to Yes.
+  Go to the start page for G2.
+  - Verify that the number of words is correctly shown as 2.
+  Go to the history tab.
+  - Verify that the number of words in the 2 new changes are correctly shown
+    as '-1' and '+2'.
diff --git a/mod/ouwiki/internaldoc/uploadtemplate.txt b/mod/ouwiki/internaldoc/uploadtemplate.txt
new file mode 100644
index 0000000..b39c109
--- /dev/null
+++ b/mod/ouwiki/internaldoc/uploadtemplate.txt
@@ -0,0 +1,12 @@
+== OU Wiki Upload Template Feature ==
+
+=== Description ===
+
+This feature will add support for adding a template to a wiki at any time.
+
+If you override an existing template with a start page this means that only sub-wiki's created
+from that point onwards will use the new template.
+
+=== Capability Requirements ===
+
+Admin/Course Manager capabilities are required
diff --git a/mod/ouwiki/internaldoc/wordcount.txt b/mod/ouwiki/internaldoc/wordcount.txt
new file mode 100644
index 0000000..1c1b6aa
--- /dev/null
+++ b/mod/ouwiki/internaldoc/wordcount.txt
@@ -0,0 +1,18 @@
+== OU Wiki Word Count Feature ==
+
+=== Description ===
+
+Count the number of words saved with a page version.
+
+=== Wiki Settings Requirements ===
+
+In order to see the page version word counts the feature needs to be enabled in the wiki instance settings.
+
+=== Calculation + Display ===
+
+Whenever a page is edited and saved a new word count is taken and saved alongside the version in the database.
+If the '''enablewordcount''' setting in the wiki instance settings is set to ''yes'' then this is displayed
+at the bottom of the page in it's current version.
+
+In the wiki history pages the word count differences between versions are calculated and displayed as + or - values
+in order to show how many words were added at each page edit.
diff --git a/mod/ouwiki/lang/en/ouwiki.php b/mod/ouwiki/lang/en/ouwiki.php
new file mode 100644
index 0000000..488b88e
--- /dev/null
+++ b/mod/ouwiki/lang/en/ouwiki.php
@@ -0,0 +1,591 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+$string['modulename'] = 'OU wiki';
+$string['modulenameplural'] = 'OU wikis';
+$string['pluginadministration'] = 'OU wiki administration';
+$string['pluginname'] = 'OU wiki';
+
+$string['lastmodified'] = 'Last edit: {$a}';
+$string['strftimerecent'] = '%d %B %y, %H:%M';
+
+$string['summary'] = 'Summary';
+
+$string['attachments'] = 'Attachments';
+$string['noattachments'] = 'No attachments';
+
+$string['subwikis'] = 'Sub-wikis';
+$string['subwikis_single'] = 'Single wiki for course';
+$string['subwikis_groups'] = 'One wiki per group';
+$string['subwikis_individual'] = 'Separate wiki for every user';
+
+$string['note'] = 'Note:';
+$string['subwikiexist'] = 'Sub-wiki\'s have already been created. Adding a template file only affects
+newly created and empty sub-wiki\'s, existing content will remain as at present.';
+$string['templatefileexists'] = 'A template file \'{$a}\' is already in use.';
+
+$string['timeout']='Time allowed for edit';
+$string['timeout_none']='No timeout';
+
+$string['editbegin']='Allow editing from';
+$string['editend']='Prevent editing from';
+
+$string['wouldyouliketocreate']='Would you like to create it?';
+$string['pagedoesnotexist']='This page does not yet exist in the wiki.';
+$string['startpagedoesnotexist']='This wiki\'s start page has not yet been created.';
+$string['createpage']='Create page';
+
+$string['recentchanges']='Latest edits';
+$string['seedetails']='full history';
+$string['startpage']='Start page';
+
+$string['tab_view']='View';
+$string['tab_edit']='Edit';
+$string['tab_annotate']='Annotate';
+$string['tab_discuss']='Discuss';
+$string['tab_history']='History';
+
+$string['preview']='Preview';
+$string['previewwarning']='The following preview of your changes has not yet been saved.
+<strong>If you do not save changes, your work will be lost.</strong> Save using the button
+at the end of the page.';
+
+$string['wikifor']='Viewing wiki for: ';
+$string['changebutton']='Change';
+
+$string['advice_edit']='
+<p>Edit the page below.</p>
+<ul>
+<li>Make a link to another page by typing the page name in double square brackets: [[page name]]. The link will become active once you save changes.</li>
+<li>To create a new page, first make a link to it in the same way. {$a}</li>
+</ul>
+';
+
+$string['advice_annotate']='
+<p>Annotate the page below, then click <strong>Save changes</strong>.</p>
+<ul>
+<li>To annotate click one of the annotation markers and enter the required text.</li>
+<li>New and existing annotations can be deleted by removing all the text in the form below.</li>
+<li>The numbers in brackets refer to annotations.</li>
+</ul>
+';
+
+$string['pagelockedtitle']='This page is being edited by somebody else.';
+$string['pagelockeddetails']='{$a->name} started editing this page at {$a->lockedat}, and was
+still editing it as of {$a->seenat}. You cannot edit it until they finish. ';
+$string['pagelockeddetailsnojs']='{$a->name} started editing this page at {$a->lockedat}. They
+have until {$a->nojs} to edit. You cannot edit it until they finish.';
+$string['pagelockedtimeout']='Their editing slot finishes at {$a}.';
+$string['pagelockedoverride']='You have special access to cancel their edit and unlock the page.
+If you do this, whatever they have entered will be lost! Please think carefully before clicking
+the Override button.';
+$string['tryagain']='Try again';
+$string['overridelock']='Override lock';
+
+$string['savefailtitle']='Page cannot be saved';
+$string['savefaillocked']='While you were editing this page, somebody else obtained the page lock.
+(This could happen in various situations such as if you are using an unusual browser or have
+Javascript turned off.) Unfortunately, your changes cannot be saved at this time.';
+$string['savefaildesynch']='While you were editing this page, somebody else managed to make a change.
+(This could happen in various situations such as if you are using an unusual browser or have
+Javascript turned off.) Unfortunately, your changes cannot be saved because that would overwrite the
+other person\'s changes.';
+$string['savefailcontent']='Your version of the page is shown below so that you can copy and paste
+the relevant parts into another program. If you put your changes back on the wiki later, be careful
+you don\'t overwrite somebody else\'s work.';
+$string['returntoview']='View current page';
+$string['savefailnetwork'] = '<p>Unfortunately, your changes cannot be saved at this time. This is due to a
+network error; the website is temporarily unavailable or you have been signed out. </p><p>Saving has been disabled
+on this page. In order to retain any changes you must copy the edited page content, access the Edit page again and then paste in your changes.</p>';
+
+$string['lockcancelled'] = 'Your editing lock has been overridden and somebody else is now editing this page. If you wish to keep your changes, please select and copy them before clicking Cancel; then try to edit again.';
+$string['nojsbrowser'] = 'Our apologies, but you are using a browser we do not fully support.';
+$string['nojsdisabled'] = 'You have disabled JavaScript in your browser settings.';
+$string['nojswarning'] = 'As a result, we can only hold this page for you for {$a->minutes} minutes. Please ensure that you save your changes by {$a->deadline} (it is currently {$a->now}). Otherwise, somebody else might edit the page and your changes could be lost';
+$string['jsnotenabled'] = 'Javascript is not enabled in your browser.';
+$string['ajaxnotenabled'] = 'AJAX not enabled in your profile.';
+$string['jsajaxrequired'] = ' This Annotate page requires Javascript to be enabled in your browser and the AJAX and Javascript setting in your user profile to be set to Yes: use advanced web features.';
+
+$string['countdowntext'] = 'This wiki allows only {$a} minutes for editing. Make your changes and click Save or Cancel before the remaining time (to right) reaches zero.';
+$string['countdownurgent'] = 'Please finish or cancel your edit now. If you do not save before time runs out, your changes will be saved automatically.';
+
+
+$string['advice_history']='<p>The table below displays all changes that have been made to <a href="{$a}">the current page</a>.</p>
+<p>You can view old versions or see what changed in a particular version. If you want to compare any two versions, select the relevant checkboxes and click \'Compare selected\'.</p>';
+
+$string['changedby']='Changed by';
+$string['compare']='Compare';
+$string['compareselected']='Compare selected';
+$string['changes']='changes';
+$string['actionheading']='Actions';
+
+$string['mustspecify2']='You must specify exactly two versions to compare.';
+
+$string['oldversion']='Old version';
+$string['previousversion']='Previous: {$a}';
+$string['nextversion']='Next: {$a}';
+$string['currentversion']='Current version';
+$string['savedby']='saved by {$a}';
+$string['system']='the system';
+$string['advice_viewold']='You are viewing an old version of this page.';
+
+$string['index']='Wiki index';
+$string['tab_index_alpha']='Alphabetical';
+$string['tab_index_tree']='Structure';
+
+$string['lastchange']='Last change: {$a->date} / {$a->userlink}';
+$string['orphanpages']='Unlinked pages';
+
+$string['missingpages']='Missing pages';
+$string['advice_missingpages']='These pages are linked to, but have not yet been created.';
+$string['advice_missingpage']='This page is linked to, but has not yet been created.';
+$string['frompage']='from {$a}';
+$string['frompages']='from {$a}...';
+$string['nowikipages'] = 'This wiki does not have any pages.';
+
+$string['error_export'] = 'An error occurred while exporting wiki data.';
+
+$string['changesnav']='Changes';
+$string['advice_diff']='The older version is shown on the
+left<span class=\'accesshide\'> under the heading Older version</span>, where
+deleted text is highlighted. Added text is indicated in the newer version on
+the right<span class=\'accesshide\'> under the heading Newer
+version</span>.<span class=\'accesshide\'> Each change is indicated by a pair
+of images before and after the added or deleted text, with appropriate
+alternative text.</span>';
+$string['diff_nochanges']='This edit did not make changes to the actual text, so no differences are
+highlighted below. There may be changes to appearance.';
+$string['diff_someannotations']='This edit did not make changes to the actual text, so no differences are
+highlighted below, however annotations have been changed. There may also be changes to appearance.';
+$string['returntohistory']='(<a href=\'{$a}\'>Return to history view</a>.)';
+$string['addedbegins']='[Added text follows]';
+$string['addedends']='[End of added text]';
+$string['deletedbegins']='[Deleted text follows]';
+$string['deletedends']='[End of deleted text]';
+
+$string['ouwiki:addinstance'] = 'Add a new OU wiki';
+$string['ouwiki:edit']='Edit wiki pages';
+$string['ouwiki:view']='View wikis';
+$string['ouwiki:overridelock']='Override locked pages';
+$string['ouwiki:viewgroupindividuals']='Per-user subwikis: view same group';
+$string['ouwiki:viewallindividuals']='Per-user subwikis: view all';
+$string['ouwiki:viewcontributions']='View list of contributions organised by user';
+$string['ouwiki:deletepage'] = 'Delete wiki pages';
+$string['ouwiki:viewparticipation'] = 'View participation of all enrolled users who have access to wiki';
+$string['ouwiki:grade'] = 'Grade users who have have access to wiki';
+$string['ouwiki:editothers'] = 'Edit the content of any sub-wiki that can be viewed';
+$string['ouwiki:annotateothers'] = 'Annotate any sub-wiki that can be viewed';
+
+$string['wikirecentchanges']='Wiki changes';
+$string['wikirecentchanges_from']='Wiki changes (page {$a})';
+$string['advice_wikirecentchanges_changes']='<p>The table below lists all changes to any page on this wiki, beginning with the latest changes. The most recent version of each page is highlighted.</p>
+<p>Using the links you can view a page as it looked after a particular change, or see what changed at that moment.</p>';
+$string['advice_wikirecentchanges_changes_nohighlight']='<p>The table below lists all changes to any page on this wiki, beginning with the latest changes.</p>
+<p>Using the links you can view a page as it looked after a particular change, or see what changed at that moment.</p>';
+$string['advice_wikirecentchanges_pages']='<p>This table shows when each page was added to the wiki, beginning with the most recently-created page.</p>';
+$string['wikifullchanges']='View full change list';
+$string['tab_index_changes']='All changes';
+$string['tab_index_pages']='New pages';
+$string['page']='Page';
+$string['next']='Older changes';
+$string['previous']='Newer changes';
+
+$string['newpage']='first version';
+$string['current']='current';
+$string['currentversionof']='Current version of ';
+
+$string['linkedfrom']='Pages that link to this one';
+$string['linkedfromsingle']='Page that links to this one';
+
+$string['editpage']='Edit page';
+$string['editsection']='Edit section';
+
+$string['editingpage']='Editing page';
+$string['editingsection']='Editing section: {$a}';
+$string['editedby'] = 'Edited by {$a}';
+
+$string['annotatingpage']='Annotating page';
+
+$string['historyfor']= 'History for';
+$string['historycompareaccessibility']='Select {$a->lastdate} {$a->createdtime}';
+
+$string['timelocked_before']='This wiki is currently locked. It can be edited from {$a}.';
+$string['timelocked_after']='This wiki is currently locked and can no longer be edited.';
+
+$string['returntopage']='Return to wiki page';
+
+$string['savetemplate']='Save wiki as template';
+$string['template']='Template';
+
+$string['contributionsbyuser']='Contributions by user';
+$string['changebutton']='Change';
+$string['contributionsgrouplabel']='Group';
+$string['nousersingroup']='The selected group contains no users.';
+$string['nochanges']='Users who made no contribution';
+$string['contributions']='<strong>{$a->pages}</strong> new page{$a->pagesplural}, <strong>{$a->changes}</strong> other change{$a->changesplural}.';
+
+$string['entirewiki']='Entire wiki';
+$string['onepageview']='You can view all pages of this wiki at once for convenient printing or permanent reference.';
+$string['format_html']='View online';
+$string['format_rtf']='Download in word processor format';
+$string['format_template']='Download as wiki template file';
+$string['savedat']='Saved at {$a}';
+$string['downloadcsv'] = 'Comma separated values text file';
+
+$string['feedtitle']='{$a->course} wiki: {$a->name} - {$a->subtitle}';
+$string['feeddescriptionchanges']='Lists all changes made to the wiki. Subscribe to this feed if you want to be updated whenever the wiki changes.';
+$string['feeddescriptionpages']='Lists all new pages on the wiki. Subscribe to this feed if you want to be updated whenever someone creates a new page.';
+$string['feeddescriptionhistory']='Lists all changes to this individual wiki page. Subscribe to this feed if you want to be updated whenever someone edits this page.';
+$string['feedchange']='Changed by {$a->name} (<a href=\'{$a->url}\'>view change</a>)';
+$string['feednewpage']='Created by {$a->name}';
+$string['feeditemdescriptiondate']='{$a->main} on {$a->date}.';
+$string['feeditemdescriptionnodate']='{$a->main}.';
+$string['feedsubscribe']='You can subscribe to a feed containing this information: <a href=\'{$a->atom}\'>Atom</a> or <a href=\'{$a->rss}\'>RSS</a>.';
+$string['feedalt']='Subscribe to Atom feed';
+
+
+$string['olderversion']='Older version';
+$string['newerversion']='Newer version';
+
+
+$string['completionpagesgroup']='Require new pages';
+$string['completionpages']='User must create new pages:';
+$string['completionpageshelp']='requiring new pages to complete';
+$string['completioneditsgroup']='Require edits';
+$string['completionedits']='User must make edits:';
+$string['completioneditshelp']='requiring edits to complete';
+
+$string['reverterrorversion'] = 'Cannot revert to nonexistent page version';
+$string['reverterrorcapability'] = 'You do not have permission to revert to an earlier version';
+$string['revert'] = 'Revert';
+$string['revertversion'] = 'Revert';
+$string['revertversionconfirm']='<p>This page will be returned to the state it was in as of {$a}, discarding all changes made since then. However, the discarded changes
+will still be available in the page history.</p><p>Are you sure you want to revert to this version of the page?</p>';
+
+$string['deleteversionerrorversion'] = 'Cannot delete nonexistent page version';
+$string['viewdeletedversionerrorcapability'] = 'Error viewing page version';
+$string['deleteversionerror'] = 'Error deleting page version';
+$string['pagedeletedinfo']='Some deleted versions are shown in the list below. These are visible only to users with permission to delete versions. Ordinary users do not see them at all.';
+$string['undelete'] = 'Undelete';
+$string['advice_viewdeleted']='You are viewing a deleted version of this page.';
+
+$string['csvdownload']='Download in spreadsheet format (UTF-8 .csv)';
+$string['excelcsvdownload']='Download in Excel-compatible format (.csv)';
+
+$string['create']='Create';
+$string['createnewpage']='Create new page';
+$string['typeinpagename']='Type page name here';
+$string['add']='Add';
+$string['typeinsectionname']='Type section title here';
+$string['addnewsection']='Add new section to this page';
+$string['addnewsection1']='Add new section';
+$string['createdbyon'] = 'created by {$a->name} on {$a->date}';
+
+$string['numedits'] = '{$a} edits';
+$string['overviewnumentrysince1'] = 'new wiki entry since last login.';
+$string['overviewnumentrysince'] = 'new wiki entries since last login.';
+
+$string['pagenametoolong'] = 'The page name is too long. Use a shorter page name.';
+$string['pagenameisstartpage'] = 'The page name is the same as the start page. Use a different page name.';
+
+$string['ouwiki:lock'] = 'Allowed to lock and unlock pages';
+$string['ouwiki:annotate'] = 'Allowed to annotate';
+$string['orphanedannotations'] = 'Lost annotations';
+$string['annotationsystem'] = 'Annotation system';
+$string['addannotation'] = 'Add annotation';
+$string['annotations'] = 'Annotations';
+$string['deleteorphanedannotations'] = 'Delete lost annotations';
+$string['lockediting'] = 'Lock wiki - no editing';
+$string['lockpage'] = 'Lock page';
+$string['unlockpage'] = 'Unlock page';
+$string['annotate'] = 'Annotate';
+$string['collapseannotation'] = 'Collapse annotation';
+$string['expandannotation'] = 'Expand annotation';
+$string['annotationmarker'] = 'Annotation marker';
+$string['cannotlockpage'] = 'The page could not be locked, your changes have not been saved.';
+$string['thispageislocked'] = 'This wiki page is locked and cannot be edited.';
+$string['emptypagetitle'] = 'The new page title must not be blank.';
+$string['duplicatepagetitle'] = 'The new page title must not be the same as one of the existing page titles.';
+$string['emptysectiontitle'] = 'The new section name must not be blank.';
+
+// Wordcount
+$string['showwordcounts'] = 'Show word counts';
+$string['showwordcounts_help'] = 'If switched on then word counts for the pages will be calculated and displayed at the bottom of the main content.';
+$string['numwords'] = 'Words: {$a}';
+$string['words'] = 'Words';
+
+// Participation
+$string['myparticipation'] = 'My participation';
+$string['userparticipation'] = 'User participation';
+$string['participationbyuser'] = 'Participation by user';
+$string['viewparticipationerrror'] = 'Cannot view user participation.';
+$string['pagescreated'] = 'Pages created';
+$string['pageedits'] = 'Page edits';
+$string['wordsadded'] = 'Words added';
+$string['wordsdeleted'] = 'Words deleted';
+$string['noparticipation'] = 'No participation to show.';
+$string['detail'] = 'detail';
+$string['downloadspreadsheet'] = 'Download as spreadsheet';
+$string['participation'] = 'Participation';
+$string['usergrade'] = 'User grade';
+$string['savegrades'] = 'Save grades';
+$string['gradesupdated'] = 'Grades updated';
+$string['userdetails'] = 'Detail for {$a}';
+$string['viewwikistartpage'] = 'View {$a}';
+$string['viewwikichanges'] = 'Changes for {$a}';
+
+$string['search'] = 'Search this wiki';
+$string['search_help'] = 'Type your search term and press Enter or click the button.
+
+To search for exact phrases use quote marks.
+
+To exclude a word insert a hyphen immediately before the word.
+
+Example: the search term <tt>picasso -sculpture &quot;early works&quot;</tt> will return results for &lsquo;picasso&rsquo; or the phrase &lsquo;early works&rsquo; but will exclude items containing &lsquo;sculpture&rsquo;.';
+
+$string['sizewarning'] = 'This wiki page is very large and may operate slowly.
+If possible, please split the content into logical chunks and
+place it on separate linked pages.';
+
+$string['displayversion'] = 'OU wiki version: <strong>{$a}</strong>';
+
+// OU only
+$string['externaldashboardadd'] = 'Add wiki to dashboard';
+$string['externaldashboardremove'] = 'Remove wiki from dashboard';
+
+// Wiki Form Help
+$string['completion_help'] = '
+<ul>
+<li>
+If you choose "Require new pages" then the wiki will be marked as complete for
+a user once they have created the specified number of pages. With this option,
+users have to create pages from scratch; if somebody else creates the page and
+they then edit it, it doesn\'t count.
+</li>
+
+<li>
+If you choose "Require edits" then the wiki will be marked as complete for a
+user once they make a certain number of edits. The user could be editing
+lots of pages, or editing the same page lots of times; either counts.
+</li>
+</ul>
+
+<p>
+Note that
+writing the first version of a page also counts as an edit, so if you want
+somebody to create a page <i>and</i> make at least one edit other than that,
+set pages to 1 and edits to 2.
+</p>';
+
+$string['annotationsystem_help'] = 'Enables the Annotation tab, for users with the appropriate permission..
+
+With this tab you can add inline annotations to wiki pages (for example, teacher comments on student work).';
+$string['editbegin_help'] = '<p>If you enable this option the wiki enters read-only mode until the given date. In read-only mode users can see pages, navigate between them, view history, and participate in discussions, but they cannot edit pages.</p>';
+$string['editend_help'] = 'If you enable this option the wiki enters read-only mode from the given date onwards.';
+$string['createlinkedwiki'] = 'Creating a new page';
+$string['createlinkedwiki_help'] = 'While editing, you can type a link to a page that doesn&rsquo;t exist yet, such as [[Frogs]]. Then save this page and click on the &lsquo;Frogs&rsquo; link to create the new page.
+
+It is also possible to create new pages from the &lsquo;View&rsquo; tab using the &lsquo;Create new page&rsquo; box.';
+$string['allowediting_help'] = '
+<p>
+If you enable this option the wiki enters read-only mode until the given date. In read-only mode
+users can see pages, navigate between them, view history, and participate in discussions, but they
+cannot edit pages.
+</p>
+
+<h2>Prevent editing from</h2>
+
+<p>
+If you enable this option the wiki enters read-only mode from the given date onwards.
+</p>';
+$string['modulename_help'] = '
+<p>
+A wiki is a web-based system that lets users edit a set of linked pages. In Moodle, you would normally
+use a wiki when you want your students to create content.
+</p>
+
+<p>
+The OU wiki has a variety of options. Please see the individual help by each item for more information.
+</p>';
+$string['subwikis_help'] = '
+<ul>
+<li><strong>Single wiki for course</strong><br />
+This wiki behaves as one single wiki. Everybody on the course sees the same pages.</li>
+<li><strong>One wiki per group</strong><br />
+Members of each group see an entirely separate copy of the wiki (sub-wiki) specific to their
+group. You can only see pages created by people in the same group. If you are in
+more than one group, or you have permissions that allow you to view all groups,
+you get a dropdown to choose a group.</li>
+<li><strong>Separate wiki for every user</strong><br />
+Every single user gets an entirely different wiki. You can only see your own wiki unless
+you have permissions that allow you to view others, when you get a dropdown to choose
+a user. (This can be used as a way for students to contribute work, although you should
+consider other ways to achieve this such as the Assessment activity.)</li>
+</ul>
+
+<p>
+Note that the group option works with the chosen grouping. It will ignore groups in other
+groupings.
+</p>';
+$string['summary_help'] = '
+<p>
+If you enter a summary it will appear on the start page of the wiki. The summary appears
+above the normal, editable wiki text and cannot itself be edited by users.
+</p>
+
+<p>
+Summaries are entirely optional and your wiki may not need one. If you don\'t need a
+summary, just leave the box blank.
+</p>';
+$string['template_help'] = '
+<p>
+A template is a predefined set of wiki pages. When a template is set, the wiki starts off
+with the content defined in the template.
+</p>
+
+<p>
+The template applies to each subwiki; in "One wiki per group" mode, for example, each
+group\'s wiki is initialised with the pages in the template.
+</p>
+
+<p>
+To create a template, write the pages you want on any wiki, then visit the Index page and
+click the "Save wiki as template" button. (You can also manually create templates in other
+software; it is an extremely simple XML format. Look at a saved template to see the format.)
+</p>
+
+<p>
+You can add the template after the wiki has been created. Adding a template only affects
+newly created sub-wiki\'s, existing ones will remain as at present. </p>';
+$string['timeout_help'] = '
+<p>
+If you select a timeout, people editing the wiki are only allowed to edit it for a given time.
+The wiki locks pages while they are being edited (so that two people can\'t edit the same page
+at once), so setting a timeout prevents the wiki becoming locked for others.
+</p>
+
+<h3>What users see</h3>
+
+<p>
+When timeout is enabled, users see a countdown when they edit a page. If the countdown reaches
+zero, their browser will automatically save any changes and stop editing.
+</p>
+
+<h3>Users without Javascript enabled</h3>
+
+<p>
+This option has no effect on users who don\'t have Javascript enabled or who have old browsers.
+A fifteen-minute timeout always applies to these users. When they edit a page, it displays the time
+by which they must save it; if they do not, they might lose their work.
+</p>
+
+<h3>Why you might not need this option</h3>
+
+<p>
+Even when this option is turned off, locks are automatically discarded in the following situations after
+a user has begun to edit a page:
+</p>
+
+<ul>
+<li>Without saving changes or cancelling, the user moves to a different page.</li>
+<li>The user closes their browser.</li>
+<li>The user\'s computer crashes.</li>
+<li>The user loses their Internet connection.</li>
+</ul>
+
+<p>
+In these situations the lock is automatically removed after about two minutes.
+</p>
+
+<p>
+In addition, tutors and course staff have (by default) the ability to override any lock at any time.
+</p>
+
+<h3>What this option doesn\'t do</h3>
+
+<p>
+This option doesn\'t stop somebody holding on to a page and preventing other users from editing it if
+they are very determined. They could edit a page and wait until the timeout is about to expire before
+saving changes then very quickly editing it again.
+</p>';
+$string['endannotation'] = 'End of annotation';
+$string['expandallannotations'] = 'Expand annotations';
+$string['collapseallannotations'] = 'Collapse annotations';
+$string['showannotationicons'] = 'Show annotations';
+$string['hideannotationicons'] = 'Hide annotations';
+$string['errorcoursesubwiki'] = 'Must be &lsquo;No groups&rsquo; unless sub-wikis option is &lsquo;One wiki per group&rsquo;';
+$string['errorgroupssubwiki'] = 'Must be enabled when sub-wikis option is &lsquo;One wiki per group&rsquo;';
+$string['brokenimage'] = '<span class="imgremoved"> Missing image, not included in template. </span>';
+
+$string['add']='Add';
+$string['cancel']='Cancel';
+$string['startannotation'] = 'Start of annotation';
+$string['changedifferences'] = 'Change differences';
+
+$string['pagecheckboxlabel'] = 'Import page, {$a}';
+$string['import'] = 'Import pages';
+$string['import_nocontent'] = 'This wiki activity contains no available content to import.';
+$string['import_selectsubwiki'] = 'Select wiki';
+$string['import_selectsubwiki_help'] = 'Choose from available wikis. Wikis that do not have any content will not be listed.';
+$string['import_selectwiki'] = 'Import from {$a}';
+$string['import_confirm'] = 'Confirm import';
+$string['import_lockedpage'] = 'Page locked';
+$string['import_confirm_infoheader'] = 'Import information';
+$string['import_confirm_mergeheader'] = 'Page conflicts';
+$string['import_confirm_linkheader'] = 'Page links';
+$string['import_confirm_from'] = 'Import from:';
+$string['import_confirm_pages'] = 'Import pages:';
+$string['import_confirm_pages_none'] = 'No pages selected for import.';
+$string['import_confirm_pages_help'] = 'Pages you selected to import, plus any additional pages linked from these.';
+$string['import_confirm_conflicts'] = 'Page conflicts:';
+$string['import_confirm_conflicts_notlocked'] = 'Page not locked';
+$string['import_confirm_conflicts_locked'] = 'Page {$a} is locked';
+$string['import_confirm_conflicts_lockedwarn'] = 'A page to be overwritten is currently locked. Check you are able to edit this page before trying again.';
+$string['import_confirm_conflicts_instruct'] = 'Page \'conflicts\' have been identified where the listed imported page names are the same as an existing page.';
+$string['import_confirm_conflicts_label'] = 'Merge setting:';
+$string['import_confirm_conflicts_option1'] = 'Merge page content';
+$string['import_confirm_conflicts_option2'] = 'Replace existing page content';
+$string['import_confirm_linkfrom'] = 'Add links to new pages to:';
+$string['import_confirm_linkfrom_help'] = 'Select a page in which links to the top level of the new pages will be added.';
+$string['import_confirm_linkfrom_newpage'] = 'New page';
+$string['import_confirm_linkfrom_startpage'] = 'Use imported Start page:';
+$string['import_confirm_linkfrom_startpage1'] = 'Merge into existing Start page content';
+$string['import_confirm_linkfrom_startpage2'] = 'Create new page from imported Start page';
+$string['import_process'] = 'Importing pages';
+$string['import_process_locked'] = 'A page that is to have content imported into is currently locked;
+Either permanently to prevent editing, or temporarily whilst another user is editing content.';
+$string['import_process_startpage_locked'] = 'The start page that is to have content imported into is currently locked;
+Either permanently to prevent editing, or temporarily whilst another user is editing content.';
+$string['import_process_summary'] = 'Summary';
+$string['import_process_summary_success'] = 'The import completed successfully.';
+$string['import_process_summary_warn'] = 'The import completed with warnings.';
+$string['import_process_summary_imported'] = 'Pages imported';
+$string['import_process_summary_updated'] = 'Pages updated';
+$string['allowimport_help'] = 'Checking the box will add the ability to \'import\' pages from other wikis in the course into the current wiki ';
+$string['allowimport'] = 'Link to import pages';
+$string['importedstartpage'] = 'Imported start page';
+$string['importedpages'] = 'Imported pages';
+$string['importedfrom'] = 'Imported from:';
+$string['pagesimported'] = 'Pages imported';
+$string['unabletoimport'] = 'No wiki\'s available to import from.';
+$string['event:ouwikiviewed'] = 'ouwiki view';
+$string['event:pageunlock'] = 'ouwiki unlock';
+$string['event:pagelock'] = 'ouwiki lock';
+$string['event:ouwikiundelete'] = 'ouwiki version undelete';
+$string['event:ouwikidelete'] = 'ouwiki version delete';
+$string['event:ouwikipagecreated'] = 'ouwiki page created';
+$string['event:ouwikipageupdated'] = 'ouwiki page updated';
+$string['event:savefailed'] = 'Session fail on page save';
+$string['ouwikicrontask'] = 'OU wiki maintenance jobs';
diff --git a/mod/ouwiki/lib.php b/mod/ouwiki/lib.php
new file mode 100644
index 0000000..7c430cf
--- /dev/null
+++ b/mod/ouwiki/lib.php
@@ -0,0 +1,878 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Standard API to Moodle core.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/* Do not include any libraries here! */
+
+function ouwiki_add_instance($data, $mform) {
+    global $DB;
+
+    $cmid = $data->coursemodule;
+    $context = context_module::instance($cmid);
+
+    if ($formdata = $data) {
+        // Set up null values
+        $nullvalues = array('editbegin', 'editend', 'timeout');
+        foreach ($nullvalues as $nullvalue) {
+            if (empty($formdata->{$nullvalue})) {
+                unset($formdata->{$nullvalue});
+            }
+        }
+
+        if (strlen(preg_replace('/(<.*?>)|(&.*?;)|\s/', '', $formdata->intro)) == 0) {
+            $formdata->intro = null;
+        }
+
+        // Create record
+        $ouwikiid = $DB->insert_record('ouwiki', $formdata);
+        $formdata->id = $ouwikiid;
+
+        ouwiki_grade_item_update($formdata);
+
+        // template file save
+        $fs = get_file_storage();
+        if (isset($mform) && $filename = $mform->get_new_filename('template_file')) {
+            $file = $mform->save_stored_file('template_file', $context->id, 'mod_ouwiki', 'template', $ouwikiid, '/', $filename);
+            $DB->set_field('ouwiki', 'template', '/'.$file->get_filename(), array('id' => $formdata->id));
+        }
+
+        return $ouwikiid;
+    }
+    // Note: template files will be stored based on the old data structure.
+}
+
+function ouwiki_update_instance($data, $mform) {
+    global $CFG, $DB;
+
+    $data->id = $data->instance;
+
+    // Update main record.
+    $DB->update_record('ouwiki', $data);
+
+    // Set up null values
+    $nullvalues = array('editbegin', 'editend', 'timeout');
+    foreach ($nullvalues as $nullvalue) {
+        if (empty($data->{$nullvalue})) {
+            unset($data->{$nullvalue});
+            $DB->set_field('ouwiki', $nullvalue, null, array('id' => $data->id));
+        }
+    }
+    if (strlen(preg_replace('/(<.*?>)|(&.*?;)|\s/', '', $data->intro)) == 0) {
+        $data->intro = null;
+        $DB->set_field('ouwiki', 'intro', null, array('id' => $data->id));
+    }
+
+    ouwiki_grade_item_update($data);
+
+    if (!$cm = get_coursemodule_from_id('ouwiki', $data->coursemodule)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance.
+    $course = $DB->get_record('course', array('id' => $data->course), '*', MUST_EXIST);
+
+    if ($filename = $mform->get_new_filename('template_file')) {
+        // Delete any previous template files.
+        $cmid = $data->coursemodule;
+        $context = context_module::instance($cmid);
+        $fs = get_file_storage();
+        $fs->delete_area_files($context->id, 'mod_ouwiki', 'template', $data->id);
+        // Add template file.
+        $file = $mform->save_stored_file('template_file', $context->id, 'mod_ouwiki', 'template', $data->id, '/', $filename);
+        $DB->set_field('ouwiki', 'template', '/'.$file->get_filename(), array('id' => $data->id));
+        // Check for empty wikis (i.e. wikis without a start page already created).
+        $subwikis = ouwiki_get_subwikis($data->id);
+        $ouwiki = $DB->get_record_select('ouwiki', 'id = ?', array($data->id));
+        foreach ($subwikis as $subwiki) {
+            if (!ouwiki_subwiki_content_exists($subwiki->id)) {
+                // Amend any empty wikis from template.
+                ouwiki_init_pages($course, $cm, $ouwiki, $subwiki);
+            }
+        }
+    }
+
+    return true;
+}
+
+function ouwiki_delete_instance($id) {
+    global $DB, $CFG;
+
+    require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+    $cm = get_coursemodule_from_instance('ouwiki', $id, 0, false, MUST_EXIST);
+
+    // Delete associated template data.
+    $context = context_module::instance($cm->id);
+    $fs = get_file_storage();
+    $fs->delete_area_files($context->id, 'mod_ouwiki', 'template', $id);
+
+    // Delete search data
+    if (ouwiki_search_installed()) {
+        local_ousearch_document::delete_module_instance_data($cm);
+    }
+
+    // Delete grade
+    $ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance));
+    ouwiki_grade_item_delete($ouwiki);
+
+    // Subqueries that find all versions and pages associated with this wiki
+    // and delete them all bottom up
+    $versions = $DB->get_records_sql("SELECT DISTINCT v.id
+                        FROM {ouwiki_subwikis} s
+                        INNER JOIN {ouwiki_pages} p ON p.subwikiid = s.id
+                        INNER JOIN {ouwiki_versions} v ON v.pageid = p.id
+                        WHERE s.wikiid = ?", array($id));
+    if (!empty($versions)) {
+        list($vsql, $vparams) = $DB->get_in_or_equal(array_keys($versions));
+        $DB->delete_records_select('ouwiki_links', "fromversionid $vsql", $vparams);
+    }
+
+    $pages = $DB->get_records_sql("SELECT p.id
+                    FROM {ouwiki_subwikis} s
+                    INNER JOIN {ouwiki_pages} p ON p.subwikiid = s.id
+                    WHERE s.wikiid = ?", array($id));
+    if (!empty($pages)) {
+        list($psql, $pparams) = $DB->get_in_or_equal(array_keys($pages));
+        $DB->delete_records_select('ouwiki_versions', "pageid $psql", $pparams);
+        $DB->delete_records_select('ouwiki_locks', "pageid $psql", $pparams);
+        $DB->delete_records_select('ouwiki_sections', "pageid $psql", $pparams);
+    }
+
+    $subwikis = $DB->get_records_sql("SELECT s.id
+                        FROM {ouwiki_subwikis} s
+                        WHERE s.wikiid = ?", array($id));
+    if (!empty($subwikis)) {
+        list($swsql, $swparams) = $DB->get_in_or_equal(array_keys($subwikis));
+        $DB->delete_records_select('ouwiki_pages', "subwikiid $swsql", $swparams);
+    }
+
+    $DB->delete_records_select('ouwiki_subwikis', 'wikiid = ?', array($id));
+    $DB->delete_records('ouwiki', array('id' => $id));
+    return true;
+}
+
+/**
+ * @return array List of all system capabilitiess used in module
+ */
+function ouwiki_get_extra_capabilities() {
+    // Note: I made this list by searching for moodle/ within the module
+    return array('moodle/site:accessallgroups', 'moodle/site:viewfullnames',
+            'moodle/course:manageactivities', 'report/restrictuser:view',
+            'report/restrictuser:restrict', 'report/restrictuser:removerestrict');
+}
+
+/**
+ * Update all wiki documents for ousearch.
+ *
+ * @param bool $feedback If true, prints feedback as HTML list items
+ * @param int $courseid If specified, restricts to particular courseid
+ */
+function ouwiki_ousearch_update_all($feedback = null, $courseid = 0) {
+    global $CFG, $DB;
+    require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+    // Get list of all wikis. We need the coursemodule data plus
+    // the type of subwikis
+    $coursecriteria = $courseid === 0 ? '' : 'AND cm.course = '.$courseid;
+    $sql = "SELECT cm.id, cm.course, cm.instance, w.subwikis
+                                            FROM {modules} m
+                                            INNER JOIN {course_modules} cm ON cm.module = m.id
+                                            INNER JOIN {ouwiki} w ON cm.instance = w.id
+                                        WHERE m.name = 'ouwiki' {$coursecriteria}";
+    $coursemodules = $DB->get_records_sql($sql, array());
+
+    if (!$coursemodules) {
+        return;
+    }
+
+    if ($feedback) {
+        print '<li><strong>'.count($coursemodules).'</strong> wikis to process.</li>';
+        $dotcount = 0;
+    }
+
+    $count = 0;
+    foreach ($coursemodules as $coursemodule) {
+
+        // This condition is needed because if somebody creates some stuff
+        // then changes the wiki type, it actually keeps the old bits
+        // in the database. Maybe it shouldn't, not sure.
+        switch($coursemodule->subwikis) {
+            case OUWIKI_SUBWIKIS_SINGLE:
+                $where = "sw.userid IS NULL AND sw.groupid IS NULL";
+                break;
+
+            case OUWIKI_SUBWIKIS_GROUPS:
+                $where = "sw.userid IS NULL AND sw.groupid IS NOT NULL";
+                break;
+
+            case OUWIKI_SUBWIKIS_INDIVIDUAL:
+                $where = "sw.userid IS NOT NULL AND sw.groupid IS NULL";
+                break;
+        }
+
+        // Get all pages in that wiki
+        $sql = "SELECT p.id, p.title, v.xhtml, v.timecreated, sw.groupid, sw.userid
+            FROM {ouwiki_subwikis} sw
+            INNER JOIN {ouwiki_pages} p ON p.subwikiid = sw.id
+            INNER JOIN {ouwiki_versions} v ON v.id = p.currentversionid
+            WHERE sw.wikiid = ? AND $where";
+        $rs = $DB->get_recordset_sql($sql, array($coursemodule->instance));
+
+        foreach ($rs as $result) {
+
+            // Update the page for search
+            $doc = new local_ousearch_document();
+            $doc->init_module_instance('ouwiki', $coursemodule);
+            if ($result->groupid) {
+                $doc->set_group_id($result->groupid);
+            }
+            if ($result->title) {
+                $doc->set_string_ref($result->title);
+            }
+            if ($result->userid) {
+                $doc->set_user_id($result->userid);
+            }
+            $title = $result->title ? $result->title : '';
+            $doc->update($title, $result->xhtml, $result->timecreated);
+        }
+        $rs->close();
+
+        $count++;
+        if ($feedback) {
+            if ($dotcount == 0) {
+                print '<li>';
+            }
+            print '.';
+            $dotcount++;
+            if ($dotcount == 20 || $count == count($coursemodules)) {
+                print 'done '.$count.'</li>';
+                $dotcount = 0;
+            }
+            flush();
+        }
+    }
+}
+
+/**
+ * Obtains a search document given the ousearch parameters.
+ * @param object $document Object containing fields from the ousearch documents table
+ * @return mixed False if object can't be found, otherwise object containing the following
+ *   fields: ->content, ->title, ->url, ->activityname, ->activityurl
+ */
+function ouwiki_ousearch_get_document($document) {
+    global $CFG, $DB;
+
+    $params = array($document->coursemoduleid);
+
+    $titlecondition = 'AND p.title =  \'\'';
+    if (!empty($document->stringref)) {
+        $titlecondition = ' AND p.title = ?';
+        $params[] = $document->stringref;
+    }
+
+    $groupconditions = '';
+    if (is_null($document->groupid)) {
+        $groupconditions .= ' AND sw.groupid IS NULL';
+    } else {
+        $groupconditions .= ' AND sw.groupid = ?';
+        $params[] = $document->groupid;
+    }
+    if (is_null($document->userid)) {
+        $groupconditions .= ' AND sw.userid IS NULL';
+    } else {
+        $groupconditions .= ' AND sw.userid = ?';
+        $params[] = $document->userid;
+    }
+
+    $sql = "SELECT w.name AS activityname, p.title AS title, v.xhtml AS content
+        FROM {course_modules} cm
+        INNER JOIN {ouwiki} w ON cm.instance = w.id
+        INNER JOIN {ouwiki_subwikis} sw ON sw.wikiid = w.id
+        INNER JOIN {ouwiki_pages} p ON p.subwikiid = sw.id
+        INNER JOIN {ouwiki_versions} v ON v.id = p.currentversionid
+            WHERE cm.id = ?
+            $titlecondition
+            $groupconditions";
+
+    $result = $DB->get_record_sql($sql, $params);
+
+    if (!$result) {
+        return false;
+    }
+
+    if ($result->title == '') {
+        $result->title = get_string('startpage', 'ouwiki');
+    }
+    $result->activityurl = new moodle_url('/mod/ouwiki/view.php', array('id' => $document->coursemoduleid));
+    $result->url = $result->activityurl;
+    if ($document->stringref !== '') {
+        $result->url .= '&page='.urlencode($document->stringref);
+    }
+    if ($document->groupid) {
+        $result->url .= '&group='.$document->groupid;
+    }
+    if ($document->userid) {
+        $result->url .= '&user='.$document->userid;
+    }
+    return $result;
+}
+
+/**
+ * Indicates API features that the ouwiki supports.
+ *
+ * @param string $feature
+ * @return mixed True if yes (some features may use other values)
+ */
+function ouwiki_supports($feature) {
+    switch($feature) {
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
+        case FEATURE_COMPLETION_HAS_RULES: return true;
+        case FEATURE_BACKUP_MOODLE2: return true;
+        case FEATURE_GRADE_HAS_GRADE: return true;
+        case FEATURE_GROUPINGS: return true;
+        case FEATURE_GROUPS: return true;
+        case FEATURE_SHOW_DESCRIPTION: return true;
+        default: return null;
+    }
+}
+
+/**
+ * Obtains the automatic completion state for this module based on any conditions
+ * in module settings.
+ *
+ * @param object $course Course
+ * @param object $cm Course-module
+ * @param int $userid User ID
+ * @param bool $type Type of comparison (or/and; can be used as return value if no conditions)
+ * @return bool True if completed, false if not, $type if conditions not set.
+ */
+function ouwiki_get_completion_state($course, $cm, $userid, $type) {
+    global $CFG, $DB;
+
+    // Get forum details
+    $ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance));
+
+    $countsql = "SELECT COUNT(1)
+            FROM {ouwiki_versions} v
+                INNER JOIN {ouwiki_pages} p ON p.id = v.pageid
+                INNER JOIN {ouwiki_subwikis} s ON s.id = p.subwikiid
+            WHERE v.userid = ? AND v.deletedat IS NULL AND s.wikiid = ?";
+
+    $result = $type; // Default return value
+
+    if ($ouwiki->completionedits) {
+        $value = $ouwiki->completionedits <= $DB->get_field_sql($countsql, array($userid, $ouwiki->id));
+        if ($type == COMPLETION_AND) {
+            $result = $result && $value;
+        } else {
+            $result = $result || $value;
+        }
+    }
+    if ($ouwiki->completionpages) {
+        $value = $ouwiki->completionpages <=
+            $DB->get_field_sql($countsql.
+            ' AND (SELECT MIN(id)
+                FROM {ouwiki_versions}
+                WHERE pageid = p.id AND deletedat IS NULL) = v.id',
+                array($userid, $ouwiki->id));
+        if ($type == COMPLETION_AND) {
+            $result = $result && $value;
+        } else {
+            $result = $result || $value;
+        }
+    }
+
+    return $result;
+}
+
+/**
+ * This function prints the recent activity (since current user's last login)
+ * for specified courses.
+ * @param array $courses Array of courses to print activity for.
+ * @param string by reference $htmlarray Array of html snippets for display some
+ *        -where, which this function adds its new html to.
+ */
+function ouwiki_print_overview($courses, &$htmlarray) {
+    global $USER, $CFG, $DB;
+
+    if (empty($courses) || !is_array($courses) || count($courses) == 0) {
+        return array();
+    }
+
+    if (!$wikis = get_all_instances_in_courses('ouwiki', $courses)) {
+        return;
+    }
+
+    // get all ouwiki logs in ONE query (much better!)
+    $params = array();
+    $sql = 'SELECT instance, cmid, l.course, COUNT(l.id) as count
+                FROM {log} l
+                JOIN {course_modules} cm ON cm.id = cmid
+            WHERE (';
+
+    foreach ($courses as $course) {
+        $params[] = $course->id;
+        $params[] = $course->lastaccess;
+        $sql .= '(l.course = ? AND l.time > ?) OR ';
+    }
+    $sql = substr($sql, 0, -3); // take off the last OR
+
+    $sql .= ") AND l.module = 'ouwiki' AND action = 'edit' "
+        ." AND userid != ? GROUP BY cmid, l.course, instance";
+    $params[] = $USER->id;
+
+    try {
+        $new = $DB->get_records_sql($sql, $params);
+    } catch (Exception $e) {
+        ouwiki_dberror($e);
+    }
+
+    $strwikis = get_string('modulename', 'ouwiki');
+    $strnumrespsince1 = get_string('overviewnumentrysince1', 'ouwiki');
+    $strnumrespsince = get_string('overviewnumentrysince', 'ouwiki');
+
+    // Go through the list of all wikis build previously, and check whether
+    // they have had any activity.
+    foreach ($wikis as $wiki) {
+
+        if (array_key_exists($wiki->id, $new) && !empty($new[$wiki->id])) {
+            $count = $new[$wiki->id]->count;
+
+            if ($count > 0) {
+                if ($count == 1) {
+                    $strresp = $strnumrespsince1;
+                } else {
+                    $strresp = $strnumrespsince;
+                }
+
+                $viewurl = new moodle_url('/mod/ouwiki/view.php', array('id' => $wiki->coursemodule));
+                $str = '<div class="overview wiki"><div class="name">'.
+                    $strwikis.': <a title="'.$strwikis.'" href="'.$viewurl.'">'.
+                    $wiki->name.'</a></div>';
+                $str .= '<div class="info">';
+                $str .= $count.' '.$strresp;
+                $str .= '</div></div>';
+
+                if (!array_key_exists($wiki->course, $htmlarray)) {
+                    $htmlarray[$wiki->course] = array();
+                }
+                if (!array_key_exists('wiki', $htmlarray[$wiki->course])) {
+                    $htmlarray[$wiki->course]['wiki'] = ''; // initialize, avoid warnings
+                }
+                $htmlarray[$wiki->course]['wiki'] .= $str;
+            }
+        }
+    }
+}
+
+/**
+ * Returns summary information about what a user has done,
+ * for user activity reports.
+ *
+ * @param stdClass $course
+ * @param stdClass $user
+ * @param stdClass $mod
+ * @param stdClass $wiki
+ * @return stdClass A standard object with 2 variables: info (number of edits for this user) and time (last modified)
+ */
+function ouwiki_user_outline($course, $user, $mod, $wiki) {
+    global $DB, $CFG;
+
+    // Get user grades.
+    require_once("$CFG->libdir/gradelib.php");
+    $grades = grade_get_grades($course->id, 'mod', 'ouwiki', $wiki->id, $user->id);
+    if (empty($grades->items[0]->grades)) {
+        $grade = false;
+    } else {
+        $grade = reset($grades->items[0]->grades);
+        if ($grade->str_grade == '-') {
+            $grade = false;
+        }
+    }
+
+    // Get user edits.
+    $params = array(
+        'userid' => $user->id,
+        'ouwikiid' => $wiki->id
+    );
+
+    $vsql = "SELECT v.id AS versionid, v.timecreated
+               FROM {ouwiki_pages} p
+               JOIN {ouwiki_subwikis} s ON s.id = p.subwikiid
+               JOIN {ouwiki_versions} v ON v.pageid = p.id
+              WHERE v.userid = :userid
+                AND s.wikiid = :ouwikiid
+                AND v.deletedat IS NULL
+           ORDER BY v.timecreated ASC";
+    $versions = $DB->get_records_sql($vsql, $params);
+
+    $result = null;
+
+    if (!empty($versions)) {
+        $result = new stdClass();
+        $result->info = get_string('numedits', 'ouwiki', count($versions));
+
+        if ($grade) {
+            $result->info .= ', ' . get_string('grade') . ': ' . $grade->str_long_grade;
+        }
+
+        $timecreated = end($versions)->timecreated;
+
+        $result->time = $timecreated;
+    } else if ($grade) {
+        $result = new stdClass();
+        $result->info = get_string('grade') . ': ' . $grade->str_long_grade;
+        // If grade was last modified by the user themselves use date graded. Otherwise use date submitted.
+        if ($grade->usermodified == $user->id || empty($grade->datesubmitted)) {
+            $result->time = $grade->dategraded;
+        } else {
+            $result->time = $grade->datesubmitted;
+        }
+    }
+
+    return $result;
+}
+
+/**
+ * Prints detailed summary information about what a user has done,
+ * for user activity reports.
+ *
+ * @param stdClass $course
+ * @param stdClass $user
+ * @param stdClass $mod
+ * @param stdClass $wiki
+ */
+function ouwiki_user_complete($course, $user, $mod, $wiki) {
+    global $DB, $CFG, $OUTPUT, $USER, $PAGE;
+
+    require_once("$CFG->libdir/gradelib.php");
+    require_once("$CFG->dirroot/mod/ouwiki/locallib.php");
+
+    $grades = grade_get_grades($course->id, 'mod', 'ouwiki', $wiki->id, $user->id);
+    if (!empty($grades->items[0]->grades)) {
+        $grade = reset($grades->items[0]->grades);
+        if ($grade != '-') {
+            echo $OUTPUT->container(get_string('grade') . ': ' . $grade->str_long_grade);
+            if ($grade->str_feedback) {
+                echo $OUTPUT->container(get_string('feedback') . ': ' . $grade->str_feedback);
+            }
+        }
+    }
+
+    $usergroups = array();
+    if ($wiki->subwikis == 1) {
+        $wikigroups = groups_get_activity_allowed_groups($mod);
+        foreach ($wikigroups as $mygroup) {
+            if (groups_is_member($mygroup->id, $user->id)) {
+                $usergroups[] = $mygroup;
+            }
+        }
+    }
+
+    $context = context_module::instance($mod->id);
+    $fullname = fullname($user, has_capability('moodle/site:viewfullnames', $context));
+
+    $ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+    echo '<div class="ouwiki_user_complete_report">';
+    if (empty($usergroups)) {
+        $subwiki = ouwiki_get_subwiki($course, $wiki, $mod, $context, 0, $user->id, true);
+        $canview = ouwiki_can_view_participation($course, $wiki, $subwiki, $mod, $USER->id);
+        list($newuser, $changes) = ouwiki_get_user_participation($user->id, $subwiki);
+        echo $ouwikioutput->ouwiki_render_user_participation($user, $changes, $mod, $course, $wiki,
+            $subwiki, '', 0, '', $canview, $context, $fullname,
+            false, '');
+    } else {
+        foreach ($usergroups as $group) {
+            $subwiki = ouwiki_get_subwiki($course, $wiki, $mod, $context, $group->id, $user->id, true);
+            $canview = ouwiki_can_view_participation($course, $wiki, $subwiki, $mod, $USER->id);
+            list($newuser, $changes) = ouwiki_get_user_participation($user->id, $subwiki);
+            echo $OUTPUT->heading(get_string('group') . ': ' . $group->name, 5);
+            echo $ouwikioutput->ouwiki_render_user_participation($user, $changes, $mod, $course, $wiki,
+                $subwiki, '', $group->id, '', $canview, $context, $fullname,
+                false, $group->name);
+        }
+    }
+    echo '</div>';
+}
+
+/**
+ * Serves the ouwiki attachments. Implements needed access control ;-)
+ *
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param array $args
+ * @param bool $forcedownload
+ * @return bool false if file not found, does not return if found - justsend the file
+ */
+function ouwiki_pluginfile($course, $cm, $context, $filearea, $args, $forcedownload) {
+    global $CFG, $DB, $USER;
+
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return false;
+    }
+
+    require_course_login($course, true, $cm);
+
+    $fileareas = array('attachment', 'content');
+    if (!in_array($filearea, $fileareas)) {
+        return false;
+    }
+
+    $versionid = (int)array_shift($args);
+
+    if (!$version = $DB->get_record('ouwiki_versions', array('id' => $versionid))) {
+        return false;
+    }
+
+    $fs = get_file_storage();
+    $relativepath = implode('/', $args);
+    $fullpath = "/$context->id/mod_ouwiki/$filearea/$versionid/$relativepath";
+    if (!$file = $fs->get_file_by_hash(sha1($fullpath)) or $file->is_directory()) {
+        return false;
+    }
+
+    require_capability('mod/ouwiki:view', $context);
+
+    send_stored_file($file, 0, 0, true); // download MUST be forced - security!
+}
+
+/**
+ * File browsing support for ouwiki module.
+ * @param object $browser
+ * @param object $areas
+ * @param object $course
+ * @param object $cm
+ * @param object $context
+ * @param string $filearea
+ * @param int $itemid
+ * @param string $filepath
+ * @param string $filename
+ * @return file_info instance Representing an actual file or folder (null if not found
+ * or cannot access)
+ */
+function ouwiki_get_file_info($browser, $areas, $course, $cm, $context, $filearea,
+        $itemid, $filepath, $filename) {
+    global $CFG, $DB, $USER;
+
+    if ($context->contextlevel != CONTEXT_MODULE) {
+        return null;
+    }
+    $fileareas = array('attachment', 'content');
+    if (!in_array($filearea, $fileareas)) {
+        return null;
+    }
+    if (!has_capability('mod/ouwiki:view', $context)) {
+        return null;
+    }
+    if (!$pageid = $DB->get_field('ouwiki_versions', 'pageid',
+            array('id' => $itemid), IGNORE_MISSING)) {
+        return null;
+    }
+    if (!$subwikiid = $DB->get_field('ouwiki_pages', 'subwikiid',
+            array('id' => $pageid), IGNORE_MISSING)) {
+        return null;
+    }
+    $groupid = $DB->get_field('ouwiki_subwikis', 'groupid',
+            array('id' => $subwikiid), IGNORE_MISSING);
+    // Make sure groups allow this user to see this file
+    if ($groupid) {
+        if (groups_get_activity_groupmode($cm, $course) == SEPARATEGROUPS) {
+            // Groups are being used
+            if (!groups_group_exists($groupid)) {
+                // Can't find group
+                return null;
+            }
+            if (!has_capability('moodle/site:accessallgroups', $context) &&
+                    !groups_is_member($groupid)) {
+                return null;
+            }
+        }
+    }
+    $userid = $DB->get_field('ouwiki_subwikis', 'userid',
+            array('id' => $subwikiid), IGNORE_MISSING);
+    if ($userid) {
+        if ($userid != $USER->id && !has_capability('mod/ouwiki:viewallindividuals', $context)) {
+            if (has_capability('mod/ouwiki:viewgroupindividuals', $context)) {
+                $params = array($course->id, $userid, $USER->id);
+                $query = "
+                FROM
+                    {groups} gp
+                    INNER JOIN {groups_members} gm ON gp.id = gm.groupid
+                    INNER JOIN {groups_members} gms ON gp.id = gms.groupid
+                WHERE
+                    gp.courseid = ? AND gm.userid = ? AND gms.userid = ?";
+
+                $count = $DB->count_records_sql("SELECT COUNT(1) $query", $params);
+                if ($count == 0) {
+                    return null;
+                }
+            } else {
+                return null;
+            }
+        }
+    }
+
+    $fs = get_file_storage();
+    $filepath = is_null($filepath) ? '/' : $filepath;
+    $filename = is_null($filename) ? '.' : $filename;
+    if (!($storedfile = $fs->get_file($context->id, 'mod_ouwiki', $filearea, $itemid,
+            $filepath, $filename))) {
+        return null;
+    }
+
+    $urlbase = $CFG->wwwroot . '/pluginfile.php';
+    return new file_info_stored($browser, $context, $storedfile, $urlbase, $filearea,
+            $itemid, true, true, false);
+}
+
+/**
+ * Create grade item for given ouwiki
+ *
+ * @param object $ouwiki object with extra cmidnumber
+ * @param mixed optional array/object of grade(s); 'reset' means reset grades in gradebook
+ * @return int 0 if ok, error code otherwise
+ */
+function ouwiki_grade_item_update($ouwiki, $grades = null) {
+    global $CFG;
+    require_once($CFG->libdir.'/gradelib.php');
+
+    $params = array('itemname' => $ouwiki->name);
+
+    if ($ouwiki->grade > 0) {
+        $params['gradetype'] = GRADE_TYPE_VALUE;
+        $params['grademax']  = $ouwiki->grade;
+        $params['grademin']  = 0;
+
+    } else if ($ouwiki->grade < 0) {
+        $params['gradetype'] = GRADE_TYPE_SCALE;
+        $params['scaleid']   = -$ouwiki->grade;
+
+    } else {
+        $params['gradetype'] = GRADE_TYPE_NONE;
+    }
+
+    if ($grades  === 'reset') {
+        $params['reset'] = true;
+        $grades = null;
+    }
+
+    return grade_update('mod/ouwiki', $ouwiki->course, 'mod',
+        'ouwiki', $ouwiki->id, 0, $grades, $params);
+}
+
+/**
+ * Deletes grade item for given ouwiki.
+ *
+ * @param object $ouwiki object
+ * @return int GRADE_UPDATE_xx constant
+ */
+function ouwiki_grade_item_delete($ouwiki) {
+    global $CFG;
+    require_once($CFG->libdir.'/gradelib.php');
+
+    return grade_update('mod/ouwiki', $ouwiki->course, 'mod',
+        'ouwiki', $ouwiki->id, 0, null, array('deleted' => 1));
+}
+
+/**
+ * Sets the module uservisible to false if the user has not got the view capability
+ * @param cm_info $cm
+ */
+function ouwiki_cm_info_dynamic(cm_info $cm) {
+    if (!has_capability('mod/ouwiki:view',
+            context_module::instance($cm->id))) {
+        $cm->set_user_visible(false);
+        $cm->set_available(false);
+    }
+}
+
+/**
+ * Show last updated date + time (version created).
+ *
+ * @param cm_info $cm
+ */
+function ouwiki_cm_info_view(cm_info $cm) {
+    global $CFG;
+    if (!$cm->uservisible) {
+        return;
+    }
+    require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+    $lastpostdate = ouwiki_get_last_modified($cm, $cm->get_course());
+    if (!empty($lastpostdate)) {
+        $cm->set_after_link(html_writer::span(get_string('lastmodified', 'ouwiki',
+                userdate($lastpostdate, get_string('strftimerecent', 'ouwiki'))), 'lastmodtext ouwikilmt'));
+    }
+}
+
+/**
+ * Return wikis on course that have last modified date for current user
+ *
+ * @param stdClass $course
+ * @return array
+ */
+function ouwiki_get_ourecent_activity($course) {
+    global $CFG;
+    require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+    $modinfo = get_fast_modinfo($course);
+
+    $return = array();
+
+    foreach ($modinfo->get_instances_of('ouwiki') as $wiki) {
+        if ($wiki->uservisible) {
+            $lastpostdate = ouwiki_get_last_modified($wiki, $wiki->get_course());
+            if (!empty($lastpostdate)) {
+                $data = new stdClass();
+                $data->cm = $wiki;
+                $data->text = get_string('lastmodified', 'ouwiki',
+                        userdate($lastpostdate, get_string('strftimerecent', 'ouwiki')));
+                $data->date = $lastpostdate;
+                $return[$data->cm->id] = $data;
+            }
+        }
+    }
+    return $return;
+}
+
+
+/**
+ * List of view style log actions
+ * @return array
+ */
+function ouwiki_get_view_actions() {
+    return array('view', 'view all', 'viewold', 'wikihistory', 'wikiindex', 'history',
+            'entirewiki', 'search');
+}
+
+/**
+ * List of update style log actions
+ * @return array
+ */
+function ouwiki_get_post_actions() {
+    return array('update', 'add', 'annotate', 'edit');
+}
diff --git a/mod/ouwiki/locallib.php b/mod/ouwiki/locallib.php
new file mode 100644
index 0000000..5a3ab74
--- /dev/null
+++ b/mod/ouwiki/locallib.php
@@ -0,0 +1,3980 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Local library file for ouwiki.  These are non-standard functions that are used
+ * only by ouwiki.
+ *
+ * @package    mod
+ * @subpackage ouwiki
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or late
+ **/
+
+/* Make sure this isn't being directly accessed */
+defined('MOODLE_INTERNAL') || die();
+
+/* Include the files that are required by this module */
+require_once($CFG->dirroot . '/mod/ouwiki/lib.php');
+require_once($CFG->dirroot . '/mod/ouwiki/difflib.php');
+require_once($CFG->libdir . '/portfolio/caller.php');
+
+// subwikis
+define('OUWIKI_SUBWIKIS_SINGLE', 0);
+define('OUWIKI_SUBWIKIS_GROUPS', 1);
+define('OUWIKI_SUBWIKIS_INDIVIDUAL', 2);
+
+// locks
+define('OUWIKI_LOCK_PERSISTENCE', 120);
+define('OUWIKI_LOCK_RECONFIRM', 60);
+define('OUWIKI_LOCK_NOJS', 15*60);
+define('OUWIKI_LOCK_TIMEOUT', 30*60);
+define('OUWIKI_SESSION_LOCKS', 'ouwikilocks'); // Session variable used to store wiki locks
+
+// format params
+define('OUWIKI_PARAMS_LINK', 0);
+define('OUWIKI_PARAMS_FORM', 1);
+define('OUWIKI_PARAMS_URL', 2);
+define('OUWIKI_PARAMS_ARRAY', 3);
+
+define('OUWIKI_FORMAT_HTML', 'html');
+define('OUWIKI_FORMAT_RTF', 'rtf');
+define('OUWIKI_FORMAT_TEMPLATE', 'template');
+
+// pages
+define('OUWIKI_GETPAGE_REQUIREVERSION', 0);
+define('OUWIKI_GETPAGE_ACCEPTNOVERSION', 1);
+define('OUWIKI_GETPAGE_CREATE', 2);
+define('OUWIKI_PAGESIZE', 50);
+define('OUWIKI_MAXRESULTS', 50);
+define('OUWIKI_RESULTSPERPAGE', 10);
+
+// general
+define('OUWIKI_LINKS_SQUAREBRACKETS', '/\[\[(.*?)\]\]/');
+define('OUWIKI_SYSTEMUSER', -1);
+define('OUWIKI_TIMEOUT_EXTRA', 60);
+define('OUWIKI_FEEDSIZE', 50);
+
+// participation
+define('OUWIKI_NO_PARTICIPATION', 0);
+define('OUWIKI_MY_PARTICIPATION', 1);
+define('OUWIKI_USER_PARTICIPATION', 2);
+define('OUWIKI_PARTICIPATION_PERPAGE', 100);
+
+// User preference
+define('OUWIKI_PREF_HIDEANNOTATIONS', 'ouwiki_hide_annotations');
+
+function ouwiki_dberror($error, $source = null) {
+    if (!$source) {
+        $backtrace = debug_backtrace();
+        $source = preg_replace('@^.*/(.*)(\.php)?$@', '\1',
+                $backtrace[0]['file']).'/'.$backtrace[0]['line'];
+    }
+    print_error('Database problem: '.$error.' (code OUWIKI-'.$source.')');
+}
+
+function ouwiki_error($text, $source = null) {
+    if (!$source) {
+        $backtrace = debug_backtrace();
+        $source = preg_replace('^.*/(.*)(\.php)?$^', '$1',
+                $backtrace[0]['file']).'/'.$backtrace[0]['line'];
+    }
+    print_error("Wiki error: $text (code OUWIKI-$source)");
+}
+
+/**
+ * Gets cm, ouwiki and subwiki based on selected activity id and subwiki id
+ * Populates vars sent, overriding initial values
+ * @param int $selectedact cm id
+ * @param int $selectedsubwiki subwiki id
+ * @param null $selectedouwiki empty
+ * @param object $course
+ * @param bool $ignorechecks Set to true to ignore activity + subwiki access checks
+ */
+function ouwiki_get_wikiinfo(&$selectedact, &$selectedsubwiki, &$selectedouwiki, $course,
+        $ignorechecks = false) {
+    global $DB;
+    $modinfo = get_fast_modinfo($course);
+    $selectedact = $modinfo->get_cm($selectedact);
+    $selectedcontext = context_module::instance($selectedact->id);
+    // Basic checks that it is OK to continue using activity.
+    if (!$ignorechecks && (!$selectedact->uservisible ||
+            !has_capability('mod/ouwiki:view', $selectedcontext))) {
+        ouwiki_error('You are not able to access the selected wiki.');
+    }
+    // Get sub wiki selected - joining to wiki activity and cm to verify all correct.
+    $sql = 'SELECT ouwiki.*, sw.userid, sw.groupid FROM {ouwiki_subwikis} sw
+    JOIN {ouwiki} ouwiki on ouwiki.id = sw.wikiid
+    JOIN {course_modules} cm on cm.instance = ouwiki.id
+    and cm.module = (SELECT id FROM {modules} where name = ?)
+    WHERE sw.id = ?';
+    $selectedouwiki = $DB->get_record_sql($sql, array('ouwiki', $selectedsubwiki), MUST_EXIST);
+
+    // Get our subwiki using locallib function to check access.
+    if (!$ignorechecks) {
+        $selectedsubwiki = ouwiki_get_subwiki($course, $selectedouwiki, $selectedact, $selectedcontext,
+                $selectedouwiki->groupid, $selectedouwiki->userid, false);
+    } else {
+        $selectedsubwiki = $DB->get_record('ouwiki_subwikis', array('id' => $selectedsubwiki));
+    }
+}
+
+/**
+ * Obtains the appropriate subwiki object for a request. If one cannot
+ * be obtained, either creates one or calls error() and stops.
+ *
+ * @param object $ouwiki Wiki object
+ * @param object $cm Course-module object
+ * @param object $context Context to use for checking permissions
+ * @param int $groupid Group ID or 0 to use any appropriate group
+ * @param int $userid User ID or 0 to use current user
+ * @param bool $create If true, creates a wiki if it doesn't exist
+ * @return mixed Object with the data from the subwiki table. Also has extra 'canedit' field
+ *   set to true if that's allowed.
+ */
+function ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $groupid, $userid, $create = null) {
+    global $USER, $DB;
+
+    switch($ouwiki->subwikis) {
+
+        case OUWIKI_SUBWIKIS_SINGLE:
+            $subwiki = $DB->get_record_select('ouwiki_subwikis', 'wikiid = ? AND groupid IS NULL
+            AND userid IS NULL', array($ouwiki->id));
+            if ($subwiki) {
+                ouwiki_set_extra_subwiki_fields($subwiki, $ouwiki, $context);
+                return $subwiki;
+            }
+            if ($create) {
+                $subwiki = ouwiki_create_subwiki($ouwiki, $cm, $course);
+                ouwiki_set_extra_subwiki_fields($subwiki, $ouwiki, $context);
+                ouwiki_init_pages($course, $cm, $ouwiki, $subwiki);
+                return $subwiki;
+            }
+            ouwiki_error('Wiki does not exist. View wikis before attempting other actions.');
+            break;
+
+        case OUWIKI_SUBWIKIS_GROUPS:
+            if (empty($groupid)) {
+                $groupid = groups_get_activity_group($cm, true);
+            }
+            if (!$groupid) {
+                // Active group not known - get first group available.
+                $groups = groups_get_activity_allowed_groups($cm);
+                if (!$groups) {
+                    if (!groups_get_all_groups($cm->course, 0, $cm->groupingid)) {
+                        ouwiki_error('This wiki cannot be displayed because it is a group wiki,
+                                but no groups have been set up for the course (or grouping, if selected).');
+                    } else {
+                        ouwiki_error('You do not have access to any of the groups in this wiki.');
+                    }
+                }
+                $groupid = reset($groups)->id;
+            }
+            $othergroup = !groups_is_member($groupid);
+            $subwiki = $DB->get_record_select('ouwiki_subwikis', 'wikiid = ? AND groupid = ?
+                    AND userid IS NULL', array($ouwiki->id, $groupid));
+            if ($subwiki) {
+                ouwiki_set_extra_subwiki_fields($subwiki, $ouwiki, $context, $othergroup);
+                return $subwiki;
+            }
+            if ($create) {
+                $subwiki =  ouwiki_create_subwiki($ouwiki, $cm, $course, null, $groupid);
+                ouwiki_set_extra_subwiki_fields($subwiki, $ouwiki, $context, $othergroup);
+                ouwiki_init_pages($course, $cm, $ouwiki, $subwiki);
+                return $subwiki;
+            }
+            ouwiki_error('Wiki does not exist. View wikis before attempting other actions.');
+            break;
+
+        case OUWIKI_SUBWIKIS_INDIVIDUAL:
+            if ($userid == 0) {
+                $userid = $USER->id;
+            }
+            $otheruser = false;
+            if ($userid != $USER->id) {
+                $otheruser = true;
+                // Is user allowed to view everybody?
+                if (!has_capability('mod/ouwiki:viewallindividuals', $context)) {
+                    // Nope. Are they allowed to view people in same group?
+                    if (!has_capability('mod/ouwiki:viewgroupindividuals', $context)) {
+                        ouwiki_error('You do not have access to view somebody else\'s wiki.');
+                    }
+                    // Check user is in same group. Note this isn't now restricted to the
+                    // module grouping
+                    $ourgroups = groups_get_all_groups($cm->course, $USER->id);
+                    $theirgroups = groups_get_all_groups($cm->course, $userid);
+                    $found = false;
+                    foreach ($ourgroups as $ourgroup) {
+                        foreach ($theirgroups as $theirgroup) {
+                            if ($ourgroup->id == $theirgroup->id) {
+                                $found = true;
+                                break;
+                            }
+                        }
+                        if ($found) {
+                            break;
+                        }
+                    }
+                    if (!$found) {
+                        ouwiki_error('You do not have access to view this user\'s wiki.');
+                    }
+                }
+            }
+            // OK now find wiki
+            $subwiki = $DB->get_record_select('ouwiki_subwikis', 'wikiid = ? AND groupid IS NULL
+                    AND userid = ?', array($ouwiki->id, $userid));
+            if ($subwiki) {
+                ouwiki_set_extra_subwiki_fields($subwiki, $ouwiki, $context, $otheruser, !$otheruser);
+                return $subwiki;
+            }
+            // Create one
+            if ($create) {
+                $subwiki =  ouwiki_create_subwiki($ouwiki, $cm, $course, $userid);
+                ouwiki_set_extra_subwiki_fields($subwiki, $ouwiki, $context, $otheruser, !$otheruser);
+                ouwiki_init_pages($course, $cm, $ouwiki, $subwiki);
+                return $subwiki;
+            }
+            ouwiki_error('Wiki does not exist. View wikis before attempting other actions.');
+            break;
+
+        default:
+            ouwiki_error("Unexpected subwikis value: {$ouwiki->subwikis}");
+    }
+}
+
+// Create a new subwiki instance
+function ouwiki_create_subwiki($ouwiki, $cm, $course, $userid = null, $groupid = null) {
+    global $DB;
+
+    $subwiki = new StdClass;
+    $subwiki->wikiid = $ouwiki->id;
+    $subwiki->userid = $userid;
+    $subwiki->groupid = $groupid;
+    $subwiki->magic = ouwiki_generate_magic_number();
+    try {
+        $subwiki->id = $DB->insert_record('ouwiki_subwikis', $subwiki);
+    } catch (Exception $e) {
+        ouwiki_dberror($e);
+    }
+
+    return $subwiki;
+}
+
+/**
+ * Initialises wiki pages. Does nothing unless there's a template.
+ *
+ * @param object $cm Course-module object
+ * @param object $subwiki Subwiki object
+ * @param object $ouwiki OU wiki object
+ */
+function ouwiki_init_pages($course, $cm, $ouwiki, $subwiki) {
+    global $CFG;
+
+    if (is_null($ouwiki->template)) {
+        return;
+    }
+
+    $fs = get_file_storage();
+    $zip = get_file_packer();
+    $context = context_module::instance($cm->id);
+    $filepath = '/'.$context->id.'/mod_ouwiki/template/'.$ouwiki->id.$ouwiki->template;
+    if ($file = $fs->get_file_by_hash(sha1($filepath)) AND !$file->is_directory()) {
+        if (strpos($ouwiki->template, '.xml') !== false) {
+            // XML template expected.
+            $xmlfile = $file;
+        } else {
+            // Zip format expected.
+            $xmlfilename = strtolower(get_string('template', 'mod_ouwiki')) . '.xml';
+            if (!$xmlfile = $fs->get_file($context->id, 'mod_ouwiki', 'template', $ouwiki->id, '/',
+                    $xmlfilename)) {
+                // XML (and other files) not extracted yet. Do once only.
+                $zip->extract_to_storage($file, $context->id, 'mod_ouwiki', 'template', $ouwiki->id, '/');
+                $xmlfile = $fs->get_file($context->id, 'mod_ouwiki', 'template', $ouwiki->id, '/',
+                    $xmlfilename);
+            }
+        }
+
+        $content = $xmlfile->get_content();
+        $xml =  new DOMDocument();
+        $xml->loadXML($content);
+        if (!$xml) {
+            ouwiki_error('Failed to load wiki template - not valid XML.
+                    Check file in XML viewer and correct.');
+        }
+        if ($xml->documentElement->tagName != 'wiki') {
+            ouwiki_error('Failed to load wiki template - must begin with &lt;wiki> tag.');
+        }
+        for ($page = $xml->documentElement->firstChild; $page; $page = $page->nextSibling) {
+            if ($page->nodeType != XML_ELEMENT_NODE) {
+                continue;
+            }
+            if ($page->tagName != 'page') {
+                ouwiki_error('Failed to load wiki template - expected &lt;page>.');
+            }
+            $title = null;
+            $xhtml = null;
+            $oldcontextid = null;
+            $oldpagever = null;
+            $oldversionid = null;
+            $attachments = array();
+            for ($child = $page->firstChild; $child; $child = $child->nextSibling) {
+                if ($child->nodeType != XML_ELEMENT_NODE) {
+                    continue;
+                }
+                if (!$child->firstChild) {
+                    $text = '';
+                } else {
+                    if ($child->firstChild->nodeType != XML_TEXT_NODE &&
+                       $child->firstChild->nodeType != XML_CDATA_SECTION_NODE) {
+                        ouwiki_error('Failed to load wiki template - expected text node.');
+                    }
+                    if ($child->firstChild->nextSibling) {
+                        ouwiki_error('Failed to load wiki template - expected single text node.');
+                    }
+                    $text = $child->firstChild->nodeValue;
+                }
+                switch ($child->tagName) {
+                    case 'title':
+                        // Replace non-breaking spaces with normal spaces in title
+                        $title = str_replace(html_entity_decode('&nbsp;', ENT_QUOTES, 'UTF-8'), ' ', $text);
+                        break;
+                    case 'xhtml':
+                        $xhtml = $text;
+                        break;
+                    case 'versionid':
+                        $oldversionid = (int) $text;
+                        break;
+                    case 'attachments':
+                        $attachments = explode('|', $text);
+                        break;
+                    default:
+                        ouwiki_error('Failed to load wiki template - unexpected element &lt;'.
+                                $child->tagName.'>.');
+                }
+            }
+            if ($xhtml === null) {
+                ouwiki_error('Failed to load wiki template - required &lt;xhtml>.');
+            }
+
+            $newverid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $title, $xhtml,
+                     -1, -1, -1, true);
+
+            // Copy any images or attachments associated with old version id.
+            if ($oldfiles = $fs->get_directory_files($context->id, 'mod_ouwiki', 'template',
+                    $ouwiki->id, "/$oldversionid/")) {
+                foreach ($oldfiles as $oldfile) {
+                    if (in_array($oldfile->get_filename(), $attachments)) {
+                        // Copy this file to the version attachment record.
+                        $fs->create_file_from_storedfile(array(
+                                'contextid' => $context->id,
+                                'filearea' => 'attachment',
+                                'itemid' => $newverid,
+                                'filepath' => '/'), $oldfile);
+                    }
+                    if (mimeinfo('string', $oldfile->get_filename()) == 'image') {
+                        // Copy this image file to the version record.
+                        $fs->create_file_from_storedfile(array(
+                                'contextid' => $context->id,
+                                'filearea' => 'content',
+                                'itemid' => $newverid,
+                                'filepath' => '/'), $oldfile);
+                    }
+                }
+            }
+        }
+    } else {
+        ouwiki_error('Failed to load wiki template - file missing.');
+    }
+}
+
+/**
+ * Checks whether a user can edit a wiki, assuming that they can view it. This
+ * adds $subwiki->canedit, set to either true or false.
+ *
+ * @param object &$subwiki The subwiki object to which we are going to add a canedit variable
+ * @param object $ouwiki Wiki object
+ * @param object $context Context for permissions
+ * @param bool $othergroup If true, user is attempting to access a group that's not theirs
+ * @param bool $defaultwiki If true, user is accessing the wiki that they see by default
+ */
+function ouwiki_set_extra_subwiki_fields(&$subwiki, $ouwiki, $context, $othergroup = null,
+        $defaultwiki = null) {
+    // They must have the edit capability
+    $subwiki->canedit = has_capability('mod/ouwiki:edit', $context);
+    $subwiki->canannotate = has_capability('mod/ouwiki:annotate', $context);
+    $subwiki->annotation = $ouwiki->annotation;
+    // If wiki is not one of theirs, they need edit/annotate others or (historical) accesallgroups.
+    if ($othergroup) {
+        $subwiki->canedit = $subwiki->canedit &&
+                (has_capability('moodle/site:accessallgroups', $context) ||
+                        has_capability('mod/ouwiki:editothers', $context));
+        $subwiki->canannotate = $subwiki->canannotate &&
+                (has_capability('moodle/site:accessallgroups', $context) ||
+                        has_capability('mod/ouwiki:annotateothers', $context));
+    }
+    // Editing might be turned off for the wiki at the moment
+    $subwiki->canedit = $subwiki->canedit &&
+            (is_null($ouwiki->editbegin) || time() >= $ouwiki->editbegin);
+    $subwiki->canedit = $subwiki->canedit &&
+            (is_null($ouwiki->editend) || time() < $ouwiki->editend);
+    $subwiki->defaultwiki = $defaultwiki;
+}
+
+/**
+ * Checks whether the wiki is locked due to specific dates being set. (This is only used for
+ * informational display as the dates are already taken into account in the general checking
+ * for edit permission.)
+ *
+ * @param object $subwiki The subwiki object
+ * @param object $ouwiki Wiki object
+ * @param object $context Context for permissions
+ * @return False if not locked or a string of information if locked
+ */
+function ouwiki_timelocked($subwiki, $ouwiki, $context) {
+    // If they don't have edit permission anyhow then they won't be able to edit later
+    // so don't show this
+    if (!has_capability('mod/ouwiki:edit', $context)) {
+        return false;
+    }
+    if (!empty($ouwiki->editbegin) && time() < $ouwiki->editbegin) {
+        return get_string('timelocked_before', 'ouwiki',
+                userdate($ouwiki->editbegin, get_string('strftimedate')));
+    }
+    if (!empty($ouwiki->editend) && time() >= $ouwiki->editend) {
+        return get_string('timelocked_after', 'ouwiki');
+    }
+    return false;
+}
+
+
+/**
+ * Return the shared params needed to create a moodle_url
+ *
+ * @param string $page Name of page (null for startpage)
+ * @param object $subwiki Current subwiki object
+ * @param object $cm Course-module object
+ * @return Array
+ */
+function ouwiki_shared_url_params($pagename, $subwiki, $cm) {
+    $params = array('id' => $cm->id);
+    if (!$subwiki->defaultwiki) {
+        if ($subwiki->groupid) {
+            $params['group'] = $subwiki->groupid;
+        }
+    }
+    if ($subwiki->userid) {
+        $params['user'] = $subwiki->userid;
+    }
+    if (strtolower(trim($pagename)) !== strtolower(get_string('startpage', 'ouwiki')) &&
+            $pagename !== '') {
+        $params['page'] = $pagename;
+    }
+    return $params;
+}
+
+/**
+ * Prints the parameters that identify a particular wiki and could be used in view.php etc.
+ *
+ * @param string $page Name of page (empty string for startpage)
+ * @param object $subwiki Current subwiki object
+ * @param object $cm Course-module object
+ * @param int $type OUWIKI_PARAMS_xx constant
+ * @return mixed Either array or string depending on type
+ */
+function ouwiki_display_wiki_parameters($page, $subwiki, $cm, $type = OUWIKI_PARAMS_LINK) {
+    if ($type == OUWIKI_PARAMS_ARRAY) {
+        $output = array();
+        $output['id'] = $cm->id;
+    } else {
+        $output = ouwiki_get_parameter('id', $cm->id, $type);
+    }
+    if (!$subwiki->defaultwiki) {
+        if ($subwiki->groupid) {
+            if ($type == OUWIKI_PARAMS_ARRAY) {
+                $output['group'] = $subwiki->groupid;
+            } else {
+                $output .= ouwiki_get_parameter('group', $subwiki->groupid, $type);
+            }
+        }
+    }
+    if ($subwiki->userid) {
+        if ($type == OUWIKI_PARAMS_ARRAY) {
+            $output['user'] = $subwiki->userid;
+        } else {
+            $output .= ouwiki_get_parameter('user', $subwiki->userid, $type);
+        }
+    }
+    if ($page !== '') {
+        if ($type == OUWIKI_PARAMS_ARRAY) {
+            $output['page'] = $page;
+        } else {
+            $output .= ouwiki_get_parameter('page', $page, $type);
+        }
+    }
+    return $output;
+}
+
+// Internal function used by the above
+function ouwiki_get_parameter($name, $value, $type) {
+    switch ($type) {
+        case OUWIKI_PARAMS_FORM:
+            $value = htmlspecialchars($value, ENT_QUOTES, 'UTF-8');
+            $output = "<input type='hidden' name='$name' value='$value' />";
+            break;
+        case OUWIKI_PARAMS_LINK:
+            $value = htmlspecialchars(urlencode($value), ENT_QUOTES, 'UTF-8');
+            $output = '';
+            if ($name != 'id') {
+                $output .= '&amp;';
+            }
+            $output .= "$name=$value";
+            break;
+        case OUWIKI_PARAMS_URL:
+            $value = urlencode($value);
+            $output = '';
+            if ($name != 'id') {
+                $output .= '&';
+            }
+            $output .= "$name=$value";
+            break;
+    }
+    return $output;
+}
+
+/**
+ * Prints the subwiki selector if user has access to more than one subwiki.
+ * Also displays the currently-viewing subwiki.
+ *
+ * @param object $subwiki Current subwiki object
+ * @param object $ouwiki Wiki object
+ * @param object $cm Course-module object
+ * @param object $context Context for permissions
+ * @param object $course Course object
+ * @param string $actionurl
+ * @param string $querytext for use when changing groups against search criteria
+ */
+function ouwiki_display_subwiki_selector($subwiki, $ouwiki, $cm, $context, $course, $actionurl = 'view.php', $querytext = '') {
+    global $USER, $DB, $OUTPUT;
+
+    if ($ouwiki->subwikis == OUWIKI_SUBWIKIS_SINGLE) {
+        return '';
+    }
+
+    $choicefield = '';
+
+    switch($ouwiki->subwikis) {
+        case OUWIKI_SUBWIKIS_GROUPS:
+            $groups = groups_get_activity_allowed_groups($cm);
+            uasort($groups, create_function('$a,$b', 'return strcasecmp($a->name,$b->name);'));
+            $wikifor = htmlspecialchars($groups[$subwiki->groupid]->name);
+
+            // Do they have more than one?
+            if (count($groups) > 1) {
+                $choicefield = 'group';
+                $choices = $groups;
+            }
+            break;
+
+        case OUWIKI_SUBWIKIS_INDIVIDUAL:
+            $user = $DB->get_record('user', array('id' => $subwiki->userid),
+                    'username, ' . user_picture::fields());
+            $wikifor = ouwiki_display_user($user, $cm->course);
+            $usernamefields = user_picture::fields('u');
+            if (has_capability('mod/ouwiki:viewallindividuals', $context)) {
+                // Get list of everybody...
+                $choicefield = 'user';
+                try {
+                    $choices = $DB->get_records_sql('SELECT ' . $usernamefields .
+                            ' FROM {ouwiki_subwikis} sw
+                            INNER JOIN {user} u ON sw.userid = u.id
+                            WHERE sw.wikiid = ?
+                            ORDER BY u.lastname, u.firstname', array($ouwiki->id));
+                } catch (Exception $e) {
+                    ouwiki_dberror($e);
+                }
+
+                foreach ($choices as $choice) {
+                    $choice->name = fullname($choice);
+                }
+
+            } else if (has_capability('mod/ouwiki:viewgroupindividuals', $context)) {
+                $choicefield = 'user';
+                $choices = array();
+                // User allowed to view people in same group
+                $theirgroups = groups_get_all_groups($cm->course, $USER->id,
+                        $course->defaultgroupingid);
+                if (!$theirgroups) {
+                    $theirgroups = array();
+                }
+                foreach ($theirgroups as $group) {
+                    $members = groups_get_members($group->id, 'u.id, ' . $usernamefields);
+                    foreach ($members as $member) {
+                        $member->name = fullname($member);
+                        $choices[$member->id] = $member;
+                    }
+                }
+            }
+            break;
+
+        default:
+            ouwiki_error("Unexpected subwikis value: {$ouwiki->subwikis}");
+    }
+
+    $out = '<div class="ouw_subwiki">';
+    if ($choicefield && count($choices) > 1) {
+        $actionquery = '';
+        if (!empty($querytext)) {
+            $actionquery = '&amp;query=' . rawurlencode($querytext);
+        }
+        $actionurl = '/mod/ouwiki/'. $actionurl .'?id=' . $cm->id . $actionquery;
+        $urlroot = new moodle_url($actionurl);
+        if ($choicefield == 'user') {
+            // Individuals.
+            $individualsmenu = array();
+            foreach ($choices as $choice) {
+                $individualsmenu[$choice->id] = $choice->name;
+            }
+            $select = new single_select($urlroot, 'user', $individualsmenu, $subwiki->userid, null, 'selectuser');
+            $select->label = get_string('wikifor', 'ouwiki');
+            $output = $OUTPUT->render($select);
+            $out .= '<div class="individualselector">'.$output.'</div>';
+        } else if ($choicefield == 'group') {
+            // Group mode.
+            $out .= groups_print_activity_menu($cm, $urlroot, true, true);
+        }
+    } else {
+        $out .= get_string('wikifor', 'ouwiki') . $wikifor;
+    }
+    $out .= '</div>';
+
+    return $out;
+}
+
+/**
+ * Returns an object containing the details from 'pages' and 'versions'
+ * tables for the current version of the specified (named) page, or false
+ * if page does not exist. Note that if the page exists but there are no
+ * versions, then the version fields will not be set.
+ *
+ * @param object $subwiki Current subwiki object
+ * @param string $pagename Name of desired page or null for start
+ * @param int $option OUWIKI_GETPAGE_xx value. Can use _ACCEPTNOVERSION
+ *   if it's OK when a version doesn't exist, or _CREATE which creates
+ *   pages when they don't exist.
+ * @return object Page-version object
+ */
+function ouwiki_get_current_page($subwiki, $pagename, $option = OUWIKI_GETPAGE_REQUIREVERSION) {
+    global $DB;
+
+    $params = array($subwiki->id);
+    $pagename_s = 'UPPER(p.title) = ?';
+    $params[] = core_text::strtoupper($pagename);
+
+    $jointype = $option == OUWIKI_GETPAGE_REQUIREVERSION ? 'JOIN' : 'LEFT JOIN';
+
+    $userfields = user_picture::fields('u', null, 'userid');
+
+    $sql = "SELECT p.id AS pageid, p.subwikiid, p.title, p.currentversionid, p.firstversionid,
+                p.locked, v.id AS versionid, v.xhtml, v.timecreated, v.userid, v.xhtmlformat,
+                v.wordcount, v.previousversionid, $userfields
+            FROM {ouwiki_pages} p
+            $jointype {ouwiki_versions} v ON p.currentversionid = v.id
+            LEFT JOIN {user} u ON v.userid = u.id
+            WHERE p.subwikiid = ? AND $pagename_s";
+    $pageversion = $DB->get_record_sql($sql, $params);
+    if (!$pageversion) {
+        if ($option != OUWIKI_GETPAGE_CREATE) {
+            return false;
+        }
+
+        // Create page
+        $pageversion = new StdClass;
+        $pageversion->subwikiid = $subwiki->id;
+        $pageversion->title = $pagename ? $pagename : '';
+        $pageversion->locked = 0;
+        $pageversion->firstversionid = null; // new page
+        try {
+            $pageversion->pageid = $DB->insert_record('ouwiki_pages', $pageversion);
+        } catch (Exception $e) {
+            ouwiki_dberror($e);
+        }
+
+        // Update any missing link records that might exist
+        $uppertitle = core_text::strtoupper($pagename);
+        try {
+            $DB->execute("UPDATE {ouwiki_links}
+                SET tomissingpage = NULL, topageid = ?
+                WHERE tomissingpage = ?
+                AND ? = (
+                    SELECT p.subwikiid
+                    FROM {ouwiki_versions} v
+                    INNER JOIN {ouwiki_pages} p ON v.pageid = p.id
+                    WHERE v.id = fromversionid)",
+                array($pageversion->pageid, $uppertitle, $subwiki->id));
+        } catch (Exception $e) {
+            ouwiki_dberror($e);
+        }
+
+        $pageversion->currentversionid = null;
+        $pageversion->versionid = null;
+        $pageversion->xhtml = null;
+        $pageversion->xhtmlformat = null;
+        $pageversion->timecreated = null;
+        $pageversion->userid = null;
+        $pageversion->previousversionid = null; // first version for page
+
+        return $pageversion;
+    }
+
+    // Ensure valid value for comparing time created
+    $timecreated = empty($pageversion->timecreated) ? 0 : $pageversion->timecreated;
+
+    $sql = "SELECT v.id, v.timecreated, v.userid, $userfields
+                FROM {ouwiki_versions} v
+            LEFT JOIN {user} u ON v.userid = u.id
+            WHERE v.pageid = ?
+                AND v.timecreated <= ?
+                AND v.deletedat IS NULL
+            ORDER BY v.id DESC";
+
+    $pageversion->recentversions = $DB->get_records_sql($sql,
+            array($pageversion->pageid, $timecreated), 0, 3);
+
+    return $pageversion;
+}
+
+/**
+ * Obtains all the pages from a subwiki as pageversion objects. As a special
+ * bonus feature, this query also returns the firstname and lastname of current
+ * author (person in userid field of version).
+ * @return array Array of pageversion objects (note: the 'recentversions'
+ *   member is not available, but otherwise these are the same as from
+ *   ouwiki_get_current_page) in same order as index page
+ */
+function ouwiki_get_subwiki_allpages($subwiki) {
+    global $DB;
+
+    $userfields = user_picture::fields('u', null, 'userid');
+
+    $sql = "SELECT p.id AS pageid, p.subwikiid, p.title, p.currentversionid, p.firstversionid,
+                p.locked, v.id AS versionid, v.xhtml, v.timecreated, v.userid, v.xhtmlformat,
+                v.wordcount, v.previousversionid, $userfields
+            FROM {ouwiki_pages} p
+            JOIN {ouwiki_versions} v ON p.currentversionid = v.id
+            LEFT JOIN {user} u ON u.id = v.userid
+            WHERE p.subwikiid = ? AND v.deletedat IS NULL
+            ORDER BY CASE WHEN p.title IS NULL THEN '' ELSE UPPER(p.title) END";
+
+    return $DB->get_records_sql($sql, array($subwiki->id));
+}
+
+/**
+ * Returns an object containing the details from 'pages' and 'versions'
+ * tables for the specified version of the specified (named) page, or false
+ * if page/version does not exist.
+ *
+ * @param object $subwiki Current subwiki object
+ * @param string $pagename Name of desired page or null for start
+ * @return object $pageversion Version object
+ */
+function ouwiki_get_page_version($subwiki, $pagename, $versionid) {
+    global $DB;
+
+    $userfields = user_picture::fields('u', null, 'userid');
+
+    $sql = "SELECT p.id AS pageid, p.subwikiid, p.title, p.currentversionid,
+                v.id AS versionid, v.xhtml, v.timecreated, v.userid, v.xhtmlformat,
+                v.deletedat, $userfields,
+                v.wordcount
+            FROM {ouwiki_pages} p, {ouwiki_versions} v
+            LEFT JOIN {user} u ON v.userid = u.id
+            WHERE p.subwikiid = ? AND v.id = ? AND UPPER(p.title) = ?";
+
+    $pagename = core_text::strtoupper($pagename);
+    $pageversion = $DB->get_record_sql($sql, array($subwiki->id, $versionid, $pagename));
+
+    $pageversion->recentversions = false;
+
+    return $pageversion;
+}
+
+/**
+ * Obtains details (versionid,timecreated plus user id,username,firstname,lastname)
+ * for the previous and next version after the specified one.
+ *
+ * @param object $pageversion Page/version object
+ * @return object Object with ->prev and ->next fields, either of which may be false
+ *   to indicate (respectively) that this is the first or last version. If not false,
+ *   these objects contain the fields mentioned above.
+ */
+function ouwiki_get_prevnext_version_details($pageversion) {
+    global $DB;
+
+    $userfields = user_picture::fields('u');
+
+    $prevnext = new StdClass;
+
+    $prevsql = "SELECT v.id AS versionid, v.timecreated, $userfields
+                FROM {ouwiki_versions} v
+            LEFT JOIN {user} u ON u.id = v.userid
+            WHERE v.pageid = ?
+                AND v.timecreated < ?
+                AND v.deletedat IS NULL
+            ORDER BY v.id DESC";
+
+    $prev = $DB->get_records_sql($prevsql,
+            array($pageversion->pageid, $pageversion->timecreated), 0, 1);
+    $prevnext->prev = $prev ? current($prev) : false;
+
+    $nextsql = "SELECT v.id AS versionid, v.timecreated, $userfields
+                FROM {ouwiki_versions} v
+                LEFT JOIN {user} u ON u.id = v.userid
+                WHERE v.pageid = ?
+                AND v.timecreated > ?
+                AND v.deletedat IS NULL
+                ORDER BY v.id";
+
+    $next = $DB->get_records_sql($nextsql,
+            array($pageversion->pageid, $pageversion->timecreated), 0, 1);
+    $prevnext->next = $next ? current($next) : false;
+
+    return $prevnext;
+}
+
+/**
+ * Returns an HTML span with appropriate class to indicate how recent something
+ * is by colour.
+ */
+function ouwiki_recent_span($time) {
+    $now = time();
+    if ($now-$time < 5*60) {
+        $category = 'ouw_recenter';
+    } else if ($now - $time < 4*60*60) {
+        $category = 'ouw_recent';
+    } else {
+        $category = 'ouw_recentnot';
+    }
+    return '<span class="'.$category.'">';
+}
+
+function ouwiki_internal_re_heading($matches) {
+    global $PAGE;
+
+    $ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+    return $ouwikioutput->ouwiki_internal_re_heading_bits($matches);
+}
+
+function ouwiki_internal_re_plain_heading_bits($matches) {
+    return '<div class="ouw_heading"><h'.$matches[1].' id="ouw_s'.$matches[2].'">'.$matches[3].
+            '</h'.$matches[1].'></div>';
+}
+
+function ouwiki_internal_re_internallinks($matches) {
+    // Used to replace links when displaying wiki all one one page
+    global $ouwiki_internallinks;
+
+    $details = ouwiki_get_wiki_link_details($matches[1]);
+
+    // See if it matches a known page
+    foreach ($ouwiki_internallinks as $indexpage) {
+        if (($details->page === '' && $indexpage->title === '') ||
+            (isset($indexpage->title) && strtoupper($indexpage->title) === strtoupper($details->page)) ) {
+            // Page matches, return link
+            return '<a class="ouw_wikilink" href="#' . $indexpage->pageid .
+                '">' . $details->title . '</a>';
+        }
+    }
+    // Page did not match, return title in brackets
+    return '(' . $details->title . ')';
+}
+
+function ouwiki_internal_re_wikilinks($matches) {
+    global $ouwiki_wikilinks;
+
+    $details = ouwiki_get_wiki_link_details($matches[1]);
+    return '<a class="ouw_wikilink" href="view.php?' .
+        ouwiki_display_wiki_parameters('', $ouwiki_wikilinks->subwiki,
+            $ouwiki_wikilinks->cm) .
+        ($details->page !== ''
+            ? '&amp;page=' . htmlspecialchars(urlencode($details->page)) : '') .
+        '">' . $details->title . '</a>';
+}
+
+function ouwiki_convert_content($content, $subwiki, $cm, $internallinks = null,
+        $xhtmlformat = FORMAT_HTML) {
+    // Detect links. Note that changes to this code ought to be reflected
+    // in the code in ouwiki_save_new_version which analyses to search for
+    // links.
+
+    // When displayed on one page
+    global $ouwiki_internallinks, $ouwiki_wikilinks;
+
+    // Ordinary [[links]]
+    if ($internallinks) {
+        $ouwiki_internallinks = $internallinks;
+        $function = 'ouwiki_internal_re_internallinks';
+    } else {
+        $ouwiki_wikilinks = (object) array('subwiki' => $subwiki, 'cm' => $cm);
+        $function = 'ouwiki_internal_re_wikilinks';
+    }
+    $content = preg_replace_callback(OUWIKI_LINKS_SQUAREBRACKETS, $function, $content);
+
+    // We do not use FORMAT_MOODLE (which adds linebreaks etc) because that was
+    // already handled manually.
+    $options = ouwiki_format_text_options();
+    $options->para = false;
+    $addwrapperdivs = true;
+    if (strpos($content, '<div class="ouwiki_content">') !== false) {
+        // Stop adding text wrapper divs when already in data.
+        $addwrapperdivs = false;
+    }
+    $toreturn = format_text($content, $xhtmlformat, $options);
+    if ($addwrapperdivs) {
+        $toreturn = html_writer::tag('div', $toreturn, array('class' => 'ouwiki_content'));
+    }
+    return $toreturn;
+}
+
+/**
+ * Return default common options for {@link format_text()} when preparing
+ * a content to be displayed on an ouwiki page
+ *
+ * We set the option in format_text to allow ids through because otherwise
+ * annotations break. (This requires Moodle 2.0.3.)
+ *
+ * @return stdClass
+ */
+function ouwiki_format_text_options() {
+
+    $options                = new stdClass();
+    $options->trusted       = true;
+    $options->allowid       = true;
+
+    return $options;
+}
+
+/**
+ * Displays a user's name and link to profile etc.
+ * @param object $user User object (must have at least id, firstname and lastname)
+ * @param int $courseid ID of course
+ * @param bool $link If true, makes it a link
+ */
+function ouwiki_display_user($user, $courseid, $link = true) {
+    // Wiki pages can be created by the system which obviously doesn't
+    // need a profile link.
+    if (!$user->id) {
+        return get_string('system', 'ouwiki');
+    }
+
+    $fullname = fullname($user);
+    $extra = '';
+    if (!$link) {
+        $extra = 'class="ouwiki_noshow"';
+    }
+
+    $userurl = new moodle_url('/user/view.php', array('id' => $user->id, 'course' => $courseid));
+    $result = '<a href="'.$userurl.'" '.$extra.'>'.fullname($user).'</a>';
+
+    return $result;
+}
+
+function ouwiki_print_tabs($selected, $pagename, $subwiki, $cm, $context, $pageexists = true,
+        $pagelocked = null) {
+    global $CFG;
+
+    $tabrow = array();
+
+    $params = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm);
+
+    $tabrow[] = new tabobject('view',
+        'view.php?'.$params, get_string('tab_view', 'ouwiki'));
+
+    if ($subwiki->canedit && !$pagelocked) {
+        $tabrow[] = new tabobject('edit',
+            'edit.php?'.$params, get_string('tab_edit', 'ouwiki'));
+    }
+
+    if ($subwiki->annotation) {
+        if ($subwiki->canannotate) {
+            $tabrow[] = new tabobject('annotate',
+                'annotate.php?'.$params, get_string('tab_annotate', 'ouwiki'));
+        }
+    }
+
+    if ($pageexists) {
+        $tabrow[] = new tabobject('history',
+            'history.php?'.$params, get_string('tab_history', 'ouwiki'));
+    }
+
+    $tabs = array();
+    $tabs[] = $tabrow;
+    print_tabs($tabs, $selected, $pageexists ? '' : array('edit', 'annotate'));
+
+    print '<div id="ouwiki_belowtabs">';
+    print get_accesshide(ucfirst($selected) . '.', 'h1');
+}
+
+/**
+ * Prints the header and (if applicable) group selector.
+ *
+ * @param object $ouwiki Wiki object
+ * @param object $cm Course-modules object
+ * @param object $subwiki Subwiki objecty
+ * @param string $pagename Name of page
+ * @param string $afterpage If included, extra content for navigation string after page link
+ * @param string $head Things to include inside html head
+ * @param string $title optional
+ */
+function ouwiki_print_header($ouwiki, $cm, $subwiki, $pagename, $afterpage = null,
+        $head = '', $title='') {
+    global $OUTPUT, $PAGE;
+
+    $wikiname = format_string(htmlspecialchars($ouwiki->name));
+    $buttontext = ouwiki_get_search_form($subwiki, $cm->id);
+
+    if ($afterpage && $pagename !== '') {
+        $PAGE->navbar->add(htmlspecialchars($pagename), new moodle_url('/mod/ouwiki/view.php',
+                array('id' => $cm->id, 'page' => $pagename)));
+    } else if ($pagename !== '') {
+        $PAGE->navbar->add(htmlspecialchars($pagename));
+    } else {
+        $PAGE->navbar->add(htmlspecialchars(get_string('startpage', 'ouwiki')));
+    }
+    if ($afterpage) {
+        foreach ($afterpage as $element) {
+            $PAGE->navbar->add($element['name'], $element['link']);
+        }
+    }
+    $PAGE->set_button($buttontext);
+
+    if (empty($title)) {
+        $title = $wikiname;
+    }
+
+    $PAGE->set_title($title);
+    $PAGE->set_heading($title);
+
+    echo $OUTPUT->header();
+}
+
+/**
+ * Prints the footer and also logs the page view.
+ *
+ * @param object $course Course object
+ * @param object $subwiki Subwiki object; used to add parameters to $logurl or the default URL
+ * @param object $pagename Page name or NULL if homepage/not relevant
+ * @param string $logurl URL to log; if null, uses current page as default
+ * @param string $logaction Action to log; if null, uses page before .php as default
+ * @param string $loginfo Optional info string
+ */
+function ouwiki_print_footer($course, $cm, $subwiki, $pagename = null, $logurl = null,
+        $logaction = null, $loginfo = null) {
+    global $PAGE, $OUTPUT;
+    $info = '';
+
+    echo '</div>';
+    echo $OUTPUT->footer();
+
+    // Log.
+    $url = $logurl ? $logurl : preg_replace('~^.*/ouwiki/~', '', $_SERVER['PHP_SELF']);
+
+    $url .= (strpos($url, '?') === false ? '?' : '&').'id='.$cm->id;
+    if ($subwiki->groupid) {
+        $url .= '&group='.$subwiki->groupid;
+    }
+    if ($subwiki->userid) {
+        $url .= '&user='.$subwiki->userid;
+    }
+    if (!empty($pagename)) {
+        $url .= '&page='.urlencode($pagename);
+        $info = $pagename;
+    }
+    if ($loginfo) {
+        if ($info) {
+            $info .= ' ';
+        }
+        $info .= $loginfo;
+    }
+
+    $action = $logaction ? $logaction : preg_replace('~\..*$~', '', $url);
+
+    // Log usage view.
+    $params = array(
+            'context' => context_module::instance($cm->id),
+            'objectid' => $subwiki->wikiid,
+            'other' => array('info' => $info, 'action' => $action, 'logurl' => $url)
+    );
+
+    $event = \mod_ouwiki\event\ouwiki_viewed::create($params);
+    $event->add_record_snapshot('course_modules', $cm);
+    $event->add_record_snapshot('course', $course);
+    $event->trigger();
+
+}
+
+function ouwiki_nice_date($time, $insentence = null, $showrecent = null) {
+    $result = $showrecent ? ouwiki_recent_span($time) : '';
+    if (function_exists('specially_shrunken_date')) {
+        $result .= specially_shrunken_date($time, $insentence);
+    } else {
+        $result .= userdate($time);
+    }
+    $result .= $showrecent ? '</span>' : '';
+
+    return $result;
+}
+
+function ouwiki_handle_backup_exception($e, $type = 'backup') {
+    if (debugging()) {
+        print '<pre>';
+        print $e->getMessage().' ('.$e->getCode().')'."\n";
+        print $e->getFile().':'.$e->getLine()."\n";
+        print $e->getTraceAsString();
+        print '</pre>';
+    } else {
+        print '<div><strong>Error</strong>: '.htmlspecialchars($e->getMessage()).' ('.
+                $e->getCode().')</div>';
+    }
+    print "<div><strong>This $type has failed</strong> (even though it may say otherwise later).
+            Resolve this problem before continuing.</div>";
+}
+
+/**
+ * Checks if page is locked by somebody else (they are currently editing it).
+ * @param int $pageid
+ * @return bool true if locked
+ */
+function ouwiki_is_page_locked($pageid) {
+    global $USER, $DB;
+
+    // Check for lock.
+    $lock = $DB->get_record('ouwiki_locks', array('pageid' => $pageid));
+    if (!empty($lock)) {
+        $timeoutok = is_null($lock->expiresat) || time() < $lock->expiresat;
+        // Consider the page locked if the lock has been confirmed.
+        // within OUWIKI_LOCK_PERSISTENCE seconds.
+        if ($lock->userid == $USER->id && $timeoutok) {
+            // Cool, it's our lock.
+            return false;
+        } else if (time()-$lock->seenat < OUWIKI_LOCK_PERSISTENCE && $timeoutok) {
+            return true;
+        }
+    }
+    return false;
+}
+
+/**
+ * Obtains an editing lock on a wiki page.
+ *
+ * @param object $ouwiki Wiki object (used just for timeout setting)
+ * @param int $pageid ID of page to be locked
+ * @return array Two-element array with a boolean true (if lock has been obtained)
+ *   or false (if lock was held by somebody else). If lock was held by someone else,
+ *   the values of the wiki_locks entry are held in the second element; if lock was
+ *   held by current user then the the second element has a member ->id only.
+ */
+function ouwiki_obtain_lock($ouwiki, $pageid) {
+    global $USER, $DB;
+
+    // Check for lock
+    $alreadyownlock = false;
+    $lock = $DB->get_record('ouwiki_locks', array('pageid' => $pageid));
+    if (!empty($lock)) {
+        $timeoutok = is_null($lock->expiresat) || time() < $lock->expiresat;
+        // Consider the page locked if the lock has been confirmed
+        // within OUWIKI_LOCK_PERSISTENCE seconds
+        if ($lock->userid == $USER->id && $timeoutok) {
+            // Cool, it's our lock, do nothing except remember it in session
+            $lockid = $lock->id;
+            $alreadyownlock = true;
+        } else if (time()-$lock->seenat < OUWIKI_LOCK_PERSISTENCE && $timeoutok) {
+            return array(false, $lock);
+        } else {
+            // Not locked any more. Get rid of the old lock record.
+            try {
+                $DB->delete_records('ouwiki_locks', array('pageid' => $pageid));
+            } catch (Exception $e) {
+                print_error('Unable to delete lock record');
+            }
+        }
+    }
+
+    // Add lock
+    if (!$alreadyownlock) {
+        // Lock page
+        $newlock = new StdClass;
+        $newlock->pageid = $pageid;
+        $newlock->userid = $USER->id;
+        $newlock->lockedat = time();
+        $newlock->seenat = $newlock->lockedat;
+        if ($ouwiki->timeout) {
+            $newlock->expiresat = $newlock->lockedat + $ouwiki->timeout + OUWIKI_TIMEOUT_EXTRA;
+        }
+        $lockid = $DB->insert_record('ouwiki_locks', $newlock);
+    }
+
+    // Store lock information in session so we can clear it later
+    if (!array_key_exists(OUWIKI_SESSION_LOCKS, $_SESSION)) {
+            $_SESSION[OUWIKI_SESSION_LOCKS]=array();
+    }
+    $_SESSION[OUWIKI_SESSION_LOCKS][$pageid] = $lockid;
+    $lockdata = new StdClass;
+    $lockdata->id = $lockid;
+
+    return array(true, $lockdata);
+}
+
+/**
+ * If the user has an editing lock, releases it. Has no effect otherwise.
+ * Note that it doesn't matter if this isn't called (as happens if their
+ * browser crashes or something) since locks time out anyway. This is just
+ * to avoid confusion of the 'what? it says I'm editing that page but I'm
+ * not, I just saved it!' variety.
+ *
+ * @param int $pageid ID of page that was locked
+ */
+function ouwiki_release_lock($pageid) {
+    global $DB, $COURSE;
+
+    if (!array_key_exists(OUWIKI_SESSION_LOCKS, $_SESSION)) {
+        // No locks at all in session
+        debugging('No locks in \$_SESSION '. $pageid, DEBUG_DEVELOPER);
+        return;
+    }
+
+    if (array_key_exists($pageid, $_SESSION[OUWIKI_SESSION_LOCKS])) {
+        $lockid = $_SESSION[OUWIKI_SESSION_LOCKS][$pageid];
+        unset($_SESSION[OUWIKI_SESSION_LOCKS][$pageid]);
+        try {
+            $DB->delete_records('ouwiki_locks', array('id' => $lockid));
+        } catch (Exception $e) {
+            print_error("Unable to delete lock record.");
+        }
+    }
+}
+
+/**
+ * Kills any locks on a given page.
+ *
+ * @param int $pageid ID of page that was locked
+ */
+function ouwiki_override_lock($pageid) {
+    global $DB;
+
+    try {
+        $DB->delete_records('ouwiki_locks', array('pageid' => $pageid));
+    } catch (Exception $e) {
+        ouwiki_error("Unable to delete lock record.");
+    }
+}
+
+/**
+ * Obtains information about all versions of a wiki page in time order (newest first).
+ *
+ * @param int $pageid Page ID
+ * @param mixed $limitfrom If set, used to return results starting from this index
+ * @param mixed $limitnum If set, used to return only this many results
+ * @return array An array of records (empty if none) containing id, timecreated, userid,
+ *   username, firstname, and lastname fields.
+ */
+function ouwiki_get_page_history($pageid, $selectdeleted, $limitfrom = '', $limitnum = '') {
+    global $DB;
+
+    // Set AND clause if not selecting deleted page versions
+    $deleted = '';
+    if (!$selectdeleted) {
+        $deleted = ' AND v.deletedat IS NULL';
+    }
+
+    $userfields = user_picture::fields('u');
+
+    $sql = "SELECT v.id AS versionid, v.timecreated, v.deletedat, u.username,
+                $userfields, v.wordcount, v.previousversionid, v.importversionid,
+                (SELECT v2.wordcount
+                    FROM {ouwiki_versions} v2
+                    WHERE v2.id = v.previousversionid)
+                    AS previouswordcount
+                FROM {ouwiki_versions} v
+            LEFT JOIN {user} u ON v.userid = u.id
+            WHERE v.pageid = ?
+                $deleted
+            ORDER BY v.id DESC";
+
+    $result = $DB->get_records_sql($sql, array($pageid), $limitfrom, $limitnum);
+    // Fix confusing behaviour when no results
+    if (!$result) {
+        $result = array();
+    }
+    return $result;
+}
+
+/**
+ * Obtains the index information of a subwiki.
+ *
+ * @param int $subwikiid ID of subwiki
+ * @param mixed $limitfrom If set, used to return results starting from this index
+ * @param mixed $limitnum If set, used to return only this many results
+ * @return array Array of objects, one per page, containing the following fields:
+ *   pageid, title, versionid, timecreated, (user) id, username, firstname, lastname,
+ *   and linksfrom which is an array of page IDs of pages that currently link to this
+ *   one.
+ */
+function ouwiki_get_subwiki_index($subwikiid, $limitfrom = '', $limitnum = '') {
+    global $DB;
+
+    $userfields = user_picture::fields('u');
+
+    // Get all the pages...
+    $sql = "SELECT p.id AS pageid, p.title, v.id AS versionid, v.timecreated, $userfields,
+            v.wordcount
+                FROM {ouwiki_pages} p
+            INNER JOIN {ouwiki_versions} v ON p.currentversionid = v.id
+            LEFT JOIN {user} u ON v.userid = u.id
+                WHERE p.subwikiid = ? AND v.deletedat IS NULL
+            ORDER BY CASE WHEN p.title IS NULL THEN '' ELSE UPPER(p.title) END";
+
+    $pages = $DB->get_records_sql($sql, array($subwikiid), $limitfrom, $limitnum);
+
+    // Fix confusing behaviour when no results
+    if (!$pages) {
+        $pages = array();
+    }
+    foreach ($pages as $page) {
+        $page->linksfrom = array();
+    }
+
+    // ...and now get all the links for those pages
+    if (count($pages)) {
+        list($usql, $params) = $DB->get_in_or_equal(array_keys($pages));
+        $sql = 'SELECT l.id, l.topageid, p.id AS frompage
+                    FROM {ouwiki_links} l
+                INNER JOIN {ouwiki_pages} p ON p.currentversionid = l.fromversionid
+                    WHERE l.topageid '.$usql;
+        $links = $DB->get_records_sql($sql, $params);
+    } else {
+        $links = false;
+    }
+    if (!$links) {
+        $links = array();
+    }
+
+    // Add links into pages array
+    foreach ($links as $obj) {
+        $pages[$obj->topageid]->linksfrom[] = $obj->frompage;
+    }
+
+    return $pages;
+}
+
+/**
+ * Obtains the index information of a subwiki.
+ *
+ * @param object $subwiki
+ * @return array Array of objects, one per page, containing the following fields:
+ *   pageid, title, versionid, timecreated, (user) id, username, firstname, lastname,
+ *   and linksfrom which is an array of page IDs of pages that currently link to this
+ *   one.
+ */
+function ouwiki_get_subwiki_allpages_index($subwiki) {
+    global $DB;
+
+    $userfields = user_picture::fields('u', null, 'userid');
+
+    // Get all the pages...
+    $sql = "SELECT p.id AS pageid, p.subwikiid, p.title, p.currentversionid, p.firstversionid,
+    p.locked, v.id AS versionid, v.xhtml, v.timecreated, v.userid, v.xhtmlformat,
+    v.wordcount, v.previousversionid, $userfields
+    FROM {ouwiki_pages} p
+    JOIN {ouwiki_versions} v ON p.currentversionid = v.id
+    LEFT JOIN {user} u ON u.id = v.userid
+    WHERE p.subwikiid = ? AND v.deletedat IS NULL
+    ORDER BY CASE WHEN p.title IS NULL THEN '' ELSE UPPER(p.title) END";
+
+    $pages = $DB->get_records_sql($sql, array($subwiki->id));
+
+    // Fix confusing behaviour when no results.
+    if (!$pages) {
+        $pages = array();
+    }
+    foreach ($pages as $page) {
+        $page->linksfrom = array();
+    }
+
+    // ...and now get all the links for those pages.
+    if (count($pages)) {
+        list($usql, $params) = $DB->get_in_or_equal(array_keys($pages));
+        $sql = 'SELECT l.id, l.topageid, p.id AS frompage
+        FROM {ouwiki_links} l
+        INNER JOIN {ouwiki_pages} p ON p.currentversionid = l.fromversionid
+        WHERE l.topageid ' . $usql;
+        $links = $DB->get_records_sql($sql, $params);
+    } else {
+        $links = false;
+    }
+    if (!$links) {
+        $links = array();
+    }
+
+    // Add links into pages array.
+    foreach ($links as $obj) {
+        $pages[$obj->topageid]->linksfrom[] = $obj->frompage;
+    }
+
+    return $pages;
+}
+
+/**
+ * Obtains list of recent changes across subwiki.
+ *
+ * @param int $subwikiid ID of subwiki
+ * @param int $limitfrom Database result start, if set
+ * @param int $limitnum Database result count (default 51)
+ */
+function ouwiki_get_subwiki_recentchanges($subwikiid, $limitfrom = '', $limitnum = 51) {
+    global $DB;
+
+    $userfields = user_picture::fields('u', null, 'userid');
+
+    $sql = "SELECT v.id AS versionid, v.timecreated, v.userid,
+        p.id AS pageid, p.subwikiid, p.title, p.currentversionid,
+        $userfields, v.wordcount, v.previousversionid, v.importversionid,
+            (SELECT v2.wordcount
+                FROM {ouwiki_versions} v2
+                WHERE v2.id = v.previousversionid)
+            AS previouswordcount
+        FROM {ouwiki_pages} p
+            INNER JOIN {ouwiki_versions} v ON v.pageid = p.id
+            LEFT JOIN {user} u ON v.userid = u.id
+        WHERE p.subwikiid = ? AND v.deletedat IS NULL
+        ORDER BY v.id DESC";
+
+    $result = $DB->get_records_sql($sql, array($subwikiid), $limitfrom, $limitnum);
+
+    if (!$result) {
+        $result = array();
+    }
+
+    return $result;
+}
+
+/**
+ * Obtains list of contributions to wiki made by a particular user,
+ * in similar format to the 'recent changes' list except ordered by page
+ * then date.
+ *
+ * @param int $subwikiid ID of subwiki
+ * @param int $userid ID of subwiki
+ * @return Array of all changes (zero-length if none)
+ */
+function ouwiki_get_contributions($subwikiid, $userid) {
+    global $DB;
+
+    $sql = "SELECT v.id AS versionid, v.timecreated, v.userid,
+            p.id AS pageid, p.subwikiid, p.title, p.currentversionid,
+                (SELECT MAX(id) FROM {ouwiki_versions} v2
+                    WHERE v2.pageid = p.id AND v2.id < v.id) AS previousversionid
+            FROM {ouwiki_pages} p
+            INNER JOIN {ouwiki_versions} v ON v.pageid = p.id
+                WHERE p.subwikiid = ? AND v.userid = ? AND v.deletedat IS NULL
+            ORDER BY CASE WHEN p.title IS NULL THEN '' ELSE UPPER(p.title) END, v.id";
+
+    $result = $DB->get_records_sql($sql, array($subwikiid, $userid));
+
+    if (!$result) {
+        $result = array();
+    }
+
+    return $result;
+}
+
+/**
+ * Obtains list of recently created pages across subwiki.
+ *
+ * @param int $subwikiid ID of subwiki
+ * @param int $limitfrom Database result start, if set
+ * @param int $limitnum Database result count (default 51)
+ * @return Array (may be 0-length) of page-version records, with the following
+ *   fields: pageid,subwikiid,title,currentversionid,versionid,timecreated,userid,
+ *   firstname,lastname,username. The version fields relate to the first version of
+ *   the page.
+ */
+function ouwiki_get_subwiki_recentpages($subwikiid, $limitfrom = '', $limitnum = 51) {
+    global $DB;
+    $result = array();
+
+    $subwikis = $DB->get_records_sql('SELECT MIN(v.id)
+                                    FROM {ouwiki_pages} p
+                                INNER JOIN {ouwiki_versions} v ON v.pageid = p.id
+                                WHERE p.subwikiid = ? AND v.deletedat IS NULL
+                                GROUP BY p.id', array($subwikiid));
+
+    if ($subwikis) {
+        list($usql, $params) = $DB->get_in_or_equal(array_keys($subwikis));
+
+        $userfields = user_picture::fields('u', null, 'userid');
+
+        $sql = "SELECT p.id AS pageid, p.subwikiid, p.title, p.currentversionid,
+                v.id AS versionid, v.timecreated, v.userid, $userfields,
+                u.username, v.wordcount, v.importversionid
+                FROM {ouwiki_versions} v
+                INNER JOIN {ouwiki_pages} p ON v.pageid = p.id
+                LEFT JOIN {user} u ON v.userid = u.id
+                WHERE v.id $usql
+                ORDER BY v.id DESC";
+
+        $result = $DB->get_records_sql($sql, $params, $limitfrom, $limitnum);
+    }
+
+    return $result;
+}
+
+/**
+ * Obtains the list of pages in a subwiki that are linked to, but do not exist.
+ *
+ * @param int $subwikiid ID of subwiki
+ * @param mixed $limitfrom If set, used to return results starting from this index
+ * @param mixed $limitnum If set, used to return only this many results
+ * @return array Array of missing title => array of source page titles. Sorted
+ *   in alphabetical order of missing title.
+ */
+function ouwiki_get_subwiki_missingpages($subwikiid, $limitfrom = '', $limitnum = '') {
+    global $DB;
+
+    // Get all the pages that either link to a nonexistent page, or link to
+    // a page that has been created but has no versions.
+    $sql = 'SELECT l.id, l.tomissingpage, p2.title, p.title AS fromtitle
+                FROM {ouwiki_pages} p
+            INNER JOIN {ouwiki_versions} v ON p.currentversionid = v.id
+            INNER JOIN {ouwiki_links} l ON v.id = l.fromversionid
+            LEFT JOIN {ouwiki_pages} p2 ON l.topageid = p2.id
+                WHERE p.subwikiid = ?
+                AND (l.tomissingpage IS NOT NULL
+                    OR (l.topageid IS NOT NULL AND p2.currentversionid IS NULL))
+                AND v.deletedat IS NULL';
+
+    $result = $DB->get_records_sql($sql, array($subwikiid), $limitfrom, $limitnum);
+
+    // Fix confusing behaviour when no results
+    if (!$result) {
+        $result = array();
+    }
+    $missing = array();
+    foreach ($result as $obj) {
+        if (is_null($obj->tomissingpage) || $obj->tomissingpage === '') {
+            $title = $obj->title;
+        } else {
+            $title = $obj->tomissingpage;
+        }
+        if (!array_key_exists($title, $missing)) {
+            $missing[$title] = array();
+        }
+        $missing[$title][] = $obj->fromtitle;
+    }
+    uksort($missing, 'strnatcasecmp');
+
+    return $missing;
+}
+
+/**
+ * Given HTML content, finds all our marked section headings.
+ *
+ * @param string $content XHTML content
+ * @return array Associative array of section ID => current title
+ */
+function ouwiki_find_sections($content) {
+    $results = array();
+    $matchlist = array();
+    preg_match_all('~<h([0-9]) id="ouw_s([0-9]+_[0-9]+)">(.*?)</h([0-9])>~s',
+            $content, $matchlist, PREG_SET_ORDER);
+    foreach ($matchlist as $matches) {
+        if ($matches[1] != $matches[4]) {
+            // Some weird s*** with nested headings
+            continue;
+        }
+        $section = $matches[2];
+        $content = $matches[3];
+        // Remove tags and decode entities
+        $content = preg_replace('|<.*?>|', '', $content);
+        $content = html_entity_decode($content, ENT_QUOTES, 'UTF-8');
+        // Tidy up whitespace
+        $content = preg_replace('|\s+|', ' ', $content);
+        $content = trim($content);
+        if ($content) {
+            $results[$section] = $content;
+        }
+    }
+
+    return $results;
+}
+
+/**
+ * Obtains various details about a named section. (This function will call error()
+ * if it can't find the section; it shouldn't fail if the section was checked with
+ * ouwiki_find_sections.)
+ *
+ * @param string $content XHTML content
+ * @param string $sectionxhtmlid ID of desired section
+ * @return Object containing ->startpos and ->content
+ */
+function ouwiki_get_section_details($content, $sectionxhtmlid) {
+    // Check heading number
+    $matches = array();
+    if (!preg_match('|<h([0-9]) id="ouw_s'.$sectionxhtmlid.'">|s', $content, $matches)) {
+        ouwiki_error('Unable to find expected section');
+    }
+    $h = $matches[1];
+
+    // Find position of heading and of next heading with equal or lower number
+    $startpos = strpos($content, $stupid = '<h'.$h.' id="ouw_s'.$sectionxhtmlid.'">');
+    if ($startpos === false) {
+        ouwiki_error('Unable to find expected section again');
+    }
+    $endpos = strlen($content);
+    for ($count = 1; $count <= $h; $count++) {
+        $nextheading = strpos($content, '<h'.$count.' id="ouw_s', $startpos + 1);
+        if ($nextheading !== false && $nextheading < $endpos) {
+            $endpos = $nextheading;
+        }
+    }
+
+    // Extract the relevant slice of content and return
+    $result = new StdClass;
+    $result->startpos = $startpos;
+    $result->size = $endpos - $startpos;
+    $result->content = substr($content, $startpos, $result->size);
+
+    return $result;
+}
+
+function ouwiki_internal_re_headings($matches) {
+    global $ouwikiinternalre;
+
+    return '<h'.$matches[1].' id="ouw_s'.$ouwikiinternalre->version.'_'.
+            ($ouwikiinternalre->count++).'">';
+}
+
+/**
+ * Saves a change to the given page while recording section details.
+ *
+ * @param object $cm Course-module object
+ * @param object $subwiki Subwiki object
+ * @param string $pagename Name of page (NO SLASHES)
+ * @param string $contentbefore Previous XHTML Content (NO SLASHES)
+ * @param string $newcontent Content of new section (NO SLASHES)
+ * @param object $sectiondetails Information from ouwiki_get_section_details for section
+ */
+function ouwiki_save_new_version_section($course, $cm, $ouwiki, $subwiki, $pagename,
+        $contentbefore, $newcontent, $sectiondetails, $formdata = null) {
+    // Put section into content
+    $result = substr($contentbefore, 0, $sectiondetails->startpos).$newcontent.
+        substr($contentbefore, $sectiondetails->startpos + $sectiondetails->size);
+    // Store details of change size in db
+    ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename, $result,
+        $sectiondetails->startpos, strlen($newcontent), $sectiondetails->size, null, $formdata);
+}
+
+/**
+ * Internal function. Sorts deletions into reverse order so the byte numbers
+ * stay accurate.
+ *
+ * @param object $a Deletion object
+ * @param object $b Other one
+ * @return int Negative to put $a before $b, etc
+ */
+function ouwiki_internal_sort_deletions($a, $b) {
+    return $b->startbyte - $a->startbyte;
+}
+
+/**
+ * Saves a new version of the given named page within a subwiki. Can create
+ * a new page or just add a new version to an existing one. In case of
+ * failure, ends up calling error() rather than returning something.
+ *
+ * @param object $course Course object
+ * @param object $cm Course-module object
+ * @param object $ouwiki OU wiki object
+ * @param object $subwiki Subwiki object
+ * @param string $pagename Name of page (NO SLASHES)
+ * @param string $content XHTML Content (NO SLASHES)
+ * @param int $changestart For section changes. Start position of change. (-1 if not section change)
+ * @param int $changesize Size of changed section.
+ * @param int $changeprevsize Previous size of changed section
+ * @param bool $nouser If true, creates as system
+ * @param object $formdata if coming from edit will have content embedded media and attachments
+ * @param int revertversionid if coming from revert.php will have an older versionid
+ */
+function ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename, $content,
+        $changestart = -1, $changesize = -1, $changeprevsize = -1, $nouser = null,
+        $formdata = null, $revertversionid = null, $importversionid = null) {
+
+    global $DB, $USER;
+    global $ouwikiinternalre, $ouwiki_count; // Nasty but I can't think of a better way!
+
+    $transaction = $DB->start_delegated_transaction();
+
+    // Find page if it exists
+    $pageversion = ouwiki_get_current_page($subwiki, $pagename, OUWIKI_GETPAGE_CREATE);
+
+    $previousversionid = null;
+    if ($pageversion->currentversionid) {
+        $previousversionid = $pageversion->currentversionid;
+    }
+
+    // Analyse content for HTML headings that don't already have an ID.
+    // These are all assigned unique, fairly short IDs.
+
+    // Get number of version [guarantees in-page uniqueness of generated IDs]
+    $versionnumber = $DB->count_records('ouwiki_versions', array('pageid' => $pageversion->pageid));
+
+    // Remove any spaces from annotation tags that were added for editing or by users
+    // and remove any duplicate annotation tags
+    $pattern = '~<span\b.id=\"annotation(.+?)\">.*?</span>~';
+    $replace = '<span id="annotation$1"></span>';
+    $content = preg_replace($pattern, $replace, $content);
+    unset($pattern, $replace, $used);
+
+    // Get rid of any heading tags that only contain whitespace
+    $emptypatterns = array();
+    for ($i = 1; $i <= 6; $i++) {
+        $emptypatterns[] = '~<h'.$i.'[^>]*>\s*(<br[^>]*>\s*)*</h'.$i.'>~';
+    }
+    $content = preg_replace($emptypatterns, '', $content);
+
+    // List all headings that already have IDs, to check for duplicates
+    $matches = array();
+    preg_match_all('|<h[1-9] id="ouw_s(.*?)">(.*?)</h[1-9]>|',
+        $content, $matches, PREG_SET_ORDER|PREG_OFFSET_CAPTURE);
+
+    // Organise list by ID
+    $byid = array();
+    foreach ($matches as $index => $data) {
+        $id = $data[1][0];
+        if (!array_key_exists($id, $byid)) {
+            $byid[$id] = array();
+        }
+        $byid[$id][] = $index;
+    }
+
+    // Handle any duplicates
+    $deletebits = array();
+    foreach ($byid as $id => $duplicates) {
+        if (count($duplicates) > 1) {
+            // We have a duplicate. By default, keep the first one
+            $keep = $duplicates[0];
+
+            // See if there is a title entry in the database for it
+            $knowntitle = $DB->get_field('ouwiki_sections', 'title',
+                    array('xhtmlid' => $id, 'pageid' => $pageversion->pageid));
+            if ($knowntitle) {
+                foreach ($duplicates as $duplicate) {
+                    $title = ouwiki_get_section_title(null, null, $matches[$duplicate][2][0]);
+                    if ($title === $knowntitle) {
+                        $keep = $duplicate;
+                        break;
+                    }
+                }
+            }
+
+            foreach ($duplicates as $duplicate) {
+                if ($duplicate !== $keep) {
+                    $deletebits[] = (object) array(
+                        'startbyte' => $matches[$duplicate][1][1] - 10,
+                        'bytes' => strlen($matches[$duplicate][1][0]) + 11);
+                }
+            }
+        }
+    }
+
+    // Were there any?
+    if (count($deletebits) > 0) {
+        // Sort in reverse order of starting position
+        usort($deletebits, 'ouwiki_internal_sort_deletions');
+
+        // Delete each bit
+        foreach ($deletebits as $deletebit) {
+            $content = substr($content, 0, $deletebit->startbyte).
+                substr($content, $deletebit->startbyte + $deletebit->bytes);
+        }
+    }
+
+    // Replace existing empty headings with an ID including version count plus another index
+    $ouwiki_count = 0;
+    $ouwikiinternalre = new stdClass();
+    $ouwikiinternalre->version = $versionnumber;
+    $ouwikiinternalre->count = 0;
+    $sizebefore = strlen($content);
+    $content = preg_replace_callback('/<h([1-9])>/', 'ouwiki_internal_re_headings', $content);
+    $sizeafter = strlen($content);
+
+    // Replace wiki links to [[Start page]] with the correct (non
+    // language-specific) format [[]]
+    $regex = str_replace('.*?', preg_quote(get_string('startpage', 'ouwiki')),
+        OUWIKI_LINKS_SQUAREBRACKETS) . 'ui';
+    $newcontent = @preg_replace($regex, '[[]]', $content);
+    if ($newcontent === null) {
+        // Unicode support not available! Change the regex and try again
+        $regex = preg_replace('~ui$~', 'i', $regex);
+        $newcontent = preg_replace($regex, '[[]]', $content);
+    }
+    $content = $newcontent;
+
+    // Create version
+    $version = new StdClass;
+    $version->pageid = $pageversion->pageid;
+    $version->xhtml = $content; // May be altered later (see below)
+    $version->xhtmlformat = FORMAT_MOODLE; // Using fixed value here is a bit rubbish
+    $version->timecreated = time();
+    $version->wordcount = ouwiki_count_words($content);
+    $version->previousversionid = $previousversionid;
+    $version->importversionid = $importversionid;
+    if (!$nouser) {
+        $version->userid = $USER->id;
+    }
+    if ($changestart != -1) {
+        $version->changestart = $changestart;
+        // In tracking the new size, account for any added headings etc
+        $version->changesize = $changesize + ($sizeafter - $sizebefore);
+        $version->changeprevsize = $changeprevsize;
+    }
+    try {
+        $versionid = $DB->insert_record('ouwiki_versions', $version);
+
+        // if firstversionid is already set in the current page use that
+        // else this is a new page and version entirely
+        if (!$pageversion->firstversionid) {
+            $DB->set_field('ouwiki_pages', 'firstversionid', $versionid, array('id' => $version->pageid));
+        }
+    } catch (Exception $e) {
+        ouwiki_dberror($e);
+    }
+
+    // information needed for attachments
+    $fs = get_file_storage();
+    $modcontext = context_module::instance($cm->id);
+    $prevversion = ($revertversionid) ? $revertversionid : $pageversion->versionid;
+
+    // save new files connected with the version from the formdata if set
+    if ($formdata) {
+        $formdata->content = file_save_draft_area_files($formdata->content['itemid'],
+                $modcontext->id, 'mod_ouwiki', 'content', $versionid,
+                array('subdirs' => 0), $content);
+        if ($content !== $formdata->content) {
+            $DB->set_field('ouwiki_versions', 'xhtml', $formdata->content,
+                    array('id' => $versionid));
+        }
+        if (isset($formdata->attachments)) {
+            file_save_draft_area_files($formdata->attachments, $modcontext->id, 'mod_ouwiki',
+                    'attachment', $versionid, array('subdirs' => 0));
+        }
+    } else {
+        if ($oldfiles = $fs->get_area_files($modcontext->id, 'mod_ouwiki', 'content',
+                $prevversion)) {
+            foreach ($oldfiles as $oldfile) {
+                // copy this file to the version record.
+                $fs->create_file_from_storedfile(array(
+                    'contextid' => $modcontext->id,
+                    'filearea' => 'content',
+                    'itemid' => $versionid), $oldfile);
+            }
+        }
+    }
+    if (!$formdata || (!empty($formdata->section) || !empty($formdata->newsection))) {
+        // copy attached files from previous version when no form or no attachments element.
+        if ($oldfiles = $fs->get_area_files($modcontext->id, 'mod_ouwiki', 'attachment',
+                $prevversion)) {
+            foreach ($oldfiles as $oldfile) {
+                // copy this file to the version record.
+                $fs->create_file_from_storedfile(array(
+                        'contextid' => $modcontext->id,
+                        'filearea' => 'attachment',
+                        'itemid' => $versionid), $oldfile);
+            }
+        }
+    }
+
+    // Update latest version
+    $DB->set_field('ouwiki_pages', 'currentversionid', $versionid,
+            array('id' => $pageversion->pageid));
+
+    // Analyse for links
+    $wikilinks = array();
+    $externallinks = array();
+
+    // Wiki links: ordinary [[links]]
+    $matches = array();
+    preg_match_all(OUWIKI_LINKS_SQUAREBRACKETS, $content, $matches, PREG_PATTERN_ORDER);
+    foreach ($matches[1] as $match) {
+        // Convert to page name (this also removes HTML tags etc)
+        $wikilinks[] = ouwiki_get_wiki_link_details($match)->page;
+    }
+
+    // Note that we used to support CamelCase links but have removed support because:
+    // 1. Confusing: students type JavaScript or MySpace and don't expect it to become a link
+    // 2. Not accessible: screenreaders cannot cope with run-together words, and
+    //    dyslexic students can have difficulty reading them
+
+    // External links
+    preg_match_all('/<a [^>]*href=(?:(?:\'(.*?)\')|(?:"(.*?))")/',
+        $content, $matches, PREG_PATTERN_ORDER);
+    foreach ($matches[1] as $match) {
+        if ($match) {
+            $externallinks[] = html_entity_decode($match);
+        }
+    }
+    foreach ($matches[2] as $match) {
+        if ($match) {
+            $externallinks[] = html_entity_decode($match);
+        }
+    }
+
+    // Add link records
+    $link = new StdClass;
+    $link->fromversionid = $versionid;
+    foreach ($wikilinks as $targetpage) {
+        if (!empty($targetpage)) {
+            $pagerecord = $DB->get_record_select('ouwiki_pages',
+                    'subwikiid = ? AND UPPER(title) = UPPER(?)', array($subwiki->id, $targetpage));
+            if ($pagerecord) {
+                $pageid = $pagerecord->id;
+            } else {
+                $pageid = false;
+            }
+        } else {
+            $pageid = $DB->get_field_select('ouwiki_pages', 'id',
+                    'subwikiid = ? AND title IS NULL', array($subwiki->id));
+        }
+        if ($pageid) {
+            $link->topageid = $pageid;
+            $link->tomissingpage = null;
+        } else {
+            $link->topageid = null;
+            $link->tomissingpage = strtoupper($targetpage);
+        }
+        try {
+            $link->id = $DB->insert_record('ouwiki_links', $link);
+        } catch (Exception $e) {
+            ouwiki_dberror($e);
+        }
+    }
+    $link->topageid = null;
+    $link->tomissingpage = null;
+    foreach ($externallinks as $url) {
+        // Restrict length of URL
+        if (core_text::strlen($url) > 255) {
+            $url = core_text::substr($url, 0, 255);
+        }
+        $link->tourl = $url;
+        try {
+            $link->id = $DB->insert_record('ouwiki_links', $link);
+        } catch (Exception $e) {
+            ouwiki_dberror($e);
+        }
+    }
+
+    // Inform search, if installed
+    if (ouwiki_search_installed()) {
+        $doc = new local_ousearch_document();
+        $doc->init_module_instance('ouwiki', $cm);
+        if ($subwiki->groupid) {
+            $doc->set_group_id($subwiki->groupid);
+        }
+        $doc->set_string_ref($pageversion->title === '' ? null : $pageversion->title);
+        if ($subwiki->userid) {
+            $doc->set_user_id($subwiki->userid);
+        }
+        $title = $pageversion->title;
+        $doc->update($title, $content);
+    }
+
+    // Check and remove any files not included in new version.
+    $unknownfiles = array();
+    $versioncontent = $DB->get_field('ouwiki_versions', 'xhtml', array('id' => $versionid));
+    if (! empty($version->previousversionid)) {
+        // Get any filenames in content.
+        preg_match_all("#@@PLUGINFILE@@/(\S)+([.]\w+)#", $versioncontent, $matches);
+        if (! empty($matches)) {
+            // Extract the file names from the matches.
+            $filenames = array();
+            foreach ($matches[0] as $match) {
+                // Get file name.
+                $match = str_replace('@@PLUGINFILE@@/', '', $match);
+                array_push($filenames, urldecode($match));
+            }
+
+            // Get version files.
+            if ($ouwikifiles = $fs->get_area_files($modcontext->id, 'mod_ouwiki', 'content',
+                $versionid)) {
+                // For each file check to see whether there is a match.
+                foreach ($ouwikifiles as $storedfile) {
+                    $storedfilename = $storedfile->get_filename();
+                    // If filename is a directory ignore - must be a valid file.
+                    if (!$storedfile->is_directory() && !in_array($storedfilename, $filenames)) {
+                        // Delete file.
+                        $storedfile->delete();
+                    }
+                }
+            }
+        }
+    }
+
+    $transaction->allow_commit();
+    return $versionid;
+}
+
+/**
+ * Given the text of a wiki link (between [[ and ]]), this function converts it
+ * into a safe page name by removing white space at each end and restricting to
+ * max 200 characters. Also splits out the title (if provided).
+ *
+ * @param string $wikilink HTML code between [[ and ]]
+ * @return object Object with parameters ->page (page name as PHP UTF-8
+ *   string), ->title (link title as HTML; either an explicit title if specified
+ *   or the start page string or the page name as html), ->rawpage (page name
+ *   as HTML including possible entities, tags), and ->rawtitle (link title if
+ *   specified as HTML including possible entities, tags; null if not specified)
+ */
+function ouwiki_get_wiki_link_details($wikilink) {
+    // Split out title if present (note: because | is lower-ascii it is safe
+    // to use byte functions rather than UTF-8 ones)
+    $rawtitle = null;
+    $bar = strpos($wikilink, '|');
+    if ($bar !== false) {
+        $rawtitle = trim(substr($wikilink, $bar+1));
+        $wikilink = substr($wikilink, 0, $bar);
+    }
+
+    // Remove whitespace at either end
+    $wikilink = trim($wikilink);
+    $rawpage = $wikilink;
+
+    // Remove html tags
+    $wikilink = html_entity_decode(preg_replace(
+        '/<.*?>/', '', $wikilink), ENT_QUOTES, 'UTF-8');
+
+    // Trim to 200 characters or less (note: because we don't want to cut it off
+    // in the middle of a character, we use proper UTF-8 functions)
+    if (core_text::strlen($wikilink) > 200) {
+        $wikilink = core_text::substr($wikilink, 0, 200);
+        $space = core_text::strrpos($wikilink, ' ');
+        if ($space > 150) {
+            $wikilink = core_text::substr($wikilink, 0, $space);
+        }
+    }
+
+    // Remove non-breaking spaces
+    $wikilink = str_replace(html_entity_decode('&nbsp;', ENT_QUOTES, 'UTF-8'), ' ', $wikilink);
+
+    // What will the title be of this link?
+    if ($rawtitle) {
+        $title = $rawtitle;
+    } else if ($wikilink === '') {
+        $title = get_string('startpage', 'ouwiki');
+    } else {
+        $title = $rawpage;
+    }
+
+    // Return object with both pieces of information
+    return (object) array(
+                        'page' => $wikilink,
+                        'title' => $title,
+                        'rawtitle' => $rawtitle,
+                        'rawpage' => $rawpage
+                    );
+}
+
+/** @return True if OU search extension is installed */
+function ouwiki_search_installed() {
+    global $CFG;
+    return @include_once($CFG->dirroot.'/local/ousearch/searchlib.php');
+}
+
+/**
+ * Obtains the title (contents of h1-6 tag as plain text) for a
+ * named section.
+ *
+ * @param string $sectionxhtmlid Section ID not including prefix
+ * @param string $xhtml Full XHTML content of page
+ * @param string $extracted If the title has already been pulled out of
+ *   the XHTML, supply this variable (other two are ignored)
+ * @return mixed Title or false if not found
+ */
+function ouwiki_get_section_title($sectionxhtmlid, $xhtml, $extracted = null) {
+    // Get from HTML if not already extracted
+    $matches = array();
+    if (!$extracted && preg_match(
+        '|<h[1-9] id="ouw_s'.$sectionxhtmlid.'">(.*?)</h[1-9]>|', $xhtml, $matches)) {
+        $extracted = $matches[1];
+    }
+    if (!$extracted) {
+        // Not found in HTML
+        return false;
+    }
+
+    // Remove tags and decode entities
+    $stripped = preg_replace('|<.*?>|', '', $extracted);
+    $stripped = html_entity_decode($stripped, ENT_QUOTES, 'UTF-8');
+    // Tidy up whitespace
+    $stripped = preg_replace('|\s+|', ' ', $stripped);
+
+    return trim($stripped);
+}
+
+/**
+ * Obtains list of wiki links from other pages of the wiki to this one.
+ *
+ * @param int $pageid
+ * @return array Array (possibly zero-length) of page objects
+ */
+function ouwiki_get_links_to($pageid) {
+    global $DB;
+
+    $links = $DB->get_records_sql('SELECT DISTINCT p.id, p.title, UPPER(p.title) AS uppertitle
+                                    FROM {ouwiki_links} l
+                                INNER JOIN {ouwiki_pages} p ON p.currentversionid = l.fromversionid
+                                WHERE l.topageid = ?
+                                    ORDER BY UPPER(p.title)', array($pageid));
+
+    return $links ? $links : array();
+}
+
+// @return Array listing XHTML tags that we stick in a couple newlines after
+function ouwiki_internal_newline_tags() {
+    return array('h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'div', 'p', 'ul', 'li', 'table');
+}
+
+/**
+ * Normalises/pretty-prints XHTML. This is intended to produce content that can
+ * reasonably be edited using the plaintext editor and that has linebreaks only in
+ * places we know about. Should be called before ouwiki_save_version.
+ *
+ * @param string $content Content from html editor
+ * @return string Content after pretty-printing
+ */
+function ouwiki_format_xhtml_a_bit($content) {
+    // 0. Remove unnecessary linebreak at start of textarea
+    if (substr($content, 0, 2) == "\r\n") {
+        $content = substr($content, 2);
+    }
+
+    // 1. Replace all (possibly multiple) whitespace with single spaces
+    try {
+        $content = preg_replace('/\s+/u', ' ', $content);
+    } catch(moodle_exception $e) {
+        // u modifier will throw error if invalid utf8 sent - fallback.
+        $content = preg_replace('/\s+/', ' ', $content);
+    }
+
+    // 2. Add two line breaks after tags marked as requiring newline
+    $newlinetags = ouwiki_internal_newline_tags();
+    $searches = array();
+    foreach ($newlinetags as $tag) {
+        $searches[] = '|(</'.$tag.'>) ?(?!\n\n)|i';
+    }
+    $content = preg_replace($searches, '$1'."\n\n", $content);
+
+    // 3. Add single line break after <br/>
+    $content = preg_replace('|(<br\s*/?>)\s*|', '$1'."\n", $content);
+
+    return $content;
+}
+
+function ouwiki_xhtml_to_plain($content) {
+    // Just get rid of <br/>
+    $content = preg_replace('|<br\s*/?>|', '', $content);
+
+    return $content;
+}
+
+function ouwiki_plain_to_xhtml($content) {
+    // Convert CRLF to LF (makes easier!)
+    $content = preg_replace('/\r?\n/', "\n" , $content);
+
+    // Remove line breaks that are added by format_xhtml_a_bit
+    // i.e. that were already present
+    $newlinetags = ouwiki_internal_newline_tags();
+    $searches = array();
+    foreach ($newlinetags as $tag) {
+        $searches[] = '|(</'.$tag.'>)\n\n|i';
+    }
+    $content = preg_replace($searches, '$1', $content);
+
+    // Now turn all the other line breaks into <br/>
+    $content = str_replace("\n", '<br />', $content);
+
+    return $content;
+}
+
+/**
+ * @param string $content Arbitrary string
+ * @return string Version of string suitable for inclusion in double-quoted
+ *   Javascript variable within XHTML.
+ */
+function ouwiki_javascript_escape($content) {
+    // Escape slashes
+    $content = str_replace("\\", "\\\\", $content);
+
+    // Escape newlines
+    $content = str_replace("\n", "\\n", $content);
+
+    // Escape double quotes
+    $content = str_replace('"', '\\"', $content);
+
+    // Remove ampersands and left-angle brackets (for XHTML)
+    $content = str_replace('<', '\\x3c', $content);
+    $content = str_replace('&', '\\x26', $content);
+
+    return $content;
+}
+
+/**
+ * Generates a 16-digit magic number at random.
+ *
+ * @return string 16-digit long string
+ */
+function ouwiki_generate_magic_number() {
+    $result = rand(1, 9);
+    for ($i = 0; $i < 15; $i++) {
+        $result .= rand(0, 9);
+    }
+
+    return $result;
+}
+
+/**
+ * @param object $subwiki For details of user/group and ID so that
+ * we can make links
+ *
+ * @param object $cm Course-module object (again for making links)
+ * @param object $pageversion Data from page and version tables.
+ * @return string HTML content for page
+ */
+function ouwiki_display_create_page_form($subwiki, $cm, $pageversion) {
+    $result = '';
+
+    // shared form elements
+    $genericformdetails = '<form method="get" action="edit.php">' .
+            '<div class="ouwiki_addnew_div">' .
+            '<input type="hidden" name="id" value="'.$cm->id.'"/>';
+
+    $result .= '<div id="ouwiki_addnew"><ul>';
+
+    // Create new section.
+    $result .= '<li>' . $genericformdetails;
+    if ($pageversion->title !== '') {
+        $result .= '<input type="hidden" name="page" value="' . $pageversion->title . '" />';
+    }
+    $result .= '<input type="hidden" name="user" value="' . $subwiki->userid . '" />';
+    $result .= '<label for="ouw_newsectionname">' . get_string('addnewsection', 'ouwiki') . '</label> ' .
+            '<input type="text" size="30" name="newsection" id="ouw_newsectionname" value="" />' .
+            '<input type="submit" id="ouw_add" name="ouw_subb" value="' .
+            get_string('add', 'ouwiki').'" class="osep-smallbutton" />' .
+            '</div></form></li>';
+
+    // Create new page.
+    $result .= '<li>' . $genericformdetails .
+            '<input type="hidden" name="frompage" value="' . $pageversion->title . '" />' .
+            '<label for="ouw_newpagename">' . get_string('createnewpage', 'ouwiki') . '</label> '.
+            '<input type="text" name="page" id="ouw_newpagename" size="30" value="" />' .
+            '<input type="submit" id="ouw_create" name="ouw_subb" value="' .
+            get_string('create', 'ouwiki') . '" class="osep-smallbutton" />' .
+            '</div></form></li>';
+
+    $result .= '</ul></div>';
+
+    return $result;
+}
+
+/**
+ * @param string $cm ID of course module
+ * @param string $subwiki details if it exists
+ * @param string $pagename of the original wiki page for which the new page is a link of,
+ *   null for start page
+ * @param string $newpagename page name of the new page being created (not null)
+ * @param string $content of desired new page
+ */
+function ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename, $newpagename,
+        $content, $formdata) {
+    global $DB;
+    $transaction = $DB->start_delegated_transaction();
+
+    // need to get old page and new page
+    $sourcecontent = '';
+    if ($sourcepage = ouwiki_get_current_page($subwiki, $pagename)) {
+        $sourcecontent = $sourcepage->xhtml;
+        $sourcecontent .= '<p>[['.htmlspecialchars($newpagename).']]</p>';
+    }
+
+    // Create the new page
+    $pageversion = ouwiki_get_current_page($subwiki, $newpagename, OUWIKI_GETPAGE_CREATE);
+
+    // need to save version - will call error if does not work
+    ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $newpagename, $content, -1, -1, -1,
+            null, $formdata);
+
+    // save the revised original page as a new version
+    ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename, $sourcecontent);
+
+    $transaction->allow_commit();
+}
+
+/**
+ * Creates a new section on a page from scratch
+ *
+ * @param string $cm ID of course module
+ * @param string $subwiki details if it exists
+ * @param string $pagename of the original wiki page for which the new page is a link of
+ * @param string $newcontent of desired new section
+ * @param string $sectionheader for the new section
+ */
+function ouwiki_create_new_section($course, $cm, $ouwiki, $subwiki, $pagename, $newcontent,
+        $sectionheader, $formdata) {
+    $sourcepage = ouwiki_get_current_page($subwiki, $pagename);
+    $sectiondetails = ouwiki_get_new_section_details($sourcepage->xhtml, $sectionheader);
+    ouwiki_save_new_version_section($course, $cm, $ouwiki, $subwiki, $pagename,
+            $sourcepage->xhtml, $newcontent, $sectiondetails, $formdata);
+}
+
+/**
+ * Obtains various details about a named section. (This function will call error()
+ * if it can't find the section; it shouldn't fail if the section was checked with
+ * ouwiki_find_sections.)
+ *
+ * @param string $content XHTML content
+ * @param string $sectionheader for the new section
+ * @return Object containing ->startpos and ->content
+ */
+function ouwiki_get_new_section_details($content, $sectionheader) {
+    // Create new section details
+    $result = new StdClass;
+    $result->startpos = strlen($content);
+    $result->size = 0;
+    $result->content = $sectionheader;
+
+    return $result;
+}
+
+/**
+ * Obtains information about all the annotations for the given page.
+ *
+ * @param int $pageid ID of wiki page
+ * @return array annotations indexed by annotation id. Returns an empty array if none found.
+ */
+function ouwiki_get_annotations($pageversion) {
+    global $DB;
+
+    $annotations = array();
+
+    $userfields = user_picture::fields('u', null, 'userid');
+
+    $rs = $DB->get_records_sql("SELECT a.id, a.pageid, a.userid, a.timemodified,
+                                    a.content, $userfields
+                                FROM {ouwiki_annotations} a
+                                INNER JOIN {user} u ON a.userid = u.id
+                                    WHERE a.pageid = ?
+                                    ORDER BY a.id", array($pageversion->pageid));
+
+    // look through the results and check for orphanes annotations.
+    // Also set the position and tag for later use.
+    if ($rs) {
+        $annotations = $rs;
+        foreach ($annotations as &$annotation) {
+            $spanstr = '<span id="annotation'.$annotation->id.'">';
+            $position = strpos($pageversion->xhtml, $spanstr);
+            if ($position !== false) {
+                $annotation->orphaned = 0;
+                $annotation->position = $position;
+                $annotation->annotationtag = $spanstr;
+            } else {
+                $annotation->orphaned = 1;
+                $annotation->position = '';
+                $annotation->annotationtag = '';
+            }
+            $annotation->content = $annotation->content;
+        }
+    }
+
+    return $annotations;
+}
+
+/**
+ * Sets up the annotation markers
+ *
+ * @param string $xhtmlcontent The content (xhtml) to be displayed
+ * @param int $pageid ID of wiki page
+ * @return array annotations indexed by annotation id. Returns an empty array if none found.
+ */
+function ouwiki_setup_annotation_markers($xhtmlcontent) {
+    $content = $xhtmlcontent;
+    // get lists of all the tags
+    $pattern = '~</?.+?>~';
+    $taglist = array();
+    $tagcount = preg_match_all($pattern, $content, $taglist, PREG_OFFSET_CAPTURE);
+
+    $pattern = '~\[\[.+?]\]~';
+    $taglist2 = array();
+    $tagcount = preg_match_all($pattern, $content, $taglist2, PREG_OFFSET_CAPTURE);
+
+    // merge the lists together
+    $taglist = array_merge($taglist[0], $taglist2[0]);
+
+    // create a new array of tags against char positions.
+    $tagpositions = array();
+    foreach ($taglist as $tag) {
+        $tagpositions[$tag[1]] = $tag[0];
+    }
+
+    // look at each postion, check it's not within a tag and create a list of space locations
+    $spacepositions = array();
+    $newcontent = '';
+    $prevpos = 0;
+    $space = false;
+    $markeradded = false;
+    $pos = 0;
+    while ($pos < strlen($content)) {
+        // we check if the $pos is the start of a tag and do something for particular tags
+        if (array_key_exists($pos, $tagpositions)) {
+            if ($tagpositions[$pos] == '<p>') {
+                $newcontent .= $tagpositions[$pos];
+                $pos += strlen($tagpositions[$pos]);
+                $newcontent .= ouwiki_get_annotation_marker($pos);
+                $markeradded = true;
+                $space = false;
+                continue;
+            } else if ($tagpositions[$pos] == '</p>') {
+                $newcontent .= ouwiki_get_annotation_marker($pos);
+                $newcontent .= $tagpositions[$pos];
+                $pos += strlen($tagpositions[$pos]);
+                $markeradded = true;
+                $space = false;
+                continue;
+            } else if (strpos($tagpositions[$pos], '<span id="annotation') !== false) {
+                // we're at the opening annotation tag span so we need to skip past </span>
+                // which is the next tag in $tagpositions[]
+                $newcontent .= $tagpositions[$pos];
+                $pos += strlen($tagpositions[$pos]);
+                while (!array_key_exists($pos, $tagpositions)) {
+                    $newcontent .= substr($content, $pos, 1);
+                    $pos++;
+                    // print_object('while '.$pos);// jb23347 commented out as looks like debugging
+                }
+
+                $newcontent .= $tagpositions[$pos];
+                $pos += strlen($tagpositions[$pos]);
+                $markeradded = true;
+                continue;
+            } else if (strpos($tagpositions[$pos], '<a ') !== false) {
+                // markers are not added in the middle of an anchor tag so need to skip
+                // to after the closing </a> in $tagpositions[]
+                $newcontent .= ouwiki_get_annotation_marker($pos);
+                $markeradded = true;
+                $space = true;
+                $newcontent .= $tagpositions[$pos];
+                $pos += strlen($tagpositions[$pos]);
+                while (!array_key_exists($pos, $tagpositions)) {
+                    $newcontent .= substr($content, $pos, 1);
+                    $pos++;
+                }
+
+                $newcontent .= $tagpositions[$pos];
+                $pos += strlen($tagpositions[$pos]);
+                continue;
+            } else {
+                $newcontent .= $tagpositions[$pos];
+                $pos += strlen($tagpositions[$pos]);
+                continue;
+            }
+        }
+
+        // if we have not already inserted a marker then check for a space
+        // next time through we can check for a non space char indicating the start of a new word
+        if (!$markeradded) {
+            // this is the first char so if no marker has been added due to a <p> then
+            // pretend the preceding char was a space to force adding a marker
+            if ($pos == 0) {
+                $space = true;
+            }
+            if (substr($content, $pos, 1) === ' ') {
+                $space = true;
+            } else if ($space) {
+                $newcontent .= ouwiki_get_annotation_marker($pos);
+                $space = false;
+            }
+
+            // add the current charactor from the original content
+            $newcontent .= substr($content, $pos, 1);
+            $pos++;
+        } else {
+            $markeradded = false;
+        }
+    }
+
+    $content = $newcontent;
+    return $content;
+}
+
+/**
+ * Returns a formatted annotation marker
+ *
+ * @param integer $position The character position of the annotation
+ * @return string the formatted annotation marker
+ */
+function ouwiki_get_annotation_marker($position) {
+    global $OUTPUT;
+
+    $icon = '<img src="'.$OUTPUT->pix_url('annotation-marker', 'ouwiki').'" alt="'.
+            get_string('annotationmarker', 'ouwiki').'" title="'.
+            get_string('annotationmarker', 'ouwiki').'" />';
+    return '<span class="ouwiki-annotation-marker" id="marker'.$position.'">'.$icon.'</span>';
+}
+
+/**
+ * Highlights existing annotations in the xhtml for display.
+ *
+ * @param string $xhtmlcontent The content (xhtml) to be displayed: output variable
+ * @param object $annotations List of annotions in a object
+ * @param string $page The page being displayed
+ * @return string content (xhtml) to be displayed
+ */
+function ouwiki_highlight_existing_annotations($xhtmlcontent, $annotations, $page) {
+    global $OUTPUT, $PAGE;
+    $ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+    $content = $xhtmlcontent;
+
+    $icon = '<img src="'.$OUTPUT->pix_url('annotation', 'ouwiki').'" alt="'.
+            get_string('expandannotation', 'ouwiki').'" title="'.
+            get_string('expandannotation', 'ouwiki').'" />';
+
+    usort($annotations, "ouwiki_internal_position_sort");
+    // we only need the used annotations, not the orphaned ones.
+    $usedannotations = array();
+    foreach ($annotations as $annotation) {
+        if (!$annotation->orphaned) {
+            $usedannotations[$annotation->id] = $annotation;
+        }
+    }
+
+    $annotationnumber = count($usedannotations);
+    if ($annotationnumber) {
+        // cycle through the annotations and process ready for display
+        foreach ($usedannotations as $annotation) {
+            switch ($page) {
+                case 'view':
+                    $ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+                    $replace = '<span class="ouwiki-annotation-tag" id="annotation'.
+                        $annotation->id.'">'.
+                        $icon.$ouwikioutput->ouwiki_print_hidden_annotation($annotation);
+                    break;
+                case 'annotate':
+                    $replace = '<span id="zzzz'.$annotationnumber.'"><strong>('.
+                            $annotationnumber.')</strong>';
+                    break;
+                case 'edit':
+                    $replace = $annotation->annotationtag.'&nbsp;';
+                    break;
+                case 'portfolio':
+                    $replace = '<span id="annotation'.$annotation->id.'">'.
+                            $ouwikioutput->ouwiki_print_portfolio_annotation($annotation);
+                    break;
+                case 'clear' :
+                    $replace = '<span>';
+                    break;
+            }
+            $content = str_replace($annotation->annotationtag, $replace, $content);
+            $annotationnumber--;
+        }
+        if ($page === 'clear') {
+            // Get rid of any empty tags added by clear
+            $content = str_replace('<span></span>', '', $content);
+        }
+    }
+    return $content;
+}
+
+/**
+ * Inserts new annotations into the xhtml at the marker location
+ *
+ * @param string $marker The marker id added to the annotation edit page
+ * @param string &$xhtml A reference to the subwiki xhtml
+ * @param string $content The content of the annotation
+ */
+function ouwiki_insert_annotation($position, &$xhtml, $id) {
+    $replace = '<span id="annotation'.$id.'"></span>';
+    $xhtml = substr_replace($xhtml, $replace, $position, 0);
+}
+
+// Array sort callback function
+function ouwiki_internal_position_sort($a, $b) {
+    return intval($b->position) - intval($a->position);
+}
+
+/**
+ * Cleans up the annotation tags
+ *
+ * @param $updated_annotations
+ * @param string &$xhtml A reference to the subwiki xhtml
+ * @return bool $result
+ */
+function ouwiki_cleanup_annotation_tags($updated_annotations, &$xhtml) {
+    $result = false;
+    $matches = array();
+    $pattern = '~<span\b.id=\"annotation([0-9].+?)\"[^>]*>(.*?)</span>~';
+
+    preg_match_all($pattern, $xhtml, $matches);
+    foreach ($matches[1] as $match) {
+        if (!array_key_exists($match, $updated_annotations)) {
+            $deletepattern = '~<span\b.id=\"annotation'.$match.'\">.*?</span>~';
+            $xhtml = preg_replace($deletepattern, '', $xhtml);
+            $result = true;
+        }
+    }
+
+    return $result;
+}
+
+/**
+ * Sets the page editing lock according to $lock
+ *
+ * @param integer $pageid Wiki page id
+ * @param bool $lock
+ * @return nothing
+ */
+function ouwiki_lock_editing($pageid, $lock) {
+    global $DB;
+
+    $locked = ouwiki_is_page_editing_locked($pageid);
+
+    if ($lock != $locked) {
+        $dataobject = new stdClass();
+        $dataobject->id = $pageid;
+        $dataobject->locked = ($lock) ? 1 : 0;
+
+        try {
+            $DB->update_record('ouwiki_pages', $dataobject);
+        } catch (Exception $e) {
+            ouwiki_dberror($e, 'Could not change the lock status for this wiki page');
+        }
+    }
+}
+
+/**
+ * Returns the lock status of a wiki page
+ *
+ * @param integer $pageid Wiki page id
+ * @return bool True if locked
+ */
+function ouwiki_is_page_editing_locked($pageid) {
+    global $DB;
+
+    $rs = $DB->get_records_sql('SELECT locked FROM {ouwiki_pages} WHERE id = ?', array($pageid));
+
+    foreach ($rs as $record) {
+        return ($record->locked == '1') ? true : false;
+    }
+
+    return false;
+}
+
+/**
+ * Sets up the lock page button and form html
+ *
+ * @param object $pageversion Page/version object
+ * @param int $cmid Course module id
+ * @param string pagename
+ * @return string $result Contains the html for the form
+ */
+function ouwiki_display_lock_page_form($pageversion, $cmid, $pagename) {
+    $result='';
+
+    $genericformdetails ='<form method="get" action="lock.php">
+    <div class="ouwiki_lock_div">
+    <input type="hidden" name="ouw_pageid" value="'.$pageversion->pageid.'" />
+    <input type="hidden" name="id" value="'.$cmid.'" />
+    <input type="hidden" name="user" value="'.$pageversion->userid.'" />';
+    if (!empty($pagename)) {
+        $genericformdetails .= '<input type="hidden" name="page" value="' . $pagename . '" />';
+    }
+    $buttonvalue = ($pageversion->locked == '1') ?  get_string('unlockpage', 'ouwiki') :
+            get_string('lockpage', 'ouwiki');
+
+    $result .= '<div id="ouwiki_lock">'.
+    $genericformdetails.
+    '<input type="submit" id="ouw_lock" name="ouw_lock" value="'.$buttonvalue.'" />
+    </div>
+    </form>
+    </div>';
+
+    return $result;
+}
+
+/**
+ * Sets up the editing lock
+ *
+ * @param object $lock
+ * @param string $ouwiki
+ */
+function ouwiki_print_editlock($lock, $ouwiki) {
+    global $DB, $PAGE;
+
+    // Prepare the warning about lock without JS...
+    $a = new StdClass;
+    $a->now = userdate(time(), get_string('strftimetime'));
+    $a->minutes = (int)(OUWIKI_LOCK_NOJS/60);
+    $a->deadline = userdate(time() + $a->minutes*60, get_string('strftimetime'));
+    $nojswarning = get_string('nojswarning', 'ouwiki', $a);
+    $nojsstart = '<p class="ouw_nojswarning">';
+
+    // Put in the AJAX for keeping the lock, if on a supported browser
+    $ie = core_useragent::check_browser_version('MSIE', 6.0);
+    $ff = core_useragent::check_browser_version('Gecko', 20051106);
+    $op = core_useragent::check_browser_version('Opera', 9.0);
+    $sa = core_useragent::check_browser_version('Safari', 412);
+    $ch = core_useragent::check_browser_version('Chrome', 14);
+    $js = $ie || $ff || $op || $sa || $ch;
+    if ($js) {
+        $nojsdisabled = get_string('nojsdisabled', 'ouwiki');
+        $nojs = $nojsstart.$nojsdisabled.' '.$nojswarning.
+            '<img src="nojslock.php?lockid='.$lock->id.'" alt=""/></p>';
+
+        $strlockcancelled = ouwiki_javascript_escape(get_string('lockcancelled', 'ouwiki'));
+        $intervalms = OUWIKI_LOCK_RECONFIRM * 1000;
+
+        $timeoutscript = '';
+        if ($ouwiki->timeout) {
+            $countdownurgent = ouwiki_javascript_escape(get_string('countdownurgent', 'ouwiki'));
+            $timeoutscript = "var ouw_countdownto = (new Date()).getTime()+1000*{$ouwiki->timeout};
+                    var ouw_countdowninterval=setInterval(function() {
+                    var countdown=document.getElementById('ouw_countdown');
+                    var timeleft=ouw_countdownto-(new Date().getTime());
+                    if (timeleft < 0) {
+                        clearInterval(ouw_countdowninterval);
+                        document.forms['mform1'].elements['save'].click();
+                        return;
+                    }
+                    if(timeleft<2*60*1000) {
+                        var urgent=document.getElementById('ouw_countdownurgent');
+                        if(!urgent.firstChild) {
+                            urgent.appendChild(document.createTextNode(\"".$countdownurgent."\"));
+                            countdown.style.fontWeight='bold';
+                            countdown.style.color='red';
+                        }
+                    }
+                    var minutes=Math.floor(timeleft/(60*1000));
+                    var seconds=Math.floor(timeleft/1000) - minutes*60;
+                    var text=minutes+':';
+                    if(seconds<10) text+='0';
+                    text+=seconds;
+                    while(countdown.firstChild) {
+                        countdown.removeChild(countdown.firstChild);
+                    }
+                    countdown.appendChild(document.createTextNode(text));
+                },500);
+            ";
+        }
+
+        print "<script type='text/javascript'>
+            var intervalID;
+            function handleResponse(id, o) {
+                if (o.responseText=='cancel') {
+                    document.forms['mform1'].elements['preview'].disabled=true;
+                    document.forms['mform1'].elements['save'].disabled=true;
+                    clearInterval(intervalID);
+                    alert(\"$strlockcancelled\");
+                }
+            }
+            function handleFailure(o) {
+                // Ignore for now
+            }
+            intervalID=setInterval(function() {
+                var cfg = {
+                    method: 'POST',
+                    data: 'lockid={$lock->id}',
+                    on: {
+                        success: handleResponse,
+                        failure: handleFailure
+                    }
+                };
+                Y.io('confirmlock.php', cfg);
+            }, $intervalms);
+            $timeoutscript
+            </script>
+            <noscript>
+            $nojs
+            </noscript>
+        ";
+    } else {
+        // If they have a non-supported browser, update the lock time right now without
+        // going through the dodgy image method, to reserve their 15-minute slot.
+        // (This means it will work for Lynx, for instance.)
+        print $nojsstart.get_string('nojsbrowser', 'ouwiki').' '.$nojswarning.'.</p>';
+        $lock->seenat = time() + OUWIKI_LOCK_NOJS;
+        $DB->update_record('ouwiki_locks', $lock);
+    }
+}
+
+/**
+ * Get last-modified time for wiki, as it appears to this user. This takes into
+ * account the user's groups/individual settings if required. (Does not check
+ * that user can view the wiki.)
+ *
+ * Info is static cached, so can be called in multiple places on page.
+ *
+ * @param object $cm Course-modules entry for wiki
+ * @param object $Course Course object
+ * @param int $userid User ID or 0 = current
+ * @return int Last-modified time for this user as seconds since epoch
+ */
+function ouwiki_get_last_modified($cm, $course, $userid = 0) {
+    global $USER, $DB;
+
+    if (!$userid) {
+        $userid = $USER->id;
+    }
+
+    static $results;
+    if (!isset($results)) {
+        $results = array();
+    }
+    if (!array_key_exists($userid, $results)) {
+        $results[$userid] = array();
+    } else if (array_key_exists($cm->id, $results[$userid])) {
+        return $results[$userid][$cm->id];
+    }
+
+    static $ouwikis;
+    if (!isset($ouwikis)) {
+        $ouwikis = array();
+    }
+    if (empty($ouwikis[$course->id])) {
+        $ouwikis[$course->id] = $DB->get_records('ouwiki', array('course' => $course->id));
+    }
+    // Get wiki record.
+    if (!isset($ouwikis[$course->id][$cm->instance])) {
+        return false;
+    }
+    $ouwiki = $ouwikis[$course->id][$cm->instance];
+
+    // Default applies no restriction
+    $restrictjoin = '';
+    $restrictwhere = '';
+    $context = context_module::instance($cm->id);
+
+    switch($ouwiki->subwikis) {
+        case OUWIKI_SUBWIKIS_SINGLE:
+            break;
+
+        case OUWIKI_SUBWIKIS_GROUPS:
+            if (!has_capability('moodle/site:accessallgroups', $context, $userid) &&
+                groups_get_activity_groupmode($cm, $course) == SEPARATEGROUPS) {
+                // Restrictions only in separate groups mode and if you don't have
+                // access all groups
+                $restrictjoin = "INNER JOIN {groups_members} gm ON gm.groupid = sw.groupid";
+                $restrictwhere = "AND gm.userid = :userid";
+            }
+            break;
+
+        case OUWIKI_SUBWIKIS_INDIVIDUAL:
+            if (!has_capability('mod/ouwiki:viewallindividuals', $context)) {
+                // You can't view everyone so restrict.
+                if (has_capability('mod/ouwiki:viewgroupindividuals', $context)) {
+                    // You can view everyone in your group - TODO this is complicated.
+                    $restrictjoin = '
+                        INNER JOIN {groups_members} gm ON gm.userid = sw.userid
+                        INNER JOIN {groups} g ON g.id = gm.groupid
+                        INNER JOIN {groups_members} gm2 ON gm2.groupid = g.id
+                    ';
+                    $restrictwhere = "AND g.courseid = :courseid AND gm2.userid = :userid";
+
+                    if ($cm->groupingid) {
+                        $restrictjoin .= "INNER JOIN {groupings_groups} gg ON gg.groupid = g.id";
+                        $restrictwhere .= "AND gg.groupingid = :groupingid";
+                    }
+                } else {
+                    // You can only view you.
+                    $restrictwhere = 'AND sw.userid = :userid';
+                }
+            }
+            break;
+    }
+
+    // Query for newest version that follows these restrictions
+    $sql = "SELECT MAX(v.timecreated)
+        FROM {ouwiki_versions} v
+            INNER JOIN {ouwiki_pages} p ON p.id = v.pageid
+            INNER JOIN {ouwiki_subwikis} sw ON sw.id = p.subwikiid
+            $restrictjoin
+        WHERE sw.wikiid = :wikiid AND v.deletedat IS NULL
+        $restrictwhere";
+
+    $params = array(
+        'courseid'   => $course->id,
+        'userid'     => $userid,
+        'groupingid' => $cm->groupingid,
+        'wikiid'     => $cm->instance
+    );
+
+    $result = $DB->get_field_sql($sql, $params);
+    $results[$userid][$cm->id] = $result;
+    return $result;
+}
+
+/**
+ * Returns html for a search form for the nav bar
+ * @param object $subwiki wiki to be searched
+ * @param int $cmid wiki to be searched
+ * @return string html
+ */
+function ouwiki_get_search_form($subwiki, $cmid) {
+    if (!ouwiki_search_installed()) {
+        return '';
+    }
+    global $OUTPUT, $CFG;
+    $query = optional_param('query', '', PARAM_RAW);
+    $out = html_writer::start_tag('form', array('action' => 'search.php', 'method' => 'get'));
+    $out .= html_writer::start_tag('div');
+    $out .= html_writer::tag('label', get_string('search', 'ouwiki'),
+            array('for' => 'ouwiki_searchquery'));
+    $out .= $OUTPUT->help_icon('search', 'ouwiki');
+    $out .= html_writer::empty_tag('input',
+            array('type' => 'hidden', 'name' => 'id', 'value' => $cmid));
+    if (!$subwiki->defaultwiki) {
+        if ($subwiki->groupid) {
+            $out .= html_writer::empty_tag('input',
+                    array('type' => 'hidden', 'name' => 'group', 'value' => $subwiki->groupid));
+        }
+        if ($subwiki->userid) {
+            $out .= html_writer::empty_tag('input',
+                    array('type' => 'hidden', 'name' => 'user', 'value' => $subwiki->userid));
+        }
+    }
+    $out .= html_writer::empty_tag('input', array('type' => 'text', 'name' => 'query',
+            'id' => 'ouwiki_searchquery', 'value' => $query));
+    $out .= html_writer::empty_tag('input', array('type' => 'image',
+            'id' => 'ousearch_searchbutton', 'alt' => get_string('search'),
+            'title' => get_string('search'), 'src' => $OUTPUT->pix_url('i/search')));
+    $out .= html_writer::end_tag('div');
+    $out .= html_writer::end_tag('form');
+    return $out;
+}
+
+/**
+ * Returns a wordcount for the given content
+ *
+ * @param string $content
+ * @returns int
+ */
+function ouwiki_count_words($content) {
+
+    // Strip tags and convert entities to text
+    $content = html_entity_decode(strip_tags($content), ENT_QUOTES, 'UTF-8');
+
+    // combine to a single word
+    // hyphen
+    // apostrophe
+    // left single quote
+    // right single quote
+    $content = str_replace('-', '', $content);
+    $content = str_replace('\'', '', $content);
+    $content = str_replace(html_entity_decode('&lsquo;', ENT_QUOTES, 'UTF-8'), '', $content);
+    $content = str_replace(html_entity_decode('&rsquo;', ENT_QUOTES, 'UTF-8'), '', $content);
+
+    // add a space for comma
+    $content = str_replace(',', ' ', $content);
+
+    // non-breaking space to space
+    $content = str_replace(html_entity_decode('&nbsp;', ENT_QUOTES, 'UTF-8'), ' ', $content);
+
+    // Remove:
+    // 0 - empty lines
+    // 1 - double spaces
+    $pattern[0] = '/(^[\r\n]*|[\r\n]+)[\s\t]*[\r\n]+/';
+    $pattern[1] = '/\s\s+/';
+    $content = preg_replace($pattern, ' ', $content);
+
+    // trim again for extra spaces created
+    $content = trim($content);
+
+    if (empty($content)) {
+        return 0;
+    } else {
+        return 1 + substr_count($content, ' ');
+    }
+}
+
+/**
+ * Returns a difference in wordcounts between two
+ * versions as a string.
+ *
+ * @param int $current
+ * @param int $previous
+ * @param mixed $previouspage false if this is the first page
+ * @returns string
+ */
+function ouwiki_wordcount_difference($current, $previous, $previouspage = null) {
+
+    if (!$previouspage) {
+        return $current;
+    }
+
+    if ($previous == 0) {
+        return "+$current";
+    }
+
+    if ($current == 0) {
+        return "-$previous";
+    }
+
+    if ($current == $previous) {
+        return '';
+    }
+
+    $diff = $current - $previous;
+    if ($diff <= 0) {
+        return $diff;
+    } else {
+        return "+$diff";
+    }
+}
+
+/**
+ * Checks what level of participation the currently
+ * logged in user can view
+ *
+ * @param object $course
+ * @param object $ouwiki
+ * @param object $subwiki
+ * @param object $cm
+ * @param integer $userid default null is the current user
+ * @return integer
+ */
+function ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm, $userid = null) {
+    global $USER;
+    if (!$userid) {
+        $userid = $USER->id;
+    }
+    $context = context_module::instance($cm->id);
+
+    $groupmode = groups_get_activity_groupmode($cm, $course);
+    $groupid = $subwiki->groupid;
+
+    $allowgroup =
+            ($groupmode == NOGROUPS || $groupmode == VISIBLEGROUPS)
+            || (has_capability('moodle/site:accessallgroups', $context, $userid))
+            || (groups_is_member($groupid, $userid));
+
+    if (has_capability('mod/ouwiki:viewparticipation', $context, $userid) && $allowgroup) {
+            return OUWIKI_USER_PARTICIPATION;
+    } else if ((int)$ouwiki->subwikis != OUWIKI_SUBWIKIS_INDIVIDUAL &&
+            has_capability('mod/ouwiki:edit', $context, $userid) && $allowgroup) {
+        return OUWIKI_MY_PARTICIPATION;
+    }
+
+    return OUWIKI_NO_PARTICIPATION;
+}
+
+/**
+ * Returns a single users participation for userparticipation.php
+ *
+ * $param int $userid
+ * @param object $subwiki
+ * @return array user participation records
+ */
+function ouwiki_get_user_participation($userid, $subwiki) {
+    global $DB;
+
+    $params = array(
+        'subwikiid' => $subwiki->id,
+        'userid'    => $userid
+    );
+
+    $sql = 'SELECT v.id, p.title, v.timecreated, v.wordcount, p.id AS pageid,
+                v.previousversionid, v.importversionid,
+            (SELECT v2.wordcount
+                FROM {ouwiki_versions} v2
+                WHERE v2.id = v.previousversionid)
+            AS previouswordcount, p.currentversionid, p.firstversionid
+        FROM {ouwiki_pages} p
+            INNER JOIN {ouwiki_versions} v ON v.pageid = p.id
+        WHERE p.subwikiid = :subwikiid AND v.userid = :userid
+            AND v.deletedat IS NULL
+        ORDER BY v.timecreated ASC';
+    $changes = $DB->get_records_sql($sql, $params);
+
+    $user = ouwiki_get_user($userid);
+
+    return array($user, $changes);
+}
+
+/**
+ * Retrieve a user object
+ *
+ * @param integer $userid
+ * @return object user record
+ */
+function ouwiki_get_user($userid) {
+    global $DB;
+    $fields = user_picture::fields();
+    $fields .= ',username,idnumber';
+    $user = $DB->get_record('user', array('id' => $userid), $fields, MUST_EXIST);
+    return $user;
+}
+
+/**
+ * Returns users to view in participation.php and related version
+ * change information
+ *
+ * @param object $ouwiki
+ * @param object $subwiki
+ * @param object $context
+ * @param int $groupid
+ * @param string $sort
+ * @return array user participation
+ */
+function ouwiki_get_participation($ouwiki, $subwiki, $context,
+    $groupid, $sort = 'u.firstname, u.lastname') {
+    global $DB;
+
+    // get user objects
+    list($esql, $params) = get_enrolled_sql($context, 'mod/ouwiki:edit', $groupid);
+    $fields = user_picture::fields('u');
+    $fields .= ',u.username,u.idnumber';
+    $sql = "SELECT $fields
+                FROM {user} u
+                JOIN ($esql) eu ON eu.id = u.id
+                ORDER BY $sort ASC";
+    $users = $DB->get_records_sql($sql, $params);
+
+    $join = '';
+    $where = ' WHERE v.userid IN (' . implode(',', array_keys($users)) .')';
+    if ((int)$ouwiki->subwikis == OUWIKI_SUBWIKIS_INDIVIDUAL) {
+        $params['ouwikiid'] = $ouwiki->id;
+        $where = ' AND s.wikiid = :ouwikiid';
+        $join = 'JOIN {ouwiki_subwikis} s ON s.id = p.subwikiid';
+    } else {
+        $params['subwikiid'] = $subwiki->id;
+        $where = ' AND p.subwikiid = :subwikiid';
+    }
+
+    $vsql = "SELECT v.id AS versionid, v.wordcount, v.importversionid,
+                    p.id AS pageid, p.subwikiid, p.title, p.currentversionid,
+                    v.userid AS userid, v.previousversionid,
+                (SELECT v2.wordcount
+                    FROM {ouwiki_versions} v2
+                    WHERE v2.id = v.previousversionid)
+                AS previouswordcount, p.firstversionid
+            FROM {ouwiki_pages} p
+                $join
+                JOIN {ouwiki_versions} v ON v.pageid = p.id
+            $where AND v.deletedat IS NULL
+            ORDER BY v.id ASC";
+    $versions = $DB->get_records_sql($vsql, $params);
+
+    $changes = array('users' => $users, 'versions' => $versions);
+
+    return ouwiki_sort_participation($changes);
+}
+
+/**
+ * Sorts version data and calculates changes
+ * per user for rendering
+ *
+ * @param array $data
+ * @return array
+ */
+function ouwiki_sort_participation($data) {
+    global $DB;
+
+    if (empty($data['users'])) {
+        return array(); // no users
+    }
+    if (empty($data['versions'])) {
+        return $data['users']; // users but no versions
+    }
+
+    $byusers = $data['users'];
+    foreach ($data['versions'] as $version) {
+        if (isset($byusers[$version->userid])) {
+
+            // setup properties
+            if (!isset($byusers[$version->userid]->wordsadded)) {
+                $byusers[$version->userid]->wordsadded = 0;
+            }
+            if (!isset($byusers[$version->userid]->wordsdeleted)) {
+                $byusers[$version->userid]->wordsdeleted = 0;
+            }
+            if (!isset($byusers[$version->userid]->pagecreates)) {
+                $byusers[$version->userid]->pagecreates = 0;
+            }
+            if (!isset($byusers[$version->userid]->pageedits)) {
+                $byusers[$version->userid]->pageedits = 0;
+            }
+            if (!isset($byusers[$version->userid]->pageimports)) {
+                $byusers[$version->userid]->pageimports = array();
+            }
+
+            // calculations
+            if ($version->versionid == $version->firstversionid) {
+                $byusers[$version->userid]->pagecreates++;
+
+                // user created this page so entire wordcount is valid
+                if (isset($version->wordcount)) {
+                    $byusers[$version->userid]->wordsadded += $version->wordcount;
+                }
+            } else {
+                $byusers[$version->userid]->pageedits++;
+
+                // wordcount calculation
+                if (isset($version->wordcount)) {
+                    if ($version->previouswordcount) {
+                        $words = ouwiki_wordcount_difference($version->wordcount,
+                            $version->previouswordcount, true);
+                    } else {
+                        $words = ouwiki_wordcount_difference($version->wordcount, 0, false);
+                    }
+                    if ($words < 0) {
+                        $byusers[$version->userid]->wordsdeleted += abs($words);
+                    } else {
+                        $byusers[$version->userid]->wordsadded += abs($words);
+                    }
+                }
+            }
+            if (!empty($version->importversionid)) {
+                $byusers[$version->userid]->pageimports[$version->pageid] = 1;
+            }
+        }
+    }
+
+    // return sorted array
+    return $byusers;
+}
+
+/**
+ * Grades users from the participation.php page
+ *
+ * @param array $newgrades
+ * @param object $cm
+ * @param object $ouwiki
+ * @param object $course
+ */
+function ouwiki_update_user_grades($newgrades, $cm, $ouwiki, $course) {
+    global $CFG, $SESSION;
+
+    require_once($CFG->libdir.'/gradelib.php');
+    $grading_info = grade_get_grades($course->id, 'mod',
+        'ouwiki', $ouwiki->id, array_keys($newgrades));
+
+    foreach ($grading_info->items[0]->grades as $key => $grade) {
+        if (array_key_exists($key, $newgrades)) {
+            if ($newgrades[$key] != $grade->grade) {
+                if ($newgrades[$key] == -1) {
+                    // no grade
+                    $grade->rawgrade = null;
+                } else {
+                    $grade->rawgrade = $newgrades[$key];
+                }
+                $grade->userid = $key;
+                $ouwiki->cmidnumber = $cm->id;
+
+                ouwiki_grade_item_update($ouwiki, $grade);
+            }
+        }
+    }
+
+    // add a message to display to the page
+    if (!isset($SESSION->ouwikigradesupdated)) {
+        $SESSION->ouwikigradesupdated = get_string('gradesupdated', 'ouwiki');
+    }
+}
+
+
+/* Display ouwiki in structured view helper functions */
+
+function ouwiki_display_wikiindex_page_in_index($indexitem, $subwiki, $cm) {
+    global $ouwiki;
+    if ($startpage = $indexitem->title === '') {
+        $title = get_string('startpage', 'ouwiki');
+        $output = '<div class="ouw_index_startpage">';
+    } else {
+        $title = $indexitem->title;
+        $output = '';
+    }
+
+    $output .= '<div class="ouw_title"><a class="ouw_title_link" href="view.php?' .
+            ouwiki_display_wiki_parameters($indexitem->title, $subwiki, $cm).
+            '">' . htmlspecialchars($title) . '</a></div>';
+    $lastchange = new StdClass;
+    $lastchange->userlink = ouwiki_display_user($indexitem, $cm->course);
+    $lastchange->date = ouwiki_recent_span($indexitem->timecreated).ouwiki_nice_date($indexitem->timecreated) . '</span>';
+    $output .= '<div class="ouw_indexinfo">';
+    if ($ouwiki->enablewordcount) {
+        $output .= '<span class="ouw_wordcount">' . get_string('numwords', 'ouwiki', $indexitem->wordcount) . '</span>';
+        $output .= '<div class="spacer"></div>';
+    }
+    $output .= ' <span class="ouw_lastchange">' . get_string('lastchange', 'ouwiki', $lastchange) . '</span>';
+    $output .= '</div>';
+    if ($startpage) {
+        $output .= '</div>';
+    }
+    return $output;
+}
+
+function ouwiki_display_entirewiki_page_in_index($pageinfo, $subwiki, $cm, $index, $context) {
+    global $ouwiki;
+
+    // Get page details.
+    $pageversion = ouwiki_get_current_page($subwiki, $pageinfo->title);
+    // If the page hasn't really been created yet, skip it.
+    if (is_null($pageversion->xhtml)) {
+        return '';
+    }
+    $visibletitle = $pageversion->title === '' ? get_string('startpage', 'ouwiki') : $pageversion->title;
+
+    $pageversion->xhtml = file_rewrite_pluginfile_urls($pageversion->xhtml, 'pluginfile.php',
+            $context->id, 'mod_ouwiki', 'content', $pageversion->versionid);
+    $pageversion->xhtml = ouwiki_convert_content($pageversion->xhtml, $subwiki, $cm, $index, $pageversion->xhtmlformat);
+
+    $output = '<div class="ouw_entry"><a name="' . $pageversion->pageid . '"></a><h1 class="ouw_entry_heading"><a href="view.php?' .
+            ouwiki_display_wiki_parameters($pageversion->title, $subwiki, $cm) .
+            '">' . htmlspecialchars($visibletitle) . '</a></h1>';
+    $output .=  $pageversion->xhtml;
+    $output .=  '</div>';
+
+    return $output;
+}
+
+function ouwiki_display_portfolio_page_in_index($pageversion) {
+
+    if (is_null($pageversion->xhtml)) {
+        return;
+    }
+
+    $output = '<div class="ouw_entry">';
+    $output .=  $pageversion->xhtml;
+    $output .=  '</div>';
+    return $output;
+}
+
+function ouwiki_build_up_sub_index($pageid, $index, &$subtree) {
+    $thispage = $index[$pageid];
+    if (count($thispage->linksto) > 0) {
+        foreach ($thispage->linksto as $childid) {
+            ouwiki_build_up_sub_index($childid, $index, $subtree);
+        }
+    }
+    $subtree[$pageid] = $thispage;
+}
+
+function ouwiki_get_sub_tree_from_index($pageid, $index) {
+    $subtree = array();
+    $thispage = $index[$pageid];
+    $subtree[$pageid] = $thispage;
+    if (!empty($thispage->linksto)) {
+        foreach ($thispage->linksto as $pageidid) {
+            ouwiki_build_up_sub_index($pageid, $index, $subtree);
+        }
+    }
+    return $subtree;
+}
+
+function ouwiki_tree_index($func, $pageid, &$index = null, $subwiki = null, $cm = null, $context = null, $check = null) {
+    $extra = '';
+    $thispage = $index[$pageid];
+    if ($check) {
+        // Add a checkbox against this page.
+        $extra = html_writer::checkbox('page' . $thispage->pageid, $thispage->pageid, false, null,
+                array('id' => 'page' . $thispage->pageid, 'class' => 'ouwiki_page_checkbox'));
+        $extra .= get_accesshide(get_string('pagecheckboxlabel', 'ouwiki', $thispage->title), 'label',
+                '', 'for="page' . $thispage->pageid . '"');
+    }
+    $output = '<li>' . $extra . $func($thispage, $subwiki, $cm, $index, $context);
+    if (count($thispage->children) > 0) {
+        $output .= '<ul>';
+        foreach ($thispage->children as $childid) {
+            $output .= ouwiki_tree_index($func, $childid, $index, $subwiki, $cm, $context, $check);
+        }
+        $output .= '</ul>';
+    }
+    $output .= '</li>';
+    return $output;
+}
+
+/**
+ * Builds the tree structure for the hierarchical index. This is basically
+ * a breadth-first search: we place each page on the nearest-to-home level
+ * that we can find for it.
+ */
+function ouwiki_build_tree(&$index) {
+    // Set up new data to fill.
+    foreach ($index as $indexitem) {
+        $indexitem->linksto = array();
+        $indexitem->children = array();
+    }
+
+    // Preprocess: build links TO as well as FROM.
+    foreach ($index as $indexitem) {
+        if (empty($indexitem->linksfrom)) {
+            continue;
+        }
+        foreach ($indexitem->linksfrom as $fromid) {
+            $index[$fromid]->linksto[] = $indexitem->pageid;
+        }
+    }
+
+    // Begin with top level, which is first in results.
+    reset($index);
+    $index[key($index)]->placed = true;
+    $nextlevel = array(reset($index)->pageid);
+    do {
+        $thislevel = $nextlevel;
+        $nextlevel = array();
+        foreach ($thislevel as $sourcepageid) {
+            foreach ($index[$sourcepageid]->linksto as $linkto) {
+                if (empty($index[$linkto]->placed)) {
+                    $index[$linkto]->placed = true;
+                    $index[$sourcepageid]->children[] = $linkto;
+                    $nextlevel[] = $linkto;
+                }
+            }
+        }
+    } while (count($nextlevel) > 0);
+}
+
+function ouwiki_has_subwikis($ouwikiid) {
+    global $DB;
+    return $DB->record_exists('ouwiki_subwikis', array('wikiid' => $ouwikiid));
+}
+
+function ouwiki_get_subwikis($wikiid) {
+    global $DB;
+    $rs = $DB->get_records('ouwiki_subwikis', array('wikiid' => $wikiid));
+    return $rs;
+}
+
+function ouwiki_subwiki_content_exists($subwikiid) {
+    global $DB;
+    return $DB->record_exists_select('ouwiki_pages', 'subwikiid = ? AND currentversionid IS NOT null', array($subwikiid));
+}
+
+function ouwiki_get_wiki_details($version) {
+    global $DB, $COURSE;
+
+    $sql = 'SELECT * from {ouwiki} w, {ouwiki_subwikis} s, {ouwiki_pages} p, {ouwiki_versions} v
+    WHERE
+    s.id = p.subwikiid
+    AND w.id = s.wikiid
+    AND p.id = v.pageid
+    AND v.id = ?';
+
+    $selectedouwiki = $DB->get_record_sql($sql, array($version), MUST_EXIST);
+    $selectedouwiki->group = null;
+    $selectedouwiki->user = null;
+    $selectedouwiki->courseshortname = null;
+    if ($selectedouwiki->groupid) {
+        $selectedouwiki->group = groups_get_group_name($selectedouwiki->groupid);
+    } else if ($selectedouwiki->subwikis == OUWIKI_SUBWIKIS_INDIVIDUAL && $selectedouwiki->userid) {
+        $user = $DB->get_record('user', array('id' => $selectedouwiki->userid));
+        $selectedouwiki->user = fullname($user);
+    }
+    if ($COURSE->id != $selectedouwiki->course) {
+        $selectedouwiki->courseshortname = $DB->get_field('course', 'shortname', array('id' => $selectedouwiki->course));
+    }
+    return $selectedouwiki;
+}
+
+/**
+ * ouwiki_portfolio_caller_base abstract class to extend portfolio_module_caller_base
+ */
+abstract class ouwiki_portfolio_caller_base extends portfolio_module_caller_base {
+    protected $withannotations;
+
+    protected $subwiki, $ouwiki, $modcontext;
+
+    // Attachments: array of arrays of stored_file, keyed on versionid.
+    protected $attachments = array();
+
+    protected function load_base_data($subwikiid) {
+        global $DB, $COURSE;
+
+        // Load base data.
+        $this->subwiki = $DB->get_record(
+                'ouwiki_subwikis', array('id' => $subwikiid), '*', MUST_EXIST);
+        $this->ouwiki = $DB->get_record(
+                'ouwiki', array('id' => $this->subwiki->wikiid), '*', MUST_EXIST);
+        if (!empty($COURSE->id) && $COURSE->id == $this->ouwiki->course) {
+            $course = $COURSE;
+        } else {
+            $course = $DB->get_record(
+                    'course', array('id' => $this->ouwiki->course), '*', MUST_EXIST);
+        }
+        $modinfo = get_fast_modinfo($course);
+        $instances = $modinfo->get_instances_of('ouwiki');
+        if (!array_key_exists($this->ouwiki->id, $instances)) {
+            throw new portfolio_caller_exception('error_export', 'ouwiki');
+        }
+        $this->cm = $instances[$this->ouwiki->id];
+        $this->modcontext = context_module::instance($this->cm->id);
+    }
+
+    /**
+     * Adds all the files from the given pageversions.
+     * @param array $pageversions
+     */
+    protected function add_files($pageversions) {
+        // This doesn't scale (2 queries/page) but follows the API. We could do,
+        // it faster but I'm doubtful about bypassing the API in this case.
+        $fs = get_file_storage();
+        $files = array();
+        foreach ($pageversions as $pageversion) {
+            $attach = $fs->get_area_files($this->modcontext->id, 'mod_ouwiki', 'attachment',
+                    $pageversion->versionid, "sortorder, itemid, filepath, filename", false);
+            $this->attachments[$pageversion->versionid] = $attach;
+            $embed  = $fs->get_area_files($this->modcontext->id, 'mod_ouwiki', 'content',
+                    $pageversion->versionid, "sortorder, itemid, filepath, filename", false);
+            $files = array_merge($files, $attach, $embed);
+        }
+        $this->set_file_and_format_data($files);
+
+        if (empty($this->multifiles) && !empty($this->singlefile)) {
+            $this->multifiles = array($this->singlefile); // Copy_files workaround.
+        }
+        // If there are files, change to rich/plain.
+        if (!empty($this->multifiles)) {
+            $this->add_format(PORTFOLIO_FORMAT_RICHHTML);
+        } else {
+            $this->add_format(PORTFOLIO_FORMAT_PLAINHTML);
+        }
+    }
+
+    /**
+     * @param array $files Array of file items to copy
+     * @return void
+     */
+    protected function copy_files($files) {
+        if (empty($files)) {
+            return;
+        }
+        foreach ($files as $f) {
+            $this->get('exporter')->copy_existing_file($f);
+        }
+    }
+
+    /**
+     * Obtains page html suitable for use in portfolio export.
+     * @param object $pageversion Page and version data
+     * @param array $attachments Attachments array indexed by versionid
+     * @param object $context Moodle context object
+     * @param object $ouwiki OU wiki object
+     * @param object $subwiki Subwiki object
+     * @param object $course Course object
+     * @param bool $withannotations If true, includes annotations
+     * @param portfolio_format $portfolioformat Portfolio format
+     * @param string $plugin the portfolio plugin being used.
+     * @return string HTML code
+     */
+    public static function get_page_html($pageversion, $attachments,
+            $context, $ouwiki, $subwiki, $course, $withannotations,
+            portfolio_format $portfolioformat, $plugin) {
+        global $DB;
+
+        // Format the page body.
+        $options = portfolio_format_text_options();
+        $options->filter = true;
+        $formattedtext = portfolio_rewrite_pluginfile_urls($pageversion->xhtml, $context->id,
+                'mod_ouwiki', 'content', $pageversion->versionid, $portfolioformat);
+        $formattedtext = format_text($formattedtext, $pageversion->xhtmlformat,
+                $options, $course->id);
+
+        // Get annotations - only if using annotation system. prevents unnecessary db access.
+        if ($ouwiki->annotation) {
+            $annotations = ouwiki_get_annotations($pageversion);
+        } else {
+            $annotations = array();
+        }
+
+        // Convert or remove the annotations.
+        if ($ouwiki->annotation && count($annotations)) {
+            ouwiki_highlight_existing_annotations($formattedtext, $annotations,
+                    $withannotations ? 'portfolio' : 'clear');
+        }
+
+        // Do overall page, starting with title.
+        $title = $pageversion->title;
+        if ($title === '') {
+            $title = get_string('startpage', 'ouwiki');
+        }
+        $output = html_writer::tag('h2', s($title));
+
+        // Last change info.
+        $user = new stdClass();
+        foreach (explode(',', user_picture::fields()) as $field) {
+            if ($field == 'id') {
+                $user->id = $pageversion->userid;
+            } else {
+                $user->$field = $pageversion->$field;
+            }
+        }
+        $lastchange = get_string('lastchange', 'ouwiki', (object)array(
+                'date' => userdate($pageversion->timecreated),
+                'userlink' => ouwiki_display_user($user, $course->id)));
+        $output .= html_writer::tag('p', html_writer::tag('small',
+                html_writer::tag('i', $lastchange)));
+
+        // Main text.
+        $output .= html_writer::tag('div', $formattedtext);
+
+        // Word count.
+        if ($ouwiki->enablewordcount) {
+            $wordcount = get_string('numwords', 'ouwiki', $pageversion->wordcount);
+            $output .= html_writer::tag('div', html_writer::empty_tag('br'));
+            $output .= html_writer::tag('p',
+                    html_writer::tag('small', $wordcount),
+                    array('class' => 'ouw_wordcount'));
+        }
+
+        // Attachments.
+        if ($attachments[$pageversion->versionid]) {
+            $output .= html_writer::start_tag('div', array('class' => 'attachments'));
+            $output .= html_writer::tag('h3', get_string('attachments', 'ouwiki'));
+            $output .= html_writer::start_tag('ul');
+            foreach ($attachments[$pageversion->versionid] as $file) {
+                if ($plugin == 'rtf') {
+                    $filename = $file->get_filename();
+                    $path = moodle_url::make_pluginfile_url($context->id, 'mod_ouwiki',
+                            'attachment', $pageversion->versionid, '/', $filename, true);
+                    $atag = html_writer::tag('a', $filename, array('href' => $path));
+                } else {
+                    $atag = $portfolioformat->file_output($file);
+                }
+                $output .= html_writer::tag('li', $atag);
+            }
+            $output .= html_writer::end_tag('ul');
+            $output .= html_writer::end_tag('div');
+        }
+
+        // Replace all user links with user name so that you can not access user links from within exported document.
+        $output = preg_replace('~<a href="[^"]*/user/view.php[^"]*"\s*>(.*?)</a>~', '$1', $output);
+        return $output;
+    }
+
+    public function get_navigation() {
+        global $CFG;
+
+        $navlinks = array();
+        $navlinks[] = array(
+                'name' => format_string($this->ouwiki->name),
+                'link' => $CFG->wwwroot . '/mod/ouwiki/wikiindex.php?id=' . $this->cm->id,
+                'type' => 'title'
+        );
+        return array($navlinks, $this->cm);
+    }
+
+    public function expected_time() {
+        return $this->expected_time_file();
+    }
+
+    public function check_permissions() {
+        $context = context_module::instance($this->cm->id);
+        return (has_capability('mod/ouwiki:view', $context));
+    }
+
+    public static function display_name() {
+        return get_string('modulename', 'ouwiki');
+    }
+
+    public static function base_supported_formats() {
+        return array(PORTFOLIO_FORMAT_RICHHTML, PORTFOLIO_FORMAT_PLAINHTML);
+    }
+
+    /**
+     * @param string $name Name to be used in filename
+     * @return string Safe version of name (replaces unknown characters with _)
+     */
+    protected function make_filename_safe($name) {
+        $result = @preg_replace('~[^A-Za-z0-9 _!,.-]~u', '_', $name);
+        // Cope with Unicode support not being available.
+        if ($result === null) {
+            $result = preg_replace('~[^A-Za-z0-9 _!,.-]~', '_', $name);
+        }
+        return $result;
+    }
+}
+
+/**
+ * Portfolio class for exporting a single page.
+ */
+class ouwiki_page_portfolio_caller extends ouwiki_portfolio_caller_base {
+    protected $pageid;
+
+    // Pageversion: data object with fields from ouwiki_pages and _versions.
+    private $pageversion;
+
+    public static function expected_callbackargs() {
+        return array(
+                'pageid' => true,
+                'withannotations' => false
+        );
+    }
+
+    public function load_data() {
+        global $DB;
+
+        // Load basic data.
+        $page = $DB->get_record('ouwiki_pages', array('id' => $this->pageid), '*', MUST_EXIST);
+        $this->load_base_data($page->subwikiid);
+
+        // Load page version.
+        $this->pageversion = ouwiki_get_current_page($this->subwiki, $page->title);
+
+        // Add files from page.
+        $this->add_files(array($this->pageversion));
+    }
+
+    public function get_return_url() {
+        $params['id'] = $this->cm->id;
+        if (!empty($this->pageversion->title)) {
+            $params['page'] = $this->pageversion->title;
+        }
+        $url = new moodle_url('/mod/ouwiki/view.php', $params);
+        return $url->out(false);
+    }
+
+    public function get_navigation() {
+        global $CFG;
+
+        $title = format_string($this->pageversion->title);
+        $name = $title === '' ? get_string('startpage', 'ouwiki') : $title;
+
+        $navlinks[] = array(
+                'name' => $name,
+                'link' => $CFG->wwwroot . '/mod/ouwiki/view.php?id=' . $this->cm->id . '&page=' .
+                $this->pageversion->title,
+                'type' => 'title'
+        );
+        return array($navlinks, $this->cm);
+    }
+
+    /**
+     * a page with or without attachment
+     *
+     * @global object
+     * @global object
+     * @uses PORTFOLIO_FORMAT_RICH
+     * @return mixed
+     */
+    public function prepare_package() {
+        global $CFG;
+
+        $pagehtml = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ' .
+                '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">' .
+                html_writer::start_tag('html', array('xmlns' => 'http://www.w3.org/1999/xhtml'));
+        $pagehtml .= html_writer::tag('head',
+                html_writer::empty_tag('meta',
+                        array('http-equiv' => 'Content-Type', 'content' => 'text/html; charset=utf-8')) .
+                html_writer::tag('title', get_string('export', 'forumngfeature_export')));
+        $pagehtml .= html_writer::start_tag('body') . "\n";
+
+        $pagehtml .= $this->prepare_page($this->pageversion);
+
+        $pagehtml .= html_writer::end_tag('body') . html_writer::end_tag('html');
+
+        $content = $pagehtml;
+        $name = $this->make_filename_safe($this->pageversion->title === '' ?
+                get_string('startpage', 'ouwiki') : $this->pageversion->title) . '.html';
+        $manifest = ($this->exporter->get('format') instanceof PORTFOLIO_FORMAT_RICH);
+
+        $this->copy_files($this->multifiles);
+        $this->get('exporter')->write_new_file($content, $name, $manifest);
+    }
+
+    /**
+     * @param object $pageversion Pageversion object
+     * @return string Page html
+     */
+    private function prepare_page($pageversion) {
+        return ouwiki_portfolio_caller_base::get_page_html($pageversion, $this->attachments,
+                $this->modcontext, $this->ouwiki,
+                $this->subwiki, $this->get('course'), $this->withannotations,
+                $this->get('exporter')->get('format'),
+                $this->get('exporter')->get('instance')->get('plugin'));
+    }
+
+    public function get_sha1() {
+        $filesha = '';
+        if (!empty($this->multifiles)) {
+            $filesha = $this->get_sha1_file();
+        }
+
+        return sha1($filesha . ',' . $this->pageversion->title . ',' . $this->pageversion->xhtml);
+    }
+}
+
+/**
+ * Portfolio class for exporting the entire subwiki contents (all pages).
+ */
+class ouwiki_all_portfolio_caller extends ouwiki_portfolio_caller_base {
+    protected $subwikiid, $tree;
+
+    // Pageversions: array of data objects with fields from ouwiki_pages and _versions.
+    private $pageversions;
+
+    public static function expected_callbackargs() {
+        return array(
+                'subwikiid' => true,
+                'withannotations' => false,
+                'tree' => false
+        );
+    }
+
+    public function load_data() {
+        global $DB, $COURSE;
+
+        // Load base data.
+        $this->load_base_data($this->subwikiid);
+
+        // Load all page-versions.
+        $this->pageversions = ouwiki_get_subwiki_allpages_index($this->subwiki);
+        ouwiki_build_tree($this->pageversions);
+
+        // Get all files used in subwiki.
+        $this->add_files($this->pageversions);
+    }
+
+    public function get_return_url() {
+        $url = new moodle_url('/mod/ouwiki/wikiindex.php', array('id' => $this->cm->id));
+        return $url->out(false);
+    }
+
+    private function prepare_tree_inline_styles() {
+        $pagehtml = '';
+        $pagehtml .= html_writer::start_tag('style', array('type' => 'text/css')) . "\n";
+        $pagehtml .= 'ul.ouw_index,
+        ul.ouw_index li,
+        ul.ouw_indextree,
+        ul.ouw_indextree li {
+        list-style-type:none;
+        margin:0;
+        padding:0;
+        }
+
+        ul.ouw_indextree ul {
+            margin-left:2.5em;
+        } ';
+
+        $pagehtml .= html_writer::end_tag('style') . "\n";
+        return $pagehtml;
+    }
+
+    public function prepare_package() {
+        global $CFG;
+
+        $pagehtml = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ' .
+                '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">' .
+                html_writer::start_tag('html', array('xmlns' => 'http://www.w3.org/1999/xhtml'));
+        $content =  html_writer::empty_tag('meta',
+                        array('http-equiv' => 'Content-Type', 'content' => 'text/html; charset=utf-8')).
+                        html_writer::tag('title', get_string('export', 'forumngfeature_export'));
+        if ($this->tree) {
+            $content .= $this->prepare_tree_inline_styles();
+        }
+        $pagehtml .= html_writer::tag('head', $content);
+        $pagehtml .= html_writer::start_tag('body') . "\n";
+        $pagehtml .= html_writer::tag('h1', s($this->ouwiki->name));
+
+        if ($this->tree) {
+            $orphans = false;
+            $pagehtml .=  '</ul>';
+            foreach ($this->pageversions as $pageversion) {
+                if (count($pageversion->linksfrom) == 0 && $pageversion->title !== '') {
+                    $orphans = true;
+                } else {
+                    $pageversion->xhtml = $this->prepare_page($pageversion);
+                }
+            }
+            $pagehtml .= '<ul class="ouw_indextree">';
+            $func = 'ouwiki_display_portfolio_page_in_index';
+            $pagehtml .= ouwiki_tree_index(
+                    $func,
+                    reset($this->pageversions)->pageid,
+                    $this->pageversions,
+                    $this->subwiki,
+                    $this->cm);
+            $pagehtml .=  '</ul>';
+            if ($orphans) {
+                $pagehtml .=  '<h2 class="ouw_orphans">'.get_string('orphanpages', 'ouwiki').'</h2>';
+                $pagehtml .=  '<ul class="ouw_indextree">';
+                foreach ($this->pageversions as $pageversion) {
+                    if (count($pageversion->linksfrom) == 0 && $pageversion->title !== '') {
+                        $pageversion->xhtml = $this->prepare_page($pageversion);
+                        $orphanindex = ouwiki_get_sub_tree_from_index($pageversion->pageid, $this->pageversions);
+                        ouwiki_build_tree($orphanindex);
+                        $pagehtml .= ouwiki_tree_index($func, $pageversion->pageid, $orphanindex, $this->subwiki, $this->cm);
+                    }
+                }
+                $pagehtml .=  '</ul>';
+            }
+        } else {
+            $orphans = false;
+            foreach ($this->pageversions as $pageversion) {
+                if (count($pageversion->linksfrom) == 0 && $pageversion->title !== '') {
+                    $orphans = true;
+                } else {
+                    $pagehtml .= $this->prepare_page($pageversion);
+                }
+            }
+
+            if ($orphans) {
+                $pagehtml .= '<h2 class="ouw_orphans">'.get_string('orphanpages', 'ouwiki').'</h2>';
+                foreach ($this->pageversions as $pageversion) {
+                    if (count($pageversion->linksfrom) == 0 && $pageversion->title !== '') {
+                        $pagehtml .= $this->prepare_page($pageversion);
+                    }
+                }
+            }
+        }
+
+        $pagehtml .= html_writer::end_tag('body') . html_writer::end_tag('html');
+        $content = $pagehtml;
+        $name = $this->make_filename_safe($this->ouwiki->name) . '.html';
+        $manifest = ($this->exporter->get('format') instanceof PORTFOLIO_FORMAT_RICH);
+
+        $this->copy_files($this->multifiles);
+        $this->get('exporter')->write_new_file($content, $name, $manifest);
+    }
+
+    /**
+     * @param object $pageversion Pageversion object
+     * @return string Page html
+     */
+    private function prepare_page($pageversion) {
+        return ouwiki_portfolio_caller_base::get_page_html($pageversion,
+                $this->attachments, $this->modcontext, $this->ouwiki,
+                $this->subwiki, $this->get('course'), $this->withannotations,
+                $this->get('exporter')->get('format'),
+                $this->get('exporter')->get('instance')->get('plugin'));
+    }
+
+    public function get_sha1() {
+        $filesha = '';
+        if (!empty($this->multifiles)) {
+            $filesha = $this->get_sha1_file();
+        }
+        $bigstring = $filesha;
+        foreach ($this->pageversions as $pageversion) {
+            $bigstring .= ',' . $pageversion->title . ',' . $pageversion->xhtml;
+        }
+        return sha1($bigstring);
+    }
+}
diff --git a/mod/ouwiki/lock.php b/mod/ouwiki/lock.php
new file mode 100644
index 0000000..58821e4
--- /dev/null
+++ b/mod/ouwiki/lock.php
@@ -0,0 +1,153 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+/**
+ * Lock editing page. Allows user to lock or unlock the editing of a wiki page
+ *
+ * @copyright &copy; 2009 The Open University
+ * @author b.j.waddington@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id = required_param('id', PARAM_INT);           // Course Module ID that defines wiki
+
+// check we are using the annotation system
+$action = required_param('ouw_lock', PARAM_RAW);
+$pageid = required_param('ouw_pageid', PARAM_INT);
+
+// Get the current page version, creating page if needed
+$pageversion = ouwiki_get_current_page($subwiki, $pagename, OUWIKI_GETPAGE_ACCEPTNOVERSION);
+$wikiformfields = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_FORM);
+$sectionfields = '';
+
+// get the context and check user has the required capability
+require_capability('mod/ouwiki:lock', $context);
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Get an editing lock
+list($lockok, $lock) = ouwiki_obtain_lock($ouwiki, $pageversion->pageid);
+
+// Handle case where page is locked by someone else
+if (!$lockok) {
+    // Print header etc
+    echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context);
+
+    $details = new StdClass;
+    $lockholder = $DB->get_record('user', array('id' => $lock->userid));
+    $details->name = fullname($lockholder);
+    $details->lockedat = ouwiki_nice_date($lock->lockedat);
+    $details->seenat = ouwiki_nice_date($lock->seenat);
+    $pagelockedtitle = get_string('pagelockedtitle', 'ouwiki');
+    $pagelockedtimeout = '';
+    if ($lock->seenat > time()) {
+        // When the 'seen at' value is greater than current time, that means
+        // their lock has been automatically confirmed in advance because they
+        // don't have JavaScript support.
+        $details->nojs = ouwiki_nice_date($lock->seenat + OUWIKI_LOCK_PERSISTENCE);
+        $pagelockeddetails = get_string('pagelockeddetailsnojs', 'ouwiki', $details);
+    } else {
+        $pagelockeddetails = get_string('pagelockeddetails', 'ouwiki', $details);
+        if ($lock->expiresat) {
+            $pagelockedtimeout = get_string('pagelockedtimeout', 'ouwiki', userdate($lock->expiresat));
+        }
+    }
+    $canoverride = has_capability('mod/ouwiki:overridelock', $context);
+    $pagelockedoverride = $canoverride ? '<p>'.get_string('pagelockedoverride', 'ouwiki').'</p>' : '';
+    $overridelock = get_string('overridelock', 'ouwiki');
+    $overridebutton = $canoverride ? "
+<form class='ouwiki_overridelock' action='override.php' method='post'>
+  <input type='hidden' name='redirpage' value='view'>
+  $wikiformfields
+  <input type='submit' value='$overridelock' />
+</form>
+" : '';
+    $cancel = get_string('cancel');
+    $tryagain = get_string('tryagain', 'ouwiki');
+    print "
+<div id='ouwiki_lockinfo'>
+  <h2>$pagelockedtitle</h2>
+  <p>$pagelockeddetails $pagelockedtimeout</p>
+  $pagelockedoverride
+  <div class='ouwiki_lockinfobuttons'>
+    <form action='edit.php' method='get'>
+      $wikiformfields
+      $sectionfields
+      <input type='submit' value='$tryagain' />
+    </form>
+    <form action='view.php' method='get'>
+      $wikiformfields
+      <input type='submit' value='$cancel' />
+    </form>
+    $overridebutton
+  </div>
+</div>";
+    print_footer($course);
+    exit;
+}
+
+// The page is now locked to us!
+// To have got this far everything checks out so lock or unlock the page as requested
+if ($action == get_string('lockpage', 'ouwiki')) {
+    ouwiki_lock_editing($pageid, true);
+    $eventtype = 'lock';
+} else if ($action == get_string('unlockpage', 'ouwiki')) {
+    ouwiki_lock_editing($pageid, false);
+    $eventtype = 'unlock';
+}
+
+// all done - release the editing lock...
+ouwiki_release_lock($pageversion->pageid);
+
+// add to moodle log...
+$url = 'view.php';
+$url .= (strpos($url, '?')===false ? '?' : '&').'id='.$cm->id;
+if ($subwiki->groupid) {
+    $url .= '&group='.$subwiki->groupid;
+}
+if ($subwiki->userid) {
+    $url .= '&user='.$subwiki->userid;
+}
+$info = '';
+if ($pagename) {
+    $url .= '&page='.urlencode($pagename);
+    $info = $pagename;
+}
+
+// Add to event log.
+
+// Log usage view.
+$params = array(
+        'context' => $context,
+        'objectid' => $pageid,
+        'other' => array('info' => $info, 'logurl' => $url)
+);
+
+$event = null;
+if ($eventtype == 'lock') {
+    $event = \mod_ouwiki\event\page_lock::create($params);
+} else {
+    $event = \mod_ouwiki\event\page_unlock::create($params);
+}
+$event->add_record_snapshot('course_modules', $cm);
+$event->add_record_snapshot('course', $course);
+$event->add_record_snapshot('ouwiki', $ouwiki);
+$event->trigger();
+
+// redirect back to the view page.
+redirect($url);
diff --git a/mod/ouwiki/mod_form.php b/mod/ouwiki/mod_form.php
new file mode 100644
index 0000000..f3eb732
--- /dev/null
+++ b/mod/ouwiki/mod_form.php
@@ -0,0 +1,189 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/** Make sure this isn't being directly accessed */
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot.'/course/moodleform_mod.php');
+require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+class mod_ouwiki_mod_form extends moodleform_mod {
+
+    public function definition() {
+        global $CFG, $COURSE;
+
+        $mform =& $this->_form;
+        $data    = $this->_customdata['data'];
+
+        $mform->addElement('header', 'general', get_string('general', 'form'));
+
+        // Name and intro
+        $mform->addElement('text', 'name', get_string('name'), array('size' => '64'));
+        $mform->setType('name', PARAM_TEXT);
+        $mform->addRule('name', get_string('required'), 'required', null, 'client');
+        $mform->addRule('name', get_string('maximumchars', '', 255), 'maxlength', 255, 'client');
+
+        $this->standard_intro_elements(get_string('wikiintro', 'wiki'));
+
+        $mform->addElement('header', 'wikifieldset', get_string('wikisettings', 'wiki'));
+
+        // Subwikis
+        $subwikisoptions = array();
+        $subwikisoptions[OUWIKI_SUBWIKIS_SINGLE] = get_string('subwikis_single', 'ouwiki');
+        $subwikisoptions[OUWIKI_SUBWIKIS_GROUPS] = get_string('subwikis_groups', 'ouwiki');
+        $subwikisoptions[OUWIKI_SUBWIKIS_INDIVIDUAL] = get_string('subwikis_individual', 'ouwiki');
+        $mform->addElement('select', 'subwikis', get_string("subwikis", "ouwiki"), $subwikisoptions);
+        $mform->addHelpButton('subwikis', 'subwikis', 'ouwiki');
+
+        // Annotation
+        $annotationoptions = array('0' => get_string('no'), '1' => get_string('yes'));
+        $mform->addElement('select', 'annotation', get_string('annotationsystem', 'ouwiki'), $annotationoptions);
+        $mform->addHelpButton('annotation', 'annotationsystem', 'ouwiki');
+
+        // Editing timeout
+        $timeoutoptions = array();
+        $timeoutoptions[0] = get_string('timeout_none', 'ouwiki');
+        $timeoutoptions[15*60] = get_string('numminutes', '', 15);
+        $timeoutoptions[30*60] = get_string('numminutes', '', 30);
+        $timeoutoptions[60*60] = get_string('numminutes', '', 60);
+        $timeoutoptions[120*60] = get_string('numhours', '', 2);
+        $timeoutoptions[240*60] = get_string('numhours', '', 4);
+        if (debugging('', DEBUG_DEVELOPER)) {
+            // This is not a language string because it's only for developer
+            // debugging, lots of which requires English...
+            $timeoutoptions[3*60] = '3 minutes (for testing)';
+        }
+        $mform->addElement('select', 'timeout', get_string("timeout", "ouwiki"), $timeoutoptions);
+        $mform->addHelpButton('timeout', 'timeout', 'ouwiki');
+
+        // Read-only controls.
+        $mform->addElement('date_selector', 'editbegin', get_string('editbegin', 'ouwiki'), array('optional' => true));
+        $mform->addHelpButton('editbegin', 'editbegin', 'ouwiki');
+        $mform->addElement('date_selector', 'editend', get_string('editend', 'ouwiki'), array('optional' => true));
+        $mform->addHelpButton('editend', 'editend', 'ouwiki');
+
+        // Display any template usage warning messages.
+        if ((!empty($this->current->id)) && (ouwiki_has_subwikis($this->current->id))) {
+            $mform->addElement('static', 'name1', get_string('note', 'ouwiki'), get_string('subwikiexist', 'ouwiki'));
+        }
+        if (isset($this->current->template)) {
+            $mform->addElement('static', 'name2', get_string('note', 'ouwiki'), get_string('templatefileexists', 'ouwiki',
+                    $this->current->template));
+        }
+        // Template - previously on creation, but allow to add now add anytime.
+        $filepickeroptions = array();
+        $filepickeroptions['accepted_types'] = array('.xml', '.zip');
+        $filepickeroptions['maxbytes'] = $COURSE->maxbytes;
+        $mform->addElement('filepicker', 'template_file', get_string('template', 'ouwiki'), null, $filepickeroptions);
+        $mform->addHelpButton('template_file', 'template', 'ouwiki');
+
+        // Wordcount
+        $wordcountoptions = array('0' => get_string('no'), '1' => get_string('yes'));
+        $mform->addElement('select', 'enablewordcount', get_string('showwordcounts', 'ouwiki'), $wordcountoptions);
+        $mform->addHelpButton('enablewordcount', 'showwordcounts', 'ouwiki');
+        $mform->setDefault('enablewordcount', 1);
+
+        // Enable the allow import course wiki pages into this wiki.
+        $mform->addElement('checkbox', 'allowimport', get_string('allowimport', 'ouwiki', 0));
+        $mform->addHelpButton('allowimport', 'allowimport', 'ouwiki');
+
+        $this->standard_grading_coursemodule_elements();
+
+        // Standard stuff
+        $this->standard_coursemodule_elements();
+
+        // Disable the 'completion with grade' if grading is turned off
+        if ($mform->elementExists('completionusegrade')) {
+            $mform->disabledIf('completionusegrade', 'grade', 'eq', 0);
+        }
+
+        $this->add_action_buttons();
+
+        $this->set_data($data);
+    }
+
+    public function add_completion_rules() {
+        $mform =& $this->_form;
+
+        $group = array();
+        $group[] =& $mform->createElement('checkbox', 'completionpagesenabled', ' ', get_string('completionpages', 'ouwiki'));
+        $group[] =& $mform->createElement('text', 'completionpages', ' ', array('size' => 3));
+        $mform->setType('completionpages', PARAM_INT);
+        $mform->addGroup($group, 'completionpagesgroup', get_string('completionpagesgroup', 'ouwiki'), array(' '), false);
+        $mform->disabledIf('completionpages', 'completionpagesenabled', 'notchecked');
+
+        $group = array();
+        $group[] =& $mform->createElement('checkbox', 'completioneditsenabled', ' ', get_string('completionedits', 'ouwiki'));
+        $group[] =& $mform->createElement('text', 'completionedits', ' ', array('size' => 3));
+        $mform->setType('completionedits', PARAM_INT);
+        $mform->addGroup($group, 'completioneditsgroup', get_string('completioneditsgroup', 'ouwiki'), array(' '), false);
+        $mform->disabledIf('completionedits', 'completioneditsenabled', 'notchecked');
+
+        return array('completionpagesgroup', 'completioneditsgroup');
+    }
+
+    public function completion_rule_enabled($data) {
+        return
+            ((!empty($data['completionpagesenabled']) && $data['completionpages'] != 0)) ||
+            ((!empty($data['completioneditsenabled']) && $data['completionedits'] != 0));
+    }
+
+    public function get_data() {
+        $data = parent::get_data();
+        if (!$data) {
+            return false;
+        }
+        // Turn off completion settings if the checkboxes aren't ticked
+        $autocompletion = !empty($data->completion) && $data->completion == COMPLETION_TRACKING_AUTOMATIC;
+        if (empty($data->completionpagesenabled) || !$autocompletion) {
+            $data->completionpages = 0;
+        }
+        if (empty($data->completioneditsenabled) || !$autocompletion) {
+            $data->completionedits = 0;
+        }
+
+        if (empty($data->allowimport)) {
+            $data->allowimport = 0;
+        }
+
+        return $data;
+    }
+
+    public function data_preprocessing(&$default_values) {
+        // Set up the completion checkboxes which aren't part of standard data.
+        // We also make the default value (if you turn on the checkbox) for those
+        // numbers to be 1, this will not apply unless checkbox is ticked.
+        $default_values['completionpagesenabled'] = !empty($default_values['completionpages']) ? 1 : 0;
+        if (empty($default_values['completionpages'])) {
+            $default_values['completionpages'] = 1;
+        }
+        $default_values['completioneditsenabled'] = !empty($default_values['completionedits']) ? 1 : 0;
+        if (empty($default_values['completionedits'])) {
+            $default_values['completionedits'] = 1;
+        }
+    }
+
+    public function validation($data, $files) {
+        $errors = parent::validation($data, $files);
+        if ( (($data['subwikis'] == 0) || ($data['subwikis'] == 2) ) && ($data['groupmode'] > 0) ) {
+            $errors['groupmode'] = get_string('errorcoursesubwiki', 'ouwiki');
+        }
+        if ( ($data['subwikis'] == 1) && ($data['groupmode'] == 0) ) {
+            $errors['groupmode'] = get_string('errorgroupssubwiki', 'ouwiki');
+        }
+        return $errors;
+    }
+}
diff --git a/mod/ouwiki/module.js b/mod/ouwiki/module.js
new file mode 100644
index 0000000..384ae3c
--- /dev/null
+++ b/mod/ouwiki/module.js
@@ -0,0 +1,539 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Javascript helper function for wiki
+ *
+ * @package   mod_ouwiki
+ * @copyright 2013 The Open University
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+M.mod_ouwiki_view = {
+    Y : null,
+
+    init : function(Y, args) {
+        // Store the YUI3 object.
+        this.Y = Y;
+
+        var _this = this;
+
+        // TODO: Change wiki JavaScript to actually use Moodle 2 style. At
+        // present this is mostly here in order to pass language strings.
+
+        // check to see whether there anno tags to show - either because there are none
+        // or show annotations is disabled in ouwiki settings
+        var icon = this.Y.one('#showannotationicons');
+        if (icon) {
+            // Turn the annotation icon show/hide links to use JS
+            icon.on('click', function(e) {
+                e.preventDefault();
+                _this.show_annotation_icons(true);
+                var hide = document.getElementById("hideannotationicons");
+                setTimeout(function() { hide.focus(); }, 0);
+            });
+        }
+        icon = this.Y.one('#hideannotationicons');
+        if (icon) {
+            icon.on('click', function(e) {
+                e.preventDefault();
+                _this.show_annotation_icons(false);
+                var show = document.getElementById("showannotationicons");
+                setTimeout(function() { show.focus(); }, 0);
+            });
+        }
+
+        // check to see whether there anno tags to show - either because there are none
+        // or show annotations is disabled in ouwiki settings
+        var annospans = this.Y.all('span.ouwiki-annotation-tag');
+        if (annospans) {
+            this.ouwikiShowAllAnnotations("none");
+            annospans.each(function (annospan) { _this.setupspans(annospan); });
+        }
+
+        // set add page and section fields
+        if(document.getElementById('ouw_create') != null) {
+            this.ouwikiSetFields();
+        }
+    },
+
+    /**
+     * Called when user selects to show or hide the annotations. Does two
+     * things: makes AJAX call to set the option, and adds the class to hide
+     * the icons.
+     * @param show If true, shows icons
+     */
+    show_annotation_icons : function(show) {
+        // Set or remove the class
+        var container = this.Y.one('.ouwiki-content');
+        var hideclass = 'ouwiki-hide-annotations';
+        if (show) {
+            container.removeClass(hideclass);
+        } else {
+            container.addClass(hideclass);
+        }
+
+        // Get URL from original link
+        var url = this.Y.one(show ? '#showannotationicons' : '#hideannotationicons').get('href');
+
+        // Add on the 'ajax' marker
+        url += '&ajax=1';
+
+        // Request it with AJAX, ignoring result
+        this.Y.io(url);
+    },
+
+    ouwikiToggleFunction : function(target, link) {
+        return function() {
+            if(target.style.display == 'block') {
+                target.style.display = 'none';
+                link.removeChild(link.firstChild);
+                link.appendChild(link.originalLink);
+            } else {
+                target.style.display = 'block';
+                link.originalLink=link.firstChild;
+                link.removeChild(link.firstChild);
+            }
+            return false;
+        };
+    },
+
+    ouwikiKeyFunction : function(link) {
+        return function(e) {
+            if((e && e.keyCode==13) || (window.event && window.event.keyCode==13))  {
+                link.onclick();
+                return false;
+            } else {
+                return true;
+            }
+        };
+    },
+
+    ouwikiShowFormFunction : function(target, header, link) {
+        return function() {
+            var form = document.getElementById('ouw_ac_formcontainer');
+            if(form.parentNode.firstChild == form) {
+                form.parentNode.style.display = 'none';
+            }
+            if(target == form.parentNode && form.style.display != 'none') {
+                form.style.display = 'none';
+                return false;
+            }
+            form.parentNode.removeChild(form);
+            target.appendChild(form);
+            form.style.display = 'block';
+
+            link.originalLink = link.firstChild;
+            link.removeChild(link.firstChild);
+
+            document.getElementById('ouw_ac_section').value =
+            header.id ? header.id.substring(5): '';
+            document.getElementById('ouw_ac_title').focus();
+
+            return false;
+        };
+    },
+
+    ouwikiSetFields : function() {
+        var _this = this;
+        var createbutton = document.getElementById('ouw_create');
+        createbutton.disabled = true;
+
+        var pagename = document.getElementById('ouw_newpagename');
+        pagename.style.color = "gray";
+        pagename.notusedyet = true;
+        pagename.onfocus = function() { _this.ouwikiResetThisField(pagename); };
+        pagename.onkeyup = function() { _this.ouwikiClearDisabled(createbutton, pagename); };
+        pagename.value = M.str.ouwiki.typeinpagename;
+
+        var addbutton = document.getElementById('ouw_add');
+        addbutton.disabled = true;
+
+        var sectionname = document.getElementById('ouw_newsectionname');
+        sectionname.style.color = "gray";
+        sectionname.notusedyet = true;
+        sectionname.onfocus = function() { _this.ouwikiResetThisField(sectionname); };
+        sectionname.onkeyup = function() { _this.ouwikiClearDisabled(addbutton, sectionname); };
+        sectionname.value = M.str.ouwiki.typeinsectionname;
+    },
+
+    ouwikiClearDisabled : function(element, field) {
+        if (field.value.length == 0) {
+            element.disabled = true;
+        } else {
+            element.disabled = false;
+        }
+    },
+
+    ouwikiResetThisField : function(field) {
+        if (field.notusedyet) {
+            field.value = '';
+            field.style.color = "black";
+            field.notusedyet = false;
+        }
+    },
+
+    ouwikiShowAllAnnotations : function(action) {
+        annoboxes = this.Y.all('span.ouwiki-annotation');
+        annoboxes.each(function (annobox) {
+            annobox.setStyle('display', action);
+            var annotag = annobox.get('parentNode');
+            var imgtag = annotag.get('firstChild');
+            if (action == "block") {
+                imgtag.set('alt', M.str.ouwiki.collapseannotation);
+                imgtag.set('title', M.str.ouwiki.collapseannotation);
+            } else if (action == "none") {
+                imgtag.set('alt', M.str.ouwiki.expandannotation);
+                imgtag.set('title', M.str.ouwiki.expandannotation);
+            }
+        });
+
+        if(action == "block") {
+            this.ouwikiSwapAnnotationUrl("hide");
+        } else if(action == "none") {
+            this.ouwikiSwapAnnotationUrl("show");
+        }
+    },
+
+    ouwikiSwapAnnotationUrl : function(action){
+        var show = document.getElementById("expandallannotations");
+        var hide = document.getElementById("collapseallannotations");
+        if (show && hide) {
+            if (action == "hide") {
+                show.style.display = "none";
+                hide.style.display = "inline";
+            } else if (action == "show") {
+                show.style.display = "inline";
+                hide.style.display = "none";
+        }
+        }
+    },
+
+    ouwikiShowHideAnnotation : function(id) {
+        var box = document.getElementById(id);
+        var annotag = box.parentNode;
+        var imgtag = annotag.firstChild;
+        if (box.style.display == "block") {
+            box.style.display = "none";
+            this.ouwikiSwapAnnotationUrl("show");
+            imgtag.alt = M.str.ouwiki.expandannotation;
+            imgtag.title = M.str.ouwiki.expandannotation;
+        } else {
+            box.style.display = "block";
+            imgtag.alt = M.str.ouwiki.collapseannotation;
+            imgtag.title = M.str.ouwiki.collapseannotation;
+            annoboxes = this.Y.all('span.ouwiki-annotation');
+            annoboxes = annoboxes.getDOMNodes();
+            var allblock = 1;
+            for (var i = 0; i < annoboxes.length; i++) {
+                if (annoboxes[i].style.display != "block") {
+                    allblock = 0;
+                }
+            }
+            if (allblock == 1) {
+                this.ouwikiSwapAnnotationUrl("hide");
+            }
+        }
+    },
+
+    setupspans : function(span) {
+        var _this = this;
+        span.setStyle('cursor', 'pointer');
+        span.set('tabIndex', '0');
+        span.on('keydown', function(e) {
+            //Cross browser event object.
+            var evt = window.event || e;
+            if (evt.keyCode == 13 || evt.keyCode == 32) {
+                _this.ouwikiShowHideAnnotation("annotationbox" + span.get('id').substring(10));
+                span.all('a').item(0).set('tabIndex', -1);
+                e.preventDefault();
+                return false;
+            }
+        });
+        span.on('click', function() {
+            _this.ouwikiShowHideAnnotation("annotationbox" + span.get('id').substring(10));
+        });
+    }
+};
+
+M.mod_ouwiki_annotate = {
+    Y : null,
+    YAHOO : null,
+
+    init : function(Y, args) {
+        // Store the YUI3 and YUI2 object.
+        this.Y = Y;
+        this.YAHOO = Y.YUI2;
+
+        var _this = this;
+        var save = M.util.get_string('add', 'ouwiki');
+        var cancel = M.util.get_string('cancel', 'ouwiki');
+
+        // Define various event handlers for Dialog
+        var handleSubmit = function() {
+            var data = this.getData();
+            _this.newAnnotation(data.annotationtext);
+            this.submit();
+        };
+        var handleCancel = function() {
+            this.cancel();
+        };
+        var handleSuccess = function(o) {
+            var response = o.responseText;
+            response = response.split("<!")[0];
+            document.getElementById("resp").innerHTML = response;
+        };
+        var handleFailure = function(o) {
+            alert("Submission failed: " + o.status);
+        };
+
+        // Instantiate the Dialog
+        var annotationdialog = this.YAHOO.util.Dom.get('annotationdialog');
+        if (annotationdialog) {
+            this.YAHOO.util.Dom.get(document.body).appendChild(annotationdialog);
+        }
+        annotationdialog = new this.YAHOO.widget.Dialog('annotationdialog', {
+                modal: true,
+                width: '100%',
+                iframe: true,
+                zIndex: 1000, // zIndex must be way above 99 to be above the active quiz tab
+                fixedcenter: true,
+                visible: false,
+                close: true,
+                constraintoviewport: true,
+                postmethod: 'none',
+                buttons: [ { text:save, handler:handleSubmit, isDefault: true },
+                { text:cancel, handler:handleCancel } ]
+        });
+
+        // Wire up the success and failure handlers
+        annotationdialog.callback = { success: handleSuccess, failure: handleFailure };
+        annotationdialog.cancel = function() {
+            this.hide();
+            Y.one('#' + currentMarker).focus();
+        };
+        annotationdialog.render();
+        var div = document.getElementById('annotationdialog');
+        if (div) {
+            div.style.display = 'block';
+        }
+
+        // setup keycodes
+        var markers = this.Y.all('span.ouwiki-annotation-marker');
+        markers.each(function (marker) {
+            _this.setupmarkers(marker, annotationdialog);
+        });
+
+        // Make escape close the dialogue.
+        annotationdialog.cfg.setProperty('keylisteners', [new this.YAHOO.util.KeyListener(
+                document, {keys:[27]}, function(types, args, obj) { annotationdialog.cancel();
+        })]);
+
+        // Nasty hack, remove once the YUI bug causing MDL-17594 is fixed.
+        // https://sourceforge.net/tracker/index.php?func=detail&aid=2493426&group_id=165715&atid=836476
+        var elementcauseinglayoutproblem = document.getElementById('_yuiResizeMonitor');
+        if (elementcauseinglayoutproblem) {
+            elementcauseinglayoutproblem.style.left = '0px';
+        }
+    },
+
+    setupmarkers : function(marker, dialog) {
+        var _this = this;
+        marker.setStyle('cursor', "pointer");
+        marker.set('tabIndex', "0");
+        marker.on('keydown', function(e) {
+            var keycode = null;
+            if (e) {
+                keycode = e.which;
+            } else if (window.event) {
+                keycode = window.event.keyCode;
+            }
+            if(keycode == 13 || keycode == 32) {
+                // call the function that handles adding an annotation
+                _this.openNewWindow(marker, dialog);
+                return false;
+            }
+        });
+
+        marker.on('click', function() {
+            _this.openNewWindow(marker, dialog);
+            return false;
+        });
+    },
+
+    openNewWindow : function(marker, mydialog1) {
+        currentMarker = marker.get('id');
+        mydialog1.show();
+    },
+
+    newAnnotation : function(newtext) {
+        // we need the number of the next form textarea
+        var annotationcount = document.getElementById('annotationcount');
+        var annotationnum = parseInt(annotationcount.firstChild.nodeValue) + 1;
+
+        //create the new form section
+        var newfitem = document.createElement('div');
+        newfitem.id = 'newfitem'+annotationnum;
+        newfitem.className = 'fitem';
+        newfitem.style.display = 'none';
+
+        var fitemtitle = document.createElement('div');
+        fitemtitle.className = 'fitemtitle';
+
+        var fitemlabel = document.createElement('label');
+        fitemlabel.htmlFor = 'id_annotationedit' + annotationnum;
+        //create a textnode and add it to the label
+        var fitemlabeltext = document.createTextNode(annotationnum);
+        fitemlabel.appendChild(fitemlabeltext);
+        // append the label to the div
+        fitemtitle.appendChild(fitemlabel);
+
+        //create the div for the textarea
+        var felement = document.createElement('div');
+        felement.className = 'felement ftextarea';
+
+        var textareatext  = document.createTextNode(newtext);
+        var felementtextarea = document.createElement('textarea');
+        felementtextarea.id = 'id_annotationedit' + annotationnum;
+        felementtextarea.name = 'new'+currentMarker.substring(6);
+        // we need the textare size set in the moodle form rather than setting explicitly here
+        felementtextarea.rows = '3';
+        felementtextarea.cols = '40';
+        felementtextarea.appendChild(textareatext);
+        felement.appendChild(felementtextarea);
+
+        newfitem.appendChild(fitemtitle);
+        newfitem.appendChild(felement);
+
+        // insert the new fitem before the last fitem (which is the delete orphaned checkbox)
+        var endmarker = document.getElementById('end');
+        var fcontainer = endmarker.parentNode.parentNode.parentNode;
+        fcontainer.insertBefore(newfitem, endmarker.parentNode.parentNode);
+
+        var markerid = this.markNewAnnotation(annotationnum);
+
+        newfitem.style.display = 'block';
+        annotationcount.firstChild.nodeValue = annotationnum;
+
+        // Set focus to next marker or list of annotations to be added if last marker.
+        if (markerid != 0) {
+            // Another annotation marker found.
+            var nextmarker = document.getElementById(markerid);
+            setTimeout(function() { nextmarker.focus(); }, 0);
+        } else {
+            // At end so focus on first annotation text if it exists.
+            var divannotext = this.Y.one('.felement .ftextarea');
+            if (divannotext) {
+                var annotext = divannotext.get('firstChild');
+                setTimeout(function() { annotext.focus(); }, 0);
+            } else {
+                // Do nothing.
+            }
+        }
+    },
+
+    markNewAnnotation : function(annotationnum) {
+        // Get next marker using currentMarker as the starting point.
+        // And loop through markers getting next marker object after current marker
+        var markers = this.Y.all('span.ouwiki-annotation-marker');
+        var id = 0;
+        var nextmarkerid = 0;
+        if (markers) {
+            markers = markers.getDOMNodes();
+            for (var i = 0; i < markers.length; i++) {
+                id = markers[i].id;
+                if (currentMarker == id) {
+                    if (i == (markers.length - 1) ) {
+                        // We are at the end - just break
+                        break;
+                    } else {
+                        // Get next marker id - and get out
+                        nextmarkerid = markers[i+1].id;
+                        break;
+                    }
+                }
+            }
+        }
+        markers = null;
+
+        var theMarker = document.getElementById(currentMarker);
+        // Create new strong element and replace current marker
+        var visualmarker = document.createElement('strong');
+        var visualtext = document.createTextNode('('+annotationnum+')');
+        visualmarker.appendChild(visualtext);
+        theMarker.parentNode.insertBefore(visualmarker, theMarker);
+        theMarker.parentNode.removeChild(theMarker);
+
+        return nextmarkerid;
+    }
+};
+
+M.mod_ouwiki_edit = {
+        Y : null,
+        init : function(Y, args) {
+            this.Y = Y;
+            this.YAHOO = Y.YUI2;
+            // Trap edit saving and test server is up.
+            var btns = Y.all('#save, #preview');
+            btns.on('click', function(e) {
+                function savefail() {
+                    // Save failed, alert of network or session issue.
+                    btns.set('disabled', true);
+                    var content = M.util.get_string('savefailnetwork', 'ouwiki');
+                    var panel = new M.core.alert({
+                        title: M.util.get_string('savefailtitle', 'ouwiki'),
+                        message: content,
+                        render: true,
+                        plugins: [Y.Plugin.Drag],
+                        modal: true
+                    });
+                    panel.show();
+                    function oncancel(evt) {
+                        evt.preventDefault();
+                        panel.hide();
+                    }
+                    e.preventDefault();
+                    // Trap cancel and make it a GET - so works with login.
+                    var cancel = Y.one('#cancel');
+                    cancel.on('click', function(e) {
+                        var form = Y.one('#ouwiki_belowtabs #mform1');
+                        var text = form.one('#fitem_id_content');
+                        var attach = form.one('#fitem_id_attachments');
+                        text.remove();
+                        attach.remove();
+                        form.set('method', 'get');
+                    });
+                }
+                function checksave(transactionid, response, args) {
+                    // Check response OK.
+                    if (response.responseText != 'ok') {
+                        // Send save failed due to login/session error.
+                        savefail();
+                    }
+                }
+                var cfg = {
+                    method: 'POST',
+                    data: 'sesskey=' + M.cfg.sesskey + '&contextid=' + args,
+                    on: {
+                        success: checksave,
+                        failure: savefail
+                    },
+                    sync: true,// Wait for result so we can cancel submit.
+                    timeout: 10000
+                };
+                Y.io('confirmloggedin.php', cfg);
+            });
+        }
+};
diff --git a/mod/ouwiki/nojslock.php b/mod/ouwiki/nojslock.php
new file mode 100644
index 0000000..d0fba81
--- /dev/null
+++ b/mod/ouwiki/nojslock.php
@@ -0,0 +1,40 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This script is called via an IMG tag when JavaScript is disabled.
+ * It updates the lock to allow 15 minutes without requiring confirmation.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+$lockid = required_param('lockid', PARAM_INT);
+if ($lock = $DB->get_record('ouwiki_locks', array('id' => $lockid))) {
+    $lock->seenat = time() + OUWIKI_LOCK_NOJS;
+    $lock->expiresat = null;
+    $DB->update_record('ouwiki_locks', $lock);
+    header('Content-Type: image/png');
+    readfile('pix/dot.png');
+    exit;
+} else {
+    print_error('No such lock');
+}
diff --git a/mod/ouwiki/override.php b/mod/ouwiki/override.php
new file mode 100644
index 0000000..ccd2922
--- /dev/null
+++ b/mod/ouwiki/override.php
@@ -0,0 +1,47 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Handles what happens when a user with appropriate permission attempts to
+ * override a wiki page editing lock.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+if (!data_submitted()) {
+    print_error("Only POST requests accepted");
+}
+
+if (!has_capability('mod/ouwiki:overridelock', $context)) {
+    print_error("You do not have the capability to override editing locks");
+}
+
+$pageversion = ouwiki_get_current_page($subwiki, $pagename, OUWIKI_GETPAGE_ACCEPTNOVERSION);
+ouwiki_override_lock($pageversion->pageid);
+
+$redirpage = optional_param('redirpage', '', PARAM_ALPHA);
+
+if ($redirpage != '') {
+    redirect($redirpage.'.php?'.ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL), '', 0);
+} else {
+    redirect('edit.php?'.ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL), '', 0);
+}
diff --git a/mod/ouwiki/participation.php b/mod/ouwiki/participation.php
new file mode 100644
index 0000000..f487155
--- /dev/null
+++ b/mod/ouwiki/participation.php
@@ -0,0 +1,112 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Page for viewing all user participation
+ *
+ * @package mod
+ * @subpackage ouwiki
+ * @copyright 2011 The Open University
+ * @author Stacey Walker <stacey@catalyst-eu.net>
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+require_once($CFG->libdir.'/gradelib.php');
+
+$id         = required_param('id', PARAM_INT); // Course Module ID
+$groupid    = optional_param('group', 0, PARAM_INT);
+$pagename   = optional_param('pagename', '', PARAM_TEXT);
+$download   = optional_param('download', '', PARAM_TEXT);
+$page       = optional_param('page', 0, PARAM_INT); // flexible_table page
+
+$params = array(
+    'id'        => $id,
+    'group'     => $groupid,
+    'pagename'  => $pagename,
+    'download'  => $download,
+    'page'      => $page,
+);
+$url = new moodle_url('/mod/ouwiki/participation.php', $params);
+$PAGE->set_url($url);
+
+if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+    print_error('invalidcoursemodule');
+}
+
+// Checking course instance
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+    print_error('invalidcoursemodule');
+}
+
+$PAGE->set_cm($cm);
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+// participation capability check
+$canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+if ($canview != OUWIKI_USER_PARTICIPATION) {
+    print_error('nopermissiontoshow');
+}
+$viewfullnames = has_capability('moodle/site:viewfullnames', $context);
+
+$groupname = '';
+if ($groupid) {
+    $groupname = $DB->get_field('groups', 'name', array('id' => $groupid));
+}
+
+// all enrolled users for table pagination
+$coursecontext = context_course::instance($course->id);
+$participation = ouwiki_get_participation($ouwiki, $subwiki, $context, $groupid);
+
+// is grading enabled and available for the current user
+$grading_info = array();
+if ($ouwiki->grade != 0 && has_capability('mod/ouwiki:grade', $context) &&
+        (!$groupid || ($groupid && has_capability('moodle/site:accessallgroups', $context)
+                || ($groupid && groups_is_member($groupid))))) {
+    $grading_info = grade_get_grades($course->id, 'mod',
+        'ouwiki', $ouwiki->id, array_keys($participation));
+}
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Headers
+if (empty($download)) {
+    echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, get_string('userparticipation', 'ouwiki'), $context);
+
+    // gets a message after grades updated
+    if (isset($SESSION->ouwikigradesupdated)) {
+        $message = $SESSION->ouwikigradesupdated;
+        unset($SESSION->ouwikigradesupdated);
+        echo $OUTPUT->notification($message, 'notifysuccess');
+    }
+}
+
+$ouwikioutput->ouwiki_render_participation_list($cm, $course, $pagename, $groupid, $ouwiki,
+    $subwiki, $download, $page, $grading_info, $participation, $coursecontext, $viewfullnames,
+    $groupname);
+
+// Footer
+if (empty($download)) {
+    $pageversion = ouwiki_get_current_page($subwiki, $pagename);
+    echo $ouwikioutput->get_link_back_to_wiki($cm);
+    echo $ouwikioutput->get_bottom_buttons($subwiki, $cm, $context, $pageversion, false);
+    ouwiki_print_footer($course, $cm, $subwiki, $pagename, null, 'view');
+}
diff --git a/mod/ouwiki/participation_table.php b/mod/ouwiki/participation_table.php
new file mode 100644
index 0000000..c6eb801
--- /dev/null
+++ b/mod/ouwiki/participation_table.php
@@ -0,0 +1,321 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Subclass of flexible_table for participation and download
+ *
+ * @package    mod
+ * @subpackage ouwiki
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ **/
+
+require_once($CFG->libdir.'/tablelib.php');
+
+/**
+ * Class ouwiki_participation_table
+ * extends flexible_table to override header and download rules
+ */
+class ouwiki_participation_table extends flexible_table {
+
+    public $cm;
+    public $course;
+    public $ouwiki;
+    public $pagename;
+    public $groupid;
+    public $groupname;
+    public $grade;
+    public $extraheaders;
+
+    public function __construct($cm, $course, $ouwiki, $pagename, $groupid = 0,
+        $groupname, $grade = null) {
+
+        $this->cm = $cm;
+        $this->course = $course;
+        $this->ouwiki = $ouwiki;
+        $this->pagename = $pagename;
+        $this->groupid = $groupid;
+        $this->groupname = $groupname;
+        $this->grade = $grade;
+        parent::__construct('mod-ouwiki-participation');
+    }
+
+    /**
+     * Setup the columns and headers and other properties of the table and then
+     * call flexible_table::setup() method.
+     */
+    public function setup($download = '') {
+        global $CFG;
+
+        // extra headers for export only
+        if (!empty($download)) {
+            $this->extraheaders = array(
+                format_string($this->course->shortname, true),
+                format_string($this->ouwiki->name, true),
+            );
+            if (!empty($this->groupname)) {
+                $this->extraheaders[] = $this->groupname;
+            }
+        }
+
+        // Define table columns
+        $columns = array(
+            'picture',
+            'fullname',
+            'pagescreated',
+            'pageedits'
+        );
+        $headers = array(
+            '',
+            get_string('user'),
+            get_string('pagescreated', 'ouwiki'),
+            get_string('pageedits', 'ouwiki'),
+        );
+
+        if (!empty($download)) {
+            unset($columns[0]);
+            unset($headers[0]);
+        }
+
+        if ($this->ouwiki->enablewordcount) {
+            $columns[] = 'wordsadded';
+            $columns[] = 'wordsdeleted';
+            $headers[] = get_string('wordsadded', 'ouwiki');
+            $headers[] = get_string('wordsdeleted', 'ouwiki');
+        }
+
+        if ($this->ouwiki->allowimport) {
+            $columns[] = 'importedfrom';
+            $headers[] = get_string('pagesimported', 'ouwiki');
+        }
+
+        if ($this->grade) {
+            $columns[] = 'grade';
+            $headers[] = get_string('grades');
+        }
+
+        $this->define_columns($columns);
+        $this->define_headers($headers);
+        $this->define_baseurl($CFG->wwwroot . '/mod/ouwiki/participation.php?id=' .
+            $this->cm->id . '&amp;pagename=' . $this->pagename . '&amp;group=' . $this->groupid);
+
+        $this->column_class('picture', 'picture');
+        $this->column_class('fullname', 'fullname');
+        $this->column_class('pagescreated', 'pagescreated');
+        $this->column_class('pageedits', 'pageedits');
+        $this->column_class('wordsadded', 'wordsadded');
+        $this->column_class('wordsdeleted', 'wordsdeleted');
+
+        $this->set_attribute('cellspacing', '0');
+        $this->set_attribute('id', 'participation');
+        $this->set_attribute('class', 'participation');
+        $this->set_attribute('width', '100%');
+        $this->set_attribute('align', 'center');
+        $this->sortable(false);
+
+        parent::setup();
+    }
+
+    /**
+     * This function is not part of the public api.
+     *
+     * Overriding here to avoid downloading in unsupported formats
+     */
+    public function get_download_menu() {
+        $exportclasses = array('csv' => get_string('downloadcsv', 'ouwiki'));
+        return $exportclasses;
+    }
+
+    /**
+     * Override to output grade form header
+     * @see flexible_table::wrap_html_start()
+     */
+    public function wrap_html_start() {
+        if ($this->grade && !$this->is_downloading()) {
+            echo $this->grade_form_header();
+        }
+    }
+
+    public function grade_form_header() {
+        $output = '';
+        $formattrs = array();
+        $formattrs['action'] = new moodle_url('/mod/ouwiki/savegrades.php');
+        $formattrs['id']     = 'savegrades';
+        $formattrs['method'] = 'post';
+        $output = html_writer::start_tag('form', $formattrs);
+        $output .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'id',
+            'value' => $this->cm->id));
+        $output .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'group',
+            'value' => $this->groupid));
+        $output .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'pagename',
+            'value' => $this->pagename));
+        return $output;
+    }
+
+    public function grade_form_footer() {
+        $output = '';
+        $savegrades = html_writer::empty_tag('input', array('type' => 'submit',
+            'name' => 'savegrades', 'value' => get_string('savegrades', 'ouwiki')));
+        $output = html_writer::tag('div', $savegrades, array('class' => 'savegradesbutton'));
+        $output .= html_writer::end_tag('form');
+        return $output;
+    }
+
+    /**
+     * This function is not part of the public api.
+     * You don't normally need to call this. It is called automatically when
+     * needed when you start adding data to the table.
+     *
+     */
+    public function start_output() {
+        $this->started_output = true;
+        if ($this->exportclass !== null) {
+            $this->exportclass->start_table($this->sheettitle);
+            $this->exportclass->output_headers($this->extraheaders);
+            $this->exportclass->output_headers($this->headers);
+        } else {
+            $this->start_html();
+            $this->print_headers();
+        }
+    }
+}
+
+/**
+ * Class ouwiki_user_participation_table
+ * extends flexible_table to override header and download rules
+ */
+class ouwiki_user_participation_table extends flexible_table {
+
+    public $cm;
+    public $course;
+    public $ouwiki;
+    public $pagename;
+    public $groupname;
+    public $user;
+    public $userfullname;
+    public $extraheaders;
+
+    public function __construct($cm, $course, $ouwiki, $pagename,
+        $groupname, $user, $userfullname) {
+
+        $this->cm = $cm;
+        $this->course = $course;
+        $this->ouwiki = $ouwiki;
+        $this->pagename = $pagename;
+        $this->groupname = $groupname;
+        $this->user = $user;
+        $this->userfullname = $userfullname;
+        parent::__construct('mod-ouwiki-user-participation');
+    }
+
+    public function setup($download = '') {
+        global $CFG;
+
+        // extra headers for export only
+        if (!empty($download)) {
+            $this->extraheaders = array(
+                format_string($this->course->shortname, true),
+                format_string($this->ouwiki->name, true),
+            );
+            if (!empty($this->groupname)) {
+                $this->extraheaders[] = $this->groupname;
+            }
+            $this->extraheaders[] = $this->userfullname;
+        }
+
+        $columns = array('date', 'time', 'page');
+        $headers = array(
+            get_string('date'),
+            get_string('time'),
+            get_string('page', 'ouwiki')
+        );
+        if ($this->ouwiki->enablewordcount) {
+            if (empty($download)) {
+                $columns[] = 'words';
+                $headers[] = get_string('words', 'ouwiki');
+            } else {
+                $columns[] = 'wordsadded';
+                $columns[] = 'wordsdeleted';
+                $headers[] = get_string('wordsadded', 'ouwiki');
+                $headers[] = get_string('wordsdeleted', 'ouwiki');
+            }
+        }
+        if ($this->ouwiki->allowimport) {
+            $columns[] = 'importedfrom';
+            $headers[] = get_string('importedfrom', 'ouwiki');
+        }
+
+        if (empty($download)) {
+            $columns[] = 'view';
+            $view = html_writer::tag('span', get_string('view'), array('class' => 'accesshide'));
+            $headers[] = $view;
+        }
+
+        $this->define_columns($columns);
+        $this->define_headers($headers);
+        $this->define_baseurl($CFG->wwwroot . '/mod/ouwiki/userparticipation.php?id=' .
+            $this->cm->id . '&amp;pagename=' . $this->pagename . '&amp;user=' . $this->user->id);
+
+        $this->column_class('date', 'date');
+        $this->column_class('time', 'time');
+        $this->column_class('page', 'page');
+        $this->column_class('view', 'view');
+
+        if ($this->ouwiki->enablewordcount) {
+            $this->column_class('words', 'words');
+        }
+
+        if ($this->ouwiki->allowimport) {
+            $this->column_class('allowimport', 'allowimport');
+        }
+
+        $this->set_attribute('cellspacing', '0');
+        $this->set_attribute('id', 'participation');
+        $this->set_attribute('class', 'participation');
+        $this->set_attribute('width', '100%');
+        $this->set_attribute('align', 'center');
+        $this->sortable(false);
+
+        parent::setup();
+    }
+
+    /**
+     * This function is not part of the public api.
+     *
+     * Overriding here to avoid downloading in unsupported formats
+     */
+    public function get_download_menu() {
+        $exportclasses = array('csv' => get_string('downloadcsv', 'ouwiki'));
+        return $exportclasses;
+    }
+
+    /**
+     * This function is not part of the public api.
+     * You don't normally need to call this. It is called automatically when
+     * needed when you start adding data to the table.
+     *
+     */
+    public function start_output() {
+        $this->started_output = true;
+        if ($this->exportclass !== null) {
+            $this->exportclass->start_table($this->sheettitle);
+            $this->exportclass->output_headers($this->extraheaders);
+            $this->exportclass->output_headers($this->headers);
+        } else {
+            $this->start_html();
+            $this->print_headers();
+        }
+    }
+}
diff --git a/mod/ouwiki/pix/annotation-marker.gif b/mod/ouwiki/pix/annotation-marker.gif
new file mode 100644
index 0000000000000000000000000000000000000000..9009c4e4cd4e1dc6259ac9a2ce5e6b6bf29b1c8f
GIT binary patch
literal 53
zcmZ?wbhEHbWM^P!XkcWRdFDS5DE?$&WME)q&|v@qkPHJ8Pfz}WS=@USxZf=dW?--e
E0FD6;MgRZ+

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/annotation.gif b/mod/ouwiki/pix/annotation.gif
new file mode 100644
index 0000000000000000000000000000000000000000..cfdee9b03b4c49a8553de6ba48e6190aff5812fb
GIT binary patch
literal 479
zcmZ?wbhEHb6ky<Cc*e}||Ns9JCr&Vof&mHv#h)yU3=GT+Iw1Q&al*iE)4<$R-_qLF
z)KSmS-P2p&**mePpSg>HamLIU-BYGb>TB+vHEYho`3t5lT0EO!?(!AWX3n3oa{ZR(
Kww)b~4Aub894PPr

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/diff_added_begins.gif b/mod/ouwiki/pix/diff_added_begins.gif
new file mode 100644
index 0000000000000000000000000000000000000000..a4e4299bcc450e332492746c1b3922b4f3c6b359
GIT binary patch
literal 61
zcmZ?wbhEHb<YwSzXkcUjg8%>jEB<6*<YHiC&;jv5G7L;2J^d@I4?K+OYP-f&bmqh%
LJKOm$L>R0A%l{Gr

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/diff_added_ends.gif b/mod/ouwiki/pix/diff_added_ends.gif
new file mode 100644
index 0000000000000000000000000000000000000000..a696fedf8939014f225179d3395111d1fbefe118
GIT binary patch
literal 51
zcmZ?wbhEHbWMSZDXkcUjg8%>jEB<6*<YHiC&;jv5G7L;yJ@pM)GJFy~XGIvS0TRv%
AMgRZ+

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/diff_deleted_begins.gif b/mod/ouwiki/pix/diff_deleted_begins.gif
new file mode 100644
index 0000000000000000000000000000000000000000..43d8e1e3bf07ff06f2addf02f8063c72b3215ac8
GIT binary patch
literal 58
zcmZ?wbhEHb<YwSzXkcUjg8%>jEB<6*<YHiC&;jv5G7L<DJ^d@I4?K)Z5sb**P&2__
IN`%200EbWxrT_o{

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/diff_deleted_ends.gif b/mod/ouwiki/pix/diff_deleted_ends.gif
new file mode 100644
index 0000000000000000000000000000000000000000..a696fedf8939014f225179d3395111d1fbefe118
GIT binary patch
literal 51
zcmZ?wbhEHbWMSZDXkcUjg8%>jEB<6*<YHiC&;jv5G7L;yJ@pM)GJFy~XGIvS0TRv%
AMgRZ+

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/dot.png b/mod/ouwiki/pix/dot.png
new file mode 100644
index 0000000000000000000000000000000000000000..b8344f01bedebfb4fae634d6194191df2ab4e63f
GIT binary patch
literal 69
zcmeAS@N?(olHy`uVBq!ia0vp^j3CUx1SBVv2j2ryJf1F&Ar-fh6A}`DJQfDV6R%$X
Q1hN=BUHx3vIVCg!0Jk>}vH$=8

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/icon.gif b/mod/ouwiki/pix/icon.gif
new file mode 100644
index 0000000000000000000000000000000000000000..c891b205c25eb68c349cd3998703a85c2d75c176
GIT binary patch
literal 1027
zcmV+e1pNC)Nk%v~VGsZi0O$Sy009610R#d71qJ{B1ONsH000RA00jaE1_KEQ1quuW
z0|^EU3kMAj2L%iX4i5<j4GIqq3=j|v5fKg&6b=m%4-*g)4-*g+6A={{5ET{@5f&5|
z7#0~B7aAKE78)5G85<ZI8XX-Q9vmGc9~~efAS5IpA0r|qB_k#$BO)gzDJdr_D<>u^
zDJ(83DJ&~4FfK7NFf%kTFETSRG%__cGdDOiGdMOnIygK$I5#;uI6yu^Lq0u0KSM)7
zMMXhCMnXYFLq<qLLPADJNkl_OMMy|SN=ZjcOh-mZN=QsfPEJZmPE1cwOiE8pQBqAz
zQczS@QBYD;QB_k{R#aG7R8v@1T3cCNU0YsRU0+^YU}0QaU|nHhUt?upUt?iqVq{@u
zV`pe%VrgV!Xl80_W@T(=W@>0`ZD?n3Yie$6aB*#Ga&ByJZgO#Nb8~TZc64}jc5``j
zb9i=odv<kxd3bz!etvv_fqZ*_eu9L5euII9hJk>Df`);HiHC)WiiL!Uhl`AdhKP!X
zi;0bniHMDhkCKdwl8}^@kdBd)kd~B~nUs>4mYSNEo1K`Ko0*-Uo0^}TprW0eq@JCl
zproaspQ5CprJ|>(qoSsysHvx`tf!`~sHdx`t*NW1uc@f6tFW=Gs;{lFvahtYu&=eU
zwzsmexwNylwYj~ty1BNyzqz=*y1u}@!o|S9!@<SI!^p|R!pFtQ%f-aW$IHjb#?8mZ
z$;-&j$;Zse&d|%r&dku#&CAoy&C<`**3i$_(a_S=(b&_{*3{VA)zjP7)Y;eD+t}RN
z+}YpS*xlOS+}_*a+}hvV;p5%h;osxn;@{%r;pO7z=;Pt!=Hut&>FVU;>*eI;=;i6=
z>+I&`?dRt1=;!O{?dt65@$2gE?eX*N?DX#K^6&HZ@bB~S_44%a_4D`m^YQoe`TF$p
z_W1Sr_WS(y_4@bx{rC3!`2GI)_y76${QCa-{Q3X-`ThI<`~CX={QCa<|M~y_|NZ;?
z|NH;_|Nj5{EC2ui01yBW000Q+0FS7Nr*Bl74-7UqAOL^>qJQ(|<(sFBfW-g^5LhIj
zM&CY<`?fu}NOH@(Ry)Y)`}a>tfB+jULSwffz?FY1`2ctc6F?Vz-Vy|O;O*Z&Z$wf&
zDI)}o%4`Y<a8Q@e=stYV`~+gB4;+)1OmGs5H}4F90tE8>`vQ|dtADuygc1f5CYOIl
z2*CVk3V^0m4fWRgx8&j@O+5ernzIo?yMMf@6hIpQ?GZ~mJD6fQZyzN=F(qh&;=z_a
xkMrtf`?m4rrg_Aiz;M$lPm2c*URnf@hn))o1~ww7oY5i#V!ZU~)@v~!06WCt{J#JI

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/orphan.gif b/mod/ouwiki/pix/orphan.gif
new file mode 100644
index 0000000000000000000000000000000000000000..55e92cbd4ca35545c4bb14e9bf4dc99edee6fe39
GIT binary patch
literal 306
zcmZ?wbhEHb<YwSzSZc&zW@Z)`7}(z4K5^p2$&)9~m@#A4tXZ>X&z>`9&fK|k=gpfp
zfByW13l}b0v}p0-#Y>hfS-yPviWMtXty;Ba&6*7xHf-9oX~&KohYlS&eE9IOW5>>%
zIdksZxl5NWUA=ns`t|EKZ{ECh>(--3kDfev^7QG`=g*(NeEIU#t5>gIzkc)P&D*zc
zKYaM`@#DuYU%q_%_U-%k@4tTi`t#?{zkmP!6Acu9vM_Qn*fZ!b00GEP3~c@m%?}el
zE-(>oWBgb(*P_Ys;o_#9DG{6xHVGu|U)$^{CRMv}$%)FhR*B&=x9YT|%3d?{^13$j
fgsFf8OI(DnDi<RQr$VTn6CW3^s<fxKBZD;n3@^SN

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/rss.gif b/mod/ouwiki/pix/rss.gif
new file mode 100644
index 0000000000000000000000000000000000000000..925c32c52cfd13cfb91632fba1ab8e0399c0e1eb
GIT binary patch
literal 1007
zcmZ?wbhEHb<YVAt_};;AH=O@*vDueSr90vL_hZCfZ0UJdtMq%e#l2YZS51m<_D%UQ
zN&iug^REj_?i6X<ZF2i~deM``rEh1)JYQS<dyeJZ81YZ-l0VNbc+x2Kd!E(X2|jPv
zbUp6%dN#M<_bj8=O&Sm9=YM~C>1K-Z-BhLD^X-1jv3s~E|KSYx`@N>WF0Xi3r}Sob
z&#TF%&(>DI>(+Wwrhcu?^L>xe&0wB~1&YrLmA?0=K5mfzcyi(UGb<kysC~PC>{GA8
z?I`(I?XoY+l`bbJ+^ey_-yr{Frq{<V#m_B@AG#DCW+=UFk^MEx@_w!S{d&2dbFDtK
z%D!lqf81^M{m!B1tqPAP1m6qie>K_jac9)sFy5~hH{Xm@dNn2P)B3F67neM((0n{6
z@Jo;4hnXJtvQ@8z@ZC+6d(!RyFwgMEiP;ZY&3@0fdAlDNEV{QU#eY1%b|+f&>C&>d
z&3a#Yq+ix*eVb<X`}3>M-Fn|97=Az8^=Wa?kDI%0x4Av(cKXnw^K?nw$8&2Q6sdh`
zQF_*4d^3#y)Aju~qm=Gfir-04x*se4IN$J&FT?-;|Np#u#xM$K9|DR$Sy&kuIv8|7
zR)O*a1IHN#K~|2<%b1v)I5-6r0z4jc$X8i)RDM+JpJT~=K}1S{>Da>l_B9oa#R|>r
z&Y}BkIu0yjSkNy%ZN|a`4hKH=zz;tPjU3M|6j7OQ<w^1L$CGt*{8}tR7P+0(<q>)C
z!(%z;bmx=~iAk5#+PF2GN@P|EKRKf)+QwF6k#x|PU!?twN@k%)^FsTkJef<IoKMbk
zPW6#Fl*HjP%R+wljflby<_>3Ro|6X{9tJQoaxU|j!Pw%Z;G8@|L{e!%Kcl=!56`Yc
RixU-{Hzc3VlMrCA1^@+gMiu}7

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/pix/warning.png b/mod/ouwiki/pix/warning.png
new file mode 100644
index 0000000000000000000000000000000000000000..c95ed50cae653f5dc3a5906b8b2651dbb8a2d395
GIT binary patch
literal 786
zcmV+t1MU2YP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV00004b3#c}2nYxW
zd<bNS00009a7bBm000fw000fw0YWI7cmMzZ8FWQhbW?9;ba!ELWdL_~cP?peYja~^
zaAhuUa%Y?FJQ@H10*^^VK~y-6ZIjDu6Hye0zcVvw(oEGFq`?Pv;RDoFG3cgZSEArX
z2`F0s1Q#ucv>;t{<wpO6f@qA2;L3%9h!1S>K^uG!kYL5Su%=DYnVRX`nd725wCI7e
zxIe!0yZ3PJ5mjYv+!NWf0_SZQ5I7t|)`52+Jc;4{pz7zfysS02DRSI~o0}oKMWnME
zaDXMCp&HIXXyD2qT<1?=Vo(+tv*6NR5jUUDlPVT*`uecCx?p;m=;1?Jl?pSe-Y=Lu
z1IJKRRFxZ0D8cdv5uGa*wO*@ftJTu4lapGRm{8yMb*a(Ng|RXHmP+XZSSrCqRfW6I
zQGzcoKx_T|`g49>8;yo~o~O@8N3~Qa=+gYW`o6EtW>bG$zO0`_v;<xmc3B1vIgsnN
zZ8F!cfe7*^-F%)@HcO_vJJIanVY0h-vjv<OPFoQi%s@)^?7`Z(6Ci1=bL&>RdV7iE
zIMHw%WMBXn(gH^<2l_LRkpl;a<9J<W@_9D&_F{}7ilRhk|9(1F2Y1kkpcMgTVPRdd
zF@|(c57`|%FvbwaabjZXbqt`eY$?3@1zx*SNua+srgAxQg#yNyM2n(`U}gq?^#xOw
z1#j9QLA{Q5=S~6{V`$CJvRJJWhGAk7RIB)p9^ru>!!zrg>a@b!1qc_%#|dh+1oppw
zr}6P)at>Q97Kest1_2(lLnw=?QWn`3Lp29ouIrK;8Noe!7Hk_40U&t!lE&yL?b%u8
zz>nb6pz7n~E8h}1DNu4Dvk_8uI!(vEeb}x`@cun<vxyHZf)89hr#k-6GTji_Zo_R0
z`W%onxB?hxuRuEjFM{F))v5n(<KHNY^cgs0!4Y7S!c&3Qn_=pNYOt354IrJ5ovA6<
QsQ>@~07*qoM6N<$f>X_3R{#J2

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/renderer.php b/mod/ouwiki/renderer.php
new file mode 100644
index 0000000..8e568ff
--- /dev/null
+++ b/mod/ouwiki/renderer.php
@@ -0,0 +1,1374 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Moodle renderer used to display special elements of the ouwiki module
+ *
+ * @package    mod
+ * @subpackage ouwiki
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ **/
+
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+class mod_ouwiki_renderer extends plugin_renderer_base {
+
+    // Hold some parameters locally.
+    public $params;
+
+    /**
+     * Print the main page content
+     *
+     * @param object $subwiki For details of user/group and ID so that
+     *   we can make links
+     * @param object $cm Course-module object (again for making links)
+     * @param object $pageversion Data from page and version tables.
+     * @param bool $gewgaws A decorator indicator.
+     * @param string $page Page type
+     * @param int $showwordcount
+     * @param bool $hideannotations If true, adds extra class to hide annotations
+     * @return string HTML content for page
+     */
+    public function ouwiki_print_page($subwiki, $cm, $pageversion, $gewgaws = null,
+            $page = 'history', $showwordcount = 0, $hideannotations = false) {
+
+        global $CFG, $ouwikiinternalre;
+        require_once($CFG->libdir . '/filelib.php');
+
+        $output = '';
+        $modcontext = context_module::instance($cm->id);
+        $title = $pageversion->title === '' ? get_string('startpage', 'ouwiki') :
+                htmlspecialchars($pageversion->title);
+
+        // Get annotations - only if using annotation system. Prevents unnecessary db access.
+        if ($subwiki->annotation) {
+            $annotations = ouwiki_get_annotations($pageversion);
+        } else {
+            $annotations = '';
+        }
+
+        // Setup annotations according to the page we are on.
+            if ($page == 'view') {
+            if ($subwiki->annotation && count($annotations)) {
+                $pageversion->xhtml =
+                        ouwiki_highlight_existing_annotations($pageversion->xhtml, $annotations, 'view');
+            }
+        } else if ($page == 'annotate') {
+            $pageversion->xhtml = ouwiki_setup_annotation_markers($pageversion->xhtml);
+            $pageversion->xhtml =
+                    ouwiki_highlight_existing_annotations($pageversion->xhtml, $annotations, 'annotate');
+        }
+
+        // Must rewrite plugin urls AFTER doing annotations because they depend on byte position.
+        $pageversion->xhtml = file_rewrite_pluginfile_urls($pageversion->xhtml, 'pluginfile.php',
+                $modcontext->id, 'mod_ouwiki', 'content', $pageversion->versionid);
+        $pageversion->xhtml = ouwiki_convert_content($pageversion->xhtml, $subwiki, $cm, null,
+                $pageversion->xhtmlformat);
+
+        // Get files here so we have them for the portfolio button addition as well.
+        $fs = get_file_storage();
+        $files = $fs->get_area_files($modcontext->id, 'mod_ouwiki', 'attachment',
+                $pageversion->versionid, "timemodified", false);
+
+        // Start gathering output.
+        $output .= html_writer::start_tag('div', array('class' => 'ouwiki-content' .
+                ($hideannotations ? ' ouwiki-hide-annotations' : '')));
+        $output .= $this->get_topheading_section($title, $gewgaws, $pageversion, $annotations, $files);
+
+        // List of recent changes.
+        if ($gewgaws && $pageversion->recentversions) {
+            $output .= html_writer::start_tag('div', array('class' => 'ouw_recentchanges'));
+            $output .= get_string('recentchanges', 'ouwiki').': ';
+            $output .= html_writer::start_tag('span', array('class' => 'ouw_recentchanges_list'));
+
+            $first = true;
+            foreach ($pageversion->recentversions as $recentversion) {
+                if ($first) {
+                    $first = false;
+                } else {
+                    $output .= '; ';
+                }
+
+                $output .= ouwiki_recent_span($recentversion->timecreated);
+                $output .= ouwiki_nice_date($recentversion->timecreated);
+                $output .= html_writer::end_tag('span');
+                $output .= ' (';
+                $recentversion->id = $recentversion->userid; // So it looks like a user object.
+                $output .= ouwiki_display_user($recentversion, $cm->course, false);
+                $output .= ')';
+            }
+
+            $output .= '; ';
+            $pagestr = '';
+            if (strtolower(trim($title)) !== strtolower(get_string('startpage', 'ouwiki'))) {
+                $pagestr = '&page='.$title;
+            }
+            $output .= html_writer::tag('a', get_string('seedetails', 'ouwiki'),
+                    array('href' => $CFG->wwwroot.'/mod/ouwiki/history.php?id='.
+                    $cm->id . $pagestr));
+            $output .= html_writer::end_tag('span');
+            $output .= html_writer::end_tag('div');
+        }
+
+        $output .= $this->get_new_annotations_section($gewgaws, $pageversion, $annotations, $files);
+        $output .= html_writer::end_tag('div');
+
+        // Main content of page.
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_belowmainhead'));
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_topspacer'));
+        $output .= html_writer::end_tag('div');
+        $output .= $pageversion->xhtml;
+
+        if ($gewgaws) {
+            // Add in links around headings.
+            $ouwikiinternalre = new stdClass();
+            $ouwikiinternalre->pagename = $pageversion->title;
+            $ouwikiinternalre->subwiki = $subwiki;
+            $ouwikiinternalre->cm = $cm;
+            $ouwikiinternalre->annotations = $annotations;
+            $ouwikiinternalre->locked = $pageversion->locked;
+            $ouwikiinternalre->pageversion = $pageversion;
+            $ouwikiinternalre->files = $files;
+            $output = preg_replace_callback(
+                    '|<h([1-9]) id="ouw_s([0-9]+_[0-9]+)">(.*?)(<br\s*/>)?</h[1-9]>|s',
+                    'ouwiki_internal_re_heading', $output);
+        }
+        $output .= html_writer::tag('div', '', array('class' => 'clearer'));
+        $output .= html_writer::end_tag('div'); // End of ouw_belowmainhead.
+
+        // Add wordcount.
+        if ($showwordcount) {
+            $output .= $this->ouwiki_render_wordcount($pageversion->wordcount);
+        }
+
+        $output .= html_writer::end_tag('div'); // End of ouwiki-content.
+
+        // Add attached files.
+        $output .= $this->get_attached_files($files, $modcontext, $pageversion);
+
+        // Pages that link to this page.
+        if ($gewgaws) {
+            $links = ouwiki_get_links_to($pageversion->pageid);
+            if (count($links) > 0) {
+                $output .= $this->get_links_to($links);
+            }
+        }
+
+        // Display the orphaned annotations.
+        if ($subwiki->annotation && $annotations && $page != 'history') {
+            $orphaned = '';
+            foreach ($annotations as $annotation) {
+                if ($annotation->orphaned) {
+                    $orphaned .= $this->ouwiki_print_hidden_annotation($annotation);
+                }
+            }
+            if ($orphaned !== '') {
+                $output .= html_writer::start_div('ouw-orphaned-annotations');
+                $output .= html_writer::tag('h3', get_string('orphanedannotations', 'ouwiki'));
+                $output .= $orphaned;
+                $output .= html_writer::end_div();
+            } else {
+                $output = $output;
+            }
+        }
+
+        $output .= $this->get_new_buttons_section($gewgaws, $pageversion);
+
+        return array($output, $annotations);
+    }
+
+    /**
+     * Returns html for a replaceable topheading section.
+     *
+     * @param string $title
+     * @param bool $gewgaws A decorator indicator.
+     * @param object $pageversion
+     * @param object $annotations
+     * @param array $files
+     * @return string
+     */
+    public function get_topheading_section($title, $gewgaws, $pageversion, $annotations, $files) {
+        $subwiki = $this->params->subwiki;
+        $cm = $this->params->cm;
+        $output = html_writer::start_tag('div', array('class' => 'ouw_topheading'));
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_heading'));
+        $output .= html_writer::tag('h2', format_string($title),
+                array('class' => 'ouw_topheading'));
+        if ($gewgaws) {
+            $output .= $this->render_heading_bit(1, $pageversion->title, $subwiki,
+                    $cm, null, $annotations, $pageversion->locked, $files,
+                    $pageversion->pageid);
+        } else {
+            $output .= html_writer::end_tag('div');
+        }
+        return $output;
+    }
+
+    /**
+     * Returns empty string.
+     *
+     * @param bool $gewgaws A decorator indicator.
+     * @param object $pageversion
+     * @param object $annotations
+     * @param array $files
+     * @return string
+     */
+    public function get_new_annotations_section($gewgaws, $pageversion, $annotations, $files) {
+        return '';
+    }
+
+    /**
+     * Returns html for attached files.
+     *
+     * @param array $files
+     * @param object $modcontext
+     * @param object $pageversion
+     * @return string
+     */
+    public function get_attached_files($files, $modcontext, $pageversion) {
+        global $CFG;
+        $output = '';
+        if ($files) {
+            $output .= html_writer::start_tag('div', array('class' => 'ouwiki-post-attachments'));
+            $output .= html_writer::tag('h3', get_string('attachments', 'ouwiki'),
+                    array('class' => 'ouw_topheading'));
+            $output .= html_writer::start_tag('ul');
+            foreach ($files as $file) {
+                $output .= html_writer::start_tag('li');
+                $filename = $file->get_filename();
+                $mimetype = $file->get_mimetype();
+                $iconimage = html_writer::empty_tag('img',
+                        array('src' => $this->output->pix_url(file_mimetype_icon($mimetype)),
+                                'alt' => $mimetype, 'class' => 'icon'));
+                $path = file_encode_url($CFG->wwwroot . '/pluginfile.php', '/' . $modcontext->id .
+                        '/mod_ouwiki/attachment/' . $pageversion->versionid . '/' . $filename);
+                $output .= html_writer::tag('a', $iconimage, array('href' => $path));
+                $output .= html_writer::tag('a', s($filename), array('href' => $path));
+                $output .= html_writer::end_tag('li');
+            }
+            $output .= html_writer::end_tag('ul');
+            $output .= html_writer::end_tag('div');
+        }
+        return $output;
+    }
+
+    /**
+     * Returns html for the linked from links.
+     *
+     * @param array $links
+     * @return string
+     */
+    public function get_links_to($links) {
+        global $CFG;
+        $output = html_writer::start_tag('div', array('class'=>'ouw_linkedfrom'));
+        $output .= html_writer::tag('h3', get_string(
+                count($links) == 1 ? 'linkedfromsingle' : 'linkedfrom', 'ouwiki'),
+                array('class'=>'ouw_topheading'));
+        $output .= html_writer::start_tag('ul');
+        $first = true;
+        foreach ($links as $link) {
+            $output .= html_writer::start_tag('li');
+            if ($first) {
+                $first = false;
+            } else {
+                $output .= '&#8226; ';
+            }
+            $linktitle = ($link->title) ? htmlspecialchars($link->title) :
+            get_string('startpage', 'ouwiki');
+            $output .= html_writer::tag('a', $linktitle,
+                    array('href' => $CFG->wwwroot . '/mod/ouwiki/view.php?' .
+                            ouwiki_display_wiki_parameters(
+                                    $link->title, $this->params->subwiki, $this->params->cm, OUWIKI_PARAMS_URL)));
+            $output .= html_writer::end_tag('li');
+        }
+        $output .= html_writer::end_tag('ul');
+        $output .= html_writer::end_tag('div');
+        return $output;
+    }
+
+    /**
+     * Returns empty string.
+     *
+     * @param bool $gewgaws A decorator indicator.
+     * @param object $pageversion
+     * @return string
+     */
+    public function get_new_buttons_section($gewgaws, $pageversion) {
+        return '';
+    }
+
+    public function render_heading_bit($headingnumber, $pagename, $subwiki, $cm,
+            $xhtmlid, $annotations, $locked, $files, $pageid) {
+        global $CFG;
+
+        $output = '';
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_byheading'));
+
+        // Add edit link for page or section
+        if ($subwiki->canedit && !$locked) {
+            $str = $xhtmlid ? 'editsection' : 'editpage';
+
+            $output .= $this->ouwiki_get_edit_link($str, $pagename, $subwiki, $cm, $xhtmlid);
+        }
+
+        // output the annotate link if using annotation system, only for page not section
+        if (!$xhtmlid && $subwiki->annotation) {
+            // Add annotate link
+            if ($subwiki->canannotate) {
+                $output .= $this->ouwiki_get_annotate_link($pagename, $subwiki, $cm);
+            }
+
+            // 'Expand/collapse all' and 'Show/hide all' annotation controls
+            if ($annotations != false) {
+                $orphancount = 0;
+                foreach ($annotations as $annotation) {
+                    if ($annotation->orphaned == 1) {
+                        $orphancount++;
+                    }
+                }
+                if (count($annotations) > $orphancount) {
+                    // Show and hide annotation icon links. Visibility controlled by CSS.
+                    $output .= html_writer::start_tag('span', array('id' => 'showhideannotationicons'));
+                    $output .= ' '.html_writer::tag('a', get_string('showannotationicons', 'ouwiki'),
+                            array('href' => 'hideannotations.php?hide=0&' . ouwiki_display_wiki_parameters(
+                            $pagename, $subwiki, $cm, OUWIKI_PARAMS_URL) . '&sesskey=' . sesskey(),
+                            'id' => 'showannotationicons'));
+                    $output .= html_writer::tag('a', get_string('hideannotationicons', 'ouwiki'),
+                            array('href' => 'hideannotations.php?hide=1&' . ouwiki_display_wiki_parameters(
+                            $pagename, $subwiki, $cm, OUWIKI_PARAMS_URL) . '&sesskey=' . sesskey(),
+                            'id' => 'hideannotationicons'));
+                    $output .= html_writer::end_tag('span');
+
+                    // Expand and collapse annotations links.
+                    $output .= html_writer::start_tag('span', array('id' => 'expandcollapseannotations'));
+                    $output .= ' '.html_writer::tag('a', get_string('expandallannotations', 'ouwiki'),
+                        array(
+                            'href' => 'javascript:M.mod_ouwiki_view.ouwikiShowAllAnnotations("block")',
+                            'id' => 'expandallannotations'
+                        ));
+                    $output .= html_writer::tag('a', get_string('collapseallannotations', 'ouwiki'),
+                        array(
+                            'href' => 'javascript:M.mod_ouwiki_view.ouwikiShowAllAnnotations("none")',
+                            'id' => 'collapseallannotations'
+                        ));
+                    $output .= html_writer::end_tag('span');
+                }
+            }
+        }
+
+        // On main page, add export button
+        if (!$xhtmlid && $CFG->enableportfolios) {
+            $button = new portfolio_add_button();
+            $button->set_callback_options('ouwiki_page_portfolio_caller',
+                    array('pageid' => $pageid), 'mod_ouwiki');
+            if (empty($files)) {
+                $button->set_formats(PORTFOLIO_FORMAT_PLAINHTML);
+            } else {
+                $button->set_formats(PORTFOLIO_FORMAT_RICHHTML);
+            }
+            $output .= ' ' . $button->to_html(PORTFOLIO_ADD_TEXT_LINK).' ';
+        }
+
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::end_tag('div');
+
+        return $output;
+    }
+
+    /**
+     * Renders the 'export entire wiki' link.
+     *
+     * @param object $subwiki Subwiki data object
+     * @param bool $anyfiles True if any page of subwiki contains files
+     * @param array $wikiparamsarray associative array
+     * @return string HTML content of list item with link, or nothing if none
+     */
+    public function render_export_all_li($subwiki, $anyfiles, $wikiparamsarray) {
+        global $CFG;
+
+        if (!$CFG->enableportfolios) {
+            return '';
+        }
+
+        $button = new portfolio_add_button();
+        $button->set_callback_options('ouwiki_all_portfolio_caller',
+               $wikiparamsarray, 'mod_ouwiki');
+        if ($anyfiles) {
+            $button->set_formats(PORTFOLIO_FORMAT_PLAINHTML);
+        } else {
+            $button->set_formats(PORTFOLIO_FORMAT_RICHHTML);
+        }
+        return html_writer::tag('li', $button->to_html(PORTFOLIO_ADD_TEXT_LINK));
+    }
+
+    public function ouwiki_internal_re_heading_bits($matches) {
+        global $ouwikiinternalre;
+
+        $tag = "h$matches[1]";
+        $output = '';
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_heading ouw_heading'.
+                $matches[1]));
+        $output .= html_writer::tag($tag, $matches[3], array('id' => 'ouw_s'.$matches[2]));
+
+        $output .= $this->render_heading_bit($matches[1],
+                $ouwikiinternalre->pagename, $ouwikiinternalre->subwiki,
+                $ouwikiinternalre->cm, $matches[2], $ouwikiinternalre->annotations,
+                $ouwikiinternalre->locked, $ouwikiinternalre->files,
+                $ouwikiinternalre->pageversion->pageid);
+
+        return $output;
+    }
+
+    public function ouwiki_print_preview($content, $page, $subwiki, $cm, $contentformat) {
+        global $CFG;
+
+        // Convert content.
+        $content = ouwiki_convert_content($content, $subwiki, $cm, null, $contentformat);
+        // Need to replace brokenfile.php with draftfile.php since switching off filters
+        // will switch off all filter.
+        $content = str_replace("\"$CFG->httpswwwroot/brokenfile.php#",
+                "\"$CFG->httpswwwroot/draftfile.php", $content);
+        // Create output to be returned for printing.
+        $output = html_writer::tag('p', get_string('previewwarning', 'ouwiki'),
+                array('class' => 'ouw_warning'));
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_preview'));
+        $output .= $this->output->box_start("generalbox boxaligncenter");
+        // Title & content of page.
+        $title = $page !== null && $page !== '' ? htmlspecialchars($page) :
+                get_string('startpage', 'ouwiki');
+        $output .= html_writer::tag('h1', $title);
+        $output .= $content;
+        $output .= html_writer::end_tag('div');
+        $output .= $this->output->box_end();
+        return $output;
+    }
+
+    /**
+     * Format the diff content for rendering
+     *
+     * @param v1 object version one of the page
+     * @param v2 object version two of the page
+     * @return output
+     */
+    public function ouwiki_print_diff($v1, $v2) {
+
+        $output = '';
+
+        // left: v1
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_left'));
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_versionbox'));
+        $output .= html_writer::tag('h1', $v1->version, array('class' => 'accesshide'));
+        $output .= html_writer::tag('div', $v1->date, array('class' => 'ouw_date'));
+        $output .= html_writer::tag('div', $v1->savedby, array('class' => 'ouw_person'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_diff ouwiki_content'));
+        $output .= $v1->content;
+        $output .= html_writer::tag('h3', get_string('attachments', 'ouwiki'), array());
+        $output .= html_writer::tag('div', $v1->attachments,
+                array('class' => 'ouwiki_attachments'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::end_tag('div');
+
+        // right: v2
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_right'));
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_versionbox'));
+        $output .= html_writer::tag('h1', $v2->version, array('class' => 'accesshide'));
+        $output .= html_writer::tag('div', $v2->date, array('class' => 'ouw_date'));
+        $output .= html_writer::tag('div', $v2->savedby, array('class' => 'ouw_person'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::start_tag('div', array('class' => 'ouw_diff ouwiki_content'));
+        $output .= $v2->content;
+        $output .= html_writer::tag('h3', get_string('attachments', 'ouwiki'), array());
+        $output .= html_writer::tag('div', $v2->attachments,
+                array('class' => 'ouwiki_attachments'));
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::end_tag('div');
+
+        // clearer
+        $output .= html_writer::tag('div', '&nbsp;', array('class' => 'clearer'));
+
+        return $output;
+    }
+
+    /**
+     * Format the compared file for rendering as part of the diff
+     *
+     * @param file object
+     * @param action string
+     * @return output
+     */
+    public function ouwiki_print_attachment_diff($file, $action = 'none') {
+        global $OUTPUT, $CFG;
+
+        $filename = $file->get_filename();
+        $mimetype = $file->get_mimetype();
+        $iconimage = html_writer::empty_tag('img',
+                array('src' => $OUTPUT->pix_url(file_mimetype_icon($mimetype)),
+                'alt' => $mimetype, 'class' => 'icon'));
+
+        if ($action === 'add') {
+            $addedstart = html_writer::empty_tag('img', array(
+                'src' => $OUTPUT->pix_url('diff_added_begins', 'ouwiki'),
+                'alt' => get_string('addedbegins', 'ouwiki'),
+                'class' => 'icon')
+            );
+            $addedend = html_writer::empty_tag('img', array(
+                'src' => $OUTPUT->pix_url('diff_added_ends', 'ouwiki'),
+                'alt' => get_string('addedends', 'ouwiki'),
+                'class' => 'icon')
+            );
+
+            $output = html_writer::start_tag('li');
+            $output .= $addedstart;
+            $output .= html_writer::tag('span', " $iconimage $filename ",
+                    array('class' => 'ouw_added'));
+            $output .= $addedend;
+            $output .= html_writer::end_tag('li');
+
+        } else if ($action === 'delete') {
+            $deletedstart = html_writer::empty_tag('img' , array(
+                'src' => $OUTPUT->pix_url('diff_deleted_begins', 'ouwiki'),
+                'alt' => get_string('deletedbegins', 'ouwiki'),
+                'class' => 'icon')
+            );
+            $deletedend = html_writer::empty_tag('img', array(
+                'src' => $OUTPUT->pix_url('diff_deleted_ends', 'ouwiki'),
+                'alt' => get_string('deletedends', 'ouwiki'),
+                'class' => 'icon')
+            );
+
+            $output = html_writer::start_tag('li');
+            $output .= $deletedstart;
+            $output .= html_writer::tag('span', " $iconimage $filename ",
+                    array('class' => 'ouw_deleted'));
+            $output .= $deletedend;
+            $output .= html_writer::end_tag('li');
+        } else {
+            // default case; no change in file
+            $output = html_writer::tag('li', "$iconimage $filename");
+        }
+
+        return $output;
+    }
+
+    /**
+     * Format the hidden annotations for rendering
+     *
+     * @param annotation object
+     * @return output
+     */
+    public function ouwiki_print_hidden_annotation($annotation) {
+        global $DB, $COURSE, $OUTPUT;
+
+        $author = $DB->get_record('user', array('id' => $annotation->userid), '*', MUST_EXIST);
+        $picture = null;
+        $size = 0;
+        $return = true;
+        $classname = ($annotation->orphaned) ? 'ouwiki-orphaned-annotation' : 'ouwiki-annotation';
+        $output = html_writer::start_tag('span',
+                array('class' => $classname, 'id' => 'annotationbox'.$annotation->id));
+        $output .= $OUTPUT->user_picture($author, array('courseid' => $COURSE->id));
+        $output .= get_accesshide(get_string('startannotation', 'ouwiki'));
+        $output .= html_writer::start_tag('span', array('class' => 'ouwiki-annotation-content'));
+        $output .= html_writer::tag('span', fullname($author),
+                array('class' => 'ouwiki-annotation-content-title'));
+        $output .= $annotation->content;
+        $output .= html_writer::end_tag('span');
+        $output .= html_writer::tag('span', get_string('endannotation', 'ouwiki'),
+                array('class' => 'accesshide'));
+        $output .= html_writer::end_tag('span');
+
+        return $output;
+    }
+
+    /**
+     * Format the annotations for portfolio export
+     *
+     * @param annotation object
+     * @return output
+     */
+    public function ouwiki_print_portfolio_annotation($annotation) {
+        global $DB, $COURSE, $OUTPUT;
+
+        $author = $DB->get_record('user', array('id' => $annotation->userid), '*', MUST_EXIST);
+
+        $output = '[';
+        $output .= html_writer::start_tag('i');
+        $output .= html_writer::tag('span', $annotation->content, array('style' => 'colour: red'));
+        $output .= ' - '. fullname($author) . ', ' . userdate($annotation->timemodified);
+        $output .= html_writer::end_tag('i');
+        $output .= '] ';
+
+        return $output;
+    }
+
+    /**
+     * Prints the header and (if applicable) group selector.
+     *
+     * @param object $ouwiki Wiki object
+     * @param object $cm Course-modules object
+     * @param object $course
+     * @param object $subwiki Subwiki objecty
+     * @param string $pagename Name of page
+     * @param object $context Context object
+     * @param string $afterpage If included, extra content for navigation string after page link
+     * @param bool $hideindex If true, doesn't show the index/recent pages links
+     * @param bool $notabs If true, prints the after-tabs div here
+     * @param string $head Things to include inside html head
+     * @param string $title
+     * @param string $querytext for use when changing groups against search criteria
+     */
+    public function ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context,
+            $afterpage = null, $hideindex = null, $notabs = null, $head = '', $title='', $querytext = '') {
+
+        $output = '';
+
+        if ($pagename == null) {
+            $pagename = '';
+        }
+
+        ouwiki_print_header($ouwiki, $cm, $subwiki, $pagename, $afterpage, $head, $title);
+
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $page = basename($_SERVER['PHP_SELF']);
+
+        // Gather params for later use - saves passing as attributes within the renderer.
+        $this->params = new StdClass();
+        $this->params->ouwiki = $ouwiki;
+        $this->params->cm = $cm;
+        $this->params->subwiki = $subwiki;
+        $this->params->course = $course;
+        $this->params->pagename = $pagename;
+        $this->params->hideindex = $hideindex;
+        $this->params->canview = $canview;
+        $this->params->page = $page;
+
+        // Add wiki name header.
+        $output .= $this->get_wiki_heading_text();
+
+        // Add rss and atom feeds.
+        $output .= $this->get_feeds_section();
+
+        // Add group/user selector.
+        $showselector = true;
+        if (($page == 'userparticipation.php' && $canview != OUWIKI_MY_PARTICIPATION)
+            || $page == 'participation.php'
+                && (int)$ouwiki->subwikis == OUWIKI_SUBWIKIS_INDIVIDUAL) {
+            $showselector = false;
+        }
+        if ($showselector) {
+            $selector = ouwiki_display_subwiki_selector($subwiki, $ouwiki, $cm,
+                $context, $course, $page, $querytext);
+            $output .= $selector;
+        }
+
+        // Add index links.
+        list($content, $participationstr) = $this->ouwiki_get_links();
+        $output .= $content;
+
+        // Add page heading.
+        $output .= $this->ouwiki_get_page_heading($participationstr);
+
+        $output .= html_writer::div('', 'clearer');
+        if ($notabs) {
+            $extraclass = $selector ? ' ouwiki_gotselector' : '';
+            $output .= html_writer::div('', 'ouwiki_notabs' . $extraclass,
+                    array('id' => 'ouwiki_belowtabs'));
+        }
+
+        return $output;
+    }
+
+    /**
+     * Returns empty string.
+     *
+     * @return string
+     */
+    public function get_wiki_heading_text() {
+        return '';
+    }
+
+    /**
+     * Returns empty string.
+     *
+     * @return string
+     */
+    public function get_feeds_section() {
+        return '';
+    }
+
+    /**
+     * Returns page heading (if required).
+     *
+     * @param string $participationstr Page heading title.
+     * @return string
+     */
+    public function ouwiki_get_page_heading($participationstr) {
+        $output = '';
+        if ($this->params->page == 'participation.php' ||
+                $this->params->page == 'userparticipation.php') {
+            $output .= $this->output->heading($participationstr);
+        }
+        return $output;
+    }
+
+    /**
+     * Returns html for the links (wiki index etc.), and a participation string.
+     *
+     * @return array
+     */
+    public function ouwiki_get_links() {
+        $output = '';
+        $participationstr = '';
+        if (!$this->params->hideindex) {
+            $output .= html_writer::start_tag('div', array('id' => 'ouwiki_indexlinks'));
+            list($content, $participationstr) = $this->ouwiki_get_links_content();
+            $output .= $content;
+            $output .= html_writer::end_tag('div');
+        } else {
+            $output .= html_writer::start_tag('div', array('id' => 'ouwiki_noindexlink'));
+            $output .= html_writer::end_tag('div');
+        }
+        return array($output, $participationstr);
+    }
+
+    /**
+     * Returns html for the content of the links, and a participation string.
+     *
+     * @return array
+     */
+    public function ouwiki_get_links_content() {
+        global $USER;
+        $output = html_writer::start_tag('ul');
+        if ($this->params->page == 'wikiindex.php') {
+            $output .= html_writer::start_tag('li', array('id' => 'ouwiki_nav_index'));
+            $output .= html_writer::start_tag('span');
+            $output .= get_string('index', 'ouwiki');
+            $output .= html_writer::end_tag('span');
+            $output .= html_writer::end_tag('li');
+        } else {
+            $output .= html_writer::start_tag('li', array('id' => 'ouwiki_nav_index'));
+            $output .= html_writer::tag('a', get_string('index', 'ouwiki'),
+                    array('href' => 'wikiindex.php?'.
+                            ouwiki_display_wiki_parameters('', $this->params->subwiki,
+                                    $this->params->cm, OUWIKI_PARAMS_URL),
+                            'class' => 'osep-smallbutton'));
+            $output .= html_writer::end_tag('li');
+        }
+        if ($this->params->page == 'wikihistory.php') {
+            $output .= html_writer::start_tag('li', array('id' => 'ouwiki_nav_history'));
+            $output .= html_writer::start_tag('span');
+            $output .= get_string('wikirecentchanges', 'ouwiki');
+            $output .= html_writer::end_tag('span');
+            $output .= html_writer::end_tag('li');
+        } else {
+            $output .= html_writer::start_tag('li', array('id' => 'ouwiki_nav_history'));
+            $output .= html_writer::tag('a', get_string('wikirecentchanges', 'ouwiki'),
+                    array('href' => 'wikihistory.php?'.
+                            ouwiki_display_wiki_parameters('', $this->params->subwiki,
+                                    $this->params->cm, OUWIKI_PARAMS_URL),
+                            'class' => 'osep-smallbutton'));
+            $output .= html_writer::end_tag('li');
+        }
+        // Check for mod setting and ability to edit that enables this link.
+        if (($this->params->subwiki->canedit) && ($this->params->ouwiki->allowimport)) {
+            $output .= html_writer::start_tag('li', array('id' => 'ouwiki_import_pages'));
+            if ($this->params->page == 'import.php') {
+                $output .= html_writer::tag('span', get_string('import', 'ouwiki'));
+            } else {
+                $importlink = new moodle_url('/mod/ouwiki/import.php',
+                        ouwiki_display_wiki_parameters($this->params->pagename,
+                                $this->params->subwiki, $this->params->cm, OUWIKI_PARAMS_ARRAY));
+                $output .= html_writer::link($importlink, get_string('import', 'ouwiki'),
+                        array('class' => 'osep-smallbutton'));
+            }
+            $output .= html_writer::end_tag('li');
+        }
+        $participationstr = '';
+        if ($this->params->canview == OUWIKI_USER_PARTICIPATION) {
+            $participationstr = get_string('participationbyuser', 'ouwiki');
+            $participationpage = 'participation.php?' .
+                    ouwiki_display_wiki_parameters('', $this->params->subwiki, $this->params->cm,
+                            OUWIKI_PARAMS_URL);
+        } else if ($this->params->canview == OUWIKI_MY_PARTICIPATION) {
+            $participationstr = get_string('myparticipation', 'ouwiki');
+            $participationpage = 'userparticipation.php?' .
+                    ouwiki_display_wiki_parameters('', $this->params->subwiki, $this->params->cm,
+                            OUWIKI_PARAMS_URL);
+            $participationpage .= '&user=' . $USER->id;
+        }
+        if ($this->params->canview > OUWIKI_NO_PARTICIPATION) {
+            if (($this->params->cm->groupmode != 0) && isset($this->params->subwiki->groupid)) {
+                $participationpage .= '&group=' . $this->params->subwiki->groupid;
+            }
+            if ($this->params->page == 'participation.php' ||
+                    $this->params->page == 'userparticipation.php') {
+                $output .= html_writer::start_tag('li',
+                        array('id' => 'ouwiki_nav_participation'));
+                $output .= html_writer::start_tag('span');
+                $output .= $participationstr;
+                $output .= html_writer::end_tag('span');
+                $output .= html_writer::end_tag('li');
+            } else {
+                $output .= html_writer::start_tag('li',
+                        array('id' => 'ouwiki_nav_participation'));
+                $output .= html_writer::tag('a', $participationstr,
+                        array('href' => $participationpage, 'class' => 'osep-smallbutton'));
+                $output .= html_writer::end_tag('li');
+            }
+        }
+        $output .= html_writer::end_tag('ul');
+        return array($output, $participationstr);
+    }
+
+    /**
+     * Format the wordcount for display.
+     *
+     * @param string $wordcount
+     * @return output
+     */
+    public function ouwiki_render_wordcount($wordcount) {
+        $output = html_writer::start_tag('div', array('class' => 'ouw_wordcount'));
+        $output .= html_writer::tag('span', get_string('numwords', 'ouwiki', $wordcount));
+        $output .= html_writer::end_tag('div');
+        return $output;
+    }
+
+    /**
+     * Print all user participation records for display
+     *
+     * @param object $cm
+     * @param object $course
+     * @param string $pagename
+     * @param int $groupid
+     * @param object $ouwiki
+     * @param object $subwiki
+     * @param string $download (csv)
+     * @param int $page flexible_table pagination page
+     * @param bool $grading_info gradebook grade information
+     * @param array $participation mixed array of user participation values
+     * @param object $context
+     * @param bool $viewfullnames
+     * @param string groupname
+     */
+    public function ouwiki_render_participation_list($cm, $course, $pagename, $groupid, $ouwiki,
+        $subwiki, $download, $page, $grading_info, $participation, $context, $viewfullnames,
+        $groupname) {
+        global $DB, $CFG, $OUTPUT;
+
+        require_once($CFG->dirroot.'/mod/ouwiki/participation_table.php');
+        $perpage = OUWIKI_PARTICIPATION_PERPAGE;
+
+        // filename for downloading setup
+        $filename = "$course->shortname-".format_string($ouwiki->name, true);
+        if (!empty($groupname)) {
+            $filename .= '-'.format_string($groupname, true);
+        }
+
+        $table = new ouwiki_participation_table($cm, $course, $ouwiki,
+            $pagename, $groupid, $groupname, $grading_info);
+        $table->setup($download);
+        $table->is_downloading($download, $filename, get_string('participation', 'ouwiki'));
+
+        // participation doesn't need standard ouwiki tabs so we need to
+        // add this one div in manually
+        if (!$table->is_downloading()) {
+            echo html_writer::start_tag('div', array('id' => 'ouwiki_belowtabs'));
+        }
+
+        if (!empty($participation)) {
+            if (!$table->is_downloading()) {
+                if ($perpage > count($participation)) {
+                    $perpage = count($participation);
+                }
+                $table->pagesize($perpage, count($participation));
+                $offset = $page * $perpage;
+                $endposition = $offset + $perpage;
+            } else {
+                // always export all users
+                $endposition = count($participation);
+                $offset = 0;
+            }
+            $currentposition = 0;
+            foreach ($participation as $user) {
+                if ($currentposition == $offset && $offset < $endposition) {
+                    $fullname = fullname($user, $viewfullnames);
+
+                    // control details link
+                    $details = false;
+
+                    // pages
+                    $pagecreates = 0;
+                    if (isset($user->pagecreates)) {
+                        $pagecreates = $user->pagecreates;
+                        $details = true;
+                    }
+                    $pageedits = 0;
+                    if (isset($user->pageedits)) {
+                        $pageedits = $user->pageedits;
+                        $details = true;
+                    }
+
+                    // words
+                    $wordsadded = 0;
+                    $wordsdeleted = 0;
+                    if ($ouwiki->enablewordcount) {
+                        if (isset($user->wordsadded)) {
+                            $wordsadded = $user->wordsadded;
+                            $details = true;
+                        }
+                        if (isset($user->wordsdeleted)) {
+                            $wordsdeleted = $user->wordsdeleted;
+                            $details = true;
+                        }
+                    }
+
+                    // Allow import.
+                    $imports = 0;
+                    if ($ouwiki->allowimport) {
+                        if (isset($user->pageimports)) {
+                            $imports = count($user->pageimports);
+                            $details = true;
+                        }
+                    }
+
+                    // grades
+                    if ($grading_info) {
+                        if (!$table->is_downloading()) {
+                            $attributes = array('userid' => $user->id);
+                            if (!isset($grading_info->items[0]->grades[$user->id]->grade)) {
+                                $user->grade = -1;
+                            } else {
+                                $user->grade = $grading_info->items[0]->grades[$user->id]->grade;
+                                $user->grade = abs($user->grade);
+                            }
+                            $menu = html_writer::select(make_grades_menu($ouwiki->grade),
+                                'menu['.$user->id.']', $user->grade,
+                                array(-1 => get_string('nograde')), $attributes);
+                            $gradeitem = '<div id="gradeuser'.$user->id.'">'. $menu .'</div>';
+                        } else {
+                            if (!isset($grading_info->items[0]->grades[$user->id]->grade)) {
+                                $gradeitem = get_string('nograde');
+                            } else {
+                                $gradeitem = $grading_info->items[0]->grades[$user->id]->grade;
+                            }
+                        }
+                    }
+
+                    // user details
+                    if (!$table->is_downloading()) {
+                        $picture = $OUTPUT->user_picture($user);
+                        $userurl = new moodle_url('/user/view.php?',
+                            array('id' => $user->id, 'course' => $course->id));
+                        $userdetails = html_writer::link($userurl, $fullname);
+                        if ($details) {
+                            $detailparams = array('id' => $cm->id, 'pagename' => $pagename,
+                                'user' => $user->id, 'group' => $groupid);
+                            $detailurl = new moodle_url('/mod/ouwiki/userparticipation.php',
+                                $detailparams);
+                            $accesshidetext = get_string('userdetails', 'ouwiki', $fullname);
+                            $detaillink = html_writer::start_tag('small');
+                            $detaillink .= ' (';
+                            $detaillink .= html_writer::tag('span', $accesshidetext,
+                                    array('class' => 'accesshide'));
+                            $detaillink .= html_writer::link($detailurl,
+                                get_string('detail', 'ouwiki'));
+                            $detaillink .= ')';
+                            $detaillink .= html_writer::end_tag('small');
+                            $userdetails .= $detaillink;
+                        }
+                    }
+
+                    // add row
+                    if (!$table->is_downloading()) {
+                        if ($ouwiki->enablewordcount) {
+                            $row = array($picture, $userdetails, $pagecreates,
+                                $pageedits, $wordsadded, $wordsdeleted);
+                        } else {
+                            $row = array($picture, $userdetails, $pagecreates, $pageedits);
+                        }
+                    } else {
+                        $row = array($fullname, $pagecreates, $pageedits,
+                            $wordsadded, $wordsdeleted);
+                    }
+                    if ($ouwiki->allowimport) {
+                        $row[] = $imports;
+                        // $row[] = 666;
+                    }
+                    if (isset($gradeitem)) {
+                        $row[] = $gradeitem;
+                    }
+                    $table->add_data($row);
+                    $offset++;
+                }
+                $currentposition++;
+            }
+        }
+
+        $table->finish_output();
+        // print the grade form footer if necessary
+        if (!$table->is_downloading() && $grading_info && !empty($participation)) {
+            echo $table->grade_form_footer();
+        }
+    }
+
+    /**
+     * Render single user participation record for display
+     *
+     * @param object $user
+     * @param array $changes user participation
+     * @param object $cm
+     * @param object $course
+     * @param object $ouwiki
+     * @param object $subwiki
+     * @param string $pagename
+     * @param int $groupid
+     * @param string $download
+     * @param bool $canview level of participation user can view
+     * @param object $context
+     * @param string $fullname
+     * @param bool $cangrade permissions to grade user participation
+     * @param string $groupname
+     */
+    public function ouwiki_render_user_participation($user, $changes, $cm, $course,
+        $ouwiki, $subwiki, $pagename, $groupid, $download, $canview, $context, $fullname,
+        $cangrade, $groupname) {
+        global $DB, $CFG, $OUTPUT;
+
+        require_once($CFG->dirroot.'/mod/ouwiki/participation_table.php');
+
+        $filename = "$course->shortname-".format_string($ouwiki->name, true);
+        if (!empty($groupname)) {
+            $filename .= '-'.format_string($groupname, true);
+        }
+        $filename .= '-'.format_string($fullname, true);
+
+        // setup the table
+        $table = new ouwiki_user_participation_table($cm, $course, $ouwiki,
+            $pagename, $groupname, $user, $fullname);
+        $table->setup($download);
+        $table->is_downloading($download, $filename, get_string('participation', 'ouwiki'));
+        // participation doesn't need standard ouwiki tabs so we need to
+        // add this one div in manually
+        if (!$table->is_downloading()) {
+            echo html_writer::start_tag('div', array('id' => 'ouwiki_belowtabs'));
+            if (count($changes) < $table->pagesize) {
+                $table->pagesize(count($changes), count($changes));
+            }
+        }
+
+        $previouswordcount = false;
+        $lastdate = null;
+        foreach ($changes as $change) {
+            $date = userdate($change->timecreated, get_string('strftimedate'));
+            $time = userdate($change->timecreated, get_string('strftimetime'));
+            if (!$table->is_downloading()) {
+                if ($date == $lastdate) {
+                    $date = null;
+                } else {
+                    $lastdate = $date;
+                }
+                $now = time();
+                $edittime = $time;
+                if ($now - $edittime < 5*60) {
+                    $category = 'ouw_recenter';
+                } else if ($now - $edittime < 4*60*60) {
+                    $category = 'ouw_recent';
+                } else {
+                    $category = 'ouw_recentnot';
+                }
+                $time = html_writer::start_tag('span', array('class' => $category));
+                $time .= $edittime;
+                $time .= html_writer::end_tag('span');
+            }
+            $page = $change->title ? htmlspecialchars($change->title) :
+                get_string('startpage', 'ouwiki');
+            $row = array($date, $time, $page);
+
+            // word counts
+            if ($ouwiki->enablewordcount) {
+                $previouswordcount = false;
+                if ($change->previouswordcount) {
+                    $words = ouwiki_wordcount_difference($change->wordcount,
+                        $change->previouswordcount, true);
+                } else {
+                    $words = ouwiki_wordcount_difference($change->wordcount, 0, false);
+                }
+                if (!$table->is_downloading()) {
+                    $row[] = $words;
+                } else {
+                    if ($words <= 0) {
+                        $row[] = 0;
+                        $row[] = $words;
+                    } else {
+                        $row[] = $words;
+                        $row[] = 0;
+                    }
+                }
+            }
+
+            // Allow imports.
+            if ($ouwiki->allowimport) {
+                $imported = '';
+                if ($change->importversionid) {
+                    $wikidetails = ouwiki_get_wiki_details($change->importversionid);
+                    $wikiname = $wikidetails->name;
+                    if ($wikidetails->courseshortname) {
+                        $coursename = $wikidetails->courseshortname. '<br/>';
+                        $imported = $coursename . $wikiname;
+                    } else {
+                        $imported = $wikiname;
+                    }
+                    if ($wikidetails->group) {
+                        $users = '<br/> [[' .$wikidetails->group. ']]';
+                        $imported = $imported . $users;
+                    } else if ($wikidetails->user) {
+                        $users = '<br/>[[' .$wikidetails->user. ']]';
+                        $imported = $imported . $users;
+                    }
+                }
+                $row[] = $imported;
+            }
+
+            if (!$table->is_downloading()) {
+                $pageparams = ouwiki_display_wiki_parameters($change->title, $subwiki, $cm);
+                $pagestr = $page . ' ' . $lastdate . ' ' . $edittime;
+                if ($change->id != $change->firstversionid) {
+                    $accesshidetext = get_string('viewwikichanges', 'ouwiki', $pagestr);
+                    $changeurl = new moodle_url("/mod/ouwiki/diff.php?$pageparams" .
+                        "&v2=$change->id&v1=$change->previousversionid");
+                    $changelink = html_writer::start_tag('small');
+                    $changelink .= ' (';
+                    $changelink .= html_writer::link($changeurl, get_string('changes', 'ouwiki'));
+                    $changelink .= ')';
+                    $changelink .= html_writer::end_tag('small');
+                } else {
+                    $accesshidetext = get_string('viewwikistartpage', 'ouwiki', $pagestr);
+                    $changelink = html_writer::start_tag('small');
+                    $changelink .= ' (' . get_string('newpage', 'ouwiki') . ')';
+                    $changelink .= html_writer::end_tag('small');
+                }
+                $current = '';
+                if ($change->id == $change->currentversionid) {
+                    $viewurl = new moodle_url("/mod/ouwiki/view.php?$pageparams");
+                } else {
+                    $viewurl = new moodle_url("/mod/ouwiki/viewold.php?" .
+                        "$pageparams&version=$change->id");
+                }
+                $actions = html_writer::tag('span', $accesshidetext, array('class' => 'accesshide'));
+                $actions .= html_writer::link($viewurl, get_string('view'));
+                $actions .= $changelink;
+                $row[] = $actions;
+            }
+
+            // add to the table
+            $table->add_data($row);
+        }
+
+        $table->finish_output();
+        if (!$table->is_downloading() && $cangrade && $ouwiki->grade != 0) {
+            $this->ouwiki_render_user_grade($course, $cm, $ouwiki, $user, $pagename, $groupid);
+        }
+    }
+
+    /**
+     * Render single users grading form
+     *
+     * @param object $course
+     * @param object $cm
+     * @param object $ouwiki
+     * @param object $user
+     */
+    public function ouwiki_render_user_grade($course, $cm, $ouwiki, $user, $pagename, $groupid) {
+        global $CFG;
+
+        require_once($CFG->libdir.'/gradelib.php');
+        require_once($CFG->libdir . '/formslib.php');
+        $grading_info = grade_get_grades($course->id, 'mod', 'ouwiki', $ouwiki->id, $user->id);
+
+        if ($grading_info) {
+            if (!isset($grading_info->items[0]->grades[$user->id]->grade)) {
+                $user->grade = -1;
+            } else {
+                $user->grade = abs($grading_info->items[0]->grades[$user->id]->grade);
+            }
+            $grademenu = make_grades_menu($ouwiki->grade);
+            $grademenu[-1] = get_string('nograde');
+
+            $formparams = array();
+            $formparams['id'] = $cm->id;
+            $formparams['user'] = $user->id;
+            $formparams['page'] = $pagename;
+            $formparams['group'] = $groupid;
+            $formaction = new moodle_url('/mod/ouwiki/savegrades.php', $formparams);
+            $mform = new MoodleQuickForm('savegrade', 'post', $formaction,
+                '', array('class' => 'savegrade'));
+
+            $mform->addElement('header', 'usergrade', get_string('usergrade', 'ouwiki'));
+
+            $mform->addElement('select', 'grade', get_string('grade'),  $grademenu);
+            $mform->setDefault('grade', $user->grade);
+
+            $mform->addElement('submit', 'savechanges', get_string('savechanges'));
+
+            $mform->display();
+        }
+    }
+
+    /**
+     * Get html for the introduction.
+     *
+     * @param string $ouwikiintro
+     * @param int $contextid
+     * @return string
+     */
+    public function ouwiki_get_intro($ouwikiintro, $contextid) {
+        $intro = file_rewrite_pluginfile_urls($ouwikiintro, 'pluginfile.php', $contextid,
+                'mod_ouwiki', 'intro', null);
+        $intro = format_text($intro);
+        $intro = html_writer::tag('div', $intro, array('class' => 'ouw_intro'));
+        return $intro;
+    }
+
+    /**
+     * Get html for the edit link.
+     *
+     * @param string $str
+     * @param string $pagename
+     * @param object $subwiki
+     * @param object $cm
+     * @param string $xhtmlid
+     * @return string
+     */
+    public function ouwiki_get_edit_link($str, $pagename, $subwiki, $cm, $xhtmlid) {
+        global $CFG;
+        return html_writer::tag('a', get_string($str, 'ouwiki'), array(
+                'href' => $CFG->wwwroot . '/mod/ouwiki/edit.php?' .
+                ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL) .
+                ($xhtmlid ? '&section=' . $xhtmlid : ''),
+                'class' => 'ouw_' . $str));
+    }
+
+    /**
+     * Get html for the annotate link.
+     *
+     * @param string $str
+     * @param string $pagename
+     * @param object $subwiki
+     * @param object $cm
+     * @param string $xhtmlid
+     * @return string
+     */
+    public function ouwiki_get_annotate_link($pagename, $subwiki, $cm) {
+        global $CFG;
+        return ' ' .html_writer::tag('a', get_string('annotate', 'ouwiki'), array(
+                'href' => $CFG->wwwroot.'/mod/ouwiki/annotate.php?' .
+                ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL),
+                'class' => 'ouw_annotate'));
+    }
+
+    /**
+     * Get html for the add new section and page forms, and the lock page button.
+     *
+     * @param object $subwiki
+     * @param object $cm
+     * @param object $pageversion
+     * @param object $context
+     * @param int $id
+     * @param string $pagename
+     * @return string
+     */
+    public function ouwiki_get_addnew($subwiki, $cm, $pageversion, $context, $id, $pagename) {
+        $output = '';
+        if ($subwiki->canedit && $pageversion->locked != '1') {
+            $output .= ouwiki_display_create_page_form($subwiki, $cm, $pageversion);
+        }
+        if (has_capability('mod/ouwiki:lock', $context)) {
+            $output .= ouwiki_display_lock_page_form($pageversion, $id, $pagename);
+        }
+        return $output;
+    }
+
+    /**
+     * Returns empty string.
+     *
+     * @param object $subwiki
+     * @param object $cm
+     * @param object $context
+     * @param object $pageversion
+     * @param bool $addlock If true allows inclusion of the lock page button.
+     * @return string
+     */
+    public function get_bottom_buttons($subwiki, $cm, $context, $pageversion, $addlock) {
+        return '';
+    }
+
+    /**
+     * Returns empty string.
+     *
+     * @param array $files
+     * @param int $modcontextid
+     * @param int $pageversionversionid
+     * @param bool $fcheck If true then the files array will be checked.
+     * @return string
+     */
+    public function get_attachments($files, $modcontextid, $pageversionversionid, $fcheck = false) {
+        return '';
+    }
+
+    /**
+     * Returns html for the atom and rss feeds.
+     *
+     * @param string $atomurl
+     * @param string $rssurl
+     * @return string
+     */
+    public function ouwiki_get_feeds($atomurl, $rssurl) {
+        $a = new stdClass();
+        $a->atom = $atomurl;
+        $a->rss = $rssurl;
+        $url = str_replace('&amp;', '&', $atomurl);
+        $rssicon = html_writer::img($this->output->pix_url('rss', 'ouwiki'), '');
+        $rsslink = html_writer::link($url, $rssicon, array('title' => get_string('feedalt', 'ouwiki')));
+        $content = html_writer::span(get_string('feedsubscribe', 'ouwiki', $a));
+        return html_writer::tag('p', $rsslink . $content, array('class' => 'ouw_subscribe'));
+    }
+
+    /**
+     * No return, functionality to be overwritten.
+     *
+     * @param string $type page or subwiki only
+     * @param int $id
+     * @param int $courseid
+     * @param int $tree optional (for subwiki type only)
+     */
+    public function set_export_button($type, $id, $courseid, $tree = 0) {
+        return;
+    }
+
+    /**
+     * Return a button-like link which takes the user back to the main page.
+     * @param $cm, course-module object.
+     */
+    public function get_link_back_to_wiki($cm) {
+        global $CFG;
+        $label = $cm->name;
+        $url = $CFG->wwwroot . '/mod/ouwiki/view.php?id=' . $cm->id;
+        return html_writer::tag('div', link_arrow_left($label, $url), array('id' => 'ouwiki-arrowback'));
+    }
+
+}
diff --git a/mod/ouwiki/revert.php b/mod/ouwiki/revert.php
new file mode 100644
index 0000000..a72f3fd
--- /dev/null
+++ b/mod/ouwiki/revert.php
@@ -0,0 +1,107 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Confirms reverting to previous version
+ * when confirmed, reverts to previous version then redirects back to that page.
+ * @copyright &copy; 2008 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id = required_param('id', PARAM_INT);
+$versionid = required_param('version', PARAM_INT);
+$confirmed = optional_param('confirm', null, PARAM_TEXT);
+$cancelled = optional_param('cancel', null, PARAM_TEXT);
+
+$url = new moodle_url('/mod/ouwiki/view.php', array('id' => $id, 'page' => $pagename));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Get the page version to be reverted back to (must not be deleted page version)
+$pageversion = ouwiki_get_page_version($subwiki, $pagename, $versionid);
+if (!$pageversion || !empty($pageversion->deletedat)) {
+    print_error('reverterrorversion', 'ouwiki');
+}
+
+// Check for cancel
+if (isset($cancelled)) {
+    redirect('history.php?'.ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL));
+    exit;
+}
+
+// Check permission - Allow anyone with edit capability to revert to a previous version
+$canrevert = has_capability('mod/ouwiki:edit', $context);
+if (!$canrevert) {
+    print_error('reverterrorcapability', 'ouwiki');
+}
+
+// Check if reverting to previous version has been confirmed
+if ($confirmed) {
+
+    // Lock something - but maybe this should be the current version
+    list($lockok, $lock) = ouwiki_obtain_lock($ouwiki, $pageversion->pageid);
+
+    // Revert to previous version
+    ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename, $pageversion->xhtml, -1, -1, -1, null, null, $pageversion->versionid);
+
+    // Unlock whatever we locked
+    ouwiki_release_lock($pageversion->pageid);
+
+    // Redirect to view what is now the current version
+    redirect('view.php?'.ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_URL));
+    exit;
+
+} else {
+    // Display confirm form
+    $nav = get_string('revertversion', 'ouwiki');
+    echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context, array(array('name' => $nav, 'link' => null)), true, true);
+
+    $date = ouwiki_nice_date($pageversion->timecreated);
+    print get_string('revertversionconfirm', 'ouwiki', $date);
+    print '<form action="revert.php" method="post">';
+    print ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_FORM);
+    print
+        '<input type="hidden" name="version" value="'.$versionid.'" />'.
+        '<input type="submit" name="confirm" value="'.get_string('revertversion', 'ouwiki').'"/> '.
+        '<input type="submit" name="cancel" value="'.get_string('cancel').'"/>';
+    print '</form>';
+
+    // Footer
+    ouwiki_print_footer($course, $cm, $subwiki, $pagename);
+}
diff --git a/mod/ouwiki/savegrades.php b/mod/ouwiki/savegrades.php
new file mode 100644
index 0000000..11d7dbd
--- /dev/null
+++ b/mod/ouwiki/savegrades.php
@@ -0,0 +1,70 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Page for saving grades for all or one user participation
+ *
+ * @package mod
+ * @subpackage ouwiki
+ * @copyright 2011 The Open University
+ * @author Stacey Walker <stacey@catalyst-eu.net>
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+$id         = required_param('id', PARAM_INT); // Course Module ID
+$groupid    = optional_param('group', 0, PARAM_INT);
+$userid     = optional_param('user', 0, PARAM_INT);
+$page       = optional_param('page', '', PARAM_TEXT);
+
+$params = array();
+$params['id'] = $id;
+$params['group'] = $groupid;
+$params['page'] = $page;
+$url = new moodle_url('/mod/ouwiki/savegrades.php');
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+require_course_login($course, true, $cm);
+
+$mode = '';
+if (!empty($_POST['menu'])) {
+    $mode = 'bulk';
+    $gradeinfo = $_POST['menu'];
+} else if ($userid && !empty($_POST['grade'])) {
+    $gradeinfo[$userid] = $_POST['grade'];
+}
+// update grades
+if (!empty($gradeinfo)) {
+    ouwiki_update_user_grades($gradeinfo, $cm, $ouwiki, $course);
+}
+
+// redirect
+redirect('participation.php?id=' . $id . '&pagename=' . $page . '&group=' . $groupid);
diff --git a/mod/ouwiki/search.php b/mod/ouwiki/search.php
new file mode 100644
index 0000000..9c34c7f
--- /dev/null
+++ b/mod/ouwiki/search.php
@@ -0,0 +1,62 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * View page. Displays wiki pages.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot.'/local/ousearch/searchlib.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$querytext = required_param('query', PARAM_RAW);
+
+$url = new moodle_url('/mod/ouwiki/search.php', array('id'=>$id, 'user'=>$userid, 'query'=>$querytext));
+$PAGE->set_url($url);
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, get_string('searchresults'), $context, null, null, null, '', '', $querytext);
+echo html_writer::start_div();
+$query = new local_ousearch_search($querytext);
+$query->set_coursemodule($cm);
+if ($subwiki->groupid) {
+    $query->set_group_id($subwiki->groupid);
+}
+if ($subwiki->userid) {
+    $query->set_user_id($subwiki->userid);
+}
+
+$foundsomething = $query->display_results('search.php?'.ouwiki_display_wiki_parameters('', $subwiki, $cm));
+
+echo $foundsomething;
+
+// Add link to search the rest of this website if service available.
+if (!empty($CFG->block_resources_search_baseurl)) {
+    $params = array('course' => $course->id, 'query' => $querytext);
+    $restofwebsiteurl = new moodle_url('/blocks/resources_search/search.php', $params);
+    $strrestofwebsite = get_string('restofwebsite', 'local_ousearch');
+    $altlink = html_writer::start_tag('div', array('class' => 'advanced-search-link'));
+    $altlink .= html_writer::link($restofwebsiteurl, $strrestofwebsite);
+    $altlink .= html_writer::end_tag('div');
+    print $altlink;
+}
+
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki, null, 'search.php?query='.urlencode($querytext), $foundsomething ? null : 'searchfailure', $querytext);
diff --git a/mod/ouwiki/styles.css b/mod/ouwiki/styles.css
new file mode 100644
index 0000000..c445889
--- /dev/null
+++ b/mod/ouwiki/styles.css
@@ -0,0 +1,889 @@
+#page-mod-ouwiki-edit .ouw_preview {
+    border:1px solid #ddd;
+    padding:10px;
+    margin:1em;
+}
+#page-mod-ouwiki-view .ouw_recentchanges {
+    font-size:0.85em;
+    color:#636363;
+    margin-top:0.5em;
+}
+#page-mod-ouwiki-view .ouw_recentchanges h2 {
+    margin:0 1em 0 0;
+    display:inline;
+    font-size:1.0em;
+    font-weight:normal;
+}
+#page-mod-ouwiki-view .ouw_recentchanges ul,
+#page-mod-ouwiki-view .ouw_recentchanges li {
+    display:inline;
+    margin:0;
+    padding:0;
+}
+#page-mod-ouwiki-view .ouw_recentchanges li {
+    margin-right:0.5em;
+}
+
+#page-mod-ouwiki-edit #ouw_countdown {
+    float:right;
+    margin-left:2em;
+    border:1px solid #ddd;
+    padding:4px;
+}
+.dir-rtl#mod-ouwiki-edit #ouw_countdown {
+    float: left;
+}
+#page-mod-ouwiki-edit form#ouw_edit {
+    margin-top:1em;
+}
+#page-mod-ouwiki-edit #ouw_countdownurgent {
+    font-weight:bold;
+    color:red;
+}
+
+#page-mod-ouwiki-history table,
+#page-mod-ouwiki-wikihistory table,
+#page-mod-ouwiki-contributions table {
+    width:100%;
+}
+
+#page-mod-ouwiki-history .ouw_history th,
+#page-mod-ouwiki-wikihistory th,
+#page-mod-ouwiki-contributions th {
+    text-align:left;
+    padding: 5px 12px 5px 4px;
+}
+.dir-rtl#page-mod-ouwiki-history .ouw_history th,
+.dir-rtl#page-mod-ouwiki-wikihistory th,
+.dir-rtl#page-mod-ouwiki-contributions th {
+    text-align: right;
+}
+
+#page-mod-ouwiki-history .ouw_history td,
+#page-mod-ouwiki-wikihistory td,
+#page-mod-ouwiki-contributions td {
+    padding: 3px 12px 3px 4px;
+}
+#page-mod-ouwiki-history .ouw_history td.check,
+#page-mod-ouwiki-history .ouw_history td.comparebutton {
+    padding-right:4px;
+}
+#page-mod-ouwiki-history .ouw_history td.comparebutton {
+    padding-top:6px;
+    border-bottom:none;
+}
+#page-mod-ouwiki-history .ouw_history tr.current,
+#page-mod-ouwiki-wikihistory tr.current {
+    background:#dcedff;
+}
+#page-mod-ouwiki-history .ouw_history td.comparebutton {
+    text-align:right;
+    padding-bottom:6px;
+}
+.dir-rtl#mod-ouwiki-history .ouw_history td.comparebutton {
+    text-align:left;
+}
+#page-mod-ouwiki-history .ouw_history table,
+#page-mod-ouwiki-wikihistory table{
+    margin-top:1em;
+}
+#page-mod-ouwiki-contributions .ouw_contributionsgroups {
+    background:#f0f0f0;
+    padding:8px;
+}
+
+
+#ouwiki_belowtabs {
+    margin-left:auto;
+    margin-right:auto;
+}
+
+#ouwiki_belowtabs_annotate {
+    display: none;
+}
+
+body.jsenabled #ouwiki_belowtabs_annotate {
+    display: block;
+}
+
+#ouwiki_belowtabs_annotate_nojs {
+    display: block;
+}
+
+body.jsenabled #ouwiki_belowtabs_annotate_nojs {
+    display: none;
+}
+
+#page-mod-ouwiki-viewold .ouw_versionbox,
+#page-mod-ouwiki-diff .ouw_versionbox {
+    border-top:1px solid #888;
+    background:#dcedff;
+    padding:8px 8px 10px 8px;
+}
+#page-mod-ouwiki-diff .ouw_versionbox .ouw_date {
+    font-weight:bold;
+}
+#page-mod-ouwiki-viewold .ouw_oldversion h1 {
+    font-size:1em;
+    margin:0;
+}
+#page-mod-ouwiki-viewold .ouw_oldversion .ouw_person {
+    font-weight:normal;
+}
+
+#page-mod-ouwiki-viewold .ouw_prev {
+    float:left;
+}
+.dir-rtl#page-mod-ouwiki-viewold .ouw_prev {
+    float: right;
+}
+#page-mod-ouwiki-viewold .ouw_next {
+    float:right;
+}
+.dir-rtl#page-mod-ouwiki-viewold .ouw_next {
+    float: left;
+}
+
+#ouwiki_indexlinks {
+    margin:0 0 8px;
+    padding:0;
+    text-align:right;
+}
+.dir-rtl #ouwiki_indexlinks {
+    text-align: left;
+}
+
+#ouwiki_indexlinks ul {
+    margin:0;
+    padding:0;
+    display:inline;
+}
+#ouwiki_indexlinks form,
+#ouwiki_indexlinks form div {
+    display:inline;
+}
+#ouwiki_indexlinks form input {
+    font-size:0.85em;
+}
+#ouwiki_indexlinks #ouw_searchbox {
+    width:10em;
+}
+
+#ouwiki_indexlinks li {
+    margin:0 0.5em 0 0;
+    padding:0;
+    list-style-type:none;
+    display:inline;
+}
+#ouwiki_noindexlink {
+    height:1em;
+}
+#ouwiki_indexlinks a {
+    border:1px solid #aaa;
+    padding:2px;
+    font-size:84%;
+}
+#ouwiki_indexlinks span {
+    border:1px solid black;
+    padding:2px;
+    font-size:84%;
+}
+
+#page-mod-ouwiki-wikiindex ul.ouw_index,
+#page-mod-ouwiki-wikiindex ul.ouw_index li,
+#page-mod-ouwiki-wikiindex ul.ouw_indextree,
+#page-mod-ouwiki-wikiindex ul.ouw_indextree li,
+#page-mod-ouwiki-import ul.ouw_indextree,
+#page-mod-ouwiki-import ul.ouw_indextree li {
+    list-style-type:none;
+    margin:0;
+    padding:0;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_index,
+#page-mod-ouwiki-wikiindex ul.ouw_indextree {
+    margin-bottom:2em;
+}
+#page-mod-ouwiki-import .ouw_title,
+#page-mod-ouwiki-wikiindex .ouw_title {
+    display:block;
+    font-weight:bold;
+    background:#dcedff;
+    padding:4px 8px 8px;
+    border-top:1px solid #888;
+    margin-top:-1px;
+    color: black;
+}
+#page-mod-ouwiki-wikiindex a.ouw_title_link,
+#page-mod-ouwiki-import a.ouw_title_link {
+    color:black;
+}
+#page-mod-ouwiki-import .ouw_indexinfo,
+#page-mod-ouwiki-wikiindex .ouw_indexinfo {
+    border:1px dotted #888;
+    border-top:none;
+    padding:4px 8px 6px;
+    font-size:0.8em;
+    color:#888;
+}
+#page-mod-ouwiki-wikiindex .ouw_index .ouw_index_startpage .ouw_indexinfo {
+    border-bottom:1px dotted #888;
+}
+.ie#page-mod-ouwiki-wikiindex .ouw_index_startpage .ouw_title {
+    border-top:2px solid #888;
+}
+
+
+
+#page-mod-ouwiki-wikiindex .ouw_missingfrom {
+    font-size:0.85em;
+}
+#page-mod-ouwiki-wikiindex #ouwiki_belowtabs h2 {
+    font-size:1.0em;
+    margin-bottom:0.5em;
+    margin-top:2em;
+}
+#page-mod-ouwiki-wikiindex h2.ouw_orphans {
+    margin-bottom:0.75em;
+}
+
+#page-mod-ouwiki-import ul.ouw_indextree ul,
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul {
+    margin-left:3em;
+    padding-left:0;
+    margin-top:0;
+    margin-bottom:0;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree li ul {
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul {
+    margin-left:2.75em;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul ul {
+    margin-left:2.5em;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul ul ul {
+    margin-left:2.25em;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul ul ul ul {
+    margin-left:2em;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul ul ul ul ul {
+    margin-left:1.75em;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul ul ul ul ul ul {
+    margin-left:1.5em;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul ul ul ul ul ul ul {
+    margin-left:1.25em;
+}
+#page-mod-ouwiki-wikiindex ul.ouw_indextree ul ul ul ul ul ul ul ul ul {
+    margin-left:1em;
+}
+
+#page-mod-ouwiki-diff .ouw_left,
+#page-mod-ouwiki-diff .ouw_right {
+    float:left;
+    width:50%;
+}
+.dir-rtl#page-mod-ouwiki-diff .ouw_left,
+.dir-rtl#page-mod-ouwiki-diff .ouw_right {
+    float:right;
+}
+#page-mod-ouwiki-diff .ouw_diff {
+    background:#f0f0f0;
+    color:#636363;
+    border-left:1px dotted #888;
+    border-right:1px dotted #888;
+    border-bottom:1px dotted #888;
+    padding:8px;
+}
+#page-mod-ouwiki-diff .ouw_left .ouw_diff,
+#page-mod-ouwiki-diff .ouw_left .ouw_versionbox {
+    margin-right:1em;
+}
+#page-mod-ouwiki-diff .ouw_right .ouw_diff,
+#page-mod-ouwiki-diff .ouw_right .ouw_versionbox {
+    margin-left:1em;
+}
+#page-mod-ouwiki-diff .ouw_deleted {
+    background:white;
+    color:red;
+    text-decoration:line-through;
+}
+#page-mod-ouwiki-diff .ouw_added {
+    background:white;
+    color:green;
+}
+
+#page-mod-ouwiki-diff .ouw_advice {
+    margin-bottom:1em;
+}
+
+.ouw_subwiki {
+    font-size:0.85em;
+}
+.ouw_subwiki form,
+.ouw_subwiki div {
+    display:inline;
+}
+#page-mod-ouwiki-view .ouw_intro {
+    margin-top:1em;
+}
+
+#page-mod-ouwiki-view .ouw_byheading {
+    display:inline;
+    font-weight:normal;
+    font-style:normal;
+    font-size:0.85em;
+    margin-left:1em;
+}
+
+#page-mod-ouwiki-view .ouw_editsection,
+#page-mod-ouwiki-view .ouw_annotate,
+#page-mod-ouwiki-view .ouw_editpage,
+#page-mod-ouwiki-view #expandcollapseannotations,
+#page-mod-ouwiki-view #showhideannotationicons {
+    margin-right:1em;
+}
+
+/* Annotation icon show/hide link logic */
+#page-mod-ouwiki-view .ouwiki-hide-annotations #hideannotationicons {
+    display: none;
+}
+#page-mod-ouwiki-view #showannotationicons {
+    display: none;
+}
+#page-mod-ouwiki-view .ouwiki-hide-annotations #showannotationicons {
+    display: inline;
+}
+#page-mod-ouwiki-view .ouwiki-hide-annotations .ouwiki-annotation-tag {
+    display: none;
+}
+#page-mod-ouwiki-view.jsenabled .ouwiki-hide-annotations #expandcollapseannotations {
+    display: none;
+}
+
+.ouwiki_content h1,
+.ouwiki_content h2 {
+    font-size:1.5em;
+    display:inline;
+}
+.ouwiki_content h3,
+.ouwiki_content h4,
+.ouwiki_content h5 {
+    font-size:1em;
+    display:inline;
+}
+.ouwiki_content h6 {
+    font-size:0.85em;
+    display:inline;
+}
+
+.ouwiki_content .ouw_heading1,
+.ouwiki_content .ouw_heading2 {
+    margin:0.6667em 0 0.3333em 0;
+}
+.ouwiki_content .ouw_heading3,
+.ouwiki_content .ouw_heading4,
+.ouwiki_content .ouw_heading5 {
+    margin:1em 0 0.5em 0;
+}
+.ouwiki_content .ouw_heading6 {
+    margin:1.25em 0 0.625em 0;
+}
+
+.ouwiki_content h1.ouw_fixedheading,
+.ouwiki_content h2.ouw_fixedheading,
+.ouwiki_content h3.ouw_fixedheading,
+.ouwiki_content h4.ouw_fixedheading,
+.ouwiki_content h5.ouw_fixedheading,
+.ouwiki_content h6.ouw_fixedheading {
+    font-size:1em;
+    margin:1em 0 0.5em 0;
+}
+
+.ouwiki_content h1.ouw_fixedheading .ouw_headingtext,
+.ouwiki_content h2.ouw_fixedheading .ouw_headingtext {
+    font-size:1.5em;
+}
+.ouwiki_content h1 {
+    padding-bottom:2px;
+    border-bottom:1px dotted #888;
+}
+.ouwiki_content h6.ouw_fixedheading .ouw_headingtext {
+    font-size:0.85em;
+}
+.ouwiki_content h3 {
+    border-bottom:1px dotted #888;
+    padding-bottom:2px;
+}
+.ouwiki_content h5,
+.ouwiki_content h6 {
+    font-weight:normal;
+    font-style:italic;
+}
+
+#ouw_ac_formcontainer {
+  margin-top:1.5em;
+  clear:right;
+}
+.dir-rtl#ouw_ac_formcontainer {
+    clear:left;
+}
+.ouw_deletedrow {
+    background-color:#cccccc;
+}
+.ouw_deleted {
+    color:#cc0000;
+}
+
+.ouw_recenter {
+    font-weight:bold;
+    color:black;
+}
+.ouw_recent {
+    color:black;
+}
+.ouw_recentnot {
+    color:#636363;
+}
+
+#page-mod-ouwiki-wikiindex .ouw_wikirecentchanges ul,
+#page-mod-ouwiki-wikiindex .ouw_wikirecentchanges li {
+    list-style-type:none;
+    margin:0;
+    padding:0;
+}
+
+
+#page-mod-ouwiki-wikihistory .ouw_paging {
+    margin-top:1em;
+}
+#page-mod-ouwiki-wikihistory .ouw_paging_prev {
+    float:left;
+    width:50%;
+    text-align:right;
+}
+.dir-rtl#mod-ouwiki-wikihistory .ouw_paging_prev {
+    float: right;
+    text-align: left;
+}
+#page-mod-ouwiki-wikihistory .ouw_paging_prev a {
+    margin-right:2em;
+}
+#page-mod-ouwiki-wikihistory .ouw_paging_next {
+    float:left;
+    width:50%;
+}
+.dir-rtl#page-mod-ouwiki-wikihistory .ouw_paging_next {
+    float:right;
+}
+#page-mod-ouwiki-wikihistory .ouw_paging_next a {
+    margin-left:2em;
+}
+
+/* Hack because font-family:inherit doesn't work in IE */
+#page-mod-ouwiki-view.ie textarea {
+    font-family: Verdana,sans-serif;
+}
+
+#page-mod-ouwiki-view .ouw_linkedfrom {
+    margin-top:1.5em;
+    font-size:0.85em;
+}
+#page-mod-ouwiki-view .ouw_linkedfrom h3 {
+    margin:0;
+    font-size:1em;
+    font-weight:normal;
+}
+#page-mod-ouwiki-view .ouw_linkedfrom ul,
+#page-mod-ouwiki-view .ouw_linkedfrom li {
+    margin:0;
+    padding:0;
+    list-style-type:none;
+    display:inline;
+}
+
+#page-mod-ouwiki-wikiindex .ouw_missingpages ul,
+#page-mod-ouwiki-wikiindex .ouw_missingpages li {
+    margin:0;
+    padding:0;
+    list-style-type:none;
+    display:inline;
+}
+
+
+.ouw_subwiki {
+    float:left;
+}
+.dir-rtl .ouw_subwiki {
+    float: right;
+}
+.ouwiki_notabs.ouwiki_gotselector {
+    margin-top:1em;
+}
+
+.ouwiki_lockinfobuttons form {
+    display:inline;
+}
+
+a.ouwiki_noshow:link,a.ouwiki_noshow:visited {
+    color:inherit;
+}
+
+.ouw_index .ouw_index_startpage {
+   margin-bottom:1em;
+}
+
+.ouw_timelocked {
+    margin-top:3em;
+    font-style:italic;
+}
+
+#page-mod-ouwiki-wikiindex .ouw_savetemplate,
+#page-mod-ouwiki-wikihistory .ouw_contributionslink {
+    margin-top:2em;
+}
+
+#page-mod-ouwiki-contributions h2, #mod-ouwiki-contributions h3 {
+    font-size:1em;
+    margin:1em 0 0.5em;
+}
+#page-mod-ouwiki-contributions small {
+    font-size:1em;
+    font-weight:normal;
+}
+#page-mod-ouwiki-contributions table {
+    margin-bottom:2em;
+}
+
+#page-mod-ouwiki-entirewiki h1 a {
+    color:black;
+}
+#page-mod-ouwiki-entirewiki .ouw_entry {
+    margin-bottom:2em;
+}
+
+.ouw_subscribe {
+    margin-top:2em;
+    font-size:0.85em;
+}
+.ouw_subscribe img {
+    vertical-align:bottom;
+}
+.ouw_subscribe span {
+    position:relative;
+    top:-1px;
+}
+
+.ouw_belowmainhead {
+    border:1px dotted #888;
+    border-top:none;
+    padding:0px 8px 4px;
+}
+.ouw_topspacer {
+     padding-top:4px;
+}
+.ouw_topheading {
+    background:#dcedff;
+    padding:4px 8px 8px;
+    border-top:1px solid #888;
+    margin-top:1.5em;
+}
+
+.ouw_topheading h2 {
+    border:none;
+}
+
+
+.ouw_indextree,
+.ouw_indextree li {
+    list-style-type:none;
+}
+
+#page-mod-ouwiki-entirewiki .ouw_entry h1.ouw_entry_heading {
+    background:#dcedff;
+    padding:4px 8px 8px;
+    border-top:1px solid #888;
+    border-bottom:none;
+    display:block;
+    margin:0.5em 0 0;
+}
+#page-mod-ouwiki-entirewiki .ouw_entry .ouwiki_content {
+    border:1px dotted #888;
+    border-top:none;
+    padding:4px 8px;
+    margin-top:0;
+}
+
+#page-mod-ouwiki_addnew {
+    display:inline;
+}
+
+
+#page-mod-ouwiki_addnew ul,
+#page-mod-ouwiki_addnew li {
+    margin:0;
+    padding:0;
+    display:inline;
+    list-style-type:none;
+}
+
+
+.ouwiki_addnew_class {
+    display:inline;
+}
+
+.ouwiki-annotation,
+.ouwiki-orphaned-annotation {
+    display:block;
+    width:50%;
+    min-height:42px;
+    margin:0.3em;
+    padding:0.3em;
+    background-color:#F7F0D9;
+}
+
+.ouwiki-annotation h3,
+.ouwiki-orphaned-annotation h3 {
+    display:block;
+    font-weight:bold;
+    border:0;
+    margin:0 0 0.2em;
+}
+
+.ouwiki-annotation .userpicture,
+.ouwiki-orphaned-annotation .userpicture {
+    float:left;
+    margin: 0.2em 0.1em;
+}
+.dir-rtl .ouwiki-annotation .userpicture,
+.dir-rtl .ouwiki-orphaned-annotation .userpicture {
+    float: right;
+}
+
+.ouwiki-annotation .ouwiki-annotation-content,
+.ouwiki-orphaned-annotation .ouwiki-annotation-content {
+    display:block;
+    margin-left:40px;
+    padding-left:0.3em;
+    font-weight:normal;
+}
+
+.ouwiki-annotation .ouwiki-annotation-content .ouwiki-annotation-content-title,
+.ouwiki-orphaned-annotation .ouwiki-annotation-content .ouwiki-annotation-content-title {
+    display:block;
+    padding-bottom:0.3em;
+    font-weight:bold;
+}
+
+.ouwiki-annotation-tag {
+    padding:1px 1px 0 1px;
+    margin:0;
+    cursor:default;
+}
+
+.ouwiki-annotation-marker {
+    padding:0;
+    margin:0;
+    cursor:default;
+}
+
+.ouwiki-annotation-marker img {padding:1px;}
+
+.ouwiki-annotation-tag img {padding:0;}
+
+.ouwiki-annotation-marker:hover{background-color:#99ccff;}
+
+#page-mod-ouwiki-view #expandcollapseannotations {display:none;}
+#page-mod-ouwiki-view.jsenabled #expandcollapseannotations {display:inline;}
+#page-mod-ouwiki-view #expandallannotations {display:inline;}
+#page-mod-ouwiki-view #collapseallannotations {display:none;}
+
+
+#ouwiki_addannotation label {
+    display:block;
+}
+
+#ouwiki_addannotation_buttons {
+}
+/** Override styles for annotation.php **/
+#page-mod-ouwiki-annotate #mform1 {
+    margin-top:2em;
+}
+
+#page-mod-ouwiki-annotate #mform1 .fitem .fitemtitle {
+    padding-right: 15px;
+    width: 160px;
+}
+
+#page-mod-ouwiki-annotate #mform1 .fitem .ftextarea {
+    margin-left: 140px;
+    width: 400px;
+}
+
+#page-mod-ouwiki-annotate #mform1 .fitem .fcheckbox {
+    margin-left: 140px;
+}
+
+#page-mod-ouwiki-annotate #mform1 .fitem .fgroup {
+    margin-left: 140px;
+}
+
+.ouwiki_lock_div {margin-top:2em;}
+
+/* Ugh, problems when resized, I can't get it to work */
+.ie7 #wikiselect {
+    font-size:11px;
+}
+
+#annotationdialog label {
+    display:block;
+    float:left;
+    width:30%;
+    clear:left;
+}
+.dir-rtl#annotationdialog label {
+    float: right;
+    clear: right;
+}
+
+#page-mod-ouwiki-edit #annotationdialog {display: none;}
+#page-mod-ouwiki-edit div#annotationdialog_c{width:90%;}
+#page-mod-ouwiki-edit div#annotationdialog_c .mform,
+#annotationdialog_c select{width:100%;}
+
+.clear {
+    clear:both;
+}
+
+.yui-pe .yui-pe-content {
+    display:none;
+}
+
+#yui-gen0-button {color:#000000;}
+
+.ouwiki-notifyproblem {
+    color: #ffffff;
+    background-color: #ff0000;
+    padding: 0 2em;
+}
+
+.ouwiki-sizewarning img {
+    margin-right: 4px;
+    position:relative;
+    top: 3px;
+}
+
+.ouwiki-sizewarning {
+    margin-top: 10px;
+    margin-left: 20px;
+    text-indent: -20px;
+}
+
+.ouw_wordcount span {
+    margin-top: 0.5em;
+    font-size: 0.8em;
+    font-weight: normal;
+    color: #555;
+}
+
+#ouw_newsectionname,
+#ouw_newpagename {
+    margin-right:5px;
+}
+
+#page-mod-ouwiki-edit .fp-pathbar {
+    display: none;
+}
+
+/** Styles for participation.php **/
+#page-mod-ouwiki-participation fieldset.felement {margin-left: 16%;}
+#page-mod-ouwiki-participation form#options div {text-align:right;margin-left:auto;margin-right:20px;}
+#page-mod-ouwiki-participation .header .commands {display: inline;}
+#page-mod-ouwiki-participation .picture {width: 35px;}
+#page-mod-ouwiki-participation .fullname,
+#page-mod-ouwiki-participation .pagescreated,
+#page-mod-ouwiki-participation .pagesedited,
+#page-mod-ouwiki-participation .wordsadded,
+#page-mod-ouwiki-participation .wordsdeleted {text-align: left;}
+#page-mod-ouwiki-participation .participation .grade,
+#page-mod-ouwiki-participation .qgprefs #optiontable {text-align:right;margin-left:auto;}
+
+/** Styles for userparticipation.php **/
+#page-mod-ouwiki-user-participation fieldset.felement {margin-left: 16%;}
+#page-mod-ouwiki-user-participation form#options div {text-align:right;margin-left:auto;margin-right:20px;}
+#page-mod-ouwiki-user-participation .header .commands {display: inline;}
+#page-mod-ouwiki-user-participation .date,
+#page-mod-ouwiki-user-participation .time,
+#page-mod-ouwiki-user-participation .page,
+#page-mod-ouwiki-user-participation .words,
+#page-mod-ouwiki-user-participation .view {text-align: left;}
+#page-mod-ouwiki-user-participation .qgprefs #optiontable {text-align:right;margin-left:auto;}
+
+#page-mod-ouwiki-user-participation .savegradesbutton {text-align: center;}
+
+/** Style for missing template images message **/
+.imgremoved {
+    font-weight:bold;
+}
+
+/* Import process */
+#page-mod-ouwiki-import .ouwiki_import h3 {
+    font-weight: bold;
+}
+.ouwiki_import.ouwiki_import_step2 form {
+    background: 0;
+    padding: 0;
+}
+.ouwiki_import .ouwiki_import_act {
+    margin-bottom: .5em;
+}
+.ouwiki_import .ouwiki_import_act .ouwiki_import_link a {
+    margin-left: 50px;
+    text-decoration: none;
+}
+.ouwiki_import .ouwiki_import_act .fitem {
+    margin-left: 40px;
+}
+.ouwiki_import .ouwiki_import_act .ouwiki_import_link img {
+    margin-right: 5px;
+}
+.ouwiki_import .ouwiki_import_act .ouwiki_import_nocontent {
+    margin-left: 100px;
+    font-style: italic;
+}
+.ouw_indextree input.ouwiki_page_checkbox {
+    float: left;
+    margin-top: 8px;
+    margin-left: 3px;
+    margin-right: 5px;
+    position: relative;
+    display: inline;
+}
+.ie7 .ouw_indextree input.ouwiki_page_checkbox {
+    margin-top:25px;
+}
+.ouwiki_import.ouwiki_import_step3 div.fstatic ul {
+    list-style: none;
+    padding: 0;
+    margin: 0;
+}
+.ouwiki_import_warn {
+    padding: 1em;
+    color: red;
+}
+.ouwiki_import_info {
+    padding: 1em;
+}
+.ouwiki_import.ouwiki_import_step4 ul {
+    list-style: none;
+}
+
+.ouwikilmt {
+    font-size: 0.8em;
+    margin-left: 5px;
+}
+.ouw-comparebutton-wrapper {
+    text-align: right;
+}
diff --git a/mod/ouwiki/tests/behat/basic.feature b/mod/ouwiki/tests/behat/basic.feature
new file mode 100644
index 0000000..47a5b9a
--- /dev/null
+++ b/mod/ouwiki/tests/behat/basic.feature
@@ -0,0 +1,702 @@
+@ou @ou_vle @mod @mod_ouwiki @ouwiki_basic
+Feature: Test Post and Comment on OUwiki entry
+  In order to use ouwiki features
+  As a user
+  I need to be able to complete basic operations
+
+  Background:
+    Given the following "users" exist:
+        | username | firstname | lastname | email |
+        | teacher1 | Teacher | 1 | teacher1@asd.com |
+        | student1 | Student | 1 | student1@asd.com |
+        | student2 | Student | 2 | student2@asd.com |
+        | teacher2 | Teacher | 2 | teacher2@asd.com |
+    And the following "courses" exist:
+        | fullname | shortname | category |
+        | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+        | user | course | role |
+        | teacher1 | C1 | editingteacher |
+        | student1 | C1 | student |
+        | student2 | C1 | student |
+        | teacher2 | C1 | teacher |
+    And the following "groups" exist:
+        | name | course | idnumber |
+        | G1 | C1 | G1 |
+        | G2 | C1 | G2 |
+    And the following "group members" exist:
+        | user | group |
+        | student1 | G1 |
+        | student2 | G2 |
+        | teacher2 | G1 |
+
+  Scenario: No groups - basic access etc
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.WC |
+        | Description | wiki with no groups |
+        | Group mode | No groups |
+    And I follow "Course 1"
+    And I follow "W.WC"
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "C1 no groups wiki"
+    And I press "Save changes"
+    # Confirm start page set up
+    Then I should see "C1 no groups wiki" in the ".ouwiki_content" "css_element"
+    And "Teacher 1" "link" should exist
+    # unable to check for date
+    And I log out
+    # Check edit and preview page (though we can not test to see whether altered content in preview mode can be seen by otherusers)
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.WC"
+    Then I should see "C1 no groups wiki" in the ".ouwiki_content" "css_element"
+    And I log out
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.WC"
+    When I click on "Edit" "link"
+    Then I should see "C1 no groups wiki"
+    And I set the field "Content" to "C7 no groups wiki"
+    When I press "Preview"
+    Then I should see "C7 no groups wiki" in the ".ouwiki_content" "css_element"
+    And I press "Save changes"
+    And I log out
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.WC"
+    And I should see "C7 no groups wiki" in the ".ouwiki_content" "css_element"
+    And I log out
+
+  Scenario: Separate groups - basic access etc
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "OU wiki" to section "1"
+    And I set the following fields to these values:
+        | Name | W.SG |
+        | Description | Separate groups |
+        | Sub-wikis | One wiki per group |
+        | Group mode | Separate groups |
+    And I press "Save and display"
+    # test for student1 in group 1
+    And I log out
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.SG"
+    Then I should see "Viewing wiki for: G1" in the ".ouw_subwiki" "css_element"
+    And "Create page" "button" should exist
+    # Create start page start page for group 1
+    And I press "Create page"
+    And I set the field "Content" to "C2 separate groups wiki"
+    And I press "Save changes"
+    And I log out
+    # Create start page for group 2
+    Given I log in as "student2"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.SG"
+    Then I should see "Viewing wiki for: G2" in the ".ouw_subwiki" "css_element"
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "C6 separate groups wiki"
+    Given I press "Save changes"
+    # Check that it has been correctly created
+    Then I should see "Viewing wiki for: G2" in the ".ouw_subwiki" "css_element"
+    And I should see "C6 separate groups wiki" in the ".ouwiki_content" "css_element"
+    And "Student 2" "link" should exist
+    # unable to check for date
+    And I log out
+    # Check for correct content and creator for each group
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.SG"
+    And "div.singleselect" "css_element" should exist
+    And the "Separate groups" select box should contain "G1"
+    And the "Separate groups" select box should contain "G2"
+    Given I set the field "Separate groups" to "G1"
+    When I press "Go"
+    Then "div.singleselect" "css_element" should exist
+    And the "Separate groups" select box should contain "G2"
+    And I should see "C2 separate groups wiki" in the ".ouwiki_content" "css_element"
+    And "Student 1" "link" should exist
+    Given I set the field "Separate groups" to "G2"
+    When I press "Go"
+    Then "div.singleselect" "css_element" should exist
+    And I should see "C6 separate groups wiki" in the ".ouwiki_content" "css_element"
+    And "Student 2" "link" should exist
+    And I log out
+    # Check adding wiki pages - by adding a link to start page
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.SG"
+    When I click on "Edit" "link"
+    Then I should see "C2 separate groups wiki"
+    # Then I should see "C1 no groups wiki" in the "div.editor_atto_content" "css_element" - why is this not working ???
+    And I set the field "Content" to "C7 separate groups wiki [[frog]]"
+    And I press "Save changes"
+    When I click on "frog" "link"
+    Then "Create page" "button" should exist
+    # Create start page start page for group 1
+    And I press "Create page"
+    And I set the field "Content" to "C8 separate groups wiki"
+    When I press "Save changes"
+    Then I should see "C8 separate groups wiki"
+    And "Start page" "link" should exist
+    When I click on "Start page" "link"
+    Then I should see "C7 separate groups wiki"
+    And  "frog" "link" should exist
+    And I log out
+    # Check adding wiki pages - by 'Create a new page' name in text field
+    Given I log in as "student2"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.SG"
+    Then I should see "C6 separate groups wiki"
+    And I set the field "Create new page" to "frog"
+    Given I press "Create"
+    Then I set the field "Content" to "C9 separate groups wiki"
+    When I press "Save changes"
+    Then I should see "C9 separate groups wiki"
+    And "Start page" "link" should exist
+    When I click on "Start page" "link"
+    Then I should see "C6 separate groups wiki"
+    And  "frog" "link" should exist
+    When I click on "frog" "link"
+    Then I should see "C9 separate groups wiki"
+    And I set the field "Create new page" to "sect test"
+    Given I press "Create"
+    Then I set the field "Content" to "C10"
+    When I press "Save changes"
+    # Checking creating sections in an ouwiki page
+    Given I set the field "Add new section to this page" to "SECT1"
+    And I press "Add"
+    Then I should see "SECT1"
+    And I should see "Student 2"
+    # Can only be tested without amending the original text
+    And I press "Save changes"
+    Given I click on "Edit section" "link"
+    Then I should see "SECT1"
+    And I should see "Student 2"
+    And I log out
+
+  Scenario: Visible groups - basic access etc
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.VG |
+        | Description | visible groups |
+        | Sub-wikis | One wiki per group |
+        | Group mode | Visible groups |
+    And I log out
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.VG"
+    # Check selected dropdown option is G1
+    And "div.singleselect" "css_element" should exist
+    And ".groupselector select" "css_element" should exist
+    And the field "Visible groups" matches value "G1"
+    And the "Visible groups" select box should contain "G2"
+    And "Create page" "button" should exist
+    # Create start page
+    And I press "Create page"
+    And I set the field "Content" to "C3 visible groups wiki"
+    And I press "Save changes"
+    # Check to see that user student1 can not create the start page for any other group
+    And the "Visible groups" select box should contain "G2"
+    Given I set the field "Visible groups" to "G2"
+    When I press "Go"
+    Then "Create page" "button" should not exist
+    And "Content" "text" should not exist
+    And I log out
+    # Check for correct content and creator for each group
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.VG"
+    And "div.singleselect" "css_element" should exist
+    And the "Visible groups" select box should contain "G1"
+    And the "Visible groups" select box should contain "G2"
+    Given I set the field "Visible groups" to "G1"
+    When I press "Go"
+    Then "div.singleselect" "css_element" should exist
+    And I should see "C3 visible groups wiki" in the ".ouwiki_content" "css_element"
+    And "Student 1" "link" should exist
+    Given I set the field "Visible groups" to "G2"
+    When I press "Go"
+    Then "Create page" "button" should exist
+    And I log out
+
+  Scenario: Individual - basic access etc
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.I |
+        | Description | individual wikis |
+        | Sub-wikis |Separate wiki for every user |
+        | Group mode | No groups |
+    And I log out
+    # Checking to set up individual wiki for student 1
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.I"
+    Then "Viewing wiki for:" "text" should exist
+    And "Student 1" "link" should exist
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "C4 individual wiki"
+    And I press "Save changes"
+    And I log out
+    # Checking to set up individual wiki for student 2
+    Given I log in as "student2"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.I"
+    Then "Viewing wiki for:" "text" should exist
+    And "Student 2" "link" should exist
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "C5 individual wiki"
+    And I press "Save changes"
+    And I log out
+    # Check to see that a non-editing teacher can view individual wiki of students belonging to their group
+    Given I log in as "teacher2"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.I"
+    And "div.individualselector" "css_element" should exist
+    And the field "Viewing wiki for:" matches value "Teacher 2"
+    And the "Viewing wiki for:" select box should contain "Student 1"
+    Given I set the field "Viewing wiki for:" to "Student 1"
+    When I press "Go"
+    Then I should see "C4 individual wiki" in the ".ouwiki_content" "css_element"
+    And "Student 1" "link" should exist
+    # unable to check for date
+    And I log out
+    # Check that editing teacher can view and visit all individual wikis
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.I"
+    And "div.individualselector" "css_element" should exist
+    And the field "Viewing wiki for:" matches value "Teacher 1"
+    And the "Viewing wiki for:" select box should contain "Student 1"
+    And the "Viewing wiki for:" select box should contain "Student 2"
+    And the "Viewing wiki for:" select box should contain "Teacher 2"
+    Given I set the field "Viewing wiki for:" to "Student 1"
+    When I press "Go"
+    Then I should see "C4 individual wiki" in the ".ouwiki_content" "css_element"
+    And "Student 1" "link" should exist
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.I"
+    And "div.individualselector" "css_element" should exist
+    Given I set the field "Viewing wiki for:" to "Student 2"
+    When I press "Go"
+    Then I should see "C5 individual wiki" in the ".ouwiki_content" "css_element"
+    And "Student 2" "link" should exist
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.I"
+    And "div.individualselector" "css_element" should exist
+    Given I set the field "Viewing wiki for:" to "Teacher 2"
+    When I press "Go"
+    Then "Create page" "button" should exist
+    And I log out
+
+  Scenario: Wiki history No groups -
+    Given I log in as "teacher1"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.WX |
+        | Description | wiki with no groups |
+        | Group mode | No groups |
+    And I follow "Course 1"
+    And I follow "W.WX"
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "C23 no groups wiki"
+    And I press "Save changes"
+    # Confirm start page set up
+    Then I should see "C23 no groups wiki" in the ".ouwiki_content" "css_element"
+    And "Teacher 1" "link" should exist
+    # unable to check for date
+    And I add a ouwiki page with the following data:
+        | Create new page | Frogs |
+        | Content | C24 |
+    Then I should see "C24"
+    And I add a ouwiki page with the following data:
+        | Create new page | Zombies |
+        | Content | C25 |
+    Then I should see "C25"
+    And "Frogs" "link" should exist
+    When I click on "Frogs" "link"
+    Then I should see "C24"
+    And "Start page" "link" should exist
+    When I click on "Start page" "link"
+    Then I should see "C23 no groups wiki"
+    And I add a ouwiki page with the following data:
+        | Create new page | Geckos |
+        | Content | C26 |
+    Then I should see "C26"
+    # Check wiki index for correct order
+    When I click on "Wiki index" "link"
+    Then "Start page" "text" should appear before "Frogs" "text"
+    Then "Frogs" "text" should appear before "Geckos" "text"
+    Then "Geckos" "text" should appear before "Zombies" "text"
+    And "Teacher 1" "link" should exist
+    And "Student 1" "link" should not exist
+    And "Student 2" "link" should not exist
+    And "Teacher 2" "link" should not exist
+    # Check view online produces the correct order
+    When I click on "View online" "link"
+    Then "C23 no groups wiki" "text" should appear before "C24" "text"
+    Then "C24" "text" should appear before "C26" "text"
+    Then "C26" "text" should appear before "C25" "text"
+    # Check wiki index structure view for correct order
+    Given I click on "Wiki index" "link"
+    And I click on "Structure" "link"
+    Then "Start page" "text" should appear before "Frogs" "text"
+    Then "Frogs" "text" should appear before "Zombies" "text"
+    Then "Zombies" "text" should appear before "Geckos" "text"
+    # Check view online structure produces the correct order
+    When I click on "View online" "link"
+    Then "C23 no groups wiki" "text" should appear before "C24" "text"
+    Then "C24" "text" should appear before "C25" "text"
+    Then "C25" "text" should appear before "C26" "text"
+    # Check editing history - 3 rows being shown incstead of 5 as per regression test.
+    Given I click on "Start page" "link"
+    And I add a ouwiki page with the following data:
+        | Create new page | Gremlins |
+        | Content | C23 |
+    And I edit a ouwiki page with the following data:
+        | Content | C27 A C27 B C27 C |
+    And I edit a ouwiki page with the following data:
+        | Content | C27 A C27 B C28 B |
+    When I click on "History" "link"
+    And "Teacher 1" "link" should exist
+    And "Student 1" "link" should not exist
+    And "Student 2" "link" should not exist
+    And "Teacher 2" "link" should not exist
+    And I should see "View" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    And I should see "Delete" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    And I should not see "Revert" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    And I should see "changes" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    And I should see "View" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    And I should see "Delete" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    And I should see "Revert" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    And I should see "changes" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    And I should see "View" in the "//form[@name='ouw_history']//table//tbody//tr[3]//td[3]" "xpath_element"
+    And I should see "Delete" in the "//form[@name='ouw_history']//table//tbody//tr[3]//td[3]" "xpath_element"
+    And I should see "Revert" in the "//form[@name='ouw_history']//table//tbody//tr[3]//td[3]" "xpath_element"
+    And I should not see "changes" in the "//form[@name='ouw_history']//table//tbody//tr[3]//td[3]" "xpath_element"
+    Given I click on "View" "link" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    Then I should see "C27 A C27 B C28 B"
+    And I click on "History" "link"
+    Given I click on "View" "link" in the "//form[@name='ouw_history']//table//tbody//tr[3]//td[3]" "xpath_element"
+    Then I should see "C23"
+    # Page changes
+    And I click on "History" "link"
+    Given I click on "changes" "link" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    Then I should see "C27 C" in the "//span[@class='ouw_deleted']" "xpath_element"
+    And I should see "C28 B" in the "//span[@class='ouw_added']" "xpath_element"
+    And I log out
+    # Check against number of changes made - WIC07
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.WX"
+    And "Frogs" "link" should exist
+    When I click on "Frogs" "link"
+    When I click on "Zombies" "link"
+    Then I should see "C25"
+    And I edit a ouwiki page with the following data:
+      | Content | C29|
+    And I edit a ouwiki page with the following data:
+      | Content | C30|
+    And I edit a ouwiki page with the following data:
+      | Content | C31|
+    And I edit a ouwiki page with the following data:
+      | Content | C32|
+    And I edit a ouwiki page with the following data:
+      | Content | C33|
+    And I edit a ouwiki page with the following data:
+      | Content | C34|
+    And I edit a ouwiki page with the following data:
+      | Content | C35|
+    And I edit a ouwiki page with the following data:
+      | Content | C36|
+    And I edit a ouwiki page with the following data:
+      | Content | C37|
+    And I edit a ouwiki page with the following data:
+      | Content | C38|
+    And I edit a ouwiki page with the following data:
+      | Content | C39|
+    And I edit a ouwiki page with the following data:
+      | Content | C40|
+    And I edit a ouwiki page with the following data:
+      | Content | C41|
+    And I edit a ouwiki page with the following data:
+      | Content | C42|
+    And I edit a ouwiki page with the following data:
+      | Content | C43|
+    And I edit a ouwiki page with the following data:
+      | Content | C44|
+    And I edit a ouwiki page with the following data:
+      | Content | C45|
+    And I edit a ouwiki page with the following data:
+      | Content | C46|
+    And I edit a ouwiki page with the following data:
+      | Content | C47|
+    And I edit a ouwiki page with the following data:
+      | Content | C48|
+    And I edit a ouwiki page with the following data:
+      | Content | C49|
+    And I edit a ouwiki page with the following data:
+      | Content | C50|
+    And I edit a ouwiki page with the following data:
+      | Content | C51|
+    And I edit a ouwiki page with the following data:
+      | Content | C52|
+    And I edit a ouwiki page with the following data:
+      | Content | C53|
+    And I edit a ouwiki page with the following data:
+      | Content | C54|
+    And I edit a ouwiki page with the following data:
+      | Content | C56|
+    And I edit a ouwiki page with the following data:
+      | Content | C57|
+    And I edit a ouwiki page with the following data:
+      | Content | C58|
+    And I edit a ouwiki page with the following data:
+      | Content | C59|
+    And I edit a ouwiki page with the following data:
+      | Content | C60|
+    And I edit a ouwiki page with the following data:
+      | Content | C61|
+    And I edit a ouwiki page with the following data:
+      | Content | C62 |
+    And I edit a ouwiki page with the following data:
+      | Content | C63 |
+    And I edit a ouwiki page with the following data:
+      | Content | C64 |
+    And I edit a ouwiki page with the following data:
+      | Content | C65 |
+    And I edit a ouwiki page with the following data:
+      | Content | C66 |
+    And I edit a ouwiki page with the following data:
+      | Content | C67 |
+    And I edit a ouwiki page with the following data:
+      | Content | C68 |
+    And I edit a ouwiki page with the following data:
+      | Content | C69 |
+    And I edit a ouwiki page with the following data:
+      | Content | C70 |
+    Given I click on "Wiki changes" "link"
+    Then "Older changes" "link" should exist
+    Given I click on "Older changes" "link"
+    # Check for wiki change deatils - can not test Atom or RSS
+    Then "Newer changes" "link" should exist
+    Given I click on "Newer changes" "link"
+    Then "Older changes" "link" should exist
+    And I should see "6"
+    And I should see "1"
+    And I should see "Atom"
+    And I should see "RSS"
+    # Check to make sure we can not see "Annotate" tab
+    Given I click on "W.WX" "link"
+    Then I should not see "Annotate"
+    # Check reverting pages
+    When I click on "Frogs" "link"
+    Then I should see "C24"
+    And I should see "Zombies"
+    When I edit a ouwiki page with the following data:
+      | Content | MISCHIEF |
+    Then I should see "MISCHIEF"
+    And I should not see "C24"
+    And I should not see "Zombies"
+    When I click on "History" "link"
+    Then "Student 1" "link" should exist
+    And I should see "Revert" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    Given I click on "Revert" "link" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    When I click on "Revert" "button"
+    Then I should see "C24"
+    And I should see "Zombies"
+    # Check deleting pages
+    Then I edit a ouwiki page with the following data:
+      | Content | PORNOGRAPHY |
+    And I log out
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I follow "W.WX"
+    When I click on "Frogs" "link"
+    Then I should see "PORNOGRAPHY"
+    When I click on "History" "link"
+    And I should see "Delete" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    Given I click on "Delete" "link" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    Then I should see "Undelete" in the "//form[@name='ouw_history']//table//tr[contains(@class, 'ouw_deletedrow')]//td[3]" "xpath_element"
+    And I should see "changes" in the "//form[@name='ouw_history']//table//tr[contains(@class, 'ouw_deletedrow')]//td[3]" "xpath_element"
+    When I click on "W.WX" "link"
+    And I click on "Frogs" "link"
+    Then I should see "C24"
+    When I click on "History" "link"
+    Then I should see "Undelete" in the "//form[@name='ouw_history']//table//tr[contains(@class, 'ouw_deletedrow')]//td[3]" "xpath_element"
+    Given I click on "Undelete" "link" in the "//form[@name='ouw_history']//table//tr[contains(@class, 'ouw_deletedrow')]//td[3]" "xpath_element"
+    When I click on "W.WX" "link"
+    And I click on "Frogs" "link"
+    Then I should see "PORNOGRAPHY"
+    When I click on "History" "link"
+    Given I click on "Delete" "link" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    Given I click on "Delete" "link" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    Given I click on "Delete" "link" in the "//form[@name='ouw_history']//table//tbody//tr[3]//td[3]" "xpath_element"
+    Given I click on "Delete" "link" in the "//form[@name='ouw_history']//table//tbody//tr[4]//td[3]" "xpath_element"
+    Given I click on "Delete" "link" in the "//form[@name='ouw_history']//table//tbody//tr[5]//td[3]" "xpath_element"
+    When I click on "W.WX" "link"
+    And I click on "Frogs" "link"
+    Then "Create page" "button" should exist
+    Given I click on "Wiki index" "link"
+    And I click on "Frogs" "link"
+    Then "Create page" "button" should exist
+    Given I press "Create page"
+    And I set the field "Content" to "SAFE"
+    And I press "Save changes"
+    When I click on "History" "link"
+    Then I should see "Delete" in the "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element"
+    And I should see "Undelete" in the "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element"
+    And I should see "Undelete" in the "//form[@name='ouw_history']//table//tbody//tr[3]//td[3]" "xpath_element"
+    And I should see "Undelete" in the "//form[@name='ouw_history']//table//tbody//tr[4]//td[3]" "xpath_element"
+    And I should see "Undelete" in the "//form[@name='ouw_history']//table//tbody//tr[5]//td[3]" "xpath_element"
+    And I should see "Undelete" in the "//form[@name='ouw_history']//table//tbody//tr[6]//td[3]" "xpath_element"
+    And I log out
+    Given I log in as "student1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "W.WX"
+    And I click on "Frogs" "link"
+    Then I should see "SAFE"
+    When I click on "History" "link"
+    Then "//form[@name='ouw_history']//table//tbody//tr[1]//td[3]" "xpath_element" should exist
+    And "//form[@name='ouw_history']//table//tbody//tr[2]//td[3]" "xpath_element" should not exist
+    And I log out
+
+  @javascript
+  Scenario: Attachments No groups
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.X |
+        | Description | wiki with no groups |
+        | Group mode | No groups |
+    And I follow "Course 1"
+    And I follow "W.X"
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "C71 no groups wiki"
+    And I press "Save changes"
+    # Confirm start page set up
+    Then I should see "C71 no groups wiki" in the ".ouwiki_content" "css_element"
+    And "Teacher 1" "link" should exist
+    # unable to check for date
+    And I add a ouwiki page with the following data:
+      | Create new page | Attest |
+      | Content | C72 |
+    Then I should see "C72"
+    # Add attachments - we can/should not access a users hardisk so pull from system
+    Given I click on "Edit" "link"
+    And I upload "lib/tests/fixtures/empty.txt" file to "Attachments" filemanager
+    And I press "Save changes"
+    And I wait to be redirected
+    Then "empty.txt" "link" should exist
+    # Check for annotations (and test edit settings at the same time) - note we can not test for locking
+    And I click on "Topic 1" "link" in the ".breadcrumb-nav" "css_element"
+    When I click on "Edit" "link" in the "li.modtype_ouwiki div.menubar" "css_element"
+    And I click on "Edit settings" "link" in the "li.modtype_ouwiki div.menu" "css_element"
+    And I expand all fieldsets
+    And I set the field "Annotation system" to "Yes"
+    When I press "Save and display"
+    Then I should see "Annotate"
+    And I add a ouwiki page with the following data:
+      | Create new page | Vampires |
+      | Content | A1 A2 |
+    Given I click on "Annotate" "link"
+    And "span.ouwiki-annotation-marker" "css_element" should exist
+    When I click on "#marker0" "css_element"
+    Then I set the field "Add annotation:" to "web"
+    And I press "Add"
+    And I should see "web"
+    When I click on "#marker3" "css_element"
+    Then I set the field "Add annotation:" to "spider"
+    And I press "Add"
+    And I should see "spider"
+    When I press "Save changes"
+    Then "Hide annotations" "link" should be visible
+    And "Expand annotations" "link" should be visible
+    When I click on "span.ouwiki-annotation-tag:nth-of-type(1)" "css_element"
+    Then I should see "web"
+    And I should see "Teacher 1"
+    When I click on "span.ouwiki-annotation-tag:nth-of-type(2)" "css_element"
+    Then I should see "spider"
+    And I should see "Teacher 1"
+    # Can not test for photos
+    And "Collapse annotations" "link" should be visible
+    When I click on "span.ouwiki-annotation-tag:nth-of-type(1)" "css_element"
+    Then I should not see "web"
+    And "Collapse annotations" "link" should not be visible
+    And "Hide annotations" "link" should be visible
+    And "Expand annotations" "link" should be visible
+    When I click on "Expand annotations" "link"
+    Then I should see "web"
+    And I should see "Teacher 1"
+    And I should see "spider"
+    And I should see "Teacher 1"
+    And "Hide annotations" "link" should be visible
+    When I click on "Hide annotations" "link"
+    Then I should not see "web"
+    And I should not see "spider"
+    And "Show annotations" "link" should be visible
+    When I click on "Show annotations" "link"
+    Then "span.ouwiki-annotation-tag:nth-of-type(2)" "css_element" should be visible
+    And "span.ouwiki-annotation-tag:nth-of-type(1)" "css_element" should be visible
+    # collapse "web" annotation, but leave "spider" open
+    When I click on "span.ouwiki-annotation-tag:nth-of-type(1)" "css_element"
+    Then I should not see "web"
+    And I should see "spider"
+    And "Expand annotations" "link" should be visible
+    When I click on "Expand annotations" "link"
+    Then I should see "web"
+    And I should see "Teacher 1"
+    And I should see "spider"
+    And I should see "Teacher 1"
+    And "Hide annotations" "link" should be visible
+    When I click on "Hide annotations" "link"
+    Then I should not see "web"
+    And I should not see "spider"
+    And "Show annotations" "link" should be visible
+    When I click on "Show annotations" "link"
+    Then I should see "web"
+    And I should see "Teacher 1"
+    And I should see "spider"
+    And I should see "Teacher 1"
+    And I log out
diff --git a/mod/ouwiki/tests/behat/behat_mod_ouwiki.php b/mod/ouwiki/tests/behat/behat_mod_ouwiki.php
new file mode 100644
index 0000000..1bb1c49
--- /dev/null
+++ b/mod/ouwiki/tests/behat/behat_mod_ouwiki.php
@@ -0,0 +1,76 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Steps definitions related with the ouwiki activity.
+ *
+ * @package    mod_ouwiki
+ * @category   test
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// NOTE: no MOODLE_INTERNAL test here, this file may be required by behat before including /config.php.
+
+require_once(__DIR__ . '/../../../../lib/behat/behat_base.php');
+
+use Behat\Gherkin\Node\TableNode;
+
+/**
+ * wiki-related steps definitions.
+ *
+ * @package    mod_ouwiki
+ * @category   test
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class behat_mod_ouwiki extends behat_base {
+
+    /**
+     * Adds a page to the current ouwiki with the provided data. You should be in the main view page..
+     *
+     * @Given /^I add a ouwiki page with the following data:$/
+     * @param TableNode $data
+     */
+    public function i_add_a_ouwiki_page_with_the_following_data(TableNode $data) {
+        $datahash = $data->getRowsHash();
+        $i = 0;
+        // The action depends on the field type.
+        foreach ($datahash as $locator => $value) {
+            $this->execute('behat_forms::i_set_the_field_to', array($locator, $value));
+            if ($i == 0) {
+                $this->execute('behat_forms::press_button', array(get_string('create', 'ouwiki')));
+            } else {
+                continue;
+            }
+            $i++;
+        }
+        $this->execute('behat_forms::press_button', array(get_string('savechanges')));
+    }
+
+    /**
+     * Edit current ouwiki page with the provided data. You should be in the page view..
+     *
+     * @Given /^I edit a ouwiki page with the following data:$/
+     * @param TableNode $data
+     */
+    public function i_edit_a_ouwiki_page_with_the_following_data(TableNode $data) {
+        $this->execute('behat_general::i_click_on', array('Edit page', 'link'));
+        $this->execute('behat_forms::i_set_the_following_fields_to_these_values', array($data));
+        $this->execute('behat_forms::press_button', array(get_string('savechanges')));
+    }
+
+}
diff --git a/mod/ouwiki/tests/behat/lastupdated.feature b/mod/ouwiki/tests/behat/lastupdated.feature
new file mode 100644
index 0000000..44e0e8f
--- /dev/null
+++ b/mod/ouwiki/tests/behat/lastupdated.feature
@@ -0,0 +1,110 @@
+@ou @ou_vle @mod @mod_ouwiki @lastmodified
+Feature: Show last updated information on activity link
+  In know when a wiki was last updated
+  As a user
+  I need to see the last post date on the wiki link
+
+  Background:
+    Given the following "users" exist:
+      | username | firstname | lastname | email |
+      | student1 | Student | 1 | student1@asd.com |
+      | student2 | Student | 2 | student2@asd.com |
+    And the following "courses" exist:
+      | fullname | shortname | category |
+      | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+      | user | course | role |
+      | student1 | C1 | student |
+      | student2 | C1 | student |
+    And the following "groups" exist:
+      | name | course | idnumber |
+      | G1 | C1 | G1 |
+      | G2 | C1 | G2 |
+    And the following "group members" exist:
+      | user | group |
+      | student1 | G1 |
+      | student2 | G2 |
+
+  Scenario: No groups - basic test etc
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.WC |
+        | Description | wiki with no groups |
+        | Group mode | No groups |
+    Then I should see "W.WC"
+    And ".lastmodtext.ouwikilmt" "css_element" should not exist
+    Given I follow "W.WC"
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "C1 no groups wiki"
+    And I press "Save changes"
+    When I follow "Course 1"
+    Then ".lastmodtext.ouwikilmt" "css_element" should exist
+
+  Scenario: Group wikis
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.SG |
+        | Description | Separate groups |
+        | Sub-wikis | One wiki per group |
+        | Group mode | Separate groups |
+    And I add a "OU wiki" to section "2" and I fill the form with:
+        | Name | W.VG |
+        | Description | Visible groups |
+        | Sub-wikis | One wiki per group |
+        | Group mode | Visible groups |
+    And I log out
+    # Test for student1 in group 1.
+    Given I log in as "student1"
+    And I am on site homepage
+    When I follow "Course 1"
+    Then "/descendant::div[@class='activityinstance'][1]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should not exist
+    And "/descendant::div[@class='activityinstance'][2]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should not exist
+    Given I follow "W.SG"
+    And I press "Create page"
+    And I set the field "Content" to "C2 separate groups wiki"
+    And I press "Save changes"
+    And I follow "Course 1"
+    When I follow "W.VG"
+    And I press "Create page"
+    And I set the field "Content" to "C3 visible groups wiki"
+    And I press "Save changes"
+    And I follow "Course 1"
+    Then "/descendant::div[@class='activityinstance'][1]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should exist
+    And "/descendant::div[@class='activityinstance'][2]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should exist
+    And I log out
+    # Test for student 2 in group 2.
+    Given I log in as "student2"
+    And I am on site homepage
+    When I follow "Course 1"
+    Then "/descendant::div[@class='activityinstance'][1]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should not exist
+    And "/descendant::div[@class='activityinstance'][2]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should exist
+
+  Scenario: Individual wikis
+    Given I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    And I add a "OU wiki" to section "1" and I fill the form with:
+        | Name | W.SI |
+        | Description | individual wikis |
+        | Sub-wikis |Separate wiki for every user |
+        | Group mode | No groups |
+    When I follow "W.SI"
+    And I press "Create page"
+    And I set the field "Content" to "C4 individual wiki"
+    And I press "Save changes"
+    And I follow "Course 1"
+    Then "/descendant::div[@class='activityinstance'][1]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should exist
+    And I log out
+    # Checking individual wiki for student 1 (visible info only).
+    Given I log in as "student1"
+    And I am on site homepage
+    And I follow "Course 1"
+    Then "/descendant::div[@class='activityinstance'][1]//span[@class='lastmodtext ouwikilmt']" "xpath_element" should not exist
diff --git a/mod/ouwiki/tests/behat/viewdetails.feature b/mod/ouwiki/tests/behat/viewdetails.feature
new file mode 100644
index 0000000..ddbe7e8
--- /dev/null
+++ b/mod/ouwiki/tests/behat/viewdetails.feature
@@ -0,0 +1,94 @@
+@ou @ou_vle @mod @mod_ouwiki @ouwiki_viewdetails
+Feature: Test view details against a user
+  In order to use ouwiki features
+  As a user
+  I need to be able to view user participation details
+
+  Background:
+    Given the following "users" exist:
+        | username | firstname | lastname | email |
+        | teacher1 | Teacher | 1 | teacher1@asd.com |
+        | student1 | Student | 1 | student1@asd.com |
+        | student2 | Student | 2 | student2@asd.com |
+        | teacher2 | Teacher | 2 | teacher2@asd.com |
+    And the following "courses" exist:
+        | fullname | shortname | category |
+        | Course 1 | C1 | 0 |
+    And the following "course enrolments" exist:
+        | user | course | role |
+        | teacher1 | C1 | editingteacher |
+        | student1 | C1 | student |
+        | student2 | C1 | student |
+        | teacher2 | C1 | teacher |
+    And I log in as "admin"
+    And I am on site homepage
+    And I follow "Course 1"
+    And I turn editing mode on
+    When I add a "OU wiki" to section "1" and I fill the form with:
+      | Name | Test 1 |
+      | Description | Test ouwiki description |
+      | grade[modgrade_type] | Point |
+      | grade[modgrade_point] | 100 |
+    And I log out
+
+  @javascript
+  Scenario: View details
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "Test 1"
+    And "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "Test content 1"
+    And I press "Save changes"
+    And I log out
+    # Add extra content as student.
+    Given I log in as "student2"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "Test 1"
+    When I click on "Edit" "link"
+    And I set the field "Content" to "Test content 1 some other stuff"
+    And I press "Save changes"
+    And I log out
+    # Set up 'frog' wiki subpage.
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "Test 1"
+    And I click on "Edit" "link"
+    And I set the field "Content" to "Test content 1 some other stuff [[frog]]"
+    And I press "Save changes"
+    When I click on "frog" "link"
+    Then "Create page" "button" should exist
+    And I press "Create page"
+    And I set the field "Content" to "Frog test "
+    When I press "Save changes"
+    Then "Start page" "link" should exist
+    When I click on "Start page" "link"
+    And  "frog" "link" should exist
+    And I log out
+    # Add extra content to 'frog' page as student.
+    Given I log in as "student2"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "Test 1"
+    And  "frog" "link" should exist
+    And I click on "frog" "link"
+    When I click on "Edit" "link"
+    And I set the field "Content" to "Frog test content stuff"
+    And I press "Save changes"
+    Then "Start page" "link" should exist
+    When I click on "Start page" "link"
+    Then  "frog" "link" should exist    
+    And I log out
+    # Check student has particpated and their grade can be displayed.
+    Given I log in as "teacher1"
+    And I am on homepage
+    And I follow "Course 1"
+    And I follow "Test 1"
+    Given I click on "Participation by user" "link"
+    When I click on "detail" "link" in the "Student 2" "table_row"
+    And I should see "User grade"
+    And I should see "+3"
+    And I should see "+2"
diff --git a/mod/ouwiki/tests/diff_test.php b/mod/ouwiki/tests/diff_test.php
new file mode 100644
index 0000000..5f8df18
--- /dev/null
+++ b/mod/ouwiki/tests/diff_test.php
@@ -0,0 +1,338 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * OUWiki unit tests - test locallib functions
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.'); // It must be included from a Moodle page.
+}
+global $CFG;
+
+require_once($CFG->dirroot . '/mod/ouwiki/difflib.php');
+
+class ouwiki_test_diff extends advanced_testcase {
+
+    public $html1 = '
+<p>This is a long paragraph
+split over several lines
+and including <b>bold</b> and
+<i>italic</i> and <span class="frog">span</span> tags.</p>
+<p>This is a second paragraph.</p>
+<div>This div contain\'s some greengrocer\'s apostrophe\'s.</div>
+<ul>
+<li>A list</li>
+<li>With multiple
+items</li>
+<li>Some of them have
+
+multiple
+
+
+line breaks</li>
+</ul>', $html2 = '
+<div><!-- Extra structure, to be ignored -->
+<p>This is a long paragraph
+split over several lines
+and including <b>bold</b> and
+<i>italic</i> and <span class="frog">span</span> tags.</p>
+</div>
+<p>This is a second paragraph which I have added some text to.</p>
+<div>This div contain\'s <span class="added html tags">some</span> <b>greengrocer\'s</b> <img src="notthere.jpg" /> apostrophe\'s.</div>
+<ul>
+<li>A</li><!-- Deleted word -->
+<!-- Deleted entire line -->
+<li>Some of them have
+
+multiple
+
+
+line breaks</li>
+</ul>';
+
+    public function test_add_markers() {
+        $html = '01frog67890zombie789';
+        $words = array();
+        $words[] = new ouwiki_word('frog', 2);
+        $words[] = new ouwiki_word('zombie', 11);
+        $result = ouwiki_diff_add_markers($html, $words, 'ouw_marker', '!!', '??');
+        $this->assertEquals(
+            '01!!<span class="ouw_marker">frog</span>??67890!!<span class="ouw_marker">zombie</span>??789', $result);
+    }
+
+    public function test_diff_html() {
+        list($result1, $result2, $changes) = ouwiki_diff_html($this->html1, $this->html2);
+        $this->assertEquals(13, $changes);
+    }
+
+    public function test_diff_words() {
+        $lines1 = ouwiki_diff_html_to_lines($this->html1);
+        $lines2 = ouwiki_diff_html_to_lines($this->html2);
+        list($deleted, $added) = ouwiki_diff_words($lines1, $lines2);
+
+        $delarray = array();
+        foreach ($deleted as $word) {
+            $delarray[] = $word->word;
+        }
+        sort($delarray);
+        $addarray = array();
+        foreach ($added as $word) {
+            $addarray[] = $word->word;
+        }
+        sort($addarray);
+
+        $this->assertEquals(array('With', 'items', 'list', 'multiple', 'paragraph.'), $delarray);
+        $this->assertEquals(array('I', 'added', 'have', 'paragraph', 'some', 'text', 'to.', 'which'), $addarray);
+    }
+
+    public function test_diff_changes() {
+        // Initial file for comparison (same for all examples).
+        $file1 = array (1 => 'a', 'b', 'c', 'd', 'e', 'f', 'g');
+
+        // Add text at beginning.
+        $file2 = array(1 => '0', '1', 'a', 'b', 'c', 'd', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(), $result->deletes);
+        $this->assertEquals(array(), $result->changes);
+        $this->assertEquals(array(1, 2), $result->adds);
+
+        // Add text at end.
+        $file2 = array(1 => 'a', 'b', 'c', 'd', 'e', 'f', 'g', '0', '1');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(), $result->deletes);
+        $this->assertEquals(array(), $result->changes);
+        $this->assertEquals(array(8, 9), $result->adds);
+
+        // Add text in middle.
+        $file2 = array(1 => 'a', 'b', 'c', '0', '1', 'd', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(), $result->deletes);
+        $this->assertEquals(array(), $result->changes);
+        $this->assertEquals(array(4, 5), $result->adds);
+
+        // Delete text at beginning.
+        $file2 = array(1 => 'c', 'd', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(1, 2), $result->deletes);
+        $this->assertEquals(array(), $result->changes);
+        $this->assertEquals(array(), $result->adds);
+
+        // Delete text at end.
+        $file2 = array(1 => 'a', 'b', 'c', 'd', 'e');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(6, 7), $result->deletes);
+        $this->assertEquals(array(), $result->changes);
+        $this->assertEquals(array(), $result->adds);
+
+        // Delete text in middle.
+        $file2 = array(1 => 'a', 'b', 'c', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(4, 5), $result->deletes);
+        $this->assertEquals(array(), $result->changes);
+        $this->assertEquals(array(), $result->adds);
+
+        // Change text in middle (one line).
+        $file2 = array(1 => 'a', 'b', 'frog', 'd', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals($result->deletes, array());
+        $this->assertEquals(1, count($result->changes));
+        $this->assertEquals(array(3, 1, 3, 1), array_values((array)$result->changes[0]));
+        $this->assertEquals(array(), $result->adds);
+
+        // Change text in middle (two lines).
+        $file2 = array(1 => 'a', 'b', 'frog', 'toad', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(), $result->deletes);
+        $this->assertEquals(1, count($result->changes));
+        $this->assertEquals(array(3, 2, 3, 2), array_values((array)$result->changes[0]));
+        $this->assertEquals(array(), $result->adds);
+
+        // Change text in middle (one line -> two).
+        $file2 = array(1 => 'a', 'b', 'frog', 'toad', 'd', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(), $result->deletes);
+        $this->assertEquals(1, count($result->changes));
+        $this->assertEquals(array(3, 1, 3, 2), array_values((array)$result->changes[0]));
+        $this->assertEquals(array(), $result->adds);
+
+        // Change text in middle (two lines -> one).
+        $file2 = array(1 => 'a', 'b', 'frog', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(), $result->deletes);
+        $this->assertEquals(1, count($result->changes));
+        $this->assertEquals(array(3, 2, 3, 1), array_values((array)$result->changes[0]));
+        $this->assertEquals(array(), $result->adds);
+
+        // Two changes.
+        $file2 = array(1 => 'a', 'frog', 'toad', 'c', 'd', 'zombie', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals($result->deletes, array());
+        $this->assertEquals(2, count($result->changes));
+        $this->assertEquals(array(2, 1, 2, 2), array_values((array)$result->changes[0]));
+        $this->assertEquals(array(5, 2, 6, 1), array_values((array)$result->changes[1]));
+        $this->assertEquals(array(), $result->adds);
+
+        // Changes at ends.
+        $file2 = array(1 => 'ant', 'frog', 'toad', 'c', 'd', 'zombie');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(), $result->deletes);
+        $this->assertEquals(2, count($result->changes));
+        $this->assertEquals(array(1, 2, 1, 3), array_values((array)$result->changes[0]));
+        $this->assertEquals(array(5, 3, 6, 1), array_values((array)$result->changes[1]));
+        $this->assertEquals(array(), $result->adds);
+
+        // A change, a delete, an add.
+        $file2 = array(1 => 'ant', 'b', 'd', 'zombie', 'e', 'f', 'g');
+        $result = ouwiki_diff($file1, $file2);
+        $this->assertEquals(array(3), $result->deletes);
+        $this->assertEquals(1, count($result->changes));
+        $this->assertEquals(array(1, 1, 1, 1), array_values((array)$result->changes[0]));
+        $this->assertEquals(array(4), $result->adds);
+    }
+
+    public function test_splitter() {
+        $lines = ouwiki_diff_html_to_lines($this->html1);
+        $this->assertEquals(array(
+            1 => 'This is a long paragraph split over several lines and including bold and italic and span tags.',
+            2 => 'This is a second paragraph.',
+            3 => "This div contain's some greengrocer's apostrophe's.",
+            4 => 'A list',
+            5 => 'With multiple items',
+            6 => 'Some of them have multiple line breaks'
+        ), ouwiki_line::get_as_strings($lines));
+        $lines = ouwiki_diff_html_to_lines($this->html2);
+        $this->assertEquals(array(
+            1 => 'This is a long paragraph split over several lines and including bold and italic and span tags.',
+            2 => 'This is a second paragraph which I have added some text to.',
+            3 => "This div contain's some greengrocer's apostrophe's.",
+            4 => 'A',
+            5 => 'Some of them have multiple line breaks'
+        ), ouwiki_line::get_as_strings($lines));
+    }
+
+    public function test_basic_diff() {
+        // Example from paper.
+        $file1 = array(1 => 'a', 'b', 'c', 'd', 'e', 'f', 'g');
+        $file2 = array(1 => 'w', 'a', 'b', 'x', 'y', 'z', 'e');
+        $this->assertEquals(array(1 => 2, 2 => 3, 3 => 0, 4 => 0, 5 => 7, 6 => 0, 7 => 0), ouwiki_diff_internal($file1, $file2));
+        $this->assertEquals(array(1 => 0, 2 => 1, 3 => 2, 4 => 0, 5 => 0, 6 => 0, 7 => 5), ouwiki_diff_internal($file2, $file1));
+
+        // Add text at beginning.
+        $file2 = array(1 => '0', '1', 'a', 'b', 'c', 'd', 'e', 'f', 'g');
+        $this->assertEquals(array(1 => 3, 2 => 4, 3 => 5, 4 => 6, 5 => 7, 6 => 8, 7 => 9), ouwiki_diff_internal($file1, $file2));
+
+        // Add text at end.
+        $file2 = array(1 => 'a', 'b', 'c', 'd', 'e', 'f', 'g', '0', '1');
+        $this->assertEquals(array(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7), ouwiki_diff_internal($file1, $file2));
+
+        // Add text in middle.
+        $file2 = array(1 => 'a', 'b', 'c', '0', '1', 'd', 'e', 'f', 'g');
+        $this->assertEquals(array(1 => 1, 2 => 2, 3 => 3, 4 => 6, 5 => 7, 6 => 8, 7 => 9), ouwiki_diff_internal($file1, $file2));
+
+        // Delete text at beginning.
+        $file2 = array(1 => 'c', 'd', 'e', 'f', 'g');
+        $this->assertEquals(array(1 => 0, 2 => 0, 3 => 1, 4 => 2, 5 => 3, 6 => 4, 7 => 5), ouwiki_diff_internal($file1, $file2));
+
+        // Delete text at end.
+        $file2 = array(1 => 'a', 'b', 'c', 'd', 'e');
+        $this->assertEquals(array(1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 0, 7 => 0), ouwiki_diff_internal($file1, $file2));
+
+        // Delete text in middle.
+        $file2 = array(1 => 'a', 'b', 'c', 'f', 'g');
+        $this->assertEquals(array(1 => 1, 2 => 2, 3 => 3, 4 => 0, 5 => 0, 6 => 4, 7 => 5), ouwiki_diff_internal($file1, $file2));
+    }
+
+    public function test_attachment_diff() {
+        global $CFG, $USER;
+        require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+        $this->resetAfterTest(true);
+
+        $this->setAdminUser();
+
+        $course = $this->getDataGenerator()->create_course();
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_ouwiki');
+        $ouwiki = $generator->create_instance((object) array('course' => $course->id));
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, 0, $USER->id, true);
+
+        // Add start page.
+        $startpageversion = ouwiki_get_current_page($subwiki, null, OUWIKI_GETPAGE_CREATE);
+
+        // Add version1 - no attachments.
+        $ver1id = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, null, 'TEST', -1, -1, -1, false, null);
+
+        // Add version 2 - no attachments.
+        $ver2id = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, null, 'TEST', -1, -1, -1, false, null);
+
+        // Check diff when no attachments.
+        $fs = get_file_storage();
+        $files1 = ($files1 = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment', $ver1id, 'timemodified', false)) ? $files1 : null;
+        $files2 = ($files2 = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment', $ver2id, 'timemodified', false)) ? $files2 : null;
+
+        list($attachdiff1, $attachdiff2, $attachnumchanges) = ouwiki_diff_attachments($files1, $files2, $context->id, $ver1id, $ver2id);
+        $this->assertEquals(0, $attachnumchanges);
+        $hasno1 = strpos(get_string('noattachments', 'ouwiki'), $attachdiff1);
+        $hasno2 = strpos(get_string('noattachments', 'ouwiki'), $attachdiff2);
+        $this->assertTrue($hasno1 !== false && $hasno2 !== false);
+
+        // Add attachment to first and re-check.
+        $filerecord = (object) array(
+                'contextid' => $context->id,
+                'component' => 'mod_ouwiki',
+                'filearea' => 'attachment',
+                'itemid' => $ver1id,
+                'filename' => 'test1.txt',
+                'filepath' => '/'
+                );
+        $fs->create_file_from_string($filerecord, 'test');
+
+        $files1 = ($files1 = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment', $ver1id, 'timemodified', false)) ? $files1 : null;
+        list($attachdiff1, $attachdiff2, $attachnumchanges) = ouwiki_diff_attachments($files1, $files2, $context->id, $ver1id, $ver2id);
+        $this->assertEquals(1, $attachnumchanges);
+        $hasno1 = strpos($attachdiff1, 'test1.txt');
+        $hasno2 = strpos($attachdiff2, get_string('noattachments', 'ouwiki'));
+        $this->assertTrue($hasno1 !== false && $hasno2 !== false);
+
+        // Add same attachment to second and test no changes.
+        $filerecord->itemid = $ver2id;
+        $fs->create_file_from_string($filerecord, 'test');
+        $files2 = ($files2 = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment', $ver2id, 'timemodified', false)) ? $files2 : null;
+        list($attachdiff1, $attachdiff2, $attachnumchanges) = ouwiki_diff_attachments($files1, $files2, $context->id, $ver1id, $ver2id);
+        $this->assertEquals(0, $attachnumchanges);
+        $hasno1 = strpos($attachdiff1, 'test1.txt');
+        $hasno2 = strpos($attachdiff2, 'test1.txt');
+        $this->assertTrue($hasno1 !== false && $hasno2 !== false);
+
+        // Add a second attachemnt to second version and test.
+        $filerecord->filename = 'test2.txt';
+        $fs->create_file_from_string($filerecord, 'test2');
+        $files2 = ($files2 = $fs->get_area_files($context->id, 'mod_ouwiki', 'attachment', $ver2id, 'timemodified', false)) ? $files2 : null;
+        list($attachdiff1, $attachdiff2, $attachnumchanges) = ouwiki_diff_attachments($files1, $files2, $context->id, $ver1id, $ver2id);
+        $this->assertEquals(1, $attachnumchanges);
+        $hasno1 = strpos($attachdiff1, 'test1.txt');
+        $hasno2 = strpos($attachdiff2, 'test2.txt');
+        $this->assertTrue($hasno1 !== false && $hasno2 !== false);
+    }
+
+}
diff --git a/mod/ouwiki/tests/fixtures/simple_template.zip b/mod/ouwiki/tests/fixtures/simple_template.zip
new file mode 100644
index 0000000000000000000000000000000000000000..708a808090c7d5897a0b37562a28e8aa88b12d9e
GIT binary patch
literal 214
zcmWIWW@Zs#U|`^2;H#YNVe7tBBL>JT0b(8yotj&alUS0fSCN~uS@Zmvb6YlRdieNn
z-K^=Yt99<o`O`idjW=F&FUZj{@+vBRbEU{@4fmBx-fQl5eY)H&D%2e$`pIZ=@K=#T
z!J<V*n}bC!IXtRTNd1*i8WUsoOJFS!bALIwjgcY1n~{lu0k=DVPC)|5t_tvGWdlhu
M0-+U<ZUd_W0I#Ay{r~^~

literal 0
HcmV?d00001

diff --git a/mod/ouwiki/tests/generator/lib.php b/mod/ouwiki/tests/generator/lib.php
new file mode 100644
index 0000000..09a2b1d
--- /dev/null
+++ b/mod/ouwiki/tests/generator/lib.php
@@ -0,0 +1,127 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * OUWIKI data generator
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+
+/**
+ * ouwiki module data generator class
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_ouwiki_generator extends testing_module_generator {
+
+    private $modcount = 0;
+    private $pagecount = 0;
+
+    public function reset() {
+        $this->modcount = 0;
+        $this->pagecount = 0;
+        parent::reset();
+    }
+
+    public function create_instance($record = null, array $options = null) {
+        global $CFG;
+        require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+        $record = (object)(array)$record;
+
+        if (!isset($record->subwikis) && !isset($options['subwikis'])) {
+            $record->subwikis = OUWIKI_SUBWIKIS_SINGLE;
+        }
+        if (!isset($record->annotation) && !isset($options['annotation'])) {
+            $record->annotation = 1;
+        }
+        $this->modcount++;
+
+        if (!isset($record->name) && !isset($options['name'])) {
+            $record->name = 'OUWIKI' . $this->modcount;
+        } else if (isset($options['name'])) {
+            $record->name = $options['name'];// Name must be in $record.
+        }
+        if (!isset($record->grade) && !isset($options['grade'])) {
+            $record->grade = 0;
+        }
+
+        return parent::create_instance($record, (array)$options);
+    }
+
+    public function create_content($instance, $record = array()) {
+        global $USER, $DB, $CFG;
+        require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+        $cm = get_coursemodule_from_instance('ouwiki', $instance->id);
+        $context = context_module::instance($cm->id);
+        // Setup subwiki.
+        if (!isset($record['subwiki'])) {
+            // Create a new sub wiki object for current user.
+            $subwiki = ouwiki_get_subwiki($instance->course, $instance, $cm, $context, 0, $USER->id, true);
+        } else {
+            $subwiki = $record['subwiki'];
+        }
+
+        if (isset($record['newversion'])) {
+            // Update an existing page with a new version.
+            $newverinfo = $record['newversion'];
+            if (!isset($newverinfo->formdata)) {
+                $newverinfo->formdata = null;
+            }
+            if (!isset($newverinfo->pagename)) {
+                $newverinfo->pagename = null;
+            }
+            if (!isset($newverinfo->content)) {
+                $newverinfo->content = 'Test content';
+            }
+            return ouwiki_save_new_version($instance->course, $cm, $instance, $subwiki, $newverinfo->pagename,
+                    $newverinfo->content, -1, -1, -1, null, $newverinfo->formdata);
+        } else {
+            // Create a new page - does this by default (off start page).
+            if (!isset($record['newpage'])) {
+                $record['newpage'] = new stdClass();
+            }
+            $newpageinfo = $record['newpage'];
+            if (!isset($newpageinfo->formdata)) {
+                $newpageinfo->formdata = null;
+            }
+            if (!isset($newpageinfo->pagename)) {
+                $newpageinfo->pagename = null;
+            }
+            // Ensure linked from page exists.
+            ouwiki_get_current_page($subwiki, $newpageinfo->pagename, OUWIKI_GETPAGE_CREATE);
+            if (!isset($newpageinfo->newpagename)) {
+                $this->pagecount++;
+                $newpageinfo->newpagename = 'OU Wiki Test Page' . $this->pagecount;
+            }
+            if (!isset($newpageinfo->content)) {
+                $newpageinfo->content = 'Test content';
+            }
+            ouwiki_create_new_page($instance->course, $cm, $instance, $subwiki, $newpageinfo->pagename,
+                    $newpageinfo->newpagename, $newpageinfo->content, $newpageinfo->formdata);
+            return ouwiki_get_current_page($subwiki, $newpageinfo->newpagename);
+        }
+    }
+
+}
diff --git a/mod/ouwiki/tests/generator_test.php b/mod/ouwiki/tests/generator_test.php
new file mode 100644
index 0000000..ee112f4
--- /dev/null
+++ b/mod/ouwiki/tests/generator_test.php
@@ -0,0 +1,105 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * PHPUnit data generator tests
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+
+/**
+ * PHPUnit data generator testcase
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class mod_ouwiki_generator_testcase extends advanced_testcase {
+
+    public function test_ouwiki_generator() {
+        global $DB;
+
+        $this->resetAfterTest(true);
+
+        $this->assertEquals(0, $DB->count_records('ouwiki'));
+
+        $course = $this->getDataGenerator()->create_course();
+
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_ouwiki');
+        $this->assertInstanceOf('mod_ouwiki_generator', $generator);
+        $this->assertEquals('ouwiki', $generator->get_modulename());
+
+        $firstwiki = $generator->create_instance(array('course' => $course->id));
+        $this->assertEquals($firstwiki->name, 'OUWIKI1');
+
+        $wiki = $generator->create_instance(array('course' => $course->id,
+                'subwikis' => 1, 'name' => 'TEST'));
+
+        // Test general wiki creation.
+        $this->assertEquals(2, $DB->count_records('ouwiki'));
+
+        $cm = get_coursemodule_from_instance('ouwiki', $wiki->id);
+        $this->assertEquals($wiki->id, $cm->instance);
+        $this->assertEquals('ouwiki', $cm->modname);
+        $this->assertEquals($course->id, $cm->course);
+
+        $context = context_module::instance($cm->id);
+        $this->assertEquals($wiki->cmid, $context->instanceid);
+
+        // Test options pulled through.
+        $this->assertEquals('TEST', $wiki->name);
+        $this->assertEquals(1, $wiki->subwikis);
+    }
+
+    public function test_ouwiki_create_content() {
+        global $DB;
+
+        $this->resetAfterTest(true);
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_ouwiki');
+        $course = $this->getDataGenerator()->create_course();
+        $user = $this->getDataGenerator()->create_user();
+        $studentrole = $DB->get_record('role', array('shortname' => 'student'));
+        $this->getDataGenerator()->enrol_user($user->id, $course->id, $studentrole->id);
+
+        $wiki = $generator->create_instance(array('course' => $course->id));
+
+        // Test create_content() without subwiki or page/edit.
+        $newpage = $generator->create_content($wiki);
+        $version = $DB->get_record('ouwiki_versions', array('pageid' => $newpage->pageid));
+        $this->assertInstanceOf('stdClass', $newpage);
+        $this->assertEquals('OU Wiki Test Page1', $newpage->title);
+        $this->assertEquals($version->id, $newpage->currentversionid);
+        $this->assertTrue($newpage->currentversionid == $newpage->firstversionid &&
+                $newpage->currentversionid == $newpage->versionid);
+        $this->assertEquals('Test content', $newpage->xhtml);
+        $this->assertEquals(2, $newpage->wordcount);
+
+        // Test create_content() with subwiki sent + update version.
+        $record = array();
+        $record['subwiki'] = $DB->get_record('ouwiki_subwikis', array('wikiid' => $wiki->id));
+        $record['newversion'] = (object) array('content' => 'NEW');
+        $updatever = $generator->create_content($wiki, $record);
+        $updatever = $DB->get_record('ouwiki_versions', array('id' => $updatever));
+        $this->assertInstanceOf('stdClass', $updatever);
+        $this->assertEquals('NEW', $updatever->xhtml);
+    }
+
+}
diff --git a/mod/ouwiki/tests/locallib_test.php b/mod/ouwiki/tests/locallib_test.php
new file mode 100644
index 0000000..9fd0b31
--- /dev/null
+++ b/mod/ouwiki/tests/locallib_test.php
@@ -0,0 +1,723 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * OUWiki unit tests - test locallib functions
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.'); // It must be included from a Moodle page.
+}
+global $CFG;
+
+require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+class ouwiki_locallib_test extends advanced_testcase {
+
+    /**
+     * OU Wiki generator reference
+     * @var testing_module_generator
+     */
+    public $generator = null;
+
+    /**
+     * Create temporary test tables and entries in the database for these tests.
+     * These tests have to work on a brand new site.
+     */
+    public function setUp() {
+        global $CFG;
+
+        parent::setup();
+
+        $this->generator = $this->getDataGenerator()->get_plugin_generator('mod_ouwiki');
+    }
+
+    /*
+
+    Backend functions covered:
+
+    ouwiki_get_subwiki()
+    ouwiki_get_current_page()
+    ouwiki_save_new_version()
+    ouwiki_create_new_page()
+    ouwiki_get_page_history()
+    ouwiki_get_page_version()
+    ouwiki_get_subwiki_recentpages()
+    ouwiki_get_subwiki_recentchanges()
+    ouwiki_init_pages()
+    ouwiki_get_subwiki_index()
+    ouwiki_build_tree()
+    ouwiki_tree_index()
+    ouwiki_display_entirewiki_page_in_index()
+    ouwiki_get_sub_tree_from_index()
+    ouwiki_get_last_modified()
+
+    Functions not covered:
+    Delete/undelete page version - no backend functions for this process
+    File attachment - difficult to test through backend functions due to moodle core handling of files
+
+    */
+
+
+    public function test_ouwiki_pages_and_versions() {
+        global $DB;
+        $this->resetAfterTest(true);
+        $user = $this->get_new_user();
+        $course = $this->get_new_course();
+
+        // Setup a wiki to use.
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_SINGLE);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+        $groupid = 0;
+        $this->setUser($user);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $groupid, $user->id, true);
+
+        // Create the start page.
+        $startpagename = 'startpage';
+        $formdata = null;
+        $startpageversion = ouwiki_get_current_page($subwiki, $startpagename, OUWIKI_GETPAGE_CREATE);
+        $verid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $startpagename, $startpagename,
+                -1, -1, -1, null, $formdata);
+
+        // Create a page.
+        $pagename1 = 'testpage1';
+        $content1 = 'testcontent';
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $startpagename, $pagename1, $content1, $formdata);
+
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename1);
+        $this->assertEquals($pageversion->title, $pagename1);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Make some more versions.
+        $content2 = 'testcontent2';
+        $content3 = 'testcontent3';
+        ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename1, $content2, -1, -1, -1, null, $formdata);
+        $verid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $pagename1, $content3, -1, -1, -1, null, $formdata);
+        $versions = $DB->get_records('ouwiki_versions');
+        $versionids = array();
+        foreach ($versions as $version) {
+            $versionids[] = $version->id;
+        }
+        $this->assertEquals(max($versionids), $verid);
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename1);
+        $this->assertEquals($content3, $pageversion->xhtml);
+
+        // Get the history.
+        $history = ouwiki_get_page_history($pageversion->pageid, true);
+        $this->assertEquals('array', gettype($history));
+
+        // Last version should match $content3.
+        $version = array_shift($history);
+        $this->assertEquals(max($versionids), $version->versionid);
+        $this->assertEquals($user->id, $version->id);
+        $this->assertEquals(1, $version->wordcount);
+        $this->assertEquals($pageversion->previousversionid, $version->previousversionid);
+        $this->assertNull($version->importversionid);
+
+        // Add another page.
+        $pagename2 = 'testpage2';
+        $content4 = 'testcontent4';
+
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $startpagename, $pagename2, $content4, $formdata);
+
+        // Test recent pages.
+        $changes = ouwiki_get_subwiki_recentpages($subwiki->id);
+        $this->assertEquals('array', gettype($changes));
+        $this->assertEquals(fullname($user), fullname(current($changes)));
+        // First page should be startpage.
+        $this->assertEquals(end($changes)->title, $startpagename);
+        // 3rd page should be pagename2.
+        $this->assertEquals(reset($changes)->title, $pagename2);
+
+        $testfullname = fullname(current($changes));
+        $this->assertEquals(fullname($user), $testfullname);
+
+        // Test recent wiki changes.
+        $changes = ouwiki_get_subwiki_recentchanges($subwiki->id);
+        $testfullname = fullname(reset($changes));
+        $this->assertEquals(fullname($user), $testfullname);
+        $this->assertEquals(reset($changes)->title, $startpagename);
+        // Sixth change should be to testpage2  - when we created testpage2.
+        $this->assertEquals(next($changes)->title, $pagename2);
+        // Seventh change shouldbe start page again - when we linked to testpage2 to startpage.
+        $this->assertEquals(end($changes)->title, $startpagename);
+
+    }
+
+    public function test_ouwiki_init_course_wiki_access() {
+        global $DB;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $user = $this->get_new_user();
+        $course = $this->get_new_course();
+        $studentrole = $DB->get_record('role', array('shortname' => 'student'));
+        $this->getDataGenerator()->enrol_user($user->id, $course->id, $studentrole->id);
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_SINGLE);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+        // Add annotation for student role as not allowed by default.
+        role_change_permission($studentrole->id, $context, 'mod/ouwiki:annotate', CAP_ALLOW);
+        $this->setUser($user);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, 0, $user->id, true);
+        $createdsubwikiid = $subwiki->id;
+        $this->check_subwiki($ouwiki, $subwiki, true);
+
+        // Get the same one we created above (without 'create').
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, 0, $user->id);
+        $this->assertEquals($subwiki->id, $createdsubwikiid);
+    }
+
+    public function test_ouwiki_init_group_wiki_access() {
+        global $DB, $USER;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        // Create course, ouwiki, course module, context, groupid, userid.
+        $user = $this->get_new_user();
+        $course = $this->get_new_course();
+        // Enrol user as student on course.
+        $studentrole = $DB->get_record('role', array('shortname' => 'student'));
+        $this->getDataGenerator()->enrol_user($user->id, $course->id, $studentrole->id);
+
+        // Store admin user id for later use.
+        $adminuserid = $USER->id;
+
+        $this->setUser($user);
+
+        // Test group wikis (visible - test access across groups).
+        $this->setAdminUser();
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_GROUPS, array('groupmode' => VISIBLEGROUPS));
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+
+        $group1 = $this->get_new_group($course->id);
+        $group2 = $this->get_new_group($course->id);
+
+        $this->setUser($user);
+
+        // Subwiki with 'create'.
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $group1->id, $user->id, true);
+        $createdsubwikiid = $subwiki->id;
+        $this->check_subwiki($ouwiki, $subwiki, false, $group1->id);
+
+        // Add annotation for student role as not allowed by default.
+        role_change_permission($studentrole->id, $context, 'mod/ouwiki:annotate', CAP_ALLOW);
+        $member = $this->get_new_group_member($group1->id, $user->id);// Adds our user to group1.
+
+        // Check student can access, now in group.
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $group1->id, $user->id, true);
+        $this->assertEquals($subwiki->id, $createdsubwikiid);
+        $this->check_subwiki($ouwiki, $subwiki, true, $group1->id);
+
+        // Check student edit/annotate access to other group wiki when has specific capabilities.
+        role_change_permission($studentrole->id, $context, 'mod/ouwiki:annotateothers', CAP_ALLOW);
+        role_change_permission($studentrole->id, $context, 'mod/ouwiki:editothers', CAP_ALLOW);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $group2->id, $user->id, true);
+        $this->check_subwiki($ouwiki, $subwiki, true, $group2->id);
+
+        // Check admin has access to any group.
+        $this->setAdminUser();
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $group1->id, $USER->id);
+        $this->check_subwiki($ouwiki, $subwiki, true, $group1->id);
+
+        // Check separate groups (student should only edit own group).
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_GROUPS, array('groupmode' => SEPARATEGROUPS));
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+        $this->setUser($user);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $group2->id, $user->id, true);
+        $this->check_subwiki($ouwiki, $subwiki, false, $group2->id);
+    }
+
+    public function test_ouwiki_init_individual_wiki_access() {
+        global $DB, $USER;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        // Create course, ouwiki, course module, context, groupid, userid.
+        $user = $this->get_new_user();
+        $course = $this->get_new_course();
+        // Enrol user as student on course.
+        $studentrole = $DB->get_record('role', array('shortname' => 'student'));
+        $this->getDataGenerator()->enrol_user($user->id, $course->id, $studentrole->id);
+
+        // Store admin user id for later use.
+        $adminuserid = $USER->id;
+
+        $this->setUser($user);
+
+        // Test invididual wikis.
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_INDIVIDUAL);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+        $groupid = 0;
+        // Add annotation for student role as not allowed by default.
+        role_change_permission($studentrole->id, $context, 'mod/ouwiki:annotate', CAP_ALLOW);
+
+        // Subwiki with 'create'.
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $groupid, $user->id, true);
+        $this->check_subwiki($ouwiki, $subwiki, true, $user->id);
+
+        // Check admin can access students wiki just created.
+        $this->setAdminUser();
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $groupid, $user->id);
+        $this->check_subwiki($ouwiki, $subwiki, true, $user->id);
+
+        // Check student viewing someone else's wiki throws exception (add nothing after this).
+        $this->setUser($user);
+        $this->setExpectedException('moodle_exception');
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $groupid, $adminuserid, true);
+        $this->fail('Expected exception on access to another users wiki');// Shouldn't get here.
+    }
+
+    public function test_ouwiki_word_count() {
+        $tests = array();
+
+        $test['string'] = "This is four words";
+        $test['count'] = 4;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = " ";
+        $test['count'] = 0;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = "word";
+        $test['count'] = 1;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = "Two\n\nwords";
+        $test['count'] = 2;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = "<p><b>two <i>words</i></b></p>";
+        $test['count'] = 2;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = "Isnâ€™t it three";
+        $test['count'] = 3;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = "Isn't it three";
+        $test['count'] = 3;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = "three-times-hyphenated words";
+        $test['count'] = 2;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = "one,two,さん";
+        $test['count'] = 3;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+
+        $test['string'] = 'Two&nbsp;words&nbsp;&nbsp;&nbsp;&nbsp;';
+        $test['count'] = 2;
+        $testcount = ouwiki_count_words($test['string']);
+        $this->assertEquals($test['count'], $testcount);
+    }
+
+    /*
+     *  Test the OU Wiki structure functions.
+     *  The tree structure should be set up as below. The numbering of pages is done deliberatly as follows to aid testing.
+     *
+     *                                      P1
+     *                                      |
+     *                         ------------------------------
+     *                         P2           P3              P9
+     *                                 ----------        --------
+     *                                 P4      P8        P10   P12
+     *                              --------              |
+     *                              P5    P7             P11
+     *                              P6
+     *
+     *  An Alternative way to view the structure above is shown below. The data is created to reflect the structure,
+     *  though that does not effect the testing of the processes since the data is created out of sequence from the way
+     *  the structure is shown below as it might be in reality.
+     *
+     *     P1
+     *       P2
+     *       P3
+     *         P4
+     *           P5
+     *             P6
+     *           P7
+     *         P8
+     *       P9
+     *         P10
+     *           P11
+     *         P12
+     */
+
+    public function test_ouwiki_structure() {
+        $this->resetAfterTest(true);
+        $user = $this->get_new_user();
+        $course = $this->get_new_course();
+
+        // Setup a wiki to use.
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_SINGLE);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+        $groupid = 0;
+        $this->setUser($user);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $groupid, $user->id, true);
+
+        // Create the start page.
+        $startpagename = 'testpage1';
+        $formdata = null;
+        $startpageversion = ouwiki_get_current_page($subwiki, $startpagename, OUWIKI_GETPAGE_CREATE);
+        $verid = ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, $startpagename, $startpagename,
+                -1, -1, -1, null, $formdata);
+
+        // Create a page with no sub pages.
+        $pagename2 = 'testpage2';
+        $content2 = 'testcontent2';
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $startpagename, $pagename2, $content2, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename2);
+        $this->assertEquals($pageversion->title, $pagename2);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add another page to start page.
+        $pagename3 = 'testpage3';
+        $content3 = 'testcontent3';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $startpagename, $pagename3, $content3, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename3);
+        $this->assertEquals($pageversion->title, $pagename3);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add another page to start page.
+        $pagename9 = 'testpage9';
+        $content9 = 'testcontent9';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $startpagename, $pagename9, $content9, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename9);
+        $this->assertEquals($pageversion->title, $pagename9);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add pages to testpage3.
+
+        // Add page to test page 3.
+        $pagename4 = 'testpage4';
+        $content4 = 'testcontent4';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename3, $pagename4, $content4, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename4);
+        $this->assertEquals($pageversion->title, $pagename4);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add another page to testpage 3.
+        $pagename8 = 'testpage8';
+        $content8 = 'testcontent8';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename3, $pagename8, $content8, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename8);
+        $this->assertEquals($pageversion->title, $pagename8);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add pages to testpage4.
+
+        // Add page to test page 4.
+        $pagename5 = 'testpage5';
+        $content5 = 'testcontent5';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename4, $pagename5, $content5, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename5);
+        $this->assertEquals($pageversion->title, $pagename5);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add another page to testpage 4.
+        $pagename7 = 'testpage7';
+        $content7 = 'testcontent7';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename4, $pagename7, $content7, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename7);
+        $this->assertEquals($pageversion->title, $pagename7);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add page to test page 5.
+        $pagename6 = 'testpage6';
+        $content6 = 'testcontent6';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename5, $pagename6, $content6, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename6);
+        $this->assertEquals($pageversion->title, $pagename6);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add page to test page 9.
+        $pagename10 = 'testpage10';
+        $content10 = 'testcontent10';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename9, $pagename10, $content10, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename10);
+        $this->assertEquals($pageversion->title, $pagename10);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add another page to testpage 9.
+        $pagename12 = 'testpage12';
+        $content12 = 'testcontent12';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename9, $pagename12, $content12, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename12);
+        $this->assertEquals($pageversion->title, $pagename12);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Add page to test page 10.
+        $pagename11 = 'testpage11';
+        $content11 = 'testcontent11';
+        // We don't get anything returned for this.
+        ouwiki_create_new_page($course, $cm, $ouwiki, $subwiki, $pagename10, $pagename11, $content11, $formdata);
+        // Try get that page.
+        $pageversion = ouwiki_get_current_page($subwiki, $pagename11);
+        $this->assertEquals($pageversion->title, $pagename11);
+        // Test fullname info from ouwiki_get_current_page.
+        $this->assertEquals(fullname($user), fullname($pageversion));
+
+        // Create the index.
+        $index = ouwiki_get_subwiki_index($subwiki->id);
+
+        // Check to see that there are 12 posts.
+        $this->assertEquals(count($index), 12);
+        reset($index);
+
+        $orphans = false;
+        // Check for orphan posts - there should be none.
+        foreach ($index as $indexitem) {
+            if (count($indexitem->linksfrom) == 0 && $indexitem->title !== 'testpage1') {
+                $orphans = true;
+                break;
+            }
+        }
+        $this->assertEquals($orphans, false);
+
+        // Test tree structure functions.
+        // Build tree.
+        ouwiki_build_tree($index);
+
+        // Check to see whether pages have the correct number of children in them including the root node.
+        $page = $this->get_page_from_index_by_pagename('testpage3', $index);
+        $subtree = ouwiki_get_sub_tree_from_index($page->pageid, $index);
+        $this->assertEquals(6, count($subtree));
+
+        // Check to see whether pages have the correct number of children in them including the root node.
+        $page = $this->get_page_from_index_by_pagename('testpage4', $index);
+        $subtree = ouwiki_get_sub_tree_from_index($page->pageid, $index);
+        $this->assertEquals(4, count($subtree));
+
+        // Check linkto, linksfrom, and children arrays for testpage 4
+        // - see structure diagram in function description for links to, from, and children for P4.
+        $linksfrom = $page->linksfrom;
+        $linksto = $page->linksto;
+        $children = $page->children;
+        $this->assertEquals(count($linksfrom), 1);
+        $this->assertEquals(count($linksto), 2);
+        $this->assertEquals(count($children), 2);
+        // Test linksfrom from testpage 4.
+        $p = $this->get_page_from_index_by_pageid($linksfrom[0], $index);
+        $this->assertEquals($p->title, $pagename3);
+        // Test linksto for testpage 4.
+        $p = $this->get_page_from_index_by_pageid($linksto[0], $index);
+        $this->assertEquals($p->title, $pagename5);
+        $p = $this->get_page_from_index_by_pageid($linksto[1], $index);
+        $this->assertEquals($p->title, $pagename7);
+        // Test children for testpage 4.
+        $p = $this->get_page_from_index_by_pageid($children[0], $index);
+        $this->assertEquals($p->title, $pagename5);
+        $p = $this->get_page_from_index_by_pageid($children[1], $index);
+        $this->assertEquals($p->title, $pagename7);
+
+        // Check to see whether pages have the correct number of children in them including the root node.
+        $page = $this->get_page_from_index_by_pagename('testpage5', $index);
+        $this->assertEquals(2, count(ouwiki_get_sub_tree_from_index($page->pageid, $index)));
+
+        // Check to see whether pages have the correct number of children in them including the root node.
+        $page = $this->get_page_from_index_by_pagename('testpage9', $index);
+        $this->assertEquals(4, count(ouwiki_get_sub_tree_from_index($page->pageid, $index)));
+
+        // Check to see whether pages have the correct number of children in them including the root node.
+        $page = $this->get_page_from_index_by_pagename('testpage10', $index);
+        $this->assertEquals(2, count(ouwiki_get_sub_tree_from_index($page->pageid, $index)));
+    }
+
+    /**
+     * Simple test of last modified time returning
+     */
+    public function test_ouwiki_get_last_modified() {
+        global $DB;
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+        $user = $this->get_new_user();
+        $user2 = $this->get_new_user('testouwikiuser2');
+        $course = $this->get_new_course();
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_SINGLE);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $context = context_module::instance($cm->id);
+
+        $result = ouwiki_get_last_modified($cm, $course);
+        $this->assertEmpty($result);
+
+        // Create page + test last modified returns something.
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, 0, $user2->id, true);
+        $page = ouwiki_get_current_page($subwiki, 'startpage', OUWIKI_GETPAGE_CREATE);
+        ouwiki_save_new_version($course, $cm, $ouwiki, $subwiki, 'startpage', 'content', -1, -1, -1);
+
+        $result = ouwiki_get_last_modified($cm, $course, $user2->id);
+        $this->assertNotEmpty($result);
+        // Check other user gets a time.
+        $result2 = ouwiki_get_last_modified($cm, $course, $user->id);
+        $this->assertNotEmpty($result2);
+        $this->assertEquals($result, $result2);
+        // Check admin gets cached.
+        $result = ouwiki_get_last_modified($cm, $course);
+        $this->assertEmpty($result);
+    }
+
+    /*
+     These functions enable us to create database entries and/or grab objects to make it possible to test the
+     many permuations required for OU Wiki.
+    */
+
+    public function get_page_from_index_by_pagename($pagename, $index) {
+        foreach ($index as $indexitem) {
+            if ($indexitem->title === $pagename) {
+                return $indexitem;
+            }
+        }
+        return null;
+    }
+
+    public function get_page_from_index_by_pageid($pageid, $index) {
+        foreach ($index as $indexitem) {
+            if ($indexitem->pageid === $pageid) {
+                return $indexitem;
+            }
+        }
+        return null;
+    }
+
+    public function get_new_user($username = 'testouwikiuser') {
+        return $this->getDataGenerator()->create_user(array('username' => $username));
+    }
+
+
+    public function get_new_course() {
+        return $this->getDataGenerator()->create_course(array('shortname' => 'ouwikitest'));
+    }
+
+    public function get_new_ouwiki($courseid, $subwikis = null, $options = array()) {
+
+        $ouwiki = new stdClass();
+        $ouwiki->course = $courseid;
+
+        if ($subwikis != null) {
+            $ouwiki->subwikis = $subwikis;
+        }
+
+        $ouwiki->timeout = null;
+        $ouwiki->template = null;
+        $ouwiki->editbegin = null;
+        $ouwiki->editend = null;
+
+        $ouwiki->completionpages = 0;
+        $ouwiki->completionedits = 0;
+
+        $ouwiki->introformat = 0;
+
+        return $this->generator->create_instance($ouwiki, $options);
+
+    }
+
+    public function get_new_group($courseid) {
+        static $counter = 0;
+        $counter++;
+        $group = new stdClass();
+        $group->courseid = $courseid;
+        $group->name = 'test group' . $counter;
+        return $this->getDataGenerator()->create_group($group);
+    }
+
+    public function get_new_group_member($groupid, $userid) {
+        $member = new stdClass();
+        $member->groupid = $groupid;
+        $member->userid = $userid;
+        return $this->getDataGenerator()->create_group_member($member);
+    }
+
+    /**
+     * Checks subwiki object created as expected
+     * @param object $ouwiki
+     * @param object $subwiki
+     * @param boolean $canaccess - true if user can access + edit etc
+     * @param int $userorgroup - set to expected user or group id for group/individual wikis
+     */
+    public function check_subwiki($ouwiki, $subwiki, $canaccess = true, $userorgroup = null) {
+        $this->assertInstanceOf('stdClass', $subwiki);
+        $this->assertEquals($ouwiki->id, $subwiki->wikiid);
+        if ($ouwiki->subwikis == OUWIKI_SUBWIKIS_SINGLE) {
+            $this->assertNull($subwiki->groupid);
+            $this->assertNull($subwiki->userid);
+        } else if ($ouwiki->subwikis == OUWIKI_SUBWIKIS_GROUPS) {
+            $this->assertEquals($userorgroup, $subwiki->groupid);
+        } else if ($ouwiki->subwikis == OUWIKI_SUBWIKIS_INDIVIDUAL) {
+            $this->assertEquals($userorgroup, $subwiki->userid);
+        }
+        if ($ouwiki->annotation == 1) {
+            $this->assertEquals(1, $subwiki->annotation);
+        }
+        $this->assertEquals($canaccess, $subwiki->canedit);
+        $this->assertEquals($canaccess, $subwiki->canannotate);
+    }
+
+}
diff --git a/mod/ouwiki/tests/participation_test.php b/mod/ouwiki/tests/participation_test.php
new file mode 100644
index 0000000..8231bc5c
--- /dev/null
+++ b/mod/ouwiki/tests/participation_test.php
@@ -0,0 +1,235 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * OUWiki unit tests - test locallib functions
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.'); // It must be included from a Moodle page.
+}
+global $CFG;
+
+require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+class ouwiki_participation_test extends advanced_testcase {
+
+    public function test_canview_course_wiki() {
+        global $USER;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        $course = $this->getDataGenerator()->create_course();
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_SINGLE);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+        $context = context_module::instance($cm->id);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm,
+                $context, 0, $USER->id, true);
+
+        // Can view all user participation.
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $this->assertEquals(OUWIKI_USER_PARTICIPATION, $canview);
+
+        $teacher = $this->get_new_user('teacher', $course->id);
+        // Test teacher by passing id.
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm, $teacher->id);
+        $this->assertEquals(OUWIKI_USER_PARTICIPATION, $canview);
+        // Test teacher as cur user.
+        $this->setUser($teacher);
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $this->assertEquals(OUWIKI_USER_PARTICIPATION, $canview);
+
+        // Can only view own participation.
+        $student = $this->get_new_user('student', $course->id);
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm, $student->id);
+        $this->assertEquals(OUWIKI_MY_PARTICIPATION, $canview);
+        // Test student as current user.
+        $this->setUser($student);
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $this->assertEquals(OUWIKI_MY_PARTICIPATION, $canview);
+
+        // Can't view anything.
+        $this->setGuestUser();
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $this->assertEquals(OUWIKI_NO_PARTICIPATION, $canview);
+    }
+
+    public function test_canview_group_wiki() {
+        global $USER;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        $course = $this->getDataGenerator()->create_course(array('groupmode' => SEPARATEGROUPS, 'groupmodeforce' => 1));
+
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_GROUPS);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+
+        $context = context_module::instance($cm->id);
+
+        $group = $this->get_new_group($course->id);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, $group->id, $USER->id, true);
+
+        // Can view all user participation.
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $this->assertEquals(OUWIKI_USER_PARTICIPATION, $canview);
+
+        // Can only view own participation.
+        $student = $this->get_new_user('student', $course->id);
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm, $student->id);
+        $this->assertEquals(OUWIKI_NO_PARTICIPATION, $canview);
+
+        $this->setUser($student);
+        // Testing when logged in a s student.
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $this->assertEquals(OUWIKI_NO_PARTICIPATION, $canview);
+
+        // Check when student is a member of the group.
+        $this->get_new_group_member($group->id, $student->id);
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm, $student->id);
+        $this->assertEquals(OUWIKI_MY_PARTICIPATION, $canview);
+        $canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm);
+        $this->assertEquals(OUWIKI_MY_PARTICIPATION, $canview);
+    }
+
+    public function test_participation() {
+        global $USER;
+
+        $this->resetAfterTest(true);
+        $this->setAdminUser();
+
+        $course = $this->getDataGenerator()->create_course();
+
+        $ouwiki = $this->get_new_ouwiki($course->id, OUWIKI_SUBWIKIS_SINGLE);
+        $cm = get_coursemodule_from_instance('ouwiki', $ouwiki->id);
+        $this->assertNotEmpty($cm);
+
+        $context = context_module::instance($cm->id);
+        $subwiki = ouwiki_get_subwiki($course, $ouwiki, $cm, $context, 0, $USER->id, true);
+        $pageversion = ouwiki_get_current_page($subwiki, 'TEST PAGE', OUWIKI_GETPAGE_CREATE);
+        $user = $this->get_new_user('student', $course->id);
+
+        $content = 'content';
+        $plus = ' plus';
+        for ($i = 1; $i <= 5; $i++) {
+            $content .= $plus . $i;
+            $wordcount = ouwiki_count_words($content);
+            $this->save_new_version($pageversion->pageid, $content, $user->id, $wordcount);
+        }
+        // Remove one word.
+        $content = str_replace('plus3', '', $content);
+        $wordcount = ouwiki_count_words($content);
+        $this->save_new_version($pageversion->pageid, $content, $user->id, $wordcount);
+
+        // User participation.
+        list($returneduser, $participation) = ouwiki_get_user_participation($user->id, $subwiki);
+        $this->assertEquals($user->id, $returneduser->id);
+        $this->assertNotNull($participation);
+        $this->assertEquals(6, count($participation));
+
+        // All participation.
+        $participation = ouwiki_get_participation($ouwiki, $subwiki, $context, 0);
+        $this->assertNotNull($participation);
+        $userexists = array_key_exists($user->id, $participation);
+        $this->assertTrue($userexists);
+        $this->assertEquals(1, count($participation));
+        $this->assertEquals(6, $participation[$user->id]->pageedits);
+        $this->assertEquals(25, $participation[$user->id]->wordsadded);
+        $this->assertEquals(0, $participation[$user->id]->wordsdeleted);
+        $this->assertEquals(0, $participation[$user->id]->pagecreates);
+
+        $user2 = $this->get_new_user('student', $course->id);
+        $participation = ouwiki_get_participation($ouwiki, $subwiki, $context, 0);
+
+        // A user who is enrolled, but with no contribution.
+        $userexists = array_key_exists($user2->id, $participation);
+        $this->assertTrue($userexists);
+        $this->assertEquals(fullname($user2), fullname($participation[$user2->id]));
+    }
+
+    /**
+     * Creates a new user and enrols them on course with role specified (optional)
+     * @param string $rolename role shortname if enrolment required
+     * @param int $courseid course id to enrol on
+     * @return stdClass user
+     */
+    public function get_new_user($rolename = null, $courseid = null) {
+        global $DB;
+        $user = $this->getDataGenerator()->create_user();
+
+        // Assign role if required.
+        if ($rolename && $courseid) {
+            $role = $DB->get_record('role', array('shortname' => $rolename));
+            $this->getDataGenerator()->enrol_user($user->id, $courseid, $role->id);
+        }
+
+        return $user;
+    }
+
+    public function get_new_ouwiki($courseid, $subwikis = 0) {
+        $ouwiki = new stdClass();
+        $ouwiki->course = $courseid;
+        $ouwiki->name = 'Test ouwiki';
+        $ouwiki->subwikis = $subwikis;
+        $ouwiki->timeout = null;
+        $ouwiki->template = null;
+        $ouwiki->editbegin = null;
+        $ouwiki->editend = null;
+        $ouwiki->completionpages = 0;
+        $ouwiki->completionedits = 0;
+        $ouwiki->annotation = 0;
+        $ouwiki->introformat = 0;
+        $ouwiki->wordcount = 1;
+        $ouwiki->grade = 100;
+
+        $generator = $this->getDataGenerator()->get_plugin_generator('mod_ouwiki');
+        return $generator->create_instance($ouwiki);
+    }
+
+    public function save_new_version($pageid, $xhtml, $userid, $wordcount) {
+        global $DB;
+        $version = new stdClass();
+        $version->pageid = $pageid;
+        $version->xhtml = $xhtml;
+        $version->xhtmlformat = 1;
+        $version->timecreated = time();
+        $version->userid = $userid;
+        $version->wordcount = $wordcount;
+        $version->id = $DB->insert_record('ouwiki_versions', $version);
+        return $version;
+    }
+
+    public function get_new_group($courseid) {
+        $group = new stdClass();
+        $group->courseid = $courseid;
+        $group->name = 'test group';
+        return $this->getDataGenerator()->create_group($group);
+    }
+
+    public function get_new_group_member($groupid, $userid) {
+        $member = new stdClass();
+        $member->groupid = $groupid;
+        $member->userid = $userid;
+        return $this->getDataGenerator()->create_group_member($member);
+    }
+}
diff --git a/mod/ouwiki/tests/sections_test.php b/mod/ouwiki/tests/sections_test.php
new file mode 100644
index 0000000..2023c76
--- /dev/null
+++ b/mod/ouwiki/tests/sections_test.php
@@ -0,0 +1,70 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * OUWiki unit tests - test locallib functions
+ *
+ * @package    mod_ouwiki
+ * @copyright  2014 The Open University
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.'); // It must be included from a Moodle page.
+}
+global $CFG;
+
+require_once($CFG->dirroot . '/mod/ouwiki/locallib.php');
+
+class ouwiki_test_sections extends advanced_testcase {
+
+    public $sample = '
+<h1 id="ouw_s0_0">Start</h1>
+x
+x<h1>No section ID</h1>x
+x<h1 id="ouw_sly">Invalid section ID</h1>x
+x<h1 id="ouw_s13_x">Invalid section ID</h1>x
+x<h1 id="ouw_s13_13">Non-match heading tags</h2>x
+x<h1 id="ouw_s1_666">Valid section heading</h1>x
+x<h2 id="ouw_s2_666">Test&amp;</h2>x
+x<h3 id="ouw_s3_666">Test<span class="frog">whatever</span></h3>x
+x<h4 id="ouw_s4_666">
+Test
+
+spacing
+
+and     stuff
+
+</h4>x
+x<h5 id="ouw_s5_666">V5</h5>x
+x<h6 id="ouw_s6_666">V6</h6>x
+x
+<h1 id="ouw_s0_1">End</h1>';
+
+    public function test_find_sections() {
+        $sections = ouwiki_find_sections($this->sample);
+        $this->assertEquals(array(
+                '0_0' => 'Start',
+                '1_666' => 'Valid section heading',
+                '2_666' => 'Test&',
+                '3_666' => 'Testwhatever',
+                '4_666' => 'Test spacing and stuff',
+                '5_666' => 'V5',
+                '6_666' => 'V6',
+                '0_1' => 'End'
+            ), $sections);
+    }
+}
diff --git a/mod/ouwiki/userparticipation.php b/mod/ouwiki/userparticipation.php
new file mode 100644
index 0000000..053970c
--- /dev/null
+++ b/mod/ouwiki/userparticipation.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Page for viewing single user participation
+ *
+ * @package mod
+ * @subpackage ouwiki
+ * @copyright 2011 The Open University
+ * @author Stacey Walker <stacey@catalyst-eu.net>
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id         = required_param('id', PARAM_INT); // Course Module ID
+// Pick up userid from either querytext or user - if not user cur user.
+$querytext = optional_param('querytext', $USER->id, PARAM_INT);
+$userid = optional_param('user', $querytext, PARAM_INT);
+$groupid    = optional_param('group', 0, PARAM_INT);
+$pagename   = optional_param('page', '', PARAM_TEXT);
+$download   = optional_param('download', '', PARAM_TEXT);
+
+$params = array(
+    'id'        => $id,
+    'user'      => $userid,
+    'group'     => $groupid,
+    'pagename'  => $pagename,
+    'download'  => $download,
+);
+$url = new moodle_url('/mod/ouwiki/userparticipation.php', $params);
+$PAGE->set_url($url);
+
+if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+    print_error('invalidcoursemodule');
+}
+
+// Checking course instance
+$course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+    print_error('invalidcoursemodule');
+}
+
+$PAGE->set_cm($cm);
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+$canview = ouwiki_can_view_participation($course, $ouwiki, $subwiki, $cm, $USER->id);
+if (($canview == OUWIKI_NO_PARTICIPATION)
+    || ($USER->id != $userid && $canview == OUWIKI_MY_PARTICIPATION)) {
+    print_error('nopermissiontoshow');
+}
+
+list($user, $changes) = ouwiki_get_user_participation($userid, $subwiki);
+
+$fullname = fullname($user, has_capability('moodle/site:viewfullnames', $context));
+$cangrade = has_capability('mod/ouwiki:grade', $context);
+
+$groupname = '';
+if ($groupid) {
+    $groupname = $DB->get_field('groups', 'name', array('id' => $groupid));
+    if ($cangrade && (!has_capability('moodle/site:accessallgroups', $context) &&
+            !groups_is_member($groupid))) {
+        // Only grade own group (unless access all groups).
+        $cangrade = false;
+    }
+}
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Headers
+if (empty($download)) {
+    $nav = array();
+    $groupparams = ($groupid) ? '&group=' . $groupid : '';
+    if ($canview == OUWIKI_USER_PARTICIPATION) {
+        $nav[] = array(
+            'name' => get_string('userparticipation', 'ouwiki'),
+            'link' => "/mod/ouwiki/participation.php?id=$cm->id" .
+            "&pagename=$pagename$groupparams"
+        );
+    }
+    $nav[] = array('name' => $fullname, 'link' => null);
+    echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course,
+        $subwiki, null, $context, $nav, null, null, '', '', $userid);
+}
+
+echo $ouwikioutput->ouwiki_render_user_participation($user, $changes, $cm, $course, $ouwiki,
+    $subwiki, $pagename, $groupid, $download, $canview, $context, $fullname,
+    $cangrade, $groupname);
+
+// Footer
+if (empty($download)) {
+    ouwiki_print_footer($course, $cm, $subwiki, $pagename, null, 'view');
+}
diff --git a/mod/ouwiki/version.php b/mod/ouwiki/version.php
new file mode 100644
index 0000000..457f764
--- /dev/null
+++ b/mod/ouwiki/version.php
@@ -0,0 +1,29 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version.
+ *
+ * @package mod_ouwiki
+ * @copyright 2014 The Open University
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$plugin->version  = 2016051001;
+$plugin->requires = 2014051200;
+$plugin->component = 'mod_ouwiki';
+$plugin->maturity = MATURITY_STABLE;
+$plugin->release = '3.1 r1';
diff --git a/mod/ouwiki/view.php b/mod/ouwiki/view.php
new file mode 100644
index 0000000..ce96014
--- /dev/null
+++ b/mod/ouwiki/view.php
@@ -0,0 +1,114 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * View page. Displays wiki pages.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot . '/lib/ajax/ajaxlib.php');
+
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$url = new moodle_url('/mod/ouwiki/view.php', array('id' => $id, 'page' => $pagename));
+$PAGE->set_url($url);
+$PAGE->set_cm($cm);
+
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+$completion = new completion_info($course);
+$completion->set_module_viewed($cm);
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Get the current page version
+$pageversion = ouwiki_get_current_page($subwiki, $pagename);
+
+if ($pageversion) {
+    $ouwikioutput->set_export_button('page', $pageversion->pageid, $course->id);
+}
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context);
+
+// Check consistency in setting subwikis and group mode
+$courselink = new moodle_url('/course/view.php?id=', array('id' =>  $cm->course));
+if (($cm->groupmode == 0) && isset($subwiki->groupid)) {
+    print_error("Sub-wikis is set to 'One wiki per group'.
+        Please change Group mode to 'Separate groups' or 'Visible groups'.", 'error', $courselink);
+}
+if (($cm->groupmode > 0) && !isset($subwiki->groupid)) {
+    print_error("Sub-wikis is NOT set to 'One wiki per group'.
+        Please change Group mode to 'No groups'.", 'error', $courselink);
+}
+
+$locked = ($pageversion) ? $pageversion->locked : false;
+
+ouwiki_print_tabs('view', $pagename, $subwiki, $cm, $context, $pageversion ? true : false, $locked);
+
+if (($pagename === '' || $pagename === null) && strlen(preg_replace('/\s|<br\s*\/?>|<p>|<\/p>/',
+        '', $ouwiki->intro)) > 0) {
+    echo $ouwikioutput->ouwiki_get_intro($ouwiki->intro, $context->id);
+}
+
+if ($pageversion) {
+    // Print warning if page is large (more than 75KB)
+    if (strlen($pageversion->xhtml) > 75 * 1024) {
+        print '<div class="ouwiki-sizewarning"><img src="' . $OUTPUT->pix_url('warning', 'ouwiki') .
+                '" alt="" />' . get_string('sizewarning', 'ouwiki') .
+                '</div>';
+    }
+    // Print page content
+    $hideannotations = get_user_preferences(OUWIKI_PREF_HIDEANNOTATIONS, 0);
+    $data = $ouwikioutput->ouwiki_print_page($subwiki, $cm, $pageversion, true, 'view',
+            $ouwiki->enablewordcount, (bool)$hideannotations);
+    echo $data[0];
+    echo $ouwikioutput->ouwiki_get_addnew($subwiki, $cm, $pageversion, $context, $id, $pagename);
+    echo $ouwikioutput->get_bottom_buttons($subwiki, $cm, $context, $pageversion, true);
+} else {
+    // Page does not exist
+    print '<p>'.get_string($pagename ? 'pagedoesnotexist' : 'startpagedoesnotexist', 'ouwiki').'</p>';
+    if ($subwiki->canedit) {
+        print '<p>'.get_string('wouldyouliketocreate', 'ouwiki').'</p>';
+        print "<form method='get' action='edit.php'>";
+        print ouwiki_display_wiki_parameters($pagename, $subwiki, $cm, OUWIKI_PARAMS_FORM);
+        print "<input type='submit' value='".get_string('createpage', 'ouwiki')."' /></form>";
+    }
+}
+
+if ($timelocked = ouwiki_timelocked($subwiki, $ouwiki, $context)) {
+    print '<div class="ouw_timelocked">'.$timelocked.'</div>';
+}
+
+// init JS module
+$stringlist[] = array('typeinsectionname', 'ouwiki');
+$stringlist[] = array('typeinpagename', 'ouwiki');
+$stringlist[] = array('collapseannotation', 'ouwiki');
+$stringlist[] = array('expandannotation', 'ouwiki');
+$jsmodule = array('name'     => 'mod_ouwiki_view',
+                  'fullpath' => '/mod/ouwiki/module.js',
+                  'requires' => array('base', 'event', 'io', 'node', 'anim', 'panel'),
+                  'strings'  => $stringlist
+                 );
+$PAGE->requires->js_init_call('M.mod_ouwiki_view.init', array(), true, $jsmodule);
+
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
diff --git a/mod/ouwiki/viewold.php b/mod/ouwiki/viewold.php
new file mode 100644
index 0000000..7a0d14a
--- /dev/null
+++ b/mod/ouwiki/viewold.php
@@ -0,0 +1,126 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * 'View old' page. Displays old versions of wiki pages.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+$id = required_param('id', PARAM_INT);
+$versionid = required_param('version', PARAM_INT);
+
+$url = new moodle_url('/mod/ouwiki/viewold.php', array('id' => $id, 'version' => $versionid));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Get the current page version
+$pageversion = ouwiki_get_page_version($subwiki, $pagename, $versionid);
+if (!$pageversion) {
+    print_error('Unknown page version');
+}
+
+// Check permission - Allow anyone with delete page capability to view a deleted page version
+$candelete = has_capability('mod/ouwiki:deletepage', $context);
+if (!empty($pageversion->deletedat) && !$candelete) {
+    print_error('viewdeletedversionerrorcapability', 'ouwiki');
+}
+
+// Get previous and next versions
+$prevnext = ouwiki_get_prevnext_version_details($pageversion);
+
+// Get basic wiki parameters
+$wikiparams = ouwiki_display_wiki_parameters($pagename, $subwiki, $cm);
+
+$tabhistparams = ouwiki_shared_url_params($pagename, $subwiki, $cm);
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, $pagename, $context,
+    array(
+        array('name' => get_string('tab_history', 'ouwiki'), 'link' => new moodle_url('/mod/ouwiki/history.php', $tabhistparams)),
+        array('name' => get_string('oldversion', 'ouwiki'), 'link' => null)
+    ), true, true);
+
+// Information box
+if ($prevnext->prev) {
+    $date = ouwiki_nice_date($prevnext->prev->timecreated);
+    $prev = link_arrow_left(get_string('previousversion', 'ouwiki', $date), "viewold.php?$wikiparams&amp;version={$prevnext->prev->versionid}");
+} else {
+    $prev = '';
+}
+if ($prevnext->next) {
+    if ($prevnext->next->versionid == $pageversion->currentversionid) {
+        $date = get_string('currentversion', 'ouwiki');
+        $next = link_arrow_right(get_string('nextversion', 'ouwiki', $date), "view.php?$wikiparams");
+    } else {
+        $date = ouwiki_nice_date($prevnext->next->timecreated);
+        $next = link_arrow_right(get_string('nextversion', 'ouwiki', $date), "viewold.php?$wikiparams&amp;version={$prevnext->next->versionid}");
+    }
+} else {
+    $next = '';
+}
+$date = userdate($pageversion->timecreated);
+$pageversion->id = $pageversion->userid; // To make it look like a user object
+$name = ouwiki_display_user($pageversion, $course->id);
+$savedby = get_string('savedby', 'ouwiki', $name);
+
+$stradvice = get_string('advice_viewold', 'ouwiki');
+if (!empty($pageversion->deletedat)) {
+    $stradvice = get_string('advice_viewdeleted', 'ouwiki');
+}
+
+print "
+<div class='ouw_oldversion'>
+  <h1>$date <span class='ouw_person'>($savedby)</span></h1>
+  <p>".$stradvice."</p>
+  <div class='ouw_prev'>$prev</div>
+  <div class='ouw_next'>$next</div>
+  <div class='clearer'></div>
+</div>";
+
+// Print page content
+$data = $ouwikioutput->ouwiki_print_page($subwiki, $cm, $pageversion, false, 'viewold', $ouwiki->enablewordcount);
+print($data[0]);
+
+// Add a div to be closed in print_footer, so ensuring div id=osep-pagewrapper (white background)
+// is not closed early.
+// Note no bottom button here.
+echo '<div>';
+
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
diff --git a/mod/ouwiki/wikihistory.php b/mod/ouwiki/wikihistory.php
new file mode 100644
index 0000000..b2ed2d1
--- /dev/null
+++ b/mod/ouwiki/wikihistory.php
@@ -0,0 +1,277 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * 'Wiki changes' page. Displays a list of recent changes to the wiki. You
+ * can choose to view all changes or only new pages.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ *//** */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require_once($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+require_once($CFG->dirroot.'/mod/ouwiki/locallib.php');
+
+$id = required_param('id', PARAM_INT); // Course Module ID
+$newpages = optional_param('type', '', PARAM_ALPHA) == 'pages';
+$from = optional_param('from', '', PARAM_INT);
+
+$url = new moodle_url('/mod/ouwiki/wikihistory.php', array('id' => $id));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Get basic wiki parameters
+$wikiparams = ouwiki_display_wiki_parameters('', $subwiki, $cm);
+$tabparams = $newpages ? $wikiparams.'&amp;type=pages' : $wikiparams;
+
+// Get changes
+if ($newpages) {
+    $changes = ouwiki_get_subwiki_recentpages($subwiki->id, $from, OUWIKI_PAGESIZE+1);
+} else {
+    $changes = ouwiki_get_subwiki_recentchanges($subwiki->id, $from, OUWIKI_PAGESIZE+1);
+}
+
+// Check to see whether any change has been overwritten by being imported.
+$overwritten = false;
+foreach ($changes as $change) {
+    if (!empty($change->importversionid)) {
+        $overwritten = true;
+        break;
+    }
+}
+
+// Do header
+$atomurl = $CFG->wwwroot.'/mod/ouwiki/feed-wikihistory.php?'.$wikiparams.
+    ($newpages?'&amp;type=pages' : '').'&amp;magic='.$subwiki->magic;
+$rssurl = $CFG->wwwroot.'/mod/ouwiki/feed-wikihistory.php?'.$wikiparams.
+    ($newpages?'&amp;type=pages' : '').'&amp;magic='.$subwiki->magic.'&amp;format=rss';
+$meta = '<link rel="alternate" type="application/atom+xml" title="Atom feed" '.
+    'href="'.$atomurl.'" />';
+
+// bug #3542
+$wikiname = format_string(htmlspecialchars($ouwiki->name));
+$title = $wikiname.' - '.get_string('wikirecentchanges', 'ouwiki');
+
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki,
+    $from > 0
+        ? get_string('wikirecentchanges_from', 'ouwiki', (int)($from/OUWIKI_PAGESIZE) + 1)
+        : get_string('wikirecentchanges', 'ouwiki'),
+    $context, null, false, false, $meta, $title);
+
+// Print tabs for selecting all changes/new pages
+$tabrow = array();
+$tabrow[] = new tabobject('changes', 'wikihistory.php?'.$wikiparams,
+    get_string('tab_index_changes', 'ouwiki'));
+$tabrow[] = new tabobject('pages', 'wikihistory.php?'.$wikiparams.'&amp;type=pages',
+    get_string('tab_index_pages', 'ouwiki'));
+$tabs = array();
+$tabs[] = $tabrow;
+print_tabs($tabs, $newpages ? 'pages' : 'changes');
+print '<div id="ouwiki_belowtabs">';
+
+if ($newpages) {
+    $pagetabname = get_string('tab_index_pages', 'ouwiki');
+} else {
+    $pagetabname = get_string('tab_index_changes', 'ouwiki');
+}
+print get_accesshide($pagetabname, 'h1');
+
+// On first page, show information
+if (!$from) {
+    print get_string('advice_wikirecentchanges_'
+        .($newpages ? 'pages' : 'changes'
+        .(!empty($CFG->ouwikienablecurrentpagehighlight) ? '' : '_nohighlight')), 'ouwiki').'</p>';
+}
+
+$strdate = get_string('date');
+$strtime = get_string('time');
+$strpage = get_string('page', 'ouwiki');
+$strperson = get_string('changedby', 'ouwiki');
+$strview = get_string('view');
+
+$strimport = '';
+if ($overwritten) {
+    $strimport = get_string('importedfrom', 'ouwiki');
+}
+
+print "
+<table class='generaltable'>
+<thead>
+<tr><th scope='col'>$strdate</th><th scope='col'>$strtime</th><th scope='col'>$strpage</th>".
+($newpages?'':'<th><span class="accesshide">'.$strview.'</span></th>');
+if ($ouwiki->enablewordcount) {
+    print "<th scope='col'>".get_string('words', 'ouwiki')."</th>";
+}
+if ($overwritten) {
+    print '<th scope="col">' . $strimport . '</th>';
+}
+print "
+  <th scope='col'>$strperson</th></tr></thead><tbody>
+";
+
+$strchanges = get_string('changes', 'ouwiki');
+$strview = get_string('view');
+$lastdate = '';
+$count = 0;
+foreach ($changes as $change) {
+    $count++;
+    if ($count > OUWIKI_PAGESIZE) {
+        break;
+    }
+
+    $pageparams = ouwiki_display_wiki_parameters($change->title, $subwiki, $cm);
+
+    $date = userdate($change->timecreated, get_string('strftimedate'));
+    if ($date == $lastdate) {
+        $date = '';
+    } else {
+        $lastdate = $date;
+    }
+    $time = ouwiki_recent_span($change->timecreated).userdate($change->timecreated, get_string('strftimetime')).'</span>';
+
+    $page = $change->title ? htmlspecialchars($change->title) : get_string('startpage', 'ouwiki');
+    if (!empty($change->previousversionid)) {
+        $changelink = " <small>(<a href='diff.php?$pageparams&amp;v2={$change->versionid}&amp;v1={$change->previousversionid}'>$strchanges</a>)</small>";
+    } else {
+        $changelink = ' <small>('.get_string('newpage', 'ouwiki').')</small>';
+    }
+
+    $current = '';
+    if ($change->versionid == $change->currentversionid || $newpages) {
+        $viewlink = "view.php?$pageparams";
+        if (!$newpages && !empty($CFG->ouwikienablecurrentpagehighlight)) {
+            $current =' class="current"';
+        }
+    } else {
+        $viewlink = "viewold.php?$pageparams&amp;version={$change->versionid}";
+    }
+
+    $change->id = $change->userid;
+    if ($change->id) {
+        $userlink = ouwiki_display_user($change, $course->id);
+    } else {
+        $userlink = '';
+    }
+
+    if ($newpages) {
+        $actions = '';
+        $page = "<a href='$viewlink'>$page</a>";
+    } else {
+        $actions = "<td class='actions'><a href='$viewlink'>$strview</a>$changelink</td>";
+    }
+
+    // see bug #3611
+    if (!empty($current) && !empty($CFG->ouwikienablecurrentpagehighlight)) {
+        // current page so add accessibility stuff
+        $accessiblityhide = '<span class="accesshide">'.get_string('currentversionof', 'ouwiki').'</span>';
+        $dummy = $page;
+        $page = $accessiblityhide.$dummy;
+    }
+
+    print "
+<tr$current>
+  <td class='ouw_leftcol'>$date</td><td>$time</td><td>$page</td>
+  $actions";
+    if ($ouwiki->enablewordcount) {
+        if (isset($change->previouswordcount)) {
+            $wordcountchanges = ouwiki_wordcount_difference($change->wordcount,
+                    $change->previouswordcount, true);
+        } else {
+            // first page
+            $wordcountchanges = ouwiki_wordcount_difference($change->wordcount, 0, false);
+        }
+        print "<td>$wordcountchanges</td>";
+    }
+    if ($overwritten) {
+        if (!empty($change->importversionid)) {
+            $selectedouwiki = ouwiki_get_wiki_details($change->importversionid);
+            print '<td>';
+            if ($selectedouwiki->courseshortname) {
+                print $selectedouwiki->courseshortname. '<br/>';
+            }
+            print $selectedouwiki->name;
+            if ($selectedouwiki->group) {
+                print '<br/>';
+                print '[[' .$selectedouwiki->group. ']]';
+            } else if ($selectedouwiki->user) {
+                print '<br/>';
+                print '[[' .$selectedouwiki->user. ']]';
+            }
+            print '</td>';
+        } else {
+            print '<td></td>';
+        }
+    }
+    print "
+  <td class='ouw_rightcol'>$userlink</td>
+</tr>";
+}
+
+print '</tbody></table>';
+
+if (empty($changes)) {
+    echo get_string('nowikipages', 'ouwiki');
+}
+
+if ($count > OUWIKI_PAGESIZE || $from > 0) {
+    print '<div class="ouw_paging"><div class="ouw_paging_prev">&nbsp;';
+    if ($from > 0) {
+        $jump = $from - OUWIKI_PAGESIZE;
+        if ($jump < 0) {
+            $jump = 0;
+        }
+        print link_arrow_left(get_string('previous', 'ouwiki'),
+            'wikihistory.php?'.$tabparams. ($jump > 0 ? '&amp;from='.$jump : ''));
+    }
+    print '</div><div class="ouw_paging_next">';
+    if ($count > OUWIKI_PAGESIZE) {
+        $jump = $from + OUWIKI_PAGESIZE;
+        print link_arrow_right(get_string('next', 'ouwiki'),
+            'wikihistory.php?'.$tabparams. ($jump > 0 ? '&amp;from='.$jump : ''));
+    }
+    print '&nbsp;</div></div>';
+}
+
+echo $ouwikioutput->ouwiki_get_feeds($atomurl, $rssurl);
+
+$pageversion = ouwiki_get_current_page($subwiki, $pagename);
+echo $ouwikioutput->get_link_back_to_wiki($cm);
+echo $ouwikioutput->get_bottom_buttons($subwiki, $cm, $context, $pageversion, false);
+
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki);
diff --git a/mod/ouwiki/wikiindex.php b/mod/ouwiki/wikiindex.php
new file mode 100644
index 0000000..4a8bea2
--- /dev/null
+++ b/mod/ouwiki/wikiindex.php
@@ -0,0 +1,200 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+
+/**
+ * 'Wiki index' page. Displays an index of all pages in the wiki, in
+ * various formats.
+ *
+ * @copyright &copy; 2007 The Open University
+ * @author s.marshall@open.ac.uk
+ * @license http://www.gnu.org/copyleft/gpl.html GNU Public License
+ * @package ouwiki
+ */
+
+require_once(dirname(__FILE__) . '/../../config.php');
+require($CFG->dirroot.'/mod/ouwiki/basicpage.php');
+
+raise_memory_limit(MEMORY_EXTRA);
+
+$treemode = optional_param('type', '', PARAM_ALPHA) == 'tree';
+$id = required_param('id', PARAM_INT); // Course Module ID
+
+$url = new moodle_url('/mod/ouwiki/wikiindex.php', array('id'=>$id));
+$PAGE->set_url($url);
+
+if ($id) {
+    if (!$cm = get_coursemodule_from_id('ouwiki', $id)) {
+        print_error('invalidcoursemodule');
+    }
+
+    // Checking course instance
+    $course = $DB->get_record('course', array('id' => $cm->course), '*', MUST_EXIST);
+
+    if (!$ouwiki = $DB->get_record('ouwiki', array('id' => $cm->instance))) {
+        print_error('invalidcoursemodule');
+    }
+
+    $PAGE->set_cm($cm);
+}
+$context = context_module::instance($cm->id);
+$PAGE->set_pagelayout('incourse');
+require_course_login($course, true, $cm);
+
+$ouwikioutput = $PAGE->get_renderer('mod_ouwiki');
+
+// Get basic wiki parameters
+$wikiparams = ouwiki_display_wiki_parameters('', $subwiki, $cm);
+
+// Do header
+$ouwikioutput->set_export_button('subwiki', $subwiki->id, $course->id, !empty($treemode) ? 1 : 0);
+echo $ouwikioutput->ouwiki_print_start($ouwiki, $cm, $course, $subwiki, get_string('index', 'ouwiki'), $context, null, false);
+
+// Print tabs for selecting index type
+$tabrow = array();
+$tabrow[] = new tabobject('alpha', 'wikiindex.php?'.$wikiparams,
+    get_string('tab_index_alpha', 'ouwiki'));
+$tabrow[] = new tabobject('tree', 'wikiindex.php?'.$wikiparams.'&amp;type=tree',
+    get_string('tab_index_tree', 'ouwiki'));
+$tabs = array();
+$tabs[] = $tabrow;
+print_tabs($tabs, $treemode ? 'tree' : 'alpha');
+print '<div id="ouwiki_belowtabs">';
+
+global $orphans;
+// Get actual index
+$index = ouwiki_get_subwiki_index($subwiki->id);
+
+$orphans = false;
+$func = 'ouwiki_display_wikiindex_page_in_index';
+if (count($index) == 0) {
+    print '<p>'.get_string('startpagedoesnotexist', 'ouwiki').'</p>';
+} else if ($treemode) {
+    ouwiki_build_tree($index);
+    // Print out in hierarchical form...
+    print '<ul class="ouw_indextree">';
+    print ouwiki_tree_index($func, reset($index)->pageid, $index, $subwiki, $cm);
+    print '</ul>';
+    foreach ($index as $indexitem) {
+        if (count($indexitem->linksfrom) == 0 && $indexitem->title !== '') {
+            $orphans = true;
+            break;
+        }
+    }
+} else {
+    // ...or standard alphabetical
+    print '<ul class="ouw_index">';
+    foreach ($index as $indexitem) {
+        if (count($indexitem->linksfrom)!= 0 || $indexitem->title === '') {
+            print '<li>' . ouwiki_display_wikiindex_page_in_index($indexitem, $subwiki, $cm) . '</li>';
+        } else {
+            $orphans = true;
+        }
+    }
+    print '</ul>';
+}
+
+if ($orphans) {
+    print '<h2 class="ouw_orphans">'.get_string('orphanpages', 'ouwiki').'</h2>';
+    print '<ul class="ouw_index">';
+    foreach ($index as $indexitem) {
+        if (count($indexitem->linksfrom) == 0 && $indexitem->title !== '') {
+            if ($treemode) {
+                $orphanindex = ouwiki_get_sub_tree_from_index($indexitem->pageid, $index);
+                ouwiki_build_tree($orphanindex);
+                print ouwiki_tree_index($func, $indexitem->pageid, $orphanindex, $subwiki, $cm);
+            } else {
+                print '<li>' . ouwiki_display_wikiindex_page_in_index($indexitem, $subwiki, $cm) . '</li>';
+            }
+        }
+    }
+    print '</ul>';
+}
+
+$missing = ouwiki_get_subwiki_missingpages($subwiki->id);
+if (count($missing) > 0) {
+    print '<div class="ouw_missingpages"><h2>'.get_string('missingpages', 'ouwiki').'</h2>';
+    print '<p>'.get_string(count($missing) > 1 ? 'advice_missingpages' : 'advice_missingpage', 'ouwiki').'</p>';
+    print '<ul>';
+    $first = true;
+    foreach ($missing as $title => $from) {
+        print '<li>';
+        if ($first) {
+            $first = false;
+        } else {
+            print ' &#8226; ';
+        }
+        print '<a href="view.php?'.ouwiki_display_wiki_parameters($title, $subwiki, $cm).'">'.
+            htmlspecialchars($title).'</a> <span class="ouw_missingfrom">('.
+            get_string(count($from) > 1 ? 'frompages' : 'frompage', 'ouwiki',
+                '<a href="view.php?'.ouwiki_display_wiki_parameters($from[0], $subwiki, $cm).'">'.
+                ($from[0] ? htmlspecialchars($from[0]) : get_string('startpage', 'ouwiki')).'</a>)</span>');
+        print '</li>';
+    }
+    print '</ul>';
+    print '</div>';
+}
+
+$tree = 0;
+if (!empty($treemode)) {
+    $wikiparams.= '&amp;type=tree';
+    $tree = 1;
+}
+
+if (count($index) != 0) {
+    print '<div class="ouw_entirewiki"><h2>'.get_string('entirewiki', 'ouwiki').'</h2>';
+    print '<p>'.get_string('onepageview', 'ouwiki').'</p><ul>';
+    print '<li id="ouwiki_down_html"><a href="entirewiki.php?'.$wikiparams.'&amp;format=html">'.
+        get_string('format_html', 'ouwiki').'</a></li>';
+
+    // Are there any files in this wiki?
+    $context = context_module::instance($cm->id);
+    $result = $DB->get_records_sql("
+SELECT
+    f.id
+FROM
+    {ouwiki_subwikis} sw
+    JOIN {ouwiki_pages} p ON p.subwikiid = sw.id
+    JOIN {ouwiki_versions} v ON v.pageid = p.id
+    JOIN {files} f ON f.itemid = v.id
+WHERE
+    sw.id = ? AND f.contextid = ? AND f.component = 'mod_ouwiki' AND f.filename NOT LIKE '.'
+    AND f.filearea = 'attachment' AND v.id IN (SELECT MAX(v.id) from {ouwiki_versions} v WHERE v.pageid = p.id)
+    ", array($subwiki->id, $context->id), 0, 1);
+    $anyfiles = count($result) > 0;
+    $wikiparamsarray = array('subwikiid' => $subwiki->id, 'tree' => $tree);
+    print $ouwikioutput->render_export_all_li($subwiki, $anyfiles, $wikiparamsarray);
+
+    if (has_capability('moodle/course:manageactivities', $context)) {
+        $str = get_string('format_template', 'ouwiki');
+        $filesexist = false;
+        if ($anyfiles) {
+            // Images or attachment files found.
+            $filesexist = true;
+        }
+
+        print '<li id="ouwiki_down_template"><a href="entirewiki.php?' . $wikiparams . '&amp;format=template&amp;filesexist='
+            .$filesexist.'">' . $str . '</a></li>';
+    }
+    print '</ul></div>';
+}
+
+$pageversion = ouwiki_get_current_page($subwiki, $pagename);
+echo $ouwikioutput->get_link_back_to_wiki($cm);
+echo $ouwikioutput->get_bottom_buttons($subwiki, $cm, $context, $pageversion, false);
+
+// Footer
+ouwiki_print_footer($course, $cm, $subwiki, $pagename);
diff --git a/mod/ouwiki/yui/pageselector/pageselector.js b/mod/ouwiki/yui/pageselector/pageselector.js
new file mode 100644
index 0000000..dddb183
--- /dev/null
+++ b/mod/ouwiki/yui/pageselector/pageselector.js
@@ -0,0 +1,37 @@
+YUI.add('moodle-mod_ouwiki-pageselector', function(Y) {
+    M.mod_ouwiki = M.mod_ouwiki || {};
+    M.mod_ouwiki.pageselector = M.mod_ouwiki.pageselector || {
+            init: function(pagesselected) {
+                Y.all('.ouw_indextree').each(function(list) {
+                    list.all('input.ouwiki_page_checkbox').each(function(checkbox) {
+                        var pageid = checkbox.get('value');
+                        if (pagesselected != null) {
+                            for (var a = 0, b = pagesselected.length; a < b; a++) {
+                                if (pagesselected[a] == pageid) {
+                                    checkbox.set('checked', true);
+                                }
+                            }
+                        }
+                        checkbox.on('click', function (e) {
+                            // For this checkbox work out if we should select/de-select child pages.
+                            var node = e.target;
+                            if (node.get('checked')) {
+                                // Selecting - select any child pages.
+                                node.get('parentNode').all('ul li input.ouwiki_page_checkbox').each(
+                                        function (child) {
+                                            child.set('checked', true);
+                                });
+                            } else {
+                             // De-selecting - de-select any child pages.
+                                node.get('parentNode').all('ul li input.ouwiki_page_checkbox').each(
+                                        function (child) {
+                                            child.set('checked', false);
+                                });
+                            }
+                        });
+                    });
+                });
+            }
+        };
+    }, '@VERSION@', {requires: ['node', 'array']}
+);
-- 
1.8.3.1

