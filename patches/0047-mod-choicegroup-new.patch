From 48861b9fc7f76ea62d2bc45044490f9630054b93 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Wed, 11 Oct 2017 21:30:24 +0300
Subject: [PATCH 47/95] mod/choicegroup (new)

---
 mod/choicegroup/README.md                          |   39 +
 .../backup_choicegroup_activity_task.class.php     |   68 ++
 .../moodle2/backup_choicegroup_settingslib.php     |   27 +
 .../backup/moodle2/backup_choicegroup_stepslib.php |   67 ++
 .../restore_choicegroup_activity_task.class.php    |  115 +++
 .../moodle2/restore_choicegroup_stepslib.php       |   80 ++
 mod/choicegroup/classes/event/choice_removed.php   |  101 ++
 mod/choicegroup/classes/event/choice_updated.php   |  101 ++
 .../event/course_module_instance_list_viewed.php   |   39 +
 .../classes/event/course_module_viewed.php         |   63 ++
 mod/choicegroup/classes/event/report_viewed.php    |   84 ++
 mod/choicegroup/db/access.php                      |   90 ++
 mod/choicegroup/db/install.xml                     |   48 +
 mod/choicegroup/db/log.php                         |   36 +
 mod/choicegroup/db/upgrade.php                     |   71 ++
 mod/choicegroup/index.php                          |  118 +++
 mod/choicegroup/javascript.js                      |   75 ++
 mod/choicegroup/lang/en/choicegroup.php            |  154 +++
 mod/choicegroup/lang/es/choicegroup.php            |  119 +++
 mod/choicegroup/lang/et/choicegroup.php            |  107 ++
 mod/choicegroup/lang/fi/choicegroup.php            |  116 +++
 mod/choicegroup/lang/fr/choicegroup.php            |  148 +++
 mod/choicegroup/lang/it/choicegroup.php            |  107 ++
 mod/choicegroup/lang/sv/choicegroup.php            |  115 +++
 mod/choicegroup/lib.php                            | 1058 ++++++++++++++++++++
 mod/choicegroup/mod_form.php                       |  295 ++++++
 mod/choicegroup/pix/column.png                     |  Bin 0 -> 94 bytes
 mod/choicegroup/pix/icon.gif                       |  Bin 0 -> 115 bytes
 mod/choicegroup/pix/icon.svg                       |  430 ++++++++
 mod/choicegroup/pix/row.png                        |  Bin 0 -> 154 bytes
 mod/choicegroup/renderer.php                       |  417 ++++++++
 mod/choicegroup/report.php                         |  304 ++++++
 mod/choicegroup/settings.php                       |   36 +
 mod/choicegroup/styles.css                         |  123 +++
 mod/choicegroup/version.php                        |   36 +
 mod/choicegroup/view.php                           |  265 +++++
 mod/choicegroup/yui/form/form.js                   |  430 ++++++++
 37 files changed, 5482 insertions(+)
 create mode 100644 mod/choicegroup/README.md
 create mode 100644 mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php
 create mode 100644 mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php
 create mode 100644 mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php
 create mode 100644 mod/choicegroup/backup/moodle2/restore_choicegroup_activity_task.class.php
 create mode 100644 mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php
 create mode 100644 mod/choicegroup/classes/event/choice_removed.php
 create mode 100644 mod/choicegroup/classes/event/choice_updated.php
 create mode 100644 mod/choicegroup/classes/event/course_module_instance_list_viewed.php
 create mode 100644 mod/choicegroup/classes/event/course_module_viewed.php
 create mode 100644 mod/choicegroup/classes/event/report_viewed.php
 create mode 100644 mod/choicegroup/db/access.php
 create mode 100644 mod/choicegroup/db/install.xml
 create mode 100644 mod/choicegroup/db/log.php
 create mode 100644 mod/choicegroup/db/upgrade.php
 create mode 100644 mod/choicegroup/index.php
 create mode 100644 mod/choicegroup/javascript.js
 create mode 100644 mod/choicegroup/lang/en/choicegroup.php
 create mode 100644 mod/choicegroup/lang/es/choicegroup.php
 create mode 100644 mod/choicegroup/lang/et/choicegroup.php
 create mode 100644 mod/choicegroup/lang/fi/choicegroup.php
 create mode 100644 mod/choicegroup/lang/fr/choicegroup.php
 create mode 100644 mod/choicegroup/lang/it/choicegroup.php
 create mode 100644 mod/choicegroup/lang/sv/choicegroup.php
 create mode 100644 mod/choicegroup/lib.php
 create mode 100644 mod/choicegroup/mod_form.php
 create mode 100644 mod/choicegroup/pix/column.png
 create mode 100644 mod/choicegroup/pix/icon.gif
 create mode 100644 mod/choicegroup/pix/icon.svg
 create mode 100644 mod/choicegroup/pix/row.png
 create mode 100644 mod/choicegroup/renderer.php
 create mode 100644 mod/choicegroup/report.php
 create mode 100644 mod/choicegroup/settings.php
 create mode 100644 mod/choicegroup/styles.css
 create mode 100644 mod/choicegroup/version.php
 create mode 100644 mod/choicegroup/view.php
 create mode 100644 mod/choicegroup/yui/form/form.js

diff --git a/mod/choicegroup/README.md b/mod/choicegroup/README.md
new file mode 100644
index 0000000..2ee058b
--- /dev/null
+++ b/mod/choicegroup/README.md
@@ -0,0 +1,39 @@
+General information
+====================
+
+This module allows students to enrol themselves in a group within a course. The teacher can choose from which groups the students can chose, and the maximum nummber of students allowed in each group.
+
+The students can view the members of each group before making a choise, and (if the teacher allows it) change their selected group until the deadline.
+
+This module is heavily based on the "choice" activity module, and behaves roughly like it. Making a choice enrols you in a group, changing your choice unenrols you from the precedent group and enrols you in the new one, and so on.
+
+
+Installation
+=============
+
+1. unzip, and copy into Moodle's /mod folder
+2. visit administration page to install module
+3. use in any course as wished
+
+
+Operation
+==========
+
+1. create groups within your course
+2. create a choicegroup activity and select groups which users can chose from
+
+
+See also
+=========
+
+ - [Moodle plugins entry page](http://moodle.org/plugins/view.php?plugin=mod_choicegroup)
+ - [Moodle.org forum discussion thread](http://moodle.org/mod/forum/discuss.php?d=174424)
+ - [Moodlefairy's review](http://www.youtube.com/watch?v=JQFaDLtHZdY)
+ - [Another review by Gavin Henrick](http://www.somerandomthoughts.com/blog/2011/10/13/review-activity-module-choice-group-for-moodle-2/)
+
+
+Thanks to
+==========
+
+ - Andr√© Lausch : German translation
+ - Luiggi Sansonetti : French translation
diff --git a/mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php b/mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php
new file mode 100644
index 0000000..2c1911e
--- /dev/null
+++ b/mod/choicegroup/backup/moodle2/backup_choicegroup_activity_task.class.php
@@ -0,0 +1,68 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once($CFG->dirroot . '/mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php'); // Because it exists (must)
+require_once($CFG->dirroot . '/mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php'); // Because it exists (optional)
+
+/**
+ * choicegroup backup task that provides all the settings and steps to perform one
+ * complete backup of the activity
+ */
+class backup_choicegroup_activity_task extends backup_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Choice only has one structure step
+        $this->add_step(new backup_choicegroup_activity_structure_step('choicegroup_structure', 'choicegroup.xml'));
+    }
+
+    /**
+     * Code the transformations to perform in the activity in
+     * order to get transportable (encoded) links
+     */
+    static public function encode_content_links($content) {
+        global $CFG;
+
+        $base = preg_quote($CFG->wwwroot,"/");
+
+        // Link to the list of choicegroups
+        $search="/(".$base."\/mod\/choicegroup\/index.php\?id\=)([0-9]+)/";
+        $content= preg_replace($search, '$@CHOICEGROUPINDEX*$2@$', $content);
+
+        // Link to choicegroup view by moduleid
+        $search="/(".$base."\/mod\/choicegroup\/view.php\?id\=)([0-9]+)/";
+        $content= preg_replace($search, '$@CHOICEGROUPVIEWBYID*$2@$', $content);
+
+        return $content;
+    }
+}
diff --git a/mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php b/mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php
new file mode 100644
index 0000000..b66e78a
--- /dev/null
+++ b/mod/choicegroup/backup/moodle2/backup_choicegroup_settingslib.php
@@ -0,0 +1,27 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+ // This activity has not particular settings but the inherited from the generic
+ // backup_activity_task so here there isn't any class definition, like the ones
+ // existing in /backup/moodle2/backup_settingslib.php (activities section)
diff --git a/mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php b/mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php
new file mode 100644
index 0000000..295fcad
--- /dev/null
+++ b/mod/choicegroup/backup/moodle2/backup_choicegroup_stepslib.php
@@ -0,0 +1,67 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/**
+ * Define all the backup steps that will be used by the backup_choicegroup_activity_task
+ */
+
+/**
+ * Define the complete choicegroup structure for backup, with file and id annotations
+ */
+class backup_choicegroup_activity_structure_step extends backup_activity_structure_step {
+
+    protected function define_structure() {
+
+        // Define each element separated
+        $choicegroup = new backup_nested_element('choicegroup', array('id'), array(
+            'name', 'intro', 'introformat', 'publish',
+            'showresults', 'display', 'allowupdate', 'allowunanswered',
+            'limitanswers', 'timeopen', 'timeclose', 'timemodified',
+            'completionsubmit', 'sortgroupsby'));
+
+        $options = new backup_nested_element('options');
+
+        $option = new backup_nested_element('option', array('id'), array(
+            'groupid', 'maxanswers', 'timemodified'));
+
+        // Build the tree
+        $choicegroup->add_child($options);
+        $options->add_child($option);
+
+        // Define sources
+        $choicegroup->set_source_table('choicegroup', array('id' => backup::VAR_ACTIVITYID));
+
+        $option->set_source_sql('
+            SELECT *
+              FROM {choicegroup_options}
+             WHERE choicegroupid = ?',
+            array(backup::VAR_PARENTID));
+
+        // Define file annotations
+        $choicegroup->annotate_files('mod_choicegroup', 'intro', null); // This file area hasn't itemid
+
+        // Return the root element (choicegroup), wrapped into standard activity structure
+        return $this->prepare_activity_structure($choicegroup);
+    }
+}
diff --git a/mod/choicegroup/backup/moodle2/restore_choicegroup_activity_task.class.php b/mod/choicegroup/backup/moodle2/restore_choicegroup_activity_task.class.php
new file mode 100644
index 0000000..50f5639
--- /dev/null
+++ b/mod/choicegroup/backup/moodle2/restore_choicegroup_activity_task.class.php
@@ -0,0 +1,115 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php'); // Because it exists (must)
+
+/**
+ * choicegroup restore task that provides all the settings and steps to perform one
+ * complete restore of the activity
+ */
+class restore_choicegroup_activity_task extends restore_activity_task {
+
+    /**
+     * Define (add) particular settings this activity can have
+     */
+    protected function define_my_settings() {
+        // No particular settings for this activity
+    }
+
+    /**
+     * Define (add) particular steps this activity can have
+     */
+    protected function define_my_steps() {
+        // Choice only has one structure step
+        $this->add_step(new restore_choicegroup_activity_structure_step('choicegroup_structure', 'choicegroup.xml'));
+    }
+
+    /**
+     * Define the contents in the activity that must be
+     * processed by the link decoder
+     */
+    static public function define_decode_contents() {
+        $contents = array();
+
+        $contents[] = new restore_decode_content('choicegroup', array('intro'), 'choicegroup');
+
+        return $contents;
+    }
+
+    /**
+     * Define the decoding rules for links belonging
+     * to the activity to be executed by the link decoder
+     */
+    static public function define_decode_rules() {
+        $rules = array();
+
+        $rules[] = new restore_decode_rule('CHOICEGROUPVIEWBYID', '/mod/choicegroup/view.php?id=$1', 'course_module');
+        $rules[] = new restore_decode_rule('CHOICEGROUPINDEX', '/mod/choicegroup/index.php?id=$1', 'course');
+
+        return $rules;
+
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * choicegroup logs. It must return one array
+     * of {@link restore_log_rule} objects
+     */
+    static public function define_restore_log_rules() {
+        $rules = array();
+
+        $rules[] = new restore_log_rule('choicegroup', 'add', 'view.php?id={course_module}', '{choicegroup}');
+        $rules[] = new restore_log_rule('choicegroup', 'update', 'view.php?id={course_module}', '{choicegroup}');
+        $rules[] = new restore_log_rule('choicegroup', 'view', 'view.php?id={course_module}', '{choicegroup}');
+        $rules[] = new restore_log_rule('choicegroup', 'choose', 'view.php?id={course_module}', '{choicegroup}');
+        $rules[] = new restore_log_rule('choicegroup', 'choose again', 'view.php?id={course_module}', '{choicegroup}');
+        $rules[] = new restore_log_rule('choicegroup', 'report', 'report.php?id={course_module}', '{choicegroup}');
+
+        return $rules;
+    }
+
+    /**
+     * Define the restore log rules that will be applied
+     * by the {@link restore_logs_processor} when restoring
+     * course logs. It must return one array
+     * of {@link restore_log_rule} objects
+     *
+     * Note this rules are applied when restoring course logs
+     * by the restore final task, but are defined here at
+     * activity level. All them are rules not linked to any module instance (cmid = 0)
+     */
+    static public function define_restore_log_rules_for_course() {
+        $rules = array();
+
+        // Fix old wrong uses (missing extension)
+        $rules[] = new restore_log_rule('choicegroup', 'view all', 'index?id={course}', null,
+                                        null, null, 'index.php?id={course}');
+        $rules[] = new restore_log_rule('choicegroup', 'view all', 'index.php?id={course}', null);
+
+        return $rules;
+    }
+}
diff --git a/mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php b/mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php
new file mode 100644
index 0000000..b9864cc
--- /dev/null
+++ b/mod/choicegroup/backup/moodle2/restore_choicegroup_stepslib.php
@@ -0,0 +1,80 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package moodlecore
+ * @subpackage backup-moodle2
+ * @copyright 2010 onwards Eloy Lafuente (stronk7) {@link http://stronk7.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+/**
+ * Define all the restore steps that will be used by the restore_choicegroup_activity_task
+ */
+
+/**
+ * Structure step to restore one choicegroup activity
+ */
+class restore_choicegroup_activity_structure_step extends restore_activity_structure_step {
+
+    protected function define_structure() {
+
+        $paths = array();
+
+        $paths[] = new restore_path_element('choicegroup', '/activity/choicegroup');
+        $paths[] = new restore_path_element('choicegroup_option', '/activity/choicegroup/options/option');
+
+        // Return the paths wrapped into standard activity structure
+        return $this->prepare_activity_structure($paths);
+    }
+
+    protected function process_choicegroup($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+        $data->course = $this->get_courseid();
+
+        $data->timeopen = $this->apply_date_offset($data->timeopen);
+        $data->timeclose = $this->apply_date_offset($data->timeclose);
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+
+        // insert the choicegroup record
+        $newitemid = $DB->insert_record('choicegroup', $data);
+        // immediately after inserting "activity" record, call this
+        $this->apply_activity_instance($newitemid);
+    }
+
+    protected function process_choicegroup_option($data) {
+        global $DB;
+
+        $data = (object)$data;
+        $oldid = $data->id;
+
+        $data->choicegroupid = $this->get_new_parentid('choicegroup');
+        $data->timemodified = $this->apply_date_offset($data->timemodified);
+        $data->groupid = $this->get_mappingid('group', $data->groupid);
+
+        $newitemid = $DB->insert_record('choicegroup_options', $data);
+        $this->set_mapping('choicegroup_option', $oldid, $newitemid);
+    }
+
+    protected function after_execute() {
+        // Add choicegroup related files, no need to match by itemname (just internally handled context)
+        $this->add_related_files('mod_choicegroup', 'intro', null);
+    }
+}
diff --git a/mod/choicegroup/classes/event/choice_removed.php b/mod/choicegroup/classes/event/choice_removed.php
new file mode 100644
index 0000000..de5e0df
--- /dev/null
+++ b/mod/choicegroup/classes/event/choice_removed.php
@@ -0,0 +1,101 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_choicegroup post created event.
+ *
+ * @package    mod_choicegroup
+ * @copyright  2014 Dan Poltawski <dan@moodle.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_choicegroup\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_choicegroup post created event class.
+ *
+ * @property-read array $other {
+ *      Extra information about the event.
+ *
+ *      - int discussionid: The discussion id the post is part of.
+ *      - int choicegroupid: The choicegroup id the post is part of.
+ *      - string choicegrouptype: The type of choicegroup the post is part of.
+ * }
+ *
+ * @package    mod_choicegroup
+ * @since      Moodle 2.7
+ * @copyright  2014 Dan Poltawski <dan@moodle.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class choice_removed extends \core\event\base {
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'd';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'groups';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $a = new \stdClass();
+        $a->userid = $this->userid;
+        $a->contextinstanceid = $this->contextinstanceid;
+        return get_string('event:removed_desc', 'mod_choicegroup', $a);
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:removed', 'mod_choicegroup');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/choicegroup/view.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        // The legacy log table expects a relative path to /mod/choicegroup/.
+        $logurl = substr($this->get_url()->out_as_local_url(), strlen('/mod/choicegroup/'));
+
+        return array($this->courseid, 'choicegroup', 'choice removed', $logurl, $this->objectid, $this->contextinstanceid);
+    }
+
+
+}
+
diff --git a/mod/choicegroup/classes/event/choice_updated.php b/mod/choicegroup/classes/event/choice_updated.php
new file mode 100644
index 0000000..476903f
--- /dev/null
+++ b/mod/choicegroup/classes/event/choice_updated.php
@@ -0,0 +1,101 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_choicegroup post created event.
+ *
+ * @package    mod_choicegroup
+ * @copyright  2014 Dan Poltawski <dan@moodle.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_choicegroup\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_choicegroup post created event class.
+ *
+ * @property-read array $other {
+ *      Extra information about the event.
+ *
+ *      - int discussionid: The discussion id the post is part of.
+ *      - int choicegroupid: The choicegroup id the post is part of.
+ *      - string choicegrouptype: The type of choicegroup the post is part of.
+ * }
+ *
+ * @package    mod_choicegroup
+ * @since      Moodle 2.7
+ * @copyright  2014 Dan Poltawski <dan@moodle.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class choice_updated extends \core\event\base {
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'c';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'groups';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $a = new \stdClass();
+        $a->userid = $this->userid;
+        $a->contextinstanceid = $this->contextinstanceid;
+        return get_string('event:answered_desc', 'mod_choicegroup', $a);
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:answered', 'mod_choicegroup');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/choicegroup/view.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        // The legacy log table expects a relative path to /mod/choicegroup/.
+        $logurl = substr($this->get_url()->out_as_local_url(), strlen('/mod/choicegroup/'));
+
+        return array($this->courseid, 'choicegroup', 'choice updated', $logurl, $this->objectid, $this->contextinstanceid);
+    }
+
+
+}
+
diff --git a/mod/choicegroup/classes/event/course_module_instance_list_viewed.php b/mod/choicegroup/classes/event/course_module_instance_list_viewed.php
new file mode 100644
index 0000000..3f6d9b8
--- /dev/null
+++ b/mod/choicegroup/classes/event/course_module_instance_list_viewed.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_forum instance list viewed event.
+ *
+ * @package    mod_forum
+ * @copyright  2014 Dan Poltawski <dan@moodle.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_choicegroup\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * The mod_forum instance list viewed event class.
+ *
+ * @package    mod_forum
+ * @since      Moodle 2.7
+ * @copyright  2014 Dan Poltawski <dan@moodle.com>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class course_module_instance_list_viewed extends \core\event\course_module_instance_list_viewed {
+    // No need for any code here as everything is handled by the parent class.
+}
diff --git a/mod/choicegroup/classes/event/course_module_viewed.php b/mod/choicegroup/classes/event/course_module_viewed.php
new file mode 100644
index 0000000..80b1afd
--- /dev/null
+++ b/mod/choicegroup/classes/event/course_module_viewed.php
@@ -0,0 +1,63 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_choicegroup course module viewed event.
+ *
+ * @package    mod_choicegroup
+ * @copyright  2014 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_choicegroup\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+class course_module_viewed extends \core\event\course_module_viewed {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_PARTICIPATING;
+        $this->data['objecttable'] = 'choicegroup';
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/choicegroup/view.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'choicegroup', 'view group choice', 'view.php?id=' . $this->contextinstanceid,
+            $this->objectid, $this->contextinstanceid);
+    }
+
+}
+
diff --git a/mod/choicegroup/classes/event/report_viewed.php b/mod/choicegroup/classes/event/report_viewed.php
new file mode 100644
index 0000000..5e9b02a
--- /dev/null
+++ b/mod/choicegroup/classes/event/report_viewed.php
@@ -0,0 +1,84 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * The mod_choicegroup course module viewed event.
+ *
+ * @package    mod_choicegroup
+ * @copyright  2014 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace mod_choicegroup\event;
+
+defined('MOODLE_INTERNAL') || die();
+
+class report_viewed extends \core\event\course_module_viewed {
+
+    /**
+     * Init method.
+     *
+     * @return void
+     */
+    protected function init() {
+        $this->data['crud'] = 'r';
+        $this->data['edulevel'] = self::LEVEL_TEACHING;
+        $this->data['objecttable'] = 'choicegroup';
+    }
+
+    /**
+     * Returns description of what happened.
+     *
+     * @return string
+     */
+    public function get_description() {
+        $a = new \stdClass();
+        $a->userid = $this->userid;
+        $a->contextinstanceid = $this->contextinstanceid;
+        return get_string('event:reportviewed_desc', 'mod_choicegroup', $a);
+    }
+
+    /**
+     * Return localised event name.
+     *
+     * @return string
+     */
+    public static function get_name() {
+        return get_string('event:reportviewed', 'mod_choicegroup');
+    }
+
+    /**
+     * Get URL related to the action
+     *
+     * @return \moodle_url
+     */
+    public function get_url() {
+        return new \moodle_url('/mod/choicegroup/view.php', array('id' => $this->contextinstanceid));
+    }
+
+    /**
+     * Return the legacy event log data.
+     *
+     * @return array|null
+     */
+    protected function get_legacy_logdata() {
+        return array($this->courseid, 'choicegroup', 'view group choice report', 'view.php?id=' . $this->contextinstanceid,
+            $this->objectid, $this->contextinstanceid);
+    }
+
+}
+
diff --git a/mod/choicegroup/db/access.php b/mod/choicegroup/db/access.php
new file mode 100644
index 0000000..30d6b93
--- /dev/null
+++ b/mod/choicegroup/db/access.php
@@ -0,0 +1,90 @@
+<?php
+//
+// Capability definitions for the choicegroup module.
+//
+// The capabilities are loaded into the database table when the module is
+// installed or updated. Whenever the capability definitions are updated,
+// the module version number should be bumped up.
+//
+// The system has four possible values for a capability:
+// CAP_ALLOW, CAP_PREVENT, CAP_PROHIBIT, and inherit (not set).
+//
+//
+// CAPABILITY NAMING CONVENTION
+//
+// It is important that capability names are unique. The naming convention
+// for capabilities that are specific to modules and blocks is as follows:
+//   [mod/block]/<plugin_name>:<capabilityname>
+//
+// component_name should be the same as the directory name of the mod or block.
+//
+// Core moodle capabilities are defined thus:
+//    moodle/<capabilityclass>:<capabilityname>
+//
+// Examples: mod/forum:viewpost
+//           block/recent_activity:view
+//           moodle/site:deleteuser
+//
+// The variable name for the capability definitions array is $capabilities
+
+
+$capabilities = array(
+
+    'mod/choicegroup:choose' => array(
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'student' => CAP_ALLOW,
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW
+        )
+    ),
+
+    'mod/choicegroup:addinstance' => array(
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+
+    'mod/choicegroup:readresponses' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/choicegroup:deleteresponses' => array(
+
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    ),
+
+    'mod/choicegroup:downloadresponses' => array(
+
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_MODULE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'manager' => CAP_ALLOW
+        )
+    )
+);
+
+
diff --git a/mod/choicegroup/db/install.xml b/mod/choicegroup/db/install.xml
new file mode 100644
index 0000000..905dfff
--- /dev/null
+++ b/mod/choicegroup/db/install.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="mod/choicegroup/db" VERSION="20120425" COMMENT="XMLDB file for Moodle mod/choicegroup"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="../../../lib/xmldb/xmldb.xsd"
+>
+  <TABLES>
+    <TABLE NAME="choicegroup" COMMENT="Available choicegroups are stored here" NEXT="choicegroup_options">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="course"/>
+        <FIELD NAME="course" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="id" NEXT="name"/>
+        <FIELD NAME="name" TYPE="char" LENGTH="255" NOTNULL="true" SEQUENCE="false" PREVIOUS="course" NEXT="intro"/>
+        <FIELD NAME="intro" TYPE="text" LENGTH="small" NOTNULL="true" SEQUENCE="false" PREVIOUS="name" NEXT="introformat"/>
+        <FIELD NAME="introformat" TYPE="int" LENGTH="4" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="intro" NEXT="publish"/>
+        <FIELD NAME="publish" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="introformat" NEXT="multipleenrollmentspossible"/>
+        <FIELD NAME="multipleenrollmentspossible" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="publish" NEXT="showresults"/>
+        <FIELD NAME="showresults" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="multipleenrollmentspossible" NEXT="display"/>
+        <FIELD NAME="display" TYPE="int" LENGTH="4" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="showresults" NEXT="allowupdate"/>
+        <FIELD NAME="allowupdate" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="display" NEXT="showunanswered"/>
+        <FIELD NAME="showunanswered" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="allowupdate" NEXT="limitanswers"/>
+        <FIELD NAME="limitanswers" TYPE="int" LENGTH="2" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="showunanswered" NEXT="timeopen"/>
+        <FIELD NAME="timeopen" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="limitanswers" NEXT="timeclose"/>
+        <FIELD NAME="timeclose" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="timeopen" NEXT="timemodified"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="timeclose" NEXT="completionsubmit"/>
+        <FIELD NAME="completionsubmit" TYPE="int" LENGTH="1" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" COMMENT="If this field is set to 1, then the activity will be automatically marked as 'complete' once the user submits their choicegroup." PREVIOUS="timemodified" NEXT="sortgroupsby"/>
+        <FIELD NAME="sortgroupsby" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="false" DEFAULT="0" SEQUENCE="false" COMMENT="Column used to sort groups." PREVIOUS="completionsubmit"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="course" UNIQUE="false" FIELDS="course"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="choicegroup_options" COMMENT="available options to choicegroup" PREVIOUS="choicegroup">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" SEQUENCE="true" NEXT="choicegroupid"/>
+        <FIELD NAME="choicegroupid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="id" NEXT="groupid"/>
+        <FIELD NAME="groupid" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="choicegroupid" NEXT="maxanswers"/>
+        <FIELD NAME="maxanswers" TYPE="int" LENGTH="10" NOTNULL="false" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="groupid" NEXT="timemodified"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" UNSIGNED="true" DEFAULT="0" SEQUENCE="false" PREVIOUS="maxanswers"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id" NEXT="choicegroupid"/>
+        <KEY NAME="choicegroupid" TYPE="foreign" FIELDS="choicegroupid" REFTABLE="choicegroup" REFFIELDS="id" PREVIOUS="primary"/>
+      </KEYS>
+    </TABLE>
+  </TABLES>
+</XMLDB>
diff --git a/mod/choicegroup/db/log.php b/mod/choicegroup/db/log.php
new file mode 100644
index 0000000..02f76a3
--- /dev/null
+++ b/mod/choicegroup/db/log.php
@@ -0,0 +1,36 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Definition of log events
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2010 Petr Skoda (http://skodak.org)
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$logs = array(
+    array('module'=>'choicegroup', 'action'=>'view', 'mtable'=>'choicegroup', 'field'=>'name'),
+    array('module'=>'choicegroup', 'action'=>'update', 'mtable'=>'choicegroup', 'field'=>'name'),
+    array('module'=>'choicegroup', 'action'=>'add', 'mtable'=>'choicegroup', 'field'=>'name'),
+    array('module'=>'choicegroup', 'action'=>'report', 'mtable'=>'choicegroup', 'field'=>'name'),
+    array('module'=>'choicegroup', 'action'=>'choose', 'mtable'=>'choicegroup', 'field'=>'name'),
+    array('module'=>'choicegroup', 'action'=>'choose again', 'mtable'=>'choicegroup', 'field'=>'name'),
+);
\ No newline at end of file
diff --git a/mod/choicegroup/db/upgrade.php b/mod/choicegroup/db/upgrade.php
new file mode 100644
index 0000000..b0a2467
--- /dev/null
+++ b/mod/choicegroup/db/upgrade.php
@@ -0,0 +1,71 @@
+<?php
+
+// This file keeps track of upgrades to
+// the choicegroup module
+//
+// Sometimes, changes between versions involve
+// alterations to database structures and other
+// major things that may break installations.
+//
+// The upgrade function in this file will attempt
+// to perform all the necessary actions to upgrade
+// your older installation to the current version.
+//
+// If there's something it cannot do itself, it
+// will tell you what you need to do.
+//
+// The commands in here will all be database-neutral,
+// using the methods of database_manager class
+//
+// Please do not forget to use upgrade_set_timeout()
+// before any action that may take longer time to finish.
+
+function xmldb_choicegroup_upgrade($oldversion) {
+    global $CFG, $DB;
+
+    $dbman = $DB->get_manager();
+    if ($oldversion < 2013070900) {
+
+        if ($oldversion < 2012042500) {
+
+            /// remove the no longer needed choicegroup_answers DB table
+            $choicegroup_answers = new xmldb_table('choicegroup_answers');
+            $dbman->drop_table($choicegroup_answers);
+
+            /// change the choicegroup_options.text (text) field as choicegroup_options.groupid (int)
+            $choicegroup_options =  new xmldb_table('choicegroup_options');
+            $field_text =           new xmldb_field('text', XMLDB_TYPE_TEXT, 'small', null, null, null, null, 'choicegroupid');
+            $field_groupid =        new xmldb_field('groupid', XMLDB_TYPE_INTEGER, '10', null, null, null, '0', 'choicegroupid');
+
+            $dbman->rename_field($choicegroup_options, $field_text, 'groupid');
+            $dbman->change_field_type($choicegroup_options, $field_groupid);
+
+        }
+        // Define table choicegroup to be created
+        $table = new xmldb_table('choicegroup');
+
+        // Adding fields to table choicegroup
+        $newField = $table->add_field('multipleenrollmentspossible', XMLDB_TYPE_INTEGER, '2', null, XMLDB_NOTNULL, null, '0');
+        $dbman->add_field($table, $newField); 
+
+
+        upgrade_mod_savepoint(true, 2013070900, 'choicegroup');
+    }
+
+    if ($oldversion < 2015022301) {
+        $table = new xmldb_table('choicegroup');
+
+        // Adding field to table choicegroup
+        $newField = $table->add_field('sortgroupsby', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0');
+
+        if (!$dbman->field_exists($table, $newField)) {
+            $dbman->add_field($table, $newField);
+        }
+
+        upgrade_mod_savepoint(true, 2015022301, 'choicegroup');
+    }
+
+    return true;
+}
+
+
diff --git a/mod/choicegroup/index.php b/mod/choicegroup/index.php
new file mode 100644
index 0000000..7fe51c6
--- /dev/null
+++ b/mod/choicegroup/index.php
@@ -0,0 +1,118 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+require_once("../../config.php");
+require_once("lib.php");
+
+$id = required_param('id',PARAM_INT);   // course
+
+$PAGE->set_url('/mod/choicegroup/index.php', array('id'=>$id));
+
+if (!$course = $DB->get_record('course', array('id'=>$id))) {
+    print_error('invalidcourseid');
+}
+
+require_course_login($course);
+$PAGE->set_pagelayout('incourse');
+
+$params = array(
+    'context' => context_course::instance($course->id)
+);
+$event = \mod_choicegroup\event\course_module_instance_list_viewed::create($params);
+$event->add_record_snapshot('course', $course);
+$event->trigger();
+
+$strchoicegroup = get_string("modulename", "choicegroup");
+$strchoicegroups = get_string("modulenameplural", "choicegroup");
+$strsectionname  = get_string('sectionname', 'format_'.$course->format);
+$PAGE->set_title($strchoicegroups);
+$PAGE->set_heading($course->fullname);
+$PAGE->navbar->add($strchoicegroups);
+echo $OUTPUT->header();
+
+if (! $choicegroups = get_all_instances_in_course("choicegroup", $course)) {
+    notice(get_string('thereareno', 'moodle', $strchoicegroups), "../../course/view.php?id=$course->id");
+}
+
+$usesections = course_format_uses_sections($course->format);
+if ($usesections) {
+    $modinfo = get_fast_modinfo($course->id);
+    $sections = $modinfo->get_section_info_all();
+}
+
+$table = new html_table();
+
+if ($usesections) {
+    $table->head  = array ($strsectionname, get_string("question"), get_string("answer"));
+    $table->align = array ("center", "left", "left");
+} else {
+    $table->head  = array (get_string("question"), get_string("answer"));
+    $table->align = array ("left", "left");
+}
+
+$currentsection = "";
+
+foreach ($choicegroups as $choicegroup) {
+    $choicegroup_groups = choicegroup_get_groups($choicegroup);
+    $answer = choicegroup_get_user_answer($choicegroup, $USER->id);
+    if (!empty($answer->id)) {
+        $aa = $answer->name;
+    } else {
+        $aa = "";
+    }
+    if ($usesections) {
+        $printsection = "";
+        if ($choicegroup->section !== $currentsection) {
+            if ($choicegroup->section) {
+                $printsection = get_section_name($course, $sections[$choicegroup->section]);
+            }
+            if ($currentsection !== "") {
+                $table->data[] = 'hr';
+            }
+            $currentsection = $choicegroup->section;
+        }
+    }
+
+    //Calculate the href
+    if (!$choicegroup->visible) {
+        //Show dimmed if the mod is hidden
+        $tt_href = "<a class=\"dimmed\" href=\"view.php?id=$choicegroup->coursemodule\">".format_string($choicegroup->name,true)."</a>";
+    } else {
+        //Show normal if the mod is visible
+        $tt_href = "<a href=\"view.php?id=$choicegroup->coursemodule\">".format_string($choicegroup->name,true)."</a>";
+    }
+    if ($usesections) {
+        $table->data[] = array ($printsection, $tt_href, $aa);
+    } else {
+        $table->data[] = array ($tt_href, $aa);
+    }
+}
+echo "<br />";
+echo html_writer::table($table);
+
+echo $OUTPUT->footer();
+
diff --git a/mod/choicegroup/javascript.js b/mod/choicegroup/javascript.js
new file mode 100644
index 0000000..9b5cf35
--- /dev/null
+++ b/mod/choicegroup/javascript.js
@@ -0,0 +1,75 @@
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+var NDY = YUI().use("node", function(Y) {
+    var choicegroup_memberdisplay_click = function(e) {
+
+        var names = Y.all('div.choicegroups-membersnames'),
+            btnShowHide = Y.all('a.choicegroup-memberdisplay');
+
+        btnShowHide.toggleClass('hidden');
+        names.toggleClass('hidden');
+
+        // Fix for Chrome where focus is not returned to the link after it is toggled.
+        if (document.getElementsByClassName) {
+            var elements = document.getElementsByClassName('choicegroup-membershow');
+            if (elements[0].classList.contains('hidden')) {
+                elements = document.getElementsByClassName('choicegroup-memberhide');
+            }
+            elements[0].focus();
+        }
+        e.preventDefault();
+
+    };
+    Y.on("click", choicegroup_memberdisplay_click, "a.choicegroup-memberdisplay");
+
+    var choicegroup_descriptiondisplay_click = function(e) {
+
+        var names = Y.all('div.choicegroups-descriptions'),
+            btnShowHide = Y.all('a.choicegroup-descriptiondisplay');
+
+        btnShowHide.toggleClass('hidden');
+        names.toggleClass('hidden');
+
+        // Fix for Chrome where focus is not returned to the link after it is toggled.
+        if (document.getElementsByClassName) {
+            var elements = document.getElementsByClassName('choicegroup-descriptionshow');
+            if (elements[0].classList.contains('hidden')) {
+                elements = document.getElementsByClassName('choicegroup-descriptionhide');
+            }
+            elements[0].focus();
+        }
+        e.preventDefault();
+
+    };
+    Y.on("click", choicegroup_descriptiondisplay_click, "a.choicegroup-descriptiondisplay");
+    Y.delegate('click', function () {
+        Y.one(".modchoicegroupsumbit").hide();
+    }, Y.config.doc, "table.choicegroups input[id^='choiceid_'][type='radio'][checked]", this);
+    Y.delegate('click', function () {
+        Y.one(".modchoicegroupsumbit").show();
+    }, Y.config.doc, "table.choicegroups input[id^='choiceid_'][type='radio']:not([checked])", this);
+});
diff --git a/mod/choicegroup/lang/en/choicegroup.php b/mod/choicegroup/lang/en/choicegroup.php
new file mode 100644
index 0000000..38df724
--- /dev/null
+++ b/mod/choicegroup/lang/en/choicegroup.php
@@ -0,0 +1,154 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'choice', language 'en', branch 'MOODLE_20_STABLE'
+ *
+ * @package   choice
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['addmorechoices'] = 'Add more choices';
+$string['allowupdate'] = 'Allow choice to be updated';
+$string['answered'] = 'Answered';
+$string['completionsubmit'] = 'Show as complete when user makes a choice';
+$string['defaultsettings'] = 'Default settings';
+$string['displayhorizontal'] = 'Display horizontally';
+$string['displaymode'] = 'Display mode';
+$string['displayvertical'] = 'Display vertically';
+$string['expired'] = 'Sorry, this activity closed on {$a} and is no longer available';
+$string['fillinatleastoneoption'] = 'You need to provide at least one possible answer.';
+$string['fillinatleasttwooptions'] = 'You need to provide at least two possible answers.';
+$string['full'] = '(Full)';
+$string['havetologin'] = 'You have to log in before you can submit your choice';
+$string['choice'] = 'Choice';
+$string['choicegroupclose'] = 'Until';
+$string['choicegroup:deleteresponses'] = 'Delete responses';
+$string['choicegroup:downloadresponses'] = 'Download responses';
+$string['choicegroupfull'] = 'This group choice is full and there are no available places.';
+$string['choicegroup:choose'] = 'Record a choice';
+$string['choicegroupname'] = 'Group choice name';
+$string['choicegroupopen'] = 'Open';
+$string['choicegroupoptions'] = 'Choice options';
+$string['choicegroupoptions_help'] = 'Here is where you specify which groups participants can choose from.
+
+The list on the left displays all available groups and groupings. To add one or several groups, select these from the list and click "Add". To add all groups from a grouping, select the grouping and click "Add".
+
+The selected groups appear on the list on the right.
+
+To remove any groups from the selection, select them from the list on the right and click "Remove".';
+$string['limitanswers_help'] = 'This option allows you to limit the number of participants that can select each choice option. When the limit is reached then no-one else can select that option.
+
+If limits are disabled then any number of participants can select each of the options.';
+$string['choicegroup:addinstance'] = 'Add a new group choice activity';
+$string['choicegroup:readresponses'] = 'Read responses';
+$string['choicegroupsaved'] = 'Your choice has been saved';
+$string['choicetext'] = 'Choice text';
+$string['chooseaction'] = 'Choose an action ...';
+$string['choosegroup'] = 'Choose a group';
+$string['createdate'] = 'Group creation date';
+$string['limit'] = 'Limit';
+$string['limitanswers'] = 'Limit the number of responses allowed';
+$string['modulename'] = 'Group choice';
+$string['modulename_help'] = 'The Group Choice module allows students to enrol themselves in a group within a course. The teacher can select which groups students can choose from and the maximum number of students allowed in each group.';
+$string['modulenameplural'] = 'Group choices';
+$string['mustchooseone'] = 'You must choose an answer before saving.  Nothing was saved.';
+$string['noguestchoose'] = 'Sorry, guests are not allowed to make choices.';
+$string['noresultsviewable'] = 'The results are not currently viewable.';
+$string['neverresultsviewable'] = 'The results are not viewable.';
+$string['name'] = 'Name';
+$string['afterresultsviewable'] = 'The results will be visible after you have made your choice.';
+$string['notyetresultsviewable'] = 'The results will be visible after this activity has closed.';
+$string['notanswered'] = 'Not answered yet';
+$string['notenrolledchoose'] = 'Sorry, only enrolled users are allowed to make choices.';
+$string['notopenyet'] = 'Sorry, this activity is not available until {$a}';
+$string['option'] = 'Group';
+$string['pluginadministration'] = 'Choice administration';
+$string['pluginname'] = 'Group choice';
+$string['privacy'] = 'Privacy of results';
+$string['publish'] = 'Publish results';
+$string['publishafteranswer'] = 'Show results to students after they answer';
+$string['publishafterclose'] = 'Show results to students only after the choice is closed';
+$string['publishalways'] = 'Always show results to students';
+$string['publishanonymous'] = 'Publish anonymous results, do not show student names';
+$string['publishnames'] = 'Publish full results, showing names and their choices';
+$string['publishnot'] = 'Do not publish results to students';
+$string['removemychoicegroup'] = 'Remove my choice';
+$string['removeresponses'] = 'Remove all responses';
+$string['responses'] = 'Responses';
+$string['responsesto'] = 'Responses to {$a}';
+$string['savemychoicegroup'] = 'Save my choice';
+$string['showunanswered'] = 'Show column for unanswered';
+$string['spaceleft'] = 'space available';
+$string['spacesleft'] = 'spaces available';
+$string['systemdefault_date'] = 'System Default (currently Group creation date)';
+$string['systemdefault_name'] = 'System Default (currently Name)';
+$string['taken'] = 'Taken';
+$string['timerestrict'] = 'Restrict answering to this time period';
+$string['viewallresponses'] = 'View {$a} responses';
+$string['byparticipants'] = 'by {$a} participants';
+$string['withselected'] = 'With selected';
+$string['yourselection'] = 'Your selection';
+$string['skipresultgraph'] = 'Skip result graph';
+$string['sortgroupsby'] = 'Sort groups by';
+$string['moveselectedusersto'] = 'Move selected users to...';
+$string['numberofuser'] = 'The number of users';
+$string['groupdoesntexist'] = 'Some of the specified groups don\'t exist within this course. The teacher should create the necessary groups and/or modify this activity.';
+$string['samegroupused'] = 'The same group can not be used several times.';
+
+$string['members/max'] = 'Members / Capacity';
+$string['members/'] = 'Members';
+$string['groupmembers'] = 'Group members';
+$string['page-mod-choice-x'] = 'Any Group choice module page';
+$string['showdescription'] = 'Show descriptions';
+$string['hidedescription'] = 'Hide descriptions';
+$string['generallimitation'] = 'General limitation';
+$string['applytoallgroups'] = 'Apply to all groups';
+$string['pleasesetgroups'] = 'Please create at least two groups in this course.';
+
+$string['multipleenrollmentspossible'] = 'Allow enrollment to multiple groups';
+$string['and'] = 'and';
+$string['event:answered'] = 'Choice made';
+$string['event:answered_desc'] = 'The user with id \'{$a->userid}\' has chosen a group in the group choice with the course module id \'{$a->contextinstanceid}\'.';
+$string['event:removed'] = 'Choice removed';
+$string['event:removed_desc'] = 'The user with id \'{$a->userid}\' has removed his choice in the group choice with the course module id \'{$a->contextinstanceid}\'.';
+$string['event:reportviewed'] = 'Report viewed';
+$string['event:reportviewed_desc'] = 'The user with id \'{$a->userid}\' has viewed the report for the group choice activity with the course module id \'{$a->contextinstanceid}\'.';
+$string['groupsheader'] = "Groups";
+$string['the_value_you_entered_is_not_a_number'] = "The value you entered is not a number.";
+$string['add_groupings'] = "Add Groupings";
+$string['add_grouping'] = "Add Grouping";
+$string['add_groups'] = "Add Groups";
+$string['del_groups'] = "Remove Groups";
+$string['del_group'] = "Remove Group";
+$string['add_group'] = "Add Group";
+$string['add'] = "Add";
+$string['del'] = "Remove";
+$string['set_limit_for_group'] = "Limit For ";
+$string['available_groups'] = 'Available Groups';
+$string['selected_groups'] = 'Selected Groups';
+$string['char_bullet_collapsed'] = '‚ñ∫';
+$string['char_bullet_expanded'] = '‚ñº';
+$string['char_limitui_parenthesis_start'] = '‚¶ó';
+$string['char_limitui_parenthesis_end'] = '‚¶ò';
+$string['expand_all_groupings'] = 'Expand All Groupings';
+$string['collapse_all_groupings'] = 'Collapse All Groupings';
+$string['double_click_grouping_legend'] = 'Double click on a grouping to expand/collapse individually.';
+$string['double_click_group_legend'] = 'Double click on a group to add it.';
+
+
diff --git a/mod/choicegroup/lang/es/choicegroup.php b/mod/choicegroup/lang/es/choicegroup.php
new file mode 100644
index 0000000..fa1645b
--- /dev/null
+++ b/mod/choicegroup/lang/es/choicegroup.php
@@ -0,0 +1,119 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'choice', language 'es', branch 'MOODLE_24_STABLE'
+ *
+ * @package   choice
+ * @copyright 2013 Campus Virtual Universidad de C√°diz {@link http://campusvirtual.uca.es}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+/**********************************************************
+  Traduccido por el Campus Virtual Universidad de C√°diz 
+***********************************************************/
+
+$string['addmorechoices'] = 'A√±adir m√°s opciones';
+$string['allowupdate'] = 'Permitir cambiar opci√≥n';
+$string['answered'] = 'Respondido';
+$string['completionsubmit'] = 'Mostrar como completo cuando el usuario haga una elecci√≥n';
+$string['displayhorizontal'] = 'Mostrar horizontalmente';
+$string['displaymode'] = 'Modo de visualizaci√≥n';
+$string['displayvertical'] = 'Mostrar verticalmente';
+$string['expired'] = 'Lo sentimos, esta actividad est√° cerrada el {$a} y ya no est√° disponible';
+$string['fillinatleastoneoption'] = 'Necesitas dar al menos una respuesta.';
+$string['fillinatleasttwooptions'] = 'Necesitas dar al menos dos respuestas.';
+$string['full'] = '(Completo)';
+$string['havetologin'] = 'Necesias iniciar sesi√≥n antes de elegir opci√≥n';
+$string['choice'] = 'Elecci√≥n';
+$string['choicegroupclose'] = 'Hasta';
+$string['choicegroup:deleteresponses'] = 'Eliminar respuestas';
+$string['choicegroup:downloadresponses'] = 'Descargar respuestas';
+$string['choicegroupfull'] = 'Esta opci√≥n de grupo est√° completa y no hay plazas disponibles.';
+$string['choicegroup:choose'] = 'Guardar elecci√≥n';
+$string['choicegroupname'] = 'Nombre de la opci√≥n de grupo';
+$string['choicegroupopen'] = 'Abrir';
+$string['choicegroupoptions'] = 'Opciones del grupo';
+$string['choicegroupoptions_help'] = 'Opciones de elecci√≥n.
+Aqu√≠ es donde se especifica las opciones entre las que los participantes podr√°n escoger.
+
+Puede rellenar cualquier n√∫mero de √©stas. Si deja en blanco algunas de las opciones disponibles, √©stas no se mostrar√°n. Si necesita a√±adir m√°s, haga clic en el bot√≥n "Agregar 3 campos para formar.';
+$string['limitanswers_help'] = 'Esta opci√≥n le permite limitar el n√∫mero de participantes que pueden seleccionar cada opci√≥n. Cuando se alcanza el l√≠mite, nadie m√°s puede seleccionar esa opci√≥n.
+
+Si est√° desactivada, cualquier n√∫mero de participantes puede seleccionar cualquiera de las opciones.';
+$string['choicegroup:addinstance'] = 'A√±adir una nueva actividad de elecci√≥n de grupo';
+$string['choicegroup:readresponses'] = 'Leer respuestas';
+$string['choicegroupsaved'] = 'Tu elecci√≥n ha sido guardada';
+$string['choicetext'] = 'Texto elecci√≥n';
+$string['chooseaction'] = 'Escoja una acci√≥n ...';
+$string['choosegroup'] = 'Escoja un grupo';
+$string['limit'] = 'L√≠mite';
+$string['limitanswers'] = 'Limitar el n√∫mero de respuestas permitidas';
+$string['modulename'] = 'Elecci√≥n de grupo';
+$string['modulename_help'] = 'El m√≥dulo de opci√≥n permite hacer al profesor una pregunta y especifica una serie de respuestas m√∫ltiples.';
+$string['modulenameplural'] = 'Opciones de grupo';
+$string['mustchooseone'] = 'Usted debe elegir una respuesta antes de guardar. No se salv√≥ ninguna respuesta.';
+$string['noguestchoose'] = 'Lo sentimos, a los invitados no se les permite escoger elecciones.';
+$string['noresultsviewable'] = 'Los resultados no son visibles actualmente.';
+$string['neverresultsviewable'] = 'Los resultados no son visibles.';
+$string['afterresultsviewable'] = 'Los resultados ser√°n visibles despu√©s de hacer una elecci√≥n.';
+$string['notyetresultsviewable'] = 'Los resultados ser√°n visibles despu√©s de que la actividad se haya cerrado.';
+$string['notanswered'] = 'No hay respuestas';
+$string['notenrolledchoose'] = 'Lo sentimos, s√≥lo los usuarios registrados est√°n autorizados a escoger elecciones.';
+$string['notopenyet'] = 'Lo sentimos, pero esta actividad no estar√° disponible hasta {$a}';
+$string['option'] = 'Grupo';
+$string['pluginadministration'] = 'Administraci√≥n de grupo';
+$string['pluginname'] = 'Elecci√≥n de grupo';
+$string['privacy'] = 'Privacidad de los resultados';
+$string['publish'] = 'Publicar los resultados';
+$string['publishafteranswer'] = 'Mostrar resultados a los estudiantes despu√©s de responder';
+$string['publishafterclose'] = 'Mostrar los resultados a los estudiantes s√≥lo despu√©s del cierre de la actividad';
+$string['publishalways'] = 'Siempre mostrar resultados a los estudiantes';
+$string['publishanonymous'] = 'Publicar los resultados an√≥nimos, no muestran los nombres de estudiantes';
+$string['publishnames'] = 'Publicar todos los resultados, mostrando nombres y sus opciones';
+$string['publishnot'] = 'No publicar resultados a los estudiantes';
+$string['removemychoicegroup'] = 'Eliminar mi elecci√≥n';
+$string['removeresponses'] = 'Eliminar todas las respuestas';
+$string['responses'] = 'Respuestas';
+$string['responsesto'] = 'Respuestas para {$a}';
+$string['savemychoicegroup'] = 'Guardar mi elecci√≥n';
+$string['showunanswered'] = 'Mostrar columna para contestar';
+$string['spaceleft'] = 'Plaza disponible';
+$string['spacesleft'] = 'Plazas disponibles';
+$string['taken'] = 'Ocupado';
+$string['timerestrict'] = 'Restringir respuesta a este per√≠odo de tiempo';
+$string['viewallresponses'] = 'Ver {$a} respuestas';
+$string['byparticipants'] = 'para {$a} participantes';
+$string['withselected'] = 'Con selecciones';
+$string['yourselection'] = 'Tu opci√≥n';
+$string['skipresultgraph'] = 'Saltar gr√°fico de resultados';
+$string['moveselectedusersto'] = 'Mover usuarios seleccionados a ...';
+$string['numberofuser'] = 'El n√∫mero de usuarios';
+$string['groupdoesntexist'] = 'Algunos de los grupos especificados no existen en este curso. El profesor debe crear los grupos necesarios y/o modificar esta actividad..';
+$string['samegroupused'] = 'El mismo grupo no se puede utilizar varias veces.';
+
+$string['members/max'] = 'Miembros / Capacidad';
+$string['members/'] = 'Miembros';
+$string['groupmembers'] = 'Miembros del grupo';
+$string['page-mod-choice-x'] = 'Cualquier p√°gina del m√≥dulo elecci√≥n de grupo';
+$string['showdescription'] = 'Mostrar descripciones';
+$string['hidedescription'] = 'Ocultar descripciones';
+$string['generallimitation'] = 'Limitaci√≥n general';
+$string['applytoallgroups'] = 'Aplicar a todos los grupos';
+$string['pleasesetgroups'] = 'Por favor, cree al menos dos grupos de este curso.';
+
+$string['multipleenrollmentspossible'] = 'Permitir la inscripci√≥n a varios grupos';
+$string['and'] = 'y';
diff --git a/mod/choicegroup/lang/et/choicegroup.php b/mod/choicegroup/lang/et/choicegroup.php
new file mode 100644
index 0000000..cd3a155
--- /dev/null
+++ b/mod/choicegroup/lang/et/choicegroup.php
@@ -0,0 +1,107 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'choicegroup', language 'et', branch 'MOODLE_20_STABLE'
+ *
+ * @package   choicegroup
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['addmorechoices'] = 'Lisa valikuid';
+$string['allowupdate'] = 'Luba valiku muutmine';
+$string['answered'] = 'Vastatud';
+$string['completionsubmit'] = 'Kui kasutaja on valiku teinud, siis kuva seda tegevust edukalt l√§bituna';
+$string['displayhorizontal'] = 'Kuva horisontaalselt';
+$string['displaymode'] = 'Kuvamise re≈æiim';
+$string['displayvertical'] = 'Kuva vertikaalselt';
+$string['expired'] = 'Vabandust, aga k√§esolev tegevus sulgus {$a} ja pole enam saadaval';
+$string['fillinatleastoneoption'] = 'Sa pead pakkuma v√§lja v√§hemalt kaks v√µimalikku vastust.';
+$string['full'] = '(T√§is)';
+$string['havetologin'] = 'Oma valiku esitamiseks pead sa sisse logima';
+$string['choice'] = 'Valik';
+$string['choicegroupclose'] = 'Kuni';
+$string['choicegroup:deleteresponses'] = 'Kustuta k√µik vastused';
+$string['choicegroup:downloadresponses'] = 'Lae vastused alla';
+$string['choicegroupfull'] = 'K√§esoleva r√ºhma kohtade arv on t√§is';
+$string['choicegroup:choose'] = 'Salvesta valik';
+$string['choicegroupname'] = 'R√ºhma valimise nimi';
+$string['choicegroupopen'] = 'Avatud';
+$string['choicegroupoptions'] = 'Valiku s√§tted';
+$string['choicegroupoptions_help'] = 'Siin m√§rgid Sa √§ra valikud, mille vahel osalejad valiku tegema peavad.
+
+V√µid kasutada just soovitud hulka valikuid. T√§itmata j√§etud valikuid √µppijatele ei n√§idata. Kui vajad veel rohkem valikuid, siis kl√µpsa nupul "Lisa vormi veel 3 v√§lja".';
+$string['limitanswers_help'] = 'See valik v√µimaldab piirata osalejate arvu, kes saavad v√§lja pakutud valikuga liituda. Kui piirarv t√§is saab, siis ei saa keegi teine seda valikut enam teha.
+
+Kui piirarvud ei ole sisse l√ºlitatud, siis saab iga r√ºhmaga liituda piiramatu arv liikmeid.';
+$string['choicegroup:addinstance'] = 'Lisa uus r√ºhma valimise tegevus';
+$string['choicegroup:readresponses'] = 'Loe vastuseid';
+$string['choicegroupsaved'] = 'Sinu r√ºhma valik on salvestatud';
+$string['choicetext'] = 'R√ºhma valiku tekst';
+$string['chooseaction'] = 'Vali tegevus...';
+$string['choosegroup'] = 'Vali r√ºhm';
+$string['limit'] = 'Piirarv';
+$string['limitanswers'] = 'Piira lubatud liikmete arvu r√ºhmades';
+$string['modulename'] = 'R√ºhma valimine';
+$string['modulename_help'] = 'R√ºhma valimise moodul v√µimaldab √µppijatel iseseisvalt valida endale sobiva r√ºhma.';
+$string['modulenameplural'] = 'R√ºhma valikud';
+$string['mustchooseone'] = 'Sa pead enne salvestamist tegema valiku. Hetkel ei salvestatud mitte midagi.';
+$string['noguestchoose'] = 'Vabandust, aga k√ºlalistel ei ole lubatud valikut teha.';
+$string['noresultsviewable'] = 'Tulemused ei ole praegu avalikult n√§htavad.';
+$string['neverresultsviewable'] = 'Tulemused pole avalikud.';
+$string['afterresultsviewable'] = 'Tulemused on n√§htavad peale seda, kui oled teinud valiku';
+$string['notyetresultsviewable'] = 'Tulemused muutuvad avalikuks tegevuse sulgumise j√§rel.';
+$string['notanswered'] = 'Pole veel vastanud';
+$string['notenrolledchoose'] = 'Vabandust, aga vaid kursusele registreerunud kasutajatel on lubatud oma valik teha.';
+$string['notopenyet'] = 'Vabandust, aga see tegevus pole veel k√§ttesaadav ja avatakse {$a}';
+$string['option'] = 'R√ºhm';
+$string['pluginadministration'] = 'R√ºhma valiku administreerimine';
+$string['pluginname'] = 'R√ºhma valimine';
+$string['privacy'] = 'Tulemuste privaatsus';
+$string['publish'] = 'Avalda tulemused';
+$string['publishafteranswer'] = 'N√§ita tulemusi √µppijatele peale seda kui nad on vastanud';
+$string['publishafterclose'] = 'N√§ita tulemusi √µppijatele alles siis, kui valik on suletud';
+$string['publishalways'] = 'N√§ita alati tulemusi √µppijatele';
+$string['publishanonymous'] = 'Avalda anon√º√ºmsed tulemused ja √§ra n√§ita √µppijate nimesid';
+$string['publishnames'] = 'Avalda t√§ielikud tulemused koos √µppijate nimede ja nende valikutega';
+$string['publishnot'] = '√Ñra avalda tulemusi √µppijatele';
+$string['removemychoicegroup'] = 'Eemalda minu valik';
+$string['removeresponses'] = 'Eemalda k√µik vastused';
+$string['responses'] = 'Vastused';
+$string['responsesto'] = 'Vastused valikule {$a}';
+$string['savemychoicegroup'] = 'Salvesta minu valik';
+$string['showunanswered'] = 'N√§ita eraldi veergu vastamata kasutajatega';
+$string['spaceleft'] = 'koht on vaba';
+$string['spacesleft'] = 'kohta on vaba';
+$string['taken'] = 'Valitud';
+$string['timerestrict'] = 'Piira vastamiste ajaline periood j√§rgnevaks';
+$string['viewallresponses'] = 'Vaata {$a} vastust';
+$string['withselected'] = 'Valitutega';
+$string['yourselection'] = 'Sinu valik';
+$string['skipresultgraph'] = 'J√§ta tulemuste graafik vahele';
+$string['moveselectedusersto'] = 'Teisalda valitud kasutajad...';
+$string['numberofuser'] = 'Kasutajate arv';
+$string['groupdoesntexist'] = 'M√µni m√§rgitud r√ºhmadest ei eksisteeri k√§esoleval kursusel. √ïpetaja peaks vajalikud r√ºhmad looma v√µi k√§esoleva tegevuse s√§tteid muutma.';
+$string['samegroupused'] = 'Sama r√ºhma ei saa kasutada mitu korda.';
+
+$string['members/max'] = 'T√§itumus / Mahtuvus';
+$string['members/'] = 'T√§itumus';
+$string['groupmembers'] = 'R√ºhma liikmed';
+$string['page-mod-choice-x'] = 'Iga r√ºhma valimise mooduli leht';
+$string['showdescription'] = 'N√§ita kirjeldusi';
+$string['hidedescription'] = 'Varja kirjeldused';
diff --git a/mod/choicegroup/lang/fi/choicegroup.php b/mod/choicegroup/lang/fi/choicegroup.php
new file mode 100644
index 0000000..d7a9ac5
--- /dev/null
+++ b/mod/choicegroup/lang/fi/choicegroup.php
@@ -0,0 +1,116 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'choice', language 'en', branch 'MOODLE_20_STABLE'
+ *
+ * @package   choice
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['addmorechoices'] = 'Lis√§√§ uusia vaihtoehtoja';
+$string['allowupdate'] = 'Salli valinnan p√§ivitys';
+$string['answered'] = 'Vastattu';
+$string['completionsubmit'] = 'N√§yt√§ valmiina kun k√§ytt√§j√§ tekee valinnan';
+$string['displayhorizontal'] = 'N√§yt√§ leveyssuunnassa';
+$string['displaymode'] = 'N√§ytt√∂tapa';
+$string['displayvertical'] = 'N√§yt√§ pystysuunnassa';
+$string['expired'] = 'Pahus, t√§m√§ aktiviteeti on suljettu {$a} eik√§ ole en√§√§ k√§ytett√§viss√§.';
+$string['fillinatleastoneoption'] = 'Valitse ainakin kaksi vaihtoehtoa.';
+$string['full'] = '(T√§ysi)';
+$string['havetologin'] = 'Sinun pit√§√§ kirjautua ennen kuin voit ottaa osaa valintaan';
+$string['choice'] = 'Vaihtoehto';
+$string['choicegroupclose'] = 'Saakka';
+$string['choicegroup:deleteresponses'] = 'Vastausten poisto';
+$string['choicegroup:downloadresponses'] = 'Vastausten lataus';
+$string['choicegroupfull'] = 'T√§m√§ ryhm√§ on jo t√§ynn√§.';
+$string['choicegroup:choose'] = 'Ryhm√§n valitseminen';
+$string['choicegroupname'] = 'Ryhm√§vanlinnan nimi';
+$string['choicegroupopen'] = 'Avoinna';
+$string['choicegroupoptions'] = 'Vastausvaihtoehdot';
+$string['choicegroupoptions_help'] = '<P ALIGN=CENTER><B>Valinnan vaihtoehdot</B></P>
+<p>T√§√§ll√§ m√§√§rittelet vaihtoehdot/ryhm√§t, joista kurssilaiset voivat valita vastauksensa.</p>
+
+<p>Voit t√§ytt√§√§ n√§ist√§ niin monta kuin haluat: voit my√∂s j√§tt√§√§ joitain kohtia tyhj√§ksi, jos et tarvitse kaikkia kuutta vaihtoehtoa.</p>';
+$string['limitanswers_help'] = '<h2>M√§√§rien rajoittaminen valintavaihtoehdoissa</h2>
+
+<p>T√§ll√§ asetuksella aktivoit valintavaihtoehtojen valitsemisen m√§√§r√§llisen rajoittamisen.</p>
+
+
+
+<p>Rajoittamisen aktivoinnin j√§lkeen voit lis√§t√§ kullekin vaihtoehdolle erillisen raja-arvonsa, jota enemp√§√§ kyseist√§ vaihtoehtoa ei voi valita. M√§√§r√§n tultua t√§yteen kyseist√§ vaihtoehtoa ei voi en√§√§ valita. <strong>Huomaa, ett√§ raja-arvot ovat ryhm√§kohtaisia: jos k√§yt√§t Valinnassa ryhmi√§ (n√§kyv√§t tai erilliset ryhm√§t), vaihtoehdon voi valita <em>kustakin ryhm√§st√§ raja-arvon verran</em> osallistujia!</strong> Jos laitat raja-arvoksi nollan (0), kukaan ei voi valita kyseist√§ vaihtoehtoa.
+</p>
+
+
+
+<p>Jos et k√§yt√§ m√§√§r√§n rajoitusta, mink√§ tahansa vaihtoehdon voi valita kuinka moni osallistuja tahansa.</p>';
+$string['choicegroup:readresponses'] = 'Vastusten tarkastelu';
+$string['choicegroupsaved'] = 'Valintasi on tallennettu';
+$string['choicetext'] = 'Ryhm√§valinnan teksti';
+$string['chooseaction'] = 'Valitse toiminto ...';
+$string['choosegroup'] = 'Valitse ryhm√§';
+$string['limit'] = 'Raja';
+$string['limitanswers'] = 'Rajoita vastausten m√§√§r√§√§';
+$string['modulename'] = 'Ryhm√§valinta';
+$string['modulename_help'] = 'Ryhm√§valinta-aktiviteetin toiminta on yksinkertainen: opettaja tekee ryhm√§t ja antaa sitten useita ryhm√§vaihtoehtoja, joista opiskelija voi valita tasan yhden.  
+
+Vastaukset voidaan julkaista osallistujille heti vastaamisen j√§lkeen, tietyn p√§iv√§n j√§lkeen tai ei ollenkaan. Tulokset voidaan julkaista joko vastaajien nimill√§ tai anonyymisti.';
+$string['modulenameplural'] = 'Ryhm√§valinnat';
+$string['mustchooseone'] = 'Sinun pit√§√§ valita ryhm√§ ennen tallennusta. Tallennusta ei tehty.';
+$string['noguestchoose'] = 'Vierailijat eiv√§t voi vastata kyselyihin';
+$string['noresultsviewable'] = 'Tulokset eiv√§t ole juuri nyt n√§ht√§vill√§.';
+$string['neverresultsviewable'] = 'Tulokset eiv√§t ole n√§ht√§vill√§.';
+$string['afterresultsviewable'] = 'Tulokset ovat n√§kyviss√§ vasta kun teet valinnan.';
+$string['notyetresultsviewable'] = 'Tulokset ovat n√§kyviss√§ vasta kun aktiviteetti on suljettu.';
+$string['notanswered'] = 'Vastaamatta';
+$string['notenrolledchoose'] = 'Vain kurssin osallistujat saavat vastata.';
+$string['notopenyet'] = 'T√§m√§ aktiviteetti ei ole saatavilla ennen kuin {$a}';
+$string['option'] = 'Ryhm√§';
+$string['pluginadministration'] = 'Ryhm√§valinnan asetukset';
+$string['pluginname'] = 'Ryhm√§valinta';
+$string['privacy'] = 'Tulosten suojaus';
+$string['publish'] = 'Julkaise tulokset';
+$string['publishafteranswer'] = 'N√§yt√§ tulokset opiskelijalle vastaamisen j√§lkeen';
+$string['publishafterclose'] = 'N√§yt√§ tulokset opiskelijalle kun valinta on sulkeutunut';
+$string['publishalways'] = 'N√§yt√§ tulokset aina opiskelijalle';
+$string['publishanonymous'] = 'Julkaise tulokset nimett√∂m√§sti, piilota vastaajien nimet';
+$string['publishnames'] = 'Julkaise tulokset, n√§yt√§ nimet ja vastaukset.';
+$string['publishnot'] = '√Ñl√§ julkaise tuloksia';
+$string['removemychoicegroup'] = 'Poista ryhm√§valintani';
+$string['removeresponses'] = 'Poista kaikki vastaukset';
+$string['responses'] = 'Vastaukset';
+$string['responsesto'] = 'Vastaukset {$a}';
+$string['savemychoicegroup'] = 'Tallenna ryhm√§valintani';
+$string['showunanswered'] = 'N√§yt√§ sarake vastaamattomille';
+$string['spaceleft'] = 'paikka vapaana';
+$string['spacesleft'] = 'paikkaa vapaana';
+$string['taken'] = 'Varattu';
+$string['timerestrict'] = 'Rajoita vastaaminen ajanjaksolle';
+$string['viewallresponses'] = 'Katsele {$a} vastausta';
+$string['withselected'] = 'Valituilla';
+$string['yourselection'] = 'Valintasi';
+$string['skipresultgraph'] = 'Ohita tuloskaavio';
+$string['moveselectedusersto'] = 'Siirr√§ valitut k√§ytt√§j√§t kohteeseen...';
+$string['numberofuser'] = 'K√§ytt√§jien m√§√§r√§';
+$string['groupdoesntexist'] = 'Jotkut tietyt ryhm√§t eiv√§t ole olemassa t√§ss√§ kurssissa. Opettajan pit√§isi tehd√§ vaaditut ryhm√§t ja/tai muokata t√§t√§ aktiviteettia.';
+$string['samegroupused'] = 'Samaa ryhm√§√§ ei voida k√§ytt√§√§ useasti.';
+
+$string['members/max'] = 'M√§√§r√§ / Kapasiteetti';
+$string['members/'] = 'M√§√§r√§';
+$string['groupmembers'] = 'Ryhm√§nj√§seneet';
+$string['page-mod-choice-x'] = 'Kaikki ryhm√§valintamoduulin sivut';
diff --git a/mod/choicegroup/lang/fr/choicegroup.php b/mod/choicegroup/lang/fr/choicegroup.php
new file mode 100644
index 0000000..c20e28f
--- /dev/null
+++ b/mod/choicegroup/lang/fr/choicegroup.php
@@ -0,0 +1,148 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'choice', language 'en', branch 'MOODLE_20_STABLE'
+ *
+ * @package   choice
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['addmorechoices'] = 'Ajouter plus de choix';
+$string['allowupdate'] = 'Laisser le choix √™tre mis √† jour';
+$string['answered'] = 'Reacute;pondu';
+$string['completionsubmit'] = 'Montrer comme complet quand l\'utilisateur fait son choix';
+$string['displayhorizontal'] = 'Afficher horizontalement';
+$string['displaymode'] = 'Mode d\'affichage';
+$string['displayvertical'] = 'Afficher verticalement';
+$string['expired'] = 'D√©sol√©, cette activit√© est ferm√©e depuis le {$a} et n\'est plus disponible';
+$string['fillinatleastoneoption'] = 'Vous devez fournir au moins une r√©ponse possible.';
+$string['fillinatleasttwooptions'] = 'Vous devez fournir au moins deux r√©ponses possibles.';
+$string['full'] = '(Complet)';
+$string['havetologin'] = 'Vous devez vous connecter avant de pouvoir soumettre votre choix ';
+$string['choice'] = 'Choix';
+$string['choicegroupclose'] = 'Jusqu\'√†';
+$string['choicegroup:deleteresponses'] = 'Supprimer les r√©ponses';
+$string['choicegroup:downloadresponses'] = 'T√©l√©charger les r√©ponses';
+$string['choicegroupfull'] = 'Ce choix est complet et il n\'y a plus de places disponibles.';
+$string['choicegroup:choose'] = 'Enregistrer un choix';
+$string['choicegroupname'] = 'Nom du choix de groupe';
+$string['choicegroupopen'] = 'Ouvert';
+$string['choicegroupoptions'] = 'Options des choix';
+$string['choicegroupoptions_help'] = 'Sp√©cifier ici les groupes que les participants peuvent choisir.
+
+La liste de gauche liste les groupes et groupements disponbles. Pour ajouter un ou plusieurs groupes, s√©lectionnez ceux-ci puis cliquez sur "Ajouter". Pour ajouter tous les groupes d\'un groupement, s√©lectionnez le groupement puis cliquez sur "Ajouter".
+
+Les groupes s√©lection√©s apparaissant dans la liste de droite.
+
+Pour retirer un ou plusieurs groupes des choix possibles, s√©lectionnez ceux-ci dans la liste de droite puis cliquez sur "Retirer".';
+$string['limitanswers_help'] = 'Cette option vous permet de limiter le nombre de participants dans un groupe. Lorsque la limite est atteinte, personne d\'autre ne peut s√©lectionner ce groupe.
+
+Si les limites sont d√©sactiv√©es, n\'importe quel nombre de participants peut s\'inscrire dans le groupe.';
+$string['choicegroup:addinstance'] = 'Ajouter un nouveau choix de groupe';
+$string['choicegroup:readresponses'] = 'Lire les r√©ponses';
+$string['choicegroupsaved'] = 'Votre choix a √©t√© enregistr√©';
+$string['choicetext'] = 'Texte';
+$string['chooseaction'] = 'Choisir une action...';
+$string['choosegroup'] = 'Choisir un groupe';
+$string['limit'] = 'Limite';
+$string['limitanswers'] = 'Limiter le nombre de r√©ponses';
+$string['modulename'] = 'Choix de Groupe';
+$string['modulename_help'] = 'Le module "Choix de Groupe" permet √† l\'enseignant de laisser l\'√©tudiant choisir un groupe.';
+$string['modulenameplural'] = 'Choix de Groupe';
+$string['mustchooseone'] = 'Vous devez choisir une r√©ponse avant de l\'enregistrer. Rien n\'a √©t√© sauv√©.';
+$string['noguestchoose'] = 'D√©sol√©, les visiteurs ne sont pas autoris√©s √† faire des choix.';
+$string['noresultsviewable'] = 'Les r√©sultats ne sont pas actuellement visibles.';
+$string['neverresultsviewable'] = 'Les r√©sultats ne sont pas visibles.';
+$string['afterresultsviewable'] = 'Les r√©sultats ne sont visibles qu\'apr√®s que vous ayez fait votre choix.';
+$string['notyetresultsviewable'] = 'Les r√©sultats ne sont visibles que lorsque cette activit√© sera termin√©e.';
+$string['notanswered'] = 'Pas encore r√©pondu';
+$string['notenrolledchoose'] = 'D√©sol√©, seuls les utilisateurs inscrits sont autoris√©s √† faire des choix.';
+$string['notopenyet'] = 'D√©sol√©, cette activit√© n\'est pas disponible jusqu\'√† {$a}';
+$string['option'] = 'Groupe';
+$string['pluginadministration'] = 'Administration de Choix de Groupe';
+$string['pluginname'] = 'Choix de groupe';
+$string['privacy'] = 'Confidentialit√© des r√©sultats';
+$string['publish'] = 'Publier les r√©sultats';
+$string['publishafteranswer'] = 'Afficher les r√©sultats pour les √©tudiants apr√®s leur r√©ponse';
+$string['publishafterclose'] = 'Afficher les r√©sultats pour les √©tudiants seulement apr√®s que le choix est ferm√©';
+$string['publishalways'] = 'Toujours afficher les r√©sultats aux √©l√®ves';
+$string['publishanonymous'] = 'Publier les r√©sultats anonymes, ne montrent pas les noms des √©l√®ves';
+$string['publishnames'] = 'Publier les r√©sultats complets, indiquant les noms et leurs choix';
+$string['publishnot'] = 'Ne pas publier les r√©sultats d\'√©l√®ves';
+$string['removemychoicegroup'] = 'Supprimer mon choix';
+$string['removeresponses'] = 'Supprimer toutes les r√©ponses ';
+$string['responses'] = 'R√©ponses';
+$string['responsesto'] = 'R√©ponses √† {$a}';
+$string['savemychoicegroup'] = 'Enregistrer mon choix';
+$string['showunanswered'] = 'Afficher une colonne pour sans r√©ponse';
+$string['spaceleft'] = 'espace disponible';
+$string['spacesleft'] = 'espaces disponibles';
+$string['taken'] = 'Pris';
+$string['timerestrict'] = 'Restreindre la r√©ponse √† cette p√©riode de temp';
+$string['viewallresponses'] = 'Afficher {$a} r√©ponses';
+$string['byparticipants'] = 'par {$a} participants';
+$string['withselected'] = 'Avec xxx';
+$string['yourselection'] = 'Votre s√©lection';
+$string['skipresultgraph'] = 'Sauter le graphique de r√©sultat';
+$string['moveselectedusersto'] = 'D√©placer les utilisateurs s√©lectionn√©s pour ...';
+$string['numberofuser'] = 'Nombre d\'utilisateur';
+$string['groupdoesntexist'] = 'Certains groups sp√©cifi√©s n\'existent pas dans ce cours. L\'enseignant devrait cr√©er les groupes n√©cessaires et/ou modifier cette activit√©.';
+$string['samegroupused'] = 'Un m√™me groupe ne peut pas √™tre utilis√© plus d\'une fois.';
+
+$string['members/max'] = 'Membres / Capacit√©';
+$string['members/'] = 'Membres';
+$string['groupmembers'] = 'Membres du groupe';
+$string['page-mod-choice-x'] = 'Toute page du module Choix du groupe';
+$string['showdescription'] = 'Afficher descriptions';
+$string['hidedescription'] = 'Masquer descriptions';
+$string['generallimitation'] = 'Limite g√©n√©rale';
+$string['applytoallgroups'] = 'Appliquer √† tous les groupes';
+$string['pleasesetgroups'] = 'Veuillez cr√©er au pr√©alable au moins deux groupes dans ce cours.';
+
+$string['multipleenrollmentspossible'] = 'Autoriser l\'inscription √† plusieurs groupes.';
+$string['and'] = 'et';
+$string['event:answered'] = 'Choix fait';
+$string['event:answered_desc'] = 'L\'utilisateur id \'{$a->userid}\' a fait un choix dans l\'activit√© choix de groupe, module de cours id \'{$a->contextinstanceid}\'.';
+$string['event:removed'] = 'Choix supprim√©';
+$string['event:removed_desc'] = 'L\'utilisateur id \'{$a->userid}\' a supprim√© son choix dans l\'activit√© choix de groupe, module de cours id \'{$a->contextinstanceid}\'.';
+$string['event:reportviewed'] = 'Rapport affich√©';
+$string['event:reportviewed_desc'] = 'L\'utilisateur id \'{$a->userid}\' a visualis√© le rapport de l\'activit√© choix de groupe, module de cours id \'{$a->contextinstanceid}\'.';
+$string['groupsheader'] = "Groupes";
+$string['the_value_you_entered_is_not_a_number'] = "La valeur donn√©e n‚Äôest pas un nombre.";
+$string['add_groupings'] = "Cr√©er des groupements";
+$string['add_grouping'] = "Cr√©er un groupement";
+$string['add_groups'] = "Cr√©er des groupes";
+$string['del_groups'] = "Supprimer des groupes";
+$string['del_group'] = "Retirer le groupe";
+$string['add_group'] = "Ajouter le groupe";
+$string['add'] = "Ajouter";
+$string['del'] = "Retirer";
+$string['set_limit_for_group'] = "Limite pour ";
+$string['available_groups'] = 'Groupes disponibles';
+$string['selected_groups'] = 'Groupes s√©lectionn√©s';
+$string['char_bullet_collapsed'] = '‚ñ∫';
+$string['char_bullet_expanded'] = '‚ñº';
+$string['char_limitui_parenthesis_start'] = '‚¶ó';
+$string['char_limitui_parenthesis_end'] = '‚¶ò';
+$string['expand_all_groupings'] = 'D√©velopper tous les groupements';
+$string['collapse_all_groupings'] = 'R√©duire tous les groupements';
+$string['double_click_grouping_legend'] = 'Double-clic sur groupement pour le d√©velopper/r√©duire.';
+$string['double_click_group_legend'] = 'Double-clic sur groupe pour l‚Äôajouter.';
+
+
diff --git a/mod/choicegroup/lang/it/choicegroup.php b/mod/choicegroup/lang/it/choicegroup.php
new file mode 100644
index 0000000..6918c19
--- /dev/null
+++ b/mod/choicegroup/lang/it/choicegroup.php
@@ -0,0 +1,107 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'choice', language 'it', branch 'MOODLE_20_STABLE'
+ *
+ * @package   choice
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['addmorechoices'] = 'Aggiungi altre scelte';
+$string['allowupdate'] = 'Permetti la modifica di una scelta';
+$string['answered'] = 'Risposte';
+$string['completionsubmit'] = 'Mostra come completo quando un utente effettua una scelta';
+$string['displayhorizontal'] = 'Mostra orizzontalmente';
+$string['displaymode'] = 'Modalit√† di visualizzazione';
+$string['displayvertical'] = 'Mostra verticalmente';
+$string['expired'] = 'Ci dispiace, questa attivit√† si √® chiusa il {$a} e non √® pi√π disponibile';
+$string['fillinatleastoneoption'] = 'Devi fornire almeno due possibili scelte.';
+$string['full'] = '(Pieno)';
+$string['havetologin'] = 'Devi effettuare l\'accesso prima di poter effettuare la scelta';
+$string['choice'] = 'Scelta';
+$string['choicegroupclose'] = 'Chiusura';
+$string['choicegroup:deleteresponses'] = 'Cancellare risposte';
+$string['choicegroup:downloadresponses'] = 'Scaricare risposte';
+$string['choicegroupfull'] = 'Questo gruppo √® gi√† pieno';
+$string['choicegroup:choose'] = 'Memorizzare una scelta';
+$string['choicegroupname'] = 'Nome';
+$string['choicegroupopen'] = 'Apertura';
+$string['choicegroupoptions'] = 'Opzioni di scelta';
+$string['choicegroupoptions_help'] = 'Qui √® dove bisogna specificare le scelte che gli studenti avranno a disposizione.
+
+Puoi compilarne quante ne vuoi. Ogni scelta lasciata vuota non verr√† visualizzata. Se sono necessarie pi√π scelte, cliccare il pulsante "Aggiungi 3 campi alla form".';
+$string['limitanswers_help'] = 'Questa opzione ti permette di limitare il numero di studenti che possono iscriversi ai gruppi. Quando il limite viene raggiunto poi nessun altro potr√† isciversi.
+
+Se i limiti sono disabilitati allora un numero illimitato di studenti potranno iscriversi.';
+$string['choicegroup:addinstance'] = 'Aggiungi una nuova attivit√† di Scelta del gruppo';
+$string['choicegroup:readresponses'] = 'Leggi le risposte';
+$string['choicegroupsaved'] = 'La tua scelta √® stata salvata';
+$string['choicetext'] = 'Testo della scelta';
+$string['chooseaction'] = 'Scegli un\'azione ...';
+$string['choosegroup'] = 'Scegli un gruppo';
+$string['limit'] = 'Limite';
+$string['limitanswers'] = 'Limita il numero di risposte possibili';
+$string['modulename'] = 'Scelta del gruppo';
+$string['modulename_help'] = 'Questo modulo di Scelta del gruppo permette ai docenti di effettuare una richiesta e di definire differenti risposte';
+$string['modulenameplural'] = 'Scelta di gruppi';
+$string['mustchooseone'] = 'Devi effettuare una scelta prima di salvare. Non √® stato salvato nulla.';
+$string['noguestchoose'] = 'Ci dispiace, gli ospiti non possono effettuare rispondere.';
+$string['noresultsviewable'] = 'I risultati al momento non possono essere visualizzati.';
+$string['neverresultsviewable'] = 'I risultati non possono essere visualizzati.';
+$string['afterresultsviewable'] = 'I risultati saranno visibili soltanto dopo che avrai fatto la tua scelta.';
+$string['notyetresultsviewable'] = 'I risultati saranno visibili soltanto dopo la chiusura dell\'attivit√†.';
+$string['notanswered'] = 'Non ancora risposto';
+$string['notenrolledchoose'] = 'Ci dispiace, solo gli studenti iscritti possono rispondere.';
+$string['notopenyet'] = 'Ci dispiace, questa attivit√† non sar√† disponibile fino al {$a}';
+$string['option'] = 'Scelta';
+$string['pluginadministration'] = 'Amministrazione della Scelta del gruppo';
+$string['pluginname'] = 'Scelta del gruppo';
+$string['privacy'] = 'Privatezza dei risultati';
+$string['publish'] = 'Metodo di pubblicazione dei risultati';
+$string['publishafteranswer'] = 'Mostra i risultati agli studenti dopo la scelta';
+$string['publishafterclose'] = 'Mostra i risultati agli studenti solo dopo la chiusura';
+$string['publishalways'] = 'Mostra sempre i risultati agli studenti';
+$string['publishanonymous'] = 'Pubblica risultati anonimi, non mostrare i nomi degli studenti';
+$string['publishnames'] = 'Pubblica i risultati completi, mostrando i nomi e le loro scelte';
+$string['publishnot'] = 'Non pubblicare i risultati agli studenti';
+$string['removemychoicegroup'] = 'Elimina la mia scelta';
+$string['removeresponses'] = 'Rimuovi tutte le risposte';
+$string['responses'] = 'Risposte';
+$string['responsesto'] = 'Risposte a {$a}';
+$string['savemychoicegroup'] = 'Salva la mia scelta';
+$string['showunanswered'] = 'Mostra la colonna per le risposte non pervenute';
+$string['spaceleft'] = 'posto disponibile';
+$string['spacesleft'] = 'posti disponibili';
+$string['taken'] = 'Preso';
+$string['timerestrict'] = 'Limita le risposte a questo periodo di tempo';
+$string['viewallresponses'] = 'Guarda {$a} risposte';
+$string['withselected'] = 'Con i selezionati';
+$string['yourselection'] = 'La tua scelta';
+$string['skipresultgraph'] = 'Salta grafo dei risultati';
+$string['moveselectedusersto'] = 'Sposta gli utenti selezionati...';
+$string['numberofuser'] = 'Numero di utenti';
+$string['groupdoesntexist'] = 'Parte dei gruppi specificati non esistono nel corso. Il docente dovrebbe creare i gruppi necessari e/o modificare questa attivit√†.';
+$string['samegroupused'] = 'Non si pu√≤ selezionare pi√π volte lo stesso gruppo.';
+
+$string['members/max'] = 'Membri / Capienza';
+$string['members/'] = 'Membri';
+$string['groupmembers'] = 'Membri del gruppo';
+$string['page-mod-choice-x'] = 'Pagina contenente ogni scelta di gruppo';
+$string['showdescription'] = 'Mostra descrizione';
+$string['hidedescription'] = 'Nascondi descrizione';
diff --git a/mod/choicegroup/lang/sv/choicegroup.php b/mod/choicegroup/lang/sv/choicegroup.php
new file mode 100644
index 0000000..4422de5
--- /dev/null
+++ b/mod/choicegroup/lang/sv/choicegroup.php
@@ -0,0 +1,115 @@
+<?php
+
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'choice', language 'sv', branch 'MOODLE_26_STABLE'
+ *
+ * @package   choice
+ * @copyright 1999 onwards Martin Dougiamas  {@link http://moodle.com}
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['addmorechoices'] = 'L√§gg till fler val';
+$string['allowupdate'] = 'Till√•t att valet updateras';
+$string['answered'] = 'Besvarad';
+$string['completionsubmit'] = 'Visa som komplett n√§r anv√§ndaren g√∂r ett val';
+$string['displayhorizontal'] = 'Visa horisontellt';
+$string['displaymode'] = 'Visningsl√§ge';
+$string['displayvertical'] = 'Visa vertikalt';
+$string['expired'] = 'Tyv√§rr, den h√§r aktiviteten avslutades {$a} och √§r inte l√§ngre tillg√§nglig';
+$string['fillinatleastoneoption'] = 'Du m√•ste se till att ha √•tminstone ett m√∂jligt svar.';
+$string['fillinatleasttwooptions'] = 'Du m√•ste se till att ha √•tminstone tv√• m√∂jliga svar.';
+$string['full'] = '(Full)';
+$string['havetologin'] = 'Du m√•ste logga in innan du kan genomf√∂ra ditt val';
+$string['choice'] = 'Val';
+$string['choicegroupclose'] = 'Tills';
+$string['choicegroup:deleteresponses'] = 'Radera svar';
+$string['choicegroup:downloadresponses'] = 'Ladda ner svar';
+$string['choicegroupfull'] = 'Den h√§r gruppen √§r fullsatt och det finns inga tillg√§ngliga platser.';
+$string['choicegroup:choose'] = 'Spela in ett val';
+$string['choicegroupname'] = 'Gruppvalets namn';
+$string['choicegroupopen'] = '√ñppna';
+$string['choicegroupoptions'] = 'Valalternativ';
+$string['choicegroupoptions_help'] = 'H√§r specificerar du alternativen som deltagarna kan v√§lja mellan.
+
+Du kan fylla i hur m√•nga som helst. Om du l√§mnar alternativ tomma, kommer dessa inte att visas. Om du beh√∂ver fler alternativ, klicka p√• "L√§gg till 3 f√§lt till formul√§ret"-knappen.';
+$string['limitanswers_help'] = 'Det h√§r alternativet g√∂r att du kan begr√§nsa antalet deltagare som kan v√§lja respektive alternativ. N√§r maxgr√§nsen √§r n√•dd kan inga fler v√§lja det alternativet.
+
+Om maxgr√§nser √§r avaktiverade, kan grupperna inneh√•lla obegr√§nsat antal medlemmar.';
+$string['choicegroup:addinstance'] = 'L√§gg till en ny gruppvalsaktivitet';
+$string['choicegroup:readresponses'] = 'L√§s svar';
+$string['choicegroupsaved'] = 'Ditt val har sparats';
+$string['choicetext'] = 'Text f√∂r valet';
+$string['chooseaction'] = 'V√§lj en √•tg√§rd ...';
+$string['choosegroup'] = 'V√§lj en grupp';
+$string['limit'] = 'Gr√§ns';
+$string['limitanswers'] = 'Begr√§nsa antalet till√•tna svar';
+$string['modulename'] = 'Gruppval';
+$string['modulename_help'] = 'Gruppvalsmodulen till√•ter studenter att anm√§la sig till grupper inom en kurs. L√§raren kan specificera vilka grupper studenter kan v√§lja fr√•n och begr√§nsa antalet studenter till√•tna i varje grupp.';
+$string['modulenameplural'] = 'Gruppval';
+$string['mustchooseone'] = 'Du m√•ste v√§lja ett svar innan du sparar. Inget sparades.';
+$string['noguestchoose'] = 'Tyv√§rr, g√§stanv√§ndare till√•ts inte g√∂ra gruppval.';
+$string['noresultsviewable'] = 'Resultaten √§r inte synliga just nu.';
+$string['neverresultsviewable'] = 'Resultaten √§r inte synliga.';
+$string['afterresultsviewable'] = 'Resultaten kommer vara synliga efter att du gjort ett val.';
+$string['notyetresultsviewable'] = 'Resultaten kommer vara synliga n√§r att aktiviteten avslutats.';
+$string['notanswered'] = 'Inte besvarad √§n';
+$string['notenrolledchoose'] = 'Tyv√§rr, enbart antagna anv√§ndare till√•ts g√∂ra val.';
+$string['notopenyet'] = 'Tyv√§rr, den h√§r aktiviteten √§r inte tillg√§nglig f√∂rr√§n {$a}';
+$string['option'] = 'Grupp';
+$string['pluginadministration'] = 'Administration f√∂r Gruppval';
+$string['pluginname'] = 'Gruppval';
+$string['privacy'] = 'Resultatens sekretess';
+$string['publish'] = 'Publicera resultaten';
+$string['publishafteranswer'] = 'Visa resultaten f√∂r studenter efter de svarat';
+$string['publishafterclose'] = 'Visa resultaten f√∂r studenter efter det att gruppvalet avslutats';
+$string['publishalways'] = 'Visa alltid resultaten f√∂r studenter';
+$string['publishanonymous'] = 'Publicera anonyma resultat, visa inte studenters namn';
+$string['publishnames'] = 'Publicera alla resultat, visa studenters namn och deras val';
+$string['publishnot'] = 'Publicera inte resultat f√∂r studenter';
+$string['removemychoicegroup'] = 'Ta bort mitt val';
+$string['removeresponses'] = 'Ta bort alla svar';
+$string['responses'] = 'Svar';
+$string['responsesto'] = 'Svar p√• {$a}';
+$string['savemychoicegroup'] = 'Spara mitt val';
+$string['showunanswered'] = 'Visa kolumn f√∂r obesvarade';
+$string['spaceleft'] = 'plats tillg√§nglig';
+$string['spacesleft'] = 'platser tillg√§ngliga';
+$string['taken'] = 'Tagen';
+$string['timerestrict'] = 'Begr√§nsa svar till denna tidsperiod';
+$string['viewallresponses'] = 'Visa {$a} svar';
+$string['byparticipants'] = 'av {$a} deltagare';
+$string['withselected'] = 'Med valda';
+$string['yourselection'] = 'Dina val';
+$string['skipresultgraph'] = 'Skippa resultatgrafen';
+$string['moveselectedusersto'] = 'Flytta valda anv√§ndare till...';
+$string['numberofuser'] = 'Antal anv√§ndare';
+$string['groupdoesntexist'] = 'Vissa av de specificerade grupperna finns inte i den h√§r kursen. L√§raren borde skapa de n√∂dv√§ndiga grupperna och/eller modifiera denna aktivitet.';
+$string['samegroupused'] = 'Samma grupp kan inte anv√§ndas flera g√•nger.';
+
+$string['members/max'] = 'Anm√§lda / Kapacitet';
+$string['members/'] = 'Anm√§lda';
+$string['groupmembers'] = 'Gruppmedlemmar';
+$string['page-mod-choice-x'] = 'Vilken gruppmoduls-sida som helst';
+$string['showdescription'] = 'Visa beskrivningar';
+$string['hidedescription'] = 'D√∂lj beskrivningar';
+$string['generallimitation'] = 'Generell begr√§nsning';
+$string['applytoallgroups'] = 'Applicera p√• alla grupper';
+$string['pleasesetgroups'] = 'Skapa √•tminstone tv√• grupper f√∂r din kurs.';
+
+$string['multipleenrollmentspossible'] = 'Till√•t anm√§lan till flera grupper';
+$string['and'] = 'och';
diff --git a/mod/choicegroup/lib.php b/mod/choicegroup/lib.php
new file mode 100644
index 0000000..6324d9a
--- /dev/null
+++ b/mod/choicegroup/lib.php
@@ -0,0 +1,1058 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+/** @global int $CHOICEGROUP_COLUMN_HEIGHT */
+global $CHOICEGROUP_COLUMN_HEIGHT;
+$CHOICEGROUP_COLUMN_HEIGHT = 300;
+
+/** @global int $CHOICEGROUP_COLUMN_WIDTH */
+global $CHOICEGROUP_COLUMN_WIDTH;
+$CHOICEGROUP_COLUMN_WIDTH = 300;
+
+define('CHOICEGROUP_PUBLISH_ANONYMOUS', '0');
+define('CHOICEGROUP_PUBLISH_NAMES',     '1');
+define('CHOICEGROUP_PUBLISH_DEFAULT',   '1');
+
+define('CHOICEGROUP_SHOWRESULTS_NOT',          '0');
+define('CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER', '1');
+define('CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE',  '2');
+define('CHOICEGROUP_SHOWRESULTS_ALWAYS',       '3');
+define('CHOICEGROUP_SHOWRESULTS_DEFAULT',      '3');
+
+define('CHOICEGROUP_DISPLAY_HORIZONTAL',  '0');
+define('CHOICEGROUP_DISPLAY_VERTICAL',    '1');
+
+define('CHOICEGROUP_SORTGROUPS_SYSTEMDEFAULT',    '0');
+define('CHOICEGROUP_SORTGROUPS_CREATEDATE',    '1');
+define('CHOICEGROUP_SORTGROUPS_NAME',    '2');
+
+/** @global array $CHOICEGROUP_PUBLISH */
+global $CHOICEGROUP_PUBLISH;
+$CHOICEGROUP_PUBLISH = array (CHOICEGROUP_PUBLISH_ANONYMOUS  => get_string('publishanonymous', 'choicegroup'),
+                         CHOICEGROUP_PUBLISH_NAMES      => get_string('publishnames', 'choicegroup'));
+
+/** @global array $CHOICEGROUP_SHOWRESULTS */
+global $CHOICEGROUP_SHOWRESULTS;
+$CHOICEGROUP_SHOWRESULTS = array (CHOICEGROUP_SHOWRESULTS_NOT          => get_string('publishnot', 'choicegroup'),
+                         CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER => get_string('publishafteranswer', 'choicegroup'),
+                         CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE  => get_string('publishafterclose', 'choicegroup'),
+                         CHOICEGROUP_SHOWRESULTS_ALWAYS       => get_string('publishalways', 'choicegroup'));
+
+/** @global array $CHOICEGROUP_DISPLAY */
+global $CHOICEGROUP_DISPLAY;
+$CHOICEGROUP_DISPLAY = array (CHOICEGROUP_DISPLAY_HORIZONTAL   => get_string('displayhorizontal', 'choicegroup'),
+                         CHOICEGROUP_DISPLAY_VERTICAL     => get_string('displayvertical','choicegroup'));
+
+require_once($CFG->dirroot.'/group/lib.php');
+
+/// Standard functions /////////////////////////////////////////////////////////
+
+/**
+ * @global object
+ * @param object $course
+ * @param object $user
+ * @param object $mod
+ * @param object $choicegroup
+ * @return object|null
+ */
+function choicegroup_user_outline($course, $user, $mod, $choicegroup) {
+    if ($groupmembership = choicegroup_get_user_answer($choicegroup, $user)) { // if user has answered
+        $result = new stdClass();
+        $result->info = "'".format_string($groupmembership->name)."'";
+        $result->time = $groupmembership->timeuseradded;
+        return $result;
+    }
+    return NULL;
+}
+
+/**
+ *
+ */
+function choicegroup_get_user_answer($choicegroup, $user, $returnArray = FALSE, $refresh = FALSE) {
+    global $DB, $choicegroup_groups;
+
+    static $user_answers = array();
+
+    if (is_numeric($user)) {
+        $userid = $user;
+    }
+    else {
+        $userid = $user->id;
+    }
+
+    if (!$refresh and isset($user_answers[$userid])) {
+        if ($returnArray === TRUE) {
+            return $user_answers[$userid];
+        } else {
+            return $user_answers[$userid][0];
+        }
+    } else {
+        $user_answers = array();
+    }
+
+    if (!count($choicegroup_groups)) {
+        $choicegroup_groups = choicegroup_get_groups($choicegroup);
+    }
+
+    $groupids = array();
+    foreach ($choicegroup_groups as $group) {
+        if (is_numeric($group->id)) {
+            $groupids[] = $group->id;
+        }
+    }
+    if ($groupids) {
+        $params1 = array($userid);
+        list($insql, $params2) = $DB->get_in_or_equal($groupids);
+        $params = array_merge($params1, $params2);
+        $groupmemberships = $DB->get_records_sql('SELECT * FROM {groups_members} WHERE userid = ? AND groupid '.$insql, $params);
+        $groups = array();
+        foreach ($groupmemberships as $groupmembership) {
+            $group = $choicegroup_groups[$groupmembership->groupid];
+            $group->timeuseradded = $groupmembership->timeadded;
+            $groups[] = $group;
+        }
+        if (count($groups) > 0) {
+            $user_answers[$userid] = $groups;
+            if ($returnArray === TRUE) {
+                return $groups;
+            } else {
+                return $groups[0];
+            }
+        }
+    }
+    return false;
+
+}
+
+/**
+ * @global object
+ * @param object $course
+ * @param object $user
+ * @param object $mod
+ * @param object $choicegroup
+ * @return string|void
+ */
+function choicegroup_user_complete($course, $user, $mod, $choicegroup) {
+    if ($groupmembership = choicegroup_get_user_answer($choicegroup, $user)) { // if user has answered
+        $result = new stdClass();
+        $result->info = "'".format_string($groupmembership->name)."'";
+        $result->time = $groupmembership->timeuseradded;
+        echo get_string("answered", "choicegroup").": $result->info. ".get_string("updated", '', userdate($result->time));
+    } else {
+        print_string("notanswered", "choicegroup");
+    }
+}
+
+/**
+ * Given an object containing all the necessary data,
+ * (defined by the form in mod_form.php) this function
+ * will create a new instance and return the id number
+ * of the new instance.
+ *
+ * @global object
+ * @param object $choicegroup
+ * @return int
+ */
+function choicegroup_add_instance($choicegroup) {
+    global $DB;
+
+    $choicegroup->timemodified = time();
+
+    if (empty($choicegroup->timerestrict)) {
+        $choicegroup->timeopen = 0;
+        $choicegroup->timeclose = 0;
+    }
+
+    //insert answers
+    $choicegroup->id = $DB->insert_record("choicegroup", $choicegroup);
+    
+    // deserialize the selected groups
+    
+    $groupIDs = explode(';', $choicegroup->serializedselectedgroups);
+    $groupIDs = array_diff( $groupIDs, array( '' ) );
+    
+    foreach ($groupIDs as $groupID) {
+        $groupID = trim($groupID);
+        if (isset($groupID) && $groupID != '') {
+            $option = new stdClass();
+            $option->groupid = $groupID;
+            $option->choicegroupid = $choicegroup->id;
+            $property = 'group_' . $groupID . '_limit';
+            if (isset($choicegroup->$property)) {
+            	$option->maxanswers = $choicegroup->$property;
+            }
+            $option->timemodified = time();
+            $DB->insert_record("choicegroup_options", $option);
+        }	
+    }
+    
+    return $choicegroup->id;
+}
+
+/**
+ * Given an object containing all the necessary data,
+ * (defined by the form in mod_form.php) this function
+ * will update an existing instance with new data.
+ *
+ * @global object
+ * @param object $choicegroup
+ * @return bool
+ */
+function choicegroup_update_instance($choicegroup) {
+    global $DB;
+
+    $choicegroup->id = $choicegroup->instance;
+    $choicegroup->timemodified = time();
+
+
+    if (empty($choicegroup->timerestrict)) {
+        $choicegroup->timeopen = 0;
+        $choicegroup->timeclose = 0;
+    }
+
+    if (empty($choicegroup->multipleenrollmentspossible)) {
+        $choicegroup->multipleenrollmentspossible = 0;
+    }
+    
+    
+    // deserialize the selected groups
+    
+    $groupIDs = explode(';', $choicegroup->serializedselectedgroups);
+    $groupIDs = array_diff( $groupIDs, array( '' ) );
+
+    // prepare pre-existing selected groups from database
+    
+    if (!($preExistingGroups = $DB->get_records("choicegroup_options", array("choicegroupid" => $choicegroup->id), "id"))) {
+    	return false;
+    }
+
+    // walk through form-selected groups
+    foreach ($groupIDs as $groupID) {
+    	$groupID = trim($groupID);
+    	if (isset($groupID) && $groupID != '') {
+    		$option = new stdClass();
+    		$option->groupid = $groupID;
+    		$option->choicegroupid = $choicegroup->id;
+    		$property = 'group_' . $groupID . '_limit';
+    		if (isset($choicegroup->$property)) {
+    			$option->maxanswers = $choicegroup->$property;
+    		}
+    		$option->timemodified = time();
+    		// Find out if this selection already exists
+    		foreach ($preExistingGroups as $key => $preExistingGroup) {
+    			if ($option->groupid == $preExistingGroup->groupid) {
+    				// match found, so instead of creating a new record we should merely update a pre-existing record
+    				$option->id = $preExistingGroup->id;
+    				$DB->update_record("choicegroup_options", $option);
+    				// remove the element from the array to not deal with it later
+    				unset($preExistingGroups[$key]);
+    				continue 2; // continue the big loop
+    			}
+    		}
+    		$DB->insert_record("choicegroup_options", $option);	
+    	}
+    	 
+    }
+    // remove all remaining pre-existing groups which did not appear in the form (and are thus assumed to have been deleted)
+    foreach ($preExistingGroups as $preExistingGroup) {
+    	$DB->delete_records("choicegroup_options", array("id"=>$preExistingGroup->id));
+    }
+
+    return $DB->update_record('choicegroup', $choicegroup);
+
+}
+
+/**
+ * @global object
+ * @param object $choicegroup
+ * @param object $user
+ * @param object $coursemodule
+ * @param array $allresponses
+ * @return array
+ */
+function choicegroup_prepare_options($choicegroup, $user, $coursemodule, $allresponses) {
+
+    $cdisplay = array('options'=>array());
+
+    $cdisplay['limitanswers'] = true;
+    $context = context_module::instance($coursemodule->id);
+    $answers = choicegroup_get_user_answer($choicegroup, $user, TRUE);
+
+    foreach ($choicegroup->option as $optionid => $text) {
+        if (isset($text)) { //make sure there are no dud entries in the db with blank text values.
+            $option = new stdClass;
+            $option->attributes = new stdClass;
+            $option->attributes->value = $optionid;
+            $option->groupid = $text;
+            $option->maxanswers = $choicegroup->maxanswers[$optionid];
+            $option->displaylayout = $choicegroup->display;
+
+            if (isset($allresponses[$text])) {
+                $option->countanswers = count($allresponses[$text]);
+            } else {
+                $option->countanswers = 0;
+            }
+            if (is_array($answers)) {
+                foreach($answers as $answer) {
+                    if ($answer && $text == $answer->id) {
+                        $option->attributes->checked = true;
+                    }
+                }
+            }
+            if ( $choicegroup->limitanswers && ($option->countanswers >= $option->maxanswers) && empty($option->attributes->checked)) {
+                $option->attributes->disabled = true;
+            }
+            $cdisplay['options'][] = $option;
+        }
+    }
+
+    $cdisplay['hascapability'] = is_enrolled($context, NULL, 'mod/choicegroup:choose'); //only enrolled users are allowed to make a choicegroup
+
+    if ($choicegroup->allowupdate && is_array($answers)) {
+        $cdisplay['allowupdate'] = true;
+    }
+
+    return $cdisplay;
+}
+
+/**
+ * @global object
+ * @param int $formanswer
+ * @param object $choicegroup
+ * @param int $userid
+ * @param object $course Course object
+ * @param object $cm
+ */
+function choicegroup_user_submit_response($formanswer, $choicegroup, $userid, $course, $cm) {
+    global $DB, $CFG;
+    require_once($CFG->libdir.'/completionlib.php');
+
+    $context = context_module::instance($cm->id);
+    $eventparams = array(
+        'context' => $context,
+        'objectid' => $choicegroup->id
+    );
+
+    $selected_option = $DB->get_record('choicegroup_options', array('id' => $formanswer));
+
+    $current = choicegroup_get_user_answer($choicegroup, $userid);
+    if ($current) {
+        $currentgroup = $DB->get_record('groups', array('id' => $current->id), 'id,name', MUST_EXIST);
+    }
+    $selectedgroup = $DB->get_record('groups', array('id' => $selected_option->groupid), 'id,name', MUST_EXIST);
+
+    $countanswers=0;
+    groups_add_member($selected_option->groupid, $userid);
+    $groupmember_added = true;    
+    if ($choicegroup->limitanswers) {
+        $groupmember = $DB->get_record('groups_members', array('groupid' => $selected_option->groupid, 'userid'=>$userid));
+        $select_count = 'groupid='.$selected_option->groupid.' and id<='.$groupmember->id;
+        $countanswers = $DB->count_records_select('groups_members', $select_count);
+        $maxans = $choicegroup->maxanswers[$formanswer];
+        if ($countanswers > $maxans) {    
+           groups_remove_member($selected_option->groupid, $userid);
+           $groupmember_added = false;
+      }
+    }
+    if ($groupmember_added) {
+        if ($current) {
+            if (!($choicegroup->multipleenrollmentspossible == 1)) {
+                if ($selected_option->groupid != $current->id) {
+                    if (groups_is_member($current->id, $userid)) {
+                        groups_remove_member($current->id, $userid);
+//                        $eventparams['groupname'] = $currentgroup->name;
+                        $event = \mod_choicegroup\event\choice_removed::create($eventparams);
+                        $event->add_record_snapshot('course_modules', $cm);
+                        $event->add_record_snapshot('course', $course);
+                        $event->add_record_snapshot('choicegroup', $choicegroup);
+                        $event->trigger();
+                    }
+                }
+            }
+        } else {
+            // Update completion state
+            $completion = new completion_info($course);
+            if ($completion->is_enabled($cm) && $choicegroup->completionsubmit) {
+                $completion->update_state($cm, COMPLETION_COMPLETE);
+            }
+//            $eventparams['groupname'] = $selectedgroup->name;
+            $event = \mod_choicegroup\event\choice_updated::create($eventparams);
+            $event->add_record_snapshot('course_modules', $cm);
+            $event->add_record_snapshot('course', $course);
+            $event->add_record_snapshot('choicegroup', $choicegroup);
+            $event->trigger();
+        }
+    } else {
+        if (!$current || !($current->id==$selected_option->groupid)) { //check to see if current choicegroup already selected - if not display error
+            print_error('choicegroupfull', 'choicegroup', $CFG->wwwroot.'/mod/choicegroup/view.php?id='.$cm->id);
+        }
+    }
+}
+
+/**
+ * @param object $choicegroup
+ * @param array $allresponses
+ * @param object $cm
+ * @return void Output is echo'd
+ */
+function choicegroup_show_reportlink($choicegroup, $allresponses, $cm) {
+    $responsecount = 0;
+    $respondents = array();
+    foreach($allresponses as $optionid => $userlist) {
+        if ($optionid) {
+            $responsecount += count($userlist);
+            if ($choicegroup->multipleenrollmentspossible) {
+                foreach ($userlist as $user) {
+                    if (!in_array($user->id, $respondents)) {
+                        $respondents[] = $user->id;
+                    }
+                }
+            }
+        }
+    }
+    echo '<div class="reportlink"><a href="report.php?id='.$cm->id.'">'.get_string("viewallresponses", "choicegroup", $responsecount);
+    if ($choicegroup->multipleenrollmentspossible == 1) {
+        echo ' ' . get_string("byparticipants", "choicegroup", count($respondents));
+    }
+    echo '</a></div>';
+}
+
+/**
+ * @global object
+ * @param object $choicegroup
+ * @param object $course
+ * @param object $coursemodule
+ * @param array $allresponses
+
+ *  * @param bool $allresponses
+ * @return object
+ */
+function prepare_choicegroup_show_results($choicegroup, $course, $cm, $allresponses, $forcepublish=false) {
+    global $CFG, $FULLSCRIPT, $PAGE, $OUTPUT;
+
+    $display = clone($choicegroup);
+    $display->coursemoduleid = $cm->id;
+    $display->courseid = $course->id;
+//debugging('<pre>'.print_r($choicegroup->option, true).'</pre>', DEBUG_DEVELOPER);
+//debugging('<pre>'.print_r($allresponses, true).'</pre>', DEBUG_DEVELOPER);
+
+    //overwrite options value;
+    $display->options = array();
+    $totaluser = 0;
+    foreach ($choicegroup->option as $optionid => $groupid) {
+        $display->options[$optionid] = new stdClass;
+        $display->options[$optionid]->groupid = $groupid;
+        $display->options[$optionid]->maxanswer = $choicegroup->maxanswers[$optionid];
+
+        if (array_key_exists($groupid, $allresponses)) {
+            $display->options[$optionid]->user = $allresponses[$groupid];
+            foreach ($display->options[$optionid]->user as $user){
+                $user->grpsmemberid = array_search(array($groupid, $user->id), $choicegroup->grpmemberid);
+            }
+            $totaluser += count($allresponses[$groupid]);
+        }
+    }
+    if ($choicegroup->showunanswered) {
+        $display->options[0]->user = $allresponses[0];
+    }
+    unset($display->option);
+    unset($display->maxanswers);
+
+    $display->numberofuser = $totaluser;
+    $context = context_module::instance($cm->id);
+    $display->viewresponsecapability = has_capability('mod/choicegroup:readresponses', $context);
+    $display->deleterepsonsecapability = has_capability('mod/choicegroup:deleteresponses',$context);
+    $display->fullnamecapability = has_capability('moodle/site:viewfullnames', $context);
+
+    if (empty($allresponses)) {
+        echo $OUTPUT->heading(get_string("nousersyet"));
+        return false;
+    }
+
+
+    $totalresponsecount = 0;
+    foreach ($allresponses as $optionid => $userlist) {
+        if ($choicegroup->showunanswered || $optionid) {
+            $totalresponsecount += count($userlist);
+        }
+    }
+
+    $context = context_module::instance($cm->id);
+
+    $hascapfullnames = has_capability('moodle/site:viewfullnames', $context);
+
+    $viewresponses = has_capability('mod/choicegroup:readresponses', $context);
+    switch ($forcepublish) {
+        case CHOICEGROUP_PUBLISH_NAMES:
+            echo '<div id="tablecontainer">';
+            if ($viewresponses) {
+                echo '<form id="attemptsform" method="post" action="'.$FULLSCRIPT.'" onsubmit="var menu = document.getElementById(\'menuaction\'); return (menu.options[menu.selectedIndex].value == \'delete\' ? \''.addslashes_js(get_string('deleteattemptcheck','quiz')).'\' : true);">';
+                echo '<div>';
+                echo '<input type="hidden" name="id" value="'.$cm->id.'" />';
+                echo '<input type="hidden" name="sesskey" value="'.sesskey().'" />';
+                echo '<input type="hidden" name="mode" value="overview" />';
+            }
+
+            echo "<table cellpadding=\"5\" cellspacing=\"10\" class=\"results names\">";
+            echo "<tr>";
+
+            $columncount = array(); // number of votes in each column
+            if ($choicegroup->showunanswered) {
+                $columncount[0] = 0;
+                echo "<th class=\"col0 header\" scope=\"col\">";
+                print_string('notanswered', 'choicegroup');
+                echo "</th>";
+            }
+            $count = 1;
+            foreach ($choicegroup->option as $optionid => $optiontext) {
+                $columncount[$optionid] = 0; // init counters
+                echo "<th class=\"col$count header\" scope=\"col\">";
+                echo format_string($optiontext);
+                echo "</th>";
+                $count++;
+            }
+            echo "</tr><tr>";
+
+            if ($choicegroup->showunanswered) {
+                echo "<td class=\"col$count data\" >";
+                // added empty row so that when the next iteration is empty,
+                // we do not get <table></table> error from w3c validator
+                // MDL-7861
+                echo "<table class=\"choicegroupresponse\"><tr><td></td></tr>";
+                if (!empty($allresponses[0])) {
+                    foreach ($allresponses[0] as $user) {
+                        echo "<tr>";
+                        echo "<td class=\"picture\">";
+                        echo $OUTPUT->user_picture($user, array('courseid'=>$course->id));
+                        echo "</td><td class=\"fullname\">";
+                        echo "<a href=\"$CFG->wwwroot/user/view.php?id=$user->id&amp;course=$course->id\">";
+                        echo fullname($user, $hascapfullnames);
+                        echo "</a>";
+                        echo "</td></tr>";
+                    }
+                }
+                echo "</table></td>";
+            }
+            $count = 1;
+            foreach ($choicegroup->option as $optionid => $optiontext) {
+                    echo '<td class="col'.$count.' data" >';
+
+                    // added empty row so that when the next iteration is empty,
+                    // we do not get <table></table> error from w3c validator
+                    // MDL-7861
+                    echo '<table class="choicegroupresponse"><tr><td></td></tr>';
+                    if (isset($allresponses[$optionid])) {
+                        foreach ($allresponses[$optionid] as $user) {
+                            $columncount[$optionid] += 1;
+                            echo '<tr><td class="attemptcell">';
+                            if ($viewresponses and has_capability('mod/choicegroup:deleteresponses',$context)) {
+                                echo '<input type="checkbox" name="userid[]" value="'. $user->id. '" />';
+                            }
+                            echo '</td><td class="picture">';
+                            echo $OUTPUT->user_picture($user, array('courseid'=>$course->id));
+                            echo '</td><td class="fullname">';
+                            echo "<a href=\"$CFG->wwwroot/user/view.php?id=$user->id&amp;course=$course->id\">";
+                            echo fullname($user, $hascapfullnames);
+                            echo '</a>';
+                            echo '</td></tr>';
+                       }
+                    }
+                    $count++;
+                    echo '</table></td>';
+            }
+            echo "</tr><tr>";
+            $count = 1;
+
+            if ($choicegroup->showunanswered) {
+                echo "<td></td>";
+            }
+
+            foreach ($choicegroup->option as $optionid => $optiontext) {
+                echo "<td align=\"center\" class=\"col$count count\">";
+                if ($choicegroup->limitanswers) {
+                    echo get_string("taken", "choicegroup").":";
+                    echo $columncount[$optionid];
+                    echo "<br/>";
+                    echo get_string("limit", "choicegroup").":";
+                    echo $choicegroup->maxanswers[$optionid];
+                } else {
+                    if (isset($columncount[$optionid])) {
+                        echo $columncount[$optionid];
+                    }
+                }
+                echo "</td>";
+                $count++;
+            }
+            echo "</tr>";
+
+            /// Print "Select all" etc.
+            if ($viewresponses and has_capability('mod/choicegroup:deleteresponses',$context)) {
+                echo '<tr><td></td><td>';
+                echo '<a href="javascript:select_all_in(\'DIV\',null,\'tablecontainer\');">'.get_string('selectall').'</a> / ';
+                echo '<a href="javascript:deselect_all_in(\'DIV\',null,\'tablecontainer\');">'.get_string('deselectall').'</a> ';
+                echo '&nbsp;&nbsp;';
+                echo html_writer::label(get_string('withselected', 'choicegroup'), 'menuaction');
+                echo html_writer::select(array('delete' => get_string('delete')), 'action', '', array(''=>get_string('withselectedusers')), array('id'=>'menuaction'));
+                $PAGE->requires->js_init_call('M.util.init_select_autosubmit', array('attemptsform', 'menuaction', ''));
+                echo '<noscript id="noscriptmenuaction" style="display:inline">';
+                echo '<div>';
+                echo '<input type="submit" value="'.get_string('go').'" /></div></noscript>';
+                echo '</td><td></td></tr>';
+            }
+
+            echo "</table></div>";
+            if ($viewresponses) {
+                echo "</form></div>";
+            }
+            break;
+    }
+    return $display;
+}
+
+/**
+ * @global object
+ * @param array $grpsmemberids
+ * @param object $choicegroup Choice main table row
+ * @param object $cm Course-module object
+ * @param object $course Course object
+ * @return bool
+ */
+function choicegroup_delete_responses($grpsmemberids, $choicegroup, $cm, $course) {
+    global $CFG, $DB, $context;
+    require_once($CFG->libdir.'/completionlib.php');
+
+    if(!is_array($grpsmemberids) || empty($grpsmemberids)) {
+        return false;
+    }
+
+    foreach($grpsmemberids as $num => $grpsmemberid) {
+        if(empty($grpsmemberid)) {
+            unset($grpsmemberids[$num]);
+        }
+    }
+
+    $completion = new completion_info($course);
+    $eventparams = array(
+        'context' => $context,
+        'objectid' => $choicegroup->id
+    );
+
+    foreach($grpsmemberids as $grpsmemberid) {
+        $groupsmember = $DB->get_record('groups_members', array('id'=>$grpsmemberid), '*', MUST_EXIST);
+        $userid = $groupsmember->userid;
+        $groupid = $groupsmember->groupid;
+        $currentgroup = $DB->get_record('groups', array('id' => $groupid), 'id,name', MUST_EXIST);
+        if (groups_is_member($groupid, $userid)) {
+            groups_remove_member($groupid, $userid);
+            $event = \mod_choicegroup\event\choice_removed::create($eventparams);
+            $event->add_record_snapshot('course_modules', $cm);
+            $event->add_record_snapshot('course', $course);
+            $event->add_record_snapshot('choicegroup', $choicegroup);
+            $event->trigger();
+        }
+        // Update completion state
+        $current = choicegroup_get_user_answer($choicegroup, $userid, false, true);
+        if ($current === false && $completion->is_enabled($cm) && $choicegroup->completionsubmit) {
+            $completion->update_state($cm, COMPLETION_INCOMPLETE, $userid);
+        }
+    }
+    return true;
+}
+
+
+/**
+ * Given an ID of an instance of this module,
+ * this function will permanently delete the instance
+ * and any data that depends on it.
+ *
+ * @global object
+ * @param int $id
+ * @return bool
+ */
+function choicegroup_delete_instance($id) {
+    global $DB;
+
+    if (! $choicegroup = $DB->get_record("choicegroup", array("id"=>"$id"))) {
+        return false;
+    }
+
+    $result = true;
+
+    if (! $DB->delete_records("choicegroup_options", array("choicegroupid"=>"$choicegroup->id"))) {
+        $result = false;
+    }
+
+    if (! $DB->delete_records("choicegroup", array("id"=>"$choicegroup->id"))) {
+        $result = false;
+    }
+
+    return $result;
+}
+
+/**
+ * Returns text string which is the answer that matches the id
+ *
+ * @global object
+ * @param object $choicegroup
+ * @param int $id
+ * @return string
+ */
+function choicegroup_get_option_text($choicegroup, $id) {
+    global $DB;
+
+    if ($result = $DB->get_record('groups', array('id' => $id))) {
+        return $result->name;
+    } else {
+        return get_string("notanswered", "choicegroup");
+    }
+}
+
+/*
+ * Returns DB records of groups used by the choicegroup activity
+ *
+ * @global object
+ * @param object $choicegroup
+ * @return array
+ */
+function choicegroup_get_groups($choicegroup) {
+    global $DB;
+
+    static $groups = array();
+
+    if (count($groups)) {
+        return $groups;
+    }
+
+    if (is_numeric($choicegroup)) {
+        $choicegroupid = $choicegroup;
+    }
+    else {
+        $choicegroupid = $choicegroup->id;
+    }
+
+    $groups = array();
+    $options = $DB->get_records('choicegroup_options', array('choicegroupid' => $choicegroupid));
+    foreach ($options as $option) {
+        if ($group = $DB->get_record('groups', array('id' => $option->groupid)))
+        $groups[$group->id] = $group;
+    }
+    return $groups;
+}
+
+/**
+ * Gets a full choicegroup record
+ *
+ * @global object
+ * @param int $choicegroupid
+ * @return object|bool The choicegroup or false
+ */
+function choicegroup_get_choicegroup($choicegroupid) {
+    global $DB;
+
+    if ($choicegroup = $DB->get_record("choicegroup", array("id" => $choicegroupid))) {
+        $sortcolumn = choicegroup_get_sort_column($choicegroup);
+
+        $params = array(
+            'choicegroupid' => $choicegroupid
+        );
+
+        $grpfilter = '';
+        if (($groupid = optional_param('group', 0, PARAM_INT)) != 0) {
+            $params['groupid'] = $groupid;
+            $grpfilter = "AND grp_o.groupid = :groupid";
+        }
+
+        $sql = "SELECT grp_m.id grpmemberid, grp_m.userid, grp_o.id, grp_o.groupid, grp_o.maxanswers
+                 FROM {groups} grp
+                 INNER JOIN {choicegroup_options} grp_o on grp.id = grp_o.groupid
+                 LEFT JOIN {groups_members} grp_m on grp_m.groupid = grp_o.groupid
+                 WHERE grp_o.choicegroupid = :choicegroupid $grpfilter
+                 ORDER BY $sortcolumn ASC";
+
+        $rs = $DB->get_recordset_sql($sql, $params);
+
+        foreach ($rs as $option) {
+            $choicegroup->option[$option->id] = $option->groupid;
+            $choicegroup->grpmemberid[$option->grpmemberid] = array($option->groupid, $option->userid);
+            $choicegroup->maxanswers[$option->id] = $option->maxanswers;
+        }
+
+        $rs->close();
+
+        return $choicegroup;
+    }
+    return false;
+}
+
+function choicegroup_get_sort_column($choicegroup) {
+    if ($choicegroup->sortgroupsby == CHOICEGROUP_SORTGROUPS_SYSTEMDEFAULT) {
+        $sortcolumn = get_config('choicegroup', 'sortgroupsby');
+    } else {
+        $sortcolumn = $choicegroup->sortgroupsby;
+    }
+
+    switch ($sortcolumn) {
+        case CHOICEGROUP_SORTGROUPS_CREATEDATE:
+            return 'timecreated';
+        case CHOICEGROUP_SORTGROUPS_NAME:
+            return 'name';
+        default:
+            return 'timecreated';
+    }
+}
+
+/**
+ * @return array
+ */
+function choicegroup_get_view_actions() {
+    return array('view','view all','report');
+}
+
+/**
+ * @return array
+ */
+function choicegroup_get_post_actions() {
+    return array('choose','choose again');
+}
+
+
+/**
+ * Implementation of the function for printing the form elements that control
+ * whether the course reset functionality affects the choicegroup.
+ *
+ * @param object $mform form passed by reference
+ */
+function choicegroup_reset_course_form_definition(&$mform) {
+    $mform->addElement('header', 'choicegroupheader', get_string('modulenameplural', 'choicegroup'));
+    $mform->addElement('advcheckbox', 'reset_choicegroup', get_string('removeresponses','choicegroup'));
+}
+
+/**
+ * Course reset form defaults.
+ *
+ * @return array
+ */
+function choicegroup_reset_course_form_defaults($course) {
+    return array('reset_choicegroup'=>1);
+}
+
+/**
+ * @global object
+ * @global object
+ * @global object
+ * @uses CONTEXT_MODULE
+ * @param object $choicegroup
+ * @param object $cm
+ * @return array
+ */
+function choicegroup_get_response_data($choicegroup, $cm) {
+    // Initialise the returned array, which is a matrix:  $allresponses[responseid][userid] = responseobject.
+    static $allresponses = array();
+
+    if (count($allresponses)) {
+        return $allresponses;
+    }
+ 
+    // First get all the users who have access here.
+    // To start with we assume they are all "unanswered" then move them later.
+    $ctx = \context_module::instance($cm->id);
+    $users = get_enrolled_users($ctx, 'mod/choicegroup:choose', 0, user_picture::fields('u', array('idnumber')), 'u.lastname ASC,u.firstname ASC');
+    if ($users) {
+        $modinfo = get_fast_modinfo($cm->course);
+        $cminfo = $modinfo->get_cm($cm->id);
+        $availability = new \core_availability\info_module($cminfo);
+        $users = $availability->filter_user_list($users);
+    }
+
+    $allresponses[0] = $users;
+
+    $responses = choicegroup_get_responses($choicegroup, $ctx);
+    foreach ($responses as $response){
+        if (isset($users[$response->userid])) {
+            $allresponses[$response->groupid][$response->userid] = clone $users[$response->userid];
+            $allresponses[$response->groupid][$response->userid]->timemodified = $response->timeadded;
+
+            unset($allresponses[0][$response->userid]);
+        }
+    }
+   return $allresponses;
+}
+
+/* Return an array with the options selected of users of the $choicegroup 
+ * 
+ * @param object $choicegroup choicegroup record
+ * @param object $cm course module object
+ * @return array of selected options by all users 
+*/
+function choicegroup_get_responses($choicegroup, $cm){
+
+    global $DB;
+
+    if (is_numeric($choicegroup)) {
+        $choicegroupid = $choicegroup;
+    } else {
+        $choicegroupid = $choicegroup->id;
+    }
+
+    $params1 = array('choicegroupid'=>$choicegroupid);
+    list($esql, $params2) = get_enrolled_sql($cm, 'mod/choicegroup:choose', 0);
+    $params = array_merge($params1, $params2);
+
+    $sql = 'SELECT gm.* FROM {user} u JOIN ('.$esql.') je ON je.id = u.id
+        JOIN {groups_members} gm ON gm.userid = u.id AND groupid IN (
+        SELECT groupid FROM {choicegroup_options} WHERE choicegroupid=:choicegroupid)
+        WHERE u.deleted = 0 ORDER BY u.lastname ASC,u.firstname ASC';
+
+    return $DB->get_records_sql($sql, $params);
+}
+
+/**
+ * Returns all other caps used in module
+ *
+ * @return array
+ */
+function choicegroup_get_extra_capabilities() {
+    return array('moodle/site:accessallgroups');
+}
+
+/**
+ * @uses FEATURE_GROUPS
+ * @uses FEATURE_GROUPINGS
+ * @uses FEATURE_GROUPMEMBERSONLY
+ * @uses FEATURE_MOD_INTRO
+ * @uses FEATURE_COMPLETION_TRACKS_VIEWS
+ * @uses FEATURE_GRADE_HAS_GRADE
+ * @uses FEATURE_GRADE_OUTCOMES
+ * @param string $feature FEATURE_xx constant for requested feature
+ * @return mixed True if module supports feature, null if doesn't know
+ */
+function choicegroup_supports($feature) {
+    switch($feature) {
+        case FEATURE_GROUPS:                  return true;
+        case FEATURE_GROUPINGS:               return true;
+        case FEATURE_GROUPMEMBERSONLY:        return true;
+        case FEATURE_MOD_INTRO:               return true;
+        case FEATURE_COMPLETION_TRACKS_VIEWS: return true;
+        case FEATURE_COMPLETION_HAS_RULES:    return true;
+        case FEATURE_GRADE_HAS_GRADE:         return false;
+        case FEATURE_GRADE_OUTCOMES:          return false;
+        case FEATURE_BACKUP_MOODLE2:          return true;
+        case FEATURE_SHOW_DESCRIPTION:        return true;
+
+        default: return null;
+    }
+}
+
+/**
+ * Adds module specific settings to the settings block
+ *
+ * @param settings_navigation $settings The settings navigation object
+ * @param navigation_node $choicegroupnode The node to add module settings to
+ */
+function choicegroup_extend_settings_navigation(settings_navigation $settings, navigation_node $choicegroupnode) {
+    global $PAGE;
+
+    if (has_capability('mod/choicegroup:readresponses', $PAGE->cm->context)) {
+
+        $groupmode = groups_get_activity_groupmode($PAGE->cm);
+        if ($groupmode) {
+            groups_get_activity_group($PAGE->cm, true);
+        }
+        if (!$choicegroup = choicegroup_get_choicegroup($PAGE->cm->instance)) {
+            print_error('invalidcoursemodule');
+            return false;
+        }
+        $allresponses = choicegroup_get_response_data($choicegroup, $PAGE->cm, $groupmode);   // Big function, approx 6 SQL calls per user
+
+        $responsecount = 0;
+        $respondents = array();
+        foreach($allresponses as $optionid => $userlist) {
+            if ($optionid) {
+                $responsecount += count($userlist);
+                if ($choicegroup->multipleenrollmentspossible) {
+                    foreach ($userlist as $user) {
+                        if (!in_array($user->id, $respondents)) {
+                            $respondents[] = $user->id;
+                        }
+                    }
+                }
+            }
+        }
+        $viewallresponsestext = get_string("viewallresponses", "choicegroup", $responsecount);
+        if ($choicegroup->multipleenrollmentspossible == 1) {
+            $viewallresponsestext .= ' ' . get_string("byparticipants", "choicegroup", count($respondents));
+        }
+        $choicegroupnode->add($viewallresponsestext, new moodle_url('/mod/choicegroup/report.php', array('id'=>$PAGE->cm->id)));
+    }
+}
+
+/**
+ * Obtains the automatic completion state for this choicegroup based on any conditions
+ * in forum settings.
+ *
+ * @param object $course Course
+ * @param object $cm Course-module
+ * @param int $userid User ID
+ * @param bool $type Type of comparison (or/and; can be used as return value if no conditions)
+ * @return bool True if completed, false if not, $type if conditions not set.
+ */
+function choicegroup_get_completion_state($course, $cm, $userid, $type) {
+    global $DB;
+
+    // Get choicegroup details
+    $choicegroup = $DB->get_record('choicegroup', array('id'=>$cm->instance), '*', MUST_EXIST);
+
+    // If completion option is enabled, evaluate it and return true/false
+    if($choicegroup->completionsubmit) {
+        $useranswer = choicegroup_get_user_answer($choicegroup, $userid);
+        return $useranswer !== false;
+    } else {
+        // Completion option is not enabled so just return $type
+        return $type;
+    }
+}
+
+
+/**
+ * Return a list of page types
+ * @param string $pagetype current page type
+ * @param stdClass $parentcontext Block's parent context
+ * @param stdClass $currentcontext Current context of block
+ */
+function choicegroup_page_type_list($pagetype, $parentcontext, $currentcontext) {
+    $module_pagetype = array('mod-choicegroup-*'=>get_string('page-mod-choicegroup-x', 'choice'));
+    return $module_pagetype;
+}
+
+
+function choicegroup_get_sort_options() {
+    return array (
+        CHOICEGROUP_SORTGROUPS_CREATEDATE => get_string('createdate', 'choicegroup'),
+        CHOICEGROUP_SORTGROUPS_NAME => get_string('name', 'choicegroup')
+    );
+}
diff --git a/mod/choicegroup/mod_form.php b/mod/choicegroup/mod_form.php
new file mode 100644
index 0000000..378e0ae
--- /dev/null
+++ b/mod/choicegroup/mod_form.php
@@ -0,0 +1,295 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once ($CFG->dirroot.'/course/moodleform_mod.php');
+
+class mod_choicegroup_mod_form extends moodleform_mod {
+
+	function definition() {
+		global $CFG, $CHOICEGROUP_SHOWRESULTS, $CHOICEGROUP_PUBLISH, $CHOICEGROUP_DISPLAY, $DB, $COURSE, $PAGE;
+
+		$mform    =& $this->_form;
+
+		//-------------------------------------------------------------------------------
+		$mform->addElement('header', 'general', get_string('general', 'form'));
+
+		$mform->addElement('text', 'name', get_string('choicegroupname', 'choicegroup'), array('size'=>'64'));
+		if (!empty($CFG->formatstringstriptags)) {
+			$mform->setType('name', PARAM_TEXT);
+		} else {
+			$mform->setType('name', PARAM_CLEANHTML);
+		}
+		$mform->addRule('name', null, 'required', null, 'client');
+
+	        if (method_exists($this, 'standard_intro_elements')) {
+	            $this->standard_intro_elements(get_string('description'));
+	        } else {
+	            $this->add_intro_editor(true, get_string('description'));
+	        }
+
+		//-------------------------------------------------------------------------------
+
+
+		// -------------------------
+		// Fetch data from database
+		// -------------------------
+		$groups = array();
+		$db_groups = $DB->get_records('groups', array('courseid' => $COURSE->id));
+		foreach ($db_groups as $group) {
+			$groups[$group->id] = new stdClass();
+			$groups[$group->id]->name = format_string($group->name);
+			$groups[$group->id]->mentioned = false;
+			$groups[$group->id]->id = $group->id;
+		}
+
+		if (count($db_groups) < 2) {
+			print_error('pleasesetgroups', 'choicegroup', new moodle_url('/course/view.php?id='.$COURSE->id));
+		}
+
+		$db_groupings = $DB->get_records('groupings', array('courseid' => $COURSE->id));
+        $groupings = array();
+        if ($db_groupings) {
+            foreach ($db_groupings as $grouping) {
+                $groupings[$grouping->id] = new stdClass();
+                $groupings[$grouping->id]->name = $grouping->name;
+            }
+
+            list($sqlin, $inparams) = $DB->get_in_or_equal(array_keys($groupings));
+            $db_groupings_groups = $DB->get_records_select('groupings_groups', 'groupingid '.$sqlin, $inparams);
+
+            foreach ($db_groupings_groups as $grouping_group_link) {
+                $groupings[$grouping_group_link->groupingid]->linkedGroupsIDs[] =  $grouping_group_link->groupid;
+            }
+        }
+		// -------------------------
+		// -------------------------
+
+		// -------------------------
+		// Continue generating form
+		// -------------------------
+		$mform->addElement('header', 'miscellaneoussettingshdr', get_string('miscellaneoussettings', 'form'));
+		$mform->setExpanded('miscellaneoussettingshdr');
+		$mform->addElement('checkbox', 'multipleenrollmentspossible', get_string('multipleenrollmentspossible', 'choicegroup'));
+
+		$mform->addElement('select', 'showresults', get_string("publish", "choicegroup"), $CHOICEGROUP_SHOWRESULTS);
+		$mform->setDefault('showresults', CHOICEGROUP_SHOWRESULTS_DEFAULT);
+
+		$mform->addElement('select', 'publish', get_string("privacy", "choicegroup"), $CHOICEGROUP_PUBLISH, CHOICEGROUP_PUBLISH_DEFAULT);
+		$mform->setDefault('publish', CHOICEGROUP_PUBLISH_DEFAULT);
+		$mform->disabledIf('publish', 'showresults', 'eq', 0);
+
+		$mform->addElement('selectyesno', 'allowupdate', get_string("allowupdate", "choicegroup"));
+
+		$mform->addElement('selectyesno', 'showunanswered', get_string("showunanswered", "choicegroup"));
+
+		$menuoptions = array();
+		$menuoptions[0] = get_string('disable');
+		$menuoptions[1] = get_string('enable');
+		$mform->addElement('select', 'limitanswers', get_string('limitanswers', 'choicegroup'), $menuoptions);
+		$mform->addHelpButton('limitanswers', 'limitanswers', 'choicegroup');
+
+		$mform->addElement('text', 'generallimitation', get_string('generallimitation', 'choicegroup'), array('size' => '6'));
+		$mform->setType('generallimitation', PARAM_INT);
+		$mform->disabledIf('generallimitation', 'limitanswers', 'neq', 1);
+		$mform->addRule('generallimitation', get_string('error'), 'numeric', 'extraruledata', 'client', false, false);
+		$mform->setDefault('generallimitation', 0);
+		$mform->addElement('button', 'setlimit', get_string('applytoallgroups', 'choicegroup'));
+		$mform->disabledIf('setlimit', 'limitanswers', 'neq', 1);
+
+
+		// -------------------------
+		// Generate the groups section of the form
+		// -------------------------
+
+
+		$mform->addElement('header', 'groups', get_string('groupsheader', 'choicegroup'));
+		$mform->addElement('html', '<fieldset class="clearfix">
+				<div class="fcontainer clearfix">
+				<div id="fitem_id_option_0" class="fitem fitem_fselect ">
+				<div class="fitemtitle"><label for="id_option_0">'.get_string('groupsheader', 'choicegroup').'</label><span class="helptooltip"><a href="'. $CFG->wwwroot .'/help.php?component=choicegroup&amp;identifier=choicegroupoptions&amp;lang='.current_language().'" title="'.get_string('choicegroupoptions_help', 'choicegroup').'" aria-haspopup="true" target="_blank"><img src="'.$CFG->wwwroot.'/theme/image.php?theme='.$PAGE->theme->name.'&component=core&image=help" alt="'.get_string('choicegroupoptions_help', 'choicegroup').'" class="iconhelp"></a></span></div><div class="felement fselect">
+                <div class="tablecontainer">
+				<table><tr><th>'.get_string('available_groups', 'choicegroup').'</th><th>&nbsp;</th><th>'.get_string('selected_groups', 'choicegroup').'</th><th>&nbsp;</th></tr><tr><td style="vertical-align: top">');
+
+		$mform->addElement('html','<select id="availablegroups" name="availableGroups" multiple size=10 style="width:200px">');
+		foreach ($groupings as $groupingID => $grouping) {
+			// find all linked groups to this grouping
+			if (isset($grouping->linkedGroupsIDs) && count($grouping->linkedGroupsIDs) > 1) { // grouping has more than 2 items, thus we should display it (otherwise it would be clearer to display only that single group alone)
+				$mform->addElement('html', '<option value="'.$groupingID.'" style="font-weight: bold" class="grouping">'.get_string('char_bullet_expanded', 'choicegroup').$grouping->name.'</option>');
+				foreach ($grouping->linkedGroupsIDs as $linkedGroupID) {
+					if (isset($groups[$linkedGroupID])) {
+						$mform->addElement('html', '<option value="'.$linkedGroupID.'" class="group nested">&nbsp;&nbsp;&nbsp;&nbsp;'.$groups[$linkedGroupID]->name.'</option>');
+						$groups[$linkedGroupID]->mentioned = true;
+					}
+				}
+			}
+		}
+		foreach ($groups as $group) {
+			if ($group->mentioned === false) {
+				$mform->addElement('html', '<option value="'.$group->id.'" class="group toplevel">'.format_string($group->name).'</option>');
+			}
+		}
+		$mform->addElement('html','</select><br><button name="expandButton" type="button" disabled id="expandButton">'.get_string('expand_all_groupings', 'choicegroup').'</button><button name="collapseButton" type="button" disabled id="collapseButton">'.get_string('collapse_all_groupings', 'choicegroup').'</button><br>'.get_string('double_click_grouping_legend', 'choicegroup').'<br>'.get_string('double_click_group_legend', 'choicegroup'));
+
+
+
+
+
+
+		$mform->addElement('html','
+				</td><td><button id="addGroupButton" name="add" type="button" disabled>'.get_string('add', 'choicegroup').'</button><div><button name="remove" type="button" disabled id="removeGroupButton">'.get_string('del', 'choicegroup').'</button></div></td>');
+		$mform->addElement('html','<td style="vertical-align: top"><select id="id_selectedGroups" name="selectedGroups" multiple size=10 style="width:200px"></select></td>');
+
+		$mform->addElement('html','<td><div><div id="fitem_id_limit_0" class="fitem fitem_ftext" style="display:none"><div class=""><label for="id_limit_0" id="label_for_limit_ui">'.get_string('set_limit_for_group', 'choicegroup').'</label></div><div class="ftext">
+				<input class="mod-choicegroup-limit-input" type="text" value="0" id="ui_limit_input" disabled="disabled"></div></div></div></td></tr></table></div>
+				</div></div>
+
+				</div>
+				</fieldset>');
+
+		$mform->setExpanded('groups');
+
+		foreach ($groups as $group) {
+			$mform->addElement('hidden', 'group_' . $group->id . '_limit', '', array('id' => 'group_' . $group->id . '_limit', 'class' => 'limit_input_node'));
+			$mform->setType('group_' . $group->id . '_limit', PARAM_RAW);
+		}
+
+
+		$serializedselectedgroupsValue = '';
+		if (isset($this->_instance) && $this->_instance != '') {
+			// this is presumably edit mode, try to fill in the data for javascript
+			$cg = choicegroup_get_choicegroup($this->_instance);
+			foreach ($cg->option as $optionID => $groupID) {
+				$serializedselectedgroupsValue .= ';' . $groupID;
+				$mform->setDefault('group_' . $groupID . '_limit', $cg->maxanswers[$optionID]);
+			}
+
+		}
+
+
+		$mform->addElement('hidden', 'serializedselectedgroups', $serializedselectedgroupsValue, array('id' => 'serializedselectedgroups'));
+		$mform->setType('serializedselectedgroups', PARAM_RAW);
+
+        switch (get_config('choicegroup', 'sortgroupsby')) {
+            case CHOICEGROUP_SORTGROUPS_CREATEDATE:
+                $systemdefault = array(CHOICEGROUP_SORTGROUPS_SYSTEMDEFAULT => get_string('systemdefault_date', 'choicegroup'));
+                break;
+            case CHOICEGROUP_SORTGROUPS_NAME:
+                $systemdefault = array(CHOICEGROUP_SORTGROUPS_SYSTEMDEFAULT => get_string('systemdefault_name', 'choicegroup'));
+                break;
+        }
+
+        $options = array_merge($systemdefault, choicegroup_get_sort_options());
+        $mform->addElement('select', 'sortgroupsby', get_string('sortgroupsby', 'choicegroup'), $options);
+        $mform->setDefault('sortgroupsby', CHOICEGROUP_SORTGROUPS_SYSTEMDEFAULT);
+
+		// -------------------------
+		// Go on the with the remainder of the form
+		// -------------------------
+
+
+		//-------------------------------------------------------------------------------
+		$mform->addElement('header', 'timerestricthdr', get_string('timerestrict', 'choicegroup'));
+		$mform->addElement('checkbox', 'timerestrict', get_string('timerestrict', 'choicegroup'));
+
+		$mform->addElement('date_time_selector', 'timeopen', get_string("choicegroupopen", "choicegroup"));
+		$mform->disabledIf('timeopen', 'timerestrict');
+
+		$mform->addElement('date_time_selector', 'timeclose', get_string("choicegroupclose", "choicegroup"));
+		$mform->disabledIf('timeclose', 'timerestrict');
+
+		//-------------------------------------------------------------------------------
+		$this->standard_coursemodule_elements();
+		//-------------------------------------------------------------------------------
+		$this->add_action_buttons();
+}
+
+function data_preprocessing(&$default_values){
+	global $DB;
+	$this->js_call();
+
+	if (empty($default_values['timeopen'])) {
+		$default_values['timerestrict'] = 0;
+	} else {
+		$default_values['timerestrict'] = 1;
+	}
+
+	}
+
+	function validation($data, $files) {
+		$errors = parent::validation($data, $files);
+
+		$groupIDs = explode(';', $data['serializedselectedgroups']);
+		$groupIDs = array_diff( $groupIDs, array( '' ) );
+
+		if (array_key_exists('multipleenrollmentspossible', $data) && $data['multipleenrollmentspossible'] === '1') {
+			if (count($groupIDs) < 1) {
+				$errors['serializedselectedgroups'] = get_string('fillinatleastoneoption', 'choicegroup');
+			}
+		} else {
+			if (count($groupIDs) < 2) {
+				$errors['serializedselectedgroups'] = get_string('fillinatleasttwooptions', 'choicegroup');
+			}
+		}
+
+
+		return $errors;
+	}
+
+	function get_data() {
+		$data = parent::get_data();
+		if (!$data) {
+			return false;
+		}
+		// Set up completion section even if checkbox is not ticked
+		if (empty($data->completionsection)) {
+			$data->completionsection=0;
+		}
+		return $data;
+	}
+
+	function add_completion_rules() {
+		$mform =& $this->_form;
+
+		$mform->addElement('checkbox', 'completionsubmit', '', get_string('completionsubmit', 'choicegroup'));
+		return array('completionsubmit');
+	}
+
+	function completion_rule_enabled($data) {
+		return !empty($data['completionsubmit']);
+	}
+
+	public function js_call() {
+		global $PAGE;
+		$PAGE->requires->yui_module('moodle-mod_choicegroup-form', 'Y.Moodle.mod_choicegroup.form.init');
+		foreach (array_keys(get_string_manager()->load_component_strings('choicegroup', current_language())) as $string) {
+			$PAGE->requires->string_for_js($string, 'choicegroup');
+		}
+	}
+
+}
+
diff --git a/mod/choicegroup/pix/column.png b/mod/choicegroup/pix/column.png
new file mode 100644
index 0000000000000000000000000000000000000000..88fbae915b92d13a1699d279279d25ccc0578690
GIT binary patch
literal 94
zcmeAS@N?(olHy`uVBq!ia0vp^hCpn@$P6UUA6xhlNU;U@gt!9f|Ns9ly*d9bkR|Nt
p;us<ko}BS0fMF3^TVPed1%~X>=uE|c7db#_22WQ%mvv4FO#n!C8nXZZ

literal 0
HcmV?d00001

diff --git a/mod/choicegroup/pix/icon.gif b/mod/choicegroup/pix/icon.gif
new file mode 100644
index 0000000000000000000000000000000000000000..327422e6d48b1d9235d88b6d9f2ae73173a31ad4
GIT binary patch
literal 115
zcmZ?wbhEHb6krfw_{hSLX3Q`%&G^jBGzJC+#h)y!3=Av`IzTp1R)B$l*~Md*&EW~H
z3UVbuAr{|f2|l$97MR7dfN%2B6<NEsaql^`G@H3ujbY35v&$1-wz(wpzATnWbn!oX
T^D}FVAk)WLu^}sZSQxAUXnrP@

literal 0
HcmV?d00001

diff --git a/mod/choicegroup/pix/icon.svg b/mod/choicegroup/pix/icon.svg
new file mode 100644
index 0000000..ceaf924
--- /dev/null
+++ b/mod/choicegroup/pix/icon.svg
@@ -0,0 +1,430 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Generator: Adobe Illustrator 15.1.0, SVG Export Plug-In  -->
+
+<svg
+   xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   version="1.1"
+   x="0px"
+   y="0px"
+   width="24px"
+   height="24px"
+   viewBox="0 0 24 24"
+   style="overflow:visible;enable-background:new 0 0 24 24;"
+   xml:space="preserve"
+   preserveAspectRatio="xMinYMid meet"
+   id="svg2"
+   inkscape:version="0.48.4 r9939"
+   sodipodi:docname="Group_Choice.svg"><metadata
+   id="metadata75"><rdf:RDF><cc:Work
+       rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type
+         rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title></dc:title></cc:Work></rdf:RDF></metadata><sodipodi:namedview
+   pagecolor="#ffffff"
+   bordercolor="#666666"
+   borderopacity="1"
+   objecttolerance="10"
+   gridtolerance="10"
+   guidetolerance="10"
+   inkscape:pageopacity="0"
+   inkscape:pageshadow="2"
+   inkscape:window-width="1440"
+   inkscape:window-height="878"
+   id="namedview73"
+   showgrid="false"
+   inkscape:zoom="9.8333333"
+   inkscape:cx="-4.1694915"
+   inkscape:cy="12"
+   inkscape:window-x="-8"
+   inkscape:window-y="-8"
+   inkscape:window-maximized="1"
+   inkscape:current-layer="svg2" />
+<defs
+   id="defs4">
+<linearGradient
+   y2="23.9487"
+   x2="11.8569"
+   y1="1.8521"
+   x1="11.8569"
+   gradientUnits="userSpaceOnUse"
+   id="SVGID_6_-1"><stop
+     id="stop3188"
+     style="stop-color:#DB6D17"
+     offset="0" /><stop
+     id="stop3190"
+     style="stop-color:#BF3B08"
+     offset="1" /><a:midPointStop
+     style="stop-color:#DB6D17"
+     offset="0" /><a:midPointStop
+     style="stop-color:#DB6D17"
+     offset="0.5" /><a:midPointStop
+     style="stop-color:#BF3B08"
+     offset="1" /></linearGradient><linearGradient
+   y2="22.383301"
+   x2="9.5522003"
+   y1="9.0078001"
+   x1="9.5522003"
+   gradientUnits="userSpaceOnUse"
+   id="SVGID_7_-7"><stop
+     id="stop3197"
+     style="stop-color:#F6A55E"
+     offset="0" /><stop
+     id="stop3199"
+     style="stop-color:#EA5B03"
+     offset="1" /><a:midPointStop
+     style="stop-color:#F6A55E"
+     offset="0" /><a:midPointStop
+     style="stop-color:#F6A55E"
+     offset="0.5" /><a:midPointStop
+     style="stop-color:#EA5B03"
+     offset="1" /></linearGradient><linearGradient
+   y2="20.8174"
+   x2="7.2484999"
+   y1="14.7998"
+   x1="7.2484999"
+   gradientUnits="userSpaceOnUse"
+   id="SVGID_8_-4"><stop
+     id="stop3206"
+     style="stop-color:#F17219"
+     offset="0" /><stop
+     id="stop3208"
+     style="stop-color:#EA5B03"
+     offset="1" /><a:midPointStop
+     style="stop-color:#F17219"
+     offset="0" /><a:midPointStop
+     style="stop-color:#F17219"
+     offset="0.5" /><a:midPointStop
+     style="stop-color:#EA5B03"
+     offset="1" /></linearGradient><linearGradient
+   id="SVGID_1_-9"
+   gradientUnits="userSpaceOnUse"
+   x1="7.8237"
+   y1="0"
+   x2="7.8237"
+   y2="23.3262"><stop
+     offset="0"
+     style="stop-color:#76A1F0"
+     id="stop4136" /><stop
+     offset="1"
+     style="stop-color:#6B90D5"
+     id="stop4138" /><a:midPointStop
+     offset="0"
+     style="stop-color:#76A1F0" /><a:midPointStop
+     offset="0.5"
+     style="stop-color:#76A1F0" /><a:midPointStop
+     offset="1"
+     style="stop-color:#6B90D5" /></linearGradient><linearGradient
+   id="SVGID_2_-4"
+   gradientUnits="userSpaceOnUse"
+   x1="7.8237"
+   y1="1"
+   x2="7.8237"
+   y2="22.3262"
+   gradientTransform="translate(3.9966107,-0.15847424)"><stop
+     offset="0"
+     style="stop-color:#BBE0F7"
+     id="stop4143" /><stop
+     offset="1"
+     style="stop-color:#82B4FB"
+     id="stop4145" /><a:midPointStop
+     offset="0"
+     style="stop-color:#BBE0F7" /><a:midPointStop
+     offset="0.5"
+     style="stop-color:#BBE0F7" /><a:midPointStop
+     offset="1"
+     style="stop-color:#82B4FB" /></linearGradient><linearGradient
+   id="SVGID_3_-8"
+   gradientUnits="userSpaceOnUse"
+   x1="7.8237"
+   y1="2.0985999"
+   x2="7.8237"
+   y2="21.3262"
+   gradientTransform="translate(3.9966107,-0.15847424)"><stop
+     offset="0"
+     style="stop-color:#95BFF8"
+     id="stop4150" /><stop
+     offset="0.5569"
+     style="stop-color:#84ADEF"
+     id="stop4152" /><stop
+     offset="1"
+     style="stop-color:#7CA4EB"
+     id="stop4154" /><a:midPointStop
+     offset="0"
+     style="stop-color:#95BFF8" /><a:midPointStop
+     offset="0.4"
+     style="stop-color:#95BFF8" /><a:midPointStop
+     offset="1"
+     style="stop-color:#7CA4EB" /></linearGradient><linearGradient
+   y2="23.3262"
+   x2="7.8237"
+   y1="0"
+   x1="7.8237"
+   gradientUnits="userSpaceOnUse"
+   id="linearGradient4216"
+   xlink:href="#SVGID_1_-9"
+   inkscape:collect="always"
+   gradientTransform="translate(3.9966107,-0.15847424)" /></defs>
+<linearGradient
+   id="SVGID_1_"
+   gradientUnits="userSpaceOnUse"
+   x1="7.9995"
+   y1="7.9868"
+   x2="7.9995"
+   y2="24.001">
+	<stop
+   offset="0"
+   style="stop-color:#db6d17;stop-opacity:1;"
+   id="stop7" />
+	<stop
+   offset="1"
+   style="stop-color:#bf3b08;stop-opacity:1;"
+   id="stop9" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#F0A829" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#F0A829" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#C7671A" />
+</linearGradient>
+<path
+   style="fill:url(#SVGID_1_);"
+   d="M3,19.2l-3,1.6V24h16v-0.4c0-0.5-0.5-1.2-1-1.5l-6-3.1c-0.5-0.3-0.6-0.8-0.3-1.2  c0,0,1.6-2,1.6-4.2C10.4,10.5,8.4,8,6,8c-2.4,0-4.4,2.6-4.4,5.7c0,2.1,1.6,4.2,1.6,4.2C3.6,18.3,3.5,18.9,3,19.2z"
+   id="path11" />
+<linearGradient
+   id="SVGID_2_"
+   gradientUnits="userSpaceOnUse"
+   x1="7.7212"
+   y1="8.9868"
+   x2="7.7212"
+   y2="23.001">
+	<stop
+   offset="0"
+   style="stop-color:#f6a55e;stop-opacity:1;"
+   id="stop14" />
+	<stop
+   offset="1"
+   style="stop-color:#ea5b03;stop-opacity:1;"
+   id="stop16" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#FFEBA8" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#FFEBA8" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#F8BE27" />
+</linearGradient>
+<path
+   style="fill:url(#SVGID_2_);"
+   d="M1,23v-1.7L3.5,20c0.5-0.3,0.8-0.7,1-1.2c0.1-0.5,0-1.1-0.4-1.5c0,0-1.4-1.8-1.4-3.6  C2.6,11.1,4.2,9,6,9s3.4,2.1,3.4,4.7c0,1.7-1.4,3.5-1.4,3.6c-0.3,0.4-0.5,1-0.4,1.5c0.1,0.5,0.5,1,1,1.2l5.9,3H1z"
+   id="path18" />
+<linearGradient
+   id="SVGID_3_"
+   gradientUnits="userSpaceOnUse"
+   x1="6.1343"
+   y1="9.9868"
+   x2="6.1343"
+   y2="22.001">
+	<stop
+   offset="0"
+   style="stop-color:#f17219;stop-opacity:1;"
+   id="stop21" />
+	<stop
+   offset="1"
+   style="stop-color:#ea5b03;stop-opacity:1;"
+   id="stop23" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#FFC30F" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#FFC30F" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#F5AE0D" />
+</linearGradient>
+<path
+   style="fill:url(#SVGID_3_);"
+   d="M2,22L2,22l1.9-1.1c0.8-0.4,1.3-1.1,1.5-1.9c0.2-0.8,0-1.7-0.6-2.3c-0.3-0.4-1.2-1.8-1.2-3  c0-2,1.1-3.7,2.4-3.7s2.4,1.7,2.4,3.7c0,1.1-0.9,2.5-1.2,3c-0.5,0.7-0.7,1.5-0.5,2.3c0.2,0.8,0.7,1.5,1.5,1.9l2.2,1.1H2z"
+   id="path25" />
+<linearGradient
+   id="SVGID_4_"
+   gradientUnits="userSpaceOnUse"
+   x1="16"
+   y1="7.9868"
+   x2="16"
+   y2="24.001">
+	<stop
+   offset="0"
+   style="stop-color:#90c50e;stop-opacity:1;"
+   id="stop28" />
+	<stop
+   offset="1"
+   style="stop-color:#70a034;stop-opacity:1;"
+   id="stop30" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#8D470D" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#8D470D" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#7C3D09" />
+</linearGradient>
+<path
+   style="fill:url(#SVGID_4_);"
+   d="M24,24v-3.4l-3-1.5c-0.5-0.3-0.6-0.8-0.3-1.2c0,0,1.6-2,1.6-4.2c0-3.2-1.9-5.7-4.4-5.7  c-2.4,0-4.4,2.6-4.4,5.7c0,2.1,1.6,4.2,1.6,4.2c0.3,0.4,0.2,1-0.3,1.3l-6,3.2c-0.5,0.3-1,0.9-1,1.5V24H24z"
+   id="path32" />
+<linearGradient
+   id="SVGID_5_"
+   gradientUnits="userSpaceOnUse"
+   x1="16.4121"
+   y1="8.9868"
+   x2="16.4121"
+   y2="23.001">
+	<stop
+   offset="0"
+   style="stop-color:#d9f991;stop-opacity:1;"
+   id="stop35" />
+	<stop
+   offset="1"
+   style="stop-color:#b1dd4b;stop-opacity:1;"
+   id="stop37" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#D58738" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#D58738" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#AB551F" />
+</linearGradient>
+<path
+   style="fill:url(#SVGID_5_);"
+   d="M9.8,23l5.7-3c0.5-0.3,0.8-0.7,1-1.2c0.1-0.5,0-1.1-0.4-1.5c0,0-1.4-1.8-1.4-3.6  c0-2.6,1.5-4.7,3.4-4.7s3.4,2.1,3.4,4.7c0,1.8-1.4,3.6-1.4,3.6c-0.3,0.4-0.5,1-0.4,1.5s0.5,1,1,1.2l2.4,1.2V23H9.8z"
+   id="path39" />
+<linearGradient
+   id="SVGID_6_"
+   gradientUnits="userSpaceOnUse"
+   x1="17.9424"
+   y1="9.9868"
+   x2="17.9424"
+   y2="22.001">
+	<stop
+   offset="0"
+   style="stop-color:#b3e73a;stop-opacity:1;"
+   id="stop42" />
+	<stop
+   offset="1"
+   style="stop-color:#90c61d;stop-opacity:1;"
+   id="stop44" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#D0813A" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#D0813A" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#AF551D" />
+</linearGradient>
+<path
+   style="fill:url(#SVGID_6_);"
+   d="M13.9,22l2.1-1.1c0.8-0.4,1.3-1.1,1.5-1.9c0.2-0.8,0-1.7-0.6-2.3c-0.3-0.4-1.2-1.8-1.2-3  c0-2,1.1-3.7,2.4-3.7s2.4,1.7,2.4,3.7c0,1.2-0.9,2.5-1.2,3c-0.5,0.7-0.7,1.5-0.6,2.3c0.2,0.8,0.7,1.5,1.5,1.9l1.9,1V22H13.9z"
+   id="path46" />
+<linearGradient
+   id="SVGID_7_"
+   gradientUnits="userSpaceOnUse"
+   x1="7.4507"
+   y1="0"
+   x2="7.4507"
+   y2="12.9043">
+	<stop
+   offset="0"
+   style="stop-color:#76A1F0"
+   id="stop49" />
+	<stop
+   offset="1"
+   style="stop-color:#6B90D5"
+   id="stop51" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#76A1F0" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#76A1F0" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#6B90D5" />
+</linearGradient>
+
+<linearGradient
+   id="SVGID_8_"
+   gradientUnits="userSpaceOnUse"
+   x1="7.4507"
+   y1="1"
+   x2="7.4507"
+   y2="11.2168">
+	<stop
+   offset="0"
+   style="stop-color:#BBE0F7"
+   id="stop56" />
+	<stop
+   offset="1"
+   style="stop-color:#82B4FB"
+   id="stop58" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#BBE0F7" />
+	<a:midPointStop
+   offset="0.5"
+   style="stop-color:#BBE0F7" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#82B4FB" />
+</linearGradient>
+
+<linearGradient
+   id="SVGID_9_"
+   gradientUnits="userSpaceOnUse"
+   x1="7.4507"
+   y1="2"
+   x2="7.4507"
+   y2="9.9097">
+	<stop
+   offset="0"
+   style="stop-color:#95BFF8"
+   id="stop63" />
+	<stop
+   offset="0.5569"
+   style="stop-color:#84ADEF"
+   id="stop65" />
+	<stop
+   offset="1"
+   style="stop-color:#7CA4EB"
+   id="stop67" />
+	<a:midPointStop
+   offset="0"
+   style="stop-color:#95BFF8" />
+	<a:midPointStop
+   offset="0.4"
+   style="stop-color:#95BFF8" />
+	<a:midPointStop
+   offset="1"
+   style="stop-color:#7CA4EB" />
+</linearGradient>
+
+
+</svg>
\ No newline at end of file
diff --git a/mod/choicegroup/pix/row.png b/mod/choicegroup/pix/row.png
new file mode 100644
index 0000000000000000000000000000000000000000..d082724c452f38f899cd65ee38a16fc1a2220b2f
GIT binary patch
literal 154
zcmeAS@N?(olHy`uVBq!ia0vp^MnG)H!2~45Pv&|6DaPU;cPEB*=VV?2Ih+L^k;M!Q
z+`=Ht$S`Y;1W=H@#M9T6{T4eDn=-%e;pqlIAstT_$B>A_Z!a4%GB9v3D_pn#vgW~a
wW?7HhjPs7V7zi2&`mp%02r~*FJhGcr@{`p2<LQ^Jf%+IcUHx3vIVCg!0J>);)c^nh

literal 0
HcmV?d00001

diff --git a/mod/choicegroup/renderer.php b/mod/choicegroup/renderer.php
new file mode 100644
index 0000000..c623d32
--- /dev/null
+++ b/mod/choicegroup/renderer.php
@@ -0,0 +1,417 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+define ('CHOICEGROUP_DISPLAY_HORIZONTAL_LAYOUT', 0);
+define ('CHOICEGROUP_DISPLAY_VERTICAL_LAYOUT', 1);
+
+class mod_choicegroup_renderer extends plugin_renderer_base {
+
+    /**
+     * @param      $options
+     * @param      $coursemoduleid
+     * @param bool $vertical
+     * @param bool $publish
+     * @param bool $limitanswers
+     * @param bool $showresults
+     * @param bool $current
+     * @param bool $choicegroupopen
+     * @param bool $disabled
+     * @param bool $multipleenrollmentspossible
+     *
+     * @return string
+     */
+    public function display_options($options, $coursemoduleid, $vertical = true, $publish = false, $limitanswers = false, $showresults = false, $current = false, $choicegroupopen = false, $disabled = false, $multipleenrollmentspossible = false) {
+        global $DB, $PAGE, $choicegroup_groups, $choicegroup_users;
+
+        $PAGE->requires->js('/mod/choicegroup/javascript.js');
+
+        $target = new moodle_url('/mod/choicegroup/view.php');
+        $attributes = array('method'=>'POST', 'action'=>$target, 'class'=> 'tableform');
+
+        $html = html_writer::start_tag('form', $attributes);
+        $html .= html_writer::start_tag('div', array('class'=>'tablecontainer'));
+        $html .= html_writer::start_tag('table', array('class'=>'choicegroups' ));
+
+        $html .= html_writer::start_tag('tr');
+        $html .= html_writer::tag('th', get_string('choice', 'choicegroup'), array('class'=>'width10'));
+
+        $group = get_string('group').' ';
+        $group .= html_writer::tag('a', get_string('showdescription', 'choicegroup'), array('class' => 'choicegroup-descriptiondisplay choicegroup-descriptionshow', 'href' => '#'));
+        $group .= html_writer::tag('a', get_string('hidedescription', 'choicegroup'), array('class' => 'choicegroup-descriptiondisplay choicegroup-descriptionhide hidden', 'href' => '#'));
+        $html .= html_writer::tag('th', $group, array('class'=>'width40'));
+
+        if ( $showresults == CHOICEGROUP_SHOWRESULTS_ALWAYS or
+        ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER and $current) or
+        ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and !$choicegroupopen)) {
+            if ($limitanswers) {
+                $html .= html_writer::tag('th', get_string('members/max', 'choicegroup'), array('class'=>'width10'));
+            }
+            else {
+                $html .= html_writer::tag('th', get_string('members/', 'choicegroup'), array('class'=>'width10'));
+            }
+            if ($publish == CHOICEGROUP_PUBLISH_NAMES) {
+                $membersdisplay_html = html_writer::tag('a', get_string('show'), array('class' => 'choicegroup-memberdisplay choicegroup-membershow', 'href' => '#'));
+                $membersdisplay_html .= html_writer::tag('a', get_string('hide'), array('class' => 'choicegroup-memberdisplay choicegroup-memberhide hidden', 'href' => '#'));
+                $html .= html_writer::tag('th', get_string('groupmembers', 'choicegroup') .' '. $membersdisplay_html, array('class'=>'width40'));
+            }
+        }
+        $html .= html_writer::end_tag('tr');
+
+        $availableoption = count($options['options']);
+        if ($multipleenrollmentspossible == 1) {
+            $i=0;
+            $answer_to_groupid_mappings = '';
+        }
+        $initiallyHideSubmitButton = false;
+        foreach ($options['options'] as $option) {
+            $group = (isset($choicegroup_groups[$option->groupid])) ? ($choicegroup_groups[$option->groupid]) : (false);
+            if (!$group) {
+                $colspan = 2;
+                if ( $showresults == CHOICEGROUP_SHOWRESULTS_ALWAYS or ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER and $current) or ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and !$choicegroupopen)) {
+                    $colspan++;
+                    if ($publish == CHOICEGROUP_PUBLISH_NAMES) {
+                        $colspan++;
+                    }
+                }
+                $cell = html_writer::tag('td', get_string('groupdoesntexist', 'choicegroup'), array('colspan' => $colspan));
+                $html .= html_writer::tag('tr', $cell);
+                break;
+            }
+            $html .= html_writer::start_tag('tr', array('class'=>'option'));
+            $html .= html_writer::start_tag('td', array('class'=>'center'));
+
+            if ($multipleenrollmentspossible == 1) {
+                $option->attributes->name = 'answer_'.$i;
+                $option->attributes->type = 'checkbox';
+                $answer_to_groupid_mappings .= '<input type="hidden" name="answer_'.$i.'_groupid" value="'.$option->groupid.'">';
+                $i++;
+            } else {
+                $option->attributes->name = 'answer';
+                $option->attributes->type = 'radio';
+                if (array_key_exists('attributes', $option) && array_key_exists('checked', $option->attributes) && $option->attributes->checked == true) {
+                    $initiallyHideSubmitButton = true;
+                }
+            }
+
+            $labeltext = html_writer::tag('label', format_string($group->name), array('for' => 'choiceid_' . $option->attributes->value));
+            $group_members = $DB->get_records('groups_members', array('groupid' => $group->id));
+            $group_members_names = array();
+            foreach ($group_members as $group_member) {
+                $group_user = (isset($choicegroup_users[$group_member->userid])) ? ($choicegroup_users[$group_member->userid]) : ($DB->get_record('user', array('id' => $group_member->userid)));
+                $group_members_names[] = $group_user->lastname . ', ' . $group_user->firstname;
+            }
+            sort($group_members_names);
+            if (!empty($option->attributes->disabled) || ($limitanswers && sizeof($group_members) >= $option->maxanswers) && empty($option->attributes->checked)) {
+                $labeltext .= ' ' . html_writer::tag('em', get_string('full', 'choicegroup'));
+                $option->attributes->disabled=true;
+                $availableoption--;
+            }
+            $labeltext .= html_writer::tag('div', format_text($group->description), array('class' => 'choicegroups-descriptions hidden'));
+            if ($disabled) {
+                $option->attributes->disabled=true;
+            }
+            $attributes = (array) $option->attributes;
+            $attributes['id'] = 'choiceid_' . $option->attributes->value;
+            $html .= html_writer::empty_tag('input', $attributes);
+            $html .= html_writer::end_tag('td');
+            $html .= html_writer::tag('td', $labeltext);
+
+
+            if ( $showresults == CHOICEGROUP_SHOWRESULTS_ALWAYS or
+            ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER and $current) or
+            ($showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and !$choicegroupopen)) {
+
+                $maxanswers = ($limitanswers) ? (' / '.$option->maxanswers) : ('');
+                $html .= html_writer::tag('td', sizeof($group_members_names).$maxanswers, array('class' => 'center'));
+                if ($publish == CHOICEGROUP_PUBLISH_NAMES) {
+                    $group_members_html = html_writer::tag('div', implode('<br />', $group_members_names), array('class' => 'choicegroups-membersnames hidden', 'id' => 'choicegroup_'.$option->attributes->value));
+                    $html .= html_writer::tag('td', $group_members_html, array('class' => 'center'));
+                }
+            }
+            $html .= html_writer::end_tag('tr');
+        }
+        $html .= html_writer::end_tag('table');
+        $html .= html_writer::end_tag('div');
+        if ($multipleenrollmentspossible == 1) {
+            $html .= '<input type="hidden" name="number_of_groups" value="'.$i.'">' . $answer_to_groupid_mappings;
+        }
+        $html .= html_writer::tag('div', '', array('class'=>'clearfloat'));
+        $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'sesskey', 'value'=>sesskey()));
+        $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'id', 'value'=>$coursemoduleid));
+
+        if (!empty($options['hascapability']) && ($options['hascapability'])) {
+            if ($availableoption < 1) {
+               $html .= html_writer::tag('p', get_string('choicegroupfull', 'choicegroup'));
+            } else {
+                if (!$disabled) {
+                    $html .= html_writer::empty_tag('input', array('type'=>'submit', 'value'=>get_string('savemychoicegroup','choicegroup'), 'class'=>'button modchoicegroupsumbit', 'style' => $initiallyHideSubmitButton?'display: none':''));
+                }
+            }
+
+            if (!empty($options['allowupdate']) && ($options['allowupdate']) && !($multipleenrollmentspossible == 1) && !$disabled) {
+                $url = new moodle_url('view.php', array('id'=>$coursemoduleid, 'action'=>'delchoicegroup', 'sesskey'=>sesskey()));
+                $html .= ' ' . html_writer::link($url, get_string('removemychoicegroup','choicegroup'));
+            }
+        } elseif (!isloggedin() || isguestuser()) { // Only display message if user is not logged in or is a guest user.
+            $html .= ' '.html_writer::tag('p', get_string('havetologin', 'choicegroup'));
+        }
+
+        $html .= html_writer::end_tag('form');
+
+        return $html;
+    }
+
+    /**
+     * Returns HTML to display choicegroups result
+     * @param object $choicegroups
+     * @param bool $forcepublish
+     * @return string
+     */
+    public function display_result($choicegroups, $forcepublish = false) {
+        if (empty($forcepublish)) { //allow the publish setting to be overridden
+            $forcepublish = $choicegroups->publish;
+        }
+
+        $displaylayout = ($choicegroups) ? ($choicegroups->display) : (CHOICEGROUP_DISPLAY_HORIZONTAL);
+
+        if ($forcepublish) {  //CHOICEGROUP_PUBLISH_NAMES
+            return $this->display_publish_name_vertical($choicegroups);
+        } else { //CHOICEGROUP_PUBLISH_ANONYMOUS';
+            if ($displaylayout == CHOICEGROUP_DISPLAY_HORIZONTAL_LAYOUT) {
+                return $this->display_publish_anonymous_horizontal($choicegroups);
+            }
+            return $this->display_publish_anonymous_vertical($choicegroups);
+        }
+    }
+
+    /**
+     * Returns HTML to display choicegroups result
+     * @param object $choicegroups
+     * @param bool $forcepublish
+     * @return string
+     */
+    public function display_publish_name_vertical($choicegroups) {
+        global $PAGE;
+        global $DB;
+        global $context;
+
+        if (!has_capability('mod/choicegroup:downloadresponses', $context)) {
+            return; // only the (editing)teacher can see the diagram
+        }
+        if (!$choicegroups) {
+            return; // no answers yet, so don't bother
+        }
+
+        $html ='';
+        $html .= html_writer::tag('h2',format_string(get_string("responses", "choicegroup")), array('class'=>'main'));
+
+        $attributes = array('method'=>'POST');
+        $attributes['action'] = new moodle_url($PAGE->url);
+        $attributes['id'] = 'attemptsform';
+        $attributes['class'] = 'tableform';
+
+        if ($choicegroups->viewresponsecapability) {
+            $html .= html_writer::start_tag('form', $attributes);
+            $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'id', 'value'=> $choicegroups->coursemoduleid));
+            $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'sesskey', 'value'=> sesskey()));
+            $html .= html_writer::empty_tag('input', array('type'=>'hidden', 'name'=>'mode', 'value'=>'overview'));
+        }
+
+        $table = new html_table();
+        $table->cellpadding = 0;
+        $table->cellspacing = 0;
+        $table->attributes['class'] = 'results names ';
+        $table->tablealign = 'center';
+        $table->data = array();
+
+        $count = 0;
+        ksort($choicegroups->options);
+
+        $columns = array();
+        foreach ($choicegroups->options as $optionid => $options) {
+            $coldata = '';
+            if ($choicegroups->showunanswered && $optionid == 0) {
+                $coldata .= html_writer::tag('div', format_string(get_string('notanswered', 'choicegroup')), array('class'=>'option'));
+            } else if ($optionid > 0) {
+                $coldata .= html_writer::tag('div', format_string(choicegroup_get_option_text($choicegroups, $choicegroups->options[$optionid]->groupid)), array('class'=>'option'));
+            }
+            $numberofuser = 0;
+            if (!empty($options->user) && count($options->user) > 0) {
+                $numberofuser = count($options->user);
+            }
+
+            $coldata .= html_writer::tag('div', ' ('.$numberofuser. ')', array('class'=>'numberofuser', 'title' => get_string('numberofuser', 'choicegroup')));
+            $columns[] = $coldata;
+        }
+
+        $table->head = $columns;
+
+        $coldata = '';
+        $columns = array();
+        foreach ($choicegroups->options as $optionid => $options) {
+            $coldata = '';
+            if ($choicegroups->showunanswered || $optionid > 0) {
+                if (!empty($options->user)) {
+                    foreach ($options->user as $user) {
+                        $data = '';
+                        if (empty($user->imagealt)){
+                            $user->imagealt = '';
+                        }
+
+                        if ($choicegroups->viewresponsecapability && $choicegroups->deleterepsonsecapability  && $optionid > 0) {
+                            $attemptaction = html_writer::checkbox('grpsmemberid[]', $user->grpsmemberid,'');
+                            $data .= html_writer::tag('div', $attemptaction, array('class'=>'attemptaction'));
+                        }
+                        $userimage = $this->output->user_picture($user, array('courseid'=>$choicegroups->courseid));
+                        $data .= html_writer::tag('div', $userimage, array('class'=>'image'));
+
+                        $userlink = new moodle_url('/user/view.php', array('id'=>$user->id,'course'=>$choicegroups->courseid));
+                        $name = html_writer::tag('a', fullname($user, $choicegroups->fullnamecapability), array('href'=>$userlink, 'class'=>'username'));
+                        $data .= html_writer::tag('div', $name, array('class'=>'fullname'));
+                        $data .= html_writer::tag('div','', array('class'=>'clearfloat'));
+                        $coldata .= html_writer::tag('div', $data, array('class'=>'user'));
+                    }
+                }
+            }
+
+            $columns[] = $coldata;
+            $count++;
+        }
+
+        $table->data[] = $columns;
+        foreach ($columns as $d) {
+            $table->colclasses[] = 'data';
+        }
+        $html .= html_writer::tag('div', html_writer::table($table), array('class'=>'response tablecontainer'));
+
+        $actiondata = '';
+        if ($choicegroups->viewresponsecapability && $choicegroups->deleterepsonsecapability) {
+            $selecturl = new moodle_url('#');
+
+            $selectallactions = new component_action('click',"checkall");
+            $selectall = new action_link($selecturl, get_string('selectall'), $selectallactions);
+            $actiondata .= $this->output->render($selectall) . ' / ';
+
+            $deselectallactions = new component_action('click',"checknone");
+            $deselectall = new action_link($selecturl, get_string('deselectall'), $deselectallactions);
+            $actiondata .= $this->output->render($deselectall);
+
+            $actiondata .= html_writer::tag('label', ' ' . get_string('withselected', 'choice') . ' ', array('for'=>'menuaction'));
+
+            $actionurl = new moodle_url($PAGE->url, array('sesskey'=>sesskey(), 'action'=>'delete_confirmation()'));
+            $select = new single_select($actionurl, 'action', array('delete'=>get_string('delete')), null, array(''=>get_string('chooseaction', 'choicegroup')), 'attemptsform');
+
+            $actiondata .= $this->output->render($select);
+        }
+        $html .= html_writer::tag('div', $actiondata, array('class'=>'responseaction'));
+
+        if ($choicegroups->viewresponsecapability) {
+            $html .= html_writer::end_tag('form');
+        }
+
+        return $html;
+    }
+
+
+    /**
+     * Returns HTML to display choicegroups result
+     * @param object $choicegroups
+     * @return string
+     */
+    public function display_publish_anonymous_horizontal($choicegroups) {
+        global $context, $DB, $CHOICEGROUP_COLUMN_WIDTH;
+
+        if (!has_capability('mod/choicegroup:downloadresponses', $context)) {
+            return; // only the (editing)teacher can see the diagram
+        }
+
+        $table = new html_table();
+        $table->cellpadding = 5;
+        $table->cellspacing = 0;
+        $table->attributes['class'] = 'results anonymous ';
+        $table->data = array();
+
+        $count = 0;
+        ksort($choicegroups->options);
+
+        $rows = array();
+        foreach ($choicegroups->options as $optionid => $options) {
+            $numberofuser = 0;
+            $graphcell = new html_table_cell();
+            if (!empty($options->user)) {
+               $numberofuser = count($options->user);
+            }
+
+            $width = 0;
+            $percentageamount = 0;
+            $columndata = '';
+            if($choicegroups->numberofuser > 0) {
+               $width = ($CHOICEGROUP_COLUMN_WIDTH * ((float)$numberofuser / (float)$choicegroups->numberofuser));
+               $percentageamount = ((float)$numberofuser/(float)$choicegroups->numberofuser)*100.0;
+            }
+            $displaydiagram = html_writer::tag('img','', array('style'=>'height:50px; width:'.$width.'px', 'alt'=>'', 'src'=>$this->output->pix_url('row', 'choicegroup')));
+
+            $skiplink = html_writer::tag('a', get_string('skipresultgraph', 'choicegroup'), array('href'=>'#skipresultgraph'. $optionid, 'class'=>'skip-block'));
+            $skiphandler = html_writer::tag('span', '', array('class'=>'skip-block-to', 'id'=>'skipresultgraph'.$optionid));
+
+            $graphcell->text = $skiplink . $displaydiagram . $skiphandler;
+            $graphcell->attributes = array('class'=>'graph horizontal');
+
+            $datacell = new html_table_cell();
+            if ($choicegroups->showunanswered && $optionid == 0) {
+                $columndata .= html_writer::tag('div', format_string(get_string('notanswered', 'choicegroup')), array('class'=>'option'));
+            } else if ($optionid > 0) {
+                $columndata .= html_writer::tag('div', format_string(choicegroup_get_option_text($choicegroups, $choicegroups->options[$optionid]->groupid)), array('class'=>'option'));
+            }
+            $columndata .= html_writer::tag('div', ' ('.$numberofuser.')', array('title'=> get_string('numberofuser', 'choicegroup'), 'class'=>'numberofuser'));
+
+            if($choicegroups->numberofuser > 0) {
+               $percentageamount = ((float)$numberofuser/(float)$choicegroups->numberofuser)*100.0;
+            }
+            $columndata .= html_writer::tag('div', format_float($percentageamount,1). '%', array('class'=>'percentage'));
+
+            $datacell->text = $columndata;
+            $datacell->attributes = array('class'=>'header');
+
+            $row = new html_table_row();
+            $row->cells = array($datacell, $graphcell);
+            $rows[] = $row;
+        }
+
+        $table->data = $rows;
+
+        $html = '';
+        $header = html_writer::tag('h2',format_string(get_string("responses", "choicegroup")));
+        $html .= html_writer::tag('div', $header, array('class'=>'responseheader'));
+        $html .= html_writer::table($table);
+
+        return $html;
+    }
+
+}
+
diff --git a/mod/choicegroup/report.php b/mod/choicegroup/report.php
new file mode 100644
index 0000000..d671f98
--- /dev/null
+++ b/mod/choicegroup/report.php
@@ -0,0 +1,304 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+
+require_once("../../config.php");
+require_once("lib.php");
+
+$id         = required_param('id', PARAM_INT);   //moduleid
+$format     = optional_param('format', CHOICEGROUP_PUBLISH_NAMES, PARAM_INT);
+$download   = optional_param('download', '', PARAM_ALPHA);
+$action     = optional_param('action', '', PARAM_ALPHA);
+$grpsmemberids = optional_param_array('grpsmemberid', array(), PARAM_INT); //get array of responses to delete.
+
+$url = new moodle_url('/mod/choicegroup/report.php', array('id'=>$id));
+if ($format !== CHOICEGROUP_PUBLISH_NAMES) {
+    $url->param('format', $format);
+}
+if ($download !== '') {
+    $url->param('download', $download);
+}
+if ($action !== '') {
+    $url->param('action', $action);
+}
+$PAGE->set_url($url);
+
+if (! $cm = get_coursemodule_from_id('choicegroup', $id)) {
+    print_error("invalidcoursemodule");
+}
+
+if (! $course = $DB->get_record("course", array("id" => $cm->course))) {
+    print_error("coursemisconf");
+}
+
+require_login($course->id, false, $cm);
+
+$context = context_module::instance($cm->id);
+
+require_capability('mod/choicegroup:readresponses', $context);
+
+if (!$choicegroup = choicegroup_get_choicegroup($cm->instance)) {
+    print_error('invalidcoursemodule');
+}
+
+$strchoicegroup = get_string("modulename", "choicegroup");
+$strchoicegroups = get_string("modulenameplural", "choicegroup");
+$strresponses = get_string("responses", "choicegroup");
+
+$eventparams = array(
+    'context' => $context,
+    'objectid' => $choicegroup->id
+);
+$event = \mod_choicegroup\event\report_viewed::create($eventparams);
+$event->add_record_snapshot('course_modules', $cm);
+$event->add_record_snapshot('course', $course);
+$event->add_record_snapshot('choicegroup', $choicegroup);
+$event->trigger();
+
+if (data_submitted() && $action == 'delete' && has_capability('mod/choicegroup:deleteresponses',$context) && confirm_sesskey()) {
+    choicegroup_delete_responses($grpsmemberids, $choicegroup, $cm, $course); //delete responses.
+    redirect("report.php?id=$cm->id");
+}
+
+if (!$download) {
+    $PAGE->navbar->add($strresponses);
+    $PAGE->set_title(format_string($choicegroup->name).": $strresponses");
+    $PAGE->set_heading(format_string($course->fullname));
+    echo $OUTPUT->header();
+    /// Check to see if groups are being used in this choicegroup
+    $groupmode = groups_get_activity_groupmode($cm);
+    if ($groupmode) {
+        groups_get_activity_group($cm, true);
+        groups_print_activity_menu($cm, $CFG->wwwroot . '/mod/choicegroup/report.php?id='.$id);
+    }
+} else {
+    $groupmode = groups_get_activity_groupmode($cm);
+    $groups = choicegroup_get_groups($choicegroup);
+    $groups_ids = array();
+    foreach($groups as $group) {
+        $groups_ids[] = $group->id;
+    }
+}
+$users = choicegroup_get_response_data($choicegroup, $cm, $groupmode);
+
+if ($download == "ods" && has_capability('mod/choicegroup:downloadresponses', $context)) {
+    require_once("$CFG->libdir/odslib.class.php");
+
+/// Calculate file name
+    $filename = clean_filename("$course->shortname ".strip_tags(format_string($choicegroup->name,true))).'.ods';
+/// Creating a workbook
+    $workbook = new MoodleODSWorkbook("-");
+/// Send HTTP headers
+    $workbook->send($filename);
+/// Creating the first worksheet
+    $myxls = $workbook->add_worksheet($strresponses);
+
+/// Print names of all the fields
+    $myxls->write_string(0,0,get_string("lastname"));
+    $myxls->write_string(0,1,get_string("firstname"));
+    $myxls->write_string(0,2,get_string("idnumber"));
+    $myxls->write_string(0,3,get_string("email"));
+    $myxls->write_string(0,4,get_string("group"));
+    $myxls->write_string(0,5,get_string("choice","choicegroup"));
+
+/// generate the data for the body of the spreadsheet
+    $i=0;
+    $row=1;
+    if ($users) {
+        $displayed = array();
+        foreach ($users as $option => $userid) {
+            foreach($userid as $user) {
+                if (in_array($user->id, $displayed)) {
+                    continue;
+                }
+                $displayed[] = $user->id;
+                $myxls->write_string($row,0,$user->lastname);
+                $myxls->write_string($row,1,$user->firstname);
+                $studentid=(!empty($user->idnumber) ? $user->idnumber : " ");
+                $myxls->write_string($row,2,$studentid);
+                $myxls->write_string($row,3,$user->email);
+                $ug2 = array();
+                if ($usergrps = groups_get_all_groups($course->id, $user->id)) {
+                    foreach ($groups_ids as $gid) {
+                        if (array_key_exists($gid, $usergrps)) {
+                            $ug2[] = format_string($usergrps[$gid]->name);
+                        }
+                    }
+                }
+                $myxls->write_string($row, 4, implode(', ', $ug2));
+                $row++;
+                $pos=5;
+            }
+        }
+    }
+    /// Close the workbook
+    $workbook->close();
+
+    exit;
+}
+
+//print spreadsheet if one is asked for:
+if ($download == "xls" && has_capability('mod/choicegroup:downloadresponses', $context)) {
+    require_once("$CFG->libdir/excellib.class.php");
+
+/// Calculate file name
+    $filename = clean_filename("$course->shortname ".strip_tags(format_string($choicegroup->name,true))).'.xls';
+/// Creating a workbook
+    $workbook = new MoodleExcelWorkbook("-");
+/// Send HTTP headers
+    $workbook->send($filename);
+/// Creating the first worksheet
+    // assigning by reference gives this: Strict standards: Only variables should be assigned by reference in /data_1/www/html/moodle/moodle/mod/choicegroup/report.php on line 157
+    // removed the ampersand.
+    $myxls = $workbook->add_worksheet($strresponses);
+/// Print names of all the fields
+    $myxls->write_string(0,0,get_string("lastname"));
+    $myxls->write_string(0,1,get_string("firstname"));
+    $myxls->write_string(0,2,get_string("idnumber"));
+    $myxls->write_string(0,3,get_string("email"));
+    $myxls->write_string(0,4,get_string("group"));
+    $myxls->write_string(0,5,get_string("choice","choicegroup"));
+
+
+/// generate the data for the body of the spreadsheet
+    $i=0;
+    $row=1;
+    if ($users) {
+        $displayed = array();
+        foreach ($users as $option => $userid) {
+            foreach($userid as $user) {
+                if (in_array($user->id, $displayed)) {
+                    continue;
+                }
+                $displayed[] = $user->id;
+                $myxls->write_string($row,0,$user->lastname);
+                $myxls->write_string($row,1,$user->firstname);
+                $studentid=(!empty($user->idnumber) ? $user->idnumber : " ");
+                $myxls->write_string($row,2,$studentid);
+                $myxls->write_string($row,3,$user->email);
+                $ug2 = array();
+                if ($usergrps = groups_get_all_groups($course->id, $user->id)) {
+                    foreach ($groups_ids as $gid) {
+                        if (array_key_exists($gid, $usergrps)) {
+                            $ug2[] = format_string($usergrps[$gid]->name);
+                        }
+                    }
+                }
+                $myxls->write_string($row, 4, implode(', ', $ug2));
+                $row++;
+            }
+        }
+        $pos=5;
+    }
+    /// Close the workbook
+    $workbook->close();
+    exit;
+}
+
+// print text file
+if ($download == "txt" && has_capability('mod/choicegroup:downloadresponses', $context)) {
+    $filename = clean_filename("$course->shortname ".strip_tags(format_string($choicegroup->name,true))).'.txt';
+
+    header("Content-Type: application/download\n");
+    header("Content-Disposition: attachment; filename=\"$filename\"");
+    header("Expires: 0");
+    header("Cache-Control: must-revalidate,post-check=0,pre-check=0");
+    header("Pragma: public");
+
+    /// Print names of all the fields
+
+    echo get_string("firstname")."\t".get_string("lastname") . "\t". get_string("idnumber") . "\t";
+    echo get_string("email") . "\t";
+    echo get_string("group"). "\t";
+    echo get_string("choice","choicegroup"). "\n";
+
+    /// generate the data for the body of the spreadsheet
+    $i=0;
+    if ($users) {
+        $displayed = array();
+        foreach ($users as $option => $userid) {
+            foreach($userid as $user) {
+                if (in_array($user->id, $displayed)) {
+                    continue;
+                }
+                $displayed[] = $user->id;
+                echo $user->lastname;
+                echo "\t".$user->firstname;
+                $studentid = " ";
+                if (!empty($user->idnumber)) {
+                    $studentid = $user->idnumber;
+                }
+                echo "\t". $studentid."\t";
+                echo $user->email . "\t";
+                $ug2 = array();
+                if ($usergrps = groups_get_all_groups($course->id, $user->id)) {
+                    foreach ($groups_ids as $gid) {
+                        if (array_key_exists($gid, $usergrps)) {
+                            $ug2[] = format_string($usergrps[$gid]->name);
+                        }
+                    }
+                }
+                echo implode(', ', $ug2) . "\t";
+                echo "\n";
+            }
+        }
+    }
+    exit;
+}
+// Show those who haven't answered the question.
+if (!empty($choicegroup->showunanswered)) {
+    $choicegroup->option[0] = get_string('notanswered', 'choicegroup');
+    $choicegroup->maxanswers[0] = 0;
+}
+
+$results = prepare_choicegroup_show_results($choicegroup, $course, $cm, $users);
+$renderer = $PAGE->get_renderer('mod_choicegroup');
+echo $renderer->display_result($results, has_capability('mod/choicegroup:readresponses', $context));
+
+//now give links for downloading spreadsheets.
+if (!empty($users) && has_capability('mod/choicegroup:downloadresponses',$context)) {
+    $downloadoptions = array();
+    $options = array();
+    $options["id"] = "$cm->id";
+    $options["download"] = "ods";
+    $button =  $OUTPUT->single_button(new moodle_url("report.php", $options), get_string("downloadods"));
+    $downloadoptions[] = html_writer::tag('li', $button, array('class'=>'reportoption'));
+
+    $options["download"] = "xls";
+    $button = $OUTPUT->single_button(new moodle_url("report.php", $options), get_string("downloadexcel"));
+    $downloadoptions[] = html_writer::tag('li', $button, array('class'=>'reportoption'));
+
+    $options["download"] = "txt";
+    $button = $OUTPUT->single_button(new moodle_url("report.php", $options), get_string("downloadtext"));
+    $downloadoptions[] = html_writer::tag('li', $button, array('class'=>'reportoption'));
+
+    $downloadlist = html_writer::tag('ul', implode('', $downloadoptions));
+    $downloadlist .= html_writer::tag('div', '', array('class'=>'clearfloat'));
+    echo html_writer::tag('div',$downloadlist, array('class'=>'downloadreport'));
+}
+
+echo $OUTPUT->footer();
+
diff --git a/mod/choicegroup/settings.php b/mod/choicegroup/settings.php
new file mode 100644
index 0000000..e6a5d71
--- /dev/null
+++ b/mod/choicegroup/settings.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die;
+
+require_once($CFG->dirroot . '/mod/choicegroup/lib.php');
+
+if ($ADMIN->fulltree) {
+    $settings->add(new admin_setting_heading('defaults', get_string('defaultsettings', 'choicegroup'), ''));
+
+    $options = choicegroup_get_sort_options();
+    $settings->add(new admin_setting_configselect('choicegroup/sortgroupsby', get_string('sortgroupsby', 'choicegroup'), '', CHOICEGROUP_SORTGROUPS_CREATEDATE, $options));
+}
diff --git a/mod/choicegroup/styles.css b/mod/choicegroup/styles.css
new file mode 100644
index 0000000..baf56bb
--- /dev/null
+++ b/mod/choicegroup/styles.css
@@ -0,0 +1,123 @@
+.path-mod-choicegroup .results {border-collapse: separate;}
+.path-mod-choicegroup .results .data {vertical-align:top;white-space: nowrap;}
+.path-mod-choicegroup .button {text-align:center;}
+.path-mod-choicegroup .attemptcell {width:5px;white-space: nowrap;}
+.path-mod-choicegroup .anonymous,
+.path-mod-choicegroup div.downloadreport ul {list-style: none; margin-left: 1em;}
+.path-mod-choicegroup .choicegroupresponse {width:100%;}
+.path-mod-choicegroup .choicegroupresponse .picture {width:10px;white-space: nowrap;}
+.path-mod-choicegroup .choicegroupresponse .fullname {width:100%;white-space: nowrap;}
+
+.path-mod-choicegroup .responseheader {width: 100%; text-align: center; margin-top: 10px;}
+.path-mod-choicegroup .choicegroups .option label {vertical-align: top;}
+.path-mod-choicegroup .choicegroups .option input {vertical-align: middle;}
+
+.path-mod-choicegroup .horizontal,
+.path-mod-choicegroup .horizontal .choicegroups .option {padding-right:20px;display:inline; white-space: normal;}
+.path-mod-choicegroup .horizontal .choicegroups .button {margin-top: 10px;}
+.path-mod-choicegroup ul.choicegroups li {list-style:none;}
+.path-mod-choicegroup .results { text-align: center;}
+.path-mod-choicegroup .results.anonymous .graph.horizontal {vertical-align: middle;text-align: left;width:70%;}
+
+.path-mod-choicegroup .results.anonymous .graph.vertical,
+.path-mod-choicegroup .cell {vertical-align: bottom; text-align: center; }
+.path-mod-choicegroup .results.names .header{width:10%; white-space: normal;}
+.path-mod-choicegroup .results.names .cell{vertical-align: top; text-align: left;}
+.path-mod-choicegroup .results.names .user,
+.path-mod-choicegroup #yourselection {padding: 5px;}
+.path-mod-choicegroup .results.names .user .attemptaction,
+.path-mod-choicegroup .results.names .user .image,
+.path-mod-choicegroup .results.names .user .fullname{float:left;}
+.path-mod-choicegroup .results.names .user .fullname{padding-left: 5px;}
+.path-mod-choicegroup .results .data.header {width: 10%;}
+.path-mod-choicegroup .responseaction {text-align: center;}
+.path-mod-choicegroup .results .option {white-space: normal;}
+.path-mod-choicegroup .results .option,
+.path-mod-choicegroup .results .numberofuser,
+.path-mod-choicegroup .results .percentage {font-weight: bold; font-size: 108%;}
+
+#page-mod-choice-report .downloadreport ul li {list-style:none;padding: 0 20px; display: inline;float: left; }
+.path-mod-choicegroup .clearfloat {float:none; clear:both;}
+
+/**
+ * Override for RTL layout
+ */
+.path-mod-choicegroup.dir-rtl .horizontal .choicegroups .option {padding-right:0px; padding-left: 20px; float:right;}
+.path-mod-choicegroup.dir-rtl .results.anonymous .graph.horizontal {text-align: right;}
+.path-mod-choicegroup.dir-rtl .results.anonymous { text-align: center; }
+.path-mod-choicegroup.dir-rtl .results.names .cell{text-align: right;}
+.path-mod-choicegroup.dir-rtl .results.names .user .attemptaction,
+.path-mod-choicegroup.dir-rtl .results.names .user .image,
+.path-mod-choicegroup.dir-rtl .results.names .user .fullname,
+.path-mod-choicegroup.dir-rtl .results.names .user .fullname{padding-left: 0px; padding-right: 5px;}
+.path-mod-choicegroup.dir-rtl .downloadreport {margin-left:0;margin-right: 25%;}
+
+#page-mod-choice-report.dir-rtl .downloadreport ul li{float:right;}
+#page-mod-choice-view.dir-rtl .reportlink {text-align: left;}
+
+.path-mod-choicegroup div.tablecontainer {
+    overflow: auto;
+    border: 1px #ccc solid;
+    min-width: 80%;
+    max-width: 100%;
+    display: inline-block;
+    margin-left: auto;
+    margin-right: auto;
+    text-align: left;
+}
+.path-mod-choicegroup.dir-rtl div.tablecontainer {
+    text-align: right;
+}
+.path-mod-choicegroup div.border {
+    border: 1px #ccc solid;
+}
+.path-mod-choicegroup div.tablecontainer table {
+    width: 100%;
+}
+
+.path-mod-choicegroup td { border-top: 1px #ccc solid; }
+.path-mod-choicegroup th, .path-mod-choicegroup td { padding:10px 15px; }
+.path-mod-choicegroup td.center { text-align:center; }
+
+.path-mod-choicegroup div.choicegroup-memberdisplay {
+    width:12px;
+    height:12px;
+    line-height:12px;
+    cursor:pointer;
+    text-align:center;
+    display:block;
+    border:1px #999 solid;
+    margin:0px auto;
+}
+
+.path-mod-choicegroup table.choicegroups {
+    margin: 20px 0;
+}
+
+.path-mod-choicegroup a.choicegroup-memberdisplay,
+.path-mod-choicegroup a.choicegroup-descriptiondisplay {
+    display: block;
+}
+
+.path-mod-choicegroup div.choicegroups-membersnames.hidden,
+.path-mod-choicegroup div.choicegroups-descriptions.hidden,
+.path-mod-choicegroup a.choicegroup-memberdisplay.hidden,
+.path-mod-choicegroup a.choicegroup-descriptiondisplay.hidden {
+    display:none;
+}
+
+.path-mod-choicegroup .results td {
+    min-width: 120px;
+}
+
+.path-mod-choicegroup .choicegroups-descriptions {
+    border-top: 1px #ccc dotted;
+    margin-top: 5px;
+    padding-top: 5px;
+}
+
+.path-mod-choicegroup .tableform {text-align: center}
+
+/* Styles to format the Choices table. */
+.path-mod-choicegroup .width10   {width: 10%;}
+.path-mod-choicegroup .width40   {width: 40%;}
diff --git a/mod/choicegroup/version.php b/mod/choicegroup/version.php
new file mode 100644
index 0000000..5d4ed20
--- /dev/null
+++ b/mod/choicegroup/version.php
@@ -0,0 +1,36 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013-2015 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$plugin->version  = 2017092100;
+$plugin->requires  = 2014050800; // Moodle 2.7
+$plugin->maturity  = MATURITY_STABLE;
+$plugin->release = '1.9.7 for Moodle 2.7-3.3 (Build: 2017092100)';
+
+$plugin->component = 'mod_choicegroup';
+$plugin->cron = 0;
+
diff --git a/mod/choicegroup/view.php b/mod/choicegroup/view.php
new file mode 100644
index 0000000..4972d4d
--- /dev/null
+++ b/mod/choicegroup/view.php
@@ -0,0 +1,265 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version information
+ *
+ * @package    mod
+ * @subpackage choicegroup
+ * @copyright  2013 Universit√© de Lausanne
+ * @author     Nicolas Dunand <Nicolas.Dunand@unil.ch>
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+require_once("../../config.php");
+require_once("lib.php");
+require_once($CFG->dirroot.'/group/lib.php');
+require_once($CFG->libdir . '/completionlib.php');
+
+$id         = required_param('id', PARAM_INT);                 // Course Module ID
+$action     = optional_param('action', '', PARAM_ALPHA);
+$userids    = optional_param_array('userid', array(), PARAM_INT); // array of attempt ids for delete action
+
+$url = new moodle_url('/mod/choicegroup/view.php', array('id'=>$id));
+if ($action !== '') {
+    $url->param('action', $action);
+}
+$PAGE->set_url($url);
+
+if (! $cm = get_coursemodule_from_id('choicegroup', $id)) {
+    print_error('invalidcoursemodule');
+}
+
+if (! $course = $DB->get_record("course", array("id" => $cm->course))) {
+    print_error('coursemisconf');
+}
+
+require_login($course, false, $cm);
+
+if (!$choicegroup = choicegroup_get_choicegroup($cm->instance)) {
+    print_error('invalidcoursemodule');
+}
+$choicegroup_groups = choicegroup_get_groups($choicegroup);
+$choicegroup_users = array();
+
+$strchoicegroup = get_string('modulename', 'choicegroup');
+$strchoicegroups = get_string('modulenameplural', 'choicegroup');
+
+if (!$context = context_module::instance($cm->id)) {
+    print_error('badcontext');
+}
+
+$eventparams = array(
+    'context' => $context,
+    'objectid' => $choicegroup->id
+);
+
+$current = choicegroup_get_user_answer($choicegroup, $USER);
+if ($action == 'delchoicegroup' and confirm_sesskey() and is_enrolled($context, NULL, 'mod/choicegroup:choose') and $choicegroup->allowupdate and !($choicegroup->timeclose and (time() > $choicegroup->timeclose))) {
+    // user wants to delete his own choice:
+    if ($current !== false) {
+        if (groups_is_member($current->id, $USER->id)) {
+            $currentgroup = $DB->get_record('groups', array('id' => $current->id), 'id,name', MUST_EXIST);
+            groups_remove_member($current->id, $USER->id);
+            $event = \mod_choicegroup\event\choice_removed::create($eventparams);
+            $event->add_record_snapshot('course_modules', $cm);
+            $event->add_record_snapshot('course', $course);
+            $event->add_record_snapshot('choicegroup', $choicegroup);
+            $event->trigger();
+        }
+        $current = choicegroup_get_user_answer($choicegroup, $USER, FALSE, TRUE);
+        // Update completion state
+        $completion = new completion_info($course);
+        if ($completion->is_enabled($cm) && $choicegroup->completionsubmit) {
+            $completion->update_state($cm, COMPLETION_INCOMPLETE);
+        }
+    }
+}
+
+$PAGE->set_title(format_string($choicegroup->name));
+$PAGE->set_heading($course->fullname);
+
+/// Mark as viewed
+$completion=new completion_info($course);
+$completion->set_module_viewed($cm);
+
+/// Submit any new data if there is any
+if (data_submitted() && is_enrolled($context, NULL, 'mod/choicegroup:choose') && confirm_sesskey()) {
+
+    if ($choicegroup->multipleenrollmentspossible == 1) {
+        $number_of_groups = optional_param('number_of_groups', '', PARAM_INT);
+
+        for ($i = 0; $i < $number_of_groups; $i++) {
+            $answer_value = optional_param('answer_' . $i, '', PARAM_INT);
+            if ($answer_value != '') {
+                choicegroup_user_submit_response($answer_value, $choicegroup, $USER->id, $course, $cm);
+            } else {
+                $answer_value_group_id = optional_param('answer_'.$i.'_groupid', '', PARAM_INT);
+                if (groups_is_member($answer_value_group_id, $USER->id)) {
+                    $answer_value_group = $DB->get_record('groups', array('id' => $answer_value_group_id), 'id,name', MUST_EXIST);
+                    groups_remove_member($answer_value_group_id, $USER->id);
+                    $event = \mod_choicegroup\event\choice_removed::create($eventparams);
+                    $event->add_record_snapshot('course_modules', $cm);
+                    $event->add_record_snapshot('course', $course);
+                    $event->add_record_snapshot('choicegroup', $choicegroup);
+                    $event->trigger();
+                }
+            }
+        }
+
+
+    } else { // multipleenrollmentspossible != 1
+
+        $timenow = time();
+        if (has_capability('mod/choicegroup:deleteresponses', $context)) {
+            if ($action == 'delete') { //some responses need to be deleted
+                choicegroup_delete_responses($userids, $choicegroup, $cm, $course); //delete responses.
+                redirect("view.php?id=$cm->id");
+            }
+        }
+
+        $answer = optional_param('answer', '', PARAM_INT);
+
+        if (empty($answer)) {
+            redirect("view.php?id=$cm->id", get_string('mustchooseone', 'choicegroup'));
+        } else {
+            choicegroup_user_submit_response($answer, $choicegroup, $USER->id, $course, $cm);
+        }
+    }
+
+    redirect("view.php?id=$cm->id", get_string('choicegroupsaved', 'choicegroup'));
+} else {
+    echo $OUTPUT->header();
+}
+
+
+/// Display the choicegroup and possibly results
+
+
+$event = \mod_choicegroup\event\course_module_viewed::create($eventparams);
+$event->add_record_snapshot('course_modules', $cm);
+$event->add_record_snapshot('course', $course);
+$event->add_record_snapshot('choicegroup', $choicegroup);
+$event->trigger();
+
+
+/// Check to see if groups are being used in this choicegroup
+$groupmode = groups_get_activity_groupmode($cm);
+
+if ($groupmode) {
+    groups_get_activity_group($cm, true);
+    groups_print_activity_menu($cm, $CFG->wwwroot . '/mod/choicegroup/view.php?id='.$id);
+}
+
+$allresponses = choicegroup_get_response_data($choicegroup, $cm);   // Big function, approx 6 SQL calls per user
+
+
+if (has_capability('mod/choicegroup:readresponses', $context)) {
+    choicegroup_show_reportlink($choicegroup, $allresponses, $cm);
+}
+
+echo '<div class="clearer"></div>';
+
+if ($choicegroup->intro) {
+    echo $OUTPUT->box(format_module_intro('choicegroup', $choicegroup, $cm->id), 'generalbox', 'intro');
+}
+
+//if user has already made a selection, and they are not allowed to update it, show their selected answer.
+if (isloggedin() && ($current !== false) ) {
+    if ($choicegroup->multipleenrollmentspossible == 1) {
+        $currents = choicegroup_get_user_answer($choicegroup, $USER, TRUE);
+
+        $names = array();
+        foreach ($currents as $current) {
+            $names[] = format_string($current->name);
+        }
+        $formatted_names = join(' '.get_string("and", "choicegroup").' ', array_filter(array_merge(array(join(', ', array_slice($names, 0, -1))), array_slice($names, -1))));
+        echo $OUTPUT->box(get_string("yourselection", "choicegroup", userdate($choicegroup->timeopen)).": ".$formatted_names, 'generalbox', 'yourselection');
+
+    } else {
+        echo $OUTPUT->box(get_string("yourselection", "choicegroup", userdate($choicegroup->timeopen)).": ".format_string($current->name), 'generalbox', 'yourselection');
+    }
+}
+
+/// Print the form
+$choicegroupopen = true;
+$timenow = time();
+if ($choicegroup->timeclose !=0) {
+    if ($choicegroup->timeopen > $timenow ) {
+        echo $OUTPUT->box(get_string("notopenyet", "choicegroup", userdate($choicegroup->timeopen)), "generalbox notopenyet");
+        echo $OUTPUT->footer();
+        exit;
+    } else if ($timenow > $choicegroup->timeclose) {
+        echo $OUTPUT->box(get_string("expired", "choicegroup", userdate($choicegroup->timeclose)), "generalbox expired");
+        $choicegroupopen = false;
+    }
+}
+
+$options = choicegroup_prepare_options($choicegroup, $USER, $cm, $allresponses);
+$renderer = $PAGE->get_renderer('mod_choicegroup');
+if ( (!$current or $choicegroup->allowupdate) and $choicegroupopen and is_enrolled($context, NULL, 'mod/choicegroup:choose')) {
+// They haven't made their choicegroup yet or updates allowed and choicegroup is open
+
+    echo $renderer->display_options($options, $cm->id, $choicegroup->display, $choicegroup->publish, $choicegroup->limitanswers, $choicegroup->showresults, $current, $choicegroupopen, false, $choicegroup->multipleenrollmentspossible);
+} else {
+    // form can not be updated
+    echo $renderer->display_options($options, $cm->id, $choicegroup->display, $choicegroup->publish, $choicegroup->limitanswers, $choicegroup->showresults, $current, $choicegroupopen, true, $choicegroup->multipleenrollmentspossible);
+}
+$choicegroupformshown = true;
+
+$sitecontext = context_system::instance();
+
+if (isguestuser()) {
+    // Guest account
+    echo $OUTPUT->confirm(get_string('noguestchoose', 'choicegroup').'<br /><br />'.get_string('liketologin'),
+                    get_login_url(), new moodle_url('/course/view.php', array('id'=>$course->id)));
+} else if (!is_enrolled($context)) {
+    // Only people enrolled can make a choicegroup
+    $SESSION->wantsurl = $FULLME;
+    $SESSION->enrolcancel = (!empty($_SERVER['HTTP_REFERER'])) ? $_SERVER['HTTP_REFERER'] : '';
+
+    $coursecontext = context_course::instance($course->id);
+    $courseshortname = format_string($course->shortname, true, array('context' => $coursecontext));
+
+    echo $OUTPUT->box_start('generalbox', 'notice');
+    echo '<p class="center">'. get_string('notenrolledchoose', 'choicegroup') .'</p>';
+    echo $OUTPUT->container_start('continuebutton');
+    echo $OUTPUT->single_button(new moodle_url('/enrol/index.php?', array('id'=>$course->id)), get_string('enrolme', 'core_enrol', $courseshortname));
+    echo $OUTPUT->container_end();
+    echo $OUTPUT->box_end();
+
+}
+
+// print the results at the bottom of the screen
+if ( $choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_ALWAYS or
+    ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER and $current) or
+    ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and !$choicegroupopen)) {
+}
+else if ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_NOT) {
+    echo $OUTPUT->box(get_string('neverresultsviewable', 'choicegroup'));
+}
+else if ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_AFTER_ANSWER && !$current) {
+    echo $OUTPUT->box(get_string('afterresultsviewable', 'choicegroup'));
+}
+else if ($choicegroup->showresults == CHOICEGROUP_SHOWRESULTS_AFTER_CLOSE and $choicegroupopen) {
+    echo $OUTPUT->box(get_string('notyetresultsviewable', 'choicegroup'));
+}
+else if (!$choicegroupformshown) {
+    echo $OUTPUT->box(get_string('noresultsviewable', 'choicegroup'));
+}
+
+echo $OUTPUT->footer();
+
diff --git a/mod/choicegroup/yui/form/form.js b/mod/choicegroup/yui/form/form.js
new file mode 100644
index 0000000..5a1fb36
--- /dev/null
+++ b/mod/choicegroup/yui/form/form.js
@@ -0,0 +1,430 @@
+/**
+ * This is JavaScript code that handles drawing on mouse events and painting pre-existing drawings.
+ * @package    qtype
+ * @subpackage freehanddrawing
+ * @copyright  ETHZ LET <jacob.shapiro@let.ethz.ch>
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+YUI.add('moodle-mod_choicegroup-form', function(Y) {
+	var CSS = {
+	},
+	SELECTORS = {
+			AVAILABLE_GRPS_SELECT: '#availablegroups',
+			AVAILABLE_GRPS_SELECT_OPTIONS: "select[id='availablegroups'] option",
+			SELECTED_GRPS_SELECT: '#id_selectedGroups',
+			ADD_GRP_BTN: '#addGroupButton',
+			DEL_GRP_BTN: '#removeGroupButton',
+			FORM: '#mform1',
+			LIMIT_UI_INPUT: '#ui_limit_input',
+			LIMIT_UI_DIV: '#fitem_id_limit_0',
+			LIMIT_UI_LABEL: '#label_for_limit_ui',
+			APPLY_LIMIT_TO_ALL_GRPS_BTN: '#id_setlimit',
+			ENABLE_DISABLE_LIMITING_SELECT: '#id_limitanswers',
+			EXPAND_ALL_GRPNGS_BTN: '#expandButton',
+			COLLAPSE_ALL_GRPNGS_BTN: '#collapseButton',
+			SERIALIZED_SELECTED_GRPS_LIST: '#serializedselectedgroups',
+			GLOBAL_LIMIT_INPUT: '#id_generallimitation',
+			HIDDEN_LIMIT_INPUTS: 'input.limit_input_node',
+	};
+	Y.namespace('Moodle.mod_choicegroup.form');
+	Y.Moodle.mod_choicegroup.form = {
+			init: function() {
+
+				// -------------------------------
+				// Global Variables
+				// -------------------------------
+
+                var CHAR_LIMITUI_PAR_LEFT = M.util.get_string('char_limitui_parenthesis_start', 'choicegroup');
+                var CHAR_LIMITUI_PAR_RIGHT = M.util.get_string('char_limitui_parenthesis_end', 'choicegroup');
+                var CHAR_SELECT_BULLET_COLLAPSED = M.util.get_string('char_bullet_collapsed', 'choicegroup');
+                var CHAR_SELECT_BULLET_EXPANDED = M.util.get_string('char_bullet_expanded', 'choicegroup');
+
+
+				var availableGroupsNode = Y.one(SELECTORS.AVAILABLE_GRPS_SELECT);
+				var addGroupButtonNode = Y.one(SELECTORS.ADD_GRP_BTN);
+				var selectedGroupsNode = Y.one(SELECTORS.SELECTED_GRPS_SELECT);
+				var removeGroupButtonNode = Y.one(SELECTORS.DEL_GRP_BTN);
+				var formNode = Y.one(SELECTORS.FORM);
+				var uiInputLimitNode = Y.one(SELECTORS.LIMIT_UI_INPUT);
+				var applyLimitToAllGroupsButtonNode = Y.one(SELECTORS.APPLY_LIMIT_TO_ALL_GRPS_BTN);
+				var limitAnswersSelectNode = Y.one(SELECTORS.ENABLE_DISABLE_LIMITING_SELECT);
+				var limitInputUIDIVNode = Y.one(SELECTORS.LIMIT_UI_DIV);
+				var expandButtonNode = Y.one(SELECTORS.EXPAND_ALL_GRPNGS_BTN);
+				var collapseButtonNode = Y.one(SELECTORS.COLLAPSE_ALL_GRPNGS_BTN);
+				var serializedSelectedGroupsListNode = Y.one(SELECTORS.SERIALIZED_SELECTED_GRPS_LIST);
+
+				var groupingsNodesContainer = new Array();
+
+				// --------------------------------
+				// Global Functions
+				// --------------------------------
+
+
+				function removeElementFromArray(ar, from, to) {
+					  var rest = ar.slice((to || from) + 1 || ar.length);
+					  ar.length = from < 0 ? ar.length + from : from;
+					  return ar.push.apply(ar, rest);
+				}
+
+				function getInputLimitNodeOfSelectedGroupNode(n) {
+					return Y.one('#group_' + n.get('value') + '_limit');
+				}
+
+				function cleanSelectedGroupsList() {
+					var optionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option");
+					optionsNodes.each(function(optNode) {
+						if (optNode.get('parentNode') != null) {
+						optNode.setContent(optNode.getContent().replace(/&nbsp;/gi,''));
+						optionsNodes.each(function(opt2Node){
+							if ((opt2Node != optNode) && (opt2Node.get('value') == optNode.get('value'))) {
+								opt2Node.remove();
+							}
+						});
+					}
+					});
+				}
+
+				function addOptionNodeToSelectedGroupsList(optNode) {
+					if (optNode.hasClass('grouping') == true) {
+						// check if option is collapsed
+						if (((typeof groupingsNodesContainer[optNode.get('value')]) == 'undefined') || ( groupingsNodesContainer[optNode.get('value')].length == 0)) {
+							// it is expanded, take nodes from UI
+							// This is a grouping, so instead of adding this item we actually need to add everything underneath it
+							var sib = optNode.next(); // sib means sibling, as in, the next element in the DOM tree
+							while (sib && sib.hasClass('nested') && sib.hasClass('group')) {
+								// add sib
+								selectedGroupsNode.append(sib.cloneNode(true));
+								// go to next node
+								sib = sib.next();
+							}
+						} else {
+							// yes it IS collapsed, need to take the nodes from the container rather than from the UI
+							groupingsNodesContainer[optNode.get('value')].forEach(function (underlyingGroupNode) {
+								selectedGroupsNode.append(underlyingGroupNode.cloneNode(true));
+							});
+						}
+					} else {
+						selectedGroupsNode.append(optNode.cloneNode(true));
+					}
+                    if (limitAnswersSelectNode.get('value') == '1') {
+                        updateLimitUIOfAllSelectedGroups();
+                    }
+				}
+
+				function updateGroupLimit(e) {
+					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
+					// get value of input box
+					var limit = uiInputLimitNode.get('value');
+					selectedOptionsNodes.each(function(optNode) {
+						getInputLimitNodeOfSelectedGroupNode(optNode).set('value', limit);
+                        updateLimitUIOfSelectedGroup(optNode);
+					});
+				}
+
+				function collapseGrouping(groupingNode) {
+					// Change the text of this <option> so that it is marked as collapsed:
+					groupingNode.set('text', CHAR_SELECT_BULLET_COLLAPSED + groupingNode.get('text').substring(1));
+					var sib = groupingNode.next(); // sib means sibling, as in, the next element in the DOM tree
+					while (sib && sib.hasClass('nested') && sib.hasClass('group')) {
+						// save this node somewhere first
+						if (typeof groupingsNodesContainer[groupingNode.get('value')] == 'undefined') {
+							groupingsNodesContainer[groupingNode.get('value')] = new Array();
+						}
+						groupingsNodesContainer[groupingNode.get('value')].push(sib.cloneNode(true));
+						// save the next node before removing the current one
+						var nextSibling = sib.next();
+						sib.remove();
+						// go to next node
+						sib = nextSibling;
+					}
+				}
+
+				function expandGrouping(groupingNode) {
+					// Change the text of this <option> so that it is marked as collapsed:
+					groupingNode.set('text', CHAR_SELECT_BULLET_EXPANDED + groupingNode.get('text').substring(1));
+					var nextOpt = groupingNode.next();
+					if (typeof groupingsNodesContainer[groupingNode.get('value')] != 'undefined') {
+						groupingsNodesContainer[groupingNode.get('value')].forEach(function(underlyingGroupNode) {
+							if (typeof nextOpt != 'undefined') {
+								availableGroupsNode.insertBefore(underlyingGroupNode, nextOpt);
+							} else {
+								availableGroupsNode.appendChild(underlyingGroupNode);
+							}
+						});
+						groupingsNodesContainer[groupingNode.get('value')] = new Array();
+					}
+
+
+				}
+
+				function collapseAllGroupings() {
+					var availableOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option");
+					availableOptionsNodes.each(function(optNode) {
+						if (optNode.hasClass('grouping') == true) {
+							collapseGrouping(optNode);
+						}
+					});
+				}
+
+				function expandAllGroupings() {
+					var availableOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option");
+					availableOptionsNodes.each(function(optNode) {
+						if (optNode.hasClass('grouping') == true) {
+							expandGrouping(optNode);
+						}
+					});
+				}
+
+                function getGroupNameWithoutLimitText(groupNode) {
+                    var indexOfLimitUIText = groupNode.get('text').indexOf(' ' + CHAR_LIMITUI_PAR_LEFT);
+                    if (indexOfLimitUIText !== -1) {
+                        return groupNode.get('text').substring(0, indexOfLimitUIText);
+                    } else {
+                        return groupNode.get('text');
+                    }
+                }
+                function clearLimitUIFromSelectedGroup(groupNode) {
+                	groupNode.set('text', getGroupNameWithoutLimitText(groupNode));
+                }
+
+                function updateLimitUIOfSelectedGroup(groupNode) {
+                    groupNode.set('text', getGroupNameWithoutLimitText(groupNode) + ' ' + CHAR_LIMITUI_PAR_LEFT + getInputLimitNodeOfSelectedGroupNode(groupNode).get('value') + CHAR_LIMITUI_PAR_RIGHT);
+                }
+
+                function updateLimitUIOfAllSelectedGroups() {
+                    Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option").each(function(optNode) { updateLimitUIOfSelectedGroup(optNode); });
+                }
+
+                function clearLimitUIFromAllSelectedGroups() {
+                    Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option").each(function(optNode) { clearLimitUIFromSelectedGroup(optNode); });
+                }
+
+                function expandOrCollapseGrouping(groupingNode) {
+					if (((typeof groupingsNodesContainer[groupingNode.get('value')]) == 'undefined') || ( groupingsNodesContainer[groupingNode.get('value')].length == 0)) {
+						collapseGrouping(groupingNode);
+						expandButtonNode.set('disabled', false);
+					} else {
+						expandGrouping(groupingNode);
+						collapseButtonNode.set('disabled', false);
+					}
+                }
+
+                getTextWidth = function(text, font) {
+                	// Thanks for http://stackoverflow.com/a/21015393/3430277
+                    // re-use canvas object for better performance
+                    var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
+                    var context = canvas.getContext("2d");
+                    context.font = font;
+                    var metrics = context.measureText(text);
+                    return metrics.width;
+                };
+
+                function wasFirstCharacterClicked(e, n) {
+                	// Thanks for http://stackoverflow.com/a/21015393/3430277
+                	// e is the event, n is the node to check
+					var style = window.getComputedStyle(n.getDOMNode(), null).getPropertyValue('font');
+					if ((e.pageX - e.currentTarget.getX()) <= getTextWidth(n.get('text').charAt(0),style)) {
+						return true;
+					}
+					return false;
+                }
+
+				// --------------------------------
+				// this code happens on form load
+				// --------------------------------
+				if (serializedSelectedGroupsListNode.get('value') != '') {
+					var selectedGroups = serializedSelectedGroupsListNode.get('value').split(';');
+					selectedGroups = selectedGroups.filter(function(n) {return n != '';});
+					var availableOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option");
+					availableOptionsNodes.each(function(optNode) {
+						selectedGroups.forEach(function (selectedGroup) {
+							if (selectedGroup == optNode.get('value')) {
+								addOptionNodeToSelectedGroupsList(optNode);
+							}
+						});
+					});
+					cleanSelectedGroupsList();
+				}
+
+
+				// Collapse all groupings on load
+				collapseAllGroupings();
+				expandButtonNode.set('disabled', false);
+                // If necessary update their limit information
+				if (limitAnswersSelectNode.get('value') == '1') { // limiting is enabled, show limit box
+                    updateLimitUIOfAllSelectedGroups();
+                }
+
+				// -------------------------------
+				// -------------------------------
+
+
+
+
+
+
+				// ---------------------------------
+				// Setup UI Bindings (on load)
+				// ---------------------------------
+
+
+				Y.one('#expandButton').on('click', function(e) {
+					expandAllGroupings();
+					expandButtonNode.set('disabled', true);
+					collapseButtonNode.set('disabled', false);
+
+				});
+				Y.one('#collapseButton').on('click', function(e) {
+					collapseAllGroupings();
+					collapseButtonNode.set('disabled', true);
+					expandButtonNode.set('disabled', false);
+
+				});
+
+
+				// On click fill in the limit in every field
+				applyLimitToAllGroupsButtonNode.on('click', function (e) {
+					// Get the value string
+					var generalLimitValue = Y.one(SELECTORS.GLOBAL_LIMIT_INPUT).get('value');
+					// Make sure we've got an integer value
+					generalLimitValue = parseInt(generalLimitValue);
+					if (!isNaN(generalLimitValue)) {
+						var limitInputNodes = Y.all(SELECTORS.HIDDEN_LIMIT_INPUTS);
+						limitInputNodes.each(function(n) { n.set('value', generalLimitValue); });
+					} else {
+						alert(M.util.get_string('the_value_you_entered_is_not_a_number', 'choicegroup'));
+					}
+                    updateLimitUIOfAllSelectedGroups();
+				});
+
+
+
+
+				formNode.on('submit', function(e) {
+					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option");
+					if (selectedOptionsNodes.size() < 2) {
+						alert(M.util.get_string('pleasesetgroups', 'choicegroup'));
+				        e.preventDefault();
+				        e.stopPropagation();
+					}
+					var serializedSelection = '';
+					selectedOptionsNodes.each(function(optNode) { serializedSelection += ';' + optNode.get('value'); });
+					serializedSelectedGroupsListNode.set('value', serializedSelection);
+
+				});
+
+
+				availableGroupsNode.on('click', function(e) {
+					var selectedOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option:checked");
+					if (selectedOptionsNodes.size() >= 2) {
+						var allGroupings = true;
+						selectedOptionsNodes.each(function(optNode){
+							if (optNode.hasClass('grouping') == false) {
+								allGroupings = false;
+							}
+						});
+						if (allGroupings) {
+							addGroupButtonNode.setContent(M.util.get_string('add_groupings', 'choicegroup'));
+						} else {
+							addGroupButtonNode.setContent(M.util.get_string('add_groups', 'choicegroup'));
+						}
+						addGroupButtonNode.set('disabled', false);
+
+					} else if (selectedOptionsNodes.size() >= 1) {
+						var firstNode = selectedOptionsNodes.item(0);
+						if (firstNode.hasClass('grouping')) {
+							addGroupButtonNode.setContent(M.util.get_string('add_grouping', 'choicegroup'));
+							if (wasFirstCharacterClicked(e, firstNode)) {
+								expandOrCollapseGrouping(firstNode);
+							}
+
+						} else {
+							addGroupButtonNode.setContent(M.util.get_string('add_group', 'choicegroup'));
+						}
+						addGroupButtonNode.set('disabled', false);
+
+					} else {
+						addGroupButtonNode.set('disabled', true);
+						addGroupButtonNode.setContent(M.util.get_string('add', 'choicegroup'));
+					}
+
+				});
+				Y.delegate('dblclick', function(e) {
+					if (e.currentTarget.hasClass('grouping') == true) {
+						expandOrCollapseGrouping(e.currentTarget);
+					} else {
+						addOptionNodeToSelectedGroupsList(e.currentTarget);
+						cleanSelectedGroupsList();
+					}
+
+
+				},  Y.config.doc, SELECTORS.AVAILABLE_GRPS_SELECT_OPTIONS, this);
+
+				selectedGroupsNode.on('click', function(e) {
+					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
+					if (selectedOptionsNodes.size() >= 2) {
+						removeGroupButtonNode.setContent(M.util.get_string('del_groups', 'choicegroup'));
+						removeGroupButtonNode.set('disabled', false);
+						uiInputLimitNode.set('disabled', true);
+						//uiInputLimitNode.set('value', 'multiple values');
+						limitInputUIDIVNode.hide();
+
+					} else if (selectedOptionsNodes.size() >= 1) {
+						removeGroupButtonNode.setContent(M.util.get_string('del_group', 'choicegroup'));
+						removeGroupButtonNode.set('disabled', false);
+						uiInputLimitNode.set('disabled', false);
+						uiInputLimitNode.set('value', getInputLimitNodeOfSelectedGroupNode(selectedOptionsNodes.item(0)).get('value'));
+						Y.one(SELECTORS.LIMIT_UI_LABEL).set('text', M.util.get_string('set_limit_for_group', 'choicegroup') + getGroupNameWithoutLimitText(selectedOptionsNodes.item(0)) + ":");
+						if (limitAnswersSelectNode.get('value') == '1') { // limiting is enabled, show limit box
+							limitInputUIDIVNode.show();
+						}
+
+
+					} else {
+						removeGroupButtonNode.set('disabled', true);
+						removeGroupButtonNode.setContent(M.util.get_string('del', 'choicegroup'));
+						uiInputLimitNode.set('disabled', true);
+						limitInputUIDIVNode.hide();
+					}
+
+				});
+
+				uiInputLimitNode.on('change', function(e) { updateGroupLimit(e); });
+				uiInputLimitNode.on('blur', function(e) { updateGroupLimit(e); });
+
+
+				addGroupButtonNode.on('click', function(e) {
+					var selectedOptionsNodes = Y.all(SELECTORS.AVAILABLE_GRPS_SELECT + " option:checked");
+					selectedOptionsNodes.each(function(optNode) { addOptionNodeToSelectedGroupsList(optNode); });
+					cleanSelectedGroupsList();
+				});
+				removeGroupButtonNode.on('click', function(e) {
+					var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
+					selectedOptionsNodes.each(function(optNode) {
+							optNode.remove();
+
+					});
+				});
+
+				limitAnswersSelectNode.on('change', function(e) {
+					if (limitAnswersSelectNode.get('value') == '1') { // limiting is enabled, show limit box
+						var selectedOptionsNodes = Y.all(SELECTORS.SELECTED_GRPS_SELECT + " option:checked");
+						if (selectedOptionsNodes.size() == 1) {
+							limitInputUIDIVNode.show();
+						}
+                        updateLimitUIOfAllSelectedGroups();
+
+					} else { // limiting is disabled
+						limitInputUIDIVNode.hide();
+                        clearLimitUIFromAllSelectedGroups();
+					}
+
+				});
+
+
+			},
+
+
+	};
+}, '@VERSION@', {requires: ['node', 'event'] });
-- 
1.8.3.1

