From 91640787ab3c88d6debb24a2160f8930d6cf4db1 Mon Sep 17 00:00:00 2001
From: Nadav Kavalerchik <nadavkav@gmail.com>
Date: Wed, 11 Oct 2017 21:18:22 +0300
Subject: [PATCH 28/95] course/format/socialwall (new)

---
 course/format/socialwall/README.md                 |  25 +
 course/format/socialwall/action.php                | 148 ++++
 course/format/socialwall/ajax.php                  | 174 ++++
 .../backup_format_socialwall_plugin.class.php      | 110 +++
 .../restore_format_socialwall_plugin.class.php     | 173 ++++
 .../socialwall/classes/local/action_handler.php    |  72 ++
 .../format/socialwall/classes/local/attaches.php   | 163 ++++
 .../format/socialwall/classes/local/comments.php   | 313 +++++++
 course/format/socialwall/classes/local/likes.php   | 157 ++++
 .../socialwall/classes/local/notification.php      | 770 ++++++++++++++++
 course/format/socialwall/classes/local/posts.php   | 966 +++++++++++++++++++++
 .../classes/task/send_timeline_digests.php         |  44 +
 .../classes/task/send_timeline_instant.php         |  45 +
 course/format/socialwall/db/access.php             | 157 ++++
 course/format/socialwall/db/caches.php             |  39 +
 course/format/socialwall/db/events.php             |  50 ++
 course/format/socialwall/db/install.xml            | 118 +++
 course/format/socialwall/db/messages.php           |  34 +
 course/format/socialwall/db/tasks.php              |  43 +
 course/format/socialwall/db/upgrade.php            |  60 ++
 course/format/socialwall/format.php                |  61 ++
 .../socialwall/lang/en/format_socialwall.php       | 184 ++++
 course/format/socialwall/lib.php                   | 211 +++++
 course/format/socialwall/locallib.php              |  66 ++
 .../format/socialwall/pages/addactivity_ajax.php   |  54 ++
 .../format/socialwall/pages/addactivity_form.php   | 153 ++++
 course/format/socialwall/pages/comment_form.php    | 104 +++
 .../format/socialwall/pages/editnotification.php   |  80 ++
 .../socialwall/pages/editnotification_form.php     |  61 ++
 course/format/socialwall/pages/post_form.php       | 348 ++++++++
 course/format/socialwall/pix/lockedpost.png        | Bin 0 -> 306 bytes
 course/format/socialwall/pix/lockedpost.svg        |  87 ++
 course/format/socialwall/pix/stickypost.png        | Bin 0 -> 539 bytes
 course/format/socialwall/pix/stickypost.svg        | 106 +++
 course/format/socialwall/pix/unlockedpost.png      | Bin 0 -> 318 bytes
 course/format/socialwall/pix/unlockedpost.svg      |  88 ++
 course/format/socialwall/pix/unstickypost.png      | Bin 0 -> 209 bytes
 course/format/socialwall/pix/unstickypost.svg      |  86 ++
 course/format/socialwall/renderer.php              | 937 ++++++++++++++++++++
 course/format/socialwall/settings.php              |  79 ++
 course/format/socialwall/styles.css                | 303 +++++++
 course/format/socialwall/tests/socialwall_test.php | 157 ++++
 course/format/socialwall/version.php               |  33 +
 .../moodle-format_socialwall-addactivity-debug.js  | Bin 0 -> 7215 bytes
 .../moodle-format_socialwall-addactivity-min.js    | Bin 0 -> 2961 bytes
 .../moodle-format_socialwall-addactivity.js        | Bin 0 -> 7215 bytes
 .../moodle-format_socialwall-postform-debug.js     | Bin 0 -> 16510 bytes
 .../moodle-format_socialwall-postform-min.js       | Bin 0 -> 7062 bytes
 .../moodle-format_socialwall-postform.js           | Bin 0 -> 16510 bytes
 .../socialwall/yui/src/addactivity/build.json      |  10 +
 .../yui/src/addactivity/js/addactivity.js          | 257 ++++++
 .../yui/src/addactivity/meta/addactivity.json      |   5 +
 .../format/socialwall/yui/src/postform/build.json  |  10 +
 .../socialwall/yui/src/postform/js/postform.js     | 553 ++++++++++++
 .../socialwall/yui/src/postform/meta/postform.json |   5 +
 55 files changed, 7699 insertions(+)
 create mode 100644 course/format/socialwall/README.md
 create mode 100644 course/format/socialwall/action.php
 create mode 100644 course/format/socialwall/ajax.php
 create mode 100644 course/format/socialwall/backup/moodle2/backup_format_socialwall_plugin.class.php
 create mode 100644 course/format/socialwall/backup/moodle2/restore_format_socialwall_plugin.class.php
 create mode 100644 course/format/socialwall/classes/local/action_handler.php
 create mode 100644 course/format/socialwall/classes/local/attaches.php
 create mode 100644 course/format/socialwall/classes/local/comments.php
 create mode 100644 course/format/socialwall/classes/local/likes.php
 create mode 100644 course/format/socialwall/classes/local/notification.php
 create mode 100644 course/format/socialwall/classes/local/posts.php
 create mode 100644 course/format/socialwall/classes/task/send_timeline_digests.php
 create mode 100644 course/format/socialwall/classes/task/send_timeline_instant.php
 create mode 100644 course/format/socialwall/db/access.php
 create mode 100644 course/format/socialwall/db/caches.php
 create mode 100644 course/format/socialwall/db/events.php
 create mode 100644 course/format/socialwall/db/install.xml
 create mode 100644 course/format/socialwall/db/messages.php
 create mode 100644 course/format/socialwall/db/tasks.php
 create mode 100644 course/format/socialwall/db/upgrade.php
 create mode 100644 course/format/socialwall/format.php
 create mode 100644 course/format/socialwall/lang/en/format_socialwall.php
 create mode 100644 course/format/socialwall/lib.php
 create mode 100644 course/format/socialwall/locallib.php
 create mode 100644 course/format/socialwall/pages/addactivity_ajax.php
 create mode 100644 course/format/socialwall/pages/addactivity_form.php
 create mode 100644 course/format/socialwall/pages/comment_form.php
 create mode 100644 course/format/socialwall/pages/editnotification.php
 create mode 100644 course/format/socialwall/pages/editnotification_form.php
 create mode 100644 course/format/socialwall/pages/post_form.php
 create mode 100644 course/format/socialwall/pix/lockedpost.png
 create mode 100644 course/format/socialwall/pix/lockedpost.svg
 create mode 100644 course/format/socialwall/pix/stickypost.png
 create mode 100644 course/format/socialwall/pix/stickypost.svg
 create mode 100644 course/format/socialwall/pix/unlockedpost.png
 create mode 100644 course/format/socialwall/pix/unlockedpost.svg
 create mode 100644 course/format/socialwall/pix/unstickypost.png
 create mode 100644 course/format/socialwall/pix/unstickypost.svg
 create mode 100644 course/format/socialwall/renderer.php
 create mode 100644 course/format/socialwall/settings.php
 create mode 100644 course/format/socialwall/styles.css
 create mode 100644 course/format/socialwall/tests/socialwall_test.php
 create mode 100644 course/format/socialwall/version.php
 create mode 100644 course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity-debug.js
 create mode 100644 course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity-min.js
 create mode 100644 course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity.js
 create mode 100644 course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform-debug.js
 create mode 100644 course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform-min.js
 create mode 100644 course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform.js
 create mode 100644 course/format/socialwall/yui/src/addactivity/build.json
 create mode 100644 course/format/socialwall/yui/src/addactivity/js/addactivity.js
 create mode 100644 course/format/socialwall/yui/src/addactivity/meta/addactivity.json
 create mode 100644 course/format/socialwall/yui/src/postform/build.json
 create mode 100644 course/format/socialwall/yui/src/postform/js/postform.js
 create mode 100644 course/format/socialwall/yui/src/postform/meta/postform.json

diff --git a/course/format/socialwall/README.md b/course/format/socialwall/README.md
new file mode 100644
index 0000000..7be41eb
--- /dev/null
+++ b/course/format/socialwall/README.md
@@ -0,0 +1,25 @@
+# moodle-format_socialwall
+
+The eCommunity Platform uses a new Moodle Course Format (called Socialwall) which alters the way a typical course looks and behaves. Most people use “Topic” or “Weekly” course formats in Moodle.
+
+This is new course format offers a timeline, where teachers and students may post and/or comment on. It is fully integrated in Moodle, so teacher may:
+
+* make different kind of posts (Alerts, sticky post)
+* attach activities to timeline-posts (via Drag and Drop too)
+* attach files and URLs to posts
+* comment on posts or reply to comments
+
+Students (depending on capabilites) may:
+
+* make standard posts
+* attach resources (files or links) to posts
+* comment on posts or reply to comments
+* view results and feedback of assignments in their timeline
+
+##The eCommunity-Package includes:
+*	a new Course Format (called socialwall, format_socialwall)
+
+Optional:
+*	a new Filter (filter_urlresource) to alter the way a posted url-Resource will be displayed
+*	a local plugin (local_filterurlresbak) to backup and restore the filter data (unfortunately moodle doesn’t support backup and restore for filter data).
+*	a new Block to display upcoming events and alerts related to the course (block_alerts).
diff --git a/course/format/socialwall/action.php b/course/format/socialwall/action.php
new file mode 100644
index 0000000..3e449fe
--- /dev/null
+++ b/course/format/socialwall/action.php
@@ -0,0 +1,148 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format.  Display the whole course as "socialwall" made of modules.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__) . '../../../../config.php');
+
+$courseid = required_param('courseid', PARAM_INT); // ... course id.
+$action = required_param('action', PARAM_ALPHA);
+
+// User has clicked the cancel-button in form.
+if (isset($_REQUEST['cancel'])) {
+    $action = 'cancel';
+}
+
+$course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+
+require_sesskey(); // Gotta have the sesskey.
+require_course_login($course);
+
+// ...start setting up the page.
+$context = context_course::instance($course->id, MUST_EXIST);
+
+// ... add all the theme settings.
+$course = course_get_format($course)->get_course();
+
+$PAGE->set_context($context);
+$PAGE->set_url(new moodle_url('/course/format/socialwall/action.php', array('id' => $courseid)));
+
+require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+
+$redirecturl = new moodle_url('/course/view.php', array('id' => $course->id));
+
+switch ($action) {
+
+    case 'savepost' :
+    case 'updatepost':
+
+        $posts = \format_socialwall\local\posts::instance($course->id);
+        $postform = $posts->get_post_form();
+
+        if ($data = $postform->get_data()) {
+
+            // User have turned editing on or off.
+            if (isset($data->turneditingon)) {
+
+                if ($PAGE->user_allowed_editing()) {
+                    $USER->editing = 1;
+                }
+            }
+
+            if (isset($data->turneditoron)) {
+                $redirecturl = new moodle_url('/course/view.php', array('id' => $course->id, 'loadposteditor' => 1));
+            }
+
+            if (isset($data->turneditoroff)) {
+                $redirecturl = new moodle_url('/course/view.php', array('id' => $course->id, 'loadposteditor' => 0));
+            }
+
+            // User have submitted a post.
+            if (isset($data->submitbutton)) {
+                // Suitable capability checks are made in save_post!
+                $posts->save_post($data, $course);
+            }
+        }
+        redirect($redirecturl);
+
+        break;
+
+    case 'deletepost' :
+
+        $pid = required_param('pid', PARAM_INT);
+
+        $formatsociallwallposts = \format_socialwall\local\posts::instance($course->id);
+
+        // Suitable capability checks are made in delete_post!
+        $formatsociallwallposts->delete_post($pid);
+
+        redirect($redirecturl);
+        break;
+
+    case 'likepost' :
+
+        \format_socialwall\local\action_handler::like_post($course);
+        redirect($redirecturl);
+        break;
+
+    case 'makesticky' :
+
+        $posts = \format_socialwall\local\posts::instance($course->id);
+        // Suitable capability checks are made in delete_post!
+        $posts->makesticky();
+        redirect($redirecturl);
+        break;
+
+    case 'lockpost' :
+
+        \format_socialwall\local\action_handler::lock_post($course);
+        redirect($redirecturl);
+        break;
+
+    case 'postcomment' :
+
+        \format_socialwall\local\action_handler::post_comment($course);
+        redirect($redirecturl);
+        break;
+
+    case 'deletecomment' :
+
+        \format_socialwall\local\action_handler::delete_comment();
+        redirect($redirecturl);
+        break;
+
+    case 'cancel' :
+    case 'resetfilter' :
+        $cache = \cache::make('format_socialwall', 'timelinefilter');
+        $cache->purge();
+
+        $cache = \cache::make('format_socialwall', 'postformparams');
+        $cache->purge();
+
+        $cache = cache::make('format_socialwall', 'attachedrecentactivities');
+        $cache->purge();
+
+        redirect($redirecturl);
+        break;
+
+    default :
+        print_error('unknown action: ' . $action);
+}
diff --git a/course/format/socialwall/ajax.php b/course/format/socialwall/ajax.php
new file mode 100644
index 0000000..1a90066
--- /dev/null
+++ b/course/format/socialwall/ajax.php
@@ -0,0 +1,174 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format.  Display the whole course as "socialwall" made of modules.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+define('AJAX_SCRIPT', true);
+require_once(dirname(__FILE__) . '../../../../config.php');
+
+$courseid = required_param('courseid', PARAM_INT); // ... coursemodule id.
+$action = required_param('action', PARAM_ALPHA);
+
+$course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+
+require_sesskey(); // Gotta have the sesskey.
+require_course_login($course);
+
+// ...start setting up the page.
+$context = context_course::instance($course->id, MUST_EXIST);
+
+// ... add all the theme settings.
+$course = course_get_format($course)->get_course();
+
+$PAGE->set_context($context);
+$PAGE->set_url(new moodle_url('/course/format/socialwall/ajax.php', array('id' => $courseid)));
+
+require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+
+require_once($CFG->dirroot . '/course/format/socialwall/classes/local/action_handler.php');
+
+switch ($action) {
+
+    case 'postcomment' :
+
+        $result = \format_socialwall\local\action_handler::post_comment($course);
+
+        if ($result['error'] == 0) {
+
+            $renderer = $PAGE->get_renderer('format_socialwall');
+            $comment = $DB->get_record('format_socialwall_comments', array('id' => $result['commentid']));
+            $post = $DB->get_record('format_socialwall_posts', array('id' => $comment->postid));
+
+            $result['commenthtml'] = $renderer->render_ajax_loaded_comment($post, $context, $comment, $USER, $course);
+        }
+
+        echo json_encode($result);
+        die;
+
+    case 'deletecomment':
+
+        $result = \format_socialwall\local\action_handler::delete_comment();
+        echo json_encode($result);
+        die;
+
+
+    case 'likepost' :
+
+        $result = \format_socialwall\local\action_handler::like_post($course);
+        echo json_encode($result);
+        die;
+
+    case 'lockpost':
+
+        $result = \format_socialwall\local\action_handler::lock_post($course);
+        echo json_encode($result);
+        die;
+
+    case 'showalldiscussions' :
+    case 'showallcomments':
+
+        $postid = required_param('postid', PARAM_INT);
+
+        // Ensure that post exists and get the correct courseid.
+        if (!$post = $DB->get_record('format_socialwall_posts', array('id' => $postid))) {
+            print_error('invalidpostid', 'format_socialwall');
+        }
+
+        if ($post->courseid <> $course->id) {
+            print_error('invalidcourseid', 'format_socialwall');
+        }
+
+        $limitreplies = ($action == 'showalldiscussions') ? 0 : $course->tlnumreplies;
+
+        $comments = \format_socialwall\local\comments::instance();
+        $commentsdata = $comments->get_comments_data($postid, 0, $limitreplies);
+
+        $renderer = $PAGE->get_renderer('format_socialwall');
+        $commentshtml = $renderer->render_ajax_loaded_comments($postid, $context, $commentsdata, $course);
+
+        echo json_encode(array('error' => '0', 'postid' => $postid, 'commentshtml' => $commentshtml));
+        die;
+
+    case 'showallreplies':
+
+        $replycommentid = required_param('replycommentid', PARAM_INT);
+
+        // Ensure that post exists and get the correct courseid.
+
+        if (!$comment = $DB->get_record('format_socialwall_comments', array('id' => $replycommentid))) {
+            print_error('invalidcommentid', 'format_socialwall');
+        }
+
+        if (!$post = $DB->get_record('format_socialwall_posts', array('id' => $comment->postid))) {
+            print_error('invalidpostid', 'format_socialwall');
+        }
+
+        if ($post->courseid <> $course->id) {
+            print_error('invalidcourseid', 'format_socialwall');
+        }
+
+        $comments = \format_socialwall\local\comments::instance();
+        $repliesdata = $comments->get_replies_data($comment);
+
+        $renderer = $PAGE->get_renderer('format_socialwall');
+        $replieshtml = $renderer->render_ajax_loaded_replies($post, $context, $repliesdata, $course);
+
+        echo json_encode(array('error' => '0', 'postid' => $post->id,
+            'replycommentid' => $replycommentid, 'replieshtml' => $replieshtml));
+        die;
+
+    case 'loadmoreposts' :
+
+        $posts = \format_socialwall\local\posts::instance($course->id);
+
+        $limitfrom = optional_param('limitfrom', 0, PARAM_INT);
+
+        // Posts are limited to the max value of $course->tlnumposts in course settings.
+        $postsdata = $posts->get_timeline_posts($course, $limitfrom);
+        $renderer = $PAGE->get_renderer('format_socialwall');
+        $postshtml = $renderer->render_ajax_loaded_posts($course, $postsdata);
+
+        $result = array(
+            'error' => '0', 'poststotal' => $postsdata->poststotal,
+            'postsloaded' => $postsdata->postsloaded, 'postshtml' => $postshtml);
+
+        echo json_encode($result);
+        die;
+
+    case 'storeformparams' :
+
+        // Here we store the values of postformelement for the case the user turns editing after
+        // he has done some input.
+
+        $postid = optional_param('postid', 0, PARAM_INT);
+
+        $cache = cache::make('format_socialwall', 'postformparams');
+        $formparams = $cache->get($course->id.'_'.$postid);
+        $formparams['posttext'] = optional_param('posttext', '', PARAM_RAW);
+        $formparams['togroupid'] = optional_param('togroupid', 0, PARAM_INT);
+        $formparams['poststatus'] = optional_param('poststatus', 0, PARAM_INT);
+
+        $cache->set($course->id.'_'.$postid, $formparams);
+        die;
+
+    default :
+        print_error('unknown action: ' . $action);
+}
\ No newline at end of file
diff --git a/course/format/socialwall/backup/moodle2/backup_format_socialwall_plugin.class.php b/course/format/socialwall/backup/moodle2/backup_format_socialwall_plugin.class.php
new file mode 100644
index 0000000..2268067
--- /dev/null
+++ b/course/format/socialwall/backup/moodle2/backup_format_socialwall_plugin.class.php
@@ -0,0 +1,110 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version details
+ *
+ * @package    format
+ * @subpackage socialwall
+ * @copyright  2014 Andreas Wagner, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * Provides the information to backup grid course format
+ */
+class backup_format_socialwall_plugin extends backup_local_plugin {
+
+    /**
+     * Returns the format information to attach to course element
+     */
+    protected function define_course_plugin_structure() {
+
+        $plugin = $this->get_plugin_element();
+
+        $userinfo = $this->get_setting_value('users');
+
+        if ($userinfo) {
+
+            $formatsocialwall = new backup_nested_element($this->get_recommended_name());
+            $plugin->add_child($formatsocialwall);
+
+            // ...backup posts.
+            $posts = new backup_nested_element('posts');
+            $formatsocialwall->add_child($posts);
+
+            $post = new backup_nested_element('post', array(), array('id', 'fromuserid', 'togroupid', 'posttext', 'sticky',
+                'private', 'alert', 'locked', 'countcomments', 'countlikes', 'timecreated', 'timemodified'));
+
+            $posts->add_child($post);
+            $post->set_source_table('format_socialwall_posts', array('courseid' => backup::VAR_PARENTID));
+
+            // ...backup likes.
+            $likes = new backup_nested_element('likes');
+            $post->add_child($likes);
+
+            $like = new backup_nested_element('like', array(), array('id', 'postid', 'fromuserid', 'timecreated'));
+            $likes->add_child($like);
+            $like->set_source_table('format_socialwall_likes', array('postid' => backup::VAR_PARENTID));
+
+            // ...backup comments.
+            $comments = new backup_nested_element('comments');
+            $post->add_child($comments);
+
+            $comment = new backup_nested_element('comment', array(), array('id', 'postid',
+                'replycommentid', 'countreplies', 'fromuserid', 'text', 'timecreated', 'timemodified'));
+
+            $comments->add_child($comment);
+            $comment->set_source_table('format_socialwall_comments', array('postid' => backup::VAR_PARENTID));
+
+            // ... backup notification settings.
+            $nfsettings = new backup_nested_element('nfsettings');
+            $formatsocialwall->add_child($nfsettings);
+
+            $nfsetting = new backup_nested_element('nfsetting', array(), array('userid', 'notificationtype'));
+            $nfsettings->add_child($nfsetting);
+            $nfsetting->set_source_table('format_socialwall_nfsettings', array('courseid' => backup::VAR_PARENTID));
+        }
+
+        return $plugin;
+    }
+
+    /**
+     * Returns the format information to attach to module element
+     */
+    protected function define_module_plugin_structure() {
+
+        $plugin = $this->get_plugin_element();
+        $userinfo = $this->get_setting_value('users');
+
+        if ($userinfo) {
+
+            $formatsocialwall = new backup_nested_element($this->get_recommended_name());
+            $plugin->add_child($formatsocialwall);
+
+            // ...backup attachment information.
+            $attachments = new backup_nested_element('attachments');
+            $formatsocialwall->add_child($attachments);
+
+            $attachment = new backup_nested_element('attachment', array(), array('postid', 'sortorder'));
+            $attachments->add_child($attachment);
+            $attachment->set_source_table('format_socialwall_attaches', array('coursemoduleid' => backup::VAR_PARENTID));
+        }
+        return $plugin;
+    }
+
+}
diff --git a/course/format/socialwall/backup/moodle2/restore_format_socialwall_plugin.class.php b/course/format/socialwall/backup/moodle2/restore_format_socialwall_plugin.class.php
new file mode 100644
index 0000000..e2dcc63
--- /dev/null
+++ b/course/format/socialwall/backup/moodle2/restore_format_socialwall_plugin.class.php
@@ -0,0 +1,173 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version details
+ *
+ * @package    format
+ * @subpackage socialwall
+ * @copyright  2014 Andreas Wagner, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+class restore_format_socialwall_plugin extends restore_local_plugin {
+
+    protected function define_course_plugin_structure() {
+
+        $paths = array();
+
+        $userinfo = $this->get_setting_value('users');
+
+        if ($userinfo) {
+
+            $elename = 'post';
+            $elepath = $this->get_pathfor('/posts/post');
+            $paths[] = new restore_path_element($elename, $elepath);
+
+            $elename = 'like';
+            $elepath = $this->get_pathfor('/posts/post/likes/like');
+            $paths[] = new restore_path_element($elename, $elepath);
+
+            $elename = 'comment';
+            $elepath = $this->get_pathfor('/posts/post/comments/comment');
+            $paths[] = new restore_path_element($elename, $elepath);
+
+            $elename = 'nfsetting';
+            $elepath = $this->get_pathfor('/nfsettings/nfsetting');
+            $paths[] = new restore_path_element($elename, $elepath);
+        }
+
+        return $paths;
+    }
+
+    /**
+     * process restore of posts.
+     */
+    public function process_post($data) {
+        global $DB;
+
+        $data = (object) $data;
+
+        // ... remember oldid for mapping.
+        $oldid = $data->id;
+
+        $data->courseid = $this->task->get_courseid();
+        $data->fromuserid = $this->get_mappingid('user', $data->fromuserid);
+        $data->togroupid = $this->get_mappingid('group', $data->togroupid);
+        $data->timemodified = time();
+        $newid = $DB->insert_record('format_socialwall_posts', $data);
+
+        $this->set_mapping('socialwallpost', $oldid, $newid);
+    }
+
+    /**
+     * process restore of likes.
+     */
+    public function process_like($data) {
+        global $DB;
+
+        $data = (object) $data;
+        $data->courseid = $this->task->get_courseid();
+        $data->postid = $this->get_mappingid('socialwallpost', $data->postid);
+        $data->fromuserid = $this->get_mappingid('user', $data->fromuserid);
+
+        $DB->insert_record('format_socialwall_likes', $data);
+    }
+
+    /**
+     * process restore of comments.
+     */
+    public function process_comment($data) {
+        global $DB;
+
+        $data = (object) $data;
+        $oldid = $data->id;
+
+        $data->courseid = $this->task->get_courseid();
+        $data->postid = $this->get_mappingid('socialwallpost', $data->postid);
+        $data->fromuserid = $this->get_mappingid('user', $data->fromuserid);
+
+        $newid = $DB->insert_record('format_socialwall_comments', $data);
+        $this->set_mapping('socialwallcomment', $oldid, $newid);
+    }
+
+    /**
+     * Process all the repliescomments ids.
+     * 
+     */
+    public function after_restore_course() {
+        global $DB;
+
+        $courseid = $this->task->get_courseid();
+
+        if (!$childcomments = $DB->get_records_select('format_socialwall_comments', " courseid = ? and replycommentid > 0", array($courseid))) {
+            return;
+        }
+
+        foreach ($childcomments as $comment) {
+
+            $comment->replycommentid = $this->get_mappingid('socialwallcomment', $comment->replycommentid);
+            $DB->update_record('format_socialwall_comments', $comment);
+
+        }
+
+    }
+
+    /**
+     * process restore of notification settings.
+     */
+    public function process_nfsetting($data) {
+        global $DB;
+
+        $data = (object) $data;
+        $data->courseid = $this->task->get_courseid();
+        $data->userid = $this->get_mappingid('user', $data->userid);
+
+        $DB->insert_record('format_socialwall_nfsettings', $data);
+    }
+
+    protected function define_module_plugin_structure() {
+
+        $paths = array();
+
+        $userinfo = $this->get_setting_value('users');
+
+        if ($userinfo) {
+
+            $elename = 'attachment';
+            $elepath = $this->get_pathfor('/attachments/attachment');
+            $paths[] = new restore_path_element($elename, $elepath);
+        }
+
+        return $paths; // And we return the interesting paths.
+    }
+
+    /**
+     * process restore of attachment information.
+     */
+    public function process_attachment($data) {
+        global $DB;
+
+        $data = (object) $data;
+        $data->courseid = $this->task->get_courseid();
+        $data->postid = $this->get_mappingid('socialwallpost', $data->postid);
+        $data->coursemoduleid = $this->task->get_moduleid();
+
+        $DB->insert_record('format_socialwall_attaches', $data);
+    }
+
+}
\ No newline at end of file
diff --git a/course/format/socialwall/classes/local/action_handler.php b/course/format/socialwall/classes/local/action_handler.php
new file mode 100644
index 0000000..038b174
--- /dev/null
+++ b/course/format/socialwall/classes/local/action_handler.php
@@ -0,0 +1,72 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format.  Display the whole course as "socialwall" made of modules.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\local;
+
+class action_handler {
+
+    public static function post_comment($course) {
+        global $CFG;
+
+        $postid = required_param('postid', PARAM_INT);
+        $replycommentid = required_param('replycommentid', PARAM_INT);
+
+        require_once($CFG->dirroot . '/course/format/socialwall/pages/comment_form.php');
+
+        $url = new \moodle_url('/course/format/socialwall/action.php');
+        $commentform = new \comment_form($url, array('postid' => $postid,
+            'id' => $course->id, 'replycommentid' => $replycommentid));
+
+        if ($data = $commentform->get_data()) {
+
+            // Suitable capability checks are made in save_post!
+            $comments = comments::instance();
+            return $comments->save_comment_from_submit($data, $course);
+        }
+        return false;
+    }
+
+    public static function delete_comment() {
+
+        $cid = required_param('cid', PARAM_INT);
+
+        $formatsociallwallcomments = comments::instance();
+        return $formatsociallwallcomments->delete_comment($cid);
+    }
+
+    public static function like_post($course) {
+
+        $likes = likes::instance($course);
+        // Suitable capability checks are made in save_likes_from_submit!
+        return $likes->save_likes_from_submit();
+    }
+
+    public static function lock_post($course) {
+
+        $posts = posts::instance($course->id);
+        // Suitable capability checks are made in save_posts_locked_from_submit!
+        return $posts->save_posts_locked_from_submit();
+    }
+
+}
diff --git a/course/format/socialwall/classes/local/attaches.php b/course/format/socialwall/classes/local/attaches.php
new file mode 100644
index 0000000..d353446
--- /dev/null
+++ b/course/format/socialwall/classes/local/attaches.php
@@ -0,0 +1,163 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\local;
+
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/lib/gradelib.php');
+
+/** This class manages the relationship between posts and attached modules. */
+class attaches {
+
+    protected $grades;
+
+    /** 
+     * Create instance as a singleton
+     */
+    public static function instance() {
+        static $attaches;
+
+        if (isset($attaches)) {
+            return $attaches;
+        }
+
+        $attaches = new attaches();
+        return $attaches;
+    }
+
+    /** 
+     * Add info about this users attaches to the postsdata object
+     * 
+     * @param object $postsdata
+     * @return boolean, true if succeded
+     */
+    public static function add_attaches_to_posts($courseid, &$postsdata) {
+        global $DB, $USER;
+
+        if (empty($postsdata->posts)) {
+            return false;
+        }
+
+        $posts = $postsdata->posts;
+
+        $params = array($USER->id);
+        list($inpoststr, $inparams) = $DB->get_in_or_equal(array_keys($posts));
+        $params = array_merge($params, $inparams);
+        $params[] = $courseid;
+
+        // ... fetch attaches an grade_items.
+        $sql = "SELECT at.id as atid, at.postid, at.coursemoduleid, gi.*
+                FROM {format_socialwall_attaches} at
+                JOIN {course_modules} cm ON cm.id = at.coursemoduleid
+                JOIN {modules} m ON m.id = cm.module
+                LEFT JOIN
+                    (SELECT gg.id, gri.iteminstance, gri.itemmodule, gri.itemtype
+                     FROM {grade_items} gri
+                     JOIN {grade_grades} gg ON (gg.itemid = gri.id AND userid = ?)) as
+                     gi ON (gi.itemmodule = m.name AND gi.iteminstance = cm.instance)
+                WHERE postid {$inpoststr} AND cm.course = ?";
+
+        if (!$attaches = $DB->get_records_sql($sql, $params)) {
+            return false;
+        }
+
+        foreach ($attaches as $attachment) {
+
+            if (!isset($postsdata->posts[$attachment->postid]->attaches)) {
+
+                $postsdata->posts[$attachment->postid]->attaches = array();
+                $postsdata->posts[$attachment->postid]->grades = array();
+            }
+
+            $postsdata->posts[$attachment->postid]->attaches[$attachment->atid] = $attachment;
+
+            if (!empty($attachment->iteminstance)) {
+                $gradedata = grade_get_grades(
+                        $courseid, $attachment->itemtype, $attachment->itemmodule, $attachment->iteminstance, $USER->id
+                );
+
+                // Add author of grades, to retrieve complete user record later.
+                if (!empty($gradedata->outcomes[0]->grades[$USER->id])) {
+
+                    $usermodified = $gradedata->outcomes[0]->grades[$USER->id]->usermodified;
+
+                    $postsdata->authors[$usermodified] = $usermodified;
+                    $postsdata->posts[$attachment->postid]->grades[$attachment->coursemoduleid] = $gradedata->outcomes[0];
+                }
+                if (!empty($gradedata->items[0]->grades[$USER->id])) {
+
+                    $usermodified = $gradedata->items[0]->grades[$USER->id]->usermodified;
+
+                    $postsdata->authors[$usermodified] = $usermodified;
+                    $postsdata->posts[$attachment->postid]->grades[$attachment->coursemoduleid] = $gradedata->items[0];
+                }
+            }
+        }
+
+        return true;
+    }
+
+    /** 
+     * Save coursemoduleids attached to a post
+     * 
+     * @return array, result array.
+     */
+    public static function save_attaches($postid, $cmsequence) {
+        global $DB;
+
+        // Delete all existing attachments.
+        $DB->delete_records('format_socialwall_attaches', array('postid' => $postid));
+
+        if (empty($cmsequence)) {
+            return array('error' => '0', 'message' => 'attachessaved');
+        }
+
+        $cmids = explode(',', $cmsequence);
+
+        if (empty($cmids)) {
+            return array('error' => '0', 'message' => 'attachessaved');
+        }
+
+        foreach ($cmids as $cmid) {
+            $attachment = new \stdClass();
+            $attachment->postid = $postid;
+            $attachment->coursemoduleid = $cmid;
+            $attachment->sortorder = 0;
+            $DB->insert_record('format_socialwall_attaches', $attachment);
+        }
+        return array('error' => '0', 'message' => 'attachessaved');
+    }
+
+    /** 
+     * Delete all the information about the attached modules for a coursemodule
+     * 
+     * @param int $cmid the id of the course module.
+     */
+    public static function cleanup_coursemoduledeleted($cmid) {
+        global $DB;
+
+        $DB->delete_records('format_socialwall_attaches', array('coursemoduleid' => $cmid));
+    }
+
+}
\ No newline at end of file
diff --git a/course/format/socialwall/classes/local/comments.php b/course/format/socialwall/classes/local/comments.php
new file mode 100644
index 0000000..d6275e1
--- /dev/null
+++ b/course/format/socialwall/classes/local/comments.php
@@ -0,0 +1,313 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\local;
+
+/** class for timeline comments */
+class comments {
+
+    /** 
+     * Create instance as a singleton
+     */
+    public static function instance() {
+        static $comments;
+
+        if (isset($comments)) {
+            return $comments;
+        }
+
+        $comments = new comments();
+        return $comments;
+    }
+
+    /** 
+     * Add all comments and add more authors to postsdata record
+     * 
+     * @param object $postsdata
+     * @return boolean, true, if succeded
+     */
+    public static function add_comments_to_posts(&$postsdata,
+                                                 $limitcomments = 0,
+                                                 $limitreplies = 0) {
+        global $DB;
+
+        if (empty($postsdata->posts)) {
+            return false;
+        }
+
+        $posts = $postsdata->posts;
+
+        list($inpostid, $inpostparams) = $DB->get_in_or_equal(array_keys($posts));
+
+        $sql = "SELECT * FROM {format_socialwall_comments} WHERE postid {$inpostid} AND replycommentid = '0' ORDER BY timecreated DESC";
+
+        if (!$comments = $DB->get_records_sql($sql, $inpostparams)) {
+            return false;
+        }
+
+        $parentcommentids = array();
+        foreach ($comments as $comment) {
+
+            if (!isset($postsdata->posts[$comment->postid]->comments)) {
+
+                $postsdata->posts[$comment->postid]->comments = array();
+            }
+
+            if (!empty($limitcomments) and ( count($postsdata->posts[$comment->postid]->comments) == $limitcomments)) {
+                continue;
+            }
+            $postsdata->posts[$comment->postid]->comments[$comment->id] = $comment;
+            $postsdata->authors[$comment->fromuserid] = $comment->fromuserid;
+
+            $parentcommentids[$comment->id] = $comment->id;
+        }
+
+        if (empty($parentcommentids)) {
+            return true;
+        }
+
+        // Add replies to comments.
+        if (!$replies = $DB->get_records_list('format_socialwall_comments', 'replycommentid', array_keys($parentcommentids), 'timecreated DESC')) {
+            return true;
+        }
+
+        foreach ($replies as $reply) {
+
+            $comment = $postsdata->posts[$reply->postid]->comments[$reply->replycommentid];
+
+            if (!isset($postsdata->posts[$comment->postid]->comments[$comment->id]->replies)) {
+
+                $postsdata->posts[$comment->postid]->comments[$comment->id]->replies = array();
+            }
+
+            if (!empty($limitreplies) and ( count($postsdata->posts[$comment->postid]->comments[$comment->id]->replies) == $limitreplies)) {
+                continue;
+            }
+
+            $postsdata->posts[$comment->postid]->comments[$comment->id]->replies[$reply->id] = $reply;
+            $postsdata->authors[$comment->fromuserid] = $reply->fromuserid;
+        }
+
+        return true;
+    }
+
+    /**
+     * Get all the data for displaying all replies of one comment
+     * 
+     * @return \stdClass object containing autors and comment of a post.
+     */
+    public function get_replies_data($comment) {
+        global $DB;
+
+        $repliesdata = new \stdClass();
+        $repliesdata->comment = $comment;
+
+        // Add replies to comment.
+        if (!$replies = $DB->get_records('format_socialwall_comments', array('replycommentid' => $comment->id), 'timecreated DESC')) {
+            return $repliesdata;
+        }
+
+        $repliesdata->comment->replies = $replies;
+
+        // Gather authors.
+        $autorids = array($comment->fromid);
+        foreach ($replies as $reply) {
+            $autorids[] = $reply->fromuserid;
+        }
+
+        // ... finally gather all the required userdata for authors.
+        if (!$repliesdata->authors = $DB->get_records_list('user', 'id', $autorids)) {
+            debugging('error while retrieving post authors');
+        }
+
+        return $repliesdata;
+    }
+
+    /**
+     * Get all the data for displaying comments of a post
+     * 
+     * @param int $postid
+     * @return \stdClass object containing autors and comment of a post.
+     */
+    public function get_comments_data($postid, $limitcomments = 0, $limitreplies = 0) {
+        global $DB;
+
+        $postsdata = new \stdClass();
+
+        if (!$postsdata->posts = $DB->get_records('format_socialwall_posts', array('id' => $postid))) {
+            return $postsdata->posts = array();
+        }
+
+        $postsdata->authors = array();
+
+        // ...fetch comments and add them to $postdata.
+        $this->add_comments_to_posts($postsdata, $limitcomments, $limitreplies);
+
+        if (empty($postsdata->authors)) {
+            return $postdata;
+        }
+
+        // ... finally gather all the required userdata for authors.
+        list($inuserids, $params) = $DB->get_in_or_equal(array_keys($postsdata->authors));
+        $sql = "SELECT * FROM {user} WHERE id {$inuserids}";
+
+        if (!$users = $DB->get_records_sql($sql, $params)) {
+            debugging('error while retrieving post authors');
+        }
+
+        $postsdata->authors = $users;
+
+        return $postsdata;
+    }
+
+    /**
+     * Refresh the count of replies for a comment.
+     *  
+     * @param int $commentid
+     * @return boolean|object false if no refresh, updated comment data
+     */
+    private function refresh_replies_count($commentid) {
+        global $DB;
+
+        if ($comment = $DB->get_record('format_socialwall_comments', array('id' => $commentid))) {
+
+            $comment->countreplies = $DB->count_records('format_socialwall_comments', array('replycommentid' => $commentid));
+            $comment->timemodified = time();
+
+            $DB->update_record('format_socialwall_comments', $comment);
+            return $comment;
+        }
+        return false;
+    }
+
+    /** 
+     * Save a new comment from submit
+     * 
+     * @param object $comment submitted data from form.
+     * @return array result array to use for ajax and non ajax request.
+     */
+    public function save_comment_from_submit($comment, $course) {
+        global $USER, $DB;
+
+        // Ensure that post exists and get the right courseid.
+        if (!$post = $DB->get_record('format_socialwall_posts', array('id' => $comment->postid))) {
+            print_error('invalidpostid', 'format_socialwall');
+        }
+
+        // ... if post is locked or user has no cap to save, don't save the comment.
+        $coursecontext = \context_course::instance($post->courseid);
+        if (!has_capability('format/socialwall:writecomment', $coursecontext)) {
+            print_error('missingcapwritecomment', 'format_socialwall');
+        }
+
+        $comment->courseid = $post->courseid;
+        $comment->fromuserid = $USER->id;
+        $comment->timecreated = time();
+        $comment->timemodified = $comment->timecreated;
+
+        // ... check if post is locked.
+        if ($post->locked != 0) {
+            print_error('postislocked', 'format_socialwall');
+        }
+
+        // ...insert comment.
+        if (!$comment->id = $DB->insert_record('format_socialwall_comments', $comment)) {
+            print_error('commentsaveerror', 'format_socialwall');
+        }
+
+        $result = array(
+            'error' => '0', 'message' => 'commentsaved',
+            'commentid' => $comment->id, 'postid' => $comment->postid, 'replycommentid' => $comment->replycommentid,
+            'countlikes' => 0, 'countcomments' => 0
+        );
+
+        $posts = posts::instance($comment->courseid);
+
+        if ($post = $posts->refresh_comments_count($comment->postid)) {
+            $result['countlikes'] = $post->countlikes;
+            $result['countcomments'] = $post->countcomments;
+        }
+
+        // If this new comment is a reply update the countreplies attribute.
+        if ($comment->replycommentid > 0) {
+            $result['countreplies'] = $this->refresh_replies_count($comment->replycommentid);
+        }
+
+        // We use a instant enqueueing, if needed you might use events here.
+        notification::enqueue_comment_created($comment);
+
+        return $result;
+    }
+
+    /** 
+     * Delete comment and refresh the number of comments in post table
+     * 
+     * @param int $cid, id of comment.
+     * @return array result
+     */
+    public function delete_comment($cid) {
+        global $DB, $USER;
+
+        // ... get post for refreshing counts after delete.
+        if (!$comment = $DB->get_record('format_socialwall_comments', array('id' => $cid))) {
+            print_error('commentidinvalid', 'format_socialwall');
+        }
+
+        // ...check capability.
+        $coursecontext = \context_course::instance($comment->courseid);
+
+        $candeletecomment = (($comment->fromuserid == $USER->id) and ( has_capability('format/socialwall:deleteowncomment', $coursecontext)));
+        $candeletecomment = ($candeletecomment or has_capability('format/socialwall:deleteanycomment', $coursecontext));
+
+        if (!$candeletecomment) {
+            print_error('missingcapdeletecomment', 'format_socialwall');
+        }
+
+        // ... delete comment.
+        $DB->delete_records('format_socialwall_comments', array('id' => $cid));
+
+        // ... delete all the enqueued notifications.
+        $DB->delete_records_select('format_socialwall_nfqueue', "module = 'comment' and details = ?", array($cid));
+
+        $result = array(
+            'error' => '0', 'message' => 'commentdeleted',
+            'commentid' => $cid, 'postid' => $comment->postid,
+            'countlikes' => 0, 'countcomments' => 0
+        );
+
+        $posts = posts::instance($comment->courseid);
+
+        if ($post = $posts->refresh_comments_count($comment->postid)) {
+            $result['countlikes'] = $post->countlikes;
+            $result['countcomments'] = $post->countcomments;
+        }
+
+        // If this new comment is a reply update the countreplies attribute.
+        if ($comment->replycommentid > 0) {
+            $result['countreplies'] = $this->refresh_replies_count($comment->replycommentid);
+        }
+
+        return $result;
+    }
+
+}
diff --git a/course/format/socialwall/classes/local/likes.php b/course/format/socialwall/classes/local/likes.php
new file mode 100644
index 0000000..73e5535
--- /dev/null
+++ b/course/format/socialwall/classes/local/likes.php
@@ -0,0 +1,157 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\local;
+
+class likes {
+
+    // ... course record with theme settings.
+    protected $course;
+
+    protected function __construct($course) {
+        $this->course = $course;
+    }
+
+    /** create instance as a singleton */
+    public static function instance($course) {
+        static $likes;
+
+        if (isset($likes)) {
+            return $likes;
+        }
+
+        $likes = new likes($course);
+        return $likes;
+    }
+
+    /** add info about this users likes to the postsdata object
+     * 
+     * @global object $DB
+     * @global record $USER
+     * @param record $postsdata
+     * @return boolean, true if succeded
+     */
+    public function add_likes_to_posts(&$postsdata) {
+        global $DB, $USER;
+
+        if (empty($this->course->enablelikes)) {
+            return false;
+        }
+
+        if (empty($postsdata->posts)) {
+            return false;
+        }
+
+        $posts = $postsdata->posts;
+
+        list($inpoststr, $params) = $DB->get_in_or_equal(array_keys($posts));
+        $params[] = $USER->id;
+
+        $sql = "SELECT postid FROM {format_socialwall_likes}
+                WHERE postid {$inpoststr} AND fromuserid = ?";
+
+        if (!$likes = $DB->get_records_sql($sql, $params)) {
+            return false;
+        }
+
+        foreach ($postsdata->posts as &$post) {
+
+            if (isset($likes[$post->id])) {
+                $post->userlike = 1;
+            } else {
+                $post->userlike = 0;
+            }
+        }
+
+        return true;
+    }
+
+    /** save a new comment from submit
+     * 
+     * @global record $USER
+     * @global object $DB
+     * @return array, result array.
+     */
+    public function save_likes_from_submit() {
+        global $USER, $DB;
+
+        if (empty($this->course->enablelikes)) {
+            print_error('likesaredisabled' , 'format_socialwall');
+        }
+
+        // Ensure that post exists and get the right courseid.
+        $postid = required_param('postid', PARAM_INT);
+        if (!$post = $DB->get_record('format_socialwall_posts', array('id' => $postid))) {
+            print_error('invalidpostid', 'format_socialwall');
+        }
+
+        $userlike = optional_param('userlike', '0', PARAM_INT);
+
+        // ... check capability.
+        $coursecontext = \context_course::instance($post->courseid);
+        if (!has_capability('format/socialwall:like', $coursecontext)) {
+            print_error('missingcaplikepost', 'format_socialwall');
+        }
+
+        $refresh = false;
+        if (empty($userlike)) {
+
+            if ($like = $DB->get_records('format_socialwall_likes', array('postid' => $postid, 'fromuserid' => $USER->id))) {
+
+                $DB->delete_records_select('format_socialwall_likes', 'fromuserid = ? AND postid = ?', array($USER->id, $postid));
+                $refresh = true;
+
+                // We use a instant enqueueing, if needed you might use events here.
+                notification::enqueue_like_deleted($post);
+            }
+        } else {
+
+            if (!$like = $DB->get_records('format_socialwall_likes', array('postid' => $postid, 'fromuserid' => $USER->id))) {
+
+                $newlike = new \stdClass();
+                $newlike->courseid = $this->course->id;
+                $newlike->postid = $postid;
+                $newlike->fromuserid = $USER->id;
+                $newlike->timecreated = time();
+
+                $DB->insert_record('format_socialwall_likes', $newlike);
+                $refresh = true;
+
+                notification::enqueue_like_created($post);
+            }
+        }
+
+        $result = array(
+            'error' => '0', 'message' => 'likesaved',
+            'postid' => $postid, 'userlike' => $userlike,
+            'countcomments' => $post->countcomments, 'countlikes' => $post->countlikes);
+
+        if ($refresh) {
+            $posts = posts::instance($this->course->id);
+            $result['countlikes'] = $posts->refresh_likes_count($postid);
+        }
+
+        return $result;
+    }
+
+}
\ No newline at end of file
diff --git a/course/format/socialwall/classes/local/notification.php b/course/format/socialwall/classes/local/notification.php
new file mode 100644
index 0000000..3a490aa
--- /dev/null
+++ b/course/format/socialwall/classes/local/notification.php
@@ -0,0 +1,770 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\local;
+
+define('SOCIALWALL_NOTIFICATION_NO', 0);
+define('SOCIALWALL_NOTIFICATION_INSTANT', 1);
+define('SOCIALWALL_NOTIFICATION_DIGEST', 2);
+
+define('NOTIFICATION_PENDING', 0);
+define('NOTIFICATION_DONE', 1);
+
+define('DEBUG_MESSAGE', 0);
+
+/**
+ * 1- Notification uses intentionally an internal queue, so notification will be
+ * independent from logging setting and would work even if log data wouldn't be stored.
+ * 
+ * 2- In a first approach Notification uses a instant (direct function call) event
+ * handling. This can be easily changed to hook into events api, if you are 
+ * interested in logging this events.
+ * 
+ * 3- events list:
+ * postcreated
+ * postlocked/postunlocked
+ * commentcreated
+ * likedeleted
+ * likecreated
+ */
+class notification {
+
+    protected $courses = array();
+    protected $notificationsplaintext = array();
+    protected $users = array();
+    public static $NOTIFICATION_TYPE = array(
+        SOCIALWALL_NOTIFICATION_NO => 'notificationoff',
+        SOCIALWALL_NOTIFICATION_INSTANT => 'notificationperpost',
+        SOCIALWALL_NOTIFICATION_DIGEST => 'notificationdigest');
+
+    /** create instance as a singleton */
+    public static function instance() {
+        static $notification;
+
+        if (isset($notification)) {
+            return $notification;
+        }
+
+        $notification = new notification();
+        return $notification;
+    }
+
+    /** write a record into database for later messaging via message provider "timelineposts"
+     *  recipientid = 0 means, this message is sent to all participiants of the course, 
+     *  which have sufficient capabilities to receive it.
+     * 
+     * @global object $DB
+     * @global object $USER
+     * @param record $post
+     * @return boolean
+     */
+    public static function enqueue_post_created($post) {
+        global $DB, $USER;
+
+        $course = course_get_format($post->courseid)->get_course();
+        if (empty($course->enablenotification)) {
+            return false;
+        }
+
+        $eventdata = new \stdClass();
+        $eventdata->creatorid = $USER->id;
+        $eventdata->courseid = $post->courseid;
+        $eventdata->recipientid = 0; // Post to all.
+        $eventdata->postid = $post->id;
+        $eventdata->module = 'post';
+        $eventdata->action = 'created';
+        $eventdata->details = $post->id;
+        $eventdata->time = time();
+        $DB->insert_record('format_socialwall_nfqueue', $eventdata);
+        return true;
+    }
+
+    /** write a record into database for later messaging via message provider "timelineposts"
+     *  recipientid = 0 means, this message is sent to all participiants of the course, 
+     *  which have sufficient capabilities to receive it.
+     * 
+     * @global object $DB
+     * @global object $USER
+     * @param record $post
+     * @return boolean
+     */
+    public static function enqueue_post_locked($post) {
+        global $DB, $USER;
+
+        $course = course_get_format($post->courseid)->get_course();
+        if (empty($course->enablenotification)) {
+            return false;
+        }
+
+        $eventdata = new \stdClass();
+        $eventdata->creatorid = $USER->id;
+        $eventdata->courseid = $post->courseid;
+        $eventdata->recipientid = 0; // Post to all.
+        $eventdata->postid = $post->id;
+        $eventdata->module = 'post';
+        if ($post->locked) {
+            $eventdata->action = 'locked';
+        } else {
+            $eventdata->action = 'unlocked';
+        }
+        $eventdata->details = $post->id;
+        $eventdata->time = time();
+        $DB->insert_record('format_socialwall_nfqueue', $eventdata);
+        return true;
+    }
+
+    /** write a record into database for later messaging via message provider "timelineposts"
+     *  recipientid = 0 means, this message is sent to all participiants of the course, 
+     *  which have sufficient capabilities to receive it.
+     * 
+     * @global object $DB
+     * @global object $USER
+     * @param record $post
+     * @return boolean
+     */
+    public static function enqueue_comment_created($comment) {
+        global $DB, $USER;
+
+        $course = course_get_format($comment->courseid)->get_course();
+        if (empty($course->enablenotification)) {
+            return false;
+        }
+
+        $eventdata = new \stdClass();
+        $eventdata->creatorid = $USER->id;
+        $eventdata->courseid = $comment->courseid;
+        $eventdata->recipientid = 0; // Post to all.
+        $eventdata->postid = $comment->postid;
+        $eventdata->module = 'comment';
+        $eventdata->action = 'created';
+        $eventdata->details = $comment->id;
+        $eventdata->time = time();
+        $DB->insert_record('format_socialwall_nfqueue', $eventdata);
+
+        return true;
+    }
+
+    /** write a record into database for later messaging via message provider "timelineposts"
+     *  recipientid = 0 means, this message is sent to all participiants of the course, 
+     *  which have sufficient capabilities to receive it.
+     * 
+     * @global object $DB
+     * @global object $USER
+     * @param record $post
+     * @return boolean
+     */
+    public static function enqueue_like_created($post) {
+        global $DB, $USER;
+
+        $course = course_get_format($post->courseid)->get_course();
+        if (empty($course->enablenotification) or empty($course->enablelikes)) {
+            return false;
+        }
+
+        $eventdata = new \stdClass();
+        $eventdata->creatorid = $USER->id;
+        $eventdata->courseid = $post->courseid;
+        $eventdata->recipientid = 0; // Post to all.
+        $eventdata->postid = $post->id;
+        $eventdata->module = 'like';
+        $eventdata->action = 'created';
+        $eventdata->details = $post->id;
+        $eventdata->time = time();
+        $DB->insert_record('format_socialwall_nfqueue', $eventdata);
+    }
+
+    /** write a record into database for later messaging via message provider "timelineposts"
+     *  recipientid = 0 means, this message is sent to all participiants of the course, 
+     *  which have sufficient capabilities to receive it.
+     * 
+     * @global object $DB
+     * @global object $USER
+     * @param record $post
+     * @return boolean
+     */
+    public static function enqueue_like_deleted($post) {
+        global $DB, $USER;
+
+        $course = course_get_format($post->courseid)->get_course();
+        if (empty($course->enablenotification) or empty($course->enablelikes)) {
+            return false;
+        }
+
+        $eventdata = new \stdClass();
+        $eventdata->creatorid = $USER->id;
+        $eventdata->courseid = $post->courseid;
+        $eventdata->recipientid = 0; // Post to all.
+        $eventdata->postid = $post->id;
+        $eventdata->module = 'like';
+        $eventdata->action = 'deleted';
+        $eventdata->details = $post->id;
+        $eventdata->time = time();
+        $DB->insert_record('format_socialwall_nfqueue', $eventdata);
+        return true;
+    }
+
+    /** get enqueued notifications for all users 
+     * 
+     * @global object $DB
+     * @param int $starttime, begin of period to retrieve notifications
+     * @param int $endtime,  end of period to retrieve notifications
+     * @return array of notification with data from relating post.
+     */
+    protected static function get_enqueued_notifications($starttime, $endtime) {
+        global $DB;
+
+        $sql = "SELECT q.*, p.posttext, p.private, p.togroupid
+                FROM {format_socialwall_nfqueue} q
+                JOIN {format_socialwall_posts} p ON p.id = q.postid
+                WHERE time >= ? AND time < ? AND recipientid = '0'";
+
+        if (!$notifications = $DB->get_records_sql($sql, array($starttime, $endtime))) {
+            return array();
+        }
+
+        return $notifications;
+    }
+
+    /** print out all users for debuggin purposes
+     * 
+     * @param type $users
+     */
+    protected function print_user($users) {
+        foreach ($users as $user) {
+            echo fullname($user) . "<br >";
+        }
+    }
+
+    /** get all the users, which are able to receive the given notification (includes
+     * checking some capabilities). 
+     * 
+     * @param type $notification
+     * @param type $course
+     * @param type $context
+     * @return array, list of recipients of notification
+     */
+    protected function get_users_to_notify($notification, $course, $context) {
+
+        $groupid = $notification->togroupid;
+
+        // If post is visible for a specail group, check groupmode.
+        if ($groupid != 0) {
+
+            $groupmode = groups_get_course_groupmode($course);
+
+            if ($groupmode != SEPARATEGROUPS) {
+
+                $groupid = 0;
+            }
+        }
+
+        $capability = array();
+        if ($notification->private == 1) {
+            $capability[] = 'format/socialwall:viewprivate';
+        }
+
+        if ($notification->module == 'like') {
+            $capability[] = 'format/socialwall:viewlikes';
+        }
+
+        // ... regarding perfomance we do different retrieve of users.
+        // ... no cap optional group.
+        if (empty($capability)) {
+
+            if (!$users = get_enrolled_users($context, '', $groupid)) {
+                $users = array();
+            }
+
+            // Add users with group access, if groups are separated and a group is
+            // specified.
+            if ($groupid != 0) {
+                if ($canseegroups = get_enrolled_users($context, 'moodle/course:managegroups')) {
+                    $users = array_merge($users, $canseegroups);
+                }
+            }
+
+            if (DEBUG_MESSAGE == 1) {
+                echo ("<p><b>--- no cap, group: {$groupid}</b></p>");
+                // ...print_object($notification).
+                echo ('<br>Users:<br>');
+                $this->print_user($users);
+            }
+            return $users;
+            // ... one cap, no groups.
+        } else if ((count($capability) == 1) and ($groupid == 0)) {
+
+            if (!$users = get_enrolled_users($context, $capability[0])) {
+                $users = array();
+            }
+
+            if (DEBUG_MESSAGE == 1) {
+                echo ("<p><b>--- one cap {$capability[0]}, group: {$groupid}</b></p>");
+                // ...print_object($notification).
+                echo ('<br>Users:<br>');
+                $this->print_user($users);
+            }
+            return $users;
+            // ...more the one cap and group.
+        } else {
+            $groups = ($groupid == 0) ? '' : $groupid;
+
+            if (!$users = get_users_by_capability($context, $capability, 'u.*', '', '', '', $groups, '', null, null, true)) {
+                return array();
+            }
+
+            if (DEBUG_MESSAGE == 1) {
+                echo ("<p><b>--- cap " . implode(", ", $capability) . ", group: {$groupid}</b></p>");
+                // ...print_object($notification).
+                echo ('<br>Users:<br>');
+                $this->print_user($users);
+            }
+            return $users;
+        }
+
+        return array();
+    }
+
+    /** get and cache the course 
+     * 
+     * @global object $DB
+     * @param int $courseid, the courseid
+     * @return record
+     */
+    protected function get_course($courseid) {
+        global $DB;
+
+        if (isset($this->courses[$courseid])) {
+            return $this->courses[$courseid];
+        }
+
+        $this->courses[$courseid] = $DB->get_record('course', array('id' => $courseid));
+        return $this->courses[$courseid];
+    }
+
+    protected function get_user($userid) {
+        global $DB;
+
+        if (isset($this->users[$userid])) {
+            return $this->users[$userid];
+        }
+
+        $this->users[$userid] = $DB->get_record('user', array('id' => $userid));
+
+        return $this->users[$userid];
+    }
+
+    /** add notification settings to the given user records
+     * 
+     * @param array $users, array of user records.
+     * @param int $courseid, courseid
+     * @return int
+     */
+    protected function add_users_notificationsetting(&$users, $courseid) {
+
+        $settings = $this->get_notification_settings($courseid);
+
+        $counts = array();
+        $counts[SOCIALWALL_NOTIFICATION_INSTANT] = 0;
+        $counts[SOCIALWALL_NOTIFICATION_DIGEST] = 0;
+
+        foreach ($users as &$user) {
+
+            if (!empty($settings[$user->id])) {
+
+                $user->enablenotification = $settings[$user->id];
+                $counts[$settings[$user->id]]++;
+            } else {
+                $user->enablenotification = 0;
+            }
+        }
+
+        return $counts[SOCIALWALL_NOTIFICATION_INSTANT];
+    }
+
+    protected function get_notifications_plaintext($notification) {
+        global $DB;
+
+        if (isset($this->notificationsplaintext[$notification->id][$notification->details])) {
+            return $this->notificationsplaintext[$notification->id][$notification->details];
+        }
+
+        // ... get user, hopefully from cache.
+        $creator = $this->get_user($notification->creatorid);
+
+        $a = new \stdClass();
+
+        $a->creator = fullname($creator);
+        $a->posttext = $notification->posttext;
+
+        // If comments then get comments text.
+        if ($notification->module == 'comment') {
+            $comment = $DB->get_record('format_socialwall_comments', array('id' => $notification->details));
+            $a->commenttext = $comment->text;
+        }
+
+        $langkeymessage = 'nf_' . $notification->module . '_' . $notification->action;
+
+        if (!isset($this->notificationsplaintext[$notification->id])) {
+            $this->notificationsplaintext[$notification->id] = array();
+        }
+
+        $this->notificationsplaintext[$notification->id][$notification->details] =
+                get_string($langkeymessage, 'format_socialwall', $a);
+
+        return $this->notificationsplaintext[$notification->id][$notification->details];
+    }
+
+    /** create a message using notification record
+     * 
+     * @global object $DB
+     * @param record $notification
+     * @param record $course
+     * @return object, eventdata for the message.
+     */
+    protected function create_message($notification, $course) {
+        global $DB;
+
+        $eventdata = new \object();
+        // The component sending the message.
+        // Along with name this must exist in the table message_providers.
+        $eventdata->component = 'format_socialwall';
+        // Type of message from that module (as module defines it).
+        // Along with component this must exist in the table message_providers.
+        $eventdata->name = 'timelineposts';
+        // ...user object.
+        $eventdata->userfrom = get_admin();
+        // ...very short one-line subject.
+        $eventdata->subject = get_string('notificationfromcourse', 'format_socialwall', $course->shortname);
+
+        $url = new \moodle_url('/course/view.php', array('id' => $notification->courseid));
+
+        $messagecontent = $this->get_notifications_plaintext($notification);
+        $eventdata->fullmessage = $messagecontent . ', ' . $url->out();
+
+        $eventdata->fullmessageformat = FORMAT_PLAIN;   // Text format.
+        $courselink = \html_writer::link($url, get_string('nf_gotocourse', 'format_socialwall'));
+        $eventdata->fullmessagehtml = $messagecontent . ', ' . $courselink;
+
+        // ...useful for plugins like sms or twitter.
+        $eventdata->smallmessage = '';
+        return $eventdata;
+    }
+
+    /** postpone the notification for digest message
+     * 
+     * @global object $DB
+     * @param record $notification
+     * @param record $touser
+     */
+    protected function postpone_notification($notification, $touser) {
+        global $DB;
+
+        // Check if it is already there?
+
+        $notification->recipientid = $touser->id;
+        $DB->insert_record('format_socialwall_nfqueue', $notification);
+    }
+
+    /** cron processing of instant notifications, it is recommended to call this method a cron every 60s.
+     *  
+     *  The Method will do:
+     * 
+     *  1- get all the notifications with recipientid == 0 (which means message is dedicated for all users in course)
+     *  2- get all users which can receive the message (regrading capabilities and gorups)
+     *  3- send out an instant message, postpone for digest or don't send message depending on users notification settings.
+     * 
+     * Note that checking cap and group is done for postponed notification (notifications with recipientid != 0), 
+     * so in digest_cron(), we didn't have to check it on more time. :)
+     * 
+     * @global type $CFG
+     * @global object $DB
+     */
+    public function instant_cron() {
+        global $CFG, $DB;
+
+        require_once($CFG->dirroot . '/lib/accesslib.php');
+        $config = get_config('format_socialwall');
+
+        // Posts older than 2 days will not be mailed. This is to avoid the problem where
+        // cron has not been running for a long time, and then suddenly people are flooded
+        // with mail from the past few weeks or months.
+        $timenow = time();
+        $starttime = (isset($config->lastinstantcron)) ? $config->lastinstantcron : 0;
+        $starttime = max($starttime, $timenow - 48 * 3600);   // Two days earlier.
+        // Get all the notifications with dat from post since starttime until start of cron.
+        $notifications = $this->get_enqueued_notifications($starttime, $timenow);
+
+        foreach ($notifications as $notification) {
+
+            // It's unlikely but possible there
+            // might be an error later so that a post notification is NOT actually send out,
+            // but since mail isn't crucial, we can accept this risk.  Doing it now
+            // prevents the risk of duplicated notification, which is a worse problem.
+            $DB->delete_records_select('format_socialwall_nfqueue', 'id = ?', array($notification->id));
+            // Course theme settings must not be checked, because notification
+            // would not be queued, when enablenotification is off in theme settings.
+            if (!$course = $this->get_course($notification->courseid)) {
+                mtrace('Invalid course with id: ' . $notification->courseid);
+                continue;
+            }
+
+            // ...check existing context.
+            if (!$context = \context_course::instance($notification->courseid)) {
+                mtrace('Invalid Context for course with id: ' . $notification->courseid);
+                continue;
+            };
+
+            // ...get all the users (including notification settings) which
+            // should be notificated regarding groups, notification type and needed capability.
+            $userstonotificate = $this->get_users_to_notify($notification, $course, $context);
+            if (empty($userstonotificate)) {
+                mtrace('No users found in course with id: ' . $notification->courseid);
+                continue;
+            };
+
+            // ... get num of instant notes.
+            $countinstantnotes = $this->add_users_notificationsetting($userstonotificate, $notification->courseid);
+
+            $eventdata = new \stdClass();
+
+            // ...prepare message, if at lest one message is send.
+            if ($countinstantnotes > 0) {
+                $eventdata = $this->create_message($notification, $course);
+            }
+
+            $sentcount = 0;
+            $failedsent = 0;
+            $postponed = 0;
+
+            // With each user to notificate do notification or postpone to digest.
+            foreach ($userstonotificate as $user) {
+
+                // ...terminate if processing of any account takes longer than 2 minutes.
+                \core_php_time_limit::raise(120);
+
+                // ... if user want's digest, create a digest queue entry.
+                if ($user->enablenotification == SOCIALWALL_NOTIFICATION_INSTANT) {
+
+                    $eventdata->userto = $user;
+                    if (!message_send($eventdata)) {
+
+                        $failedsent++;
+                    } else {
+
+                        $sentcount++;
+                    }
+                } else {
+                    if ($user->enablenotification == SOCIALWALL_NOTIFICATION_DIGEST) {
+                        $postponed++;
+                        $this->postpone_notification($notification, $user);
+                    }
+                }
+            }
+            $statstr = "(sent: $sentcount, failed: $failedsent, postponed: $postponed)";
+            mtrace('Notification processed: ' . $notification->module . ' ' . $notification->action . $statstr);
+            unset($userstonotificate);
+        }
+
+        // Release some memory.
+        unset($notifications);
+        // ...set successfully cron time.
+
+        set_config('lastinstantcron', $timenow, 'format_socialwall');
+        mtrace('format_socialwall instant_cron succesfully finished.');
+    }
+
+    protected function get_enqueued_digest_notes($starttime, $endtime) {
+        global $DB;
+
+        $sql = "SELECT q.*, p.posttext, p.private, p.togroupid
+                FROM {format_socialwall_nfqueue} q
+                JOIN {format_socialwall_posts} p ON p.id = q.postid
+                WHERE time >= ? AND time < ? AND recipientid <> '0'";
+
+        if (!$notifications = $DB->get_records_sql($sql, array($starttime, $endtime))) {
+            return array();
+        }
+
+        // ... group by recipientid, courseid.
+        $groupednotifications = array();
+        foreach ($notifications as $notification) {
+
+            if (!isset($groupednotifications[$notification->recipientid])) {
+                $groupednotifications[$notification->recipientid] = array();
+            }
+
+            if (!isset($groupednotifications[$notification->recipientid][$notification->courseid])) {
+                $groupednotifications[$notification->recipientid][$notification->courseid] = array();
+            }
+            $groupednotifications[$notification->recipientid][$notification->courseid][$notification->id] = $notification;
+        }
+
+        return $groupednotifications;
+    }
+
+    /** process the digest notifications, this is normally done one time per day.
+     *  if you have many notifications, it would be possible to:
+     * 
+     *  1- schedule in night time.
+     *  2- to reduce max processed notifications and do cron more times per day.
+     * 
+     */
+    public function digest_cron() {
+        global $CFG, $DB;
+
+        require_once($CFG->dirroot . '/lib/accesslib.php');
+        $config = get_config('format_socialwall');
+
+        // Posts older than 2 days will not be mailed. This is to avoid the problem where
+        // cron has not been running for a long time, and then suddenly people are flooded
+        // with mail from the past few weeks or months.
+        $timenow = time();
+        $starttime = (isset($config->lastdigestcron)) ? $config->lastdigestcron : 0;
+        $starttime = max($starttime, $timenow - 48 * 3600);   // Two days earlier as limit
+        // get all the notifications with dat from post since starttime until start of cron.
+        $starttime = 0;
+        $groupednotifications = $this->get_enqueued_digest_notes($starttime, $timenow);
+
+        $countdigests = 0;
+        $counterrors = 0;
+
+        // ... building up notifications text.
+        foreach ($groupednotifications as $userid => $usersnotifications) {
+
+            // Terminate if processing of any account takes longer than 2 minutes.
+            \core_php_time_limit::raise(120);
+
+            $digesttexthtml = '';
+            foreach ($usersnotifications as $courseid => $coursenotifications) {
+
+                $digesttexthtml = '<p> ----------------------------------- </p>';
+
+                foreach ($coursenotifications as $notification) {
+
+                    $plainmessage = $this->get_notifications_plaintext($notification);
+
+                    // ... building up html text.
+                    $digesttexthtml .= '<p>' . $plainmessage . '</p>';
+                }
+
+                $url = new \moodle_url('/course/view.php', array('id' => $notification->courseid));
+                $digesttexthtml .= '<br>' . \html_writer::link($url, get_string('nf_gotocourse', 'format_socialwall'));
+            }
+
+            // Create message, delete related notifications from queue and send out the digest
+            // to this user.
+            $eventdata = new \object();
+            // The component sending the message. Along with name this must exist in the table message_providers.
+            $eventdata->component = 'format_socialwall';
+            // Type of message from that module (as module defines it).
+            // Along with component this must exist in the table message_providers.
+            $eventdata->name = 'timelineposts';
+
+            $eventdata->userfrom = get_admin();      // User object.
+            $eventdata->subject = get_string('timelinedigests', 'format_socialwall');   // Very short one-line subject.
+
+            $eventdata->userto = $this->get_user($userid);
+
+            $eventdata->fullmessage = html_to_text($digesttexthtml);
+            $eventdata->fullmessageformat = FORMAT_PLAIN;   // Text format.
+
+            $eventdata->fullmessagehtml = $digesttexthtml;
+
+            // Useful for plugins like sms or twitter.
+            $eventdata->smallmessage = '';
+
+            if (message_send($eventdata)) {
+
+                $DB->delete_records_select('format_socialwall_nfqueue', 'recipientid = ?', array($userid));
+                $countdigests++;
+            } else {
+                $counterrors++;
+            }
+        }
+
+        unset($groupednotifications);
+        unset($this->courses);
+        unset($this->notificationsplaintext);
+        unset($this->users);
+
+        set_config('lastdigestcron', $timenow, 'format_socialwall');
+        mtrace('format_socialwall digest_cron successfully finished (' . $countdigests . ' sent, ' . $counterrors . ' Errors).');
+    }
+
+    /** save the notification settings for a user
+     * 
+     * @global object $DB
+     * @param record $data, the submitted data.
+     */
+    public function save_from_submit($data) {
+        global $DB;
+
+        $params = array('courseid' => $data->courseid, 'userid' => $data->userid);
+
+        if ($exists = $DB->get_record('format_socialwall_nfsettings', $params)) {
+
+            $exists->notificationtype = $data->notificationtype;
+            $DB->update_record('format_socialwall_nfsettings', $exists);
+        } else {
+
+            $DB->insert_record('format_socialwall_nfsettings', $data);
+        }
+    }
+
+    /** get the notification settings for a user in a course, return 0 when no
+     * record in database exists.
+     * 
+     * @param record $course the course
+     * @param int $userid the id of the user.
+     * @return int
+     */
+    public function get_notification_user($course, $userid) {
+
+        $nfsettings = $this->get_notification_settings($course->id);
+
+        if (!isset($nfsettings[$userid])) {
+            return 0;
+        }
+
+        return $nfsettings[$userid];
+    }
+
+    /** get all existing (in database) setting for the course
+     * 
+     * @global object $DB
+     * @param int $courseid, courseid.
+     * @return array (userid => notification setting
+     */
+    public function get_notification_settings($courseid) {
+        global $DB;
+
+        $sql = "SELECT userid, notificationtype FROM {format_socialwall_nfsettings} WHERE courseid = ?";
+
+        if (!$nfsettings = $DB->get_records_sql_menu($sql, array($courseid))) {
+            return array();
+        }
+
+        return $nfsettings;
+    }
+
+}
\ No newline at end of file
diff --git a/course/format/socialwall/classes/local/posts.php b/course/format/socialwall/classes/local/posts.php
new file mode 100644
index 0000000..285a577
--- /dev/null
+++ b/course/format/socialwall/classes/local/posts.php
@@ -0,0 +1,966 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\local;
+
+defined('MOODLE_INTERNAL') || die();
+
+/**
+ * This class manages posts, which can created by users in a course with
+ * socialwall format.
+ */
+class posts {
+
+    protected $postform;
+    protected $courseid;
+    protected $filteroptions;
+
+    protected function __construct($courseid) {
+        $this->courseid = $courseid;
+    }
+
+    /**
+     * Create instance as a singleton 
+     * 
+     * @param int $courseid
+     * @return \format_socialwall\local\posts
+     */
+    public static function instance($courseid) {
+        static $posts;
+
+        if (isset($posts)) {
+            return $posts;
+        }
+
+        $posts = new posts($courseid);
+        return $posts;
+    }
+
+    /**
+     * Cleanup data, when a user is deleted
+     * 
+     * @param int $userid
+     * @return boolean true if succeeded
+     */
+    public static function cleanup_userdeleted($userid) {
+        global $DB;
+
+        // ... delete posts of the user.
+        self::delete_users_posts($userid);
+
+        // ... delete comments of user.
+        $DB->delete_records('format_socialwall_comments', array('fromuserid' => $userid));
+
+        // ... delete likes.
+        $DB->delete_records('format_socialwall_likes', array('fromuserid' => $userid));
+
+        // ... delete all the enqueued notifications.
+        $DB->delete_records('format_socialwall_nfqueue', array('recipientid' => $userid));
+        $DB->delete_records('format_socialwall_nfqueue', array('creatorid' => $userid));
+
+        // ... delete all the notification settings.
+        $DB->delete_records('format_socialwall_nfsettings', array('userid' => $userid));
+
+        return true;
+    }
+
+    /**
+     * Delete users post and comments, in user is unenrolled
+     * 
+     * @param int $userid
+     * @param int $courseid 
+     * @return boolean true when succeeded
+     */
+    public static function cleanup_userunrenolled($userid, $courseid) {
+        global $DB, $CFG;
+
+        require_once($CFG->dirroot . '/course/format/lib.php');
+
+        // ...check coursesettings.
+        if (!$course = $DB->get_record('course', array('id' => $courseid))) {
+            return false;
+        }
+
+        $course = course_get_format($course)->get_course();
+
+        if (empty($course->deleteafterunenrol)) {
+            return false;
+        }
+
+        // ... delete posts of the user.
+        self::delete_users_posts($userid, $courseid);
+
+        // ... delete comments of user.
+        $DB->delete_records_select('format_socialwall_comments', 'fromuserid = ? AND courseid = ?', array($userid, $courseid));
+
+        return true;
+    }
+
+    /**
+     * Cleanup all the data in the format socialwall tables 
+     * 
+     * @param int $courseid, the course id.
+     */
+    public static function cleanup_coursedeleted($courseid) {
+        global $DB;
+
+        // ... delete post.
+        $DB->delete_records('format_socialwall_posts', array('courseid' => $courseid));
+
+        // ... delete comments.
+        $DB->delete_records('format_socialwall_comments', array('courseid' => $courseid));
+
+        // ... delete likes.
+        $DB->delete_records('format_socialwall_likes', array('courseid' => $courseid));
+
+        // ... delete all the enqueued notifications.
+        $DB->delete_records('format_socialwall_nfqueue', array('courseid' => $courseid));
+
+        // ... delete all the notification settings.
+        $DB->delete_records('format_socialwall_nfsettings', array('courseid' => $courseid));
+    }
+
+    /**
+     * Post form is neede in two separate scripts (view.php and action.php), so we create
+     * it here in centralized place.
+     * 
+     * @return object the post form
+     */
+    public function get_post_form($postsdata = null) {
+        global $USER;
+
+        // Count the activities in section == FORMAT_SOCIALWALL_POSTFORMSECTION.
+        $modinfo = get_fast_modinfo($this->courseid);
+        $cmids = (isset($modinfo->sections[FORMAT_SOCIALWALL_POSTFORMSECTION])) ? $modinfo->sections[FORMAT_SOCIALWALL_POSTFORMSECTION] : array();
+
+        $options = $this->get_filter_options($this->courseid);
+        $formparams = array('courseid' => $this->courseid, 'cmids' => $cmids, 'options' => $options);
+
+        $actionurl = new \moodle_url('/course/format/socialwall/action.php');
+
+        $this->postform = new \post_form($actionurl, $formparams, 'post', '', array('id' => 'postform'));
+
+        // If the timeline is filtered by postid and this user has the capability to edit the post, load the posts data into form.
+        if (!empty($options->postid)) {
+
+            if (isset($postsdata->posts[$options->postid])) {
+
+                $post = $postsdata->posts[$options->postid];
+                $coursecontext = \context_course::instance($post->courseid);
+
+                // ... add edit icon, if edting is allowed.
+                $caneditpost = (($post->fromuserid == $USER->id) and ( has_capability('format/socialwall:updateownpost', $coursecontext)));
+                $caneditpost = ($caneditpost or has_capability('format/socialwall:updateanypost', $coursecontext));
+
+                if ($caneditpost) {
+                    $this->postform->set_data($post);
+                }
+            }
+        }
+
+        return $this->postform;
+    }
+
+    /**
+     * Get and store filter setting for posts list in Session
+     * for each course.
+     * 
+     * @param int $courseid
+     * @return record filteroptions
+     */
+    protected function get_filter_options($courseid) {
+
+        $showalert = optional_param('showalert', '0', PARAM_INT);
+        if (!empty($showalert)) {
+            return (object) array('showalert' => $showalert);
+        }
+
+        $cache = \cache::make('format_socialwall', 'timelinefilter');
+
+        if (!$timelinefilter = $cache->get($courseid)) {
+
+            $timelinefilter = new \stdClass();
+            $timelinefilter->postid = 0;
+            $timelinefilter->filtergroups = 0;
+            $timelinefilter->filtermodules = '';
+            $timelinefilter->orderby = 'timecreated desc';
+        }
+
+        $postid = optional_param('postid', '0', PARAM_INT);
+        if (!empty($postid)) {
+
+            $timelinefilter->postid = $postid;
+            $cache->set($courseid, $timelinefilter);
+
+            return $timelinefilter;
+        }
+
+        $changed = false;
+
+        $filtergroups = optional_param('tl_filtergroup', -1, PARAM_INT);
+        if ($filtergroups > -1) {
+            $timelinefilter->filtergroups = $filtergroups;
+            $changed = true;
+        }
+
+        $filtermodules = optional_param('tl_filtermodules', 'nomodule', PARAM_TEXT);
+        if ($filtermodules != 'nomodule') {
+            $timelinefilter->filtermodules = $filtermodules;
+            $changed = true;
+        }
+
+        $orderby = optional_param('tl_orderby', 'oldsort', PARAM_TEXT);
+        if ($orderby != 'oldsort') {
+            $timelinefilter->orderby = $orderby;
+            $changed = true;
+        }
+
+        if ($changed) {
+            $cache->set($courseid, $timelinefilter);
+        }
+
+        return $timelinefilter;
+    }
+
+    /**
+     * Get all Posts (with authors) from the database by courseid
+     * 
+     * @param int $course, with theme settings loaded.
+     * @return \stdClass, postsdata (infodata for all posts).
+     */
+    protected function get_all_posts($course, $options = null, $limitfrom = 0, $limitcount = 0, $orderby = array()) {
+        global $DB, $COURSE, $USER;
+
+        $courseid = $course->id;
+        $context = \context_course::instance($courseid);
+
+        // ... prepare posts infodata.
+        $postsdata = new \stdClass();
+        $postsdata->posts = array();
+        $postsdata->poststotal = 0;
+        $postsdata->postsloaded = 0;
+        $postsdata->filteroptions = $options;
+        $postsdata->authors = array();
+
+        if ($limitcount == 0) {
+            $limitcount = (!empty($course->tlnumposts)) ? $course->tlnumposts : 0;
+        }
+
+        $cond = array("WHERE sp.courseid = ?");
+        $params = array($courseid);
+        $join = "";
+
+        // ... no private posts?
+        if (!has_capability('format/socialwall:viewprivate', $context)) {
+            $cond[] = " sp.private = '0'";
+        }
+
+        // ... only users groups?
+        if (!empty($options->filtergroups)) {
+
+            $cond[] = " sp.togroupid = ?";
+            $params[] = $options->filtergroups;
+        } else {
+
+            // ... if seperate groups are set and user is not allowed to see other groups set filter.
+            $groupmode = groups_get_course_groupmode($COURSE);
+
+            if (($groupmode == SEPARATEGROUPS) and ! has_capability('moodle/course:managegroups', $context)) {
+
+                $keys = array(0); // To all participants.
+
+                if ($usersgroups = groups_get_all_groups($courseid, $USER->id)) {
+
+                    $keys = array_merge($keys, array_keys($usersgroups));
+                }
+
+                list($ingroups, $inparams) = $DB->get_in_or_equal($keys);
+                $cond[] = " sp.togroupid {$ingroups}";
+                $params = array_merge($params, $inparams);
+            }
+        }
+
+        if (!empty($options->filtermodules)) {
+            $join = "JOIN {format_socialwall_attaches} at ON at.postid = sp.id ";
+            $join .= "JOIN {course_modules} cm ON cm.id = at.coursemoduleid ";
+            $join .= "JOIN {modules} m ON m.id = cm.module ";
+            $cond[] = " m.name = ?";
+            $params[] = $options->filtermodules;
+        }
+
+        if (!empty($options->filteralerts)) {
+            $cond[] = " sp.alert = '1'";
+        }
+
+        if (!empty($options->postid)) {
+            $cond[] = " sp.id = ? ";
+            $params[] = $options->postid;
+        }
+
+        // ...show only one post on page, when option showalert is set.
+        if (!empty($options->showalert)) {
+            $cond[] = " sp.id = ?";
+            $params[] = $options->showalert;
+        }
+
+        if (!empty($options->orderby)) {
+            $orderby[] = 'sp.' . $options->orderby;
+        }
+
+        $ordering = '';
+        if (!empty($orderby)) {
+            $ordering = 'ORDER BY ' . implode(', ', $orderby);
+        }
+
+        $where = implode(' AND ', $cond);
+
+        // ... get all posts.
+        $sqlfrom = "FROM {format_socialwall_posts} sp {$join} {$where} ";
+
+        $sql = "SELECT DISTINCT sp.* " . $sqlfrom . " {$ordering} ";
+
+        $countsql = "SELECT count(DISTINCT sp.id) as total " . $sqlfrom;
+
+        if (!$postsdata->poststotal = $DB->count_records_sql($countsql, $params)) {
+            return $postsdata;
+        }
+
+        if (!$postsdata->posts = $DB->get_records_sql($sql, $params, $limitfrom, $limitcount)) {
+            return $postsdata;
+        }
+
+        $postsdata->postsloaded = $limitfrom + count($postsdata->posts);
+        return $postsdata;
+    }
+
+    /**
+     * Add all post data, which is necessary for rendering the posts
+     * 
+     * @param object $course
+     * @param  object $postsdata containing retrieved posts in $postdata->post
+     * @return object the postdata object with all of the data added
+     */
+    protected function add_posts_data($course, &$postsdata) {
+        global $DB;
+
+        if (empty($postsdata->posts)) {
+            return $postsdata;
+        }
+
+        $courseid = $course->id;
+
+        // ... gather all the authors ids from posts.
+        foreach ($postsdata->posts as &$post) {
+
+            $postsdata->authors[$post->fromuserid] = $post->fromuserid;
+        }
+
+        // ... add all comments, replies to comments and add more authors.
+        comments::add_comments_to_posts($postsdata, $course->tlnumcomments, $course->tlnumreplies);
+
+        // ... add all likes from this user.
+        $likes = likes::instance($course);
+        $likes->add_likes_to_posts($postsdata);
+
+        // ... add all attachments.
+        attaches::add_attaches_to_posts($courseid, $postsdata);
+
+        // ... finally gather all the required userdata for authors.
+        if (!$users = $DB->get_records_list('user', 'id', array_keys($postsdata->authors))) {
+            debugging('error while retrieving post authors');
+        }
+
+        $postsdata->authors = $users;
+
+        return $postsdata;
+    }
+
+    /**
+     * Get postdata object for all alerting posts
+     * 
+     * @param object $course
+     * @param int $limitfrom
+     * @param int $limitcount
+     * @param array $orderby
+     * @return object postdata object with all data for rendering.
+     */
+    public function get_alert_posts($course, $limitfrom = 0, $limitcount = 0, $orderby = array()) {
+
+        $options = new \stdClass();
+        $options->filteralerts = true;
+        return $this->get_all_posts($course, $options, $limitfrom, $limitcount, $orderby);
+    }
+
+    /**
+     * Get postdata object for timeline posts
+     * 
+     * @param record $course
+     * @param int $limitfrom
+     * @param int $limitcount
+     * @param array $orderby
+     * @return object postdata object with all data for rendering.
+     */
+    public function get_timeline_posts($course, $limitfrom = 0, $limitcount = 0) {
+
+        $options = $this->get_filter_options($course->id);
+        $postsdata = $this->get_all_posts($course, $options, $limitfrom, $limitcount, array('sticky desc'));
+        return $this->add_posts_data($course, $postsdata);
+    }
+
+    /**
+     * If modules are attached to a post they must be moved to timeline section 
+     * (normally section number 1).
+     * 
+     * @param type $courseid
+     * @param type $cmsequence
+     * @return type
+     */
+    private function check_and_move_module($courseid, $cmsequence) {
+
+        $modinfo = get_fast_modinfo($courseid);
+        $section = $modinfo->get_section_info(FORMAT_SOCIALWALL_TIMELINESECTION);
+
+        $cmids = explode(',', $cmsequence);
+
+        foreach ($cmids as $cmid) {
+
+            $mod = $modinfo->get_cm($cmid);
+            moveto_module($mod, $section);
+        }
+
+        return $cmsequence;
+    }
+
+    /**
+     * If user has attached a file to a post we must create a modul with type file
+     * and attach it to post.
+     * 
+     * @param object $form  submitted data of form.
+     * @return record the created module of type file.
+     */
+    protected function create_mod_files($form) {
+        global $USER, $CFG, $COURSE, $DB;
+
+        $usercontext = \context_user::instance($USER->id);
+        $fs = get_file_storage();
+        if (!$files = $fs->get_area_files($usercontext->id, 'user', 'draft', $form->files, 'sortorder, id', false)) {
+            // ...if no module can be created return an empty string, so not module info will be stored as attachment.
+            return '';
+        }
+
+        $file = reset($files);
+
+        require_once($CFG->dirroot . '/course/modlib.php');
+        require_once($CFG->dirroot . '/lib/resourcelib.php');
+
+        $moduleid = $DB->get_field('modules', 'id', array('name' => 'resource'));
+
+        $data = new \stdClass();
+        $data->modulename = 'resource';
+        $data->module = $moduleid;
+        $data->name = $file->get_filename();
+        $data->visible = 1;
+        $data->section = 1;
+        $data->files = $form->files;
+        $data->display = RESOURCELIB_DISPLAY_AUTO;
+
+        // Create instance of mod_files.
+        $modinfo = add_moduleinfo($data, $COURSE);
+
+        return $modinfo->coursemodule;
+    }
+
+    /**
+     * If user has attached a url to a post, we must create a module with type url
+     * 
+     * @param string $url the url string
+     * @return record the created module of type url.
+     */
+    protected function create_mod_url($url) {
+        global $CFG, $COURSE, $DB;
+
+        require_once($CFG->dirroot . '/course/modlib.php');
+        require_once($CFG->dirroot . '/lib/resourcelib.php');
+
+        $moduleid = $DB->get_field('modules', 'id', array('name' => 'url'));
+
+        $data = new \stdClass();
+        $data->modulename = 'url';
+        $data->module = $moduleid;
+        $data->name = $url;
+        $data->visible = 1;
+        $data->section = 1;
+        $data->externalurl = $url;
+        $data->display = RESOURCELIB_DISPLAY_POPUP;
+        $data->popupwidth = 400;
+        $data->popupheight = 400;
+
+        // Create instance of url.
+        $modinfo = add_moduleinfo($data, $COURSE);
+
+        return $modinfo->coursemodule;
+    }
+
+    /**
+     * Save a post using the submitted data
+     * 
+     * @param type $data
+     * @return type
+     */
+    public function save_post($data, $course) {
+        global $USER, $DB, $CFG, $PAGE;
+
+        require_once($CFG->dirroot . '/mod/url/locallib.php');
+        $context = \context_course::instance($data->courseid);
+
+        // ... create post.
+        $post = new \stdClass();
+        $update = false;
+
+        // If id is not empty, ensure that post is existing and test whether user is updating the post.
+        if (!empty($data->id)) {
+
+            if ($exists = $DB->get_record('format_socialwall_posts', array('id' => $data->id))) {
+                $post = $exists;
+
+                // Check, whether user is allowed to update the post.
+                $caneditpost = (($post->fromuserid == $USER->id) and ( has_capability('format/socialwall:updateownpost', $context)));
+                $caneditpost = ($caneditpost or has_capability('format/socialwall:updateanypost', $context));
+
+                if (!$caneditpost) {
+                    print_error('missingcapupdatepost', 'format_socialwall');
+                }
+                $update = true;
+            } else {
+                print_error('noposttoupdate', 'format_socialwall');
+            }
+        }
+
+        // ...save when even a posttext or a externalurl or a file or a actvitiy is given.
+        $cmsequence = $data->cmsequence;
+
+        // ... are there added activities?
+        if (!empty($cmsequence)) {
+
+            $cmsequence = $this->check_and_move_module($data->courseid, $cmsequence);
+        }
+
+        // If user may not add any activity but may add a file or a link, replace existing files with new file.
+        if (!$PAGE->user_allowed_editing()) {
+
+            // ... add a resource.
+            if (!empty($data->files)) {
+
+                $canpostfile = (has_capability('format/socialwall:postfile', $context) && (!empty($course->enablestudentupload)));
+
+                if (!$canpostfile) {
+                    print_error('missingcappostfile', 'format_socialwall');
+                }
+                $cmsequence = $this->create_mod_files($data);
+            } else {
+
+                // ... check externalurl and create a activity in section 1, if necessary.
+                if (!empty($data->externalurl)) {
+
+                    $canposturl = (has_capability('format/socialwall:posturl', $context) && (!empty($course->enablestudentupload)));
+                    if (!$canposturl) {
+                        print_error('missingcapposturl', 'format_socialwall');
+                    }
+
+                    $cmsequence = $this->create_mod_url($data->externalurl);
+
+                    // ... set filter Plugin here.
+                    $filters = filter_get_active_in_context($context);
+                    if (isset($filters['urlresource'])) {
+                        require_once($CFG->dirroot . '/filter/urlresource/lib.php');
+                        \filter_url_resource_helper::save_externalurl($data, $cmsequence);
+                    }
+                }
+            }
+        }
+
+        if ((empty($data->posttext)) and ( empty($cmsequence))) {
+            print_error('attachmentorpostrequired', 'format_socialwall');
+        }
+
+        $post->courseid = $data->courseid;
+        $post->fromuserid = $USER->id;
+        $post->togroupid = $data->togroupid;
+
+        if (is_array($data->posttext)) {
+            $posttext = $data->posttext['text'];
+        } else {
+            $posttext = $data->posttext;
+        }
+
+        if (has_capability('format/socialwall:posthtml', $context)) {
+            $post->posttext = clean_text($posttext);
+        } else {
+            $post->posttext = clean_param($posttext, PARAM_NOTAGS);
+        }
+
+        if (isset($data->poststatus)) {
+            $post->sticky = ($data->poststatus == 1);
+            $post->private = ($data->poststatus == 2);
+            $post->alert = ($data->poststatus == 4);
+        } else {
+            $post->sticky = 0;
+            $post->private = 0;
+            $post->alert = 0;
+        }
+
+        if ($update) {
+
+            $post->timemodified = time();
+            $DB->update_record('format_socialwall_posts', $post);
+
+            // ...reset postid if post was updated.
+            $cache = \cache::make('format_socialwall', 'timelinefilter');
+            $cache->purge_current_user();
+        } else {
+
+            $post->timecreated = time();
+            $post->timemodified = $post->timecreated;
+
+            $post->id = $DB->insert_record('format_socialwall_posts', $post);
+        }
+
+        attaches::save_attaches($post->id, $cmsequence);
+
+        // We use a instant enqueueing, if needed you might use events here.
+        notification::enqueue_post_created($post);
+
+        // ...clear the inputed values.
+        $cache = \cache::make('format_socialwall', 'postformparams');
+        $cache->purge();
+
+        // ...clear the attached actvities.
+        $cache = \cache::make('format_socialwall', 'attachedrecentactivities');
+        $cache->purge();
+
+        return array('error' => '0', 'message' => 'postsaved');
+    }
+
+    /**
+     * Delete comment and refresh the number of comments in post table
+     * 
+     * @param int $cid, id of comment.
+     * @return array result
+     */
+    public function delete_post($pid) {
+        global $DB, $USER;
+
+        // ... get post for refreshing counts after delete.
+        if (!$post = $DB->get_record('format_socialwall_posts', array('id' => $pid))) {
+            print_error('postidinvalid', 'format_socialwall');
+        }
+
+        // ...check capability.
+        $coursecontext = \context_course::instance($post->courseid);
+        $candeletepost = (($post->fromuserid == $USER->id) and ( has_capability('format/socialwall:deleteownpost', $coursecontext)));
+        $candeletepost = ($candeletepost or has_capability('format/socialwall:deleteanypost', $coursecontext));
+
+        if (!$candeletepost) {
+            print_error('missingcapdeletepost', 'format_socialwall');
+        }
+
+        self::execute_delete($pid);
+        return array('error' => '0', 'message' => 'postdeleted');
+    }
+
+    /**
+     * Delete activities of all the posts of a user, when course format setting
+     * "deletemodspermanently" is set to yes and the activity is not attached to another post.
+     * 
+     * @param int $userid
+     * @return boolean, true if at least one activitity is deleted.
+     */
+    protected static function delete_users_posts_activities($userid, $courseid = 0) {
+        global $DB;
+        
+        $where = " WHERE o.format = 'socialwall' AND o.name = 'deletemodspermanently' AND o.value = '1' ";
+        $params = array('userid' => $userid);
+        
+        // Checking courseid.
+        if (!empty($courseid)) {
+            $where .= " AND p.courseid = :courseid";
+            $params['courseid'] = $courseid;
+        }
+        
+        // Get all modids having count = 1.
+        $sql = "SELECT a.coursemoduleid, count(*) as countmod
+                 FROM {format_socialwall_attaches} a
+                 JOIN {format_socialwall_posts} p ON (p.id = a.postid AND p.fromuserid = :userid)
+                 JOIN {format_socialwall_attaches} a2 ON (a2.coursemoduleid = a.coursemoduleid AND a2.postid = p.id)
+                 JOIN {course_format_options} o ON o.courseid = p.courseid
+                 {$where}
+                 GROUP BY coursemoduleid
+                 HAVING countmod = '1'";
+
+        if (!$modcounts = $DB->get_records_sql($sql, $params)) {
+            return false;
+        }
+
+        $cmids = array_keys($modcounts);
+
+        foreach ($cmids as $cmid) {
+            course_delete_module($cmid);
+        }
+
+        return true;
+    }
+
+    /**
+     * Delete all posts of the user including the data related to users posts
+     * 
+     * @param int $userid
+     */
+    protected static function delete_users_posts($userid, $courseid = 0) {
+        global $DB;
+
+        $cond = array();
+        $cond[] = " p.fromuserid = :userid ";
+
+        $params = array();
+        $params['userid'] = $userid;
+
+        // Restrict deletion to course.
+        if (!empty($courseid)) {
+            $cond[] = " p.courseid = :courseid";
+            $params['courseid'] = $courseid;
+        }
+
+        $where = "WHERE " . implode(" AND ", $cond);
+
+        // ... delete comments.
+        $sql = "DELETE c FROM {format_socialwall_comments} c
+                JOIN mdl_format_socialwall_posts p ON p.id = c.postid {$where}";
+
+        $DB->execute($sql, $params);
+
+        // ... delete likes.
+        $sql = "DELETE l FROM {format_socialwall_likes} l
+                JOIN mdl_format_socialwall_posts p ON p.id = l.postid {$where}";
+
+        $DB->execute($sql, $params);
+
+        // Delete all the activities attached to users posts only?
+        self::delete_users_posts_activities($userid, $courseid);
+
+        // ... delete attaches.
+        $sql = "DELETE a FROM {format_socialwall_attaches} a
+                JOIN mdl_format_socialwall_posts p ON p.id = a.postid {$where}";
+
+        $DB->execute($sql, $params);
+
+        // ... delete all the enqueued notifications about this post.
+        $sql = "DELETE q FROM {format_socialwall_nfqueue} q
+                JOIN mdl_format_socialwall_posts p ON p.id = q.postid {$where}";
+
+        $DB->execute($sql, $params);
+
+        // ... finally delete post.
+        $params = array('fromuserid' => $userid);
+        if (!empty($courseid)) {
+            $params['courseid'] = $courseid;
+        }
+
+        $DB->delete_records('format_socialwall_posts', $params);
+    }
+
+    /**
+     * Delete activities, when course format setting "deletemodspermanently" is set
+     * to yes and the activitie is not attached to another post.
+     * 
+     * @param int $pid, the id of the post.
+     * @return boolean, true when at least one acitivity is deleted.
+     */
+    protected static function delete_posts_activities($pid) {
+        global $DB, $CFG;
+
+        require_once($CFG->dirroot . '/course/format/lib.php');
+
+        // Get the course and check, whether the format is "socialwall".
+        $sql = "SELECT c.* FROM {course} c
+                JOIN {format_socialwall_posts} p ON p.courseid = c.id
+                WHERE p.id = :pid AND c.format = 'socialwall'";
+
+        if (!$course = $DB->get_record_sql($sql, array('pid' => $pid))) {
+            return false;
+        }
+
+        $course = course_get_format($course)->get_course();
+
+        if (empty($course->deletemodspermanently)) {
+            return false;
+        }
+
+        $sql = "SELECT a.coursemoduleid, count(*) as countmod
+                 FROM {format_socialwall_attaches} a
+                 JOIN {format_socialwall_posts} p ON (p.id = a.postid AND p.courseid = :courseid)
+                 JOIN {format_socialwall_attaches} a2 ON (a2.coursemoduleid = a.coursemoduleid AND a2.postid = :pid)
+                 GROUP BY coursemoduleid
+                 HAVING countmod = '1'";
+
+        if (!$modcounts = $DB->get_records_sql($sql, array('courseid' => $course->id, 'pid' => $pid))) {
+            return false;
+        }
+
+        $cmids = array_keys($modcounts);
+
+        foreach ($cmids as $cmid) {
+            course_delete_module($cmid);
+        }
+
+        return true;
+    }
+
+    /**
+     * Delete all data related to a post
+     * 
+     * @param int $pid the id of the post
+     */
+    protected static function execute_delete($pid) {
+        global $DB;
+
+        // ... delete comments.
+        $DB->delete_records('format_socialwall_comments', array('postid' => $pid));
+
+        // ... delete likes.
+        $DB->delete_records('format_socialwall_likes', array('postid' => $pid));
+
+        // ... delete activities attached to this post only?
+        self::delete_posts_activities($pid);
+
+        // ... delete attaches.
+        $DB->delete_records('format_socialwall_attaches', array('postid' => $pid));
+
+        // ... delete all the enqueued notifications.
+        $DB->delete_records('format_socialwall_nfqueue', array('postid' => $pid));
+
+        // ... delete post.
+        $DB->delete_records('format_socialwall_posts', array('id' => $pid));
+    }
+
+    /**
+     * Refresh the value of the countcomments column in format_socialwall table
+     * 
+     * @param int $postid
+     */
+    public function refresh_comments_count($postid) {
+        global $DB;
+
+        if ($post = $DB->get_record('format_socialwall_posts', array('id' => $postid))) {
+
+            $post->countcomments = $DB->count_records('format_socialwall_comments', array('postid' => $postid, 'replycommentid' => '0'));
+
+            $DB->update_record('format_socialwall_posts', $post);
+            return $post;
+        }
+        return false;
+    }
+
+    /**
+     * Refresh the value of the countlikes column in format_socialwall table
+     * 
+     * @param int $postid
+     */
+    public function refresh_likes_count($postid) {
+        global $DB;
+
+        if ($post = $DB->get_record('format_socialwall_posts', array('id' => $postid))) {
+
+            $post->countlikes = $DB->count_records('format_socialwall_likes', array('postid' => $postid));
+
+            $DB->update_record('format_socialwall_posts', $post);
+            return $post->countlikes;
+        }
+        return 0;
+    }
+
+    /**
+     * Save the locked state for a post
+     * 
+     * @return result array.
+     */
+    public function save_posts_locked_from_submit() {
+        global $DB;
+
+        // Ensure that post exists and get the right courseid.
+        $postid = required_param('postid', PARAM_INT);
+        if (!$post = $DB->get_record('format_socialwall_posts', array('id' => $postid))) {
+            print_error('invalidpostid', 'format_socialwall');
+        }
+
+        // ... check capability.
+        $coursecontext = \context_course::instance($post->courseid);
+        if (!has_capability('format/socialwall:lockcomment', $coursecontext)) {
+            print_error('missingcaplockcomment', 'format_socialwall');
+        }
+
+        $locked = optional_param('locked', '0', PARAM_INT);
+
+        if ($post->locked != $locked) {
+
+            $post->locked = $locked;
+            $post->timemodified = time();
+            $DB->update_record('format_socialwall_posts', $post);
+
+            // We use a instant enqueueing, if needed you might use events here.
+            notification::enqueue_post_locked($post);
+        }
+        return array('error' => '0', 'message' => 'postsaved', 'postid' => $post->id, 'locked' => "{$post->locked}");
+    }
+
+    /**
+     * Save the sticky state for a post
+     * 
+     * @return result array.
+     */
+    public function makesticky() {
+        global $DB;
+
+        // Ensure that post exists and get the right courseid.
+        $postid = required_param('postid', PARAM_INT);
+        if (!$post = $DB->get_record('format_socialwall_posts', array('id' => $postid))) {
+            print_error('invalidpostid', 'format_socialwall');
+        }
+
+        // ... check capability.
+        $coursecontext = \context_course::instance($post->courseid);
+        if (!has_capability('format/socialwall:makesticky', $coursecontext)) {
+            print_error('missingcapmakesticky', 'format_socialwall');
+        }
+
+        $sticky = optional_param('sticky', '0', PARAM_INT);
+
+        if ($post->sticky != $sticky) {
+
+            $post->sticky = $sticky;
+            $post->timemodified = time();
+            $DB->update_record('format_socialwall_posts', $post);
+        }
+        return array('error' => '0', 'message' => 'postsaved', 'postid' => $post->id, 'sticky' => "{$post->sticky}");
+    }
+
+}
diff --git a/course/format/socialwall/classes/task/send_timeline_digests.php b/course/format/socialwall/classes/task/send_timeline_digests.php
new file mode 100644
index 0000000..d17fb1d
--- /dev/null
+++ b/course/format/socialwall/classes/task/send_timeline_digests.php
@@ -0,0 +1,44 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format, Tasks
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\task;
+
+class send_timeline_digests extends \core\task\scheduled_task {
+
+    public function get_name() {
+        // Shown in admin screens.
+        return get_string('sendtimelinedigests', 'format_socialwall');
+    }
+
+    public function execute() {
+        global $CFG;
+
+        require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+
+        // Send out all digests.
+        $notification = \format_socialwall\local\notification::instance();
+        $notification->digest_cron();
+    }
+
+}
\ No newline at end of file
diff --git a/course/format/socialwall/classes/task/send_timeline_instant.php b/course/format/socialwall/classes/task/send_timeline_instant.php
new file mode 100644
index 0000000..ff8fa85
--- /dev/null
+++ b/course/format/socialwall/classes/task/send_timeline_instant.php
@@ -0,0 +1,45 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format, Tasks
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace format_socialwall\task;
+
+class send_timeline_instant extends \core\task\scheduled_task {
+
+    public function get_name() {
+        // Shown in admin screens.
+        return get_string('sendtimelineintant', 'format_socialwall');
+    }
+
+    public function execute() {
+        global $CFG;
+
+        require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+
+        // Send out all digests.
+        $notification = \format_socialwall\local\notification::instance();
+        $notification->instant_cron();
+    }
+
+}
+
diff --git a/course/format/socialwall/db/access.php b/course/format/socialwall/db/access.php
new file mode 100644
index 0000000..807ca5d
--- /dev/null
+++ b/course/format/socialwall/db/access.php
@@ -0,0 +1,157 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * capabilities for format_socialwall
+ *
+ * @package    format
+ * @subpackage socialwall
+ * @copyright  2014 Andreas Wagner, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$capabilities = array(
+    'format/socialwall:deleteanypost' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array()
+    ),
+    'format/socialwall:deleteownpost' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+    'format/socialwall:makesticky' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+    'format/socialwall:postprivate' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+    'format/socialwall:viewprivate' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+    'format/socialwall:posturl' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+    'format/socialwall:postfile' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+    'format/socialwall:lockcomment' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+    'format/socialwall:deleteanycomment' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+    'format/socialwall:deleteowncomment' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW,
+        )
+    ),
+    'format/socialwall:writecomment' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+    'format/socialwall:like' => array(
+        'captype' => 'write',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+    'format/socialwall:viewlikes' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+            'student' => CAP_ALLOW
+        )
+    ),
+    'format/socialwall:posthtml' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+
+    'format/socialwall:updateanypost' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+        )
+    ),
+
+    'format/socialwall:updateownpost' => array(
+        'captype' => 'read',
+        'contextlevel' => CONTEXT_COURSE,
+        'archetypes' => array(
+            'teacher' => CAP_ALLOW,
+            'editingteacher' => CAP_ALLOW,
+        )
+    ),
+);
\ No newline at end of file
diff --git a/course/format/socialwall/db/caches.php b/course/format/socialwall/db/caches.php
new file mode 100644
index 0000000..9eec4da
--- /dev/null
+++ b/course/format/socialwall/db/caches.php
@@ -0,0 +1,39 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * @package    format
+ * @subpackage socialwall
+ * @copyright  2014 Andreas Wagner, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$definitions = array(
+    'postformparams' => array(
+        'mode' => cache_store::MODE_SESSION
+    ),
+    'postformerrors' => array(
+        'mode' => cache_store::MODE_SESSION
+    ),
+    'timelinefilter' => array(
+        'mode' => cache_store::MODE_SESSION
+    ),
+    'commentformerrors' => array(
+        'mode' => cache_store::MODE_SESSION
+    ),
+    'attachedrecentactivities' => array(
+        'mode' => cache_store::MODE_SESSION
+    )
+);
\ No newline at end of file
diff --git a/course/format/socialwall/db/events.php b/course/format/socialwall/db/events.php
new file mode 100644
index 0000000..37187b0
--- /dev/null
+++ b/course/format/socialwall/db/events.php
@@ -0,0 +1,50 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * event observer for format socialwall
+ *
+ * @since     Moodle 2.0
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$observers = array(
+    array(
+        'eventname' => '\core\event\course_module_deleted',
+        'callback' => 'format_socialwall_course_module_deleted',
+        'includefile' => '/course/format/socialwall/locallib.php',
+        'internal' => true
+    ),
+    array(
+        'eventname' => '\core\event\course_deleted',
+        'callback' => 'format_socialwall_course_deleted',
+        'includefile' => '/course/format/socialwall/locallib.php',
+        'internal' => true
+    ),
+    array(
+        'eventname' => '\core\event\user_enrolment_deleted',
+        'callback' => 'format_socialwall_user_enrolment_deleted',
+        'includefile' => '/course/format/socialwall/locallib.php',
+        'internal' => true
+    ),
+    array(
+        'eventname' => '\core\event\user_deleted',
+        'callback' => 'format_socialwall_user_deleted',
+        'includefile' => '/course/format/socialwall/locallib.php',
+        'internal' => true
+    )
+);
diff --git a/course/format/socialwall/db/install.xml b/course/format/socialwall/db/install.xml
new file mode 100644
index 0000000..69fbeda
--- /dev/null
+++ b/course/format/socialwall/db/install.xml
@@ -0,0 +1,118 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<XMLDB PATH="course/format/socialwall/db" VERSION="20150818" COMMENT="XMLDB file for Moodle course/format/socialwall"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:noNamespaceSchemaLocation="../../../../lib/xmldb/xmldb.xsd"
+>
+  <TABLES>
+    <TABLE NAME="format_socialwall_likes" COMMENT="likes related to a post">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="courseid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="fromuserid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="idx_postid" UNIQUE="false" FIELDS="postid"/>
+        <INDEX NAME="idx_crsid_postid" UNIQUE="false" FIELDS="courseid, postid"/>
+        <INDEX NAME="idx_postid_usrid" UNIQUE="false" FIELDS="postid, fromuserid"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="format_socialwall_posts" COMMENT="hold all post to the time line">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="courseid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="fromuserid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="togroupid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="groupid or 0 for all users."/>
+        <FIELD NAME="posttext" TYPE="text" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="sticky" TYPE="int" LENGTH="4" NOTNULL="false" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="private" TYPE="int" LENGTH="4" NOTNULL="false" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="alert" TYPE="int" LENGTH="4" NOTNULL="false" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="locked" TYPE="int" LENGTH="4" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="countcomments" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="countlikes" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="idx_crsid" UNIQUE="false" FIELDS="courseid"/>
+        <INDEX NAME="idx_crsid_grpid" UNIQUE="false" FIELDS="courseid, togroupid"/>
+        <INDEX NAME="idx_crsid_grpid_time" UNIQUE="false" FIELDS="courseid, togroupid, timecreated"/>
+        <INDEX NAME="idx_crsid_alrt" UNIQUE="false" FIELDS="courseid, alert"/>
+        <INDEX NAME="idx_crsid_alrt_priv" UNIQUE="false" FIELDS="courseid, alert, private"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="format_socialwall_comments" COMMENT="comment related to a post">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="courseid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="replycommentid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="This comment is a reply to fields comment id"/>
+        <FIELD NAME="countreplies" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+        <FIELD NAME="fromuserid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="text" TYPE="text" NOTNULL="false" SEQUENCE="false"/>
+        <FIELD NAME="timecreated" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="timemodified" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="idx_postid" UNIQUE="false" FIELDS="postid"/>
+        <INDEX NAME="idx_postid_time" UNIQUE="false" FIELDS="postid, timecreated"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="format_socialwall_attaches" COMMENT="holds the attachments of a post">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="coursemoduleid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="sortorder" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="idx_postid" UNIQUE="false" FIELDS="postid"/>
+        <INDEX NAME="idx_postid_cmid" UNIQUE="false" FIELDS="postid, coursemoduleid"/>
+        <INDEX NAME="idx_cmid" UNIQUE="false" FIELDS="coursemoduleid"/>
+      </INDEXES>
+    </TABLE>
+    <TABLE NAME="format_socialwall_nfsettings" COMMENT="settings for each course and each user">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="courseid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="userid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="notificationtype" TYPE="int" LENGTH="3" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="0 no, 1 each post, 2 digest"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+    </TABLE>
+    <TABLE NAME="format_socialwall_nfqueue" COMMENT="collect events for notification">
+      <FIELDS>
+        <FIELD NAME="id" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="true"/>
+        <FIELD NAME="courseid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="creatorid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="user id of user creating the event"/>
+        <FIELD NAME="recipientid" TYPE="int" LENGTH="10" NOTNULL="true" DEFAULT="0" SEQUENCE="false" COMMENT="for this user event is important (0 means for all users in course)"/>
+        <FIELD NAME="postid" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="module" TYPE="char" LENGTH="20" NOTNULL="true" SEQUENCE="false" COMMENT="post, comment or like"/>
+        <FIELD NAME="action" TYPE="char" LENGTH="100" NOTNULL="true" SEQUENCE="false"/>
+        <FIELD NAME="details" TYPE="text" NOTNULL="false" SEQUENCE="false" COMMENT="forexample comments id."/>
+        <FIELD NAME="time" TYPE="int" LENGTH="10" NOTNULL="true" SEQUENCE="false" COMMENT="time this event happens"/>
+      </FIELDS>
+      <KEYS>
+        <KEY NAME="primary" TYPE="primary" FIELDS="id"/>
+      </KEYS>
+      <INDEXES>
+        <INDEX NAME="idx_pid_tm_rcp" UNIQUE="false" FIELDS="postid, time, recipientid"/>
+      </INDEXES>
+    </TABLE>
+  </TABLES>
+</XMLDB>
\ No newline at end of file
diff --git a/course/format/socialwall/db/messages.php b/course/format/socialwall/db/messages.php
new file mode 100644
index 0000000..0fded72
--- /dev/null
+++ b/course/format/socialwall/db/messages.php
@@ -0,0 +1,34 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format. Defines message providers (types of messages being sent)
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$messageproviders = array(
+    'timelineposts' => array(
+        'defaults' => array(
+            'popup' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDIN,
+            'email' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_LOGGEDIN
+        ),
+    )
+);
+
+
+
diff --git a/course/format/socialwall/db/tasks.php b/course/format/socialwall/db/tasks.php
new file mode 100644
index 0000000..fa6ed6b
--- /dev/null
+++ b/course/format/socialwall/db/tasks.php
@@ -0,0 +1,43 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @since     Moodle 2.0
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+$tasks = array(
+    array(
+        'classname' => 'format_socialwall\task\send_timeline_instant',
+        'blocking' => 0,
+        'minute' => '*',
+        'hour' => '*',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'
+    ),
+    array(
+        'classname' => 'format_socialwall\task\send_timeline_digests',
+        'blocking' => 0,
+        'minute' => '15',
+        'hour' => '0',
+        'day' => '*',
+        'dayofweek' => '*',
+        'month' => '*'
+    )
+);
\ No newline at end of file
diff --git a/course/format/socialwall/db/upgrade.php b/course/format/socialwall/db/upgrade.php
new file mode 100644
index 0000000..d87183e
--- /dev/null
+++ b/course/format/socialwall/db/upgrade.php
@@ -0,0 +1,60 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+function xmldb_format_socialwall_upgrade($oldversion) {
+    global $DB;
+
+    $dbman = $DB->get_manager();
+
+    if ($oldversion < 2015072900) {
+
+        // Define field replycommentid to be added to format_socialwall_comments.
+        $table = new xmldb_table('format_socialwall_comments');
+        $field = new xmldb_field('replycommentid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'postid');
+
+        // Conditionally launch add field replycommentid.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Socialwall savepoint reached.
+        upgrade_plugin_savepoint(true, 2015072900, 'format', 'socialwall');
+    }
+
+    if ($oldversion < 2015081801) {
+
+        // Define field countreplies to be added to format_socialwall_comments.
+        $table = new xmldb_table('format_socialwall_comments');
+        $field = new xmldb_field('countreplies', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, '0', 'replycommentid');
+
+        // Conditionally launch add field countreplies.
+        if (!$dbman->field_exists($table, $field)) {
+            $dbman->add_field($table, $field);
+        }
+
+        // Socialwall savepoint reached.
+        upgrade_plugin_savepoint(true, 2015081801, 'format', 'socialwall');
+    }
+
+    return true;
+}
diff --git a/course/format/socialwall/format.php b/course/format/socialwall/format.php
new file mode 100644
index 0000000..356d4c3
--- /dev/null
+++ b/course/format/socialwall/format.php
@@ -0,0 +1,61 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format.  Display the whole course as "socialwall" made of modules.
+ *
+ * refactored file from course/format/topic/format.php
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->libdir . '/filelib.php');
+require_once($CFG->libdir . '/completionlib.php');
+require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+
+// Horrible backwards compatible parameter aliasing..
+if ($topic = optional_param('topic', 0, PARAM_INT)) {
+    $url = $PAGE->url;
+    $url->param('section', $topic);
+    debugging('Outdated topic param passed to course/view.php', DEBUG_DEVELOPER);
+    redirect($url);
+}
+// End backwards-compatible aliasing.
+
+$context = context_course::instance($course->id);
+
+if (($marker >= 0) && has_capability('moodle/course:setcurrentsection', $context) && confirm_sesskey()) {
+    $course->marker = $marker;
+    course_set_marker($course->id, $marker);
+}
+
+// Make sure all sections are created.
+$course = course_get_format($course)->get_course();
+
+course_create_sections_if_missing($course, range(0, $course->numsections));
+
+if (!empty(course_get_format($course)->msg)) {
+    echo $OUTPUT->notification(get_string(course_get_format($course)->msg, 'format_socialwall'));
+}
+
+$renderer = $PAGE->get_renderer('format_socialwall');
+$renderer->print_page($course, $completion);
+
+// Include course format js module.
+$PAGE->requires->js('/course/format/topics/format.js');
diff --git a/course/format/socialwall/lang/en/format_socialwall.php b/course/format/socialwall/lang/en/format_socialwall.php
new file mode 100644
index 0000000..96df8ad
--- /dev/null
+++ b/course/format/socialwall/lang/en/format_socialwall.php
@@ -0,0 +1,184 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Strings for component 'format_socialwall', language 'en'
+ *
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+$string['addedactivities'] = 'Add activities';
+$string['addactivityresource'] = 'Add activity/resource';
+$string['addalink'] = 'Add a link';
+$string['addrecentactivity'] = 'Add existing activity';
+$string['addselectedactivities'] = 'Add selected activities';
+$string['allmodultypes'] = 'All module types';
+$string['allmygroups'] = 'All my Groups';
+$string['attach'] = 'Attach';
+$string['attachmentorpostrequired'] = 'Attachment or posttext required!';
+$string['attachessaved'] = 'Attachments saved';
+$string['attachmentsaveerror'] = 'Error by saving attachment';
+$string['attachactivities'] = 'Create a new activity or drag and drop a existing one into here:';
+$string['attachedrecentactivities'] = 'Attached existing activities (will be sent by next post or update)';
+$string['attachselectedactivities'] = 'Attach selected activities';
+$string['attachturnediton'] = 'Turn editing on, to attach activities to post';
+$string['attachedactivities'] = 'Attached activities (will be sent by next post):';
+$string['cachedef_attachedrecentactivities'] = 'SocialWall:Attached recent activities';
+$string['cachedef_commentformerrors'] = 'SocialWall:Comment form errors';
+$string['cachedef_postformerrors'] = 'SocialWall:Post form errors';
+$string['cachedef_postformparams'] = 'SocialWall:Post form params';
+$string['cachedef_timelinefilter'] = 'SocialWall:Timeline filter';
+$string['commentsaveerror'] = 'Error by saving comment';
+$string['commentsaved'] = 'Comment saved';
+$string['commentidinvalid'] = 'Invalid comment id';
+$string['cancel'] = 'Cancel';
+$string['confirmdeletecomment'] = 'Do you really want to delete this comment?';
+$string['countlikes'] = '{$a} Likes';
+$string['countcomments'] = '{$a} Comments';
+$string['counttotalpost'] = '{$a->count}/{$a->total} posts';
+$string['commentdeleted'] = 'Comment deleted';
+$string['currentsection'] = 'This topic';
+$string['deleteafterunenrol'] = 'Delete Items after unenrol user';
+$string['deleteafterunenroldesc'] = 'When a user unenrols from a course all his posts and comments will be deleted.';
+$string['deleteafterunenrol_help'] = 'When a user unenrols from a course all his posts and comments will be deleted.';
+$string['deletemodspermanently'] = 'Automatically delete activities';
+$string['deletemodspermanently_help'] = 'When set to Yes an activity is deleted, when the last post is deleted, where this activity was attached to.
+    Note that posts (and probably activities) are also deleted, when a user is deleted. So please be careful with this setting!';
+$string['editnotification'] = 'Edit notification settings';
+$string['edited'] = 'edited';
+$string['enablelikes'] = 'Enable likes';
+$string['enablelikesdesc'] = 'Default setting for enable likes.';
+$string['enablelikes_help'] = 'User will be able to like or unlike a post in this course.';
+$string['enablenotification'] = 'Enable notification';
+$string['enablenotificationdesc'] = 'Default setting for course format options.';
+$string['enablenotification_help'] = 'Notification can be setup for users.';
+$string['enablestudentupload'] = 'Allow users to upload files and links';
+$string['enablestudentuploaddesc'] = 'Default setting for upload option.';
+$string['enablestudentupload_help'] = 'Students will be able to add a file or a url to a post';
+$string['errorsavestateedit'] = 'Error by saving post. post is not saved.';
+$string['filtersheader'] = 'Filters';
+$string['filtertimeline'] = 'Filter';
+$string['gradednote'] = 'You have been graded on {$a->name}: {$a->result}';
+$string['hidefromothers'] = 'Hide topic';
+$string['invalidpostid'] = 'Invalid post';
+$string['invalidcommentid'] = 'Invalid comment';
+$string['invalidcourseid'] = 'Invalid course';
+$string['invalidpostcomment'] = 'Error while posting comment';
+$string['likesaredisabled'] = 'Likes are disabled';
+$string['likenomore'] = 'Like no more';
+$string['like'] = 'Like';
+$string['likesaved'] = 'Like saved';
+$string['locked'] = 'locked';
+$string['lockpost'] = 'Post is unlocked, click to lock';
+$string['makealert'] = 'Make alert';
+$string['makesticky'] = 'Make post sticky';
+$string['makeunsticky'] = 'Make post unsticky';
+$string['messageprovider:timelineposts'] = 'Notification of aocialwall course format timeline';
+$string['missingcaplikepost'] = 'Missing capabiltiy to like posts.';
+$string['missingcapmakesticky'] = 'Missing capabiltiy to make a post sticky or unsticky';
+$string['missingcapwritecomment'] = 'Missing capability to write comments.';
+$string['missingcaplockcomment'] = 'Missing capability to lock comments.';
+$string['missingcapdeletecomment'] = 'You don\'t have the permission to delete a comment.';
+$string['missingcapdeletepost'] = 'You don\'t have the permission to delete a post.';
+$string['missingcapposturl'] = 'You don\'t have the permission to post a url.';
+$string['missingcappostfile'] = 'You don\'t have the permission to post a file.';
+$string['missingcapupdatepost'] = 'You don\'t have the permission to update this post.';
+$string['notificationfromcourse'] = 'Notification from course: {$a}';
+$string['nf_gotocourse'] = 'Go to course';
+$string['nf_post_created'] = '{$a->creator} posted to timeline: {$a->posttext}';
+$string['nf_post_locked'] = '{$a->creator} stopped commenting on: {$a->posttext}';
+$string['nf_post_unlocked'] = '{$a->creator} enabled commenting on: {$a->posttext}';
+$string['nf_comment_created'] = '{$a->creator} commented a post: {$a->commenttext}';
+$string['nf_like_created'] = '{$a->creator} liked a post: {$a->posttext}';
+$string['nf_like_deleted'] = '{$a->creator} unliked a post: {$a->posttext}';
+$string['nonexistinggroup'] = 'no more existing group';
+$string['norecentactivities'] = 'There are no recent activities';
+$string['noposttoupdate'] = 'The post you like to update doesn\'t in the database';
+$string['notificationtype'] = 'Notification type';
+$string['notificationoff'] = 'Off';
+$string['notificationperpost'] = 'Each post';
+$string['notificationdigest'] = 'Per digest';
+$string['page-course-view-socialwall'] = 'Any course main page in socialwall format';
+$string['page-course-view-socialwall-x'] = 'Any course page in socialwall format';
+$string['pluginname'] = 'Socialwall format';
+$string['postcomment'] = 'Post';
+$string['postdeleted'] = 'Post deleted';
+$string['postidinvalid'] = 'Invalid post-ID';
+$string['postedonto'] = '{$a->author} posted on: {$a->date} to {$a->to}';
+$string['postislocked'] = 'Post is locked';
+$string['poststatusordnote'] = 'Post status or note';
+$string['postsaved'] = 'Post successfully saved';
+$string['poststatus'] = 'Post status';
+$string['privatepost'] = 'Private post';
+$string['recentactivities'] = 'Recent activities';
+$string['replycomment'] = 'Reply to comment';
+$string['savepost'] = 'Post';
+$string['savesetting'] = 'Save setting';
+$string['section0name'] = 'General';
+$string['searchbyname'] = 'Search by name...';
+$string['sectionname'] = 'Topic';
+$string['selectactivitiesfrombelow'] = 'Select activities from below';
+$string['sendtimelinedigests'] = 'Send timeline digests';
+$string['sendtimelineintant'] = 'Send timeline notifications (per Post)';
+$string['showalert'] = 'Timeline is filtered to show an alert';
+$string['showallcomments'] = 'Show all comments ({$a} more)';
+$string['showalldicussions'] = 'Show all discussions';
+$string['showallposts'] = 'Reset filter to show all posts';
+$string['showallreplies'] = 'Show all replies ({$a} more)';
+$string['showfromothers'] = 'Show topic';
+$string['socialwall:like'] = 'Create likes';
+$string['socialwall:lockcomment'] = 'Lock comments';
+$string['socialwall:makesticky'] = 'Make sticky';
+$string['socialwall:deleteanypost'] = 'Delete all users posts';
+$string['socialwall:deleteownpost'] = 'Delete own posts';
+$string['socialwall:deleteanycomment'] = 'Delete others users comments';
+$string['socialwall:deleteowncomment'] = 'Delete own comments';
+$string['socialwall:postprivate'] = 'Do private posts';
+$string['socialwall:posturl'] = 'Post url (module)';
+$string['socialwall:postfile'] = 'Post file (module)';
+$string['socialwall:posthtml'] = 'Post HTML text';
+$string['socialwall:viewprivate'] = 'View private posts';
+$string['socialwall:viewlikes'] = 'View number of likes';
+$string['socialwall:writecomment'] = 'Write comment';
+$string['socialwall:updateownpost'] = 'Update own post';
+$string['socialwall:updateanypost'] = 'Update any post';
+$string['sticky'] = 'Sticky post';
+$string['textrequired'] = 'Text required';
+$string['timeagosec'] = '{$a} secs ago';
+$string['timeagomin'] = '{$a} mins ago';
+$string['timeagohours'] = '{$a->hours} hours {$a->minutes} mins ago';
+$string['timeagodays'] = '{$a->days} days {$a->hours} hours ago';
+$string['timeagomonthdays'] = '%m months %d days ago';
+$string['timeagoyearsdays'] = '%y years %m months ago';
+$string['timecreateasc'] = 'Order by date (ascending)';
+$string['timecreatedesc'] = 'Order by date (descending)';
+$string['timelinedigests'] = 'Your digest report from timelines of moodle';
+$string['tlnumcomments'] = 'Number of comments';
+$string['tlnumcommentsdesc'] = 'Default number of comments shown per post';
+$string['tlnumposts'] = 'Num of posts (per request)';
+$string['tlnumpostsdesc'] = 'Display this num of posts on course main page and per AJAX request.';
+$string['tlnumreplies'] = 'Number of replies';
+$string['tlnumrepliesdesc'] = 'Default number of replies shown per comments';;
+$string['turneditoroff'] = 'HTML-Editor off';
+$string['turneditoron'] = 'HTML-Editor on';
+$string['unknownuser'] = 'Unknown user';
+$string['updatepost'] = 'Update';
+$string['updatepostfiltered'] = 'Timeline is filtered to show the post to update';
+$string['uploadafile'] = 'Upload a file';
+$string['unlockpost'] = 'Post is locked, click to unlock';
+$string['writecomment'] = 'Write a comment';
diff --git a/course/format/socialwall/lib.php b/course/format/socialwall/lib.php
new file mode 100644
index 0000000..089acdc
--- /dev/null
+++ b/course/format/socialwall/lib.php
@@ -0,0 +1,211 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * This file contains main class for the course format Socialwall
+ *
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+require_once($CFG->dirroot . '/course/format/topics/lib.php');
+require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+require_once($CFG->dirroot . '/course/format/socialwall/pages/post_form.php');
+
+/**
+ * Main class for the socialwall course format
+ *
+ * @package    format_socialwall
+ * @copyright  2014 Andreas Wagner, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class format_socialwall extends format_topics {
+    
+    public static $numsections = 3;
+
+    /**
+     * Custom action after section has been moved in AJAX mode
+     *
+     * Used in course/rest.php
+     *
+     * @return array This will be passed in ajax respose
+     */
+    public function ajax_section_move() {
+        return null;
+    }
+
+    /**
+     * Returns the list of blocks to be automatically added for the newly created course
+     *
+     * @return array of default blocks, must contain two keys BLOCK_POS_LEFT and BLOCK_POS_RIGHT
+     *     each of values is an array of block names (for left and right side columns)
+     */
+    public function get_default_blocks() {
+        return array(
+            BLOCK_POS_LEFT => array(),
+            BLOCK_POS_RIGHT => array()
+        );
+    }
+
+    /**
+     * The URL to use for the specified course (with section)
+     *
+     * Please note that course view page /course/view.php?id=COURSEID is hardcoded in many
+     * places in core and contributed modules. If course format wants to change the location
+     * of the view script, it is not enough to change just this function. Do not forget
+     * to add proper redirection.
+     *
+     * @param int|stdClass $section Section object from database or just field course_sections.section
+     *     if null the course view page is returned
+     * @param array $options options for view URL. At the moment core uses:
+     *     'navigation' (bool) if true and section has no separate page, the function returns null
+     *     'sr' (int) used by multipage formats to specify to which section to return
+     * @return null|moodle_url
+     */
+    public function get_view_url($section, $options = array()) {
+        $course = $this->get_course();
+        $url = new moodle_url('/course/view.php', array('id' => $course->id));
+        return $url;
+    }
+
+    /**
+     * Definitions of the additional options that this course format uses for course
+     *
+     * socialwall format uses the following options:
+     * - coursedisplay
+     * - numsections
+     * - hiddensections
+     *
+     * @param bool $foreditform
+     * @return array of options
+     */
+    public function course_format_options($foreditform = false) {
+        static $courseformatoptions = false;
+        if ($courseformatoptions === false) {
+            $courseconfig = get_config('format_socialwall');
+
+            $courseformatoptions = array(
+                'enablenotification' => array(
+                    'default' => $courseconfig->enablenotification,
+                    'type' => PARAM_BOOL,
+                ),
+                'enablelikes' => array(
+                    'default' => $courseconfig->enablelikes,
+                    'type' => PARAM_BOOL,
+                ),
+                'enablestudentupload' => array(
+                    'default' => $courseconfig->enablestudentupload,
+                    'type' => PARAM_BOOL,
+                ),
+                'tlnumposts' => array(
+                    'default' => $courseconfig->tlnumposts,
+                    'type' => PARAM_INT,
+                ),
+                'tlnumcomments' => array(
+                    'default' => $courseconfig->tlnumcomments,
+                    'type' => PARAM_INT,
+                ),
+                'tlnumreplies' => array(
+                    'default' => $courseconfig->tlnumreplies,
+                    'type' => PARAM_INT,
+                ),
+                'numsections' => array(
+                    'default' => self::$numsections,
+                    'type' => PARAM_INT,
+                ),
+                'deleteafterunenrol' => array(
+                    'default' => $courseconfig->deleteafterunenrol,
+                    'type' => PARAM_BOOL
+                ),
+                'deletemodspermanently' => array(
+                    'default' => $courseconfig->deleteafterunenrol,
+                    'type' => PARAM_BOOL
+                )
+            );
+        }
+        if ($foreditform && !isset($courseformatoptions['enablenotification']['label'])) {
+
+            $nums = array(
+                '1' => 1,
+                '2' => 2,
+                '3' => 3,
+                '4' => 4,
+                '5' => 5,
+                '10' => 10,
+                '20' => 20
+            );
+
+            $courseformatoptionsedit = array(
+                'enablenotification' => array(
+                    'label' => new lang_string('enablenotification', 'format_socialwall'),
+                    'element_type' => 'selectyesno',
+                    'help' => 'enablenotification',
+                    'help_component' => 'format_socialwall'
+                ),
+                'enablelikes' => array(
+                    'label' => new lang_string('enablelikes', 'format_socialwall'),
+                    'element_type' => 'selectyesno',
+                    'help' => 'enablelikes',
+                    'help_component' => 'format_socialwall'
+                ),
+                'enablestudentupload' => array(
+                    'label' => new lang_string('enablestudentupload', 'format_socialwall'),
+                    'element_type' => 'selectyesno',
+                    'help' => 'enablestudentupload',
+                    'help_component' => 'format_socialwall',
+                ),
+                'tlnumposts' => array(
+                    'label' => new lang_string('tlnumposts', 'format_socialwall'),
+                    'element_type' => 'select',
+                    'element_attributes' => array($nums),
+                ),
+                'tlnumcomments' => array(
+                    'label' => new lang_string('tlnumcomments', 'format_socialwall'),
+                    'element_type' => 'select',
+                    'element_attributes' => array($nums),
+                ),
+                'tlnumreplies' => array(
+                    'label' => new lang_string('tlnumreplies', 'format_socialwall'),
+                    'element_type' => 'select',
+                    'element_attributes' => array($nums),
+                ),
+                'deleteafterunenrol' => array(
+                    'label' => new lang_string('deleteafterunenrol', 'format_socialwall'),
+                    'element_type' => 'selectyesno',
+                    'help' => 'deleteafterunenrol',
+                    'help_component' => 'format_socialwall'
+                ),
+                'deletemodspermanently' => array(
+                    'label' => new lang_string('deletemodspermanently', 'format_socialwall'),
+                    'element_type' => 'selectyesno',
+                    'help' => 'deletemodspermanently',
+                    'help_component' => 'format_socialwall'
+                ),
+                'numsections' => array(
+                    // Hidden element needs label value for correct setting of value, because label value is the 3rd parameter for addElement() method.
+                    'label' => self::$numsections,
+                    'element_type' => 'hidden'
+                    
+                )
+            );
+            $courseformatoptions = array_merge_recursive($courseformatoptions, $courseformatoptionsedit);
+        }
+
+        return $courseformatoptions;
+    }
+}
diff --git a/course/format/socialwall/locallib.php b/course/format/socialwall/locallib.php
new file mode 100644
index 0000000..0f877b5
--- /dev/null
+++ b/course/format/socialwall/locallib.php
@@ -0,0 +1,66 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+define('FORMAT_SOCIALWALL_TIMELINESECTION', 1);
+define('FORMAT_SOCIALWALL_POSTFORMSECTION', 2);
+
+/** Eventhandling for the mod_created event, activate the 
+ *  acl control by setting moduls availabilty field, 
+ *  even if user has edit (i. e. deleted), when acl is on.
+ */
+function format_socialwall_course_module_deleted($event) {
+
+    $eventdata = $event->get_data();
+    $cmid = $eventdata['objectid'];
+    \format_socialwall\local\attaches::cleanup_coursemoduledeleted($cmid);
+}
+
+function format_socialwall_course_deleted($event) {
+    $eventdata = $event->get_data();
+    $courseid = $eventdata['objectid'];
+    \format_socialwall\local\posts::cleanup_coursedeleted($courseid);
+}
+
+/** clean up userrelated data, when user unenrolls a course.
+ * $eventdata->lastenrol = true; // means user not enrolled any more
+ */
+function format_socialwall_user_enrolment_deleted($event) {
+
+    $eventdata = $event->get_data();
+
+    $ue = $eventdata['other']['userenrolment'];
+
+    if ($ue['lastenrol']) {
+        \format_socialwall\local\posts::cleanup_userunrenolled($eventdata['relateduserid'], $eventdata['courseid']);
+    }
+}
+
+function format_socialwall_user_deleted($event) {
+
+    $eventdata = $event->get_data();
+    $userid = $eventdata['objectid'];
+
+    \format_socialwall\local\posts::cleanup_userdeleted($userid);
+}
\ No newline at end of file
diff --git a/course/format/socialwall/pages/addactivity_ajax.php b/course/format/socialwall/pages/addactivity_ajax.php
new file mode 100644
index 0000000..35c4e1d
--- /dev/null
+++ b/course/format/socialwall/pages/addactivity_ajax.php
@@ -0,0 +1,54 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * add attached actvities to cache.
+ *
+ * @package   format_socialwall
+ * @copyright 2015 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+define('AJAX_SCRIPT', true);
+
+require_once(dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/config.php');
+
+$action = required_param('action', PARAM_ALPHA);
+$courseid = required_param('courseid', PARAM_INT);
+$postid = optional_param('postid', 0, PARAM_INT);
+
+if (!$course = $DB->get_record('course', array('id' => $courseid))) {
+    print_error('invalidcourseid');
+}
+
+require_course_login($course);
+
+$context = context_course::instance($course->id, MUST_EXIST);
+require_capability('moodle/course:manageactivities', $context);
+
+$PAGE->set_url(new moodle_url('/course/format/socialwall/pages/addactivity_ajax.php'));
+$PAGE->set_context($context);
+
+if ($action == 'addactivities') {
+
+    $attachedrecentactivityids = optional_param('attachrecentactivitiyids', '', PARAM_TEXT);
+    $attachedrecentactivityids = json_decode($attachedrecentactivityids);
+
+    $cache = cache::make('format_socialwall', 'attachedrecentactivities');
+    $cache->set($course->id.'_'.$postid, $attachedrecentactivityids);
+}
+
+// No return necessary.
\ No newline at end of file
diff --git a/course/format/socialwall/pages/addactivity_form.php b/course/format/socialwall/pages/addactivity_form.php
new file mode 100644
index 0000000..b13ef78
--- /dev/null
+++ b/course/format/socialwall/pages/addactivity_form.php
@@ -0,0 +1,153 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * From to post a comment.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/lib/formslib.php');
+
+class addactivity_form extends moodleform {
+
+    // Define the form.
+    protected function definition() {
+        global $PAGE;
+
+        $mform = & $this->_form;
+        $courseid = $this->_customdata['courseid'];
+        $postid = $this->_customdata['postid'];
+
+        $modinfo = get_fast_modinfo($courseid);
+        $cms = $modinfo->get_cms();
+
+        $attachedrecentactivities = array();
+
+        // Add activities area.
+        $modulenames = get_module_types_names();
+
+        $existingnames = array();
+        foreach ($cms as $mod) {
+
+            $existingnames[$mod->modname] = $modulenames[$mod->modname];
+        }
+
+        core_collator::asort($existingnames);
+
+        $typeelements = array();
+        foreach ($existingnames as $type => $modname) {
+            $typeelements[$type] = $mform->createElement('checkbox', 'type_' . $type, '', $modname, array('id' => 'type_' . $type));
+            $mform->setDefault('filterbytype[type_' . $type . ']', 1);
+        }
+
+        if (!empty($typeelements)) {
+
+            // Module type filter.
+            $mform->addElement('header', 'filtersheader', get_string('filtersheader', 'format_socialwall'));
+            $mform->addGroup($typeelements, 'filterbytype');
+
+            $params = array('size' => '30', 'placeholder' => get_string('searchbyname', 'format_socialwall'));
+            $mform->addElement('text', 'searchbyname', '', $params);
+            $mform->setType('searchbyname', PARAM_TEXT);
+
+            // Recent activities area.
+            $mform->addElement('header', 'recentactivitiesheader', get_string('recentactivities', 'format_socialwall'));
+            $mform->setExpanded('recentactivitiesheader');
+
+            $courserenderer = $PAGE->get_renderer('course');
+
+            $modids = array();
+            $cache = cache::make('format_socialwall', 'attachedrecentactivities');
+
+            if ($attachedrecentactivities = $cache->get($courseid . '_' . $postid)) {
+                $modids = array_flip($attachedrecentactivities);
+            }
+
+            // Order cms by name.
+            if (!empty($cms)) {
+                uasort($cms, array($this, 'compare_modules'));
+            }
+
+            foreach ($cms as $mod) {
+
+                $name = $courserenderer->course_section_cm_name($mod);
+                $type = $mod->modname;
+
+                // In case of empty name, try to get content.
+                if (empty($name)) {
+
+                    $contentpart = $courserenderer->course_section_cm_text($mod);
+                    $url = $mod->url;
+
+                    if (empty($url)) {
+                        $name = shorten_text($contentpart, 70);
+                    }
+                }
+
+                $mform->addElement('checkbox', 'module_' . $type . '_' . $mod->id, '', $name, array('id' => 'module_' . $mod->id));
+
+                if (isset($modids[$mod->id])) {
+                    $mform->setDefault('module_' . $type . '_' . $mod->id, 1);
+                }
+            }
+        } else {
+            $mform->addElement('html', get_string('norecentactivities', 'format_socialwall'));
+        }
+
+        $args = array(
+            'courseid' => $courseid,
+            'attachedrecentactivities' => $attachedrecentactivities
+        );
+
+        $PAGE->requires->strings_for_js(
+                array('addrecentactivity', 'attach', 'cancel'), 'format_socialwall');
+
+        $PAGE->requires->yui_module(
+                'moodle-format_socialwall-addactivity', 'M.format_socialwall.addactivityinit', array($args), null, true);
+    }
+
+    /**
+     * Compare the modules by name
+     * 
+     * @param object $mod1
+     * @param object $mod2
+     * @return int
+     */
+    protected function compare_modules($mod1, $mod2) {
+
+        if (empty($mod1->name)) {
+            return -1;
+        }
+
+        if (empty($mod2->name)) {
+            return -1;
+        }
+
+        if (strtoupper($mod1->name) > strtoupper($mod2->name)) {
+            return 1;
+        }
+
+        if (strtoupper($mod1->name) == strtoupper($mod2->name)) {
+            return 0;
+        }
+        return -1;
+    }
+
+}
diff --git a/course/format/socialwall/pages/comment_form.php b/course/format/socialwall/pages/comment_form.php
new file mode 100644
index 0000000..c0a749a
--- /dev/null
+++ b/course/format/socialwall/pages/comment_form.php
@@ -0,0 +1,104 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * From to post a comment.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/lib/formslib.php');
+
+class comment_form extends moodleform {
+
+    // Define the form.
+    protected function definition() {
+
+        $mform = & $this->_form;
+        $postid = $this->_customdata['postid'];
+        $courseid = $this->_customdata['courseid'];
+        $replycommentid = $this->_customdata['replycommentid'];
+
+        // ...get errors from cache and set them to elements.
+        $errorcache = cache::make('format_socialwall', 'commentformerrors');
+        if ($errors = $errorcache->get($postid)) {
+            foreach ($errors as $element => $error) {
+                $mform->setElementError($element, $error['message']);
+            }
+        }
+        $errorcache->delete($postid);
+
+        $textareaparams = array('class' => 'tl-commenttext', 'id' => 'commenttext_' . $postid.'_'.$replycommentid);
+        $mform->addElement('textarea', 'text', '', $textareaparams);
+        $mform->setType('text', PARAM_TEXT);
+        $mform->addRule('text', null, 'required', null, 'client');
+
+        $mform->addElement('hidden', 'postid', $postid);
+        $mform->setType('postid', PARAM_INT);
+
+        $mform->addElement('hidden', 'courseid', $courseid);
+        $mform->setType('courseid', PARAM_INT);
+
+        $mform->addElement('hidden', 'action', 'postcomment');
+        $mform->setType('action', PARAM_TEXT);
+
+        $mform->addElement('hidden', 'replycommentid', $replycommentid);
+        $mform->setType('replycommentid', PARAM_INT);
+
+        $params = array('class' => 'tl-postcomment', 'id' => 'postcomment_' . $postid.'_'.$replycommentid);
+        $mform->addElement('submit', 'submitcomment', get_string('postcomment', 'format_socialwall'), $params);
+    }
+
+    protected function get_form_identifier() {
+        return "comment_form_".$this->_customdata['replycommentid'];
+    }
+
+
+    public function has_errors() {
+        $mform = & $this->_form;
+        $error = $mform->getElementError('text');
+        return !empty($error);
+    }
+
+    public function validation($data, $files) {
+
+        $errors = array();
+
+        // Submit is redirected if error occurs, so we store errordata in session.
+        $sessionerrordata = array();
+        $cache = cache::make('format_socialwall', 'commentformerrors');
+        $cache->delete($data['postid']);
+
+        // ... check if comment is all empty.
+        if (isset($data['submitcomment'])) {
+            if (empty($data['text'])) {
+                $errors['text'] = get_string('textrequired', 'format_socialwall');
+                $sessionerrordata['text'] = array('message' => $errors['text'], 'value' => $data['text']);
+            }
+        }
+
+        // ... store or clean.
+        if (!empty($sessionerrordata)) {
+            $cache->set($data['postid'], $sessionerrordata);
+        }
+
+        return $errors;
+    }
+
+}
\ No newline at end of file
diff --git a/course/format/socialwall/pages/editnotification.php b/course/format/socialwall/pages/editnotification.php
new file mode 100644
index 0000000..bfcd895
--- /dev/null
+++ b/course/format/socialwall/pages/editnotification.php
@@ -0,0 +1,80 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @since     Moodle 2.7
+ * @package   format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+require_once(dirname(__FILE__) . '../../../../../config.php');
+require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+require_once($CFG->dirroot . '/course/format/socialwall/pages/editnotification_form.php');
+
+$courseid = required_param('courseid', PARAM_INT); // Course id.
+$userid = $USER->id;
+
+$course = $DB->get_record('course', array('id' => $courseid), '*', MUST_EXIST);
+require_course_login($course);
+
+$PAGE->set_pagelayout('course');
+
+// ...start setting up the page.
+$context = context_course::instance($course->id, MUST_EXIST);
+
+$PAGE->set_context($context);
+$PAGE->set_url(new moodle_url('/course/format/socialwall/pages/editnotification.php', array('id' => $courseid)));
+$PAGE->set_title(get_string('editnotification', 'format_socialwall'));
+$PAGE->set_heading(get_string('editnotification', 'format_socialwall'));
+
+$notifications = \format_socialwall\local\notification::instance($courseid);
+
+// ...check, whether module is commentable.
+$notificationtype = $notifications->get_notification_user($course, $userid);
+
+$noticiationeditform = new editnotification_form(null,
+                array('courseid' => $course->id,
+                    'userid' => $userid,
+                    'notificationtype' => $notificationtype
+        ));
+
+if ($noticiationeditform->is_cancelled()) {
+    redirect(new moodle_url('/course/view.php', array("id" => $course->id)));
+}
+
+if ($data = $noticiationeditform->get_data()) {
+
+    $result = $notifications->save_from_submit($data);
+
+    if ($result['error'] == 0) {
+
+        $redirect = new moodle_url('/course/view.php?id=' . $course->id);
+        redirect($redirect, $result['message']);
+    } else {
+        $msg = $result['message'];
+    }
+}
+
+echo $OUTPUT->header();
+
+if (!empty($msg)) {
+    echo $OUTPUT->notification(get_string($msg, 'format_socialwall'));
+}
+echo $OUTPUT->heading(get_string('editnotification', 'format_socialwall'), 2);
+$noticiationeditform->display();
+
+echo $OUTPUT->footer();
\ No newline at end of file
diff --git a/course/format/socialwall/pages/editnotification_form.php b/course/format/socialwall/pages/editnotification_form.php
new file mode 100644
index 0000000..ed40232
--- /dev/null
+++ b/course/format/socialwall/pages/editnotification_form.php
@@ -0,0 +1,61 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+if (!defined('MOODLE_INTERNAL')) {
+    die('Direct access to this script is forbidden.');    // It must be included from a Moodle page.
+}
+
+require_once($CFG->dirroot . '/lib/formslib.php');
+require_once($CFG->dirroot . '/course/format/socialwall/locallib.php');
+
+class editnotification_form extends moodleform {
+
+    // Define the form.
+    protected function definition() {
+
+        $mform = & $this->_form;
+        $courseid = $this->_customdata['courseid'];
+        $userid = $this->_customdata['userid'];
+        $notificationtype = $this->_customdata['notificationtype'];
+
+        $choices = array();
+        foreach (\format_socialwall\local\notification::$NOTIFICATION_TYPE as $key => $type) {
+            $choices[$key] = get_string($type, 'format_socialwall');
+        }
+
+        $mform->addElement('select', 'notificationtype', get_string('notificationtype', 'format_socialwall'), $choices);
+        $mform->setDefault('notificationtype', $notificationtype);
+
+        // Id of course, we are in.
+        $mform->addElement('hidden', 'userid');
+        $mform->setType('userid', PARAM_INT);
+        $mform->setDefault('userid', $userid);
+
+        // Id of course, we are in.
+        $mform->addElement('hidden', 'courseid');
+        $mform->setType('courseid', PARAM_INT);
+        $mform->setDefault('courseid', $courseid);
+
+        $this->add_action_buttons(true, get_string('savesetting', 'format_socialwall'));
+    }
+
+}
\ No newline at end of file
diff --git a/course/format/socialwall/pages/post_form.php b/course/format/socialwall/pages/post_form.php
new file mode 100644
index 0000000..0bcce6c
--- /dev/null
+++ b/course/format/socialwall/pages/post_form.php
@@ -0,0 +1,348 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format.  Display the whole course as "socialwall" made of modules.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/lib/formslib.php');
+
+class post_form extends moodleform {
+
+    // Define the form.
+    protected function definition() {
+        global $OUTPUT, $PAGE, $COURSE, $CFG, $USER;
+
+        $mform = & $this->_form;
+        $courseid = $this->_customdata['courseid'];
+        $postid = (!empty($this->_customdata['options']->postid)) ? $this->_customdata['options']->postid : 0;
+        // Update of save a post.
+        $action = ($postid > 0) ? 'updatepost' : 'savepost';
+
+        $context = context_course::instance($courseid);
+
+        // ...get formparameters from cache.
+        $cache = cache::make('format_socialwall', 'postformparams');
+        $formparams = $cache->get($courseid . '_' . $postid);
+
+        $loadposteditor = optional_param('loadposteditor', -1, PARAM_INT);
+
+        if ($loadposteditor != -1) {
+
+            $formparams['loadposteditor'] = $loadposteditor;
+
+            // ...remember this setting, if page is reloaded.
+            $cache->set($courseid . '_' . $postid, $formparams);
+        }
+        // ...get errors from cache and set them to elements.
+        $errorcache = cache::make('format_socialwall', 'postformerrors');
+        if ($errors = $errorcache->get($courseid)) {
+            foreach ($errors as $element => $error) {
+                $mform->setElementError($element, $error['message']);
+            }
+        }
+        $errorcache->delete($courseid);
+
+        // ... value of this element is set by javascript (postform.js) before submit.
+        $mform->addElement('hidden', 'cmsequence', '', array('id' => 'cmsequence'));
+        $mform->setType('cmsequence', PARAM_TEXT);
+        $mform->setDefault('cmsequence', '');
+
+        // ... posttext.
+        $buttongroup = array();
+        $buttongroup[] = $mform->createElement('submit', 'submitbutton', get_string($action, 'format_socialwall'));
+
+        if ($action == 'updatepost') {
+            $buttongroup[] = $mform->createElement('cancel');
+        }
+        $mform->addGroup($buttongroup);
+
+        // ... htmleditor/texarea to post text.
+        $canposthtml = has_capability('format/socialwall:posthtml', $context);
+        $showeditor = (!empty($formparams['loadposteditor']) and $canposthtml);
+
+        $params = array('class' => 'sw-texarea', 'id' => 'posttext');
+
+        if ($showeditor) {
+
+            $mform->addElement('editor', 'posttext', get_string('poststatusordnote', 'format_socialwall'), $params);
+            $mform->setType('posttext', PARAM_RAW);
+
+            if (isset($formparams['posttext'])) {
+                $element = $mform->getElement('posttext');
+                $element->setValue(array('text' => $formparams['posttext']));
+            }
+        } else {
+
+            $mform->addElement('textarea', 'posttext', get_string('poststatusordnote', 'format_socialwall'), $params);
+            $mform->setType('posttext', PARAM_TEXT);
+            if (isset($formparams['posttext'])) {
+                $mform->setDefault('posttext', $formparams['posttext']);
+            }
+        }
+
+        $postoptions = array();
+
+        // ... Select group.
+        $groupmode = groups_get_course_groupmode($COURSE);
+        if (($groupmode == SEPARATEGROUPS) and ! has_capability('moodle/course:managegroups', $context)) {
+            $allgroups = groups_get_all_groups($courseid, $USER->id);
+        } else {
+            $allgroups = groups_get_all_groups($courseid);
+        }
+
+        $groupsmenu = array();
+        $groupsmenu[0] = get_string('allparticipants');
+        foreach ($allgroups as $gid => $unused) {
+            $groupsmenu[$gid] = format_string($allgroups[$gid]->name);
+        }
+
+        if (count($groupsmenu) > 0) {
+            $postoptions[] = $mform->createElement('select', 'togroupid', '', $groupsmenu);
+            if (isset($formparams['togroupid'])) {
+                $mform->setDefault('togroupid', $formparams['togroupid']);
+            }
+        }
+
+        // ... options group.
+        $poststatusmenu = array(0 => get_string('poststatus', 'format_socialwall'));
+        if (has_capability('format/socialwall:makesticky', $context)) {
+            $poststatusmenu[1] = get_string('makesticky', 'format_socialwall');
+        }
+        if (has_capability('format/socialwall:postprivate', $context)) {
+            $poststatusmenu[2] = get_string('privatepost', 'format_socialwall');
+        }
+        if ($PAGE->user_allowed_editing()) {
+            $poststatusmenu[4] = get_string('makealert', 'format_socialwall');
+        }
+        if (count($poststatusmenu) > 1) {
+            $postoptions[] = $mform->createElement('select', 'poststatus', '', $poststatusmenu);
+            if (isset($formparams['poststatus'])) {
+                $mform->setDefault('poststatus', $formparams['poststatus']);
+            }
+        }
+
+        // ...switch htmleditor on/off.
+        if ($canposthtml) {
+
+            $key = (!empty($formparams['loadposteditor'])) ? 'turneditoroff' : 'turneditoron';
+            $postoptions[] = $mform->createElement('submit', $key, get_string($key, 'format_socialwall'));
+        }
+
+        if (count($postoptions) > 0) {
+            $mform->addGroup($postoptions);
+        }
+
+        // ... display the activites prepared for the next post only by a teacher.
+        if ($PAGE->user_allowed_editing()) {
+
+            if (!isset($USER->editing) or ( !$USER->editing)) {
+
+                $addstr = get_string('addactivityresource', 'format_socialwall');
+                $mform->addElement('submit', 'turneditingon', $addstr, array('id' => 'sw-addactivitylink'));
+            }
+        } else {
+
+            $o = html_writer::tag('div', '', array('class' => 'clearfix'));
+            $mform->addElement('html', $o);
+
+            // ...upload options for all users, which cannot edit page.
+            $attachgroup = array();
+            $course = course_get_format($COURSE)->get_course();
+
+            $canpostfile = (has_capability('format/socialwall:postfile', $context) && (!empty($course->enablestudentupload)));
+
+            if ($canpostfile) {
+
+                $uploadfileicon = html_writer::empty_tag('img', array('src' => $OUTPUT->pix_url('icon', 'resource')));
+                $linktext = $uploadfileicon . get_string('uploadafile', 'format_socialwall');
+
+                $url = new moodle_url('/course/view.php', array('id' => $courseid, 'loadfilemanager' => 1));
+
+                $link = html_writer::link($url, $linktext, array('id' => 'uploadfile'));
+                $attachgroup[] = $mform->createElement('static', 'uploadfile', '', $link);
+            }
+
+            $canposturl = (has_capability('format/socialwall:posturl', $context) && (!empty($course->enablestudentupload)));
+
+            if ($canposturl) {
+                $addlinkicon = html_writer::empty_tag('img', array('src' => $OUTPUT->pix_url('icon', 'url')));
+                $at = html_writer::link('#', $addlinkicon . get_string('addalink', 'format_socialwall'), array('id' => 'addalink'));
+                $attachgroup[] = $mform->createElement('static', 'addalink', '', $at);
+            }
+
+            if (!empty($attachgroup)) {
+                $mform->addGroup($attachgroup);
+            }
+
+            $loadfilemanager = optional_param('loadfilemanager', 0, PARAM_INT);
+            if ($canpostfile and ( $loadfilemanager == 1)) {
+
+                $mform->addElement('html', html_writer::start_div('', array('id' => 'fileswrapper')));
+
+                // ... filemanager.
+                $filemanageroptions = array();
+                $filemanageroptions['accepted_types'] = '*';
+                $filemanageroptions['maxbytes'] = 0;
+                $filemanageroptions['maxfiles'] = 1;
+                $filemanageroptions['mainfile'] = true;
+
+                $mform->addElement('filemanager', 'files', get_string('selectfiles'), array(), $filemanageroptions);
+
+                $mform->addElement('html', html_writer::end_div());
+
+                $mform->addElement('hidden', 'loadfilemanager', '1', array('id' => 'loadfilemanager'));
+                $mform->setType('loadfilemanager', PARAM_INT);
+            }
+
+            // ...external url.
+            $style = (isset($errors['externalurl'])) ? 'display:auto' : 'display:none';
+
+            $mform->addElement('html', html_writer::start_div('', array('id' => 'externalurlwrapper', 'style' => $style)));
+
+            $mform->addElement('url', 'externalurl', get_string('externalurl', 'url'), array('size' => '60'), array('usefilepicker' => true));
+
+            $mform->setType('externalurl', PARAM_URL);
+            if (isset($errors['externalurl'])) {
+                $mform->setDefault('externalurl', $errors['externalurl']['value']);
+            }
+
+            // ... get urlresource filter a try.
+            $filters = filter_get_active_in_context($context);
+            if (isset($filters['urlresource'])) {
+                require_once($CFG->dirroot . '/filter/urlresource/lib.php');
+                filter_url_resource_helper::add_postformfields($mform, $courseid);
+            }
+            $mform->addElement('html', html_writer::end_div());
+        }
+
+        // Id of post to remember the update option for further pageloads.
+        $mform->addElement('hidden', 'id', 0, array('id' => 'id'));
+        $mform->setType('id', PARAM_INT);
+        $mform->setDefault('id', $postid);
+
+        // Id of course we are in.
+        $mform->addElement('hidden', 'courseid');
+        $mform->setType('courseid', PARAM_INT);
+        $mform->setDefault('courseid', $courseid);
+
+        $mform->addElement('hidden', 'action', $action);
+        $mform->setType('action', PARAM_TEXT);
+        $mform->disable_form_change_checker();
+    }
+
+    public function validation($data, $files) {
+        global $CFG;
+
+        $errors = array();
+
+        // Submit is redirected if error occurs, so we store errordata in session.
+        $sessionerrordata = array();
+        $cache = cache::make('format_socialwall', 'postformerrors');
+        $cache->delete($data['id']);
+
+        // ... do validation of externalurl.
+        if (!empty($data['externalurl'])) {
+
+            include_once($CFG->libdir . '/validateurlsyntax.php');
+
+            if (!validateUrlSyntax($data['externalurl'])) {
+
+                $errors['externalurl'] = get_string('invalidurl', 'url');
+                $sessionerrordata['externalurl'] = array('message' => $errors['externalurl'], 'value' => $data['externalurl']);
+            }
+        }
+
+        // ... check if post is all empty.
+        if (isset($data['submitbutton'])) {
+            $empty = (empty($data['posttext']) && empty($data['cmsequence']) && empty($data['externalurl']) && empty($files));
+            if ($empty) {
+                $errors['posttext'] = get_string('attachmentorpostrequired', 'format_socialwall');
+                $sessionerrordata['posttext'] = array('message' => $errors['posttext'], 'value' => $data['posttext']);
+            }
+        }
+
+        // ... store or clean.
+        if (!empty($sessionerrordata)) {
+            $cache->set($data['id'], $sessionerrordata);
+        }
+
+        return $errors;
+    }
+
+    public function set_data($post) {
+        global $DB;
+
+        if ($post->id == 0) {
+            return;
+        }
+
+        // Get attached activities for existing post.
+        if ($cmids = $DB->get_records('format_socialwall_attaches', array('postid' => $post->id), '', 'coursemoduleid')) {
+            $cache = cache::make('format_socialwall', 'attachedrecentactivities');
+            $cache->set($post->courseid . '_' . $post->id, array_keys($cmids));
+            $post->cmsequence = implode(',', array_keys($cmids));
+        }
+
+        // Post was already loaded the first time so take values from cache, which are already loaded.
+        $cache = cache::make('format_socialwall', 'postformparams');
+        if ($formparams = $cache->get($post->courseid . '_' . $post->id)) {
+            return;
+        }
+
+        $post->poststatus = 0;
+
+        if (!empty($post->sticky)) {
+            $post->poststatus = 1;
+        }
+
+        if (!empty($post->private)) {
+            $post->poststatus = 2;
+        }
+
+        if (!empty($post->alert)) {
+            $post->poststatus = 4;
+        }
+
+        parent::set_data($post);
+
+        // Set the cache for this post to keep values during the next page changes.
+        $formparams = $cache->get($post->courseid . '_' . $post->id);
+        $formparams['posttext'] = $post->posttext;
+        $formparams['togroupid'] = $post->togroupid;
+        $formparams['poststatus'] = $post->poststatus;
+        $cache->set($post->courseid . '_' . $post->id, $formparams);
+
+        $mform = & $this->_form;
+        $element = $mform->getElement('posttext');
+        if ($element->getType() == 'editor') {
+            $element->setValue(array('text' => $post->posttext));
+        }
+    }
+
+    protected function get_form_identifier() {
+        global $USER;
+
+        $postid = (!empty($this->_customdata['options']->postid)) ? $this->_customdata['options']->postid : 0;
+        return get_class($this) . '_' . $postid . '_' . $USER->id;
+    }
+
+}
diff --git a/course/format/socialwall/pix/lockedpost.png b/course/format/socialwall/pix/lockedpost.png
new file mode 100644
index 0000000000000000000000000000000000000000..3ad50b32c4f847668b2f1af9745c1d586242503b
GIT binary patch
literal 306
zcmeAS@N?(olHy`uVBq!ia0vp^5+KaM1SIoCSFHz9Y)RhkE)4%caKYZ?lYt`7JzX3_
zEPCHgIh)(!z|$&!QLMqOL#XG0gLI50bJb%9<`Bb69MW10org^x*gk0&y~rn>%I`U)
z{PT~Omv2-REm>937B|m{vB2`mnVhwExA8U@F4OT=s$vnj+jp(>t^tqB6cx^f(%9vh
zt5&UA_quq}zV4Z`mnEj{y=c*wd;8qyHR-p?pUgS^`Hz9ev{aXrwYGmR@O`>>yztM>
z#Ga4$>KVWI{!I*6vg(|rVB|Dbhgr+mj~}-d6m>1+FJV+rQYz9vxIROWv4Dxm!R6tP
zZ?*C-9;xg7mj5E{nBOQevET{Q#rux^bIO&tZm(0B+_&GQ;Tk*8%M6~belF{r5}E+Y
CIDka}

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/pix/lockedpost.svg b/course/format/socialwall/pix/lockedpost.svg
new file mode 100644
index 0000000..23fe446
--- /dev/null
+++ b/course/format/socialwall/pix/lockedpost.svg
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="24"
+   height="24"
+   id="svg2"
+   version="1.1"
+   inkscape:version="0.48.2 r9819"
+   sodipodi:docname="Neues Dokument 1">
+  <defs
+     id="defs4" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="32.041667"
+     inkscape:cx="6.023407"
+     inkscape:cy="12"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showgrid="true"
+     inkscape:window-width="1680"
+     inkscape:window-height="988"
+     inkscape:window-x="-8"
+     inkscape:window-y="-8"
+     inkscape:window-maximized="1">
+    <inkscape:grid
+       type="xygrid"
+       id="grid2987"
+       empspacing="5"
+       visible="true"
+       enabled="true"
+       snapvisiblegridlinesonly="true" />
+  </sodipodi:namedview>
+  <metadata
+     id="metadata7">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Ebene 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(0,-1028.3622)">
+    <rect
+       style="fill:#ffffff;fill-opacity:1;stroke:#666666;stroke-width:1.22474492;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect5195"
+       width="8"
+       height="12"
+       x="4"
+       y="1031.3622"
+       ry="3.0000174" />
+    <rect
+       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect5197"
+       width="21"
+       height="11"
+       x="2"
+       y="12"
+       transform="translate(0,1028.3622)" />
+    <rect
+       style="fill:#ffffff;fill-opacity:1;stroke:#666666;stroke-width:1.04880714;stroke-linecap:butt;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect2989"
+       width="12"
+       height="10.999966"
+       x="2"
+       y="1040.3622" />
+  </g>
+</svg>
diff --git a/course/format/socialwall/pix/stickypost.png b/course/format/socialwall/pix/stickypost.png
new file mode 100644
index 0000000000000000000000000000000000000000..f108b14175e0e8dad576ee043c0b0f577cdaf814
GIT binary patch
literal 539
zcmV+$0_6RPP)<h;3K|Lk000e1NJLTq000;O000;W0ssI2ZxyPq00006VoOIv0RI60
z0RN!9r;`8x0nkZAK~y-6tyDd$>Od6Sy{5^o1V4x=tQ3``(9TK-YGobJ%3iGOt!(`d
zR+b7D`3-`FLK;(;q_GI1q69>i2<j{H2*Jcly!TGE%o%3qoU<%^KA+$(K!wzuPN&Ia
zVi*R5uuv#8o6UGU?iIi=iFUi)a5yA{xC~9xgTWvci@D5Km^ic9%<BRGAcRb(Q!f+B
zXtUY)NmW%pHVVYcOhOq6g5W24p8wcLk|czXmq7?glH_GVt)FFCj^k|GKA+D{z*ei3
zNF+Wsl4Y4;m~OWVA$+HybY0hVJ)l5Ql}ZI;tg7mAx$O7*5JFAU48!n?MNy=-+pTGu
zxm@n0RxB1V#+GG`$Ky_?gE2lHkEUtTH2tES&*$ZGnF0W0GMQSf=D+9hc#KA)YPFip
zW&r>!%Ld96MFH-N4u`{fy>`yYWU^E$K?r48MhG<;jr;w+TCJ|vtKX$wuRDi;^{3Nm
z2%)a)i^ZbdZabq1bn)VUqEss7dOL_lqrF~_VHf~_AP9kPGQh~&ngfpGc%HW`OHq_>
zehByax9@1b-xES?+Yb5jy>0DNylpKczT4Wb68%kUnx@@uw;x+vE*Ag*mCxrRk;red
dh@yxw{s(3mx8M_bbV>jK002ovPDHLkV1icm_n!a&

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/pix/stickypost.svg b/course/format/socialwall/pix/stickypost.svg
new file mode 100644
index 0000000..c8cc1df
--- /dev/null
+++ b/course/format/socialwall/pix/stickypost.svg
@@ -0,0 +1,106 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="24"
+   height="24"
+   id="svg2"
+   version="1.1"
+   inkscape:version="0.48.2 r9819"
+   sodipodi:docname="stickypost.svg">
+  <defs
+     id="defs4" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="32.041667"
+     inkscape:cx="12"
+     inkscape:cy="12"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:window-width="1680"
+     inkscape:window-height="988"
+     inkscape:window-x="-8"
+     inkscape:window-y="-8"
+     inkscape:window-maximized="1">
+    <inkscape:grid
+       type="xygrid"
+       id="grid3779"
+       empspacing="5"
+       visible="true"
+       enabled="true"
+       snapvisiblegridlinesonly="true" />
+  </sodipodi:namedview>
+  <metadata
+     id="metadata7">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Ebene 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(0,-1028.3622)">
+    <path
+       style="opacity:0.9;fill:#808080;stroke:#666666;stroke-width:0.95016502999999997px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
+       d="M 2.6666667,1042.3622 21,1042.3622"
+       id="path3777"
+       inkscape:connector-curvature="0" />
+    <rect
+       style="opacity:0.9;fill:none;stroke:#656565;stroke-width:0.97086035999999998;stroke-linecap:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect2993"
+       width="21.666666"
+       height="11.999983"
+       x="1"
+       y="1039.3622" />
+    <path
+       inkscape:connector-curvature="0"
+       id="path3775"
+       d="M 2.6666667,1045.3622 21,1045.3622"
+       style="opacity:0.9;fill:#808080;stroke:#666666;stroke-width:0.95016502999999997px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
+    <path
+       style="fill:#ffffff;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       d="m 8,1044.3622 11,-14"
+       id="path3765"
+       inkscape:connector-curvature="0" />
+    <path
+       inkscape:connector-curvature="0"
+       id="path3767"
+       d="m 9,1043.3622 9,-12"
+       style="fill:none;stroke:#666666;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" />
+    <path
+       sodipodi:type="arc"
+       style="fill:#666666;fill-opacity:1;stroke:#ffffff;stroke-width:0;stroke-linecap:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="path3773"
+       sodipodi:cx="22.824448"
+       sodipodi:cy="6.6579976"
+       sodipodi:rx="5.0143042"
+       sodipodi:ry="5.0351105"
+       d="m 27.838752,6.6579976 a 5.0143042,5.0351105 0 1 1 -10.028609,0 5.0143042,5.0351105 0 1 1 10.028609,0 z"
+       transform="matrix(0.79771786,0,0.00283074,0.79441626,-2.2263166,1028.073)" />
+    <path
+       style="opacity:0.9;fill:#808080;stroke:#666666;stroke-width:0.95016502999999997px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
+       d="M 2.6666667,1048.3622 21,1048.3622"
+       id="path2995"
+       inkscape:connector-curvature="0" />
+  </g>
+</svg>
diff --git a/course/format/socialwall/pix/unlockedpost.png b/course/format/socialwall/pix/unlockedpost.png
new file mode 100644
index 0000000000000000000000000000000000000000..b95532586110998c48062c5224182f4c0e638e57
GIT binary patch
literal 318
zcmV-E0m1%>P)<h;3K|Lk000e1NJLTq000;O000;W0ssI2ZxyPq00006VoOIv0RI60
z0RN!9r;`8x0P{&iK~y-6?UFl=gFp<1J*)Hx8bk}o1t26i0Y{+Z1{{rcuD}rxPr0F^
z2U?`rVxrAM$v}}JiT3Y2{`6^VnF%4_75RCI1prP5xu$8_ww>o$mYSydz8?g^AHa@`
zRun~9mbPtMmc<woLQK;%j$@J}S(cq4v6rf<@;tBWTK&GiqhT0a*S(%XCJaNzar(ZO
z<-TZLS6$a1whY5qmgT7EV7^#%0)VdTi0B!yZ5se^&Joe`yz5pR$2TG(A|gb5C^Ah`
zG5~NVilXR71OSMbrm5oRoO4AN-f`LgqE8f^50Z$~C#N|5i%3n#Afg)k1zxL;xyMA4
Qc>n+a07*qoM6N<$f{x3D^8f$<

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/pix/unlockedpost.svg b/course/format/socialwall/pix/unlockedpost.svg
new file mode 100644
index 0000000..2f78b18
--- /dev/null
+++ b/course/format/socialwall/pix/unlockedpost.svg
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="24"
+   height="24"
+   id="svg2"
+   version="1.1"
+   inkscape:version="0.48.2 r9819"
+   sodipodi:docname="unlockedpost.svg">
+  <defs
+     id="defs4" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="32.041667"
+     inkscape:cx="12"
+     inkscape:cy="12"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:window-width="1680"
+     inkscape:window-height="988"
+     inkscape:window-x="-8"
+     inkscape:window-y="-8"
+     inkscape:window-maximized="1">
+    <inkscape:grid
+       type="xygrid"
+       id="grid2987"
+       empspacing="5"
+       visible="true"
+       enabled="true"
+       snapvisiblegridlinesonly="true" />
+  </sodipodi:namedview>
+  <metadata
+     id="metadata7">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Ebene 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(0,-1028.3622)">
+    <rect
+       style="fill:#ffffff;fill-opacity:1;stroke:#666666;stroke-width:1.29903817;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect5195"
+       width="9"
+       height="12"
+       x="-21"
+       y="1031.3622"
+       ry="3.0000174"
+       transform="scale(-1,1)" />
+    <rect
+       style="fill:#ffffff;fill-opacity:1;stroke:#ffffff;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect5197"
+       width="21"
+       height="11"
+       x="2"
+       y="12"
+       transform="translate(0,1028.3622)" />
+    <rect
+       style="fill:#ffffff;fill-opacity:1;stroke:#666666;stroke-width:1.04880714;stroke-linecap:butt;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect2989"
+       width="12"
+       height="10.999966"
+       x="2"
+       y="1040.3622" />
+  </g>
+</svg>
diff --git a/course/format/socialwall/pix/unstickypost.png b/course/format/socialwall/pix/unstickypost.png
new file mode 100644
index 0000000000000000000000000000000000000000..0599012de3adb04a32e909857adfd49763afc8f3
GIT binary patch
literal 209
zcmeAS@N?(olHy`uVBq!ia0vp^5+KaM1SIoCSFHz9Y)RhkE)4%caKYZ?lYt^_o-U3d
z7QJsTEaY=m<YB##_uxZ?&<~az;U8r-Y_6hA%|{bwD9oJsSW#`qvbC0(zh@O6>fF<>
zA-?Ov!U83wMeSTlpMt#BhGy?w+aj=Ls|>@GpmRHOHI8vG)bOs|I^|N^qrLHGcc!mb
zTKeZ!|AOjU`TzcGne$m9dG?FF%nato435ov)70VA!S8v>MB4Gf;axx%F?hQAxvX<a
GXaWH7pHwpd

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/pix/unstickypost.svg b/course/format/socialwall/pix/unstickypost.svg
new file mode 100644
index 0000000..e71b83e
--- /dev/null
+++ b/course/format/socialwall/pix/unstickypost.svg
@@ -0,0 +1,86 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   width="24"
+   height="24"
+   id="svg2"
+   version="1.1"
+   inkscape:version="0.48.2 r9819"
+   sodipodi:docname="unstickypost.svg">
+  <defs
+     id="defs4" />
+  <sodipodi:namedview
+     id="base"
+     pagecolor="#ffffff"
+     bordercolor="#666666"
+     borderopacity="1.0"
+     inkscape:pageopacity="0.0"
+     inkscape:pageshadow="2"
+     inkscape:zoom="32.041667"
+     inkscape:cx="12"
+     inkscape:cy="12"
+     inkscape:document-units="px"
+     inkscape:current-layer="layer1"
+     showgrid="false"
+     inkscape:window-width="1680"
+     inkscape:window-height="988"
+     inkscape:window-x="-8"
+     inkscape:window-y="-8"
+     inkscape:window-maximized="1">
+    <inkscape:grid
+       type="xygrid"
+       id="grid3779"
+       empspacing="5"
+       visible="true"
+       enabled="true"
+       snapvisiblegridlinesonly="true" />
+  </sodipodi:namedview>
+  <metadata
+     id="metadata7">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label="Ebene 1"
+     inkscape:groupmode="layer"
+     id="layer1"
+     transform="translate(0,-1028.3622)">
+    <path
+       style="opacity:0.9;fill:#808080;stroke:#666666;stroke-width:0.95016502999999997px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
+       d="M 2.6666667,1042.3622 21,1042.3622"
+       id="path3777"
+       inkscape:connector-curvature="0" />
+    <rect
+       style="opacity:0.9;fill:none;stroke:#656565;stroke-width:0.97086035999999998;stroke-linecap:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       id="rect2993"
+       width="21.666666"
+       height="11.999983"
+       x="1"
+       y="1039.3622" />
+    <path
+       inkscape:connector-curvature="0"
+       id="path3775"
+       d="M 2.6666667,1045.3622 21,1045.3622"
+       style="opacity:0.9;fill:#808080;stroke:#666666;stroke-width:0.95016502999999997px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />
+    <path
+       style="opacity:0.9;fill:#808080;stroke:#666666;stroke-width:0.95016502999999997px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
+       d="M 2.6666667,1048.3622 21,1048.3622"
+       id="path2995"
+       inkscape:connector-curvature="0" />
+  </g>
+</svg>
diff --git a/course/format/socialwall/renderer.php b/course/format/socialwall/renderer.php
new file mode 100644
index 0000000..fc1bd5f
--- /dev/null
+++ b/course/format/socialwall/renderer.php
@@ -0,0 +1,937 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Renderer for outputting the socialwall course format.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ * @since Moodle 2.3
+ */
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot . '/course/format/topics/renderer.php');
+require_once($CFG->dirroot . '/course/format/socialwall/pages/comment_form.php');
+
+/**
+ * Basic renderer for socialwall format.
+ *
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+class format_socialwall_renderer extends format_topics_renderer {
+
+    protected $commentsformshow = 0;
+
+    /**
+     * Get data for user and render author div to display author 
+     * 
+     * @param int $userid
+     * @param array $authors list of existing autors
+     * @return array userdata of author and  HTML String for displaying users picture and name.
+     */
+    private function get_timeline_author($userid, $authors) {
+
+        // ... setup user for display.
+        if (isset($authors[$userid])) {
+
+            // ...existing user.
+            $postauthor = $authors[$userid];
+
+            $userpicture = new \user_picture($postauthor);
+            $o = $this->output->render($userpicture);
+        } else {
+
+            // ... user doesn't exist, i. e. is unknown.
+            $postauthor = (object) array('firstname' => '', 'lastname' => get_string('unknownuser', 'format_socialwall'),
+                        'firstnamephonetic' => '', 'lastnamephonetic' => '', 'middlename' => '', 'alternatename' => '');
+
+            $attributes = array('src' => $this->output->pix_url('u/user35'));
+            $o = html_writer::empty_tag('img', $attributes);
+        }
+
+        $o = html_writer::tag('div', $o, array('class' => 'tl-author'));
+        return array($postauthor, $o);
+    }
+
+    /**
+     * Renders the string for displaying how long ago is a comment posted
+     * 
+     * @param int $time timestamp for posted time
+     * @return string
+     */
+    protected function render_timeline_comment_ago($time) {
+
+        $starttime = $time;
+        $endtime = time();
+
+        $seconds = $endtime - $starttime;
+        if ($seconds < 60) {
+            return get_string('timeagosec', 'format_socialwall', $seconds);
+        }
+
+        $minutes = floor($seconds / 60);
+
+        if ($minutes < 60) {
+            return get_string('timeagomin', 'format_socialwall', $minutes);
+        }
+
+        $hours = floor($minutes / 60);
+        $minutes = $minutes % 60;
+
+        if ($hours < 24) {
+            return get_string('timeagohours', 'format_socialwall', array('minutes' => $minutes, 'hours' => $hours));
+        }
+
+        $days = floor($hours / 24);
+        $hours = $hours % 24;
+
+        if ($days < 30) {
+            return get_string('timeagodays', 'format_socialwall', array('days' => $days, 'hours' => $hours));
+        }
+
+        // ... must be a little different calculated.
+        $start = new DateTime();
+        $start->setTimestamp($starttime);
+
+        $end = new DateTime();
+        $end->setTimestamp($endtime);
+
+        $interval = $start->diff($end);
+
+        if ($days < 300) {
+            return $interval->format(get_string('timeagomonthdays', 'format_socialwall'));
+        }
+
+        return $interval->format(get_string('timeagoyearsdays', 'format_socialwall'));
+    }
+
+    /**
+     * Render a reply for a comment
+     * 
+     * @param object $post
+     * @param object $comment
+     * @param [object] $authors
+     * @param object $coursecontext
+     * @param object $course
+     * @return string listitem for replies list.
+     */
+    public function render_timeline_replies($post, $comment, $authors,
+                                            $coursecontext, $course) {
+        $li = '';
+        if (!empty($comment->replies)) {
+
+            foreach ($comment->replies as $replycomment) {
+                $li .= $this->render_timeline_comment($post, $replycomment, $authors, $coursecontext, $course);
+            }
+        }
+
+        return $li;
+    }
+
+    /**
+     * Renders a timeline comment
+     * 
+     * @param record $comment
+     * @param array $authors the already retrieved authors for posts and comments
+     * @param object $coursecontext
+     * @return string HTML for the comment
+     */
+    protected function render_timeline_comment($post, $comment, $authors,
+                                               $coursecontext, $course) {
+        global $USER;
+
+        list($commentauthor, $o) = $this->get_timeline_author($comment->fromuserid, $authors);
+
+        $dl = '';
+
+        $candeletecomment = ($comment->fromuserid == $USER->id);
+        $candeletecomment = ($candeletecomment and has_capability('format/socialwall:deleteowncomment', $coursecontext));
+        $candeletecomment = ($candeletecomment or has_capability('format/socialwall:deleteanycomment', $coursecontext));
+
+        if ($candeletecomment) {
+
+            $urlparams = array(
+                'id' => $comment->courseid, 'action' => 'deletecomment',
+                'cid' => $comment->id, 'sesskey' => sesskey()
+            );
+
+            $url = new moodle_url('/course/format/socialwall/action.php', $urlparams);
+            $deleteicon = $this->output->pix_icon('t/delete', get_string('delete'));
+            $deletelink = html_writer::link($url, $deleteicon, array('id' => 'tldeletecomment_' . $comment->id));
+            $dl = html_writer::tag('span', $deletelink, array('class' => 'tl-action-icons'));
+        }
+
+        $c = html_writer::tag('div', fullname($commentauthor) . $dl, array('class' => 'tl-authorname'));
+        $c .= html_writer::tag('div', $comment->text);
+        $c .= html_writer::tag('span', $this->render_timeline_comment_ago($comment->timecreated), array('class' => 'tl-timeago'));
+
+        $o .= html_writer::tag('div', $c, array('class' => 'tl-text'));
+
+        // Render comments reply form.
+        $actionlink = '';
+        $r = $this->render_timeline_comments_form($actionlink, $coursecontext, $post, $comment);
+
+        // Render comments replies.
+        $li = $this->render_timeline_replies($post, $comment, $authors, $coursecontext, $course);
+        $r .= html_writer::tag('ul', $li, array('class' => 'tl-comments', 'id' => 'tlcomments_' . $post->id . '_' . $comment->id));
+
+        $morerepliescount = $comment->countreplies - $course->tlnumreplies;
+        if ($morerepliescount > 0) {
+
+            $url = new moodle_url('/course/format/socialwall/action.php');
+            $strmore = get_string('showallreplies', 'format_socialwall', $morerepliescount);
+            $l = html_writer::link('#', $strmore, array('id' => 'tlshowallreplies_' . $comment->id));
+            $r .= html_writer::tag('div', $l, array('class' => 'tl-showall'));
+        }
+
+        $o .= html_writer::tag('div', $r, array('class' => 'tl-comment-replywrapper'));
+
+        return html_writer::tag('li', $o, array('class' => 'tl-comment', 'id' => 'tlcomment_' . $comment->id));
+    }
+
+    /**
+     * Renders all the comments for a post
+     * 
+     * @param object $post
+     * @param array $authors the already retrieved authors for posts and comments
+     * @param course_context $context
+     * @return string HTML al all comment for one post
+     */
+    protected function render_timeline_comments($post, $authors, $context,
+                                                $course) {
+
+        $o = '';
+        if (!empty($post->comments)) {
+
+            foreach ($post->comments as $comment) {
+
+                $o .= $this->render_timeline_comment($post, $comment, $authors, $context, $course);
+            }
+        }
+
+        return $o;
+    }
+
+    /**
+     * Render a form in the timeline
+     * 
+     * @param int $courseid
+     * @param string $fields HTML for the formelements.
+     * @param array $params params for the form tag.
+     * @return string
+     */
+    protected function render_timeline_form($courseid, $fields,
+                                            $params = array()) {
+
+        $params['method'] = 'post';
+
+        $f = html_writer::start_tag('form', $params);
+        $f .= html_writer::empty_tag('input', array('type' => 'hidden', 'name' => 'id', 'value' => $courseid));
+        $f .= $fields;
+        $f .= html_writer::end_tag('form');
+
+        return $f;
+    }
+
+    /**
+     * Render grades, if timeline post contains gradable modules
+     * 
+     * @param array $authors the already retrieved authors for posts and comments
+     * @param record $gradedata
+     * @return string HTML for grading information
+     */
+    protected function render_timeline_grades($authors, $gradedata) {
+        global $USER;
+
+        if (!$usergrade = $gradedata->grades[$USER->id]) {
+            return '';
+        }
+
+        list($grader, $o) = $this->get_timeline_author($usergrade->usermodified, $authors);
+        $a = new stdClass();
+        $a->name = $gradedata->name;
+        $a->result = $usergrade->str_long_grade;
+        $c = html_writer::tag('div', fullname($grader));
+        $c .= html_writer::tag('div', get_string('gradednote', 'format_socialwall', $a));
+        $c .= html_writer::tag('div', $usergrade->feedback);
+        $o .= html_writer::tag('div', $c);
+
+        return html_writer::tag('li', $o, array('class' => 'tl_gradednote'));
+    }
+
+    /**
+     * Render the form to write a timeline comment or a reply to a comment
+     * 
+     * @param string $actionlink the HTML output, where this HTML will be added
+     * @param course_context $coursecontext
+     * @param object $post
+     * @param object $replycomment, if not null we render a form to write a reply to a comment.
+     * @return type
+     */
+    protected function render_timeline_comments_form($actionlink,
+                                                     $coursecontext, $post,
+                                                     $replycomment = null) {
+
+        $actionarea = '';
+
+        $capcomment = (has_capability('format/socialwall:writecomment', $coursecontext));
+
+        // Replies are not in threaded fashion, is this a toplevel comment?
+        $replycommentid = (!isset($replycomment)) ? 0 : $replycomment->id;
+        $canreply = (($replycommentid == 0) or ( $replycomment->replycommentid == 0));
+
+        if ($capcomment and $canreply) {
+
+            $style = (empty($post->locked)) ? '' : 'display:none';
+
+            $urlparams = array('courseid' => $post->courseid, 'postid' => $post->id, 'commentsformshow' => $post->id . '_' . $replycommentid);
+            $url = new moodle_url('/course/view.php', $urlparams);
+            $urltext = (empty($replycommentid)) ? get_string('writecomment', 'format_socialwall') : get_string('replycomment', 'format_socialwall');
+            $actionlink .= html_writer::link($url, $urltext, array('id' => "showcommentform_{$post->id}_{$replycommentid}", 'style' => $style));
+
+            $actionarea .= html_writer::tag('div', $actionlink, array('class' => 'tl-actionlink'));
+        }
+
+        if ($capcomment and $canreply) {
+
+            $formparams = array('postid' => $post->id, 'courseid' => $post->courseid, 'replycommentid' => $replycommentid);
+            $url = new moodle_url('/course/format/socialwall/action.php', $formparams);
+            $commentform = new comment_form($url, $formparams, 'post', '', array('id' => 'tlcommentform_' . $post->id . '_' . $replycommentid));
+
+            if (!$commentform->has_errors() and $this->commentsformshow != $post->id . '_' . $replycommentid) {
+                $style = 'display:none';
+            }
+
+            $params = array('class' => 'tl-commentform', 'id' => "tlcommentformwrap_{$post->id}_{$replycommentid}", 'style' => $style);
+
+            $actionarea .= html_writer::tag('div', $commentform->render(), $params);
+        }
+
+        return $actionarea;
+    }
+
+    /**
+     * Renders a timeline post.
+     * 
+     * @param object $course
+     * @param object $post
+     * @param object $completion
+     * @param array $authors the already retrieved authors for posts and comments
+     * @return string HTML for post
+     */
+    protected function render_timeline_post($course, $post, $completion,
+                                            $authors) {
+        global $USER;
+
+        $coursecontext = context_course::instance($post->courseid);
+
+        list($postauthor, $l) = $this->get_timeline_author($post->fromuserid, $authors);
+
+        $o = html_writer::tag('div', $l, array('class' => 'tl-leftcol'));
+
+        // ... determine group for headline.
+        if (empty($post->togroupid)) {
+
+            $to = get_string('allparticipants');
+        } else {
+
+            $groups = groups_get_all_groups($post->courseid);
+            $to = (isset($groups[$post->togroupid])) ?
+                    get_string('group') . ' ' . $groups[$post->togroupid]->name :
+                    get_string('nonexistinggroup', 'format_socialwall');
+        }
+
+        $date = userdate($post->timecreated);
+        $authorspan = html_writer::tag('span', fullname($postauthor), array('class' => 'tl-authorname'));
+        $headline = get_string('postedonto', 'format_socialwall', array('author' => $authorspan, 'date' => $date, 'to' => $to));
+
+        // ... add delete icon, if delete is possible.
+        $candeletepost = (($post->fromuserid == $USER->id) and ( has_capability('format/socialwall:deleteownpost', $coursecontext)));
+        $candeletepost = ($candeletepost or has_capability('format/socialwall:deleteanypost', $coursecontext));
+
+        if ($candeletepost) {
+
+            $urlparams = array('courseid' => $post->courseid, 'action' => 'deletepost', 'pid' => $post->id, 'sesskey' => sesskey());
+            $url = new moodle_url('/course/format/socialwall/action.php', $urlparams);
+            $deletelink = html_writer::link($url, $this->output->pix_icon('t/delete', get_string('delete')));
+
+            $headline .= html_writer::tag('span', $deletelink, array('class' => 'tl-action-icons'));
+        }
+
+        // ... add edit icon, if edting is allowed.
+        $caneditpost = (($post->fromuserid == $USER->id) and ( has_capability('format/socialwall:updateownpost', $coursecontext)));
+        $caneditpost = ($caneditpost or has_capability('format/socialwall:updateanypost', $coursecontext));
+
+        if ($caneditpost) {
+
+            $url = new moodle_url('/course/view.php', array('id' => $post->courseid, 'postid' => $post->id));
+            $editlink = html_writer::link($url, $this->output->pix_icon('t/editstring', get_string('edit')));
+
+            $headline .= html_writer::tag('span', $editlink, array('class' => 'tl-action-icons'));
+        }
+
+        // ...
+        if (!empty($post->posttext)) {
+            // ...user with cap format/socialwall:posthtml should be able to html.
+            $headline .= html_writer::tag('div', format_text($post->posttext), array('class' => 'tl-posttext'));
+        }
+
+        if (!empty($post->attaches)) {
+
+            $modinfo = get_fast_modinfo($post->courseid);
+
+            $modulehtml = '';
+            foreach ($post->attaches as $attachment) {
+
+                $cm = $modinfo->get_cm($attachment->coursemoduleid);
+                $modulehtml .= $this->courserenderer->course_section_cm_list_item($course, $completion, $cm, 0);
+
+                if (isset($post->grades[$attachment->coursemoduleid])) {
+                    $modulehtml .= $this->render_timeline_grades($authors, $post->grades[$attachment->coursemoduleid]);
+                }
+            }
+
+            if (!empty($modulehtml)) {
+                $headline .= html_writer::tag('ul', $modulehtml, array('class' => 'section tl-postattachment'));
+            }
+        }
+
+        $p = '';
+
+        if (has_capability('format/socialwall:lockcomment', $coursecontext)) {
+
+            $class = (!empty($post->locked)) ? 'locked' : 'unlocked';
+
+            $urlparams = array(
+                'courseid' => $post->courseid, 'postid' => $post->id, 'action' => 'lockpost',
+                'locked' => empty($post->locked), 'sesskey' => sesskey()
+            );
+
+            $url = new moodle_url('/course/format/socialwall/action.php', $urlparams);
+
+            if (!empty($post->locked)) {
+
+                $pixicon = $this->output->pix_icon('lockedpost', get_string('unlockpost', 'format_socialwall'), 'format_socialwall');
+            } else {
+
+                $pixicon = $this->output->pix_icon('unlockedpost', get_string('lockpost', 'format_socialwall'), 'format_socialwall');
+            }
+
+            $link = html_writer::link($url, $pixicon, array('id' => 'lockpost_' . $post->id, 'class' => $class));
+            $p .= html_writer::tag('div', $link, array('class' => 'tl-locked'));
+        }
+
+        if (has_capability('format/socialwall:makesticky', $coursecontext)) {
+
+            $urlparams = array(
+                'courseid' => $post->courseid, 'postid' => $post->id, 'action' => 'makesticky',
+                'sticky' => empty($post->sticky), 'sesskey' => sesskey()
+            );
+
+            $url = new moodle_url('/course/format/socialwall/action.php', $urlparams);
+
+            if (!empty($post->sticky)) {
+
+                $pixicon = $this->output->pix_icon('stickypost', get_string('makeunsticky', 'format_socialwall'), 'format_socialwall');
+            } else {
+
+                $pixicon = $this->output->pix_icon('unstickypost', get_string('makesticky', 'format_socialwall'), 'format_socialwall');
+            }
+
+            $link = html_writer::link($url, $pixicon);
+            $p .= html_writer::tag('div', $link, array('class' => 'tl-sticky'));
+        } else {
+
+            // ...cannot edit stickyness of post.
+            if (!empty($post->sticky)) {
+
+                $pixicon = $this->output->pix_icon('stickypost', get_string('sticky', 'format_socialwall'), 'format_socialwall');
+                $p .= html_writer::tag('div', $pixicon, array('class' => 'tl-sticky'));
+            }
+        }
+
+        if ($post->timecreated != $post->timemodified) {
+
+            $c = html_writer::tag('div', get_string('edited', 'format_socialwall'), array('class' => 'tl-edited'));
+
+            $editedago = $this->render_timeline_comment_ago($post->timemodified);
+            $c .= html_writer::tag('div', "[{$editedago}]", array('class' => 'tl-edited-ago'));
+
+            $p .= html_writer::tag('div', $c, array('class' => 'tl-edited-wrapper'));
+        }
+
+        $p .= html_writer::tag('div', $headline);
+
+        $countoutput = '';
+        if (!empty($course->enablelikes) and has_capability('format/socialwall:viewlikes', $coursecontext)) {
+
+            $countlikessstr = get_string('countlikes', 'format_socialwall', $post->countlikes);
+            $countoutput .= html_writer::tag('span', $countlikessstr, array('id' => 'tlcountlikes_' . $post->id));
+        }
+
+        $countcommentsstr = get_string('countcomments', 'format_socialwall', $post->countcomments);
+        $countoutput .= html_writer::tag('span', $countcommentsstr, array('id' => 'tlcountcomments_' . $post->id));
+
+        $actionarea = html_writer::tag('div', $countoutput, array('class' => 'tl-counts'));
+
+        $stralldiscussions = get_string('showalldicussions', 'format_socialwall');
+        $showalldiscussions = $l = html_writer::link('#', $stralldiscussions, array('id' => 'tlshowalldiscussions_' . $post->id));
+
+        $actionlink = html_writer::tag('div', $showalldiscussions, array('style' => 'float:right'));
+
+        if (!empty($course->enablelikes) and has_capability('format/socialwall:like', $coursecontext)) {
+
+            $class = (!empty($post->userlike)) ? 'likenomore' : 'like';
+
+            $urlparams = array(
+                'courseid' => $post->courseid, 'postid' => $post->id, 'action' => 'likepost',
+                'userlike' => empty($post->userlike), 'sesskey' => sesskey()
+            );
+
+            $url = new moodle_url('/course/format/socialwall/action.php', $urlparams);
+            $urlparams = array('class' => $class, 'id' => "userlike_{$post->id}");
+            $actionlink .= html_writer::link($url, get_string($class, 'format_socialwall'), $urlparams);
+        }
+
+        $actionarea .= $this->render_timeline_comments_form($actionlink, $coursecontext, $post);
+        $p .= html_writer::tag('div', $actionarea, array('class' => 'tl-post-actionarea'));
+
+        // ... print out all comments.
+        $c = $this->render_timeline_comments($post, $authors, $coursecontext, $course);
+        $p .= html_writer::tag('ul', $c, array('class' => 'tl-comments', 'id' => 'tlcomments_' . $post->id . '_0'));
+
+        $morecommentscount = $post->countcomments - $course->tlnumcomments;
+        if ($morecommentscount > 0) {
+
+            $url = new moodle_url('/course/format/socialwall/action.php');
+            $strmore = get_string('showallcomments', 'format_socialwall', $morecommentscount);
+            $l = html_writer::link('#', $strmore, array('id' => 'tlshowall_' . $post->id));
+            $p .= html_writer::tag('div', $l, array('class' => 'tl-showall'));
+        }
+
+        $o .= html_writer::tag('div', $p, array('class' => 'tl-text'));
+
+        $text = html_writer::tag('li', $o, array('class' => 'tl-post'));
+        return filter_manager::instance()->filter_text($text, $coursecontext);
+    }
+
+    /**
+     * Renders a form for filtering and ording the timeline posts
+     * 
+     * @param object $course
+     * @param object $filteroptions
+     * @return string HTML for the form.
+     */
+    protected function render_timeline_filterform($course, $filteroptions) {
+        global $USER;
+
+        if (!empty($filteroptions->showalert)) {
+
+            $content = html_writer::tag('h4', get_string('showalert', 'format_socialwall'));
+            $url = new moodle_url('/course/view.php', array('id' => $course->id));
+
+            $content .= $this->output->single_button($url, get_string('showallposts', 'format_socialwall'));
+
+            return $content;
+        }
+
+        if (!empty($filteroptions->postid)) {
+
+            $content = html_writer::tag('h4', get_string('updatepostfiltered', 'format_socialwall'));
+            $url = new moodle_url('/course/format/socialwall/action.php', array('courseid' => $course->id, 'action' => 'resetfilter'));
+
+            $content .= $this->output->single_button($url, get_string('showallposts', 'format_socialwall'));
+
+            return $content;
+        }
+
+        // Filter by group.
+        $coursecontext = context_course::instance($course->id);
+
+        if ((groups_get_course_groupmode($course) == SEPARATEGROUPS) && (!has_capability('moodle/course:managegroups', $coursecontext))) {
+
+            $allgroups = groups_get_all_groups($course->id, $USER->id);
+            $alllabel = get_string('allmygroups', 'format_socialwall');
+        } else {
+
+            $allgroups = groups_get_all_groups($course->id);
+            $alllabel = get_string('allparticipants');
+        }
+
+        $f = '';
+        if (!empty($allgroups)) {
+            $groupsmenu = array();
+            foreach ($allgroups as $gid => $unused) {
+                $groupsmenu[$gid] = format_string($allgroups[$gid]->name);
+            }
+            $f = html_writer::select($groupsmenu, 'tl_filtergroup', $filteroptions->filtergroups, array('' => $alllabel));
+        }
+
+        // ... create select for module type.
+        $modinfo = get_fast_modinfo($course);
+        $modulenames = $modinfo->get_used_module_names();
+
+        $nothing = array('' => get_string('allmodultypes', 'format_socialwall'));
+        $f .= html_writer::select($modulenames, 'tl_filtermodules', $filteroptions->filtermodules, $nothing);
+
+        // ... order by date.
+        $options = array();
+        $options['timecreated asc'] = get_string('timecreateasc', 'format_socialwall');
+
+        $nothing = array('timecreated desc' => get_string('timecreatedesc', 'format_socialwall'));
+        $f .= html_writer::select($options, 'tl_orderby', $filteroptions->orderby, $nothing);
+
+        $inputparams = array(
+            'type' => 'submit', 'name' => 'filter',
+            'value' => get_string('filtertimeline', 'format_socialwall')
+        );
+        $f .= html_writer::empty_tag('input', $inputparams);
+
+        return $this->render_timeline_form($course->id, $f);
+    }
+
+    /**
+     * Print out the first section (i. e. section number 0) for the course
+     * 
+     * @param object $course
+     * @param section_info $sectioninfo
+     */
+    protected function print_first_section($course, $sectioninfo) {
+
+        if (!isset($sectioninfo[0])) {
+            return false;
+        }
+
+        $thissection = $sectioninfo[0];
+
+        echo $this->section_header($thissection, $course, false, 0);
+        echo $this->courserenderer->course_section_cm_list($course, $thissection, 0);
+        echo $this->courserenderer->course_section_add_cm_control($course, 0, 0);
+        echo $this->section_footer();
+    }
+
+    /**
+     * Print the section which contains the post form (i. e. section number 2)
+     * 
+     * @global object $this->output
+     * @param object $course
+     * @param object $sectioninfo
+     * @param moodle_form $postform
+     * @param int id of post when editing a post (0 for new post)
+     */
+    protected function print_postform_section($course, $sectioninfo, $postform,
+                                              $postid) {
+        global $USER;
+
+        $o = '';
+
+        // ... usually this is section 2, because activities on time line are required to be in section 1.
+        if (isset($sectioninfo[FORMAT_SOCIALWALL_POSTFORMSECTION])) {
+
+            $thissection = $sectioninfo[FORMAT_SOCIALWALL_POSTFORMSECTION];
+
+            $o .= html_writer::start_tag('li', array('id' => 'section-' . $thissection->section,
+                        'class' => 'section main clearfix', 'role' => 'region',
+                        'aria-label' => get_section_name($course, $thissection)));
+
+            $o .= html_writer::start_tag('div', array('class' => 'content'));
+
+            $url = new moodle_url('/course/format/socialwall/pages/editnotification.php', array('courseid' => $course->id));
+
+            $linktext = $this->output->pix_icon('i/settings', get_string('editnotification', 'format_socialwall')) . " " .
+                    get_string('editnotification', 'format_socialwall');
+
+            $linkparams = array('class' => 'pf-notificationsetting', 'id' => 'pfnotificationsetting_' . $course->id);
+            $o .= html_writer::link($url, $linktext, $linkparams);
+
+            $o .= html_writer::tag('div', '', array('class' => 'clearfix'));
+
+            $o .= $postform->render();
+
+            // Render prepared attaches section.
+            if ($USER->editing) {
+
+                $o .= html_writer::tag('div', '', array('class' => 'clearfix'));
+
+                $thissection = $sectioninfo[FORMAT_SOCIALWALL_POSTFORMSECTION];
+
+                $o .= html_writer::start_div('attachactivies');
+                $o .= get_string('attachactivities', 'format_socialwall');
+
+                if (!empty($thissection->sequence)) {
+
+                    $o .= html_writer::empty_tag('br') . get_string('attachedactivities', 'format_socialwall');
+                }
+                $o .= $this->courserenderer->course_section_cm_list($course, $thissection, 0);
+                $o .= $this->courserenderer->course_section_add_cm_control($course, FORMAT_SOCIALWALL_POSTFORMSECTION, 0);
+
+                $o .= html_writer::end_div();
+            }
+
+            // Render the recent attaches section, when user is editing or updating;
+            if ($USER->editing or $postid > 0) {
+
+                $content = '';
+
+                // Check, whether there are recent activities attached.
+                $cache = cache::make('format_socialwall', 'attachedrecentactivities');
+                if (!$attachedrecentactivities = $cache->get($course->id . '_' . $postid)) {
+                    $attachedrecentactivities = array();
+                }
+
+                // Add recent postform list is necessary as a target for js popup dialog, even there are no recentactivities.
+                $content .= $this->render_postform_recent_activities($course, $postid, $attachedrecentactivities);
+
+                if ($USER->editing) {
+
+                    $l = $this->output->pix_icon('t/add', get_string('addrecentactivity', 'format_socialwall'));
+                    $l .= " ".get_string('addrecentactivity', 'format_socialwall');
+                    $c = html_writer::tag('span', $l, array('id' => 'tl-addrecentactivity-text'));
+                    $c .= html_writer::link('#', '', array('style' => 'display:none', 'id' => 'tl-addrecentactivity-link'));
+
+                    $content .= html_writer::tag('div', $c, array('id' => 'tl-addrecentactitity-wrapper'));
+                }
+
+                if (($USER->editing) or (count($attachedrecentactivities) > 0)) {
+                    // Show attached existing activities here.
+                    $content = get_string('attachedrecentactivities', 'format_socialwall').$content;
+                    $o .= html_writer::tag('div', $content, array('class' => 'attachactivies'));
+                }
+
+            }
+            $o .= $this->section_footer();
+        }
+
+        if ($USER->editing) {
+            $o .= html_writer::tag('div', $this->render_postform_recent_activities_form($course, $postid), array('style' => 'display:none'));
+        }
+        echo $o;
+    }
+
+    /**
+     * Render the form for attaching recent (existing) activities to the post form.
+     * This is only generated when course is in edit mode and the form is initially hidden.
+     * The HTML is used in the content of the add activity dialog.
+     * 
+     * @param object $course
+     * @return string HTML for the add (recent) activity form
+     */
+    protected function render_postform_recent_activities_form($course, $postid) {
+        global $CFG;
+
+        require_once($CFG->dirroot . '/course/format/socialwall/pages/addactivity_form.php');
+
+        $form = new addactivity_form('', array('courseid' => $course->id, 'postid' => $postid), 'post', '', array('id' => 'tl-addrecentactivity-form'));
+        $o = html_writer::tag('div', $form->render(), array('id' => 'tl-addrecentactivity-formwrapper'));
+
+        return $o;
+    }
+
+    /**
+     * Render the list of recent (i. e. activities, which are already created) attached activities.
+     * 
+     * @param object $course
+     * @return string HTML with the list of attached activities
+     */
+    protected function render_postform_recent_activities($course, $postid,
+                                                         $attachedrecentactivities) {
+
+        $o = '';
+
+        $courserenderer = $this->page->get_renderer('course');
+        $modinfo = get_fast_modinfo($course);
+
+        foreach ($attachedrecentactivities as $cmid) {
+
+            $mod = $modinfo->get_cm($cmid);
+
+            $url = $mod->url;
+            if (empty($url)) {
+                $name = $courserenderer->course_section_cm_text($mod);
+            } else {
+                $name = $courserenderer->course_section_cm_name($mod);
+            }
+
+            $modlabel = html_writer::tag('label', $name, array('for' => 'module_' . $cmid));
+            $o .= html_writer::tag('li', $modlabel);
+        }
+
+        return html_writer::tag('ul', $o, array('id' => 'attachedrecentactivities'));
+    }
+
+    /**
+     * Print out the timeline section (i. e. section number 1)
+     * 
+     * @param object $course
+     * @param object $postsdata all the gathered data to print posts
+     * @param object $completion completion info of course
+     */
+    protected function print_timeline_section($course, $postsdata, $completion) {
+
+        echo $this->render_timeline_filterform($course, $postsdata->filteroptions);
+
+        $countdata = array('total' => $postsdata->poststotal, 'count' => count($postsdata->posts));
+        $countstr = get_string('counttotalpost', 'format_socialwall', $countdata);
+
+        echo html_writer::tag('div', $countstr, array('id' => 'counttotalpost'));
+
+        echo html_writer::start_tag('ul', array('class' => 'tl-posts', 'id' => 'tl-posts'));
+
+        $postshtml = '';
+        foreach ($postsdata->posts as $post) {
+            $postshtml .= $this->render_timeline_post($course, $post, $completion, $postsdata->authors);
+        }
+
+        echo $postshtml;
+
+        // ...do not remove this tag, it is needed for ajax page loading.
+        echo html_writer::tag('div', '', array('id' => 'tl-endofposts'));
+
+        echo html_writer::end_tag('ul');
+    }
+
+    /**
+     * Print out the course page
+     * 
+     * @param object $course
+     * @param completion_info $completioninfo
+     */
+    public function print_page($course, $completioninfo) {
+
+        $this->commentsformshow = optional_param('commentsformshow', 0, PARAM_ALPHANUMEXT);
+
+        $posts = \format_socialwall\local\posts::instance($course->id);
+
+        $postdata = $posts->get_timeline_posts($course);
+        $postform = $posts->get_post_form($postdata);
+
+        $course = course_get_format($course)->get_course();
+
+        // Title with completion help icon.
+        echo $completioninfo->display_help_icon();
+        echo $this->output->heading($this->page_title(), 2, 'accesshide');
+
+        // Copy activity clipboard..
+        echo $this->course_activity_clipboard($course, 0);
+
+        // Now the list of sections..
+        echo $this->start_section_list();
+
+        $modinfo = get_fast_modinfo($course);
+        $sectioninfo = $modinfo->get_section_info_all();
+
+        // ...Section 0.
+        $this->print_first_section($course, $sectioninfo);
+
+        // ...Section 2.
+        $postid = $postdata->filteroptions->postid;
+        $this->print_postform_section($course, $sectioninfo, $postform, $postid);
+
+        // ...Section 1.
+        $this->print_timeline_section($course, $postdata, $completioninfo);
+
+        echo $this->end_section_list();
+
+        $args = array(
+            'courseid' => $course->id,
+            'poststotal' => $postdata->poststotal,
+            'postsloaded' => $postdata->postsloaded,
+            'userallowedediting' => $this->page->user_allowed_editing()
+        );
+
+        $this->page->requires->strings_for_js(
+                array('counttotalpost', 'like', 'likenomore', 'countlikes', 'countcomments', 'textrequired', 'confirmdeletecomment'), 'format_socialwall');
+
+        $this->page->requires->yui_module(
+                'moodle-format_socialwall-postform', 'M.format_socialwall.postforminit', array($args), null, true);
+    }
+
+    /**
+     * Render the posts loaded by an AJAX call
+     * 
+     * @param object $course
+     * @param object $postsdata data of post for rendering
+     * @return string HTML for post
+     */
+    public function render_ajax_loaded_posts($course, $postsdata) {
+
+        $completion = new completion_info($course);
+        $postshtml = '';
+        foreach ($postsdata->posts as $post) {
+            $postshtml .= $this->render_timeline_post($course, $post, $completion, $postsdata->authors);
+        }
+        return $postshtml;
+    }
+
+    /**
+     * Render the comment loaded by an AJAX call
+     * 
+     * @param context_course $context
+     * @param object $comment
+     * @param object $author
+     * @return string HTML for comment
+     */
+    public function render_ajax_loaded_comment($post, $context, $comment,
+                                               $author, $course) {
+
+        $authors = array($author->id => $author);
+
+        return $this->render_timeline_comment($post, $comment, $authors, $context, $course);
+    }
+
+    /**
+     * Render the comments loaded by an AJAX call 
+     * 
+     * @param int $postid id of post
+     * @param context_course $context
+     * @param object $commentsdata data render comments
+     * @return string HTML of comments
+     */
+    public function render_ajax_loaded_comments($postid, $context,
+                                                $commentsdata, $course) {
+
+        if (empty($commentsdata->posts[$postid])) {
+            return "";
+        }
+
+        $post = $commentsdata->posts[$postid];
+
+        return $this->render_timeline_comments($post, $commentsdata->authors, $context, $course);
+    }
+
+    /**
+     * Render the replies loaded by an AJAX call 
+     * 
+     * @param object $post
+     * @param context_course $context
+     * @param object $commentsdata data render comments
+     * @return string HTML of comments
+     */
+    public function render_ajax_loaded_replies($post, $context, $repliesdata,
+                                               $course) {
+
+        if (empty($repliesdata->comment)) {
+            return "";
+        }
+
+        $comment = $repliesdata->comment;
+
+        return $this->render_timeline_replies($post, $comment, $repliesdata->authors, $context, $course);
+    }
+
+}
diff --git a/course/format/socialwall/settings.php b/course/format/socialwall/settings.php
new file mode 100644
index 0000000..62105c3
--- /dev/null
+++ b/course/format/socialwall/settings.php
@@ -0,0 +1,79 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * socialwall course format.  Display the whole course as "socialwall" made of modules.
+ *
+ * @package format_socialwall
+ * @copyright 2014 Andreas Wagner, Synergy Learning
+ * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die;
+
+if ($ADMIN->fulltree) {
+
+    $settings->add(new admin_setting_configcheckbox(
+            'format_socialwall/enablenotification',
+            new lang_string('enablenotification', 'format_socialwall'),
+            new lang_string('enablenotificationdesc', 'format_socialwall'), 0)
+    );
+
+    $settings->add(new admin_setting_configcheckbox(
+            'format_socialwall/enablelikes',
+            new lang_string('enablelikes', 'format_socialwall'),
+            new lang_string('enablelikesdesc', 'format_socialwall'), 1)
+    );
+
+    $settings->add(new admin_setting_configcheckbox(
+            'format_socialwall/enablestudentupload',
+            new lang_string('enablestudentupload', 'format_socialwall'),
+            new lang_string('enablestudentuploaddesc', 'format_socialwall'), 1)
+    );
+
+    $nums = array(
+        '1' => 1,
+        '2' => 2,
+        '3' => 3,
+        '4' => 4,
+        '5' => 5,
+        '10' => 10,
+        '20' => 20
+    );
+
+    $settings->add(new admin_setting_configselect(
+            'format_socialwall/tlnumposts',
+            new lang_string('tlnumposts', 'format_socialwall'),
+            new lang_string('tlnumpostsdesc', 'format_socialwall'), 10, $nums)
+    );
+
+    $settings->add(new admin_setting_configselect(
+            'format_socialwall/tlnumcomments',
+            new lang_string('tlnumcomments', 'format_socialwall'),
+            new lang_string('tlnumcommentsdesc', 'format_socialwall'), 5, $nums)
+    );
+
+    $settings->add(new admin_setting_configselect(
+            'format_socialwall/tlnumreplies',
+            new lang_string('tlnumreplies', 'format_socialwall'),
+            new lang_string('tlnumrepliesdesc', 'format_socialwall'), 5, $nums)
+    );
+
+    $settings->add(new admin_setting_configcheckbox(
+            'format_socialwall/deleteafterunenrol',
+            new lang_string('deleteafterunenrol', 'format_socialwall'),
+            new lang_string('deleteafterunenroldesc', 'format_socialwall'), 0)
+    );
+}
\ No newline at end of file
diff --git a/course/format/socialwall/styles.css b/course/format/socialwall/styles.css
new file mode 100644
index 0000000..d3caaa8
--- /dev/null
+++ b/course/format/socialwall/styles.css
@@ -0,0 +1,303 @@
+.course-content ul.socialwall {margin:0;}
+.course-content ul.socialwall li.section {list-style: none;margin:0 0 5px 0;padding:0;}
+.course-content ul.socialwall li.section .content {margin:0 40px;}
+.course-content ul.socialwall li.section .left {float:left;}
+.course-content ul.socialwall li.section .right {float:right;}
+.course-content ul.socialwall li.section .left,
+.course-content ul.socialwall li.section .right {width:40px;text-align:center;padding: 6px 0;}
+.course-content ul.socialwall li.section .right img.icon { padding: 0 0 4px 0;}
+.course-content ul.socialwall li.section .left .section-handle img.icon { padding:0; vertical-align: baseline; }
+
+
+.format-socialwall #postform .fitem div.fitemtitle {
+    float: none;
+    padding-top: 5px;
+    text-align: left;
+    width: auto;
+}
+
+.format-socialwall #postform .fitem .felement {
+    margin-left: 0;
+}
+
+.format-socialwall #postform .fitem_fgroup .fitemtitle {
+    height: 0;
+}
+
+.format-socialwall #postform .fitem_fgroup .felement span,
+.format-socialwall #postform .fitem_fgroup .felement a {
+    margin-right: 5px;
+}
+
+.format-socialwall #postform .sw-texarea, #posttext {
+    width:100%;
+}
+
+.format-socialwall #postform #fitem_posttext {
+    margin-bottom: 0px;
+    margin-right: 100px;
+}
+
+.format-socialwall #postform #fgroup_id_group_1 {
+    margin-top:30px;
+    float:right;
+    width:100px;
+    text-align: right;
+}
+
+.format-socialwall #postform #fgroup_id_group_2 {
+    float:left;
+}
+
+.format-socialwall #postform #id_submitbutton, .format-socialwall #postform #id_cancel {
+    margin: 0 0 10px 0;
+    float : right;
+}
+
+.format-socialwall #postform #sw-addactivitylink {
+    float:right;
+    margin-right:90px;
+    border: none;
+    background: none;
+    box-shadow: none;
+    color:#ff6500;
+    text-decoration: underline;
+}
+
+.format-socialwall .tl-posts, .tl-comments, .tl-replies {
+    list-style:none;
+    margin: 10px 0px;
+}
+
+.format-socialwall .tl-commentform .mform .fitem div.fitemtitle {
+    width: 10px;
+}
+
+.format-socialwall .tl-comment-replywrapper {
+    margin-left: 45px;
+}
+
+.format-socialwall .tl-comment-replywrapper .tl-actionlink {
+    text-align: right;
+    border-top : 1px solid #cccccc;
+}
+
+.format-socialwall .tl-posts .section li.activity {
+    clear: none;
+    padding: 0;
+}
+
+.format-socialwall .tl-post, .tl-comment {
+    margin-bottom : 10px;
+    line-height: 18px;
+}
+
+.format-socialwall .tl-post {
+    margin: 30px 0;
+}
+
+.format-socialwall .tl-leftcol, .tl-author   {
+    float:left;
+    width:40px;
+}
+
+.format-socialwall .tl-author {
+    margin-bottom: 10px;
+}
+
+.format-socialwall .tl-text {
+    margin-left: 40px;
+    padding: 0 5px;
+    border-left: 2px solid #efefef;
+}
+
+.format-socialwall .tl-comments .tl-text {
+    border: none;
+}
+
+.format-socialwall .tl-authorname {
+    font-weight: bold;
+    font-size: 14px;
+}
+
+.format-socialwall .tl-locked, .tl-postcomment, .tl-sticky, .tl-edited-wrapper {
+    float:right;
+    margin-left: 5px;
+}
+
+.format-socialwall .tl-edited-wrapper {
+    background: #ff974a;
+    color:white;
+    font-size: 10px;
+    line-height: 10px;
+    padding:5px;
+    border-radius: 3px;
+}
+
+.format-socialwall .tl-timeago, .tl-counts {
+    font-size: 8px;
+    color: #666666;
+    line-height: 10px;
+}
+
+.format-socialwall .tl-counts span {
+    margin-right: 6px;
+}
+
+.format-socialwall .tl-commenttext-wrapper {
+    margin-right: 80px;
+}
+
+.format-socialwall .tl-commenttext {
+    width:100%;
+    margin: 0;
+}
+
+.format-socialwall .tl-showall {
+    text-align: center;
+    border-top: 1px solid #efefef;
+    border-bottom: 1px solid #efefef;
+}
+
+.format-socialwall .tl-action-icons {
+    margin-left: 8px;
+}
+
+.format-socialwall .postform .section-modchooser {
+    text-align:left;
+}
+
+.format-socialwall .postform .section {
+    border-bottom: 0;
+}
+.format-socialwall .tl-posts .editing_move {
+    display: none;
+}
+
+.format-socialwall .attachactivies {
+    padding: 5px;
+    border: 2px dashed #cccccc;
+    margin-bottom: 10px;
+}
+
+.format-socialwall .tl-actionlink a {
+    margin-right: 5px;
+}
+
+.format-socialwall .jsenabled .tllocksubmit {
+    display:none;
+}
+
+.format-socialwall .pf-notificationsetting {
+    float:right;
+}
+
+.format-socialwall .tl_gradednote {
+    border: 1px solid #cccccc;
+    padding: 4px;
+    margin: 5px 0px;
+    list-style: none;
+}
+
+.format-socialwall #tl-posts .section .activity .mod-indent-outer {
+    padding-left: 0px;
+}
+
+.format-socialwall .tl-post-actionarea {
+    border-top: 1px solid #cccccc;
+    padding: 4px;
+    background: #efefef;
+}
+
+.format-socialwall #externalurlwrapper {
+    background:#efefef;
+    padding: 5px;
+}
+
+.format-socialwall.tl-commentform .fitemtitle {
+    display:none;
+}
+
+.format-socialwall .tl-commentform .mform .fitem .felement.ftextarea {
+    margin-left: 0;
+}
+
+.format-socialwall .tl-commentform .tl-commenttext {
+    width: 97%;
+}
+
+.format-socialwall #tl-posts .editing_duplicate {
+    display:none
+}
+
+#tl-addrecentactitity-wrapper {
+    text-align: right;
+
+}
+
+#tl-addrecentactivity-form.mform .fitem .fitemtitle,
+#tl-addrecentactivity-form.mform .fitem div.fgrouplabel label {
+    display:none;
+}
+
+#tl-addrecentactivity-form.mform .fitem div.fitemtitle,
+#tl-addrecentactivity-form.mform .fitem div.fgrouplabel {
+    padding:0;
+}
+
+
+body#page-course-format-socialwall-pages-addactivity .mform:not(.unresponsive) .femptylabel .fitemtitle  {
+    margin:0px;
+}
+
+#tl-addrecentactivity-form.mform .fitem .felement {
+    margin-left:0px;
+}
+
+#tl-addrecentactivity-form #fgroup_id_filterbytype .fgroup span {
+    min-width:110px;
+    display:inline-block;
+
+}
+
+#tl-addrecentactivity-form  #fgroup_id_filterbytype .fgroup label {
+    margin-right: 5px;
+}
+
+#tl-addrecentactivity-form #fgroup_id_filterbytype .fgroup input[type=checkbox] {
+    margin-right: 0px;
+}
+
+#tl-addrecentactivity-form #selectedactivities li {
+    display : inline;
+    margin-right:20px;
+}
+
+#tl-addrecentactitity-wrapper {
+    text-align: right;
+
+}
+
+.format-socialwall #filesskin {
+    border: none;
+    border-radius: 10px;
+}
+
+#tl-addrecentactivity-formwrapper {
+    padding: 0 20px;
+    height:100%;
+    overflow-y: scroll;
+}
+
+#page-course-view-socialwall #id_recentactivitiesheader label,
+#page-course-view-socialwall #id_recentactivitiesheader .fcheckbox input {
+    float:left;
+}
+
+#page-course-view-socialwall #filesskin + .moodle-dialogue-base .moodle-dialogue .moodle-dialogue-content .moodle-dialogue-ft {
+    background: #ebebeb linear-gradient(to top, #ffffff, #cccccc);
+    margin :0;
+    text-align: center;
+    border-radius: 0 0 10px 10px;
+    padding: 10px 0 0 0;
+}
\ No newline at end of file
diff --git a/course/format/socialwall/tests/socialwall_test.php b/course/format/socialwall/tests/socialwall_test.php
new file mode 100644
index 0000000..f13b74d
--- /dev/null
+++ b/course/format/socialwall/tests/socialwall_test.php
@@ -0,0 +1,157 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ *
+ * @package   local_impact
+ * @copyright 2016 Andreas Wagner, Synergy Learning
+ * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+defined('MOODLE_INTERNAL') || die();
+
+class format_socialwall_testcase extends advanced_testcase {
+
+    /**
+     * Unenrol user from course
+     * 
+     * @global type $DB
+     * @param type $user
+     * @param type $course1
+     */
+    private function unenrol_user($userid, $course1id) {
+        global $DB;
+
+        // Get all the instances for that course.
+        $sql = "SELECT e.*
+                FROM {user_enrolments} ue 
+                JOIN {enrol} e ON e.id = ue.enrolid AND e.courseid = :courseid
+                WHERE ue.userid = :userid";
+
+        if (!$instances = $DB->get_records_sql($sql, array('userid' => $userid, 'courseid' => $course1id))) {
+            return false;
+        }
+
+        foreach ($instances as $instance) {
+            $plugin = enrol_get_plugin($instance->enrol);
+            $plugin->unenrol_user($instance, $userid);
+        }
+        return true;
+    }
+
+    private function create_post_with_attachment($course1id, $userid, $attachmentid) {
+        global $DB;
+
+        $post = new stdClass();
+        $post->courseid = $course1id;
+        $post->fromuserid = $userid;
+        $post->togroupid = 0;
+        $post->cmsequence = $attachmentid;
+        $post->id = 0;
+        $post->posttext = "Test Post";
+        $post->timecreated = time();
+        $post->timemodified = $post->timecreated;
+        $post->id = $DB->insert_record('format_socialwall_posts', $post);
+        \format_socialwall\local\attaches::save_attaches($post->id, $post->cmsequence);
+
+        return $post->id;
+    }
+
+    public function test_plugin_installed() {
+        $config = get_config('format_socialwall');
+        $this->assertTrue(isset($config->enablenotification));
+    }
+
+    /**
+     * Test whether the params deletemodspermanently and deleteafterunenrol of 
+     * course format works correctly, when unenrolling a user.
+     */
+    public function test_unenroluser() {
+        global $DB, $CFG;
+
+        require_once($CFG->dirroot . '/course/format/socialwall/lib.php');
+
+        $this->resetAfterTest();
+
+        $generator = $this->getDataGenerator();
+
+        // Generate users.
+        $user1 = $generator->create_user();
+        $user2 = $generator->create_user();
+        // Setup a course with a attendance module inside
+        $record = array('format' => 'socialwall');
+        $course1 = $generator->create_course($record);
+        $course2 = $generator->create_course($record);
+
+        // Enrol user into course.
+        $generator->enrol_user($user1->id, $course1->id, 5);
+
+        // Ensure setting delete "Delete Items after unenrol use" is No.
+        $course1 = course_get_format($course1)->get_course();
+        $this->assertEmpty($course1->deleteafterunenrol);
+
+        // Create a Post in the course 1 from user1.
+        $label1 = $generator->create_module('label', array('course' => $course1));
+        $post1id = $this->create_post_with_attachment($course1->id, $user1->id, $label1->id);
+
+        // Create a Post in the course 2 from user1.
+        $label2 = $generator->create_module('label', array('course' => $course2));
+        $post2id = $this->create_post_with_attachment($course2->id, $user1->id, $label2->id);
+
+        // Delete enrolment.
+        $this->unenrol_user($user1->id, $course1->id);
+
+        // Check post.
+        $count = $DB->count_records('format_socialwall_posts', array('fromuserid' => $user1->id));
+        $this->assertEquals(2, $count);
+        // Check Label.
+        $count = $DB->count_records('label');
+        $this->assertEquals(2, $count);
+
+        // Try with different setting.
+        $generator->enrol_user($user1->id, $course1->id, 5);
+
+        // Set deleteaferunenrol. 
+        $DB->set_field('course_format_options', 'value', 1, array('format' => 'socialwall', 'name' => 'deleteafterunenrol'));
+
+        format_socialwall::reset_course_cache();
+        $course1 = course_get_format($course1)->get_course();
+        $this->assertEquals(1, $course1->deleteafterunenrol);
+
+        // Set deletemodspermanently. 
+        $DB->set_field('course_format_options', 'value', 1, array('format' => 'socialwall', 'name' => 'deletemodspermanently'));
+
+        format_socialwall::reset_course_cache();
+        $course1 = course_get_format($course1)->get_course();
+        $this->assertEquals(1, $course1->deletemodspermanently);
+
+        // Delete enrolment.
+        $this->unenrol_user($user1->id, $course1->id);
+
+        // Check post.
+        $count = $DB->count_records('format_socialwall_posts', array('fromuserid' => $user1->id, 'courseid' => $course1->id));
+        $this->assertEquals(0, $count);
+
+        $count = $DB->count_records('label', array('id' => $label1->id));
+        $this->assertEquals(0, $count);
+
+        $count = $DB->count_records('format_socialwall_posts', array('fromuserid' => $user1->id, 'courseid' => $course2->id));
+        $this->assertEquals(1, $count);
+
+        $count = $DB->count_records('label', array('id' => $label2->id));
+        $this->assertEquals(1, $count);
+    }
+
+}
diff --git a/course/format/socialwall/version.php b/course/format/socialwall/version.php
new file mode 100644
index 0000000..0c88d93
--- /dev/null
+++ b/course/format/socialwall/version.php
@@ -0,0 +1,33 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Version details
+ *
+ * @package    format
+ * @subpackage socialwall
+ * @copyright  2015 Andreas Wagner, Synergy Learning
+ * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+defined('MOODLE_INTERNAL') || die();
+
+$plugin->version   = 2016022200;        // The current plugin version (Date: YYYYMMDDXX).
+$plugin->requires  = 2014050800;        // Requires this Moodle version.
+$plugin->component = 'format_socialwall';    // Full name of the plugin (used for diagnostics).
+$plugin->dependencies = array('format_topics' => 2014051200);
+$plugin->maturity = MATURITY_STABLE;
+$plugin->release   = '3.0';
\ No newline at end of file
diff --git a/course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity-debug.js b/course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..ce013220c324873e4d9cfc6befffe3e126b1e418
GIT binary patch
literal 7215
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
LNg+lbQNw=$xYFD&

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity-min.js b/course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..b76211acc669c73e567b750a49788fff6feb74e0
GIT binary patch
literal 2961
zcmbtWZExE)5dOYj;V^(LA&io2=odTcioOi(urxqlHVj5)(BjGBB9ksj*>PR}_dS#)
z+ey82FCXGaC-QiA&vVc5_m6K9A!Wp-#>kRRb7QB%kDSSrC>NqEPw`b`Ud@$XGM-l&
z&qhbYeZ0C#zFM9huzmTmTJr<;aB%BdY30+cclc(NqmJ`dWu6V%4;>N3D@u%}NSdsg
zlJ?2i$Yq>}*^IP&QK(WzHs(6jwCG$VnX!~eq+%u&MXRv(h0z}S`id`<^hMwBg4Cq&
z{fbYG6lMSDoPU0!CEfKep76PHYFtt<S{y(&JZ0ElKds}zT-c6JS94KT)W1p)@z+I3
zg!dvVcu3ahew$51A(@$_IsCn(TvVlxVqW4;Cxwy}#cS?pvx$=5l$?-%@8y+|$xqkU
zA6~t~=WiXI37t`S=;(iX#y|(4o>$%jcOPQgy}G?n+q61)q+=Asb}ZPC<&$KwSXg8H
z2|LS7WgVSuXmhq>+1X4?$eryGVkG_)cgd`nF|N|pdZ2)1*sEmfw~t&Uo0_I<w^fnD
zo~GuO0$2^p)KW>8Qu6cr>$d?Zr6($1B3dkW<lHSSn~0k?PKh#+<tr(?=&N<S-X;l@
zRxTahGz8d?k{xf5CVBr{L=+D^&hW24T>TO;yoLH`#DW%!ddEtR9_}befNmY7XO$mn
zF{M9JG^wmg8nK&RJh0>|t2?^e)d_)JQ5#yQz5)gb*b=d<pzM|;i(5z<yMifkvr=Kr
zh{eN;8`OD|#be<lIh7Rpu2YIJl|vx84XbxzPkJFXZs6&yk(6YXgr|sImg?!{8GcyI
zs}xw4=;5#;Iy#RBrfJ`(in(u}P0U>~t6YJ8Uaw=GM<CnL`3`{$2yD9Ve^k+TyZ%A>
z>aGM-yV~)iix{nrqPiFfM>TdprsLY8x}o0Hj~%x-omlMZb_2Wi-R(eG@6sv$MLJT=
zhf0DFx$-m}wZ{co)Cq0G;{nI=i8a-11ghn#gno^eemSFtV70gK{w;Drno$RTkX#zA
zS(EMnx$J-BdhbMUNHwtCt~~@*5IE-n3rp&91YQ?r0r9MPvrm~>Q)5b-E*P6iOUS@;
za|dR6#8}6_Q2KQ}6krU2w?;^?FJM#YmGDI}RS-lD(z@Nd<tBz=)_`vY3&bd>WNoQO
z4&(0h;`{Sp+)R>}?SR_T7YV7Y>Afv#Jz|=GzNH$E5TurdlJvwEmp{afiu_$|+d`rP
z0{xF{vjMLMuxPt6%xC6iLMKW)AMgqK1<?!4X<MeIN;8Zx@l<ND8dLW=j1PGC<|Agh
zeIXp?;O^6Xdz_}H7e7)nE&J3WPbF>-t$AOz=e2A@Wa^3hwNBS??@L$j61D7L>Y&%k
zFe8*^ovakj!SdK;>2!1LV9-5ycnVc)^_3m_`dW2Q@t5`0YhlAh#s-vI9RzuB>#2J=
z$ZB2N<HNm-3Y%`%BoZ1usdYCiRd&07ZHrgXnKkci#>#`P5BOEvGawX>gw2ZavVpJa
zb}IxBF$~HIgLyk~AerE6p<Iy3;3eOBIhd-aJC7X8$5)j~-y)^5twfF;4ZwH^aU4kR
zz=aBfBJ^LQ37F}14bkJ$EFc!aktL@-)BTJf7GO@T_1tpB9md*|^K;BE{0=~*^_sJ1
zzrK3+{>}B<XN<2beX0~Z^@nT>)-ujCCLI1LgP-Pt9d4wj+IW?#OoZ!T!;^~G4T|^O
EUzoBA-2eap

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity.js b/course/format/socialwall/yui/build/moodle-format_socialwall-addactivity/moodle-format_socialwall-addactivity.js
new file mode 100644
index 0000000000000000000000000000000000000000..ce013220c324873e4d9cfc6befffe3e126b1e418
GIT binary patch
literal 7215
zcmdTJ+iu%7^gUm}c@I{wgl;zUC25AXX^M7O5+F%81VI<jB5iSzNl&8UxNZJ@=a9Nk
zl;otv`Y=6M7oI!MjmK9X-c!bTG+t=UQ?WbK*@BsyT*s27E0(6au*za1@1$9ecgU<z
z@S+uou6D@jtCQnx@_B3Pgm&=AA?f@2<qP@zaL|W<VpNQzk_HGg%s4X)IT5%<MJ`Bg
zG8voE!Iu4W$1=h}U_C#m-<K>C$|%i6^DWlObUrd;Se#@chLutPxt2WlXfN3PN^+Bc
zOwXS^Yv{rEM96u9!rBGPy%rnQcw@ziteH@HysoHLBH}tO7QmBEHD7O2wp<Fuj}n>k
zsF8iUlmgM5hQLaR6&N?xnV{}lAtGlR1j7qS9yw+AiKq3B70|&DVs+Xlm3Hk#r<h%J
zkL~4!<}BSOCM!gH;nRD?#r;0nd*1$jCv!PXMIQ=m6c<_F3hqg@Qj7lJ8wIys--1!v
z2DoEs0lZEqI7-(!soV3mfVlTs?R#D)DwnGahIc`inYaVF-iR41QWJqR{yIKu^~yTc
zD;GFY<b6<X?`R^q2$vt)qUEBL?TY>>`COO_!%sA)Z_myykI!rN5Lopy+9hTx7U|d8
z#$mMuc%p5-t41YpNE5FMW3-C&t!Mhqs#Bv2QJLFX>cJVTj@aBlP@UUUQ0^UOf=hiN
z@*JEa8p;)|@SaS_kxo<CGm;Cu2~HqffDmnMPm$r?Kp@ZNbhTP#S{w2c8BbzeWVx8Q
zlsair@np&7BA<A9@`nA*?&&gFj=h}+_LNcrUP2&`utmVteM6@Jcc~n=1azDwhgHnD
zkYZ30$vc3~9{_CJNCRFDVgwY23<juI^tX$%Qw&h4=5n?kHg1P%4%=}n)<DEruYC86
za7Cq#z`#2}UO=_>OS{yvVnRW=LvQE{W1v^#ZBXv|qbCf;V&w^FIjE&zENcQR1mhna
zA;H^42<+*(Z<hegg?V>*@_RH!xLPXY780_&pqc|O$#25dL@>y|M5<+Bt`%E|zYa&>
zuth3vMjw3{<cvfia?AD6iXi|MP+p@t#3C%o9VA3V>bOY3b)#{di1=3U@pdmP!lR<r
zR~sY=@HAhh5(wOkx5@P$>;uAvm%k;)slYny?Z>c<=nNv-LZ@sh(rXCP+E!zTUXTYu
zxNS9`H}XxTWp#?G#+hIST;N42e|<55AK%;|Vw{4z0B+?9rQp<lM{*ICW6x)N0;w!p
zjL3oyKvkq0H?6Qz={uQEc_<9%vdEK2@*Y+Xtxc)o4~dpBh>zc#jJ;sUgefv*+m!wo
zhZs6SPkXKJu}b^l{eKB0w3UC^Z~(oU7=pf?rFrNX17^oC9NN;BeUK;kKZ$H0Li!+^
z(0mE;*&<=38A7_2J+X^e@ze{|GEceK>+?`lC!V6<p#=CIPce)7mTD4DH**ATTT^u3
zyXE63mGSLcnL-cydVRTGLZA1aI2f0A*OEh)o=GDXH(!;jeJgZQb=4eIKwdOj%e$OB
zvl^9&(A6<lTW0f27t0$+pAKZYHlTD_SggSKUKW+wdUl8UD7TDdcdHNTyVe&gKb*Mg
zvea8)YE>$`;T;W@CwirtTx$LHTgouHw-se$aX~`{9EbcK1q?uk?1-R4m$eI?GB8(1
zV`}{oOEBmio@sm<e(Gs`?^rSjIj@#@zWHdD*Xms4@{@Sea~j8enqo>Rj}W%|nCe1t
z=u4q2_!SvpS5k4ks?Yt?sq0tZ^E*2W=!dW72Oc;a<xGOmwbDqwCVaw7LKjj+KEoY6
ztve9U6izHRpa{?`UyEg*d~T(_Hvc)2FyQIX_Mt2Z0J3+oOZI+#)<e)8+MTIkGEvIe
zlN}SL=Hf!IEKW|L>x^>yIFlmft<XpH+?o;h*r$1b&iMAY9~wT)ZcmE7O{ulsCmU#1
zSQLn+Ld{_~^n(1-5*r;GAwxMjKnNHDxoE68B8Y!=+i8C_e0CkdV=>ub=6M)WY=>eQ
zbGET)Dy0{csQM3~T46qVluAfoz%E^TbhJSg(35QA4!&TGV$Wask|`=xZZMPK`KJ|>
zh*w>xlg01d!wL$yAQ@m{fze0HX&gpFuVjdec#vGgJxT}oAQQZt&C0+)U)zL^!dWz<
zKfo|CJ7PIRUk?%50@x;phh%pz+?h(5>Tb;y_6OBsb$=iN`pkh|s{;B)Z$$J*=|3u^
z=b)85jb9I>DxBj&;eh(l?%#$wSJ*x~K5^^aW4-4B&7>EQuIOp&ObEFM4wTsCr8w}A
zYDD6c<vD!WG^XEmDSHG5N}$j>QF^0b%g>D;jGgkgB5iH|30P$~mCpRc+6Y`73_Y5@
zclyI`Phs?N>||Vn=n2u^JNm5AzZ=xhUz-)mp*5Y`V|9!Tc<XPA-kGjeJ)L@!)U4<2
zkg*$(gnew|Ms;ALlCDNg*JUDbGk-gN@mE6q{IyU+e+~XYh{iAiE0#~vF08aBk$LIt
zwfNq<7bK_(?r^4YSXpV&>oJ(0e0>l#l?sRR8}SeZ@oMwo2j9DZw<nxkts2ZW4jSbN
zTmIMxKbQ%$9ii%nf@+E#Z7ocxu4~+&9Y(n_+kkG~t*}jPI1lA0KQ$d}!9;g!>j6CV
z<sZlA7w^wbUjo0+qfGo$NZ>!(C)cAXRE5zF8DXZxyVUqw{{4slDeWq4<V?m4{|+g0
LNg+lbQNw=$xYFD&

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform-debug.js b/course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform-debug.js
new file mode 100644
index 0000000000000000000000000000000000000000..bf7b2c14abdedd19b270c479baa4844bb76e3284
GIT binary patch
literal 16510
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

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform-min.js b/course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform-min.js
new file mode 100644
index 0000000000000000000000000000000000000000..8294f1c28b07c841837a34e26b5528f8bf1c4b93
GIT binary patch
literal 7062
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

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform.js b/course/format/socialwall/yui/build/moodle-format_socialwall-postform/moodle-format_socialwall-postform.js
new file mode 100644
index 0000000000000000000000000000000000000000..bf7b2c14abdedd19b270c479baa4844bb76e3284
GIT binary patch
literal 16510
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

literal 0
HcmV?d00001

diff --git a/course/format/socialwall/yui/src/addactivity/build.json b/course/format/socialwall/yui/src/addactivity/build.json
new file mode 100644
index 0000000..c0a671a
--- /dev/null
+++ b/course/format/socialwall/yui/src/addactivity/build.json
@@ -0,0 +1,10 @@
+{
+    "name": "moodle-format_socialwall-addactivity",
+    "builds": {
+        "moodle-format_socialwall-addactivity": {
+            "jsfiles": [
+                "addactivity.js"
+            ]
+        }
+    }
+}
\ No newline at end of file
diff --git a/course/format/socialwall/yui/src/addactivity/js/addactivity.js b/course/format/socialwall/yui/src/addactivity/js/addactivity.js
new file mode 100644
index 0000000..66aa572
--- /dev/null
+++ b/course/format/socialwall/yui/src/addactivity/js/addactivity.js
@@ -0,0 +1,257 @@
+M.format_socialwall = M.format_socialwall || {};
+M.format_socialwall.addactivityinit = function (data) {
+    "use strict";
+
+    var dialog;
+    var parentnode;
+    var contentnode;
+    var attachrecentactivitiyids;
+
+    var maxwidth = 500;
+    var maxheight = 500;
+
+    function initDialog() {
+
+        Y.one(document.body).appendChild(parentnode);
+
+        dialog = new M.core.dialogue({
+            bodyContent: contentnode,
+            width: maxwidth,
+            height: maxheight,
+            modal: true,
+            zIndex: 15,
+            visible: true,
+            render: true,
+            center: true
+        });
+
+        var ok = {
+            value: M.str.format_socialwall.attach,
+            action: function (e) {
+                e.preventDefault();
+                onAttachActivities();
+                dialog.hide();
+            },
+            section: Y.WidgetStdMod.FOOTER
+        };
+
+        var cancel = {
+            value: M.str.format_socialwall.cancel,
+            action: function (e) {
+                dialog.hide();
+            },
+            section: Y.WidgetStdMod.FOOTER
+        };
+
+        dialog.addButton(ok);
+        dialog.addButton(cancel);
+        dialog.hide();
+
+    }
+
+    function storeRecentActivityidsToSession(attachrecentactivitiyids) {
+
+        // Collect selected modids.
+        var url = M.cfg.wwwroot + '/course/format/socialwall/pages/addactivity_ajax.php';
+
+        // ... get params.
+        var params = {};
+        params.courseid = data.courseid;
+        params.action = 'addactivities';
+        params.attachrecentactivitiyids = Y.JSON.stringify(attachrecentactivitiyids);
+        params.sesskey = M.cfg.sesskey;
+
+        Y.io(url, {
+            data: params
+        });
+    }
+
+    function onAttachActivities() {
+
+        attachrecentactivitiyids = [];
+
+        var selectedactivities = Y.one('#attachedrecentactivities');
+        selectedactivities.setHTML('');
+
+        var recentactivities = Y.all('#id_recentactivitiesheader input[name^="module_"]');
+        if (recentactivities) {
+
+            recentactivities.each(function (node) {
+
+                if (node.get('checked')) {
+
+                    var id = node.get('id').split('_') [1];
+                    var selectedElement = Y.one('#id_recentactivitiesheader .felement label[for="module_' + id + '"]');
+                    var li = Y.Node.create('<li></li>');
+                    var clone = selectedElement.cloneNode(true);
+                    li.append(clone);
+                    selectedactivities.append(li);
+
+                    attachrecentactivitiyids.push(id);
+                }
+            });
+        }
+
+        storeRecentActivityidsToSession(attachrecentactivitiyids);
+
+        return true;
+    }
+
+    function setCheckBoxes() {
+
+        var recentactivities = Y.all('#id_recentactivitiesheader input[name^="module_"]');
+        if (recentactivities) {
+
+            recentactivities.each(function (node) {
+                node.set('checked', false);
+            });
+        }
+
+        if (attachrecentactivitiyids) {
+
+            for (var i in attachrecentactivitiyids) {
+                var id = attachrecentactivitiyids[i];
+                var cb = Y.one('#module_' + id);
+
+                if (cb) {
+                    cb.set('checked', 'checked');
+                }
+            }
+        }
+    }
+
+    function onClickFilterByType() {
+
+        var recentactivities = Y.all('#id_recentactivitiesheader div[id^="fitem_module_"]');
+        if (recentactivities) {
+            recentactivities.hide();
+        }
+
+        var checkedfilterelements = Y.all('#fgroup_id_filterbytype input[id^="type_"]');
+
+        if (checkedfilterelements) {
+
+            checkedfilterelements.each(function (node) {
+
+                if (node.get('checked')) {
+
+                    var type = node.get('id').split('_') [1];
+
+                    var shownactivities = Y.all('#id_recentactivitiesheader input[name^="module_' + type + '"]');
+                    if (shownactivities) {
+                        shownactivities.each(function (node) {
+                            node.ancestor('.fitem').show();
+                        });
+                    }
+                }
+            });
+        }
+
+        return true;
+    }
+
+    function onResizeDialog() {
+
+        var bb = dialog.get('boundingBox');
+        var windowheight = bb.get('winHeight');
+        var windowwidth = bb.get('winWidth');
+
+        var height = Math.min(windowheight, maxheight);
+        var width = Math.min(windowwidth, maxwidth);
+
+        dialog.set('height', height);
+        dialog.set('width', width - 120);
+
+        dialog.centerDialogue();
+    }
+
+    function onChangeSearchName(searchfield) {
+
+        var searchtext = searchfield.get('value');
+        var recentactivities = Y.all('#id_recentactivitiesheader div[id^="fitem_module_"]');
+
+        if (searchtext.length < 3) {
+
+            if (recentactivities) {
+
+                recentactivities.each(
+                        function (node) {
+                            node.show();
+                        }
+                );
+            }
+            return false;
+        }
+
+        if (!recentactivities) {
+            return false;
+        }
+
+        recentactivities.each(
+                function (node) {
+
+                    var label = node.one('span.instancename');
+
+                    if (label) {
+
+                        var name = label.getContent();
+
+                        var index = name.indexOf(searchtext);
+
+                        if (name.toUpperCase().indexOf(searchtext.toUpperCase()) == -1) {
+                            node.hide();
+                        } else {
+                            node.show();
+                        }
+                    } else {
+                        node.hide();
+                    }
+
+                }
+        );
+    }
+
+    function initialize() {
+
+        attachrecentactivitiyids = data.attachedrecentactivities;
+
+        parentnode = Y.Node.create('<div id="filesskin" class="format_socialwall-addactivity-dialog"></div>');
+        contentnode = Y.one('#tl-addrecentactivity-formwrapper');
+        parentnode.append(contentnode);
+
+        initDialog();
+
+        var typefilter = Y.one('#fgroup_id_filterbytype');
+        if (typefilter) {
+            typefilter.delegate('click', function (e) {
+                onClickFilterByType();
+            }, 'input[id^="type_"]');
+        }
+
+        var searchbyname = Y.one('#id_searchbyname');
+        if (searchbyname) {
+            searchbyname.on('keyup', function (e) {
+                onChangeSearchName(this);
+            });
+        }
+
+        var control = Y.one('#tl-addrecentactivity-text');
+        var link = Y.one('#tl-addrecentactivity-link');
+
+        link.append(control);
+        link.show();
+
+        link.on('click', function (e) {
+            e.preventDefault();
+            setCheckBoxes();
+            dialog.show();
+        });
+
+        Y.one('window').on('resize', function (e) {
+            onResizeDialog();
+        }
+        );
+    }
+
+    initialize();
+};
diff --git a/course/format/socialwall/yui/src/addactivity/meta/addactivity.json b/course/format/socialwall/yui/src/addactivity/meta/addactivity.json
new file mode 100644
index 0000000..bd779a2
--- /dev/null
+++ b/course/format/socialwall/yui/src/addactivity/meta/addactivity.json
@@ -0,0 +1,5 @@
+{
+    "moodle-format_socialwall-addactivity": {
+        "requires": ["base", "node", "io", "moodle-core-notification-dialogue"]
+    }
+}
\ No newline at end of file
diff --git a/course/format/socialwall/yui/src/postform/build.json b/course/format/socialwall/yui/src/postform/build.json
new file mode 100644
index 0000000..b2c3f89
--- /dev/null
+++ b/course/format/socialwall/yui/src/postform/build.json
@@ -0,0 +1,10 @@
+{
+    "name": "moodle-format_socialwall-postform",
+    "builds": {
+        "moodle-format_socialwall-postform": {
+            "jsfiles": [
+                "postform.js"
+            ]
+        }
+    }
+}
\ No newline at end of file
diff --git a/course/format/socialwall/yui/src/postform/js/postform.js b/course/format/socialwall/yui/src/postform/js/postform.js
new file mode 100644
index 0000000..8a9d16f
--- /dev/null
+++ b/course/format/socialwall/yui/src/postform/js/postform.js
@@ -0,0 +1,553 @@
+M.format_socialwall = M.format_socialwall || {};
+
+M.format_socialwall.postforminit = function (data) {
+    "use strict";
+
+    var fileswrapper;
+    var endofpostsnode;
+    var loading = false;
+
+    function doSubmit(args, spinnernode, callbacksuccess) {
+
+        var url = M.cfg.wwwroot + '/course/format/socialwall/ajax.php';
+        var spinner = M.util.add_spinner(Y, spinnernode);
+
+        var cfg = {
+            method: 'POST',
+            on: {
+                start: function () {
+
+                    spinner.show();
+                },
+                success: function (id, resp) {
+                    try {
+
+                        var responsetext = Y.JSON.parse(resp.responseText);
+                        if (responsetext.error == 0) {
+                            callbacksuccess(responsetext);
+                        } else {
+                            alert(responsetext.error);
+                        }
+                        spinner.hide();
+
+                    } catch (e) {
+                        alert('parsefailed');
+                        spinner.hide();
+                    }
+                },
+                failure: function () {
+                    loading = false;
+                    spinner.hide();
+                }
+            }
+        };
+
+        if (args.data) {
+            cfg.data = args.data;
+        }
+
+        if (args.form) {
+            cfg.form = args.form;
+        }
+
+        Y.io(url, cfg);
+    }
+
+    function onClickLikePost(linknode) {
+
+        // ... get params.
+        var params = {};
+
+        params.courseid = data.courseid;
+        params.action = 'likepost';
+        params.postid = linknode.get('id').split('_')[1];
+        params.userlike = Number(linknode.hasClass('like'));
+        params.sesskey = M.cfg.sesskey;
+
+        doSubmit({
+            data: params
+        }, linknode, function (r) {
+            callbackPostliked(r);
+        });
+    }
+
+    function callbackPostliked(responsedata) {
+
+        var likelink = Y.one('#userlike_' + responsedata.postid);
+        if (responsedata.userlike == '1') {
+            // likenomore
+            likelink.replaceClass('like', 'likenomore');
+            likelink.setHTML(M.str.format_socialwall.likenomore);
+
+        } else {
+            // like
+            likelink.replaceClass('likenomore', 'like');
+            likelink.setHTML(M.str.format_socialwall.like);
+        }
+        updatePostCounts(responsedata);
+
+    }
+
+    /** load more Posts */
+    function onLoadMorePosts() {
+        // ... get params.
+        var params = {};
+
+        params.courseid = data.courseid;
+        params.action = "loadmoreposts";
+        params.sesskey = M.cfg.sesskey;
+        params.limitfrom = data.postsloaded;
+
+        doSubmit({
+            data: params
+        }, endofpostsnode, function (r) {
+            callbackMorePostsLoaded(r);
+        });
+    }
+
+    /** callback after more posts were loaded*/
+    function callbackMorePostsLoaded(responsedata) {
+
+        // ...appendposts.
+        var node = Y.Node.create(responsedata.postshtml);
+        endofpostsnode.insert(node, 'before');
+
+        // ...adapt counts.
+        data.postsloaded = responsedata.postsloaded;
+        data.poststotal = responsedata.poststotal;
+        var counttotalpost = M.str.format_socialwall.counttotalpost.replace('{$a->count}', data.postsloaded).replace('{$a->total}', data.poststotal);
+        Y.one('#counttotalpost').setHTML(counttotalpost);
+
+        loading = false;
+    }
+
+    /** lock posts has changed */
+    function onClickLockPost(linknode) {
+
+        var params = {};
+
+        params.courseid = data.courseid;
+        params.action = "lockpost";
+        params.sesskey = M.cfg.sesskey;
+        params.postid = linknode.get('id').split('_')[1];
+        params.locked = Number(!linknode.hasClass('locked'));
+
+        doSubmit({
+            data: params
+        }, linknode, function (r) {
+            callbackPostLocked(r);
+        });
+    }
+
+    /** callback after post lock chage is saved. */
+    function callbackPostLocked(responsedata) {
+
+        var showlink = Y.one('#showcommentform_' + responsedata.postid + '_0');
+        var linknode = Y.one('#lockpost_' + responsedata.postid);
+        var icon = linknode.one('*');
+
+        if (responsedata.locked == '1') {
+
+            showlink.hide();
+            Y.one('#tlcommentformwrap_' + responsedata.postid + '_0').hide();
+            linknode.replaceClass('unlocked', 'locked');
+            icon.set('src', M.util.image_url('lockedpost', 'format_socialwall'));
+
+        } else {
+
+            showlink.show();
+            linknode.replaceClass('locked', 'unlocked');
+            M.util.image_url('unlockedpost', 'format_socialwall');
+            icon.set('src', M.util.image_url('unlockedpost', 'format_socialwall'));
+        }
+    }
+
+    function onClickPostComment(postbutton) {
+
+        var postid = postbutton.get('id').split('_')[1];
+        var replycommentid = postbutton.get('id').split('_')[2];
+        var text = Y.one('#commenttext_' + postid + '_' + replycommentid).get('value');
+
+        if (!text) {
+            alert(M.str.format_socialwall.textrequired);
+            return false;
+        }
+
+        var formobject = {
+            id: 'tlcommentform_' + postid + '_' + replycommentid,
+            useDisabled: true
+        };
+        doSubmit({
+            form: formobject
+        }, postbutton, function (r) {
+            callbackCommentPosted(r);
+        });
+    }
+
+    function updatePostCounts(responsedata) {
+
+        var countcomments = Y.one('#tlcountcomments_' + responsedata.postid);
+        if (countcomments) {
+            countcomments.setHTML(M.str.format_socialwall.countcomments.replace('{$a}', responsedata.countcomments));
+        }
+
+        var countlikes = Y.one('#tlcountlikes_' + responsedata.postid);
+        if (countlikes) {
+            countlikes.setHTML(M.str.format_socialwall.countlikes.replace('{$a}', responsedata.countlikes));
+        }
+    }
+
+    function callbackCommentPosted(responsedata) {
+
+        var commentidentifier = responsedata.postid + '_' + responsedata.replycommentid;
+
+        Y.one('#commenttext_' + commentidentifier).set('value', '');
+        Y.one('#tlcommentformwrap_' + commentidentifier).hide();
+
+        // get commentslist.
+        var commentnode = Y.Node.create(responsedata.commenthtml);
+        Y.one('#tlcomments_' + commentidentifier).prepend(commentnode);
+        updatePostCounts(responsedata);
+    }
+
+    function onClickLoadAllComments(linknode) {
+
+        var params = {};
+
+        params.courseid = data.courseid;
+        params.action = 'showallcomments';
+        params.sesskey = M.cfg.sesskey;
+        params.postid = linknode.get('id').split('_')[1];
+
+        doSubmit({
+            data: params
+        }, linknode, function (r) {
+            callbackAllCommentsLoaded(r);
+        });
+    }
+
+    function callbackAllCommentsLoaded(responsedata) {
+
+        // get commentslist.
+        Y.one('#tlcomments_' + responsedata.postid + '_0').setHTML(responsedata.commentshtml);
+        Y.one('#tlshowall_' + responsedata.postid).hide();
+    }
+
+    function onClickLoadAllReplies(linknode) {
+
+        var params = {};
+
+        params.courseid = data.courseid;
+        params.action = 'showallreplies';
+        params.sesskey = M.cfg.sesskey;
+        params.replycommentid = linknode.get('id').split('_')[1];
+
+        doSubmit({
+            data: params
+        }, linknode, function (r) {
+            callbackAllRepliesLoaded(r);
+        });
+    }
+
+    function callbackAllRepliesLoaded(responsedata) {
+
+        // get replieslist.
+        Y.one('#tlcomments_' + responsedata.postid + '_' + responsedata.replycommentid).setHTML(responsedata.replieshtml);
+        Y.one('#tlshowallreplies_' + responsedata.replycommentid).hide();
+    }
+
+    function onClickLoadAllDiscussions(linknode) {
+
+        var params = {};
+
+        params.courseid = data.courseid;
+        params.action = 'showalldiscussions';
+        params.sesskey = M.cfg.sesskey;
+        params.postid = linknode.get('id').split('_')[1];
+
+        doSubmit({
+            data: params
+        }, linknode, function (r) {
+            callbackAllDiscussionsLoaded(r);
+        });
+    }
+
+    function callbackAllDiscussionsLoaded(responsedata) {
+
+        var commentsnode = Y.one('#tlcomments_' + responsedata.postid + '_0');
+
+        if (!commentsnode) {
+            return false;
+        }
+
+        // get replieslist.
+        Y.one('#tlcomments_' + responsedata.postid + '_0').setHTML(responsedata.commentshtml);
+
+        var showallcomments = Y.one('#tlcomments_' + responsedata.postid + '_0 .tl-showall');
+        if (showallcomments) {
+            showallcomments.hide();
+        }
+
+        var showalllink = Y.one('#tlshowall_' + responsedata.postid);
+        if (showalllink) {
+            Y.one('#tlshowall_' + responsedata.postid).hide();
+        }
+
+        return true;
+    }
+
+    function deleteComment(linknode) {
+
+        var params = {};
+
+        params.courseid = data.courseid;
+        params.action = 'deletecomment';
+        params.sesskey = M.cfg.sesskey;
+        params.cid = linknode.get('id').split('_')[1];
+
+        doSubmit({
+            data: params
+        }, linknode, function (r) {
+            callbackCommentDeleted(r);
+        });
+    }
+
+    function onClickDeleteComment(linknode) {
+
+        var confirm = new M.core.confirm({
+            title: M.util.get_string('confirm', 'moodle'),
+            question: M.util.get_string('confirmdeletecomment', 'format_socialwall'),
+            yesLabel: M.util.get_string('yes', 'moodle'),
+            noLabel: M.util.get_string('cancel', 'moodle')
+        });
+
+        confirm.on('complete-yes', function () {
+            confirm.hide();
+            confirm.destroy();
+            deleteComment(linknode);
+        });
+        confirm.show();
+    }
+
+    function callbackCommentDeleted(responsedata) {
+
+        Y.one('#tlcomment_' + responsedata.commentid).remove(true);
+        updatePostCounts(responsedata);
+    }
+
+    /** hide filemanger and show external file link */
+    function onAddaLinkClick() {
+        Y.one('#externalurlwrapper').show();
+        fileswrapper.hide();
+        var fm = Y.one('#loadfilemanager');
+        if (fm) {
+            fm.set('value', '0');
+        }
+    }
+
+    /** hide externalurl edit and show filemanager*/
+    function onUploadfileClick() {
+        Y.one('#externalurlwrapper').hide();
+        fileswrapper.show();
+        var fm = Y.one('#loadfilemanager');
+        if (fm) {
+            fm.set('value', '1');
+        }
+    }
+
+    /** gather all attached moduleids and set value of cmsequence */
+    function onSubmit() {
+
+        var section = Y.one('#section-2');
+        var recentmodulelist = Y.one('#attachedrecentactivities');
+
+        if ((!section) || (!recentmodulelist)) {
+            return false;
+        }
+
+        var moduleids = [];
+
+        // Gather new moduleids.
+        section.all('li[id^="module-"]').each(
+                function (node) {
+                    moduleids[moduleids.length] = node.get('id').split('-')[1];
+                }
+        );
+
+        // Gather recent moduleids.
+        recentmodulelist.all('label[for^="module_"]').each(
+                function (node) {
+                    moduleids[moduleids.length] = node.get('for').split('_')[1];
+                }
+        );
+
+        var cmsequence = moduleids.join(",");
+
+        Y.one('#cmsequence').set('value', cmsequence);
+        return true;
+    }
+
+    /** detect scrolling and load more posts */
+    function onScroll() {
+
+        var dist = window.innerHeight - (endofpostsnode.getY() - window.pageYOffset);
+
+        if (!loading && dist > 50) {
+
+            if (data.postsloaded < data.poststotal) {
+
+                // ... use loading as a semaphor to block concurrent requests.
+                loading = true;
+                onLoadMorePosts();
+            }
+        }
+    }
+
+    /** save the formstatus in the session to keep inputed values, this sould only work for
+     *  user, which are allowed to edit the page (i. e. add some activities).
+     */
+    function saveValuesInSession(syncrequest) {
+
+        // first check whether the user has inputed something in to formfields
+        var params = {};
+
+        params.posttext = Y.one('#posttext').get('value');
+        params.togroupid = Y.one('#id_togroupid').get('value');
+
+        var postelement = Y.one('#id_poststatus');
+        if (postelement) {
+            params.poststatus = postelement.get('value');
+        } else {
+            params.poststatus = 0;
+        }
+
+        params.postid = Y.one('#id').get('value');
+        params.courseid = data.courseid;
+        params.action = 'storeformparams';
+        params.sesskey = M.cfg.sesskey;
+
+        var url = M.cfg.wwwroot + '/course/format/socialwall/ajax.php';
+
+        Y.io(url, {
+            data: params,
+            sync: syncrequest
+        });
+
+    }
+
+    /** initialize all necessary objects */
+    function initialize() {
+
+        // ... delegate events for ajax loaded elements.
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            onClickLockPost(e.currentTarget);
+        }, 'a[id^="lockpost_"]');
+
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            onClickLikePost(e.target);
+        }, 'a[id^="userlike_"]');
+
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            onClickPostComment(e.target);
+        }, 'input[id^="postcomment_"]');
+
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            onClickLoadAllComments(e.target);
+        }, 'a[id^="tlshowall_"]');
+
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            onClickLoadAllReplies(e.target);
+        }, 'a[id^="tlshowallreplies_"]');
+
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            onClickLoadAllDiscussions(e.target);
+        }, 'a[id^="tlshowalldiscussions_"]');
+
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            onClickDeleteComment(e.currentTarget);
+        }, 'a[id^="tldeletecomment_"]');
+
+        Y.one('#tl-posts').delegate('click', function (e) {
+            e.preventDefault();
+            var postid = e.target.get('id').split('_') [1];
+            var replycommentid = e.target.get('id').split('_') [2];
+            Y.one('#tlcommentformwrap_' + postid + '_' + replycommentid).show();
+        }, 'a[id^="showcommentform_"]');
+
+        // ... not lazy loaded postform elements
+
+        var addlink = Y.one('#addalink');
+
+        if (addlink) {
+            addlink.on('click', function (e) {
+                e.preventDefault();
+                onAddaLinkClick();
+            });
+        }
+
+        fileswrapper = Y.one('#fileswrapper');
+
+        if (fileswrapper) {
+            Y.one('#uploadfile').on('click', function (e) {
+                e.preventDefault();
+                onUploadfileClick();
+            });
+        }
+
+        Y.one('#id_submitbutton').on('click', function () {
+            onSubmit();
+        });
+
+        // ...scrolling.
+        endofpostsnode = Y.one('#tl-endofposts');
+
+        Y.on('scroll', function () {
+            onScroll();
+        });
+
+        // no warnings, when leaving the page.
+        window.onbeforeunload = null;
+
+        Y.all('.section-modchooser-link').on('click',
+                function () {
+                    saveValuesInSession(false);
+                }
+        );
+
+        var posttext = Y.one('#posttext');
+        if (posttext) {
+            posttext.on('change',
+                    function () {
+                        saveValuesInSession(false);
+                    }
+            );
+        }
+
+        var togroupid = Y.one('#id_togroupid');
+        if (togroupid) {
+            togroupid.on('change',
+                    function () {
+                        saveValuesInSession(false);
+                    }
+            );
+        }
+
+        var poststatus = Y.one('#id_poststatus');
+        if (poststatus) {
+            poststatus.on('change',
+                    function () {
+                        saveValuesInSession(false);
+                    }
+            );
+        }
+    }
+
+    initialize();
+};
diff --git a/course/format/socialwall/yui/src/postform/meta/postform.json b/course/format/socialwall/yui/src/postform/meta/postform.json
new file mode 100644
index 0000000..5fd0803
--- /dev/null
+++ b/course/format/socialwall/yui/src/postform/meta/postform.json
@@ -0,0 +1,5 @@
+{
+    "moodle-format_socialwall-postform": {
+        "requires": ["base", "node", "io-form", "moodle-core-notification-confirm"]
+    }
+}
\ No newline at end of file
-- 
1.8.3.1

